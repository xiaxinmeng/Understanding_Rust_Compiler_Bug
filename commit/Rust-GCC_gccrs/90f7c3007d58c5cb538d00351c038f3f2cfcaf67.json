{"sha": "90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmN2MzMDA3ZDU4YzVjYjUzOGQwMDM1MWMwMzhmM2YyY2ZjYWY2Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-06T15:13:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-06T21:40:08Z"}, "message": "analyzer: improvements to region_model::get_representative_tree\n\nThis patch extends region_model::get_representative_tree so that dumps\nare able to refer to string literals, which I've found useful in\ninvestigating a state-bloat issue.\n\nDoing so uncovered a bug in the handling of views I introduced in\nr10-7024-ge516294a1acb28aaaad44cfd583cc6a80354044e where the code was\nerroneously using TREE_TYPE on the view region's type, rather than just\nusing its type, which the patch also fixes.\n\ngcc/analyzer/ChangeLog:\n\t* analyzer.h (class array_region): New forward decl.\n\t* program-state.cc (selftest::test_program_state_dumping_2): New.\n\t(selftest::analyzer_program_state_cc_tests): Call it.\n\t* region-model.cc (array_region::constant_from_key): New.\n\t(region_model::get_representative_tree): Handle region_svalue by\n\tgenerating an ADDR_EXPR.\n\t(region_model::get_representative_path_var): In view handling,\n\tremove erroneous TREE_TYPE when determining the type of the tree.\n\tHandle array regions and STRING_CST.\n\t(selftest::assert_dump_tree_eq): New.\n\t(ASSERT_DUMP_TREE_EQ): New macro.\n\t(selftest::test_get_representative_tree): New selftest.\n\t(selftest::analyzer_region_model_cc_tests): Call it.\n\t* region-model.h (region::dyn_cast_array_region): New vfunc.\n\t(array_region::dyn_cast_array_region): New vfunc implementation.\n\t(array_region::constant_from_key): New decl.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/malloc-4.c: Update expected output of leak to\n\treflect fix to region_model::get_representative_path_var, adding\n\tthe missing \"*\" from the cast.", "tree": {"sha": "fba68bd8f9bde2e35b792de9f1839fb073d08c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fba68bd8f9bde2e35b792de9f1839fb073d08c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f99ba6c576b84ca0f2de7d66ebc087454e93cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f99ba6c576b84ca0f2de7d66ebc087454e93cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f99ba6c576b84ca0f2de7d66ebc087454e93cf"}], "stats": {"total": 177, "additions": 172, "deletions": 5}, "files": [{"sha": "e51a1cdf56a0c030953402a47651ff92224cb013", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -1,3 +1,22 @@\n+2020-03-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (class array_region): New forward decl.\n+\t* program-state.cc (selftest::test_program_state_dumping_2): New.\n+\t(selftest::analyzer_program_state_cc_tests): Call it.\n+\t* region-model.cc (array_region::constant_from_key): New.\n+\t(region_model::get_representative_tree): Handle region_svalue by\n+\tgenerating an ADDR_EXPR.\n+\t(region_model::get_representative_path_var): In view handling,\n+\tremove erroneous TREE_TYPE when determining the type of the tree.\n+\tHandle array regions and STRING_CST.\n+\t(selftest::assert_dump_tree_eq): New.\n+\t(ASSERT_DUMP_TREE_EQ): New macro.\n+\t(selftest::test_get_representative_tree): New selftest.\n+\t(selftest::analyzer_region_model_cc_tests): Call it.\n+\t* region-model.h (region::dyn_cast_array_region): New vfunc.\n+\t(array_region::dyn_cast_array_region): New vfunc implementation.\n+\t(array_region::constant_from_key): New decl.\n+\n 2020-03-06  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (dump_quoted_tree): New decl."}, {"sha": "8d0d16979b970ebfd3fa7d10ad22ada371ef432e", "filename": "gcc/analyzer/analyzer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fanalyzer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fanalyzer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fanalyzer.h?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -43,6 +43,7 @@ class svalue;\n   class setjmp_svalue;\n class region;\n   class map_region;\n+  class array_region;\n   class symbolic_region;\n class region_model;\n class region_model_context;"}, {"sha": "24b6783d92a8713e1792a7a9c0d6e0c0c974b206", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -1467,6 +1467,51 @@ test_program_state_dumping ()\n \t\t  \"rmodel: p: &r2 malloc: {sv1: unchecked (`p')}\");\n }\n \n+/* Verify that program_state::dump_to_pp works for string literals.  */\n+\n+static void\n+test_program_state_dumping_2 ()\n+{\n+    /* Create a program_state for a global ptr \"p\" that points to\n+       a string constant.  */\n+  tree p = build_global_decl (\"p\", ptr_type_node);\n+\n+  tree string_cst_ptr = build_string_literal (4, \"foo\");\n+\n+  auto_delete_vec <state_machine> checkers;\n+  extrinsic_state ext_state (checkers);\n+\n+  program_state s (ext_state);\n+  region_model *model = s.m_region_model;\n+  region_id p_rid = model->get_lvalue (p, NULL);\n+  svalue_id str_sid = model->get_rvalue (string_cst_ptr, NULL);\n+  model->set_value (p_rid, str_sid, NULL);\n+\n+  ASSERT_DUMP_EQ\n+    (s, ext_state, false,\n+     \"rmodel: r0: {kind: `root', parent: null, sval: null}\\n\"\n+     \"|-globals: r1: {kind: `globals', parent: r0, sval: null, map: {`p': r2}}\\n\"\n+     \"|  `-`p': r2: {kind: `primitive', parent: r1, sval: sv3, type: `void *'}\\n\"\n+     \"|    |: sval: sv3: {type: `void *', &r4}\\n\"\n+     \"|    |: type: `void *'\\n\"\n+     \"`-r3: {kind: `array', parent: r0, sval: sv0, type: `const char[4]', array: {[0]: r4}}\\n\"\n+     \"  |: sval: sv0: {type: `const char[4]', `\\\"foo\\\"'}\\n\"\n+     \"  |: type: `const char[4]'\\n\"\n+     \"  `-[0]: r4: {kind: `primitive', parent: r3, sval: null, type: `const char'}\\n\"\n+     \"    |: type: `const char'\\n\"\n+     \"svalues:\\n\"\n+     \"  sv0: {type: `const char[4]', `\\\"foo\\\"'}\\n\"\n+     \"  sv1: {type: `int', `0'}\\n\"\n+     \"  sv2: {type: `const char *', &r4}\\n\"\n+     \"  sv3: {type: `void *', &r4}\\n\"\n+     \"constraint manager:\\n\"\n+     \"  equiv classes:\\n\"\n+     \"  constraints:\\n\");\n+\n+  ASSERT_DUMP_EQ (s, ext_state, true,\n+\t\t  \"rmodel: p: &\\\"foo\\\"[0]\");\n+}\n+\n /* Verify that program_states with identical sm-state can be merged,\n    and that the merged program_state preserves the sm-state.  */\n \n@@ -1570,6 +1615,7 @@ analyzer_program_state_cc_tests ()\n {\n   test_sm_state_map ();\n   test_program_state_dumping ();\n+  test_program_state_dumping_2 ();\n   test_program_state_merging ();\n   test_program_state_merging_2 ();\n }"}, {"sha": "87980e7c8cd319661cc5bd9789efe7cd2549ebbb", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 96, "deletions": 4, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -2494,6 +2494,16 @@ array_region::key_from_constant (tree cst)\n   return result;\n }\n \n+/* Convert array_region::key_t KEY into a tree constant.  */\n+\n+tree\n+array_region::constant_from_key (key_t key)\n+{\n+  tree array_type = get_type ();\n+  tree index_type = TYPE_DOMAIN (array_type);\n+  return build_int_cst (index_type, key);\n+}\n+\n /* class function_region : public map_region.  */\n \n /* Compare the fields of this function_region with OTHER, returning true\n@@ -5669,16 +5679,16 @@ region_model::add_new_malloc_region ()\n   return add_region (new symbolic_region (heap_rid, NULL_TREE, true));\n }\n \n-/* Attempt to return a tree that represents SID, or return NULL_TREE.\n-   Find the first region that stores the value (e.g. a local) and\n-   generate a representative tree for it.  */\n+/* Attempt to return a tree that represents SID, or return NULL_TREE.  */\n \n tree\n region_model::get_representative_tree (svalue_id sid) const\n {\n   if (sid.null_p ())\n     return NULL_TREE;\n \n+  /* Find the first region that stores the value (e.g. a local) and\n+     generate a representative tree for it.  */\n   unsigned i;\n   region *region;\n   FOR_EACH_VEC_ELT (m_regions, i, region)\n@@ -5689,6 +5699,18 @@ region_model::get_representative_tree (svalue_id sid) const\n \t  return pv.m_tree;\n       }\n \n+  /* Handle string literals and various other pointers.  */\n+  svalue *sval = get_svalue (sid);\n+  if (region_svalue *ptr_sval = sval->dyn_cast_region_svalue ())\n+    {\n+      region_id rid = ptr_sval->get_pointee ();\n+      path_var pv = get_representative_path_var (rid);\n+      if (pv.m_tree)\n+\treturn build1 (ADDR_EXPR,\n+\t\t       TREE_TYPE (sval->get_type ()),\n+\t\t       pv.m_tree);\n+    }\n+\n   return maybe_get_constant (sid);\n }\n \n@@ -5727,7 +5749,7 @@ region_model::get_representative_path_var (region_id rid) const\n \t  path_var parent_pv = get_representative_path_var (parent_rid);\n \t  if (parent_pv.m_tree && reg->get_type ())\n \t    return path_var (build1 (NOP_EXPR,\n-\t\t\t\t     TREE_TYPE (reg->get_type ()),\n+\t\t\t\t     reg->get_type (),\n \t\t\t\t     parent_pv.m_tree),\n \t\t\t     parent_pv.m_stack_depth);\n \t}\n@@ -5750,6 +5772,32 @@ region_model::get_representative_path_var (region_id rid) const\n \t}\n     }\n \n+  /* Handle elements within an array.  */\n+  if (array_region *array_reg = parent_region->dyn_cast_array_region ())\n+    {\n+      array_region::key_t key;\n+      if (array_reg->get_key_for_child_region (rid, &key))\n+\t{\n+\t  path_var parent_pv = get_representative_path_var (parent_rid);\n+\t  if (parent_pv.m_tree && reg->get_type ())\n+\t    {\n+\t      tree index = array_reg->constant_from_key (key);\n+\t      return path_var (build4 (ARRAY_REF,\n+\t\t\t\t       reg->get_type (),\n+\t\t\t\t       parent_pv.m_tree, index,\n+\t\t\t\t       NULL_TREE, NULL_TREE),\n+\t\t\t       parent_pv.m_stack_depth);\n+\t    }\n+\t}\n+    }\n+\n+  /* Handle string literals.  */\n+  svalue_id sid = reg->get_value_direct ();\n+  if (svalue *sval = get_svalue (sid))\n+    if (tree cst = sval->maybe_get_constant ())\n+      if (TREE_CODE (cst) == STRING_CST)\n+\treturn path_var (cst, 0);\n+\n   return path_var (NULL_TREE, 0);\n }\n \n@@ -7273,6 +7321,25 @@ assert_condition (const location &loc,\n   ASSERT_EQ_AT (loc, actual, expected);\n }\n \n+/* Implementation detail of ASSERT_DUMP_TREE_EQ.  */\n+\n+static void\n+assert_dump_tree_eq (const location &loc, tree t, const char *expected)\n+{\n+  auto_fix_quotes sentinel;\n+  pretty_printer pp;\n+  pp_format_decoder (&pp) = default_tree_printer;\n+  dump_tree (&pp, t);\n+  ASSERT_STREQ_AT (loc, pp_formatted_text (&pp), expected);\n+}\n+\n+/* Assert that dump_tree (T) is EXPECTED.  */\n+\n+#define ASSERT_DUMP_TREE_EQ(T, EXPECTED) \\\n+  SELFTEST_BEGIN_STMT\t\t\t\t\t\t\t\\\n+  assert_dump_tree_eq ((SELFTEST_LOCATION), (T), (EXPECTED)); \\\n+  SELFTEST_END_STMT\n+\n /* Implementation detail of ASSERT_DUMP_EQ.  */\n \n static void\n@@ -7321,6 +7388,30 @@ test_dump ()\n   ASSERT_DUMP_EQ (model, true, \"\");\n }\n \n+/* Verify that region_model::get_representative_tree works as expected.  */\n+\n+static void\n+test_get_representative_tree ()\n+{\n+  /* STRING_CST.  */\n+  {\n+    tree string_cst = build_string (4, \"foo\");\n+    region_model m;\n+    svalue_id str_sid = m.get_rvalue (string_cst, NULL);\n+    tree rep = m.get_representative_tree (str_sid);\n+    ASSERT_EQ (rep, string_cst);\n+  }\n+\n+  /* String literal.  */\n+  {\n+    tree string_cst_ptr = build_string_literal (4, \"foo\");\n+    region_model m;\n+    svalue_id str_sid = m.get_rvalue (string_cst_ptr, NULL);\n+    tree rep = m.get_representative_tree (str_sid);\n+    ASSERT_DUMP_TREE_EQ (rep, \"&\\\"foo\\\"[0]\");\n+  }\n+}\n+\n /* Verify that calling region_model::get_rvalue repeatedly on the same\n    tree constant retrieves the same svalue_id.  */\n \n@@ -8372,6 +8463,7 @@ analyzer_region_model_cc_tests ()\n {\n   test_tree_cmp_on_constants ();\n   test_dump ();\n+  test_get_representative_tree ();\n   test_unique_constants ();\n   test_svalue_equality ();\n   test_region_equality ();"}, {"sha": "c1fe592e30c364453a10b0b96ac06ec9d3c15b27", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -844,6 +844,7 @@ class region\n \n   virtual enum region_kind get_kind () const = 0;\n   virtual map_region *dyn_cast_map_region () { return NULL; }\n+  virtual array_region *dyn_cast_array_region () { return NULL; }\n   virtual const symbolic_region *dyn_cast_symbolic_region () const\n   { return NULL; }\n \n@@ -1354,6 +1355,7 @@ class array_region : public region\n   /* region vfuncs.  */\n   region *clone () const FINAL OVERRIDE;\n   enum region_kind get_kind () const FINAL OVERRIDE { return RK_ARRAY; }\n+  array_region *dyn_cast_array_region () { return this; }\n \n   region_id get_element (region_model *model,\n \t\t\t region_id this_rid,\n@@ -1400,6 +1402,7 @@ class array_region : public region\n   void validate (const region_model &model) const FINAL OVERRIDE;\n \n   static key_t key_from_constant (tree cst);\n+  tree constant_from_key (key_t key);\n \n  private:\n   static int key_cmp (const void *, const void *);"}, {"sha": "358d1ded7cba5346b9ffd0f78d2fcb27d02456b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -1,3 +1,9 @@\n+2020-03-06  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/malloc-4.c: Update expected output of leak to\n+\treflect fix to region_model::get_representative_path_var, adding\n+\tthe missing \"*\" from the cast.\n+\n 2020-03-06  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.target/aarch64/fmla_intrinsic_1.c: Check for correct lane syntax.\t"}, {"sha": "c9c275aa491109dfce39c3b5bff0ed1fefa24c70", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f7c3007d58c5cb538d00351c038f3f2cfcaf67/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-4.c?ref=90f7c3007d58c5cb538d00351c038f3f2cfcaf67", "patch": "@@ -17,4 +17,4 @@ void a5 (void)\n {\n   struct bar *qb = NULL;\n   hv (&qb);\n-} /* { dg-warning \"leak of '\\\\(struct foo\\\\)qb'\" } */\n+} /* { dg-warning \"leak of '\\\\(struct foo \\\\*\\\\)qb'\" } */"}]}