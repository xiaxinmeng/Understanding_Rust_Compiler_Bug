{"sha": "07e0fe3dae72cd27b073ea0fe857826b5e14475b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdlMGZlM2RhZTcyY2QyN2IwNzNlYTBmZTg1NzgyNmI1ZTE0NDc1Yg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2000-10-17T20:17:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2000-10-17T20:17:35Z"}, "message": "h8300.md: Remove an unnecessary zero_extend expander that is used when not optimizing.\n\n2000-10-17  Kazu Hirata  <kazu@hxi.com>\n\n\t* config/h8300/h8300.md: Remove an unnecessary zero_extend\n\texpander that is used when not optimizing.  Output a tab after\n\teach assembly insns.\n\nFrom-SVN: r36911", "tree": {"sha": "1373271cb2ac409f36ade3a5ef9fdff58f854b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1373271cb2ac409f36ade3a5ef9fdff58f854b7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07e0fe3dae72cd27b073ea0fe857826b5e14475b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e0fe3dae72cd27b073ea0fe857826b5e14475b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07e0fe3dae72cd27b073ea0fe857826b5e14475b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07e0fe3dae72cd27b073ea0fe857826b5e14475b/comments", "author": null, "committer": null, "parents": [{"sha": "10501d8f2f0419000b8c7b6852640d416385dd8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10501d8f2f0419000b8c7b6852640d416385dd8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10501d8f2f0419000b8c7b6852640d416385dd8c"}], "stats": {"total": 28, "additions": 8, "deletions": 20}, "files": [{"sha": "f542b85e95c7df2e20dfb45f314729f11facaf83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e0fe3dae72cd27b073ea0fe857826b5e14475b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e0fe3dae72cd27b073ea0fe857826b5e14475b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07e0fe3dae72cd27b073ea0fe857826b5e14475b", "patch": "@@ -1,3 +1,9 @@\n+2000-10-17  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.md: Remove an unnecessary zero_extend\n+\texpander that is used when not optimizing.  Output a tab after\n+\teach assembly insns.\n+\n 2000-10-17  Chandrakala Chavva  <cchavva@redhat.com>\n \n \t* gcc.c: New options --target-help."}, {"sha": "b7d146132f184dc24f90c61a27b2f4a575dd1012", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07e0fe3dae72cd27b073ea0fe857826b5e14475b/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07e0fe3dae72cd27b073ea0fe857826b5e14475b/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=07e0fe3dae72cd27b073ea0fe857826b5e14475b", "patch": "@@ -1634,24 +1634,6 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"\")))]\n   \"\"\n-  \"\n-{\n-  if (TARGET_H8300\n-      && GET_CODE (operands[1]) != CONST_INT\n-      && !optimize)\n-    {\n-      emit_insn (gen_zero_extendhisi2_h8300 (operands[0], operands[1]));\n-      DONE;\n-    }\n-}\")\n-\n-;; This is used when not optimizing.  It avoids severe code explosion\n-;; due to poor register allocation.\n-(define_expand \"zero_extendhisi2_h8300\"\n-  [(set (reg:HI 1) (match_operand:HI 1 \"general_operand\" \"\"))\n-   (set (reg:SI 0) (zero_extend:SI (reg:HI 1)))\n-   (set (match_operand:SI 0 \"general_operand\" \"\") (reg:SI 0))]\n-  \"TARGET_H8300\"\n   \"\")\n \n ;; %e prints the high part of a CONST_INT, not the low part.  Arggh.\n@@ -1661,8 +1643,8 @@\n   \"TARGET_H8300\"\n   \"@\n   sub.w\t%e0,%e0\n-  mov.w %f1,%f0\\;sub.w %e0,%e0\n-  mov.w %e1,%f0\\;sub.w %e0,%e0\"\n+  mov.w\t%f1,%f0\\;sub.w\t%e0,%e0\n+  mov.w\t%e1,%f0\\;sub.w\t%e0,%e0\"\n   [(set_attr \"length\" \"2,4,4\")\n    (set_attr \"cc\" \"clobber,clobber,clobber\")])\n "}]}