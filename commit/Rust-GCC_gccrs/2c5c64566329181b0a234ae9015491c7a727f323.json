{"sha": "2c5c64566329181b0a234ae9015491c7a727f323", "node_id": "C_kwDOANBUbNoAKDJjNWM2NDU2NjMyOTE4MWIwYTIzNGFlOTAxNTQ5MWM3YTcyN2YzMjM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-24T14:22:37Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-24T14:22:37Z"}, "message": "libiberty: remove FINAL and OVERRIDE from ansidecl.h\n\nlibiberty's ansidecl.h provides macros FINAL and OVERRIDE to allow\nvirtual functions to be labelled with the C++11 \"final\" and \"override\"\nspecifiers, but with empty implementations on pre-C++11 C++ compilers.\n\nWe've used the macros in many places in GCC, but as of as of GCC 11\nonwards GCC has required a C++11 compiler, such as GCC 4.8 or later.\nOn the assumption that any such compiler correctly implements \"final\"\nand \"override\", I've simplified GCC's codebase by replacing all uses of\nthe FINAL and OVERRIDE macros in GCC's source tree with the lower-case\nspecifiers (via commits r13-690-gff171cb13df671 and\nr13-716-g8473ef7be60443)\n\nThe macros are reportedly not used anywhere in binutils-gdb.\n\nThis patch completes this transition for GCC by eliminating the macros\nfrom ansidecl.h.\n\ninclude/ChangeLog:\n\t* ansidecl.h: Drop macros OVERRIDE and FINAL.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "62c4fbf09003d63ccdd01cc7c41e86826b86d343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c4fbf09003d63ccdd01cc7c41e86826b86d343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5c64566329181b0a234ae9015491c7a727f323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5c64566329181b0a234ae9015491c7a727f323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5c64566329181b0a234ae9015491c7a727f323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5c64566329181b0a234ae9015491c7a727f323/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8a25550dac458a2afd8d456540e94e060fa2384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a25550dac458a2afd8d456540e94e060fa2384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a25550dac458a2afd8d456540e94e060fa2384"}], "stats": {"total": 41, "additions": 0, "deletions": 41}, "files": [{"sha": "056a03ebb6e8cd98dce573a8864ec5bbfd61144f", "filename": "include/ansidecl.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5c64566329181b0a234ae9015491c7a727f323/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5c64566329181b0a234ae9015491c7a727f323/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=2c5c64566329181b0a234ae9015491c7a727f323", "patch": "@@ -321,47 +321,6 @@ So instead we use the macro below and test it against specific values.  */\n #define CONSTEXPR\n #endif\n \n-/* C++11 adds the ability to add \"override\" after an implementation of a\n-   virtual function in a subclass, to:\n-     (A) document that this is an override of a virtual function\n-     (B) allow the compiler to issue a warning if it isn't (e.g. a mismatch\n-         of the type signature).\n-\n-   Similarly, it allows us to add a \"final\" to indicate that no subclass\n-   may subsequently override the vfunc.\n-\n-   Provide OVERRIDE and FINAL as macros, allowing us to get these benefits\n-   when compiling with C++11 support, but without requiring C++11.\n-\n-   For gcc, use \"-std=c++11\" to enable C++11 support; gcc 6 onwards enables\n-   this by default (actually GNU++14).  */\n-\n-#if defined __cplusplus\n-# if __cplusplus >= 201103\n-   /* C++11 claims to be available: use it.  Final/override were only\n-      implemented in 4.7, though.  */\n-#  if GCC_VERSION < 4007\n-#   define OVERRIDE\n-#   define FINAL\n-#  else\n-#   define OVERRIDE override\n-#   define FINAL final\n-#  endif\n-# elif GCC_VERSION >= 4007\n-   /* G++ 4.7 supports __final in C++98.  */\n-#  define OVERRIDE\n-#  define FINAL __final\n-# else\n-   /* No C++11 support; leave the macros empty.  */\n-#  define OVERRIDE\n-#  define FINAL\n-# endif\n-#else\n-  /* No C++11 support; leave the macros empty.  */\n-# define OVERRIDE\n-# define FINAL\n-#endif\n-\n /* A macro to disable the copy constructor and assignment operator.\n    When building with C++11 and above, the methods are explicitly\n    deleted, causing a compile-time error if something tries to copy."}]}