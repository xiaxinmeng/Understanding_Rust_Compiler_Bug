{"sha": "6b6985baaec36fd175f986c1f8586acf6deb9daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2OTg1YmFhZWMzNmZkMTc1Zjk4NmMxZjg1ODZhY2Y2ZGViOWRhZg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-01-28T03:58:05Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-01-28T03:58:05Z"}, "message": "invoke.texi: Correct hyphenation of \"floating point\"...\n\n2012-01-28  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Correct hyphenation of \"floating point\",\n\t\"double precision\", and related terminology throughout the file.\n\nFrom-SVN: r183663", "tree": {"sha": "9b809924f2cb089e6715a398124af715dcf03697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b809924f2cb089e6715a398124af715dcf03697"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6985baaec36fd175f986c1f8586acf6deb9daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6985baaec36fd175f986c1f8586acf6deb9daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6985baaec36fd175f986c1f8586acf6deb9daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6985baaec36fd175f986c1f8586acf6deb9daf/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ea2d689b82ee9cf94004e802e01ecb160ad65d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ea2d689b82ee9cf94004e802e01ecb160ad65d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ea2d689b82ee9cf94004e802e01ecb160ad65d8"}], "stats": {"total": 283, "additions": 144, "deletions": 139}, "files": [{"sha": "4b8a211f91d3a4bd82abfaa4944402dbc472e7e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6985baaec36fd175f986c1f8586acf6deb9daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6985baaec36fd175f986c1f8586acf6deb9daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b6985baaec36fd175f986c1f8586acf6deb9daf", "patch": "@@ -1,3 +1,8 @@\n+2012-01-28  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi: Correct hyphenation of \"floating point\",\n+\t\"double precision\", and related terminology throughout the file.\n+\n 2012-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52006"}, {"sha": "c87ac99b2723d3ed92f89d5a58401aa9c45cbc95", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 139, "deletions": 139, "changes": 278, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6985baaec36fd175f986c1f8586acf6deb9daf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6985baaec36fd175f986c1f8586acf6deb9daf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b6985baaec36fd175f986c1f8586acf6deb9daf", "patch": "@@ -3835,7 +3835,7 @@ that are always out of bounds. This warning is enabled by @option{-Wall}.\n @item -Wno-div-by-zero\n @opindex Wno-div-by-zero\n @opindex Wdiv-by-zero\n-Do not warn about compile-time integer division by zero.  Floating point\n+Do not warn about compile-time integer division by zero.  Floating-point\n division by zero is not warned about, as it can be a legitimate way of\n obtaining infinities and NaNs.\n \n@@ -3868,7 +3868,7 @@ headers---for that, @option{-Wunknown-pragmas} must also be used.\n @item -Wfloat-equal\n @opindex Wfloat-equal\n @opindex Wno-float-equal\n-Warn if floating point values are used in equality comparisons.\n+Warn if floating-point values are used in equality comparisons.\n \n The idea behind this is that sometimes it is convenient (for the\n programmer) to consider floating-point values as approximations to\n@@ -3912,7 +3912,7 @@ A function-like macro that appears without arguments.\n The unary plus operator.\n \n @item\n-The @samp{U} integer constant suffix, or the @samp{F} or @samp{L} floating point\n+The @samp{U} integer constant suffix, or the @samp{F} or @samp{L} floating-point\n constant suffixes.  (Traditional C does support the @samp{L} suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n headers of most modern systems, e.g.@: the @samp{_MIN}/@samp{_MAX} macros in @code{<limits.h>}.\n@@ -3955,7 +3955,7 @@ initializer warnings and relies on default initialization to zero in the\n traditional C case.\n \n @item\n-Conversions by prototypes between fixed/floating point values and vice\n+Conversions by prototypes between fixed/floating-point values and vice\n versa.  The absence of these prototypes when compiling with traditional\n C would cause serious problems.  This is a subset of the possible\n conversion warnings, for the full set use @option{-Wtraditional-conversion}.\n@@ -3976,7 +3976,7 @@ traditional C compatibility.\n Warn if a prototype causes a type conversion that is different from what\n would happen to the same argument in the absence of a prototype.  This\n includes conversions of fixed point to floating and vice versa, and\n-conversions changing the width or signedness of a fixed point argument\n+conversions changing the width or signedness of a fixed-point argument\n except when the same as the default promotion.\n \n @item -Wdeclaration-after-statement @r{(C and Objective-C only)}\n@@ -6451,7 +6451,7 @@ optimization is turned on, use the @option{-fno-keep-static-consts} option.\n \n @item -fmerge-constants\n @opindex fmerge-constants\n-Attempt to merge identical constants (string constants and floating point\n+Attempt to merge identical constants (string constants and floating-point\n constants) across compilation units.\n \n This option is the default for optimized compilation if the assembler and\n@@ -6466,7 +6466,7 @@ Attempt to merge identical constants and identical variables.\n \n This option implies @option{-fmerge-constants}.  In addition to\n @option{-fmerge-constants} this considers e.g.@: even constant initialized\n-arrays or initialized constant variables with integral or floating point\n+arrays or initialized constant variables with integral or floating-point\n types.  Languages like C or C++ require each variable, including multiple\n instances of the same variable in recursive calls, to have distinct locations,\n so using this option will result in non-conforming\n@@ -6808,7 +6808,7 @@ If supported for the target machine, attempt to reorder instructions to\n eliminate execution stalls due to required data being unavailable.  This\n helps machines that have slow floating point or memory load instructions\n by allowing other instructions to be issued until the result of the load\n-or floating point instruction is required.\n+or floating-point instruction is required.\n \n Enabled at levels @option{-O2}, @option{-O3}.\n \n@@ -8066,18 +8066,18 @@ If @var{path} is specified, GCC will look at the @var{path} to find\n the profile feedback data files. See @option{-fprofile-dir}.\n @end table\n \n-The following options control compiler behavior regarding floating\n-point arithmetic.  These options trade off between speed and\n+The following options control compiler behavior regarding floating-point \n+arithmetic.  These options trade off between speed and\n correctness.  All must be specifically enabled.\n \n @table @gcctabopt\n @item -ffloat-store\n @opindex ffloat-store\n-Do not store floating point variables in registers, and inhibit other\n-options that might change whether a floating point value is taken from a\n+Do not store floating-point variables in registers, and inhibit other\n+options that might change whether a floating-point value is taken from a\n register or memory.\n \n-@cindex floating point precision\n+@cindex floating-point precision\n This option prevents undesirable excess precision on machines such as\n the 68000 where the floating registers (of the 68881) keep more\n precision than a @code{double} is supposed to have.  Similarly for the\n@@ -8208,7 +8208,7 @@ The default is @option{-fno-finite-math-only}.\n \n @item -fno-signed-zeros\n @opindex fno-signed-zeros\n-Allow optimizations for floating point arithmetic that ignore the\n+Allow optimizations for floating-point arithmetic that ignore the\n signedness of zero.  IEEE arithmetic specifies the behavior of\n distinct +0.0 and @minus{}0.0 values, which then prohibits simplification\n of expressions such as x+0.0 or 0.0*x (even with @option{-ffinite-math-only}).\n@@ -8233,13 +8233,13 @@ The default is @option{-ftrapping-math}.\n \n @item -frounding-math\n @opindex frounding-math\n-Disable transformations and optimizations that assume default floating\n-point rounding behavior.  This is round-to-zero for all floating point\n+Disable transformations and optimizations that assume default floating-point\n+rounding behavior.  This is round-to-zero for all floating point\n to integer conversions, and round-to-nearest for all other arithmetic\n truncations.  This option should be specified for programs that change\n the FP rounding mode dynamically, or that may be executed with a\n non-default rounding mode.  This option disables constant folding of\n-floating point expressions at compile-time (which may be affected by\n+floating-point expressions at compile time (which may be affected by\n rounding mode) and arithmetic transformations that are unsafe in the\n presence of sign-dependent rounding modes.\n \n@@ -8268,8 +8268,8 @@ disable all GCC optimizations that affect signaling NaN behavior.\n \n @item -fsingle-precision-constant\n @opindex fsingle-precision-constant\n-Treat floating point constant as single precision constant instead of\n-implicitly converting it to double precision constant.\n+Treat floating-point constants as single precision instead of\n+implicitly converting them to double-precision constants.\n \n @item -fcx-limited-range\n @opindex fcx-limited-range\n@@ -10379,7 +10379,7 @@ Emit @var{num} nops before every other generated instruction.\n \n @item -mno-soft-cmpsf\n @opindex mno-soft-cmpsf\n-For single-precision floating point comparisons, emit an fsub instruction\n+For single-precision floating-point comparisons, emit an fsub instruction\n and test the flags.  This is faster than a software comparison, but can\n get incorrect results in the presence of NaNs, or when two different small\n numbers are compared such that their difference is calculated as zero.\n@@ -10426,8 +10426,8 @@ are in effect.\n \n @item -mfp-mode=@var{mode}\n @opindex mfp-mode\n-Set the prevailing mode of the floating point unit.\n-This determines the floating point mode that is provided and expected\n+Set the prevailing mode of the floating-point unit.\n+This determines the floating-point mode that is provided and expected\n at function call and return time.  Making this mode match the mode you\n predominantly need at function start can make your programs smaller and\n faster by avoiding unnecessary mode switches.\n@@ -10446,12 +10446,12 @@ mode switching that might be needed, compared with what would be needed\n with a more specific choice of prevailing FPU mode.\n \n @item truncate\n-This is the mode used for floating point calculations with\n+This is the mode used for floating-point calculations with\n truncating (i.e.@: round towards zero) rounding mode.  That includes\n conversion from floating point to integer.\n \n @item round-nearest\n-This is the mode used for floating point calculations with\n+This is the mode used for floating-point calculations with\n round-to-nearest-or-even rounding mode.\n \n @item int\n@@ -10541,9 +10541,9 @@ system is required to provide these functions.  The default is\n @c not currently implemented\n @item -mapcs-float\n @opindex mapcs-float\n-Pass floating point arguments using the float point registers.  This is\n+Pass floating-point arguments using the floating-point registers.  This is\n one of the variants of the APCS@.  This option is recommended if the\n-target hardware has a floating point unit or if a lot of floating point\n+target hardware has a floating-point unit or if a lot of floating-point\n arithmetic is going to be performed by the code.  The default is\n @option{-mno-apcs-float}, since integer only code is slightly increased in\n size if @option{-mapcs-float} is used.\n@@ -10697,7 +10697,7 @@ unsuccessful the option has no effect.\n @opindex mfpu\n @opindex mfpe\n @opindex mfp\n-This specifies what floating point hardware (or hardware emulation) is\n+This specifies what floating-point hardware (or hardware emulation) is\n available on the target.  Permissible names are: @samp{fpa}, @samp{fpe2},\n @samp{fpe3}, @samp{maverick}, @samp{vfp}, @samp{vfpv3}, @samp{vfpv3-fp16},\n @samp{vfpv3-d16}, @samp{vfpv3-d16-fp16}, @samp{vfpv3xd}, @samp{vfpv3xd-fp16},\n@@ -10708,7 +10708,7 @@ available on the target.  Permissible names are: @samp{fpa}, @samp{fpe2},\n of GCC@.\n \n If @option{-msoft-float} is specified this specifies the format of\n-floating point values.\n+floating-point values.\n \n If the selected floating-point hardware includes the NEON extension\n (e.g. @option{-mfpu}=@samp{neon}), note that floating-point\n@@ -10791,8 +10791,8 @@ unless stack-checking is enabled, when R9 is used.\n Insert NOPs into the instruction stream to in order to work around\n problems with invalid Maverick instruction combinations.  This option\n is only valid if the @option{-mcpu=ep9312} option has been used to\n-enable generation of instructions for the Cirrus Maverick floating\n-point co-processor.  This option is not enabled by default, since the\n+enable generation of instructions for the Cirrus Maverick floating-point\n+co-processor.  This option is not enabled by default, since the\n problem is only present in older Maverick implementations.  The default\n can be re-enabled by use of the @option{-mno-cirrus-fix-invalid-insns}\n switch.\n@@ -11939,7 +11939,7 @@ required to have floating-point registers.\n @opindex mno-fp-regs\n Generate code that uses (does not use) the floating-point register set.\n @option{-mno-fp-regs} implies @option{-msoft-float}.  If the floating-point\n-register set is not used, floating point operands are passed in integer\n+register set is not used, floating-point operands are passed in integer\n registers as if they were integers and floating-point results are passed\n in @code{$0} instead of @code{$f0}.  This is a non-standard calling sequence,\n so any function with a floating-point argument or return value called by code\n@@ -11952,9 +11952,9 @@ and hence need not save and restore, any floating-point registers.\n @item -mieee\n @opindex mieee\n The Alpha architecture implements floating-point hardware optimized for\n-maximum performance.  It is mostly compliant with the IEEE floating\n-point standard.  However, for full compliance, software assistance is\n-required.  This option generates code fully IEEE compliant code\n+maximum performance.  It is mostly compliant with the IEEE floating-point\n+standard.  However, for full compliance, software assistance is\n+required.  This option generates code fully IEEE-compliant code\n @emph{except} that the @var{inexact-flag} is not maintained (see below).\n If this option is turned on, the preprocessor macro @code{_IEEE_FP} is\n defined during compilation.  The resulting code is less efficient but is\n@@ -12006,18 +12006,18 @@ of:\n \n @table @samp\n @item n\n-Normal IEEE rounding mode.  Floating point numbers are rounded towards\n+Normal IEEE rounding mode.  Floating-point numbers are rounded towards\n the nearest machine number or towards the even machine number in case\n of a tie.\n \n @item m\n Round towards minus infinity.\n \n @item c\n-Chopped rounding mode.  Floating point numbers are rounded towards zero.\n+Chopped rounding mode.  Floating-point numbers are rounded towards zero.\n \n @item d\n-Dynamic rounding mode.  A field in the floating point control register\n+Dynamic rounding mode.  A field in the floating-point control register\n (@var{fpcr}, see Alpha architecture reference manual) controls the\n rounding mode in effect.  The C library initializes this register for\n rounding towards plus infinity.  Thus, unless your program modifies the\n@@ -12026,26 +12026,26 @@ rounding towards plus infinity.  Thus, unless your program modifies the\n \n @item -mtrap-precision=@var{trap-precision}\n @opindex mtrap-precision\n-In the Alpha architecture, floating point traps are imprecise.  This\n+In the Alpha architecture, floating-point traps are imprecise.  This\n means without software assistance it is impossible to recover from a\n floating trap and program execution normally needs to be terminated.\n GCC can generate code that can assist operating system trap handlers\n-in determining the exact location that caused a floating point trap.\n+in determining the exact location that caused a floating-point trap.\n Depending on the requirements of an application, different levels of\n precisions can be selected:\n \n @table @samp\n @item p\n Program precision.  This option is the default and means a trap handler\n-can only identify which program caused a floating point exception.\n+can only identify which program caused a floating-point exception.\n \n @item f\n Function precision.  The trap handler can determine the function that\n-caused a floating point exception.\n+caused a floating-point exception.\n \n @item i\n Instruction precision.  The trap handler can determine the exact\n-instruction that caused a floating point exception.\n+instruction that caused a floating-point exception.\n @end table\n \n Other Alpha compilers provide the equivalent options called\n@@ -12106,7 +12106,7 @@ of the CPU on which GCC was built if none was specified.\n @itemx -mfloat-ieee\n @opindex mfloat-vax\n @opindex mfloat-ieee\n-Generate code that uses (does not use) VAX F and G floating point\n+Generate code that uses (does not use) VAX F and G floating-point\n arithmetic instead of IEEE single and double precision.\n \n @item -mexplicit-relocs\n@@ -12285,32 +12285,32 @@ command line.\n @item -mgpr-32\n @opindex mgpr-32\n \n-Only use the first 32 general purpose registers.\n+Only use the first 32 general-purpose registers.\n \n @item -mgpr-64\n @opindex mgpr-64\n \n-Use all 64 general purpose registers.\n+Use all 64 general-purpose registers.\n \n @item -mfpr-32\n @opindex mfpr-32\n \n-Use only the first 32 floating point registers.\n+Use only the first 32 floating-point registers.\n \n @item -mfpr-64\n @opindex mfpr-64\n \n-Use all 64 floating point registers\n+Use all 64 floating-point registers.\n \n @item -mhard-float\n @opindex mhard-float\n \n-Use hardware instructions for floating point operations.\n+Use hardware instructions for floating-point operations.\n \n @item -msoft-float\n @opindex msoft-float\n \n-Use library routines for floating point operations.\n+Use library routines for floating-point operations.\n \n @item -malloc-cc\n @opindex malloc-cc\n@@ -12336,12 +12336,12 @@ Do not use double word instructions.\n @item -mdouble\n @opindex mdouble\n \n-Use floating point double instructions.\n+Use floating-point double instructions.\n \n @item -mno-double\n @opindex mno-double\n \n-Do not use floating point double instructions.\n+Do not use floating-point double instructions.\n \n @item -mmedia\n @opindex mmedia\n@@ -12715,10 +12715,10 @@ of the conditional jump.\n \n @item -mdisable-fpregs\n @opindex mdisable-fpregs\n-Prevent floating point registers from being used in any manner.  This is\n-necessary for compiling kernels which perform lazy context switching of\n-floating point registers.  If you use this option and attempt to perform\n-floating point operations, the compiler will abort.\n+Prevent floating-point registers from being used in any manner.  This is\n+necessary for compiling kernels that perform lazy context switching of\n+floating-point registers.  If you use this option and attempt to perform\n+floating-point operations, the compiler aborts.\n \n @item -mdisable-indexing\n @opindex mdisable-indexing\n@@ -13052,27 +13052,27 @@ A deprecated synonym for @option{-mtune}.\n \n @item -mfpmath=@var{unit}\n @opindex mfpmath\n-Generate floating point arithmetics for selected unit @var{unit}.  The choices\n+Generate floating-point arithmetic for selected unit @var{unit}.  The choices\n for @var{unit} are:\n \n @table @samp\n @item 387\n-Use the standard 387 floating point coprocessor present majority of chips and\n-emulated otherwise.  Code compiled with this option will run almost everywhere.\n-The temporary results are computed in 80bit precision instead of precision\n-specified by the type resulting in slightly different results compared to most\n+Use the standard 387 floating-point coprocessor present on the majority of chips and\n+emulated otherwise.  Code compiled with this option runs almost everywhere.\n+The temporary results are computed in 80-bit precision instead of the precision\n+specified by the type, resulting in slightly different results compared to most\n of other chips.  See @option{-ffloat-store} for more detailed description.\n \n This is the default choice for i386 compiler.\n \n @item sse\n-Use scalar floating point instructions present in the SSE instruction set.\n+Use scalar floating-point instructions present in the SSE instruction set.\n This instruction set is supported by Pentium3 and newer chips, in the AMD line\n by Athlon-4, Athlon-xp and Athlon-mp chips.  The earlier version of SSE\n-instruction set supports only single precision arithmetics, thus the double and\n-extended precision arithmetics is still done using 387.  Later version, present\n-only in Pentium4 and the future AMD x86-64 chips supports double precision\n-arithmetics too.\n+instruction set supports only single-precision arithmetic, thus the double and\n+extended-precision arithmetic are still done using 387.  A later version, present\n+only in Pentium4 and the future AMD x86-64 chips, supports double-precision\n+arithmetic too.\n \n For the i386 compiler, you need to use @option{-march=@var{cpu-type}}, @option{-msse}\n or @option{-msse2} switches to enable SSE extensions and make this option\n@@ -13104,7 +13104,7 @@ not support @samp{intel}.\n @itemx -mno-ieee-fp\n @opindex mieee-fp\n @opindex mno-ieee-fp\n-Control whether or not the compiler uses IEEE floating point\n+Control whether or not the compiler uses IEEE floating-point\n comparisons.  These handle correctly the case where the result of a\n comparison is unordered.\n \n@@ -13117,8 +13117,8 @@ this can't be done directly in cross-compilation.  You must make your\n own arrangements to provide suitable library functions for\n cross-compilation.\n \n-On machines where a function returns floating point results in the 80387\n-register stack, some floating point opcodes may be emitted even if\n+On machines where a function returns floating-point results in the 80387\n+register stack, some floating-point opcodes may be emitted even if\n @option{-msoft-float} is used.\n \n @item -mno-fp-ret-in-387\n@@ -13274,7 +13274,7 @@ control word explicitly.\n \n Setting the rounding of floating-point operations to less than the default\n 80 bits can speed some programs by 2% or more.  Note that some mathematical\n-libraries assume that extended precision (80 bit) floating-point operations\n+libraries assume that extended-precision (80-bit) floating-point operations\n are enabled by default; routines in such libraries could suffer significant\n loss of accuracy, typically through so-called \"catastrophic cancellation\",\n when this option is used to set the precision to less than extended precision.\n@@ -13459,7 +13459,7 @@ This option will enable built-in functions, @code{__builtin_ia32_crc32qi},\n This option will enable GCC to use RCPSS and RSQRTSS instructions (and their\n vectorized variants RCPPS and RSQRTPS) with an additional Newton-Raphson step\n to increase precision instead of DIVSS and SQRTSS (and their vectorized\n-variants) for single precision floating point arguments.  These instructions\n+variants) for single-precision floating-point arguments.  These instructions\n are generated only when @option{-funsafe-math-optimizations} is enabled\n together with @option{-finite-math-only} and @option{-fno-trapping-math}.\n Note that while the throughput of the sequence is higher than the throughput\n@@ -13471,7 +13471,7 @@ Note that GCC implements @code{1.0f/sqrtf(@var{x})} in terms of RSQRTSS\n combination), and doesn't need @option{-mrecip}.\n \n Also note that GCC emits the above sequence with additional Newton-Raphson step\n-for vectorized single float division and vectorized @code{sqrtf(@var{x})}\n+for vectorized single-float division and vectorized @code{sqrtf(@var{x})}\n already with @option{-ffast-math} (or the above option combination), and\n doesn't need @option{-mrecip}.\n \n@@ -13830,17 +13830,17 @@ This is useful when compiling firmware code.\n \n @item -minline-float-divide-min-latency\n @opindex minline-float-divide-min-latency\n-Generate code for inline divides of floating point values\n+Generate code for inline divides of floating-point values\n using the minimum latency algorithm.\n \n @item -minline-float-divide-max-throughput\n @opindex minline-float-divide-max-throughput\n-Generate code for inline divides of floating point values\n+Generate code for inline divides of floating-point values\n using the maximum throughput algorithm.\n \n @item -mno-inline-float-divide\n @opindex mno-inline-float-divide\n-Do not generate inline code for divides of floating point values.\n+Do not generate inline code for divides of floating-point values.\n \n @item -minline-int-divide-min-latency\n @opindex minline-int-divide-min-latency\n@@ -14438,7 +14438,7 @@ in favor of the equivalent @option{-mcpu=5407}.\n @item -mcfv4e\n @opindex mcfv4e\n Generate output for a ColdFire V4e family CPU (e.g.@: 547x/548x).\n-This includes use of hardware floating point instructions.\n+This includes use of hardware floating-point instructions.\n The option is equivalent to @option{-mcpu=547x}, and is now\n deprecated in favor of that option.\n \n@@ -14883,7 +14883,7 @@ Use software emulation for floating point (default).\n \n @item -mhard-float\n @opindex mhard-float\n-Use hardware floating point instructions.\n+Use hardware floating-point instructions.\n \n @item -mmemcpy\n @opindex mmemcpy\n@@ -14935,11 +14935,11 @@ Use multiply high instructions for high part of 32x32 multiply.\n \n @item -mxl-float-convert\n @opindex mxl-float-convert\n-Use hardware floating point conversion instructions.\n+Use hardware floating-point conversion instructions.\n \n @item -mxl-float-sqrt\n @opindex mxl-float-sqrt\n-Use hardware floating point square root instruction.\n+Use hardware floating-point square root instruction.\n \n @item -mxl-mode-@var{app-model}\n Select application model @var{app-model}.  Valid models are\n@@ -15541,7 +15541,7 @@ instructions, as provided by the R4650 ISA@.\n @itemx -mno-fused-madd\n @opindex mfused-madd\n @opindex mno-fused-madd\n-Enable (disable) use of the floating point multiply-accumulate\n+Enable (disable) use of the floating-point multiply-accumulate\n instructions, when they are available.  The default is\n @option{-mfused-madd}.\n \n@@ -15637,7 +15637,7 @@ instructions are available instead.\n @opindex mfix-sb1\n Work around certain SB-1 CPU core errata.\n (This flag currently works around the SB-1 revision 2\n-``F1'' and ``F2'' floating point errata.)\n+``F1'' and ``F2'' floating-point errata.)\n \n @item -mr10k-cache-barrier=@var{setting}\n @opindex mr10k-cache-barrier\n@@ -16257,7 +16257,7 @@ condition register field instruction implemented on the POWER4\n processor and other processors that support the PowerPC V2.01\n architecture.\n The @option{-mpopcntb} option allows GCC to generate the popcount and\n-double precision FP reciprocal estimate instruction implemented on the\n+double-precision FP reciprocal estimate instruction implemented on the\n POWER5 processor and other processors that support the PowerPC V2.02\n architecture.\n The @option{-mpopcntd} option allows GCC to generate the popcount\n@@ -16270,11 +16270,11 @@ The @option{-mcmpb} option allows GCC to generate the compare bytes\n instruction implemented on the POWER6 processor and other processors\n that support the PowerPC V2.05 architecture.\n The @option{-mmfpgpr} option allows GCC to generate the FP move to/from\n-general purpose register instructions implemented on the POWER6X\n+general-purpose register instructions implemented on the POWER6X\n processor and other processors that support the extended PowerPC V2.05\n architecture.\n-The @option{-mhard-dfp} option allows GCC to generate the decimal floating\n-point instructions implemented on some POWER processors.\n+The @option{-mhard-dfp} option allows GCC to generate the decimal\n+floating-point instructions implemented on some POWER processors.\n \n The @option{-mpowerpc64} option allows GCC to generate the additional\n 64-bit instructions that are found in the full PowerPC64 architecture\n@@ -16460,18 +16460,18 @@ more direct access to the VSX instruction set.\n @item -mfloat-gprs=@var{yes/single/double/no}\n @itemx -mfloat-gprs\n @opindex mfloat-gprs\n-This switch enables or disables the generation of floating point\n-operations on the general purpose registers for architectures that\n+This switch enables or disables the generation of floating-point\n+operations on the general-purpose registers for architectures that\n support it.\n \n The argument @var{yes} or @var{single} enables the use of\n-single-precision floating point operations.\n+single-precision floating-point operations.\n \n The argument @var{double} enables the use of single and\n-double-precision floating point operations.\n+double-precision floating-point operations.\n \n-The argument @var{no} disables floating point operations on the\n-general purpose registers.\n+The argument @var{no} disables floating-point operations on the\n+general-purpose registers.\n \n This option is currently only available on the MPC854x.\n \n@@ -16543,7 +16543,7 @@ support routines.\n The AIX calling convention was extended but not initially documented to\n handle an obscure K&R C case of calling a function that takes the\n address of its arguments with fewer arguments than declared.  IBM XL\n-compilers access floating point arguments which do not fit in the\n+compilers access floating-point arguments that do not fit in the\n RSA from the stack when a subroutine is compiled without\n optimization.  Because always storing floating-point arguments on the\n stack is inefficient and rarely needed, this option is not enabled by\n@@ -16579,30 +16579,30 @@ is not supported.\n @opindex msoft-float\n @opindex mhard-float\n Generate code that does not use (uses) the floating-point register set.\n-Software floating point emulation is provided if you use the\n+Software floating-point emulation is provided if you use the\n @option{-msoft-float} option, and pass the option to GCC when linking.\n \n @item -msingle-float\n @itemx -mdouble-float\n @opindex msingle-float\n @opindex mdouble-float\n-Generate code for single or double-precision floating point operations.\n+Generate code for single- or double-precision floating-point operations.\n @option{-mdouble-float} implies @option{-msingle-float}.\n \n @item -msimple-fpu\n @opindex msimple-fpu\n-Do not generate sqrt and div instructions for hardware floating point unit.\n+Do not generate sqrt and div instructions for hardware floating-point unit.\n \n @item -mfpu\n @opindex mfpu\n-Specify type of floating point unit.  Valid values are @var{sp_lite}\n+Specify type of floating-point unit.  Valid values are @var{sp_lite}\n (equivalent to -msingle-float -msimple-fpu), @var{dp_lite} (equivalent\n to -mdouble-float -msimple-fpu), @var{sp_full} (equivalent to -msingle-float),\n and @var{dp_full} (equivalent to -mdouble-float).\n \n @item -mxilinx-fpu\n @opindex mxilinx-fpu\n-Perform optimizations for floating point unit on Xilinx PPC 405/440.\n+Perform optimizations for the floating-point unit on Xilinx PPC 405/440.\n \n @item -mmultiple\n @itemx -mno-multiple\n@@ -16655,10 +16655,10 @@ is enabled by default when targetting Power6 and disabled otherwise.\n @itemx -mno-fused-madd\n @opindex mfused-madd\n @opindex mno-fused-madd\n-Generate code that uses (does not use) the floating point multiply and\n+Generate code that uses (does not use) the floating-point multiply and\n accumulate instructions.  These instructions are generated by default\n-if hardware floating point is used.  The machine dependent\n-@option{-mfused-madd} option is now mapped to the machine independent\n+if hardware floating point is used.  The machine-dependent\n+@option{-mfused-madd} option is now mapped to the machine-independent\n @option{-ffp-contract=fast} option, and @option{-mno-fused-madd} is\n mapped to @option{-ffp-contract=off}.\n \n@@ -16864,12 +16864,12 @@ Disable Booke SPE ABI extensions for the current ABI@.\n \n @item -mabi=ibmlongdouble\n @opindex mabi=ibmlongdouble\n-Change the current ABI to use IBM extended precision long double.\n+Change the current ABI to use IBM extended-precision long double.\n This is a PowerPC 32-bit SYSV ABI option.\n \n @item -mabi=ieeelongdouble\n @opindex mabi=ieeelongdouble\n-Change the current ABI to use IEEE extended precision long double.\n+Change the current ABI to use IEEE extended-precision long double.\n This is a PowerPC 32-bit Linux ABI option.\n \n @item -mprototype\n@@ -16880,8 +16880,8 @@ On System V.4 and embedded PowerPC systems assume that all calls to\n variable argument functions are properly prototyped.  Otherwise, the\n compiler must insert an instruction before every non prototyped call to\n set or clear bit 6 of the condition code register (@var{CR}) to\n-indicate whether floating point values were passed in the floating point\n-registers in case the function takes a variable arguments.  With\n+indicate whether floating-point values were passed in the floating-point\n+registers in case the function takes variable arguments.  With\n @option{-mprototype}, only calls to prototyped variable argument functions\n will set or clear the bit.\n \n@@ -17062,7 +17062,7 @@ This option sets flags for both the preprocessor and linker.\n This option will enable GCC to use the reciprocal estimate and\n reciprocal square root estimate instructions with additional\n Newton-Raphson steps to increase precision instead of doing a divide or\n-square root and divide for floating point arguments.  You should use\n+square root and divide for floating-point arguments.  You should use\n the @option{-ffast-math} option when using @option{-mrecip} (or at\n least @option{-funsafe-math-optimizations},\n @option{-finite-math-only}, @option{-freciprocal-math} and\n@@ -17081,26 +17081,26 @@ be preceded by a @code{!} to invert the option:\n @code{default}: enable the default instructions, equivalent to @option{-mrecip},\n @code{none}: disable all estimate instructions, equivalent to @option{-mno-recip};\n @code{div}: enable the reciprocal approximation instructions for both single and double precision;\n-@code{divf}: enable the single precision reciprocal approximation instructions;\n-@code{divd}: enable the double precision reciprocal approximation instructions;\n+@code{divf}: enable the single-precision reciprocal approximation instructions;\n+@code{divd}: enable the double-precision reciprocal approximation instructions;\n @code{rsqrt}: enable the reciprocal square root approximation instructions for both single and double precision;\n-@code{rsqrtf}: enable the single precision reciprocal square root approximation instructions;\n-@code{rsqrtd}: enable the double precision reciprocal square root approximation instructions;\n+@code{rsqrtf}: enable the single-precision reciprocal square root approximation instructions;\n+@code{rsqrtd}: enable the double-precision reciprocal square root approximation instructions;\n \n So for example, @option{-mrecip=all,!rsqrtd} would enable the\n all of the reciprocal estimate instructions, except for the\n @code{FRSQRTE}, @code{XSRSQRTEDP}, and @code{XVRSQRTEDP} instructions\n-which handle the double precision reciprocal square root calculations.\n+which handle the double-precision reciprocal square root calculations.\n \n @item -mrecip-precision\n @itemx -mno-recip-precision\n @opindex mrecip-precision\n Assume (do not assume) that the reciprocal estimate instructions\n-provide higher precision estimates than is mandated by the powerpc\n+provide higher-precision estimates than is mandated by the PowerPC\n ABI.  Selecting @option{-mcpu=power6} or @option{-mcpu=power7}\n-automatically selects @option{-mrecip-precision}.  The double\n-precision square root estimate instructions are not generated by\n-default on low precision machines, since they do not provide an\n+automatically selects @option{-mrecip-precision}.  The double-precision \n+square root estimate instructions are not generated by\n+default on low-precision machines, since they do not provide an\n estimate that converges after three steps.\n \n @item -mveclibabi=@var{type}\n@@ -17132,9 +17132,9 @@ libraries will have to be specified at link time.\n @opindex mfriz\n Generate (do not generate) the @code{friz} instruction when the\n @option{-funsafe-math-optimizations} option is used to optimize\n-rounding a floating point value to 64-bit integer and back to floating\n+rounding of floating-point values to 64-bit integer and back to floating\n point.  The @code{friz} instruction does not return the same value if\n-the floating point number is too large to fit in an integer.\n+the floating-point number is too large to fit in an integer.\n \n @item -mpointers-to-nested-functions\n @itemx -mno-pointers-to-nested-functions\n@@ -17170,9 +17170,9 @@ These command-line options are defined for RX targets:\n @itemx -m32bit-doubles\n @opindex m64bit-doubles\n @opindex m32bit-doubles\n-Make the @code{double} data type be 64-bits (@option{-m64bit-doubles})\n-or 32-bits (@option{-m32bit-doubles}) in size.  The default is\n-@option{-m32bit-doubles}.  @emph{Note} RX floating point hardware only\n+Make the @code{double} data type be 64 bits (@option{-m64bit-doubles})\n+or 32 bits (@option{-m32bit-doubles}) in size.  The default is\n+@option{-m32bit-doubles}.  @emph{Note} RX floating-point hardware only\n works on 32-bit values, which is why the default is\n @option{-m32bit-doubles}.\n \n@@ -17181,11 +17181,11 @@ works on 32-bit values, which is why the default is\n @opindex fpu\n @opindex nofpu\n Enables (@option{-fpu}) or disables (@option{-nofpu}) the use of RX\n-floating point hardware.  The default is enabled for the @var{RX600}\n+floating-point hardware.  The default is enabled for the @var{RX600}\n series and disabled for the @var{RX200} series.\n \n-Floating point instructions will only be generated for 32-bit floating\n-point values however, so if the @option{-m64bit-doubles} option is in\n+Floating-point instructions will only be generated for 32-bit floating-point \n+values however, so if the @option{-m64bit-doubles} option is in\n use then the FPU hardware will not be used for doubles.\n \n @emph{Note} If the @option{-fpu} option is enabled then\n@@ -17201,7 +17201,7 @@ the specific @var{RX610} CPU.  The default is @var{RX600}.\n The only difference between @var{RX600} and @var{RX610} is that the\n @var{RX610} does not support the @code{MVTIPL} instruction.\n \n-The @var{RX200} series does not have a hardware floating point unit\n+The @var{RX200} series does not have a hardware floating-point unit\n and so @option{-nofpu} is enabled by default when this type is\n selected.\n \n@@ -17495,7 +17495,7 @@ when compiling for the TPF OS@.\n @itemx -mno-fused-madd\n @opindex mfused-madd\n @opindex mno-fused-madd\n-Generate code that uses (does not use) the floating point multiply and\n+Generate code that uses (does not use) the floating-point multiply and\n accumulate instructions.  These instructions are generated by default if\n hardware floating point is used.\n \n@@ -17600,7 +17600,7 @@ that the floating-point unit is not used.\n @item -m2a-single-only\n @opindex m2a-single-only\n Generate code for the SH2a-FPU, in such a way that no double-precision\n-floating point operations are used.\n+floating-point operations are used.\n \n @item -m2a-single\n @opindex m2a-single\n@@ -17646,7 +17646,7 @@ floating-point unit is not used.\n @item -m4a-single-only\n @opindex m4a-single-only\n Generate code for the SH4a, in such a way that no double-precision\n-floating point operations are used.\n+floating-point operations are used.\n \n @item -m4a-single\n @opindex m4a-single\n@@ -17717,11 +17717,11 @@ Mark the @code{MAC} register as call-clobbered, even if\n \n @item -mieee\n @opindex mieee\n-Increase IEEE-compliance of floating-point code.\n+Increase IEEE compliance of floating-point code.\n At the moment, this is equivalent to @option{-fno-finite-math-only}.\n When generating 16 bit SH opcodes, getting IEEE-conforming results for\n comparisons of NANs / infinities incurs extra overhead in every\n-floating point comparison, therefore the default is set to\n+floating-point comparison, therefore the default is set to\n @option{-ffinite-math-only}.\n \n @item -minline-ic_invalidate\n@@ -17777,9 +17777,9 @@ one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call,\n inv:call2, inv:fp .\n \"fp\" performs the operation in floating point.  This has a very high latency,\n but needs only a few instructions, so it might be a good choice if\n-your code has enough easily exploitable ILP to allow the compiler to\n-schedule the floating point instructions together with other instructions.\n-Division by zero causes a floating point exception.\n+your code has enough easily-exploitable ILP to allow the compiler to\n+schedule the floating-point instructions together with other instructions.\n+Division by zero causes a floating-point exception.\n \"inv\" uses integer operations to calculate the inverse of the divisor,\n and then multiplies the dividend with the inverse.  This strategy allows\n cse and hoisting of the inverse calculation.  Division by zero calculates\n@@ -17956,7 +17956,7 @@ instructions (except for leaf functions).  This is the normal operating mode.\n @itemx -mhard-float\n @opindex mfpu\n @opindex mhard-float\n-Generate output containing floating point instructions.  This is the\n+Generate output containing floating-point instructions.  This is the\n default.\n \n @item -mno-fpu\n@@ -17969,7 +17969,7 @@ targets.  Normally the facilities of the machine's usual C compiler are\n used, but this cannot be done directly in cross-compilation.  You must make\n your own arrangements to provide suitable library functions for\n cross-compilation.  The embedded targets @samp{sparc-*-aout} and\n-@samp{sparclite-*-*} do provide software floating point support.\n+@samp{sparclite-*-*} do provide software floating-point support.\n \n @option{-msoft-float} changes the calling convention in the output file;\n therefore, it is only useful if you compile @emph{all} of a program with\n@@ -17979,17 +17979,17 @@ this to work.\n \n @item -mhard-quad-float\n @opindex mhard-quad-float\n-Generate output containing quad-word (long double) floating point\n+Generate output containing quad-word (long double) floating-point\n instructions.\n \n @item -msoft-quad-float\n @opindex msoft-quad-float\n Generate output containing library calls for quad-word (long double)\n-floating point instructions.  The functions called are those specified\n+floating-point instructions.  The functions called are those specified\n in the SPARC ABI@.  This is the default.\n \n As of this writing, there are no SPARC implementations that have hardware\n-support for the quad-word floating point instructions.  They all invoke\n+support for the quad-word floating-point instructions.  They all invoke\n a trap handler for one of these instructions, and then the trap handler\n emulates the effect of the instruction.  Because of the trap handler overhead,\n this is much slower than calling the ABI library routines.  Thus the\n@@ -18006,7 +18006,7 @@ alignment only if they are contained in another type, or if they have an\n absolute address.  Otherwise, it assumes they have 4 byte alignment.\n Specifying this option avoids some rare compatibility problems with code\n generated by other compilers.  It is not the default because it results\n-in a performance loss, especially for floating point code.\n+in a performance loss, especially for floating-point code.\n \n @item -mno-faster-structs\n @itemx -mfaster-structs\n@@ -18565,7 +18565,7 @@ will assemble with the GNU assembler.\n \n @item -mg\n @opindex mg\n-Output code for g-format floating point numbers instead of d-format.\n+Output code for G-format floating-point numbers instead of D-format.\n @end table\n \n @node VxWorks Options\n@@ -18785,8 +18785,8 @@ use exception handling.\n Generate code that allows trapping instructions to throw exceptions.\n Note that this requires platform-specific runtime support that does\n not exist everywhere.  Moreover, it only allows @emph{trapping}\n-instructions to throw exceptions, i.e.@: memory references or floating\n-point instructions.  It does not allow exceptions to be thrown from\n+instructions to throw exceptions, i.e.@: memory references or floating-point\n+instructions.  It does not allow exceptions to be thrown from\n arbitrary signal handlers such as @code{SIGALRM}.\n \n @item -funwind-tables"}]}