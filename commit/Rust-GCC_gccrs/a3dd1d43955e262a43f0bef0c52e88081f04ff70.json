{"sha": "a3dd1d43955e262a43f0bef0c52e88081f04ff70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkZDFkNDM5NTVlMjYyYTQzZjBiZWYwYzUyZTg4MDgxZjA0ZmY3MA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-11-23T15:53:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-23T15:53:22Z"}, "message": "expr.c (build_chill_function_call): Don't call a variadic function with a non-literal format string.\n\n        * expr.c (build_chill_function_call): Don't call a variadic\n        function with a non-literal format string.\n\n        * grant.c (write_spec_module): Likewise.\n\n        * parse.c (require, expect): Likewise.\n\n        * tasking.c (get_struct_type_name, get_struct_debug_type_name,\n        get_tasking_code_name, get_struct_variable_name,\n        get_process_wrapper_name, build_start_process): Likewise.\n\n        * typeck.c (valid_array_index_p): Likewise.\n\nFrom-SVN: r30640", "tree": {"sha": "02fe2cfb83a814f5b3795cc1e11ae0cca2597efd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02fe2cfb83a814f5b3795cc1e11ae0cca2597efd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3dd1d43955e262a43f0bef0c52e88081f04ff70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dd1d43955e262a43f0bef0c52e88081f04ff70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3dd1d43955e262a43f0bef0c52e88081f04ff70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3dd1d43955e262a43f0bef0c52e88081f04ff70/comments", "author": null, "committer": null, "parents": [{"sha": "de6e505ec71b678f2b3646b8d1ff51a288c939be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6e505ec71b678f2b3646b8d1ff51a288c939be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6e505ec71b678f2b3646b8d1ff51a288c939be"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "f7688a1be2ded9f809dadb3366243377d30ec518", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=a3dd1d43955e262a43f0bef0c52e88081f04ff70", "patch": "@@ -1,3 +1,18 @@\n+1999-11-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* expr.c (build_chill_function_call): Don't call a variadic\n+\tfunction with a non-literal format string.\n+\t\n+\t* grant.c (write_spec_module): Likewise.\n+\t\n+\t* parse.c (require, expect): Likewise.\n+\n+\t* tasking.c (get_struct_type_name, get_struct_debug_type_name,\n+\tget_tasking_code_name, get_struct_variable_name,\n+\tget_process_wrapper_name, build_start_process): Likewise.\n+\n+\t* typeck.c (valid_array_index_p): Likewise.\n+\n Sun Oct 31 22:33:33 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* Makefile.in (convert.o, typeck.o): Depend on output.h"}, {"sha": "e68f3a0b4211582e13b83d92d3d095cc767f8ed2", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=a3dd1d43955e262a43f0bef0c52e88081f04ff70", "patch": "@@ -2512,20 +2512,20 @@ build_chill_function_call (function, expr)\n  \n   if (valtail != 0 && TREE_VALUE (valtail) != void_type_node)\n     {\n-      const char *errstr = \"too many arguments to procedure\";\n       if (name)\n-\terror (\"%s `%s'\", errstr, IDENTIFIER_POINTER (name));\n+\terror (\"too many arguments to procedure `%s'\",\n+\t       IDENTIFIER_POINTER (name));\n       else\n-\terror (errstr);\n+\terror (\"too many arguments to procedure\");\n       return error_mark_node;\n     }\n   else if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n     {\n-      const char *errstr = \"too few arguments to procedure\";\n       if (name)\n-\terror (\"%s `%s'\", errstr, IDENTIFIER_POINTER (name));\n+\terror (\"too few arguments to procedure `%s'\",\n+\t       IDENTIFIER_POINTER (name));\n       else\n-\terror (errstr);\n+\terror (\"too few arguments to procedure\");\n       return error_mark_node;\n     }\n   "}, {"sha": "6fc357d93820c718c69e8c8d5556967172692d84", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=a3dd1d43955e262a43f0bef0c52e88081f04ff70", "patch": "@@ -2829,9 +2829,8 @@ really_grant_this (decl, granted_decls)\n \f\n /* Write a SPEC MODULE using the declarations in the list DECLS. */\n static int header_written = 0;\n-static const char *header_template =\n-\"--\\n-- WARNING: this file was generated by\\n\\\n--- GNUCHILL version %s\\n-- based on gcc version %s\\n--\\n\";\n+#define HEADER_TEMPLATE \"--\\n-- WARNING: this file was generated by\\n\\\n+-- GNUCHILL version %s\\n-- based on gcc version %s\\n--\\n\"\n \n void\n write_spec_module (decls, granted_decls)\n@@ -2850,8 +2849,8 @@ write_spec_module (decls, granted_decls)\n     {\n       hdr = (char*) alloca (strlen (gnuchill_version)\n \t\t\t    + strlen (version_string)\n-\t\t\t    + strlen (header_template) + 1);\n-      sprintf (hdr, header_template, gnuchill_version, version_string);\n+\t\t\t    + sizeof (HEADER_TEMPLATE) /* includes \\0 */);\n+      sprintf (hdr, HEADER_TEMPLATE, gnuchill_version, version_string);\n       APPEND (gstring, hdr);\n       header_written = 1;\n     }      "}, {"sha": "e3593df559c2779c6a7efcaa34a5b8a4b0e8ad1c", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=a3dd1d43955e262a43f0bef0c52e88081f04ff70", "patch": "@@ -332,11 +332,7 @@ require(token)\n      enum terminal token;\n {\n   if (PEEK_TOKEN() != token)\n-    {\n-      char buf[80];\n-      sprintf (buf, \"internal parser error - expected token %d\", (int)token);\n-      fatal(buf);\n-    }\n+    fatal (\"internal parser error - expected token %d\", (int)token);\n   FORWARD_TOKEN();\n }\n \n@@ -361,7 +357,7 @@ expect(token, message)\n   if (PEEK_TOKEN() != token)\n     {\n       if (pass == 1)\n-\terror(message ? message : \"syntax error\");\n+\terror(\"%s\", message ? message : \"syntax error\");\n       return 0;\n     }\n   else"}, {"sha": "265572fd5e9e3d7cf7a047b523dbfba72777c49c", "filename": "gcc/ch/tasking.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Ftasking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Ftasking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftasking.c?ref=a3dd1d43955e262a43f0bef0c52e88081f04ff70", "patch": "@@ -69,18 +69,19 @@ tree tasking_list = NULL_TREE;\n #define TASK_INFO_STUFF_TYPE(NODE) TREE_VEC_ELT(NODE,4)\n \n /* name template for process argument type */\n-static const char * struct_name = \"__tmp_%s_arg_type\";\n+#define STRUCT_NAME \"__tmp_%s_arg_type\"\n \n /* name template for process arguments for debugging type */\n-static const char * struct_debug_name = \"__tmp_%s_debug_type\";\n+#define STRUCT_DEBUG_NAME \"__tmp_%s_debug_type\"\n \n-#if 0\n /* name template for process argument variable */\n-static const char * data_name = \"__tmp_%s_arg_variable\";\n-#endif\n+#define DATA_NAME  \"__tmp_%s_arg_variable\"\n \n /* name template for process wrapper */\n-static const char * wrapper_name = \"__tmp_%s_wrapper\";\n+#define WRAPPER_NAME \"__tmp_%s_wrapper\"\n+\n+/* name template for process code */\n+#define SKELNAME \"__tmp_%s_code\"\n \n extern int ignoring;\n static tree void_ftype_void;\n@@ -92,9 +93,9 @@ get_struct_type_name (name)\n      tree name;\n {\n   const char *idp = IDENTIFIER_POINTER (name);        /* process name */\n-  char *tmpname = xmalloc (strlen (idp) + strlen (struct_name) + 1);\n+  char *tmpname = xmalloc (strlen (idp) + sizeof (STRUCT_NAME));\n \n-  sprintf (tmpname, struct_name, idp);\n+  sprintf (tmpname, STRUCT_NAME, idp);\n   return get_identifier (tmpname);\n }\n \n@@ -103,9 +104,9 @@ get_struct_debug_type_name (name)\n      tree name;\n {\n   const char *idp = IDENTIFIER_POINTER (name);        /* process name */\n-  char *tmpname = xmalloc (strlen (idp) + strlen (struct_debug_name) + 1);\n+  char *tmpname = xmalloc (strlen (idp) + sizeof (STRUCT_DEBUG_NAME));\n \n-  sprintf (tmpname, struct_debug_name, idp);\n+  sprintf (tmpname, STRUCT_DEBUG_NAME, idp);\n   return get_identifier (tmpname);\n }\n \n@@ -114,12 +115,11 @@ tree\n get_tasking_code_name (name)\n      tree name;\n {\n-  const char *skelname = \"__tmp_%s_code\";\n   const char *name_str = IDENTIFIER_POINTER (name);\n-  char *tmpname  = (char *)alloca (IDENTIFIER_LENGTH (name) +\n-\t\t\t\t   strlen (skelname) + 1);\n-\n-  sprintf (tmpname, skelname, name_str);\n+  char *tmpname  = (char *) alloca (IDENTIFIER_LENGTH (name) +\n+\t\t\t\t    sizeof (SKELNAME));\n+  \n+  sprintf (tmpname, SKELNAME, name_str);\n   return get_identifier (tmpname);\n }\n \n@@ -129,9 +129,9 @@ get_struct_variable_name (name)\n      tree name;\n {\n   const char *idp = IDENTIFIER_POINTER (name);        /* process name */\n-  char *tmpname = xmalloc (strlen (idp) + strlen (data_name) + 1);\n+  char *tmpname = xmalloc (strlen (idp) + sizeof (DATA_NAME));\n \n-  sprintf (tmpname, data_name, idp);\n+  sprintf (tmpname, DATA_NAME, idp);\n   return get_identifier (tmpname);\n }\n #endif\n@@ -141,9 +141,9 @@ get_process_wrapper_name (name)\n     tree name;\n {\n   const char *idp = IDENTIFIER_POINTER (name);\n-  char *tmpname = xmalloc (strlen (idp) + strlen (wrapper_name) + 1);\n+  char *tmpname = xmalloc (strlen (idp) + sizeof (WRAPPER_NAME));\n     \n-  sprintf (tmpname, wrapper_name, idp);\n+  sprintf (tmpname, WRAPPER_NAME, idp);\n   return get_identifier (tmpname);\n }\n \f\n@@ -627,19 +627,19 @@ build_start_process (process_name, copynum,\n   \n       if (valtail != 0 && TREE_VALUE (valtail) != void_type_node)\n \t{\n-\t  const char *errstr = \"too many arguments to process\";\n \t  if (process_name)\n-\t    error (\"%s `%s'\", errstr, IDENTIFIER_POINTER (process_name));\n+\t    error (\"too many arguments to process `%s'\",\n+\t\t   IDENTIFIER_POINTER (process_name));\n \t  else\n-\t    error (errstr);\n+\t    error (\"too many arguments to process\");\n \t}\n       else if (typetail != 0 && TREE_VALUE (typetail) != void_type_node)\n \t{\n-\t  const char *errstr = \"too few arguments to process\";\n \t  if (process_name)\n-\t    error (\"%s `%s'\", errstr, IDENTIFIER_POINTER (process_name));\n+\t    error (\"too few arguments to process `%s'\",\n+\t\t   IDENTIFIER_POINTER (process_name));\n \t  else\n-\t    error (errstr);\n+\t    error (\"too few arguments to process\");\n \t}\n       else\n       {"}, {"sha": "d6eeb2a66f12da8400c681b21b42a0b032e81c9e", "filename": "gcc/ch/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3dd1d43955e262a43f0bef0c52e88081f04ff70/gcc%2Fch%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Ftypeck.c?ref=a3dd1d43955e262a43f0bef0c52e88081f04ff70", "patch": "@@ -155,7 +155,7 @@ valid_array_index_p (array, idx, error_message, is_varying_lhs)\n     {\n       if (tree_int_cst_equal (cond, boolean_false_node))\n \treturn idx;       /* condition met at compile time */\n-      error (error_message); /* condition failed at compile time */\n+      error (\"%s\", error_message); /* condition failed at compile time */\n       return error_mark_node;\n     }\n   else if (range_checking)"}]}