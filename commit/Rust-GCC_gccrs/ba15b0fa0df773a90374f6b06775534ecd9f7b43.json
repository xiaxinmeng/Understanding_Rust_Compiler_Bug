{"sha": "ba15b0fa0df773a90374f6b06775534ecd9f7b43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmExNWIwZmEwZGY3NzNhOTAzNzRmNmIwNjc3NTUzNGVjZDlmN2I0Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-04T11:56:19Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-04T11:56:19Z"}, "message": "aarch64: Use the MUL VL form of SVE PRF[BHWD]\n\nThe expansions of the svprf[bhwd] instructions weren't taking\nadvantage of the immediate addressing mode.\n\ngcc/\n\t* config/aarch64/aarch64.c (offset_6bit_signed_scaled_p): New function.\n\t(offset_6bit_unsigned_scaled_p): Fix typo in comment.\n\t(aarch64_sve_prefetch_operand_p): Accept MUL VLs in the range\n\t[-32, 31].\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/asm/prfb.c: Test for a MUL VL range of\n\t[-32, 31].\n\t* gcc.target/aarch64/sve/acle/asm/prfh.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/prfw.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/prfd.c: Likewise.", "tree": {"sha": "3078cd44e0b40fd352c2e8e20578fc57d5f96404", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3078cd44e0b40fd352c2e8e20578fc57d5f96404"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba15b0fa0df773a90374f6b06775534ecd9f7b43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba15b0fa0df773a90374f6b06775534ecd9f7b43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba15b0fa0df773a90374f6b06775534ecd9f7b43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba15b0fa0df773a90374f6b06775534ecd9f7b43/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0926259f9fc21a7f1e09f45f8aede156ef249585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0926259f9fc21a7f1e09f45f8aede156ef249585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0926259f9fc21a7f1e09f45f8aede156ef249585"}], "stats": {"total": 205, "additions": 146, "deletions": 59}, "files": [{"sha": "a96b84cd927b44cbb650ae7fb4b7c7c0ad6f3db7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=ba15b0fa0df773a90374f6b06775534ecd9f7b43", "patch": "@@ -7436,7 +7436,18 @@ offset_4bit_signed_scaled_p (machine_mode mode, poly_int64 offset)\n \t  && IN_RANGE (multiple, -8, 7));\n }\n \n-/* Return true if OFFSET is a unsigned 6-bit value multiplied by the size\n+/* Return true if OFFSET is a signed 6-bit value multiplied by the size\n+   of MODE.  */\n+\n+static inline bool\n+offset_6bit_signed_scaled_p (machine_mode mode, poly_int64 offset)\n+{\n+  HOST_WIDE_INT multiple;\n+  return (constant_multiple_p (offset, GET_MODE_SIZE (mode), &multiple)\n+\t  && IN_RANGE (multiple, -32, 31));\n+}\n+\n+/* Return true if OFFSET is an unsigned 6-bit value multiplied by the size\n    of MODE.  */\n \n static inline bool\n@@ -18494,11 +18505,11 @@ bool\n aarch64_sve_prefetch_operand_p (rtx op, machine_mode mode)\n {\n   struct aarch64_address_info addr;\n-  if (!aarch64_classify_address (&addr, op, mode, false))\n+  if (!aarch64_classify_address (&addr, op, mode, false, ADDR_QUERY_ANY))\n     return false;\n \n   if (addr.type == ADDRESS_REG_IMM)\n-    return known_eq (addr.const_offset, 0);\n+    return offset_6bit_signed_scaled_p (mode, addr.const_offset);\n \n   return addr.type == ADDRESS_REG_REG;\n }"}, {"sha": "c90730a037ca22e14e11a1935b61480a391e787e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/prfb.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfb.c?ref=ba15b0fa0df773a90374f6b06775534ecd9f7b43", "patch": "@@ -200,33 +200,52 @@ TEST_PREFETCH (prfb_vnum_0, uint8_t,\n \n /*\n ** prfb_vnum_1:\n-**\tincb\tx0\n-**\tprfb\tpldl1keep, p0, \\[x0\\]\n+**\tprfb\tpldl1keep, p0, \\[x0, #1, mul vl\\]\n **\tret\n */\n TEST_PREFETCH (prfb_vnum_1, uint16_t,\n \t       svprfb_vnum (p0, x0, 1, SV_PLDL1KEEP),\n \t       svprfb_vnum (p0, x0, 1, SV_PLDL1KEEP))\n \n /*\n-** prfb_vnum_2:\n-**\tincb\tx0, all, mul #2\n-**\tprfb\tpldl1keep, p0, \\[x0\\]\n+** prfb_vnum_31:\n+**\tprfb\tpldl1keep, p0, \\[x0, #31, mul vl\\]\n **\tret\n */\n-TEST_PREFETCH (prfb_vnum_2, uint32_t,\n-\t       svprfb_vnum (p0, x0, 2, SV_PLDL1KEEP),\n-\t       svprfb_vnum (p0, x0, 2, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfb_vnum_31, uint16_t,\n+\t       svprfb_vnum (p0, x0, 31, SV_PLDL1KEEP),\n+\t       svprfb_vnum (p0, x0, 31, SV_PLDL1KEEP))\n \n /*\n-** prfb_vnum_3:\n-**\tincb\tx0, all, mul #3\n-**\tprfb\tpldl1keep, p0, \\[x0\\]\n+** prfb_vnum_32:\n+**\tcntd\t(x[0-9]+)\n+**\tlsl\t(x[0-9]+), \\1, #?8\n+**\tadd\t(x[0-9]+), (\\2, x0|x0, \\2)\n+**\tprfb\tpldl1keep, p0, \\[\\3\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfb_vnum_32, uint16_t,\n+\t       svprfb_vnum (p0, x0, 32, SV_PLDL1KEEP),\n+\t       svprfb_vnum (p0, x0, 32, SV_PLDL1KEEP))\n+\n+/*\n+** prfb_vnum_m32:\n+**\tprfb\tpldl1keep, p0, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfb_vnum_m32, uint16_t,\n+\t       svprfb_vnum (p0, x0, -32, SV_PLDL1KEEP),\n+\t       svprfb_vnum (p0, x0, -32, SV_PLDL1KEEP))\n+\n+/*\n+** prfb_vnum_m33:\n+**\t...\n+**\tprfb\tpldl1keep, p0, \\[x[0-9]+\\]\n **\tret\n */\n-TEST_PREFETCH (prfb_vnum_3, uint64_t,\n-\t       svprfb_vnum (p0, x0, 3, SV_PLDL1KEEP),\n-\t       svprfb_vnum (p0, x0, 3, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfb_vnum_m33, uint16_t,\n+\t       svprfb_vnum (p0, x0, -33, SV_PLDL1KEEP),\n+\t       svprfb_vnum (p0, x0, -33, SV_PLDL1KEEP))\n \n /*\n ** prfb_vnum_x1:"}, {"sha": "869ef3d3eebc76f9e3ffbfe6d6305bdfdf8ba49d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/prfd.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfd.c?ref=ba15b0fa0df773a90374f6b06775534ecd9f7b43", "patch": "@@ -200,33 +200,52 @@ TEST_PREFETCH (prfd_vnum_0, uint8_t,\n \n /*\n ** prfd_vnum_1:\n-**\tincb\tx0\n-**\tprfd\tpldl1keep, p0, \\[x0\\]\n+**\tprfd\tpldl1keep, p0, \\[x0, #1, mul vl\\]\n **\tret\n */\n TEST_PREFETCH (prfd_vnum_1, uint16_t,\n \t       svprfd_vnum (p0, x0, 1, SV_PLDL1KEEP),\n \t       svprfd_vnum (p0, x0, 1, SV_PLDL1KEEP))\n \n /*\n-** prfd_vnum_2:\n-**\tincb\tx0, all, mul #2\n-**\tprfd\tpldl1keep, p0, \\[x0\\]\n+** prfd_vnum_31:\n+**\tprfd\tpldl1keep, p0, \\[x0, #31, mul vl\\]\n **\tret\n */\n-TEST_PREFETCH (prfd_vnum_2, uint32_t,\n-\t       svprfd_vnum (p0, x0, 2, SV_PLDL1KEEP),\n-\t       svprfd_vnum (p0, x0, 2, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfd_vnum_31, uint16_t,\n+\t       svprfd_vnum (p0, x0, 31, SV_PLDL1KEEP),\n+\t       svprfd_vnum (p0, x0, 31, SV_PLDL1KEEP))\n \n /*\n-** prfd_vnum_3:\n-**\tincb\tx0, all, mul #3\n-**\tprfd\tpldl1keep, p0, \\[x0\\]\n+** prfd_vnum_32:\n+**\tcntd\t(x[0-9]+)\n+**\tlsl\t(x[0-9]+), \\1, #?8\n+**\tadd\t(x[0-9]+), (\\2, x0|x0, \\2)\n+**\tprfd\tpldl1keep, p0, \\[\\3\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfd_vnum_32, uint16_t,\n+\t       svprfd_vnum (p0, x0, 32, SV_PLDL1KEEP),\n+\t       svprfd_vnum (p0, x0, 32, SV_PLDL1KEEP))\n+\n+/*\n+** prfd_vnum_m32:\n+**\tprfd\tpldl1keep, p0, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfd_vnum_m32, uint16_t,\n+\t       svprfd_vnum (p0, x0, -32, SV_PLDL1KEEP),\n+\t       svprfd_vnum (p0, x0, -32, SV_PLDL1KEEP))\n+\n+/*\n+** prfd_vnum_m33:\n+**\t...\n+**\tprfd\tpldl1keep, p0, \\[x[0-9]+\\]\n **\tret\n */\n-TEST_PREFETCH (prfd_vnum_3, uint64_t,\n-\t       svprfd_vnum (p0, x0, 3, SV_PLDL1KEEP),\n-\t       svprfd_vnum (p0, x0, 3, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfd_vnum_m33, uint16_t,\n+\t       svprfd_vnum (p0, x0, -33, SV_PLDL1KEEP),\n+\t       svprfd_vnum (p0, x0, -33, SV_PLDL1KEEP))\n \n /*\n ** prfd_vnum_x1:"}, {"sha": "45a735eaea07d5264be2380d23e5eb51bfcc01ce", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/prfh.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfh.c?ref=ba15b0fa0df773a90374f6b06775534ecd9f7b43", "patch": "@@ -200,33 +200,52 @@ TEST_PREFETCH (prfh_vnum_0, uint8_t,\n \n /*\n ** prfh_vnum_1:\n-**\tincb\tx0\n-**\tprfh\tpldl1keep, p0, \\[x0\\]\n+**\tprfh\tpldl1keep, p0, \\[x0, #1, mul vl\\]\n **\tret\n */\n TEST_PREFETCH (prfh_vnum_1, uint16_t,\n \t       svprfh_vnum (p0, x0, 1, SV_PLDL1KEEP),\n \t       svprfh_vnum (p0, x0, 1, SV_PLDL1KEEP))\n \n /*\n-** prfh_vnum_2:\n-**\tincb\tx0, all, mul #2\n-**\tprfh\tpldl1keep, p0, \\[x0\\]\n+** prfh_vnum_31:\n+**\tprfh\tpldl1keep, p0, \\[x0, #31, mul vl\\]\n **\tret\n */\n-TEST_PREFETCH (prfh_vnum_2, uint32_t,\n-\t       svprfh_vnum (p0, x0, 2, SV_PLDL1KEEP),\n-\t       svprfh_vnum (p0, x0, 2, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfh_vnum_31, uint16_t,\n+\t       svprfh_vnum (p0, x0, 31, SV_PLDL1KEEP),\n+\t       svprfh_vnum (p0, x0, 31, SV_PLDL1KEEP))\n \n /*\n-** prfh_vnum_3:\n-**\tincb\tx0, all, mul #3\n-**\tprfh\tpldl1keep, p0, \\[x0\\]\n+** prfh_vnum_32:\n+**\tcntd\t(x[0-9]+)\n+**\tlsl\t(x[0-9]+), \\1, #?8\n+**\tadd\t(x[0-9]+), (\\2, x0|x0, \\2)\n+**\tprfh\tpldl1keep, p0, \\[\\3\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfh_vnum_32, uint16_t,\n+\t       svprfh_vnum (p0, x0, 32, SV_PLDL1KEEP),\n+\t       svprfh_vnum (p0, x0, 32, SV_PLDL1KEEP))\n+\n+/*\n+** prfh_vnum_m32:\n+**\tprfh\tpldl1keep, p0, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfh_vnum_m32, uint16_t,\n+\t       svprfh_vnum (p0, x0, -32, SV_PLDL1KEEP),\n+\t       svprfh_vnum (p0, x0, -32, SV_PLDL1KEEP))\n+\n+/*\n+** prfh_vnum_m33:\n+**\t...\n+**\tprfh\tpldl1keep, p0, \\[x[0-9]+\\]\n **\tret\n */\n-TEST_PREFETCH (prfh_vnum_3, uint64_t,\n-\t       svprfh_vnum (p0, x0, 3, SV_PLDL1KEEP),\n-\t       svprfh_vnum (p0, x0, 3, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfh_vnum_m33, uint16_t,\n+\t       svprfh_vnum (p0, x0, -33, SV_PLDL1KEEP),\n+\t       svprfh_vnum (p0, x0, -33, SV_PLDL1KEEP))\n \n /*\n ** prfh_vnum_x1:"}, {"sha": "444187f45d913142b234788f27dedea8b4e70a2a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/prfw.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba15b0fa0df773a90374f6b06775534ecd9f7b43/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fprfw.c?ref=ba15b0fa0df773a90374f6b06775534ecd9f7b43", "patch": "@@ -200,33 +200,52 @@ TEST_PREFETCH (prfw_vnum_0, uint8_t,\n \n /*\n ** prfw_vnum_1:\n-**\tincb\tx0\n-**\tprfw\tpldl1keep, p0, \\[x0\\]\n+**\tprfw\tpldl1keep, p0, \\[x0, #1, mul vl\\]\n **\tret\n */\n TEST_PREFETCH (prfw_vnum_1, uint16_t,\n \t       svprfw_vnum (p0, x0, 1, SV_PLDL1KEEP),\n \t       svprfw_vnum (p0, x0, 1, SV_PLDL1KEEP))\n \n /*\n-** prfw_vnum_2:\n-**\tincb\tx0, all, mul #2\n-**\tprfw\tpldl1keep, p0, \\[x0\\]\n+** prfw_vnum_31:\n+**\tprfw\tpldl1keep, p0, \\[x0, #31, mul vl\\]\n **\tret\n */\n-TEST_PREFETCH (prfw_vnum_2, uint32_t,\n-\t       svprfw_vnum (p0, x0, 2, SV_PLDL1KEEP),\n-\t       svprfw_vnum (p0, x0, 2, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfw_vnum_31, uint16_t,\n+\t       svprfw_vnum (p0, x0, 31, SV_PLDL1KEEP),\n+\t       svprfw_vnum (p0, x0, 31, SV_PLDL1KEEP))\n \n /*\n-** prfw_vnum_3:\n-**\tincb\tx0, all, mul #3\n-**\tprfw\tpldl1keep, p0, \\[x0\\]\n+** prfw_vnum_32:\n+**\tcntd\t(x[0-9]+)\n+**\tlsl\t(x[0-9]+), \\1, #?8\n+**\tadd\t(x[0-9]+), (\\2, x0|x0, \\2)\n+**\tprfw\tpldl1keep, p0, \\[\\3\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfw_vnum_32, uint16_t,\n+\t       svprfw_vnum (p0, x0, 32, SV_PLDL1KEEP),\n+\t       svprfw_vnum (p0, x0, 32, SV_PLDL1KEEP))\n+\n+/*\n+** prfw_vnum_m32:\n+**\tprfw\tpldl1keep, p0, \\[x0, #-32, mul vl\\]\n+**\tret\n+*/\n+TEST_PREFETCH (prfw_vnum_m32, uint16_t,\n+\t       svprfw_vnum (p0, x0, -32, SV_PLDL1KEEP),\n+\t       svprfw_vnum (p0, x0, -32, SV_PLDL1KEEP))\n+\n+/*\n+** prfw_vnum_m33:\n+**\t...\n+**\tprfw\tpldl1keep, p0, \\[x[0-9]+\\]\n **\tret\n */\n-TEST_PREFETCH (prfw_vnum_3, uint64_t,\n-\t       svprfw_vnum (p0, x0, 3, SV_PLDL1KEEP),\n-\t       svprfw_vnum (p0, x0, 3, SV_PLDL1KEEP))\n+TEST_PREFETCH (prfw_vnum_m33, uint16_t,\n+\t       svprfw_vnum (p0, x0, -33, SV_PLDL1KEEP),\n+\t       svprfw_vnum (p0, x0, -33, SV_PLDL1KEEP))\n \n /*\n ** prfw_vnum_x1:"}]}