{"sha": "ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4YTg3OTU2YWFjZmIyZjc0Njg3NzM0ZGU5YTVmMjBmODZiZjRmZQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2009-06-07T13:45:47Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2009-06-07T13:45:47Z"}, "message": "re PR fortran/36874 (Add shape checks to cshift/eoshift)\n\n2009-06-07  Daniel Franke  <franke.daniel@gmail.com>\n\n        * check.c (dim_rank_check): Return SUCCESS if DIM=NULL.\n        (gfc_check_lbound): Removed (now) redundant check for DIM=NULL.\n        (gfc_check_minloc_maxloc): Likewise.\n        (check_reduction): Likewise.\n        (gfc_check_size): Likewise.\n        (gfc_check_ubound): Likewise.\n        (gfc_check_cshift): Added missing shape-conformance checks.\n        (gfc_check_eoshift): Likewise.\n        * gfortran.h (gfc_check_conformance): Modified prototype to printf-style.\n        * expr.c (gfc_check_conformance): Accept error-message chunks in\n        printf-style. Changed all callers.\n\n2009-06-07  Daniel Franke  <franke.daniel@gmail.com>\n\n        PR fortran/36874\n        * gfortran.dg/intrinsic_argument_conformance_2.f90: Adjusted error message.\n        * gfortran.dg/zero_sized_1.f90: Removed checks with incompatible shapes.\n        * gfortran.dg/zero_sized_5.f90: Likewise.\n\nFrom-SVN: r148247", "tree": {"sha": "75702351890b695bc6f6a150a48c7ea3895833aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75702351890b695bc6f6a150a48c7ea3895833aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "014583a13f592481bb6e4004607f2845cb4c7bc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014583a13f592481bb6e4004607f2845cb4c7bc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014583a13f592481bb6e4004607f2845cb4c7bc0"}], "stats": {"total": 309, "additions": 186, "deletions": 123}, "files": [{"sha": "be976690d145b44d4c2964e69a2ff9e7f244a808", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -1,3 +1,18 @@\n+2009-06-07  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* check.c (dim_rank_check): Return SUCCESS if DIM=NULL.\n+\t(gfc_check_lbound): Removed (now) redundant check for DIM=NULL.\n+\t(gfc_check_minloc_maxloc): Likewise.\n+\t(check_reduction): Likewise.\n+\t(gfc_check_size): Likewise.\n+\t(gfc_check_ubound): Likewise.\n+\t(gfc_check_cshift): Added missing shape-conformance checks.\n+\t(gfc_check_eoshift): Likewise.\n+\t* gfortran.h (gfc_check_conformance): Modified prototype to printf-style.\n+\t* expr.c (gfc_check_conformance): Accept error-message chunks in \n+\tprintf-style. Changed all callers.\n+\n+\n 2009-06-07  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/25104"}, {"sha": "070e2bfca73f5b4f877a0714223f68b7c2c241b1", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -1561,7 +1561,7 @@ reduce_binary_aa (arith (*eval) (gfc_expr *, gfc_expr *, gfc_expr **),\n   rc = ARITH_OK;\n   d = op2->value.constructor;\n \n-  if (gfc_check_conformance (\"elemental binary operation\", op1, op2)\n+  if (gfc_check_conformance (op1, op2, \"elemental binary operation\")\n       != SUCCESS)\n     rc = ARITH_INCOMMENSURATE;\n   else"}, {"sha": "eaab309b1b85624cd0f72bc6345369777911e90b", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 141, "deletions": 92, "changes": 233, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -339,6 +339,9 @@ dim_rank_check (gfc_expr *dim, gfc_expr *array, int allow_assumed)\n   gfc_array_ref *ar;\n   int rank;\n \n+  if (dim == NULL)\n+    return SUCCESS;\n+\n   if (dim->expr_type != EXPR_CONSTANT\n       || (array->expr_type != EXPR_VARIABLE\n \t  && array->expr_type != EXPR_ARRAY))\n@@ -876,24 +879,56 @@ gfc_check_cshift (gfc_expr *array, gfc_expr *shift, gfc_expr *dim)\n   if (type_check (shift, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n-  if (array->rank == 1)\n+  if (dim_check (dim, 2, true) == FAILURE)\n+    return FAILURE;\n+\n+  if (dim_rank_check (dim, array, false) == FAILURE)\n+    return FAILURE;\n+\n+  if (array->rank == 1 || shift->rank == 0)\n     {\n       if (scalar_check (shift, 1) == FAILURE)\n \treturn FAILURE;\n     }\n-  else if (shift->rank != array->rank - 1 && shift->rank != 0)\n+  else if (shift->rank == array->rank - 1)\n     {\n-      gfc_error (\"SHIFT argument at %L of CSHIFT must have rank %d or be a \"\n-\t\t \"scalar\", &shift->where, array->rank - 1);\n+      int d;\n+      if (!dim)\n+\td = 1;\n+      else if (dim->expr_type == EXPR_CONSTANT)\n+\tgfc_extract_int (dim, &d);\n+      else\n+\td = -1;\n+\n+      if (d > 0)\n+\t{\n+\t  int i, j;\n+\t  for (i = 0, j = 0; i < array->rank; i++)\n+\t    if (i != d - 1)\n+\t      {\n+\t\tif (!identical_dimen_shape (array, i, shift, j))\n+\t\t  {\n+\t\t    gfc_error (\"'%s' argument of '%s' intrinsic at %L has \"\n+\t\t\t       \"invalid shape in dimension %d (%ld/%ld)\",\n+\t\t\t       gfc_current_intrinsic_arg[1],\n+\t\t\t       gfc_current_intrinsic, &shift->where, i + 1,\n+\t\t\t       mpz_get_si (array->shape[i]),\n+\t\t\t       mpz_get_si (shift->shape[j]));\n+\t\t    return FAILURE;\n+\t\t  }\n+\n+\t\tj += 1;\n+\t      }\n+\t}\n+    }\n+  else\n+    {\n+      gfc_error (\"'%s' argument of intrinsic '%s' at %L of must have rank \"\n+\t\t \"%d or be a scalar\", gfc_current_intrinsic_arg[1],\n+\t\t gfc_current_intrinsic, &shift->where, array->rank - 1);\n       return FAILURE;\n     }\n \n-  /* TODO: Add shape conformance check between array (w/o dimension dim)\n-     and shift. */\n-\n-  if (dim_check (dim, 2, true) == FAILURE)\n-    return FAILURE;\n-\n   return SUCCESS;\n }\n \n@@ -1042,55 +1077,85 @@ gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n   if (type_check (shift, 1, BT_INTEGER) == FAILURE)\n     return FAILURE;\n \n-  if (array->rank == 1)\n+  if (dim_check (dim, 3, true) == FAILURE)\n+    return FAILURE;\n+\n+  if (dim_rank_check (dim, array, false) == FAILURE)\n+    return FAILURE;\n+\n+  if (array->rank == 1 || shift->rank == 0)\n     {\n-      if (scalar_check (shift, 2) == FAILURE)\n+      if (scalar_check (shift, 1) == FAILURE)\n \treturn FAILURE;\n     }\n-  else if (shift->rank != array->rank - 1 && shift->rank != 0)\n+  else if (shift->rank == array->rank - 1)\n     {\n-      gfc_error (\"SHIFT argument at %L of EOSHIFT must have rank %d or be a \"\n-\t\t \"scalar\", &shift->where, array->rank - 1);\n+      int d;\n+      if (!dim)\n+\td = 1;\n+      else if (dim->expr_type == EXPR_CONSTANT)\n+\tgfc_extract_int (dim, &d);\n+      else\n+\td = -1;\n+\n+      if (d > 0)\n+\t{\n+\t  int i, j;\n+\t  for (i = 0, j = 0; i < array->rank; i++)\n+\t    if (i != d - 1)\n+\t      {\n+\t\tif (!identical_dimen_shape (array, i, shift, j))\n+\t\t  {\n+\t\t    gfc_error (\"'%s' argument of '%s' intrinsic at %L has \"\n+\t\t\t       \"invalid shape in dimension %d (%ld/%ld)\",\n+\t\t\t       gfc_current_intrinsic_arg[1],\n+\t\t\t       gfc_current_intrinsic, &shift->where, i + 1,\n+\t\t\t       mpz_get_si (array->shape[i]),\n+\t\t\t       mpz_get_si (shift->shape[j]));\n+\t\t    return FAILURE;\n+\t\t  }\n+\n+\t\tj += 1;\n+\t      }\n+\t}\n+    }\n+  else\n+    {\n+      gfc_error (\"'%s' argument of intrinsic '%s' at %L of must have rank \"\n+\t\t \"%d or be a scalar\", gfc_current_intrinsic_arg[1],\n+\t\t gfc_current_intrinsic, &shift->where, array->rank - 1);\n       return FAILURE;\n     }\n \n-  /* TODO: Add shape conformance check between array (w/o dimension dim)\n-     and shift. */\n-\n   if (boundary != NULL)\n     {\n       if (same_type_check (array, 0, boundary, 2) == FAILURE)\n \treturn FAILURE;\n \n-      if (array->rank == 1)\n+      if (array->rank == 1 || boundary->rank == 0)\n \t{\n \t  if (scalar_check (boundary, 2) == FAILURE)\n \t    return FAILURE;\n \t}\n-      else if (boundary->rank != array->rank - 1 && boundary->rank != 0)\n+      else if (boundary->rank == array->rank - 1)\n \t{\n-\t  gfc_error (\"BOUNDARY argument at %L of EOSHIFT must have rank %d or be \"\n-\t\t     \"a scalar\", &boundary->where, array->rank - 1);\n-\t  return FAILURE;\n+\t  if (gfc_check_conformance (shift, boundary,\n+\t\t\t\t     \"arguments '%s' and '%s' for \"\n+\t\t\t\t     \"intrinsic %s\",\n+\t\t\t\t     gfc_current_intrinsic_arg[1],\n+\t\t\t\t     gfc_current_intrinsic_arg[2],\n+\t\t\t\t     gfc_current_intrinsic ) == FAILURE)\n+\t    return FAILURE;\n \t}\n-\n-      if (shift->rank == boundary->rank)\n+      else\n \t{\n-\t  int i;\n-\t  for (i = 0; i < shift->rank; i++)\n-\t    if (! identical_dimen_shape (shift, i, boundary, i))\n-\t      {\n-\t\tgfc_error (\"Different shape in dimension %d for SHIFT and \"\n-\t\t\t   \"BOUNDARY arguments of EOSHIFT at %L\", shift->rank,\n-\t\t\t   &boundary->where);\n-\t\treturn FAILURE;\n-\t      }\n+\t  gfc_error (\"'%s' argument of intrinsic '%s' at %L of must have \"\n+\t\t     \"rank %d or be a scalar\", gfc_current_intrinsic_arg[1],\n+\t\t     gfc_current_intrinsic, &shift->where, array->rank - 1);\n+\t  return FAILURE;\n \t}\n     }\n \n-  if (dim_check (dim, 4, true) == FAILURE)\n-    return FAILURE;\n-\n   return SUCCESS;\n }\n \n@@ -1512,14 +1577,11 @@ gfc_check_lbound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n-  if (dim != NULL)\n-    {\n-      if (dim_check (dim, 1, false) == FAILURE)\n-\treturn FAILURE;\n+  if (dim_check (dim, 1, false) == FAILURE)\n+    return FAILURE;\n \n-      if (dim_rank_check (dim, array, 1) == FAILURE)\n-\treturn FAILURE;\n-    }\n+  if (dim_rank_check (dim, array, 1) == FAILURE)\n+    return FAILURE;\n \n   if (kind_check (kind, 2, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -1719,13 +1781,11 @@ check_rest (bt type, int kind, gfc_actual_arglist *arglist)\n \t}\n \n       for (tmp = arglist, m=1; tmp != arg; tmp = tmp->next, m++)\n-        {\n-\t  char buffer[80];\n-\t  snprintf (buffer, 80, \"arguments 'a%d' and 'a%d' for intrinsic '%s'\",\n-\t\t    m, n, gfc_current_intrinsic);\n-\t  if (gfc_check_conformance (buffer, tmp->expr, x) == FAILURE)\n+\tif (gfc_check_conformance (tmp->expr, x,\n+\t\t\t\t   \"arguments 'a%d' and 'a%d' for \"\n+\t\t\t\t   \"intrinsic '%s'\", m, n,\n+\t\t\t\t   gfc_current_intrinsic) == FAILURE)\n \t    return FAILURE;\n-\t}\n     }\n \n   return SUCCESS;\n@@ -1905,24 +1965,22 @@ gfc_check_minloc_maxloc (gfc_actual_arglist *ap)\n       ap->next->next->expr = m;\n     }\n \n-  if (d && dim_check (d, 1, false) == FAILURE)\n+  if (dim_check (d, 1, false) == FAILURE)\n     return FAILURE;\n \n-  if (d && dim_rank_check (d, a, 0) == FAILURE)\n+  if (dim_rank_check (d, a, 0) == FAILURE)\n     return FAILURE;\n \n   if (m != NULL && type_check (m, 2, BT_LOGICAL) == FAILURE)\n     return FAILURE;\n \n-  if (m != NULL)\n-    {\n-      char buffer[80];\n-      snprintf (buffer, 80, \"arguments '%s' and '%s' for intrinsic %s\",\n-\t\tgfc_current_intrinsic_arg[0], gfc_current_intrinsic_arg[2],\n-\t\tgfc_current_intrinsic);\n-      if (gfc_check_conformance (buffer, a, m) == FAILURE)\n-\treturn FAILURE;\n-    }\n+  if (m != NULL\n+      && gfc_check_conformance (a, m,\n+\t\t\t\t\"arguments '%s' and '%s' for intrinsic %s\",\n+\t\t\t\tgfc_current_intrinsic_arg[0],\n+\t\t\t\tgfc_current_intrinsic_arg[2],\n+\t\t\t\tgfc_current_intrinsic ) == FAILURE)\n+    return FAILURE;\n \n   return SUCCESS;\n }\n@@ -1961,24 +2019,22 @@ check_reduction (gfc_actual_arglist *ap)\n       ap->next->next->expr = m;\n     }\n \n-  if (d && dim_check (d, 1, false) == FAILURE)\n+  if (dim_check (d, 1, false) == FAILURE)\n     return FAILURE;\n \n-  if (d && dim_rank_check (d, a, 0) == FAILURE)\n+  if (dim_rank_check (d, a, 0) == FAILURE)\n     return FAILURE;\n \n   if (m != NULL && type_check (m, 2, BT_LOGICAL) == FAILURE)\n     return FAILURE;\n \n-  if (m != NULL)\n-    {\n-      char buffer[80];\n-      snprintf (buffer, 80, \"arguments '%s' and '%s' for intrinsic %s\",\n-\t\tgfc_current_intrinsic_arg[0], gfc_current_intrinsic_arg[2],\n-\t\tgfc_current_intrinsic);\n-      if (gfc_check_conformance (buffer, a, m) == FAILURE)\n-\treturn FAILURE;\n-    }\n+  if (m != NULL\n+      && gfc_check_conformance (a, m,\n+\t\t\t\t\"arguments '%s' and '%s' for intrinsic %s\",\n+\t\t\t\tgfc_current_intrinsic_arg[0],\n+\t\t\t\tgfc_current_intrinsic_arg[2],\n+\t\t\t\tgfc_current_intrinsic) == FAILURE)\n+    return FAILURE;\n \n   return SUCCESS;\n }\n@@ -2133,18 +2189,17 @@ gfc_check_null (gfc_expr *mold)\n gfc_try\n gfc_check_pack (gfc_expr *array, gfc_expr *mask, gfc_expr *vector)\n {\n-  char buffer[80];\n-\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n   if (type_check (mask, 1, BT_LOGICAL) == FAILURE)\n     return FAILURE;\n \n-  snprintf (buffer, 80, \"arguments '%s' and '%s' for intrinsic '%s'\",\n-\t    gfc_current_intrinsic_arg[0], gfc_current_intrinsic_arg[1],\n-\t    gfc_current_intrinsic);\n-  if (gfc_check_conformance (buffer, array, mask) == FAILURE)\n+  if (gfc_check_conformance (array, mask,\n+\t\t\t     \"arguments '%s' and '%s' for intrinsic '%s'\",\n+\t\t\t     gfc_current_intrinsic_arg[0],\n+\t\t\t     gfc_current_intrinsic_arg[1],\n+\t\t\t     gfc_current_intrinsic) == FAILURE)\n     return FAILURE;\n \n   if (vector != NULL)\n@@ -2700,14 +2755,11 @@ gfc_check_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n-  if (dim != NULL)\n-    {\n-      if (dim_check (dim, 1, true) == FAILURE)\n-\treturn FAILURE;\n+  if (dim_check (dim, 1, true) == FAILURE)\n+    return FAILURE;\n \n-      if (dim_rank_check (dim, array, 0) == FAILURE)\n-\treturn FAILURE;\n-    }\n+  if (dim_rank_check (dim, array, 0) == FAILURE)\n+    return FAILURE;\n \n   if (kind_check (kind, 2, BT_INTEGER) == FAILURE)\n     return FAILURE;\n@@ -3043,14 +3095,11 @@ gfc_check_ubound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n   if (array_check (array, 0) == FAILURE)\n     return FAILURE;\n \n-  if (dim != NULL)\n-    {\n-      if (dim_check (dim, 1, false) == FAILURE)\n-\treturn FAILURE;\n+  if (dim_check (dim, 1, false) == FAILURE)\n+    return FAILURE;\n \n-      if (dim_rank_check (dim, array, 0) == FAILURE)\n-\treturn FAILURE;\n-    }\n+  if (dim_rank_check (dim, array, 0) == FAILURE)\n+    return FAILURE;\n \n   if (kind_check (kind, 2, BT_INTEGER) == FAILURE)\n     return FAILURE;"}, {"sha": "71acbd6df3d9bde59656537b8555424681f96ca2", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -2776,18 +2776,25 @@ gfc_specification_expr (gfc_expr *e)\n /* Given two expressions, make sure that the arrays are conformable.  */\n \n gfc_try\n-gfc_check_conformance (const char *optype_msgid, gfc_expr *op1, gfc_expr *op2)\n+gfc_check_conformance (gfc_expr *op1, gfc_expr *op2, const char *optype_msgid, ...)\n {\n   int op1_flag, op2_flag, d;\n   mpz_t op1_size, op2_size;\n   gfc_try t;\n \n+  va_list argp;\n+  char buffer[240];\n+\n   if (op1->rank == 0 || op2->rank == 0)\n     return SUCCESS;\n \n+  va_start (argp, optype_msgid);\n+  vsnprintf (buffer, 240, optype_msgid, argp);\n+  va_end (argp);\n+\n   if (op1->rank != op2->rank)\n     {\n-      gfc_error (\"Incompatible ranks in %s (%d and %d) at %L\", _(optype_msgid),\n+      gfc_error (\"Incompatible ranks in %s (%d and %d) at %L\", _(buffer),\n \t\t op1->rank, op2->rank, &op1->where);\n       return FAILURE;\n     }\n@@ -2802,7 +2809,7 @@ gfc_check_conformance (const char *optype_msgid, gfc_expr *op1, gfc_expr *op2)\n       if (op1_flag && op2_flag && mpz_cmp (op1_size, op2_size) != 0)\n \t{\n \t  gfc_error (\"Different shape for %s at %L on dimension %d \"\n-\t\t     \"(%d and %d)\", _(optype_msgid), &op1->where, d + 1,\n+\t\t     \"(%d and %d)\", _(buffer), &op1->where, d + 1,\n \t\t     (int) mpz_get_si (op1_size),\n \t\t     (int) mpz_get_si (op2_size));\n \n@@ -2950,7 +2957,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \n   /* Check size of array assignments.  */\n   if (lvalue->rank != 0 && rvalue->rank != 0\n-      && gfc_check_conformance (\"array assignment\", lvalue, rvalue) != SUCCESS)\n+      && gfc_check_conformance (lvalue, rvalue, \"array assignment\") != SUCCESS)\n     return FAILURE;\n \n   if (rvalue->is_boz && lvalue->ts.type != BT_INTEGER"}, {"sha": "902790428b82de0fc40feef04ef74434f628f156", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -2484,7 +2484,7 @@ gfc_try gfc_specification_expr (gfc_expr *);\n int gfc_numeric_ts (gfc_typespec *);\n int gfc_kind_max (gfc_expr *, gfc_expr *);\n \n-gfc_try gfc_check_conformance (const char *, gfc_expr *, gfc_expr *);\n+gfc_try gfc_check_conformance (gfc_expr *, gfc_expr *, const char *, ...) ATTRIBUTE_PRINTF_3;\n gfc_try gfc_check_assign (gfc_expr *, gfc_expr *, int);\n gfc_try gfc_check_pointer_assign (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_assign_symbol (gfc_symbol *, gfc_expr *);"}, {"sha": "c519f6ee808a68ba22c029ae7fadf976bbbcfa07", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -3617,14 +3617,13 @@ check_specific (gfc_intrinsic_sym *specific, gfc_expr *expr, int error_flag)\n       first_expr = arg->expr;\n \n       for ( ; arg && arg->expr; arg = arg->next, n++)\n-\t{\n-          char buffer[80];\n-\t  snprintf (buffer, 80, \"arguments '%s' and '%s' for intrinsic '%s'\",\n-\t\t    gfc_current_intrinsic_arg[0], gfc_current_intrinsic_arg[n],\n-\t\t    gfc_current_intrinsic);\n-\t  if (gfc_check_conformance (buffer, first_expr, arg->expr) == FAILURE)\n-\t    return FAILURE;\n-\t}\n+\tif (gfc_check_conformance (first_expr, arg->expr,\n+\t\t\t\t   \"arguments '%s' and '%s' for \"\n+\t\t\t\t   \"intrinsic '%s'\",\n+\t\t\t\t   gfc_current_intrinsic_arg[0],\n+\t\t\t\t   gfc_current_intrinsic_arg[n],\n+\t\t\t\t   gfc_current_intrinsic) == FAILURE)\n+\t  return FAILURE;\n     }\n \n   if (t == FAILURE)"}, {"sha": "5bb38fec5772e34b5277ea4bbc010a054aee72ba", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -1584,8 +1584,8 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n       /* Elemental procedure's array actual arguments must conform.  */\n       if (e != NULL)\n \t{\n-\t  if (gfc_check_conformance (\"elemental procedure\", arg->expr, e)\n-\t      == FAILURE)\n+\t  if (gfc_check_conformance (arg->expr, e,\n+\t\t\t\t     \"elemental procedure\") == FAILURE)\n \t    return FAILURE;\n \t}\n       else"}, {"sha": "4b9ac1cf01a81715a4341923c973f1d8e368e48c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -1,3 +1,10 @@\n+2009-06-07  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/36874\n+\t* gfortran.dg/intrinsic_argument_conformance_2.f90: Adjusted error message.\n+\t* gfortran.dg/zero_sized_1.f90: Removed checks with incompatible shapes.\n+\t* gfortran.dg/zero_sized_5.f90: Likewise.\n+\n 2009-06-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/32950"}, {"sha": "c9284607fec5b6bcfeb6eb53af63c46a9b38a194", "filename": "gcc/testsuite/gfortran.dg/intrinsic_argument_conformance_2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fintrinsic_argument_conformance_2.f90?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -34,7 +34,7 @@ program main\n   b2 = eoshift (a2,1,boundary=c2(:,:)) ! { dg-error \"have rank 1 or be a scalar\" }\n   b2 = eoshift (a2,(/1/), boundary=c2(:,:)) ! { dg-error \"have rank 1 or be a scalar\" }\n \n-  b = eoshift (a,(/1/), boundary=c(1,:)) ! { dg-error \"Different shape in dimension 1\" }\n+  b = eoshift (a,(/1/), boundary=c(1,:)) ! { dg-error \"invalid shape in dimension\" }\n \n   if (any(eoshift(foo,dim=1,shift=1,boundary=(/42.0,-7.0/))/= 0)) call abort() ! { dg-error \"must be a scalar\" }\n   if (any(eoshift(tempn(2:1),dim=1,shift=1,boundary=(/42.0,-7.0/))/= 0)) call abort() ! { dg-error \"must be a scalar\" }"}, {"sha": "85167fcca3ed7418e78d3efe496442beafe4bc26", "filename": "gcc/testsuite/gfortran.dg/zero_sized_1.f90", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_1.f90?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -15,9 +15,6 @@ subroutine test_cshift\n   if (any(cshift(gee,shift=(/1,-1/),dim=1)/= 0)) call abort\n   if (any(cshift(gee,shift=(/1,-1/),dim=2)/= 0)) call abort\n   if (any(cshift(tempm(5:4,:),shift=(/1,-1/),dim=1)/= 0)) call abort\n-  if (any(cshift(tempm(5:4,:),shift=(/1,-1/),dim=2)/= 0)) call abort\n-  if (any(cshift(tempm(:,5:4),shift=(/1,-1/),dim=1)/= 0)) call abort\n-  if (any(cshift(tempm(:,5:4),shift=(/1,-1/),dim=2)/= 0)) call abort\n   deallocate(foo,bar,gee)\n end\n \n@@ -34,9 +31,6 @@ subroutine test_eoshift\n   if (any(eoshift(gee,shift=(/1,-1/),dim=1)/= 0)) call abort\n   if (any(eoshift(gee,shift=(/1,-1/),dim=2)/= 0)) call abort\n   if (any(eoshift(tempm(5:4,:),shift=(/1,-1/),dim=1)/= 0)) call abort\n-  if (any(eoshift(tempm(5:4,:),shift=(/1,-1/),dim=2)/= 0)) call abort\n-  if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=1)/= 0)) call abort\n-  if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=2)/= 0)) call abort\n \n   if (any(eoshift(foo,dim=1,shift=1,boundary=42.0)/= 0)) call abort\n   if (any(eoshift(tempn(2:1),dim=1,shift=1,boundary=42.0)/= 0)) call abort\n@@ -45,9 +39,6 @@ subroutine test_eoshift\n   if (any(eoshift(gee,shift=(/1,-1/),dim=1,boundary=42.0)/= 0)) call abort\n   if (any(eoshift(gee,shift=(/1,-1/),dim=2,boundary=42.0)/= 0)) call abort\n   if (any(eoshift(tempm(5:4,:),shift=(/1,-1/),dim=1,boundary=42.0)/= 0)) call abort\n-  if (any(eoshift(tempm(5:4,:),shift=(/1,-1/),dim=2,boundary=42.0)/= 0)) call abort\n-  if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=1,boundary=42.0)/= 0)) call abort\n-  if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=2,boundary=42.0)/= 0)) call abort\n \n   if (any(eoshift(foo,dim=1,shift=1,boundary=42.0)/= 0)) call abort\n   if (any(eoshift(tempn(2:1),dim=1,shift=1,boundary=-7.0)/= 0)) call abort\n@@ -56,9 +47,6 @@ subroutine test_eoshift\n   if (any(eoshift(gee,shift=(/1,-1/),dim=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n   if (any(eoshift(gee,shift=(/1,-1/),dim=2,boundary=(/42.0,-7.0/))/= 0)) call abort\n   if (any(eoshift(tempm(5:4,:),shift=(/1,-1/),dim=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n-  if (any(eoshift(tempm(5:4,:),shift=(/1,-1/),dim=2,boundary=(/42.0,-7.0/))/= 0)) call abort\n-  if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=1,boundary=(/42.0,-7.0/))/= 0)) call abort\n-  if (any(eoshift(tempm(:,5:4),shift=(/1,-1/),dim=2,boundary=(/42.0,-7.0/))/= 0)) call abort\n   deallocate(foo,bar,gee)\n end\n "}, {"sha": "49a5d548df088b69e59f48c985338825b12ac146", "filename": "gcc/testsuite/gfortran.dg/zero_sized_5.f90", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca8a87956aacfb2f74687734de9a5f20f86bf4fe/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fzero_sized_5.f90?ref=ca8a87956aacfb2f74687734de9a5f20f86bf4fe", "patch": "@@ -8,8 +8,6 @@ program main\n   b = cshift (a,1)\n   b = cshift (a,j)\n   b = eoshift (a,1)\n-  b = eoshift (a,(/1/))\n   b = eoshift (a,1,boundary=c(1,:))\n   b = eoshift (a, j, boundary=c(1,:))\n-\n end program main"}]}