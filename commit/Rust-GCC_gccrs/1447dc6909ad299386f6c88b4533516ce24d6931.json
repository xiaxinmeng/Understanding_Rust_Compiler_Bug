{"sha": "1447dc6909ad299386f6c88b4533516ce24d6931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0N2RjNjkwOWFkMjk5Mzg2ZjZjODhiNDUzMzUxNmNlMjRkNjkzMQ==", "commit": {"author": {"name": "Hartmut Penner", "email": "hpenner@de.ibm.com", "date": "2002-03-26T08:44:47Z"}, "committer": {"name": "Hartmut Penner", "email": "hpenner@gcc.gnu.org", "date": "2002-03-26T08:44:47Z"}, "message": "s390.c (s390_emit_epilogue): Change epilogue code to not restoring global registers.\n\n      * config/s390/s390.c (s390_emit_epilogue): Change epilogue\n        code to not restoring global registers.\n\nFrom-SVN: r51374", "tree": {"sha": "cf41a1ae192f810fe46e06ff7453a5e2b6406733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf41a1ae192f810fe46e06ff7453a5e2b6406733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1447dc6909ad299386f6c88b4533516ce24d6931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1447dc6909ad299386f6c88b4533516ce24d6931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1447dc6909ad299386f6c88b4533516ce24d6931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1447dc6909ad299386f6c88b4533516ce24d6931/comments", "author": null, "committer": null, "parents": [{"sha": "f2a8c7f078fbdc091766de05db4d5b745adbff61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2a8c7f078fbdc091766de05db4d5b745adbff61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2a8c7f078fbdc091766de05db4d5b745adbff61"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "c199e446dea78422ddd1dcafbbb74cc6bef2f1b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1447dc6909ad299386f6c88b4533516ce24d6931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1447dc6909ad299386f6c88b4533516ce24d6931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1447dc6909ad299386f6c88b4533516ce24d6931", "patch": "@@ -1,3 +1,8 @@\n+2002-03-26  Hartmut Penner  <hpenner@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_emit_epilogue): Change epilogue\n+\tcode to not restoring global registers. \n+\n 2002-03-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* Makefile.in (ggc-common.o): Update."}, {"sha": "8c183e77acb1481c9f729d6c77b13ee8af01e6c7", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1447dc6909ad299386f6c88b4533516ce24d6931/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1447dc6909ad299386f6c88b4533516ce24d6931/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=1447dc6909ad299386f6c88b4533516ce24d6931", "patch": "@@ -3177,15 +3177,15 @@ s390_emit_epilogue ()\n \n       if (frame.save_fprs_p)\n \tfor (i = 24; i < 32; i++)\n-\t  if (regs_ever_live[i])\n+\t  if (regs_ever_live[i] && !global_regs[i])\n \t    restore_fpr (frame_pointer, \n \t\t\t offset - 64 + (i-24) * 8, i);\n     }\n   else\n     {\n-      if (regs_ever_live[18])\n+      if (regs_ever_live[18] && !global_regs[18])\n \trestore_fpr (frame_pointer, offset + STACK_POINTER_OFFSET - 16, 18);\n-      if (regs_ever_live[19]) \n+      if (regs_ever_live[19] && !global_regs[19])\n \trestore_fpr (frame_pointer, offset + STACK_POINTER_OFFSET - 8, 19);\n     }\n \n@@ -3198,6 +3198,24 @@ s390_emit_epilogue ()\n   if (frame.first_restore_gpr != -1)\n     {\n       rtx addr;\n+      int i;\n+\n+      /* Check for global register and save them \n+\t to stack location from where they get restored.  */\n+\n+      for (i = frame.first_restore_gpr; \n+\t   i <= frame.last_save_gpr;\n+\t   i++)\n+\t{\n+\t  if (global_regs[i])\n+\t    {\n+\t      addr = plus_constant (frame_pointer, \n+\t\t     offset + i * UNITS_PER_WORD);\n+\t      addr = gen_rtx_MEM (Pmode, addr);\n+\t      set_mem_alias_set (addr, s390_sr_alias_set);\n+\t      emit_move_insn (addr, gen_rtx_REG (Pmode, i));\n+\t    }  \n+\t}\n \n       /* Fetch return address from stack before load multiple,\n \t this will do good for scheduling.  */"}]}