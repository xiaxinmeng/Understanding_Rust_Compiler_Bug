{"sha": "95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlOGRjYmFhMGFhOGUxOGNhY2RkZjExMmQ0NDNkZGY3NzcwYmNjNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-11-06T08:02:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-11-06T08:02:08Z"}, "message": "except.c (call_eh_info): Split out...\n\n\t* except.c (call_eh_info): Split out...\n\t(push_eh_info): From here.\n\t(expand_builtin_throw): Use it.\n\t(expand_start_catch_block): Move region start back.\n\nFrom-SVN: r16349", "tree": {"sha": "7e9b1ed3e56e8411bf503baae4ea55e217f61d1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e9b1ed3e56e8411bf503baae4ea55e217f61d1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7/comments", "author": null, "committer": null, "parents": [{"sha": "eaf407a54e7e7e220b4e4a622e65f7d870c27394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eaf407a54e7e7e220b4e4a622e65f7d870c27394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eaf407a54e7e7e220b4e4a622e65f7d870c27394"}], "stats": {"total": 74, "additions": 51, "deletions": 23}, "files": [{"sha": "4c41ebb8f01fc2f75bad843f4ed6577b7c5ed065", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7", "patch": "@@ -1,3 +1,10 @@\n+Wed Nov  5 23:52:50 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* except.c (call_eh_info): Split out...\n+\t(push_eh_info): From here.\n+\t(expand_builtin_throw): Use it.\n+\t(expand_start_catch_block): Move region start back.\n+\n Tue Nov  4 13:45:10 1997  Doug Evans  <devans@canuck.cygnus.com>\n \n \t* lex.c (MULTIBYTE_CHARS): #undef if cross compiling."}, {"sha": "b95e8ab776afe729a760b32e2955e0af159d67e6", "filename": "gcc/cp/except.c", "status": "modified", "additions": 44, "deletions": 23, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=95e8dcbaa0aa8e18cacddf112d443ddf7770bcc7", "patch": "@@ -306,13 +306,12 @@ init_exception_processing ()\n   protect_cleanup_actions_with_terminate = 1;\n }\n \n-/* Retrieve a pointer to the cp_eh_info node for the current exception\n-   and save it in the current binding level.  */\n+/* Retrieve a pointer to the cp_eh_info node for the current exception.  */\n \n-static void\n-push_eh_info ()\n+static tree\n+call_eh_info ()\n {\n-  tree decl, fn;\n+  tree fn;\n \n   fn = get_identifier (\"__cp_exception_info\");\n   if (IDENTIFIER_GLOBAL_VALUE (fn))\n@@ -358,7 +357,16 @@ push_eh_info ()\n       assemble_external (fn);\n       pop_obstacks ();\n     }\n-  fn = build_function_call (fn, NULL_TREE);\n+  return build_function_call (fn, NULL_TREE);\n+}\n+\n+/* Retrieve a pointer to the cp_eh_info node for the current exception\n+   and save it in the current binding level.  */\n+\n+static void\n+push_eh_info ()\n+{\n+  tree decl, fn = call_eh_info ();\n \n   /* Remember the pointer to the current exception info; it won't change\n      during this catch block.  */\n@@ -533,21 +541,6 @@ expand_start_catch_block (declspecs, declarator)\n \n   push_eh_info ();\n \n-  /* If we are not doing setjmp/longjmp EH, because we are reordered\n-     out of line, we arrange to rethrow in the outer context so as to\n-     skip through the terminate region we are nested in, should we\n-     encounter an exception in the catch handler.\n-\n-     If we are doing setjmp/longjmp EH, we need to skip through the EH\n-     object cleanup region.  This isn't quite right, as we really need\n-     to clean the object up, but we cannot do that until we track\n-     multiple EH objects.\n-\n-     Matches the end in expand_end_catch_block.  */\n-  expand_eh_region_start ();\n-\n-  push_eh_cleanup ();\n-\n   if (declspecs)\n     {\n       tree exp;\n@@ -559,6 +552,12 @@ expand_start_catch_block (declspecs, declarator)\n       if (decl == NULL_TREE)\n \t{\n \t  error (\"invalid catch parameter\");\n+\n+\t  /* This is cheap, but we want to maintain the data\n+             structures.  */\n+\n+\t  expand_eh_region_start ();\n+\n \t  return;\n \t}\n \n@@ -591,6 +590,8 @@ expand_start_catch_block (declspecs, declarator)\n       /* if it returned FALSE, jump over the catch block, else fall into it */\n       emit_jump_insn (gen_beq (false_label_rtx));\n \n+      push_eh_cleanup ();\n+\n       init = convert_from_reference (save_expr (make_tree (init_type, call_rtx)));\n \n       /* Do we need the below two lines? */\n@@ -599,10 +600,29 @@ expand_start_catch_block (declspecs, declarator)\n       decl = pushdecl (decl);\n       cp_finish_decl (decl, init, NULL_TREE, 0, LOOKUP_ONLYCONVERTING);\n     }\n+  else\n+    {\n+      push_eh_cleanup ();\n+\n+      /* Fall into the catch all section.  */\n+    }\n \n   init = build_modify_expr (get_eh_caught (), NOP_EXPR, integer_one_node);\n   expand_expr (init, const0_rtx, VOIDmode, EXPAND_NORMAL);\n \n+  /* If we are not doing setjmp/longjmp EH, because we are reordered\n+     out of line, we arrange to rethrow in the outer context so as to\n+     skip through the terminate region we are nested in, should we\n+     encounter an exception in the catch handler.\n+\n+     If we are doing setjmp/longjmp EH, we need to skip through the EH\n+     object cleanup region.  This isn't quite right, as we really need\n+     to clean the object up, but we cannot do that until we track\n+     multiple EH objects.\n+\n+     Matches the end in expand_end_catch_block.  */\n+  expand_eh_region_start ();\n+\n   emit_line_note (input_filename, lineno);\n }\n \n@@ -814,8 +834,9 @@ expand_builtin_throw ()\n   /* These two can be frontend specific.  If wanted, they can go in\n      expand_throw.  */\n   /* Do we have a valid object we are throwing? */\n-  t = get_eh_type ();\n-  emit_cmp_insn (DECL_RTL (t), const0_rtx, EQ, NULL_RTX,\n+  t = call_eh_info ();\n+  emit_cmp_insn (expand_expr (t, NULL_RTX, Pmode, 0),\n+\t\t const0_rtx, EQ, NULL_RTX,\n \t\t GET_MODE (DECL_RTL (t)), 0, 0);\n   emit_jump_insn (gen_beq (gotta_call_terminate));\n "}]}