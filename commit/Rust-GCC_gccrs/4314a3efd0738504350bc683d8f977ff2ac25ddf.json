{"sha": "4314a3efd0738504350bc683d8f977ff2ac25ddf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMxNGEzZWZkMDczODUwNDM1MGJjNjgzZDhmOTc3ZmYyYWMyNWRkZg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-10-05T14:07:50Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-10-05T14:07:50Z"}, "message": "[PR other/65021] mkoffloads -save-temps handling, and cleanup cleanup\n\n\tgcc/\n\tPR other/65021\n\t* config/i386/intelmic-mkoffload.c (mkoffload_atexit): Rename\n\tfunction to...\n\t(mkoffload_cleanup): ... this.  Adjust all users.\n\t(maybe_unlink): Look at save_temps and verbose flags instead of\n\tdebug flag.\n\t(main): Parse \"-save-temps\" flag.\n\t(generate_target_descr_file, generate_target_offloadend_file)\n\t(generate_host_descr_file, prepare_target_image): Pass it on.\n\t* config/nvptx/mkoffload.c (tool_cleanup): Implement.\n\t(mkoffload_cleanup): New function.\n\t(maybe_unlink): Look at save_temps and verbose flags instead of\n\tdebug flag.\n\t(main): Instead of calling utils_cleanup, register atexit handler\n\tfor mkoffload_cleanup.\n\t(main): Parse \"-save-temps\" flag.\n\t(compile_native, main): Pass it on.\n\t* lto-wrapper.c (compile_offload_image): Likewise.\n\nFrom-SVN: r228488", "tree": {"sha": "f2069b4cfb07f51f8da67b4b75ac01d781eccd4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2069b4cfb07f51f8da67b4b75ac01d781eccd4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4314a3efd0738504350bc683d8f977ff2ac25ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4314a3efd0738504350bc683d8f977ff2ac25ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4314a3efd0738504350bc683d8f977ff2ac25ddf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4314a3efd0738504350bc683d8f977ff2ac25ddf/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10676d8c6146eec7afe6fa298bc8d113bcc0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d10676d8c6146eec7afe6fa298bc8d113bcc0da"}], "stats": {"total": 92, "additions": 74, "deletions": 18}, "files": [{"sha": "5340f47a1beaaf7e76313ea37489b3e23b589fd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4314a3efd0738504350bc683d8f977ff2ac25ddf", "patch": "@@ -1,3 +1,24 @@\n+2015-10-05  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR other/65021\n+\t* config/i386/intelmic-mkoffload.c (mkoffload_atexit): Rename\n+\tfunction to...\n+\t(mkoffload_cleanup): ... this.  Adjust all users.\n+\t(maybe_unlink): Look at save_temps and verbose flags instead of\n+\tdebug flag.\n+\t(main): Parse \"-save-temps\" flag.\n+\t(generate_target_descr_file, generate_target_offloadend_file)\n+\t(generate_host_descr_file, prepare_target_image): Pass it on.\n+\t* config/nvptx/mkoffload.c (tool_cleanup): Implement.\n+\t(mkoffload_cleanup): New function.\n+\t(maybe_unlink): Look at save_temps and verbose flags instead of\n+\tdebug flag.\n+\t(main): Instead of calling utils_cleanup, register atexit handler\n+\tfor mkoffload_cleanup.\n+\t(main): Parse \"-save-temps\" flag.\n+\t(compile_native, main): Pass it on.\n+\t* lto-wrapper.c (compile_offload_image): Likewise.\n+\n 2015-10-05  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* gimple.h (gimple_op_ptr): Require a non const gimple *.\n@@ -763,7 +784,7 @@\n \n \t* config/i386/intelmic-mkoffload.c (main): Parse \"-v\" flag.\n \t(generate_target_descr_file, generate_target_offloadend_file)\n-\t(generate_host_descr_file, prepare_target_image, main): Pass it on.\n+\t(generate_host_descr_file, prepare_target_image): Pass it on.\n \t* config/nvptx/mkoffload.c (main): Parse \"-v\" flag.\n \t(compile_native, main): Pass it on.\n \t* lto-wrapper.c (compile_offload_image): Likewise."}, {"sha": "828b415015e2eb2045526615181511b6cb7e72f6", "filename": "gcc/config/i386/intelmic-mkoffload.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fintelmic-mkoffload.c?ref=4314a3efd0738504350bc683d8f977ff2ac25ddf", "patch": "@@ -45,6 +45,7 @@ const char *temp_files[MAX_NUM_TEMPS];\n enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n \n /* Delete tempfiles and exit function.  */\n+\n void\n tool_cleanup (bool from_signal ATTRIBUTE_UNUSED)\n {\n@@ -53,19 +54,24 @@ tool_cleanup (bool from_signal ATTRIBUTE_UNUSED)\n }\n \n static void\n-mkoffload_atexit (void)\n+mkoffload_cleanup (void)\n {\n   tool_cleanup (false);\n }\n \n-/* Unlink FILE unless we are debugging.  */\n+/* Unlink FILE unless requested otherwise.  */\n+\n void\n maybe_unlink (const char *file)\n {\n-  if (debug)\n-    notice (\"[Leaving %s]\\n\", file);\n-  else\n-    unlink_if_ordinary (file);\n+  if (!save_temps)\n+    {\n+      if (unlink_if_ordinary (file)\n+\t  && errno != ENOENT)\n+\tfatal_error (input_location, \"deleting file %s: %m\", file);\n+    }\n+  else if (verbose)\n+    fprintf (stderr, \"[Leaving %s]\\n\", file);\n }\n \n /* Add or change the value of an environment variable, outputting the\n@@ -281,6 +287,8 @@ generate_target_descr_file (const char *target_compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, target_compiler);\n+  if (save_temps)\n+    obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   obstack_ptr_grow (&argv_obstack, \"-c\");\n@@ -321,6 +329,8 @@ generate_target_offloadend_file (const char *target_compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, target_compiler);\n+  if (save_temps)\n+    obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   obstack_ptr_grow (&argv_obstack, \"-c\");\n@@ -386,6 +396,8 @@ generate_host_descr_file (const char *host_compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, host_compiler);\n+  if (save_temps)\n+    obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   obstack_ptr_grow (&argv_obstack, \"-c\");\n@@ -434,6 +446,8 @@ prepare_target_image (const char *target_compiler, int argc, char **argv)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, target_compiler);\n+  if (save_temps)\n+    obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   obstack_ptr_grow (&argv_obstack, \"-xlto\");\n@@ -536,7 +550,7 @@ main (int argc, char **argv)\n   gcc_init_libintl ();\n   diagnostic_initialize (global_dc, 0);\n \n-  if (atexit (mkoffload_atexit) != 0)\n+  if (atexit (mkoffload_cleanup) != 0)\n     fatal_error (input_location, \"atexit failed\");\n \n   const char *host_compiler = getenv (\"COLLECT_GCC\");\n@@ -568,6 +582,8 @@ main (int argc, char **argv)\n \t\t\t \"unrecognizable argument of option \" STR);\n \t}\n #undef STR\n+      else if (strcmp (argv[i], \"-save-temps\") == 0)\n+\tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n \tverbose = true;\n     }"}, {"sha": "ba5a138f8a74d712b799e2cef772455604eea558", "filename": "gcc/config/nvptx/mkoffload.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fmkoffload.c?ref=4314a3efd0738504350bc683d8f977ff2ac25ddf", "patch": "@@ -58,26 +58,36 @@ enum offload_abi offload_abi = OFFLOAD_ABI_UNSET;\n \n /* Delete tempfiles.  */\n \n-/* Unlink a temporary file unless requested otherwise.  */\n+void\n+tool_cleanup (bool from_signal ATTRIBUTE_UNUSED)\n+{\n+  if (ptx_cfile_name)\n+    maybe_unlink (ptx_cfile_name);\n+  if (ptx_name)\n+    maybe_unlink (ptx_name);\n+}\n+\n+static void\n+mkoffload_cleanup (void)\n+{\n+  tool_cleanup (false);\n+}\n+\n+/* Unlink FILE unless requested otherwise.  */\n \n void\n maybe_unlink (const char *file)\n {\n-  if (! debug)\n+  if (!save_temps)\n     {\n       if (unlink_if_ordinary (file)\n \t  && errno != ENOENT)\n \tfatal_error (input_location, \"deleting file %s: %m\", file);\n     }\n-  else\n+  else if (verbose)\n     fprintf (stderr, \"[Leaving %s]\\n\", file);\n }\n \n-void\n-tool_cleanup (bool)\n-{\n-}\n-\n /* Add or change the value of an environment variable, outputting the\n    change to standard error if in verbose mode.  */\n static void\n@@ -353,6 +363,8 @@ compile_native (const char *infile, const char *outfile, const char *compiler)\n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, compiler);\n+  if (save_temps)\n+    obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   switch (offload_abi)\n@@ -387,6 +399,9 @@ main (int argc, char **argv)\n   progname = \"mkoffload\";\n   diagnostic_initialize (global_dc, 0);\n \n+  if (atexit (mkoffload_cleanup) != 0)\n+    fatal_error (input_location, \"atexit failed\");\n+\n   char *collect_gcc = getenv (\"COLLECT_GCC\");\n   if (collect_gcc == NULL)\n     fatal_error (input_location, \"COLLECT_GCC must be set.\");\n@@ -461,13 +476,17 @@ main (int argc, char **argv)\n #undef STR\n       else if (strcmp (argv[i], \"-fopenmp\") == 0)\n \tfopenmp = true;\n+      else if (strcmp (argv[i], \"-save-temps\") == 0)\n+\tsave_temps = true;\n       else if (strcmp (argv[i], \"-v\") == 0)\n \tverbose = true;\n     }\n \n   struct obstack argv_obstack;\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, driver);\n+  if (save_temps)\n+    obstack_ptr_grow (&argv_obstack, \"-save-temps\");\n   if (verbose)\n     obstack_ptr_grow (&argv_obstack, \"-v\");\n   obstack_ptr_grow (&argv_obstack, \"-xlto\");\n@@ -532,7 +551,5 @@ main (int argc, char **argv)\n \n   compile_native (ptx_cfile_name, outname, collect_gcc);\n \n-  utils_cleanup (false);\n-\n   return 0;\n }"}, {"sha": "20e67eddf1baac35d091dc94e471df499796223b", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4314a3efd0738504350bc683d8f977ff2ac25ddf/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=4314a3efd0738504350bc683d8f977ff2ac25ddf", "patch": "@@ -685,6 +685,8 @@ compile_offload_image (const char *target, const char *compiler_path,\n       struct obstack argv_obstack;\n       obstack_init (&argv_obstack);\n       obstack_ptr_grow (&argv_obstack, compiler);\n+      if (save_temps)\n+\tobstack_ptr_grow (&argv_obstack, \"-save-temps\");\n       if (verbose)\n \tobstack_ptr_grow (&argv_obstack, \"-v\");\n       obstack_ptr_grow (&argv_obstack, \"-o\");"}]}