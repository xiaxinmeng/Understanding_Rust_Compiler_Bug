{"sha": "7401428337943079104e576e310bd0653dcf1d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwMTQyODMzNzk0MzA3OTEwNGU1NzZlMzEwYmQwNjUzZGNmMWQyZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-08-04T10:46:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:46:25Z"}, "message": "exp_attr.adb (Expand_N_Attribute_Reference): Make sure prefix of constructed 'Valid attribute in -gnatVa mode does not...\n\n2014-08-04  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): Make sure prefix\n\tof constructed 'Valid attribute in -gnatVa mode does not appear\n\tto come from source.\n\t* sem_attr.adb (Analyze_Access_Attribute): Don't set\n\tNever_Set_In_Source for non-source reference.\n\t* sem_util.adb: Minor reformatting.\n\t* sem_warn.adb (Check_References): Don't check Address_Taken,\n\tnot necessary, see comment.\n\nFrom-SVN: r213568", "tree": {"sha": "5b3b1ed131c177e7f63281041f2faf7a7edb8522", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3b1ed131c177e7f63281041f2faf7a7edb8522"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7401428337943079104e576e310bd0653dcf1d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7401428337943079104e576e310bd0653dcf1d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7401428337943079104e576e310bd0653dcf1d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7401428337943079104e576e310bd0653dcf1d2d/comments", "author": null, "committer": null, "parents": [{"sha": "536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536a2daf12f6a3c969f2b0df3a18ed9a985b817d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536a2daf12f6a3c969f2b0df3a18ed9a985b817d"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "ea25404364776e796693f7bd802ddac41a8ea3b3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7401428337943079104e576e310bd0653dcf1d2d", "patch": "@@ -1,3 +1,14 @@\n+2014-08-04  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Make sure prefix\n+\tof constructed 'Valid attribute in -gnatVa mode does not appear\n+\tto come from source.\n+\t* sem_attr.adb (Analyze_Access_Attribute): Don't set\n+\tNever_Set_In_Source for non-source reference.\n+\t* sem_util.adb: Minor reformatting.\n+\t* sem_warn.adb (Check_References): Don't check Address_Taken,\n+\tnot necessary, see comment.\n+\n 2014-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_util.adb, sem_case.adb: Minor reformatting."}, {"sha": "d2cd8e4fcfb2865ac27f12592609937e37825c05", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=7401428337943079104e576e310bd0653dcf1d2d", "patch": "@@ -6448,13 +6448,19 @@ package body Exp_Attr is\n                      end if;\n \n                      --  We now have an object of the proper endianness and\n-                     --  alignment, and can call the Valid runtime routine.\n+                     --  alignment, and can construct a Valid attribute.\n+\n+                     --  We make sure the prefix of this valid attribute is\n+                     --  marked as not coming from source, to avoid losing\n+                     --  warnings from 'Valid looking like a possible update.\n+\n+                     Set_Comes_From_Source (Pref, False);\n \n                      Expand_Fpt_Attribute\n                        (N, Pkg, Name_Valid,\n                         New_List (\n                           Make_Attribute_Reference (Loc,\n-                            Prefix => Unchecked_Convert_To (Ftp, Pref),\n+                            Prefix         => Unchecked_Convert_To (Ftp, Pref),\n                             Attribute_Name => Name_Unrestricted_Access)));\n                end case;\n "}, {"sha": "cdb3cfe33c2b34308f507817d678a236b3093f86", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=7401428337943079104e576e310bd0653dcf1d2d", "patch": "@@ -1005,7 +1005,13 @@ package body Sem_Attr is\n                   --  pointer can be used to modify the variable, and we might\n                   --  not detect this, leading to some junk warnings.\n \n-                  Set_Never_Set_In_Source (Ent, False);\n+                  --  We only do this for source references, since otherwise\n+                  --  we can suppress warnings, e.g. from the unrestricted\n+                  --  access generated for validity checks in -gnatVa mode.\n+\n+                  if Comes_From_Source (N) then\n+                     Set_Never_Set_In_Source (Ent, False);\n+                  end if;\n \n                   --  Mark entity as address taken, and kill current values\n "}, {"sha": "832c320b9032f1f5916efa3bdba467a3e254c8c9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7401428337943079104e576e310bd0653dcf1d2d", "patch": "@@ -14557,8 +14557,7 @@ package body Sem_Util is\n             --  this modifies a constant, then give an appropriate warning.\n \n             if Overlays_Constant (Ent)\n-              and then Modification_Comes_From_Source\n-              and then Sure\n+              and then (Modification_Comes_From_Source and Sure)\n             then\n                declare\n                   A : constant Node_Id := Address_Clause (Ent);"}, {"sha": "e8c8f0b1f7f529eefe3159dc41943f3b41a18c5e", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7401428337943079104e576e310bd0653dcf1d2d/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=7401428337943079104e576e310bd0653dcf1d2d", "patch": "@@ -1110,11 +1110,15 @@ package body Sem_Warn is\n                --  since a given instance could have modifications outside\n                --  the package.\n \n+               --  Note that we used to check Address_Taken here, but we don't\n+               --  want to do that since it can be set for non-source cases,\n+               --  e.g. the Unrestricted_Access from a valid attribute, and\n+               --  the wanted effect is included in Never_Set_In_Source.\n+\n                elsif Warn_On_Constant\n                  and then (Ekind (E1) = E_Variable\n                             and then Has_Initial_Value (E1))\n                  and then Never_Set_In_Source_Check_Spec (E1)\n-                 and then not Address_Taken (E1)\n                  and then not Generic_Package_Spec_Entity (E1)\n                then\n                   --  A special case, if this variable is volatile and not"}]}