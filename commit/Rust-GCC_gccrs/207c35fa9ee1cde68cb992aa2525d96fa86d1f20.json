{"sha": "207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA3YzM1ZmE5ZWUxY2RlNjhjYjk5MmFhMjUyNWQ5NmZhODZkMWYyMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-01T04:12:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-01T04:12:01Z"}, "message": "syscall: Portability code for epoll_event on GNU/Linux.\n\nFrom-SVN: r180729", "tree": {"sha": "9c67647652b1e15be8a4fa671f2e7a469b916f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c67647652b1e15be8a4fa671f2e7a469b916f5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/comments", "author": null, "committer": null, "parents": [{"sha": "15694fdd6d84dbed29898eff5caabc807d4f3067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15694fdd6d84dbed29898eff5caabc807d4f3067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15694fdd6d84dbed29898eff5caabc807d4f3067"}], "stats": {"total": 314, "additions": 301, "deletions": 13}, "files": [{"sha": "2a680190ff56eb2101f9eabeebd9ef77b7f22cec", "filename": "libgo/Makefile.am", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "patch": "@@ -1498,7 +1498,7 @@ endif # !LIBGO_IS_LINUX\n \n # Define socket sizes and types.\n if LIBGO_IS_LINUX\n-syscall_socket_file = go/syscall/socket_linux.go\n+syscall_socket_file = go/syscall/socket_linux.go epoll.go\n else\n if LIBGO_IS_SOLARIS\n syscall_socket_file = go/syscall/socket_solaris.go\n@@ -1582,6 +1582,34 @@ s-sysinfo: $(srcdir)/mksysinfo.sh config.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-sysinfo.go sysinfo.go\n \t$(STAMP) $@\n \n+# The epoll struct has an embedded union and is packed on x86_64,\n+# which is too complicated for mksysinfo.sh.  We find the offset of\n+# the only field we care about in configure.ac, and generate the\n+# struct here.\n+epoll.go: s-epoll; @true\n+s-epoll: Makefile\n+\trm -f epoll.go.tmp\n+\techo 'package syscall' > epoll.go.tmp\n+\techo 'type EpollEvent struct {' >> epoll.go.tmp\n+\techo '\tEvents uint32' >> epoll.go.tmp\n+\tcase \"$(SIZEOF_STRUCT_EPOLL_EVENT),$(STRUCT_EPOLL_EVENT_FD_OFFSET)\" in \\\n+\t0,0) echo 1>&2 \"*** struct epoll_event data.fd offset unknown\"; \\\n+\t   exit 1; ;; \\\n+\t8,4) echo '\tFd int32' >> epoll.go.tmp; ;; \\\n+\t12,4) echo '\tFd int32' >> epoll.go.tmp; \\\n+\t   echo '\tPad [4]byte' >> epoll.go.tmp; ;; \\\n+\t12,8) echo '\tPad [4]byte' >> epoll.go.tmp; \\\n+\t   echo '\tFd int32' >> epoll.go.tmp; ;; \\\n+\t16,8) echo '\tPad [4]byte' >> epoll.go.tmp; \\\n+\t   echo '\tFd int32' >> epoll.go.tmp; \\\n+\t   echo '\tPad2 [4]byte' >> epoll.go.tmp; ;; \\\n+\t*) echo 1>&2 \"*** struct epoll_event unsupported\"; \\\n+\t   exit 1; ;; \\\n+\tesac\n+\techo '}' >> epoll.go.tmp\n+\t$(SHELL) $(srcdir)/../move-if-change epoll.go.tmp epoll.go\n+\t$(STAMP) $@\n+\n if LIBGO_IS_LINUX\n # os_lib_inotify_lo = os/inotify.lo\n os_lib_inotify_lo ="}, {"sha": "da7031f4381b2620034aea8e0ca835f4dcf85acc", "filename": "libgo/Makefile.in", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "patch": "@@ -424,9 +424,11 @@ RANLIB = @RANLIB@\n SED = @SED@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n+SIZEOF_STRUCT_EPOLL_EVENT = @SIZEOF_STRUCT_EPOLL_EVENT@\n SPLIT_STACK = @SPLIT_STACK@\n STRINGOPS_FLAG = @STRINGOPS_FLAG@\n STRIP = @STRIP@\n+STRUCT_EPOLL_EVENT_FD_OFFSET = @STRUCT_EPOLL_EVENT_FD_OFFSET@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n@@ -1868,7 +1870,7 @@ go_testing_script_files = \\\n @LIBGO_IS_LINUX_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_socket_file = go/syscall/socket_solaris.go\n \n # Define socket sizes and types.\n-@LIBGO_IS_LINUX_TRUE@syscall_socket_file = go/syscall/socket_linux.go\n+@LIBGO_IS_LINUX_TRUE@syscall_socket_file = go/syscall/socket_linux.go epoll.go\n @LIBGO_IS_386_FALSE@@LIBGO_IS_SOLARIS_TRUE@syscall_uname_file = go/syscall/libcall_uname.go\n \n # Support for uname.\n@@ -4475,6 +4477,34 @@ s-sysinfo: $(srcdir)/mksysinfo.sh config.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-sysinfo.go sysinfo.go\n \t$(STAMP) $@\n \n+# The epoll struct has an embedded union and is packed on x86_64,\n+# which is too complicated for mksysinfo.sh.  We find the offset of\n+# the only field we care about in configure.ac, and generate the\n+# struct here.\n+epoll.go: s-epoll; @true\n+s-epoll: Makefile\n+\trm -f epoll.go.tmp\n+\techo 'package syscall' > epoll.go.tmp\n+\techo 'type EpollEvent struct {' >> epoll.go.tmp\n+\techo '\tEvents uint32' >> epoll.go.tmp\n+\tcase \"$(SIZEOF_STRUCT_EPOLL_EVENT),$(STRUCT_EPOLL_EVENT_FD_OFFSET)\" in \\\n+\t0,0) echo 1>&2 \"*** struct epoll_event data.fd offset unknown\"; \\\n+\t   exit 1; ;; \\\n+\t8,4) echo '\tFd int32' >> epoll.go.tmp; ;; \\\n+\t12,4) echo '\tFd int32' >> epoll.go.tmp; \\\n+\t   echo '\tPad [4]byte' >> epoll.go.tmp; ;; \\\n+\t12,8) echo '\tPad [4]byte' >> epoll.go.tmp; \\\n+\t   echo '\tFd int32' >> epoll.go.tmp; ;; \\\n+\t16,8) echo '\tPad [4]byte' >> epoll.go.tmp; \\\n+\t   echo '\tFd int32' >> epoll.go.tmp; \\\n+\t   echo '\tPad2 [4]byte' >> epoll.go.tmp; ;; \\\n+\t*) echo 1>&2 \"*** struct epoll_event unsupported\"; \\\n+\t   exit 1; ;; \\\n+\tesac\n+\techo '}' >> epoll.go.tmp\n+\t$(SHELL) $(srcdir)/../move-if-change epoll.go.tmp epoll.go\n+\t$(STAMP) $@\n+\n asn1/asn1.lo: $(go_asn1_files) big.gox bytes.gox fmt.gox io.gox os.gox \\\n \t\treflect.gox strconv.gox strings.gox time.gox\n \t$(BUILDPACKAGE)"}, {"sha": "9c619bed47dbf7bd6ab9f5d188f9c03aae0cc8cf", "filename": "libgo/configure", "status": "modified", "additions": 217, "deletions": 2, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "patch": "@@ -602,6 +602,8 @@ ac_subst_vars='am__EXEEXT_FALSE\n am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n+STRUCT_EPOLL_EVENT_FD_OFFSET\n+SIZEOF_STRUCT_EPOLL_EVENT\n STRINGOPS_FLAG\n HAVE_WAIT4_FALSE\n HAVE_WAIT4_TRUE\n@@ -1949,6 +1951,184 @@ $as_echo \"$ac_res\" >&6; }\n   eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n \n } # ac_fn_c_check_type\n+\n+# ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n+# --------------------------------------------\n+# Tries to find the compile-time value of EXPR in a program that includes\n+# INCLUDES, setting VAR accordingly. Returns whether the value could be\n+# computed\n+ac_fn_c_compute_int ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  if test \"$cross_compiling\" = yes; then\n+    # Depending upon the size, compute the lo and hi bounds.\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) >= 0)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_lo=0 ac_mid=0\n+  while :; do\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) <= $ac_mid)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=$ac_mid; break\n+else\n+  as_fn_arith $ac_mid + 1 && ac_lo=$as_val\n+\t\t\tif test $ac_lo -le $ac_mid; then\n+\t\t\t  ac_lo= ac_hi=\n+\t\t\t  break\n+\t\t\tfi\n+\t\t\tas_fn_arith 2 '*' $ac_mid + 1 && ac_mid=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  done\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) < 0)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=-1 ac_mid=-1\n+  while :; do\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) >= $ac_mid)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_lo=$ac_mid; break\n+else\n+  as_fn_arith '(' $ac_mid ')' - 1 && ac_hi=$as_val\n+\t\t\tif test $ac_mid -le $ac_hi; then\n+\t\t\t  ac_lo= ac_hi=\n+\t\t\t  break\n+\t\t\tfi\n+\t\t\tas_fn_arith 2 '*' $ac_mid && ac_mid=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  done\n+else\n+  ac_lo= ac_hi=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+# Binary search between lo and hi bounds.\n+while test \"x$ac_lo\" != \"x$ac_hi\"; do\n+  as_fn_arith '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo && ac_mid=$as_val\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) <= $ac_mid)];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=$ac_mid\n+else\n+  as_fn_arith '(' $ac_mid ')' + 1 && ac_lo=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+done\n+case $ac_lo in #((\n+?*) eval \"$3=\\$ac_lo\"; ac_retval=0 ;;\n+'') ac_retval=1 ;;\n+esac\n+  else\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+static long int longval () { return $2; }\n+static unsigned long int ulongval () { return $2; }\n+#include <stdio.h>\n+#include <stdlib.h>\n+int\n+main ()\n+{\n+\n+  FILE *f = fopen (\"conftest.val\", \"w\");\n+  if (! f)\n+    return 1;\n+  if (($2) < 0)\n+    {\n+      long int i = longval ();\n+      if (i != ($2))\n+\treturn 1;\n+      fprintf (f, \"%ld\", i);\n+    }\n+  else\n+    {\n+      unsigned long int i = ulongval ();\n+      if (i != ($2))\n+\treturn 1;\n+      fprintf (f, \"%lu\", i);\n+    }\n+  /* Do not output a trailing newline, as this causes \\r\\n confusion\n+     on some platforms.  */\n+  return ferror (f) || fclose (f) != 0;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  echo >>conftest.val; read $3 <conftest.val; ac_retval=0\n+else\n+  ac_retval=1\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+rm -f conftest.val\n+\n+  fi\n+  eval $as_lineno_stack; test \"x$as_lineno_stack\" = x && { as_lineno=; unset as_lineno;}\n+  return $ac_retval\n+\n+} # ac_fn_c_compute_int\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -10916,7 +11096,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10919 \"configure\"\n+#line 11099 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11022,7 +11202,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11025 \"configure\"\n+#line 11205 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14478,6 +14658,41 @@ fi\n \n CFLAGS=$CFLAGS_hold\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking epoll_event size\" >&5\n+$as_echo_n \"checking epoll_event size... \" >&6; }\n+if test \"${libgo_cv_c_epoll_event_size+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"sizeof (struct epoll_event)\" \"libgo_cv_c_epoll_event_size\"        \"#include <sys/epoll.h>\"; then :\n+\n+else\n+  libgo_cv_c_epoll_event_size=0\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_epoll_event_size\" >&5\n+$as_echo \"$libgo_cv_c_epoll_event_size\" >&6; }\n+SIZEOF_STRUCT_EPOLL_EVENT=${libgo_cv_c_epoll_event_size}\n+\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking epoll_event data.fd offset\" >&5\n+$as_echo_n \"checking epoll_event data.fd offset... \" >&6; }\n+if test \"${libgo_cv_c_epoll_event_fd_offset+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"offsetof (struct epoll_event, data.fd)\" \"libgo_cv_c_epoll_event_fd_offset\"        \"#include <stddef.h>\n+#include <sys/epoll.h>\"; then :\n+\n+else\n+  libgo_cv_c_epoll_event_fd_offset=0\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_epoll_event_fd_offset\" >&5\n+$as_echo \"$libgo_cv_c_epoll_event_fd_offset\" >&6; }\n+STRUCT_EPOLL_EVENT_FD_OFFSET=${libgo_cv_c_epoll_event_fd_offset}\n+\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure"}, {"sha": "e19b5f37b708c63c76506bb5bba5df464c47e0f7", "filename": "libgo/configure.ac", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "patch": "@@ -505,6 +505,28 @@ CFLAGS=\"$CFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE\"\n AC_CHECK_TYPES(off64_t)\n CFLAGS=$CFLAGS_hold\n \n+dnl Work out the size of the epoll_events struct on GNU/Linux.\n+AC_CACHE_CHECK([epoll_event size],\n+[libgo_cv_c_epoll_event_size],\n+[AC_COMPUTE_INT(libgo_cv_c_epoll_event_size,\n+[sizeof (struct epoll_event)],\n+[#include <sys/epoll.h>],\n+[libgo_cv_c_epoll_event_size=0])])\n+SIZEOF_STRUCT_EPOLL_EVENT=${libgo_cv_c_epoll_event_size}\n+AC_SUBST(SIZEOF_STRUCT_EPOLL_EVENT)\n+\n+dnl Work out the offset of the fd field in the epoll_events struct on\n+dnl GNU/Linux.\n+AC_CACHE_CHECK([epoll_event data.fd offset],\n+[libgo_cv_c_epoll_event_fd_offset],\n+[AC_COMPUTE_INT(libgo_cv_c_epoll_event_fd_offset,\n+[offsetof (struct epoll_event, data.fd)],\n+[#include <stddef.h>\n+#include <sys/epoll.h>],\n+[libgo_cv_c_epoll_event_fd_offset=0])])\n+STRUCT_EPOLL_EVENT_FD_OFFSET=${libgo_cv_c_epoll_event_fd_offset}\n+AC_SUBST(STRUCT_EPOLL_EVENT_FD_OFFSET)\n+\n AC_CACHE_SAVE\n \n if test ${multilib} = yes; then"}, {"sha": "49aac87bb7a0836dc90cd0a2f075f41b381848f5", "filename": "libgo/go/syscall/socket_linux.go", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Fgo%2Fsyscall%2Fsocket_linux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Fgo%2Fsyscall%2Fsocket_linux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_linux.go?ref=207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "patch": "@@ -164,15 +164,6 @@ func anyToSockaddrOS(rsa *RawSockaddrAny) (Sockaddr, int) {\n \treturn nil, EAFNOSUPPORT\n }\n \n-// We don't take this type directly from the header file because it\n-// uses a union.  FIXME.\n-\n-type EpollEvent struct {\n-\tEvents uint32\n-\tFd int32\n-\tPad int32\n-}\n-\n //sysnb\tEpollCreate(size int) (fd int, errno int)\n //epoll_create(size int) int\n "}, {"sha": "21a749276d7552ccc0c5742d9fc5b2112e7e2014", "filename": "libgo/testsuite/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/207c35fa9ee1cde68cb992aa2525d96fa86d1f20/libgo%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2FMakefile.in?ref=207c35fa9ee1cde68cb992aa2525d96fa86d1f20", "patch": "@@ -133,9 +133,11 @@ RANLIB = @RANLIB@\n SED = @SED@\n SET_MAKE = @SET_MAKE@\n SHELL = @SHELL@\n+SIZEOF_STRUCT_EPOLL_EVENT = @SIZEOF_STRUCT_EPOLL_EVENT@\n SPLIT_STACK = @SPLIT_STACK@\n STRINGOPS_FLAG = @STRINGOPS_FLAG@\n STRIP = @STRIP@\n+STRUCT_EPOLL_EVENT_FD_OFFSET = @STRUCT_EPOLL_EVENT_FD_OFFSET@\n VERSION = @VERSION@\n WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@"}]}