{"sha": "7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExN2VmNWU2M2YwMjlkNTg5ZGU1Y2I0ZTQ5OWIwMGNiMGY2MjBiNQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-03-28T01:28:01Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2005-03-28T01:28:01Z"}, "message": "ternary.h: Don't use PARAMS anymore.\n\ninclude/\n2005-03-27  Gabriel Dos Reis  <gdr@integreable-solutions.net>\n\n        * ternary.h: Don't use PARAMS anymore.\n\nlibiberty/\n2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n\n        Convert libiberty to use ISO C prototype style 6/n.\n        * strerror.c (init_error_tables, errno_max, strerror,\n        strerrno,\n        strtoerrno, main): Use ISO C prototype style.\n        * strncasecmp.c (strncasecmp): Likewise.\n        * strncmp.c (strncmp): Likewise.\n        * strndup.c (strndup): Likewise.\n        * strrchr.c (strrchr): Likewise.\n        * strsignal.c (init_signal_tables, signo_max, strsignal,\n        strsigno, strtosigno, psignal, main): Likewise.\n        * strstr.c (strstr): Likewise.\n        * strtod.c (strtod, atof): Likewise.\n        * strtol.c (strtol): Likewise.\n        * strtoul.c (strtoul): Likewise.\n        * ternary.c (ternary_insert, ternary_cleanup, ternary_search,\n        ternary_recursivesearch): Likewise.\n        * tmpnam.c (tmpnam): Likewise.\n        * unlink-if-ordinary.c (unlink_if_ordinary): Likewise.\n        * vasprintf.c (int_vasprintf, vasprintf, checkit, main):\n        Likewise.\n        * vfork.c (vfork): Likewise.\n        * vfprintf.c (vfprintf): Likewise.\n        * vprintf.c (vprintf): Likewise.\n        * vsnprintf.c (vsnprintf, checkit, main): Likewise.\n        * vsprintf.c (vsprintf): Likewise.\n        * waitpid.c (waitpid): Likewise.\n        * xatexit.c (xatexit, xatexit_cleanup): Likewise.\n        * xexit.c (xexit): Likewise.\n        * xmalloc.c (xmalloc_set_program_name, xmalloc_failed,\n        xmalloc,\n        xcalloc, xrealloc): Likewise.\n        * xmemdup.c (xmemdup): Likewise.\n        * xstrdup.c (xstrdup): Likewise.\n        * xstrerror.c (xstrerror): Likewise.\n        * xstrndup.c (xstrndup): Likewise.\n\nFrom-SVN: r97122", "tree": {"sha": "b5aec1f785455ee50707717b6c5a6c16dfd4814f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5aec1f785455ee50707717b6c5a6c16dfd4814f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/comments", "author": null, "committer": null, "parents": [{"sha": "023d54e0f553da239db6017c5a602ee57e5c4467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/023d54e0f553da239db6017c5a602ee57e5c4467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/023d54e0f553da239db6017c5a602ee57e5c4467"}], "stats": {"total": 320, "additions": 122, "deletions": 198}, "files": [{"sha": "c822bfa56a1773e7c2f7b478f5768f379eb61406", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -1,3 +1,7 @@\n+2005-03-27  Gabriel Dos Reis  <gdr@integreable-solutions.net>\n+\n+\t* ternary.h: Don't use PARAMS anymore.\n+\n 2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* md5.h: Remove definition and uses of __P."}, {"sha": "c8de76ac0c8bec722f83bb3f43325823d864f182", "filename": "include/ternary.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/include%2Fternary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/include%2Fternary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fternary.h?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -38,14 +38,14 @@ ternary_node;\n    already there, and replace is 0.\n    Otherwise, replaces if it it exists, inserts if it doesn't, and\n    returns the data you passed in. */\n-PTR ternary_insert PARAMS ((ternary_tree *p, const char *s,\n-\t\t\t    PTR data, int replace));\n+PTR ternary_insert (ternary_tree *p, const char *s,\n+                    PTR data, int replace);\n \n /* Delete the ternary search tree rooted at P. \n    Does NOT delete the data you associated with the strings. */\n-void ternary_cleanup PARAMS ((ternary_tree p));\n+void ternary_cleanup (ternary_tree p);\n \n /* Search the ternary tree for string S, returning the data associated\n    with it if found. */\n-PTR ternary_search PARAMS ((const ternary_node *p, const char *s));\n+PTR ternary_search (const ternary_node *p, const char *s);\n #endif"}, {"sha": "60cbe919d0865c69af0ef81da1165329996b1d61", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -1,3 +1,38 @@\n+2005-03-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\tConvert libiberty to use ISO C prototype style 6/n.\n+\t* strerror.c (init_error_tables, errno_max, strerror, strerrno, \n+\tstrtoerrno, main): Use ISO C prototype style.\n+\t* strncasecmp.c (strncasecmp): Likewise.\n+\t* strncmp.c (strncmp): Likewise.\n+\t* strndup.c (strndup): Likewise.\n+\t* strrchr.c (strrchr): Likewise.\n+\t* strsignal.c (init_signal_tables, signo_max, strsignal, \n+\tstrsigno, strtosigno, psignal, main): Likewise.\n+\t* strstr.c (strstr): Likewise.\n+\t* strtod.c (strtod, atof): Likewise.\n+\t* strtol.c (strtol): Likewise.\n+\t* strtoul.c (strtoul): Likewise.\n+\t* ternary.c (ternary_insert, ternary_cleanup, ternary_search, \n+\tternary_recursivesearch): Likewise.\n+\t* tmpnam.c (tmpnam): Likewise.\n+\t* unlink-if-ordinary.c (unlink_if_ordinary): Likewise.\n+\t* vasprintf.c (int_vasprintf, vasprintf, checkit, main): Likewise.\n+\t* vfork.c (vfork): Likewise.\n+\t* vfprintf.c (vfprintf): Likewise.\n+\t* vprintf.c (vprintf): Likewise.\n+\t* vsnprintf.c (vsnprintf, checkit, main): Likewise.\n+\t* vsprintf.c (vsprintf): Likewise.\n+\t* waitpid.c (waitpid): Likewise.\n+\t* xatexit.c (xatexit, xatexit_cleanup): Likewise.\n+\t* xexit.c (xexit): Likewise.\n+\t* xmalloc.c (xmalloc_set_program_name, xmalloc_failed, xmalloc, \n+\txcalloc, xrealloc): Likewise.\n+\t* xmemdup.c (xmemdup): Likewise.\n+\t* xstrdup.c (xstrdup): Likewise.\n+\t* xstrerror.c (xstrerror): Likewise.\n+\t* xstrndup.c (xstrndup): Likewise.\n+\n 2005-03-27  Andreas Jaeger  <aj@suse.de>\n \n \t* configure.ac (ac_c_preproc_warn_flag): Remove -Wtraditional"}, {"sha": "0efadc3d65eb927dfc34d059318a965c5375008b", "filename": "libiberty/strerror.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -43,7 +43,7 @@ extern PTR memset ();\n #  define MAX(a,b) ((a) > (b) ? (a) : (b))\n #endif\n \n-static void init_error_tables PARAMS ((void));\n+static void init_error_tables (void);\n \n /* Translation table for errno values.  See intro(2) in most UNIX systems\n    Programmers Reference Manuals.\n@@ -503,7 +503,7 @@ BUGS\n */\n \n static void\n-init_error_tables ()\n+init_error_tables (void)\n {\n   const struct error_info *eip;\n   int nbytes;\n@@ -584,7 +584,7 @@ symbolic name or message.\n */\n \n int\n-errno_max ()\n+errno_max (void)\n {\n   int maxsize;\n \n@@ -623,8 +623,7 @@ next call to @code{strerror}.\n */\n \n char *\n-strerror (errnoval)\n-  int errnoval;\n+strerror (int errnoval)\n {\n   const char *msg;\n   static char buf[32];\n@@ -690,8 +689,7 @@ valid until the next call to @code{strerrno}.\n */\n \n const char *\n-strerrno (errnoval)\n-  int errnoval;\n+strerrno (int errnoval)\n {\n   const char *name;\n   static char buf[32];\n@@ -738,8 +736,7 @@ to an errno value.  If no translation is found, returns 0.\n */\n \n int\n-strtoerrno (name)\n-     const char *name;\n+strtoerrno (const char *name)\n {\n   int errnoval = 0;\n \n@@ -779,7 +776,7 @@ strtoerrno (name)\n #include <stdio.h>\n \n int\n-main ()\n+main (void)\n {\n   int errn;\n   int errnmax;"}, {"sha": "47700dde5183e70708189672edc52ca4025c4af4", "filename": "libiberty/strncasecmp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrncasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrncasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncasecmp.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -25,11 +25,7 @@ static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n #endif /* LIBC_SCCS and not lint */\n \n #include <ansidecl.h>\n-#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n-#else\n-#define size_t unsigned long\n-#endif\n \n /*\n  * This array is designed for mapping upper and lower case letter\n@@ -72,9 +68,7 @@ static const unsigned char charmap[] = {\n };\n \n int\n-strncasecmp(s1, s2, n)\n-\tconst char *s1, *s2;\n-\tregister size_t n;\n+strncasecmp(const char *s1, const char *s2, register size_t n)\n {\n     register unsigned char u1, u2;\n "}, {"sha": "916c2f07a8a88cf8213c1c4e338a7cb9a13f19b4", "filename": "libiberty/strncmp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrncmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrncmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncmp.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -13,16 +13,10 @@ Compares the first @var{n} bytes of two strings, returning a value as\n */\n \n #include <ansidecl.h>\n-#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n-#else\n-#define size_t unsigned long\n-#endif\n \n int\n-strncmp(s1, s2, n)\n-     const char *s1, *s2;\n-     register size_t n;\n+strncmp(const char *s1, const char *s2, register size_t n)\n {\n   register unsigned char u1, u2;\n "}, {"sha": "b7647777bc5987680765cec14470b093ae51571f", "filename": "libiberty/strndup.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrndup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrndup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrndup.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -31,20 +31,14 @@ memory was available.  The result is always NUL terminated.\n */\n \n #include \"ansidecl.h\"\n-#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n-#else\n-#define size_t unsigned long\n-#endif\n \n-extern size_t\tstrlen PARAMS ((const char*));\n-extern PTR\tmalloc PARAMS ((size_t));\n-extern PTR\tmemcpy PARAMS ((PTR, const PTR, size_t));\n+extern size_t\tstrlen (const char*);\n+extern PTR\tmalloc (size_t);\n+extern PTR\tmemcpy (PTR, const PTR, size_t);\n \n char *\n-strndup(s, n)\n-     const char *s;\n-     size_t n;\n+strndup (const char *s, size_t n)\n {\n   char *result;\n   size_t len = strlen (s);"}, {"sha": "5cf7c14d8b746ea64cd49d44d598d5c96731fed8", "filename": "libiberty/strrchr.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrrchr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrrchr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrrchr.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -16,9 +16,7 @@ null character, the results are undefined.\n #include <ansidecl.h>\n \n char *\n-strrchr (s, c)\n-  register const char *s;\n-  int c;\n+strrchr (register const char *s, int c)\n {\n   char *rtnval = 0;\n "}, {"sha": "c3a16ab9bdcaf37997201bbebaae8fd33b830820", "filename": "libiberty/strsignal.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrsignal.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -41,18 +41,14 @@ extern PTR memset ();\n #undef sys_nsig\n \n #ifndef NULL\n-#  ifdef ANSI_PROTOTYPES\n-#    define NULL (void *) 0\n-#  else\n-#    define NULL 0\n-#  endif\n+#  define NULL (void *) 0\n #endif\n \n #ifndef MAX\n #  define MAX(a,b) ((a) > (b) ? (a) : (b))\n #endif\n \n-static void init_signal_tables PARAMS ((void));\n+static void init_signal_tables (void);\n \n /* Translation table for signal values.\n \n@@ -288,7 +284,7 @@ BUGS\n */\n \n static void\n-init_signal_tables ()\n+init_signal_tables (void)\n {\n   const struct signal_info *eip;\n   int nbytes;\n@@ -369,7 +365,7 @@ symbolic name or message.\n */\n \n int\n-signo_max ()\n+signo_max (void)\n {\n   int maxsize;\n \n@@ -409,8 +405,7 @@ call to @code{strsignal}.\n #ifndef HAVE_STRSIGNAL\n \n const char *\n-strsignal (signo)\n-  int signo;\n+strsignal (int signo)\n {\n   const char *msg;\n   static char buf[32];\n@@ -469,8 +464,7 @@ valid until the next call to @code{strsigno}.\n */\n \n const char *\n-strsigno (signo)\n-  int signo;\n+strsigno (int signo)\n {\n   const char *name;\n   static char buf[32];\n@@ -513,8 +507,7 @@ translation is found, returns 0.\n */\n \n int\n-strtosigno (name)\n-     const char *name;\n+strtosigno (const char *name)\n {\n   int signo = 0;\n \n@@ -556,9 +549,7 @@ followed by a newline.\n #ifndef HAVE_PSIGNAL\n \n void\n-psignal (signo, message)\n-  unsigned signo;\n-  char *message;\n+psignal (unsigned signo, char *message)\n {\n   if (signal_names == NULL)\n     {\n@@ -585,7 +576,7 @@ psignal (signo, message)\n #include <stdio.h>\n \n int\n-main ()\n+main (void)\n {\n   int signo;\n   int maxsigno;"}, {"sha": "ff8abd20f786add836af29c309109533f0965aba", "filename": "libiberty/strstr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrstr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrstr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrstr.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -21,8 +21,7 @@ length, the function returns @var{string}.\n    been validated to comply with it.  -fnf */\n \n char *\n-strstr (s1, s2)\n-  char *s1, *s2;\n+strstr (char *s1, char *s2)\n {\n   register char *p = s1;\n   extern char *strchr ();"}, {"sha": "4f119c46114b4988700db4d5b63979b72ffb24c4", "filename": "libiberty/strtod.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrtod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrtod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtod.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -40,16 +40,14 @@ the location referenced by @var{endptr}.\n #include \"ansidecl.h\"\n #include \"safe-ctype.h\"\n \n-extern double atof ();\n+extern double atof (const char *);\n \n /* Disclaimer: this is currently just used by CHILL in GDB and therefore\n    has not been tested well.  It may have been tested for nothing except\n    that it compiles.  */\n \n double\n-strtod (str, ptr)\n-     char *str;\n-     char **ptr;\n+strtod (char *str, char **ptr)\n {\n   char *p;\n "}, {"sha": "5f2a1cebb201c0f2252c0ee350bb177d0c949693", "filename": "libiberty/strtol.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrtol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrtol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtol.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -85,10 +85,7 @@ extern int errno;\n  * alphabets and digits are each contiguous.\n  */\n long\n-strtol(nptr, endptr, base)\n-\tconst char *nptr;\n-\tchar **endptr;\n-\tregister int base;\n+strtol(const char *nptr, char **endptr, register int base)\n {\n \tregister const char *s = nptr;\n \tregister unsigned long acc;"}, {"sha": "ba80063531e508b7488d59bb72aaccd2d48be3f6", "filename": "libiberty/strtoul.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrtoul.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fstrtoul.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrtoul.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -58,10 +58,7 @@ extern int errno;\n  * alphabets and digits are each contiguous.\n  */\n unsigned long\n-strtoul(nptr, endptr, base)\n-\tconst char *nptr;\n-\tchar **endptr;\n-\tregister int base;\n+strtoul(const char *nptr, char **endptr, register int base)\n {\n \tregister const char *s = nptr;\n \tregister unsigned long acc;"}, {"sha": "29cf646934d83b4c707d501a75659633ec18b349", "filename": "libiberty/ternary.c", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fternary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fternary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fternary.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -34,11 +34,7 @@\n    insertions. */\n \n PTR\n-ternary_insert (root, s, data, replace)\n-     ternary_tree *root;\n-     const char *s;\n-     PTR data;\n-     int replace;\n+ternary_insert (ternary_tree *root, const char *s, PTR data, int replace)\n {\n   int diff;\n   ternary_tree curr, *pcurr;\n@@ -98,8 +94,7 @@ ternary_insert (root, s, data, replace)\n \n /* Free the ternary search tree rooted at p. */\n void\n-ternary_cleanup (p)\n-     ternary_tree p;\n+ternary_cleanup (ternary_tree p)\n {\n   if (p)\n     {\n@@ -113,9 +108,7 @@ ternary_cleanup (p)\n \n /* Non-recursive find of a string in the ternary tree */\n PTR\n-ternary_search (p, s)\n-     const ternary_node *p;\n-     const char *s;\n+ternary_search (const ternary_node *p, const char *s)\n {\n   const ternary_node *curr;\n   int diff, spchar;\n@@ -147,9 +140,7 @@ ternary_search (p, s)\n /* For those who care, the recursive version of the search. Useful if\n    you want a starting point for pmsearch or nearsearch. */\n static PTR\n-ternary_recursivesearch (p, s)\n-     const ternary_node *p;\n-     const char *s;\n+ternary_recursivesearch (const ternary_node *p, const char *s)\n {\n   if (!p)\n     return 0;"}, {"sha": "cc343336642f61009e03f8d9592b0d9ae635a9e0", "filename": "libiberty/tmpnam.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Ftmpnam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Ftmpnam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftmpnam.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -24,11 +24,10 @@ not be used in new projects.  Use @code{mkstemp} instead.\n static char tmpnam_buffer[L_tmpnam];\n static int tmpnam_counter;\n \n-extern int getpid ();\n+extern int getpid (void);\n \n char *\n-tmpnam (s)\n-     char *s;\n+tmpnam (char *s)\n {\n   int pid = getpid ();\n "}, {"sha": "a389ad4e3dc013449abb7f7431982b3dcac54dc1", "filename": "libiberty/unlink-if-ordinary.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Funlink-if-ordinary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Funlink-if-ordinary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Funlink-if-ordinary.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -58,8 +58,7 @@ was made to unlink the file because it is special.\n #endif\n \n int\n-unlink_if_ordinary (name)\n-  const char *name;\n+unlink_if_ordinary (const char *name)\n {\n   struct stat st;\n "}, {"sha": "ff4b53151991ccd2c8513de7bc9a133cc61dcf2b", "filename": "libiberty/vasprintf.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvasprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvasprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvasprintf.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -22,11 +22,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #endif\n #include <ansidecl.h>\n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n #if !defined (va_copy) && defined (__va_copy)\n # define va_copy(d,s)  __va_copy((d),(s))\n #endif\n@@ -62,13 +58,10 @@ not be allocated, minus one is returned and @code{NULL} is stored in\n \n */\n \n-static int int_vasprintf PARAMS ((char **, const char *, va_list));\n+static int int_vasprintf (char **, const char *, va_list);\n \n static int\n-int_vasprintf (result, format, args)\n-     char **result;\n-     const char *format;\n-     va_list args;\n+int_vasprintf (char **result, const char *format, va_list args)\n {\n   const char *p = format;\n   /* Add one to make sure that it is never zero, which might cause malloc\n@@ -156,21 +149,19 @@ int_vasprintf (result, format, args)\n }\n \n int\n-vasprintf (result, format, args)\n-     char **result;\n-     const char *format;\n+vasprintf (char **result, const char *format,\n #if defined (_BSD_VA_LIST_) && defined (__FreeBSD__)\n-     _BSD_VA_LIST_ args;\n+           _BSD_VA_LIST_ args)\n #else\n-     va_list args;\n+           va_list args)\n #endif\n {\n   return int_vasprintf (result, format, args);\n }\n \n #ifdef TEST\n static void ATTRIBUTE_PRINTF_1\n-checkit VPARAMS ((const char *format, ...))\n+checkit (const char *format, ...)\n {\n   char *result;\n   VA_OPEN (args, format);\n@@ -187,10 +178,10 @@ checkit VPARAMS ((const char *format, ...))\n   free (result);\n }\n \n-extern int main PARAMS ((void));\n+extern int main (void);\n \n int\n-main ()\n+main (void)\n {\n   checkit (\"%d\", 0x12345678);\n   checkit (\"%200d\", 5);"}, {"sha": "eb4ff622b44f5ba6100b64f8ccf1d5880b670c52", "filename": "libiberty/vfork.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvfork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvfork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfork.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -13,10 +13,10 @@ Emulates @code{vfork} by calling @code{fork} and returning its value.\n \n #include \"ansidecl.h\"\n \n-extern int fork PARAMS ((void));\n+extern int fork (void);\n \n int\n-vfork ()\n+vfork (void)\n {\n   return (fork ());\n }"}, {"sha": "9bd3ed555d070d02e8c79f402c5d7d9fac352943", "filename": "libiberty/vfprintf.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvfprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvfprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvfprintf.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -4,19 +4,12 @@\n  */\n \n #include \"ansidecl.h\"\n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n #include <stdio.h>\n #undef vfprintf\n \n int\n-vfprintf (stream, format, ap)\n-  FILE * stream;\n-  const char * format;\n-  va_list ap;\n+vfprintf (FILE *stream, const char *format, va_list ap)\n {\n   return _doprnt (format, ap, stream);\n }"}, {"sha": "c2553167babc6411fa7a145c0b66a3733e18b61f", "filename": "libiberty/vprintf.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvprintf.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -16,17 +16,11 @@ nonstandard but common function @code{_doprnt}.\n */\n \n #include <ansidecl.h>\n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n #include <stdio.h>\n #undef vprintf\n int\n-vprintf (format, ap)\n-     const char *format;\n-     va_list ap;\n+vprintf (const char *format, va_list ap)\n {\n   return vfprintf (stdout, format, ap);\n }"}, {"sha": "8d4a1e218b4ed831e0f601a1daf056a3b876d35c", "filename": "libiberty/vsnprintf.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvsnprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvsnprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvsnprintf.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -1,5 +1,5 @@\n /* Implement the vsnprintf function.\n-   Copyright (C) 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n    Written by Kaveh R. Ghazi <ghazi@caip.rutgers.edu>.\n \n This file is part of the libiberty library.  This library is free\n@@ -42,11 +42,7 @@ system version of this function is used.\n #include \"config.h\"\n #include \"ansidecl.h\"\n \n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n #ifdef HAVE_STRING_H\n #include <string.h>\n #endif\n@@ -58,11 +54,7 @@ system version of this function is used.\n \n /* This implementation relies on a working vasprintf.  */\n int\n-vsnprintf (s, n, format, ap)\n-     char * s;\n-     size_t n;\n-     const char *format;\n-     va_list ap;\n+vsnprintf (char *s, size_t n, const char *format, va_list ap)\n {\n   char *buf = 0;\n   int result = vasprintf (&buf, format, ap);\n@@ -97,7 +89,7 @@ vsnprintf (s, n, format, ap)\n #define VERIFY(P) do { if (!(P)) abort(); } while (0)\n \n static int ATTRIBUTE_PRINTF_3\n-checkit VPARAMS ((char *s, size_t n, const char *format, ...))\n+checkit (char *s, size_t n, const char *format, ...)\n {\n   int result;\n   VA_OPEN (ap, format);\n@@ -109,9 +101,9 @@ checkit VPARAMS ((char *s, size_t n, const char *format, ...))\n   return result;\n }\n \n-extern int main PARAMS ((void));\n+extern int main (void);\n int\n-main ()\n+main (void)\n {\n   char buf[128];\n   int status;"}, {"sha": "4132ff9098ab973867123b33ce0c4928c3bf40e9", "filename": "libiberty/vsprintf.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvsprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fvsprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fvsprintf.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -27,21 +27,14 @@ This exception does not however invalidate any other reasons why\n the executable file might be covered by the GNU General Public License. */\n \n #include <ansidecl.h>\n-#ifdef ANSI_PROTOTYPES\n #include <stdarg.h>\n-#else\n-#include <varargs.h>\n-#endif\n #include <stdio.h>\n #undef vsprintf\n \n #if defined _IOSTRG && defined _IOWRT\n \n int\n-vsprintf (buf, format, ap)\n-     char *buf;\n-     const char *format;\n-     va_list ap;\n+vsprintf (char *buf, const char *format, va_list ap)\n {\n   FILE b;\n   int ret;"}, {"sha": "33f2f8e38cca3620db6b00dd2b56e8d264316aa8", "filename": "libiberty/waitpid.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fwaitpid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fwaitpid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fwaitpid.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -23,9 +23,7 @@ does the return value.  The third argument is unused in @libib{}.\n #endif\n \n pid_t\n-waitpid (pid, stat_loc, options)\n-     pid_t pid;\n-     int *stat_loc, options;\n+waitpid (pid_t pid, int *stat_loc, int options)\n {\n   for (;;)\n     {"}, {"sha": "f29338a9f2ac341e3d64e87cb2d506fc7936c4e7", "filename": "libiberty/xatexit.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxatexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxatexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxatexit.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -27,31 +27,27 @@ failure.  If you use @code{xatexit} to register functions, you must use\n \n #include <stdio.h>\n \n-#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n-#else\n-#define size_t unsigned long\n-#endif\n \n #if VMS\n #include <stdlib.h>\n #include <unixlib.h>\n #else\n /* For systems with larger pointers than ints, this must be declared.  */\n-PTR malloc PARAMS ((size_t));\n+PTR malloc (size_t);\n #endif\n \n-static void xatexit_cleanup PARAMS ((void));\n+static void xatexit_cleanup (void);\n \n /* Pointer to function run by xexit.  */\n-extern void (*_xexit_cleanup) PARAMS ((void));\n+extern void (*_xexit_cleanup) (void);\n \n #define\tXATEXIT_SIZE 32\n \n struct xatexit {\n \tstruct\txatexit *next;\t\t/* next in list */\n \tint\tind;\t\t\t/* next index in this table */\n-\tvoid\t(*fns[XATEXIT_SIZE]) PARAMS ((void));\t/* the table itself */\n+\tvoid\t(*fns[XATEXIT_SIZE]) (void);\t/* the table itself */\n };\n \n /* Allocate one struct statically to guarantee that we can register\n@@ -65,8 +61,7 @@ static struct xatexit *xatexit_head = &xatexit_first;\n    Return 0 if successful, -1 if not.  */\n \n int\n-xatexit (fn)\n-     void (*fn) PARAMS ((void));\n+xatexit (void (*fn) (void))\n {\n   register struct xatexit *p;\n \n@@ -90,7 +85,7 @@ xatexit (fn)\n /* Call any cleanup functions.  */\n \n static void\n-xatexit_cleanup ()\n+xatexit_cleanup (void)\n {\n   register struct xatexit *p;\n   register int n;"}, {"sha": "552db65df6d452aaaafe07ad3f34b273a7b915fb", "filename": "libiberty/xexit.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxexit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxexit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxexit.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -41,11 +41,10 @@ Termination is handled via the system's normal @code{exit} call.\n \n /* This variable is set by xatexit if it is called.  This way, xmalloc\n    doesn't drag xatexit into the link.  */\n-void (*_xexit_cleanup) PARAMS ((void));\n+void (*_xexit_cleanup) (void);\n \n void\n-xexit (code)\n-     int code;\n+xexit (int code)\n {\n   if (_xexit_cleanup != NULL)\n     (*_xexit_cleanup) ();"}, {"sha": "ac1f6cb943223202e5fd7ccfd9b644089738094b", "filename": "libiberty/xmalloc.c", "status": "modified", "additions": 9, "deletions": 20, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmalloc.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -68,22 +68,17 @@ function will be called to print an error message and terminate execution.\n \n #include <stdio.h>\n \n-#ifdef ANSI_PROTOTYPES\n #include <stddef.h>\n-#else\n-#define size_t unsigned long\n-#define ptrdiff_t long\n-#endif\n \n #if VMS\n #include <stdlib.h>\n #include <unixlib.h>\n #else\n /* For systems with larger pointers than ints, these must be declared.  */\n-PTR malloc PARAMS ((size_t));\n-PTR realloc PARAMS ((PTR, size_t));\n-PTR calloc PARAMS ((size_t, size_t));\n-PTR sbrk PARAMS ((ptrdiff_t));\n+PTR malloc (size_t);\n+PTR realloc (PTR, size_t);\n+PTR calloc (size_t, size_t);\n+PTR sbrk (ptrdiff_t);\n #endif\n \n /* The program name if set.  */\n@@ -96,8 +91,7 @@ static char *first_break = NULL;\n #endif /* HAVE_SBRK */\n \n void\n-xmalloc_set_program_name (s)\n-     const char *s;\n+xmalloc_set_program_name (const char *s)\n {\n   name = s;\n #ifdef HAVE_SBRK\n@@ -108,8 +102,7 @@ xmalloc_set_program_name (s)\n }\n \n void\n-xmalloc_failed (size)\n-     size_t size;\n+xmalloc_failed (size_t size)\n {\n #ifdef HAVE_SBRK\n   extern char **environ;\n@@ -133,8 +126,7 @@ xmalloc_failed (size)\n }  \n \n PTR\n-xmalloc (size)\n-    size_t size;\n+xmalloc (size_t size)\n {\n   PTR newmem;\n \n@@ -148,8 +140,7 @@ xmalloc (size)\n }\n \n PTR\n-xcalloc (nelem, elsize)\n-  size_t nelem, elsize;\n+xcalloc (size_t nelem, size_t elsize)\n {\n   PTR newmem;\n \n@@ -164,9 +155,7 @@ xcalloc (nelem, elsize)\n }\n \n PTR\n-xrealloc (oldmem, size)\n-    PTR oldmem;\n-    size_t size;\n+xrealloc (PTR oldmem, size_t size)\n {\n   PTR newmem;\n "}, {"sha": "d4831163a204fe8e3a9ec5454577f269bd0fc514", "filename": "libiberty/xmemdup.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxmemdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxmemdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxmemdup.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -31,10 +31,7 @@ allocated, the remaining memory is zeroed.\n #endif\n \n PTR\n-xmemdup (input, copy_size, alloc_size)\n-  const PTR input;\n-  size_t copy_size;\n-  size_t alloc_size;\n+xmemdup (const PTR input, size_t copy_size, size_t alloc_size)\n {\n   PTR output = xcalloc (1, alloc_size);\n   return (PTR) memcpy (output, input, copy_size);"}, {"sha": "c04623d98ecfb2be9ea9398b829d08d5b34e1da7", "filename": "libiberty/xstrdup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxstrdup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxstrdup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrdup.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -28,8 +28,7 @@ obtain memory.\n #include \"libiberty.h\"\n \n char *\n-xstrdup (s)\n-  const char *s;\n+xstrdup (const char *s)\n {\n   register size_t len = strlen (s) + 1;\n   register char *ret = xmalloc (len);"}, {"sha": "01f3a7b961a5e3f4dd295e23afc6d9541ccebf7f", "filename": "libiberty/xstrerror.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrerror.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -21,13 +21,13 @@ will never return a @code{NULL} pointer.\n #ifdef VMS\n #include <errno.h>\n #if !defined (__STRICT_ANSI__) && !defined (__HIDE_FORBIDDEN_NAMES)\n-extern char *strerror PARAMS ((int,...));\n+extern char *strerror (int,...);\n #define DONT_DECLARE_STRERROR\n #endif\n #endif\t/* VMS */\n \n #ifndef DONT_DECLARE_STRERROR\n-extern char *strerror PARAMS ((int));\n+extern char *strerror (int);\n #endif\n \n /* If strerror returns NULL, we'll format the number into a static buffer.  */\n@@ -38,15 +38,14 @@ static char xstrerror_buf[sizeof ERRSTR_FMT + 20];\n /* Like strerror, but result is never a null pointer.  */\n \n char *\n-xstrerror (errnum)\n-     int errnum;\n+xstrerror (int errnum)\n {\n   char *errstr;\n #ifdef VMS\n-  char *(*vmslib_strerror) PARAMS ((int,...));\n+  char *(*vmslib_strerror) (int,...);\n \n   /* Override any possibly-conflicting declaration from system header.  */\n-  vmslib_strerror = (char *(*) PARAMS ((int,...))) strerror;\n+  vmslib_strerror = (char *(*) (int,...)) strerror;\n   /* Second argument matters iff first is EVMSERR, but it's simpler to\n      pass it unconditionally.  `vaxc$errno' is declared in <errno.h>\n      and maintained by the run-time library in parallel to `errno'."}, {"sha": "8dfaa9b43e6aeaefd99a81c0ede947c0057853b9", "filename": "libiberty/xstrndup.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxstrndup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17ef5e63f029d589de5cb4e499b00cb0f620b5/libiberty%2Fxstrndup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fxstrndup.c?ref=7a17ef5e63f029d589de5cb4e499b00cb0f620b5", "patch": "@@ -45,9 +45,7 @@ always NUL terminated.\n #include \"libiberty.h\"\n \n char *\n-xstrndup (s, n)\n-     const char *s;\n-     size_t n;\n+xstrndup (const char *s, size_t n)\n {\n   char *result;\n   size_t len = strlen (s);"}]}