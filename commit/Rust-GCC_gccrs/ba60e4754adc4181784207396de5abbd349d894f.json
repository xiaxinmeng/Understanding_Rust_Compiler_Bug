{"sha": "ba60e4754adc4181784207396de5abbd349d894f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2MGU0NzU0YWRjNDE4MTc4NDIwNzM5NmRlNWFiYmQzNDlkODk0Zg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2004-06-29T16:18:46Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2004-06-29T16:18:46Z"}, "message": "except.c (expand_start_java_handler): Push a new binding level.\n\n2004-06-29  Andrew Haley  <aph@redhat.com>\n\n        * except.c (expand_start_java_handler): Push a new binding level.\n        Don't build a TRY_CATCH_EXPR now, we'll do it later.  Call\n        register_exception_range() to register where we'll do it.\n        (expand_end_java_handler): Remove old bogus code.  Replace with\n        new logic that simply builds TRY_CATCH_EXPRs and inserts them at\n        the top of the expression we're curently building.\n        (maybe_end_try): Delete.\n        * decl.c (binding_level.exception_range): New field.\n        (clear_binding_level): Add field exception_range.  Reformat.\n        (poplevel): Call expand_end_java_handler().\n        (poplevel): Call java_add_stmt only if functionbody is false.\n        (maybe_poplevels): Don't call maybe_end_try() from here.\n        (end_java_method): Clear no longer used trees in function decl.\n        (register_exception_range): New function.\n        * java-tree.h (register_exception_range, struct eh_range): Declare.\n\nFrom-SVN: r83857", "tree": {"sha": "406cc493b14a7dbe0721aae139686fc7c954a0cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/406cc493b14a7dbe0721aae139686fc7c954a0cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba60e4754adc4181784207396de5abbd349d894f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba60e4754adc4181784207396de5abbd349d894f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba60e4754adc4181784207396de5abbd349d894f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba60e4754adc4181784207396de5abbd349d894f/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f6eb0f4dbc2b394976b52d72f57ea33e1ef6ddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6eb0f4dbc2b394976b52d72f57ea33e1ef6ddf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6eb0f4dbc2b394976b52d72f57ea33e1ef6ddf"}], "stats": {"total": 190, "additions": 94, "deletions": 96}, "files": [{"sha": "51a2b359bce6b27cff9bf8b055cd0a14171e2505", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ba60e4754adc4181784207396de5abbd349d894f", "patch": "@@ -1,3 +1,21 @@\n+2004-06-29  Andrew Haley  <aph@redhat.com>\n+\n+\t* except.c (expand_start_java_handler): Push a new binding level.\n+\tDon't build a TRY_CATCH_EXPR now, we'll do it later.  Call\n+\tregister_exception_range() to register where we'll do it.\n+\t(expand_end_java_handler): Remove old bogus code.  Replace with\n+\tnew logic that simply builds TRY_CATCH_EXPRs and inserts them at\n+\tthe top of the expression we're curently building.\n+\t(maybe_end_try): Delete.\n+\t* decl.c (binding_level.exception_range): New field.\n+\t(clear_binding_level): Add field exception_range.  Reformat.\n+\t(poplevel): Call expand_end_java_handler().\n+\t(poplevel): Call java_add_stmt only if functionbody is false.\n+\t(maybe_poplevels): Don't call maybe_end_try() from here.\n+\t(end_java_method): Clear no longer used trees in function decl.\n+\t(register_exception_range): New function.\n+\t* java-tree.h (register_exception_range, struct eh_range): Declare.\n+\n 2004-06-28  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* jcf-write.c (get_classfile_modifiers): Formatting fixes."}, {"sha": "508727a888a7eceb84d4eb6f6e73156b0da93a16", "filename": "gcc/java/decl.c", "status": "modified", "additions": 60, "deletions": 24, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=ba60e4754adc4181784207396de5abbd349d894f", "patch": "@@ -314,6 +314,9 @@ struct binding_level GTY(())\n     /* The statements in this binding level.  */\n     tree stmts;\n \n+    /* An exception range associated with this binding level.  */\n+    struct eh_range * GTY((skip (\"\"))) exception_range;\n+\n     /* Binding depth at which this level began.  Used only for debugging.  */\n     unsigned binding_depth;\n   };\n@@ -341,8 +344,18 @@ static GTY(()) struct binding_level *global_binding_level;\n /* Binding level structures are initialized by copying this one.  */\n \n static const struct binding_level clear_binding_level\n-  = {NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE,\n-     NULL_BINDING_LEVEL, LARGEST_PC, 0, NULL_TREE, 0};\n+= {\n+    NULL_TREE, /* names */\n+    NULL_TREE, /* shadowed */\n+    NULL_TREE, /* blocks */\n+    NULL_TREE, /* this_lock */\n+    NULL_BINDING_LEVEL, /* level_chain */\n+    LARGEST_PC, /* end_pc */\n+    0, /* start_pc */\n+    NULL, /* stmts */\n+    NULL, /* exception_range */\n+    0, /* binding_depth */\n+  };\n \n #if 0\n /* A list (chain of TREE_LIST nodes) of all LABEL_DECLs in the function\n@@ -1316,6 +1329,9 @@ poplevel (int keep, int reverse, int functionbody)\n       TREE_TYPE (block) = void_type_node;\n     }\n \n+  if (current_binding_level->exception_range)\n+    expand_end_java_handler (current_binding_level->exception_range);\n+\n   if (block != 0)\n     {\n       /* If any statements have been generated at this level, create a\n@@ -1341,7 +1357,6 @@ poplevel (int keep, int reverse, int functionbody)\n \t    \n \t  bind =  build (BIND_EXPR, TREE_TYPE (block), BLOCK_VARS (block), \n \t\t\t BLOCK_EXPR_BODY (block), block);\n-\n \t  BIND_EXPR_BODY (bind) = current_binding_level->stmts;\n \t  \n \t  if (BIND_EXPR_BODY (bind)\n@@ -1448,24 +1463,27 @@ poplevel (int keep, int reverse, int functionbody)\n       DECL_INITIAL (current_function_decl) = block;\n       DECL_SAVED_TREE (current_function_decl) = bind;\n     }\n-  else if (block)\n+  else \n     {\n-      if (!block_previously_created)\n-        current_binding_level->blocks\n-          = chainon (current_binding_level->blocks, block);\n+      if (block)\n+\t{\n+\t  if (!block_previously_created)\n+\t    current_binding_level->blocks\n+\t      = chainon (current_binding_level->blocks, block);\n+\t}\n+      /* If we did not make a block for the level just exited,\n+\t any blocks made for inner levels\n+\t (since they cannot be recorded as subblocks in that level)\n+\t must be carried forward so they will later become subblocks\n+\t of something else.  */\n+      else if (subblocks)\n+\tcurrent_binding_level->blocks\n+\t  = chainon (current_binding_level->blocks, subblocks);\n+\n+      if (bind)\n+\tjava_add_stmt (bind);\n     }\n-  /* If we did not make a block for the level just exited,\n-     any blocks made for inner levels\n-     (since they cannot be recorded as subblocks in that level)\n-     must be carried forward so they will later become subblocks\n-     of something else.  */\n-  else if (subblocks)\n-    current_binding_level->blocks\n-      = chainon (current_binding_level->blocks, subblocks);\n-\n-  if (bind)\n-    java_add_stmt (bind);\n-  \n+\n   if (block)\n     TREE_USED (block) = 1;\n   return block;\n@@ -1521,11 +1539,7 @@ maybe_poplevels (int pc)\n #endif\n \n   while (current_binding_level->end_pc <= pc)\n-    {\n-      maybe_end_try (current_binding_level->start_pc, pc);\n-      poplevel (1, 0, 0);\n-    }\n-  maybe_end_try (0, pc);\n+    poplevel (1, 0, 0);\n }\n \n /* Terminate any binding which began during the range beginning at\n@@ -1781,6 +1795,14 @@ end_java_method (void)\n   flag_unit_at_a_time = 0;\n   finish_method (fndecl);\n \n+  if (! flag_unit_at_a_time)\n+    {\n+      /* Nulling these fields when we no longer need them saves\n+\t memory.  */\n+      DECL_SAVED_TREE (fndecl) = NULL;\n+      DECL_STRUCT_FUNCTION (fndecl) = NULL;\n+      DECL_INITIAL (fndecl) = NULL_TREE;\n+    }\n   current_function_decl = NULL_TREE;\n }\n \n@@ -1929,5 +1951,19 @@ get_stmts (void)\n   return &current_binding_level->stmts;\n }\n \n+/* Register an exception range as belonging to the current binding\n+   level.  There may only be one: if there are more, we'll create more\n+   binding levels.  However, each range can have multiple handlers,\n+   and these are expanded when we call expand_end_java_handler().  */\n+\n+void\n+register_exception_range (struct eh_range *range, int pc, int end_pc)\n+{\n+  if (current_binding_level->exception_range)\n+    abort ();\n+  current_binding_level->exception_range = range;\n+  current_binding_level->end_pc = end_pc;\n+  current_binding_level->start_pc = pc;      \n+}\n \n #include \"gt-java-decl.h\""}, {"sha": "91f741f63d0e7d1c1caef474bc120067eefa8412", "filename": "gcc/java/except.c", "status": "modified", "additions": 11, "deletions": 72, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=ba60e4754adc4181784207396de5abbd349d894f", "patch": "@@ -40,7 +40,6 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n \n static void expand_start_java_handler (struct eh_range *);\n-static void expand_end_java_handler (struct eh_range *);\n static struct eh_range *find_handler_in_range (int, struct eh_range *,\n \t\t\t\t\t       struct eh_range *);\n static void link_handler (struct eh_range *, struct eh_range *);\n@@ -305,13 +304,8 @@ expand_start_java_handler (struct eh_range *range)\n   fprintf (stderr, \"expand start handler pc %d --> %d\\n\",\n \t   current_pc, range->end_pc);\n #endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n-  {\n-    tree new = build (TRY_CATCH_EXPR, void_type_node, NULL, NULL);\n-    TREE_SIDE_EFFECTS (new) = 1;\n-    java_add_stmt (build_java_empty_stmt ());\n-    range->stmt = java_add_stmt (new);\n-  }\n-\t\t     \n+  pushlevel (0);\n+  register_exception_range (range,  range->start_pc, range->end_pc);\n   range->expanded = 1;\n }\n \n@@ -428,13 +422,11 @@ build_exception_object_ref (tree type)\n \n /* If there are any handlers for this range, isssue end of range,\n    and then all handler blocks */\n-static void\n+void\n expand_end_java_handler (struct eh_range *range)\n {  \n   tree handler = range->handlers;\n-  tree compound = NULL;\n \n-  force_poplevels (range->start_pc);  \n   for ( ; handler != NULL_TREE; handler = TREE_CHAIN (handler))\n     {\n       /* For bytecode we treat exceptions a little unusually.  A\n@@ -444,55 +436,18 @@ expand_end_java_handler (struct eh_range *range)\n \t extra (and difficult) work to get this to look like a\n \t gcc-style finally clause.  */\n       tree type = TREE_PURPOSE (handler);\n-\n       if (type == NULL)\n \ttype = throwable_type_node;\n-\n       type = prepare_eh_table_type (type);\n \n-      if (compound)\n-\t{\n-\t  /* If we already have a COMPOUND there is more than one\n-\t     catch handler for this try block.  Wrap the\n-\t     TRY_CATCH_EXPR in operand 1 of COMPOUND with another\n-\t     TRY_CATCH_EXPR.  */\n-\t  tree inner_try_expr = TREE_OPERAND (compound, 1);\n-\t  tree catch_expr \n-\t    = build (CATCH_EXPR, void_type_node, type,\n-\t\t     build (GOTO_EXPR, void_type_node, TREE_VALUE (handler)));\n-\t  tree try_expr\n-\t    = build (TRY_CATCH_EXPR, void_type_node,\n-\t\t     inner_try_expr, catch_expr);\n-\t  TREE_OPERAND (compound, 1) = try_expr;\n-\t}\n-      else\n-\t{\n-\t  tree *stmts = get_stmts ();\n-\t  tree outer;\n-\t  tree try_expr;\n-\t  compound = range->stmt;\n-\t  outer = TREE_OPERAND (compound, 0);\n-\t  try_expr = TREE_OPERAND (compound, 1);\n-\t  /* On the left of COMPOUND is the expresion to be evaluated\n-\t     before the try handler is entered; on the right is a\n-\t     TRY_FINALLY_EXPR with no operands as yet.  In the current\n-\t     statement list is an expression that we're going to move\n-\t     inside the try handler.  We'll create a new COMPOUND_EXPR\n-\t     with the outer context on the left and the TRY_FINALLY_EXPR\n-\t     on the right, then nullify both operands of COMPOUND, which\n-\t     becomes the final expression in OUTER.  This new compound\n-\t     expression replaces the current statement list.  */\n-\t  TREE_OPERAND (try_expr, 0) = *stmts;\n-\t  TREE_OPERAND (try_expr, 1)\n-\t    = build (CATCH_EXPR, void_type_node, type,\n-\t\t     build (GOTO_EXPR, void_type_node, TREE_VALUE (handler)));\n-\t  TREE_SIDE_EFFECTS (try_expr) = 1;\n-\t  TREE_OPERAND (compound, 0) = build_java_empty_stmt ();\n-\t  TREE_OPERAND (compound, 1) = build_java_empty_stmt ();\n-\t  compound \n-\t    = build (COMPOUND_EXPR, TREE_TYPE (try_expr), outer, try_expr);\n-\t  *stmts = compound;\n-\t}\n+      {\n+\ttree catch_expr \n+\t  = build (CATCH_EXPR, void_type_node, type,\n+\t\t   build (GOTO_EXPR, void_type_node, TREE_VALUE (handler)));\n+\ttree try_catch_expr = build (TRY_CATCH_EXPR, void_type_node,\n+\t\t\t\t     *get_stmts (), catch_expr);\t\n+\t*get_stmts () = try_catch_expr;\n+      }\n     }\n #if defined(DEBUG_JAVA_BINDING_LEVELS)\n   indent ();\n@@ -536,19 +491,3 @@ maybe_start_try (int start_pc, int end_pc)\n   check_start_handlers (range, start_pc);\n }\n \n-/* Emit any end-of-try-range ending at end_pc and starting before\n-   start_pc. */\n-\n-void\n-maybe_end_try (int start_pc, int end_pc)\n-{\n-  if (! doing_eh (1))\n-    return;\n-\n-  while (current_range != NULL_EH_RANGE && current_range->end_pc <= end_pc\n-\t && current_range->start_pc >= start_pc)\n-    {\n-      expand_end_java_handler (current_range);\n-      current_range = current_range->outer;\n-    }\n-}"}, {"sha": "960a91550231f508f8f2e3700423662da1213fe8", "filename": "gcc/java/java-except.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fjava-except.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fjava-except.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-except.h?ref=ba60e4754adc4181784207396de5abbd349d894f", "patch": "@@ -68,3 +68,4 @@ extern void maybe_end_try (int, int);\n extern void add_handler (int, int, tree, tree);\n extern void handle_nested_ranges (void);\n extern void expand_resume_after_catch (void);\n+extern void expand_end_java_handler (struct eh_range *);"}, {"sha": "1089e595083f10952c3e9a103cdfa1b1650efb28", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba60e4754adc4181784207396de5abbd349d894f/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=ba60e4754adc4181784207396de5abbd349d894f", "patch": "@@ -1117,6 +1117,9 @@ struct lang_type GTY(())\n #define SEARCH_SUPER          2\n #define SEARCH_VISIBLE        4\n \n+/* Defined in java-except.h  */\n+struct eh_range;\n+\n extern void java_parse_file (int);\n extern bool java_mark_addressable (tree);\n extern tree java_type_for_mode (enum machine_mode, int);\n@@ -1345,6 +1348,7 @@ extern tree add_stmt_to_compound (tree, tree, tree);\n extern tree java_add_stmt (tree);\n extern tree java_add_local_var (tree decl);\n extern tree *get_stmts (void);\n+extern void register_exception_range(struct eh_range *, int, int);\n \n extern void finish_method (tree);\n extern void java_expand_body (tree);"}]}