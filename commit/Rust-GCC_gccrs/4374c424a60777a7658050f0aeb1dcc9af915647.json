{"sha": "4374c424a60777a7658050f0aeb1dcc9af915647", "node_id": "C_kwDOANBUbNoAKDQzNzRjNDI0YTYwNzc3YTc2NTgwNTBmMGFlYjFkY2M5YWY5MTU2NDc", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-17T23:52:18Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-10-17T23:52:18Z"}, "message": "Fix bogus RTL on the H8.\n\nThis patch actually fixes the bogus RTL seen in PR101697.\n\nBasically we continue to use the insn condition to catch most of the problem\ncases related to autoinc addressing modes.  This patch adds constraints which\ncan guide reload (and hopefully LRA) away from doing blind replacements during\nregister elimination that would ultimately result in bogus RTL.  The idea is\nfrom Paul K. who has done something very similar on the pdp11.  I guess it\nshouldn't be a big surprise that the H8 and pdp11 need the same kind of\nhandling given some of the similarities in their architectures.\n\ngcc/\n\tPR target/101697\n\t* config/h8300/combiner.md: Replace '<' preincment constraint with\n\tZA/Z1..ZH/Z7 combinations.\n\t* config/h8300/movepush.md: Similarly", "tree": {"sha": "a31de396af505f11260c8927389008cb0466039f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31de396af505f11260c8927389008cb0466039f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4374c424a60777a7658050f0aeb1dcc9af915647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4374c424a60777a7658050f0aeb1dcc9af915647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4374c424a60777a7658050f0aeb1dcc9af915647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4374c424a60777a7658050f0aeb1dcc9af915647/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19859bd72119708c85cc6976b3547738be6f5b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19859bd72119708c85cc6976b3547738be6f5b1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19859bd72119708c85cc6976b3547738be6f5b1c"}], "stats": {"total": 110, "additions": 69, "deletions": 41}, "files": [{"sha": "fd5cf2f4af4aa068686093803a01d49df3109000", "filename": "gcc/config/h8300/combiner.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4374c424a60777a7658050f0aeb1dcc9af915647/gcc%2Fconfig%2Fh8300%2Fcombiner.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4374c424a60777a7658050f0aeb1dcc9af915647/gcc%2Fconfig%2Fh8300%2Fcombiner.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fcombiner.md?ref=4374c424a60777a7658050f0aeb1dcc9af915647", "patch": "@@ -1142,8 +1142,8 @@\n ;; Storing a part of HImode to QImode.\n \n (define_insn_and_split \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh\")\n+\t(subreg:QI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 8)) 1))]\n   \"\"\n   \"#\"\n@@ -1153,8 +1153,8 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 8)) 1))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n@@ -1164,8 +1164,8 @@\n ;; Storing a part of SImode to QImode.\n \n (define_insn_and_split \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 8)) 3))]\n   \"\"\n   \"#\"\n@@ -1175,19 +1175,19 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 8)) 3))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n   \"mov.b\\\\t%x1,%R0\"\n   [(set_attr \"length\" \"8\")])\n \n (define_insn_and_split \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 16)) 3))\n-   (clobber (match_scratch:SI 2 \"=&r\"))]\n+   (clobber (match_scratch:SI 2 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -1197,20 +1197,20 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 16)) 3))\n-   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (match_scratch:SI 2 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n   \"mov.w\\\\t%e1,%f2\\;mov.b\\\\t%w2,%R0\"\n   [(set_attr \"length\" \"10\")])\n \n (define_insn_and_split \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 24)) 3))\n-   (clobber (match_scratch:SI 2 \"=&r\"))]\n+   (clobber (match_scratch:SI 2 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -1220,10 +1220,10 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm<\")\n-\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=rm,Za,Zb,Zc,Zd,Ze,Zf,Zh,Zg\")\n+\t(subreg:QI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7\")\n \t\t\t\t(const_int 24)) 3))\n-   (clobber (match_scratch:SI 2 \"=&r\"))\n+   (clobber (match_scratch:SI 2 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n   \"mov.w\\\\t%e1,%f2\\;mov.b\\\\t%x2,%R0\""}, {"sha": "e536602a01d6ecb4ef2385aabc002bc87084ff57", "filename": "gcc/config/h8300/movepush.md", "status": "modified", "additions": 49, "deletions": 21, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4374c424a60777a7658050f0aeb1dcc9af915647/gcc%2Fconfig%2Fh8300%2Fmovepush.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4374c424a60777a7658050f0aeb1dcc9af915647/gcc%2Fconfig%2Fh8300%2Fmovepush.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fmovepush.md?ref=4374c424a60777a7658050f0aeb1dcc9af915647", "patch": "@@ -5,23 +5,30 @@\n ;; movqi\n \n (define_insn_and_split \"*movqi\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,<,r,r,m\")\n-\t(match_operand:QI 1 \"general_operand_src\" \" I,r>,r,n,m,r\"))]\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m\")\n+\t(match_operand:QI 1 \"general_operand_src\" \" I,r>,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,n,m,r\"))]\n   \"!TARGET_H8300SX && h8300_move_ok (operands[0], operands[1])\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*movqi<cczn>\"\n-  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,<,r,r,m\")\n-\t(match_operand:QI 1 \"general_operand_src\" \" I,r>,r,n,m,r\"))\n+  [(set (match_operand:QI 0 \"general_operand_dst\" \"=r,r ,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m\")\n+\t(match_operand:QI 1 \"general_operand_src\" \" I,r>,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,n,m,r\"))\n    (clobber (reg:CC CC_REG))]\n   \"!TARGET_H8300SX && h8300_move_ok (operands[0], operands[1])\"\n   \"@\n    sub.b\t%X0,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n+   mov.b\t%X1,%R0\n    mov.b\t%R1,%X0\n    mov.b\t%R1,%X0\n    mov.b\t%X1,%R0\"\n@@ -88,8 +95,8 @@\n ;; movhi\n \n (define_insn_and_split \"*movhi\"\n-  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n-\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))]\n+  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,i,m,r\"))]\n   \"!TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n   \"#\"\n@@ -98,8 +105,8 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*movhi<cczn>\"\n-  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,<,r,r,m\")\n-\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,r,i,m,r\"))\n+  [(set (match_operand:HI 0 \"general_operand_dst\" \"=r,r,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m\")\n+\t(match_operand:HI 1 \"general_operand_src\" \"I,r>,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,i,m,r\"))\n    (clobber (reg:CC CC_REG))]\n   \"!TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n@@ -109,6 +116,13 @@\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n+   mov.w\t%T1,%T0\n    mov.w\t%T1,%T0\"\n   [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \n@@ -158,8 +172,8 @@\n \n ;; movsi\n (define_insn_and_split \"*movsi\"\n-  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,<,r,r,m,*a,*a,r\")\n-\t(match_operand:SI 1 \"general_operand_src\" \"I,r,i,r,>,m,r,I,r,*a\"))]\n+  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m,*a,*a,r\")\n+\t(match_operand:SI 1 \"general_operand_src\" \"I,r,i,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,>,m,r,I,r,*a\"))]\n   \"(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n   \"#\"\n@@ -168,8 +182,8 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*movsi_clobber_flags\"\n-  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,<,r,r,m,*a,*a, r\")\n-\t(match_operand:SI 1 \"general_operand_src\" \" I,r,i,r,>,m,r, I, r,*a\"))\n+  [(set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m,*a,*a, r\")\n+\t(match_operand:SI 1 \"general_operand_src\" \" I,r,i,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,>,m,r, I, r,*a\"))\n    (clobber (reg:CC CC_REG))]\n   \"(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n@@ -178,11 +192,11 @@\n     {\n     case 0:\n       return \"sub.l\t%S0,%S0\";\n-    case 7:\n+    case 14:\n       return \"clrmac\";\n-    case 8:\n+    case 15:\n       return \"clrmac\\;ldmac %1,macl\";\n-    case 9:\n+    case 16:\n       return \"stmac\tmacl,%0\";\n     default:\n       if (GET_CODE (operands[1]) == CONST_INT)\n@@ -238,9 +252,9 @@\n (define_insn \"*movsi_cczn\"\n   [(set (reg:CCZN CC_REG)\n \t(compare:CCZN\n-\t  (match_operand:SI 1 \"general_operand_src\" \" I,r,i,r,>,m,r\")\n+\t  (match_operand:SI 1 \"general_operand_src\" \" I,r,i,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,>,m,r\")\n \t  (const_int 0)))\n-   (set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,<,r,r,m\")\n+   (set (match_operand:SI 0 \"general_operand_dst\" \"=r,r,r,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r,r,m\")\n \t(match_dup 1))]\n   \"(TARGET_H8300S || TARGET_H8300H) && !TARGET_H8300SX\n     && h8300_move_ok (operands[0], operands[1])\"\n@@ -251,6 +265,13 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n   [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \n@@ -316,8 +337,8 @@\n    (set_attr \"length_table\" \"*,movl\")])\n \n (define_insn_and_split \"*movsf\"\n-  [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n-\t(match_operand:SF 1 \"general_operand_src\" \"G,r,im,r,r,>\"))]\n+  [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r\")\n+\t(match_operand:SF 1 \"general_operand_src\" \"G,r,im,r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,>\"))]\n   \"!TARGET_H8300SX\n     && (register_operand (operands[0], SFmode)\n \t|| register_operand (operands[1], SFmode))\"\n@@ -327,8 +348,8 @@\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*movsf_clobber_flags\"\n-  [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,<,r\")\n-\t(match_operand:SF 1 \"general_operand_src\" \"G,r,im,r,r,>\"))\n+  [(set (match_operand:SF 0 \"general_operand_dst\" \"=r,r,r,m,Za,Zb,Zc,Zd,Ze,Zf,Zg,Zh,r\")\n+\t(match_operand:SF 1 \"general_operand_src\" \"G,r,im,r,Z0,Z1,Z2,Z3,Z4,Z5,Z6,Z7,>\"))\n    (clobber (reg:CC CC_REG))]\n   \"!TARGET_H8300SX\n     && (register_operand (operands[0], SFmode)\n@@ -339,6 +360,13 @@\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n+   mov.l\t%S1,%S0\n    mov.l\t%S1,%S0\"\n   [(set (attr \"length\") (symbol_ref \"compute_mov_length (operands)\"))])\n \f"}]}