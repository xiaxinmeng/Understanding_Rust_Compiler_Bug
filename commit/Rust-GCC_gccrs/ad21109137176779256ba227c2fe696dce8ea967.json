{"sha": "ad21109137176779256ba227c2fe696dce8ea967", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQyMTEwOTEzNzE3Njc3OTI1NmJhMjI3YzJmZTY5NmRjZThlYTk2Nw==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2010-04-27T17:48:58Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2010-04-27T17:48:58Z"}, "message": "collect2.c (TARGET_64BIT): Redefine to target's default.\n\n2010-04-27  Kai Tietz  <kai.tietz@onevision.com>\n\n        * collect2.c (TARGET_64BIT): Redefine to target's default.\n        * tlink.c: Likewise.\n        * config/i386/cygming.h (USER_LABEL_PREFIX): Define\n        dependent to TARGET_64BIT and USE_MINGW64_LEADING_UNDERSCORES.\n        * config/i386/i386.h (CRT_CALL_STATIC_FUNCTION): Use\n        for underscoring __USER_LABEL_PREFIX__.\n        * config/i386/mingw-w64.h (SUB_LINK_ENTRY): New macro.\n        (SUB_LINK_ENTRY32): New.\n        (SUB_LINK_ENTRY64): New.\n        (LINK_SPEC): Replace entry point spec by\n        SUB_LINK_ENTRY.\n        * config/i386/mingw32 (SUB_LINK_ENTRY32): New.\n        (SUB_LINK_ENTRY64): New.\n        (SUB_LINK_ENTRY): New.\n        (LINK_SPEC): Use SUB_LINK_ENTRY instead of hard-coded entry-point.\n        (DWARF2_UNWIND_INFO): Error out for use of dw2 unwind when\n        x64 target is choosen.\n        * config.in (USE_MINGW64_LEADING_UNDERSCORES): New.\n        * configure: Regenerated.\n        * configure.ac (leading-mingw64-underscores): Option added.\n\nFrom-SVN: r158791", "tree": {"sha": "e0154da3cd27e351b191a34f7b5e465075192112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0154da3cd27e351b191a34f7b5e465075192112"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad21109137176779256ba227c2fe696dce8ea967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad21109137176779256ba227c2fe696dce8ea967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad21109137176779256ba227c2fe696dce8ea967", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad21109137176779256ba227c2fe696dce8ea967/comments", "author": null, "committer": null, "parents": [{"sha": "126bac7bd6c3d7672f2ed913e53fbba65698d58c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126bac7bd6c3d7672f2ed913e53fbba65698d58c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126bac7bd6c3d7672f2ed913e53fbba65698d58c"}], "stats": {"total": 116, "additions": 109, "deletions": 7}, "files": [{"sha": "eba2adab7afc616ff46865cb6c3d16c1fb772317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -1,3 +1,26 @@\n+2010-04-27  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* collect2.c (TARGET_64BIT): Redefine to target's default.\n+\t* tlink.c: Likewise.\n+\t* config/i386/cygming.h (USER_LABEL_PREFIX): Define\n+\tdependent to TARGET_64BIT and USE_MINGW64_LEADING_UNDERSCORES.\n+\t* config/i386/i386.h (CRT_CALL_STATIC_FUNCTION): Use\n+\tfor underscoring __USER_LABEL_PREFIX__.\n+\t* config/i386/mingw-w64.h (SUB_LINK_ENTRY): New macro.\n+\t(SUB_LINK_ENTRY32): New.\n+\t(SUB_LINK_ENTRY64): New.\n+\t(LINK_SPEC): Replace entry point spec by\n+\tSUB_LINK_ENTRY.\n+\t* config/i386/mingw32 (SUB_LINK_ENTRY32): New.\n+\t(SUB_LINK_ENTRY64): New.\n+\t(SUB_LINK_ENTRY): New.\n+\t(LINK_SPEC): Use SUB_LINK_ENTRY instead of hard-coded entry-point.\n+\t(DWARF2_UNWIND_INFO): Error out for use of dw2 unwind when\n+\tx64 target is choosen.\n+\t* config.in (USE_MINGW64_LEADING_UNDERSCORES): New.\n+\t* configure: Regenerated.\n+\t* configure.ac (leading-mingw64-underscores): Option added.\n+\n 2010-04-27  Jan Hubicka  <jh@suse.cz>\n \n \t* doc/invoke.texi (-fipa-profile): Document."}, {"sha": "481f73990f96ea4926928f6af0104ffcf399622c", "filename": "gcc/collect2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -35,6 +35,10 @@ along with GCC; see the file COPYING3.  If not see\n #  define SIGCHLD SIGCLD\n #endif\n \n+/* TARGET_64BIT may be defined to use driver specific functionality. */\n+#undef TARGET_64BIT\n+#define TARGET_64BIT TARGET_64BIT_DEFAULT\n+\n #ifndef LIBRARY_PATH_ENV\n #define LIBRARY_PATH_ENV \"LIBRARY_PATH\"\n #endif"}, {"sha": "7b04bbcb856a790a868f26d5076ff126562d42fb", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -1679,6 +1679,12 @@\n #endif\n \n \n+/* Define if we should use leading underscore on 64 bit mingw targets */\n+#ifndef USED_FOR_TARGET\n+#undef USE_MINGW64_LEADING_UNDERSCORES\n+#endif\n+\n+\n /* Enable extensions on AIX 3, Interix.  */\n #ifndef _ALL_SOURCE\n # undef _ALL_SOURCE"}, {"sha": "71a5d8d99c961812c69357ac2da615788d4a5130", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -39,6 +39,11 @@ along with GCC; see the file COPYING3.  If not see\n #undef DEFAULT_ABI\n #define DEFAULT_ABI (TARGET_64BIT ? MS_ABI : SYSV_ABI)\n \n+#if ! defined (USE_MINGW64_LEADING_UNDERSCORES)\n+#undef USER_LABEL_PREFIX\n+#define USER_LABEL_PREFIX (TARGET_64BIT ? \"\" : \"_\")\n+#endif\n+\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)\t\t\t\t\\\n   (TARGET_64BIT ? dbx64_register_map[n]\t\t\t\\"}, {"sha": "163cda189d032baec9f2d73d1cc81d9b642b3630", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -2148,9 +2148,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Switch to init or fini section via SECTION_OP, emit a call to FUNC,\n    and switch back.  For x86 we do this only to save a few bytes that\n    would otherwise be unused in the text section.  */\n-#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n-   asm (SECTION_OP \"\\n\\t\"\t\t\t\t\\\n-\t\"call \" USER_LABEL_PREFIX #FUNC \"\\n\"\t\t\\\n+#define CRT_MKSTR2(VAL) #VAL\n+#define CRT_MKSTR(x) CRT_MKSTR2(x)\n+\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\t\\\n+   asm (SECTION_OP \"\\n\\t\"\t\t\t\t\t\\\n+\t\"call \" CRT_MKSTR(__USER_LABEL_PREFIX__) #FUNC \"\\n\"\t\\\n \tTEXT_SECTION_ASM_OP);\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE."}, {"sha": "3aafb933dd4304d610e8d58601098b8d203d69b1", "filename": "gcc/config/i386/mingw-w64.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fmingw-w64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw-w64.h?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -39,6 +39,8 @@ along with GCC; see the file COPYING3.  If not see\n #define ASM_SPEC \"%{v:-v} %{n} %{T} %{Ym,*} %{Yd,*} \\\n  %{Wa,*:%*} %{m32:--32} %{m64:--64}\"\n \n+#undef SPEC_32\n+#undef SPEC_64\n #if TARGET_64BIT_DEFAULT\n #define SPEC_32 \"m32\"\n #define SPEC_64 \"!m32\"\n@@ -47,8 +49,21 @@ along with GCC; see the file COPYING3.  If not see\n #define SPEC_64 \"m64\"\n #endif\n \n+#undef SUB_LINK_ENTRY32\n+#undef SUB_LINK_ENTRY64\n+#define SUB_LINK_ENTRY32 \"-e _DllMainCRTStartup@12\"\n+#if defined(USE_MINGW64_LEADING_UNDERSCORES)\n+#define SUB_LINK_ENTRY64 \"-e _DllMainCRTStartup\"\n+#else\n+#define SUB_LINK_ENTRY64 \"-e DllMainCRTStartup\"\n+#endif\n+\n+#undef SUB_LINK_SPEC\n+#undef SUB_LINK_ENTRY\n #define SUB_LINK_SPEC \"%{\" SPEC_64 \":-m i386pep} %{\" SPEC_32 \":-m i386pe}\"\n+#define SUB_LINK_ENTRY \"%{\" SPEC_64 \":\" SUB_LINK_ENTRY64 \"} %{\" SPEC_32 \":\" SUB_LINK_ENTRY32 \"}\"\n \n+#undef MULTILIB_DEFAULTS\n #if TARGET_64BIT_DEFAULT\n #define MULTILIB_DEFAULTS { \"m64\" }\n #else\n@@ -61,5 +76,5 @@ along with GCC; see the file COPYING3.  If not see\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n-  %{shared|mdll: -e _DllMainCRTStartup@12 --enable-auto-image-base} \\\n+  %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n   %(shared_libgcc_undefs)\""}, {"sha": "e08ea1cd90cbe5d2b185a445bfd5190536ba6096", "filename": "gcc/config/i386/mingw32.h", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fmingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfig%2Fi386%2Fmingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmingw32.h?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -47,6 +47,22 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#undef SUB_LINK_ENTRY32\n+#undef SUB_LINK_ENTRY64\n+#define SUB_LINK_ENTRY32 \"-e _DllMainCRTStartup@12\"\n+#if defined(USE_MINGW64_LEADING_UNDERSCORES)\n+#define SUB_LINK_ENTRY64 \"-e _DllMainCRTStartup\"\n+#else\n+#define SUB_LINK_ENTRY64 \"-e DllMainCRTStartup\"\n+#endif\n+\n+#undef SUB_LINK_ENTRY\n+#if TARGET_64BIT_DEFAULT\n+#define SUB_LINK_ENTRY SUB_LINK_ENTRY64\n+#else\n+#define SUB_LINK_ENTRY SUB_LINK_ENTRY32\n+#endif\n+\n /* Override the standard choice of /usr/include as the default prefix\n    to try when searching for header files.  */\n #undef STANDARD_INCLUDE_DIR\n@@ -66,6 +82,10 @@ along with GCC; see the file COPYING3.  If not see\n /* Weak symbols do not get resolved if using a Windows dll import lib.\n    Make the unwind registration references strong undefs.  */\n #if DWARF2_UNWIND_INFO\n+/* DW2-unwind is just available for 32-bit mode.  */\n+#if TARGET_64BIT_DEFAULT\n+#error DW2 unwind is not available for 64-bit.\n+#endif\n #define SHARED_LIBGCC_UNDEFS_SPEC \\\n  \"%{shared-libgcc: -u ___register_frame_info -u ___deregister_frame_info}\"\n #else\n@@ -81,7 +101,7 @@ along with GCC; see the file COPYING3.  If not see\n   %{shared: %{mdll: %eshared and mdll are not compatible}} \\\n   %{shared: --shared} %{mdll:--dll} \\\n   %{static:-Bstatic} %{!static:-Bdynamic} \\\n-  %{shared|mdll: -e _DllMainCRTStartup@12 --enable-auto-image-base} \\\n+  %{shared|mdll: \" SUB_LINK_ENTRY \" --enable-auto-image-base} \\\n   %(shared_libgcc_undefs)\"\n \n /* Include in the mingw32 libraries with libgcc */"}, {"sha": "17effdae9949eef0cdcccee8f09638a6cc350aea", "filename": "gcc/configure", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -895,6 +895,7 @@ enable_initfini_array\n enable_sjlj_exceptions\n with_system_libunwind\n enable_secureplt\n+enable_leading_mingw64_underscores\n enable_cld\n enable_win32_registry\n enable_static\n@@ -1592,6 +1593,8 @@ Optional Features:\n   --enable-sjlj-exceptions\n                           arrange to use setjmp/longjmp exception handling\n   --enable-secureplt      enable -msecure-plt by default for PowerPC\n+  --enable-leading-mingw64-underscores\n+                          Enable leading underscores on 64 bit mingw targets\n   --enable-cld            enable -mcld by default for 32bit x86\n   --disable-win32-registry\n                           disable lookup of installation paths in the\n@@ -10685,6 +10688,17 @@ if test \"${enable_secureplt+set}\" = set; then :\n fi\n \n \n+# Check whether --enable-leading-mingw64-underscores was given.\n+if test \"${enable_leading_mingw64_underscores+set}\" = set; then :\n+  enableval=$enable_leading_mingw64_underscores;\n+fi\n+\n+if  test x\"$enable_leading_mingw64_underscores\" = xyes ; then :\n+\n+$as_echo \"#define USE_MINGW64_LEADING_UNDERSCORES 1\" >>confdefs.h\n+\n+fi\n+\n # Check whether --enable-cld was given.\n if test \"${enable_cld+set}\" = set; then :\n   enableval=$enable_cld;\n@@ -17094,7 +17108,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17097 \"configure\"\n+#line 17111 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17200,7 +17214,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17203 \"configure\"\n+#line 17217 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "cd31f4e6db88efed3f34f89c0fa51838fab6adfa", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -1568,6 +1568,14 @@ AC_ARG_ENABLE(secureplt,\n [  --enable-secureplt      enable -msecure-plt by default for PowerPC],\n [], [])\n \n+AC_ARG_ENABLE(leading-mingw64-underscores,\n+  AS_HELP_STRING([--enable-leading-mingw64-underscores],\n+                 [Enable leading underscores on 64 bit mingw targets]),\n+  [],[])\n+AS_IF([ test x\"$enable_leading_mingw64_underscores\" = xyes ],\n+  [AC_DEFINE(USE_MINGW64_LEADING_UNDERSCORES, 1,\n+    [Define if we should use leading underscore on 64 bit mingw targets])])\n+\n AC_ARG_ENABLE(cld,\n [  --enable-cld            enable -mcld by default for 32bit x86], [],\n [enable_cld=no])"}, {"sha": "7b589832b06ce799fde99fec725666e764e36e22", "filename": "gcc/tlink.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad21109137176779256ba227c2fe696dce8ea967/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=ad21109137176779256ba227c2fe696dce8ea967", "patch": "@@ -32,6 +32,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"collect2.h\"\n #include \"libiberty.h\"\n \n+/* TARGET_64BIT may be defined to use driver specific functionality. */\n+#undef TARGET_64BIT\n+#define TARGET_64BIT TARGET_64BIT_DEFAULT\n+\n #define MAX_ITERATIONS 17\n \n /* Defined in the automatically-generated underscore.c.  */"}]}