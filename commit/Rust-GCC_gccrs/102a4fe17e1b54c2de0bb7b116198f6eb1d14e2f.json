{"sha": "102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyYTRmZTE3ZTFiNTRjMmRlMGJiN2IxMTYxOThmNmViMWQxNGUyZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-19T02:55:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-19T02:55:12Z"}, "message": "Adjust C++11/C++14 tests to work with -fchar8_t\n\n\t* testsuite/21_strings/basic_string/literals/types.cc\n\t[_GLIBCXX_USE_CHAR8_T]: Adjust expected string type for u8 literal.\n\t* testsuite/21_strings/basic_string/literals/values.cc\n\t[_GLIBCXX_USE_CHAR8_T]: Likewise.\n\t* testsuite/22_locale/codecvt/char16_t.cc: Adjust for u8 literals\n\tpotentially having different type.\n\t* testsuite/22_locale/codecvt/char32_t.cc: Likewise.\n\t* testsuite/22_locale/codecvt/codecvt_utf8/79980.cc: Cast u8 literal\n\tto char.\n\t* testsuite/22_locale/codecvt/codecvt_utf8/wchar_t/1.cc: Likewise.\n\t* testsuite/22_locale/codecvt/utf8.cc: Likewise.\n\t* testsuite/22_locale/conversions/string/2.cc: Remove u8 prefix from\n\tstring literals only using basic character set.\n\t* testsuite/22_locale/conversions/string/3.cc: Likewise. Cast other\n\tu8 literals to char.\n\t* testsuite/29_atomics/headers/atomic/macros.cc [_GLIBCXX_USE_CHAR8_T]:\n\tTest ATOMIC_CHAR8_T_LOCK_FREE.\n\tAdd missing #error to ATOMIC_CHAR16_T_LOCK_FREE test.\n\t* testsuite/29_atomics/headers/atomic/types_std_c++0x.cc\n\t[_GLIBCXX_USE_CHAR8_T]: Check for std::atomic_char8_t.\n\t* testsuite/experimental/string_view/literals/types.cc\n\t[_GLIBCXX_USE_CHAR8_T]: Adjust expected string_view type for u8\n\tliteral.\n\t* testsuite/experimental/string_view/literals/values.cc\n\t[_GLIBCXX_USE_CHAR8_T]: Likewise.\n\nFrom-SVN: r269006", "tree": {"sha": "c193a4c35b08f45882400bd6ee966a7bb542ac29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c193a4c35b08f45882400bd6ee966a7bb542ac29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46ca1dd73c97c5bf85057d450adf4b885a427e77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca1dd73c97c5bf85057d450adf4b885a427e77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ca1dd73c97c5bf85057d450adf4b885a427e77"}], "stats": {"total": 155, "additions": 119, "deletions": 36}, "files": [{"sha": "99108d9dd5694c9bc33d1b5c86e39bf7880cf73e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -1,3 +1,31 @@\n+2019-02-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/21_strings/basic_string/literals/types.cc\n+\t[_GLIBCXX_USE_CHAR8_T]: Adjust expected string type for u8 literal.\n+\t* testsuite/21_strings/basic_string/literals/values.cc\n+\t[_GLIBCXX_USE_CHAR8_T]: Likewise.\n+\t* testsuite/22_locale/codecvt/char16_t.cc: Adjust for u8 literals\n+\tpotentially having different type.\n+\t* testsuite/22_locale/codecvt/char32_t.cc: Likewise.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8/79980.cc: Cast u8 literal\n+\tto char.\n+\t* testsuite/22_locale/codecvt/codecvt_utf8/wchar_t/1.cc: Likewise.\n+\t* testsuite/22_locale/codecvt/utf8.cc: Likewise.\n+\t* testsuite/22_locale/conversions/string/2.cc: Remove u8 prefix from\n+\tstring literals only using basic character set.\n+\t* testsuite/22_locale/conversions/string/3.cc: Likewise. Cast other\n+\tu8 literals to char.\n+\t* testsuite/29_atomics/headers/atomic/macros.cc [_GLIBCXX_USE_CHAR8_T]:\n+\tTest ATOMIC_CHAR8_T_LOCK_FREE.\n+\tAdd missing #error to ATOMIC_CHAR16_T_LOCK_FREE test.\n+\t* testsuite/29_atomics/headers/atomic/types_std_c++0x.cc\n+\t[_GLIBCXX_USE_CHAR8_T]: Check for std::atomic_char8_t.\n+\t* testsuite/experimental/string_view/literals/types.cc\n+\t[_GLIBCXX_USE_CHAR8_T]: Adjust expected string_view type for u8\n+\tliteral.\n+\t* testsuite/experimental/string_view/literals/values.cc\n+\t[_GLIBCXX_USE_CHAR8_T]: Likewise.\n+\n 2019-02-19  Tom Honermann  <tom@honermann.net>\n \n \t* testsuite/18_support/numeric_limits/char8_t.cc: New test cloned"}, {"sha": "1dbd70a771b13e61c82d3b66c2dd5393cb3c7317", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/types.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Ftypes.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -20,6 +20,12 @@\n #include <string>\n #include <type_traits>\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::u8string;\n+#else\n+using u8string = std::string;\n+#endif\n+\n void\n test01()\n {\n@@ -28,7 +34,7 @@ test01()\n   static_assert(std::is_same<decltype(\"Hello\"s), std::string>::value,\n \t\t\"\\\"Hello\\\"s is std::string\");\n \n-  static_assert(std::is_same<decltype(u8\"Hello\"s), std::string>::value,\n+  static_assert(std::is_same<decltype(u8\"Hello\"s), u8string>::value,\n \t\t\"u8\\\"Hello\\\"s is std::string\");\n \n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "f0d48c85c7dc361ada1068f40a14ea04c43c9328", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/values.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fvalues.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -20,6 +20,12 @@\n #include <string>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::u8string;\n+#else\n+using u8string = std::string;\n+#endif\n+\n void\n test01()\n {\n@@ -29,15 +35,15 @@ test01()\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring wplanet = L\"Venus\"s;\n #endif\n-  std::string u8planet = u8\"Mars\"s;\n+  u8string u8planet = u8\"Mars\"s;\n   std::u16string u16planet = u\"Jupiter\"s;\n   std::u32string u32planet = U\"Saturn\"s;\n \n   VERIFY( planet == std::string(\"Mercury\") );\n #ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::wstring(L\"Venus\") );\n #endif\n-  VERIFY( u8planet == std::string(u8\"Mars\") );\n+  VERIFY( u8planet == u8string(u8\"Mars\") );\n   VERIFY( u16planet == std::u16string(u\"Jupiter\") );\n   VERIFY( u32planet == std::u32string(U\"Saturn\") );\n }"}, {"sha": "342789b779e2d0fda73f4a65169963a3ed36b4c9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/types.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -21,6 +21,12 @@\n #include <string_view>\n #include <type_traits>\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::u8string_view;\n+#else\n+using u8string_view = std::string_view;\n+#endif\n+\n void\n test01()\n {\n@@ -29,7 +35,7 @@ test01()\n   static_assert(std::is_same<decltype(\"Hello\"sv), std::string_view>::value,\n \t\t\"\\\"Hello\\\"s is std::string_view\");\n \n-  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::string_view>::value,\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), u8string_view>::value,\n \t\t\"u8\\\"Hello\\\"s is std::string_view\");\n \n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "88434337b9a92c41271b83ac3ae928f73a60d5ff", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/values.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -20,6 +20,12 @@\n #include <string_view>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::u8string_view;\n+#else\n+using u8string_view = std::string_view;\n+#endif\n+\n void\n test01()\n {\n@@ -29,15 +35,15 @@ test01()\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring_view wplanet = L\"Venus\"sv;\n #endif\n-  std::string_view u8planet = u8\"Mars\"sv;\n+  u8string_view u8planet = u8\"Mars\"sv;\n   std::u16string_view u16planet = u\"Jupiter\"sv;\n   std::u32string_view u32planet = U\"Saturn\"sv;\n \n   VERIFY( planet == std::string_view(\"Mercury\") );\n #ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::wstring_view(L\"Venus\") );\n #endif\n-  VERIFY( u8planet == std::string_view(u8\"Mars\") );\n+  VERIFY( u8planet == u8string_view(u8\"Mars\") );\n   VERIFY( u16planet == std::u16string_view(u\"Jupiter\") );\n   VERIFY( u32planet == std::u32string_view(U\"Saturn\") );\n }\n@@ -51,15 +57,15 @@ test02()\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n #endif\n-  std::string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+  u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n   std::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n   std::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n \n   VERIFY( planet_cratered == std::string_view(\"Mercury\\0cratered\", 16) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet_cratered == std::wstring_view(L\"Venus\\0cratered\", 14) );\n #endif\n-  VERIFY( u8planet_cratered == std::string_view(u8\"Mars\\0cratered\", 13) );\n+  VERIFY( u8planet_cratered == u8string_view(u8\"Mars\\0cratered\", 13) );\n   VERIFY( u16planet_cratered == std::u16string_view(u\"Jupiter\\0cratered\", 16) );\n   VERIFY( u32planet_cratered == std::u32string_view(U\"Saturn\\0cratered\", 15) );\n }"}, {"sha": "d1f0e80526845e37d991eae4033c2751e6addbc7", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char16_t.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar16_t.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -36,11 +36,15 @@ test01()\n   VERIFY(cvt->max_length() == 4);\n   VERIFY(cvt->encoding() == 0);\n \n-  const char u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+#ifndef _GLIBCXX_USE_CHAR8_T\n+  using char8_t = char;\n+#endif\n+  const char8_t u8dat_[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n     u8\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n     u8\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n     u8\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n-  const char* const u8dat_end = std::end(u8dat);\n+  const char* const u8dat = (const char*)u8dat_;\n+  const char* const u8dat_end = (const char*)std::end(u8dat_);\n \n   const char16_t u16dat[] = u\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n     u\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n@@ -83,7 +87,7 @@ test01()\n \n     VERIFY(res == codecvt_base::ok);\n     VERIFY(from_next == u16dat_end);\n-    VERIFY(std::memcmp((void*)buffer, (void*)u8dat, sizeof(u8dat)) == 0);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u8dat_, sizeof(u8dat_)) == 0);\n \n     delete[] buffer;\n   }"}, {"sha": "8df3b2d76826d8e7e4a4cbb47a69144545f16260", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/char32_t.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fchar32_t.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -38,11 +38,15 @@ test01()\n   VERIFY(cvt->max_length() == 4);\n   VERIFY(cvt->encoding() == 0);\n \n-  const char u8dat[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n+#ifndef _GLIBCXX_USE_CHAR8_T\n+  using char8_t = char;\n+#endif\n+  const char8_t u8dat_[] = u8\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n     u8\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n     u8\"\\U0001F6BF \\U0001F6BF \\U0001F648 \\U00000413\\U00000435\\U0000043E\"\n     u8\"\\U00000433\\U00000440\\U00000430\\U00000444\\U00000438\\U0000044F \\U0000FB05\";\n-  const char* const u8dat_end = std::end(u8dat);\n+  const char* const u8dat = (const char*)u8dat_;\n+  const char* const u8dat_end = (const char*)std::end(u8dat_);\n \n   const char32_t u32dat[] = U\"H\\U000000E4ll\\U000000F6 \\U0001F63F \\U000056FD \"\n     U\"\\U0000222B f(\\U000003BA) exp(-2\\U000003C0\\U000003C9) d\\U000003BA \"\n@@ -85,7 +89,7 @@ test01()\n \n     VERIFY(res == codecvt_base::ok);\n     VERIFY(from_next == u32dat_end);\n-    VERIFY(std::memcmp((void*)buffer, (void*)u8dat, sizeof(u8dat)) == 0);\n+    VERIFY(std::memcmp((void*)buffer, (void*)u8dat_, sizeof(u8dat_)) == 0);\n \n     delete[] buffer;\n   }"}, {"sha": "6d7eafb01f179595278e4bfafda6559ce2f52407", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8/79980.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2F79980.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2F79980.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2F79980.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -28,7 +28,7 @@ using std::codecvt_utf8;\n void\n test01()\n {\n-  std::string src = u8\"1234\\U00001111\\U0001ffff\";\n+  std::string src = (const char*)u8\"1234\\U00001111\\U0001ffff\";\n   wstring_convert<codecvt_utf8<char16_t>, char16_t> c(\"bad\", u\"BAD\");\n \n   // utf-8 to ucs2 conversion should fail on character outside BMP\n@@ -51,7 +51,7 @@ test01()\n void\n test02()\n {\n-  std::string src = u8\"1234\\U00001111\\U0001ffff\";\n+  std::string src = (const char*)u8\"1234\\U00001111\\U0001ffff\";\n   wstring_convert<codecvt_utf8<char16_t, 0x1000>, char16_t> c(\"bad\", u\"BAD\");\n \n   // utf-8 to ucs2 conversion should fail on character above Maxcode=0x1000\n@@ -63,7 +63,7 @@ test02()\n void\n test03()\n {\n-  std::string src = u8\"1234\\U00001111\\U0001ffff\";\n+  std::string src = (const char*)u8\"1234\\U00001111\\U0001ffff\";\n   wstring_convert<codecvt_utf8<char32_t, 0x10000>, char32_t> c(\"bad\", U\"BAD\");\n \n   // utf-8 to ucs4 conversion should fail on character above Maxcode=0x10000\n@@ -75,7 +75,7 @@ test03()\n void\n test04()\n {\n-  std::string src = u8\"1234\\U00001111\\U0001ffff\";\n+  std::string src = (const char*)u8\"1234\\U00001111\\U0001ffff\";\n   wstring_convert<codecvt_utf8<char32_t, 0x1000>, char32_t> c(\"bad\", U\"BAD\");\n \n   // utf-8 to ucs4 conversion should fail on character above Maxcode=0x1000"}, {"sha": "694845fc4e98a50c62a4baeb51ff5ace6846eb94", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/codecvt_utf8/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fcodecvt_utf8%2Fwchar_t%2F1.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -24,7 +24,7 @@\n void\n test01()\n {\n-  const char out[] = u8\"\\u00A33.50\";\n+  const auto out = (const char*)u8\"\\u00A33.50\";\n   wchar_t in[8] = {};\n   std::codecvt_utf8<wchar_t> cvt;\n   std::mbstate_t st;"}, {"sha": "82ee8ad211a32dab5988b36f12aeec4ff1de6570", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/utf8.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -22,7 +22,7 @@\n #include <string>\n #include <testsuite_hooks.h>\n \n-const char expected[] = u8\"\u00a3\u00a5\u20ac\";\n+const auto expected = (const char*)u8\"\u00a3\u00a5\u20ac\";\n const std::size_t expected_len = std::char_traits<char>::length(expected);\n \n template<typename C>"}, {"sha": "2e97b4f3ab0c03ac7e199f4c5ade18b3ae18765f", "filename": "libstdc++-v3/testsuite/22_locale/conversions/string/2.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F2.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -40,14 +40,14 @@ void test01()\n   typedef str_conv<char> sc;\n \n   const sc::byte_string berr = \"invalid wide string\";\n-  const sc::wide_string werr = u8\"invalid byte string\";\n+  const sc::wide_string werr = \"invalid byte string\";\n \n   sc c(berr, werr);\n   string input = \"Stop\";\n   input += char(0xFF);\n   string woutput = c.from_bytes(input);\n   VERIFY( input == woutput ); // noconv case doesn't detect invalid input\n-  string winput = u8\"Stop\";\n+  string winput = \"Stop\";\n   winput += char(0xFF);\n   string output = c.to_bytes(winput);\n   VERIFY( winput == output ); // noconv case doesn't detect invalid input"}, {"sha": "b66e94813b2dcf2da5fddc03a1cf7e3be949c51b", "filename": "libstdc++-v3/testsuite/22_locale/conversions/string/3.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fconversions%2Fstring%2F3.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -40,17 +40,17 @@ void test01()\n   typedef str_conv<char> wsc;\n \n   wsc c;\n-  string input = u8\"\\u00a3 shillings pence\";\n+  string input = (const char*)u8\"\\u00a3 shillings pence\";\n   string woutput = c.from_bytes(input.substr(0, 1));\n   auto partial_state = c.state();\n   auto partial_count = c.converted();\n \n-  auto woutput2 = c.from_bytes(u8\"state reset on next conversion\");\n-  VERIFY( woutput2 == u8\"state reset on next conversion\" );\n+  auto woutput2 = c.from_bytes(\"state reset on next conversion\");\n+  VERIFY( woutput2 == \"state reset on next conversion\" );\n \n   wsc c2(new cvt<char>, partial_state);\n   woutput += c2.from_bytes(input.substr(partial_count));\n-  VERIFY( u8\"\\u00a3 shillings pence\" == woutput );\n+  VERIFY( (const char*)u8\"\\u00a3 shillings pence\" == woutput );\n \n   string roundtrip = c2.to_bytes(woutput);\n   VERIFY( input == roundtrip );\n@@ -61,12 +61,12 @@ void test02()\n   typedef str_conv<char16_t> wsc;\n \n   wsc c;\n-  string input = u8\"\\u00a3 shillings pence\";\n+  string input = (const char*)u8\"\\u00a3 shillings pence\";\n   u16string woutput = c.from_bytes(input.substr(0, 1));\n   auto partial_state = c.state();\n   auto partial_count = c.converted();\n \n-  auto woutput2 = c.from_bytes(u8\"state reset on next conversion\");\n+  auto woutput2 = c.from_bytes(\"state reset on next conversion\");\n   VERIFY( woutput2 == u\"state reset on next conversion\" );\n \n   wsc c2(new cvt<char16_t>, partial_state);\n@@ -82,12 +82,12 @@ void test03()\n   typedef str_conv<char32_t> wsc;\n \n   wsc c;\n-  string input = u8\"\\u00a3 shillings pence\";\n+  string input = (const char*)u8\"\\u00a3 shillings pence\";\n   u32string woutput = c.from_bytes(input.substr(0, 1));\n   auto partial_state = c.state();\n   auto partial_count = c.converted();\n \n-  auto woutput2 = c.from_bytes(u8\"state reset on next conversion\");\n+  auto woutput2 = c.from_bytes(\"state reset on next conversion\");\n   VERIFY( woutput2 == U\"state reset on next conversion\" );\n \n   wsc c2(new cvt<char32_t>, partial_state);"}, {"sha": "ac03f362411a14fbe1b45689e7944a5b0ce4b41c", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/macros.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -31,9 +31,18 @@\n # error \"ATOMIC_CHAR_LOCK_FREE must be 1 or 2\"\n #endif\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+# ifndef ATOMIC_CHAR8_T_LOCK_FREE\n+#  error \"ATOMIC_CHAR8_T_LOCK_FREE must be a macro\"\n+# elif ATOMIC_CHAR8_T_LOCK_FREE != 1 && ATOMIC_CHAR8_T_LOCK_FREE != 2\n+#  error \"ATOMIC_CHAR8_T_LOCK_FREE must be 1 or 2\"\n+# endif\n+#endif\n+\n #ifndef ATOMIC_CHAR16_T_LOCK_FREE \n # error \"ATOMIC_CHAR16_T_LOCK_FREE must be a macro\"\n #elif ATOMIC_CHAR16_T_LOCK_FREE != 1 && ATOMIC_CHAR16_T_LOCK_FREE != 2\n+# error \"ATOMIC_CHAR16_T_LOCK_FREE must be 1 or 2\"\n #endif\n \n #ifndef ATOMIC_CHAR32_T_LOCK_FREE "}, {"sha": "47084c4a33a01b4b2b5076e8fcd88eb75060487e", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/types_std_c++0x.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -46,6 +46,9 @@ void test01()\n   using std::atomic_llong;\n   using std::atomic_ullong;\n   using std::atomic_wchar_t;\n+#ifdef _GLIBCXX_USE_CHAR8_T\n+  using std::atomic_char8_t;\n+#endif\n   using std::atomic_char16_t;\n   using std::atomic_char32_t;\n "}, {"sha": "0998a05dcbddcc64b1f85e2c6aee3ce1a8bad315", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/types.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Ftypes.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -20,6 +20,12 @@\n #include <experimental/string_view>\n #include <type_traits>\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::experimental::u8string_view;\n+#else\n+using u8string_view = std::experimental::string_view;\n+#endif\n+\n void\n test01()\n {\n@@ -28,7 +34,7 @@ test01()\n   static_assert(std::is_same<decltype(\"Hello\"sv), std::experimental::string_view>::value,\n \t\t\"\\\"Hello\\\"s is std::string_view\");\n \n-  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::experimental::string_view>::value,\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), u8string_view>::value,\n \t\t\"u8\\\"Hello\\\"s is std::string_view\");\n \n #ifdef _GLIBCXX_USE_WCHAR_T"}, {"sha": "e18ee7edf6e99ee0ef08483d80ef7c429074b874", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/values.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc?ref=102a4fe17e1b54c2de0bb7b116198f6eb1d14e2f", "patch": "@@ -20,6 +20,12 @@\n #include <experimental/string_view>\n #include <testsuite_hooks.h>\n \n+#ifdef _GLIBCXX_USE_CHAR8_T\n+using std::experimental::u8string_view;\n+#else\n+using u8string_view = std::experimental::string_view;\n+#endif\n+\n void\n test01()\n {\n@@ -29,15 +35,15 @@ test01()\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view wplanet = L\"Venus\"sv;\n #endif\n-  std::experimental::string_view u8planet = u8\"Mars\"sv;\n+  u8string_view u8planet = u8\"Mars\"sv;\n   std::experimental::u16string_view u16planet = u\"Jupiter\"sv;\n   std::experimental::u32string_view u32planet = U\"Saturn\"sv;\n \n   VERIFY( planet == std::experimental::string_view(\"Mercury\") );\n #ifdef _GLIBCXX_USE_WCHAR_T\n   VERIFY( wplanet == std::experimental::wstring_view(L\"Venus\") );\n #endif\n-  VERIFY( u8planet == std::experimental::string_view(u8\"Mars\") );\n+  VERIFY( u8planet == u8string_view(u8\"Mars\") );\n   VERIFY( u16planet == std::experimental::u16string_view(u\"Jupiter\") );\n   VERIFY( u32planet == std::experimental::u32string_view(U\"Saturn\") );\n }\n@@ -51,7 +57,7 @@ test02()\n #ifdef _GLIBCXX_USE_WCHAR_T\n   std::experimental::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n #endif\n-  std::experimental::string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+  u8string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n   std::experimental::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n   std::experimental::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n \n@@ -61,8 +67,7 @@ test02()\n   VERIFY( wplanet_cratered ==\n \t  std::experimental::wstring_view(L\"Venus\\0cratered\", 14) );\n #endif\n-  VERIFY( u8planet_cratered ==\n-\t  std::experimental::string_view(u8\"Mars\\0cratered\", 13) );\n+  VERIFY( u8planet_cratered == u8string_view(u8\"Mars\\0cratered\", 13) );\n   VERIFY( u16planet_cratered ==\n \t  std::experimental::u16string_view(u\"Jupiter\\0cratered\", 16) );\n   VERIFY( u32planet_cratered =="}]}