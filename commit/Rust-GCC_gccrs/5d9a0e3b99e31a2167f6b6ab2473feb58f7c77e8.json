{"sha": "5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ5YTBlM2I5OWUzMWEyMTY3ZjZiNmFiMjQ3M2ZlYjU4ZjdjNzdlOA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2018-11-01T22:10:31Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2018-11-01T22:10:31Z"}, "message": "Implement P0846R0, ADL and function templates.\n\n\t* decl.c (grokfndecl): Allow FUNCTION_DECL in assert.\n\t* lex.c (unqualified_fn_lookup_error): Handle TEMPLATE_ID_EXPR.\n\t* parser.c (cp_parser_postfix_expression): Do ADL for a template-name.\n\t(cp_parser_template_id): Give errors if parsing the template argument\n\tlist didn't go well.  Allow FUNCTION_DECL in assert.\n\t(cp_parser_template_name): Consider a name to refer to a template if\n\tit is an unqualified-id followed by a <.  Don't return the identifier\n\tif the decl is a function and dependent.\n\t* pt.c (tsubst_copy) <case OVERLOAD>: Remove assert.\n\n\t* g++.dg/addr_builtin-1.C: Adjust dg-error.\n\t* g++.dg/cpp2a/fn-template1.C: New test.\n\t* g++.dg/cpp2a/fn-template10.C: New test.\n\t* g++.dg/cpp2a/fn-template11.C: New test.\n\t* g++.dg/cpp2a/fn-template12.C: New test.\n\t* g++.dg/cpp2a/fn-template13.C: New test.\n\t* g++.dg/cpp2a/fn-template14.C: New test.\n\t* g++.dg/cpp2a/fn-template15.C: New test.\n\t* g++.dg/cpp2a/fn-template16.C: New test.\n\t* g++.dg/cpp2a/fn-template2.C: New test.\n\t* g++.dg/cpp2a/fn-template3.C: New test.\n\t* g++.dg/cpp2a/fn-template4.C: New test.\n\t* g++.dg/cpp2a/fn-template5.C: New test.\n\t* g++.dg/cpp2a/fn-template6.C: New test.\n\t* g++.dg/cpp2a/fn-template7.C: New test.\n\t* g++.dg/cpp2a/fn-template8.C: New test.\n\t* g++.dg/cpp2a/fn-template9.C: New test.\n\t* g++.dg/parse/fn-template1.C: New test.\n\t* g++.dg/parse/fn-template2.C: New test.\n\t* g++.dg/parse/template19.C: Adjust dg-error.\n\t* g++.dg/template/pr61745.C: Add target to dg-error.\n\nFrom-SVN: r265734", "tree": {"sha": "37c5dd82ef0aa75d2a14f04e83a976603e23d193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37c5dd82ef0aa75d2a14f04e83a976603e23d193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af0c6bce5e4343a6099ba07e9dbfc3288de40a6"}], "stats": {"total": 525, "additions": 507, "deletions": 18}, "files": [{"sha": "b27ae1ad70356a2e44116d0bb9e7014e1a7ca896", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -1,3 +1,16 @@\n+2018-11-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P0846R0, ADL and function templates.\n+\t* decl.c (grokfndecl): Allow FUNCTION_DECL in assert.\n+\t* lex.c (unqualified_fn_lookup_error): Handle TEMPLATE_ID_EXPR.\n+\t* parser.c (cp_parser_postfix_expression): Do ADL for a template-name.\n+\t(cp_parser_template_id): Give errors if parsing the template argument\n+\tlist didn't go well.  Allow FUNCTION_DECL in assert.\n+\t(cp_parser_template_name): Consider a name to refer to a template if\n+\tit is an unqualified-id followed by a <.  Don't return the identifier\n+\tif the decl is a function and dependent.\n+\t* pt.c (tsubst_copy) <case OVERLOAD>: Remove assert.\n+\n 2018-11-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (struct lang_function): Delete x_local_names field."}, {"sha": "f0033dd5458ad2c9b9195a3f6af41845607d6515", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -8857,7 +8857,9 @@ grokfndecl (tree ctype,\n \t     the information in the TEMPLATE_ID_EXPR.  */\n \t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n \n-\t  gcc_assert (identifier_p (fns) || TREE_CODE (fns) == OVERLOAD);\n+\t  gcc_assert (identifier_p (fns)\n+\t\t      || TREE_CODE (fns) == OVERLOAD\n+\t\t      || TREE_CODE (fns) == FUNCTION_DECL);\n \t  DECL_TEMPLATE_INFO (decl) = build_template_info (fns, args);\n \n \t  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))"}, {"sha": "26ec52f3498f82d7d10b7f7e0b03323774d8b58d", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -541,6 +541,9 @@ unqualified_fn_lookup_error (cp_expr name_expr)\n   if (loc == UNKNOWN_LOCATION)\n     loc = input_location;\n \n+  if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n+    name = TREE_OPERAND (name, 0);\n+\n   if (processing_template_decl)\n     {\n       /* In a template, it is invalid to write \"f()\" or \"f(3)\" if no"}, {"sha": "d01c92431ef1196858a68aff19a8c67433861899", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 62, "deletions": 10, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -7195,7 +7195,11 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    if (idk == CP_ID_KIND_UNQUALIFIED\n \t\t|| idk == CP_ID_KIND_TEMPLATE_ID)\n \t      {\n-\t\tif (identifier_p (postfix_expression))\n+\t\tif (identifier_p (postfix_expression)\n+\t\t    /* In C++2A, we may need to perform ADL for a template\n+\t\t       name.  */\n+\t\t    || (TREE_CODE (postfix_expression) == TEMPLATE_ID_EXPR\n+\t\t\t&& identifier_p (TREE_OPERAND (postfix_expression, 0))))\n \t\t  {\n \t\t    if (!args->is_empty ())\n \t\t      {\n@@ -16029,6 +16033,37 @@ cp_parser_template_id (cp_parser *parser,\n \t}\n       /* Parse the arguments.  */\n       arguments = cp_parser_enclosed_template_argument_list (parser);\n+\n+      if ((cxx_dialect > cxx17)\n+\t  && (TREE_CODE (templ) == FUNCTION_DECL || identifier_p (templ))\n+\t  && !template_keyword_p\n+\t  && (cp_parser_error_occurred (parser)\n+\t      || cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN)))\n+\t{\n+\t  /* This didn't go well.  */\n+\t  if (TREE_CODE (templ) == FUNCTION_DECL)\n+\t    {\n+\t      /* C++2A says that \"function-name < a;\" is now ill-formed.  */\n+\t      if (cp_parser_error_occurred (parser))\n+\t\t{\n+\t\t  error_at (token->location, \"invalid template-argument-list\");\n+\t\t  inform (token->location, \"function name as the left hand \"\n+\t\t\t  \"operand of %<<%> is ill-formed in C++2a; wrap the \"\n+\t\t\t  \"function name in %<()%>\");\n+\t\t}\n+\t      else\n+\t\t/* We expect \"f<targs>\" to be followed by \"(args)\".  */\n+\t\terror_at (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t\t  \"expected %<(%> after template-argument-list\");\n+\t      if (start_of_id)\n+\t\t/* Purge all subsequent tokens.  */\n+\t\tcp_lexer_purge_tokens_after (parser->lexer, start_of_id);\n+\t    }\n+\t  else\n+\t    cp_parser_simulate_error (parser);\n+\t  pop_deferring_access_checks ();\n+\t  return error_mark_node;\n+\t}\n     }\n \n   /* Set the location to be of the form:\n@@ -16085,6 +16120,7 @@ cp_parser_template_id (cp_parser *parser,\n \t a function-template.  */\n       gcc_assert ((DECL_FUNCTION_TEMPLATE_P (templ)\n \t\t   || TREE_CODE (templ) == OVERLOAD\n+\t\t   || TREE_CODE (templ) == FUNCTION_DECL\n \t\t   || BASELINK_P (templ)));\n \n       template_id = lookup_template_function (templ, arguments);\n@@ -16287,6 +16323,10 @@ cp_parser_template_name (cp_parser* parser,\n \t}\n     }\n \n+  /* cp_parser_lookup_name clears OBJECT_TYPE.  */\n+  const bool scoped_p = ((parser->scope ? parser->scope\n+\t\t\t  : parser->context->object_type) != NULL_TREE);\n+\n   /* Look up the name.  */\n   decl = cp_parser_lookup_name (parser, identifier,\n \t\t\t\ttag_type,\n@@ -16319,6 +16359,27 @@ cp_parser_template_name (cp_parser* parser,\n \tif (TREE_CODE (*iter) == TEMPLATE_DECL)\n \t  found = true;\n \n+      if (!found\n+\t  && (cxx_dialect > cxx17)\n+\t  && !scoped_p\n+\t  && cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n+\t{\n+\t  /* [temp.names] says \"A name is also considered to refer to a template\n+\t     if it is an unqualified-id followed by a < and name lookup finds\n+\t     either one or more functions or finds nothing.\"  */\n+\n+\t  /* The \"more functions\" case.  Just use the OVERLOAD as normally.\n+\t     We don't use is_overloaded_fn here to avoid considering\n+\t     BASELINKs.  */\n+\t  if (TREE_CODE (decl) == OVERLOAD\n+\t      /* Name lookup found one function.  */\n+\t      || TREE_CODE (decl) == FUNCTION_DECL)\n+\t    found = true;\n+\t  /* Name lookup found nothing.  */\n+\t  else if (decl == error_mark_node)\n+\t    return identifier;\n+\t}\n+\n       if (!found)\n \t{\n \t  /* The name does not name a template.  */\n@@ -16327,15 +16388,6 @@ cp_parser_template_name (cp_parser* parser,\n \t}\n     }\n \n-  /* If DECL is dependent, and refers to a function, then just return\n-     its name; we will look it up again during template instantiation.  */\n-  if (DECL_FUNCTION_TEMPLATE_P (decl) || !DECL_P (decl))\n-    {\n-      tree scope = ovl_scope (decl);\n-      if (TYPE_P (scope) && dependent_type_p (scope))\n-\treturn identifier;\n-    }\n-\n   return decl;\n }\n "}, {"sha": "4226d4d6b5cf0e5d8c9fcc1fd07022fec4503513", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -15538,10 +15538,6 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       return t;\n \n     case OVERLOAD:\n-      /* An OVERLOAD will always be a non-dependent overload set; an\n-\t overload set from function scope will just be represented with an\n-\t IDENTIFIER_NODE, and from class scope with a BASELINK.  */\n-      gcc_assert (!uses_template_parms (t));\n       /* We must have marked any lookups as persistent.  */\n       gcc_assert (!OVL_LOOKUP_P (t) || OVL_USED_P (t));\n       return t;"}, {"sha": "98703db230539da08599b7544b33154b55d190da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -1,3 +1,28 @@\n+2018-11-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tImplement P0846R0, ADL and function templates.\n+\t* g++.dg/addr_builtin-1.C: Adjust dg-error.\n+\t* g++.dg/cpp2a/fn-template1.C: New test.\n+\t* g++.dg/cpp2a/fn-template10.C: New test.\n+\t* g++.dg/cpp2a/fn-template11.C: New test.\n+\t* g++.dg/cpp2a/fn-template12.C: New test.\n+\t* g++.dg/cpp2a/fn-template13.C: New test.\n+\t* g++.dg/cpp2a/fn-template14.C: New test.\n+\t* g++.dg/cpp2a/fn-template15.C: New test.\n+\t* g++.dg/cpp2a/fn-template16.C: New test.\n+\t* g++.dg/cpp2a/fn-template2.C: New test.\n+\t* g++.dg/cpp2a/fn-template3.C: New test.\n+\t* g++.dg/cpp2a/fn-template4.C: New test.\n+\t* g++.dg/cpp2a/fn-template5.C: New test.\n+\t* g++.dg/cpp2a/fn-template6.C: New test.\n+\t* g++.dg/cpp2a/fn-template7.C: New test.\n+\t* g++.dg/cpp2a/fn-template8.C: New test.\n+\t* g++.dg/cpp2a/fn-template9.C: New test.\n+\t* g++.dg/parse/fn-template1.C: New test.\n+\t* g++.dg/parse/fn-template2.C: New test.\n+\t* g++.dg/parse/template19.C: Adjust dg-error.\n+\t* g++.dg/template/pr61745.C: Add target to dg-error.\n+\n 2017-11-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/54613"}, {"sha": "0c282b1f8cdfdf24c6f97ddc355ac337b90ec863", "filename": "gcc/testsuite/g++.dg/addr_builtin-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -108,7 +108,7 @@ static F* test_taking_address_of_gcc_builtin ()\n   a = p - __builtin_trap;            // { dg-error \"built-in\" }\n \n   // Relational operators.  Ill-formed but allowed with -fpermissive.\n-  a = __builtin_trap < p;            // { dg-error \"built-in\" }\n+  a = __builtin_trap < p;            // { dg-error \"built-in|invalid template-argument-list\" }\n   a = p < __builtin_trap;            // { dg-error \"built-in\" }\n \n   a = __builtin_trap <= p;           // { dg-error \"built-in\" }"}, {"sha": "2492d9df7d5a6d267e00471ddbd47ebd3d47dfed", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template1.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,37 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+int h;\n+void g();\n+void e();\n+void e(int);\n+void e(int, int);\n+\n+namespace N {\n+  struct A { };\n+  template <class T> int f(T);\n+  template <class T> int g(T);\n+  template <class T> int h(T);\n+  template <class T> int e(T);\n+}\n+\n+int v = e<N::A>(N::A());\n+int x = f<N::A>(N::A());\n+int y = g<N::A>(N::A());\n+int z = h<N::A>(N::A()); // { dg-error \"expected\" }\n+\n+template<class>\n+void fn ()\n+{\n+  int v = e<N::A>(N::A());\n+  int x = f<N::A>(N::A());\n+  int y = g<N::A>(N::A());\n+  int z = h<N::A>(N::A()); // { dg-error \"expected\" }\n+}\n+\n+void\n+test ()\n+{\n+  fn<int>();\n+}"}, {"sha": "c69d48fa9b23f84b4c25f8519f08b6aa06d8823d", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template10.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template10.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,22 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+int h;\n+void g();\n+void e();\n+void e(int);\n+void e(int, int);\n+\n+namespace N {\n+  struct A { };\n+  template <class T> static int f(T) { return 1; }\n+  template <class T> static int g(T) { return 2; }\n+  template <class T> static int h(T);\n+  template <class T> static int e(T) { return 3; }\n+}\n+\n+int v = e<N::A>(N::A());\n+int x = f<N::A>(N::A());\n+int y = g<N::A>(N::A());\n+int z = h<N::A>(N::A()); // { dg-error \"expected\" }"}, {"sha": "1a6b68829002f58d5e8b4755350c2b051382ac85", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template11.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template11.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,11 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+int nonconst ();\n+\n+int foo ()\n+{\n+  return blah < // { dg-error \"not declared\" }\n+    nonconst (), nonconst (); // { dg-error \"call to non-.constexpr. function\" }\n+}"}, {"sha": "fc72fd00584970b5a5f8fa7524c7506c0eb401be", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template12.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template12.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,33 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct S {\n+  template<typename T> int foo(T);\n+  template<typename T> int foo(T, T);\n+  template<typename T> int foo(T, T, T);\n+};\n+\n+template<typename T>\n+struct W {\n+  template<typename U> T foo(U);\n+  template<typename U> T foo(U, U);\n+  template<typename U> T foo(U, U, U);\n+};\n+\n+void\n+test ()\n+{\n+  S s;\n+  s.foo<int>(1);\n+  s.foo<int>(1, 2);\n+  s.foo<int>(1, 2, 3);\n+\n+  W<int> w;\n+  w.foo<int>(1);\n+  w.foo<int>(1, 2);\n+  w.foo<int>(1, 2, 3);\n+\n+  w.nothere<int>(1); // { dg-error \"has no member|expected\" }\n+  s.nothere<int>(1); // { dg-error \"has no member|expected\" }\n+}"}, {"sha": "ece6d152601bcc6dfb192b5050b7f95396f4e3f9", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template13.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template13.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,32 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct A {\n+  template<typename T>\n+  int foo (T a, T b) { return a + b; }\n+};\n+\n+int\n+bar (A* pa, int (A::*pm)(int, int))\n+{\n+  return (pa->*pm)(1, 2);\n+}\n+\n+int\n+baz (A pa, int (A::*pm)(int, int))\n+{\n+  return (pa.*pm)(1, 2);\n+}\n+\n+int\n+main ()\n+{\n+  A a;\n+  int i = bar (&a, &A::foo<int>);\n+  if (i != 3)\n+    __builtin_abort ();\n+  i = baz (a, &A::foo<int>);\n+  if (i != 3)\n+    __builtin_abort ();\n+}"}, {"sha": "96d9267ff169ec14425d91df1df04d86ab96faf0", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template14.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template14.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,9 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<typename> struct B\n+{\n+  template<typename> int foo() { return 0; }\n+  int i = foo<int>();\n+};"}, {"sha": "20e48014be1ffd93157bea0eb326c3d3b86c2dc3", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template15.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template15.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,23 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+// Don't get confused by these valid cases.\n+\n+template <class>\n+class A {\n+  template <bool> void b();\n+  void m_fn1();\n+};\n+\n+template <class T>\n+void A<T>::m_fn1() { b<>(0); }\n+\n+\n+template <int> struct X {\n+  X() { fn<>(0); }\n+  template <int> void fn();\n+};\n+\n+\n+template <typename> void a() { a<int>; }"}, {"sha": "becaff1e3fb6adf239d687478f065423cec2af5e", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template16.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template16.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,20 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct undeclared<int> { }; // { dg-error \"not a class template\" }\n+\n+int\n+main ()\n+{\n+  int foo ();\n+  int foo (int);\n+  int foo (int, int);\n+  int a, b = 10;\n+  a = foo<; // { dg-error \"\" }\n+  a = foo < b; // { dg-error \"\" }\n+  a = foo<b>; // { dg-error \"\" }\n+  a = foo<b>(; // { dg-error \"expected\" }\n+  a = foo<b>(1; // { dg-error \"expected\" }\n+  a = foo<b>(1); // { dg-error \"no matching\" }\n+}"}, {"sha": "f974c8c2cf9bc211a1cad91261046e74b0af2fd9", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template2.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template2.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,16 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct A { };\n+bool operator <(void (*fp)(), A) { return false; }\n+void f() {}\n+\n+int\n+main ()\n+{\n+  A a;\n+  f < a; // { dg-error \"invalid\" }\n+  bool b = f < a; // { dg-error \"invalid\" }\n+  (f) < a;\n+}"}, {"sha": "f801625ab3d401750e9ad73eeb4187812585a1f4", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template3.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,29 @@\n+// P0846R0\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+void g();\n+void e();\n+void e(int);\n+void e(int, int);\n+\n+namespace N {\n+  struct A { };\n+  template <class T> int f(T) { return 1; }\n+  template <class T> int g(T) { return 2; }\n+  template <class T> int e(T) { return 3; }\n+}\n+\n+int\n+main ()\n+{\n+  int v = e<N::A>(N::A());\n+  if (v != 3)\n+    __builtin_abort ();\n+  int x = f<N::A>(N::A());\n+  if (x != 1)\n+    __builtin_abort ();\n+  int y = g<N::A>(N::A());\n+  if (y != 2)\n+    __builtin_abort ();\n+}"}, {"sha": "9259c2ebf23512f15c8d24e1745d65a0330a6770", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template4.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,11 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+template <typename T> void foo() { }\n+template <typename T> void bar(int) { }\n+int main()\n+{\n+  foo<float>();\n+  bar<int>(1);\n+}"}, {"sha": "33477c967468e64798588516dcd500fa27bf069f", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template5.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template5.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,32 @@\n+// P0846R0\n+// { dg-do run }\n+// { dg-options \"-std=c++2a\" }\n+\n+int g() { return 11; }\n+int e() { return 12; }\n+int e(int) { return 13; }\n+int e(int, int) { return 14; }\n+\n+namespace N {\n+  struct A { };\n+  template <class T> int f(T) { return 1; }\n+  template <class T> int g(T) { return 2; }\n+  template <class T> int e(T) { return 3; }\n+}\n+\n+int\n+main ()\n+{\n+  int v = e(1);\n+  if (v != 13)\n+    __builtin_abort ();\n+  int x = e(1, 2);\n+  if (x != 14)\n+    __builtin_abort ();\n+  int y = g();\n+  if (y != 11)\n+    __builtin_abort ();\n+  int z = e();\n+  if (z != 12)\n+    __builtin_abort ();\n+}"}, {"sha": "63b2377bc6e044f8edf685f07fedf32f6cb34a6e", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template6.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template6.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,16 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+template<class>\n+struct X {\n+  int first = 0;\n+};\n+\n+int\n+f ()\n+{\n+  X<int> x, y;\n+  bool b = x.first < y.first;\n+  return b;\n+}"}, {"sha": "d048606c0d68b32409a7463858057964962f6c93", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template7.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template7.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,18 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+struct undeclared<int> { }; // { dg-error \"not a class template\" }\n+\n+int\n+main ()\n+{\n+  int foo ();\n+  int a, b = 10;\n+  a = foo<; // { dg-error \"invalid template-argument-list|invalid\" }\n+  a = foo < b; // { dg-error \"invalid template-argument-list|invalid\" }\n+  a = foo<b>; // { dg-error \"after template-argument-list|invalid\" }\n+  a = foo<b>(; // { dg-error \"expected\" }\n+  a = foo<b>(1; // { dg-error \"expected\" }\n+  a = foo<b>(1); // { dg-error \"no matching\" }\n+}"}, {"sha": "9cd28eed5d0088b1521610adfdc9490e4c1c9741", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template8.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template8.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,34 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+const unsigned long arr[10] = { 2 };\n+template<class T> struct S { int n; };\n+\n+template <class T>\n+int fn1 (S<T>* s)\n+{\n+  int i = 1;\n+  return s->n < arr[i + 1];\n+}\n+\n+template <class T>\n+int fn2 (S<T> s)\n+{\n+  int i = 1;\n+  return s.n < arr[i + 1];\n+}\n+\n+template <class T>\n+int fn3 (S<T>* s)\n+{\n+  int i = 1;\n+  return s->template n < 1; // { dg-error \"parse error in template argument list\" }\n+}\n+\n+template <class T>\n+int fn4 (S<T> s)\n+{\n+  int i = 1;\n+  return s.template n < 1; // { dg-error \"parse error in template argument list\" }\n+}"}, {"sha": "19c960cc9369bf1eac5d9582018aca8c3e960c3d", "filename": "gcc/testsuite/g++.dg/cpp2a/fn-template9.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffn-template9.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,21 @@\n+// P0846R0\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+namespace N1 {\n+  struct S {};\n+  template<int X> void f(S);\n+}\n+\n+namespace N2 {\n+  template<class T> void f(T t);\n+}\n+\n+void\n+g (N1::S s)\n+{\n+  f<3>(s);\n+\n+  using N2::f;\n+  f<3>(s);\n+}"}, {"sha": "00f8b4920e17cff714884ee6b13fdcf17d8aec9c", "filename": "gcc/testsuite/g++.dg/parse/fn-template1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffn-template1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffn-template1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffn-template1.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,15 @@\n+// P0846R0\n+// { dg-do compile }\n+\n+struct A { };\n+bool operator <(void (*fp)(), A) { return false; }\n+void f() {}\n+\n+int\n+main ()\n+{\n+  A a;\n+  f < a; // { dg-error \"invalid\" \"\" { target c++2a } }\n+  bool b = f < a; // { dg-error \"invalid\" \"\" { target c++2a } }\n+  (f) < a;\n+}"}, {"sha": "c56694efb92811d93fe01435abc50dbce88574f4", "filename": "gcc/testsuite/g++.dg/parse/fn-template2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffn-template2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffn-template2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ffn-template2.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -0,0 +1,17 @@\n+// P0846R0\n+// { dg-do compile }\n+\n+namespace N1 {\n+  struct S {};\n+  template<int X> void f(S);\n+}\n+\n+namespace N2 {\n+  template<class T> void f(T t);\n+}\n+\n+void\n+g (N1::S s)\n+{\n+  f<3>(s); // { dg-error \"was not declared\" \"\" { target c++17_down } }\n+}"}, {"sha": "fba4f6d0bf2091a0642339b9a2c8377538a08815", "filename": "gcc/testsuite/g++.dg/parse/template19.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate19.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -6,6 +6,6 @@ template<int> struct A\n {\n   template<int> void foo()\n   {\n-    foo<0>::; // { dg-error \"before\" }\n+    foo<0>::; // { dg-error \"before|function template-id\" }\n   }\n };"}, {"sha": "da5973e38679a2152d55aaedb6d3b1235259f732", "filename": "gcc/testsuite/g++.dg/template/pr61745.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61745.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61745.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61745.C?ref=5d9a0e3b99e31a2167f6b6ab2473feb58f7c77e8", "patch": "@@ -18,5 +18,7 @@ public:\n   // this compiles only if the following definition is moved\n   // AFTER the friend declaration\n   Zp  operator-() const { return Zp(p-val); }\n-  friend Zp<INT,P> operator- <>(const Zp<INT,P>& a, const Zp<INT,P>& b); // { dg-error \"declaration|expected\" }\n+  // In C++2A, we have an unqualified-id (operator-) followed by\n+  // '<', and name lookup found a function.\n+  friend Zp<INT,P> operator- <>(const Zp<INT,P>& a, const Zp<INT,P>& b); // { dg-error \"declaration|expected\" \"\" { target c++17_down } }\n };"}]}