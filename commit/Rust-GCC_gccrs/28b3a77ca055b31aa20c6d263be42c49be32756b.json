{"sha": "28b3a77ca055b31aa20c6d263be42c49be32756b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhiM2E3N2NhMDU1YjMxYWEyMGM2ZDI2M2JlNDJjNDliZTMyNzU2Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-06-05T07:37:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-06-05T07:37:40Z"}, "message": "omp-low.c (lower_rec_input_clauses): For lastprivate conditional references...\n\n\t* omp-low.c (lower_rec_input_clauses): For lastprivate conditional\n\treferences, lookup in in hash map MEM_REF operand instead of the\n\tMEM_REF itself.\n\t(lower_omp_1): When looking for lastprivate conditional assignments,\n\thandle MEM_REFs with REFERENCE_TYPE operands.\n\n\t* testsuite/libgomp.c++/lastprivate-conditional-1.C: New test.\n\t* testsuite/libgomp.c++/lastprivate-conditional-2.C: New test.\n\nFrom-SVN: r271948", "tree": {"sha": "d8b2e5d9a854fa1c38354bd53152dc401bc87199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b2e5d9a854fa1c38354bd53152dc401bc87199"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28b3a77ca055b31aa20c6d263be42c49be32756b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b3a77ca055b31aa20c6d263be42c49be32756b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28b3a77ca055b31aa20c6d263be42c49be32756b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28b3a77ca055b31aa20c6d263be42c49be32756b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ea2bfca6a3fd80f14d24557f71efaafae3846a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea2bfca6a3fd80f14d24557f71efaafae3846a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea2bfca6a3fd80f14d24557f71efaafae3846a9"}], "stats": {"total": 192, "additions": 190, "deletions": 2}, "files": [{"sha": "cc706e207b57eab316e3be6106fd636d8ddf36d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a77ca055b31aa20c6d263be42c49be32756b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a77ca055b31aa20c6d263be42c49be32756b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28b3a77ca055b31aa20c6d263be42c49be32756b", "patch": "@@ -1,5 +1,11 @@\n 2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* omp-low.c (lower_rec_input_clauses): For lastprivate conditional\n+\treferences, lookup in in hash map MEM_REF operand instead of the\n+\tMEM_REF itself.\n+\t(lower_omp_1): When looking for lastprivate conditional assignments,\n+\thandle MEM_REFs with REFERENCE_TYPE operands.\n+\n \t* omp-low.c (lower_rec_input_clauses): Force max_vf if is_simd and\n \ton privatization clauses OMP_CLAUSE_DECL is privatized by reference\n \tand references a VLA.  Handle references to non-VLAs if is_simd"}, {"sha": "a7f35ffe416764b777ed30b9a869c3b89626fcbd", "filename": "gcc/omp-low.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a77ca055b31aa20c6d263be42c49be32756b/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a77ca055b31aa20c6d263be42c49be32756b/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=28b3a77ca055b31aa20c6d263be42c49be32756b", "patch": "@@ -4818,8 +4818,14 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t\t      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LASTPRIVATE\n \t\t\t  && OMP_CLAUSE_LASTPRIVATE_CONDITIONAL (c))\n \t\t\t{\n-\t\t\t  tree v\n-\t\t\t    = *ctx->lastprivate_conditional_map->get (new_var);\n+\t\t\t  tree v = new_var;\n+\t\t\t  if (!DECL_P (v))\n+\t\t\t    {\n+\t\t\t      gcc_assert (TREE_CODE (v) == MEM_REF);\n+\t\t\t      v = TREE_OPERAND (v, 0);\n+\t\t\t      gcc_assert (DECL_P (v));\n+\t\t\t    }\n+\t\t\t  v = *ctx->lastprivate_conditional_map->get (v);\n \t\t\t  tree t = create_tmp_var (TREE_TYPE (v));\n \t\t\t  tree z = build_zero_cst (TREE_TYPE (v));\n \t\t\t  tree orig_v\n@@ -10926,6 +10932,11 @@ lower_omp_1 (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  else if (!up->lastprivate_conditional_map)\n \t    break;\n \t  tree lhs = get_base_address (gimple_assign_lhs (stmt));\n+\t  if (TREE_CODE (lhs) == MEM_REF\n+\t      && DECL_P (TREE_OPERAND (lhs, 0))\n+\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (lhs,\n+\t\t\t\t\t\t     0))) == REFERENCE_TYPE)\n+\t    lhs = TREE_OPERAND (lhs, 0);\n \t  if (DECL_P (lhs))\n \t    if (tree *v = up->lastprivate_conditional_map->get (lhs))\n \t      {"}, {"sha": "2ea937ebb650617375f79d8aeaedcfb6ca634397", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a77ca055b31aa20c6d263be42c49be32756b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a77ca055b31aa20c6d263be42c49be32756b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=28b3a77ca055b31aa20c6d263be42c49be32756b", "patch": "@@ -1,3 +1,8 @@\n+2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c++/lastprivate-conditional-1.C: New test.\n+\t* testsuite/libgomp.c++/lastprivate-conditional-2.C: New test.\n+\n 2019-06-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c-c++-common/lastprivate-conditional-7.c: New test."}, {"sha": "e0ec5d5209f9ce26108421d3cb05e16ea4331c1f", "filename": "libgomp/testsuite/libgomp.c++/lastprivate-conditional-1.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a77ca055b31aa20c6d263be42c49be32756b/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Flastprivate-conditional-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a77ca055b31aa20c6d263be42c49be32756b/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Flastprivate-conditional-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Flastprivate-conditional-1.C?ref=28b3a77ca055b31aa20c6d263be42c49be32756b", "patch": "@@ -0,0 +1,62 @@\n+extern \"C\" void abort ();\n+int w;\n+struct S { int s, &t; S () : s (0), t (w) {}; void foo (short &); bool bar (int, int); void baz (short &); };\n+\n+bool\n+S::bar (int i, int q)\n+{\n+  switch (q)\n+    {\n+    case 0: return (i % 17) == 7;\n+    case 1: return (i % 19) == 2;\n+    case 2: return (i % 23) == 5;\n+    default: abort ();\n+    }\n+}\n+\n+void\n+S::foo (short &x)\n+{\n+  #pragma omp for lastprivate (conditional: x, s, t)\n+  for (int i = 0; i < 1025; ++i)\n+    {\n+      if (bar (i, 0))\n+\tx = i;\n+      if (bar (i, 1))\n+\ts = i + 3;\n+      if (bar (i, 2))\n+\tt = i + 6;\n+    }\n+}\n+\n+void\n+S::baz (short &x)\n+{\n+  #pragma omp parallel for lastprivate (conditional: x, s, t) collapse (3)\n+  for (int i = 0; i < 15; ++i)\n+    for (int j = -4; j < 9; j++)\n+      for (int k = 12; k > 7; --k)\n+\t{\n+\t  int l = (k - 8) + (j + 4) * 5 + i * 13 * 5;\n+\t  if (bar (l, 0))\n+\t    x = l;\n+\t  if (bar (l, 1))\n+\t    s = l + 3;\n+\t  if (bar (l, 2))\n+\t    t = l + 6;\n+\t}\n+}\n+\n+int\n+main ()\n+{\n+  short x;\n+  S s;\n+  #pragma omp parallel\n+  s.foo (x);\n+  if (x != 1010 || s.s != 1012 || s.t != 1023)\n+    abort ();\n+  s.baz (x);\n+  if (x != 959 || s.s != 974 || s.t != 977)\n+    abort ();\n+}"}, {"sha": "742ef2151db186d0fc387d68e9343b00de7aeeef", "filename": "libgomp/testsuite/libgomp.c++/lastprivate-conditional-2.C", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28b3a77ca055b31aa20c6d263be42c49be32756b/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Flastprivate-conditional-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28b3a77ca055b31aa20c6d263be42c49be32756b/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Flastprivate-conditional-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Flastprivate-conditional-2.C?ref=28b3a77ca055b31aa20c6d263be42c49be32756b", "patch": "@@ -0,0 +1,104 @@\n+extern \"C\" void abort ();\n+int w;\n+struct S {\n+  int s, &t;\n+  int *p;\n+  S (int *x) : s (0), t (w), p(x) {};\n+  void foo (short &);\n+  void bar (short &);\n+  void baz (short &);\n+  void qux (short &);\n+};\n+\n+void\n+S::foo (short &x)\n+{\n+  #pragma omp simd lastprivate (conditional: x, s, t)\n+  for (int i = 0; i < 1025; ++i)\n+    {\n+      if (p[i])\n+\tx = i;\n+      if (p[i + 1025])\n+\ts = i + 3;\n+      if (p[i + 2 * 1025])\n+\tt = i + 6;\n+    }\n+}\n+\n+void\n+S::bar (short &x)\n+{\n+  #pragma omp simd lastprivate (conditional: x, s, t) collapse (3) if (0)\n+  for (int i = 0; i < 15; ++i)\n+    for (int j = -4; j < 9; j++)\n+      for (int k = 12; k > 7; --k)\n+\t{\n+\t  int l = (k - 8) + (j + 4) * 5 + i * 13 * 5;\n+\t  if (p[l])\n+\t    x = l;\n+\t  if (p[l + 1025])\n+\t    s = l + 3;\n+\t  if (p[l + 1025 * 2])\n+\t    t = l + 6;\n+\t}\n+}\n+\n+void\n+S::baz (short &x)\n+{\n+  #pragma omp parallel for simd lastprivate (conditional: x, s, t) if (simd: 0)\n+  for (int i = 0; i < 1025; ++i)\n+    {\n+      if (p[i])\n+\tx = i;\n+      if (p[i + 1025])\n+\ts = i + 3;\n+      if (p[i + 2 * 1025])\n+\tt = i + 6;\n+    }\n+}\n+\n+void\n+S::qux (short &x)\n+{\n+  #pragma omp for simd lastprivate (conditional: x, s, t) collapse (3) schedule (simd: guided, 8)\n+  for (int i = 0; i < 15; ++i)\n+    for (int j = -4; j < 9; j++)\n+      for (int k = 12; k > 7; --k)\n+\t{\n+\t  int l = (k - 8) + (j + 4) * 5 + i * 13 * 5;\n+\t  if (p[l])\n+\t    x = l;\n+\t  if (p[l + 1025])\n+\t    s = l + 3;\n+\t  if (p[l + 1025 * 2])\n+\t    t = l + 6;\n+\t}\n+}\n+\n+int\n+main ()\n+{\n+  short x;\n+  int a[3 * 1025];\n+  for (int i = 0; i < 1025; ++i)\n+    {\n+      a[i] = ((i % 17) == 7);\n+      a[1025 + i] = ((i % 19) == 2);\n+      a[2 * 1025 + i] = ((i % 23) == 5);\n+    }\n+  S s = a;\n+  s.foo (x);\n+  if (x != 1010 || s.s != 1012 || s.t != 1023)\n+    abort ();\n+  s.bar (x);\n+  if (x != 959 || s.s != 974 || s.t != 977)\n+    abort ();\n+  #pragma omp parallel\n+  s.baz (x);\n+  if (x != 1010 || s.s != 1012 || s.t != 1023)\n+    abort ();\n+  s.qux (x);\n+  if (x != 959 || s.s != 974 || s.t != 977)\n+    abort ();\n+}"}]}