{"sha": "6f99ef82f1457d2f71121853ef2f006d0800bd19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5OWVmODJmMTQ1N2QyZjcxMTIxODUzZWYyZjAwNmQwODAwYmQxOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2016-06-22T15:12:39Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2016-06-22T15:12:39Z"}, "message": "dwarf2out.c (scompare_loc_descriptor): Use SCALAR_INT_MODE_P() in place of GET_MODE_CLASS() == MODE_INT...\n\n\t* dwarf2out.c (scompare_loc_descriptor): Use SCALAR_INT_MODE_P() in\n\tplace of GET_MODE_CLASS() == MODE_INT, so that partial integer\n\tmodes are accepted as well.\n\t(ucompare_loc_descriptor): Likewise.\n\t(minmax_loc_descriptor): Likewise.\n\t(clz_loc_descriptor): Likewise.\n\t(popcount_loc_descriptor): Likewise.\n\t(bswap_loc_descriptor): Likewise.\n\t(rotate_loc_descriptor): Likewise.\n\t(mem_loc_descriptor): Likewise.\n\t(loc_descriptor): Likewise.\n\nFrom-SVN: r237713", "tree": {"sha": "97cf48e51fb34a920570746a4a6300d902140526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97cf48e51fb34a920570746a4a6300d902140526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f99ef82f1457d2f71121853ef2f006d0800bd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f99ef82f1457d2f71121853ef2f006d0800bd19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f99ef82f1457d2f71121853ef2f006d0800bd19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f99ef82f1457d2f71121853ef2f006d0800bd19/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a93eac6a845d79a77646068b98cbd90a9be7b58a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a93eac6a845d79a77646068b98cbd90a9be7b58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a93eac6a845d79a77646068b98cbd90a9be7b58a"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "b30caadbfb7789672d4e7ff7421e62263bb09068", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f99ef82f1457d2f71121853ef2f006d0800bd19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f99ef82f1457d2f71121853ef2f006d0800bd19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f99ef82f1457d2f71121853ef2f006d0800bd19", "patch": "@@ -1,3 +1,17 @@\n+2016-06-22  Nick Clifton  <nickc@redhat.com>\n+\n+\t* dwarf2out.c (scompare_loc_descriptor): Use SCALAR_INT_MODE_P() in\n+\tplace of GET_MODE_CLASS() == MODE_INT, so that partial integer\n+\tmodes are accepted as well.\n+\t(ucompare_loc_descriptor): Likewise.\n+\t(minmax_loc_descriptor): Likewise.\n+\t(clz_loc_descriptor): Likewise.\n+\t(popcount_loc_descriptor): Likewise.\n+\t(bswap_loc_descriptor): Likewise.\n+\t(rotate_loc_descriptor): Likewise.\n+\t(mem_loc_descriptor): Likewise.\n+\t(loc_descriptor): Likewise.\n+\n 2016-06-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* common.opt (fdiagnostics-parseable-fixits): New option."}, {"sha": "14dcdf91a57d47d05fac9f7251be6362b204eae6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 37, "deletions": 41, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f99ef82f1457d2f71121853ef2f006d0800bd19/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f99ef82f1457d2f71121853ef2f006d0800bd19/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6f99ef82f1457d2f71121853ef2f006d0800bd19", "patch": "@@ -12605,7 +12605,7 @@ scompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n     return NULL;\n \n   if (dwarf_strict\n-      && (GET_MODE_CLASS (op_mode) != MODE_INT\n+      && (!SCALAR_INT_MODE_P (op_mode)\n \t  || GET_MODE_SIZE (op_mode) > DWARF2_ADDR_SIZE))\n     return NULL;\n \n@@ -12617,7 +12617,7 @@ scompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n   if (op0 == NULL || op1 == NULL)\n     return NULL;\n \n-  if (GET_MODE_CLASS (op_mode) != MODE_INT\n+  if (!SCALAR_INT_MODE_P (op_mode)\n       || GET_MODE_SIZE (op_mode) == DWARF2_ADDR_SIZE)\n     return compare_loc_descriptor (op, op0, op1);\n \n@@ -12712,7 +12712,7 @@ ucompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n     op_mode = GET_MODE (XEXP (rtl, 1));\n   if (op_mode == VOIDmode)\n     return NULL;\n-  if (GET_MODE_CLASS (op_mode) != MODE_INT)\n+  if (!SCALAR_INT_MODE_P (op_mode))\n     return NULL;\n \n   if (dwarf_strict && GET_MODE_SIZE (op_mode) > DWARF2_ADDR_SIZE)\n@@ -12779,7 +12779,7 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n   dw_loc_descr_ref bra_node, drop_node;\n \n   if (dwarf_strict\n-      && (GET_MODE_CLASS (mode) != MODE_INT\n+      && (!SCALAR_INT_MODE_P (mode)\n \t  || GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE))\n     return NULL;\n \n@@ -12812,7 +12812,7 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n \t  add_loc_descr (&op1, new_loc_descr (DW_OP_plus_uconst, bias, 0));\n \t}\n     }\n-  else if (GET_MODE_CLASS (mode) == MODE_INT\n+  else if (!SCALAR_INT_MODE_P (mode)\n \t   && GET_MODE_SIZE (mode) < DWARF2_ADDR_SIZE)\n     {\n       int shift = (DWARF2_ADDR_SIZE - GET_MODE_SIZE (mode)) * BITS_PER_UNIT;\n@@ -12821,7 +12821,7 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n       add_loc_descr (&op1, int_loc_descriptor (shift));\n       add_loc_descr (&op1, new_loc_descr (DW_OP_shl, 0, 0));\n     }\n-  else if (GET_MODE_CLASS (mode) == MODE_INT\n+  else if (SCALAR_INT_MODE_P (mode)\n \t   && GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE)\n     {\n       dw_die_ref type_die = base_type_for_mode (mode, 0);\n@@ -12855,7 +12855,7 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n   bra_node->dw_loc_oprnd1.val_class = dw_val_class_loc;\n   bra_node->dw_loc_oprnd1.v.val_loc = drop_node;\n   if ((GET_CODE (rtl) == SMIN || GET_CODE (rtl) == SMAX)\n-      && GET_MODE_CLASS (mode) == MODE_INT\n+      && SCALAR_INT_MODE_P (mode)\n       && GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE)\n     ret = convert_descriptor_to_mode (mode, ret);\n   return ret;\n@@ -12934,7 +12934,7 @@ clz_loc_descriptor (rtx rtl, machine_mode mode,\n   dw_loc_descr_ref l4jump, l4label;\n   rtx msb;\n \n-  if (GET_MODE_CLASS (mode) != MODE_INT\n+  if (!SCALAR_INT_MODE_P (mode)\n       || GET_MODE (XEXP (rtl, 0)) != mode)\n     return NULL;\n \n@@ -13042,7 +13042,7 @@ popcount_loc_descriptor (rtx rtl, machine_mode mode,\n   dw_loc_descr_ref l1jump, l1label;\n   dw_loc_descr_ref l2jump, l2label;\n \n-  if (GET_MODE_CLASS (mode) != MODE_INT\n+  if (!SCALAR_INT_MODE_P (mode)\n       || GET_MODE (XEXP (rtl, 0)) != mode)\n     return NULL;\n \n@@ -13103,7 +13103,7 @@ bswap_loc_descriptor (rtx rtl, machine_mode mode,\n   dw_loc_descr_ref l1jump, l1label;\n   dw_loc_descr_ref l2jump, l2label;\n \n-  if (GET_MODE_CLASS (mode) != MODE_INT\n+  if (!SCALAR_INT_MODE_P (mode)\n       || BITS_PER_UNIT != 8\n       || (GET_MODE_BITSIZE (mode) != 32\n \t  &&  GET_MODE_BITSIZE (mode) != 64))\n@@ -13188,7 +13188,7 @@ rotate_loc_descriptor (rtx rtl, machine_mode mode,\n   dw_loc_descr_ref op0, op1, ret, mask[2] = { NULL, NULL };\n   int i;\n \n-  if (GET_MODE_CLASS (mode) != MODE_INT)\n+  if (!SCALAR_INT_MODE_P (mode))\n     return NULL;\n \n   if (GET_MODE (rtlop1) != VOIDmode\n@@ -13337,8 +13337,8 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n     case TRUNCATE:\n       if (inner == NULL_RTX)\n         inner = XEXP (rtl, 0);\n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && GET_MODE_CLASS (GET_MODE (inner)) == MODE_INT\n+      if (SCALAR_INT_MODE_P (mode)\n+\t  && SCALAR_INT_MODE_P (GET_MODE (inner))\n \t  && (GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t      || (mode == Pmode && mem_mode != VOIDmode)\n@@ -13356,8 +13356,8 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (inner)))\n \tbreak;\n       if (GET_MODE_SIZE (mode) != GET_MODE_SIZE (GET_MODE (inner))\n-\t  && (GET_MODE_CLASS (mode) != MODE_INT\n-\t      || GET_MODE_CLASS (GET_MODE (inner)) != MODE_INT))\n+\t  && (!SCALAR_INT_MODE_P (mode)\n+\t      || !SCALAR_INT_MODE_P (GET_MODE (inner))))\n \tbreak;\n       else\n \t{\n@@ -13369,8 +13369,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t\t       mem_mode, initialized);\n \t  if (mem_loc_result == NULL)\n \t    break;\n-\t  type_die = base_type_for_mode (mode,\n-\t\t\t\t\t GET_MODE_CLASS (mode) == MODE_INT);\n+\t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    {\n \t      mem_loc_result = NULL;\n@@ -13385,7 +13384,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  add_loc_descr (&mem_loc_result, cvt);\n-\t  if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  if (SCALAR_INT_MODE_P (mode)\n \t      && GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE)\n \t    {\n \t      /* Convert it to untyped afterwards.  */\n@@ -13396,7 +13395,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       break;\n \n     case REG:\n-      if (GET_MODE_CLASS (mode) != MODE_INT\n+      if (! SCALAR_INT_MODE_P (mode)\n \t  || (GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE\n \t      && rtl != arg_pointer_rtx\n \t      && rtl != frame_pointer_rtx\n@@ -13412,15 +13411,14 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t    break;\n \t  if (REGNO (rtl) > FIRST_PSEUDO_REGISTER)\n \t    break;\n-\t  type_die = base_type_for_mode (mode,\n-\t\t\t\t\t GET_MODE_CLASS (mode) == MODE_INT);\n+\t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    break;\n \n \t  dbx_regnum = dbx_reg_number (rtl);\n \t  if (dbx_regnum == IGNORED_DWARF_REGNUM)\n \t    break;\n-\t  mem_loc_result = new_loc_descr (DW_OP_GNU_regval_type,\n+          mem_loc_result = new_loc_descr (DW_OP_GNU_regval_type,\n \t\t\t\t\t  dbx_regnum, 0);\n \t  mem_loc_result->dw_loc_oprnd2.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd2.v.val_die_ref.die = type_die;\n@@ -13456,7 +13454,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \n     case SIGN_EXTEND:\n     case ZERO_EXTEND:\n-      if (GET_MODE_CLASS (mode) != MODE_INT)\n+      if (!SCALAR_INT_MODE_P (mode))\n \tbreak;\n       op0 = mem_loc_descriptor (XEXP (rtl, 0), GET_MODE (XEXP (rtl, 0)),\n \t\t\t\tmem_mode, VAR_INIT_STATUS_INITIALIZED);\n@@ -13537,15 +13535,15 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       if (mem_loc_result != NULL)\n \t{\n \t  if (GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE\n-\t      || GET_MODE_CLASS (mode) != MODE_INT)\n+\t      || !SCALAR_INT_MODE_P(mode))\n \t    {\n \t      dw_die_ref type_die;\n \t      dw_loc_descr_ref deref;\n \n \t      if (dwarf_strict)\n \t\treturn NULL;\n \t      type_die\n-\t\t= base_type_for_mode (mode, GET_MODE_CLASS (mode) == MODE_INT);\n+\t\t= base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t      if (type_die == NULL)\n \t\treturn NULL;\n \t      deref = new_loc_descr (DW_OP_GNU_deref_type,\n@@ -13573,8 +13571,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t pool.  */\n     case CONST:\n     case SYMBOL_REF:\n-      if ((GET_MODE_CLASS (mode) != MODE_INT\n-\t   && GET_MODE_CLASS (mode) != MODE_PARTIAL_INT)\n+      if (!SCALAR_INT_MODE_P (mode)\n \t  || (GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t      && (mode != Pmode || mem_mode == VOIDmode)\n@@ -13624,7 +13621,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \treturn NULL;\n       if (REG_P (ENTRY_VALUE_EXP (rtl)))\n \t{\n-\t  if (GET_MODE_CLASS (mode) != MODE_INT\n+\t  if (!SCALAR_INT_MODE_P (mode)\n \t      || GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE)\n \t    op0 = mem_loc_descriptor (ENTRY_VALUE_EXP (rtl), mode,\n \t\t\t\t      VOIDmode, VAR_INIT_STATUS_INITIALIZED);\n@@ -13682,7 +13679,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  && (GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE\n \t      || XEXP (rtl, 0) == arg_pointer_rtx\n \t      || XEXP (rtl, 0) == frame_pointer_rtx)\n-\t  && GET_MODE_CLASS (mode) == MODE_INT)\n+\t  && SCALAR_INT_MODE_P (mode))\n \tmem_loc_result = based_loc_descr (XEXP (rtl, 0),\n \t\t\t\t\t  INTVAL (XEXP (rtl, 1)),\n \t\t\t\t\t  VAR_INIT_STATUS_INITIALIZED);\n@@ -13721,7 +13718,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \n     case DIV:\n       if (!dwarf_strict\n-\t  && GET_MODE_CLASS (mode) == MODE_INT\n+\t  && SCALAR_INT_MODE_P (mode)\n \t  && GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE)\n \t{\n \t  mem_loc_result = typed_binop (DW_OP_div, rtl,\n@@ -13749,7 +13746,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       goto do_shift;\n \n     do_shift:\n-      if (GET_MODE_CLASS (mode) != MODE_INT)\n+      if (!SCALAR_INT_MODE_P (mode))\n \tbreak;\n       op0 = mem_loc_descriptor (XEXP (rtl, 0), mode, mem_mode,\n \t\t\t\tVAR_INIT_STATUS_INITIALIZED);\n@@ -13824,7 +13821,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       break;\n \n     case UDIV:\n-      if (!dwarf_strict && GET_MODE_CLASS (mode) == MODE_INT)\n+      if (!dwarf_strict && SCALAR_INT_MODE_P (mode))\n \t{\n \t  if (GET_MODE_CLASS (mode) > DWARF2_ADDR_SIZE)\n \t    {\n@@ -13932,8 +13929,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t      || (GET_MODE (rtl) == VOIDmode\n \t\t  && GET_MODE_BITSIZE (mode) != HOST_BITS_PER_DOUBLE_INT))\n \t    break;\n-\t  type_die = base_type_for_mode (mode,\n-\t\t\t\t\t GET_MODE_CLASS (mode) == MODE_INT);\n+\t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    return NULL;\n \t  mem_loc_result = new_loc_descr (DW_OP_GNU_const_type, 0, 0);\n@@ -13968,8 +13964,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t{\n \t  dw_die_ref type_die;\n \n-\t  type_die = base_type_for_mode (mode,\n-\t\t\t\t\t GET_MODE_CLASS (mode) == MODE_INT);\n+\t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    return NULL;\n \t  mem_loc_result = new_loc_descr (DW_OP_GNU_const_type, 0, 0);\n@@ -14025,7 +14020,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \n     case UMIN:\n     case UMAX:\n-      if (GET_MODE_CLASS (mode) != MODE_INT)\n+      if (!SCALAR_INT_MODE_P (mode))\n \tbreak;\n       /* FALLTHRU */\n     case SMIN:\n@@ -14040,7 +14035,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  && ((unsigned) INTVAL (XEXP (rtl, 1))\n \t      + (unsigned) INTVAL (XEXP (rtl, 2))\n \t      <= GET_MODE_BITSIZE (mode))\n-\t  && GET_MODE_CLASS (mode) == MODE_INT\n+\t  && SCALAR_INT_MODE_P (mode)\n \t  && GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE\n \t  && GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0))) <= DWARF2_ADDR_SIZE)\n \t{\n@@ -14117,7 +14112,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t    mem_mode, VAR_INIT_STATUS_INITIALIZED);\n \t  if (op0 == NULL)\n \t    break;\n-\t  if (GET_MODE_CLASS (GET_MODE (XEXP (rtl, 0))) == MODE_INT\n+\t  if (SCALAR_INT_MODE_P (GET_MODE (XEXP (rtl, 0)))\n \t      && (GET_CODE (rtl) == FLOAT\n \t\t  || GET_MODE_SIZE (GET_MODE (XEXP (rtl, 0)))\n \t\t     <= DWARF2_ADDR_SIZE))\n@@ -14140,7 +14135,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  add_loc_descr (&op0, cvt);\n-\t  if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  if (SCALAR_INT_MODE_P (mode)\n \t      && (GET_CODE (rtl) == FIX\n \t\t  || GET_MODE_SIZE (mode) < DWARF2_ADDR_SIZE))\n \t    {\n@@ -14570,7 +14565,8 @@ loc_descriptor (rtx rtl, machine_mode mode,\n       /* FALLTHRU */\n     do_default:\n     default:\n-      if ((GET_MODE_CLASS (mode) == MODE_INT && GET_MODE (rtl) == mode\n+      if ((SCALAR_INT_MODE_P (mode)\n+\t   && GET_MODE (rtl) == mode\n \t   && GET_MODE_SIZE (GET_MODE (rtl)) <= DWARF2_ADDR_SIZE\n \t   && dwarf_version >= 4)\n \t  || (!dwarf_strict && mode != VOIDmode && mode != BLKmode))"}]}