{"sha": "6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmY2ZlMGE4MDgwY2YzODE2ZTg0MWYwZjFjMmI5NmE3M2JhZWQ0Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-03-23T21:03:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-03-23T21:03:01Z"}, "message": "pt.c (make_fnparm_pack): Split out from...\n\n        * gcc/cp/pt.c (make_fnparm_pack): Split out from...\n        (instantiate_decl): ...here.\n        (tsubst_pack_expansion): Handle being called in a late-specified\n        return type.\n        * libiberty/cp-demangle.c (d_expression): Handle pack expansion.\n        (d_find_pack): Handle DEMANGLE_COMPONENT_FUNCTION_PARAM.\n        (d_print_subexpr): Don't wrap function parms in ().\n        (d_print_comp) [DEMANGLE_COMPONENT_PACK_EXPANSION]: Handle\n        not finding a pack.\n\nFrom-SVN: r145013", "tree": {"sha": "ea6d54ba1fb63d8cc661d04df277796e02ed2ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea6d54ba1fb63d8cc661d04df277796e02ed2ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ab282f65064d9d22b04a89b0958fefbec50ebc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab282f65064d9d22b04a89b0958fefbec50ebc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab282f65064d9d22b04a89b0958fefbec50ebc3"}], "stats": {"total": 154, "additions": 119, "deletions": 35}, "files": [{"sha": "e9e424d28fccf98dfe82b781868d5e5df16df5ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -1,5 +1,10 @@\n 2009-03-23  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (make_fnparm_pack): Split out from...\n+\t(instantiate_decl): ...here.\n+\t(tsubst_pack_expansion): Handle being called in a late-specified\n+\treturn type.\n+\n \tPR c++/39526\n \t* name-lookup.c (pushdecl_maybe_friend): Don't warn about shadowing\n \ta parm with a parm."}, {"sha": "5092c72b17749d69d741cf3e147b2d96dc8f688c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 65, "deletions": 29, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -174,6 +174,7 @@ static tree tsubst (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_expr\t(tree, tree, tsubst_flags_t, tree, bool);\n static tree tsubst_copy\t(tree, tree, tsubst_flags_t, tree);\n static tree tsubst_pack_expansion (tree, tree, tsubst_flags_t, tree);\n+static tree tsubst_decl (tree, tree, tsubst_flags_t);\n \n /* Make the current scope suitable for access checking when we are\n    processing T.  T can be FUNCTION_DECL for instantiated function\n@@ -7435,6 +7436,37 @@ tsubst_template_arg (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   return r;\n }\n \n+/* Give a chain SPEC_PARM of PARM_DECLs, pack them into a\n+   NONTYPE_ARGUMENT_PACK.  */\n+\n+static tree\n+make_fnparm_pack (tree spec_parm)\n+{\n+  /* Collect all of the extra \"packed\" parameters into an\n+     argument pack.  */\n+  tree parmvec;\n+  tree parmtypevec;\n+  tree argpack = make_node (NONTYPE_ARGUMENT_PACK);\n+  tree argtypepack = make_node (TYPE_ARGUMENT_PACK);\n+  int i, len = list_length (spec_parm);\n+\n+  /* Fill in PARMVEC and PARMTYPEVEC with all of the parameters.  */\n+  parmvec = make_tree_vec (len);\n+  parmtypevec = make_tree_vec (len);\n+  for (i = 0; i < len; i++, spec_parm = TREE_CHAIN (spec_parm))\n+    {\n+      TREE_VEC_ELT (parmvec, i) = spec_parm;\n+      TREE_VEC_ELT (parmtypevec, i) = TREE_TYPE (spec_parm);\n+    }\n+\n+  /* Build the argument packs.  */\n+  SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n+  SET_ARGUMENT_PACK_ARGS (argtypepack, parmtypevec);\n+  TREE_TYPE (argpack) = argtypepack;\n+\n+  return argpack;\n+}        \n+\n /* Substitute ARGS into T, which is an pack expansion\n    (i.e. TYPE_PACK_EXPANSION or EXPR_PACK_EXPANSION). Returns a\n    TREE_VEC with the substituted arguments, a PACK_EXPANSION_* node\n@@ -7449,6 +7481,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   tree first_arg_pack; int i, len = -1;\n   tree result;\n   int incomplete = 0;\n+  bool very_local_specializations = false;\n \n   gcc_assert (PACK_EXPANSION_P (t));\n   pattern = PACK_EXPANSION_PATTERN (t);\n@@ -7465,7 +7498,18 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n       tree orig_arg = NULL_TREE;\n \n       if (TREE_CODE (parm_pack) == PARM_DECL)\n-\targ_pack = retrieve_local_specialization (parm_pack);\n+\t{\n+\t  arg_pack = retrieve_local_specialization (parm_pack);\n+\t  if (arg_pack == NULL_TREE)\n+\t    {\n+\t      /* This can happen for a parameter name used later in a function\n+\t\t declaration (such as in a late-specified return type).  Just\n+\t\t make a dummy decl, since it's only used for its type.  */\n+\t      gcc_assert (skip_evaluation);\n+\t      arg_pack = tsubst_decl (parm_pack, args, complain);\n+\t      arg_pack = make_fnparm_pack (arg_pack);\n+\t    }\n+\t}\n       else\n         {\n           int level, idx, levels;\n@@ -7559,6 +7603,17 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n   if (len < 0)\n     return error_mark_node;\n \n+  if (!local_specializations)\n+    {\n+      /* We're in a late-specified return type, so we don't have a local\n+\t specializations table.  Create one for doing this expansion.  */\n+      very_local_specializations = true;\n+      local_specializations = htab_create (37,\n+\t\t\t\t\t   hash_local_specialization,\n+\t\t\t\t\t   eq_local_specializations,\n+\t\t\t\t\t   NULL);\n+    }\n+\n   /* For each argument in each argument pack, substitute into the\n      pattern.  */\n   result = make_tree_vec (len + incomplete);\n@@ -7620,7 +7675,7 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n \t  break;\n \t}\n     }\n-  \n+\n   /* Update ARGS to restore the substitution from parameter packs to\n      their argument packs.  */\n   for (pack = packs; pack; pack = TREE_CHAIN (pack))\n@@ -7643,6 +7698,12 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n         }\n     }\n \n+  if (very_local_specializations)\n+    {\n+      htab_delete (local_specializations);\n+      local_specializations = NULL;\n+    }\n+  \n   return result;\n }\n \n@@ -15477,37 +15538,12 @@ instantiate_decl (tree d, int defer_ok,\n \t}\n       if (tmpl_parm && FUNCTION_PARAMETER_PACK_P (tmpl_parm))\n         {\n-          /* Collect all of the extra \"packed\" parameters into an\n-             argument pack.  */\n-          tree parmvec;\n-          tree parmtypevec;\n-          tree argpack = make_node (NONTYPE_ARGUMENT_PACK);\n-          tree argtypepack = make_node (TYPE_ARGUMENT_PACK);\n-          int i, len = 0;\n-          tree t;\n-          \n-          /* Count how many parameters remain.  */\n-          for (t = spec_parm; t; t = TREE_CHAIN (t))\n-            len++;\n-\n-          /* Fill in PARMVEC and PARMTYPEVEC with all of the parameters.  */\n-          parmvec = make_tree_vec (len);\n-          parmtypevec = make_tree_vec (len);\n-          for(i = 0; i < len; i++, spec_parm = TREE_CHAIN (spec_parm))\n-            {\n-              TREE_VEC_ELT (parmvec, i) = spec_parm;\n-              TREE_VEC_ELT (parmtypevec, i) = TREE_TYPE (spec_parm);\n-            }\n-\n-          /* Build the argument packs.  */\n-          SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n-          SET_ARGUMENT_PACK_ARGS (argtypepack, parmtypevec);\n-          TREE_TYPE (argpack) = argtypepack;\n-          \n           /* Register the (value) argument pack as a specialization of\n              TMPL_PARM, then move on.  */\n+\t  tree argpack = make_fnparm_pack (spec_parm);\n           register_local_specialization (argpack, tmpl_parm);\n           tmpl_parm = TREE_CHAIN (tmpl_parm);\n+\t  spec_parm = NULL_TREE;\n         }\n       gcc_assert (!spec_parm);\n "}, {"sha": "40205fa7dae04f76c131265d1d2a3c5d38edc39c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -1,5 +1,7 @@\n 2009-03-23  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/auto12.C: Add variadic test.\n+\t\n \tPR c++/39526\n \t* g++.dg/warn/Wshadow-4.C: New test.\n "}, {"sha": "34dc8c90b84f3c6f816bd6e8afcb68a21cd59d16", "filename": "gcc/testsuite/g++.dg/cpp0x/auto12.C", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto12.C?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -35,6 +35,15 @@ auto A<T>::f(U u) -> decltype (u + i)\n   return u + i;\n }\n \n+template <class... Args>\n+int f (Args... args);\n+\n+template <class... Args>\n+auto g (Args... args) -> decltype (f ((args+1)...))\n+{\n+  return (f ((args+1)...));\n+}\n+\n int main()\n {\n   // { dg-final { scan-assembler  \"_ZN1AIiE1fIiEEDTplfp_L_ZNS0_1iEEET_\" } }\n@@ -49,4 +58,6 @@ int main()\n   A<int>().h(1);\n   // { dg-final { scan-assembler  \"_ZN1AIiE1jIiEEDTplfp_clL_Z1xvEEET_\" } }\n   A<int>().j(1);\n+  // { dg-final { scan-assembler  \"_Z1gIIidEEDTclL_Z1fEspplfp_Li1EEEDpT_\" } }  \n+  g(42, 1.0);\n }"}, {"sha": "a15a86005ff9a60ce4620e0f2d7d888dcaa9f6e4", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -1,3 +1,11 @@\n+2009-03-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (d_expression): Handle pack expansion.\n+\t(d_find_pack): Handle DEMANGLE_COMPONENT_FUNCTION_PARAM.\n+\t(d_print_subexpr): Don't wrap function parms in ().\n+\t(d_print_comp) [DEMANGLE_COMPONENT_PACK_EXPANSION]: Handle\n+\tnot finding a pack.\n+\n 2009-03-17  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_make_function_param): new fn."}, {"sha": "b02f9bbf97e6c6fdab3ed6e3cf6e3d4eaeff99e7", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -2586,6 +2586,12 @@ d_expression (struct d_info *di)\n \t\t\t    d_make_comp (di, DEMANGLE_COMPONENT_TEMPLATE, name,\n \t\t\t\t\t d_template_args (di)));\n     }\n+  else if (peek == 's' && d_peek_next_char (di) == 'p')\n+    {\n+      d_advance (di, 2);\n+      return d_make_comp (di, DEMANGLE_COMPONENT_PACK_EXPANSION,\n+\t\t\t  d_expression (di), NULL);\n+    }\n   else if (peek == 'f' && d_peek_next_char (di) == 'p')\n     {\n       /* Function parameter used in a late-specified return type.  */\n@@ -3244,6 +3250,7 @@ d_find_pack (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_BUILTIN_TYPE:\n     case DEMANGLE_COMPONENT_SUB_STD:\n     case DEMANGLE_COMPONENT_CHARACTER:\n+    case DEMANGLE_COMPONENT_FUNCTION_PARAM:\n       return NULL;\n \n     case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n@@ -3284,7 +3291,8 @@ d_print_subexpr (struct d_print_info *dpi,\n \t\t const struct demangle_component *dc)\n {\n   int simple = 0;\n-  if (dc->type == DEMANGLE_COMPONENT_NAME)\n+  if (dc->type == DEMANGLE_COMPONENT_NAME\n+      || dc->type == DEMANGLE_COMPONENT_FUNCTION_PARAM)\n     simple = 1;\n   if (!simple)\n     d_append_char (dpi, '(');\n@@ -4012,10 +4020,20 @@ d_print_comp (struct d_print_info *dpi,\n \n     case DEMANGLE_COMPONENT_PACK_EXPANSION:\n       {\n-\tstruct demangle_component *a = d_find_pack (dpi, d_left (dc));\n-\tint len = d_pack_length (a);\n+\tint len;\n \tint i;\n+\tstruct demangle_component *a = d_find_pack (dpi, d_left (dc));\n+\tif (a == NULL)\n+\t  {\n+\t    /* d_find_pack won't find anything if the only packs involved\n+\t       in this expansion are function parameter packs; in that\n+\t       case, just print the pattern and \"...\".  */\n+\t    d_print_subexpr (dpi, d_left (dc));\n+\t    d_append_string (dpi, \"...\");\n+\t    return;\n+\t  }\n \n+\tlen = d_pack_length (a);\n \tdc = d_left (dc);\n \tfor (i = 0; i < len; ++i)\n \t  {"}, {"sha": "0c451184fc4c0d387ae132238099f8432d20f0f7", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6afcfe0a8080cf3816e841f0f1c2b96a73baed43/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=6afcfe0a8080cf3816e841f0f1c2b96a73baed43", "patch": "@@ -3885,7 +3885,7 @@ java resource java/util/iso4217.properties\n # decltype/param placeholder test\n --format=gnu-v3\n _Z3addIidEDTplfp_fp0_ET_T0_\n-decltype ((parm#1)+(parm#2)) add<int, double>(int, double)\n+decltype (parm#1+parm#2) add<int, double>(int, double)\n # decltype/fn call test\n --format=gnu-v3\n _Z4add3IidEDTclL_Z1gEfp_fp0_EET_T0_\n@@ -3901,8 +3901,12 @@ void f<int*, float*, double*>(int*, float*, double*)\n # '.' test\n --format=gnu-v3\n _Z1hI1AIiEdEDTcldtfp_1gIT0_EEET_S2_\n-decltype (((parm#1).(g<double>))()) h<A<int>, double>(A<int>, double)\n+decltype ((parm#1.(g<double>))()) h<A<int>, double>(A<int>, double)\n # test for typed function in decltype\n --format=gnu-v3\n _ZN1AIiE1jIiEEDTplfp_clL_Z1xvEEET_\n-decltype ((parm#1)+((x())())) A<int>::j<int>(int)\n+decltype (parm#1+((x())())) A<int>::j<int>(int)\n+# test for expansion of function parameter pack\n+--format=gnu-v3\n+_Z1gIIidEEDTclL_Z1fEspplfp_Li1EEEDpT_\n+decltype (f((parm#1+(1))...)) g<int, double>(int, double)"}]}