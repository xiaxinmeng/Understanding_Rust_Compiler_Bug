{"sha": "a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlYTk0M2NiODQ5MzFlYWEwMDMwYWQ0OTM4NGQxNmQ4NmExZDJiNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-30T13:55:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-30T13:55:42Z"}, "message": "invoke.texi (-mveclibabi): Document new target option.\n\n2007-08-30  Richard Guenther  <rguenther@suse.de>\n\n\t* doc/invoke.texi (-mveclibabi): Document new target option.\n\t* config/i386/i386.opt (-mveclibabi): New target option.\n\t* config/i386/i386.c (ix86_veclib_handler): Handler for\n\tvectorization library support.\n\t(override_options): Handle the -mveclibabi option, initialize\n\tthe vectorization library handler.\n\t(ix86_builtin_vectorized_function): As fallback call the\n\tvectorization library handler, if set.\n\t(ix86_veclibabi_acml): New static function for ACML ABI style\n\tvectorization support.\n\n\t* gcc.target/i386/vectorize5.c: New testcase.\n\nFrom-SVN: r127926", "tree": {"sha": "624405eabf6cab524c22a25482d643632a4dddaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/624405eabf6cab524c22a25482d643632a4dddaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9f63ace2335dc9bf97cf853408d4070c11218af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9f63ace2335dc9bf97cf853408d4070c11218af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9f63ace2335dc9bf97cf853408d4070c11218af"}], "stats": {"total": 164, "additions": 159, "deletions": 5}, "files": [{"sha": "e5d5249c84b52d0ddd8063833c452196adf19acc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "patch": "@@ -1,3 +1,16 @@\n+2007-08-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* doc/invoke.texi (-mveclibabi): Document new target option.\n+\t* config/i386/i386.opt (-mveclibabi): New target option.\n+\t* config/i386/i386.c (ix86_veclib_handler): Handler for\n+\tvectorization library support.\n+\t(override_options): Handle the -mveclibabi option, initialize\n+\tthe vectorization library handler.\n+\t(ix86_builtin_vectorized_function): As fallback call the\n+\tvectorization library handler, if set.\n+\t(ix86_veclibabi_acml): New static function for ACML ABI style\n+\tvectorization support.\n+\n 2007-08-30  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_sync): For QI or HI mode"}, {"sha": "a98dcfb3cf6867d86dfc070f8232350c5cf3f38a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 107, "deletions": 4, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "patch": "@@ -1620,6 +1620,10 @@ static int ix86_isa_flags_explicit;\n \n #define OPTION_MASK_ISA_SSE4A_UNSET OPTION_MASK_ISA_SSE4\n \n+/* Vectorization library interface and handlers.  */\n+tree (*ix86_veclib_handler)(enum built_in_function, tree, tree) = NULL;\n+static tree ix86_veclibabi_acml (enum built_in_function, tree, tree);\n+\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n@@ -2409,6 +2413,16 @@ override_options (void)\n   if (!TARGET_80387)\n     target_flags &= ~MASK_FLOAT_RETURNS;\n \n+  /* Use external vectorized library in vectorizing intrinsics.  */\n+  if (ix86_veclibabi_string)\n+    {\n+      if (strcmp (ix86_veclibabi_string, \"acml\") == 0)\n+\tix86_veclib_handler = ix86_veclibabi_acml;\n+      else\n+\terror (\"unknown vectorization library ABI type (%s) for \"\n+\t       \"-mveclibabi= switch\", ix86_veclibabi_string);\n+    }\n+\n   if ((x86_accumulate_outgoing_args & ix86_tune_mask)\n       && !(target_flags_explicit & MASK_ACCUMULATE_OUTGOING_ARGS)\n       && !optimize_size)\n@@ -19934,33 +19948,122 @@ ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n       if (out_mode == DFmode && out_n == 2\n \t  && in_mode == DFmode && in_n == 2)\n \treturn ix86_builtins[IX86_BUILTIN_SQRTPD];\n-      return NULL_TREE;\n+      break;\n \n     case BUILT_IN_SQRTF:\n       if (out_mode == SFmode && out_n == 4\n \t  && in_mode == SFmode && in_n == 4)\n \treturn ix86_builtins[IX86_BUILTIN_SQRTPS];\n-      return NULL_TREE;\n+      break;\n \n     case BUILT_IN_LRINT:\n       if (out_mode == SImode && out_n == 4\n \t  && in_mode == DFmode && in_n == 2)\n \treturn ix86_builtins[IX86_BUILTIN_VEC_PACK_SFIX];\n-      return NULL_TREE;\n+      break;\n \n     case BUILT_IN_LRINTF:\n       if (out_mode == SImode && out_n == 4\n \t  && in_mode == SFmode && in_n == 4)\n \treturn ix86_builtins[IX86_BUILTIN_CVTPS2DQ];\n-      return NULL_TREE;\n+      break;\n \n     default:\n       ;\n     }\n \n+  /* Dispatch to a handler for a vectorization library.  */\n+  if (ix86_veclib_handler)\n+    return (*ix86_veclib_handler)(fn, type_out, type_in);\n+\n   return NULL_TREE;\n }\n \n+/* Handler for an ACML-style interface to a library with vectorized\n+   intrinsics.  */\n+\n+static tree\n+ix86_veclibabi_acml (enum built_in_function fn, tree type_out, tree type_in)\n+{\n+  char name[20] = \"__vr.._\";\n+  tree fntype, new_fndecl, args;\n+  unsigned arity;\n+  const char *bname;\n+  enum machine_mode el_mode, in_mode;\n+  int n, in_n;\n+\n+  /* The ACML is 64bits only and suitable for unsafe math only as\n+     it does not correctly support parts of IEEE with the required\n+     precision such as denormals.  */\n+  if (!TARGET_64BIT\n+      || !flag_unsafe_math_optimizations)\n+    return NULL_TREE;\n+\n+  el_mode = TYPE_MODE (TREE_TYPE (type_out));\n+  n = TYPE_VECTOR_SUBPARTS (type_out);\n+  in_mode = TYPE_MODE (TREE_TYPE (type_in));\n+  in_n = TYPE_VECTOR_SUBPARTS (type_in);\n+  if (el_mode != in_mode\n+      || n != in_n)\n+    return NULL_TREE;\n+\n+  switch (fn)\n+    {\n+    case BUILT_IN_SIN:\n+    case BUILT_IN_COS:\n+    case BUILT_IN_EXP:\n+    case BUILT_IN_LOG:\n+    case BUILT_IN_LOG2:\n+    case BUILT_IN_LOG10:\n+      name[4] = 'd';\n+      name[5] = '2';\n+      if (el_mode != DFmode\n+\t  || n != 2)\n+\treturn NULL_TREE;\n+      break;\n+\n+    case BUILT_IN_SINF:\n+    case BUILT_IN_COSF:\n+    case BUILT_IN_EXPF:\n+    case BUILT_IN_POWF:\n+    case BUILT_IN_LOGF:\n+    case BUILT_IN_LOG2F:\n+    case BUILT_IN_LOG10F:\n+      name[4] = 's';\n+      name[5] = '4';\n+      if (el_mode != SFmode\n+\t  || n != 4)\n+\treturn NULL_TREE;\n+      break;\n+    \n+    default:\n+      return NULL_TREE;\n+    }\n+\n+  bname = IDENTIFIER_POINTER (DECL_NAME (implicit_built_in_decls[fn]));\n+  sprintf (name + 7, \"%s\", bname+10);\n+\n+  arity = 0;\n+  for (args = DECL_ARGUMENTS (implicit_built_in_decls[fn]); args;\n+       args = TREE_CHAIN (args))\n+    arity++;\n+\n+  if (arity == 1)\n+    fntype = build_function_type_list (type_out, type_in, NULL);\n+  else\n+    fntype = build_function_type_list (type_out, type_in, type_in, NULL);\n+\n+  /* Build a function declaration for the vectorized function.  */\n+  new_fndecl = build_decl (FUNCTION_DECL, get_identifier (name), fntype);\n+  TREE_PUBLIC (new_fndecl) = 1;\n+  DECL_EXTERNAL (new_fndecl) = 1;\n+  DECL_IS_NOVOPS (new_fndecl) = 1;\n+  TREE_READONLY (new_fndecl) = 1;\n+\n+  return new_fndecl;\n+}\n+\n+\n /* Returns a decl of a function that implements conversion of the\n    input vector of type TYPE, or NULL_TREE if it is not available.  */\n "}, {"sha": "f32193d26b1c750d1bbd60713ec863c57bd28891", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "patch": "@@ -182,6 +182,10 @@ mtune=\n Target RejectNegative Joined Var(ix86_tune_string)\n Schedule code for given CPU\n \n+mveclibabi=\n+Target RejectNegative Joined Var(ix86_veclibabi_string)\n+Vector library ABI to use\n+\n ;; ISA support\n \n m32"}, {"sha": "1646df305cb4f154ea3cf16b2728aeb59d614835", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "patch": "@@ -557,7 +557,7 @@ Objective-C and Objective-C++ Dialects}.\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n -m96bit-long-double  -mregparm=@var{num}  -msseregparm @gol\n--mpc32 -mpc64 -mpc80 mstackrealign @gol\n+-mveclibabi=@var{type} -mpc32 -mpc64 -mpc80 -mstackrealign @gol\n -momit-leaf-frame-pointer  -mno-red-zone -mno-tls-direct-seg-refs @gol\n -mcmodel=@var{code-model} @gol\n -m32  -m64 -mlarge-data-threshold=@var{num}}\n@@ -10440,6 +10440,19 @@ vectorized variants RCPPS and RSQRTPS) instead of DIVSS and SQRTSS (and their\n vectorized variants).  These instructions will be generated only when\n @option{-funsafe-math-optimizations} is enabled.\n \n+@item -mveclibabi=@var{type}\n+@opindex mveclibabi\n+Specifies the ABI type to use for vectorizing intrinsics using an\n+external library.  Supported types are @code{acml} for the AMD\n+math core library style of interfacing.  GCC will currently emit\n+calls to @code{__vrd2_sin}, @code{__vrd2_cos}, @code{__vrd2_exp},\n+@code{__vrd2_log}, @code{__vrd2_log2}, @code{__vrd2_log10},\n+@code{__vrs4_sinf}, @code{__vrs4_cosf}, @code{__vrs4_expf},\n+@code{__vrs4_logf}, @code{__vrs4_log2f}, @code{__vrs4_log10f}\n+and @code{__vrs4_powf} when using this type and @option{-ftree-vectorize}\n+is enabled.  A ACML ABI compatible library will have to be specified\n+at link time.\n+\n @item -mpush-args\n @itemx -mno-push-args\n @opindex mpush-args"}, {"sha": "476fc5f1962717a62bfff9b42f03177836fb3362", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "patch": "@@ -1,3 +1,7 @@\n+2007-08-30  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.target/i386/vectorize5.c: New testcase.\n+\n 2007-08-30  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/33228"}, {"sha": "38942404535e01daf8c93bb3a1fe1bf5f1408a5d", "filename": "gcc/testsuite/gcc.target/i386/vectorize5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5ea943cb84931eaa0030ad49384d16d86a1d2b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize5.c?ref=a5ea943cb84931eaa0030ad49384d16d86a1d2b5", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -ftree-vectorize -mveclibabi=acml -ffast-math\" } */\n+\n+double x[256];\n+\n+extern double sin(double);\n+\n+void foo(void)\n+{\n+  int i;\n+\n+  for (i=0; i<256; ++i)\n+    x[i] = sin(x[i]);\n+}\n+\n+/* { dg-final { scan-assembler \"__vrd2_sin\" } } */"}]}