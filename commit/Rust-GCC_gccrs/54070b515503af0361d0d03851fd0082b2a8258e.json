{"sha": "54070b515503af0361d0d03851fd0082b2a8258e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQwNzBiNTE1NTAzYWYwMzYxZDBkMDM4NTFmZDAwODJiMmE4MjU4ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-02T18:08:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-10-02T18:08:59Z"}, "message": "system.h (ROUND_UP): New macro definition.\n\n\t* system.h (ROUND_UP): New macro definition.\n\t(ROUND_DOWN): Ditto.\n\t* ggc-page.c (ROUND_UP): Remove local macro definition.\n\t(PAGE_ALIGN): Implement using ROUND_UP macro.\n\n\t* config/i386/i386.h (PUSH_ROUNDING): Implement using ROUND_UP macro.\n\t* config/i386/i386.c (function_arg_advance_64): Use ROUND_UP macro\n\tto align values.\n\t(ix86_compute_frame_layout): Ditto.\n\t(ix86_expand_prologue): Ditto.\n\t(ix86_adjust_stack_and_probe): Use ROUND_DOWN macro\n\tto round down values.\n\t(expand_set_or_movmem_via_rep): Ditto.\n\nFrom-SVN: r228410", "tree": {"sha": "630acfab2e4be97054b80106ff14ee5ae153ed14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/630acfab2e4be97054b80106ff14ee5ae153ed14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54070b515503af0361d0d03851fd0082b2a8258e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54070b515503af0361d0d03851fd0082b2a8258e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54070b515503af0361d0d03851fd0082b2a8258e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54070b515503af0361d0d03851fd0082b2a8258e/comments", "author": null, "committer": null, "parents": [{"sha": "1c7485afda66c17e00d3dcdce2ef9bf9106d3cda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c7485afda66c17e00d3dcdce2ef9bf9106d3cda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c7485afda66c17e00d3dcdce2ef9bf9106d3cda"}], "stats": {"total": 79, "additions": 47, "deletions": 32}, "files": [{"sha": "3f7561a0c57a225204f66ae049774338563d8289", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54070b515503af0361d0d03851fd0082b2a8258e", "patch": "@@ -1,3 +1,19 @@\n+2015-10-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* system.h (ROUND_UP): New macro definition.\n+\t(ROUND_DOWN): Ditto.\n+\t* ggc-page.c (ROUND_UP): Remove local macro definition.\n+\t(PAGE_ALIGN): Implement using ROUND_UP macro.\n+\n+\t* config/i386/i386.h (PUSH_ROUNDING): Implement using ROUND_UP macro.\n+\t* config/i386/i386.c (function_arg_advance_64): Use ROUND_UP macro\n+\tto align values.\n+\t(ix86_compute_frame_layout): Ditto.\n+\t(ix86_expand_prologue): Ditto.\n+\t(ix86_adjust_stack_and_probe): Use ROUND_DOWN macro\n+\tto round down values.\n+\t(expand_set_or_movmem_via_rep): Ditto.\n+\n 2015-10-02  Marek Polacek  <polacek@redhat.com>\n \n \t* genemit.c (gen_exp): Remove -Wduplicated-cond hack.\n@@ -188,7 +204,8 @@\n \tPR tree-optimization/67754\n \t* graphite-scop-detection.c (stmt_has_simple_data_refs_p): Call\n \tscev analysis on the same loop nest as analyze_drs_in_stmts.\n-\t* graphite-sese-to-poly.c (outermost_loop_in_sese_1): Moved and renamed...\n+\t* graphite-sese-to-poly.c (outermost_loop_in_sese_1): Moved and\n+\trenamed...\n \t(try_generate_gimple_bb): Call outermost_loop_in_sese.\n \t(analyze_drs_in_stmts): Same.\n \t* sese.c (outermost_loop_in_sese): ...here.\n@@ -232,8 +249,7 @@\n \n 2015-10-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t* config/i386/x86-tune.def (X86_TUNE_USE_BT): Enable for\n-\tLakemont.\n+\t* config/i386/x86-tune.def (X86_TUNE_USE_BT): Enable for Lakemont.\n \t(X86_TUNE_ZERO_EXTEND_WITH_AND): Disable for Lakemont.\n \n 2015-10-01  James Greenhalgh  <james.greenhalgh@arm.com>\n@@ -388,8 +404,7 @@\n \n \t* config/i386/intelmic-mkoffload.c (main): Parse \"-v\" flag.\n \t(generate_target_descr_file, generate_target_offloadend_file)\n-\t(generate_host_descr_file, prepare_target_image, main): Pass it\n-\ton.\n+\t(generate_host_descr_file, prepare_target_image, main): Pass it on.\n \t* config/nvptx/mkoffload.c (main): Parse \"-v\" flag.\n \t(compile_native, main): Pass it on.\n \t* lto-wrapper.c (compile_offload_image): Likewise.\n@@ -422,7 +437,7 @@\n \n 2015-09-30  Richard Biener  <rguenther@suse.de>\n \n-\t* builtins.c: Add comment that no new simplifications shouldd\n+\t* builtins.c: Add comment that no new simplifications should\n \tbe added here.\n \n 2015-09-30  Marek Polacek  <polacek@redhat.com>\n@@ -488,8 +503,7 @@\n \n \t* config/i386/t-interix (winnt-stubs.o): Fix compilation rule.\n \n-\t* config/sh/sh.c (gen_shl_and): Fix undefined left shift\n-\tbehaviour.\n+\t* config/sh/sh.c (gen_shl_and): Fix undefined left shift behaviour.\n \t(gen_shl_sext): Likewise.\n \t* config/sh/sh.md (divsi3): Likewise.\n \t(imm->ext_dest_operand splitter): Likewise.\n@@ -1349,7 +1363,7 @@\n \t(define_insn \"*<code><mode>3\"): ... Into new pattern using\n \tVI12_AVX_AVX512F iterators without masking.\n \n-2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n+2015-09-22  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config.gcc: Support \"skylake-avx512\".\n \t* config/i386/i386-c.c (ix86_target_macros_internal): Handle\n@@ -1364,14 +1378,14 @@\n \t(processor_type): Add PROCESSOR_SKYLAKE_AVX512.\n \t* doc/invoke.texi (skylake-avx512): New.\n \n-2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n+2015-09-22  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc/config/i386/i386.md (define_insn \"kunpckhi\"): Fix\n \toperand in pattern.\n \t(define_insn \"kunpcksi\"): Ditto.\n \t(define_insn \"kunpckdi\"): Ditto.\n \n-2015-09-22  Kirill Yukhin <kirill.yukhin@intel.com>\n+2015-09-22  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc/config/i386/i386.md (define_split not/xor SWI1248x): Use\n \titerator instead of fixed modes.\n@@ -3273,7 +3287,7 @@\n \n 2015-09-04  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n \t    Petr Murzin  <petr.murzin@intel.com>\n-\t    Kirill Yukhin <kirill.yukhin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config/i386/i386-builtin-types.def\n \t(VOID_PFLOAT_HI_V8DI_V16SF_INT): New.\n@@ -3296,7 +3310,7 @@\n \n 2015-09-04  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n \t    Petr Murzin  <petr.murzin@intel.com>\n-\t    Kirill Yukhin <kirill.yukhin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* doc/tm.texi.in (TARGET_VECTORIZE_BUILTIN_SCATTER): New.\n \t* doc/tm.texi: Regenerate."}, {"sha": "f5c96572cedd866dba8e7118ab4f4d5f868e043a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=54070b515503af0361d0d03851fd0082b2a8258e", "patch": "@@ -8651,7 +8651,7 @@ function_arg_advance_64 (CUMULATIVE_ARGS *cum, machine_mode mode,\n   else\n     {\n       int align = ix86_function_arg_boundary (mode, type) / BITS_PER_WORD;\n-      cum->words = (cum->words + align - 1) & ~(align - 1);\n+      cum->words = ROUND_UP (cum->words, align);\n       cum->words += words;\n       return 0;\n     }\n@@ -11285,7 +11285,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n          16-byte aligned default stack, and thus we don't need to be\n \t within the re-aligned local stack frame to save them.  */\n       gcc_assert (INCOMING_STACK_BOUNDARY >= 128);\n-      offset = (offset + 16 - 1) & -16;\n+      offset = ROUND_UP (offset, 16);\n       offset += frame->nsseregs * 16;\n     }\n   frame->sse_reg_save_offset = offset;\n@@ -11295,7 +11295,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n      sure that no value happens to be the same before and after, force\n      the alignment computation below to add a non-zero value.  */\n   if (stack_realign_fp)\n-    offset = (offset + stack_alignment_needed) & -stack_alignment_needed;\n+    offset = ROUND_UP (offset, stack_alignment_needed);\n \n   /* Va-arg area */\n   frame->va_arg_size = ix86_varargs_gpr_size + ix86_varargs_fpr_size;\n@@ -11308,7 +11308,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n       || !crtl->is_leaf\n       || cfun->calls_alloca\n       || ix86_current_function_calls_tls_descriptor)\n-    offset = (offset + stack_alignment_needed - 1) & -stack_alignment_needed;\n+    offset = ROUND_UP (offset, stack_alignment_needed);\n \n   /* Frame pointer points here.  */\n   frame->frame_pointer_offset = offset;\n@@ -11334,7 +11334,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n      or using alloca.  */\n   if (!crtl->is_leaf || cfun->calls_alloca\n       || ix86_current_function_calls_tls_descriptor)\n-    offset = (offset + preferred_alignment - 1) & -preferred_alignment;\n+    offset = ROUND_UP (offset, preferred_alignment);\n \n   /* We've reached end of stack frame.  */\n   frame->stack_pointer_offset = offset;\n@@ -12050,7 +12050,7 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n-      rounded_size = size & -PROBE_INTERVAL;\n+      rounded_size = ROUND_DOWN (size, PROBE_INTERVAL);\n \n \n       /* Step 2: compute initial and final value of the loop counter.  */\n@@ -12204,7 +12204,7 @@ ix86_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \n       /* Step 1: round SIZE to the previous multiple of the interval.  */\n \n-      rounded_size = size & -PROBE_INTERVAL;\n+      rounded_size = ROUND_DOWN (size, PROBE_INTERVAL);\n \n \n       /* Step 2: compute initial and final value of the loop counter.  */\n@@ -12663,7 +12663,7 @@ ix86_expand_prologue (void)\n          pointer is no longer valid.  As for the value of sp_offset,\n \t see ix86_compute_frame_layout, which we need to match in order\n \t to pass verification of stack_pointer_offset at the end.  */\n-      m->fs.sp_offset = (m->fs.sp_offset + align_bytes) & -align_bytes;\n+      m->fs.sp_offset = ROUND_UP (m->fs.sp_offset, align_bytes);\n       m->fs.sp_valid = false;\n     }\n \n@@ -24692,8 +24692,8 @@ expand_set_or_movmem_via_rep (rtx destmem, rtx srcmem,\n     destexp = gen_rtx_PLUS (Pmode, destptr, countreg);\n   if ((!issetmem || orig_value == const0_rtx) && CONST_INT_P (count))\n     {\n-      rounded_count = (INTVAL (count)\n-\t\t       & ~((HOST_WIDE_INT) GET_MODE_SIZE (mode) - 1));\n+      rounded_count\n+\t= ROUND_DOWN (INTVAL (count), (HOST_WIDE_INT) GET_MODE_SIZE (mode));\n       destmem = shallow_copy_rtx (destmem);\n       set_mem_size (destmem, rounded_count);\n     }\n@@ -24719,8 +24719,8 @@ expand_set_or_movmem_via_rep (rtx destmem, rtx srcmem,\n \tsrcexp = gen_rtx_PLUS (Pmode, srcptr, countreg);\n       if (CONST_INT_P (count))\n \t{\n-\t  rounded_count = (INTVAL (count)\n-\t\t\t   & ~((HOST_WIDE_INT) GET_MODE_SIZE (mode) - 1));\n+\t  rounded_count\n+\t    = ROUND_DOWN (INTVAL (count), (HOST_WIDE_INT) GET_MODE_SIZE (mode));\n \t  srcmem = shallow_copy_rtx (srcmem);\n \t  set_mem_size (srcmem, rounded_count);\n \t}"}, {"sha": "c59e3ccd66fcf21acf5ede0882e56d7a06dee26c", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=54070b515503af0361d0d03851fd0082b2a8258e", "patch": "@@ -1596,8 +1596,7 @@ enum reg_class\n    and -8 for 64bit targets, we need to make sure all stack pointer adjustments\n    are in multiple of 4 for 32bit targets and 8 for 64bit targets.  */\n \n-#define PUSH_ROUNDING(BYTES) \\\n-  (((BYTES) + UNITS_PER_WORD - 1) & -UNITS_PER_WORD)\n+#define PUSH_ROUNDING(BYTES) ROUND_UP (BYTES, UNITS_PER_WORD)\n \n /* If defined, the maximum amount of space required for outgoing arguments\n    will be computed and placed into the variable `crtl->outgoing_args_size'."}, {"sha": "34e9e243deb0136176458b75e82715dbada0a781", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=54070b515503af0361d0d03851fd0082b2a8258e", "patch": "@@ -216,13 +216,9 @@ static const size_t extra_order_size_table[] = {\n \n #define ROUND_UP_VALUE(x, f) ((f) - 1 - ((f) - 1 + (x)) % (f))\n \n-/* Compute the smallest multiple of F that is >= X.  */\n-\n-#define ROUND_UP(x, f) (CEIL (x, f) * (f))\n-\n /* Round X to next multiple of the page size */\n \n-#define PAGE_ALIGN(x) (((x) + G.pagesize - 1) & ~(G.pagesize - 1))\n+#define PAGE_ALIGN(x) ROUND_UP ((x), G.pagesize)\n \n /* The Ith entry is the number of objects on a page or order I.  */\n "}, {"sha": "f1694b94430327155ab10a6d6e8d1bc075639753", "filename": "gcc/system.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54070b515503af0361d0d03851fd0082b2a8258e/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=54070b515503af0361d0d03851fd0082b2a8258e", "patch": "@@ -369,6 +369,12 @@ extern int errno;\n /* Returns the least number N such that N * Y >= X.  */\n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n \n+/* This macro rounds x up to the y boundary.  */\n+#define ROUND_UP(x,y) (((x) + (y) - 1) & ~((y) - 1))\n+\n+/* This macro rounds x down to the y boundary.  */\n+#define ROUND_DOWN(x,y) ((x) & ~((y) - 1))\n+ \t\n #ifdef HAVE_SYS_WAIT_H\n #include <sys/wait.h>\n #endif"}]}