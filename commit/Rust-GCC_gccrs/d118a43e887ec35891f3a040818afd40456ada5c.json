{"sha": "d118a43e887ec35891f3a040818afd40456ada5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExOGE0M2U4ODdlYzM1ODkxZjNhMDQwODE4YWZkNDA0NTZhZGE1Yw==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2007-08-14T08:49:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-08-14T08:49:06Z"}, "message": "sem_ch9.adb (Check_Interfaces): New subprogram that factorizes code that is common to Analyze_Protected_Type...\n\n2007-08-14  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch9.adb (Check_Interfaces): New subprogram that factorizes code\n\tthat is common to Analyze_Protected_Type and Analyze_Task_Type. In case\n\tof private types add missing check on matching interfaces in the\n\tpartial and full declarations.\n\t(Analyze_Protected_Type): Code cleanup.\n\t(Analyze_Task_Type): Code cleanup.\n\nFrom-SVN: r127458", "tree": {"sha": "c1ebce14d7d3d2b0fec89be3218576fd4833400c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1ebce14d7d3d2b0fec89be3218576fd4833400c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d118a43e887ec35891f3a040818afd40456ada5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118a43e887ec35891f3a040818afd40456ada5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d118a43e887ec35891f3a040818afd40456ada5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118a43e887ec35891f3a040818afd40456ada5c/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4210c97522243841b6537f1e65dbcea5a726ef46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4210c97522243841b6537f1e65dbcea5a726ef46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4210c97522243841b6537f1e65dbcea5a726ef46"}], "stats": {"total": 328, "additions": 186, "deletions": 142}, "files": [{"sha": "b4cfe8aa3d42a17c00f5dc8cbc4723d398333e90", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 186, "deletions": 142, "changes": 328, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118a43e887ec35891f3a040818afd40456ada5c/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118a43e887ec35891f3a040818afd40456ada5c/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=d118a43e887ec35891f3a040818afd40456ada5c", "patch": "@@ -70,6 +70,10 @@ package body Sem_Ch9 is\n    --  count the entries (checking the static requirement), and compare with\n    --  the given maximum.\n \n+   procedure Check_Interfaces (N : Node_Id; T : Entity_Id);\n+   --  N is an N_Protected_Type_Declaration or N_Task_Type_Declaration node.\n+   --  Complete decoration of T and check legality of the covered interfaces.\n+\n    function Find_Concurrent_Spec (Body_Id : Entity_Id) return Entity_Id;\n    --  Find entity in corresponding task or protected declaration. Use full\n    --  view if first declaration was for an incomplete type.\n@@ -401,8 +405,9 @@ package body Sem_Ch9 is\n \n       --  Set Never_Set_In_Source and clear Is_True_Constant/Current_Value\n       --  fields on all entry formals (this loop ignores all other entities).\n-      --  Reset Referenced and Has_Pragma_Unreferenced as well, so that we can\n-      --  post accurate warnings on each accept statement for the same entry.\n+      --  Reset Referenced, Referenced_As_LHS and Has_Pragma_Unreferenced as\n+      --  well, so that we can post accurate warnings on each accept statement\n+      --  for the same entry.\n \n       E := First_Entity (Entry_Nam);\n       while Present (E) loop\n@@ -411,6 +416,7 @@ package body Sem_Ch9 is\n             Set_Is_True_Constant        (E, False);\n             Set_Current_Value           (E, Empty);\n             Set_Referenced              (E, False);\n+            Set_Referenced_As_LHS       (E, False);\n             Set_Has_Pragma_Unreferenced (E, False);\n          end if;\n \n@@ -476,7 +482,7 @@ package body Sem_Ch9 is\n                else\n                   Error_Msg_N\n                    (\"dispatching operation of limited or synchronized \" &\n-                    \"interface required ('R'M 9.7.2(3))!\", N);\n+                    \"interface required (RM 9.7.2(3))!\", N);\n                end if;\n             end if;\n          end if;\n@@ -844,6 +850,11 @@ package body Sem_Ch9 is\n \n       if Present (Index) then\n          Analyze (Index);\n+\n+         --  The entry index functions like a loop variable, thus it is known\n+         --  to have a valid value.\n+\n+         Set_Is_Known_Valid (Defining_Identifier (Index));\n       end if;\n \n       if Present (Formals) then\n@@ -1100,11 +1111,9 @@ package body Sem_Ch9 is\n    ----------------------------\n \n    procedure Analyze_Protected_Type (N : Node_Id) is\n-      E         : Entity_Id;\n-      T         : Entity_Id;\n-      Def_Id    : constant Entity_Id := Defining_Identifier (N);\n-      Iface     : Node_Id;\n-      Iface_Typ : Entity_Id;\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n+      E      : Entity_Id;\n+      T      : Entity_Id;\n \n    begin\n       if No_Run_Time_Mode then\n@@ -1130,71 +1139,8 @@ package body Sem_Ch9 is\n       Set_Stored_Constraint  (T, No_Elist);\n       Push_Scope (T);\n \n-      --  Ada 2005 (AI-345)\n-\n-      if Present (Interface_List (N)) then\n-         Set_Is_Tagged_Type (T);\n-\n-         Iface := First (Interface_List (N));\n-         while Present (Iface) loop\n-            Iface_Typ := Find_Type_Of_Subtype_Indic (Iface);\n-\n-            if not Is_Interface (Iface_Typ) then\n-               Error_Msg_NE (\"(Ada 2005) & must be an interface\",\n-                             Iface, Iface_Typ);\n-\n-            else\n-               --  Ada 2005 (AI-251): \"The declaration of a specific descendant\n-               --  of an interface type freezes the interface type\" RM 13.14.\n-\n-               Freeze_Before (N, Etype (Iface));\n-\n-               --  Ada 2005 (AI-345): Protected types can only implement\n-               --  limited, synchronized, or protected interfaces (note that\n-               --  the predicate Is_Limited_Interface includes synchronized\n-               --  and protected interfaces).\n-\n-               if Is_Task_Interface (Iface_Typ) then\n-                  Error_Msg_N (\"(Ada 2005) protected type cannot implement a \"\n-                    & \"task interface\", Iface);\n-\n-               elsif not Is_Limited_Interface (Iface_Typ) then\n-                  Error_Msg_N (\"(Ada 2005) protected type cannot implement a \"\n-                    & \"non-limited interface\", Iface);\n-               end if;\n-            end if;\n-\n-            Next (Iface);\n-         end loop;\n-\n-         --  If this is the full-declaration associated with a private\n-         --  declaration that implement interfaces, then the private type\n-         --  declaration must be limited.\n-\n-         if Has_Private_Declaration (T) then\n-            declare\n-               E : Entity_Id;\n-\n-            begin\n-               E := First_Entity (Scope (T));\n-               loop\n-                  pragma Assert (Present (E));\n-\n-                  if Is_Type (E) and then Present (Full_View (E)) then\n-                     exit when Full_View (E) = T;\n-                  end if;\n-\n-                  Next_Entity (E);\n-               end loop;\n-\n-               if not Is_Limited_Record (E) then\n-                  Error_Msg_Sloc := Sloc (E);\n-                  Error_Msg_N\n-                    (\"(Ada 2005) private type declaration # must be limited\",\n-                     T);\n-               end if;\n-            end;\n-         end if;\n+      if Ada_Version >= Ada_05 then\n+         Check_Interfaces (N, T);\n       end if;\n \n       if Present (Discriminant_Specifications (N)) then\n@@ -1907,10 +1853,8 @@ package body Sem_Ch9 is\n    -----------------------\n \n    procedure Analyze_Task_Type (N : Node_Id) is\n-      T         : Entity_Id;\n-      Def_Id    : constant Entity_Id := Defining_Identifier (N);\n-      Iface     : Node_Id;\n-      Iface_Typ : Entity_Id;\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n+      T      : Entity_Id;\n \n    begin\n       Check_Restriction (No_Tasking, N);\n@@ -1932,71 +1876,8 @@ package body Sem_Ch9 is\n       Set_Stored_Constraint  (T, No_Elist);\n       Push_Scope (T);\n \n-      --  Ada 2005 (AI-345)\n-\n-      if Present (Interface_List (N)) then\n-         Set_Is_Tagged_Type (T);\n-\n-         Iface := First (Interface_List (N));\n-         while Present (Iface) loop\n-            Iface_Typ := Find_Type_Of_Subtype_Indic (Iface);\n-\n-            if not Is_Interface (Iface_Typ) then\n-               Error_Msg_NE (\"(Ada 2005) & must be an interface\",\n-                             Iface, Iface_Typ);\n-\n-            else\n-               --  Ada 2005 (AI-251): The declaration of a specific descendant\n-               --  of an interface type freezes the interface type (RM 13.14).\n-\n-               Freeze_Before (N, Etype (Iface));\n-\n-               --  Ada 2005 (AI-345): Task types can only implement limited,\n-               --  synchronized, or task interfaces (note that the predicate\n-               --  Is_Limited_Interface includes synchronized and task\n-               --  interfaces).\n-\n-               if Is_Protected_Interface (Iface_Typ) then\n-                  Error_Msg_N (\"(Ada 2005) task type cannot implement a \" &\n-                    \"protected interface\", Iface);\n-\n-               elsif not Is_Limited_Interface (Iface_Typ) then\n-                  Error_Msg_N (\"(Ada 2005) task type cannot implement a \" &\n-                    \"non-limited interface\", Iface);\n-               end if;\n-            end if;\n-\n-            Next (Iface);\n-         end loop;\n-\n-         --  If this is the full-declaration associated with a private\n-         --  declaration that implement interfaces, then the private\n-         --  type declaration must be limited.\n-\n-         if Has_Private_Declaration (T) then\n-            declare\n-               E : Entity_Id;\n-\n-            begin\n-               E := First_Entity (Scope (T));\n-               loop\n-                  pragma Assert (Present (E));\n-\n-                  if Is_Type (E) and then Present (Full_View (E)) then\n-                     exit when Full_View (E) = T;\n-                  end if;\n-\n-                  Next_Entity (E);\n-               end loop;\n-\n-               if not Is_Limited_Record (E) then\n-                  Error_Msg_Sloc := Sloc (E);\n-                  Error_Msg_N\n-                    (\"(Ada 2005) private type declaration # must be limited\",\n-                     T);\n-               end if;\n-            end;\n-         end if;\n+      if Ada_Version >= Ada_05 then\n+         Check_Interfaces (N, T);\n       end if;\n \n       if Present (Discriminant_Specifications (N)) then\n@@ -2224,6 +2105,169 @@ package body Sem_Ch9 is\n       end if;\n    end Check_Max_Entries;\n \n+   ----------------------\n+   -- Check_Interfaces --\n+   ----------------------\n+\n+   procedure Check_Interfaces (N : Node_Id; T : Entity_Id) is\n+      Iface     : Node_Id;\n+      Iface_Typ : Entity_Id;\n+\n+   begin\n+      pragma Assert (Nkind (N) = N_Protected_Type_Declaration\n+        or else Nkind (N) = N_Task_Type_Declaration);\n+\n+      if Present (Interface_List (N)) then\n+         Set_Is_Tagged_Type (T);\n+\n+         Iface := First (Interface_List (N));\n+         while Present (Iface) loop\n+            Iface_Typ := Find_Type_Of_Subtype_Indic (Iface);\n+\n+            if not Is_Interface (Iface_Typ) then\n+               Error_Msg_NE\n+                 (\"(Ada 2005) & must be an interface\", Iface, Iface_Typ);\n+\n+            else\n+               --  Ada 2005 (AI-251): \"The declaration of a specific descendant\n+               --  of an interface type freezes the interface type\" RM 13.14.\n+\n+               Freeze_Before (N, Etype (Iface));\n+\n+               if Nkind (N) = N_Protected_Type_Declaration then\n+\n+                  --  Ada 2005 (AI-345): Protected types can only implement\n+                  --  limited, synchronized, or protected interfaces (note that\n+                  --  the predicate Is_Limited_Interface includes synchronized\n+                  --  and protected interfaces).\n+\n+                  if Is_Task_Interface (Iface_Typ) then\n+                     Error_Msg_N (\"(Ada 2005) protected type cannot implement \"\n+                       & \"a task interface\", Iface);\n+\n+                  elsif not Is_Limited_Interface (Iface_Typ) then\n+                     Error_Msg_N (\"(Ada 2005) protected type cannot implement \"\n+                       & \"a non-limited interface\", Iface);\n+                  end if;\n+\n+               else pragma Assert (Nkind (N) = N_Task_Type_Declaration);\n+\n+                  --  Ada 2005 (AI-345): Task types can only implement limited,\n+                  --  synchronized, or task interfaces (note that the predicate\n+                  --  Is_Limited_Interface includes synchronized and task\n+                  --  interfaces).\n+\n+                  if Is_Protected_Interface (Iface_Typ) then\n+                     Error_Msg_N (\"(Ada 2005) task type cannot implement a \" &\n+                       \"protected interface\", Iface);\n+\n+                  elsif not Is_Limited_Interface (Iface_Typ) then\n+                     Error_Msg_N (\"(Ada 2005) task type cannot implement a \" &\n+                       \"non-limited interface\", Iface);\n+                  end if;\n+               end if;\n+            end if;\n+\n+            Next (Iface);\n+         end loop;\n+      end if;\n+\n+      if not Has_Private_Declaration (T) then\n+         return;\n+      end if;\n+\n+      --  Additional checks on full-types associated with private type\n+      --  declarations. Search for the private type declaration.\n+\n+      declare\n+         Full_T_Ifaces : Elist_Id;\n+         Iface         : Node_Id;\n+         Priv_T        : Entity_Id;\n+         Priv_T_Ifaces : Elist_Id;\n+\n+      begin\n+         Priv_T := First_Entity (Scope (T));\n+         loop\n+            pragma Assert (Present (Priv_T));\n+\n+            if Is_Type (Priv_T) and then Present (Full_View (Priv_T)) then\n+               exit when Full_View (Priv_T) = T;\n+            end if;\n+\n+            Next_Entity (Priv_T);\n+         end loop;\n+\n+         --  In case of synchronized types covering interfaces the private type\n+         --  declaration must be limited.\n+\n+         if Present (Interface_List (N))\n+           and then not Is_Limited_Record (Priv_T)\n+         then\n+            Error_Msg_Sloc := Sloc (Priv_T);\n+            Error_Msg_N (\"(Ada 2005) limited type declaration expected for \" &\n+                         \"private type#\", T);\n+         end if;\n+\n+         --  RM 7.3 (7.1/2): If the full view has a partial view that is\n+         --  tagged then check RM 7.3 subsidiary rules.\n+\n+         if Is_Tagged_Type (Priv_T)\n+           and then not Error_Posted (N)\n+         then\n+            --  RM 7.3 (7.2/2): The partial view shall be a synchronized tagged\n+            --  type if and only if the full type is a synchronized tagged type\n+\n+            if Is_Synchronized_Tagged_Type (Priv_T)\n+              and then not Is_Synchronized_Tagged_Type (T)\n+            then\n+               Error_Msg_N\n+                 (\"(Ada 2005) full view must be a synchronized tagged \" &\n+                  \"type ('R'M 7.3 (7.2/2))\", Priv_T);\n+\n+            elsif Is_Synchronized_Tagged_Type (T)\n+              and then not Is_Synchronized_Tagged_Type (Priv_T)\n+            then\n+               Error_Msg_N\n+                 (\"(Ada 2005) partial view must be a synchronized tagged \" &\n+                  \"type ('R'M 7.3 (7.2/2))\", T);\n+            end if;\n+\n+            --  RM 7.3 (7.3/2): The partial view shall be a descendant of an\n+            --  interface type if and only if the full type is descendant of\n+            --  the interface type.\n+\n+            if Present (Interface_List (N))\n+              or else (Is_Tagged_Type (Priv_T)\n+                         and then Has_Abstract_Interfaces\n+                                    (Priv_T, Use_Full_View => False))\n+            then\n+               if Is_Tagged_Type (Priv_T) then\n+                  Collect_Abstract_Interfaces\n+                    (Priv_T, Priv_T_Ifaces, Use_Full_View => False);\n+               end if;\n+\n+               if Is_Tagged_Type (T) then\n+                  Collect_Abstract_Interfaces (T, Full_T_Ifaces);\n+               end if;\n+\n+               Iface := Find_Hidden_Interface (Priv_T_Ifaces, Full_T_Ifaces);\n+\n+               if Present (Iface) then\n+                  Error_Msg_NE (\"interface & not implemented by full type \" &\n+                                \"(RM-2005 7.3 (7.3/2))\", Priv_T, Iface);\n+               end if;\n+\n+               Iface := Find_Hidden_Interface (Full_T_Ifaces, Priv_T_Ifaces);\n+\n+               if Present (Iface) then\n+                  Error_Msg_NE (\"interface & not implemented by partial \" &\n+                                \"view (RM-2005 7.3 (7.3/2))\", T, Iface);\n+               end if;\n+            end if;\n+         end if;\n+      end;\n+   end Check_Interfaces;\n+\n    --------------------------\n    -- Find_Concurrent_Spec --\n    --------------------------"}]}