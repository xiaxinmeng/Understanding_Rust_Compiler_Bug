{"sha": "c3ad80f0001bc349f484f576576997984f7aa1ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNhZDgwZjAwMDFiYzM0OWY0ODRmNTc2NTc2OTk3OTg0ZjdhYTFmZg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2010-10-22T09:32:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T09:32:30Z"}, "message": "2010-10-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_prag.adb, sem_ch12.adb, sem_util.adb, sem_util.ads\n\t(Is_Generic_Formal): Move from body of Sem_Ch12 to Sem_Util.\n\t(Check_Arg_Is_Local_Name): Fix check in the case of a pragma appearing\n\timmediately after a library unit.\n\t(Analyze_Pragma, case Preelaborable_Initialization): Pragma may apply to\n\ta formal derived type.\n\nFrom-SVN: r165810", "tree": {"sha": "d88f5d32d3927604bd8caee719d16fc302c9fa68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d88f5d32d3927604bd8caee719d16fc302c9fa68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3ad80f0001bc349f484f576576997984f7aa1ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ad80f0001bc349f484f576576997984f7aa1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3ad80f0001bc349f484f576576997984f7aa1ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3ad80f0001bc349f484f576576997984f7aa1ff/comments", "author": null, "committer": null, "parents": [{"sha": "d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32e3ceeb2eb3af35508ee00f288d8cf3483ff21"}], "stats": {"total": 138, "additions": 101, "deletions": 37}, "files": [{"sha": "ffaef4e72eca9b4aac681067e49ce665cb2bdb9e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c3ad80f0001bc349f484f576576997984f7aa1ff", "patch": "@@ -1,3 +1,12 @@\n+2010-10-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_prag.adb, sem_ch12.adb, sem_util.adb, sem_util.ads\n+\t(Is_Generic_Formal): Move from body of Sem_Ch12 to Sem_Util.\n+\t(Check_Arg_Is_Local_Name): Fix check in the case of a pragma appearing\n+\timmediately after a library unit.\n+\t(Analyze_Pragma, case Preelaborable_Initialization): Pragma may apply to\n+\ta formal derived type.\n+\n 2010-10-22  Geert Bosch  <bosch@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Remove ttypef.ads"}, {"sha": "e51c6c101ae2666ae6a019288dc831d96ae4e0fc", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=c3ad80f0001bc349f484f576576997984f7aa1ff", "patch": "@@ -470,12 +470,6 @@ package body Sem_Ch12 is\n    --  Used to determine whether its body should be elaborated to allow\n    --  front-end inlining.\n \n-   function Is_Generic_Formal (E : Entity_Id) return Boolean;\n-   --  Utility to determine whether a given entity is declared by means of\n-   --  of a formal parameter declaration. Used to set properly the visibility\n-   --  of generic formals of a generic package declared with a box or with\n-   --  partial parametrization.\n-\n    procedure Set_Instance_Env\n      (Gen_Unit : Entity_Id;\n       Act_Unit : Entity_Id);\n@@ -10480,29 +10474,6 @@ package body Sem_Ch12 is\n       return Decl_Nodes;\n    end Instantiate_Type;\n \n-   -----------------------\n-   -- Is_Generic_Formal --\n-   -----------------------\n-\n-   function Is_Generic_Formal (E : Entity_Id) return Boolean is\n-      Kind : Node_Kind;\n-   begin\n-      if No (E) then\n-         return False;\n-      else\n-         Kind := Nkind (Parent (E));\n-         return\n-           Nkind_In (Kind, N_Formal_Object_Declaration,\n-                           N_Formal_Package_Declaration,\n-                           N_Formal_Type_Declaration)\n-             or else\n-               (Is_Formal_Subprogram (E)\n-                 and then\n-                   Nkind (Parent (Parent (E))) in\n-                     N_Formal_Subprogram_Declaration);\n-      end if;\n-   end Is_Generic_Formal;\n-\n    ---------------------\n    -- Is_In_Main_Unit --\n    ---------------------"}, {"sha": "552f4b1a30b72c39a288a2cf7e56c361429fea98", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 68, "deletions": 8, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c3ad80f0001bc349f484f576576997984f7aa1ff", "patch": "@@ -901,11 +901,67 @@ package body Sem_Prag is\n             Error_Pragma_Arg (\"argument for pragma% must be local name\", Argx);\n          end if;\n \n-         if Is_Entity_Name (Argx)\n-           and then Scope (Entity (Argx)) /= Current_Scope\n-         then\n-            Error_Pragma_Arg\n-              (\"pragma% argument must be in same declarative part\", Arg);\n+         --  No further check required if not an entity name\n+\n+         if not Is_Entity_Name (Argx) then\n+            null;\n+\n+         else\n+            declare\n+               OK   : Boolean;\n+               Ent  : constant Entity_Id := Entity (Argx);\n+               Scop : constant Entity_Id := Scope (Ent);\n+            begin\n+               --  Case of a pragma applied to a compilation unit: pragma must\n+               --  occur immediately after the program unit in the compilation.\n+\n+               if Is_Compilation_Unit (Ent) then\n+                  declare\n+                     Decl : constant Node_Id := Unit_Declaration_Node (Ent);\n+                  begin\n+                     --  Case of pragma placed immediately after spec\n+\n+                     if Parent (N) = Aux_Decls_Node (Parent (Decl)) then\n+                        OK := True;\n+\n+                     --  Case of pragma placed immediately after body\n+\n+                     elsif Nkind (Decl) = N_Subprogram_Declaration\n+                             and then Present (Corresponding_Body (Decl))\n+                     then\n+                        OK := Parent (N) =\n+                                Aux_Decls_Node\n+                                  (Parent (Unit_Declaration_Node\n+                                             (Corresponding_Body (Decl))));\n+\n+                     --  All other cases are illegal\n+\n+                     else\n+                        OK := False;\n+                     end if;\n+                  end;\n+\n+               --  Special restricted placement rule from 10.2.1(11.8/2)\n+\n+               elsif Is_Generic_Formal (Ent)\n+                       and then Prag_Id = Pragma_Preelaborable_Initialization\n+               then\n+                  OK := List_Containing (N) =\n+                          Generic_Formal_Declarations\n+                            (Unit_Declaration_Node (Scop));\n+\n+               --  Default case, just check that the pragma occurs in the scope\n+               --  of the entity denoted by the name.\n+\n+               else\n+                  OK := Current_Scope = Scop;\n+               end if;\n+\n+               if not OK then\n+                  Error_Pragma_Arg\n+                    (\"pragma% argument must be in same declarative part\", Arg);\n+               end if;\n+            end;\n          end if;\n       end Check_Arg_Is_Local_Name;\n \n@@ -10985,11 +11041,15 @@ package body Sem_Prag is\n             Check_First_Subtype (Arg1);\n             Ent := Entity (Get_Pragma_Arg (Arg1));\n \n-            if not Is_Private_Type (Ent)\n-              and then not Is_Protected_Type (Ent)\n+            if not (Is_Private_Type (Ent)\n+                      or else\n+                    Is_Protected_Type (Ent)\n+                      or else\n+                    (Is_Generic_Type (Ent) and then Is_Derived_Type (Ent)))\n             then\n                Error_Pragma_Arg\n-                 (\"pragma % can only be applied to private or protected type\",\n+                 (\"pragma % can only be applied to private, formal derived or \"\n+                  & \"protected type\",\n                   Arg1);\n             end if;\n "}, {"sha": "d53e483dfc328e70a4548cc9d49e123781e8a60d", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c3ad80f0001bc349f484f576576997984f7aa1ff", "patch": "@@ -6559,6 +6559,25 @@ package body Sem_Util is\n       end if;\n    end Is_Fully_Initialized_Variant;\n \n+   -----------------------\n+   -- Is_Generic_Formal --\n+   -----------------------\n+\n+   function Is_Generic_Formal (E : Entity_Id) return Boolean is\n+      Kind : Node_Kind;\n+   begin\n+      if No (E) then\n+         return False;\n+      else\n+         Kind := Nkind (Parent (E));\n+         return\n+           Nkind_In (Kind, N_Formal_Object_Declaration,\n+                           N_Formal_Package_Declaration,\n+                           N_Formal_Type_Declaration)\n+             or else Is_Formal_Subprogram (E);\n+      end if;\n+   end Is_Generic_Formal;\n+\n    ------------\n    -- Is_LHS --\n    ------------"}, {"sha": "94786a1849bf5e5aa6d24057aa64dd9291066de3", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3ad80f0001bc349f484f576576997984f7aa1ff/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c3ad80f0001bc349f484f576576997984f7aa1ff", "patch": "@@ -733,6 +733,11 @@ package Sem_Util is\n    --  means that the result returned is not crucial, but should err on the\n    --  side of thinking things are fully initialized if it does not know.\n \n+   function Is_Generic_Formal (E : Entity_Id) return Boolean;\n+   --  Determine whether E is a generic formal parameter. In particular this is\n+   --  used to set the visibility of generic formals of a generic package\n+   --  declared with a box or with partial parametrization.\n+\n    function Is_Inherited_Operation (E : Entity_Id) return Boolean;\n    --  E is a subprogram. Return True is E is an implicit operation inherited\n    --  by a derived type declarations."}]}