{"sha": "3bc9db6a989671bedf19e61bd1b21f79588e99da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjOWRiNmE5ODk2NzFiZWRmMTllNjFiZDFiMjFmNzk1ODhlOTlkYQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-16T14:34:38Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-27T09:42:33Z"}, "message": "simplify-rtx: Push sign/zero-extension inside vec_duplicate\n\nAs a general principle, vec_duplicate should be as close to the root\nof an expression as possible. Where unary operations have\nvec_duplicate as an argument, these operations should be pushed\ninside the vec_duplicate.\n\nThis patch modifies unary operation simplification to push\nsign/zero-extension of a scalar inside vec_duplicate.\n\nThis patch also updates all RTL patterns in aarch64-simd.md to use\nthe new canonical form.\n\ngcc/ChangeLog:\n\n2021-07-19  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd.md: Push sign/zero-extension\n\tinside vec_duplicate for all patterns.\n\t* simplify-rtx.c (simplify_context::simplify_unary_operation_1):\n\tPush sign/zero-extension inside vec_duplicate.", "tree": {"sha": "d658c0f489f3895ab00b4a1351a40394b55306c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d658c0f489f3895ab00b4a1351a40394b55306c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc9db6a989671bedf19e61bd1b21f79588e99da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc9db6a989671bedf19e61bd1b21f79588e99da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc9db6a989671bedf19e61bd1b21f79588e99da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc9db6a989671bedf19e61bd1b21f79588e99da/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88a6951586c7229b25708f4486eaaf4bf4b5bbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88a6951586c7229b25708f4486eaaf4bf4b5bbe"}], "stats": {"total": 394, "additions": 211, "deletions": 183}, "files": [{"sha": "c5638d096fa84a27b4ea397f62cd0d05a28e7c8c", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 187, "deletions": 172, "changes": 359, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc9db6a989671bedf19e61bd1b21f79588e99da/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc9db6a989671bedf19e61bd1b21f79588e99da/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3bc9db6a989671bedf19e61bd1b21f79588e99da", "patch": "@@ -2079,14 +2079,16 @@\n \n (define_insn \"aarch64_<su>mlal_hi_n<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (plus:<VWIDE>\n-          (mult:<VWIDE>\n-              (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-                 (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                 (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-              (ANY_EXTEND:<VWIDE> (vec_duplicate:<VCOND>\n-\t               (match_operand:<VEL> 4 \"register_operand\" \"<h_con>\"))))\n-          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+\t(plus:<VWIDE>\n+\t  (mult:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_select:<VHALF>\n+\t\t(match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t(match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(match_operand:<VEL> 4 \"register_operand\" \"<h_con>\"))))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   \"<su>mlal2\\t%0.<Vwtype>, %2.<Vtype>, %4.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n@@ -2154,14 +2156,16 @@\n \n (define_insn \"aarch64_<su>mlsl_hi_n<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (minus:<VWIDE>\n-          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n-          (mult:<VWIDE>\n-            (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-              (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-              (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-            (ANY_EXTEND:<VWIDE> (vec_duplicate:<VCOND>\n-\t            (match_operand:<VEL> 4 \"register_operand\" \"<h_con>\"))))))]\n+\t(minus:<VWIDE>\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+\t  (mult:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_select:<VHALF>\n+\t\t(match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t(match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(match_operand:<VEL> 4 \"register_operand\" \"<h_con>\"))))))]\n   \"TARGET_SIMD\"\n   \"<su>mlsl2\\t%0.<Vwtype>, %2.<Vtype>, %4.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n@@ -2197,14 +2201,14 @@\n \n (define_insn \"aarch64_<su>mlal_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (plus:<VWIDE>\n-          (mult:<VWIDE>\n-            (ANY_EXTEND:<VWIDE>\n-              (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-            (ANY_EXTEND:<VWIDE>\n-              (vec_duplicate:VD_HSI\n-\t              (match_operand:<VEL> 3 \"register_operand\" \"<h_con>\"))))\n-          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n+\t(plus:<VWIDE>\n+\t  (mult:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(match_operand:<VEL> 3 \"register_operand\" \"<h_con>\"))))\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   \"<su>mlal\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n@@ -2226,14 +2230,14 @@\n \n (define_insn \"aarch64_<su>mlsl_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (minus:<VWIDE>\n-          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n-          (mult:<VWIDE>\n-            (ANY_EXTEND:<VWIDE>\n-              (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-            (ANY_EXTEND:<VWIDE>\n-              (vec_duplicate:VD_HSI\n-\t              (match_operand:<VEL> 3 \"register_operand\" \"<h_con>\"))))))]\n+\t(minus:<VWIDE>\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+\t  (mult:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(match_operand:<VEL> 3 \"register_operand\" \"<h_con>\"))))))]\n   \"TARGET_SIMD\"\n   \"<su>mlsl\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vetype>[0]\"\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n@@ -2311,8 +2315,8 @@\n \t(mult:<VWIDE>\n \t  (ANY_EXTEND:<VWIDE>\n \t    (match_operand:<VCOND> 1 \"register_operand\" \"w\"))\n-\t  (ANY_EXTEND:<VWIDE>\n-\t    (vec_duplicate:<VCOND>\n+\t  (vec_duplicate:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE_S>\n \t      (vec_select:<VEL>\n \t\t(match_operand:VDQHS 2 \"register_operand\" \"<vwx>\")\n \t\t(parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))))))]\n@@ -2327,13 +2331,15 @@\n (define_insn \"aarch64_<su>mull_hi_lane<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(mult:<VWIDE>\n-\t  (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-\t    (match_operand:VQ_HSI 2 \"vect_par_cnst_hi_half\" \"\")))\n-\t  (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n-\t    (vec_select:<VEL>\n-\t      (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n-\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))))))]\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t      (match_operand:VQ_HSI 2 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (vec_duplicate:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE_S>\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t(parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))))))]\n   \"TARGET_SIMD\"\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCOND>mode, INTVAL (operands[4]));\n@@ -2359,13 +2365,15 @@\n (define_insn \"aarch64_<su>mull_hi_laneq<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(mult:<VWIDE>\n-\t  (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-\t    (match_operand:VQ_HSI 2 \"vect_par_cnst_hi_half\" \"\")))\n-\t  (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n-\t    (vec_select:<VEL>\n-\t      (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n-\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))))))]\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t      (match_operand:VQ_HSI 2 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (vec_duplicate:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE_S>\n+\t      (vec_select:<VEL>\n+\t\t(match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n+\t\t(parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")]))))))]\n   \"TARGET_SIMD\"\n   {\n     operands[4] = aarch64_endian_lane_rtx (<VCONQ>mode, INTVAL (operands[4]));\n@@ -2390,11 +2398,11 @@\n \n (define_insn \"aarch64_<su>mull_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (mult:<VWIDE>\n-          (ANY_EXTEND:<VWIDE>\n-            (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n-          (ANY_EXTEND:<VWIDE>\n-            (vec_duplicate:<VCOND>\n+\t(mult:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n+\t  (vec_duplicate:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE_S>\n \t      (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\")))))]\n   \"TARGET_SIMD\"\n   \"<su>mull\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vetype>[0]\"\n@@ -2404,11 +2412,12 @@\n (define_insn \"aarch64_<su>mull_hi_n<mode>_insn\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(mult:<VWIDE>\n-\t  (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-\t    (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n \t  (ANY_EXTEND:<VWIDE>\n-\t    (vec_duplicate:<VCOND>\n+\t    (vec_select:<VHALF>\n+\t      (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t      (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (vec_duplicate:<VWIDE>\n+\t    (ANY_EXTEND:<VWIDE_S>\n \t      (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\")))))]\n   \"TARGET_SIMD\"\n   \"<su>mull2\\\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vetype>[0]\"\n@@ -2435,8 +2444,8 @@\n \t  (mult:<VWIDE>\n \t    (ANY_EXTEND:<VWIDE>\n \t      (match_operand:<VCOND> 2 \"register_operand\" \"w\"))\n-\t    (ANY_EXTEND:<VWIDE>\n-\t      (vec_duplicate:<VCOND>\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n \t\t(vec_select:<VEL>\n \t\t  (match_operand:VDQHS 3 \"register_operand\" \"<vwx>\")\n \t\t  (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))))\n@@ -2453,13 +2462,15 @@\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(plus:<VWIDE>\n \t  (mult:<VWIDE>\n-\t    (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t      (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-\t      (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-\t    (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n-\t      (vec_select:<VEL>\n-\t\t(match_operand:<VCOND> 4 \"register_operand\" \"<vwx>\")\n-\t\t(parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")])))))\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_select:<VHALF>\n+\t\t(match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t(match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCOND> 4 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")])))))\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -2488,13 +2499,15 @@\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n \t(plus:<VWIDE>\n \t  (mult:<VWIDE>\n-\t    (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t      (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-\t      (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-\t    (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n-\t      (vec_select:<VEL>\n-\t\t(match_operand:<VCONQ> 4 \"register_operand\" \"<vwx>\")\n-\t\t(parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")])))))\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_select:<VHALF>\n+\t\t(match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t(match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCONQ> 4 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")])))))\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n   {\n@@ -2526,8 +2539,8 @@\n      (mult:<VWIDE>\n        (ANY_EXTEND:<VWIDE>\n \t (match_operand:<VCOND> 2 \"register_operand\" \"w\"))\n-       (ANY_EXTEND:<VWIDE>\n-\t (vec_duplicate:<VCOND>\n+       (vec_duplicate:<VWIDE>\n+\t (ANY_EXTEND:<VWIDE_S>\n \t   (vec_select:<VEL>\n \t     (match_operand:VDQHS 3 \"register_operand\" \"<vwx>\")\n \t     (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))))))]\n@@ -2544,13 +2557,15 @@\n \t(minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (mult:<VWIDE>\n-\t    (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t      (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-\t      (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-\t    (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n-\t      (vec_select:<VEL>\n-\t\t(match_operand:<VCOND> 4 \"register_operand\" \"<vwx>\")\n-\t\t(parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")]))))\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_select:<VHALF>\n+\t\t(match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t(match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCOND> 4 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")]))))\n \t  )))]\n   \"TARGET_SIMD\"\n   {\n@@ -2580,13 +2595,15 @@\n \t(minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (mult:<VWIDE>\n-\t    (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n-\t      (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-\t      (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-\t    (ANY_EXTEND:<VWIDE> (vec_duplicate:<VHALF>\n-\t      (vec_select:<VEL>\n-\t\t(match_operand:<VCONQ> 4 \"register_operand\" \"<vwx>\")\n-\t\t(parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")]))))\n+\t    (ANY_EXTEND:<VWIDE>\n+\t      (vec_select:<VHALF>\n+\t\t(match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t(match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t    (vec_duplicate:<VWIDE>\n+\t      (ANY_EXTEND:<VWIDE_S>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCONQ> 4 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 5 \"immediate_operand\" \"i\")]))))\n \t  )))]\n   \"TARGET_SIMD\"\n   {\n@@ -5313,12 +5330,12 @@\n \t    (mult:<VWIDE>\n \t      (sign_extend:<VWIDE>\n \t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-\t      (sign_extend:<VWIDE>\n-\t\t(vec_duplicate:VD_HSI\n+\t      (vec_duplicate:<VWIDE>\n+\t\t(sign_extend:<VWIDE_S>\n \t\t  (vec_select:<VEL>\n \t\t    (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n \t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n-              ))\n+\t      ))\n \t    (const_int 1))\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n@@ -5338,12 +5355,12 @@\n \t    (mult:<VWIDE>\n \t      (sign_extend:<VWIDE>\n \t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-\t      (sign_extend:<VWIDE>\n-\t\t(vec_duplicate:VD_HSI\n+\t      (vec_duplicate:<VWIDE>\n+\t\t(sign_extend:<VWIDE_S>\n \t\t  (vec_select:<VEL>\n \t\t    (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n \t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n-              ))\n+\t      ))\n \t    (const_int 1))))]\n   \"TARGET_SIMD\"\n   {\n@@ -5363,12 +5380,12 @@\n \t    (mult:<VWIDE>\n \t      (sign_extend:<VWIDE>\n \t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-\t      (sign_extend:<VWIDE>\n-\t\t(vec_duplicate:VD_HSI\n+\t      (vec_duplicate:<VWIDE>\n+\t\t(sign_extend:<VWIDE_S>\n \t\t  (vec_select:<VEL>\n \t\t    (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n-              ))\n+\t      ))\n \t    (const_int 1))))]\n   \"TARGET_SIMD\"\n   {\n@@ -5386,12 +5403,12 @@\n \t    (mult:<VWIDE>\n \t      (sign_extend:<VWIDE>\n \t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-\t      (sign_extend:<VWIDE>\n-\t\t(vec_duplicate:VD_HSI\n+\t      (vec_duplicate:<VWIDE>\n+\t\t(sign_extend:<VWIDE_S>\n \t\t  (vec_select:<VEL>\n \t\t    (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n-              ))\n+\t      ))\n \t    (const_int 1))\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n   \"TARGET_SIMD\"\n@@ -5507,8 +5524,8 @@\n \t      (mult:<VWIDE>\n \t\t(sign_extend:<VWIDE>\n \t\t      (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-\t\t(sign_extend:<VWIDE>\n-\t\t  (vec_duplicate:VD_HSI\n+\t\t(vec_duplicate:<VWIDE>\n+\t\t  (sign_extend:<VWIDE_S>\n \t\t    (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t      (const_int 1))))]\n   \"TARGET_SIMD\"\n@@ -5523,8 +5540,8 @@\n \t      (mult:<VWIDE>\n \t\t(sign_extend:<VWIDE>\n \t\t      (match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n-\t\t(sign_extend:<VWIDE>\n-\t\t  (vec_duplicate:VD_HSI\n+\t\t(vec_duplicate:<VWIDE>\n+\t\t  (sign_extend:<VWIDE_S>\n \t\t    (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t      (const_int 1))\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n@@ -5601,11 +5618,11 @@\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n \t\t(sign_extend:<VWIDE>\n-                  (vec_select:<VHALF>\n-                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n-\t\t(sign_extend:<VWIDE>\n-                  (vec_duplicate:<VHALF>\n+\t\t  (vec_select:<VHALF>\n+\t\t    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(vec_duplicate:<VWIDE>\n+\t\t  (sign_extend:<VWIDE_S>\n \t\t    (vec_select:<VEL>\n \t\t      (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n \t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n@@ -5622,15 +5639,15 @@\n \n (define_insn \"aarch64_sqdmlal2_lane<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_plus:<VWIDE>\n+\t(ss_plus:<VWIDE>\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n \t\t(sign_extend:<VWIDE>\n-                  (vec_select:<VHALF>\n-                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n-\t\t(sign_extend:<VWIDE>\n-                  (vec_duplicate:<VHALF>\n+\t\t  (vec_select:<VHALF>\n+\t\t    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(vec_duplicate:<VWIDE>\n+\t\t  (sign_extend:<VWIDE_S>\n \t\t    (vec_select:<VEL>\n \t\t      (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n \t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n@@ -5648,16 +5665,16 @@\n \n (define_insn \"aarch64_sqdmlsl2_laneq<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_minus:<VWIDE>\n+\t(ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n \t\t(sign_extend:<VWIDE>\n-                  (vec_select:<VHALF>\n-                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n-\t\t(sign_extend:<VWIDE>\n-                  (vec_duplicate:<VHALF>\n+\t\t  (vec_select:<VHALF>\n+\t\t    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(vec_duplicate:<VWIDE>\n+\t\t  (sign_extend:<VWIDE_S>\n \t\t    (vec_select:<VEL>\n \t\t      (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n@@ -5674,15 +5691,15 @@\n \n (define_insn \"aarch64_sqdmlal2_laneq<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_plus:<VWIDE>\n+\t(ss_plus:<VWIDE>\n \t  (ss_ashift:<VWIDE>\n \t      (mult:<VWIDE>\n \t\t(sign_extend:<VWIDE>\n-                  (vec_select:<VHALF>\n-                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n-\t\t(sign_extend:<VWIDE>\n-                  (vec_duplicate:<VHALF>\n+\t\t  (vec_select:<VHALF>\n+\t\t    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(vec_duplicate:<VWIDE>\n+\t\t  (sign_extend:<VWIDE_S>\n \t\t    (vec_select:<VEL>\n \t\t      (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n@@ -5734,16 +5751,16 @@\n \n (define_insn \"aarch64_sqdmlsl2_n<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_minus:<VWIDE>\n+\t(ss_minus:<VWIDE>\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n \t      (sign_extend:<VWIDE>\n-                (vec_select:<VHALF>\n-                  (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                  (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n-\t      (sign_extend:<VWIDE>\n-                (vec_duplicate:<VHALF>\n+\t\t(vec_select:<VHALF>\n+\t\t  (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t  (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t      (vec_duplicate:<VWIDE>\n+\t\t(sign_extend:<VWIDE_S>\n \t\t  (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t    (const_int 1))))]\n   \"TARGET_SIMD\"\n@@ -5753,15 +5770,15 @@\n \n (define_insn \"aarch64_sqdmlal2_n<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_plus:<VWIDE>\n+\t(ss_plus:<VWIDE>\n \t  (ss_ashift:<VWIDE>\n \t    (mult:<VWIDE>\n \t      (sign_extend:<VWIDE>\n-                (vec_select:<VHALF>\n-                  (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-                  (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n-\t      (sign_extend:<VWIDE>\n-                (vec_duplicate:<VHALF>\n+\t\t(vec_select:<VHALF>\n+\t\t  (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+\t\t  (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t      (vec_duplicate:<VWIDE>\n+\t\t(sign_extend:<VWIDE_S>\n \t\t  (match_operand:<VEL> 3 \"register_operand\" \"<vwx>\"))))\n \t    (const_int 1))\n \t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")))]\n@@ -5806,13 +5823,13 @@\n \n (define_insn \"aarch64_sqdmull_lane<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_ashift:<VWIDE>\n+\t(ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n \t       (sign_extend:<VWIDE>\n \t\t (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n-\t       (sign_extend:<VWIDE>\n-                 (vec_duplicate:VD_HSI\n-                   (vec_select:<VEL>\n+\t       (vec_duplicate:<VWIDE>\n+\t\t (sign_extend:<VWIDE_S>\n+\t\t   (vec_select:<VEL>\n \t\t     (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n \t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n \t       ))\n@@ -5827,13 +5844,13 @@\n \n (define_insn \"aarch64_sqdmull_laneq<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_ashift:<VWIDE>\n+\t(ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n \t       (sign_extend:<VWIDE>\n \t\t (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n-\t       (sign_extend:<VWIDE>\n-                 (vec_duplicate:VD_HSI\n-                   (vec_select:<VEL>\n+\t       (vec_duplicate:<VWIDE>\n+\t\t (sign_extend:<VWIDE_S>\n+\t\t   (vec_select:<VEL>\n \t\t     (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n \t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n \t       ))\n@@ -5890,13 +5907,13 @@\n \n (define_insn \"aarch64_sqdmull_n<mode>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_ashift:<VWIDE>\n+\t(ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n \t       (sign_extend:<VWIDE>\n \t\t (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n-\t       (sign_extend:<VWIDE>\n-                 (vec_duplicate:VD_HSI\n-                   (match_operand:<VEL> 2 \"register_operand\" \"<vwx>\")))\n+\t       (vec_duplicate:<VWIDE>\n+\t\t (sign_extend:<VWIDE_S>\n+\t\t   (match_operand:<VEL> 2 \"register_operand\" \"<vwx>\")))\n \t       )\n \t     (const_int 1)))]\n   \"TARGET_SIMD\"\n@@ -5906,8 +5923,6 @@\n \n ;; vqdmull2\n \n-\n-\n (define_insn \"aarch64_sqdmull2<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n         (ss_ashift:<VWIDE>\n@@ -5943,15 +5958,15 @@\n \n (define_insn \"aarch64_sqdmull2_lane<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_ashift:<VWIDE>\n+\t(ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n \t       (sign_extend:<VWIDE>\n \t\t (vec_select:<VHALF>\n-                   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-                   (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n-\t       (sign_extend:<VWIDE>\n-                 (vec_duplicate:<VHALF>\n-                   (vec_select:<VEL>\n+\t\t   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t       (vec_duplicate:<VWIDE>\n+\t\t (sign_extend:<VWIDE_S>\n+\t\t   (vec_select:<VEL>\n \t\t     (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n \t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n \t       ))\n@@ -5966,15 +5981,15 @@\n \n (define_insn \"aarch64_sqdmull2_laneq<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_ashift:<VWIDE>\n+\t(ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n \t       (sign_extend:<VWIDE>\n \t\t (vec_select:<VHALF>\n-                   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-                   (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n-\t       (sign_extend:<VWIDE>\n-                 (vec_duplicate:<VHALF>\n-                   (vec_select:<VEL>\n+\t\t   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t       (vec_duplicate:<VWIDE>\n+\t\t (sign_extend:<VWIDE_S>\n+\t\t   (vec_select:<VEL>\n \t\t     (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n \t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n \t       ))\n@@ -6019,15 +6034,15 @@\n \n (define_insn \"aarch64_sqdmull2_n<mode>_internal\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n-        (ss_ashift:<VWIDE>\n+\t(ss_ashift:<VWIDE>\n \t     (mult:<VWIDE>\n \t       (sign_extend:<VWIDE>\n \t\t (vec_select:<VHALF>\n-                   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-                   (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n-\t       (sign_extend:<VWIDE>\n-                 (vec_duplicate:<VHALF>\n-                   (match_operand:<VEL> 2 \"register_operand\" \"<vwx>\")))\n+\t\t   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t\t   (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t       (vec_duplicate:<VWIDE>\n+\t\t (sign_extend:<VWIDE_S>\n+\t\t   (match_operand:<VEL> 2 \"register_operand\" \"<vwx>\")))\n \t       )\n \t     (const_int 1)))]\n   \"TARGET_SIMD\""}, {"sha": "a719f57870fc5e1d363486e9c4c8df23aa006849", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc9db6a989671bedf19e61bd1b21f79588e99da/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc9db6a989671bedf19e61bd1b21f79588e99da/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=3bc9db6a989671bedf19e61bd1b21f79588e99da", "patch": "@@ -1717,22 +1717,35 @@ simplify_context::simplify_unary_operation_1 (rtx_code code, machine_mode mode,\n       && vec_duplicate_p (op, &elt)\n       && code != VEC_DUPLICATE)\n     {\n-      /* Try applying the operator to ELT and see if that simplifies.\n-\t We can duplicate the result if so.\n+      if (code == SIGN_EXTEND || code == ZERO_EXTEND)\n+\t/* Enforce a canonical order of VEC_DUPLICATE wrt other unary\n+\t   operations by promoting VEC_DUPLICATE to the root of the expression\n+\t   (as far as possible).  */\n+\ttemp = simplify_gen_unary (code, GET_MODE_INNER (mode),\n+\t\t\t\t   elt, GET_MODE_INNER (GET_MODE (op)));\n+      else\n+\t/* Try applying the operator to ELT and see if that simplifies.\n+\t   We can duplicate the result if so.\n \n-\t The reason we don't use simplify_gen_unary is that it isn't\n-\t necessarily a win to convert things like:\n+\t   The reason we traditionally haven't used simplify_gen_unary\n+\t   for these codes is that it didn't necessarily seem to be a\n+\t   win to convert things like:\n \n-\t   (neg:V (vec_duplicate:V (reg:S R)))\n+\t     (neg:V (vec_duplicate:V (reg:S R)))\n \n-\t to:\n+\t   to:\n \n-\t   (vec_duplicate:V (neg:S (reg:S R)))\n+\t     (vec_duplicate:V (neg:S (reg:S R)))\n \n-\t The first might be done entirely in vector registers while the\n-\t second might need a move between register files.  */\n-      temp = simplify_unary_operation (code, GET_MODE_INNER (mode),\n-\t\t\t\t       elt, GET_MODE_INNER (GET_MODE (op)));\n+\t   The first might be done entirely in vector registers while the\n+\t   second might need a move between register files.\n+\n+\t   However, there also cases where promoting the vec_duplicate is\n+\t   more efficient, and there is definite value in having a canonical\n+\t   form when matching instruction patterns.  We should consider\n+\t   extending the simplify_gen_unary code above to more cases.  */\n+\ttemp = simplify_unary_operation (code, GET_MODE_INNER (mode),\n+\t\t\t\t\t elt, GET_MODE_INNER (GET_MODE (op)));\n       if (temp)\n \treturn gen_vec_duplicate (mode, temp);\n     }"}]}