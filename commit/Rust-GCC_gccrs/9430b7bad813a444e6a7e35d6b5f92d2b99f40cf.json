{"sha": "9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQzMGI3YmFkODEzYTQ0NGU2YTdlMzVkNmI1ZjkyZDJiOTlmNDBjZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-10-26T19:19:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-10-26T19:19:25Z"}, "message": "re PR debug/54970 (Missing DW_OP_GNU_implicit_pointer in debuginfo)\n\n\tPR debug/54970\n\t* cfgexpand.c (expand_debug_expr): Expand &MEM_REF[&var, n]\n\tas DEBUG_IMPLICIT_PTR + n if &var expands to DEBUG_IMPLICIT_PTR.\n\t* tree-sra.c (create_access_replacement): Allow also MEM_REFs\n\twith ADDR_EXPR first operand in DECL_DEBUG_EXPR expressions.\n\t* var-tracking.c (track_expr_p): Handle MEM_REFs in DECL_DEBUG_EXPR\n\texpressions.\n\t* dwarf2out.c (add_var_loc_to_decl): Likewise.\n\n\tPR debug/54971\n\t* gcc.dg/guality/pr54970.c: New test.\n\nFrom-SVN: r192860", "tree": {"sha": "007004e6f0b36e0efb8b580543d475b492da6928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/007004e6f0b36e0efb8b580543d475b492da6928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c88538b7436c2e46f308b9b3410f04572078c2ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88538b7436c2e46f308b9b3410f04572078c2ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c88538b7436c2e46f308b9b3410f04572078c2ae"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "7a048726de395980620491177e1e880d26360534", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -1,3 +1,14 @@\n+2012-10-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/54970\n+\t* cfgexpand.c (expand_debug_expr): Expand &MEM_REF[&var, n]\n+\tas DEBUG_IMPLICIT_PTR + n if &var expands to DEBUG_IMPLICIT_PTR.\n+\t* tree-sra.c (create_access_replacement): Allow also MEM_REFs\n+\twith ADDR_EXPR first operand in DECL_DEBUG_EXPR expressions.\n+\t* var-tracking.c (track_expr_p): Handle MEM_REFs in DECL_DEBUG_EXPR\n+\texpressions.\n+\t* dwarf2out.c (add_var_loc_to_decl): Likewise.\n+\n 2012-10-26  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadedge.c (cond_arg_set_in_bb): Use last stmt."}, {"sha": "ba86eb571eaf887b72f4b185ca21e1421e6b8b39", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -3284,6 +3284,27 @@ expand_debug_expr (tree exp)\n \t\t}\n \t    }\n \n+\t  if (TREE_CODE (TREE_OPERAND (exp, 0)) == MEM_REF\n+\t      && TREE_CODE (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n+\t\t == ADDR_EXPR)\n+\t    {\n+\t      op0 = expand_debug_expr (TREE_OPERAND (TREE_OPERAND (exp, 0),\n+\t\t\t\t\t\t     0));\n+\t      if (op0 != NULL\n+\t\t  && (GET_CODE (op0) == DEBUG_IMPLICIT_PTR\n+\t\t      || (GET_CODE (op0) == PLUS\n+\t\t\t  && GET_CODE (XEXP (op0, 0)) == DEBUG_IMPLICIT_PTR\n+\t\t\t  && CONST_INT_P (XEXP (op0, 1)))))\n+\t\t{\n+\t\t  op1 = expand_debug_expr (TREE_OPERAND (TREE_OPERAND (exp, 0),\n+\t\t\t\t\t\t\t 1));\n+\t\t  if (!op1 || !CONST_INT_P (op1))\n+\t\t    return NULL;\n+\n+\t\t  return plus_constant (mode, op0, INTVAL (op1));\n+\t\t}\n+\t    }\n+\n \t  return NULL;\n \t}\n "}, {"sha": "24c750656560945bacea66267fc95357c83a8452", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -4622,7 +4622,10 @@ add_var_loc_to_decl (tree decl, rtx loc_note, const char *label)\n   if (DECL_DEBUG_EXPR_IS_FROM (decl))\n     {\n       tree realdecl = DECL_DEBUG_EXPR (decl);\n-      if (realdecl && handled_component_p (realdecl))\n+      if (realdecl\n+\t  && (handled_component_p (realdecl)\n+\t      || (TREE_CODE (realdecl) == MEM_REF\n+\t\t  && TREE_CODE (TREE_OPERAND (realdecl, 0)) == ADDR_EXPR)))\n \t{\n \t  HOST_WIDE_INT maxsize;\n \t  tree innerdecl;"}, {"sha": "b3b6facf1c658997f7f6f718c563aba247777d4c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -1,3 +1,9 @@\n+2012-10-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/54970\n+\tPR debug/54971\n+\t* gcc.dg/guality/pr54970.c: New test.\n+\n 2012-10-26  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54984"}, {"sha": "bd940e33df9cf15c61f0b3d74e3c97fdfbf552a1", "filename": "gcc/testsuite/gcc.dg/guality/pr54970.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr54970.c?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -0,0 +1,47 @@\n+/* PR debug/54970 */\n+/* PR debug/54971 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+#include \"../nop.h\"\n+\n+int\n+main ()\n+{\n+  int a[] = { 1, 2, 3 };\t/* { dg-final { gdb-test 15 \"a\\[0\\]\" \"1\" } } */\n+  int *p = a + 2;\t\t/* { dg-final { gdb-test 15 \"a\\[1\\]\" \"2\" } } */\n+  int *q = a + 1;\t\t/* { dg-final { gdb-test 15 \"a\\[2\\]\" \"3\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 15 \"*p\" \"3\" } } */\n+  asm volatile (\"NOP\");\t\t/* { dg-final { gdb-test 15 \"*q\" \"2\" } } */\n+  *p += 10;\t\t\t/* { dg-final { gdb-test 20 \"a\\[0\\]\" \"1\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 20 \"a\\[1\\]\" \"2\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 20 \"a\\[2\\]\" \"13\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 20 \"*p\" \"13\" } } */\n+  asm volatile (\"NOP\");\t\t/* { dg-final { gdb-test 20 \"*q\" \"2\" } } */\n+  *q += 10;\t\t\t/* { dg-final { gdb-test 25 \"a\\[0\\]\" \"1\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 25 \"a\\[1\\]\" \"12\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 25 \"a\\[2\\]\" \"13\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 25 \"*p\" \"13\" } } */\n+  asm volatile (\"NOP\");\t\t/* { dg-final { gdb-test 25 \"*q\" \"12\" } } */\n+  __builtin_memcpy (&a, (int [3]) { 4, 5, 6 }, sizeof (a));\n+\t\t\t\t/* { dg-final { gdb-test 31 \"a\\[0\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 31 \"a\\[1\\]\" \"5\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 31 \"a\\[2\\]\" \"6\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 31 \"*p\" \"6\" } } */\n+  asm volatile (\"NOP\");\t\t/* { dg-final { gdb-test 31 \"*q\" \"5\" } } */\n+  *p += 20;\t\t\t/* { dg-final { gdb-test 36 \"a\\[0\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 36 \"a\\[1\\]\" \"5\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 36 \"a\\[2\\]\" \"26\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 36 \"*p\" \"26\" } } */\n+  asm volatile (\"NOP\");\t\t/* { dg-final { gdb-test 36 \"*q\" \"5\" } } */\n+  *q += 20;\t\t\t/* { dg-final { gdb-test 45 \"a\\[0\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"a\\[1\\]\" \"25\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"a\\[2\\]\" \"26\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"*p\" \"26\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"p\\[-1\\]\" \"25\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"p\\[-2\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"q\\[-1\\]\" \"4\" } } */\n+\t\t\t\t/* { dg-final { gdb-test 45 \"q\\[1\\]\" \"26\" } } */\n+  asm volatile (\"NOP\");\t\t/* { dg-final { gdb-test 45 \"*q\" \"25\" } } */\n+  return 0;\n+}"}, {"sha": "bf1a0f209f6b568a916cc2f1fbee4f78e3663357", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -1,7 +1,7 @@\n /* Scalar Replacement of Aggregates (SRA) converts some structure\n    references into scalar references, exposing them to the scalar\n    optimizers.\n-   Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+   Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n    Contributed by Martin Jambor <mjambor@suse.cz>\n \n This file is part of GCC.\n@@ -1941,7 +1941,8 @@ create_access_replacement (struct access *access)\n \t and that get_ref_base_and_extent works properly on the\n \t expression.  It cannot handle accesses at a non-constant offset\n \t though, so just give up in those cases.  */\n-      for (d = debug_expr; !fail && handled_component_p (d);\n+      for (d = debug_expr;\n+\t   !fail && (handled_component_p (d) || TREE_CODE (d) == MEM_REF);\n \t   d = TREE_OPERAND (d, 0))\n \tswitch (TREE_CODE (d))\n \t  {\n@@ -1959,6 +1960,12 @@ create_access_replacement (struct access *access)\n \t\t&& TREE_CODE (TREE_OPERAND (d, 2)) != INTEGER_CST)\n \t      fail = true;\n \t    break;\n+\t  case MEM_REF:\n+\t    if (TREE_CODE (TREE_OPERAND (d, 0)) != ADDR_EXPR)\n+\t      fail = true;\n+\t    else\n+\t      d = TREE_OPERAND (d, 0);\n+\t    break;\n \t  default:\n \t    break;\n \t  }"}, {"sha": "9b28c7d273cb318c4e58694cd274dad275927f82", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9430b7bad813a444e6a7e35d6b5f92d2b99f40cf/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=9430b7bad813a444e6a7e35d6b5f92d2b99f40cf", "patch": "@@ -4921,7 +4921,9 @@ track_expr_p (tree expr, bool need_rtl)\n \trealdecl = expr;\n       else if (!DECL_P (realdecl))\n \t{\n-\t  if (handled_component_p (realdecl))\n+\t  if (handled_component_p (realdecl)\n+\t      || (TREE_CODE (realdecl) == MEM_REF\n+\t\t  && TREE_CODE (TREE_OPERAND (realdecl, 0)) == ADDR_EXPR))\n \t    {\n \t      HOST_WIDE_INT bitsize, bitpos, maxsize;\n \t      tree innerdecl"}]}