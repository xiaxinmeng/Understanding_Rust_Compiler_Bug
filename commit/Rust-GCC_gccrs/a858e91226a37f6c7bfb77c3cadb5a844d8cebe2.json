{"sha": "a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg1OGU5MTIyNmEzN2Y2YzdiZmI3N2MzY2FkYjVhODQ0ZDhjZWJlMg==", "commit": {"author": {"name": "Jan Beulich", "email": "jbeulich@novell.com", "date": "2009-08-28T15:28:11Z"}, "committer": {"name": "Jan Beulich", "email": "jbeulich@gcc.gnu.org", "date": "2009-08-28T15:28:11Z"}, "message": "netware.c: Include langhooks.h.\n\n2009-08-28  Jan Beulich  <jbeulich@novell.com>\n\n\t* config/i386/netware.c: Include langhooks.h.\n\t(i386_nlm_encode_section_info): Simplify.\n\t(netware_override_options): Delete.\n\t* config/i386/netware.h (netware_override_options): Delete\n\tdeclaration.\n\t(OVERRIDE_OPTIONS): Delete definition.\n\t(SUBTARGET_OVERRIDE_OPTIONS): Define.\n\t(ASM_COMMENT_START): Define.\n\t* config/i386/nwld.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Define.\n\nFrom-SVN: r151164", "tree": {"sha": "ded976c8c58adebe751df24a91c1962dc65b0499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ded976c8c58adebe751df24a91c1962dc65b0499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/comments", "author": null, "committer": null, "parents": [{"sha": "39ba7b7db1164ba2b3ae770d0472957c7452efba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39ba7b7db1164ba2b3ae770d0472957c7452efba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39ba7b7db1164ba2b3ae770d0472957c7452efba"}], "stats": {"total": 85, "additions": 39, "deletions": 46}, "files": [{"sha": "2a140478536925027e1e1bc55b474427321fb871", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "patch": "@@ -1,3 +1,15 @@\n+2009-08-28  Jan Beulich  <jbeulich@novell.com>\n+\n+\t* config/i386/netware.c: Include langhooks.h.\n+\t(i386_nlm_encode_section_info): Simplify.\n+\t(netware_override_options): Delete.\n+\t* config/i386/netware.h (netware_override_options): Delete\n+\tdeclaration.\n+\t(OVERRIDE_OPTIONS): Delete definition.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Define.\n+\t(ASM_COMMENT_START): Define.\n+\t* config/i386/nwld.h (SUBSUBTARGET_OVERRIDE_OPTIONS): Define.\n+\n 2009-08-28  Jan Beulich  <jbeulich@novell.com>\n \n \t* configure.ac: For in-tree ld, do a plain version check to"}, {"sha": "fa9ffbbeac13853538e9cdc94636109df4c7f0f8", "filename": "gcc/config/i386/netware.c", "status": "modified", "additions": 7, "deletions": 35, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2Fconfig%2Fi386%2Fnetware.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2Fconfig%2Fi386%2Fnetware.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.c?ref=a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"tm_p.h\"\n #include \"toplev.h\"\n+#include \"langhooks.h\"\n #include \"ggc.h\"\n \n /* Return string which is the function name, identified by ID, modified\n@@ -179,31 +180,23 @@ i386_nlm_encode_section_info (tree decl, rtx rtl, int first)\n {\n   default_encode_section_info (decl, rtl, first);\n \n-  if (first\n-      && TREE_CODE (decl) == FUNCTION_DECL\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n       /* Do not change the identifier if a verbatim asmspec\n \t or if stdcall suffix already added.  */\n       && *IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)) != '*'\n-      && !strchr (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), '@'))\n+      && !strchr (IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)), '@')\n+      /* FIXME:  Imported stdcall names are not modified by the Ada frontend.\n+\t Check and decorate the RTL name now.  */\n+      && strcmp (lang_hooks.name, \"GNU Ada\") == 0)\n     {\n-      /* FIXME: In Ada, and perhaps other language frontends,\n-\t imported stdcall names may not yet have been modified.\n-\t Check and do it know.  */\n       rtx symbol = XEXP (rtl, 0);\n       tree new_id;\n       tree old_id = DECL_ASSEMBLER_NAME (decl);\n \n       gcc_assert (GET_CODE (symbol) == SYMBOL_REF);\n \n       if ((new_id = i386_nlm_maybe_mangle_decl_assembler_name (decl, old_id)))\n-\t{\n-\t  /* These attributes must be present on first declaration,\n-\t     change_decl_assembler_name will warn if they are added\n-\t     later and the decl has been referenced, but duplicate_decls\n-\t     should catch the mismatch first.  */\n-\t  change_decl_assembler_name (decl, new_id);\n-\t  XSTR (symbol, 0) = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n-\t}\n+\tXSTR (symbol, 0) = IDENTIFIER_POINTER (new_id);\n     }\n }\n \n@@ -233,24 +226,3 @@ i386_nlm_strip_name_encoding (const char *str)\n     }\n   return name;\n }\n-\n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n-void\n-netware_override_options (void)\n-{\n-  override_options ();\n-\n-  if (flag_pic)\n-    {\n-      error (\"-fPIC and -fpic are not supported for this target\");\n-      flag_pic = 0;\n-    }\n-}"}, {"sha": "6b423e36fc14e1cc7f1690cd4a6fa33436a55f5b", "filename": "gcc/config/i386/netware.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "patch": "@@ -72,17 +72,16 @@ along with GCC; see the file COPYING3.  If not see\n #define TARGET_SUBTARGET_DEFAULT (MASK_80387 | MASK_IEEE_FP | \\\n \tMASK_FLOAT_RETURNS | MASK_ALIGN_DOUBLE | MASK_MS_BITFIELD_LAYOUT)\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-#undef  OVERRIDE_OPTIONS\n-extern void netware_override_options (void);\n-#define OVERRIDE_OPTIONS netware_override_options ()\n+/* Don't allow flag_pic to propagate since invalid relocations will\n+   result otherwise.  */\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-fPIC and -fpic are not supported for this target\");\t\\\n+      flag_pic = 0;\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0)\n \n #undef MATH_LIBRARY\n #define MATH_LIBRARY \"\"\n@@ -99,6 +98,9 @@ extern void netware_override_options (void);\n #undef KEEP_AGGREGATE_RETURN_POINTER\n #define KEEP_AGGREGATE_RETURN_POINTER 1\n \n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"#\"\n+\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) (svr4_dbx_register_map[n])\n "}, {"sha": "3a0afc8b63d6198e6dd6436359bbf784218d997c", "filename": "gcc/config/i386/nwld.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2Fconfig%2Fi386%2Fnwld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a858e91226a37f6c7bfb77c3cadb5a844d8cebe2/gcc%2Fconfig%2Fi386%2Fnwld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnwld.h?ref=a858e91226a37f6c7bfb77c3cadb5a844d8cebe2", "patch": "@@ -55,6 +55,13 @@ void nwld_named_section_asm_out_destructor (rtx, int);\n #define TARGET_ASM_CONSTRUCTOR nwld_named_section_asm_out_constructor\n #define TARGET_ASM_DESTRUCTOR  nwld_named_section_asm_out_destructor\n \n+#define SUBSUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  /* XXX This can be enabled once gas output meets nwld's needs. */\t\\\n+  /* if (!flag_unwind_tables && !flag_exceptions) */\t\t\t\\\n+    flag_dwarf2_cfi_asm = 0;\t\t\t\t\t\t\\\n+} while (0)\n+\n #undef  EH_FRAME_SECTION_NAME\n #define EH_FRAME_SECTION_NAME \".eh_frame\"TARGET_SUB_SECTION_SEPARATOR\n "}]}