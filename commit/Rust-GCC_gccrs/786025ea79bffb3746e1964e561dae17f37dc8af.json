{"sha": "786025ea79bffb3746e1964e561dae17f37dc8af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2MDI1ZWE3OWJmZmIzNzQ2ZTE5NjRlNTYxZGFlMTdmMzdkYzhhZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-09-20T21:19:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-20T21:19:36Z"}, "message": "re PR c/33238 (ICE on statement expression using variable-sized structure in tree_low_cst, at tree.c:4502)\n\n\tPR c/33238\n\tPR c/27301\n\t* gimplify.c (gimplify_vla_decl): New function.\n\t(gimplify_decl_expr): Move VLA decl handling to gimplify_vla_decl.\n\tCall it.\n\t(gimplify_target_expr): Handle variable length TARGET_EXPRs.\n\n\t* gcc.c-torture/execute/20070919-1.c: New test.\n\t* gcc.dg/pr33238.c: New test.\n\t* gcc.dg/pr27301.c: New test.\n\nFrom-SVN: r128629", "tree": {"sha": "29a12a54176cdbb269b5985bcd5053b8b884383b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29a12a54176cdbb269b5985bcd5053b8b884383b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786025ea79bffb3746e1964e561dae17f37dc8af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786025ea79bffb3746e1964e561dae17f37dc8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786025ea79bffb3746e1964e561dae17f37dc8af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786025ea79bffb3746e1964e561dae17f37dc8af/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "334a954334bb79ff5acfbbc42759524965db2026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334a954334bb79ff5acfbbc42759524965db2026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334a954334bb79ff5acfbbc42759524965db2026"}], "stats": {"total": 164, "additions": 130, "deletions": 34}, "files": [{"sha": "d2f5a59366a1cb396e42519a818e17d5f5e7500b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=786025ea79bffb3746e1964e561dae17f37dc8af", "patch": "@@ -1,3 +1,12 @@\n+2007-09-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/33238\n+\tPR c/27301\n+\t* gimplify.c (gimplify_vla_decl): New function.\n+\t(gimplify_decl_expr): Move VLA decl handling to gimplify_vla_decl.\n+\tCall it.\n+\t(gimplify_target_expr): Handle variable length TARGET_EXPRs.\n+\n 2007-09-20  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* doc/invoke.texi (-minterlink-mips16): Document."}, {"sha": "00a3cf1189a1aab3b493a366eafbfda622a35074", "filename": "gcc/gimplify.c", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=786025ea79bffb3746e1964e561dae17f37dc8af", "patch": "@@ -1211,6 +1211,41 @@ gimplify_return_expr (tree stmt, tree *pre_p)\n   return GS_ALL_DONE;\n }\n \n+static void\n+gimplify_vla_decl (tree decl, tree *stmt_p)\n+{\n+  /* This is a variable-sized decl.  Simplify its size and mark it\n+     for deferred expansion.  Note that mudflap depends on the format\n+     of the emitted code: see mx_register_decls().  */\n+  tree t, addr, ptr_type;\n+\n+  gimplify_one_sizepos (&DECL_SIZE (decl), stmt_p);\n+  gimplify_one_sizepos (&DECL_SIZE_UNIT (decl), stmt_p);\n+\n+  /* All occurrences of this decl in final gimplified code will be\n+     replaced by indirection.  Setting DECL_VALUE_EXPR does two\n+     things: First, it lets the rest of the gimplifier know what\n+     replacement to use.  Second, it lets the debug info know\n+     where to find the value.  */\n+  ptr_type = build_pointer_type (TREE_TYPE (decl));\n+  addr = create_tmp_var (ptr_type, get_name (decl));\n+  DECL_IGNORED_P (addr) = 0;\n+  t = build_fold_indirect_ref (addr);\n+  SET_DECL_VALUE_EXPR (decl, t);\n+  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n+\n+  t = built_in_decls[BUILT_IN_ALLOCA];\n+  t = build_call_expr (t, 1, DECL_SIZE_UNIT (decl));\n+  t = fold_convert (ptr_type, t);\n+  t = build_gimple_modify_stmt (addr, t);\n+\n+  gimplify_and_add (t, stmt_p);\n+\n+  /* Indicate that we need to restore the stack level when the\n+     enclosing BIND_EXPR is exited.  */\n+  gimplify_ctxp->save_stack = true;\n+}\n+\n /* Gimplifies a DECL_EXPR node *STMT_P by making any necessary allocation\n    and initialization explicit.  */\n \n@@ -1235,38 +1270,7 @@ gimplify_decl_expr (tree *stmt_p)\n       tree init = DECL_INITIAL (decl);\n \n       if (TREE_CODE (DECL_SIZE (decl)) != INTEGER_CST)\n-\t{\n-\t  /* This is a variable-sized decl.  Simplify its size and mark it\n-\t     for deferred expansion.  Note that mudflap depends on the format\n-\t     of the emitted code: see mx_register_decls().  */\n-\t  tree t, addr, ptr_type;\n-\n-\t  gimplify_one_sizepos (&DECL_SIZE (decl), stmt_p);\n-\t  gimplify_one_sizepos (&DECL_SIZE_UNIT (decl), stmt_p);\n-\n-\t  /* All occurrences of this decl in final gimplified code will be\n-\t     replaced by indirection.  Setting DECL_VALUE_EXPR does two\n-\t     things: First, it lets the rest of the gimplifier know what\n-\t     replacement to use.  Second, it lets the debug info know\n-\t     where to find the value.  */\n-\t  ptr_type = build_pointer_type (TREE_TYPE (decl));\n-\t  addr = create_tmp_var (ptr_type, get_name (decl));\n-\t  DECL_IGNORED_P (addr) = 0;\n-\t  t = build_fold_indirect_ref (addr);\n-\t  SET_DECL_VALUE_EXPR (decl, t);\n-\t  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n-\n-\t  t = built_in_decls[BUILT_IN_ALLOCA];\n-\t  t = build_call_expr (t, 1, DECL_SIZE_UNIT (decl));\n-\t  t = fold_convert (ptr_type, t);\n-\t  t = build_gimple_modify_stmt (addr, t);\n-\n-\t  gimplify_and_add (t, stmt_p);\n-\n-\t  /* Indicate that we need to restore the stack level when the\n-\t     enclosing BIND_EXPR is exited.  */\n-\t  gimplify_ctxp->save_stack = true;\n-\t}\n+\tgimplify_vla_decl (decl, stmt_p);\n \n       if (init && init != error_mark_node)\n \t{\n@@ -4411,8 +4415,15 @@ gimplify_target_expr (tree *expr_p, tree *pre_p, tree *post_p)\n   if (init)\n     {\n       /* TARGET_EXPR temps aren't part of the enclosing block, so add it\n-\t to the temps list.  */\n-      gimple_add_tmp_var (temp);\n+\t to the temps list.  Handle also variable length TARGET_EXPRs.  */\n+      if (TREE_CODE (DECL_SIZE (temp)) != INTEGER_CST)\n+\t{\n+\t  if (!TYPE_SIZES_GIMPLIFIED (TREE_TYPE (temp)))\n+\t    gimplify_type_sizes (TREE_TYPE (temp), pre_p);\n+\t  gimplify_vla_decl (temp, pre_p);\n+\t}\n+      else\n+\tgimple_add_tmp_var (temp);\n \n       /* If TARGET_EXPR_INITIAL is void, then the mere evaluation of the\n \t expression is supposed to initialize the slot.  */"}, {"sha": "675351d8dd30b04b19f073615da748d58823cd76", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=786025ea79bffb3746e1964e561dae17f37dc8af", "patch": "@@ -1,3 +1,11 @@\n+2007-09-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/33238\n+\tPR c/27301\n+\t* gcc.c-torture/execute/20070919-1.c: New test.\n+\t* gcc.dg/pr33238.c: New test.\n+\t* gcc.dg/pr27301.c: New test.\n+\n 2007-09-20  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* lib/target-supports.exp (check_effective_target_mips64): New"}, {"sha": "ade3d7e8e112917b8d89d54db2ff08718dfe6751", "filename": "gcc/testsuite/gcc.c-torture/execute/20070919-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20070919-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20070919-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20070919-1.c?ref=786025ea79bffb3746e1964e561dae17f37dc8af", "patch": "@@ -0,0 +1,41 @@\n+/* PR c/33238 */\n+\n+typedef __SIZE_TYPE__ size_t;\n+int memcmp (const void *, const void *, size_t);\n+void abort (void);\n+\n+void\n+__attribute__((noinline))\n+bar (void *x, void *y)\n+{\n+  struct S { char w[8]; } *p = x, *q = y;\n+  if (memcmp (p->w, \"zyxwvut\", 8) != 0)\n+    abort ();\n+  if (memcmp (q[0].w, \"abcdefg\", 8) != 0)\n+    abort ();\n+  if (memcmp (q[1].w, \"ABCDEFG\", 8) != 0)\n+    abort ();\n+  if (memcmp (q[2].w, \"zyxwvut\", 8) != 0)\n+    abort ();\n+  if (memcmp (q[3].w, \"zyxwvut\", 8) != 0)\n+    abort ();\n+}\n+\n+void\n+__attribute__((noinline))\n+foo (void *x, int y)\n+{\n+  struct S { char w[y]; } *p = x, a;\n+  int i;\n+  a = ({ struct S b; b = p[2]; p[3] = b; });\n+  bar (&a, x);\n+}\n+\n+int\n+main (void)\n+{\n+  struct S { char w[8]; } p[4]\n+    = { \"abcdefg\", \"ABCDEFG\", \"zyxwvut\", \"ZYXWVUT\" };\n+  foo (p, 8);\n+  return 0;\n+}"}, {"sha": "3b5a8f55b5d533b39c36b2477d8ad9ee1441598a", "filename": "gcc/testsuite/gcc.dg/pr27301.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27301.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27301.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27301.c?ref=786025ea79bffb3746e1964e561dae17f37dc8af", "patch": "@@ -0,0 +1,15 @@\n+/* PR c/27301 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=gnu89\" } */\n+\n+void\n+foo (void *ptr, long n)\n+{\n+  __asm__ __volatile__ (\"\" :: \"m\" (({ struct { char x[n]; } *p = ptr; *p; })));\n+}\n+\n+void\n+bar (void *ptr, long n)\n+{\n+  __asm__ __volatile__ (\"\" :: \"m\" (*({ struct { char x[n]; } *p = ptr; p; })));\n+}"}, {"sha": "0b399041a867f0909337f243b337dac556257007", "filename": "gcc/testsuite/gcc.dg/pr33238.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33238.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786025ea79bffb3746e1964e561dae17f37dc8af/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33238.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33238.c?ref=786025ea79bffb3746e1964e561dae17f37dc8af", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/33238 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+void\n+reverse (void *x, int y, int z)\n+{\n+  struct { char w[z]; } *p = x, a;\n+  int i, j;\n+  for (i = y - 1, j = 0; j < y / 2; i--, j++)\n+    ({ a = p[i]; p[i] = p[j]; p[j] = a; });\n+}"}]}