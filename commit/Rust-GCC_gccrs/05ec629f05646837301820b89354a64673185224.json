{"sha": "05ec629f05646837301820b89354a64673185224", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlYzYyOWYwNTY0NjgzNzMwMTgyMGI4OTM1NGE2NDY3MzE4NTIyNA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-24T00:16:37Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-04-24T00:16:37Z"}, "message": "Daily bump.", "tree": {"sha": "fd41fd954d87c18509811d2d0691ebe22725be6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd41fd954d87c18509811d2d0691ebe22725be6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05ec629f05646837301820b89354a64673185224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ec629f05646837301820b89354a64673185224", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05ec629f05646837301820b89354a64673185224", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05ec629f05646837301820b89354a64673185224/comments", "author": null, "committer": null, "parents": [{"sha": "9a30a3f06b908e4e781324c2e813cd1db87119df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a30a3f06b908e4e781324c2e813cd1db87119df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a30a3f06b908e4e781324c2e813cd1db87119df"}], "stats": {"total": 201, "additions": 200, "deletions": 1}, "files": [{"sha": "2476259712f81d6424aa554503a19ae3c5d2cfea", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1,3 +1,7 @@\n+2021-04-23  David Faust  <david.faust@oracle.com>\n+\n+\t* MAINTAINERS (Write After Approval): Add myself.\n+\n 2021-04-11  Hafiz Abid Qadeer  <abidh@codesourcery.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "93a196b2ce2074d0e160597fe3d4cccb2bc57158", "filename": "gcc/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1,3 +1,95 @@\n+2021-04-23  YiFei Zhu  <zhuyifei1999@gmail.com>\n+\n+\t* config/bpf/bpf.h (ASM_OUTPUT_ALIGNED_BSS): Use .type and .lcomm.\n+\n+2021-04-23  YiFei Zhu  <zhuyifei1999@gmail.com>\n+\n+\t* config/bpf/bpf.h (FUNCTION_BOUNDARY): Set to 64.\n+\n+2021-04-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100041\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tError out when -m96bit-long-double is used with 64bit targets.\n+\t* config/i386/i386.md (*pushxf_rounded): Remove pattern.\n+\n+2021-04-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-wrapper.c: Remove FIXME about usage of\n+\thardware_concurrency. The function is not on par with\n+\twhat we have now.\n+\n+2021-04-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100182\n+\t* config/i386/sync.md (FILD_ATOMIC/FIST_ATOMIC FP load peephole2):\n+\tCopy operand 3 to operand 4.  Use sse_reg_operand\n+\tas operand 3 predicate.\n+\t(FILD_ATOMIC/FIST_ATOMIC FP load peephole2 with mem blockage): Ditto.\n+\t(LDX_ATOMIC/STX_ATOMIC FP load peephole2): Ditto.\n+\t(LDX_ATOMIC/LDX_ATOMIC FP load peephole2 with mem blockage): Ditto.\n+\t(FILD_ATOMIC/FIST_ATOMIC FP store peephole2):\n+\tCopy operand 1 to operand 0.\n+\t(FILD_ATOMIC/FIST_ATOMIC FP store peephole2 with mem blockage): Ditto.\n+\t(LDX_ATOMIC/STX_ATOMIC FP store peephole2): Ditto.\n+\t(LDX_ATOMIC/LDX_ATOMIC FP store peephole2 with mem blockage): Ditto.\n+\n+2021-04-23  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR rtl-optimization/100230\n+\t* early-remat.c (early_remat::sort_candidates): Use delete[]\n+\tinstead of delete for array allocated with new[].\n+\n+2021-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (lower_cond): Remove VEC_COND_EXPR special-casing.\n+\t(capture_info::capture_info): Likewise.\n+\t(capture_info::walk_match): Likewise.\n+\t(expr::gen_transform): Likewise.\n+\t(dt_simplify::gen_1): Likewise.\n+\t* gimple-match-head.c (maybe_resimplify_conditional_op):\n+\tRemove VEC_COND_EXPR special-casing.\n+\t(gimple_simplify): Likewise.\n+\t* gimple.c (gimple_could_trap_p_1): Adjust.\n+\t* tree-ssa-pre.c (compute_avail): Allow VEC_COND_EXPR\n+\tto participate in PRE.\n+\n+2021-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* cfganal.c (connect_infinite_loops_to_exit): First call\n+\tadd_noreturn_fake_exit_edges.\n+\t* ipa-sra.c (process_scan_results): Do not call the now redundant\n+\tadd_noreturn_fake_exit_edges.\n+\t* predict.c (tree_estimate_probability): Likewise.\n+\t(rebuild_frequencies): Likewise.\n+\t* store-motion.c (one_store_motion_pass): Likewise.\n+\n+2021-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/100222\n+\t* predict.c (pass_profile::execute): Remove redundant call to\n+\tmark_irreducible_loops.\n+\t(report_predictor_hitrates): Likewise.\n+\n+2021-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_nonlinear_expr): Avoid\n+\tvalid_gimple_rhs_p by instead gimplifying to one.\n+\n+2021-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99971\n+\t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):\n+\tAlways use TBAA for loads.\n+\n+2021-04-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100093\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tClear MASK_AVX256_SPLIT_UNALIGNED_LOAD/STORE in x_target_flags\n+\twhen X86_TUNE_AVX256_UNALIGNED_LOAD/STORE_OPTIMAL is enabled\n+\tby target attribute.\n+\n 2021-04-23  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix71.h (PREFERRED_DEBUGGING_TYPE): Change to"}, {"sha": "26da51d2f9be94af8deb9cab57b711433af75949", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1 +1 @@\n-20210423\n+20210424"}, {"sha": "d64cdce676544a572b1c4460bea00fb3ba82125a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1,3 +1,24 @@\n+2021-04-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98767\n+\t* cxx-pretty-print.c (pp_cxx_parameter_declaration_clause):\n+\tAdjust parameter list loop to iterate over 'types' instead of\n+\t'args'.  Output the trailing '...' for a variadic function.\n+\tRemove PARM_DECL support.\n+\t(pp_cxx_requires_expr): Pretty print the parameter list directly\n+\tinstead of going through pp_cxx_parameter_declaration_clause.\n+\n+2021-04-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 2374\n+\t* decl.c (is_direct_enum_init): Check the implicit\n+\tconvertibility requirement added by CWG 2374.\n+\n+2021-04-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* cp-tree.h (STATIC_ASSERT): Prefer static assert.\n+\t* lex.c (init_operators): Remove run-time check.\n+\n 2021-04-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/100161"}, {"sha": "905cd01ebae50ca8509f98a4f5ca942c73974350", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1,3 +1,41 @@\n+2021-04-23  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/98952\n+\t* gcc.target/powerpc/pr98952.c: New test.\n+\n+2021-04-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100041\n+\t* gcc.target/i386/pr79514.c (dg-error):\n+\tExpect error for 64bit targets.\n+\n+2021-04-23  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100182\n+\t* gcc.target/i386/pr100182.c: New test.\n+\t* gcc.target/i386/pr71245-1.c (dg-final): Xfail scan-assembler-not.\n+\t* gcc.target/i386/pr71245-2.c (dg-final): Ditto.\n+\n+2021-04-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98767\n+\t* g++.dg/concepts/diagnostic17.C: New test.\n+\n+2021-04-23  Patrick Palka  <ppalka@redhat.com>\n+\n+\tDR 2374\n+\t* g++.dg/cpp1z/direct-enum-init2.C: New test.\n+\n+2021-04-23  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99971\n+\t* g++.dg/vect/slp-pr99971.cc: New testcase.\n+\n+2021-04-23  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/100093\n+\t* gcc.target/i386/pr100093.c: New test.\n+\n 2021-04-22  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94508"}, {"sha": "4dea57ca514d522bfa89b8812aebd2cc7cfa9038", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1,3 +1,13 @@\n+2021-04-23  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR target/98952\n+\t* config/rs6000/tramp.S (__trampoline_setup, elfv1 #ifdef): Fix\n+\ttrampoline size comparison in 32-bit by reversing test and\n+\tcombining load immediate with compare.\n+\t(__trampoline_setup, elfv2 #ifdef): Fix trampoline size comparison\n+\tin 32-bit by reversing test and combining load immediate with\n+\tcompare.\n+\n 2021-04-05  Florian Weimer  <fweimer@redhat.com>\n \t    Michael Meissner   <meissner@linux.ibm.com>\n "}, {"sha": "380f9f99498ddb69a86ee987911949c15056c7e6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05ec629f05646837301820b89354a64673185224/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05ec629f05646837301820b89354a64673185224/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=05ec629f05646837301820b89354a64673185224", "patch": "@@ -1,3 +1,37 @@\n+2021-04-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100180\n+\t* include/experimental/io_context (io_context): Define\n+\tdummy_pollfd type so that most member functions still compile\n+\twithout <poll.h> and struct pollfd.\n+\n+2021-04-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/io_context (io_context::async_wait): Add\n+\tcomment.\n+\t* include/experimental/socket (basic_socket::async_connect):\n+\tCast wait_type constant to int.\n+\t(basic_datagram_socket::async_receive): Likewise.\n+\t(basic_datagram_socket::async_receive_from): Likewise.\n+\t(basic_datagram_socket::async_send): Likewise.\n+\t(basic_datagram_socket::async_send_to): Likewise.\n+\t(basic_stream_socket::async_receive): Likewise.\n+\t(basic_stream_socket::async_send): Likewise. Use io_context\n+\tparameter directly, instead of via an executor.\n+\t(basic_socket_acceptor::async_accept): Likewise.\n+\n+2021-04-23  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/socket (socket_base::shutdown_type):\n+\t(socket_base::wait_type, socket_base::message_flags):\n+\tRemove enumerators. Initialize constants directly with desired\n+\tvalues.\n+\t(socket_base::message_flags): Make all operators constexpr and\n+\tnoexcept.\n+\t* testsuite/util/testsuite_common_types.h (test_bitmask_values):\n+\tNew test utility.\n+\t* testsuite/experimental/net/socket/socket_base.cc: New test.\n+\n 2021-04-22  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/os/aix/atomicity.h: Delete."}]}