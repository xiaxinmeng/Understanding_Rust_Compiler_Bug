{"sha": "fdace7584056de2f63bde2e3087f26beb6b0f97d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRhY2U3NTg0MDU2ZGUyZjYzYmRlMmUzMDg3ZjI2YmViNmIwZjk3ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-20T09:26:34Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-20T09:29:35Z"}, "message": "i386: Optimize abs expansion [PR97873]\n\nThe patch introduces absM named pattern to generate optimal insn sequence\nfor CMOVE_TARGET targets.  Currently, the expansion goes through neg+max\noptabs, and the following code is generated:\n\n\tmovl    %edi, %eax\n\tnegl    %eax\n\tcmpl    %edi, %eax\n\tcmovl   %edi, %eax\n\nThis sequence is unoptimal in two ways.  a) The compare instruction is\nnot needed, since NEG insn sets the sign flag based on the result.\nThe CMOV can use sign flag to select between negated and original value:\n\n\tmovl    %edi, %eax\n\tnegl    %eax\n\tcmovs   %edi, %eax\n\nb) On some targets, CMOV is undesirable due to its performance issues.\nIn addition to TARGET_EXPAND_ABS bypass, the patch introduces STV\nconversion of abs RTX to use PABS SSE insn:\n\n\tvmovd   %edi, %xmm0\n\tvpabsd  %xmm0, %xmm0\n\tvmovd   %xmm0, %eax\n\nThe patch changes compare mode of NEG instruction to CCGOCmode,\nwhich is the same mode as the mode of SUB instruction. IOW, sign bit\nbecomes usable.\n\nAlso, the mode iterator of <maxmin:code><mode>3 pattern is changed\nto SWI48x instead of SWI248. The purpose of maxmin expander is to\nprepare max/min RTX for STV to eventually convert them to SSE PMAX/PMIN\ninstructions, in order to *avoid* CMOV insns with general registers.\n\n2020-11-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/97873\n\t* config/i386/i386.md (*neg<mode>2_2): Rename from\n\t\"*neg<mode>2_cmpz\".  Use CCGOCmode instead of CCZmode.\n\t(*negsi2_zext): Rename from *negsi2_cmpz_zext.\n\tUse CCGOCmode instead of CCZmode.\n\t(*neg<mode>_ccc_1): New insn pattern.\n\t(*neg<dwi>2_doubleword): Use *neg<mode>_ccc_1.\n\n\t(abs<mode>2): Add FLAGS_REG clobber.\n\tUse TARGET_CMOVE insn predicate.\n\t(*abs<mode>2_1): New insn_and_split pattern.\n\t(*absdi2_doubleword): Ditto.\n\n\t(<maxmin:code><mode>3): Use SWI48x mode iterator.\n\t(*<maxmin:code><mode>3): Use SWI48 mode iterator.\n\n\t* config/i386/i386-features.c\n\t(general_scalar_chain::compute_convert_gain): Handle ABS code.\n\t(general_scalar_chain::convert_insn): Ditto.\n\t(general_scalar_to_vector_candidate_p): Ditto.\n\ngcc/testsuite/\n\tPR target/97873\n\t* gcc.target/i386/pr97873.c: New test.\n\t* gcc.target/i386/pr97873-1.c: New test.", "tree": {"sha": "b9cb3d204fe6f58c6aa1d60ae5d71ed1b46543fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9cb3d204fe6f58c6aa1d60ae5d71ed1b46543fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdace7584056de2f63bde2e3087f26beb6b0f97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdace7584056de2f63bde2e3087f26beb6b0f97d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdace7584056de2f63bde2e3087f26beb6b0f97d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdace7584056de2f63bde2e3087f26beb6b0f97d/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a774a6a2fbeaf7cbcb7a7afe433418f2d740b45b"}], "stats": {"total": 232, "additions": 171, "deletions": 61}, "files": [{"sha": "ff6676f54f74d34f2f71ea42e33f29338161c79a", "filename": "gcc/config/i386/i386-features.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Fconfig%2Fi386%2Fi386-features.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Fconfig%2Fi386%2Fi386-features.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.c?ref=fdace7584056de2f63bde2e3087f26beb6b0f97d", "patch": "@@ -581,7 +581,8 @@ general_scalar_chain::compute_convert_gain ()\n       else if (GET_CODE (src) == NEG\n \t       || GET_CODE (src) == NOT)\n \tigain += m * ix86_cost->add - ix86_cost->sse_op - COSTS_N_INSNS (1);\n-      else if (GET_CODE (src) == SMAX\n+      else if (GET_CODE (src) == ABS\n+\t       || GET_CODE (src) == SMAX\n \t       || GET_CODE (src) == SMIN\n \t       || GET_CODE (src) == UMAX\n \t       || GET_CODE (src) == UMIN)\n@@ -986,13 +987,6 @@ general_scalar_chain::convert_insn (rtx_insn *insn)\n \n   switch (GET_CODE (src))\n     {\n-    case ASHIFT:\n-    case ASHIFTRT:\n-    case LSHIFTRT:\n-      convert_op (&XEXP (src, 0), insn);\n-      PUT_MODE (src, vmode);\n-      break;\n-\n     case PLUS:\n     case MINUS:\n     case IOR:\n@@ -1002,8 +996,14 @@ general_scalar_chain::convert_insn (rtx_insn *insn)\n     case SMIN:\n     case UMAX:\n     case UMIN:\n-      convert_op (&XEXP (src, 0), insn);\n       convert_op (&XEXP (src, 1), insn);\n+      /* FALLTHRU */\n+\n+    case ABS:\n+    case ASHIFT:\n+    case ASHIFTRT:\n+    case LSHIFTRT:\n+      convert_op (&XEXP (src, 0), insn);\n       PUT_MODE (src, vmode);\n       break;\n \n@@ -1414,6 +1414,12 @@ general_scalar_to_vector_candidate_p (rtx_insn *insn, enum machine_mode mode)\n \treturn false;\n       break;\n \n+    case ABS:\n+      if ((mode == DImode && !TARGET_AVX512VL)\n+\t  || (mode == SImode && !TARGET_SSSE3))\n+\treturn false;\n+      break;\n+\n     case NEG:\n     case NOT:\n       break;"}, {"sha": "2b2ba2f3a2070cd002b30e1bbf17df41228a6d4f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 135, "deletions": 52, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fdace7584056de2f63bde2e3087f26beb6b0f97d", "patch": "@@ -10062,8 +10062,8 @@\n   \"#\"\n   \"reload_completed\"\n   [(parallel\n-    [(set (reg:CCZ FLAGS_REG)\n-\t  (compare:CCZ (neg:DWIH (match_dup 1)) (const_int 0)))\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_dup 1) (const_int 0)))\n      (set (match_dup 0) (neg:DWIH (match_dup 1)))])\n    (parallel\n     [(set (match_dup 2)\n@@ -10077,7 +10077,7 @@\n      (clobber (reg:CC FLAGS_REG))])]\n   \"split_double_mode (<DWI>mode, &operands[0], 2, &operands[0], &operands[2]);\")\n \n-(define_insn \"*neg<mode>2_1\"\n+(define_insn \"*neg<mode>_1\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(neg:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -10086,7 +10086,7 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*negsi2_1_zext\"\n+(define_insn \"*negsi_1_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (neg:SI (match_operand:SI 1 \"register_operand\" \"0\"))))\n@@ -10096,36 +10096,46 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"SI\")])\n \n-;; The problem with neg is that it does not perform (compare x 0),\n-;; it really performs (compare 0 x), which leaves us with the zero\n-;; flag being the only useful item.\n-\n-(define_insn \"*neg<mode>2_cmpz\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ\n+(define_insn \"*neg<mode>_2\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n \t  (neg:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t   (const_int 0)))\n+\t  (const_int 0)))\n    (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(neg:SWI (match_dup 1)))]\n-  \"ix86_unary_operator_ok (NEG, <MODE>mode, operands)\"\n+  \"ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_unary_operator_ok (NEG, <MODE>mode, operands)\"\n   \"neg{<imodesuffix>}\\t%0\"\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*negsi2_cmpz_zext\"\n-  [(set (reg:CCZ FLAGS_REG)\n-\t(compare:CCZ\n+(define_insn \"*negsi_2_zext\"\n+  [(set (reg FLAGS_REG)\n+\t(compare\n \t  (neg:SI (match_operand:SI 1 \"register_operand\" \"0\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (neg:SI (match_dup 1))))]\n-  \"TARGET_64BIT && ix86_unary_operator_ok (NEG, SImode, operands)\"\n+  \"TARGET_64BIT && ix86_match_ccmode (insn, CCGOCmode)\n+   && ix86_unary_operator_ok (NEG, SImode, operands)\"\n   \"neg{l}\\t%k0\"\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"*neg<mode>_ccc\"\n+(define_insn \"*neg<mode>_ccc_1\"\n+  [(set (reg:CCC FLAGS_REG)\n+\t(ne:CCC\n+\t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n+\t  (const_int 0)))\n+   (set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n+\t(neg:SWI (match_dup 1)))]\n+  \"\"\n+  \"neg{<imodesuffix>}\\t%0\"\n+  [(set_attr \"type\" \"negnot\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*neg<mode>_ccc_2\"\n   [(set (reg:CCC FLAGS_REG)\n \t(ne:CCC\n \t  (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")\n@@ -10169,27 +10179,102 @@\n ;; Special expand pattern to handle integer mode abs\n \n (define_expand \"abs<mode>2\"\n-  [(set (match_operand:SWI48x 0 \"register_operand\")\n-    (abs:SWI48x\n-      (match_operand:SWI48x 1 \"register_operand\")))]\n-  \"TARGET_EXPAND_ABS\"\n-  {\n-    machine_mode mode = <MODE>mode;\n-\n-    /* Generate rtx abs using abs (x) = (((signed) x >> (W-1)) ^ x) -\n-       ((signed) x >> (W-1)) */\n-    rtx shift_amount = gen_int_mode (GET_MODE_PRECISION (mode) - 1, QImode);\n-    rtx shift_dst = expand_simple_binop (mode, ASHIFTRT, operands[1],\n-\t\t\t\t\t shift_amount, NULL_RTX,\n-\t\t\t\t\t 0, OPTAB_DIRECT);\n-    rtx xor_dst = expand_simple_binop (mode, XOR, shift_dst, operands[1],\n-\t\t\t\t       operands[0], 0, OPTAB_DIRECT);\n-    rtx minus_dst = expand_simple_binop (mode, MINUS, xor_dst, shift_dst,\n-\t\t\t\t\t operands[0], 0, OPTAB_DIRECT);\n-    if (!rtx_equal_p (minus_dst, operands[0]))\n-      emit_move_insn (operands[0], minus_dst);\n-    DONE;\n-  })\n+  [(parallel\n+    [(set (match_operand:SWI48x 0 \"register_operand\")\n+\t  (abs:SWI48x\n+\t    (match_operand:SWI48x 1 \"general_operand\")))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"TARGET_CMOVE\"\n+{\n+  if (TARGET_EXPAND_ABS)\n+    {\n+      machine_mode mode = <MODE>mode;\n+      operands[1] = force_reg (mode, operands[1]);\n+\n+      /* Generate rtx abs using:\n+\t abs (x) = (((signed) x >> (W-1)) ^ x) - ((signed) x >> (W-1)) */\n+\n+      rtx shift_amount = gen_int_mode (GET_MODE_PRECISION (mode) - 1, QImode);\n+      rtx shift_dst = expand_simple_binop (mode, ASHIFTRT, operands[1],\n+\t\t\t\t\t   shift_amount, NULL_RTX,\n+\t\t\t\t\t   0, OPTAB_DIRECT);\n+      rtx xor_dst = expand_simple_binop (mode, XOR, shift_dst, operands[1],\n+\t\t\t\t         operands[0], 0, OPTAB_DIRECT);\n+      rtx minus_dst = expand_simple_binop (mode, MINUS, xor_dst, shift_dst,\n+\t\t\t\t\t   operands[0], 0, OPTAB_DIRECT);\n+      if (!rtx_equal_p (minus_dst, operands[0]))\n+        emit_move_insn (operands[0], minus_dst);\n+      DONE;\n+    }\n+})\n+\n+(define_insn_and_split \"*abs<mode>2_1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(abs:SWI48\n+\t  (match_operand:SWI48 1 \"general_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_CMOVE && ix86_pre_reload_split ()\"\n+   \"#\"\n+   \"&& 1\"\n+  [(parallel\n+     [(set (reg:CCGOC FLAGS_REG)\n+\t   (compare:CCGOC\n+\t     (neg:SWI48 (match_dup 1))\n+\t     (const_int 0)))\n+      (set (match_dup 2)\n+\t   (neg:SWI48 (match_dup 1)))])\n+   (set (match_dup 0)\n+        (if_then_else:SWI48\n+\t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n+\t  (match_dup 2)\n+\t  (match_dup 1)))]\n+{\n+  operands[1] = force_reg (<MODE>mode, operands[1]);\n+  operands[2] = gen_reg_rtx (<MODE>mode);\n+})\n+\n+(define_insn_and_split \"*absdi2_doubleword\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(abs:DI\n+\t  (match_operand:DI 1 \"general_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"!TARGET_64BIT && TARGET_CMOVE\n+   && ix86_pre_reload_split ()\"\n+   \"#\"\n+   \"&& 1\"\n+  [(parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_dup 1) (const_int 0)))\n+     (set (match_dup 2) (neg:DWIH (match_dup 1)))])\n+   (parallel\n+    [(set (match_dup 5)\n+\t  (plus:DWIH (plus:DWIH (ltu:DWIH (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t\t(match_dup 4))\n+\t\t     (const_int 0)))\n+     (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+     [(set (reg:CCGOC FLAGS_REG)\n+\t   (compare:CCGOC\n+\t     (neg:SI (match_dup 5))\n+\t     (const_int 0)))\n+      (set (match_dup 5)\n+\t   (neg:SI (match_dup 5)))])\n+   (set (match_dup 0)\n+        (if_then_else:SI\n+\t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n+\t  (match_dup 2)\n+\t  (match_dup 1)))\n+   (set (match_dup 3)\n+        (if_then_else:SI\n+\t  (ge (reg:CCGOC FLAGS_REG) (const_int 0))\n+\t  (match_dup 5)\n+\t  (match_dup 4)))]\n+{\n+  operands[1] = force_reg (DImode, operands[1]);\n+  operands[2] = gen_reg_rtx (DImode);\n+\n+  split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n+})\n \n (define_expand \"<code>tf2\"\n   [(set (match_operand:TF 0 \"register_operand\")\n@@ -18881,33 +18966,32 @@\n \n (define_expand \"<code><mode>3\"\n   [(parallel\n-    [(set (match_operand:SWI248 0 \"register_operand\")\n-\t  (maxmin:SWI248\n-\t    (match_operand:SWI248 1 \"register_operand\")\n-\t    (match_operand:SWI248 2 \"general_operand\")))\n+    [(set (match_operand:SWI48x 0 \"register_operand\")\n+\t  (maxmin:SWI48x\n+\t    (match_operand:SWI48x 1 \"register_operand\")\n+\t    (match_operand:SWI48x 2 \"general_operand\")))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_CMOVE\")\n \n (define_insn_and_split \"*<code><mode>3_1\"\n-  [(set (match_operand:SWI248 0 \"register_operand\")\n-\t(maxmin:SWI248\n-\t  (match_operand:SWI248 1 \"register_operand\")\n-\t  (match_operand:SWI248 2 \"general_operand\")))\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(maxmin:SWI48\n+\t  (match_operand:SWI48 1 \"register_operand\")\n+\t  (match_operand:SWI48 2 \"general_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_CMOVE\n    && ix86_pre_reload_split ()\"\n   \"#\"\n   \"&& 1\"\n   [(set (match_dup 0)\n-\t(if_then_else:SWI248 (match_dup 3)\n+\t(if_then_else:SWI48 (match_dup 3)\n \t  (match_dup 1)\n \t  (match_dup 2)))]\n {\n   machine_mode mode = <MODE>mode;\n   rtx cmp_op = operands[2];\n \n-  if (!register_operand (cmp_op, mode))\n-    operands[2] = force_reg (mode, cmp_op);\n+  operands[2] = force_reg (mode, cmp_op);\n \n   enum rtx_code code = <maxmin_rel>;\n \n@@ -18961,8 +19045,7 @@\n \t  (match_dup 4)\n \t  (match_dup 5)))]\n {\n-  if (!register_operand (operands[2], DImode))\n-    operands[2] = force_reg (DImode, operands[2]);\n+  operands[2] = force_reg (DImode, operands[2]);\n \n   split_double_mode (DImode, &operands[0], 3, &operands[0], &operands[3]);\n "}, {"sha": "48c1d278020703e0b1d624a0e316ec76225631ad", "filename": "gcc/testsuite/gcc.target/i386/pr97873-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873-1.c?ref=fdace7584056de2f63bde2e3087f26beb6b0f97d", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/97873 */\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2 -mavx512vl -mstv -mno-stackrealign\" } */\n+/* { dg-final { scan-assembler \"pabsq\" } } */\n+\n+extern long long z;\n+\n+void\n+foo (long long x)\n+{\n+  z = (x < 0) ? -x : x;\n+}"}, {"sha": "ec598f9fda0d982285a064a13c32a43efd63a26b", "filename": "gcc/testsuite/gcc.target/i386/pr97873.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdace7584056de2f63bde2e3087f26beb6b0f97d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr97873.c?ref=fdace7584056de2f63bde2e3087f26beb6b0f97d", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/97873 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -mno-sse3 -mtune=generic\" } */\n+/* { dg-final { scan-assembler-not \"test|cmp\" } } */\n+\n+int foo (int x)\n+{\n+  return (x < 0) ? -x : x;\n+}"}]}