{"sha": "f1652e3343b1ec47035370801d9b9aca1f8b613f", "node_id": "C_kwDOANBUbNoAKGYxNjUyZTMzNDNiMWVjNDcwMzUzNzA4MDFkOWI5YWNhMWY4YjYxM2Y", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-30T20:26:37Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-30T20:26:37Z"}, "message": "PR rtl-optimization/101617: Use neg/sbb in ix86_expand_int_movcc.\n\nThis patch resolves PR rtl-optimization/101617 where we should generate\nthe exact same code for (X ? -1 : 1) as we do for ((X ? -1 : 0) | 1).\nThe cause of the current difference on x86_64 is actually in\nix86_expand_int_movcc that doesn't know that negl;sbbl can be used\nto create a -1/0 result depending on whether the input is zero/nonzero.\n\nSo for Andrew Pinski's test case:\n\nint f1(int i)\n{\n  return i ? -1 : 1;\n}\n\nGCC currently generates:\n\nf1:     cmpl    $1, %edi\n        sbbl    %eax, %eax\t// x ? 0 : -1\n        andl    $2, %eax\t// x ? 0 : 2\n        subl    $1, %eax\t// x ? -1 : 1\n        ret\n\nbut with the attached patch, now generates:\n\nf1:\tnegl    %edi\n        sbbl    %eax, %eax\t// x ? -1 : 0\n        orl     $1, %eax\t// x ? -1 : 1\n        ret\n\nTo implement this I needed to add two expanders to i386.md to generate\nthe required instructions (in both SImode and DImode) matching the\npre-existing define_insns of the same name.\n\n2022-05-30  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR rtl-optimization/101617\n\t* config/i386/i386-expand.cc (ix86_expand_int_movcc): Add a\n\tspecial case (indicated by negate_cc_compare_p) to generate a\n\t-1/0 mask using neg;sbb.\n\t* config/i386/i386.md (x86_neg<mode>_ccc): New define_expand\n\tto generate an *x86_neg<mode>_ccc instruction.\n\t(x86_mov<mode>cc_0_m1_neg): Likewise, a new define_expand to\n\tgenerate a *x86_mov<mode>cc_0_m1_neg instruction.\n\ngcc/testsuite/ChangeLog\n\tPR rtl-optimization/101617\n\t* gcc.target/i386/pr101617.c: New test case.", "tree": {"sha": "2bc6a0e25cda63f5546b20cd0b2d13f969ff3438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc6a0e25cda63f5546b20cd0b2d13f969ff3438"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1652e3343b1ec47035370801d9b9aca1f8b613f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1652e3343b1ec47035370801d9b9aca1f8b613f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1652e3343b1ec47035370801d9b9aca1f8b613f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1652e3343b1ec47035370801d9b9aca1f8b613f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a12adfa8bd61e46538ebd97ae927d594843026a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a12adfa8bd61e46538ebd97ae927d594843026a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a12adfa8bd61e46538ebd97ae927d594843026a"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "617bee20d06df51ae51c60bc7e489e2c3a7c2c24", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1652e3343b1ec47035370801d9b9aca1f8b613f/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1652e3343b1ec47035370801d9b9aca1f8b613f/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=f1652e3343b1ec47035370801d9b9aca1f8b613f", "patch": "@@ -3109,6 +3109,7 @@ ix86_expand_int_movcc (rtx operands[])\n   rtx compare_op;\n   machine_mode mode = GET_MODE (operands[0]);\n   bool sign_bit_compare_p = false;\n+  bool negate_cc_compare_p = false;\n   rtx op0 = XEXP (operands[1], 0);\n   rtx op1 = XEXP (operands[1], 1);\n   rtx op2 = operands[2];\n@@ -3155,16 +3156,48 @@ ix86_expand_int_movcc (rtx operands[])\n       HOST_WIDE_INT cf = INTVAL (op3);\n       HOST_WIDE_INT diff;\n \n+      if ((mode == SImode\n+\t   || (TARGET_64BIT && mode == DImode))\n+\t  && (GET_MODE (op0) == SImode\n+\t      || (TARGET_64BIT && GET_MODE (op0) == DImode)))\n+\t{\n+\t  /* Special case x != 0 ? -1 : y.  */\n+\t  if (code == NE && op1 == const0_rtx && ct == -1)\n+\t    {\n+\t      negate_cc_compare_p = true;\n+\t      std::swap (ct, cf);\n+\t      code = EQ;\n+\t    }\n+\t  else if (code == EQ && op1 == const0_rtx && cf == -1)\n+\t    negate_cc_compare_p = true;\n+\t}\n+\n       diff = ct - cf;\n       /*  Sign bit compares are better done using shifts than we do by using\n \t  sbb.  */\n       if (sign_bit_compare_p\n+\t  || negate_cc_compare_p\n \t  || ix86_expand_carry_flag_compare (code, op0, op1, &compare_op))\n \t{\n \t  /* Detect overlap between destination and compare sources.  */\n \t  rtx tmp = out;\n \n-          if (!sign_bit_compare_p)\n+\t  if (negate_cc_compare_p)\n+\t    {\n+\t      if (GET_MODE (op0) == DImode)\n+\t\temit_insn (gen_x86_negdi_ccc (gen_reg_rtx (DImode), op0));\n+\t      else\n+\t\temit_insn (gen_x86_negsi_ccc (gen_reg_rtx (SImode),\n+\t\t\t\t\t      gen_lowpart (SImode, op0)));\n+\n+\t      tmp = gen_reg_rtx (mode);\n+\t      if (mode == DImode)\n+\t\temit_insn (gen_x86_movdicc_0_m1_neg (tmp));\n+\t      else\n+\t\temit_insn (gen_x86_movsicc_0_m1_neg (gen_lowpart (SImode,\n+\t\t\t\t\t\t\t\t  tmp)));\n+\t    }\n+\t  else if (!sign_bit_compare_p)\n \t    {\n \t      rtx flags;\n \t      bool fpcmp = false;"}, {"sha": "2b1d65b450dc75a2f56db766d0902f8bc3e7e4f6", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1652e3343b1ec47035370801d9b9aca1f8b613f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1652e3343b1ec47035370801d9b9aca1f8b613f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f1652e3343b1ec47035370801d9b9aca1f8b613f", "patch": "@@ -11241,6 +11241,14 @@\n   [(set_attr \"type\" \"negnot\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_expand \"x86_neg<mode>_ccc\"\n+  [(parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_operand:SWI48 1 \"register_operand\")\n+\t\t  (const_int 0)))\n+     (set (match_operand:SWI48 0 \"register_operand\")\n+\t  (neg:SWI48 (match_dup 1)))])])\n+\n (define_insn \"*negqi_ext<mode>_2\"\n   [(set (zero_extract:SWI248\n \t  (match_operand:SWI248 0 \"register_operand\" \"+Q\")\n@@ -20752,6 +20760,12 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"0\")])\n \n+(define_expand \"x86_mov<mode>cc_0_m1_neg\"\n+  [(parallel\n+    [(set (match_operand:SWI48 0 \"register_operand\")\n+\t  (neg:SWI48 (ltu:SWI48 (reg:CCC FLAGS_REG) (const_int 0))))\n+     (clobber (reg:CC FLAGS_REG))])])\n+\n (define_split\n   [(set (match_operand:SWI48 0 \"register_operand\")\n \t(neg:SWI48"}, {"sha": "503bf11a5b562f345fba2033087cf4454d04581b", "filename": "gcc/testsuite/gcc.target/i386/pr101617.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1652e3343b1ec47035370801d9b9aca1f8b613f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101617.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1652e3343b1ec47035370801d9b9aca1f8b613f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101617.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr101617.c?ref=f1652e3343b1ec47035370801d9b9aca1f8b613f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+int f(int i)\n+{\n+  int t = i ? -1 : 0;\n+  return t | 1;\n+}\n+\n+int f1(int i)\n+{\n+  int t = i ? -1 : 1;\n+  return t;\n+}\n+\n+/* { dg-final { scan-assembler-times \"negl\" 2 } } */\n+/* { dg-final { scan-assembler-times \"sbbl\" 2 } } */\n+/* { dg-final { scan-assembler-times \"orl\" 2 } } */\n+/* { dg-final { scan-assembler-not \"cmpl\" } } */\n+"}]}