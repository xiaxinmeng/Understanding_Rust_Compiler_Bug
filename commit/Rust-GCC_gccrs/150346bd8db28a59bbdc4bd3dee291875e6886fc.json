{"sha": "150346bd8db28a59bbdc4bd3dee291875e6886fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwMzQ2YmQ4ZGIyOGE1OWJiZGM0YmQzZGVlMjkxODc1ZTY4ODZmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2016-04-21T10:21:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-21T10:21:56Z"}, "message": "a-tasatt.adb, [...] (Fast_Path): Rewritten to avoid reading potentially uninitialized memory.\n\n2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-tasatt.adb, a-tasatt.ads (Fast_Path): Rewritten to avoid reading\n\tpotentially uninitialized memory.\n\t* sem_ch3.adb: Minor style fix in comment.\n\nFrom-SVN: r235329", "tree": {"sha": "2531510ab31abff31d085218ba5a2eb6e9076c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2531510ab31abff31d085218ba5a2eb6e9076c65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/150346bd8db28a59bbdc4bd3dee291875e6886fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150346bd8db28a59bbdc4bd3dee291875e6886fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/150346bd8db28a59bbdc4bd3dee291875e6886fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/150346bd8db28a59bbdc4bd3dee291875e6886fc/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c25f170d2d44ec8ed5424c86743fb5b8360273b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25f170d2d44ec8ed5424c86743fb5b8360273b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25f170d2d44ec8ed5424c86743fb5b8360273b3"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "3dcc02d16725fa586cf15bca545dd6c4d0c66d96", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=150346bd8db28a59bbdc4bd3dee291875e6886fc", "patch": "@@ -1,3 +1,9 @@\n+2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-tasatt.adb, a-tasatt.ads (Fast_Path): Rewritten to avoid reading\n+\tpotentially uninitialized memory.\n+\t* sem_ch3.adb: Minor style fix in comment.\n+\n 2016-04-21  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_rm.texi, gnat_ugn.texi,"}, {"sha": "1eb7d592712961466d842541af6a4cc0eef49b8b", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=150346bd8db28a59bbdc4bd3dee291875e6886fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---            Copyright (C) 2014, Free Software Foundation, Inc.            --\n+--            Copyright (C) 2014-2016, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -93,6 +93,11 @@ package body Ada.Task_Attributes is\n    function To_Attribute is new\n      Ada.Unchecked_Conversion (Atomic_Address, Attribute);\n \n+   function To_Address is new\n+     Ada.Unchecked_Conversion (Attribute, System.Address);\n+   function To_Int is new\n+     Ada.Unchecked_Conversion (Attribute, Integer);\n+\n    pragma Warnings (On);\n \n    function To_Address is new\n@@ -114,9 +119,12 @@ package body Ada.Task_Attributes is\n      Ada.Unchecked_Deallocation (Real_Attribute, Real_Attribute_Access);\n \n    Fast_Path : constant Boolean :=\n-                 Attribute'Size <= Atomic_Address'Size\n+                 (Attribute'Size = Integer'Size\n+                   and then Attribute'Alignment <= Atomic_Address'Alignment\n+                   and then To_Int (Initial_Value) = 0)\n+                 or else (Attribute'Size = System.Address'Size\n                    and then Attribute'Alignment <= Atomic_Address'Alignment\n-                   and then To_Address (Initial_Value) = 0;\n+                   and then To_Address (Initial_Value) = System.Null_Address);\n    --  If the attribute fits in an Atomic_Address (both size and alignment)\n    --  and Initial_Value is 0 (or null), then we will map the attribute\n    --  directly into ATCB.Attributes (Index), otherwise we will create"}, {"sha": "857cdd7956b028b05d7693acf2b9cd66829c6ce4", "filename": "gcc/ada/a-tasatt.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2Fa-tasatt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2Fa-tasatt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.ads?ref=150346bd8db28a59bbdc4bd3dee291875e6886fc", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 2014, Free Software Foundation, Inc.            --\n+--            Copyright (C) 2014-2016, Free Software Foundation, Inc.       --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -42,8 +42,9 @@ generic\n package Ada.Task_Attributes is\n \n    --  Note that this package will use an efficient implementation with no\n-   --  locks and no extra dynamic memory allocation if Attribute can fit in a\n-   --  System.Address type, and Initial_Value is 0 (null for an access type).\n+   --  locks and no extra dynamic memory allocation if Attribute is the size\n+   --  of either Integer or System.Address, and Initial_Value is 0 (null for\n+   --  an access type).\n \n    --  Other types and initial values are supported, but will require\n    --  the use of locking and a level of indirection (meaning extra dynamic"}, {"sha": "0560a69f564812b33b992d7b1e88c1718b3f90dc", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/150346bd8db28a59bbdc4bd3dee291875e6886fc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=150346bd8db28a59bbdc4bd3dee291875e6886fc", "patch": "@@ -3423,7 +3423,7 @@ package body Sem_Ch3 is\n \n          if Error_Posted (N) then\n \n-            --  Type mismatch or illegal redeclaration, Do not analyze\n+            --  Type mismatch or illegal redeclaration; do not analyze\n             --  expression to avoid cascaded errors.\n \n             T := Find_Type_Of_Object (Object_Definition (N), N);\n@@ -3460,7 +3460,7 @@ package body Sem_Ch3 is\n       end if;\n \n       --  Ada 2005 (AI-231): Propagate the null-excluding attribute and carry\n-      --  out some static checks\n+      --  out some static checks.\n \n       if Ada_Version >= Ada_2005 and then Can_Never_Be_Null (T) then\n "}]}