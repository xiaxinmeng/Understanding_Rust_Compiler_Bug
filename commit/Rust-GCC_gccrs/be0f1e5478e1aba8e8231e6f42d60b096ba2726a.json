{"sha": "be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwZjFlNTQ3OGUxYWJhOGU4MjMxZTZmNDJkNjBiMDk2YmEyNzI2YQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-02-14T08:52:24Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-02-14T08:52:24Z"}, "message": "re PR bootstrap/19818 (GCC 4.0 cannot bootstrap itself)\n\ninclude:\n2005-02-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR bootstrap/19818\n\t* ansidecl.h (PARAMS): Guard from redefinition.\n\nlibcpp:\n2005-02-08  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR bootstrap/19818\n\t* configure.ac: Check for declaration of basename and getopt.\n\t* config.in: Regenerate.\n\t* configure: Regenerate.\n\t* internal.h (ustrcspn): New.\n\t* macro.c (create_iso_definition): Fix allocation of memory.\n\t(padding_token): Add cast to remove const-ness.\n\t* pch.c (cpp_read_state): Use ustrcspn.\n\nFrom-SVN: r95003", "tree": {"sha": "051695b6217a00738df88eb4f5452b7d4833bd75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/051695b6217a00738df88eb4f5452b7d4833bd75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "623049aa3c72118db18bed0c09a2bd88c3ef4664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623049aa3c72118db18bed0c09a2bd88c3ef4664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623049aa3c72118db18bed0c09a2bd88c3ef4664"}], "stats": {"total": 196, "additions": 189, "deletions": 7}, "files": [{"sha": "da3aaa2f7c087a47862c515db37b621ae9b9a408", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -1,3 +1,8 @@\n+2005-02-14  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR bootstrap/19818\n+\t* ansidecl.h (PARAMS): Guard from redefinition.\n+\n 2004-12-11  Ben Elliston  <bje@au.ibm.com>\n \n \t* fibheap.h (struct fibnode): Only use unsigned long bitfields"}, {"sha": "2eeccf203514e6d11a8979fdaeba308837cbea18", "filename": "include/ansidecl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -149,7 +149,12 @@ So instead we use the macro below and test it against specific values.  */\n #define PTRCONST\tvoid *const\n #define LONG_DOUBLE\tlong double\n \n+/* PARAMS is often defined elsewhere (e.g. by libintl.h), so wrap it in\n+   a #ifndef.  */\n+#ifndef PARAMS\n #define PARAMS(ARGS)\t\tARGS\n+#endif\n+\n #define VPARAMS(ARGS)\t\tARGS\n #define VA_START(VA_LIST, VAR)\tva_start(VA_LIST, VAR)\n "}, {"sha": "e1f9d1da90b221272ebfe679f53d75879f9df07a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -1,3 +1,14 @@\n+2005-02-14  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR bootstrap/19818\n+\t* configure.ac: Check for declaration of basename and getopt.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* internal.h (ustrcspn): New.\n+\t* macro.c (create_iso_definition): Fix allocation of memory.\n+\t(padding_token): Add cast to remove const-ness.\n+\t* pch.c (cpp_read_state): Use ustrcspn.\n+\n 2005-02-08  Mike Stump  <mrs@apple.com>\n \n \t* files.c (pchf_adder): Remove."}, {"sha": "d7f67a609cf32196863511a621d1b18680c386d0", "filename": "libcpp/config.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -26,6 +26,10 @@\n    */\n #undef HAVE_DECL_ABORT\n \n+/* Define to 1 if you have the declaration of `basename', and to 0 if you\n+   don't. */\n+#undef HAVE_DECL_BASENAME\n+\n /* Define to 1 if you have the declaration of `errno', and to 0 if you don't.\n    */\n #undef HAVE_DECL_ERRNO\n@@ -46,6 +50,10 @@\n    you don't. */\n #undef HAVE_DECL_FWRITE_UNLOCKED\n \n+/* Define to 1 if you have the declaration of `getopt', and to 0 if you don't.\n+   */\n+#undef HAVE_DECL_GETOPT\n+\n /* Define to 1 if you have the declaration of `putc_unlocked', and to 0 if you\n    don't. */\n #undef HAVE_DECL_PUTC_UNLOCKED"}, {"sha": "b8c2c5a4ccec171c85c489a6e221c6cdad0e4898", "filename": "libcpp/configure", "status": "modified", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -5065,6 +5065,76 @@ else\n _ACEOF\n \n \n+fi\n+echo \"$as_me:$LINENO: checking whether basename is declared\" >&5\n+echo $ECHO_N \"checking whether basename is declared... $ECHO_C\" >&6\n+if test \"${ac_cv_have_decl_basename+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+#ifndef basename\n+  char *p = (char *) basename;\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_have_decl_basename=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_have_decl_basename=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_have_decl_basename\" >&5\n+echo \"${ECHO_T}$ac_cv_have_decl_basename\" >&6\n+if test $ac_cv_have_decl_basename = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_BASENAME 1\n+_ACEOF\n+\n+\n+else\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_BASENAME 0\n+_ACEOF\n+\n+\n fi\n echo \"$as_me:$LINENO: checking whether errno is declared\" >&5\n echo $ECHO_N \"checking whether errno is declared... $ECHO_C\" >&6\n@@ -5135,6 +5205,76 @@ else\n _ACEOF\n \n \n+fi\n+echo \"$as_me:$LINENO: checking whether getopt is declared\" >&5\n+echo $ECHO_N \"checking whether getopt is declared... $ECHO_C\" >&6\n+if test \"${ac_cv_have_decl_getopt+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+#ifndef getopt\n+  char *p = (char *) getopt;\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_have_decl_getopt=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_have_decl_getopt=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_have_decl_getopt\" >&5\n+echo \"${ECHO_T}$ac_cv_have_decl_getopt\" >&6\n+if test $ac_cv_have_decl_getopt = yes; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_GETOPT 1\n+_ACEOF\n+\n+\n+else\n+  cat >>confdefs.h <<_ACEOF\n+#define HAVE_DECL_GETOPT 0\n+_ACEOF\n+\n+\n fi\n echo \"$as_me:$LINENO: checking whether putc_unlocked is declared\" >&5\n echo $ECHO_N \"checking whether putc_unlocked is declared... $ECHO_C\" >&6"}, {"sha": "b268d8d76bc0e7534e2a2565ecf5e5c09de544e2", "filename": "libcpp/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -46,7 +46,7 @@ AC_CHECK_SIZEOF(int)\n AC_CHECK_SIZEOF(long)\n AC_CHECK_FUNCS(putc_unlocked fputc_unlocked fputs_unlocked \\\n         fwrite_unlocked fprintf_unlocked)\n-AC_CHECK_DECLS([abort, errno, putc_unlocked, fputc_unlocked,\n+AC_CHECK_DECLS([abort, basename, errno, getopt, putc_unlocked, fputc_unlocked,\n         fputs_unlocked, fwrite_unlocked, fprintf_unlocked])\n \n # Checks for library functions."}, {"sha": "74ae6c63d331cb13e41f50aa7579ca8a554c8816", "filename": "libcpp/internal.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -585,6 +585,9 @@ static inline unsigned char *uxstrdup (const unsigned char *);\n static inline unsigned char *ustrchr (const unsigned char *, int);\n static inline int ufputs (const unsigned char *, FILE *);\n \n+/* Use a const char for the second parameter since it is usually a literal.  */\n+static inline int ustrcspn (const unsigned char *, const char *);\n+\n static inline int\n ustrcmp (const unsigned char *s1, const unsigned char *s2)\n {\n@@ -597,6 +600,12 @@ ustrncmp (const unsigned char *s1, const unsigned char *s2, size_t n)\n   return strncmp ((const char *)s1, (const char *)s2, n);\n }\n \n+static inline int\n+ustrcspn (const unsigned char *s1, const char *s2)\n+{\n+  return strcspn ((const char *)s1, s2);\n+}\n+\n static inline size_t\n ustrlen (const unsigned char *s1)\n {"}, {"sha": "e118a5c72c15e549f90845be99240d645fc8e29c", "filename": "libcpp/macro.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -910,7 +910,10 @@ padding_token (cpp_reader *pfile, const cpp_token *source)\n   cpp_token *result = _cpp_temp_token (pfile);\n \n   result->type = CPP_PADDING;\n-  result->val.source = source;\n+\n+  /* Data in GCed data structures cannot be made const so far, so we\n+     need a cast here.  */\n+  result->val.source = (cpp_token *) source;\n   result->flags = 0;\n   return result;\n }\n@@ -1416,10 +1419,11 @@ create_iso_definition (cpp_reader *pfile, cpp_macro *macro)\n       /* Success.  Commit or allocate the parameter array.  */\n       if (pfile->hash_table->alloc_subobject)\n \t{\n-\t  cpp_token *tokns = pfile->hash_table->alloc_subobject\n-\t    (sizeof (cpp_token) * macro->paramc);\n-\t  memcpy (tokns, macro->params, sizeof (cpp_token) * macro->paramc);\n-\t  macro->params = tokns;\n+\t  cpp_hashnode **params = pfile->hash_table->alloc_subobject\n+\t    (sizeof (cpp_hashnode *) * macro->paramc);\n+\t  memcpy (params, macro->params,\n+\t\t  sizeof (cpp_hashnode *) * macro->paramc);\n+\t  macro->params = params;\n \t}\n       else\n \tBUFF_FRONT (pfile->a_buff) = (uchar *) &macro->params[macro->paramc];"}, {"sha": "8de5c01a8fcf6ba21e80a3837898843ae2c2a205", "filename": "libcpp/pch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be0f1e5478e1aba8e8231e6f42d60b096ba2726a/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=be0f1e5478e1aba8e8231e6f42d60b096ba2726a", "patch": "@@ -653,7 +653,7 @@ cpp_read_state (cpp_reader *r, const char *name, FILE *f,\n       size_t namelen;\n       uchar *defn;\n \n-      namelen = strcspn (data->defns[i], \"( \\n\");\n+      namelen = ustrcspn (data->defns[i], \"( \\n\");\n       h = cpp_lookup (r, data->defns[i], namelen);\n       defn = data->defns[i] + namelen;\n "}]}