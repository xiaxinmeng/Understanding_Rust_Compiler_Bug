{"sha": "08dc830e4f7a946edb34a7ab6582425c1c900194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhkYzgzMGU0ZjdhOTQ2ZWRiMzRhN2FiNjU4MjQyNWMxYzkwMDE5NA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@rabi.columbia.edu", "date": "1999-03-25T23:36:47Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-03-25T23:36:47Z"}, "message": "gcc.c: Compile unconditionally all code formerly dependent on #ifdef LANG_SPECIFIC_DRIVER.\n\n\t* gcc.c: Compile unconditionally all code formerly dependent\n\ton #ifdef LANG_SPECIFIC_DRIVER.\n\t* gccspec.c: New file with stub lang_specific_driver,\n\tlang_specific_pre_link.\n\t* Makefile.in: Link gccspec.o into xgcc.  Add rule to compile\n\tgccspec.c.\n\t* cp/Make-lang.in: Remove all references to g++.o/g++.c.\n\tLink g++ from gcc.o.\n\t* f/Make-lang.in: Remove all references to g77.o/g77.c.\n\tLink g77 from gcc.o.\n\t* java/Make-lang.in: Remove all references to gcj.o/gcj.c.\n\tLink gcj from gcc.o.\n\nFrom-SVN: r25989", "tree": {"sha": "82a107672c18cff842e14926be68dcfac406ad19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82a107672c18cff842e14926be68dcfac406ad19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08dc830e4f7a946edb34a7ab6582425c1c900194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dc830e4f7a946edb34a7ab6582425c1c900194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08dc830e4f7a946edb34a7ab6582425c1c900194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08dc830e4f7a946edb34a7ab6582425c1c900194/comments", "author": null, "committer": null, "parents": [{"sha": "96e57dac2fe7817096da16ef21b8b86756484705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e57dac2fe7817096da16ef21b8b86756484705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e57dac2fe7817096da16ef21b8b86756484705"}], "stats": {"total": 159, "additions": 82, "deletions": 77}, "files": [{"sha": "514f0d7ebc484497e755334c8235dd6c11ed300a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -1,3 +1,11 @@\n+999-03-25 Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* gcc.c: Compile unconditionally all code formerly dependent\n+\ton #ifdef LANG_SPECIFIC_DRIVER.\n+\t* gccspec.c: New file with stub lang_specific_driver,\n+\tlang_specific_pre_link.\n+\t* Makefile.in: Link gccspec.o into xgcc.  Add rule to compile\n+\n Thu Mar 25 21:08:02 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* gcc.texi (Temporaries): Update."}, {"sha": "50128b9e98c178225d2f2290ec544e75fe7687ad", "filename": "gcc/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -878,10 +878,10 @@ stamp-objlist: $(OBJS)\n # We call this executable `xgcc' rather than `gcc'\n # to avoid confusion if the current directory is in the path\n # and CC is `gcc'.  It is renamed to `gcc' when it is installed.\n-xgcc$(exeext): gcc.o version.o intl.o prefix.o \\\n+xgcc$(exeext): gcc.o gccspec.o version.o intl.o prefix.o \\\n    version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o intl.o prefix.o version.o \\\n-\t  $(EXTRA_GCC_OBJS) $(LIBS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o gccspec.o intl.o \\\n+\t  prefix.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Dump a specs file to make -B./ read these specs over installed ones.\n specs: xgcc$(exeext)\n@@ -1397,6 +1397,8 @@ gcc.o: gcc.c $(CONFIG_H) system.h intl.h multilib.h \\\n   $(DRIVER_DEFINES) \\\n   -c `echo $(srcdir)/gcc.c | sed 's,^\\./,,'`\n \n+gccspec.o: gccspec.c $(CONFIG_H) system.h\n+\n tree-check.h: s-check ; @true\n s-check : gencheck $(srcdir)/move-if-change\n \t./gencheck > tmp-check.h"}, {"sha": "cd15852adbf7bf9eb2b44e1c7187d468aaf13c1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -1,3 +1,8 @@\n+1999-03-25  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* Make-lang.in: Remove all references to g++.o/g++.c.\n+\tLink g++ from gcc.o.\n+\n 1999-03-25  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (comdat_linkage): Treat vtables like functions."}, {"sha": "c877417de47b39f005e6bc7635d65ee6d16dfbe2", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -75,10 +75,6 @@ C++ c++: cc1plus$(exeext)\n # Tell GNU make to ignore these if they exist.\n .PHONY: C++ c++\n \n-g++.c: $(srcdir)/gcc.c\n-\t-rm -f $@\n-\t$(LN_S) $(srcdir)/gcc.c $@\n-\n g++spec.o: $(srcdir)/cp/g++spec.c\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(srcdir)/cp/g++spec.c\n \n@@ -90,19 +86,8 @@ $(srcdir)/cp/parse.c: $(srcdir)/cp/parse.y\n \t  $(MAKE) $(SUBDIR_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) \\\n \t    $$cp_srcdir/parse.c\n \n-# N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.\n-# It'd be nice if we could find an easier way to do this---rather than have\n-# to track changes to the toplevel gcc Makefile as well.\n-# We depend on g++.c last, to make it obvious where it came from.\n-g++.o: $(CONFIG_H) intl.h multilib.h config.status system.h \\\n-    Makefile $(lang_specs_files) g++.c prefix.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(DRIVER_DEFINES) \\\n-\t-DLANG_SPECIFIC_DRIVER \\\n-  -c g++.c\n-\n # Create the compiler driver for g++.\n-GXX_OBJS = g++.o g++spec.o intl.o prefix.o version.o \n+GXX_OBJS = gcc.o g++spec.o intl.o prefix.o version.o \n g++$(exeext): $(GXX_OBJS) $(EXTRA_GCC_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ \\\n \t  $(GXX_OBJS) $(EXTRA_GCC_OBJS) $(LIBS)\n@@ -290,7 +275,6 @@ c++.clean:\n c++.distclean:\n \t-rm -f cp/config.status cp/Makefile\n \t-rm -f cp/parse.output\n-\t-rm -f g++.c\n c++.extraclean:\n c++.maintainer-clean:\n \t-rm -f cp/parse.c cp/parse.h"}, {"sha": "0137b91de6bc670eb1b51ea140c28c5629462371", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -1,3 +1,8 @@\n+1999-03-25  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* Make-lang.in: Remove all references to g77.o/g77.c.\n+\tLink g77 from gcc.o.\n+\n 1999-03-21  Manfred Hollstein  <manfred@s-direktnet.de>\n \n \t* Makefile.in (g77$(exeext)): Depend on intl.o.  Link in intl.o."}, {"sha": "c1a2814cd1876ca812ebfc152e5d734ccbe6064e", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -59,16 +59,6 @@ F77 f77: f771$(exeext)\n   f77.extraclean f77.maintainer-clean f77.distdir f77.rebuilt \\\n   f77.stage1 f77.stage2 f77.stage3 f77.stage4\n \n-g77.c: $(srcdir)/gcc.c\n-\tcase \"$(LANGUAGES)\" in \\\n-\t  *[fF]77*) touch lang-f77;; \\\n-\t  *) rm -f lang-f77;; \\\n-\tesac\n-\tif [ -f lang-f77 ]; then \\\n-\t  rm -f g77.c; \\\n-\t  $(LN_S) $(srcdir)/gcc.c g77.c; \\\n-\telse true; fi\n-\n g77spec.o: $(srcdir)/f/g77spec.c $(srcdir)/f/version.h\n \tcase \"$(LANGUAGES)\" in \\\n \t  *[fF]77*) touch lang-f77;; \\\n@@ -88,25 +78,11 @@ g77version.o: $(srcdir)/f/version.c\n \t    $(srcdir)/f/version.c; \\\n \telse true; fi\n \n-# N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.\n-# It'd be nice if we could find an easier way to do this---rather than have\n-# to track changes to the toplevel gcc Makefile as well.\n-# We depend on g77.c last, to make it obvious where it came from.\n-g77.o: $(CONFIG_H) multilib.h config.status $(lang_specs_files) g77.c prefix.h\n-\tcase \"$(LANGUAGES)\" in \\\n-\t  *[fF]77*) touch lang-f77;; \\\n-\t  *) rm -f lang-f77;; \\\n-\tesac\n-\tif [ -f lang-f77 ]; then \\\n-\t  $(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(DRIVER_DEFINES) \\\n-\t   -DLANG_SPECIFIC_DRIVER -c g77.c; \\\n-\telse true; fi\n-\n # Create the compiler driver for g77.\n-g77$(exeext): g77.o g77spec.o g77version.o version.o prefix.o intl.o \\\n+g77$(exeext): gcc.o g77spec.o g77version.o version.o prefix.o intl.o \\\n   $(LIBDEPS) $(EXTRA_GCC_OBJS)\n \tif [ -f lang-f77 ]; then \\\n-\t  $(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ g77.o g77spec.o g77version.o \\\n+\t  $(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o g77spec.o g77version.o \\\n \t   version.o prefix.o intl.o $(EXTRA_GCC_OBJS) $(LIBS); \\\n \telse true; fi\n \n@@ -428,7 +404,7 @@ f77.mostlyclean:\n \t-rm -f g77.aux g77.cps g77.ky g77.toc g77.vr g77.fn g77.kys \\\n \t       g77.pg g77.tp g77.vrs g77.cp g77.fns g77.log g77.pgs g77.tps \n f77.clean:\n-\t-rm -f g77.c g77.o g77spec.o g77version.o\n+\t-rm -f g77spec.o g77version.o\n f77.distclean:\n \t-rm -f lang-f77 f/Makefile\n f77.extraclean:\n@@ -439,7 +415,7 @@ f77.maintainer-clean:\n # The main makefile has already created stage?/f.\n \n G77STAGESTUFF = f/*$(objext) f/fini f/stamp-str f/str-*.h f/str-*.j \\\n-  lang-f77 g77.c g77.o g77spec.o g77version.o\n+  lang-f77 g77spec.o g77version.o\n \n f77.stage1: stage1-start\n \t-if [ -f lang-f77 ]; then \\"}, {"sha": "a56cf11450550edd874eccba47116a022385e1dd", "filename": "gcc/gcc.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -214,16 +214,15 @@ static void fatal_error\t\t\tPROTO ((int));\n \n void fancy_abort\t\tPROTO((void)) ATTRIBUTE_NORETURN;\n \n-#ifdef LANG_SPECIFIC_DRIVER\n /* Called before processing to change/add/remove arguments. */\n-extern void lang_specific_driver PROTO ((void (*) PVPROTO((const char *, ...)), int *, char ***, int *));\n+extern void lang_specific_driver PROTO ((void (*) PVPROTO((const char *, ...)),\n+\t\t\t\t\t int *, char ***, int *));\n \n /* Called before linking.  Returns 0 on success and -1 on failure. */\n extern int lang_specific_pre_link ();\n \n /* Number of extra output files that lang_specific_pre_link may generate. */\n extern int lang_specific_extra_outfiles;\n-#endif\n \f\n /* Specs are strings containing lines, each of which (if not blank)\n is made up of a program name, and arguments separated by spaces.\n@@ -2379,7 +2378,7 @@ static struct infile *infiles;\n \n static int n_infiles;\n \n-/* This counts the number of libraries added by LANG_SPECIFIC_DRIVER, so that\n+/* This counts the number of libraries added by lang_specific_driver, so that\n    we can tell if there were any user supplied any files or libraries.  */\n \n static int added_libraries;\n@@ -2719,10 +2718,8 @@ process_command (argc, argv)\n   /* Convert new-style -- options to old-style.  */\n   translate_options (&argc, &argv);\n \n-#ifdef LANG_SPECIFIC_DRIVER\n   /* Do language-specific adjustment/addition of flags.  */\n   lang_specific_driver (fatal, &argc, &argv, &added_libraries);\n-#endif\n \n   /* Scan argv twice.  Here, the first time, just count how many switches\n      there will be in their vector, and how many input files in theirs.\n@@ -3747,9 +3744,8 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t  case 'o':\n \t    {\n \t      int max = n_infiles;\n-#ifdef LANG_SPECIFIC_DRIVER\n \t      max += lang_specific_extra_outfiles;\n-#endif\n+\n \t      for (i = 0; i < max; i++)\n \t\tif (outfiles[i])\n \t\t  store_arg (outfiles[i], 0, 0);\n@@ -5008,9 +5004,7 @@ main (argc, argv)\n      that correspond to the input files.  */\n \n   i = n_infiles;\n-#ifdef LANG_SPECIFIC_DRIVER\n   i += lang_specific_extra_outfiles;\n-#endif\n   outfiles = (const char **) xmalloc (i * sizeof (char *));\n   bzero ((char *) outfiles, i * sizeof (char *));\n \n@@ -5109,7 +5103,6 @@ main (argc, argv)\n       clear_failure_queue ();\n     }\n \n-#ifdef LANG_SPECIFIC_DRIVER\n   if (error_count == 0)\n     {\n       /* Make sure INPUT_FILE_NUMBER points to first available open\n@@ -5118,7 +5111,6 @@ main (argc, argv)\n       if (lang_specific_pre_link ())\n \terror_count++;\n     }\n-#endif\n \n   /* Run ld to link all the compiler output files.  */\n "}, {"sha": "78c67d2cec855c6151ab26774df3e5ada4c10fbf", "filename": "gcc/gccspec.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fgccspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fgccspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgccspec.c?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -0,0 +1,43 @@\n+/* Specific flags and argument handling of the C front-end.\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+\n+/* Filter argc and argv before processing by the gcc driver proper. */\n+void\n+lang_specific_driver (fn, in_argc, in_argv, in_added_libraries)\n+     void (*fn)() ATTRIBUTE_UNUSED;\n+     int *in_argc ATTRIBUTE_UNUSED;\n+     char ***in_argv ATTRIBUTE_UNUSED;\n+     int *in_added_libraries ATTRIBUTE_UNUSED;\n+{\n+  return;  /* Not used for C. */\n+}\n+\n+/* Called before linking.  Returns 0 on success and -1 on failure. */\n+int\n+lang_specific_pre_link ()\n+{\n+  return 0;  /* Not used for C. */\n+}\n+\n+/* Number of extra output files that lang_specific_pre_link may generate. */\n+int lang_specific_extra_outfiles = 0;  /* Not used for C. */"}, {"sha": "d24206b3fb56d5c9bca7f227327524376e547834", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -1,3 +1,8 @@\n+1999-03-25  Zack Weinberg  <zack@rabi.columbia.edu>\n+\n+\t* java/Make-lang.in: Remove all references to gcj.o/gcj.c.\n+\tLink gcj from gcc.o.\n+\n Tue Mar 23 10:48:24 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n \t* parse.y (find_applicable_accessible_methods_list): When dealing"}, {"sha": "787319e3c0903d1e1f0566adfcc91b3f8f77976a", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08dc830e4f7a946edb34a7ab6582425c1c900194/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=08dc830e4f7a946edb34a7ab6582425c1c900194", "patch": "@@ -79,30 +79,15 @@ JAVA_SRCS = $(srcdir)/java/parse.y $(srcdir)/java/class.c \\\n jc1$(exeext): $(P) $(JAVA_SRCS) $(LIBDEPS) stamp-objlist\n \tcd java; $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jc1$(exeext)\n \n-$(GCJ).c: $(srcdir)/gcc.c\n-\t-rm -f $@\n-\t$(LN_S) $(srcdir)/gcc.c $@\n-\n jvspec.o: $(srcdir)/java/jvspec.c\n \t$(CC) -c -DWITH_THREAD_$(GCC_THREAD_FILE) -DWITH_GC_$(JAVAGC) \\\n \t\t$(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$(INCLUDES) $(srcdir)/java/jvspec.c\n \n-# N.B.: This is a copy of the gcc.o rule, with -DLANG_SPECIFIC_DRIVER added.\n-# It'd be nice if we could find an easier way to do this---rather than have\n-# to track changes to the toplevel gcc Makefile as well.\n-# We depend on $(GCJ).c last, to make it obvious where it came from.\n-$(GCJ).o: $(CONFIG_H) multilib.h config.status $(lang_specs_files) $(GCJ).c \\\n-       system.h prefix.h\n-\t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(DRIVER_DEFINES) \\\n-\t-DLANG_SPECIFIC_DRIVER \\\n-  -c $(GCJ).c\n-\n # Create the compiler driver for $(GCJ).\n-$(GCJ)$(exeext): $(GCJ).o jvspec.o version.o \\\n+$(GCJ)$(exeext): gcc.o jvspec.o version.o \\\n \t   prefix.o intl.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ $(GCJ).o jvspec.o prefix.o intl.o \\\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o jvspec.o prefix.o intl.o \\\n \t  version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Create a version of the $(GCJ) driver which calls the cross-compiler."}]}