{"sha": "3f2b640a7a144e5ae52a84c3217abdccc5bdb199", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyYjY0MGE3YTE0NGU1YWU1MmE4NGMzMjE3YWJkY2NjNWJkYjE5OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-08-24T20:43:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-08-24T20:43:51Z"}, "message": "typeck.c (build_ptrmemfunc): Just reinterpret if there's no adjustment necessary.\n\n        * typeck.c (build_ptrmemfunc): Just reinterpret if there's no\n        adjustment necessary.\n\nFrom-SVN: r35954", "tree": {"sha": "08028cb0ac34171906f304a6017d3b9dfb750a9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08028cb0ac34171906f304a6017d3b9dfb750a9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f2b640a7a144e5ae52a84c3217abdccc5bdb199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2b640a7a144e5ae52a84c3217abdccc5bdb199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f2b640a7a144e5ae52a84c3217abdccc5bdb199", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f2b640a7a144e5ae52a84c3217abdccc5bdb199/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40e8cc959cbf470b4ef44fd93e329e84d4ff760a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e8cc959cbf470b4ef44fd93e329e84d4ff760a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e8cc959cbf470b4ef44fd93e329e84d4ff760a"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "9028c79bd09bef479e09b337ecec4516e0e3c031", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2b640a7a144e5ae52a84c3217abdccc5bdb199/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2b640a7a144e5ae52a84c3217abdccc5bdb199/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f2b640a7a144e5ae52a84c3217abdccc5bdb199", "patch": "@@ -1,3 +1,8 @@\n+2000-08-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (build_ptrmemfunc): Just reinterpret if there's no\n+\tadjustment necessary.\n+\n 2000-08-24  Greg McGary  <greg@mcgary.org>\n \n \t* cp-tree.h (MAIN_NAME_P): Remove macro."}, {"sha": "964993d9392f8c29040baacf0ebb5adf825dd2fe", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f2b640a7a144e5ae52a84c3217abdccc5bdb199/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f2b640a7a144e5ae52a84c3217abdccc5bdb199/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3f2b640a7a144e5ae52a84c3217abdccc5bdb199", "patch": "@@ -6125,12 +6125,21 @@ build_ptrmemfunc (type, pfn, force)\n \tcp_error (\"invalid conversion to type `%T' from type `%T'\", \n \t\t  to_type, pfn_type);\n \n+      n = get_delta_difference (TYPE_PTRMEMFUNC_OBJECT_TYPE (pfn_type),\n+\t\t\t\tTYPE_PTRMEMFUNC_OBJECT_TYPE (to_type),\n+\t\t\t\tforce);\n+\n       /* We don't have to do any conversion to convert a\n \t pointer-to-member to its own type.  But, we don't want to\n \t just return a PTRMEM_CST if there's an explicit cast; that\n \t cast should make the expression an invalid template argument.  */\n-      if (TREE_CODE (pfn) != PTRMEM_CST && same_type_p (to_type, pfn_type))\n-\treturn pfn;\n+      if (TREE_CODE (pfn) != PTRMEM_CST)\n+\t{\n+\t  if (same_type_p (to_type, pfn_type))\n+\t    return pfn;\n+\t  else if (integer_zerop (n))\n+\t    return build_reinterpret_cast (to_type, pfn);\n+\t}\n \n       if (TREE_SIDE_EFFECTS (pfn))\n \tpfn = save_expr (pfn);\n@@ -6142,9 +6151,6 @@ build_ptrmemfunc (type, pfn, force)\n \t  npfn = build_component_ref (pfn, pfn_identifier, NULL_TREE, 0);\n \t  delta = build_component_ref (pfn, delta_identifier, NULL_TREE, 0);\n \t  delta = cp_convert (ptrdiff_type_node, delta);\n-\t  n = get_delta_difference (TYPE_PTRMEMFUNC_OBJECT_TYPE (pfn_type),\n-\t\t\t\t    TYPE_PTRMEMFUNC_OBJECT_TYPE (to_type),\n-\t\t\t\t    force);\n \t  delta = cp_build_binary_op (PLUS_EXPR, delta, n);\n \t  return build_ptrmemfunc1 (to_type, delta, NULL_TREE, npfn,\n \t\t\t\t    NULL_TREE);\n@@ -6173,9 +6179,6 @@ build_ptrmemfunc (type, pfn, force)\n \t  idx = build_component_ref (pfn, index_identifier, NULL_TREE, 0);\n \t}\n \n-      n = get_delta_difference (TYPE_PTRMEMFUNC_OBJECT_TYPE (pfn_type),\n-\t\t\t\tTYPE_PTRMEMFUNC_OBJECT_TYPE (to_type),\n-\t\t\t\tforce);\n       delta = cp_build_binary_op (PLUS_EXPR, ndelta, n);\n       delta2 = cp_build_binary_op (PLUS_EXPR, ndelta2, n);\n       e1 = fold (build (GT_EXPR, boolean_type_node, idx, integer_zero_node));"}]}