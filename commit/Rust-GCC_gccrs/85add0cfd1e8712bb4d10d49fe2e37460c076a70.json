{"sha": "85add0cfd1e8712bb4d10d49fe2e37460c076a70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhZGQwY2ZkMWU4NzEyYmI0ZDEwZDQ5ZmUyZTM3NDYwYzA3NmE3MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-01T12:08:53Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-08-01T12:08:53Z"}, "message": "i386.c (ix86_address_subreg_operand): Reject stack pointer.\n\n        * config/i386/i386.c (ix86_address_subreg_operand): Reject\n        stack pointer.\n        (ix86_print_operand_address): Assert that parts.base and parts.index\n        are non-NULL after call to simplify_subreg.\n\nFrom-SVN: r190036", "tree": {"sha": "0b0fad237d2c3ddb2bbafd3e1fcceed0b61f8641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0fad237d2c3ddb2bbafd3e1fcceed0b61f8641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85add0cfd1e8712bb4d10d49fe2e37460c076a70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85add0cfd1e8712bb4d10d49fe2e37460c076a70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85add0cfd1e8712bb4d10d49fe2e37460c076a70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85add0cfd1e8712bb4d10d49fe2e37460c076a70/comments", "author": null, "committer": null, "parents": [{"sha": "1491b564b2513c4ed61a4c18ac79e453277845e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1491b564b2513c4ed61a4c18ac79e453277845e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1491b564b2513c4ed61a4c18ac79e453277845e8"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "cb675b349f050e8b867dee00d72418c8ed4ca21f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85add0cfd1e8712bb4d10d49fe2e37460c076a70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85add0cfd1e8712bb4d10d49fe2e37460c076a70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85add0cfd1e8712bb4d10d49fe2e37460c076a70", "patch": "@@ -1,3 +1,10 @@\n+2012-08-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_address_subreg_operand): Reject\n+\tstack pointer.\n+\t(ix86_print_operand_address): Assert that parts.base and parts.index\n+\tare non-NULL after call to simplify_subreg.\n+\n 2012-08-01  Richard Guenther  <rguenther@suse.de>\n \n \t* doc/tree-ssa.texi: Remove pieces mentioning mark_sym_for_renaming.\n@@ -61,10 +68,10 @@\n \t* tree-ssanames.c (init_ssanames): Adjust.\n \t* tree-ssa.c (maybe_rewrite_mem_ref_base, maybe_optimize_var,\n \texecute_update_addresses_taken): Add bitmap to keep track of which\n-\tcandidates are suitable for rewriting and later renaming by SSA\n-\tupdate.\n+\tcandidates are suitable for rewriting and later renaming by SSA update.\n \t* matrix-reorg.c (transform_access_sites): Do not rename all defs.\n-\t* tree-dfa.c (make_rename_temp): Do not mark real operands for renaming.\n+\t* tree-dfa.c (make_rename_temp): Do not mark real operands for\n+\trenaming.\n \t* cgraphunit.c (assemble_thunk): Likewise.\n \t* gimplify.c (gimple_regimplify_operands): Likewise.\n \t(force_gimple_operand_1): Likewise.\n@@ -79,8 +86,7 @@\n \t(execute_load_motion): Likewise.\n \t(remove_stmt): Likewise.\n \t(execute_pred_commoning_chain): Likewise.\n-\t* tree-sra.c (create_access_replacement): Do not rename real\n-\toperands.\n+\t* tree-sra.c (create_access_replacement): Do not rename real operands.\n \t(get_unrenamed_access_replacement): Unify with ...\n \t(get_access_replacement): ... this.\n \t(get_repl_default_def_ssa_name): Adjust.\n@@ -152,8 +158,7 @@\n \t(fini_ssa_renamer): Likewise.\n \t(delete_update_ssa): Likewise.\n \t(update_ssa): Likewise.\n-\t* tree-ssanames.c (release_dead_ssa_names): Do not clear\n-\tcurrent defs.\n+\t* tree-ssanames.c (release_dead_ssa_names): Do not clear current defs.\n \n 2012-07-31  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n@@ -176,8 +181,8 @@\n 2012-07-31  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR target/53975\n-\t\n-\t* sel-sched-ir.c (has_dependence_note_reg_use): Clarify comment. \n+\n+\t* sel-sched-ir.c (has_dependence_note_reg_use): Clarify comment.\n \n \tRevert\n \t2011-08-04  Sergey Grechanik  <mouseentity@ispras.ru>\n@@ -259,8 +264,7 @@\n \n 2012-07-30  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* doc/sourcebuild.texi (Subdirectories): Document common\n-\tsubdirectory.\n+\t* doc/sourcebuild.texi (Subdirectories): Document common subdirectory.\n \n 2012-07-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n@@ -299,8 +303,7 @@\n \t* config/i386/driver-i386.c (host_detect_local_cpu): Detect\n \tRDSEED support.\n \t* config/i386/i386-c.c: Define __RDSEED__ if needed.\n-\t* config/i386/i386.c (ix86_target_string): Define\n-\t-mrdseed option.\n+\t* config/i386/i386.c (ix86_target_string): Define -mrdseed option.\n \t(PTA_RDSEED): New.\n \t(ix86_option_override_internal): Handle new option.\n \t(ix86_valid_target_attribute_inner_p): Add OPT_mrdseed.\n@@ -324,7 +327,8 @@\n 2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/39423\n-\t* config/gcc/sh/sh.md (*movsi_index_disp, *movhi_index_disp): New insns.\n+\t* config/gcc/sh/sh.md (*movsi_index_disp, *movhi_index_disp): New\n+\tinsns.\n \n 2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n@@ -344,16 +348,14 @@\n \t    Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gengtype.c (adjust_field_type): Diagnose duplicate \"length\"\n-\toption applications and option being applied to arrays of atomic\n-\ttypes.\n+\toption applications and option being applied to arrays of atomic types.\n \t(walk_type): Allow \"atomic\" option on strings too.\n \t* dwarf2out.h (struct dw_vec_struct): Use the \"atomic\" GTY option\n \tfor the array field.\n \t* vec.h: Describe the atomic object \"A\" type of the macros in\n \tthe header comment.\n \t(VEC_T_GTY_ATOMIC, DEF_VEC_A, DEF_VEC_ALLOC_A): Define.\n-\t* emit-rtl.c (locations_locators_vals): use the atomic object\n-\tvector.\n+\t* emit-rtl.c (locations_locators_vals): use the atomic object vector.\n \t* doc/gty.texi: Clarify that GTY option \"length\" is only for\n \tarrays of non-atomic objects.  Fix typo in the description of the\n \t\"atomic\" option."}, {"sha": "1772dc61f21804f4efae74e74af406fb475f7156", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85add0cfd1e8712bb4d10d49fe2e37460c076a70/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85add0cfd1e8712bb4d10d49fe2e37460c076a70/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=85add0cfd1e8712bb4d10d49fe2e37460c076a70", "patch": "@@ -11657,6 +11657,10 @@ ix86_address_subreg_operand (rtx op)\n   if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n     return false;\n \n+  /* simplify_subreg does not handle stack pointer.  */\n+  if (REGNO (op) == STACK_POINTER_REGNUM)\n+    return false;\n+\n   /* Allow only SUBREGs of non-eliminable hard registers.  */\n   return register_no_elim_operand (op, mode);\n }\n@@ -14823,13 +14827,15 @@ ix86_print_operand_address (FILE *file, rtx addr)\n       rtx tmp = SUBREG_REG (parts.base);\n       parts.base = simplify_subreg (GET_MODE (parts.base),\n \t\t\t\t    tmp, GET_MODE (tmp), 0);\n+      gcc_assert (parts.base != NULL_RTX);\n     }\n \n   if (parts.index && GET_CODE (parts.index) == SUBREG)\n     {\n       rtx tmp = SUBREG_REG (parts.index);\n       parts.index = simplify_subreg (GET_MODE (parts.index),\n \t\t\t\t     tmp, GET_MODE (tmp), 0);\n+      gcc_assert (parts.index != NULL_RTX);\n     }\n \n   base = parts.base;"}]}