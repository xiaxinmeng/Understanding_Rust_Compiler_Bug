{"sha": "69fcc21d4c92f37bf556fc580253d75c17825ab6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjlmY2MyMWQ0YzkyZjM3YmY1NTZmYzU4MDI1M2Q3NWMxNzgyNWFiNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-19T17:50:20Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-19T17:50:20Z"}, "message": "(EXTRA_CC_MODES, EXTRA_CC_NAMES): Add CC_Zmode.\n\n(SELECT_CC_MODE): return CC_Zmode if the operand is QImode.  Allow LT\nand GE comparisons in CC_NOOVmode.\n(PREDICATE_CODES): add offsettable_memory_operand and\nalignable_memory_operand.\n\nFrom-SVN: r11306", "tree": {"sha": "88b2c5d0bb6c6b7d9778458a64cc74f664c925af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88b2c5d0bb6c6b7d9778458a64cc74f664c925af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69fcc21d4c92f37bf556fc580253d75c17825ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69fcc21d4c92f37bf556fc580253d75c17825ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69fcc21d4c92f37bf556fc580253d75c17825ab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69fcc21d4c92f37bf556fc580253d75c17825ab6/comments", "author": null, "committer": null, "parents": [{"sha": "0502226c85bddf9ed6eb549770c0dbcabe66a856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0502226c85bddf9ed6eb549770c0dbcabe66a856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0502226c85bddf9ed6eb549770c0dbcabe66a856"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "268da293d2f13b107d5af7998b35d08d8fdbe1eb", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69fcc21d4c92f37bf556fc580253d75c17825ab6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69fcc21d4c92f37bf556fc580253d75c17825ab6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=69fcc21d4c92f37bf556fc580253d75c17825ab6", "patch": "@@ -1438,17 +1438,18 @@ do\t\t\t\t\t\t\t\t\t\\\n    CCFPEmode should be used with floating inequalities,\n    CCFPmode should be used with floating equalities.\n    CC_NOOVmode should be used with SImode integer equalities.\n+   CC_Zmode should be used if only the Z flag is set correctly\n    CCmode should be used otherwise. */\n \n-#define EXTRA_CC_MODES CC_NOOVmode, CCFPmode, CCFPEmode\n+#define EXTRA_CC_MODES CC_NOOVmode, CC_Zmode, CCFPmode, CCFPEmode\n \n-#define EXTRA_CC_NAMES \"CC_NOOV\", \"CCFP\", \"CCFPE\"\n+#define EXTRA_CC_NAMES \"CC_NOOV\", \"CC_Z\", \"CCFP\", \"CCFPE\"\n \n #define SELECT_CC_MODE(OP,X,Y)\t\t\t\t      \t\t\\\n   (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\t\t\\\n    ? ((OP == EQ || OP == NE) ? CCFPmode : CCFPEmode)\t\t\t\\\n    : ((GET_MODE (X) == SImode)\t\t\t\t\t\t\\\n-      && ((OP) == EQ || (OP) == NE)\t\t\t\t\t\\\n+      && ((OP) == EQ || (OP) == NE || (OP) == LT || (OP) == GE)\t\t\\\n       && (GET_CODE (X) == PLUS || GET_CODE (X) == MINUS\t\t\t\\\n \t  || GET_CODE (X) == AND || GET_CODE (X) == IOR\t\t\t\\\n \t  || GET_CODE (X) == XOR || GET_CODE (X) == MULT\t\t\\\n@@ -1457,7 +1458,7 @@ do\t\t\t\t\t\t\t\t\t\\\n \t  || GET_CODE (X) == ASHIFT || GET_CODE (X) == ASHIFTRT\t\t\\\n \t  || GET_CODE (X) == ROTATERT || GET_CODE (X) == ZERO_EXTRACT)\t\\\n       ? CC_NOOVmode\t\t\t\t\t\t\t\\\n-      : GET_MODE (X) == QImode ? CC_NOOVmode : CCmode))\n+      : GET_MODE (X) == QImode ? CC_Zmode : CCmode))\n \n #define REVERSIBLE_CC_MODE(MODE) ((MODE) != CCFPEmode)\n \n@@ -1478,6 +1479,8 @@ extern int arm_compare_fp;\n   {\"arm_rhs_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"fpu_rhs_operand\", {SUBREG, REG, CONST_DOUBLE}},\t\t\t\\\n   {\"arm_not_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n+  {\"offsettable_memory_operand\", {MEM}},\t\t\t\t\\\n+  {\"alignable_memory_operand\", {MEM}},\t\t\t\t\t\\\n   {\"shiftable_operator\", {PLUS, MINUS, AND, IOR, XOR}},\t\t\t\\\n   {\"minmax_operator\", {SMIN, SMAX, UMIN, UMAX}},\t\t\t\\\n   {\"shift_operator\", {ASHIFT, ASHIFTRT, LSHIFTRT, ROTATERT, MULT}},\t\\"}]}