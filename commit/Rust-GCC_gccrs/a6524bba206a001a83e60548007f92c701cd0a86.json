{"sha": "a6524bba206a001a83e60548007f92c701cd0a86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1MjRiYmEyMDZhMDAxYTgzZTYwNTQ4MDA3ZjkyYzcwMWNkMGE4Ng==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-11-10T09:43:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-11-10T09:43:54Z"}, "message": "re PR tree-optimization/56118 (Piecewise vector / complex initialization from constants not combined)\n\n2015-11-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56118\n\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Make equal\n\tcost favor vectorized version.\n\n\t* gcc.target/i386/pr56118.c: New testcase.\n\nFrom-SVN: r230091", "tree": {"sha": "3b9cc5b589d61eba67688f2a1f9cc1e6c00f7ebf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b9cc5b589d61eba67688f2a1f9cc1e6c00f7ebf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6524bba206a001a83e60548007f92c701cd0a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6524bba206a001a83e60548007f92c701cd0a86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6524bba206a001a83e60548007f92c701cd0a86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6524bba206a001a83e60548007f92c701cd0a86/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3204ac9868cc02eacd88abf30b7e64a479beb3fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3204ac9868cc02eacd88abf30b7e64a479beb3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3204ac9868cc02eacd88abf30b7e64a479beb3fe"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "68163747ca153ab74850a260206ead2d17523112", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6524bba206a001a83e60548007f92c701cd0a86", "patch": "@@ -1,3 +1,9 @@\n+2015-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56118\n+\t* tree-vect-slp.c (vect_bb_vectorization_profitable_p): Make equal\n+\tcost favor vectorized version.\n+\n 2015-11-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (<neg_not_op><mode>cc): New define_expand."}, {"sha": "bbaf9a347c8e9566bad3b0cc8b836a4b30b90dd8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6524bba206a001a83e60548007f92c701cd0a86", "patch": "@@ -1,3 +1,8 @@\n+2015-11-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56118\n+\t* gcc.target/i386/pr56118.c: New testcase.\n+\n 2015-11-10  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/cond_op_imm_1.c: New test."}, {"sha": "11a543cafe83aee2f0eeb624a83057402e4b4e78", "filename": "gcc/testsuite/gcc.target/i386/pr56118.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr56118.c?ref=a6524bba206a001a83e60548007f92c701cd0a86", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -msse2\" } */\n+\n+#include <emmintrin.h>\n+\n+__m128d f()\n+{\n+  __m128d r={3,4};\n+  r[0]=1;\n+  r[1]=2;\n+  return r;\n+}\n+\n+/* We want to \"vectorize\" this to a aligned vector load from the\n+   constant pool.  */\n+\n+/* { dg-final { scan-assembler \"movapd\" } } */"}, {"sha": "6dda2ec9eae1f52486fa9e13c7243a9e4c7cb601", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6524bba206a001a83e60548007f92c701cd0a86/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a6524bba206a001a83e60548007f92c701cd0a86", "patch": "@@ -2317,9 +2317,12 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo)\n       dump_printf (MSG_NOTE, \"  Scalar cost of basic block: %d\\n\", scalar_cost);\n     }\n \n-  /* Vectorization is profitable if its cost is less than the cost of scalar\n-     version.  */\n-  if (vec_outside_cost + vec_inside_cost >= scalar_cost)\n+  /* Vectorization is profitable if its cost is more than the cost of scalar\n+     version.  Note that we err on the vector side for equal cost because\n+     the cost estimate is otherwise quite pessimistic (constant uses are\n+     free on the scalar side but cost a load on the vector side for\n+     example).  */\n+  if (vec_outside_cost + vec_inside_cost > scalar_cost)\n     return false;\n \n   return true;"}]}