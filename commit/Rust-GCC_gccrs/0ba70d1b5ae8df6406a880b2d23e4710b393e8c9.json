{"sha": "0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJhNzBkMWI1YWU4ZGY2NDA2YTg4MGIyZDIzZTQ3MTBiMzkzZThjOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-26T14:43:57Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-27T02:02:53Z"}, "message": "analyzer: fix ICE on unreachable calls [PR 93947]\n\nPR analyzer/93947 reports an ICE at -O1 when attempting to analyze a\ncall that has been optimized away as unreachable.\n\nThe root cause is a NULL dereference due to the fndecl having a NULL\ncgraph_node: the cgraph_node was created by\npass_build_cgraph_edges::execute, but was later removed by\nsymbol_table::remove_unreachable_nodes before the analyzer pass.\n\nThis patch fixes it by checking for NULL before handling the\ncgraph_node.\n\nThe reproducer demonstrates a weakness in the analyzer's constraint\nhandling, where region_model::apply_constraints_for_gswitch fails\nto spot when the cases fully cover the data type, and thus make the\ndefault impossible.  For now this is xfail-ed in the testcase.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93947\n\t* region-model.cc (region_model::get_fndecl_for_call): Gracefully\n\tfail for fn_decls that don't have a cgraph_node.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93947\n\t* gcc.dg/analyzer/torture/pr93947.c: New test.", "tree": {"sha": "52b4c8b2498c56cabb21025e9283280cf37870ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52b4c8b2498c56cabb21025e9283280cf37870ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89f759ac2ebb9f09ce5655ce5d791793922c612d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f759ac2ebb9f09ce5655ce5d791793922c612d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f759ac2ebb9f09ce5655ce5d791793922c612d"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "92377be49929263c728fb5e081193717560683c4", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "patch": "@@ -1,3 +1,9 @@\n+2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93947\n+\t* region-model.cc (region_model::get_fndecl_for_call): Gracefully\n+\tfail for fn_decls that don't have a cgraph_node.\n+\n 2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* bar-chart.cc: New file."}, {"sha": "b2179bd220aa4d34863540393095a73ec9012a6d", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "patch": "@@ -6732,8 +6732,10 @@ region_model::get_fndecl_for_call (const gcall *call,\n \t  tree fn_decl = code->get_tree_for_child_region (fn_rid);\n \t  if (!fn_decl)\n \t    return NULL_TREE;\n-\t  const cgraph_node *ultimate_node\n-\t    = cgraph_node::get (fn_decl)->ultimate_alias_target ();\n+\t  cgraph_node *node = cgraph_node::get (fn_decl);\n+\t  if (!node)\n+\t    return NULL_TREE;\n+\t  const cgraph_node *ultimate_node = node->ultimate_alias_target ();\n \t  if (ultimate_node)\n \t    return ultimate_node->decl;\n \t}"}, {"sha": "c6158b38ca07909b306f4c1ed3d15f9eeb6a5b8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93947\n+\t* gcc.dg/analyzer/torture/pr93947.c: New test.\n+\n 2020-02-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* g++.dg/coroutines/coro1-refs-and-ctors.h: New."}, {"sha": "73982ef4bd313d588fd66313f90a875d28805e1e", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93947.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93947.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ba70d1b5ae8df6406a880b2d23e4710b393e8c9/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93947.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93947.c?ref=0ba70d1b5ae8df6406a880b2d23e4710b393e8c9", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } { \"\" } } */\n+\n+#include \"../analyzer-decls.h\"\n+\n+struct pf {\n+  unsigned int iu : 2;\n+};\n+\n+enum {\n+  qr, jv, vm, mz,\n+};\n+\n+int uh;\n+\n+void\n+w9 (struct pf *x2)\n+{\n+  /* We ought to know the following based on the bitfield width.  */\n+  __analyzer_eval (x2->iu >= 0 ); /* { dg-warning \"TRUE\" } */\n+  __analyzer_eval (x2->iu < 4 ); /* { dg-warning \"TRUE\" } */\n+\n+  switch (x2->iu)\n+    {\n+    case qr:\n+    case jv:\n+    case vm:\n+      uh = 0;\n+      break;\n+\n+    case mz:\n+      break;\n+\n+    default:\n+      /* We ought to know from the enum values that this code is unreachable,\n+\t and thus not print anything.\n+\t TODO(xfail): currently this doesn't work.  */\n+      __analyzer_eval (x2->iu); /* { dg-bogus \"\" \"\" { xfail *-*-* } } */\n+      __builtin_abort ();\n+    }\n+}"}]}