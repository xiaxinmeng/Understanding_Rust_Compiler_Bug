{"sha": "638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4YWQzMzNlYzU0NGVkNzg3M2VkNmUxM2I2ZjA5NWQ2ZDU4ZmQzYg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-06-19T22:57:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-06-19T22:57:10Z"}, "message": "Fix non-standard behaviour of std::istream_iterator\n\nThe current implementation of istream_iterator allows the iterator to be\nreused after reaching end-of-stream, so that subsequent reads from the\nstream can succeed (e.g. if the stream state has been cleared and stream\nposition changed from EOF). The P0738R2 paper clarified that the\nexpected behaviour is to set the stream pointer to null after reaching\nend-of-stream, preventing further reads.\n\nThis implements that requirement, and adds the new default constructor\nto std::ostream_iterator.\n\n\t* include/bits/stream_iterator.h (istream_iterator::_M_equal()): Make\n\tprivate.\n\t(istream_iterator::_M_read()): Do not check stream state before\n\tattempting extraction. Set stream pointer to null when extraction\n\tfails (P0738R2).\n\t(operator==(const istream_iterator&, const istream_iterator&)): Change\n\tto be a hidden friend of istream_iterator.\n\t(operator!=(const istream_iterator&, const istream_iterator&)):\n\tLikewise.\n\t(ostream_iterator::ostream_iterator()): Add default constructor.\n\t(ostream_iterator::ostream_iterator(ostream_type*, const C*)): Use\n\taddressof.\n\t* testsuite/24_iterators/istream_iterator/1.cc: New test.\n\t* testsuite/24_iterators/ostream_iterator/1.cc: New test.\n\t* testsuite/24_iterators/ostream_iterator/70766.cc: Also check\n\tconstructor taking a string.\n\t* testsuite/24_iterators/ostream_iterator/requirements/constexpr.cc:\n\tNew test.\n\nFrom-SVN: r272491", "tree": {"sha": "cc296691181aaf4a131f07a799482aba89f10863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc296691181aaf4a131f07a799482aba89f10863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d0dada6773d7fd7c5ace64c90e723930a3b81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36d0dada6773d7fd7c5ace64c90e723930a3b81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36d0dada6773d7fd7c5ace64c90e723930a3b81e"}], "stats": {"total": 232, "additions": 207, "deletions": 25}, "files": [{"sha": "40df69ee49c8b1a651a551cd5eb94cc3daefc0d5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "patch": "@@ -1,3 +1,24 @@\n+2019-06-19  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stream_iterator.h (istream_iterator::_M_equal()): Make\n+\tprivate.\n+\t(istream_iterator::_M_read()): Do not check stream state before\n+\tattempting extraction. Set stream pointer to null when extraction\n+\tfails (P0738R2).\n+\t(operator==(const istream_iterator&, const istream_iterator&)): Change\n+\tto be a hidden friend of istream_iterator.\n+\t(operator!=(const istream_iterator&, const istream_iterator&)):\n+\tLikewise.\n+\t(ostream_iterator::ostream_iterator()): Add default constructor.\n+\t(ostream_iterator::ostream_iterator(ostream_type*, const C*)): Use\n+\taddressof.\n+\t* testsuite/24_iterators/istream_iterator/1.cc: New test.\n+\t* testsuite/24_iterators/ostream_iterator/1.cc: New test.\n+\t* testsuite/24_iterators/ostream_iterator/70766.cc: Also check\n+\tconstructor taking a string.\n+\t* testsuite/24_iterators/ostream_iterator/requirements/constexpr.cc:\n+\tNew test.\n+\n 2019-06-19  Michael Weghorn  <m.weghorn@posteo.de>\n \t    Jonathan Wakely  <jwakely@redhat.com>\n "}, {"sha": "247ad5376dd08d8d829f7a1a3987d375af99d4f4", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 36, "deletions": 25, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "patch": "@@ -57,6 +57,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n       istream_type*\t_M_stream;\n       _Tp\t\t_M_value;\n+      // This bool becomes false at end-of-stream. It should be sufficient to\n+      // check _M_stream != nullptr instead, but historically we did not set\n+      // _M_stream to null when reaching the end, so we need to keep this flag.\n       bool\t\t_M_ok;\n \n     public:\n@@ -66,7 +69,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       ///  Construct start of input stream iterator.\n       istream_iterator(istream_type& __s)\n-      : _M_stream(std::__addressof(__s))\n+      : _M_stream(std::__addressof(__s)), _M_ok(true)\n       { _M_read(); }\n \n       istream_iterator(const istream_iterator& __obj)\n@@ -76,6 +79,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n       istream_iterator& operator=(const istream_iterator&) = default;\n+      ~istream_iterator() = default;\n #endif\n \n       const _Tp&\n@@ -111,36 +115,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn __tmp;\n       }\n \n+    private:\n       bool\n       _M_equal(const istream_iterator& __x) const\n-      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }\n+      {\n+\t// Ideally this would just return _M_stream == __x._M_stream,\n+\t// but code compiled with old versions never sets _M_stream to null.\n+\treturn (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);\n+      }\n \n-    private:\n       void\n       _M_read()\n       {\n-\t_M_ok = (_M_stream && *_M_stream) ? true : false;\n-\tif (_M_ok)\n-\t  {\n-\t    *_M_stream >> _M_value;\n-\t    _M_ok = *_M_stream ? true : false;\n-\t  }\n+        if (_M_stream && !(*_M_stream >> _M_value))\n+          {\n+            _M_stream = 0;\n+            _M_ok = false;\n+          }\n       }\n-    };\n \n-  ///  Return true if x and y are both end or not end, or x and y are the same.\n-  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>\n-    inline bool\n-    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n-\t       const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)\n-    { return __x._M_equal(__y); }\n-\n-  ///  Return false if x and y are both end or not end, or x and y are the same.\n-  template <class _Tp, class _CharT, class _Traits, class _Dist>\n-    inline bool\n-    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,\n-\t       const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)\n-    { return !__x._M_equal(__y); }\n+      /// Return true if the iterators refer to the same stream,\n+      /// or are both at end-of-stream.\n+      friend bool\n+      operator==(const istream_iterator& __x, const istream_iterator& __y)\n+      { return __x._M_equal(__y); }\n+\n+      /// Return true if the iterators refer to different streams,\n+      /// or if one is at end-of-stream and the other is not.\n+      friend bool\n+      operator!=(const istream_iterator& __x, const istream_iterator& __y)\n+      { return !__x._M_equal(__y); }\n+    };\n \n   /**\n    *  @brief  Provides output iterator semantics for streams.\n@@ -171,6 +176,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const _CharT*\t_M_string;\n \n     public:\n+#if __cplusplus > 201703L\n+      constexpr ostream_iterator() noexcept\n+      : _M_stream(nullptr), _M_string(nullptr) { }\n+#endif\n+\n       /// Construct from an ostream.\n       ostream_iterator(ostream_type& __s)\n       : _M_stream(std::__addressof(__s)), _M_string(0) {}\n@@ -186,7 +196,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __c  CharT delimiter string to insert.\n       */\n       ostream_iterator(ostream_type& __s, const _CharT* __c)\n-      : _M_stream(&__s), _M_string(__c)  { }\n+      : _M_stream(std::__addressof(__s)), _M_string(__c)  { }\n \n       /// Copy constructor.\n       ostream_iterator(const ostream_iterator& __obj)\n@@ -205,7 +215,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t_M_message(__gnu_debug::__msg_output_ostream)\n \t\t\t\t._M_iterator(*this));\n \t*_M_stream << __value;\n-\tif (_M_string) *_M_stream << _M_string;\n+\tif (_M_string)\n+          *_M_stream << _M_string;\n \treturn *this;\n       }\n "}, {"sha": "78b5f7df0c5c6966e60040ae619274e2033c2750", "filename": "libstdc++-v3/testsuite/24_iterators/istream_iterator/1.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fistream_iterator%2F1.cc?ref=638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "patch": "@@ -0,0 +1,77 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++98 24.5.1 Template class istream_iterator\n+\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+\n+  const int N = 6;\n+  int arr[N]  = { };\n+  using __gnu_test::test_container;\n+  using __gnu_test::output_iterator_wrapper;\n+  test_container<int, output_iterator_wrapper> con(arr, arr+N);\n+  output_iterator_wrapper<int> out = con.begin();\n+\n+  istringstream ss(\"1 2 3 4 5\");\n+  std::istream_iterator<int> iter(ss), end;\n+  while (iter != end)\n+    *out++ = *iter++;\n+  VERIFY( iter == end );\n+  for (int i = 0; i < N; ++i)\n+    VERIFY( arr[i] == (i + 1) % N );\n+\n+  std::istream_iterator<int> iter2(ss);\n+  VERIFY( iter2 == end );\n+\n+  ss.clear();\n+  ss.str(\"-1 -2 -3\");\n+  VERIFY( iter == end );\n+\n+#ifndef _GLIBCXX_DEBUG\n+  // This is undefined, so aborts under debug mode.\n+  // Without debug mode, it should not extract anything from the stream,\n+  // and the iterator should remain at end-of-stream.\n+  ++iter;\n+  VERIFY( iter == end );\n+#endif\n+\n+  std::istream_iterator<int> iter3(ss);\n+  VERIFY( iter3 != end );\n+  VERIFY( iter3 != iter );\n+  VERIFY( *iter3 == -1 );\n+  ++iter3;\n+  VERIFY( *iter3 == -2 );\n+\n+  iter2 = iter3;\n+  VERIFY( *iter2 == -2 );\n+  ++iter2;\n+  VERIFY( *iter2 == -3 );\n+  ++iter2;\n+  VERIFY( iter2 == end );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "6d12bfbef4e03771a98e092601898372341e817f", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F1.cc?ref=638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2016-2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::ostringstream ss;\n+  std::ostream_iterator<int> iter(ss);\n+  for (int i = 0; i < 5; ++i)\n+    *iter++ = i;\n+  VERIFY( ss.str() == \"01234\" );\n+}\n+\n+void\n+test02()\n+{\n+  std::ostringstream ss;\n+  std::ostream_iterator<int> iter(ss, \" - \");\n+  for (int i = 0; i < 5; ++i)\n+    *iter++ = i;\n+  VERIFY( ss.str() == \"0 - 1 - 2 - 3 - 4 - \" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "c2e069e8e2292de998b234ee81f2f15c39d1ce92", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/70766.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F70766.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F70766.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2F70766.cc?ref=638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "patch": "@@ -33,4 +33,5 @@ test01()\n {\n   std::basic_ostream<char, adl::traits> os(nullptr);\n   std::ostream_iterator<int, char, adl::traits> oi(os);\n+  std::ostream_iterator<int, char, adl::traits> oi2(os, \"\");\n }"}, {"sha": "0fcc8f752ccbb5033244f0186e9751bed5a1089a", "filename": "libstdc++-v3/testsuite/24_iterators/ostream_iterator/requirements/constexpr.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/638ad333ec544ed7873ed6e13b6f095d6d58fd3b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fostream_iterator%2Frequirements%2Fconstexpr.cc?ref=638ad333ec544ed7873ed6e13b6f095d6d58fd3b", "patch": "@@ -0,0 +1,24 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+constexpr std::ostream_iterator<int> iter1;\n+constexpr std::ostream_iterator<int> iter2{};"}]}