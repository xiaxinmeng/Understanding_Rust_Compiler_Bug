{"sha": "02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhNGVjMjhhN2E4NTNmMDZmZGViNjdkYzlhM2JmNDM2MTNlZTc1YQ==", "commit": {"author": {"name": "Franz Sirl", "email": "Franz.Sirl-kernel@lauterbach.com", "date": "2001-02-09T03:15:56Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2001-02-09T03:15:56Z"}, "message": "rs6000.c (output_toc): Allow 32-bit targets to handle DImode constants.\n\n        * config/rs6000/rs6000.c (output_toc): Allow 32-bit targets to\n        handle DImode constants.  Use one TOC entry for SImode and smaller\n        constants, aligned properly.\n\nCo-Authored-By: David Edelsohn <edelsohn@gnu.org>\n\nFrom-SVN: r39557", "tree": {"sha": "400944d2621fe7713aa8157ecec43db3d5e7860b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/400944d2621fe7713aa8157ecec43db3d5e7860b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a/comments", "author": {"login": "jinkama-san", "id": 1462162, "node_id": "MDQ6VXNlcjE0NjIxNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1462162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jinkama-san", "html_url": "https://github.com/jinkama-san", "followers_url": "https://api.github.com/users/jinkama-san/followers", "following_url": "https://api.github.com/users/jinkama-san/following{/other_user}", "gists_url": "https://api.github.com/users/jinkama-san/gists{/gist_id}", "starred_url": "https://api.github.com/users/jinkama-san/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jinkama-san/subscriptions", "organizations_url": "https://api.github.com/users/jinkama-san/orgs", "repos_url": "https://api.github.com/users/jinkama-san/repos", "events_url": "https://api.github.com/users/jinkama-san/events{/privacy}", "received_events_url": "https://api.github.com/users/jinkama-san/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c97036e4c3dd29bcf32a3e72ce332e5fd8f5c325"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "654d2223db18580975a803dcb54d69d50e9b908e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a", "patch": "@@ -1,3 +1,10 @@\n+2001-02-05  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\t    David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (output_toc): Allow 32-bit targets to\n+\thandle DImode constants.  Use one TOC entry for SImode and smaller\n+\tconstants, aligned properly.\n+\n 2001-02-08  Jason Merrill  <jason@redhat.com>\n \n \t* config/arm/arm.c (arm_expand_prologue): Do tell the dwarf2 backend"}, {"sha": "2640c60c12097130c6acbbc048a017bb9a1e4ecf", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=02a4ec28a7a853f06fdeb67dc9a3bf43613ee75a", "patch": "@@ -1783,6 +1783,7 @@ rs6000_emit_move (dest, source, mode)\n \t\t\t\t  XEXP (operands[1], 0));\n \n   emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  return;\n }\n \f\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n@@ -6910,10 +6911,15 @@ output_toc (file, x, labelno, mode)\n \t integer constants in the TOC we have to pad them.\n \t (This is still a win over putting the constants in\n \t a separate constant pool, because then we'd have\n-\t to have both a TOC entry _and_ the actual constant.)  */\n-      if (POINTER_SIZE < GET_MODE_BITSIZE (mode))\n+\t to have both a TOC entry _and_ the actual constant.)\n+\n+\t For a 32-bit target, CONST_INT values are loaded and shifted\n+\t entirely within `low' and can be stored in one TOC entry.  */\n+\n+      if (TARGET_64BIT && POINTER_SIZE < GET_MODE_BITSIZE (mode))\n \tabort ();/* It would be easy to make this work, but it doesn't now.  */\n-      if (mode != Pmode)\n+\n+      if (POINTER_SIZE > GET_MODE_BITSIZE (mode))\n \tlshift_double (low, high, POINTER_SIZE - GET_MODE_BITSIZE (mode),\n \t\t       POINTER_SIZE, &low, &high, 0);\n \n@@ -6928,12 +6934,24 @@ output_toc (file, x, labelno, mode)\n \t}\n       else\n \t{\n-\t  if (TARGET_MINIMAL_TOC)\n-\t    fprintf (file, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\n-\t\t     (long)high, (long)low);\n+\t  if (POINTER_SIZE < GET_MODE_BITSIZE (mode))\n+\t    {\n+\t      if (TARGET_MINIMAL_TOC)\n+\t\tfprintf (file, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\n+\t\t\t (long)high, (long)low);\n+\t      else\n+\t\tfprintf (file, \"\\t.tc ID_%lx_%lx[TC],0x%lx,0x%lx\\n\",\n+\t\t\t (long)high, (long)low, (long)high, (long)low);\n+\t    }\n \t  else\n-\t    fprintf (file, \"\\t.tc ID_%lx_%lx[TC],0x%lx,0x%lx\\n\",\n-\t\t     (long)high, (long)low, (long)high, (long)low);\n+\t    {\n+\t      if (TARGET_MINIMAL_TOC)\n+\t\tfprintf (file, \"\\t.long 0x%lx\\n\",\n+\t\t\t (long)low);\n+\t      else\n+\t\tfprintf (file, \"\\t.tc IS_%lx[TC],0x%lx\\n\",\n+\t\t\t (long)low, (long)low);\n+\t    }\n \t  return;\n \t}\n     }"}]}