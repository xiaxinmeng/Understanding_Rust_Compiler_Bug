{"sha": "24b54eb2fd9ee616d899683a459756072e3a1c4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRiNTRlYjJmZDllZTYxNmQ4OTk2ODNhNDU5NzU2MDcyZTNhMWM0ZA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2019-10-22T03:40:26Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2019-10-22T03:40:26Z"}, "message": "[testsuite] Make the Wnonnull independent of system headers.\n\nTo avoid the result of this test depending on the implementation of\nthe system 'string.h', provide prototypes for the two functions used\nin the test.\n\ngcc/testsuite/ChangeLog:\n\n2019-10-22  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* gcc.dg/Wnonnull.c: Provide prototypes for strlen and memcpy.\n\tUse __SIZE_TYPE__ instead of size_t.\n\nFrom-SVN: r277280", "tree": {"sha": "993f780df5c4b46bc63d3bcdd2ca6dc842552ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/993f780df5c4b46bc63d3bcdd2ca6dc842552ac3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24b54eb2fd9ee616d899683a459756072e3a1c4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b54eb2fd9ee616d899683a459756072e3a1c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24b54eb2fd9ee616d899683a459756072e3a1c4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24b54eb2fd9ee616d899683a459756072e3a1c4d/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c72657917ad7b9160c36a5b7b240b3389da8eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c72657917ad7b9160c36a5b7b240b3389da8eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c72657917ad7b9160c36a5b7b240b3389da8eec"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "d63c7b5237838a88ff68b23cc975c7c2169d40f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54eb2fd9ee616d899683a459756072e3a1c4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54eb2fd9ee616d899683a459756072e3a1c4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24b54eb2fd9ee616d899683a459756072e3a1c4d", "patch": "@@ -1,3 +1,8 @@\n+2019-10-22  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* gcc.dg/Wnonnull.c: Provide prototypes for strlen and memcpy.\n+\tUse __SIZE_TYPE__ instead of size_t.\n+\n 2019-10-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/parse/qualified2.C: Tighten dg-error directive."}, {"sha": "0ed06aabe68cf7fa1e90e4526b862dfe8eb6ad51", "filename": "gcc/testsuite/gcc.dg/Wnonnull.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24b54eb2fd9ee616d899683a459756072e3a1c4d/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24b54eb2fd9ee616d899683a459756072e3a1c4d/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWnonnull.c?ref=24b54eb2fd9ee616d899683a459756072e3a1c4d", "patch": "@@ -2,16 +2,10 @@\n    { dg-do compile }\n    { dg-options \"-O2 -Wall\" } */\n \n-#ifndef __APPLE__\n-#include <string.h>\n-#else\n-/* OSX headers do not mark up the nonnull elements yet.  */\n-# include <stddef.h>\n-extern size_t strlen (const char *__s)\n-\t\t      __attribute ((pure)) __attribute ((nonnull (1)));\n+extern __SIZE_TYPE__ strlen (const char *__s)\n+\t\t\t     __attribute ((pure)) __attribute ((nonnull (1)));\n extern void *memcpy (void *__restrict __dest, const void *__restrict __src,\n-\t\t     size_t __n) __attribute ((nonnull (1, 2)));\n-#endif\n+\t\t     __SIZE_TYPE__ __n) __attribute ((nonnull (1, 2)));\n \n char buf[100];\n \n@@ -23,9 +17,9 @@ struct Test\n \n __attribute ((nonnull (1, 2)))\n inline char*\n-my_strcpy (char *restrict dst, const char *restrict src, size_t size)\n+my_strcpy (char *restrict dst, const char *restrict src, __SIZE_TYPE__ size)\n {\n-  size_t len = strlen (src);        /* { dg-warning \"argument 1 null where non-null expected\" } */\n+  __SIZE_TYPE__ len = strlen (src); /* { dg-warning \"argument 1 null where non-null expected\" } */\n   if (len < size)\n     memcpy (dst, src, len + 1);     /* { dg-warning \"argument 2 null where non-null expected\" } */\n   else"}]}