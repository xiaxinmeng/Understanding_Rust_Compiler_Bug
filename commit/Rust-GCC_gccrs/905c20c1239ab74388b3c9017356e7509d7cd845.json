{"sha": "905c20c1239ab74388b3c9017356e7509d7cd845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1YzIwYzEyMzlhYjc0Mzg4YjNjOTAxNzM1NmU3NTA5ZDdjZDg0NQ==", "commit": {"author": {"name": "Walter Lee", "email": "walt@tilera.com", "date": "2014-01-25T20:26:31Z"}, "committer": {"name": "Walter Lee", "email": "walt@gcc.gnu.org", "date": "2014-01-25T20:26:31Z"}, "message": "tilegx.c (tilegx_function_arg): Start 16-byte arguments on even registers.\n\n2014-01-25  Walter Lee  <walt@tilera.com>\n\n            * config/tilegx/tilegx.c (tilegx_function_arg): Start 16-byte\n            arguments on even registers.\n            (tilegx_function_arg_advance): Ditto.\n            (tilegx_gimplify_va_arg_expr): Align 16-byte var args to\n            STACK_BOUNDARY.\n            * config/tilegx/tilegx.h (STACK_BOUNDARY): Change to 16 bytes.\n            (BIGGEST_ALIGNMENT): Ditto.\n            (BIGGEST_FIELD_ALIGNMENT): Ditto.\n\nFrom-SVN: r207082", "tree": {"sha": "017057535d21524b879bc55c3a38370afbce581e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017057535d21524b879bc55c3a38370afbce581e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/905c20c1239ab74388b3c9017356e7509d7cd845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905c20c1239ab74388b3c9017356e7509d7cd845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905c20c1239ab74388b3c9017356e7509d7cd845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905c20c1239ab74388b3c9017356e7509d7cd845/comments", "author": {"login": "walt-tilera", "id": 6602917, "node_id": "MDQ6VXNlcjY2MDI5MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6602917?v=4", "gravatar_id": "", "url": "https://api.github.com/users/walt-tilera", "html_url": "https://github.com/walt-tilera", "followers_url": "https://api.github.com/users/walt-tilera/followers", "following_url": "https://api.github.com/users/walt-tilera/following{/other_user}", "gists_url": "https://api.github.com/users/walt-tilera/gists{/gist_id}", "starred_url": "https://api.github.com/users/walt-tilera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/walt-tilera/subscriptions", "organizations_url": "https://api.github.com/users/walt-tilera/orgs", "repos_url": "https://api.github.com/users/walt-tilera/repos", "events_url": "https://api.github.com/users/walt-tilera/events{/privacy}", "received_events_url": "https://api.github.com/users/walt-tilera/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e90a6255fdf3cb39dbd2e80fc8e7c091834b68b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e90a6255fdf3cb39dbd2e80fc8e7c091834b68b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e90a6255fdf3cb39dbd2e80fc8e7c091834b68b"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "0aa9c06b937c9d9963cfe9a139b3012c5d9d177b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905c20c1239ab74388b3c9017356e7509d7cd845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905c20c1239ab74388b3c9017356e7509d7cd845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=905c20c1239ab74388b3c9017356e7509d7cd845", "patch": "@@ -1,3 +1,13 @@\n+2014-01-25  Walter Lee  <walt@tilera.com>\n+\n+\t* config/tilegx/tilegx.c (tilegx_function_arg): Start 16-byte\n+\targuments on even registers.\n+\t(tilegx_gimplify_va_arg_expr): Align 16-byte var args to\n+\tSTACK_BOUNDARY.\n+\t* config/tilegx/tilegx.h (STACK_BOUNDARY): Change to 16 bytes.\n+\t(BIGGEST_ALIGNMENT): Ditto.\n+\t(BIGGEST_FIELD_ALIGNMENT): Ditto.\n+\n 2014-01-25  Walter Lee  <walt@tilera.com>\n \n \t* config/tilegx/tilegx.c (tilegx_gen_bundles): Delete barrier"}, {"sha": "f3c68e3c50fe568ee0b2984e0260fae96421d76c", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905c20c1239ab74388b3c9017356e7509d7cd845/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905c20c1239ab74388b3c9017356e7509d7cd845/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=905c20c1239ab74388b3c9017356e7509d7cd845", "patch": "@@ -220,10 +220,18 @@ tilegx_function_arg (cumulative_args_t cum_v,\n   CUMULATIVE_ARGS cum = *get_cumulative_args (cum_v);\n   int byte_size = ((mode == BLKmode)\n \t\t   ? int_size_in_bytes (type) : GET_MODE_SIZE (mode));\n+  bool doubleword_aligned_p;\n \n   if (cum >= TILEGX_NUM_ARG_REGS)\n     return NULL_RTX;\n \n+  /* See whether the argument has doubleword alignment.  */\n+  doubleword_aligned_p =\n+    tilegx_function_arg_boundary (mode, type) > BITS_PER_WORD;\n+\n+  if (doubleword_aligned_p)\n+    cum += cum & 1;\n+\n   /* The ABI does not allow parameters to be passed partially in reg\n      and partially in stack.  */\n   if ((cum + (byte_size + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n@@ -245,6 +253,14 @@ tilegx_function_arg_advance (cumulative_args_t cum_v,\n   int byte_size = ((mode == BLKmode)\n \t\t   ? int_size_in_bytes (type) : GET_MODE_SIZE (mode));\n   int word_size = (byte_size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n+  bool doubleword_aligned_p;\n+\n+  /* See whether the argument has doubleword alignment.  */\n+  doubleword_aligned_p =\n+    tilegx_function_arg_boundary (mode, type) > BITS_PER_WORD;\n+\n+  if (doubleword_aligned_p)\n+    *cum += *cum & 1;\n \n   /* If the current argument does not fit in the pretend_args space,\n      skip over it.  */\n@@ -417,7 +433,7 @@ tilegx_setup_incoming_varargs (cumulative_args_t cum,\n \n    generates code equivalent to:\n   \n-    paddedsize = (sizeof(TYPE) + 3) & -4;\n+    paddedsize = (sizeof(TYPE) + 7) & -8;\n     if (  (VALIST.__args + paddedsize > VALIST.__skip)\n \t& (VALIST.__args <= VALIST.__skip))\n       addr = VALIST.__skip + STACK_POINTER_OFFSET;\n@@ -457,9 +473,23 @@ tilegx_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   size = int_size_in_bytes (type);\n   rsize = ((size + UNITS_PER_WORD - 1) / UNITS_PER_WORD) * UNITS_PER_WORD;\n \n-  /* Assert alignment assumption.  */\n-  gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY);\n+  /* If the alignment of the type is greater than the default for a\n+     parameter, align to the STACK_BOUNDARY. */\n+  if (TYPE_ALIGN (type) > PARM_BOUNDARY)\n+    {\n+      /* Assert the only case we generate code for: when\n+\t stack boundary = 2 * parm boundary. */\n+      gcc_assert (STACK_BOUNDARY == PARM_BOUNDARY * 2);\n+\n+      tmp = build2 (BIT_AND_EXPR, sizetype,\n+\t\t    fold_convert (sizetype, unshare_expr (args)),\n+\t\t    size_int (PARM_BOUNDARY / 8));\n+      tmp = build2 (POINTER_PLUS_EXPR, ptr_type_node,\n+\t\t    unshare_expr (args), tmp);\n \n+      gimplify_assign (unshare_expr (args), tmp, pre_p);\n+    }\n+ \n   /* Build conditional expression to calculate addr. The expression\n      will be gimplified later.  */\n   tmp = fold_build_pointer_plus_hwi (unshare_expr (args), rsize);"}, {"sha": "9eab51e68e2970c914acc65e759c8f1d94ec8bb2", "filename": "gcc/config/tilegx/tilegx.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/905c20c1239ab74388b3c9017356e7509d7cd845/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/905c20c1239ab74388b3c9017356e7509d7cd845/gcc%2Fconfig%2Ftilegx%2Ftilegx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.h?ref=905c20c1239ab74388b3c9017356e7509d7cd845", "patch": "@@ -59,9 +59,9 @@\n \n #define UNITS_PER_WORD 8\n #define PARM_BOUNDARY BITS_PER_WORD\n-#define STACK_BOUNDARY 64\n+#define STACK_BOUNDARY 128\n #define FUNCTION_BOUNDARY 64\n-#define BIGGEST_ALIGNMENT 64\n+#define BIGGEST_ALIGNMENT 128\n #define STRICT_ALIGNMENT 1\n \n #define INT_TYPE_SIZE         32\n@@ -74,7 +74,7 @@\n \n #define PCC_BITFIELD_TYPE_MATTERS 1\n #define FASTEST_ALIGNMENT 64\n-#define BIGGEST_FIELD_ALIGNMENT 64\n+#define BIGGEST_FIELD_ALIGNMENT 128\n #define WIDEST_HARDWARE_FP_SIZE 64\n \n /* Unaligned moves trap and are very slow.  */"}]}