{"sha": "c405923d0202e2a173d6a87074b2c3dbfd9383de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQwNTkyM2QwMjAyZTJhMTczZDZhODcwNzRiMmMzZGJmZDkzODNkZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-05-22T11:16:49Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-05-22T11:16:49Z"}, "message": "name-lookup.c (pushdecl_top_level) pushdecl_top_level_and_finish): Move after namespace pushing and popping functions.\n\n\t* name-lookup.c (pushdecl_top_level)\n\tpushdecl_top_level_and_finish): Move after namespace pushing and\n\tpopping functions.\n\t(push_to_top_level): Rename to ...\n\t(do_push_to_top_level): ... here.  Remove timing code.\n\t(pop_from_top_level_1): Rename to ...\n\t(do_pop_from_top_level): ... here.\n\t(do_push_nested_namespace, do_pop_nested_namespace)\n\t(push_to_top_level): New wrapper for do_push_to_top_level.\n\t(pop_from_top_level): Adjust.\n\t(push_nested_namepace, pop_nested_namespace): Wrappers for workers.\n(--This line, and those below, will be ignored--\n\nM    cp/ChangeLog\nM    cp/name-lookup.c\n\nFrom-SVN: r248327", "tree": {"sha": "8156bc6497ba044c1fe84b56eab29a11201a6628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8156bc6497ba044c1fe84b56eab29a11201a6628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c405923d0202e2a173d6a87074b2c3dbfd9383de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c405923d0202e2a173d6a87074b2c3dbfd9383de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c405923d0202e2a173d6a87074b2c3dbfd9383de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c405923d0202e2a173d6a87074b2c3dbfd9383de/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c4f8178540fc1f41a901a02910e7c25a85849fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c4f8178540fc1f41a901a02910e7c25a85849fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c4f8178540fc1f41a901a02910e7c25a85849fb"}], "stats": {"total": 156, "additions": 100, "deletions": 56}, "files": [{"sha": "5dcf05d9c4c4b42c6edc5992d3b1db7cad4bb51a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c405923d0202e2a173d6a87074b2c3dbfd9383de/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c405923d0202e2a173d6a87074b2c3dbfd9383de/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c405923d0202e2a173d6a87074b2c3dbfd9383de", "patch": "@@ -1,3 +1,17 @@\n+2017-05-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* name-lookup.c (pushdecl_top_level,\n+\tpushdecl_top_level_and_finish): Move after namespace pushing and\n+\tpopping functions.\n+\t(push_to_top_level): Rename to ...\n+\t(do_push_to_top_level): ... here.  Remove timing code.\n+\t(pop_from_top_level_1): Rename to ...\n+\t(do_pop_from_top_level): ... here.\n+\t(do_push_nested_namespace, do_pop_nested_namespace)\n+\t(push_to_top_level): New wrapper for do_push_to_top_level.\n+\t(pop_from_top_level): Adjust.\n+\t(push_nested_namepace, pop_nested_namespace): Wrappers for workers.\n+\n 2017-05-19  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* config-lang.in (gtfiles): Add c-family/c-format.c,"}, {"sha": "e0c2c6a666bdf5863ece0b8c7955a5779be9a173", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 86, "deletions": 56, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c405923d0202e2a173d6a87074b2c3dbfd9383de/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c405923d0202e2a173d6a87074b2c3dbfd9383de/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c405923d0202e2a173d6a87074b2c3dbfd9383de", "patch": "@@ -4491,32 +4491,6 @@ parse_using_directive (tree name_space, tree attribs)\n     }\n }\n \n-/* Pushes X into the global namespace.  */\n-\n-tree\n-pushdecl_top_level (tree x, bool is_friend)\n-{\n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  push_to_top_level ();\n-  x = pushdecl_namespace_level (x, is_friend);\n-  pop_from_top_level ();\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n-  return x;\n-}\n-\n-/* Pushes X into the global namespace and Calls cp_finish_decl to\n-   register the variable, initializing it with INIT.  */\n-\n-tree\n-pushdecl_top_level_and_finish (tree x, tree init)\n-{\n-  push_to_top_level ();\n-  x = pushdecl_namespace_level (x, false);\n-  cp_finish_decl (x, init, false, NULL_TREE, 0);\n-  pop_from_top_level ();\n-  return x;\n-}\n-\n /* Combines two sets of overloaded functions into an OVERLOAD chain, removing\n    duplicates.  The first list becomes the tail of the result.\n \n@@ -6232,17 +6206,15 @@ store_class_bindings (vec<cp_class_binding, va_gc> *names,\n \n static GTY((deletable)) struct saved_scope *free_saved_scope;\n \n-void\n-push_to_top_level (void)\n+static void\n+do_push_to_top_level (void)\n {\n   struct saved_scope *s;\n   cp_binding_level *b;\n   cxx_saved_binding *sb;\n   size_t i;\n   bool need_pop;\n \n-  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-\n   /* Reuse or create a new structure for this saved scope.  */\n   if (free_saved_scope != NULL)\n     {\n@@ -6316,11 +6288,10 @@ push_to_top_level (void)\n   push_class_stack ();\n   cp_unevaluated_operand = 0;\n   c_inhibit_evaluation_warnings = 0;\n-  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n \n static void\n-pop_from_top_level_1 (void)\n+do_pop_from_top_level (void)\n {\n   struct saved_scope *s = scope_chain;\n   cxx_saved_binding *saved;\n@@ -6356,14 +6327,68 @@ pop_from_top_level_1 (void)\n   free_saved_scope = s;\n }\n \n-/* Wrapper for pop_from_top_level_1.  */\n+/* Push into the scope of the namespace NS, even if it is deeply\n+   nested within another namespace.  */\n \n-void\n-pop_from_top_level (void)\n+static void\n+do_push_nested_namespace (tree ns)\n+{\n+  if (ns == global_namespace)\n+    do_push_to_top_level ();\n+  else\n+    {\n+      do_push_nested_namespace (CP_DECL_CONTEXT (ns));\n+      gcc_checking_assert\n+\t(get_namespace_binding (current_namespace,\n+\t\t\t\tDECL_NAME (ns) ? DECL_NAME (ns)\n+\t\t\t\t: anon_identifier) == ns);\n+      resume_scope (NAMESPACE_LEVEL (ns));\n+      current_namespace = ns;\n+    }\n+}\n+\n+/* Pop back from the scope of the namespace NS, which was previously\n+   entered with push_nested_namespace.  */\n+\n+static void\n+do_pop_nested_namespace (tree ns)\n+{\n+  while (ns != global_namespace)\n+    {\n+      ns = CP_DECL_CONTEXT (ns);\n+      current_namespace = ns;\n+      leave_scope ();\n+    }\n+\n+  do_pop_from_top_level ();\n+}\n+\n+/* Pushes X into the global namespace.  */\n+\n+tree\n+pushdecl_top_level (tree x, bool is_friend)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n-  pop_from_top_level_1 ();\n+  do_push_to_top_level ();\n+  x = pushdecl_namespace_level (x, is_friend);\n+  do_pop_from_top_level ();\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n+  return x;\n+}\n+\n+/* Pushes X into the global namespace and calls cp_finish_decl to\n+   register the variable, initializing it with INIT.  */\n+\n+tree\n+pushdecl_top_level_and_finish (tree x, tree init)\n+{\n+  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n+  do_push_to_top_level ();\n+  x = pushdecl_namespace_level (x, false);\n+  cp_finish_decl (x, init, false, NULL_TREE, 0);\n+  do_pop_from_top_level ();\n+  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n+  return x;\n }\n \n /* Push into the scope of the NAME namespace.  If NAME is NULL_TREE,\n@@ -6490,41 +6515,46 @@ pop_namespace (void)\n   leave_scope ();\n }\n \n-/* Push into the scope of the namespace NS, even if it is deeply\n-   nested within another namespace.  */\n+/* External entry points for do_{push_to/pop_from}_top_level.  */\n \n void\n-push_nested_namespace (tree ns)\n+push_to_top_level (void)\n {\n-  if (ns == global_namespace)\n-    push_to_top_level ();\n-  else\n-    {\n-      push_nested_namespace (CP_DECL_CONTEXT (ns));\n-      push_namespace (DECL_NAME (ns));\n-    }\n+  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n+  do_push_to_top_level ();\n+  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n \n-/* Pop back from the scope of the namespace NS, which was previously\n-   entered with push_nested_namespace.  */\n+/* Wrapper for pop_from_top_level_1.  */\n+\n+void\n+pop_from_top_level (void)\n+{\n+  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n+  do_pop_from_top_level ();\n+  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n+}\n+\n+/* External entry points for do_{push,pop}_nested_namespace.  */\n+\n+void\n+push_nested_namespace (tree ns)\n+{\n+  bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n+  do_push_nested_namespace (ns);\n+  timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n+}\n \n void\n pop_nested_namespace (tree ns)\n {\n   bool subtime = timevar_cond_start (TV_NAME_LOOKUP);\n   gcc_assert (current_namespace == ns);\n-  while (ns != global_namespace)\n-    {\n-      pop_namespace ();\n-      ns = CP_DECL_CONTEXT (ns);\n-    }\n-\n-  pop_from_top_level ();\n+  do_pop_nested_namespace (ns);\n   timevar_cond_stop (TV_NAME_LOOKUP, subtime);\n }\n \n /* Pop off extraneous binding levels left over due to syntax errors.\n-\n    We don't pop past namespaces, as they might be valid.  */\n \n void"}]}