{"sha": "d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4ODZhOWUwNGNhZjBiZDFlOTE0N2Q5NWFmMmVhODM1MGFkOGUxYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-08-17T15:50:44Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-08-17T15:50:44Z"}, "message": "Convert MEMBER_TYPE_FORCES_BLK to target hook\n\n\t* stor-layout.c (compute_record_mode): Replace\n\tMEMBER_TYPE_FORCES_BLK with targetm.member_type_forces_blk.\n\t(layout_type): Likewise.\n\n\t* system.h: Poison MEMBER_TYPE_FORCES_BLK.\n\n\t* target.def (member_type_forces_blk): New target hook.\n\n\t* targhooks.c (default_member_type_forces_blk): New.\n\t* targhooks.h (default_member_type_forces_blk): Likewise.\n\n\t* doc/tm.texi.in (MEMBER_TYPE_FORCES_BLK): Removed.\n\t(TARGET_MEMBER_TYPE_FORCES_BLK): New hook.\n\t* doc/tm.texi: Regenerated.\n\n\t* config/ia64/hpux.h (MEMBER_TYPE_FORCES_BLK): Removed.\n\n\t* config/ia64/ia64.c (ia64_member_type_forces_blk): New\n\tfunction.\n\t(TARGET_MEMBER_TYPE_FORCES_BLK): New macro.\n\n\t* config/rs6000/rs6000.c (TARGET_MEMBER_TYPE_FORCES_BLK): New\n\tmacro.\n\t(rs6000_member_type_forces_blk): New function.\n\n\t* config/rs6000/rs6000.h (MEMBER_TYPE_FORCES_BLK): Removed.\n\n\t* config/xtensa/xtensa.c (xtensa_member_type_forces_blk): New\n\tfunction.\n\t(TARGET_MEMBER_TYPE_FORCES_BLK): New macro.\n\n\t* config/xtensa/xtensa.h (MEMBER_TYPE_FORCES_BLK): Removed.\n\nFrom-SVN: r190488", "tree": {"sha": "96cde03a3099b4fe12c7701de5fb3531c7063b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96cde03a3099b4fe12c7701de5fb3531c7063b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a8f7546197fedb2f4cfa5383c7c185b20b6d5a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8f7546197fedb2f4cfa5383c7c185b20b6d5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8f7546197fedb2f4cfa5383c7c185b20b6d5a6"}], "stats": {"total": 165, "additions": 119, "deletions": 46}, "files": [{"sha": "0c100df55aa9970149c8ea69bf34c6d29f97bf84", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -1,3 +1,38 @@\n+2012-08-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* stor-layout.c (compute_record_mode): Replace\n+\tMEMBER_TYPE_FORCES_BLK with targetm.member_type_forces_blk.\n+\t(layout_type): Likewise.\n+\n+\t* system.h: Poison MEMBER_TYPE_FORCES_BLK.\n+\n+\t* target.def (member_type_forces_blk): New target hook.\n+\n+\t* targhooks.c (default_member_type_forces_blk): New.\n+\t* targhooks.h (default_member_type_forces_blk): Likewise.\n+\n+\t* doc/tm.texi.in (MEMBER_TYPE_FORCES_BLK): Removed.\n+\t(TARGET_MEMBER_TYPE_FORCES_BLK): New hook.\n+\t* doc/tm.texi: Regenerated.\n+\n+\t* config/ia64/hpux.h (MEMBER_TYPE_FORCES_BLK): Removed.\n+\n+\t* config/ia64/ia64.c (ia64_member_type_forces_blk): New\n+\tfunction.\n+\t(TARGET_MEMBER_TYPE_FORCES_BLK): New macro.\n+\n+\t* config/rs6000/rs6000.c (TARGET_MEMBER_TYPE_FORCES_BLK): New\n+\tmacro.\n+\t(rs6000_member_type_forces_blk): New function.\n+\n+\t* config/rs6000/rs6000.h (MEMBER_TYPE_FORCES_BLK): Removed.\n+\n+\t* config/xtensa/xtensa.c (xtensa_member_type_forces_blk): New\n+\tfunction.\n+\t(TARGET_MEMBER_TYPE_FORCES_BLK): New macro.\n+\n+\t* config/xtensa/xtensa.h (MEMBER_TYPE_FORCES_BLK): Removed.\n+\n 2012-08-17  Diego Novillo  <dnovillo@google.com>\n \n \tPR bootstrap/54281"}, {"sha": "d9ae109aeba11a6116fcdfa0840ff4a3e93fee47", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -115,9 +115,6 @@ do {\t\t\t\t\t\t\t\\\n #define TARGET_DEFAULT \\\n   (MASK_DWARF2_ASM | MASK_BIG_ENDIAN | MASK_ILP32)\n \n-/* ??? Might not be needed anymore.  */\n-#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) ((MODE) == TFmode)\n-\n /* ASM_OUTPUT_EXTERNAL_LIBCALL defaults to just a globalize_label call,\n    but that doesn't put out the @function type information which causes\n    shared library problems.  */"}, {"sha": "f2f02c8e97a72a5ebcb3fdb9e76cabab6918b68b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -319,6 +319,7 @@ static const char *ia64_invalid_binary_op (int, const_tree, const_tree);\n static enum machine_mode ia64_c_mode_for_suffix (char);\n static void ia64_trampoline_init (rtx, tree, rtx);\n static void ia64_override_options_after_change (void);\n+static bool ia64_member_type_forces_blk (const_tree, enum machine_mode);\n \n static tree ia64_builtin_decl (unsigned, bool);\n \n@@ -570,6 +571,9 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_GET_RAW_ARG_MODE\n #define TARGET_GET_RAW_ARG_MODE ia64_get_reg_raw_mode\n \n+#undef TARGET_MEMBER_TYPE_FORCES_BLK\n+#define TARGET_MEMBER_TYPE_FORCES_BLK ia64_member_type_forces_blk\n+\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR ia64_gimplify_va_arg\n \n@@ -11153,6 +11157,15 @@ ia64_get_reg_raw_mode (int regno)\n   return default_get_reg_raw_mode(regno);\n }\n \n+/* Implement TARGET_MEMBER_TYPE_FORCES_BLK.  ??? Might not be needed\n+   anymore.  */\n+\n+bool\n+ia64_member_type_forces_blk (const_tree, enum machine_mode mode)\n+{\n+  return TARGET_HPUX && mode == TFmode;\n+}\n+\n /* Always default to .text section until HP-UX linker is fixed.  */\n \n ATTRIBUTE_UNUSED static section *"}, {"sha": "9a0a2ff38a778058e12fef1221f5d10ec4be41d0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -1302,6 +1302,9 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #undef TARGET_INIT_DWARF_REG_SIZES_EXTRA\n #define TARGET_INIT_DWARF_REG_SIZES_EXTRA rs6000_init_dwarf_reg_sizes_extra\n \n+#undef TARGET_MEMBER_TYPE_FORCES_BLK\n+#define TARGET_MEMBER_TYPE_FORCES_BLK rs6000_member_type_forces_blk\n+\n /* On rs6000, function arguments are promoted, as are function return\n    values.  */\n #undef TARGET_PROMOTE_FUNCTION_MODE\n@@ -7259,6 +7262,26 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n  emit_set:\n   emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n }\n+\n+/* Return true if a structure, union or array containing FIELD should be\n+   accessed using `BLKMODE'.\n+\n+   For the SPE, simd types are V2SI, and gcc can be tempted to put the\n+   entire thing in a DI and use subregs to access the internals.\n+   store_bit_field() will force (subreg:DI (reg:V2SI x))'s to the\n+   back-end.  Because a single GPR can hold a V2SI, but not a DI, the\n+   best thing to do is set structs to BLKmode and avoid Severe Tire\n+   Damage.\n+\n+   On e500 v2, DF and DI modes suffer from the same anomaly.  DF can\n+   fit into 1, whereas DI still needs two.  */\n+\n+static bool\n+rs6000_member_type_forces_blk (const_tree field, enum machine_mode mode)\n+{\n+  return ((TARGET_SPE && TREE_CODE (TREE_TYPE (field)) == VECTOR_TYPE)\n+\t  || (TARGET_E500_DOUBLE && mode == DFmode));\n+}\n \f\n /* Nonzero if we can use a floating-point register to pass this arg.  */\n #define USE_FP_FOR_ARG_P(CUM,MODE,TYPE)\t\t\\"}, {"sha": "4e33611baf427d2c1df710fe578e781029689e3d", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -695,22 +695,6 @@ extern unsigned rs6000_pointer_size;\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* Return 1 if a structure or array containing FIELD should be\n-   accessed using `BLKMODE'.\n-\n-   For the SPE, simd types are V2SI, and gcc can be tempted to put the\n-   entire thing in a DI and use subregs to access the internals.\n-   store_bit_field() will force (subreg:DI (reg:V2SI x))'s to the\n-   back-end.  Because a single GPR can hold a V2SI, but not a DI, the\n-   best thing to do is set structs to BLKmode and avoid Severe Tire\n-   Damage.\n-\n-   On e500 v2, DF and DI modes suffer from the same anomaly.  DF can\n-   fit into 1, whereas DI still needs two.  */\n-#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) \\\n-  ((TARGET_SPE && TREE_CODE (TREE_TYPE (FIELD)) == VECTOR_TYPE) \\\n-   || (TARGET_E500_DOUBLE && (MODE) == DFmode))\n-\n /* A bit-field declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n "}, {"sha": "6fbb3f6fe318a0537b7da28e9858c34ddf8434db", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -175,6 +175,9 @@ static reg_class_t xtensa_secondary_reload (bool, rtx, reg_class_t,\n static bool constantpool_address_p (const_rtx addr);\n static bool xtensa_legitimate_constant_p (enum machine_mode, rtx);\n \n+static bool xtensa_member_type_forces_blk (const_tree,\n+\t\t\t\t\t   enum machine_mode mode);\n+\n static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n   REG_ALLOC_ORDER;\n \f\n@@ -210,6 +213,9 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_bool_0\n \n+#undef TARGET_MEMBER_TYPE_FORCES_BLK\n+#define TARGET_MEMBER_TYPE_FORCES_BLK xtensa_member_type_forces_blk\n+\n #undef TARGET_BUILD_BUILTIN_VA_LIST\n #define TARGET_BUILD_BUILTIN_VA_LIST xtensa_build_builtin_va_list\n \n@@ -2738,6 +2744,18 @@ xtensa_return_addr (int count, rtx frame)\n   return result;\n }\n \n+/* Disable the use of word-sized or smaller complex modes for structures,\n+   and for function arguments in particular, where they cause problems with\n+   register a7.  The xtensa_copy_incoming_a7 function assumes that there is\n+   a single reference to an argument in a7, but with small complex modes the\n+   real and imaginary components may be extracted separately, leading to two\n+   uses of the register, only one of which would be replaced.  */\n+\n+static bool\n+xtensa_member_type_forces_blk (const_tree, enum machine_mode mode)\n+{\n+  return mode == CQImode || mode == CHImode;\n+}\n \n /* Create the va_list data type.\n "}, {"sha": "50e221a130f2d371e52397396e8c59581344ccf7", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -165,15 +165,6 @@ extern unsigned xtensa_current_frame_size;\n    bitfields and the structures that contain them.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n \n-/* Disable the use of word-sized or smaller complex modes for structures,\n-   and for function arguments in particular, where they cause problems with\n-   register a7.  The xtensa_copy_incoming_a7 function assumes that there is\n-   a single reference to an argument in a7, but with small complex modes the\n-   real and imaginary components may be extracted separately, leading to two\n-   uses of the register, only one of which would be replaced.  */\n-#define MEMBER_TYPE_FORCES_BLK(FIELD, MODE) \\\n-  ((MODE) == CQImode || (MODE) == CHImode)\n-\n /* Align string constants and constructors to at least a word boundary.\n    The typical use of this macro is to increase alignment for string\n    constants to be word aligned so that 'strcpy' calls that copy"}, {"sha": "1e9e7a66fe5e072c8701187ffa2a88414cf7269f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -1262,17 +1262,17 @@ these accesses should use the bitfield container type.\n The default is @code{!TARGET_STRICT_ALIGN}.\n @end deftypefn\n \n-@defmac MEMBER_TYPE_FORCES_BLK (@var{field}, @var{mode})\n-Return 1 if a structure or array containing @var{field} should be accessed using\n-@code{BLKMODE}.\n+@deftypefn {Target Hook} bool TARGET_MEMBER_TYPE_FORCES_BLK (const_tree @var{field}, enum machine_mode @var{mode})\n+Return true if a structure, union or array containing @var{field} should\n+be accessed using @code{BLKMODE}.\n \n If @var{field} is the only field in the structure, @var{mode} is its\n mode, otherwise @var{mode} is VOIDmode.  @var{mode} is provided in the\n case where structures of one field would require the structure's mode to\n retain the field's mode.\n \n Normally, this is not needed.\n-@end defmac\n+@end deftypefn\n \n @defmac ROUND_TYPE_ALIGN (@var{type}, @var{computed}, @var{specified})\n Define this macro as an expression for the alignment of a type (given"}, {"sha": "d20b8aa905861e79bfcc2e5d30302465cbd611c6", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -1240,17 +1240,17 @@ these accesses should use the bitfield container type.\n The default is @code{!TARGET_STRICT_ALIGN}.\n @end deftypefn\n \n-@defmac MEMBER_TYPE_FORCES_BLK (@var{field}, @var{mode})\n-Return 1 if a structure or array containing @var{field} should be accessed using\n-@code{BLKMODE}.\n+@hook TARGET_MEMBER_TYPE_FORCES_BLK\n+Return true if a structure, union or array containing @var{field} should\n+be accessed using @code{BLKMODE}.\n \n If @var{field} is the only field in the structure, @var{mode} is its\n mode, otherwise @var{mode} is VOIDmode.  @var{mode} is provided in the\n case where structures of one field would require the structure's mode to\n retain the field's mode.\n \n Normally, this is not needed.\n-@end defmac\n+@end deftypefn\n \n @defmac ROUND_TYPE_ALIGN (@var{type}, @var{computed}, @var{specified})\n Define this macro as an expression for the alignment of a type (given"}, {"sha": "0f555946083a8cb595cd711dcb48361d6bafa543", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -1627,13 +1627,10 @@ compute_record_mode (tree type)\n       if (simple_cst_equal (TYPE_SIZE (type), DECL_SIZE (field)))\n \tmode = DECL_MODE (field);\n \n-#ifdef MEMBER_TYPE_FORCES_BLK\n-      /* With some targets, eg. c4x, it is sub-optimal\n-\t to access an aligned BLKmode structure as a scalar.  */\n-\n-      if (MEMBER_TYPE_FORCES_BLK (field, mode))\n+      /* With some targets, it is sub-optimal to access an aligned\n+\t BLKmode structure as a scalar.  */\n+      if (targetm.member_type_forces_blk (field, mode))\n \treturn;\n-#endif /* MEMBER_TYPE_FORCES_BLK  */\n     }\n \n   /* If we only have one real field; use its mode if that mode's size\n@@ -2270,9 +2267,7 @@ layout_type (tree type)\n \tTYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (element);\n \tSET_TYPE_MODE (type, BLKmode);\n \tif (TYPE_SIZE (type) != 0\n-#ifdef MEMBER_TYPE_FORCES_BLK\n-\t    && ! MEMBER_TYPE_FORCES_BLK (type, VOIDmode)\n-#endif\n+\t    && ! targetm.member_type_forces_blk (type, VOIDmode)\n \t    /* BLKmode elements force BLKmode aggregate;\n \t       else extract/store fields may lose.  */\n \t    && (TYPE_MODE (TREE_TYPE (type)) != BLKmode"}, {"sha": "48c9c894e349035d6b34fde7b00172b63b95a955", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -808,7 +808,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tCAN_DEBUG_WITHOUT_FP UNLIKELY_EXECUTED_TEXT_SECTION_NAME\t\\\n \tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P ALWAYS_STRIP_DOTDOT\t\\\n \tOUTPUT_ADDR_CONST_EXTRA SMALL_REGISTER_CLASSES ASM_OUTPUT_IDENT\t\\\n-\tASM_BYTE_OP\n+\tASM_BYTE_OP MEMBER_TYPE_FORCES_BLK\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}, {"sha": "6f1968d68618edaedb676429002c69ec734de180", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -2332,6 +2332,14 @@ DEFHOOK\n  tree, (tree type, tree expr),\n  hook_tree_tree_tree_null)\n \n+/* True if a structure, union or array with MODE containing FIELD should\n+   be accessed using BLKmode.  */\n+DEFHOOK\n+(member_type_forces_blk,\n+ \"\",\n+ bool, (const_tree field, enum machine_mode mode),\n+ default_member_type_forces_blk)\n+\n /* Return the class for a secondary reload, and fill in extra information.  */\n DEFHOOK\n (secondary_reload,"}, {"sha": "36f998ac357cbcec1be64581e81bbf02d008461f", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -1513,4 +1513,12 @@ default_pch_valid_p (const void *data_p, size_t len)\n   return NULL;\n }\n \n+/* Default version of member_type_forces_blk.  */\n+\n+bool\n+default_member_type_forces_blk (const_tree, enum machine_mode)\n+{\n+  return false;\n+}\n+\n #include \"gt-targhooks.h\""}, {"sha": "aa8b3baa3e89406ee77232512a51ff60eccb8640", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=d9886a9e04caf0bd1e9147d95af2ea8350ad8e1c", "patch": "@@ -189,3 +189,4 @@ extern const char *default_pch_valid_p (const void *, size_t);\n \n extern void default_asm_output_ident_directive (const char*);\n \n+extern bool default_member_type_forces_blk (const_tree, enum machine_mode);"}]}