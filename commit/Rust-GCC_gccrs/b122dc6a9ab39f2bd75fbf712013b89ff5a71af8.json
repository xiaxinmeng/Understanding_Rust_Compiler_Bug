{"sha": "b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEyMmRjNmE5YWIzOWYyYmQ3NWZiZjcxMjAxM2I4OWZmNWE3MWFmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-10-25T18:43:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-10-25T18:43:22Z"}, "message": "trans.h (gfc_conv_cray_pointee): Remove.\n\n\t* trans.h (gfc_conv_cray_pointee): Remove.\n\t* trans-expr.c (gfc_conv_variable): Revert 2005-10-24 change.\n\t* trans-array.c (gfc_conv_array_parameter): Likewise.\n\t* trans-decl.c (gfc_conv_cray_pointee): Remove.\n\t(gfc_finish_cray_pointee): New function.\n\t(gfc_finish_var_decl): Use it.  Don't return early for Cray\n\tpointees.\n\t(gfc_create_module_variable): Revert 2005-10-24 change.\n\t* decl.c (cray_pointer_decl): Update comment.\n\t* gfortran.texi: Don't mention Cray pointees aren't visible in the\n\tdebugger.\n\n\t* symbol.c (check_conflict): Add conflict between cray_pointee\n\tand in_common resp. in_equivalence.\n\t* resolve.c (resolve_equivalence): Revert 2005-10-24 change.\ntestsuite/\n\t* gfortran.dg/cray_pointers_4.f90: New test.\n\n\t* module.c (ab_attribute): Add AB_CRAY_POINTER and AB_CRAY_POINTEE.\n\t(attr_bits): Likewise.\n\t(mio_symbol_attribute): Save and restore cray_pointe{r,e} attributes.\n\t(mio_symbol): For cray_pointee write/read cp_pointer reference.\ntestsuite/\n\t* gfortran.dg/cray_pointers_5.f90: New test.\n\nFrom-SVN: r105891", "tree": {"sha": "880f2c237699194e84e6f6e4ece0b041f60f2e4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/880f2c237699194e84e6f6e4ece0b041f60f2e4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/comments", "author": null, "committer": null, "parents": [{"sha": "910450c13f863770bb095264d2ad17b47befce48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910450c13f863770bb095264d2ad17b47befce48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910450c13f863770bb095264d2ad17b47befce48"}], "stats": {"total": 265, "additions": 161, "deletions": 104}, "files": [{"sha": "233f1495dfa4e3bb70796fce9c5dcd7fe70ef324", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 59, "deletions": 36, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -1,3 +1,26 @@\n+2005-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans.h (gfc_conv_cray_pointee): Remove.\n+\t* trans-expr.c (gfc_conv_variable): Revert 2005-10-24 change.\n+\t* trans-array.c (gfc_conv_array_parameter): Likewise.\n+\t* trans-decl.c (gfc_conv_cray_pointee): Remove.\n+\t(gfc_finish_cray_pointee): New function.\n+\t(gfc_finish_var_decl): Use it.  Don't return early for Cray\n+\tpointees.\n+\t(gfc_create_module_variable): Revert 2005-10-24 change.\n+\t* decl.c (cray_pointer_decl): Update comment.\n+\t* gfortran.texi: Don't mention Cray pointees aren't visible in the\n+\tdebugger.\n+\n+\t* symbol.c (check_conflict): Add conflict between cray_pointee\n+\tand in_common resp. in_equivalence.\n+\t* resolve.c (resolve_equivalence): Revert 2005-10-24 change.\n+\n+\t* module.c (ab_attribute): Add AB_CRAY_POINTER and AB_CRAY_POINTEE.\n+\t(attr_bits): Likewise.\n+\t(mio_symbol_attribute): Save and restore cray_pointe{r,e} attributes.\n+\t(mio_symbol): For cray_pointee write/read cp_pointer reference.\n+\n 2005-10-25  Feng Wang  <fengwang@nudt.edu.cn>\n \n \tPR fortran/22290\n@@ -14,8 +37,8 @@\n \n \tPR fortran/17031\n \tPR fortran/22282\n-\t* check.c (gfc_check_loc) : New function\n-\t* decl.c (variable_decl): New variables cp_as and sym. Added a\t  \n+\t* check.c (gfc_check_loc): New function.\n+\t* decl.c (variable_decl): New variables cp_as and sym.  Added a\n \tcheck for variables that have already been declared as Cray\n \tPointers, so we can get the necessary attributes without adding\n \ta new symbol.\n@@ -24,7 +47,7 @@\n \t(cray_pointer_decl): New method.\n \t(gfc_match_pointer): Added Cray pointer parsing code.\n \t(gfc_mod_pointee_as): New method.\n-\t* expr.c (gfc_check_assign): added a check to catch vector-type\n+\t* expr.c (gfc_check_assign): Added a check to catch vector-type\n \tassignments to pointees with an unspecified final dimension.\n \t* gfortran.h: (GFC_ISYM_LOC): New.\n \t(symbol_attribute): Added cray_pointer and cray_pointee bits.\n@@ -39,7 +62,7 @@\n \t(gfc_resolve_loc): Declare.\n \t* iresolve.c (gfc_resolve_loc): New.\n \t* lang.opt: Added fcray-pointer flag.\n-\t* options.c (gfc_init_options): Intialized\n+\t* options.c (gfc_init_options): Initialized.\n \tgfc_match_option.flag_cray_pointer.\n \t(gfc_handle_option): Deal with -fcray-pointer.\n \t* parse.c:(resolve_equivalence): Added code prohibiting Cray\n@@ -48,30 +71,30 @@\n \tchecking for Cray Pointee arrays.\n \t(resolve_equivalence): Prohibited pointees in equivalence\n \tstatements.\n-\t* symbol.c (check_conflict): Added Cray pointer/pointee\t \n+\t* symbol.c (check_conflict): Added Cray pointer/pointee\n \tattribute checking.\n-\t(gfc_add_cray_pointer): New\n-\t(gfc_add_cray_pointee): New\n-\t(gfc_copy_attr): New code for Cray pointers and pointees\n+\t(gfc_add_cray_pointer): New.\n+\t(gfc_add_cray_pointee): New.\n+\t(gfc_copy_attr): New code for Cray pointers and pointees.\n \t* trans-array.c (gfc_trans_auto_array_allocation): Added code to\n \tprevent space from being allocated for pointees.\n-\t(gfc_conv_array_parameter): Added code to catch pointees and    \n+\t(gfc_conv_array_parameter): Added code to catch pointees and\n \tcorrectly set their base address.\n-\t* trans-decl.c (gfc_finish_var_decl): Added code to prevent     \n+\t* trans-decl.c (gfc_finish_var_decl): Added code to prevent\n \tpointee declarations from making it to the back end.\n \t(gfc_create_module_variable): Same.\n-\t* trans-expr.c (gfc_conv_variable): added code to detect and\n+\t* trans-expr.c (gfc_conv_variable): Added code to detect and\n \ttranslate pointees.\n \t(gfc_conv_cray_pointee): New.\n \t* trans-intrinsic.c (gfc_conv_intrinsic_loc): New.\n-\t(gfc_conv_intrinsic_function): added entry point for loc\t\t\n+\t(gfc_conv_intrinsic_function): Added entry point for loc\n \ttranslation.\n \t* trans.h (gfc_conv_cray_pointee): Declare.\n \n \t* gfortran.texi: Added section on Cray pointers, removed Cray\n-\tpointers from list of proposed extensions\n+\tpointers from list of proposed extensions.\n \t* intrinsic.texi: Added documentation for loc intrinsic.\n-\t* invoke.texi: Documented -fcray-pointer flag\n+\t* invoke.texi: Documented -fcray-pointer flag.\n \n 2005-10-24  Asher Langton  <langton2@llnl.gov>\n \n@@ -109,7 +132,7 @@\n \t* check.c (gfc_check_ichar_iachar): Move the code around so\n \tthat the check on the length is after check for\n \treferences.\n-\t\n+\n 2005-10-23  Asher Langton  <langton2@llnl.gov>\n \n \t* decl.c (match_type_spec): Add a BYTE type as an extension.\n@@ -145,7 +168,7 @@\n \n \tPR fortran/21625\n \t* resolve.c (expr_to_initialize): New function.\n-\t(resolve_allocate_expr): Take current statement as new \n+\t(resolve_allocate_expr): Take current statement as new\n \targument. Add default initializers to variables of\n \tderived types, if they need it.\n \t(resolve_code): Provide current statement as argument to\n@@ -414,8 +437,8 @@\n 2005-09-21  Erik Edelmann  <erik.edelmann@iki.fi>\n \n \tPR fortran/19929\n-\t* trans-stmt.c (gfc_trans_deallocate): Check if the \n-\tobject to be deallocated is an array by looking at \n+\t* trans-stmt.c (gfc_trans_deallocate): Check if the\n+\tobject to be deallocated is an array by looking at\n \texpr->rank instead of expr->symtree->n.sym->attr.dimension.\n \n 2005-09-20  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n@@ -510,7 +533,7 @@\n \tto store the character (array) and the character length for an internal\n \tunit.\n \t* fortran/trans-io (build_dt): Use the new function set_internal_unit.\n-\t\n+\n 2005-09-14  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/19358\n@@ -966,7 +989,7 @@\n \n 2005-08-07   Janne Blomqvist  <jblomqvi@cc.hut.fi>\n \n-\tPR fortran/22390 \n+\tPR fortran/22390\n \t* dump-parse-tree.c (gfc_show_code_node): Add case for FLUSH.\n \t* gfortran.h: Add enums for FLUSH.\n \t* io.c (gfc_free_filepos,match_file_element,match_filepos): Modify\n@@ -1143,7 +1166,7 @@\n \tDon't clear maskindexes here.\n \n 2005-07-08  Daniel Berlin  <dberlin@dberlin.org>\n-\t\n+\n \t* trans-decl.c (create_function_arglist): DECL_ARG_TYPE_AS_WRITTEN\n \tis removed.\n \n@@ -1374,7 +1397,7 @@\n \t(gfc_return_by_reference): Always look at sym, never at sym->result.\n \n 2005-06-11  Steven G. Kargl  <kargls@comcast.net>\n-\t\n+\n \tPR fortran/17792\n \tPR fortran/21375\n \t* trans-array.c (gfc_array_deallocate): pstat is new argument\n@@ -1404,7 +1427,7 @@\n \n \tPR fortran/19195\n \t* trans.c (gfc_get_backend_locus): Remove unnecessary adjustment,\n-\tremove FIXME comment. \n+\tremove FIXME comment.\n \n 2005-06-04  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n@@ -1522,7 +1545,7 @@\n \n 2005-05-29  Janne Blomqvist  <jblomqvi@vipunen.hut.fi>\n \t    Steven G. Kargl  <kargls@comcast.net>\n-  \n+\n \tfortran/PR20846\n \t* io.c (gfc_match_inquire): Implement constraints on UNIT and FILE usage.\n \n@@ -1565,7 +1588,7 @@\n 2005-05-18  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/21127\n-\t* fortran/iresolve.c (gfc_resolve_reshape): Add \n+\t* fortran/iresolve.c (gfc_resolve_reshape): Add\n \tgfc_type_letter (BT_COMPLEX) for complex to\n \tto resolved function name.\n \n@@ -1628,11 +1651,11 @@\n \tJerry DeLisle  <jvdelisle@verizon.net>\n \n \tPR fortran/17432\n-\t* trans-stmt.c (gfc_trans_label_assign): fix pointer type, to \n+\t* trans-stmt.c (gfc_trans_label_assign): fix pointer type, to\n \tresolve ICE on assign of format label.\n \t* trans-io.c (set_string): add fold-convert to properly\n \thandle assigned format label in write.\n- \n+\n 2005-05-13  Paul Brook  <paul@codesourcery.com>\n \n \t* trans-stmt.c (gfc_trans_forall_1): Fix comment typo.\n@@ -1664,7 +1687,7 @@\n \t* options.c (gfc-init_options): Set default calling convention\n \tto -fno-f2c.  Mark -fsecond-underscore unset.\n \t(gfc_post_options): Set -fsecond-underscore if not explicitly set\n-\tby user.\t\n+\tby user.\n \t(handle_options): Set gfc_option.flag_f2c according to requested\n \tcalling\tconvention.\n \t* trans-decl.c (gfc_get_extern_function_decl): Use special f2c\n@@ -1744,7 +1767,7 @@\n \n \t* gfortran.h (gfc_namespace): Add seen_implicit_none field,\n \tTobias forgot this in previous commit.\n-\t\n+\n 2005-04-29  Paul Brook   <paul@codesourcery.com>\n \n \t* trans-expr.c (gfc_conv_expr_present): Fix broken assert.  Update\n@@ -1831,11 +1854,11 @@\n \tdeclaration for\tst_set_nml_var and st_set_nml_var_dim. Remove\n \tdeclarations of old namelist functions.\n \t(build_dt): Simplified call to transfer_namelist_element.\n-\t(nml_get_addr_expr): Generates address expression for start of \n+\t(nml_get_addr_expr): Generates address expression for start of\n \tobject data. New function.\n-\t(nml_full_name): Qualified name for derived type components. New \n+\t(nml_full_name): Qualified name for derived type components. New\n \tfunction.\n-\t(transfer_namelist_element): Modified for calls to new functions \n+\t(transfer_namelist_element): Modified for calls to new functions\n \tand improved derived type handling.\n \n 2005-04-17  Richard Guenther  <rguenth@gcc.gnu.org>\n@@ -1921,7 +1944,7 @@\n \n 2005-04-06  Steven G. Kargl  <kargls@comcast.net>\n \n-\t* invoke.texi: Remove documentation of -std=f90 \n+\t* invoke.texi: Remove documentation of -std=f90\n \n 2005-04-06  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n@@ -1969,7 +1992,7 @@\n \t* gfortran.h (option_t): Change d8, i8, r8 to flag_default_double,\n \tflag_default_integer, flag_default_real\n \t* invoke.texi: Update documentation\n-\t* lang.opt: Remove d8, i8, r8 definitions; Add fdefault-double-8   \n+\t* lang.opt: Remove d8, i8, r8 definitions; Add fdefault-double-8\n \tfdefault-integer-8, and fdefault-real-8 definitions.\n \t* options.c (gfc_init_options): Set option defaults\n \t(gfc_handle_option): Handle command line options.\n@@ -2417,7 +2440,7 @@\n \tgfc_match_null, match_type_spec, match_attr_spec,\n \tgfc_match_formal_arglist, match_result, gfc_match_function_decl):\n \tUpdate callers to match.\n-\t(gfc_match_entry) : Likewise, fix comment typo.\n+\t(gfc_match_entry): Likewise, fix comment typo.\n \t(gfc_match_subroutine, attr_decl1, gfc_add_dimension,\n \taccess_attr_decl, do_parm, gfc_match_save, gfc_match_modproc,\n \tgfc_match_derived_decl): Update callers.\n@@ -2568,7 +2591,7 @@\n \tunsigned issue.  Use build_int_cst instead of converting\n \tinteger_zero_node.  Remove unnecessary conversion.\n \n-\t* trans-types.c (gfc_get_character_type_len): : Use\n+\t* trans-types.c (gfc_get_character_type_len): Use\n \tgfc_charlen_type_node as basic type for the range field.\n \n \t* trans-intrinsic.c (build_fixbound_expr,"}, {"sha": "5d4bd56449c7ac02945313757bd6d7f6cf41682e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -2995,8 +2995,7 @@ attr_decl (void)\n    pointer (ipt, ar(10))\n    any subsequent uses of ar will be translated (in C-notation) as\n    ar(i) => ((<type> *) ipt)(i)   \n-   By the time the code is translated into GENERIC, the pointee will\n-   have disappeared from the code entirely. */\n+   After gimplification, pointee variable will disappear in the code.  */\n \n static match\n cray_pointer_decl (void)\n@@ -3112,7 +3111,7 @@ cray_pointer_decl (void)\n \t} \n    \n       /* Point the Pointee at the Pointer.  */\n-      cpte->cp_pointer=cptr;\n+      cpte->cp_pointer = cptr;\n \n       if (gfc_match_char (')') != MATCH_YES)\n \t{"}, {"sha": "f696c5f34e42aa28c7950f68f5cd6130e4993e82", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -899,11 +899,7 @@ expect.  Adding 1 to ipt just adds one byte to the address stored in\n ipt.\n \n Any expression involving the pointee will be translated to use the\n-value stored in the pointer as the base address.  This translation is\n-done in the front end, and so the pointees are not present in the\n-GENERIC tree that is handed off to the backend.  One disadvantage of\n-this is that pointees will not appear in gdb when debugging a Fortran\n-program that uses Cray pointers.\n+value stored in the pointer as the base address.\n \n To get the address of elements, this extension provides an intrinsic\n function loc(), loc() is essentially the C '&' operator, except the"}, {"sha": "763905b9f2970bede0e8bd449caa8d27c95b3644", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -1431,7 +1431,8 @@ typedef enum\n   AB_POINTER, AB_SAVE, AB_TARGET, AB_DUMMY, AB_RESULT,\n   AB_DATA, AB_IN_NAMELIST, AB_IN_COMMON, \n   AB_FUNCTION, AB_SUBROUTINE, AB_SEQUENCE, AB_ELEMENTAL, AB_PURE,\n-  AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT\n+  AB_RECURSIVE, AB_GENERIC, AB_ALWAYS_EXPLICIT, AB_CRAY_POINTER,\n+  AB_CRAY_POINTEE\n }\n ab_attribute;\n \n@@ -1458,6 +1459,8 @@ static const mstring attr_bits[] =\n     minit (\"RECURSIVE\", AB_RECURSIVE),\n     minit (\"GENERIC\", AB_GENERIC),\n     minit (\"ALWAYS_EXPLICIT\", AB_ALWAYS_EXPLICIT),\n+    minit (\"CRAY_POINTER\", AB_CRAY_POINTER),\n+    minit (\"CRAY_POINTEE\", AB_CRAY_POINTEE),\n     minit (NULL, -1)\n };\n \n@@ -1542,6 +1545,10 @@ mio_symbol_attribute (symbol_attribute * attr)\n \tMIO_NAME(ab_attribute) (AB_RECURSIVE, attr_bits);\n       if (attr->always_explicit)\n         MIO_NAME(ab_attribute) (AB_ALWAYS_EXPLICIT, attr_bits);\n+      if (attr->cray_pointer)\n+\tMIO_NAME(ab_attribute) (AB_CRAY_POINTER, attr_bits);\n+      if (attr->cray_pointee)\n+\tMIO_NAME(ab_attribute) (AB_CRAY_POINTEE, attr_bits);\n \n       mio_rparen ();\n \n@@ -1622,6 +1629,12 @@ mio_symbol_attribute (symbol_attribute * attr)\n             case AB_ALWAYS_EXPLICIT:\n               attr->always_explicit = 1;\n               break;\n+\t    case AB_CRAY_POINTER:\n+\t      attr->cray_pointer = 1;\n+\t      break;\n+\t    case AB_CRAY_POINTEE:\n+\t      attr->cray_pointee = 1;\n+\t      break;\n \t    }\n \t}\n     }\n@@ -2815,6 +2828,9 @@ mio_symbol (gfc_symbol * sym)\n \n   mio_symbol_ref (&sym->result);\n \n+  if (sym->attr.cray_pointee)\n+    mio_symbol_ref (&sym->cp_pointer);\n+\n   /* Note that components are always saved, even if they are supposed\n      to be private.  Component access is checked during searching.  */\n "}, {"sha": "6c03126f527ed360ef4b06e6c393a9aa8915b845", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -5177,14 +5177,6 @@ resolve_equivalence (gfc_equiv *eq)\n           break;\n         }\n  \n-     /* Shall not be a Cray pointee.  */\n-      if (sym->attr.cray_pointee)\n-        {\n-          gfc_error (\"Cray Pointee '%s' at %L cannot be an EQUIVALENCE \"\n-\t\t     \"object\", sym->name, &e->where);\n-          continue;\n-        }\n-\n       /* Shall not be a named constant.  */      \n       if (e->expr_type == EXPR_CONSTANT)\n         {"}, {"sha": "85ed70eb352dadbf44db439adce044c26d44f292", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -368,6 +368,8 @@ check_conflict (symbol_attribute * attr, const char * name, locus * where)\n   conf (cray_pointee, function);\n   conf (cray_pointee, subroutine);\n   conf (cray_pointee, entry);\n+  conf (cray_pointee, in_common);\n+  conf (cray_pointee, in_equivalence);\n \n   a1 = gfc_code2string (flavors, attr->flavor);\n "}, {"sha": "72669f8ac3f55d3bc3d090aa66cbc7d5178f172f", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -4083,13 +4083,8 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n        && expr->ref->u.ar.type == AR_FULL && g77)\n     {\n       sym = expr->symtree->n.sym;\n+      tmp = gfc_get_symbol_decl (sym);\n \n-      /* Check to see if we're dealing with a Cray Pointee.  */\n-      if (sym->attr.cray_pointee)\n-\ttmp = gfc_conv_cray_pointee (sym);\n-      else\n-\ttmp = gfc_get_symbol_decl (sym);\n-      \n       if (sym->ts.type == BT_CHARACTER)\n \tse->string_length = sym->ts.cl->backend_decl;\n       if (!sym->attr.pointer && sym->as->type != AS_ASSUMED_SHAPE "}, {"sha": "ff6995425b1be95d61773128f1ecbfce0852b5a4", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 43, "deletions": 37, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -351,6 +351,44 @@ gfc_can_put_var_on_stack (tree size)\n }\n \n \n+/* gfc_finish_cray_pointee sets DECL_VALUE_EXPR for a Cray pointee to\n+   an expression involving its corresponding pointer.  There are\n+   2 cases; one for variable size arrays, and one for everything else,\n+   because variable-sized arrays require one fewer level of\n+   indirection.  */\n+\n+static void\n+gfc_finish_cray_pointee (tree decl, gfc_symbol *sym)\n+{\n+  tree ptr_decl = gfc_get_symbol_decl (sym->cp_pointer);\n+  tree value;\n+\n+  /* Parameters need to be dereferenced.  */\n+  if (sym->cp_pointer->attr.dummy) \n+    ptr_decl = gfc_build_indirect_ref (ptr_decl);\n+\n+  /* Check to see if we're dealing with a variable-sized array.  */\n+  if (sym->attr.dimension\n+      && TREE_CODE (TREE_TYPE (decl)) == POINTER_TYPE) \n+    {  \n+      /* These decls will be derefenced later, so we don't dereference\n+\t them here.  */\n+      value = convert (TREE_TYPE (decl), ptr_decl);\n+    }\n+  else\n+    {\n+      ptr_decl = convert (build_pointer_type (TREE_TYPE (decl)),\n+\t\t\t  ptr_decl);\n+      value = gfc_build_indirect_ref (ptr_decl);\n+    }\n+\n+  SET_DECL_VALUE_EXPR (decl, value);\n+  DECL_HAS_VALUE_EXPR_P (decl) = 1;\n+  /* This is a fake variable just for debugging purposes.  */\n+  TREE_ASM_WRITTEN (decl) = 1;\n+}\n+\n+\n /* Finish processing of a declaration and install its initial value.  */\n \n static void\n@@ -417,9 +455,9 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n      We also need to set this if the variable is passed by reference in a\n      CALL statement.  */\n \n-  /* We don't want real declarations for Cray Pointees.  */\n+  /* Set DECL_VALUE_EXPR for Cray Pointees.  */\n   if (sym->attr.cray_pointee)\n-    return;\n+    gfc_finish_cray_pointee (decl, sym);\n \n   if (sym->attr.target)\n     TREE_ADDRESSABLE (decl) = 1;\n@@ -437,6 +475,9 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n \tgfc_add_decl_to_parent_function (decl);\n     }\n \n+  if (sym->attr.cray_pointee)\n+    return;\n+\n   /* If a variable is USE associated, it's always external.  */\n   if (sym->attr.use_assoc)\n     {\n@@ -2309,10 +2350,6 @@ gfc_create_module_variable (gfc_symbol * sym)\n   /* Create the decl.  */\n   decl = gfc_get_symbol_decl (sym);\n \n-  /* Don't create a \"real\" declaration for a Cray Pointee.  */\n-  if (sym->attr.cray_pointee)\n-    return;\n-\n   /* Create the variable.  */\n   pushdecl (decl);\n   rest_of_decl_compilation (decl, 1, 0);\n@@ -2734,36 +2771,5 @@ gfc_generate_block_data (gfc_namespace * ns)\n   rest_of_decl_compilation (decl, 1, 0);\n }\n \n-/* gfc_conv_cray_pointee takes a sym with attribute cray_pointee and\n-   swaps in the backend_decl of its corresponding pointer.  There are\n-   2 cases; one for variable size arrays, and one for everything else,\n-   because variable-sized arrays require one fewer level of\n-   indirection.  */\n-\n-tree\n-gfc_conv_cray_pointee(gfc_symbol *sym)\n-{\n-  tree decl = gfc_get_symbol_decl (sym->cp_pointer);\n-\n-  /* Parameters need to be dereferenced.  */\n-  if (sym->cp_pointer->attr.dummy) \n-    decl = gfc_build_indirect_ref (decl);\n-\n-  /* Check to see if we're dealing with a variable-sized array.  */\n-  if (sym->attr.dimension\n-      && TREE_CODE (TREE_TYPE (sym->backend_decl)) == POINTER_TYPE) \n-    {  \n-      /* These decls will be derefenced later, so we don't dereference\n-\t them here.  */\n-      decl = convert (TREE_TYPE (sym->backend_decl), decl);\n-    }\n-  else\n-    {\n-      decl = convert (build_pointer_type (TREE_TYPE (sym->backend_decl)),\n-\t\t      decl);\n-      decl = gfc_build_indirect_ref (decl);\n-    }\n-  return decl;\n-}\n \n #include \"gt-fortran-trans-decl.h\""}, {"sha": "fe5e24bdb078a7649e4d4fefa6b6a18e369d01d8", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -316,11 +316,7 @@ gfc_conv_variable (gfc_se * se, gfc_expr * expr)\n     {\n       tree se_expr = NULL_TREE;\n \n-      /* Handle Cray Pointees.  */\n-      if (sym->attr.cray_pointee)\n-\tse->expr = gfc_conv_cray_pointee (sym);\n-      else\n-\tse->expr = gfc_get_symbol_decl (sym);\n+      se->expr = gfc_get_symbol_decl (sym);\n \n       /* Special case for assigning the return value of a function.\n \t Self recursive functions must have an explicit return value.  */"}, {"sha": "16d0a37ed3fa77f068dc1eff619c9ca1a8ee0a4a", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -406,9 +406,6 @@ void gfc_generate_block_data (gfc_namespace *);\n /* Output a decl for a module variable.  */\n void gfc_generate_module_vars (gfc_namespace *);\n \n-/* Translate the declaration for a Cray Pointee.  */\n-tree gfc_conv_cray_pointee (gfc_symbol *sym);\n-\n /* Get and set the current location.  */\n void gfc_set_backend_locus (locus *);\n void gfc_get_backend_locus (locus *);"}, {"sha": "1f8cf65d29daccd966fdacd259dc6d4fb05ca973", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -1,3 +1,9 @@\n+2005-10-25  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gfortran.dg/cray_pointers_4.f90: New test.\n+\n+\t* gfortran.dg/cray_pointers_5.f90: New test.\n+\n 2005-10-25  Feng Wang  <fengwang@nudt.edu.cn>\n \n \tPR fortran/22290"}, {"sha": "85e7ae758c96fd8b26014604fc2c4b3f484519e9", "filename": "gcc/testsuite/gfortran.dg/cray_pointers_4.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_4.f90?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-fcray-pointer\" }\n+\n+subroutine err1\n+  integer :: in_common1, in_common2, v, w, equiv1, equiv2\n+  common /in_common1/ in_common1\n+  pointer (ipt1, in_common1)\t\t! { dg-error \"conflicts with COMMON\" }\n+  pointer (ipt2, in_common2)\n+  common /in_common2/ in_common2\t! { dg-error \"conflicts with COMMON\" }\n+  equivalence (v, equiv1)\n+  pointer (ipt3, equiv1)\t\t! { dg-error \"conflicts with EQUIVALENCE\" }\n+  pointer (ipt4, equiv2)\n+  equivalence (w, equiv2)\t\t! { dg-error \"conflicts with EQUIVALENCE\" }\n+end subroutine err1"}, {"sha": "76bb9791b8aefaf59cce557f601b6ca8eadfa9d3", "filename": "gcc/testsuite/gfortran.dg/cray_pointers_5.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b122dc6a9ab39f2bd75fbf712013b89ff5a71af8/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcray_pointers_5.f90?ref=b122dc6a9ab39f2bd75fbf712013b89ff5a71af8", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! { dg-options \"-fcray-pointer -fno-strict-aliasing\" }\n+\n+module cray_pointers_5\n+  integer :: var (10), arr(100)\n+  pointer (ipt, var)\n+end module cray_pointers_5\n+\n+  use cray_pointers_5\n+  integer :: i\n+\n+  forall (i = 1:100) arr(i) = i\n+  ipt = loc (arr)\n+  if (any (var .ne. (/1, 2, 3, 4, 5, 6, 7, 8, 9, 10/))) call abort\n+end"}]}