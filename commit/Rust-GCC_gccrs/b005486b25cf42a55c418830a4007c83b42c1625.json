{"sha": "b005486b25cf42a55c418830a4007c83b42c1625", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAwNTQ4NmIyNWNmNDJhNTVjNDE4ODMwYTQwMDdjODNiNDJjMTYyNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-30T08:18:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-30T08:18:33Z"}, "message": "Replace dead store with early return\n\n\t* typeck.c (cxx_sizeof_or_alignof_type): Return size_one_node instead\n\tof using it in dead store.\n\nFrom-SVN: r260920", "tree": {"sha": "8c1016f38e8b35c7091b9aa57680371b53843156", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c1016f38e8b35c7091b9aa57680371b53843156"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b005486b25cf42a55c418830a4007c83b42c1625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b005486b25cf42a55c418830a4007c83b42c1625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b005486b25cf42a55c418830a4007c83b42c1625", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b005486b25cf42a55c418830a4007c83b42c1625/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e246559b842b9fc561f5ce6eefa08912dd4f7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e246559b842b9fc561f5ce6eefa08912dd4f7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e246559b842b9fc561f5ce6eefa08912dd4f7fd"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "37874c02fa4665dc24e98bde7072b15e0a39bab9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b005486b25cf42a55c418830a4007c83b42c1625/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b005486b25cf42a55c418830a4007c83b42c1625/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b005486b25cf42a55c418830a4007c83b42c1625", "patch": "@@ -1,3 +1,8 @@\n+2018-05-30  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Return size_one_node instead\n+\tof using it in dead store.\n+\n 2018-05-29  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/67445 - returning temporary initializer_list."}, {"sha": "9febdb908ae9220e745097791fe7743d1d3cfe2b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b005486b25cf42a55c418830a4007c83b42c1625/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b005486b25cf42a55c418830a4007c83b42c1625/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b005486b25cf42a55c418830a4007c83b42c1625", "patch": "@@ -1597,9 +1597,6 @@ tree\n cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool std_alignof,\n \t\t\t    bool complain)\n {\n-  tree value;\n-  bool dependent_p;\n-\n   gcc_assert (op == SIZEOF_EXPR || op == ALIGNOF_EXPR);\n   if (type == error_mark_node)\n     return error_mark_node;\n@@ -1608,15 +1605,17 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool std_alignof,\n   if (TREE_CODE (type) == METHOD_TYPE)\n     {\n       if (complain)\n-\tpedwarn (input_location, OPT_Wpointer_arith, \n-\t\t \"invalid application of %qs to a member function\", \n-\t\t OVL_OP_INFO (false, op)->name);\n+\t{\n+\t  pedwarn (input_location, OPT_Wpointer_arith,\n+\t\t   \"invalid application of %qs to a member function\",\n+\t\t   OVL_OP_INFO (false, op)->name);\n+\t  return size_one_node;\n+\t}\n       else\n \treturn error_mark_node;\n-      value = size_one_node;\n     }\n \n-  dependent_p = dependent_type_p (type);\n+  bool dependent_p = dependent_type_p (type);\n   if (!dependent_p)\n     complete_type (type);\n   if (dependent_p\n@@ -1630,7 +1629,7 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool std_alignof,\n \t  && COMPLETE_TYPE_P (type)\n \t  && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST))\n     {\n-      value = build_min (op, size_type_node, type);\n+      tree value = build_min (op, size_type_node, type);\n       TREE_READONLY (value) = 1;\n       if (op == ALIGNOF_EXPR && std_alignof)\n \tALIGNOF_EXPR_STD_P (value) = true;"}]}