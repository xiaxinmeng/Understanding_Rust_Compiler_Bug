{"sha": "c629e611eb78853f8ccd85173b758cabbdc0e56b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYyOWU2MTFlYjc4ODUzZjhjY2Q4NTE3M2I3NThjYWJiZGMwZTU2Yg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2005-09-15T14:13:03Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2005-09-15T14:13:03Z"}, "message": "re PR java/23891 (Problem folding static fields across packages)\n\n2005-09-14  Bryce McKinlay  <mckinlay@redhat.com>\n\n        PR java/23891\n        * parse.y (maybe_create_class_interface_decl): Set TYPE_PACKAGE for\n        the newly created type. Set import lists here, not in create_class.\n        (jdep_resolve_class): Set current_class.\n        (do_resolve_class): Use current_class's TYPE_PACKAGE to determine\n        the current package context, not ctxp->package.\n        (cicp_cache): Removed.\n        (class_in_current_package): Simplify implementation using\n\tTYPE_PACKAGE.\n        * jcf-parse.c (give_name_to_class): Set TYPE_PACKAGE.\n        * java-tree.h (TYPE_PACKAGE): New macro.\n        (struct lang_type): New member 'package'.\n\nFrom-SVN: r104305", "tree": {"sha": "acb467137b30cf006a229fb261743c29c869d147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acb467137b30cf006a229fb261743c29c869d147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c629e611eb78853f8ccd85173b758cabbdc0e56b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c629e611eb78853f8ccd85173b758cabbdc0e56b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c629e611eb78853f8ccd85173b758cabbdc0e56b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c629e611eb78853f8ccd85173b758cabbdc0e56b/comments", "author": null, "committer": null, "parents": [{"sha": "ec05ece4b9e0fdcc6afd9d5d89d859cb95ccb321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec05ece4b9e0fdcc6afd9d5d89d859cb95ccb321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec05ece4b9e0fdcc6afd9d5d89d859cb95ccb321"}], "stats": {"total": 71, "additions": 36, "deletions": 35}, "files": [{"sha": "dcdb7163097ddb078f891776dc90ae1d2624b881", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c629e611eb78853f8ccd85173b758cabbdc0e56b", "patch": "@@ -1,3 +1,17 @@\n+2005-09-14  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\tPR java/23891\n+\t* parse.y (maybe_create_class_interface_decl): Set TYPE_PACKAGE for\n+\tthe newly created type. Set import lists here, not in create_class.\n+\t(jdep_resolve_class): Set current_class.\n+\t(do_resolve_class): Use current_class's TYPE_PACKAGE to determine \n+\tthe current package context, not ctxp->package.\n+\t(cicp_cache): Removed.\n+\t(class_in_current_package): Simplify implementation using TYPE_PACKAGE.\n+\t* jcf-parse.c (give_name_to_class): Set TYPE_PACKAGE.\n+\t* java-tree.h (TYPE_PACKAGE): New macro.\n+\t(struct lang_type): New member 'package'.\n+\n 2005-09-09  Andrew Haley  <aph@redhat.com>\n \n \tPR libgcj/23182 "}, {"sha": "658da38d39a8c95a83988d2135edf13dc1980c99", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=c629e611eb78853f8ccd85173b758cabbdc0e56b", "patch": "@@ -1074,6 +1074,7 @@ struct lang_decl GTY(())\n \n #define TYPE_TO_RUNTIME_MAP(T)   (TYPE_LANG_SPECIFIC (T)->type_to_runtime_map)\n #define TYPE_ASSERTIONS(T)   \t (TYPE_LANG_SPECIFIC (T)->type_assertions)\n+#define TYPE_PACKAGE(T)     \t (TYPE_LANG_SPECIFIC (T)->package)\n \n struct lang_type GTY(())\n {\n@@ -1122,6 +1123,9 @@ struct lang_type GTY(())\n \t\t\t\t/* Table of type assertions to be evaluated \n   \t\t\t\t   by the runtime when this class is loaded. */\n \n+  tree package;\t\t\t/* IDENTIFIER_NODE for package this class is\n+  \t\t\t\t   a member of.  */\n+\n   unsigned pic:1;\t\t/* Private Inner Class. */\n   unsigned poic:1;\t\t/* Protected Inner Class. */\n   unsigned strictfp:1;\t\t/* `strictfp' class.  */"}, {"sha": "5d22f88d843b346c9f83fcd3b26123f432ddc825", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=c629e611eb78853f8ccd85173b758cabbdc0e56b", "patch": "@@ -444,6 +444,7 @@ give_name_to_class (JCF *jcf, int i)\n     abort ();\n   else\n     {\n+      tree package_name = NULL_TREE, tmp;\n       tree this_class;\n       int j = JPOOL_USHORT1 (jcf, i);\n       /* verify_constant_pool confirmed that j is a CONSTANT_Utf8. */\n@@ -469,6 +470,9 @@ give_name_to_class (JCF *jcf, int i)\n \n       jcf->cpool.data[i].t = this_class;\n       JPOOL_TAG (jcf, i) = CONSTANT_ResolvedClass;\n+      split_qualified_name (&package_name, &tmp, \n+      \t\t\t    DECL_NAME (TYPE_NAME (this_class)));\n+      TYPE_PACKAGE (this_class) = package_name;\n       return this_class;\n     }\n }"}, {"sha": "4d6a37f7891e0e10e35c85ee782530051b3b933b", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 35, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c629e611eb78853f8ccd85173b758cabbdc0e56b/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c629e611eb78853f8ccd85173b758cabbdc0e56b", "patch": "@@ -3911,6 +3911,14 @@ maybe_create_class_interface_decl (tree decl, tree raw_name,\n   /* Install a new dependency list element */\n   create_jdep_list (ctxp);\n \n+  /* We keep the compilation unit imports in the class so that\n+     they can be used later to resolve type dependencies that\n+     aren't necessary to solve now. */\n+  TYPE_IMPORT_LIST (TREE_TYPE (decl)) = ctxp->import_list;\n+  TYPE_IMPORT_DEMAND_LIST (TREE_TYPE (decl)) = ctxp->import_demand_list;\n+\n+  TYPE_PACKAGE (TREE_TYPE (decl)) = ctxp->package;\n+\n   SOURCE_FRONTEND_DEBUG ((\"Defining class/interface %s\",\n \t\t\t  IDENTIFIER_POINTER (qualified_name)));\n   return decl;\n@@ -4185,12 +4193,6 @@ create_class (int flags, tree id, tree super, tree interfaces)\n      virtual function table in java.lang.object.  */\n   TYPE_VFIELD (TREE_TYPE (decl)) = TYPE_VFIELD (object_type_node);\n \n-  /* We keep the compilation unit imports in the class so that\n-     they can be used later to resolve type dependencies that\n-     aren't necessary to solve now. */\n-  TYPE_IMPORT_LIST (TREE_TYPE (decl)) = ctxp->import_list;\n-  TYPE_IMPORT_DEMAND_LIST (TREE_TYPE (decl)) = ctxp->import_demand_list;\n-\n   /* Add the private this$<n> field, Replicate final locals still in\n      scope as private final fields mangled like val$<local_name>.\n      This does not occur for top level (static) inner classes. */\n@@ -5644,6 +5646,9 @@ static tree\n jdep_resolve_class (jdep *dep)\n {\n   tree decl;\n+  \n+  /* Set the correct context for class resolution.  */\n+  current_class = TREE_TYPE (JDEP_ENCLOSING (dep));\n \n   if (JDEP_RESOLVED_P (dep))\n     decl = JDEP_RESOLVED_DECL (dep);\n@@ -5947,8 +5952,8 @@ do_resolve_class (tree enclosing, tree import_type, tree class_type, tree decl,\n   /* 3- Search according to the current package definition */\n   if (!QUALIFIED_P (TYPE_NAME (class_type)))\n     {\n-      if ((new_class_decl = qualify_and_find (class_type, ctxp->package,\n-\t\t\t\t\t     TYPE_NAME (class_type))))\n+      if ((new_class_decl = qualify_and_find (class_type, \n+      \t\tTYPE_PACKAGE (current_class), TYPE_NAME (class_type))))\n \treturn new_class_decl;\n     }\n \n@@ -10446,37 +10451,11 @@ check_deprecation (tree wfl, tree decl)\n \n /* Returns 1 if class was declared in the current package, 0 otherwise */\n \n-static GTY(()) tree cicp_cache;\n static int\n class_in_current_package (tree class)\n {\n-  int qualified_flag;\n-  tree left;\n-\n-  if (cicp_cache == class)\n-    return 1;\n-\n-  qualified_flag = QUALIFIED_P (DECL_NAME (TYPE_NAME (class)));\n-\n-  /* If the current package is empty and the name of CLASS is\n-     qualified, class isn't in the current package.  If there is a\n-     current package and the name of the CLASS is not qualified, class\n-     isn't in the current package */\n-  if ((!ctxp->package && qualified_flag) || (ctxp->package && !qualified_flag))\n-    return 0;\n-\n-  /* If there is not package and the name of CLASS isn't qualified,\n-     they belong to the same unnamed package */\n-  if (!ctxp->package && !qualified_flag)\n+  if (TYPE_PACKAGE (current_class) == TYPE_PACKAGE (class))\n     return 1;\n-\n-  /* Compare the left part of the name of CLASS with the package name */\n-  split_qualified_name (&left, NULL, DECL_NAME (TYPE_NAME (class)));\n-  if (ctxp->package == left)\n-    {\n-      cicp_cache = class;\n-      return 1;\n-    }\n   return 0;\n }\n "}]}