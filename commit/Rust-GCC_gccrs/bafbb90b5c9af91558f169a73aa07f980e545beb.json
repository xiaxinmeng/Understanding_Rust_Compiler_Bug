{"sha": "bafbb90b5c9af91558f169a73aa07f980e545beb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFmYmI5MGI1YzlhZjkxNTU4ZjE2OWE3M2FhMDdmOTgwZTU0NWJlYg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:48:34Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:48:34Z"}, "message": "vabd.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vabd.c: New file.\n\nFrom-SVN: r216649", "tree": {"sha": "c838565f79fbdab48881e74eefc99fefcc02268f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c838565f79fbdab48881e74eefc99fefcc02268f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bafbb90b5c9af91558f169a73aa07f980e545beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafbb90b5c9af91558f169a73aa07f980e545beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafbb90b5c9af91558f169a73aa07f980e545beb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafbb90b5c9af91558f169a73aa07f980e545beb/comments", "author": null, "committer": null, "parents": [{"sha": "295dde9412f6285b8580a3b3e202e9073dcf2d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295dde9412f6285b8580a3b3e202e9073dcf2d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/295dde9412f6285b8580a3b3e202e9073dcf2d58"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "a42f054c6420a861636d64b5624d9fa96c7d7300", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafbb90b5c9af91558f169a73aa07f980e545beb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafbb90b5c9af91558f169a73aa07f980e545beb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bafbb90b5c9af91558f169a73aa07f980e545beb", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vabd.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vabal.c: New file."}, {"sha": "e95404f67892e25af3632908a7b50cccd0650bef", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabd.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bafbb90b5c9af91558f169a73aa07f980e545beb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bafbb90b5c9af91558f169a73aa07f980e545beb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabd.c?ref=bafbb90b5c9af91558f169a73aa07f980e545beb", "patch": "@@ -0,0 +1,153 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+#include <math.h>\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0x11, 0x10, 0xf, 0xe,\n+\t\t\t\t       0xd, 0xc, 0xb, 0xa };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0x3, 0x2, 0x1, 0x0 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0x18, 0x17 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xef, 0xf0, 0xf1, 0xf2,\n+\t\t\t\t\t0xf3, 0xf4, 0xf5, 0xf6 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffe3, 0xffe4, 0xffe5, 0xffe6 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffe8, 0xffffffe9 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0x41c26666, 0x41ba6666 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0x1a, 0x19, 0x18, 0x17,\n+\t\t\t\t\t0x16, 0x15, 0x14, 0x13,\n+\t\t\t\t\t0x12, 0x11, 0x10, 0xf,\n+\t\t\t\t\t0xe, 0xd, 0xc, 0xb };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0x4, 0x3, 0x2, 0x1,\n+\t\t\t\t\t0x0, 0x1, 0x2, 0x3 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0x30, 0x2f, 0x2e, 0x2d };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t0x3333333333333333 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xe6, 0xe7, 0xe8, 0xe9,\n+\t\t\t\t\t 0xea, 0xeb, 0xec, 0xed,\n+\t\t\t\t\t 0xee, 0xef, 0xf0, 0xf1,\n+\t\t\t\t\t 0xf2, 0xf3, 0xf4, 0xf5 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xffe4, 0xffe5, 0xffe6, 0xffe7,\n+\t\t\t\t\t 0xffe8, 0xffe9, 0xffea, 0xffeb };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xffffffd0, 0xffffffd1,\n+\t\t\t\t\t 0xffffffd2, 0xffffffd3 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0x3333333333333333,\n+\t\t\t\t\t 0x3333333333333333 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33,\n+\t\t\t\t\t 0x33, 0x33, 0x33, 0x33 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0x3333, 0x3333, 0x3333, 0x3333,\n+\t\t\t\t\t 0x3333, 0x3333, 0x3333, 0x3333 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0x42407ae1, 0x423c7ae1,\n+\t\t\t\t\t   0x42387ae1, 0x42347ae1 };\n+\n+/* Additional expected results for float32 variants with specially\n+   chosen input values.  */\n+VECT_VAR_DECL(expected_float32,hfloat,32,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+\n+#define TEST_MSG \"VABD/VABDQ\"\n+void exec_vabd (void)\n+{\n+  /* Basic test: v4=vabd(v1,v2), then store the result.  */\n+#define TEST_VABD(Q, T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vabd##Q##_##T2##W(VECT_VAR(vector1, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+#define DECL_VABD_VAR(VAR)\t\t\t\\\n+  DECL_VARIABLE(VAR, int, 8, 8);\t\t\\\n+  DECL_VARIABLE(VAR, int, 16, 4);\t\t\\\n+  DECL_VARIABLE(VAR, int, 32, 2);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 8, 8);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 16, 4);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 32, 2);\t\t\\\n+  DECL_VARIABLE(VAR, float, 32, 2);\t\t\\\n+  DECL_VARIABLE(VAR, int, 8, 16);\t\t\\\n+  DECL_VARIABLE(VAR, int, 16, 8);\t\t\\\n+  DECL_VARIABLE(VAR, int, 32, 4);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 8, 16);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 16, 8);\t\t\\\n+  DECL_VARIABLE(VAR, uint, 32, 4);\t\t\\\n+  DECL_VARIABLE(VAR, float, 32, 4)\n+\n+  DECL_VABD_VAR(vector1);\n+  DECL_VABD_VAR(vector2);\n+  DECL_VABD_VAR(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector1\" from \"buffer\".  */\n+  VLOAD(vector1, buffer, , int, s, 8, 8);\n+  VLOAD(vector1, buffer, , int, s, 16, 4);\n+  VLOAD(vector1, buffer, , int, s, 32, 2);\n+  VLOAD(vector1, buffer, , uint, u, 8, 8);\n+  VLOAD(vector1, buffer, , uint, u, 16, 4);\n+  VLOAD(vector1, buffer, , uint, u, 32, 2);\n+  VLOAD(vector1, buffer, , float, f, 32, 2);\n+  VLOAD(vector1, buffer, q, int, s, 8, 16);\n+  VLOAD(vector1, buffer, q, int, s, 16, 8);\n+  VLOAD(vector1, buffer, q, int, s, 32, 4);\n+  VLOAD(vector1, buffer, q, uint, u, 8, 16);\n+  VLOAD(vector1, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector1, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector1, buffer, q, float, f, 32, 4);\n+\n+  /* Choose init value arbitrarily.  */\n+  VDUP(vector2, , int, s, 8, 8, 1);\n+  VDUP(vector2, , int, s, 16, 4, -13);\n+  VDUP(vector2, , int, s, 32, 2, 8);\n+  VDUP(vector2, , uint, u, 8, 8, 1);\n+  VDUP(vector2, , uint, u, 16, 4, 13);\n+  VDUP(vector2, , uint, u, 32, 2, 8);\n+  VDUP(vector2, , float, f, 32, 2, 8.3f);\n+  VDUP(vector2, q, int, s, 8, 16, 10);\n+  VDUP(vector2, q, int, s, 16, 8, -12);\n+  VDUP(vector2, q, int, s, 32, 4, 32);\n+  VDUP(vector2, q, uint, u, 8, 16, 10);\n+  VDUP(vector2, q, uint, u, 16, 8, 12);\n+  VDUP(vector2, q, uint, u, 32, 4, 32);\n+  VDUP(vector2, q, float, f, 32, 4, 32.12f);\n+\n+  /* Execute the tests.  */\n+  TEST_VABD(, int, s, 8, 8);\n+  TEST_VABD(, int, s, 16, 4);\n+  TEST_VABD(, int, s, 32, 2);\n+  TEST_VABD(, uint, u, 8, 8);\n+  TEST_VABD(, uint, u, 16, 4);\n+  TEST_VABD(, uint, u, 32, 2);\n+  TEST_VABD(, float, f, 32, 2);\n+  TEST_VABD(q, int, s, 8, 16);\n+  TEST_VABD(q, int, s, 16, 8);\n+  TEST_VABD(q, int, s, 32, 4);\n+  TEST_VABD(q, uint, u, 8, 16);\n+  TEST_VABD(q, uint, u, 16, 8);\n+  TEST_VABD(q, uint, u, 32, 4);\n+  TEST_VABD(q, float, f, 32, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+\n+\n+  /* Extra FP tests with special values (-0.0, ....) */\n+  VDUP(vector1, q, float, f, 32, 4, -0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, 0.0);\n+  TEST_VABD(q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \" FP special (-0.0)\");\n+\n+  /* Extra FP tests with special values (-0.0, ....) */\n+  VDUP(vector1, q, float, f, 32, 4, 0.0f);\n+  VDUP(vector2, q, float, f, 32, 4, -0.0);\n+  TEST_VABD(q, float, f, 32, 4);\n+  CHECK_FP(TEST_MSG, float, 32, 4, PRIx32, expected_float32, \" FP special (-0.0)\");\n+}\n+\n+int main (void)\n+{\n+  exec_vabd ();\n+  return 0;\n+}"}]}