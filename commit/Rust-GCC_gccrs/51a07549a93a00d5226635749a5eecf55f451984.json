{"sha": "51a07549a93a00d5226635749a5eecf55f451984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFhMDc1NDlhOTNhMDBkNTIyNjYzNTc0OWE1ZWVjZjU1ZjQ1MTk4NA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2016-11-28T13:21:02Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2016-11-28T13:21:02Z"}, "message": "combine.c (simplify_if_then_else): Simplify IF_THEN_ELSE that isolates a single bit...\n\ngcc:\n* combine.c (simplify_if_then_else): Simplify IF_THEN_ELSE\nthat isolates a single bit, even if the condition involves\nsubregs.\n\nFrom-SVN: r242917", "tree": {"sha": "3e830f40caac9290970b1efe2a864f5cfa0b7e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e830f40caac9290970b1efe2a864f5cfa0b7e27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51a07549a93a00d5226635749a5eecf55f451984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a07549a93a00d5226635749a5eecf55f451984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a07549a93a00d5226635749a5eecf55f451984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a07549a93a00d5226635749a5eecf55f451984/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6383ff9f9e2b4fad5a0d7a76de5548b3255ea9a7"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "83615edeeb2ea5dea70d7e53e3dac4b4506aae04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a07549a93a00d5226635749a5eecf55f451984/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a07549a93a00d5226635749a5eecf55f451984/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51a07549a93a00d5226635749a5eecf55f451984", "patch": "@@ -1,3 +1,9 @@\n+2016-11-28  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* combine.c (simplify_if_then_else): Simplify IF_THEN_ELSE\n+\tthat isolates a single bit, even if the condition involves\n+\tsubregs.\n+\n 2016-11-28  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def"}, {"sha": "45d4048b13dfe8c3484d991847698e87f344a7ce", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a07549a93a00d5226635749a5eecf55f451984/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a07549a93a00d5226635749a5eecf55f451984/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=51a07549a93a00d5226635749a5eecf55f451984", "patch": "@@ -6522,14 +6522,22 @@ simplify_if_then_else (rtx x)\n       simplify_shift_const (NULL_RTX, ASHIFT, mode,\n \t\t\t    gen_lowpart (mode, XEXP (cond, 0)), i);\n \n-  /* (IF_THEN_ELSE (NE REG 0) (0) (8)) is REG for nonzero_bits (REG) == 8.  */\n+  /* (IF_THEN_ELSE (NE A 0) C1 0) is A or a zero-extend of A if the only\n+     non-zero bit in A is C1.  */\n   if (true_code == NE && XEXP (cond, 1) == const0_rtx\n       && false_rtx == const0_rtx && CONST_INT_P (true_rtx)\n-      && GET_MODE (XEXP (cond, 0)) == mode\n+      && INTEGRAL_MODE_P (GET_MODE (XEXP (cond, 0)))\n       && (UINTVAL (true_rtx) & GET_MODE_MASK (mode))\n-\t  == nonzero_bits (XEXP (cond, 0), mode)\n+\t  == nonzero_bits (XEXP (cond, 0), GET_MODE (XEXP (cond, 0)))\n       && (i = exact_log2 (UINTVAL (true_rtx) & GET_MODE_MASK (mode))) >= 0)\n-    return XEXP (cond, 0);\n+    {\n+      rtx val = XEXP (cond, 0);\n+      enum machine_mode val_mode = GET_MODE (val);\n+      if (val_mode == mode)\n+        return val;\n+      else if (GET_MODE_PRECISION (val_mode) < GET_MODE_PRECISION (mode))\n+        return simplify_gen_unary (ZERO_EXTEND, mode, val, val_mode);\n+    }\n \n   return x;\n }"}]}