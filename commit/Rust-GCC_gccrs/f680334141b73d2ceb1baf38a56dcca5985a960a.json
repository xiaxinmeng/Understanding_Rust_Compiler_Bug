{"sha": "f680334141b73d2ceb1baf38a56dcca5985a960a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY4MDMzNDE0MWI3M2QyY2ViMWJhZjM4YTU2ZGNjYTU5ODVhOTYwYQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2015-12-10T15:40:57Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2015-12-10T15:40:57Z"}, "message": "tree-inline.c (duplicate_remap_omp_clause_seq): New function.\n\n2015-12-10  Martin Jambor  <mjambor@suse.cz>\n\n\t* tree-inline.c (duplicate_remap_omp_clause_seq): New function.\n\t(replace_locals_op): Duplicate gimple sequences in OMP clauses.\n\nFrom-SVN: r231523", "tree": {"sha": "93a7daadfce29d70f2a63ab6d44abeb0514484a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93a7daadfce29d70f2a63ab6d44abeb0514484a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f680334141b73d2ceb1baf38a56dcca5985a960a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f680334141b73d2ceb1baf38a56dcca5985a960a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f680334141b73d2ceb1baf38a56dcca5985a960a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f680334141b73d2ceb1baf38a56dcca5985a960a/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c1ca083ca75d75ca6d2746a6fd43bfa2d9a7b0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1ca083ca75d75ca6d2746a6fd43bfa2d9a7b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1ca083ca75d75ca6d2746a6fd43bfa2d9a7b0a"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "6e45dc565ad5b0d5546226caef1936598e202d44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f680334141b73d2ceb1baf38a56dcca5985a960a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f680334141b73d2ceb1baf38a56dcca5985a960a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f680334141b73d2ceb1baf38a56dcca5985a960a", "patch": "@@ -1,3 +1,8 @@\n+2015-12-10  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* tree-inline.c (duplicate_remap_omp_clause_seq): New function.\n+\t(replace_locals_op): Duplicate gimple sequences in OMP clauses.\n+\n 2015-12-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* graphite-optimize-isl.c (scop_get_domains): Fix indentation."}, {"sha": "dea23c79ba58b90c0b95abf8b0074a2a37b90b49", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f680334141b73d2ceb1baf38a56dcca5985a960a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f680334141b73d2ceb1baf38a56dcca5985a960a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=f680334141b73d2ceb1baf38a56dcca5985a960a", "patch": "@@ -5116,6 +5116,8 @@ mark_local_labels_stmt (gimple_stmt_iterator *gsip,\n   return NULL_TREE;\n }\n \n+static gimple_seq duplicate_remap_omp_clause_seq (gimple_seq seq,\n+\t\t\t\t\t\t  struct walk_stmt_info *wi);\n \n /* Called via walk_gimple_seq by copy_gimple_seq_and_replace_local.\n    Using the splay_tree pointed to by ST (which is really a `splay_tree'),\n@@ -5160,6 +5162,35 @@ replace_locals_op (tree *tp, int *walk_subtrees, void *data)\n \t  TREE_OPERAND (expr, 3) = NULL_TREE;\n \t}\n     }\n+  else if (TREE_CODE (expr) == OMP_CLAUSE)\n+    {\n+      /* Before the omplower pass completes, some OMP clauses can contain\n+\t sequences that are neither copied by gimple_seq_copy nor walked by\n+\t walk_gimple_seq.  To make copy_gimple_seq_and_replace_locals work even\n+\t in those situations, we have to copy and process them explicitely.  */\n+\n+      if (OMP_CLAUSE_CODE (expr) == OMP_CLAUSE_LASTPRIVATE)\n+\t{\n+\t  gimple_seq seq = OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (expr);\n+\t  seq = duplicate_remap_omp_clause_seq (seq, wi);\n+\t  OMP_CLAUSE_LASTPRIVATE_GIMPLE_SEQ (expr) = seq;\n+\t}\n+      else if (OMP_CLAUSE_CODE (expr) == OMP_CLAUSE_LINEAR)\n+\t{\n+\t  gimple_seq seq = OMP_CLAUSE_LINEAR_GIMPLE_SEQ (expr);\n+\t  seq = duplicate_remap_omp_clause_seq (seq, wi);\n+\t  OMP_CLAUSE_LINEAR_GIMPLE_SEQ (expr) = seq;\n+\t}\n+      else if (OMP_CLAUSE_CODE (expr) == OMP_CLAUSE_REDUCTION)\n+\t{\n+\t  gimple_seq seq = OMP_CLAUSE_REDUCTION_GIMPLE_INIT (expr);\n+\t  seq = duplicate_remap_omp_clause_seq (seq, wi);\n+\t  OMP_CLAUSE_REDUCTION_GIMPLE_INIT (expr) = seq;\n+\t  seq = OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (expr);\n+\t  seq = duplicate_remap_omp_clause_seq (seq, wi);\n+\t  OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (expr) = seq;\n+\t}\n+    }\n \n   /* Keep iterating.  */\n   return NULL_TREE;\n@@ -5200,6 +5231,21 @@ replace_locals_stmt (gimple_stmt_iterator *gsip,\n   return NULL_TREE;\n }\n \n+/* Create a copy of SEQ and remap all decls in it.  */\n+\n+static gimple_seq\n+duplicate_remap_omp_clause_seq (gimple_seq seq, struct walk_stmt_info *wi)\n+{\n+  if (!seq)\n+    return NULL;\n+\n+  /* If there are any labels in OMP sequences, they can be only referred to in\n+     the sequence itself and therefore we can do both here.  */\n+  walk_gimple_seq (seq, mark_local_labels_stmt, NULL, wi);\n+  gimple_seq copy = gimple_seq_copy (seq);\n+  walk_gimple_seq (copy, replace_locals_stmt, replace_locals_op, wi);\n+  return copy;\n+}\n \n /* Copies everything in SEQ and replaces variables and labels local to\n    current_function_decl.  */"}]}