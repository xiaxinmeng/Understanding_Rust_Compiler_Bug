{"sha": "3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3Y2IxYzdlN2UyNDM3OTRjZTI5MWFiY2JjMzkyOWY4YjVmNjVkOQ==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "coudert@clipper.ens.fr", "date": "2006-06-24T08:27:32Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2006-06-24T08:27:32Z"}, "message": "re PR fortran/28094 (Modulo of real(kind=10) variables doesn't work)\n\n\tPR fortran/28094\n\n\t* trans-intrinsic.c (gfc_conv_intrinsic_mod): Support cases where\n\tthere is no integer kind equal to the resulting real kind.\n\t* intrinsic.c (add_functions): MODULO is not allowed as an actual\n\targument.\n\n\t* Makefile.am: Add _mod_r10.F90 and _mod_r16.F90.\n\t* Makefile.in: Regenerate.\n\t* generated/_mod_r10.F90: New file.\n\t* generated/_mod_r16.F90: New file.\n\nFrom-SVN: r114961", "tree": {"sha": "4e2a4565f7f0838b16d9c83b741659c08717702c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e2a4565f7f0838b16d9c83b741659c08717702c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/comments", "author": null, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35157c5e558ee9e67bc2fb3529e52dcd7a31ce5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35157c5e558ee9e67bc2fb3529e52dcd7a31ce5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35157c5e558ee9e67bc2fb3529e52dcd7a31ce5d"}], "stats": {"total": 157, "additions": 142, "deletions": 15}, "files": [{"sha": "73b8f7ed7a78ebd30c9d079a46593c42d8cb7d86", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -1,3 +1,11 @@\n+2006-06-24  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/28094\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_mod): Support cases where\n+\tthere is no integer kind equal to the resulting real kind.\n+\t* intrinsic.c (add_functions): MODULO is not allowed as an actual\n+\targument.\n+\n 2006-06-23  Steven G. Kargl  <kargls@comcast.net>\n \n \tPR fortran/27981"}, {"sha": "082c1b0188aba6b4634dee06b94ce04f54f1cef6", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -1809,7 +1809,7 @@ add_functions (void)\n \n   make_generic (\"mod\", GFC_ISYM_MOD, GFC_STD_F77);\n \n-  add_sym_2 (\"modulo\", 1, 1, BT_REAL, di, GFC_STD_F95,\n+  add_sym_2 (\"modulo\", 1, 0, BT_REAL, di, GFC_STD_F95,\n \t     gfc_check_a_p, gfc_simplify_modulo, gfc_resolve_modulo,\n \t     a, BT_REAL, di, REQUIRED, p, BT_REAL, di, REQUIRED);\n "}, {"sha": "b23fc5f79e7cf757d0515ed31d883ceb140f4692", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -860,7 +860,7 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n   tree test;\n   tree test2;\n   mpfr_t huge;\n-  int n;\n+  int n, ikind;\n \n   arg = gfc_conv_intrinsic_function_args (se, expr);\n   arg2 = TREE_VALUE (TREE_CHAIN (arg));\n@@ -886,7 +886,13 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n       /* Test if the value is too large to handle sensibly.  */\n       gfc_set_model_kind (expr->ts.kind);\n       mpfr_init (huge);\n-      n = gfc_validate_kind (BT_INTEGER, expr->ts.kind, false);\n+      n = gfc_validate_kind (BT_INTEGER, expr->ts.kind, true);\n+      ikind = expr->ts.kind;\n+      if (n < 0)\n+\t{\n+\t  n = gfc_validate_kind (BT_INTEGER, gfc_max_integer_kind, false);\n+\t  ikind = gfc_max_integer_kind;\n+\t}\n       mpfr_set_z (huge, gfc_integer_kinds[n].huge, GFC_RND_MODE);\n       test = gfc_conv_mpfr_to_tree (huge, expr->ts.kind);\n       test2 = build2 (LT_EXPR, boolean_type_node, tmp, test);\n@@ -896,7 +902,7 @@ gfc_conv_intrinsic_mod (gfc_se * se, gfc_expr * expr, int modulo)\n       test = build2 (GT_EXPR, boolean_type_node, tmp, test);\n       test2 = build2 (TRUTH_AND_EXPR, boolean_type_node, test, test2);\n \n-      itype = gfc_get_int_type (expr->ts.kind);\n+      itype = gfc_get_int_type (ikind);\n       if (modulo)\n        tmp = build_fix_expr (&se->pre, tmp, itype, FIX_FLOOR_EXPR);\n       else"}, {"sha": "0474b08b64afa871b0635068d7fa9d9c4369c5aa", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -1,3 +1,11 @@\n+2006-06-24  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\tPR fortran/28094\n+\t* Makefile.am: Add _mod_r10.F90 and _mod_r16.F90.\n+\t* Makefile.in: Regenerate.\n+\t* generated/_mod_r10.F90: New file.\n+\t* generated/_mod_r16.F90: New file.\n+\n 2006-06-22  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR libfortran/26769"}, {"sha": "a7fab63d8bcedd00ce8185204bd68f40303e6f54", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -571,11 +571,9 @@ generated/_mod_i4.F90 \\\n generated/_mod_i8.F90 \\\n generated/_mod_i16.F90 \\\n generated/_mod_r4.F90 \\\n-generated/_mod_r8.F90\n-# There are commented out due to a bug in the way the front-end\n-# handles MOD\n-#generated/_mod_r10.F90\n-#generated/_mod_r16.F90\n+generated/_mod_r8.F90 \\\n+generated/_mod_r10.F90 \\\n+generated/_mod_r16.F90\n \n gfor_specific_src= \\\n $(gfor_built_specific_src) \\"}, {"sha": "29844fbfad856121ad344e6f7ee5a64d9e1d0eff", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -205,7 +205,8 @@ am__objects_36 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n \t_sign_r8.lo _sign_r10.lo _sign_r16.lo _dim_i4.lo _dim_i8.lo \\\n \t_dim_i16.lo _dim_r4.lo _dim_r8.lo _dim_r10.lo _dim_r16.lo \\\n \t_atan2_r4.lo _atan2_r8.lo _atan2_r10.lo _atan2_r16.lo \\\n-\t_mod_i4.lo _mod_i8.lo _mod_i16.lo _mod_r4.lo _mod_r8.lo\n+\t_mod_i4.lo _mod_i8.lo _mod_i16.lo _mod_r4.lo _mod_r8.lo \\\n+\t_mod_r10.lo _mod_r16.lo\n am__objects_37 = $(am__objects_35) $(am__objects_36) dprod_r8.lo \\\n \tf2c_specifics.lo\n am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_31) \\\n@@ -920,12 +921,10 @@ generated/_mod_i4.F90 \\\n generated/_mod_i8.F90 \\\n generated/_mod_i16.F90 \\\n generated/_mod_r4.F90 \\\n-generated/_mod_r8.F90\n+generated/_mod_r8.F90 \\\n+generated/_mod_r10.F90 \\\n+generated/_mod_r16.F90\n \n-# There are commented out due to a bug in the way the front-end\n-# handles MOD\n-#generated/_mod_r10.F90\n-#generated/_mod_r16.F90\n gfor_specific_src = \\\n $(gfor_built_specific_src) \\\n $(gfor_built_specific2_src) \\\n@@ -1398,6 +1397,12 @@ _mod_r4.lo: generated/_mod_r4.F90\n _mod_r8.lo: generated/_mod_r8.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _mod_r8.lo `test -f 'generated/_mod_r8.F90' || echo '$(srcdir)/'`generated/_mod_r8.F90\n \n+_mod_r10.lo: generated/_mod_r10.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _mod_r10.lo `test -f 'generated/_mod_r10.F90' || echo '$(srcdir)/'`generated/_mod_r10.F90\n+\n+_mod_r16.lo: generated/_mod_r16.F90\n+\t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o _mod_r16.lo `test -f 'generated/_mod_r16.F90' || echo '$(srcdir)/'`generated/_mod_r16.F90\n+\n f2c_specifics.lo: intrinsics/f2c_specifics.F90\n \t$(LIBTOOL) --mode=compile $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS) -c -o f2c_specifics.lo `test -f 'intrinsics/f2c_specifics.F90' || echo '$(srcdir)/'`intrinsics/f2c_specifics.F90\n "}, {"sha": "9826d122f57aa45c5becbfefe527d7d9eac29ea6", "filename": "libgfortran/generated/_mod_r10.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2Fgenerated%2F_mod_r10.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2Fgenerated%2F_mod_r10.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_mod_r10.F90?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_10)\n+\n+\n+\n+elemental function specific__mod_r10 (p1, p2)\n+   real (kind=10), intent (in) :: p1, p2\n+   real (kind=10) :: specific__mod_r10\n+\n+   specific__mod_r10 = mod (p1, p2)\n+end function\n+\n+\n+\n+#endif"}, {"sha": "15c2b815b1c61b0b2073c496bfc2a837bb8723f5", "filename": "libgfortran/generated/_mod_r16.F90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2Fgenerated%2F_mod_r16.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9/libgfortran%2Fgenerated%2F_mod_r16.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2F_mod_r16.F90?ref=3e7cb1c7e7e243794ce291abcbc3929f8b5f65d9", "patch": "@@ -0,0 +1,51 @@\n+!   Copyright 2002 Free Software Foundation, Inc.\n+!   Contributed by Paul Brook <paul@nowt.org>\n+!\n+!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!\n+!GNU libgfortran is free software; you can redistribute it and/or\n+!modify it under the terms of the GNU General Public\n+!License as published by the Free Software Foundation; either\n+!version 2 of the License, or (at your option) any later version.\n+\n+!In addition to the permissions in the GNU General Public License, the\n+!Free Software Foundation gives you unlimited permission to link the\n+!compiled version of this file into combinations with other programs,\n+!and to distribute those combinations without any restriction coming\n+!from the use of this file.  (The General Public License restrictions\n+!do apply in other respects; for example, they cover modification of\n+!the file, and distribution when not linked into a combine\n+!executable.)\n+!\n+!GNU libgfortran is distributed in the hope that it will be useful,\n+!but WITHOUT ANY WARRANTY; without even the implied warranty of\n+!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+!GNU General Public License for more details.\n+!\n+!You should have received a copy of the GNU General Public\n+!License along with libgfortran; see the file COPYING.  If not,\n+!write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+!Boston, MA 02110-1301, USA.\n+!\n+!This file is machine generated.\n+\n+\n+\n+#include \"config.h\"\n+#include \"kinds.inc\"\n+#include \"c99_protos.inc\"\n+\n+#if defined (HAVE_GFC_REAL_16)\n+\n+\n+\n+elemental function specific__mod_r16 (p1, p2)\n+   real (kind=16), intent (in) :: p1, p2\n+   real (kind=16) :: specific__mod_r16\n+\n+   specific__mod_r16 = mod (p1, p2)\n+end function\n+\n+\n+\n+#endif"}]}