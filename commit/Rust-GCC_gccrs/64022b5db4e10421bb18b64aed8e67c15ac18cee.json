{"sha": "64022b5db4e10421bb18b64aed8e67c15ac18cee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwMjJiNWRiNGUxMDQyMWJiMThiNjRhZWQ4ZTY3YzE1YWMxOGNlZQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2005-03-08T00:30:32Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2005-03-08T00:30:32Z"}, "message": "rs6000-protos.h: Rename output_e500_flip_eq_bit to output_e500_flip_gt_bit.\n\n\t* config/rs6000/rs6000-protos.h: Rename output_e500_flip_eq_bit to\n\toutput_e500_flip_gt_bit.\n\n\t* config/rs6000/rs6000.c (print_operand): case D: Print out bit 31\n\tas bit 31.\n\t(rs6000_generate_compare): Fix logic to look at the correct bits.\n\t(output_e500_flip_eq_bit): Rename to output_e500_flip_gt_bit.\n\tLook at GT bit.\n\t(rs6000_emit_sCOND): Rename gen_e500_flip_eq_bit to\n\tgen_e500_flip_gt_bit.  Rename gen_move_from_CR_eq_bit to\n\tgen_move_from_CR_gt_bit.\n\n\t* config/rs6000/rs6000.md (\"move_from_CR_eq_bit\"): Change bit\n\t(\"move_from_CR_eq_bit\"): Rename to move_from_CR_gt_bit.\n\t(UNSPEC_MV_CR_EQ): Rename to UNSPEC_MV_CR_GT.\n\n\t* config/rs6000/spe.md (\"e500_cr_ior_compare\"): New.\n\t(E500_CR_IOR_COMPARE): New constant.\n\n[[Split portion of a mixed commit.]]\n\nFrom-SVN: r96063.2", "tree": {"sha": "846759c89c016d7619b43dd45e046987a21f08fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/846759c89c016d7619b43dd45e046987a21f08fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64022b5db4e10421bb18b64aed8e67c15ac18cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64022b5db4e10421bb18b64aed8e67c15ac18cee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64022b5db4e10421bb18b64aed8e67c15ac18cee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64022b5db4e10421bb18b64aed8e67c15ac18cee/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2125de9340cf23be518320666b00d7b78118219e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2125de9340cf23be518320666b00d7b78118219e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2125de9340cf23be518320666b00d7b78118219e"}], "stats": {"total": 78, "additions": 51, "deletions": 27}, "files": [{"sha": "9979d32fdd00f423bcfbe3bba5af682f03f53add", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64022b5db4e10421bb18b64aed8e67c15ac18cee", "patch": "@@ -1,3 +1,24 @@\n+2005-03-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000-protos.h: Rename output_e500_flip_eq_bit to\n+\toutput_e500_flip_gt_bit.\n+\n+\t* config/rs6000/rs6000.c (print_operand): case D: Print out bit 31\n+\tas bit 31.\n+\t(rs6000_generate_compare): Fix logic to look at the correct bits.\n+\t(output_e500_flip_eq_bit): Rename to output_e500_flip_gt_bit.\n+\tLook at GT bit.\n+\t(rs6000_emit_sCOND): Rename gen_e500_flip_eq_bit to\n+\tgen_e500_flip_gt_bit.  Rename gen_move_from_CR_eq_bit to\n+\tgen_move_from_CR_gt_bit.\n+\n+\t* config/rs6000/rs6000.md (\"move_from_CR_eq_bit\"): Change bit\n+\t(\"move_from_CR_eq_bit\"): Rename to move_from_CR_gt_bit.\n+\t(UNSPEC_MV_CR_EQ): Rename to UNSPEC_MV_CR_GT.\n+\n+\t* config/rs6000/spe.md (\"e500_cr_ior_compare\"): New.\n+\t(E500_CR_IOR_COMPARE): New constant.\n+\n 2005-03-08  Earl Chew <earl_chew@agilent.com>\n \t    David Billinghurst <David.Billinghurst@riotinto.com>\n "}, {"sha": "8e6cf35fde17c1d36179fbe9f759afd6219f63eb", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=64022b5db4e10421bb18b64aed8e67c15ac18cee", "patch": "@@ -76,7 +76,7 @@ extern enum rtx_code rs6000_reverse_condition (enum machine_mode,\n extern void rs6000_emit_sCOND (enum rtx_code, rtx);\n extern void rs6000_emit_cbranch (enum rtx_code, rtx);\n extern char * output_cbranch (rtx, const char *, int, rtx);\n-extern char * output_e500_flip_eq_bit (rtx, rtx);\n+extern char * output_e500_flip_gt_bit (rtx, rtx);\n extern rtx rs6000_emit_set_const (rtx, enum machine_mode, rtx, int);\n extern int rs6000_emit_cmove (rtx, rtx, rtx, rtx);\n extern int rs6000_emit_vector_cond_expr (rtx, rtx, rtx, rtx, rtx, rtx);"}, {"sha": "f668b12bca05cfb300a00557df8415f7d1a4dac6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=64022b5db4e10421bb18b64aed8e67c15ac18cee", "patch": "@@ -9211,8 +9211,7 @@ print_operand (FILE *file, rtx x, int code)\n       /* Bit 1 is EQ bit.  */\n       i = 4 * (REGNO (x) - CR0_REGNO) + 2;\n \n-      /* If we want bit 31, write a shift count of zero, not 32.  */\n-      fprintf (file, \"%d\", i == 31 ? 0 : i + 1);\n+      fprintf (file, \"%d\", i);\n       return;\n \n     case 'E':\n@@ -10017,7 +10016,7 @@ rs6000_generate_compare (enum rtx_code code)\n   if ((TARGET_E500 && !TARGET_FPRS && TARGET_HARD_FLOAT)\n       && rs6000_compare_fp_p)\n     {\n-      rtx cmp, or1, or2, or_result, compare_result2;\n+      rtx cmp, or_result, compare_result2;\n       enum machine_mode op_mode = GET_MODE (rs6000_compare_op0);\n \n       if (op_mode == VOIDmode)\n@@ -10091,9 +10090,6 @@ rs6000_generate_compare (enum rtx_code code)\n \t    default: abort ();\n \t    }\n \n-\t  or1 = gen_reg_rtx (SImode);\n-\t  or2 = gen_reg_rtx (SImode);\n-\t  or_result = gen_reg_rtx (CCEQmode);\n \t  compare_result2 = gen_reg_rtx (CCFPmode);\n \n \t  /* Do the EQ.  */\n@@ -10112,14 +10108,10 @@ rs6000_generate_compare (enum rtx_code code)\n \t  else abort ();\n \t  emit_insn (cmp);\n \n-\t  or1 = gen_rtx_GT (SImode, compare_result, const0_rtx);\n-\t  or2 = gen_rtx_GT (SImode, compare_result2, const0_rtx);\n-\n \t  /* OR them together.  */\n-\t  cmp = gen_rtx_SET (VOIDmode, or_result,\n-\t\t\t     gen_rtx_COMPARE (CCEQmode,\n-\t\t\t\t\t      gen_rtx_IOR (SImode, or1, or2),\n-\t\t\t\t\t      const_true_rtx));\n+\t  or_result = gen_reg_rtx (CCFPmode);\n+\t  cmp = gen_e500_cr_ior_compare (or_result, compare_result,\n+\t\t\t\t\t   compare_result2);\n \t  compare_result = or_result;\n \t  code = EQ;\n \t}\n@@ -10229,9 +10221,9 @@ rs6000_emit_sCOND (enum rtx_code code, rtx result)\n \tabort ();\n \n       if (cond_code == NE)\n-\temit_insn (gen_e500_flip_eq_bit (t, t));\n+\temit_insn (gen_e500_flip_gt_bit (t, t));\n \n-      emit_insn (gen_move_from_CR_eq_bit (result, t));\n+      emit_insn (gen_move_from_CR_gt_bit (result, t));\n       return;\n     }\n \n@@ -10412,9 +10404,9 @@ output_cbranch (rtx op, const char *label, int reversed, rtx insn)\n   return string;\n }\n \n-/* Return the string to flip the EQ bit on a CR.  */\n+/* Return the string to flip the GT bit on a CR.  */\n char *\n-output_e500_flip_eq_bit (rtx dst, rtx src)\n+output_e500_flip_gt_bit (rtx dst, rtx src)\n {\n   static char string[64];\n   int a, b;\n@@ -10423,9 +10415,9 @@ output_e500_flip_eq_bit (rtx dst, rtx src)\n       || GET_CODE (src) != REG || ! CR_REGNO_P (REGNO (src)))\n     abort ();\n \n-  /* EQ bit.  */\n-  a = 4 * (REGNO (dst) - CR0_REGNO) + 2;\n-  b = 4 * (REGNO (src) - CR0_REGNO) + 2;\n+  /* GT bit.  */\n+  a = 4 * (REGNO (dst) - CR0_REGNO) + 1;\n+  b = 4 * (REGNO (src) - CR0_REGNO) + 1;\n \n   sprintf (string, \"crnot %d,%d\", a, b);\n   return string;"}, {"sha": "d1b0ff4b8690477d2b43d0f9372408716a6de0a6", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=64022b5db4e10421bb18b64aed8e67c15ac18cee", "patch": "@@ -50,7 +50,7 @@\n    (UNSPEC_TLSGOTTPREL\t\t28)\n    (UNSPEC_TLSTLS\t\t29)\n    (UNSPEC_FIX_TRUNC_TF\t\t30)\t; fadd, rounding towards zero\n-   (UNSPEC_MV_CR_EQ\t\t31)\t; move_from_CR_eq_bit\n+   (UNSPEC_MV_CR_GT\t\t31)\t; move_from_CR_eq_bit\n   ])\n \n ;;\n@@ -11476,11 +11476,11 @@\n    (set_attr \"length\" \"8\")])\n \n ;; Same as above, but get the GT bit.\n-(define_insn \"move_from_CR_eq_bit\"\n+(define_insn \"move_from_CR_gt_bit\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] UNSPEC_MV_CR_EQ))]\n+\t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] UNSPEC_MV_CR_GT))]\n   \"TARGET_E500\"\n-  \"mfcr %0\\;{rlinm|rlwinm} %0,%0,%D1,1\"\n+  \"mfcr %0\\;{rlinm|rlwinm} %0,%0,%D1,31,31\"\n   [(set_attr \"type\" \"mfcr\")\n    (set_attr \"length\" \"8\")])\n "}, {"sha": "79d03ff623fc47d6be3cf7396c635507bde8beb3", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64022b5db4e10421bb18b64aed8e67c15ac18cee/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=64022b5db4e10421bb18b64aed8e67c15ac18cee", "patch": "@@ -29,6 +29,7 @@\n    (TSTDFGT_GPR\t\t1009)\n    (CMPDFLT_GPR\t\t1010)\n    (TSTDFLT_GPR\t\t1011)\n+   (E500_CR_IOR_COMPARE 1012)\n    ])\n \n (define_insn \"*negsf2_gpr\"\n@@ -2615,14 +2616,14 @@\n ;; FP comparison stuff.\n \n ;; Flip the GT bit.\n-(define_insn \"e500_flip_eq_bit\"\n+(define_insn \"e500_flip_gt_bit\"\n   [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n \t(unspec:CCFP\n \t [(match_operand:CCFP 1 \"cc_reg_operand\" \"y\")] 999))]\n   \"!TARGET_FPRS && TARGET_HARD_FLOAT\"\n   \"*\n {\n-  return output_e500_flip_eq_bit (operands[0], operands[1]);\n+  return output_e500_flip_gt_bit (operands[0], operands[1]);\n }\"\n   [(set_attr \"type\" \"cr_logical\")])\n \n@@ -2751,3 +2752,13 @@\n   \"TARGET_HARD_FLOAT && TARGET_E500_DOUBLE && flag_unsafe_math_optimizations\"\n   \"efdtstlt %0,%1,%2\"\n   [(set_attr \"type\" \"veccmpsimple\")])\n+\n+;; Like cceq_ior_compare, but compare the GT bits.\n+(define_insn \"e500_cr_ior_compare\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(unspec:CCFP [(match_operand 1 \"cc_reg_operand\" \"y\")\n+\t\t      (match_operand 2 \"cc_reg_operand\" \"y\")]\n+\t\t     E500_CR_IOR_COMPARE))]\n+  \"TARGET_E500\"\n+  \"cror 4*%0+gt,4*%1+gt,4*%2+gt\"\n+  [(set_attr \"type\" \"cr_logical\")])"}]}