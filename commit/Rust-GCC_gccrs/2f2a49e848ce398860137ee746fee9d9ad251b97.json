{"sha": "2f2a49e848ce398860137ee746fee9d9ad251b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyYTQ5ZTg0OGNlMzk4ODYwMTM3ZWU3NDZmZWU5ZDlhZDI1MWI5Nw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-08-26T20:01:41Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-08-26T20:01:41Z"}, "message": "Add -mno-wide-multiply, -mno-move, make addresses more compatible with other parts of compiler.\n\nFrom-SVN: r7990", "tree": {"sha": "dbef0239e3e03f4f1e7d83119350d5363987b8ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbef0239e3e03f4f1e7d83119350d5363987b8ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2a49e848ce398860137ee746fee9d9ad251b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2a49e848ce398860137ee746fee9d9ad251b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2a49e848ce398860137ee746fee9d9ad251b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2a49e848ce398860137ee746fee9d9ad251b97/comments", "author": null, "committer": null, "parents": [{"sha": "3b3c6a3f3ed307d0dbfb4d88d95248f45a402998", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b3c6a3f3ed307d0dbfb4d88d95248f45a402998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b3c6a3f3ed307d0dbfb4d88d95248f45a402998"}], "stats": {"total": 342, "additions": 268, "deletions": 74}, "files": [{"sha": "04b3a1ee47aa1137655e14017aaf369ba0c089fb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 268, "deletions": 74, "changes": 342, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2a49e848ce398860137ee746fee9d9ad251b97/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2a49e848ce398860137ee746fee9d9ad251b97/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2f2a49e848ce398860137ee746fee9d9ad251b97", "patch": "@@ -1,4 +1,4 @@\n-;; GCC machine description for Intel 80386.\n+;; GCC machine description for Intel X86.\n ;; Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n ;; Mostly by William Schelter.\n \n@@ -157,7 +157,7 @@\n   if (find_regno_note (insn, REG_DEAD, FIRST_STACK_REG))\n     output_asm_insn (AS1 (fstp,%y0), operands);\n \n-  return (char *) output_fp_cc0_set (insn);\n+  return output_fp_cc0_set (insn);\n }\")\n \n ;; Don't generate tstsf if generating IEEE code, since the `ftst' opcode\n@@ -190,7 +190,7 @@\n   if (find_regno_note (insn, REG_DEAD, FIRST_STACK_REG))\n     output_asm_insn (AS1 (fstp,%y0), operands);\n \n-  return (char *) output_fp_cc0_set (insn);\n+  return output_fp_cc0_set (insn);\n }\")\n \n ;; Don't generate tstdf if generating IEEE code, since the `ftst' opcode\n@@ -223,7 +223,7 @@\n   if (find_regno_note (insn, REG_DEAD, FIRST_STACK_REG))\n     output_asm_insn (AS1 (fstp,%y0), operands);\n \n-  return (char *) output_fp_cc0_set (insn);\n+  return output_fp_cc0_set (insn);\n }\")\n \n ;; Don't generate tstdf if generating IEEE code, since the `ftst' opcode\n@@ -349,7 +349,7 @@\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -359,7 +359,7 @@\n \t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -369,7 +369,7 @@\n \t\t\t (match_operand:XF 1 \"register_operand\" \"f\")]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -379,7 +379,7 @@\n \t\t\t  (match_operand:DF 1 \"nonimmediate_operand\" \"fm\"))]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -389,15 +389,15 @@\n \t\t\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n \t(compare:CCFPEQ (match_operand:XF 0 \"register_operand\" \"f\")\n \t\t\t(match_operand:XF 1 \"register_operand\" \"f\")))\n    (clobber (match_scratch:HI 2 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -407,7 +407,7 @@\n    (clobber (match_scratch:HI 3 \"=a,a\"))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -417,7 +417,7 @@\n \t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -427,7 +427,7 @@\n \t\t\t (match_operand:DF 1 \"register_operand\" \"f\")]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -437,7 +437,7 @@\n \t\t\t  (match_operand:SF 1 \"nonimmediate_operand\" \"fm\"))]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -447,15 +447,15 @@\n \t\t\t (match_operand:DF 1 \"register_operand\" \"f\")]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n \t(compare:CCFPEQ (match_operand:DF 0 \"register_operand\" \"f\")\n \t\t\t(match_operand:DF 1 \"register_operand\" \"f\")))\n    (clobber (match_scratch:HI 2 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n ;; These two insns will never be generated by combine due to the mode of\n ;; the COMPARE.\n@@ -466,7 +466,7 @@\n ;\t\t\t (match_operand:SF 1 \"register_operand\" \"f\"))))\n ;   (clobber (match_scratch:HI 2 \"=a\"))]\n ;  \"TARGET_80387\"\n-;  \"* return (char *) output_float_compare (insn, operands);\")\n+;  \"* return output_float_compare (insn, operands);\")\n ;\n ;(define_insn \"\"\n ;  [(set (cc0)\n@@ -475,7 +475,7 @@\n ;\t\t\t(match_operand:DF 1 \"register_operand\" \"f\")))\n ;   (clobber (match_scratch:HI 2 \"=a\"))]\n ;  \"TARGET_80387\"\n-;  \"* return (char *) output_float_compare (insn, operands);\")\n+;  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"cmpsf_cc_1\"\n   [(set (cc0)\n@@ -485,7 +485,7 @@\n    (clobber (match_scratch:HI 3 \"=a,a\"))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -495,7 +495,7 @@\n \t\t\t  (match_operand:SI 1 \"nonimmediate_operand\" \"rm\"))]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n@@ -505,15 +505,15 @@\n \t\t\t (match_operand:SF 1 \"register_operand\" \"f\")]))\n    (clobber (match_scratch:HI 3 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_insn \"\"\n   [(set (cc0)\n \t(compare:CCFPEQ (match_operand:SF 0 \"register_operand\" \"f\")\n \t\t\t(match_operand:SF 1 \"register_operand\" \"f\")))\n    (clobber (match_scratch:HI 2 \"=a\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_float_compare (insn, operands);\")\n+  \"* return output_float_compare (insn, operands);\")\n \n (define_expand \"cmpxf\"\n   [(set (cc0)\n@@ -740,16 +740,22 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"general_operand\" \"g\"))]\n-  \"! TARGET_486\"\n+  \"TARGET_386\"\n   \"push%L0 %1\")\n \n ;; On a 486, it is faster to move MEM to a REG and then push, rather than\n ;; push MEM directly.\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n+\t(match_operand:SI 1 \"nonmemory_operand\" \"ri\"))]\n+  \"!TARGET_386 && TARGET_MOVE\"\n+  \"push%L0 %1\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"general_operand\" \"ri\"))]\n-  \"TARGET_486\"\n+  \"!TARGET_386 && !TARGET_MOVE\"\n   \"push%L0 %1\")\n \n ;; General case of fullword move.\n@@ -767,14 +773,24 @@\n \n   if (flag_pic && SYMBOLIC_CONST (operands[1]))\n     emit_pic_move (operands, SImode);\n+\n+  /* Don't generate memory->memory moves, go through a register */\n+  else if (TARGET_MOVE\n+\t   && (reload_in_progress | reload_completed) == 0\n+\t   && GET_CODE (operands[0]) == MEM\n+\t   && GET_CODE (operands[1]) == MEM\n+\t   && (!TARGET_386 || !push_operand (operands[0], SImode)))\n+    {\n+      operands[1] = force_reg (SImode, operands[1]);\n+    }\n }\")\n \n ;; On i486, incl reg is faster than movl $1,reg.\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g,r\")\n \t(match_operand:SI 1 \"general_operand\" \"ri,m\"))]\n-  \"\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   rtx link;\n@@ -799,15 +815,44 @@\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n \t(match_operand:HI 1 \"general_operand\" \"g\"))]\n-  \"\"\n+  \"TARGET_386\"\n+  \"push%W0 %1\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n+\t(match_operand:HI 1 \"nonmemory_operand\" \"ri\"))]\n+  \"!TARGET_386 && TARGET_MOVE\"\n+  \"push%W0 %1\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n+\t(match_operand:HI 1 \"general_operand\" \"ri\"))]\n+  \"!TARGET_386 && !TARGET_MOVE\"\n   \"push%W0 %1\")\n \n ;; On i486, an incl and movl are both faster than incw and movw.\n \n-(define_insn \"movhi\"\n+(define_expand \"movhi\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"\")\n+\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  /* Don't generate memory->memory moves, go through a register */\n+  if (TARGET_MOVE\n+      && (reload_in_progress | reload_completed) == 0\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM\n+      && (!TARGET_386 || !push_operand (operands[0], HImode)))\n+    {\n+      operands[1] = force_reg (HImode, operands[1]);\n+    }\n+}\")\n+\n+(define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=g,r\")\n \t(match_operand:HI 1 \"general_operand\" \"ri,m\"))]\n-  \"\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   rtx link;\n@@ -837,10 +882,27 @@\n   return AS2 (mov%W0,%1,%0);\n }\")\n \n-(define_insn \"movstricthi\"\n+(define_expand \"movstricthi\"\n+  [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"\"))\n+\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  /* Don't generate memory->memory moves, go through a register */\n+  if (TARGET_MOVE\n+      && (reload_in_progress | reload_completed) == 0\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM\n+      && (!TARGET_386 || !push_operand (operands[0], HImode)))\n+    {\n+      operands[1] = force_reg (HImode, operands[1]);\n+    }\n+}\")\n+\n+(define_insn \"\"\n   [(set (strict_low_part (match_operand:HI 0 \"general_operand\" \"+g,r\"))\n \t(match_operand:HI 1 \"general_operand\" \"ri,m\"))]\n-  \"\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   rtx link;\n@@ -868,8 +930,24 @@\n ;; the amount pushed up to a halfword.\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n-\t(match_operand:QI 1 \"general_operand\" \"q\"))]\n+\t(match_operand:QI 1 \"immediate_operand\" \"n\"))]\n   \"\"\n+  \"* return AS1 (push%W0,%1);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n+\t(match_operand:QI 1 \"nonimmediate_operand\" \"q\"))]\n+  \"!TARGET_MOVE\"\n+  \"*\n+{\n+  operands[1] = gen_rtx (REG, HImode, REGNO (operands[1]));\n+  return AS1 (push%W0,%1);\n+}\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"push_operand\" \"=<\")\n+\t(match_operand:QI 1 \"register_operand\" \"q\"))]\n+  \"TARGET_MOVE\"\n   \"*\n {\n   operands[1] = gen_rtx (REG, HImode, REGNO (operands[1]));\n@@ -881,10 +959,27 @@\n ;; ??? Do a recognizer for zero_extract that looks just like this, but reads\n ;; or writes %ah, %bh, %ch, %dh.\n \n-(define_insn \"movqi\"\n+(define_expand \"movqi\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"\")\n+\t(match_operand:QI 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  /* Don't generate memory->memory moves, go through a register */\n+  if (TARGET_MOVE\n+      && (reload_in_progress | reload_completed) == 0\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM\n+      && (!TARGET_386 || !push_operand (operands[0], QImode)))\n+    {\n+      operands[1] = force_reg (QImode, operands[1]);\n+    }\n+}\")\n+\n+(define_insn \"\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=q,*r,qm\")\n \t(match_operand:QI 1 \"general_operand\" \"*g,q,qn\"))]\n-  \"\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   rtx link;\n@@ -919,10 +1014,27 @@\n ;; If operands[1] is a constant, then an andl/orl sequence would be\n ;; faster.\n \n-(define_insn \"movstrictqi\"\n+(define_expand \"movstrictqi\"\n+  [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"\"))\n+\t(match_operand:QI 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+{\n+  /* Don't generate memory->memory moves, go through a register */\n+  if (TARGET_MOVE\n+      && (reload_in_progress | reload_completed) == 0\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM\n+      && (!TARGET_386 || !push_operand (operands[0], QImode)))\n+    {\n+      operands[1] = force_reg (QImode, operands[1]);\n+    }\n+}\")\n+\n+(define_insn \"\"\n   [(set (strict_low_part (match_operand:QI 0 \"general_operand\" \"+qm,q\"))\n \t(match_operand:QI 1 \"general_operand\" \"*qn,m\"))]\n-  \"\"\n+  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n   \"*\n {\n   rtx link;\n@@ -1028,14 +1140,14 @@\n   /* Handle other kinds of reads to the 387 */\n \n   if (STACK_TOP_P (operands[0]) && GET_CODE (operands[1]) == CONST_DOUBLE)\n-    return (char *) output_move_const_single (operands);\n+    return output_move_const_single (operands);\n \n   if (STACK_TOP_P (operands[0]))\n     return AS1 (fld%z1,%y1);\n \n   /* Handle all SFmode moves not involving the 387 */\n \n-  return (char *) singlemove_string (operands);\n+  return singlemove_string (operands);\n }\")\n \n ;;should change to handle the memory operands[1] without doing df push..\n@@ -1063,7 +1175,7 @@\n       RET;\n     }\n   else\n-    return (char *) output_move_double (operands);\n+    return output_move_double (operands);\n }\")\n \n (define_insn \"swapdf\"\n@@ -1129,14 +1241,14 @@\n   /* Handle other kinds of reads to the 387 */\n \n   if (STACK_TOP_P (operands[0]) && GET_CODE (operands[1]) == CONST_DOUBLE)\n-    return (char *) output_move_const_single (operands);\n+    return output_move_const_single (operands);\n \n   if (STACK_TOP_P (operands[0]))\n     return AS1 (fld%z1,%y1);\n \n   /* Handle all DFmode moves not involving the 387 */\n \n-  return (char *) output_move_double (operands);\n+  return output_move_double (operands);\n }\")\n \n (define_insn \"\"\n@@ -1161,7 +1273,7 @@\n       RET;\n     }\n   else\n-    return (char *) output_move_double (operands);\n+    return output_move_double (operands);\n  }\")\n \n (define_insn \"swapxf\"\n@@ -1226,33 +1338,97 @@\n   /* Handle other kinds of reads to the 387 */\n \n   if (STACK_TOP_P (operands[0]) && GET_CODE (operands[1]) == CONST_DOUBLE)\n-    return (char *) output_move_const_single (operands);\n+    return output_move_const_single (operands);\n \n   if (STACK_TOP_P (operands[0]))\n        return AS1 (fld%z1,%y1);\n \n   /* Handle all XFmode moves not involving the 387 */\n \n-  return (char *) output_move_double (operands);\n+  return output_move_double (operands);\n }\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n-\t(match_operand:DI 1 \"general_operand\" \"roiF\"))]\n+\t(match_operand:DI 1 \"general_operand\" \"roiF\"))\n+   (clobber (match_scratch:SI 2 \"X\"))\n+   (clobber (match_scratch:SI 3 \"X\"))]\n+  \"TARGET_386\"\n+  \"* return output_move_double (operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n+\t(match_operand:DI 1 \"nonmemory_operand\" \"riF\"))\n+   (clobber (match_scratch:SI 2 \"X\"))\n+   (clobber (match_scratch:SI 3 \"X\"))]\n+  \"!TARGET_386 && TARGET_MOVE\"\n+  \"* return output_move_double (operands);\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n+\t(match_operand:DI 1 \"general_operand\" \"roiF\"))\n+   (clobber (match_scratch:SI 2 \"X\"))\n+   (clobber (match_scratch:SI 3 \"X\"))]\n+  \"!TARGET_386 && !TARGET_MOVE\"\n+  \"* return output_move_double (operands);\")\n+\n+(define_expand \"movdi\"\n+  [(parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n+\t\t   (match_operand:DI 1 \"general_operand\" \"\"))\n+\t      (clobber (match_scratch:SI 2 \"\"))\n+\t      (clobber (match_scratch:SI 3 \"\"))])]\n   \"\"\n-  \"*\n+  \"\n {\n-  return (char *) output_move_double (operands);\n+  /* Don't generate memory->memory moves, go through a register */\n+  if (TARGET_MOVE\n+      && (reload_in_progress | reload_completed) == 0\n+      && GET_CODE (operands[0]) == MEM\n+      && GET_CODE (operands[1]) == MEM\n+      && (!TARGET_386 || !push_operand (operands[0], QImode)))\n+    {\n+      operands[1] = force_reg (DImode, operands[1]);\n+    }\n }\")\n \n-(define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=r,rm\")\n-\t(match_operand:DI 1 \"general_operand\" \"m,riF\"))]\n-  \"\"\n-  \"*\n-{\n-  return (char *) output_move_double (operands);\n+(define_insn \"\"\n+  [(set (match_operand:DI 0 \"general_operand\" \"=r,rm,o,o\")\n+\t(match_operand:DI 1 \"general_operand\" \"m,riF,o,o\"))\n+   (clobber (match_scratch:SI 2 \"X,X,=&r,=&r\"))\n+   (clobber (match_scratch:SI 3 \"X,X,=&r,X\"))]\n+  \"\"\n+  \"*\n+{\n+  rtx low[2], high[2], xop[6];\n+\n+  if (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n+    return output_move_double (operands);\n+\n+  split_di (operands, 2, low, high);\n+  xop[0] = operands[2];\n+  xop[1] = operands[3];\n+  xop[2] = high[0];\n+  xop[3] = high[1];\n+  xop[4] = low[0];\n+  xop[5] = low[1];\n+  if (GET_CODE (operands[3]) == REG)\n+    {\t\t\t\t/* 2 scratch registers available */\n+      output_asm_insn (AS2 (mov%L0,%5,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%3,%1), xop);\n+      output_asm_insn (AS2 (mov%L0,%0,%4), xop);\n+      output_asm_insn (AS2 (mov%L0,%1,%2), xop);\n+    }\n+  else\n+    {\t\t\t\t/* 1 scratch register */\n+      output_asm_insn (AS2 (mov%L0,%5,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%0,%4), xop);\n+      output_asm_insn (AS2 (mov%L0,%3,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%0,%2), xop);\n+    }\n+\n+  RET;\n }\")\n+  \n \f\n ;;- conversion instructions\n ;;- NONE\n@@ -1778,7 +1954,7 @@\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_fix_trunc (insn, operands);\")\n+  \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n@@ -1788,7 +1964,7 @@\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_fix_trunc (insn, operands);\")\n+  \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n@@ -1798,7 +1974,7 @@\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_fix_trunc (insn, operands);\")\n+  \"* return output_fix_trunc (insn, operands);\")\n \n ;; Signed MODE_FLOAT conversion to SImode.\n \n@@ -1851,7 +2027,7 @@\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_fix_trunc (insn, operands);\")\n+  \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n@@ -1860,7 +2036,7 @@\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_fix_trunc (insn, operands);\")\n+  \"* return output_fix_trunc (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=rm\")\n@@ -1869,7 +2045,7 @@\n    (clobber (match_operand:SI 3 \"memory_operand\" \"m\"))\n    (clobber (match_scratch:SI 4 \"=&q\"))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_fix_trunc (insn, operands);\")\n+  \"* return output_fix_trunc (insn, operands);\")\n \f\n ;; Conversion between fixed point and floating point.\n ;; The actual pattern that matches these is at the end of this file.\n@@ -2361,14 +2537,32 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))]\n-  \"\"\n+  \"TARGET_WIDE_MULTIPLY\"\n   \"mul%L0 %2\")\n \n (define_insn \"mulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=A\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%0\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\"))))]\n-  \"\"\n+  \"TARGET_WIDE_MULTIPLY\"\n+  \"imul%L0 %2\")\n+\n+(define_insn \"umulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"%a\"))\n+\t\t\t\t\t   (zero_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t\t\t\t  (const_int 32))))\n+   (clobber (match_scratch:SI 3 \"=a\"))]\n+  \"TARGET_WIDE_MULTIPLY\"\n+  \"mul%L0 %2\")\n+\n+(define_insn \"smulsi3_highpart\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%a\"))\n+\t\t\t\t\t   (sign_extend:DI (match_operand:SI 2 \"nonimmediate_operand\" \"rm\")))\n+\t\t\t\t  (const_int 32))))\n+   (clobber (match_scratch:SI 3 \"=a\"))]\n+  \"TARGET_WIDE_MULTIPLY\"\n   \"imul%L0 %2\")\n \n ;; The patterns that match these are at the end of this file.\n@@ -5153,47 +5347,47 @@\n \t\t\t[(match_operand:DF 1 \"nonimmediate_operand\" \"0,fm\")\n \t\t\t (match_operand:DF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n \t   [(float:DF (match_operand:SI 1 \"general_operand\" \"rm\"))\n \t    (match_operand:DF 2 \"general_operand\" \"0\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n \t\t\t[(match_operand:XF 1 \"nonimmediate_operand\" \"0,f\")\n \t\t\t (match_operand:XF 2 \"nonimmediate_operand\" \"f,0\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n \t   [(float:XF (match_operand:SI 1 \"general_operand\" \"rm\"))\n \t    (match_operand:XF 2 \"general_operand\" \"0\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n \t   [(float_extend:XF (match_operand:SF 1 \"general_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"general_operand\" \"0,f\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(match_operator:XF 3 \"binary_387_op\"\n \t  [(match_operand:XF 1 \"general_operand\" \"0\")\n \t   (float:XF (match_operand:SI 2 \"general_operand\" \"rm\"))]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n@@ -5202,23 +5396,23 @@\n \t   (float_extend:XF\n \t    (match_operand:SF 2 \"general_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n \t   [(float_extend:DF (match_operand:SF 1 \"general_operand\" \"fm,0\"))\n \t    (match_operand:DF 2 \"general_operand\" \"0,f\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(match_operator:DF 3 \"binary_387_op\"\n \t  [(match_operand:DF 1 \"general_operand\" \"0\")\n \t   (float:DF (match_operand:SI 2 \"general_operand\" \"rm\"))]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f,f\")\n@@ -5227,31 +5421,31 @@\n \t   (float_extend:DF\n \t    (match_operand:SF 2 \"general_operand\" \"fm,0\"))]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_387_op\"\n \t\t\t[(match_operand:SF 1 \"nonimmediate_operand\" \"0,fm\")\n \t\t\t (match_operand:SF 2 \"nonimmediate_operand\" \"fm,0\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(match_operator:SF 3 \"binary_387_op\"\n \t  [(float:SF (match_operand:SI 1 \"general_operand\" \"rm\"))\n \t   (match_operand:SF 2 \"general_operand\" \"0\")]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(match_operator:SF 3 \"binary_387_op\"\n \t  [(match_operand:SF 1 \"general_operand\" \"0\")\n \t   (float:SF (match_operand:SI 2 \"general_operand\" \"rm\"))]))]\n   \"TARGET_80387\"\n-  \"* return (char *) output_387_binary_op (insn, operands);\")\n+  \"* return output_387_binary_op (insn, operands);\")\n \f\n (define_expand \"strlensi\"\n   [(parallel [(set (match_dup 4)"}]}