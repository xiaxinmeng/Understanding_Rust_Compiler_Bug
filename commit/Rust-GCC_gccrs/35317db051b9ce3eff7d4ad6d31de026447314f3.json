{"sha": "35317db051b9ce3eff7d4ad6d31de026447314f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzMTdkYjA1MWI5Y2UzZWZmN2Q0YWQ2ZDMxZGUwMjY0NDczMTRmMw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-12-15T17:10:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-12-15T17:10:26Z"}, "message": "c++: Fix return type deduction during satisfaction\n\nDuring satisfaction that's entered through the three-parameter version\nof satisfy_declaration_constraints, current_function_decl gets set to\nthe dependent DECL_TEMPLATE_RESULT for sake of access checking.  This\nmakes the predicate in_template_function return true during satisfaction\nfrom this entrypoint, which in turn makes calls to mark_used exit early\nbefore it does its full processing.  This leads to us accepting the\ninvalid testcase below due to mark_used never attempting to deduce the\nreturn type of A::foo() and detecting failure thereof.\n\nIt seems wrong for in_template_function to be true during instantiation\nor during satisfaction, so this patch makes in_template_function inspect\nthe less volatile cfun->decl instead of current_function_decl.\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (in_template_function): Inspect cfun->decl instead of\n\tcurrent_function_decl.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-requires23.C: New test.", "tree": {"sha": "60dd6e0c48a0a5dca0beb342108ce25762841bce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60dd6e0c48a0a5dca0beb342108ce25762841bce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35317db051b9ce3eff7d4ad6d31de026447314f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35317db051b9ce3eff7d4ad6d31de026447314f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35317db051b9ce3eff7d4ad6d31de026447314f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35317db051b9ce3eff7d4ad6d31de026447314f3/comments", "author": null, "committer": null, "parents": [{"sha": "30c41abc41b1b415ebb42444ced6087c79b70f3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c41abc41b1b415ebb42444ced6087c79b70f3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c41abc41b1b415ebb42444ced6087c79b70f3a"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "5100954dfdec7e16665b3555959e3a5d94511aae", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35317db051b9ce3eff7d4ad6d31de026447314f3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35317db051b9ce3eff7d4ad6d31de026447314f3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=35317db051b9ce3eff7d4ad6d31de026447314f3", "patch": "@@ -10805,14 +10805,16 @@ uses_template_parms (tree t)\n   return dependent_p;\n }\n \n-/* Returns true iff current_function_decl is an incompletely instantiated\n+/* Returns true iff we're processing an incompletely instantiated function\n    template.  Useful instead of processing_template_decl because the latter\n    is set to 0 during instantiate_non_dependent_expr.  */\n \n bool\n in_template_function (void)\n {\n-  tree fn = current_function_decl;\n+  /* Inspect the less volatile cfun->decl instead of current_function_decl;\n+     the latter might get set for e.g. access checking during satisfaction.  */\n+  tree fn = cfun ? cfun->decl : NULL_TREE;\n   bool ret;\n   ++processing_template_decl;\n   ret = (fn && DECL_LANG_SPECIFIC (fn)"}, {"sha": "e109beaac4f730ed6389f367f1e0bd2d2c2a22a4", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires23.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35317db051b9ce3eff7d4ad6d31de026447314f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35317db051b9ce3eff7d4ad6d31de026447314f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires23.C?ref=35317db051b9ce3eff7d4ad6d31de026447314f3", "patch": "@@ -0,0 +1,9 @@\n+// { dg-do compile { target c++20 } }\n+\n+// Verify f<A>'s associated constraints evaluate to false due\n+// to return type deduction failure for A::foo().\n+\n+template <class T> concept fooable = requires { T::foo(0); };\n+template <fooable T> int f ();\n+struct A { static auto *foo(auto); };\n+int a = f<A>(); // { dg-error \"no match\" }"}]}