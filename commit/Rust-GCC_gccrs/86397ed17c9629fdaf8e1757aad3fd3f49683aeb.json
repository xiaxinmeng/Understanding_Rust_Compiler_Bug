{"sha": "86397ed17c9629fdaf8e1757aad3fd3f49683aeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzOTdlZDE3Yzk2MjlmZGFmOGUxNzU3YWFkM2ZkM2Y0OTY4M2FlYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-11-01T17:52:05Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-11-01T17:52:05Z"}, "message": "printers.py (StdExpAnyPrinter.__init__): Strip typename versioned namespace before the substitution.\n\n2017-11-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* python/libstdcxx/v6/printers.py (StdExpAnyPrinter.__init__): Strip\n\ttypename versioned namespace before the substitution.\n\t(StdExpOptionalPrinter.__init__): Likewise.\n\t(StdVariantPrinter.__init__): Likewise.\n\t(Printer.add_version): Inject versioned namespace after std or\n\t__gnu_cxx.\n\t(build_libstdcxx_dictionary): Adapt add_version usages, always pass\n\tnamespace first and symbol second.\n\nFrom-SVN: r254320", "tree": {"sha": "575b27dce6c3b5a648f605dbe37de263020bd2e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/575b27dce6c3b5a648f605dbe37de263020bd2e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86397ed17c9629fdaf8e1757aad3fd3f49683aeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86397ed17c9629fdaf8e1757aad3fd3f49683aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86397ed17c9629fdaf8e1757aad3fd3f49683aeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86397ed17c9629fdaf8e1757aad3fd3f49683aeb/comments", "author": null, "committer": null, "parents": [{"sha": "50e248f0c8dd85a0e1778050d998f4010d87ed46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e248f0c8dd85a0e1778050d998f4010d87ed46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e248f0c8dd85a0e1778050d998f4010d87ed46"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "3ca18b2f4019c50fc80e643829e1adc8a407b958", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86397ed17c9629fdaf8e1757aad3fd3f49683aeb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86397ed17c9629fdaf8e1757aad3fd3f49683aeb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=86397ed17c9629fdaf8e1757aad3fd3f49683aeb", "patch": "@@ -1,3 +1,14 @@\n+2017-11-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* python/libstdcxx/v6/printers.py (StdExpAnyPrinter.__init__): Strip\n+\ttypename versioned namespace before the substitution.\n+\t(StdExpOptionalPrinter.__init__): Likewise.\n+\t(StdVariantPrinter.__init__): Likewise.\n+\t(Printer.add_version): Inject versioned namespace after std or\n+\t__gnu_cxx.\n+\t(build_libstdcxx_dictionary): Adapt add_version usages, always pass\n+\tnamespace first and symbol second.\n+\n 2017-11-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/82777"}, {"sha": "a0f5ede682cd574dc5aaa2a5e969f417b3f17332", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86397ed17c9629fdaf8e1757aad3fd3f49683aeb/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86397ed17c9629fdaf8e1757aad3fd3f49683aeb/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=86397ed17c9629fdaf8e1757aad3fd3f49683aeb", "patch": "@@ -973,8 +973,8 @@ class StdExpAnyPrinter(SingleObjContainerPrinter):\n     \"Print a std::any or std::experimental::any\"\n \n     def __init__ (self, typename, val):\n-        self.typename = re.sub('^std::experimental::fundamentals_v\\d::', 'std::experimental::', typename, 1)\n-        self.typename = strip_versioned_namespace(self.typename)\n+        self.typename = strip_versioned_namespace(typename)\n+        self.typename = re.sub('^std::experimental::fundamentals_v\\d::', 'std::experimental::', self.typename, 1)\n         self.val = val\n         self.contained_type = None\n         contained_value = None\n@@ -1021,8 +1021,8 @@ class StdExpOptionalPrinter(SingleObjContainerPrinter):\n \n     def __init__ (self, typename, val):\n         valtype = self._recognize (val.type.template_argument(0))\n-        self.typename = re.sub('^std::(experimental::|)(fundamentals_v\\d::|)(.*)', r'std::\\1\\3<%s>' % valtype, typename, 1)\n-        self.typename = strip_versioned_namespace(self.typename)\n+        self.typename = strip_versioned_namespace(typename)\n+        self.typename = re.sub('^std::(experimental::|)(fundamentals_v\\d::|)(.*)', r'std::\\1\\3<%s>' % valtype, self.typename, 1)\n         if not self.typename.startswith('std::experimental'):\n             val = val['_M_payload']\n         self.val = val\n@@ -1043,8 +1043,8 @@ class StdVariantPrinter(SingleObjContainerPrinter):\n \n     def __init__(self, typename, val):\n         alternatives = self._template_args(val)\n-        self.typename = \"%s<%s>\" % (typename, ', '.join([self._recognize(alt) for alt in alternatives]))\n-        self.typename = strip_versioned_namespace(self.typename)\n+        self.typename = strip_versioned_namespace(typename)\n+        self.typename = \"%s<%s>\" % (self.typename, ', '.join([self._recognize(alt) for alt in alternatives]))\n         self.index = val['_M_index']\n         if self.index >= len(alternatives):\n             self.contained_type = None\n@@ -1227,7 +1227,8 @@ def add(self, name, function):\n     def add_version(self, base, name, function):\n         self.add(base + name, function)\n         if _versioned_namespace:\n-            self.add(base + _versioned_namespace + name, function)\n+            vbase = re.sub('^(std|__gnu_cxx)::', r'\\g<0>%s' % _versioned_namespace, base)\n+            self.add(vbase + name, function)\n \n     # Add a name using _GLIBCXX_BEGIN_NAMESPACE_CONTAINER.\n     def add_container(self, base, name, function):\n@@ -1507,7 +1508,7 @@ def build_libstdcxx_dictionary ():\n     # In order from:\n     # http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/a01847.html\n     libstdcxx_printer.add_version('std::', 'basic_string', StdStringPrinter)\n-    libstdcxx_printer.add_version('std::', '__cxx11::basic_string', StdStringPrinter)\n+    libstdcxx_printer.add_version('std::__cxx11::', 'basic_string', StdStringPrinter)\n     libstdcxx_printer.add_container('std::', 'bitset', StdBitsetPrinter)\n     libstdcxx_printer.add_container('std::', 'deque', StdDequePrinter)\n     libstdcxx_printer.add_container('std::', 'list', StdListPrinter)\n@@ -1555,15 +1556,15 @@ def build_libstdcxx_dictionary ():\n     libstdcxx_printer.add_container('std::', 'forward_list',\n                                     StdForwardListPrinter)\n \n-    libstdcxx_printer.add_version('std::', 'tr1::shared_ptr', SharedPointerPrinter)\n-    libstdcxx_printer.add_version('std::', 'tr1::weak_ptr', SharedPointerPrinter)\n-    libstdcxx_printer.add_version('std::', 'tr1::unordered_map',\n+    libstdcxx_printer.add_version('std::tr1::', 'shared_ptr', SharedPointerPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'weak_ptr', SharedPointerPrinter)\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_map',\n                                   Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add_version('std::', 'tr1::unordered_set',\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_set',\n                                   Tr1UnorderedSetPrinter)\n-    libstdcxx_printer.add_version('std::', 'tr1::unordered_multimap',\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_multimap',\n                                   Tr1UnorderedMapPrinter)\n-    libstdcxx_printer.add_version('std::', 'tr1::unordered_multiset',\n+    libstdcxx_printer.add_version('std::tr1::', 'unordered_multiset',\n                                   Tr1UnorderedSetPrinter)\n \n     # These are the C++11 printer registrations for -D_GLIBCXX_DEBUG cases."}]}