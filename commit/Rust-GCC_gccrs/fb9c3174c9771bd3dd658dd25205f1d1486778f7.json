{"sha": "fb9c3174c9771bd3dd658dd25205f1d1486778f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI5YzMxNzRjOTc3MWJkM2RkNjU4ZGQyNTIwNWYxZDE0ODY3NzhmNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-05-27T18:39:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-05-27T18:39:46Z"}, "message": "revert: re PR libstdc++/42832 (Revisit std::function for aliasing issues and efficiency)\n\n\tRevert:\n\tPR libstdc++/42832\n\t* include/std/functional (function<>::swap): Perform bytewise\n\tswap of _M_functor.\n\t* include/tr1/functional (function<>::swap): Likewise.\n\nFrom-SVN: r159940", "tree": {"sha": "1dd49c4487010ff16895cc0f7efb019724d6698a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dd49c4487010ff16895cc0f7efb019724d6698a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb9c3174c9771bd3dd658dd25205f1d1486778f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9c3174c9771bd3dd658dd25205f1d1486778f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb9c3174c9771bd3dd658dd25205f1d1486778f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb9c3174c9771bd3dd658dd25205f1d1486778f7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ab4e49cf07eb5a88ee22018db6b4be5715dc4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab4e49cf07eb5a88ee22018db6b4be5715dc4f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab4e49cf07eb5a88ee22018db6b4be5715dc4f3"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "b6a0b1e970790c8b9da4c18e928851546af20c10", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9c3174c9771bd3dd658dd25205f1d1486778f7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9c3174c9771bd3dd658dd25205f1d1486778f7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fb9c3174c9771bd3dd658dd25205f1d1486778f7", "patch": "@@ -1,3 +1,11 @@\n+2010-05-27  Jason Merrill  <jason@redhat.com>\n+\n+\tRevert:\n+\tPR libstdc++/42832\n+\t* include/std/functional (function<>::swap): Perform bytewise\n+\tswap of _M_functor.\n+\t* include/tr1/functional (function<>::swap): Likewise.\n+\n 2010-05-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/40497"}, {"sha": "b6cc6d5e0720134b97b83bbb2e2c1b828cfb9c67", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9c3174c9771bd3dd658dd25205f1d1486778f7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9c3174c9771bd3dd658dd25205f1d1486778f7/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=fb9c3174c9771bd3dd658dd25205f1d1486778f7", "patch": "@@ -1948,16 +1948,9 @@ namespace std\n        */\n       void swap(function& __x)\n       {\n-\t/* We cannot perform direct assignments of the _M_functor\n-\t   parts as they are of type _Any_data and have a different\n-\t   dynamic type.  Doing so would violate type-based aliasing\n-\t   rules and lead to spurious miscompilations.\n-\t   Instead perform a bytewise exchange of the memory of\n-\t   both POD objects.\n-\t   ???  A wordwise exchange honoring alignment of _M_functor\n-\t   would be more efficient.  See PR42845.  */\n-\tfor (unsigned i = 0; i < sizeof (_M_functor._M_pod_data); ++i)\n-\t  std::swap (_M_functor._M_pod_data[i], __x._M_functor._M_pod_data[i]);\n+\t_Any_data __old_functor = _M_functor;\n+\t_M_functor = __x._M_functor;\n+\t__x._M_functor = __old_functor;\n \t_Manager_type __old_manager = _M_manager;\n \t_M_manager = __x._M_manager;\n \t__x._M_manager = __old_manager;"}, {"sha": "3340de6fffc252c015ebbb135f4f4ca00b16c769", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb9c3174c9771bd3dd658dd25205f1d1486778f7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb9c3174c9771bd3dd658dd25205f1d1486778f7/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=fb9c3174c9771bd3dd658dd25205f1d1486778f7", "patch": "@@ -1907,16 +1907,9 @@ namespace tr1\n        */\n       void swap(function& __x)\n       {\n-        /* We cannot perform direct assignments of the _M_functor\n-\t   parts as they are of type _Any_data and have a different\n-\t   dynamic type.  Doing so would violate type-based aliasing\n-\t   rules and lead to spurious miscompilations.\n-\t   Instead perform a bytewise exchange of the memory of\n-\t   both POD objects.\n-\t   ???  A wordwise exchange honoring alignment of _M_functor\n-\t   would be more efficient.  See PR42845.  */\n-\tfor (unsigned i = 0; i < sizeof (_M_functor._M_pod_data); ++i)\n-\t  std::swap (_M_functor._M_pod_data[i], __x._M_functor._M_pod_data[i]);\n+\t_Any_data __old_functor = _M_functor;\n+\t_M_functor = __x._M_functor;\n+\t__x._M_functor = __old_functor;\n \t_Manager_type __old_manager = _M_manager;\n \t_M_manager = __x._M_manager;\n \t__x._M_manager = __old_manager;"}]}