{"sha": "efcc70370b9319ec419e220cece0e8c82642c298", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjYzcwMzcwYjkzMTllYzQxOWUyMjBjZWNlMGU4YzgyNjQyYzI5OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-11-19T22:52:40Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-11-19T22:52:40Z"}, "message": "i386.md (length_immediate): Do not refer to insn address.\n\n\t* i386.md (length_immediate): Do not refer to insn address.\n\t(jcc*, jmp patterns):  Compute length explicitly.\n\nFrom-SVN: r59279", "tree": {"sha": "3b90df3d843a74e136e75315026cbfe3646fa6df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b90df3d843a74e136e75315026cbfe3646fa6df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efcc70370b9319ec419e220cece0e8c82642c298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc70370b9319ec419e220cece0e8c82642c298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcc70370b9319ec419e220cece0e8c82642c298", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcc70370b9319ec419e220cece0e8c82642c298/comments", "author": null, "committer": null, "parents": [{"sha": "da98b11a83c2d996b984bdb19d50d24b853ae120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da98b11a83c2d996b984bdb19d50d24b853ae120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da98b11a83c2d996b984bdb19d50d24b853ae120"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "3fa0f79a28e6d13442c2fa028ee85c2b67cc58bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc70370b9319ec419e220cece0e8c82642c298/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc70370b9319ec419e220cece0e8c82642c298/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efcc70370b9319ec419e220cece0e8c82642c298", "patch": "@@ -1,4 +1,9 @@\n-2002-11-19 \ufffdEric Botcazou \ufffd<ebotcazou@libertysurf.fr>\n+Tue Nov 19 23:50:56 CET 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (length_immediate): Do not refer to insn address.\n+\t(jcc*, jmp patterns):  Compute length explicitly.\n+\n+2002-11-19 Eric Botcazou <ebotcazou@libertysurf.fr>\n \n \tPR c/8588\n \t* optabs.c (expand_binop): Convert CONST_INTs in shift"}, {"sha": "befbfe49569700d34cac46ec35157f5098ae4ef7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcc70370b9319ec419e220cece0e8c82642c298/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcc70370b9319ec419e220cece0e8c82642c298/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=efcc70370b9319ec419e220cece0e8c82642c298", "patch": "@@ -187,13 +187,10 @@\n \t   (if_then_else (match_operand 1 \"constant_call_address_operand\" \"\")\n \t     (const_int 4)\n \t     (const_int 0))\n+\t ;; We don't know the size before shorten_branches.  Expect\n+\t ;; the instruction to fit for better scheduling.\n \t (eq_attr \"type\" \"ibr\")\n-\t   (if_then_else (and (ge (minus (match_dup 0) (pc))\n-\t\t\t\t  (const_int -128))\n-\t\t\t      (lt (minus (match_dup 0) (pc))\n-\t\t\t\t  (const_int 124)))\n-\t     (const_int 1)\n-\t     (const_int 4))\n+\t   (const_int 1)\n \t ]\n \t (symbol_ref \"/* Update immediate_length and other attributes! */\n \t\t      abort(),1\")))\n@@ -12840,13 +12837,13 @@\n   \"%+j%C1\\t%l0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"modrm\" \"0\")\n-   (set (attr \"prefix_0f\")\n+   (set (attr \"length\")\n \t   (if_then_else (and (ge (minus (match_dup 0) (pc))\n \t\t\t\t  (const_int -128))\n \t\t\t      (lt (minus (match_dup 0) (pc))\n \t\t\t\t  (const_int 124)))\n-\t     (const_int 0)\n-\t     (const_int 1)))])\n+\t     (const_int 2)\n+\t     (const_int 6)))])\n \n (define_insn \"*jcc_2\"\n   [(set (pc)\n@@ -12858,13 +12855,13 @@\n   \"%+j%c1\\t%l0\"\n   [(set_attr \"type\" \"ibr\")\n    (set_attr \"modrm\" \"0\")\n-   (set (attr \"prefix_0f\")\n+   (set (attr \"length\")\n \t   (if_then_else (and (ge (minus (match_dup 0) (pc))\n \t\t\t\t  (const_int -128))\n \t\t\t      (lt (minus (match_dup 0) (pc))\n \t\t\t\t  (const_int 124)))\n-\t     (const_int 0)\n-\t     (const_int 1)))])\n+\t     (const_int 2)\n+\t     (const_int 6)))])\n \n ;; In general it is not safe to assume too much about CCmode registers,\n ;; so simplify-rtx stops when it sees a second one.  Under certain \n@@ -13125,6 +13122,13 @@\n   \"\"\n   \"jmp\\t%l0\"\n   [(set_attr \"type\" \"ibr\")\n+   (set (attr \"length\")\n+\t   (if_then_else (and (ge (minus (match_dup 0) (pc))\n+\t\t\t\t  (const_int -128))\n+\t\t\t      (lt (minus (match_dup 0) (pc))\n+\t\t\t\t  (const_int 124)))\n+\t     (const_int 2)\n+\t     (const_int 5)))\n    (set_attr \"modrm\" \"0\")])\n \n (define_expand \"indirect_jump\"\n@@ -13251,14 +13255,9 @@\n \t\t\t            (const_int 124))))\n \t\t      (const_int 2)\n \t\t      (const_int 16)))\n-   (set (attr \"type\")\n-\t(if_then_else (and (eq_attr \"alternative\" \"0\")\n-\t\t\t   (and (ge (minus (match_dup 0) (pc))\n-\t\t\t            (const_int -128))\n-\t\t\t        (lt (minus (match_dup 0) (pc))\n-\t\t\t            (const_int 124))))\n-\t\t      (const_string \"ibr\")\n-\t\t      (const_string \"multi\")))])\n+   ;; We don't know the type before shorten branches.  Optimistically expect\n+   ;; the loop instruction to match.\n+   (set (attr \"type\") (const_string \"ibr\"))])\n \n (define_split\n   [(set (pc)"}]}