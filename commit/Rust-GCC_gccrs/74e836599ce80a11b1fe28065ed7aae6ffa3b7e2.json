{"sha": "74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "node_id": "C_kwDOANBUbNoAKDc0ZTgzNjU5OWNlODBhMTFiMWZlMjgwNjVlZDdhYWU2ZmZhM2I3ZTI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-06T12:56:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T12:56:12Z"}, "message": "Merge #1215\n\n1215: Report `pub restricted` violations r=CohenArthur a=CohenArthur\n\nNeeds #1202. The only commit worth reviewing in the meantime is [c229c7f](https://github.com/Rust-GCC/gccrs/pull/1215/commits/c229c7f891f02c3ecd1c7b743b35edb3fc2c5539)\r\n\r\nThis visitor allows us to report invalid restrictions in `pub(restricted)` visibilities. I've added documentation and an example to the visitor to explain the expected behavior.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "0a2def840dc71712098ec80729359fc652619453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a2def840dc71712098ec80729359fc652619453"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidRrsCRBK7hj4Ov3rIwAAW8wIAENIru33GHjmuE1ufRiYOh9b\nGYQ6QsRn/oHgDW+dwTqjp9Hdad3ZpXoQ0n6POgo2tr6O4PFjPQe0Yg0AX4iVFWye\ntZuxJVTUuSSpGFnRImn0cSwVWS2uH/0Yb4FLLf8J2TJZAc9J6oKWQf07Qv1M6BSR\nDw9jKWo1IvOUBfo3Sb2TSQdljBF9o/zclNPlWfVVbrLNUA7j8It172BWk0pJ8sxf\nFbts1jsomIOX+aHfIleVY6PTMgv5yUapPi6vNefX4On6vwNWp6m+BOLxUJLEKMOD\nZmUvyEfSOzTctPOcLk12qJYNlD6huMeHm9d3+zJrjtOs8MKwOkgSK/40Kfzd8AM=\n=vOIz\n-----END PGP SIGNATURE-----\n", "payload": "tree 0a2def840dc71712098ec80729359fc652619453\nparent 9ea940e4dcabbf99fbb44c125a0af7cf82e48146\nparent 2df8cf57e62478afb97337fdd4db856158097e1d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1651841772 +0000\ncommitter GitHub <noreply@github.com> 1651841772 +0000\n\nMerge #1215\n\n1215: Report `pub restricted` violations r=CohenArthur a=CohenArthur\n\nNeeds #1202. The only commit worth reviewing in the meantime is [c229c7f](https://github.com/Rust-GCC/gccrs/pull/1215/commits/c229c7f891f02c3ecd1c7b743b35edb3fc2c5539)\r\n\r\nThis visitor allows us to report invalid restrictions in `pub(restricted)` visibilities. I've added documentation and an example to the visitor to explain the expected behavior.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea940e4dcabbf99fbb44c125a0af7cf82e48146", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea940e4dcabbf99fbb44c125a0af7cf82e48146", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea940e4dcabbf99fbb44c125a0af7cf82e48146"}, {"sha": "2df8cf57e62478afb97337fdd4db856158097e1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df8cf57e62478afb97337fdd4db856158097e1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df8cf57e62478afb97337fdd4db856158097e1d"}], "stats": {"total": 347, "additions": 325, "deletions": 22}, "files": [{"sha": "aa125a13af59fac0d45b630c9bddf4e186b83cd9", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -99,6 +99,7 @@ GRS_OBJS = \\\n     rust/rust-privacy-ctx.o \\\n     rust/rust-reachability.o \\\n     rust/rust-visibility-resolver.o \\\n+    rust/rust-pub-restricted-visitor.o \\\n     rust/rust-tyty.o \\\n     rust/rust-tyctx.o \\\n     rust/rust-tyty-bounds.o \\"}, {"sha": "b328a7f0839907926eb73a128f81bc110300146a", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -123,6 +123,8 @@ Visibility::as_string () const\n     case PRIVATE:\n       return std::string (\"private\");\n     case PUBLIC:\n+      return std::string (\"pub\");\n+    case RESTRICTED:\n       return std::string (\"pub(in \") + path.get_mappings ().as_string ()\n \t     + std::string (\")\");\n     default:"}, {"sha": "b2e33c0b0597b31b106e04f4f90ef84162021504", "filename": "gcc/rust/privacy/rust-privacy-check.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-privacy-check.cc?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -22,23 +22,25 @@\n #include \"rust-hir-map.h\"\n #include \"rust-name-resolver.h\"\n #include \"rust-visibility-resolver.h\"\n+#include \"rust-pub-restricted-visitor.h\"\n \n extern bool\n saw_errors (void);\n \n namespace Rust {\n namespace Privacy {\n+\n void\n Resolver::resolve (HIR::Crate &crate)\n {\n   PrivacyContext ctx;\n   auto mappings = Analysis::Mappings::get ();\n   auto resolver = Rust::Resolver::Resolver::get ();\n+  auto ty_ctx = ::Rust::Resolver::TypeCheckContext::get ();\n \n-  auto visibility_resolver = VisibilityResolver (*mappings, *resolver);\n-  visibility_resolver.go (crate);\n+  VisibilityResolver (*mappings, *resolver).go (crate);\n+  PubRestrictedVisitor (*mappings).go (crate);\n \n-  auto ty_ctx = ::Rust::Resolver::TypeCheckContext::get ();\n   auto visitor = ReachabilityVisitor (ctx, *ty_ctx);\n \n   const auto &items = crate.items;"}, {"sha": "ca50fe31e6c53f3bf7a5d96e55efbc3b342ccd5d", "filename": "gcc/rust/privacy/rust-pub-restricted-visitor.cc", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.cc?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -0,0 +1,178 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-pub-restricted-visitor.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-item.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+bool\n+PubRestrictedVisitor::is_restriction_valid (DefId item_id,\n+\t\t\t\t\t    const Location &locus)\n+{\n+  ModuleVisibility visibility;\n+\n+  // If there is no visibility in the mappings, then the item is private and\n+  // does not contain any restriction\n+  if (!mappings.lookup_visibility (item_id, &visibility))\n+    return true;\n+\n+  for (auto mod = module_stack.rbegin (); mod != module_stack.rend (); mod++)\n+    if (*mod == visibility.get_module_id ())\n+      return true;\n+\n+  rust_error_at (locus, \"restricted path is not an ancestor of the \"\n+\t\t\t\"current module\");\n+  return false;\n+}\n+\n+PubRestrictedVisitor::PubRestrictedVisitor (Analysis::Mappings &mappings)\n+  : mappings (mappings)\n+{}\n+\n+void\n+PubRestrictedVisitor::go (HIR::Crate &crate)\n+{\n+  // The `crate` module will always be present\n+  module_stack.emplace_back (crate.get_mappings ().get_defid ());\n+\n+  // FIXME: When do we insert `super`? `self`?\n+  // We need wrapper function for these\n+\n+  for (auto &item : crate.items)\n+    {\n+      if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (*this);\n+\t}\n+    }\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::Module &mod)\n+{\n+  // FIXME: We need to update `super` and `self` here\n+  module_stack.push_back (mod.get_mappings ().get_defid ());\n+\n+  is_restriction_valid (mod.get_mappings ().get_defid (), mod.get_locus ());\n+\n+  for (auto &item : mod.get_items ())\n+    {\n+      if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n+\t{\n+\t  auto vis_item = static_cast<HIR::VisItem *> (item.get ());\n+\t  vis_item->accept_vis (*this);\n+\t}\n+    }\n+\n+  module_stack.pop_back ();\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::ExternCrate &crate)\n+{\n+  is_restriction_valid (crate.get_mappings ().get_defid (), crate.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::UseDeclaration &use_decl)\n+{\n+  is_restriction_valid (use_decl.get_mappings ().get_defid (),\n+\t\t\tuse_decl.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::Function &func)\n+{\n+  is_restriction_valid (func.get_mappings ().get_defid (), func.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::TypeAlias &type_alias)\n+{\n+  is_restriction_valid (type_alias.get_mappings ().get_defid (),\n+\t\t\ttype_alias.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::StructStruct &struct_item)\n+{\n+  is_restriction_valid (struct_item.get_mappings ().get_defid (),\n+\t\t\tstruct_item.get_locus ());\n+  // FIXME: Check fields here as well\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::TupleStruct &tuple_struct)\n+{\n+  is_restriction_valid (tuple_struct.get_mappings ().get_defid (),\n+\t\t\ttuple_struct.get_locus ());\n+  // FIXME: Check fields here as well\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::Enum &enum_item)\n+{\n+  is_restriction_valid (enum_item.get_mappings ().get_defid (),\n+\t\t\tenum_item.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::Union &union_item)\n+{\n+  is_restriction_valid (union_item.get_mappings ().get_defid (),\n+\t\t\tunion_item.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::ConstantItem &const_item)\n+{\n+  is_restriction_valid (const_item.get_mappings ().get_defid (),\n+\t\t\tconst_item.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::StaticItem &static_item)\n+{\n+  is_restriction_valid (static_item.get_mappings ().get_defid (),\n+\t\t\tstatic_item.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::Trait &trait)\n+{\n+  is_restriction_valid (trait.get_mappings ().get_defid (), trait.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::ImplBlock &impl)\n+{\n+  is_restriction_valid (impl.get_mappings ().get_defid (), impl.get_locus ());\n+}\n+\n+void\n+PubRestrictedVisitor::visit (HIR::ExternBlock &block)\n+{\n+  is_restriction_valid (block.get_mappings ().get_defid (), block.get_locus ());\n+}\n+\n+} // namespace Privacy\n+} // namespace Rust"}, {"sha": "dc725e1f7ee0e0f1c28784277be187d31fa21d2d", "filename": "gcc/rust/privacy/rust-pub-restricted-visitor.h", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-pub-restricted-visitor.h?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -0,0 +1,120 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_PUB_RESTRICTED_VISITOR_H\n+#define RUST_PUB_RESTRICTED_VISITOR_H\n+\n+#include \"rust-hir-visitor.h\"\n+#include \"rust-hir.h\"\n+#include \"rust-hir-expr.h\"\n+#include \"rust-hir-stmt.h\"\n+#include \"rust-hir-item.h\"\n+#include \"rust-hir-map.h\"\n+\n+namespace Rust {\n+namespace Privacy {\n+\n+/**\n+ * This visitor takes care of reporting `pub(restricted)` violations:\n+ * A `pub(restricted)` violation is defined as the usage of a path restriction\n+ * on an item which does not restrict the item's visibility to one of its parent\n+ * modules. What this means is that an user is allowed to specify that an item\n+ * should be public for any of its parent modules, going all the way to the\n+ * `crate` module, but not for any of its children module.\n+ *\n+ * ```rust\n+ * mod a {\n+ * \tmod b {\n+ * \t\tpub (in a) struct A0;\n+ *\n+ * \t\tmod c {\n+ * \t\t\tmod d {\n+ * \t\t\t\tpub (in a) struct A1;\n+ * \t\t\t}\n+ * \t\t}\n+ *\n+ * \t\tpub (in c::d) struct A2;\n+ * \t}\n+ * }\n+ * ```\n+ *\n+ * The above `A0`'s visibility is valid: It is restricted to a path, `a`,\n+ * which is a parent of the current module, `b`.\n+ * Likewise, `A1` is also defined properly: `a` is a parent of `d`, albeit\n+ * a great-great-great-grandparant of it.\n+ *\n+ * `A2` visibility, however, is invalid: Where the struct is defined, the\n+ * current module is `b`. `c::d` (which refers to the `d` module) is a child of\n+ * `b`, and not one of its ancestors.\n+ *\n+ * Note that these resolution rules are also the ones of the 2015 rust edition:\n+ * All the `pub(restricted)` visibilities above would be invalid in the 2018\n+ * edition, as the paths there must be absolute and not relative (`c::d` would\n+ * become `crate::a::b::c::d` etc). Nonetheless, the logic stays the same.\n+ */\n+class PubRestrictedVisitor : public HIR::HIRVisItemVisitor\n+{\n+public:\n+  PubRestrictedVisitor (Analysis::Mappings &mappings);\n+\n+  void go (HIR::Crate &crate);\n+\n+  /**\n+   * Check if an item's restricted visibility (`pub (crate)`, `pub (self)`,\n+   * `pub(super)`, `pub (in <path>)`) is valid in the current context.\n+   * `pub restricted` visibilities are only allowed when the restriction path\n+   * is a parent module of the item being visited.\n+   *\n+   * In case of error, this function will emit the errors and return.\n+   *\n+   * @param item_id DefId of the item to check the restriction of\n+   * @param locus Location of the item being checked\n+   *\n+   * @return true if the visibility restriction is valid, false otherwise.\n+   */\n+  bool is_restriction_valid (DefId item_id, const Location &locus);\n+\n+  virtual void visit (HIR::Module &mod);\n+  virtual void visit (HIR::ExternCrate &crate);\n+  virtual void visit (HIR::UseDeclaration &use_decl);\n+  virtual void visit (HIR::Function &func);\n+  virtual void visit (HIR::TypeAlias &type_alias);\n+  virtual void visit (HIR::StructStruct &struct_item);\n+  virtual void visit (HIR::TupleStruct &tuple_struct);\n+  virtual void visit (HIR::Enum &enum_item);\n+  virtual void visit (HIR::Union &union_item);\n+  virtual void visit (HIR::ConstantItem &const_item);\n+  virtual void visit (HIR::StaticItem &static_item);\n+  virtual void visit (HIR::Trait &trait);\n+  virtual void visit (HIR::ImplBlock &impl);\n+  virtual void visit (HIR::ExternBlock &block);\n+\n+private:\n+  /* Stack of ancestor modules visited by this visitor */\n+  std::vector<DefId> module_stack;\n+\n+  // FIXME: Do we have to handle `self` and `super` as part of the name\n+  // resolution pass?\n+\n+  Analysis::Mappings &mappings;\n+};\n+\n+} // namespace Privacy\n+} // namespace Rust\n+\n+#endif // !RUST_PUB_RESTRICTED_VISITOR_H"}, {"sha": "38d640340e8bce33c00bf6f4300d766f171a662e", "filename": "gcc/rust/privacy/rust-visibility-resolver.cc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.cc?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -32,7 +32,6 @@ VisibilityResolver::VisibilityResolver (Analysis::Mappings &mappings,\n void\n VisibilityResolver::go (HIR::Crate &crate)\n {\n-  module_stack.push_back (crate.get_mappings ().get_defid ());\n   mappings.insert_visibility (crate.get_mappings ().get_defid (),\n \t\t\t      ModuleVisibility::create_public ());\n \n@@ -104,12 +103,12 @@ VisibilityResolver::resolve_visibility (const HIR::Visibility &visibility,\n   switch (visibility.get_vis_type ())\n     {\n     case HIR::Visibility::PRIVATE:\n-      to_resolve = ModuleVisibility::create_restricted (peek_module ());\n       return true;\n     case HIR::Visibility::PUBLIC:\n       to_resolve = ModuleVisibility::create_public ();\n       return true;\n     case HIR::Visibility::RESTRICTED:\n+      // FIXME: We also need to handle 2015 vs 2018 edition conflicts\n       to_resolve = ModuleVisibility::create_public ();\n       return resolve_module_path (visibility.get_path (),\n \t\t\t\t  to_resolve.get_module_id ());\n@@ -129,21 +128,9 @@ VisibilityResolver::resolve_and_update (const HIR::VisItem *item)\n   mappings.insert_visibility (item->get_mappings ().get_defid (), module_vis);\n }\n \n-DefId\n-VisibilityResolver::peek_module ()\n-{\n-  // We're always inserting a top module - the crate\n-  // But we have to check otherwise `.back()` is UB\n-  rust_assert (!module_stack.empty ());\n-\n-  return module_stack.back ();\n-}\n-\n void\n VisibilityResolver::visit (HIR::Module &mod)\n {\n-  module_stack.push_back (mod.get_mappings ().get_defid ());\n-\n   for (auto &item : mod.get_items ())\n     {\n       if (item->get_hir_kind () == HIR::Node::VIS_ITEM)\n@@ -152,8 +139,6 @@ VisibilityResolver::visit (HIR::Module &mod)\n \t  vis_item->accept_vis (*this);\n \t}\n     }\n-\n-  module_stack.pop_back ();\n }\n \n void"}, {"sha": "c57d5182a78658479eca54e364f9a03f37175937", "filename": "gcc/rust/privacy/rust-visibility-resolver.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-visibility-resolver.h?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -92,9 +92,6 @@ class VisibilityResolver : public HIR::HIRVisItemVisitor\n   virtual void visit (HIR::ExternBlock &block);\n \n private:\n-  /* Stack of modules visited by this visitor */\n-  std::vector<DefId> module_stack;\n-\n   Analysis::Mappings &mappings;\n   Rust::Resolver::Resolver &resolver;\n };"}, {"sha": "8588f2775cacfd3b6dbf68902d2d7ad4cada4a58", "filename": "gcc/testsuite/rust/compile/pub_restricted_2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e836599ce80a11b1fe28065ed7aae6ffa3b7e2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fpub_restricted_2.rs?ref=74e836599ce80a11b1fe28065ed7aae6ffa3b7e2", "patch": "@@ -0,0 +1,18 @@\n+// { dg-additional-options \"-w\" }\n+\n+mod foo {\n+    mod bar {\n+        mod baz {\n+            pub(in baz) struct A0;\n+            pub(in bar::baz) struct A1;\n+            pub(in foo::bar::baz) struct A2;\n+\n+            mod sain {\n+                mod doux {}\n+            }\n+\n+            pub(in sain) struct A3; // { dg-error \"restricted path is not an ancestor of the current module\" }\n+            pub(in sain::doux) struct A4; // { dg-error \"restricted path is not an ancestor of the current module\" }\n+        }\n+    }\n+}"}]}