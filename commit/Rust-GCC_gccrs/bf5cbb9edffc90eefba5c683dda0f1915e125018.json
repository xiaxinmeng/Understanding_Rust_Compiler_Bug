{"sha": "bf5cbb9edffc90eefba5c683dda0f1915e125018", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY1Y2JiOWVkZmZjOTBlZWZiYTVjNjgzZGRhMGYxOTE1ZTEyNTAxOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-09T00:16:22Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-09T00:16:22Z"}, "message": "Daily bump.", "tree": {"sha": "3044e1737584d35b9ee82436efe2319128cdb70e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3044e1737584d35b9ee82436efe2319128cdb70e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf5cbb9edffc90eefba5c683dda0f1915e125018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5cbb9edffc90eefba5c683dda0f1915e125018", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf5cbb9edffc90eefba5c683dda0f1915e125018", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf5cbb9edffc90eefba5c683dda0f1915e125018/comments", "author": null, "committer": null, "parents": [{"sha": "0b874e0ffd5fab85d4b33059cb093322dfe7a3ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b874e0ffd5fab85d4b33059cb093322dfe7a3ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b874e0ffd5fab85d4b33059cb093322dfe7a3ba"}], "stats": {"total": 300, "additions": 299, "deletions": 1}, "files": [{"sha": "2a2b1a7d0f5d9435b35fdd8f732a5fb7c20d341d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf5cbb9edffc90eefba5c683dda0f1915e125018", "patch": "@@ -1,3 +1,172 @@\n+2021-01-08  Sergei Trofimovich  <siarheit@google.com>\n+\n+\t* ipa-modref.c (merge_call_side_effects): Fix\n+\tlinebreak split by reordering two print calls.\n+\n+2021-01-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/vector.md (*tf_to_fprx2_0): Rename from\n+\t\"*mov_tf_to_fprx2_0\" for consistency, fix constraint.\n+\t(*tf_to_fprx2_1): Rename from \"*mov_tf_to_fprx2_1\" for\n+\tconsistency, fix constraint.\n+\n+2021-01-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390-c.c (s390_def_or_undef_macro): Accept\n+\tcallables instead of mask values.\n+\t(struct target_flag_set_p): New predicate.\n+\t(s390_cpu_cpp_builtins_internal): Define or undefine\n+\t__LONG_DOUBLE_VX__ macro.\n+\n+2021-01-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98482\n+\t* config/i386/i386.c (x86_function_profiler): Use R10 and R11\n+\tto call mcount in large model with PIC for NO_PROFILE_COUNTERS\n+\ttargets.\n+\n+2021-01-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (pass_fre::execute): Reset the SCEV hash table.\n+\n+2021-01-08  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (scalar_stmts_to_slp_tree_map_t): Fix.\n+\t(vect_build_slp_tree): On cache hit release the matched\n+\tscalar stmts vector.\n+\t* tree-vect-stmts.c (vectorizable_store): Properly free\n+\tvec_oprnds before possibly gathering them again.\n+\n+2021-01-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98544\n+\t* tree-vect-slp.c (vect_optimize_slp): Always materialize\n+\tpermutes at a permute node.\n+\n+2021-01-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98482\n+\t* config/i386/i386.c (x86_function_profiler): Use R10 to call\n+\tmcount in large model.  Sorry for large model with PIC.\n+\n+2021-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98585\n+\t* config/i386/i386.opt (ix86_cmodel, ix86_incoming_stack_boundary_arg,\n+\tix86_pmode, ix86_preferred_stack_boundary_arg, ix86_regparm,\n+\tix86_veclibabi_type): Remove x_ prefix, use TargetVariable instead of\n+\tTargetSave and initialize for variables with enum types.\n+\t(mfentry, mstack-protector-guard-reg=, mstack-protector-guard-offset=,\n+\tmstack-protector-guard-symbol=): Add Save.\n+\t* config/i386/i386-options.c (ix86_function_specific_save,\n+\tix86_function_specific_restore): Don't save or restore x_ix86_cmodel,\n+\tx_ix86_incoming_stack_boundary_arg, x_ix86_pmode,\n+\tx_ix86_preferred_stack_boundary_arg, x_ix86_regparm,\n+\tx_ix86_veclibabi_type.\n+\n+2021-01-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*cnot<mode>): Extend from\n+\tSVE_FULL_I to SVE_I.\n+\t(*cond_cnot<mode>_2, *cond_cnot<mode>_any): Likewise.\n+\n+2021-01-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md (*cond_uxt<mode>_2): Extend from\n+\tSVE_FULL_I to SVE_I.\n+\t(*cond_uxt<mode>_any): Likewise.\n+\n+2021-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/iterators.md (Vwhalf): New iterator.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>adalp<mode>_3):\n+\tRename to...\n+\t(aarch64_<sur>adalp<mode>): ... This.  Make more\n+\tbuiltin-friendly.\n+\t(<sur>sadv16qi): Adjust callsite of the above.\n+\t* config/aarch64/aarch64-simd-builtins.def (sadalp, uadalp): New\n+\tbuiltins.\n+\t* config/aarch64/arm_neon.h (vpadal_s8): Reimplement using\n+\tbuiltins.\n+\t(vpadal_s16): Likewise.\n+\t(vpadal_u8): Likewise.\n+\t(vpadal_u16): Likewise.\n+\t(vpadalq_s8): Likewise.\n+\t(vpadalq_s16): Likewise.\n+\t(vpadalq_s32): Likewise.\n+\t(vpadalq_u8): Likewise.\n+\t(vpadalq_u16): Likewise.\n+\t(vpadalq_u32): Likewise.\n+\n+2021-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_<su>abd<mode>_3):\n+\tRename to...\n+\t(aarch64_<su>abd<mode>): ... This.\n+\t(<sur>sadv16qi): Adjust callsite of the above.\n+\t* config/aarch64/aarch64-simd-builtins.def (sabd, uabd): Define\n+\tbuiltins.\n+\t* config/aarch64/arm_neon.h (vabd_s8): Reimplement using\n+\tbuiltin.\n+\t(vabd_s16): Likewise.\n+\t(vabd_s32): Likewise.\n+\t(vabd_u8): Likewise.\n+\t(vabd_u16): Likewise.\n+\t(vabd_u32): Likewise.\n+\t(vabdq_s8): Likewise.\n+\t(vabdq_s16): Likewise.\n+\t(vabdq_s32): Likewise.\n+\t(vabdq_u8): Likewise.\n+\t(vabdq_u16): Likewise.\n+\t(vabdq_u32): Likewise.\n+\n+2021-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (saba, uaba): Define\n+\tbuiltins.\n+\t* config/aarch64/arm_neon.h (vaba_s8): Implement using builtin.\n+\t(vaba_s16): Likewise.\n+\t(vaba_s32): Likewise.\n+\t(vaba_u8): Likewise.\n+\t(vaba_u16): Likewise.\n+\t(vaba_u32): Likewise.\n+\t(vabaq_s8): Likewise.\n+\t(vabaq_s16): Likewise.\n+\t(vabaq_s32): Likewise.\n+\t(vabaq_u8): Likewise.\n+\t(vabaq_u16): Likewise.\n+\t(vabaq_u32): Likewise.\n+\n+2021-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aba<mode>_3): Rename to...\n+\t(aarch64_<su>aba<mode>): ... This.  Handle uaba as well.\n+\tChange RTL pattern to match.\n+\n+2021-01-08  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_current_subset_list): New.\n+\t* config/riscv/riscv-c.c (riscv-subset.h): New.\n+\t(INCLUDE_STRING): Define.\n+\t(riscv_cpu_cpp_builtins): Add new style architecture extension\n+\ttest macros.\n+\t* config/riscv/riscv-subset.h (riscv_subset_list::begin): New.\n+\t(riscv_subset_list::end): New.\n+\t(riscv_current_subset_list): New.\n+\n+2021-01-08  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (RISCV_DONT_CARE_VERSION):\n+\tMove to riscv-subset.h.\n+\t(struct riscv_subset_t): Ditto.\n+\t(class riscv_subset_list): Ditto.\n+\t* config/riscv/riscv-subset.h (RISCV_DONT_CARE_VERSION): Move\n+\tfrom riscv-common.c.\n+\t(struct riscv_subset_t): Ditto.\n+\t(class riscv_subset_list): Ditto.\n+\t* config/riscv/t-riscv ($(common_out_file)): Add file\n+\tdependency.\n+\n 2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/98567"}, {"sha": "75cdb7abf07ed95d907a1d810c208c921cbd3617", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bf5cbb9edffc90eefba5c683dda0f1915e125018", "patch": "@@ -1 +1 @@\n-20210108\n+20210109"}, {"sha": "53f053883f0f409149a07514c438a1d4193a3853", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bf5cbb9edffc90eefba5c683dda0f1915e125018", "patch": "@@ -1,3 +1,16 @@\n+2021-01-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98551\n+\t* constexpr.c (cxx_eval_call_expression): Check CLASS_TYPE_P\n+\tinstead of AGGREGATE_TYPE_P before calling replace_result_decl.\n+\n+2021-01-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98515\n+\t* semantics.c (check_accessibility_of_qualified_id): Punt if\n+\twe're checking access of a scoped non-static member inside a\n+\tclass template.\n+\n 2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/98329"}, {"sha": "82c6dca3119b6d00af4ea646f1845dc845d6dfa4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bf5cbb9edffc90eefba5c683dda0f1915e125018", "patch": "@@ -1,3 +1,17 @@\n+2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93794\n+\t* trans-expr.c (gfc_conv_component_ref): Remove the condition\n+\tthat deferred character length components only be allocatable.\n+\n+2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98458\n+\t* simplify.c (is_constant_array_expr): If an array constructor\n+\texpression has elements other than constants or structures, try\n+\tfixing the expression with gfc_reduce_init_expr. Also, if shape\n+\tis NULL, obtain the array size and set it.\n+\n 2021-01-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/93701"}, {"sha": "14b620272aa496b52f3907b17fd942cc5c3b0ab3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5cbb9edffc90eefba5c683dda0f1915e125018/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf5cbb9edffc90eefba5c683dda0f1915e125018", "patch": "@@ -1,3 +1,100 @@\n+2021-01-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98482\n+\t* gcc.target/i386/pr98482-1.c: Require lp64.\n+\t* gcc.target/i386/pr98482-2.c: Likewise.\n+\n+2021-01-08  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* gcc.target/s390/vector/long-double-vx-macro-off-on.c: New test.\n+\t* gcc.target/s390/vector/long-double-vx-macro-on-off.c: New test.\n+\n+2021-01-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98551\n+\t* g++.dg/cpp0x/constexpr-pmf2.C: New test.\n+\n+2021-01-08  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/98515\n+\t* g++.dg/template/access32.C: New test.\n+\t* g++.dg/template/access33.C: New test.\n+\n+2021-01-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98482\n+\t* gcc.target/i386/pr98482-2.c: Updated.\n+\n+2021-01-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98544\n+\t* gcc.dg/vect/bb-slp-pr98544.c: New testcase.\n+\n+2021-01-08  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/98482\n+\t* gcc.target/i386/pr98482-1.c: New test.\n+\t* gcc.target/i386/pr98482-1.c: Likewise.\n+\t* gcc.target/i386/pr98482-2.c: New file.\n+\n+2021-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/98585\n+\t* gcc.target/i386/pr98585.c: New test.\n+\n+2021-01-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cnot_2.c: New test.\n+\t* gcc.target/aarch64/sve/cond_cnot_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_4_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_cnot_6_run.c: Likewise.\n+\n+2021-01-08  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_uxt_5.c: New test.\n+\t* gcc.target/aarch64/sve/cond_uxt_5_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_6.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_6_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_7.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_7_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_8.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_8_run.c: Likewise.\n+\n+2021-01-08  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_aarch64_asm_sve2_ok): New.\n+\t* g++.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp: Use it.\n+\t* gcc.target/aarch64/sve2/acle/aarch64-sve2-acle-asm.exp: Likewise.\n+\n+2021-01-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/usaba_1.c: New test.\n+\n+2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/93794\n+\t* gfortran.dg/deferred_character_35.f90 : New test.\n+\n+2021-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/98458\n+\t* gfortran.dg/implied_do_3.f90 : New test.\n+\n+2021-01-08  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.dg/array-quals-1.c: Allow srodata.\n+\n+2021-01-08  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* gcc.target/riscv/predef-10.c: New.\n+\t* gcc.target/riscv/predef-11.c: New.\n+\t* gcc.target/riscv/predef-12.c: New.\n+\t* gcc.target/riscv/predef-13.c: New.\n+\n 2021-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/98329"}, {"sha": "f64fa695af356d1e89489d0fd8a727098d2c2fd4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf5cbb9edffc90eefba5c683dda0f1915e125018/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf5cbb9edffc90eefba5c683dda0f1915e125018/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf5cbb9edffc90eefba5c683dda0f1915e125018", "patch": "@@ -1,3 +1,8 @@\n+2021-01-08  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* testsuite/20_util/bind/ref_neg.cc: Tweak the\n+\tdg-prune-output regex for out-of-build-tree contexts.\n+\n 2021-01-07  Thomas Rodgers  <trodgers@redhat.com>\n \n \t* doc/doxygen/user.cfg.in: Add new header."}]}