{"sha": "74fa38297b22d826f53f0b1894a1847eca3503dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRmYTM4Mjk3YjIyZDgyNmY1M2YwYjE4OTRhMTg0N2VjYTM1MDNkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-11-07T00:50:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-11-07T00:50:19Z"}, "message": "Implement D1907R1 \"structural type\".\n\nISO C++ paper D1907R1 proposes \"structural type\" as an alternative to the\ncurrent notion of \"strong structural equality\", which has various problems.\nI'm implementing it to give people a chance to try it.\n\nThe build_base_field changes are to make it easier for structural_type_p to\nsee whether a base is private or protected.\n\n\t* tree.c (structural_type_p): New.\n\t* pt.c (invalid_nontype_parm_type_p): Use it.\n\t* class.c (build_base_field_1): Take binfo.  Copy TREE_PRIVATE.\n\t(build_base_field): Pass binfo.\n\nFrom-SVN: r277902", "tree": {"sha": "80dd4fe6801052da50c979452f37253d83c5496b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80dd4fe6801052da50c979452f37253d83c5496b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74fa38297b22d826f53f0b1894a1847eca3503dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fa38297b22d826f53f0b1894a1847eca3503dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74fa38297b22d826f53f0b1894a1847eca3503dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74fa38297b22d826f53f0b1894a1847eca3503dc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "951c6f3dd975d795adc409da1a1477b5229199ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951c6f3dd975d795adc409da1a1477b5229199ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951c6f3dd975d795adc409da1a1477b5229199ae"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "a0b93e77e4de2357dcc2f8d3eb150fad2b83af80", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=74fa38297b22d826f53f0b1894a1847eca3503dc", "patch": "@@ -1,5 +1,11 @@\n 2019-11-06  Jason Merrill  <jason@redhat.com>\n \n+\tImplement D1907R1 \"structural type\".\n+\t* tree.c (structural_type_p): New.\n+\t* pt.c (invalid_nontype_parm_type_p): Use it.\n+\t* class.c (build_base_field_1): Take binfo.  Copy TREE_PRIVATE.\n+\t(build_base_field): Pass binfo.\n+\n \tPR c++/92150 - partial specialization with class NTTP.\n \t* pt.c (unify): Handle VIEW_CONVERT_EXPR.\n "}, {"sha": "a9aa5e77171037767036ce1ea8ac5e0cfa75108b", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=74fa38297b22d826f53f0b1894a1847eca3503dc", "patch": "@@ -4353,15 +4353,18 @@ layout_empty_base_or_field (record_layout_info rli, tree binfo_or_decl,\n    fields at NEXT_FIELD, and return it.  */\n \n static tree\n-build_base_field_1 (tree t, tree basetype, tree *&next_field)\n+build_base_field_1 (tree t, tree binfo, tree *&next_field)\n {\n   /* Create the FIELD_DECL.  */\n+  tree basetype = BINFO_TYPE (binfo);\n   gcc_assert (CLASSTYPE_AS_BASE (basetype));\n   tree decl = build_decl (input_location,\n \t\t\t  FIELD_DECL, NULL_TREE, CLASSTYPE_AS_BASE (basetype));\n   DECL_ARTIFICIAL (decl) = 1;\n   DECL_IGNORED_P (decl) = 1;\n   DECL_FIELD_CONTEXT (decl) = t;\n+  TREE_PRIVATE (decl) = TREE_PRIVATE (binfo);\n+  TREE_PROTECTED (decl) = TREE_PROTECTED (binfo);\n   if (is_empty_class (basetype))\n     /* CLASSTYPE_SIZE is one byte, but the field needs to have size zero.  */\n     DECL_SIZE (decl) = DECL_SIZE_UNIT (decl) = size_zero_node;\n@@ -4414,7 +4417,7 @@ build_base_field (record_layout_info rli, tree binfo,\n       CLASSTYPE_EMPTY_P (t) = 0;\n \n       /* Create the FIELD_DECL.  */\n-      decl = build_base_field_1 (t, basetype, next_field);\n+      decl = build_base_field_1 (t, binfo, next_field);\n \n       /* Try to place the field.  It may take more than one try if we\n \t have a hard time placing the field without putting two\n@@ -4448,7 +4451,7 @@ build_base_field (record_layout_info rli, tree binfo,\n \t aggregate bases.  */\n       if (cxx_dialect >= cxx17 && !BINFO_VIRTUAL_P (binfo))\n \t{\n-\t  tree decl = build_base_field_1 (t, basetype, next_field);\n+\t  tree decl = build_base_field_1 (t, binfo, next_field);\n \t  DECL_FIELD_OFFSET (decl) = BINFO_OFFSET (binfo);\n \t  DECL_FIELD_BIT_OFFSET (decl) = bitsize_zero_node;\n \t  SET_DECL_OFFSET_ALIGN (decl, BITS_PER_UNIT);"}, {"sha": "adc021b2a5c169a40f827470f4f37e96a201c6e7", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=74fa38297b22d826f53f0b1894a1847eca3503dc", "patch": "@@ -7302,6 +7302,7 @@ extern bool trivial_type_p\t\t\t(const_tree);\n extern bool trivially_copyable_p\t\t(const_tree);\n extern bool type_has_unique_obj_representations (const_tree);\n extern bool scalarish_type_p\t\t\t(const_tree);\n+extern bool structural_type_p\t\t\t(tree, bool = false);\n extern bool type_has_nontrivial_default_init\t(const_tree);\n extern bool type_has_nontrivial_copy_init\t(const_tree);\n extern void maybe_warn_parm_abi\t\t\t(tree, location_t);"}, {"sha": "8bacb3952ff22b37db0b8d33dd6163efe336551a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=74fa38297b22d826f53f0b1894a1847eca3503dc", "patch": "@@ -25748,21 +25748,15 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n \treturn false;\n       if (!complete_type_or_else (type, NULL_TREE))\n \treturn true;\n-      if (!literal_type_p (type))\n+      if (!structural_type_p (type))\n \t{\n-\t  error (\"%qT is not a valid type for a template non-type parameter \"\n-\t\t \"because it is not literal\", type);\n-\t  explain_non_literal_class (type);\n-\t  return true;\n-\t}\n-      if (cp_has_mutable_p (type))\n-\t{\n-\t  error (\"%qT is not a valid type for a template non-type parameter \"\n-\t\t \"because it has a mutable member\", type);\n+\t  auto_diagnostic_group d;\n+\t  if (complain & tf_error)\n+\t    error (\"%qT is not a valid type for a template non-type parameter \"\n+\t\t   \"because it is not structural\", type);\n+\t  structural_type_p (type, true);\n \t  return true;\n \t}\n-      /* FIXME check op<=> and strong structural equality once spaceship is\n-\t implemented.  */\n       return false;\n     }\n "}, {"sha": "ba635d4ddbd9996f0da04d7856d5bd2b37944813", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=74fa38297b22d826f53f0b1894a1847eca3503dc", "patch": "@@ -4378,6 +4378,63 @@ zero_init_p (const_tree t)\n   return 1;\n }\n \n+/* True IFF T is a C++20 structural type (P1907R1) that can be used as a\n+   non-type template parameter.  If EXPLAIN, explain why not.  */\n+\n+bool\n+structural_type_p (tree t, bool explain)\n+{\n+  t = strip_array_types (t);\n+  if (INTEGRAL_OR_ENUMERATION_TYPE_P (t))\n+    return true;\n+  if (NULLPTR_TYPE_P (t))\n+    return true;\n+  if (TYPE_PTR_P (t) || TYPE_PTRMEM_P (t))\n+    return true;\n+  if (TYPE_REF_P (t) && !TYPE_REF_IS_RVALUE (t))\n+    return true;\n+  if (!CLASS_TYPE_P (t))\n+    return false;\n+  if (TREE_CODE (t) == UNION_TYPE)\n+    {\n+      if (explain)\n+\tinform (location_of (t), \"%qT is a union\", t);\n+      return false;\n+    }\n+  if (!literal_type_p (t))\n+    {\n+      if (explain)\n+\texplain_non_literal_class (t);\n+      return false;\n+    }\n+  if (CLASSTYPE_HAS_MUTABLE (t))\n+    {\n+      if (explain)\n+\tinform (location_of (t), \"%qT has a mutable member\", t);\n+      return false;\n+    }\n+  for (tree m = next_initializable_field (TYPE_FIELDS (t)); m;\n+       m = next_initializable_field (DECL_CHAIN (m)))\n+    {\n+      if (TREE_PRIVATE (m) || TREE_PROTECTED (m))\n+\t{\n+\t  if (explain)\n+\t    inform (location_of (m), \"%qD is not public\", m);\n+\t  return false;\n+\t}\n+      if (!structural_type_p (TREE_TYPE (m)))\n+\t{\n+\t  if (explain)\n+\t    {\n+\t      inform (location_of (m), \"%qD has a non-structural type\", m);\n+\t      structural_type_p (TREE_TYPE (m), true);\n+\t    }\n+\t  return false;\n+\t}\n+    }\n+  return true;\n+}\n+\n /* Handle the C++17 [[nodiscard]] attribute, which is similar to the GNU\n    warn_unused_result attribute.  */\n "}, {"sha": "71ba8f981a0d0adb4abc6d8013f777d556842a08", "filename": "gcc/testsuite/g++.dg/cpp2a/udlit-class-nttp-neg2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74fa38297b22d826f53f0b1894a1847eca3503dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fudlit-class-nttp-neg2.C?ref=74fa38297b22d826f53f0b1894a1847eca3503dc", "patch": "@@ -9,5 +9,5 @@ struct non_literal_class {\n   // auto operator<=> (const non_literal_fixed_string&) = default;\n };\n \n-template <non_literal_class> // { dg-error \"11:is not a valid type for a template non-type parameter because it is not literal\" }\n+template <non_literal_class> // { dg-error \"11:is not a valid type for a template non-type parameter because it is not structural\" }\n int operator\"\" _udl();       // { dg-error \"5:literal operator template .int operator\\\"\\\"_udl\\\\(\\\\). has invalid parameter list\" }"}]}