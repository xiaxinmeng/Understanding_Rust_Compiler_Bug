{"sha": "6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlMDdjNjExY2EzZGQ0ZjcwYmQ5NzQ0Y2YwMzQyZThmZjUzNmM2OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T10:37:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-07-05T10:37:33Z"}, "message": "[multiple changes]\n\n2013-07-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Update doc on missing pragmas.\n\t* sem_ch12.adb: Minor comment additions.\n\n2013-07-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Ensure that\n\tContract_Cases, Depends and Global are analyzed when they apply\n\tto a subprogram compilation unit. The pragmas are all added\n\tunconditionally to the construct's contract. This ensures that\n\tproof tools can locate the pragmas.\n\n2013-07-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Freeze_Actual_Profile): An instance within\n\ta generic unit does not freeze a generic private type of the\n\tenclosing generic. This rule must also apply to a type derived\n\tfrom a generic private type.\n\nFrom-SVN: r200704", "tree": {"sha": "9c3d1dbd5029b1bbb2fdc94deeb1ffc41d72c0b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c3d1dbd5029b1bbb2fdc94deeb1ffc41d72c0b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/comments", "author": null, "committer": null, "parents": [{"sha": "8b30e1668e374318a490f31c457a1a23a959c0da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b30e1668e374318a490f31c457a1a23a959c0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b30e1668e374318a490f31c457a1a23a959c0da"}], "stats": {"total": 160, "additions": 143, "deletions": 17}, "files": [{"sha": "c395a27ca516c100485bac75d82d0aebea182086", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "patch": "@@ -1,3 +1,23 @@\n+2013-07-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Update doc on missing pragmas.\n+\t* sem_ch12.adb: Minor comment additions.\n+\n+2013-07-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Ensure that\n+\tContract_Cases, Depends and Global are analyzed when they apply\n+\tto a subprogram compilation unit. The pragmas are all added\n+\tunconditionally to the construct's contract. This ensures that\n+\tproof tools can locate the pragmas.\n+\n+2013-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Freeze_Actual_Profile): An instance within\n+\ta generic unit does not freeze a generic private type of the\n+\tenclosing generic. This rule must also apply to a type derived\n+\tfrom a generic private type.\n+\n 2013-07-05  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gnat_rm.texi: Add missing documentation for pragmas."}, {"sha": "19430091d59e962e22f5a364886808851d90d786", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "patch": "@@ -117,6 +117,7 @@ Implementation Defined Pragmas\n * Pragma Check_Float_Overflow::\n * Pragma Check_Name::\n * Pragma Check_Policy::\n+* Pragma CIL_Constructor::\n * Pragma Comment::\n * Pragma Common_Object::\n * Pragma Compile_Time_Error::\n@@ -174,6 +175,8 @@ Implementation Defined Pragmas\n * Pragma Interrupt_Handler::\n * Pragma Interrupt_State::\n * Pragma Invariant::\n+* Pragma Java_Constructor::\n+* Pragma Java_Interface::\n * Pragma Keep_Names::\n * Pragma License::\n * Pragma Link_With::\n@@ -926,6 +929,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Check_Float_Overflow::\n * Pragma Check_Name::\n * Pragma Check_Policy::\n+* Pragma CIL_Constructor::\n * Pragma Comment::\n * Pragma Common_Object::\n * Pragma Compile_Time_Error::\n@@ -983,6 +987,8 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Interrupt_Handler::\n * Pragma Interrupt_State::\n * Pragma Invariant::\n+* Pragma Java_Constructor::\n+* Pragma Java_Interface::\n * Pragma Keep_Names::\n * Pragma License::\n * Pragma Link_With::\n@@ -1773,6 +1779,24 @@ compatibility with the standard @code{Assertion_Policy} pragma. The check\n policy setting @code{DISABLE} causes the second argument of a corresponding\n @code{Check} pragma to be completely ignored and not analyzed.\n \n+@node Pragma CIL_Constructor\n+@unnumberedsec Pragma CIL_Constructor\n+@findex CIL_Constructor\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma CIL_Constructor ([Entity =>] function_LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma is used to assert that the specified Ada function should be\n+mapped to the .NET constructor for some Ada tagged record type.\n+\n+See section 4.1 of the\n+@code{GNAT User's Guide: Supplement for the .NET Platform.}\n+for related information.\n+\n @node Pragma Comment\n @unnumberedsec Pragma Comment\n @findex Comment\n@@ -3814,6 +3838,42 @@ invariant pragma for the same entity.\n For further details on the use of this pragma, see the Ada 2012 documentation\n of the Type_Invariant aspect.\n \n+@node Pragma Java_Constructor\n+@unnumberedsec Pragma Java_Constructor\n+@findex Java_Constructor\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Java_Constructor ([Entity =>] function_LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma is used to assert that the specified Ada function should be\n+mapped to the Java constructor for some Ada tagged record type.\n+\n+See section 7.3.2 of the\n+@code{GNAT User's Guide: Supplement for the JVM Platform.}\n+for related information.\n+\n+@node Pragma Java_Interface\n+@unnumberedsec Pragma Java_Interface\n+@findex Java_Interface\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Java_Interface ([Entity =>] abstract_tagged_type_LOCAL_NAME);\n+@end smallexample\n+\n+@noindent\n+This pragma is used to assert that the specified Ada abstract tagged type\n+is to be mapped to a Java interface name.\n+\n+See sections 7.1 and 7.2 of the\n+@code{GNAT User's Guide: Supplement for the JVM Platform.}\n+for related information.\n+\n @node Pragma Keep_Names\n @unnumberedsec Pragma Keep_Names\n @findex Keep_Names\n@@ -4388,7 +4448,7 @@ pragma No_Run_Time;\n This is an obsolete configuration pragma that historically was used to\n setup what is now called the \"zero footprint\" library. It causes any\n library units outside this basic library to be ignored. The use of\n-this pragma has been superceded by the general configurable run-time\n+this pragma has been superseded by the general configurable run-time\n capability of @code{GNAT} where the compiler takes into account whatever\n units happen to be accessible in the library.\n "}, {"sha": "73b49658ea1256c0d55c159a377509bd21fb1d61", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "patch": "@@ -4367,19 +4367,30 @@ package body Sem_Ch12 is\n       Subp : Entity_Id) return Boolean\n    is\n    begin\n-      --  This complex conditional requires blow by blow comments ???\n+      --  Must be inlined (or inlined renaming)\n \n       if (Is_In_Main_Unit (N)\n            or else Is_Inlined (Subp)\n            or else Is_Inlined (Alias (Subp)))\n+\n+        --  Must be generating code or analyzing code in ASIS mode\n+\n         and then (Operating_Mode = Generate_Code\n                    or else (Operating_Mode = Check_Semantics\n                              and then ASIS_Mode))\n+\n         --  The body is needed when generating code (full expansion), in ASIS\n         --  mode for other tools, and in SPARK mode (special expansion) for\n         --  formal verification of the body itself.\n+\n         and then (Expander_Active or ASIS_Mode)\n+\n+        --  No point in inlining if ABE is inevitable\n+\n         and then not ABE_Is_Certain (N)\n+\n+        --  Or if subprogram is eliminated\n+\n         and then not Is_Eliminated (Subp)\n       then\n          Pending_Instantiations.Append\n@@ -4392,6 +4403,8 @@ package body Sem_Ch12 is\n              Version                  => Ada_Version));\n          return True;\n \n+      --  Here if not inlined, or we ignore the inlining\n+\n       else\n          return False;\n       end if;"}, {"sha": "f00300222d2ce95bbe2df7e9d44a77bee56d4220", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "patch": "@@ -2069,11 +2069,20 @@ package body Sem_Ch8 is\n \n                   if Is_Incomplete_Or_Private_Type (Etype (F))\n                     and then No (Underlying_Type (Etype (F)))\n-                    and then not Is_Generic_Type (Etype (F))\n                   then\n-                     Error_Msg_NE\n-                       (\"type& must be frozen before this point\",\n-                          Instantiation_Node, Etype (F));\n+\n+                     --  Exclude generic types, or types derived  from them.\n+                     --  They will be frozen in the enclosing instance.\n+\n+                     if Is_Generic_Type (Etype (F))\n+                       or else Is_Generic_Type (Root_Type (Etype (F)))\n+                     then\n+                        null;\n+                     else\n+                        Error_Msg_NE\n+                          (\"type& must be frozen before this point\",\n+                             Instantiation_Node, Etype (F));\n+                     end if;\n                   end if;\n \n                   F := Next_Formal (F);"}, {"sha": "08d6f9a30d5e3cd0899f6a0c145d3beda0ddf954", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee07c611ca3dd4f70bd9744cf0342e8ff536c69/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6ee07c611ca3dd4f70bd9744cf0342e8ff536c69", "patch": "@@ -10082,11 +10082,19 @@ package body Sem_Prag is\n             if Nkind (Subp_Decl) = N_Subprogram_Body then\n                Analyze_Contract_Cases_In_Decl_Part (N);\n \n-            --  Chain the pragma on the contract for further processing\n+            --  When Contract_Cases applies to a subprogram compilation unit,\n+            --  the corresponding pragma is placed after the unit's declaration\n+            --  node and needs to be analyzed immediately.\n \n-            else\n-               Add_Contract_Item (N, Subp_Id);\n+            elsif Nkind (Subp_Decl) = N_Subprogram_Declaration\n+              and then Nkind (Parent (Subp_Decl)) = N_Compilation_Unit\n+            then\n+               Analyze_Contract_Cases_In_Decl_Part (N);\n             end if;\n+\n+            --  Chain the pragma on the contract for further processing\n+\n+            Add_Contract_Item (N, Subp_Id);\n          end Contract_Cases;\n \n          ----------------\n@@ -10590,11 +10598,19 @@ package body Sem_Prag is\n             if Nkind (Subp_Decl) = N_Subprogram_Body then\n                Analyze_Depends_In_Decl_Part (N);\n \n-            --  Chain the pragma on the contract for further processing\n+            --  When Depends applies to a subprogram compilation unit, the\n+            --  corresponding pragma is placed after the unit's declaration\n+            --  node and needs to be analyzed immediately.\n \n-            else\n-               Add_Contract_Item (N, Subp_Id);\n+            elsif Nkind (Subp_Decl) = N_Subprogram_Declaration\n+              and then Nkind (Parent (Subp_Decl)) = N_Compilation_Unit\n+            then\n+               Analyze_Depends_In_Decl_Part (N);\n             end if;\n+\n+            --  Chain the pragma on the contract for further processing\n+\n+            Add_Contract_Item (N, Subp_Id);\n          end Depends;\n \n          ---------------------\n@@ -11833,11 +11849,19 @@ package body Sem_Prag is\n             if Nkind (Subp_Decl) = N_Subprogram_Body then\n                Analyze_Global_In_Decl_Part (N);\n \n-            --  Chain the pragma on the contract for further processing\n+            --  When Global applies to a subprogram compilation unit, the\n+            --  corresponding pragma is placed after the unit's declaration\n+            --  node and needs to be analyzed immediately.\n \n-            else\n-               Add_Contract_Item (N, Subp_Id);\n+            elsif Nkind (Subp_Decl) = N_Subprogram_Declaration\n+              and then Nkind (Parent (Subp_Decl)) = N_Compilation_Unit\n+            then\n+               Analyze_Global_In_Decl_Part (N);\n             end if;\n+\n+            --  Chain the pragma on the contract for further processing\n+\n+            Add_Contract_Item (N, Subp_Id);\n          end Global;\n \n          -----------\n@@ -13348,8 +13372,8 @@ package body Sem_Prag is\n             --  abstract. ???\n \n             if not Is_Tagged_Type (Typ) or else not Is_Abstract_Type (Typ) then\n-               Error_Pragma_Arg (\"pragma% requires an abstract \"\n-                 & \"tagged type\", Arg1);\n+               Error_Pragma_Arg\n+                 (\"pragma% requires an abstract tagged type\", Arg1);\n \n             elsif not Has_Discriminants (Typ)\n               or else Ekind (Etype (First_Discriminant (Typ)))"}]}