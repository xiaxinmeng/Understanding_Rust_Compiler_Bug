{"sha": "0291fa2509cbd6816d720aebfacdebffe1c9dcad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI5MWZhMjUwOWNiZDY4MTZkNzIwYWViZmFjZGViZmZlMWM5ZGNhZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-07-31T10:25:07Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-07-31T10:25:07Z"}, "message": "re PR fortran/49112 ([OOP] Missing type-bound procedure, \"duplicate save\" warnings and internal compiler error)\n\n2011-07-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/49112\n\t* resolve.c (resolve_structure_cons): Don't do the full dt resolution,\n\tonly call 'resolve_fl_derived0'.\n\t(resolve_typebound_procedures): Resolve typebound procedures of\n\tparent type.\n\t(resolve_fl_derived0): New function, which does a part of the work\n\tfor 'resolve_fl_derived'.\n\t(resolve_fl_derived): Call 'resolve_fl_derived0' and do some additional\n\tthings.\n\n\n2011-07-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/49112\n\t* gfortran.dg/abstract_type_6.f03: Modified.\n\t* gfortran.dg/typebound_proc_24.f03: New.\n\nFrom-SVN: r176971", "tree": {"sha": "c4625982e844ba31e0b2fdb405ec9ea56fba08d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4625982e844ba31e0b2fdb405ec9ea56fba08d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0291fa2509cbd6816d720aebfacdebffe1c9dcad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0291fa2509cbd6816d720aebfacdebffe1c9dcad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0291fa2509cbd6816d720aebfacdebffe1c9dcad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0291fa2509cbd6816d720aebfacdebffe1c9dcad/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413e50a27db9ed8489cd6b4814f82a0cb99e6c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/413e50a27db9ed8489cd6b4814f82a0cb99e6c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/413e50a27db9ed8489cd6b4814f82a0cb99e6c38"}], "stats": {"total": 127, "additions": 101, "deletions": 26}, "files": [{"sha": "d2e2044eff0a74bb4204c5d1df513f0b0d9c9e2f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0291fa2509cbd6816d720aebfacdebffe1c9dcad", "patch": "@@ -1,3 +1,15 @@\n+2011-07-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/49112\n+\t* resolve.c (resolve_structure_cons): Don't do the full dt resolution,\n+\tonly call 'resolve_fl_derived0'.\n+\t(resolve_typebound_procedures): Resolve typebound procedures of\n+\tparent type.\n+\t(resolve_fl_derived0): New function, which does a part of the work\n+\tfor 'resolve_fl_derived'.\n+\t(resolve_fl_derived): Call 'resolve_fl_derived0' and do some additional\n+\tthings.\n+\n 2011-07-30  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/48876"}, {"sha": "b4d66cc968b24fde342100fe413a62f69935a3fb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0291fa2509cbd6816d720aebfacdebffe1c9dcad", "patch": "@@ -950,6 +950,9 @@ resolve_contained_functions (gfc_namespace *ns)\n }\n \n \n+static gfc_try resolve_fl_derived0 (gfc_symbol *sym);\n+\n+\n /* Resolve all of the elements of a structure constructor and make sure that\n    the types are correct. The 'init' flag indicates that the given\n    constructor is an initializer.  */\n@@ -965,7 +968,7 @@ resolve_structure_cons (gfc_expr *expr, int init)\n   t = SUCCESS;\n \n   if (expr->ts.type == BT_DERIVED)\n-    resolve_symbol (expr->ts.u.derived);\n+    resolve_fl_derived0 (expr->ts.u.derived);\n \n   cons = gfc_constructor_first (expr->value.constructor);\n   /* A constructor may have references if it is the result of substituting a\n@@ -11361,9 +11364,14 @@ static gfc_try\n resolve_typebound_procedures (gfc_symbol* derived)\n {\n   int op;\n+  gfc_symbol* super_type;\n \n   if (!derived->f2k_derived || !derived->f2k_derived->tb_sym_root)\n     return SUCCESS;\n+  \n+  super_type = gfc_get_derived_super_type (derived);\n+  if (super_type)\n+    resolve_typebound_procedures (super_type);\n \n   resolve_bindings_derived = derived;\n   resolve_bindings_result = SUCCESS;\n@@ -11475,28 +11483,17 @@ ensure_not_abstract (gfc_symbol* sub, gfc_symbol* ancestor)\n }\n \n \n-/* Resolve the components of a derived type.  */\n+/* Resolve the components of a derived type. This does not have to wait until\n+   resolution stage, but can be done as soon as the dt declaration has been\n+   parsed.  */\n \n static gfc_try\n-resolve_fl_derived (gfc_symbol *sym)\n+resolve_fl_derived0 (gfc_symbol *sym)\n {\n   gfc_symbol* super_type;\n   gfc_component *c;\n \n   super_type = gfc_get_derived_super_type (sym);\n-  \n-  if (sym->attr.is_class && sym->ts.u.derived == NULL)\n-    {\n-      /* Fix up incomplete CLASS symbols.  */\n-      gfc_component *data = gfc_find_component (sym, \"_data\", true, true);\n-      gfc_component *vptr = gfc_find_component (sym, \"_vptr\", true, true);\n-      if (vptr->ts.u.derived == NULL)\n-\t{\n-\t  gfc_symbol *vtab = gfc_find_derived_vtab (data->ts.u.derived);\n-\t  gcc_assert (vtab);\n-\t  vptr->ts.u.derived = vtab->ts.u.derived;\n-\t}\n-    }\n \n   /* F2008, C432. */\n   if (super_type && sym->attr.coarray_comp && !super_type->attr.coarray_comp)\n@@ -11508,7 +11505,7 @@ resolve_fl_derived (gfc_symbol *sym)\n     }\n \n   /* Ensure the extended type gets resolved before we do.  */\n-  if (super_type && resolve_fl_derived (super_type) == FAILURE)\n+  if (super_type && resolve_fl_derived0 (super_type) == FAILURE)\n     return FAILURE;\n \n   /* An ABSTRACT type must be extensible.  */\n@@ -11861,14 +11858,6 @@ resolve_fl_derived (gfc_symbol *sym)\n \treturn FAILURE;\n     }\n \n-  /* Resolve the type-bound procedures.  */\n-  if (resolve_typebound_procedures (sym) == FAILURE)\n-    return FAILURE;\n-\n-  /* Resolve the finalizer procedures.  */\n-  if (gfc_resolve_finalizers (sym) == FAILURE)\n-    return FAILURE;\n-\n   /* If this is a non-ABSTRACT type extending an ABSTRACT one, ensure that\n      all DEFERRED bindings are overridden.  */\n   if (super_type && super_type->attr.abstract && !sym->attr.abstract\n@@ -11883,6 +11872,42 @@ resolve_fl_derived (gfc_symbol *sym)\n }\n \n \n+/* The following procedure does the full resolution of a derived type,\n+   including resolution of all type-bound procedures (if present). In contrast\n+   to 'resolve_fl_derived0' this can only be done after the module has been\n+   parsed completely.  */\n+\n+static gfc_try\n+resolve_fl_derived (gfc_symbol *sym)\n+{\n+  if (sym->attr.is_class && sym->ts.u.derived == NULL)\n+    {\n+      /* Fix up incomplete CLASS symbols.  */\n+      gfc_component *data = gfc_find_component (sym, \"_data\", true, true);\n+      gfc_component *vptr = gfc_find_component (sym, \"_vptr\", true, true);\n+      if (vptr->ts.u.derived == NULL)\n+\t{\n+\t  gfc_symbol *vtab = gfc_find_derived_vtab (data->ts.u.derived);\n+\t  gcc_assert (vtab);\n+\t  vptr->ts.u.derived = vtab->ts.u.derived;\n+\t}\n+    }\n+  \n+  if (resolve_fl_derived0 (sym) == FAILURE)\n+    return FAILURE;\n+  \n+  /* Resolve the type-bound procedures.  */\n+  if (resolve_typebound_procedures (sym) == FAILURE)\n+    return FAILURE;\n+\n+  /* Resolve the finalizer procedures.  */\n+  if (gfc_resolve_finalizers (sym) == FAILURE)\n+    return FAILURE;\n+  \n+  return SUCCESS;\n+}\n+\n+\n static gfc_try\n resolve_fl_namelist (gfc_symbol *sym)\n {"}, {"sha": "4f9a1f850f4986f130e81e5f20a2dfcb9c75ce59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0291fa2509cbd6816d720aebfacdebffe1c9dcad", "patch": "@@ -1,3 +1,9 @@\n+2011-07-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/49112\n+\t* gfortran.dg/abstract_type_6.f03: Modified.\n+\t* gfortran.dg/typebound_proc_24.f03: New.\n+\n 2011-07-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR testsuite/49917"}, {"sha": "de1cea3632337d6b93ef2fcfd74df177ddcb71fc", "filename": "gcc/testsuite/gfortran.dg/abstract_type_6.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fabstract_type_6.f03?ref=0291fa2509cbd6816d720aebfacdebffe1c9dcad", "patch": "@@ -31,7 +31,7 @@ module m\n CONTAINS\n    ! useful proc to satisfy deferred procedure in top. Because we've\n    ! extended middle we wouldn't get told off if we forgot this.\n-   PROCEDURE :: proc_a => bottom_a\n+   PROCEDURE :: proc_a => bottom_a  ! { dg-error \"must be a module procedure\" }\n    ! calls middle%proc_b and then provides extra behaviour\n    PROCEDURE :: proc_b => bottom_b\n    ! calls top_c and then provides extra behaviour"}, {"sha": "f200e0efbbc37ff093808516a2fe1949ec8b1b6a", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_24.f03", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_24.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0291fa2509cbd6816d720aebfacdebffe1c9dcad/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_24.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_24.f03?ref=0291fa2509cbd6816d720aebfacdebffe1c9dcad", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do compile }\n+!\n+! PR 49112: [4.6/4.7 Regression] [OOP] Missing type-bound procedure, \"duplicate save\" warnings and internal compiler error\n+!\n+! Contributed by John <jwmwalrus@gmail.com>\n+\n+module datetime_mod\n+\n+  implicit none\n+\n+  type :: DateTime\n+    integer :: year, month, day\n+  contains\n+    procedure :: getFormattedString\n+  end type\n+\n+  type(DateTime) :: ISO_REFERENCE_DATE = DateTime(1875, 5, 20)\n+\n+contains\n+\n+  character function getFormattedString(dt)\n+    class(DateTime) :: dt\n+  end function\n+\n+  subroutine test\n+    type(DateTime) :: dt\n+    print *,dt%getFormattedString()\n+  end subroutine\n+\n+end module \n+\n+! { dg-final { cleanup-modules \"datetime_mod\" } }"}]}