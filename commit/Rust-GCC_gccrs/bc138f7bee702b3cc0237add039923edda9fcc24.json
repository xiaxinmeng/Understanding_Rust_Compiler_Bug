{"sha": "bc138f7bee702b3cc0237add039923edda9fcc24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMxMzhmN2JlZTcwMmIzY2MwMjM3YWRkMDM5OTIzZWRkYTlmY2MyNA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-09-11T16:16:24Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-09-11T16:16:24Z"}, "message": "[AArch64] Simplify vreinterpret for float64x1_t using casts.\n\n\t* config/aarch64/aarch64-builtins.c (aarch64_types_unop_su_qualifiers,\n\tTYPES_REINTERP_SU, aarch64_types_unop_sp_qualifiers, TYPE_REINTERP_SP,\n\taarch64_types_unop_us_qualifiers, TYPES_REINTERP_US,\n\taarch64_types_unop_ps_qualifiers, TYPES_REINTERP_PS, BUILTIN_VD):\n\tDelete.\n\n\t(aarch64_fold_builtin): Remove all reinterpret cases.\n\n\t* config/aarch64/aarch64-protos.h (aarch64_simd_reinterpret): Delete.\n\n\t* config/aarch64/aarch64-simd-builtins.def (reinterpret*) : Delete.\n\n\t* config/aarch64/aarch64-simd.md (aarch64_reinterpretv8qi<mode>,\n\taarch64_reinterpretv4hi<mode>, aarch64_reinterpretv2si<mode>,\n\taarch64_reinterpretv2sf<mode>, aarch64_reinterpretdi<mode>,\n\taarch64_reinterpretv1df<mode>, aarch64_reinterpretv16qi<mode>,\n\taarch64_reinterpretv8hi<mode>, aarch64_reinterpretv4si<mode>,\n\taarch64_reinterpretv4sf<mode>, aarch64_reinterpretv2di<mode>,\n\taarch64_reinterpretv2df<mode>): Delete.\n\n\t* config/aarch64/aarch64.c (aarch64_simd_reinterpret): Delete.\n\n\t* config/aarch64/arm_neon.h (vreinterpret_p8_f64,\n\tvreinterpret_p16_f64, vreinterpret_f32_f64, vreinterpret_f64_f32,\n\tvreinterpret_f64_p8, vreinterpret_f64_p16, vreinterpret_f64_s8,\n\tvreinterpret_f64_s16, vreinterpret_f64_s32, vreinterpret_f64_u8,\n\tvreinterpret_f64_u16, vreinterpret_f64_u32, vreinterpret_s64_f64,\n\tvreinterpret_u64_f64, vreinterpret_s8_f64, vreinterpret_s16_f64,\n\tvreinterpret_s32_f64, vreinterpret_u8_f64, vreinterpret_u16_f64,\n\tvreinterpret_u32_f64): Use cast.\n\n\t* config/aarch64/iterators.md (VD_RE): Delete.\n\nFrom-SVN: r215180", "tree": {"sha": "4f6a6afee72c52c6cae4321ab6d1af33b59ee7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f6a6afee72c52c6cae4321ab6d1af33b59ee7e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc138f7bee702b3cc0237add039923edda9fcc24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc138f7bee702b3cc0237add039923edda9fcc24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc138f7bee702b3cc0237add039923edda9fcc24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc138f7bee702b3cc0237add039923edda9fcc24/comments", "author": null, "committer": null, "parents": [{"sha": "fdaddc1b0b7d2651f2458f0f00e93516531d425d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdaddc1b0b7d2651f2458f0f00e93516531d425d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdaddc1b0b7d2651f2458f0f00e93516531d425d"}], "stats": {"total": 258, "additions": 55, "deletions": 203}, "files": [{"sha": "5097819b0e76dd706d6e20e394d1d8d62ba5681a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -1,3 +1,38 @@\n+2014-09-11  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* config/aarch64/aarch64-builtins.c (aarch64_types_unop_su_qualifiers,\n+\tTYPES_REINTERP_SU, aarch64_types_unop_sp_qualifiers, TYPE_REINTERP_SP,\n+\taarch64_types_unop_us_qualifiers, TYPES_REINTERP_US,\n+\taarch64_types_unop_ps_qualifiers, TYPES_REINTERP_PS, BUILTIN_VD):\n+\tDelete.\n+\n+\t(aarch64_fold_builtin): Remove all reinterpret cases.\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_simd_reinterpret): Delete.\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (reinterpret*) : Delete.\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_reinterpretv8qi<mode>,\n+\taarch64_reinterpretv4hi<mode>, aarch64_reinterpretv2si<mode>,\n+\taarch64_reinterpretv2sf<mode>, aarch64_reinterpretdi<mode>,\n+\taarch64_reinterpretv1df<mode>, aarch64_reinterpretv16qi<mode>,\n+\taarch64_reinterpretv8hi<mode>, aarch64_reinterpretv4si<mode>,\n+\taarch64_reinterpretv4sf<mode>, aarch64_reinterpretv2di<mode>,\n+\taarch64_reinterpretv2df<mode>): Delete.\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_reinterpret): Delete.\n+\n+\t* config/aarch64/arm_neon.h (vreinterpret_p8_f64,\n+\tvreinterpret_p16_f64, vreinterpret_f32_f64, vreinterpret_f64_f32,\n+\tvreinterpret_f64_p8, vreinterpret_f64_p16, vreinterpret_f64_s8,\n+\tvreinterpret_f64_s16, vreinterpret_f64_s32, vreinterpret_f64_u8,\n+\tvreinterpret_f64_u16, vreinterpret_f64_u32, vreinterpret_s64_f64,\n+\tvreinterpret_u64_f64, vreinterpret_s8_f64, vreinterpret_s16_f64,\n+\tvreinterpret_s32_f64, vreinterpret_u8_f64, vreinterpret_u16_f64,\n+\tvreinterpret_u32_f64): Use cast.\n+\n+\t* config/aarch64/iterators.md (VD_RE): Delete.\n+\n 2014-09-11  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* config/aarch64/arm_neon.h (aarch64_vset_lane_any): New (*2)."}, {"sha": "395b4ec78ee0f2be06b7a5d5e1ccd2028b7d1339", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -122,23 +122,6 @@ aarch64_types_unopu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned };\n #define TYPES_UNOPU (aarch64_types_unopu_qualifiers)\n #define TYPES_CREATE (aarch64_types_unop_qualifiers)\n-#define TYPES_REINTERP_SS (aarch64_types_unop_qualifiers)\n-static enum aarch64_type_qualifiers\n-aarch64_types_unop_su_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_none, qualifier_unsigned };\n-#define TYPES_REINTERP_SU (aarch64_types_unop_su_qualifiers)\n-static enum aarch64_type_qualifiers\n-aarch64_types_unop_sp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_none, qualifier_poly };\n-#define TYPES_REINTERP_SP (aarch64_types_unop_sp_qualifiers)\n-static enum aarch64_type_qualifiers\n-aarch64_types_unop_us_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_unsigned, qualifier_none };\n-#define TYPES_REINTERP_US (aarch64_types_unop_us_qualifiers)\n-static enum aarch64_type_qualifiers\n-aarch64_types_unop_ps_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n-  = { qualifier_poly, qualifier_none };\n-#define TYPES_REINTERP_PS (aarch64_types_unop_ps_qualifiers)\n static enum aarch64_type_qualifiers\n aarch64_types_binop_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_maybe_immediate };\n@@ -319,8 +302,6 @@ aarch64_types_storestruct_lane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n \t v4si, v2di, v2sf, v4sf, v2df, di, df)\n #define BUILTIN_VB(T, N, MAP) \\\n   VAR2 (T, N, MAP, v8qi, v16qi)\n-#define BUILTIN_VD(T, N, MAP) \\\n-  VAR4 (T, N, MAP, v8qi, v4hi, v2si, v2sf)\n #define BUILTIN_VD1(T, N, MAP) \\\n   VAR5 (T, N, MAP, v8qi, v4hi, v2si, v2sf, v1df)\n #define BUILTIN_VDC(T, N, MAP) \\\n@@ -1280,24 +1261,6 @@ aarch64_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *args,\n       BUILTIN_VALLDI (UNOP, abs, 2)\n \treturn fold_build1 (ABS_EXPR, type, args[0]);\n \tbreak;\n-      VAR1 (REINTERP_SS, reinterpretdi, 0, v1df)\n-      VAR1 (REINTERP_SS, reinterpretv8qi, 0, v1df)\n-      VAR1 (REINTERP_SS, reinterpretv4hi, 0, v1df)\n-      VAR1 (REINTERP_SS, reinterpretv2si, 0, v1df)\n-      VAR1 (REINTERP_SS, reinterpretv2sf, 0, v1df)\n-      BUILTIN_VD (REINTERP_SS, reinterpretv1df, 0)\n-      BUILTIN_VD (REINTERP_SU, reinterpretv1df, 0)\n-      VAR1 (REINTERP_US, reinterpretdi, 0, v1df)\n-      VAR1 (REINTERP_US, reinterpretv8qi, 0, v1df)\n-      VAR1 (REINTERP_US, reinterpretv4hi, 0, v1df)\n-      VAR1 (REINTERP_US, reinterpretv2si, 0, v1df)\n-      VAR1 (REINTERP_US, reinterpretv2sf, 0, v1df)\n-      BUILTIN_VD (REINTERP_SP, reinterpretv1df, 0)\n-      VAR1 (REINTERP_PS, reinterpretdi, 0, v1df)\n-      VAR1 (REINTERP_PS, reinterpretv8qi, 0, v1df)\n-      VAR1 (REINTERP_PS, reinterpretv4hi, 0, v1df)\n-      VAR1 (REINTERP_PS, reinterpretv2sf, 0, v1df)\n-\treturn fold_build1 (VIEW_CONVERT_EXPR, type, args[0]);\n       VAR1 (UNOP, floatv2si, 2, v2sf)\n       VAR1 (UNOP, floatv4si, 2, v4sf)\n       VAR1 (UNOP, floatv2di, 2, v2df)\n@@ -1489,7 +1452,6 @@ aarch64_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n #undef BUILTIN_V2F\n #undef BUILTIN_VALL\n #undef BUILTIN_VB\n-#undef BUILTIN_VD\n #undef BUILTIN_VD1\n #undef BUILTIN_VDC\n #undef BUILTIN_VDIC"}, {"sha": "367253b0d78df7a5b82e61800a603740b3e1b2f9", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -269,9 +269,6 @@ rtx aarch64_simd_expand_builtin (int, tree, rtx);\n \n void aarch64_simd_lane_bounds (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n \n-/* Emit code for reinterprets.  */\n-void aarch64_simd_reinterpret (rtx, rtx);\n-\n void aarch64_split_128bit_move (rtx, rtx);\n \n bool aarch64_split_128bit_move_p (rtx, rtx);"}, {"sha": "de264c41738dab84b8e5853d2c8fe8b49f1f5b09", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -49,29 +49,6 @@\n \n   BUILTIN_VALL (GETLANE, be_checked_get_lane, 0)\n \n-  VAR1 (REINTERP_SS, reinterpretdi, 0, v1df)\n-  VAR1 (REINTERP_SS, reinterpretv8qi, 0, v1df)\n-  VAR1 (REINTERP_SS, reinterpretv4hi, 0, v1df)\n-  VAR1 (REINTERP_SS, reinterpretv2si, 0, v1df)\n-  VAR1 (REINTERP_SS, reinterpretv2sf, 0, v1df)\n-  BUILTIN_VD (REINTERP_SS, reinterpretv1df, 0)\n-\n-  BUILTIN_VD (REINTERP_SU, reinterpretv1df, 0)\n-\n-  VAR1 (REINTERP_US, reinterpretdi, 0, v1df)\n-  VAR1 (REINTERP_US, reinterpretv8qi, 0, v1df)\n-  VAR1 (REINTERP_US, reinterpretv4hi, 0, v1df)\n-  VAR1 (REINTERP_US, reinterpretv2si, 0, v1df)\n-  VAR1 (REINTERP_US, reinterpretv2sf, 0, v1df)\n-\n-  BUILTIN_VD (REINTERP_SP, reinterpretv1df, 0)\n-\n-  VAR1 (REINTERP_PS, reinterpretdi, 0, v1df)\n-  VAR1 (REINTERP_PS, reinterpretv8qi, 0, v1df)\n-  VAR1 (REINTERP_PS, reinterpretv4hi, 0, v1df)\n-  VAR1 (REINTERP_PS, reinterpretv2si, 0, v1df)\n-  VAR1 (REINTERP_PS, reinterpretv2sf, 0, v1df)\n-\n   /* Implemented by aarch64_<sur>q<r>shl<mode>.  */\n   BUILTIN_VSDQ_I (BINOP, sqshl, 0)\n   BUILTIN_VSDQ_I (BINOP_UUS, uqshl, 0)"}, {"sha": "493e88628c2a7ef2c4f87031d86d1a5edcbca06b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -2350,114 +2350,6 @@\n   DONE;\n })\n \n-(define_expand \"aarch64_reinterpretv8qi<mode>\"\n-  [(match_operand:V8QI 0 \"register_operand\" \"\")\n-   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv4hi<mode>\"\n-  [(match_operand:V4HI 0 \"register_operand\" \"\")\n-   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv2si<mode>\"\n-  [(match_operand:V2SI 0 \"register_operand\" \"\")\n-   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv2sf<mode>\"\n-  [(match_operand:V2SF 0 \"register_operand\" \"\")\n-   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretdi<mode>\"\n-  [(match_operand:DI 0 \"register_operand\" \"\")\n-   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv1df<mode>\"\n-  [(match_operand:V1DF 0 \"register_operand\" \"\")\n-   (match_operand:VD_RE 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv16qi<mode>\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:VQ 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv8hi<mode>\"\n-  [(match_operand:V8HI 0 \"register_operand\" \"\")\n-   (match_operand:VQ 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv4si<mode>\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:VQ 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv4sf<mode>\"\n-  [(match_operand:V4SF 0 \"register_operand\" \"\")\n-   (match_operand:VQ 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv2di<mode>\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:VQ 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"aarch64_reinterpretv2df<mode>\"\n-  [(match_operand:V2DF 0 \"register_operand\" \"\")\n-   (match_operand:VQ 1 \"register_operand\" \"\")]\n-  \"TARGET_SIMD\"\n-{\n-  aarch64_simd_reinterpret (operands[0], operands[1]);\n-  DONE;\n-})\n-\n ;; In this insn, operand 1 should be low, and operand 2 the high part of the\n ;; dest vector.\n "}, {"sha": "6bb10db8a9408b23360d2c3d5fe508471d958719", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -7941,14 +7941,6 @@ aarch64_simd_const_bounds (rtx operand, HOST_WIDE_INT low, HOST_WIDE_INT high)\n     error (\"constant out of range\");\n }\n \n-/* Emit code to reinterpret one AdvSIMD type as another,\n-   without altering bits.  */\n-void\n-aarch64_simd_reinterpret (rtx dest, rtx src)\n-{\n-  emit_move_insn (dest, gen_lowpart (GET_MODE (dest), src));\n-}\n-\n /* Emit code to place a AdvSIMD pair result in memory locations (with equal\n    registers).  */\n void"}, {"sha": "e62c783e08e3422d2793e0130887623acb57a08c", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -2830,7 +2830,7 @@ vgetq_lane_u64 (uint64x2_t __a, const int __b)\n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n vreinterpret_p8_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv8qiv1df_ps (__a);\n+  return (poly8x8_t) __a;\n }\n \n __extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n@@ -2962,7 +2962,7 @@ vreinterpretq_p8_p16 (poly16x8_t __a)\n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n vreinterpret_p16_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv4hiv1df_ps (__a);\n+  return (poly16x4_t) __a;\n }\n \n __extension__ static __inline poly16x4_t __attribute__ ((__always_inline__))\n@@ -3094,7 +3094,7 @@ vreinterpretq_p16_p8 (poly8x16_t __a)\n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n vreinterpret_f32_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv2sfv1df (__a);\n+  return (float32x2_t) __a;\n }\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n@@ -3226,37 +3226,37 @@ vreinterpretq_f32_p16 (poly16x8_t __a)\n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_f32 (float32x2_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv2sf (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_p8 (poly8x8_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv8qi_sp (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_p16 (poly16x4_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv4hi_sp (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_s8 (int8x8_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv8qi (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_s16 (int16x4_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv4hi (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_s32 (int32x2_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv2si (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n@@ -3268,19 +3268,19 @@ vreinterpret_f64_s64 (int64x1_t __a)\n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_u8 (uint8x8_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv8qi_su (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_u16 (uint16x4_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv4hi_su (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n vreinterpret_f64_u32 (uint32x2_t __a)\n {\n-  return __builtin_aarch64_reinterpretv1dfv2si_su (__a);\n+  return (float64x1_t) __a;\n }\n \n __extension__ static __inline float64x1_t __attribute__((__always_inline__))\n@@ -3358,7 +3358,7 @@ vreinterpretq_f64_u64 (uint64x2_t __a)\n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vreinterpret_s64_f64 (float64x1_t __a)\n {\n-  return (int64x1_t) {__builtin_aarch64_reinterpretdiv1df (__a)};\n+  return (int64x1_t) __a;\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n@@ -3490,7 +3490,7 @@ vreinterpretq_s64_p16 (poly16x8_t __a)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vreinterpret_u64_f64 (float64x1_t __a)\n {\n-  return (uint64x1_t) {__builtin_aarch64_reinterpretdiv1df_us (__a)};\n+  return (uint64x1_t) __a;\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n@@ -3622,7 +3622,7 @@ vreinterpretq_u64_p16 (poly16x8_t __a)\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vreinterpret_s8_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv8qiv1df (__a);\n+  return (int8x8_t) __a;\n }\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n@@ -3754,7 +3754,7 @@ vreinterpretq_s8_p16 (poly16x8_t __a)\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vreinterpret_s16_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv4hiv1df (__a);\n+  return (int16x4_t) __a;\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n@@ -3886,7 +3886,7 @@ vreinterpretq_s16_p16 (poly16x8_t __a)\n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vreinterpret_s32_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv2siv1df (__a);\n+  return (int32x2_t) __a;\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n@@ -4018,7 +4018,7 @@ vreinterpretq_s32_p16 (poly16x8_t __a)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vreinterpret_u8_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv8qiv1df_us (__a);\n+  return (uint8x8_t) __a;\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n@@ -4150,7 +4150,7 @@ vreinterpretq_u8_p16 (poly16x8_t __a)\n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vreinterpret_u16_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv4hiv1df_us (__a);\n+  return (uint16x4_t) __a;\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n@@ -4282,7 +4282,7 @@ vreinterpretq_u16_p16 (poly16x8_t __a)\n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vreinterpret_u32_f64 (float64x1_t __a)\n {\n-  return __builtin_aarch64_reinterpretv2siv1df_us (__a);\n+  return (uint32x2_t) __a;\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))"}, {"sha": "5ecb8e5d82519ab4f2cfb58b49b60c3656a5637f", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc138f7bee702b3cc0237add039923edda9fcc24/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=bc138f7bee702b3cc0237add039923edda9fcc24", "patch": "@@ -144,9 +144,6 @@\n ;; Double vector modes for combines.\n (define_mode_iterator VDIC [V8QI V4HI V2SI])\n \n-;; Double vector modes, inc. V1DF and the DI \"vector\" mode, for VREINTERPRET.\n-(define_mode_iterator VD_RE [V8QI V4HI V2SI DI V1DF V2SF])\n-\n ;; Double vector modes inc V1DF\n (define_mode_iterator VD1 [V8QI V4HI V2SI V2SF V1DF])\n "}]}