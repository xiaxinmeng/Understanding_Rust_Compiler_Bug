{"sha": "f914a1e291319daebae373b3f886c7300dfdeec1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxNGExZTI5MTMxOWRhZWJhZTM3M2IzZjg4NmM3MzAwZGZkZWVjMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-07-13T13:04:04Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-07-13T13:04:04Z"}, "message": "P0512R0 - Deduction from an initializer list.\n\n\t* pt.c (do_class_deduction): Do list deduction in two phases.\n\nFrom-SVN: r250183", "tree": {"sha": "d93616aeb9e1950ddde30a96c0c9cd8e9a552521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d93616aeb9e1950ddde30a96c0c9cd8e9a552521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f914a1e291319daebae373b3f886c7300dfdeec1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f914a1e291319daebae373b3f886c7300dfdeec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f914a1e291319daebae373b3f886c7300dfdeec1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f914a1e291319daebae373b3f886c7300dfdeec1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62c1a252aa75de5bf3c44ffa867e761a61279049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c1a252aa75de5bf3c44ffa867e761a61279049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c1a252aa75de5bf3c44ffa867e761a61279049"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "02214c9953b9a71d90452d5518734da95fb23e85", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f914a1e291319daebae373b3f886c7300dfdeec1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f914a1e291319daebae373b3f886c7300dfdeec1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f914a1e291319daebae373b3f886c7300dfdeec1", "patch": "@@ -1,3 +1,8 @@\n+2017-07-12  Jason Merrill  <jason@redhat.com>\n+\n+\tP0512R0 - Deduction from an initializer list.\n+\t* pt.c (do_class_deduction): Do list deduction in two phases.\n+\n 2017-07-12  Nathan Sidwell  <nathan@acm.org>\n \n \t* cp-tree.h (DECL_CONSTRUCTOR_P, DECL_MAYBE_IN_CHARGE_CONSTRUCTOR,"}, {"sha": "0df6854f6481bca0e0177b51ce8e9662e2c399f5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f914a1e291319daebae373b3f886c7300dfdeec1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f914a1e291319daebae373b3f886c7300dfdeec1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f914a1e291319daebae373b3f886c7300dfdeec1", "patch": "@@ -25329,14 +25329,20 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \n   tree type = TREE_TYPE (tmpl);\n \n+  bool try_list_ctor = false;\n+\n   vec<tree,va_gc> *args;\n   if (init == NULL_TREE\n       || TREE_CODE (init) == TREE_LIST)\n     args = make_tree_vector_from_list (init);\n-  else if (BRACE_ENCLOSED_INITIALIZER_P (init)\n-\t   && !TYPE_HAS_LIST_CTOR (type)\n-\t   && !is_std_init_list (type))\n-    args = make_tree_vector_from_ctor (init);\n+  else if (BRACE_ENCLOSED_INITIALIZER_P (init))\n+    {\n+      try_list_ctor = TYPE_HAS_LIST_CTOR (type);\n+      if (try_list_ctor || is_std_init_list (type))\n+\targs = make_tree_vector_single (init);\n+      else\n+\targs = make_tree_vector_from_ctor (init);\n+    }\n   else\n     args = make_tree_vector_single (init);\n \n@@ -25391,13 +25397,43 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n \tsaw_ctor = true;\n       }\n \n-  if (args->length () < 2)\n+  tree call = error_mark_node;\n+\n+  /* If this is list-initialization and the class has a list constructor, first\n+     try deducing from the list as a single argument, as [over.match.list].  */\n+  tree list_cands = NULL_TREE;\n+  if (try_list_ctor && cands)\n+    for (lkp_iterator iter (cands); iter; ++iter)\n+      {\n+\ttree dg = *iter;\n+\tif (is_list_ctor (dg))\n+\t  list_cands = lookup_add (dg, list_cands);\n+      }\n+  if (list_cands)\n+    {\n+      ++cp_unevaluated_operand;\n+      call = build_new_function_call (list_cands, &args, tf_decltype);\n+      --cp_unevaluated_operand;\n+\n+      if (call == error_mark_node)\n+\t{\n+\t  /* That didn't work, now try treating the list as a sequence of\n+\t     arguments.  */\n+\t  release_tree_vector (args);\n+\t  args = make_tree_vector_from_ctor (init);\n+\t}\n+    }\n+\n+  /* Maybe generate an implicit deduction guide.  */\n+  if (call == error_mark_node && args->length () < 2)\n     {\n       tree gtype = NULL_TREE;\n \n       if (args->length () == 1)\n+\t/* Generate a copy guide.  */\n \tgtype = build_reference_type (type);\n       else if (!saw_ctor)\n+\t/* Generate a default guide.  */\n \tgtype = type;\n \n       if (gtype)\n@@ -25419,22 +25455,29 @@ do_class_deduction (tree ptype, tree tmpl, tree init, int flags,\n       return error_mark_node;\n     }\n \n-  ++cp_unevaluated_operand;\n-  tree t = build_new_function_call (cands, &args, tf_decltype);\n+  if (call == error_mark_node)\n+    {\n+      ++cp_unevaluated_operand;\n+      call = build_new_function_call (cands, &args, tf_decltype);\n+      --cp_unevaluated_operand;\n+    }\n \n-  if (t == error_mark_node && (complain & tf_warning_or_error))\n+  if (call == error_mark_node && (complain & tf_warning_or_error))\n     {\n       error (\"class template argument deduction failed:\");\n-      t = build_new_function_call (cands, &args, complain | tf_decltype);\n+\n+      ++cp_unevaluated_operand;\n+      call = build_new_function_call (cands, &args, complain | tf_decltype);\n+      --cp_unevaluated_operand;\n+\n       if (elided)\n \tinform (input_location, \"explicit deduction guides not considered \"\n \t\t\"for copy-initialization\");\n     }\n \n-  --cp_unevaluated_operand;\n   release_tree_vector (args);\n \n-  return cp_build_qualified_type (TREE_TYPE (t), cp_type_quals (ptype));\n+  return cp_build_qualified_type (TREE_TYPE (call), cp_type_quals (ptype));\n }\n \n /* Replace occurrences of 'auto' in TYPE with the appropriate type deduced"}, {"sha": "5e7fa3a2c51162ac70c31b8197f271c482dfb94c", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction41.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f914a1e291319daebae373b3f886c7300dfdeec1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f914a1e291319daebae373b3f886c7300dfdeec1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction41.C?ref=f914a1e291319daebae373b3f886c7300dfdeec1", "patch": "@@ -0,0 +1,19 @@\n+// { dg-options -std=c++1z }\n+\n+#include <initializer_list>\n+\n+struct B { };\n+\n+template <class T>\n+struct A\n+{\n+  A(std::initializer_list<T>);\n+  A(T, B);\n+};\n+\n+A a { 1, B() };\n+\n+template <class,class> struct same;\n+template <class T> struct same<T,T> { };\n+\n+same<decltype(a), A<int>> s;"}]}