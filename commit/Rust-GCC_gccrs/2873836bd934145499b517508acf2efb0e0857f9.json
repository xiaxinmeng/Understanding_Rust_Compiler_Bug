{"sha": "2873836bd934145499b517508acf2efb0e0857f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3MzgzNmJkOTM0MTQ1NDk5YjUxNzUwOGFjZjJlZmIwZTA4NTdmOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-29T14:36:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-29T14:36:35Z"}, "message": "h8300-protos.h: Add prototypes for const_int_qi_operand and const_int_hi_operand.\n\n\t* config/h8300/h8300-protos.h: Add prototypes for\n\tconst_int_qi_operand and const_int_hi_operand.\n\t* config/h8300/h8300.c (const_int_qi_operand): New.\n\t(const_int_hi_operand): Likewise.\n\t* config/h8300/h8300.md (three peepholes): New.\n\nFrom-SVN: r60600", "tree": {"sha": "eb9c2855ec2d99ea5f3e78307fe8a6dd97724558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb9c2855ec2d99ea5f3e78307fe8a6dd97724558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2873836bd934145499b517508acf2efb0e0857f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2873836bd934145499b517508acf2efb0e0857f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2873836bd934145499b517508acf2efb0e0857f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2873836bd934145499b517508acf2efb0e0857f9/comments", "author": null, "committer": null, "parents": [{"sha": "b63d28bf68c4c23e55a596371103cd55c560f13c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b63d28bf68c4c23e55a596371103cd55c560f13c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b63d28bf68c4c23e55a596371103cd55c560f13c"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "52660f7409dec7044a7166f3c6f7f4e6ec245114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2873836bd934145499b517508acf2efb0e0857f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2873836bd934145499b517508acf2efb0e0857f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2873836bd934145499b517508acf2efb0e0857f9", "patch": "@@ -1,3 +1,11 @@\n+2002-12-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Add prototypes for\n+\tconst_int_qi_operand and const_int_hi_operand.\n+\t* config/h8300/h8300.c (const_int_qi_operand): New.\n+\t(const_int_hi_operand): Likewise.\n+\t* config/h8300/h8300.md (three peepholes): New.\n+\n 2002-12-28  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* doc/cpp.texi, doc/gcc.texi, doc/gccint.texi, doc/install.texi:"}, {"sha": "e18dc247627f101d4371ddeae59dde03c02e7b46", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2873836bd934145499b517508acf2efb0e0857f9/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2873836bd934145499b517508acf2efb0e0857f9/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=2873836bd934145499b517508acf2efb0e0857f9", "patch": "@@ -64,6 +64,8 @@ extern int bit_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int const_le_2_operand PARAMS ((rtx, enum machine_mode));\n extern int const_le_6_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_int_qi_operand PARAMS ((rtx, enum machine_mode));\n+extern int const_int_hi_operand PARAMS ((rtx, enum machine_mode));\n extern int incdec_operand PARAMS ((rtx, enum machine_mode));\n extern int bit_operator PARAMS ((rtx, enum machine_mode));\n extern int nshift_operator PARAMS ((rtx, enum machine_mode));"}, {"sha": "afa43c14b54fda4baa37a8541763b13ec94bd433", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2873836bd934145499b517508acf2efb0e0857f9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2873836bd934145499b517508acf2efb0e0857f9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=2873836bd934145499b517508acf2efb0e0857f9", "patch": "@@ -1851,6 +1851,28 @@ const_le_6_operand (x, mode)\n \t  && abs (INTVAL (x)) <= 6);\n }\n \n+/* Return nonzero if X is a constant expressible in QImode.  */\n+\n+int\n+const_int_qi_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && (INTVAL (x) & 0xff) == INTVAL (x));\n+}\n+\n+/* Return nonzero if X is a constant expressible in HImode.  */\n+\n+int\n+const_int_hi_operand (x, mode)\n+     rtx x;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (x) == CONST_INT\n+\t  && (INTVAL (x) & 0xffff) == INTVAL (x));\n+}\n+\n /* Return nonzero if X is a constant suitable for inc/dec.  */\n \n int"}, {"sha": "b377961948be6db8f37e653bc96b7d48545592a8", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2873836bd934145499b517508acf2efb0e0857f9/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2873836bd934145499b517508acf2efb0e0857f9/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=2873836bd934145499b517508acf2efb0e0857f9", "patch": "@@ -2962,3 +2962,77 @@\n \t\t      (pc)))]\n   \"operands[1] = GEN_INT (- INTVAL (operands[1]));\n    split_adds_subs (SImode, operands, 1);\")\n+\n+;; Narrow the mode of testing if possible.\n+\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t(and:HI (match_dup 0)\n+\t\t(match_operand:HI 1 \"const_int_qi_operand\" \"\")))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"find_regno_note (next_nonnote_insn (insn), REG_DEAD, REGNO (operands[0]))\"\n+  [(set (match_dup 4)\n+\t(and:QI (match_dup 4)\n+\t\t(match_dup 5)))\n+   (set (cc0)\n+\t(match_dup 4))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"operands[4] = gen_rtx_REG (QImode, REGNO (operands[0]));\n+   operands[5] = GEN_INT (trunc_int_for_mode (INTVAL (operands[1]), QImode));\")\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (match_dup 0)\n+\t\t(match_operand:SI 1 \"const_int_qi_operand\" \"\")))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"find_regno_note (next_nonnote_insn (insn), REG_DEAD, REGNO (operands[0]))\"\n+  [(set (match_dup 4)\n+\t(and:QI (match_dup 4)\n+\t\t(match_dup 5)))\n+   (set (cc0)\n+\t(match_dup 4))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"operands[4] = gen_rtx_REG (QImode, REGNO (operands[0]));\n+   operands[5] = GEN_INT (trunc_int_for_mode (INTVAL (operands[1]), QImode));\")\n+\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+\t(and:SI (match_dup 0)\n+\t\t(match_operand:SI 1 \"const_int_hi_operand\" \"\")))\n+   (set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"find_regno_note (next_nonnote_insn (insn), REG_DEAD, REGNO (operands[0]))\"\n+  [(set (match_dup 4)\n+\t(and:HI (match_dup 4)\n+\t\t(match_dup 5)))\n+   (set (cc0)\n+\t(match_dup 4))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"operands[4] = gen_rtx_REG (HImode, REGNO (operands[0]));\n+   operands[5] = GEN_INT (trunc_int_for_mode (INTVAL (operands[1]), HImode));\")"}]}