{"sha": "7763473eb959acdbe5023c7527e964e495111384", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc2MzQ3M2ViOTU5YWNkYmU1MDIzYzc1MjdlOTY0ZTQ5NTExMTM4NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-07-17T12:44:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-07-17T12:44:05Z"}, "message": "re PR tree-optimization/40321 (internal compiler error: in compute_antic, at tree-ssa-pre.c:2501)\n\n2009-07-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/40321\n\t* tree-ssa-pre.c (add_to_exp_gen): Also add names defined by\n\tPHI nodes to the maximal set.\n\t(make_values_for_phi): Add PHI arguments to the maximal set.\n\t(execute_pre): Dump PHI_GEN and the maximal set.\n\n\t* gcc.c-torture/compile/pr40321.c: New testcase.\n\t* g++.dg/torture/pr40321.C: Likewise.\n\nFrom-SVN: r149744", "tree": {"sha": "e32efbf1a581b8fbb47ad39a277114734b09202c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e32efbf1a581b8fbb47ad39a277114734b09202c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7763473eb959acdbe5023c7527e964e495111384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7763473eb959acdbe5023c7527e964e495111384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7763473eb959acdbe5023c7527e964e495111384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7763473eb959acdbe5023c7527e964e495111384/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4f934809190163d548edbde5bae728bf954c5702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f934809190163d548edbde5bae728bf954c5702", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f934809190163d548edbde5bae728bf954c5702"}], "stats": {"total": 87, "additions": 73, "deletions": 14}, "files": [{"sha": "5a2a80b8f125882a58844321f74c2c0c121bc943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7763473eb959acdbe5023c7527e964e495111384/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7763473eb959acdbe5023c7527e964e495111384/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7763473eb959acdbe5023c7527e964e495111384", "patch": "@@ -1,3 +1,11 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40321\n+\t* tree-ssa-pre.c (add_to_exp_gen): Also add names defined by\n+\tPHI nodes to the maximal set.\n+\t(make_values_for_phi): Add PHI arguments to the maximal set.\n+\t(execute_pre): Dump PHI_GEN and the maximal set.\n+\n 2009-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/40780"}, {"sha": "d35fe72d9ff8d844b8c05cb13e965b40c8b6e335", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7763473eb959acdbe5023c7527e964e495111384", "patch": "@@ -1,3 +1,9 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/40321\n+\t* gcc.c-torture/compile/pr40321.c: New testcase.\n+\t* g++.dg/torture/pr40321.C: Likewise.\n+\n 2009-07-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/40780"}, {"sha": "9177431098ec8e8ff7f36c0bd51aa6df944672bd", "filename": "gcc/testsuite/g++.dg/torture/pr40321.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40321.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40321.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr40321.C?ref=7763473eb959acdbe5023c7527e964e495111384", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+\n+struct VectorD2\n+{\n+  VectorD2() : x(0), y(0) { }\n+  VectorD2(int _x, int _y) : x(_x), y(_y) { }\n+  int x, y;\n+  int GetLength2() const { return x*x + y*y; };\n+  VectorD2 operator+(const VectorD2 vec) const {\n+      return VectorD2(x+vec.x,y+vec.y);\n+  }\n+};\n+struct Shape\n+{\n+  enum Type { ST_RECT, ST_CIRCLE } type;\n+  VectorD2 pos;\n+  VectorD2 radius;\n+  bool CollisionWith(const Shape& s) const;\n+};\n+bool Shape::CollisionWith(const Shape& s) const\n+{\n+  if(type == ST_CIRCLE && s.type == ST_RECT)\n+    return s.CollisionWith(*this);\n+  return (pos + s.pos).GetLength2() < (radius + s.radius).GetLength2();\n+}"}, {"sha": "a2f83ed8d84af868b94cd4959b277e3cdcb4ccf5", "filename": "gcc/testsuite/gcc.c-torture/compile/pr40321.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr40321.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr40321.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr40321.c?ref=7763473eb959acdbe5023c7527e964e495111384", "patch": "@@ -0,0 +1,12 @@\n+struct X { int flag; int pos; };\n+int foo(struct X *a, struct X *b)\n+{\n+  while (1)\n+    {\n+      if (a->flag)\n+\tbreak;\n+      ({ struct X *tmp = a; a = b; b = tmp; });\n+    }\n+\n+  return a->pos + b->pos;\n+}"}, {"sha": "96ca5edb0f3fb46255d3de28cd9126e4e37079b0", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7763473eb959acdbe5023c7527e964e495111384/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=7763473eb959acdbe5023c7527e964e495111384", "patch": "@@ -1996,8 +1996,7 @@ vro_valid_in_sets (bitmap_set_t set1, bitmap_set_t set2,\n    ONLY SET2 CAN BE NULL.\n    This means that we have a leader for each part of the expression\n    (if it consists of values), or the expression is an SSA_NAME.\n-   For loads/calls, we also see if the vuse is killed in this block.\n-*/\n+   For loads/calls, we also see if the vuse is killed in this block.  */\n \n static bool\n valid_in_sets (bitmap_set_t set1, bitmap_set_t set2, pre_expr expr,\n@@ -3625,11 +3624,7 @@ insert (void)\n }\n \n \n-/* Add OP to EXP_GEN (block), and possibly to the maximal set if it is\n-   not defined by a phi node.\n-   PHI nodes can't go in the maximal sets because they are not in\n-   TMP_GEN, so it is possible to get into non-monotonic situations\n-   during ANTIC calculation, because it will *add* bits.  */\n+/* Add OP to EXP_GEN (block), and possibly to the maximal set.  */\n \n static void\n add_to_exp_gen (basic_block block, tree op)\n@@ -3641,9 +3636,7 @@ add_to_exp_gen (basic_block block, tree op)\n \treturn;\n       result = get_or_alloc_expr_for_name (op);\n       bitmap_value_insert_into_set (EXP_GEN (block), result);\n-      if (TREE_CODE (op) != SSA_NAME\n-\t  || gimple_code (SSA_NAME_DEF_STMT (op)) != GIMPLE_PHI)\n-\tbitmap_value_insert_into_set (maximal_set, result);\n+      bitmap_value_insert_into_set (maximal_set, result);\n     }\n }\n \n@@ -3662,6 +3655,20 @@ make_values_for_phi (gimple phi, basic_block block)\n       add_to_value (get_expr_value_id (e), e);\n       bitmap_insert_into_set (PHI_GEN (block), e);\n       bitmap_value_insert_into_set (AVAIL_OUT (block), e);\n+      if (!in_fre)\n+\t{\n+\t  unsigned i;\n+\t  for (i = 0; i < gimple_phi_num_args (phi); ++i)\n+\t    {\n+\t      tree arg = gimple_phi_arg_def (phi, i);\n+\t      if (TREE_CODE (arg) == SSA_NAME)\n+\t\t{\n+\t\t  e = get_or_alloc_expr_for_name (arg);\n+\t\t  add_to_value (get_expr_value_id (e), e);\n+\t\t  bitmap_value_insert_into_set (maximal_set, e);\n+\t\t}\n+\t    }\n+\t}\n     }\n }\n \n@@ -4509,11 +4516,12 @@ execute_pre (bool do_fre ATTRIBUTE_UNUSED)\n       FOR_ALL_BB (bb)\n \t{\n \t  print_bitmap_set (dump_file, EXP_GEN (bb), \"exp_gen\", bb->index);\n-\t  print_bitmap_set (dump_file, TMP_GEN (bb), \"tmp_gen\",\n-\t\t\t\t  bb->index);\n-\t  print_bitmap_set (dump_file, AVAIL_OUT (bb), \"avail_out\",\n-\t\t\t\t  bb->index);\n+\t  print_bitmap_set (dump_file, PHI_GEN (bb), \"phi_gen\", bb->index);\n+\t  print_bitmap_set (dump_file, TMP_GEN (bb), \"tmp_gen\", bb->index);\n+\t  print_bitmap_set (dump_file, AVAIL_OUT (bb), \"avail_out\", bb->index);\n \t}\n+\n+      print_bitmap_set (dump_file, maximal_set, \"maximal\", 0);\n     }\n \n   /* Insert can get quite slow on an incredibly large number of basic"}]}