{"sha": "3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2OGIwNTA0Y2ZjMTJlMWIxZjdkNmViMzg1ZjRkNzQyN2ExYjMyYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-09T07:38:02Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-08-09T07:38:02Z"}, "message": "re PR target/49781 ([x32] Unnecessary lea in x32 mode)\n\n\tPR target/49781\n\t* config/i386/i386.md (reload_noff_load): New.\n\t(reload_noff_store): Ditto.\n\t* config/i386/i386.c (ix86_secondary_reload): Use\n\tCODE_FOR_reload_noff_load and CODE_FOR_reload_noff_store to handle\n\tdouble-word moves from/to non-offsetable addresses instead of\n\tgenerating XMM temporary.\n\nFrom-SVN: r177583", "tree": {"sha": "33c06d4aae57b46692c60158762e4baab5567af5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33c06d4aae57b46692c60158762e4baab5567af5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/comments", "author": null, "committer": null, "parents": [{"sha": "2292df601d58ad005a47652004c8b76dafd3f00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2292df601d58ad005a47652004c8b76dafd3f00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2292df601d58ad005a47652004c8b76dafd3f00f"}], "stats": {"total": 79, "additions": 62, "deletions": 17}, "files": [{"sha": "5832ec1f76011c974ba298101049c5a4935670a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "patch": "@@ -1,3 +1,13 @@\n+2011-08-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/49781\n+\t* config/i386/i386.md (reload_noff_load): New.\n+\t(reload_noff_store): Ditto.\n+\t* config/i386/i386.c (ix86_secondary_reload): Use\n+\tCODE_FOR_reload_noff_load and CODE_FOR_reload_noff_store to handle\n+\tdouble-word moves from/to non-offsetable addresses instead of\n+\tgenerating XMM temporary.\n+\n 2011-08-09  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/mmix/mmix.h (REG_OK_FOR_BASE_P, REG_OK_FOR_INDEX_P): Remove.\n@@ -47,15 +57,13 @@\n \t(tree-streamer.o): New.\n \t(tree-streamer-in.o): New.\n \t(tree-streamer-out.o): New.\n-\t(lto-cgraph.o): Add dependency on DATA_STREAMER_H and\n-\tTREE_STREAMER_H.\n+\t(lto-cgraph.o): Add dependency on DATA_STREAMER_H and TREE_STREAMER_H.\n \t(lto-streamer-in.o): Add dependency on DATA_STREAMER_H,\n \tGIMPLE_STREAMER_H and TREE_STREAMER_H.\n \t(lto-streamer-out.o): Add dependency on DATA_STREAMER_H,\n \tGIMPLE_STREAMER_H and TREE_STREAMER_H.\n \t(lto-streamer.o): Add dependency on STREAMER_HOOKS_H.\n-\t(ipa-prop.o): Add dependency on DATA_STREAMER_H and\n-\tTREE_STREAMER_H.\n+\t(ipa-prop.o): Add dependency on DATA_STREAMER_H and TREE_STREAMER_H.\n \t(ipa-inline-analysis.o): Likewise.\n \t(ipa-pure-const.o): Likewise.\n \t* data-streamer-in.c: New.\n@@ -80,8 +88,7 @@\n \t(lto_output_sleb128_stream): Likewise.\n \t(bp_pack_var_len_unsigned): Likewise.\n \t(bp_pack_var_len_int): Likewise.\n-\t* lto-streamer-in.c: Include data-streamer.h and\n-\tgimple-streamer.h.\n+\t* lto-streamer-in.c: Include data-streamer.h and gimple-streamer.h.\n \t(struct string_slot): Remove.  Update all users.\n \t(lto_tag_check_set): Make extern.\n \t(lto_tag_check_range): Move to lto-streamer.h.\n@@ -95,8 +102,7 @@\n \t(lto_input_string): Move to data-streamer-in.c\n \t(input_record_start): Move to data-streamer.h\n \t(canon_file_name): Use new definition of struct string_slot\n-\tfrom data-streamer.h.\n-\tSet S_SLOT.LEN.\n+\tfrom data-streamer.h.  Set S_SLOT.LEN.\n \t(lto_input_location): Make extern.\n \t(lto_input_chain): Move to tree-streamer-in.c.\n \t(lto_init_eh): Make extern.\n@@ -211,8 +217,7 @@\n \t(streamer_hooks_init): Move to streamer-hooks.c.\n \t* lto-streamer.h: Include diagnostic.h\n \t(struct output_block, struct lto_input_block,\n-\tstruct data_in, struct bitpack_d): Remove forward\n-\tdeclarations.\n+\tstruct data_in, struct bitpack_d): Remove forward declarations.\n \t(struct bitpack_d): Move to data-streamer.h.\n \t(struct lto_streamer_cache_d): Move to tree-streamer.h.\n \t(struct streamer_hooks): Move to streamer-hooks.h.\n@@ -253,10 +258,9 @@\n \t* gthr.h [_PTHREADS95]: Remove.\n \t* configure.ac (enable_threads): Remove posix95.\n \t* configure: Regenerate.\n-\t* doc/install.texi (Configuration, --enable-threads): Remove\n-\tposix95.\n+\t* doc/install.texi (Configuration, --enable-threads): Remove posix95.\n \n-2011-08-07  Uros Bizjak  <ubizjak@gmail.com>\n+2011-08-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/49781\n \t* config/i386/i386.c (ix86_decompose_address): Allow zero-extended"}, {"sha": "6810356567973aebc9361457ae6f11499bb17ac5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "patch": "@@ -28247,17 +28247,24 @@ ix86_preferred_output_reload_class (rtx x, reg_class_t regclass)\n \n static reg_class_t\n ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n-\t\t       enum machine_mode mode,\n-\t\t       secondary_reload_info *sri ATTRIBUTE_UNUSED)\n+\t\t       enum machine_mode mode, secondary_reload_info *sri)\n {\n   /* Double-word spills from general registers to non-offsettable memory\n-     references (zero-extended addresses) go through XMM register.  */\n+     references (zero-extended addresses) require special handling.  */\n   if (TARGET_64BIT\n       && MEM_P (x)\n       && GET_MODE_SIZE (mode) > UNITS_PER_WORD\n       && rclass == GENERAL_REGS\n       && !offsettable_memref_p (x))\n-    return SSE_REGS;\n+    {\n+      sri->icode = (in_p\n+\t\t    ? CODE_FOR_reload_noff_load\n+\t\t    : CODE_FOR_reload_noff_store);\n+      /* Add the cost of move to a temporary.  */\n+      sri->extra_cost = 1;\n+\n+      return NO_REGS;\n+    }\n \n   /* QImode spills from non-QI registers require\n      intermediate register on 32bit targets.  */"}, {"sha": "9dc5c8539800820df7eb5d9bb5a7e9a879ff3ebb", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3968b0504cfc12e1b1f7d6eb385f4d7427a1b32b", "patch": "@@ -2073,6 +2073,40 @@\n        (const_string \"orig\")))\n    (set_attr \"mode\" \"SI,DI,DI,DI,SI,DI,DI,DI,DI,DI,TI,DI,TI,DI,DI,DI,DI,DI\")])\n \n+;; Reload patterns to support multi-word load/store\n+;; with non-offsetable address.\n+(define_expand \"reload_noff_store\"\n+  [(parallel [(match_operand 0 \"memory_operand\" \"=m\")\n+              (match_operand 1 \"register_operand\" \"r\")\n+              (match_operand:DI 2 \"register_operand\" \"=&r\")])]\n+  \"TARGET_64BIT\"\n+{\n+  rtx mem = operands[0];\n+  rtx addr = XEXP (mem, 0);\n+\n+  emit_move_insn (operands[2], addr);\n+  mem = replace_equiv_address_nv (mem, operands[2]);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, mem, operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"reload_noff_load\"\n+  [(parallel [(match_operand 0 \"register_operand\" \"=r\")\n+              (match_operand 1 \"memory_operand\" \"m\")\n+              (match_operand:DI 2 \"register_operand\" \"=r\")])]\n+  \"TARGET_64BIT\"\n+{\n+  rtx mem = operands[1];\n+  rtx addr = XEXP (mem, 0);\n+\n+  emit_move_insn (operands[2], addr);\n+  mem = replace_equiv_address_nv (mem, operands[2]);\n+\n+  emit_insn (gen_rtx_SET (VOIDmode, operands[0], mem));\n+  DONE;\n+})\n+\n ;; Convert impossible stores of immediate to existing instructions.\n ;; First try to get scratch register and go through it.  In case this\n ;; fails, move by 32bit parts."}]}