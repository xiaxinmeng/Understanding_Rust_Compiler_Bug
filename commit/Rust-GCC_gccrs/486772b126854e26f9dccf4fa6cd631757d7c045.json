{"sha": "486772b126854e26f9dccf4fa6cd631757d7c045", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2NzcyYjEyNjg1NGUyNmY5ZGNjZjRmYTZjZDYzMTc1N2Q3YzA0NQ==", "commit": {"author": {"name": "Wolfgang Bangerth", "email": "bangerth@dealii.org", "date": "2003-05-15T15:01:06Z"}, "committer": {"name": "Wolfgang Bangerth", "email": "bangerth@gcc.gnu.org", "date": "2003-05-15T15:01:06Z"}, "message": "bugreport.texi: Remove most of the bug reporting instructions and merge them into bugs.html.\n\n        * doc/bugreport.texi: Remove most of the bug reporting\n        instructions and merge them into bugs.html.\n\nFrom-SVN: r66825", "tree": {"sha": "50262d69f96e7c5a4f2557b5a79f44ddfd1c61f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50262d69f96e7c5a4f2557b5a79f44ddfd1c61f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486772b126854e26f9dccf4fa6cd631757d7c045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486772b126854e26f9dccf4fa6cd631757d7c045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486772b126854e26f9dccf4fa6cd631757d7c045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486772b126854e26f9dccf4fa6cd631757d7c045/comments", "author": null, "committer": null, "parents": [{"sha": "e083f3f9268a7baf16973065da1debb88d1b90d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e083f3f9268a7baf16973065da1debb88d1b90d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e083f3f9268a7baf16973065da1debb88d1b90d0"}], "stats": {"total": 656, "additions": 24, "deletions": 632}, "files": [{"sha": "4ffd196eb7669c1cfbe5dc41c4f06a61b7fdc852", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=486772b126854e26f9dccf4fa6cd631757d7c045", "patch": "@@ -1,3 +1,8 @@\n+2003-05-15  Wolfgang Bangerth <bangerth@dealii.org>\n+\n+\t* doc/bugreport.texi: Remove most of the bug reporting\n+\tinstructions and merge them into bugs.html.\n+\n 2003-05-14  Eric Christopher  <echristo@redhat.com>\n \n \t* combine.c: Fix header comments."}, {"sha": "41e6e7a2c2e288ddc37ba246844157fd4f1574a2", "filename": "gcc/doc/bugreport.texi", "status": "modified", "additions": 8, "deletions": 292, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2Fdoc%2Fbugreport.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2Fdoc%2Fbugreport.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fbugreport.texi?ref=486772b126854e26f9dccf4fa6cd631757d7c045", "patch": "@@ -1,5 +1,5 @@\n @c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-@c 1999, 2000, 2001 Free Software Foundation, Inc.\n+@c 1999, 2000, 2001, 2003 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -29,14 +29,12 @@ information that makes for fixing the bug.\n \n @menu\n * Criteria:  Bug Criteria.   Have you really found a bug?\n-* Where: Bug Lists.\t     Where to send your bug report.\n * Reporting: Bug Reporting.  How to report a bug effectively.\n-* GNATS: gccbug.             You can use a bug reporting tool.\n * Known: Trouble.            Known problems.\n * Help: Service.             Where to ask for help.\n @end menu\n \n-@node Bug Criteria,Bug Lists,,Bugs\n+@node Bug Criteria,Bug Reporting,,Bugs\n @section Have You Found a Bug?\n @cindex bug criteria\n \n@@ -99,293 +97,11 @@ If you are an experienced user of one of the languages GCC supports, your\n suggestions for improvement of GCC are welcome in any case.\n @end itemize\n \n-@node Bug Lists,Bug Reporting,Bug Criteria,Bugs\n-@section Where to Report Bugs\n-@cindex bug report mailing lists\n-@kindex gcc-bugs@@gcc.gnu.org or bug-gcc@@gnu.org\n-\n-Send bug reports for the GNU Compiler Collection to\n-@email{gcc-bugs@@gcc.gnu.org}.  In accordance with the GNU-wide\n-convention, in which bug reports for tool ``foo'' are sent\n-to @samp{bug-foo@@gnu.org}, the address @email{bug-gcc@@gnu.org}\n-may also be used; it will forward to the address given above.\n-\n-Please read @uref{http://gcc.gnu.org/bugs.html} for additional and/or\n-more up-to-date bug reporting instructions before you post a bug report.\n-\n-@node Bug Reporting,gccbug,Bug Lists,Bugs\n-@section How to Report Bugs\n+@node Bug Reporting,Trouble,Bug Criteria,Bugs\n+@section How and where to Report Bugs\n @cindex compiler bugs, reporting\n \n-The fundamental principle of reporting bugs usefully is this:\n-@strong{report all the facts}.  If you are not sure whether to state a\n-fact or leave it out, state it!\n-\n-Often people omit facts because they think they know what causes the\n-problem and they conclude that some details don't matter.  Thus, you might\n-assume that the name of the variable you use in an example does not matter.\n-Well, probably it doesn't, but one cannot be sure.  Perhaps the bug is a\n-stray memory reference which happens to fetch from the location where that\n-name is stored in memory; perhaps, if the name were different, the contents\n-of that location would fool the compiler into doing the right thing despite\n-the bug.  Play it safe and give a specific, complete example.  That is the\n-easiest thing for you to do, and the most helpful.\n-\n-Keep in mind that the purpose of a bug report is to enable someone to\n-fix the bug if it is not known.  It isn't very important what happens if\n-the bug is already known.  Therefore, always write your bug reports on\n-the assumption that the bug is not known.\n-\n-Sometimes people give a few sketchy facts and ask, ``Does this ring a\n-bell?''  This cannot help us fix a bug, so it is basically useless.  We\n-respond by asking for enough details to enable us to investigate.\n-You might as well expedite matters by sending them to begin with.\n-\n-Try to make your bug report self-contained.  If we have to ask you for\n-more information, it is best if you include all the previous information\n-in your response, as well as the information that was missing.\n-\n-Please report each bug in a separate message.  This makes it easier for\n-us to track which bugs have been fixed and to forward your bugs reports\n-to the appropriate maintainer.\n-\n-To enable someone to investigate the bug, you should include all these\n-things:\n-\n-@itemize @bullet\n-@item\n-The version of GCC@.  You can get this by running it with the\n-@option{-v} option.\n-\n-Without this, we won't know whether there is any point in looking for\n-the bug in the current version of GCC@.\n-\n-@item\n-A complete input file that will reproduce the bug.  If the bug is in the\n-C preprocessor, send a source file and any header files that it\n-requires.  If the bug is in the compiler proper (@file{cc1}), send the\n-preprocessor output generated by adding @option{-save-temps} to the\n-compilation command (@pxref{Debugging Options}).  When you do this, use\n-the same @option{-I}, @option{-D} or @option{-U} options that you used in\n-actual compilation.  Then send the @var{input}.i or @var{input}.ii files\n-generated.\n-\n-A single statement is not enough of an example.  In order to compile it,\n-it must be embedded in a complete file of compiler input; and the bug\n-might depend on the details of how this is done.\n-\n-Without a real example one can compile, all anyone can do about your bug\n-report is wish you luck.  It would be futile to try to guess how to\n-provoke the bug.  For example, bugs in register allocation and reloading\n-frequently depend on every little detail of the function they happen in.\n-\n-Even if the input file that fails comes from a GNU program, you should\n-still send the complete test case.  Don't ask the GCC maintainers to\n-do the extra work of obtaining the program in question---they are all\n-overworked as it is.  Also, the problem may depend on what is in the\n-header files on your system; it is unreliable for the GCC maintainers\n-to try the problem with the header files available to them.  By sending\n-CPP output, you can eliminate this source of uncertainty and save us\n-a certain percentage of wild goose chases.\n-\n-@item\n-The command arguments you gave GCC to compile that example\n-and observe the bug.  For example, did you use @option{-O}?  To guarantee\n-you won't omit something important, list all the options.\n-\n-If we were to try to guess the arguments, we would probably guess wrong\n-and then we would not encounter the bug.\n-\n-@item\n-The type of machine you are using, and the operating system name and\n-version number.\n-\n-@item\n-The operands you gave to the @code{configure} command when you installed\n-the compiler.\n-\n-@item\n-A complete list of any modifications you have made to the compiler\n-source.  (We don't promise to investigate the bug unless it happens in\n-an unmodified compiler.  But if you've made modifications and don't tell\n-us, then you are sending us on a wild goose chase.)\n-\n-Be precise about these changes.  A description in English is not\n-enough---send a context diff for them.\n-\n-Adding files of your own (such as a machine description for a machine we\n-don't support) is a modification of the compiler source.\n-\n-@item\n-Details of any other deviations from the standard procedure for installing\n-GCC@.\n-\n-@item\n-A description of what behavior you observe that you believe is\n-incorrect.  For example, ``The compiler gets a fatal signal,'' or,\n-``The assembler instruction at line 208 in the output is incorrect.''\n-\n-Of course, if the bug is that the compiler gets a fatal signal, then one\n-can't miss it.  But if the bug is incorrect output, the maintainer might\n-not notice unless it is glaringly wrong.  None of us has time to study\n-all the assembler code from a 50-line C program just on the chance that\n-one instruction might be wrong.  We need @emph{you} to do this part!\n-\n-Even if the problem you experience is a fatal signal, you should still\n-say so explicitly.  Suppose something strange is going on, such as, your\n-copy of the compiler is out of synch, or you have encountered a bug in\n-the C library on your system.  (This has happened!)  Your copy might\n-crash and the copy here would not.  If you @i{said} to expect a crash,\n-then when the compiler here fails to crash, we would know that the bug\n-was not happening.  If you don't say to expect a crash, then we would\n-not know whether the bug was happening.  We would not be able to draw\n-any conclusion from our observations.\n-\n-If the problem is a diagnostic when compiling GCC with some other\n-compiler, say whether it is a warning or an error.\n-\n-Often the observed symptom is incorrect output when your program is run.\n-Sad to say, this is not enough information unless the program is short\n-and simple.  None of us has time to study a large program to figure out\n-how it would work if compiled correctly, much less which line of it was\n-compiled wrong.  So you will have to do that.  Tell us which source line\n-it is, and what incorrect result happens when that line is executed.  A\n-person who understands the program can find this as easily as finding a\n-bug in the program itself.\n-\n-@item\n-If you send examples of assembler code output from GCC,\n-please use @option{-g} when you make them.  The debugging information\n-includes source line numbers which are essential for correlating the\n-output with the input.\n-\n-@item\n-If you wish to mention something in the GCC source, refer to it by\n-context, not by line number.\n-\n-The line numbers in the development sources don't match those in your\n-sources.  Your line numbers would convey no useful information to the\n-maintainers.\n-\n-@item\n-Additional information from a debugger might enable someone to find a\n-problem on a machine which he does not have available.  However, you\n-need to think when you collect this information if you want it to have\n-any chance of being useful.\n-\n-@cindex backtrace for bug reports\n-For example, many people send just a backtrace, but that is never\n-useful by itself.  A simple backtrace with arguments conveys little\n-about GCC because the compiler is largely data-driven; the same\n-functions are called over and over for different RTL insns, doing\n-different things depending on the details of the insn.\n-\n-Most of the arguments listed in the backtrace are useless because they\n-are pointers to RTL list structure.  The numeric values of the\n-pointers, which the debugger prints in the backtrace, have no\n-significance whatever; all that matters is the contents of the objects\n-they point to (and most of the contents are other such pointers).\n-\n-In addition, most compiler passes consist of one or more loops that\n-scan the RTL insn sequence.  The most vital piece of information about\n-such a loop---which insn it has reached---is usually in a local variable,\n-not in an argument.\n-\n-@findex debug_rtx\n-What you need to provide in addition to a backtrace are the values of\n-the local variables for several stack frames up.  When a local\n-variable or an argument is an RTX, first print its value and then use\n-the GDB command @code{pr} to print the RTL expression that it points\n-to.  (If GDB doesn't run on your machine, use your debugger to call\n-the function @code{debug_rtx} with the RTX as an argument.)  In\n-general, whenever a variable is a pointer, its value is no use\n-without the data it points to.\n-@end itemize\n-\n-Here are some things that are not necessary:\n-\n-@itemize @bullet\n-@item\n-A description of the envelope of the bug.\n-\n-Often people who encounter a bug spend a lot of time investigating\n-which changes to the input file will make the bug go away and which\n-changes will not affect it.\n-\n-This is often time consuming and not very useful, because the way we\n-will find the bug is by running a single example under the debugger with\n-breakpoints, not by pure deduction from a series of examples.  You might\n-as well save your time for something else.\n-\n-Of course, if you can find a simpler example to report @emph{instead} of\n-the original one, that is a convenience.  Errors in the output will be\n-easier to spot, running under the debugger will take less time, etc.\n-Most GCC bugs involve just one function, so the most straightforward\n-way to simplify an example is to delete all the function definitions\n-except the one where the bug occurs.  Those earlier in the file may be\n-replaced by external declarations if the crucial function depends on\n-them.  (Exception: inline functions may affect compilation of functions\n-defined later in the file.)\n-\n-However, simplification is not vital; if you don't want to do this,\n-report the bug anyway and send the entire test case you used.\n-\n-@item\n-In particular, some people insert conditionals @samp{#ifdef BUG} around\n-a statement which, if removed, makes the bug not happen.  These are just\n-clutter; we won't pay any attention to them anyway.  Besides, you should\n-send us cpp output, and that can't have conditionals.\n-\n-@item\n-A patch for the bug.\n-\n-A patch for the bug is useful if it is a good one.  But don't omit the\n-necessary information, such as the test case, on the assumption that a\n-patch is all we need.  We might see problems with your patch and decide\n-to fix the problem another way, or we might not understand it at all.\n-\n-Sometimes with a program as complicated as GCC it is very hard to\n-construct an example that will make the program follow a certain path\n-through the code.  If you don't send the example, we won't be able to\n-construct one, so we won't be able to verify that the bug is fixed.\n-\n-And if we can't understand what bug you are trying to fix, or why your\n-patch should be an improvement, we won't install it.  A test case will\n-help us to understand.\n-\n-See @uref{http://gcc.gnu.org/contribute.html}\n-for guidelines on how to make it easy for us to\n-understand and install your patches.\n-\n-@item\n-A guess about what the bug is or what it depends on.\n-\n-Such guesses are usually wrong.  Even I can't guess right about such\n-things without first using the debugger to find the facts.\n-\n-@item\n-A core dump file.\n-\n-We have no way of examining a core dump for your type of machine\n-unless we have an identical system---and if we do have one,\n-we should be able to reproduce the crash ourselves.\n-@end itemize\n-\n-@node gccbug,, Bug Reporting, Bugs\n-@section The gccbug script\n-@cindex gccbug script\n-\n-To simplify creation of bug reports, and to allow better tracking of\n-reports, we use the GNATS bug tracking system.  Part of that system is\n-the @command{gccbug} script.  This is a Unix shell script, so you need a\n-shell to run it.  It is normally installed in the same directory where\n-@command{gcc} is installed.\n-\n-The gccbug script is derived from send-pr, @pxref{using\n-send-pr,,Creating new Problem Reports,send-pr,Reporting Problems}.  When\n-invoked, it starts a text editor so you can fill out the various fields\n-of the report.  When the you quit the editor, the report is automatically\n-send to the bug reporting address.\n-\n-A number of fields in this bug report form are specific to GCC, and are\n-explained at @uref{http://gcc.gnu.org/gnats.html}.\n+Bugs should be reported to our bug database.  Please refer to\n+@uref{http://gcc.gnu.org/bugs.html} for up-to-date instructions how to\n+submit bug reports.  Copies of this file in HTML (@file{bugs.html}) and\n+plain text (@file{BUGS}) are also part of GCC releases."}, {"sha": "2911983e2c4b1ab49aaf68940df03d6dee3f7a47", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=486772b126854e26f9dccf4fa6cd631757d7c045", "patch": "@@ -1,3 +1,8 @@\n+2003-05-15  Wolfgang Bangerth <bangerth@dealii.org>\n+\n+\t* g77.texi: Remove most of the bug reporting instructions and\n+\tmerge them into bugs.html.\n+\n 2003-05-13  Zack Weinberg  <zack@codesourcery.com>\n \n \t* com.c: Replace all calls to fatal_io_error with calls to"}, {"sha": "bb8db668564a1d80d1ecac6573e146910bfff90f", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 6, "deletions": 340, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486772b126854e26f9dccf4fa6cd631757d7c045/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=486772b126854e26f9dccf4fa6cd631757d7c045", "patch": "@@ -2,8 +2,8 @@\n @c %**start of header\n @setfilename g77.info\n \n-@set last-update 2002-04-29\n-@set copyrights-g77 1995,1996,1997,1998,1999,2000,2001,2002\n+@set last-update 2003-05-13\n+@set copyrights-g77 1995,1996,1997,1998,1999,2000,2001,2002,2003\n \n @include root.texi\n \n@@ -10445,7 +10445,6 @@ information that makes for fixing the bug.\n \n @menu\n * Criteria: Bug Criteria.    Have you really found a bug?\n-* Where: Bug Lists.          Where to send your bug report.\n * Reporting: Bug Reporting.  How to report a bug effectively.\n @end menu\n \n@@ -10636,348 +10635,15 @@ It might mean the bug is in your code, and that @command{g77} simply\n exposes it more readily than other compilers.\n @end itemize\n \n-@node Bug Lists\n-@section Where to Report Bugs\n-@cindex bug report mailing lists\n-@kindex @value{email-bugs}\n-Send bug reports for GNU Fortran to @email{@value{email-bugs}}.\n-\n-Often people think of posting bug reports to a newsgroup instead of\n-mailing them.\n-This sometimes appears to work, but it has one problem which can be\n-crucial: a newsgroup posting does not contain a mail path back to the\n-sender.\n-Thus, if maintainers need more information, they might be unable\n-to reach you.  For this reason, you should always send bug reports by\n-mail to the proper mailing list.\n-\n-As a last resort, send bug reports on paper to:\n-\n-@example\n-GNU Compiler Bugs\n-Free Software Foundation\n-59 Temple Place - Suite 330\n-Boston, MA 02111-1307, USA\n-@end example\n-\n @node Bug Reporting\n @section How to Report Bugs\n @cindex compiler bugs, reporting\n \n-The fundamental principle of reporting bugs usefully is this:\n-@strong{report all the facts}.\n-If you are not sure whether to state a\n-fact or leave it out, state it!\n-\n-Often people omit facts because they think they know what causes the\n-problem and they conclude that some details don't matter.\n-Thus, you might\n-assume that the name of the variable you use in an example does not matter.\n-Well, probably it doesn't, but one cannot be sure.\n-Perhaps the bug is a\n-stray memory reference which happens to fetch from the location where that\n-name is stored in memory; perhaps, if the name were different, the contents\n-of that location would fool the compiler into doing the right thing despite\n-the bug.\n-Play it safe and give a specific, complete example.\n-That is the\n-easiest thing for you to do, and the most helpful.\n-\n-Keep in mind that the purpose of a bug report is to enable someone to\n-fix the bug if it is not known.\n-It isn't very important what happens if\n-the bug is already known.\n-Therefore, always write your bug reports on\n-the assumption that the bug is not known.\n-\n-Sometimes people give a few sketchy facts and ask, ``Does this ring a\n-bell?''\n-This cannot help us fix a bug, so it is rarely helpful.\n-We respond by asking for enough details to enable us to investigate.\n-You might as well expedite matters by sending them to begin with.\n-(Besides, there are enough bells ringing around here as it is.)\n-\n-Try to make your bug report self-contained.\n-If we have to ask you for\n-more information, it is best if you include all the previous information\n-in your response, as well as the information that was missing.\n-\n-Please report each bug in a separate message.\n-This makes it easier for\n-us to track which bugs have been fixed and to forward your bugs reports\n-to the appropriate maintainer.\n-\n-Do not compress and encode any part of your bug report using programs\n-such as @file{uuencode}.\n-If you do so it will slow down the processing\n-of your bug.\n-If you must submit multiple large files, use @file{shar},\n-which allows us to read your message without having to run any\n-decompression programs.\n-\n-(As a special exception for GNU Fortran bug-reporting, at least\n-for now, if you are sending more than a few lines of code, if\n-your program's source file format contains ``interesting'' things\n-like trailing spaces or strange characters, or if you need to\n-include binary data files, it is acceptable to put all the\n-files together in a @command{tar} archive, and, whether you need to\n-do that, it is acceptable to then compress the single file (@command{tar}\n-archive or source file)\n-using @command{gzip} and encode it via @command{uuencode}.\n-Do not use any MIME stuff---the current maintainer can't decode this.\n-Using @command{compress} instead of @command{gzip} is acceptable, assuming\n-you have licensed the use of the patented algorithm in\n-@command{compress} from Unisys.)\n-\n-To enable someone to investigate the bug, you should include all these\n-things:\n-\n-@itemize @bullet\n-@item\n-The version of GNU Fortran.\n-You can get this by running @command{g77} with the @option{-v} option.\n-(Ignore any error messages that might be displayed\n-when the linker is run.)\n-\n-Without this, we won't know whether there is any point in looking for\n-the bug in the current version of GNU Fortran.\n-\n-@item\n-@cindex preprocessor\n-@cindex cpp program\n-@cindex programs, cpp\n-@pindex cpp\n-A complete input file that will reproduce the bug.\n-\n-If your source file(s) require preprocessing\n-(for example, their names have suffixes like\n-@samp{.F}, @samp{.fpp}, @samp{.FPP}, and @samp{.r}),\n-and the bug is in the compiler proper (@file{f771})\n-or in a subsequent phase of processing,\n-run your source file through the C preprocessor\n-by doing @samp{g77 -E @var{sourcefile} > @var{newfile}}.\n-Then, include the contents of @var{newfile} in the bug report.\n-(When you do this, use the same preprocessor options---such as\n-@option{-I}, @option{-D}, and @option{-U}---that you used in actual\n-compilation.)\n-\n-A single statement is not enough of an example.\n-In order to compile it,\n-it must be embedded in a complete file of compiler input.\n-The bug might depend on the details of how this is done.\n-\n-Without a real example one can compile,\n-all anyone can do about your bug report is wish you luck.\n-It would be futile to try to guess how to provoke the bug.\n-For example, bugs in register allocation and reloading\n-can depend on every little detail of the source and include files\n-that trigger them.\n-\n-@item\n-@cindex included files\n-@cindex INCLUDE directive\n-@cindex directive, INCLUDE\n-@cindex #include directive\n-@cindex directive, #include\n-Note that you should include with your bug report any files\n-included by the source file\n-(via the @code{#include} or @code{INCLUDE} directive)\n-that you send, and any files they include, and so on.\n-\n-It is not necessary to replace\n-the @code{#include} and @code{INCLUDE} directives\n-with the actual files in the version of the source file that\n-you send, but it might make submitting the bug report easier\n-in the end.\n-However, be sure to @emph{reproduce} the bug using the @emph{exact}\n-version of the source material you submit, to avoid wild-goose\n-chases.\n-\n-@item\n-The command arguments you gave GNU Fortran to compile that example\n-and observe the bug.  For example, did you use @option{-O}?  To guarantee\n-you won't omit something important, list all the options.\n-\n-If we were to try to guess the arguments, we would probably guess wrong\n-and then we would not encounter the bug.\n-\n-@item\n-The type of machine you are using, and the operating system name and\n-version number.\n-(Much of this information is printed by @samp{g77 -v}---if you\n-include that, send along any additional info you have that you\n-don't see clearly represented in that output.)\n-\n-@item\n-The operands you gave to the @command{configure} command when you installed\n-the compiler.\n-\n-@item\n-A complete list of any modifications you have made to the compiler\n-source.  (We don't promise to investigate the bug unless it happens in\n-an unmodified compiler.  But if you've made modifications and don't tell\n-us, then you are sending us on a wild-goose chase.)\n-\n-Be precise about these changes.  A description in English is not\n-enough---send a context diff for them.\n-\n-Adding files of your own (such as a machine description for a machine we\n-don't support) is a modification of the compiler source.\n-\n-@item\n-Details of any other deviations from the standard procedure for installing\n-GNU Fortran.\n-\n-@item\n-A description of what behavior you observe that you believe is\n-incorrect.  For example, ``The compiler gets a fatal signal,'' or,\n-``The assembler instruction at line 208 in the output is incorrect.''\n-\n-Of course, if the bug is that the compiler gets a fatal signal, then one\n-can't miss it.  But if the bug is incorrect output, the maintainer might\n-not notice unless it is glaringly wrong.  None of us has time to study\n-all the assembler code from a 50-line Fortran program just on the chance that\n-one instruction might be wrong.  We need @emph{you} to do this part!\n-\n-Even if the problem you experience is a fatal signal, you should still\n-say so explicitly.  Suppose something strange is going on, such as, your\n-copy of the compiler is out of synch, or you have encountered a bug in\n-the C library on your system.  (This has happened!)  Your copy might\n-crash and the copy here would not.  If you @i{said} to expect a crash,\n-then when the compiler here fails to crash, we would know that the bug\n-was not happening.  If you don't say to expect a crash, then we would\n-not know whether the bug was happening.  We would not be able to draw\n-any conclusion from our observations.\n-\n-If the problem is a diagnostic when building GNU Fortran with some other\n-compiler, say whether it is a warning or an error.\n-\n-Often the observed symptom is incorrect output when your program is run.\n-Sad to say, this is not enough information unless the program is short\n-and simple.  None of us has time to study a large program to figure out\n-how it would work if compiled correctly, much less which line of it was\n-compiled wrong.  So you will have to do that.  Tell us which source line\n-it is, and what incorrect result happens when that line is executed.  A\n-person who understands the program can find this as easily as finding a\n-bug in the program itself.\n-\n-@item\n-If you send examples of assembler code output from GNU Fortran,\n-please use @option{-g} when you make them.  The debugging information\n-includes source line numbers which are essential for correlating the\n-output with the input.\n-\n-@item\n-If you wish to mention something in the GNU Fortran source, refer to it by\n-context, not by line number.\n-\n-The line numbers in the development sources don't match those in your\n-sources.  Your line numbers would convey no convenient information to the\n-maintainers.\n-\n-@item\n-Additional information from a debugger might enable someone to find a\n-problem on a machine which he does not have available.  However, you\n-need to think when you collect this information if you want it to have\n-any chance of being useful.\n-\n-@cindex backtrace for bug reports\n-For example, many people send just a backtrace, but that is never\n-useful by itself.  A simple backtrace with arguments conveys little\n-about GNU Fortran because the compiler is largely data-driven; the same\n-functions are called over and over for different RTL insns, doing\n-different things depending on the details of the insn.\n-\n-Most of the arguments listed in the backtrace are useless because they\n-are pointers to RTL list structure.  The numeric values of the\n-pointers, which the debugger prints in the backtrace, have no\n-significance whatever; all that matters is the contents of the objects\n-they point to (and most of the contents are other such pointers).\n+Bugs should be reported to our bug database.  Please refer to\n+@uref{http://gcc.gnu.org/bugs.html} for up-to-date instructions how to\n+submit bug reports.  Copies of this file in HTML (@file{bugs.html}) and\n+plain text (@file{BUGS}) are also part of GCC releases.\n \n-In addition, most compiler passes consist of one or more loops that\n-scan the RTL insn sequence.  The most vital piece of information about\n-such a loop---which insn it has reached---is usually in a local variable,\n-not in an argument.\n-\n-@findex debug_rtx\n-What you need to provide in addition to a backtrace are the values of\n-the local variables for several stack frames up.  When a local\n-variable or an argument is an RTX, first print its value and then use\n-the GDB command @command{pr} to print the RTL expression that it points\n-to.  (If GDB doesn't run on your machine, use your debugger to call\n-the function @code{debug_rtx} with the RTX as an argument.)  In\n-general, whenever a variable is a pointer, its value is no use\n-without the data it points to.\n-@end itemize\n-\n-Here are some things that are not necessary:\n-\n-@itemize @bullet\n-@item\n-A description of the envelope of the bug.\n-\n-Often people who encounter a bug spend a lot of time investigating\n-which changes to the input file will make the bug go away and which\n-changes will not affect it.\n-\n-This is often time consuming and not very useful, because the way we\n-will find the bug is by running a single example under the debugger with\n-breakpoints, not by pure deduction from a series of examples.  You might\n-as well save your time for something else.\n-\n-Of course, if you can find a simpler example to report @emph{instead} of\n-the original one, that is a convenience.  Errors in the output will be\n-easier to spot, running under the debugger will take less time, etc.\n-Most GNU Fortran bugs involve just one function, so the most straightforward\n-way to simplify an example is to delete all the function definitions\n-except the one where the bug occurs.  Those earlier in the file may be\n-replaced by external declarations if the crucial function depends on\n-them.  (Exception: inline functions might affect compilation of functions\n-defined later in the file.)\n-\n-However, simplification is not vital; if you don't want to do this,\n-report the bug anyway and send the entire test case you used.\n-\n-@item\n-In particular, some people insert conditionals @samp{#ifdef BUG} around\n-a statement which, if removed, makes the bug not happen.  These are just\n-clutter; we won't pay any attention to them anyway.  Besides, you should\n-send us preprocessor output, and that can't have conditionals.\n-\n-@item\n-A patch for the bug.\n-\n-A patch for the bug is useful if it is a good one.  But don't omit the\n-necessary information, such as the test case, on the assumption that a\n-patch is all we need.  We might see problems with your patch and decide\n-to fix the problem another way, or we might not understand it at all.\n-\n-Sometimes with a program as complicated as GNU Fortran it is very hard to\n-construct an example that will make the program follow a certain path\n-through the code.  If you don't send the example, we won't be able to\n-construct one, so we won't be able to verify that the bug is fixed.\n-\n-And if we can't understand what bug you are trying to fix, or why your\n-patch should be an improvement, we won't install it.  A test case will\n-help us to understand.\n-\n-See @uref{http://gcc.gnu.org/contribute.html}\n-for guidelines on how to make it easy for us to\n-understand and install your patches.\n-\n-@item\n-A guess about what the bug is or what it depends on.\n-\n-Such guesses are usually wrong.  Even the maintainer can't guess right\n-about such things without first using the debugger to find the facts.\n-\n-@item\n-A core dump file.\n-\n-We have no way of examining a core dump for your type of machine\n-unless we have an identical system---and if we do have one,\n-we should be able to reproduce the crash ourselves.\n-@end itemize\n \n @node Service\n @chapter How To Get Help with GNU Fortran"}]}