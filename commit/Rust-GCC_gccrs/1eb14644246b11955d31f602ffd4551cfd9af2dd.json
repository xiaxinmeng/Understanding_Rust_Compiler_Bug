{"sha": "1eb14644246b11955d31f602ffd4551cfd9af2dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViMTQ2NDQyNDZiMTE5NTVkMzFmNjAyZmZkNDU1MWNmZDlhZjJkZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-21T22:31:29Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-21T22:31:29Z"}, "message": "machmode.h (HOST_PTR_PRINTF): Move from here ...\n\n       * machmode.h (HOST_PTR_PRINTF): Move from here ...\n\n       * system.h (HOST_PTR_PRINTF): ... to here.\n\n       * mips-tfile.c: Don't include machmode.h.\n\n       * Makefile.in (MACHMODE_H): New variable.  Update to use it.\n       (mips-tfile.o): Don't depend on machmode.h.\n\nFrom-SVN: r29568", "tree": {"sha": "e96a43060e00e41ba881f4ab0fb88b8029be87bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e96a43060e00e41ba881f4ab0fb88b8029be87bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1eb14644246b11955d31f602ffd4551cfd9af2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb14644246b11955d31f602ffd4551cfd9af2dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb14644246b11955d31f602ffd4551cfd9af2dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb14644246b11955d31f602ffd4551cfd9af2dd/comments", "author": null, "committer": null, "parents": [{"sha": "f5db61ef0b054bbdb86d1d0feceb066821288f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5db61ef0b054bbdb86d1d0feceb066821288f19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5db61ef0b054bbdb86d1d0feceb066821288f19"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "614f1f959954a3449f30bed54665db0bcb204016", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1eb14644246b11955d31f602ffd4551cfd9af2dd", "patch": "@@ -1,3 +1,14 @@\n+Tue Sep 21 18:29:11 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* machmode.h (HOST_PTR_PRINTF): Move from here ...\n+\n+\t* system.h (HOST_PTR_PRINTF): ... to here.\n+\n+\t* mips-tfile.c: Don't include machmode.h.\n+\n+\t* Makefile.in (MACHMODE_H): New variable.  Update to use it.\n+\t(mips-tfile.o): Don't depend on machmode.h.\n+\n Tue Sep 21 18:27:34 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* haifa-sched.c (sched_analyze): Rename local variable `region' to"}, {"sha": "34473bf1a48d4d0106f64373153d444e9bcae28a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1eb14644246b11955d31f602ffd4551cfd9af2dd", "patch": "@@ -739,14 +739,15 @@ DPBIT_FUNCS = _pack_df _unpack_df _addsub_df _mul_df _div_df \\\n # If it is, rm *.o is an easy way to do it.\n # CONFIG_H = $(host_xm_file) $(tm_file)\n CONFIG_H =\n-RTL_BASE_H = rtl.h rtl.def machmode.h machmode.def\n+MACHMODE_H = machmode.h machmode.def\n+RTL_BASE_H = rtl.h rtl.def $(MACHMODE_H)\n RTL_H = $(RTL_BASE_H) genrtl.h\n-TREE_H = tree.h real.h tree.def machmode.h machmode.def tree-check.h\n+TREE_H = tree.h real.h tree.def $(MACHMODE_H) tree-check.h\n BASIC_BLOCK_H = basic-block.h bitmap.h sbitmap.h\n DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n EXPR_H = expr.h insn-codes.h\n-REGS_H = regs.h varray.h machmode.h machmode.def\n+REGS_H = regs.h varray.h $(MACHMODE_H)\n #\f\n # Language makefile fragments.\n \n@@ -1041,7 +1042,7 @@ libgcc2.ready: $(GCC_PASSES) $(LIBGCC2_DEPS) stmp-int-hdrs $(STMP_FIXPROTO)\n \n LIB2ADD = $(srcdir)/frame.c $(LIB2FUNCS_EXTRA) $(LANG_LIB2FUNCS)\n libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n-   machmode.h longlong.h frame.h gbl-ctors.h config.status\n+   $(MACHMODE_H) longlong.h frame.h gbl-ctors.h config.status\n # Actually build it in tmplibgcc2.a, then rename at end,\n # so that libgcc2.a itself remains nonexistent if compilation is aborted.\n \t-rm -f tmplibgcc2.a\n@@ -1174,7 +1175,7 @@ s-mlib: $(srcdir)/genmultilib Makefile\n # Build multiple copies of libgcc.a, one for each target switch.\n stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n    frame.h \\\n-   $(LIB2ADD) machmode.h longlong.h gbl-ctors.h config.status\n+   $(LIB2ADD) $(MACHMODE_H) longlong.h gbl-ctors.h config.status\n \tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n \t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n \t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n@@ -1605,7 +1606,7 @@ $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) ggc.h \\\n mips-tfile: mips-tfile.o version.o $(LIBDEPS)\n \t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ mips-tfile.o version.o $(LIBS)\n \n-mips-tfile.o : mips-tfile.c $(CONFIG_H) $(RTL_H) system.h machmode.h\n+mips-tfile.o : mips-tfile.c $(CONFIG_H) $(RTL_H) system.h\n \n mips-tdump: mips-tdump.o version.o $(LIBDEPS)\n \t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ mips-tdump.o version.o $(LIBS)"}, {"sha": "eedcc5a006907ea464a4b838720926b8000dda8f", "filename": "gcc/machmode.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=1eb14644246b11955d31f602ffd4551cfd9af2dd", "patch": "@@ -21,21 +21,6 @@ Boston, MA 02111-1307, USA.  */\n #ifndef HAVE_MACHINE_MODES\n #define HAVE_MACHINE_MODES\n \n-/* Strictly speaking, this isn't the proper place to include these definitions,\n-   but this file is included by every GCC file. */\n-\n-/* Provide a default way to print an address in hex via printf.  */\n-\n-#ifndef HOST_PTR_PRINTF\n-# ifdef HAVE_PRINTF_PTR\n-#  define HOST_PTR_PRINTF \"%p\"\n-# else\n-#  define HOST_PTR_PRINTF \\\n-    (sizeof (int) == sizeof (char *) ? \"%x\" \\\n-     : sizeof (long) == sizeof (char *) ? \"%lx\" : \"%llx\")\n-# endif\n-#endif /* ! HOST_PTR_PRINTF */\n-\n /* Make an enum class that gives all the machine modes.  */\n \n #define DEF_MACHMODE(SYM, NAME, TYPE, SIZE, UNIT, WIDER)  SYM,"}, {"sha": "cbe7349088c19edc5fd94a47d704653ef5083f79", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=1eb14644246b11955d31f602ffd4551cfd9af2dd", "patch": "@@ -678,8 +678,6 @@ main ()\n #include <stab.h>  /* On BSD, use the system's stab.h.  */\n #endif /* not USG */\n \n-#include \"machmode.h\"\n-\n #ifdef __GNU_STAB__\n #define STAB_CODE_TYPE enum __stab_debug_code\n #else"}, {"sha": "fe8cae1071b6bd30b96e1a8ae7dc89b81b597536", "filename": "gcc/system.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1eb14644246b11955d31f602ffd4551cfd9af2dd/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=1eb14644246b11955d31f602ffd4551cfd9af2dd", "patch": "@@ -517,6 +517,17 @@ extern void abort ();\n # define mkdir(a,b) mkdir(a)\n #endif\n \n+/* Provide a way to print an address via printf.  */\n+#ifndef HOST_PTR_PRINTF\n+# ifdef HAVE_PRINTF_PTR\n+#  define HOST_PTR_PRINTF \"%p\"\n+# else\n+#  define HOST_PTR_PRINTF \\\n+    (sizeof (int) == sizeof (char *) ? \"%x\" \\\n+     : sizeof (long) == sizeof (char *) ? \"%lx\" : \"%llx\")\n+# endif\n+#endif /* ! HOST_PTR_PRINTF */\n+\n /* Get libiberty declarations. */\n #include \"libiberty.h\"\n "}]}