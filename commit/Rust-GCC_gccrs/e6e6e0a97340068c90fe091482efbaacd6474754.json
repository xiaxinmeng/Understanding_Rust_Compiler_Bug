{"sha": "e6e6e0a97340068c90fe091482efbaacd6474754", "node_id": "C_kwDOANBUbNoAKGU2ZTZlMGE5NzM0MDA2OGM5MGZlMDkxNDgyZWZiYWFjZDY0NzQ3NTQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-03T08:11:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-03-03T08:11:09Z"}, "message": "calls: When bypassing emit_push_insn for 0 sized arg, emit at least anti_adjust_stack for alignment pad if needed [PR104558]\n\nThe following testcase ICEs on x86_64 when asked to use the pre-GCC 8\nABI where zero sized arguments weren't ignored.\nIn GCC 7 the emit_push_insn calls in store_one_arg were unconditional,\nit is true that they didn't actually push anything because it had zero\nsize, but because arg->locate.alignment_pad is 8 in this case,\nemit_push_insn at the end performs\n          if (alignment_pad && args_addr == 0)\n            anti_adjust_stack (alignment_pad);\nand an assert larger on is upset if we don't do it.\nThe following patch keeps the emit_push_insn conditional but calls\nthe anti_adjust_stack when needed by hand for the zero sized arguments.\nFor the new x86_64 ABI where zero sized arguments are ignored\narg->locate.alignment_pad is 0 in this case, so nothing changes\n- we in that case really do ignore it.\n\nThere is another emit_push_insn call earlier in store_one_arg, also made\nconditional on non-zero size by Marek in GCC 8, but that one is for\narguments with non-BLKmode and the only way those can be zero size is\nif they are TYPE_EMPTY_P aka when they are completely ignored.  But\nI believe arg->locate.alignment_pad should be 0 in that case, so IMHO\nthere is no need to do anything in the second spot.\n\n2022-03-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/104558\n\t* calls.cc (store_one_arg): When not calling emit_push_insn\n\tbecause size_rtx is const0_rtx, call at least anti_adjust_stack\n\ton arg->locate.alignment_pad if !argblock and the alignment might\n\tbe non-zero.\n\n\t* gcc.dg/pr104558.c: New test.", "tree": {"sha": "ba0a03904fe1622c0b07a1857202acd620c4ae9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba0a03904fe1622c0b07a1857202acd620c4ae9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6e6e0a97340068c90fe091482efbaacd6474754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e6e0a97340068c90fe091482efbaacd6474754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e6e0a97340068c90fe091482efbaacd6474754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e6e0a97340068c90fe091482efbaacd6474754/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea4911c4fa629a97d22b6e48975d8f1c4e04549d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea4911c4fa629a97d22b6e48975d8f1c4e04549d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea4911c4fa629a97d22b6e48975d8f1c4e04549d"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "58864d0fdb33feb2b22af185932d8fc881ded15d", "filename": "gcc/calls.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e6e0a97340068c90fe091482efbaacd6474754/gcc%2Fcalls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e6e0a97340068c90fe091482efbaacd6474754/gcc%2Fcalls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.cc?ref=e6e6e0a97340068c90fe091482efbaacd6474754", "patch": "@@ -5139,6 +5139,13 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t\t\tARGS_SIZE_RTX (arg->locate.offset),\n \t\t\treg_parm_stack_space,\n \t\t\tARGS_SIZE_RTX (arg->locate.alignment_pad), false);\n+      /* If we bypass emit_push_insn because it is a zero sized argument,\n+\t we still might need to adjust stack if such argument requires\n+\t extra alignment.  See PR104558.  */\n+      else if ((arg->locate.alignment_pad.var\n+\t\t|| maybe_ne (arg->locate.alignment_pad.constant, 0))\n+\t       && !argblock)\n+\tanti_adjust_stack (ARGS_SIZE_RTX (arg->locate.alignment_pad));\n \n       /* Unless this is a partially-in-register argument, the argument is now\n \t in the stack."}, {"sha": "382fe5732d7a9b4c81e2bd7956155553ae457b43", "filename": "gcc/testsuite/gcc.dg/pr104558.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e6e0a97340068c90fe091482efbaacd6474754/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104558.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e6e0a97340068c90fe091482efbaacd6474754/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104558.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104558.c?ref=e6e6e0a97340068c90fe091482efbaacd6474754", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/104558 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fabi-version=9\" } */\n+\n+struct __attribute__ ((aligned)) A {};\n+\n+struct A a;\n+\n+void bar (int, int, int, int, int, int, int, struct A);\n+\n+void\n+foo (void)\n+{\n+  bar (0, 1, 2, 3, 4, 5, 6, a);\n+}"}]}