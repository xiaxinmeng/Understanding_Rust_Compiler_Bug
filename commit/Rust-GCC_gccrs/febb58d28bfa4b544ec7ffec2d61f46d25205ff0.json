{"sha": "febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "node_id": "C_kwDOANBUbNoAKGZlYmI1OGQyOGJmYTRiNTQ0ZWM3ZmZlYzJkNjFmNDZkMjUyMDVmZjA", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-25T11:57:12Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-12-25T11:57:12Z"}, "message": "Use movss/movsd to implement V4SI/V2DI VEC_PERM on x86.\n\nThis patch tweaks the x86 backend to use the movss and movsd instructions\nto perform some vector permutations on integer vectors (V4SI and V2DI) in\nthe same way they are used for floating point vectors (V4SF and V2DF).\n\nAs a motivating example, consider:\n\ntypedef unsigned int v4si __attribute__((vector_size(16)));\ntypedef float v4sf __attribute__((vector_size(16)));\nv4si foo(v4si x,v4si y) { return (v4si){y[0],x[1],x[2],x[3]}; }\nv4sf bar(v4sf x,v4sf y) { return (v4sf){y[0],x[1],x[2],x[3]}; }\n\nwhich is currently compiled with -O2 to:\n\nfoo:\tmovdqa\t%xmm0, %xmm2\n\tshufps\t$80, %xmm0, %xmm1\n\tmovdqa\t%xmm1, %xmm0\n\tshufps\t$232, %xmm2, %xmm0\n\tret\n\nbar:\tmovss\t%xmm1, %xmm0\n\tret\n\nwith this patch both functions compile to the same form.\nLikewise for the V2DI case:\n\ntypedef unsigned long v2di __attribute__((vector_size(16)));\ntypedef double v2df __attribute__((vector_size(16)));\n\nv2di foo(v2di x,v2di y) { return (v2di){y[0],x[1]}; }\nv2df bar(v2df x,v2df y) { return (v2df){y[0],x[1]}; }\n\nwhich currently generates:\n\nfoo:\tshufpd\t$2, %xmm0, %xmm1\n\tmovdqa\t%xmm1, %xmm0\n\tret\n\nbar:\tmovsd\t%xmm1, %xmm0\n\tret\n\n2022-12-25  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\t* config/i386/i386-builtin.def (__builtin_ia32_movss): Update\n\tCODE_FOR_sse_movss to CODE_FOR_sse_movss_v4sf.\n\t(__builtin_ia32_movsd): Likewise, update CODE_FOR_sse2_movsd to\n\tCODE_FOR_sse2_movsd_v2df.\n\t* config/i386/i386-expand.cc (split_convert_uns_si_sse): Update\n\tgen_sse_movss call to gen_sse_movss_v4sf, and gen_sse2_movsd call\n\tto gen_sse2_movsd_v2df.\n\t(expand_vec_perm_movs): Also allow V4SImode with TARGET_SSE and\n\tV2DImode with TARGET_SSE2.\n\t* config/i386/sse.md\n\t(avx512fp16_fcmaddcsh_v8hf_mask3<round_expand_name>): Update\n\tgen_sse_movss call to gen_sse_movss_v4sf.\n\t(avx512fp16_fmaddcsh_v8hf_mask3<round_expand_name>): Likewise.\n\t(sse_movss_<mode>): Renamed from sse_movss using VI4F_128 mode\n\titerator to handle both V4SF and V4SI.\n\t(sse2_movsd_<mode>): Likewise, renamed from sse2_movsd using\n\tVI8F_128 mode iterator to handle both V2DF and V2DI.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/sse-movss-4.c: New test case.\n\t* gcc.target/i386/sse2-movsd-3.c: New test case.", "tree": {"sha": "5e640097d8dd93a744959e569470ac482a5d4b43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e640097d8dd93a744959e569470ac482a5d4b43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339db340af2fdeceeb06b2249330bc103e38691c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/339db340af2fdeceeb06b2249330bc103e38691c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/339db340af2fdeceeb06b2249330bc103e38691c"}], "stats": {"total": 64, "additions": 47, "deletions": 17}, "files": [{"sha": "0d1fc342e61c6db97f92dba6c5c5fc6a17b68b54", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "patch": "@@ -679,7 +679,7 @@ BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_xorv4sf3,  \"__builtin_ia32_xorps\", IX86_\n \n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_copysignv4sf3,  \"__builtin_ia32_copysignps\", IX86_BUILTIN_CPYSGNPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n \n-BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_movss,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n+BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_movss_v4sf,  \"__builtin_ia32_movss\", IX86_BUILTIN_MOVSS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_movhlps_exp,  \"__builtin_ia32_movhlps\", IX86_BUILTIN_MOVHLPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_sse_movlhps_exp,  \"__builtin_ia32_movlhps\", IX86_BUILTIN_MOVLHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n BDESC (OPTION_MASK_ISA_SSE, 0, CODE_FOR_vec_interleave_highv4sf, \"__builtin_ia32_unpckhps\", IX86_BUILTIN_UNPCKHPS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF)\n@@ -781,7 +781,7 @@ BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_xorv2df3,  \"__builtin_ia32_xorpd\", IX86\n \n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_copysignv2df3,  \"__builtin_ia32_copysignpd\", IX86_BUILTIN_CPYSGNPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n \n-BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_movsd,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n+BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_sse2_movsd_v2df,  \"__builtin_ia32_movsd\", IX86_BUILTIN_MOVSD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_vec_interleave_highv2df, \"__builtin_ia32_unpckhpd\", IX86_BUILTIN_UNPCKHPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n BDESC (OPTION_MASK_ISA_SSE2, 0, CODE_FOR_vec_interleave_lowv2df, \"__builtin_ia32_unpcklpd\", IX86_BUILTIN_UNPCKLPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF)\n "}, {"sha": "b6cc76d8a9cccb78f6dcb02c8a5e59e4c33ca4e7", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "patch": "@@ -1774,9 +1774,9 @@ ix86_split_convert_uns_si_sse (rtx operands[])\n       input = gen_rtx_REG (vecmode, REGNO (input));\n       emit_move_insn (value, CONST0_RTX (vecmode));\n       if (vecmode == V4SFmode)\n-\temit_insn (gen_sse_movss (value, value, input));\n+\temit_insn (gen_sse_movss_v4sf (value, value, input));\n       else\n-\temit_insn (gen_sse2_movsd (value, value, input));\n+\temit_insn (gen_sse2_movsd_v2df (value, value, input));\n     }\n \n   emit_move_insn (large, two31);\n@@ -18905,8 +18905,10 @@ expand_vec_perm_movs (struct expand_vec_perm_d *d)\n     return false;\n \n   if (!(TARGET_SSE && vmode == V4SFmode)\n+      && !(TARGET_SSE && vmode == V4SImode)\n       && !(TARGET_MMX_WITH_SSE && vmode == V2SFmode)\n-      && !(TARGET_SSE2 && vmode == V2DFmode))\n+      && !(TARGET_SSE2 && vmode == V2DFmode)\n+      && !(TARGET_SSE2 && vmode == V2DImode))\n     return false;\n \n   /* Only the first element is changed.  */"}, {"sha": "d50627a7d6cbfd26ccd734f7b3415f6647be5e5d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "patch": "@@ -6825,7 +6825,7 @@\n   if (!MEM_P (operands[3]))\n     operands[3] = force_reg (V8HFmode, operands[3]);\n   op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);\n-  emit_insn (gen_sse_movss (dest, op1, op0));\n+  emit_insn (gen_sse_movss_v4sf (dest, op1, op0));\n   emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest, V4SFmode));\n   DONE;\n })\n@@ -6855,7 +6855,7 @@\n   if (!MEM_P (operands[3]))\n     operands[3] = force_reg (V8HFmode, operands[3]);\n   op1 = lowpart_subreg (V4SFmode, operands[3], V8HFmode);\n-  emit_insn (gen_sse_movss (dest, op1, op0));\n+  emit_insn (gen_sse_movss_v4sf (dest, op1, op0));\n   emit_move_insn (operands[0], lowpart_subreg (V8HFmode, dest, V4SFmode));\n   DONE;\n })\n@@ -10498,11 +10498,11 @@\n    (set_attr \"prefix\" \"orig,maybe_evex,orig,maybe_evex,maybe_vex\")\n    (set_attr \"mode\" \"V4SF,V4SF,V2SF,V2SF,V2SF\")])\n \n-(define_insn \"sse_movss\"\n-  [(set (match_operand:V4SF 0 \"register_operand\"   \"=x,v\")\n-\t(vec_merge:V4SF\n-\t  (match_operand:V4SF 2 \"register_operand\" \" x,v\")\n-\t  (match_operand:V4SF 1 \"register_operand\" \" 0,v\")\n+(define_insn \"sse_movss_<mode>\"\n+  [(set (match_operand:VI4F_128 0 \"register_operand\"   \"=x,v\")\n+\t(vec_merge:VI4F_128\n+\t  (match_operand:VI4F_128 2 \"register_operand\" \" x,v\")\n+\t  (match_operand:VI4F_128 1 \"register_operand\" \" 0,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n@@ -13481,11 +13481,11 @@\n   [(set (match_dup 0) (match_dup 1))]\n   \"operands[0] = adjust_address (operands[0], DFmode, 0);\")\n \n-(define_insn \"sse2_movsd\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"   \"=x,v,x,v,m,x,x,v,o\")\n-\t(vec_merge:V2DF\n-\t  (match_operand:V2DF 2 \"nonimmediate_operand\" \" x,v,m,m,v,0,0,v,0\")\n-\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,v,0,v,0,x,o,o,v\")\n+(define_insn \"sse2_movsd_<mode>\"\n+  [(set (match_operand:VI8F_128 0 \"nonimmediate_operand\"   \"=x,v,x,v,m,x,x,v,o\")\n+\t(vec_merge:VI8F_128\n+\t  (match_operand:VI8F_128 2 \"nonimmediate_operand\" \" x,v,m,m,v,0,0,v,0\")\n+\t  (match_operand:VI8F_128 1 \"nonimmediate_operand\" \" 0,v,0,v,0,x,o,o,v\")\n \t  (const_int 1)))]\n   \"TARGET_SSE2\"\n   \"@"}, {"sha": "ec3019c8e54a4aec2dbe934ae79ee7038e1b64ba", "filename": "gcc/testsuite/gcc.target/i386/sse-movss-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-movss-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-movss-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-movss-4.c?ref=febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse\" } */\n+\n+typedef unsigned int v4si __attribute__((vector_size(16)));\n+typedef float v4sf __attribute__((vector_size(16)));\n+\n+v4si foo(v4si x,v4si y) { return (v4si){y[0],x[1],x[2],x[3]}; }\n+v4sf bar(v4sf x,v4sf y) { return (v4sf){y[0],x[1],x[2],x[3]}; }\n+\n+/* { dg-final { scan-assembler-times \"\\tv?movss\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"movaps\" } } */\n+/* { dg-final { scan-assembler-not \"shufps\" } } */\n+/* { dg-final { scan-assembler-not \"vpblendw\" } } */"}, {"sha": "fadbe2bf2f671de1d17defb57dd2748128320be6", "filename": "gcc/testsuite/gcc.target/i386/sse2-movsd-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movsd-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/febb58d28bfa4b544ec7ffec2d61f46d25205ff0/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movsd-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-movsd-3.c?ref=febb58d28bfa4b544ec7ffec2d61f46d25205ff0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef unsigned long long v2di __attribute__((vector_size(16)));\n+typedef double v2df __attribute__((vector_size(16)));\n+\n+v2di foo(v2di x,v2di y) { return (v2di){y[0],x[1]}; }\n+v2df bar(v2df x,v2df y) { return (v2df){y[0],x[1]}; }\n+\n+/* { dg-final { scan-assembler-times \"\\tv?movsd\\t\" 2 } } */\n+/* { dg-final { scan-assembler-not \"v?shufpd\" } } */\n+/* { dg-final { scan-assembler-not \"movdqa\" } } */\n+/* { dg-final { scan-assembler-not \"pshufd\" } } */\n+/* { dg-final { scan-assembler-not \"v?punpckldq\" } } */\n+/* { dg-final { scan-assembler-not \"v?movq\" } } */"}]}