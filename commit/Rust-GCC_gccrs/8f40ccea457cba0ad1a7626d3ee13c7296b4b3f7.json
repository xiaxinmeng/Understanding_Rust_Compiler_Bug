{"sha": "8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0MGNjZWE0NTdjYmEwYWQxYTc2MjZkM2VlMTNjNzI5NmI0YjNmNw==", "commit": {"author": {"name": "Ira Rosen", "email": "ira.rosen@linaro.org", "date": "2011-09-06T11:29:53Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2011-09-06T11:29:53Z"}, "message": "arm.c (arm_preferred_simd_mode): Check TARGET_NEON_VECTORIZE_DOUBLE instead of TARGET_NEON_VECTORIZE_QUAD.\n\n\n\t* config/arm/arm.c (arm_preferred_simd_mode): Check\n\tTARGET_NEON_VECTORIZE_DOUBLE instead of\n\tTARGET_NEON_VECTORIZE_QUAD.\n\t(arm_autovectorize_vector_sizes): Likewise.\n\t* config/arm/arm.opt (mvectorize-with-neon-quad): Make inverse\n\tmask of mvectorize-with-neon-double.  Add RejectNegative.\n\t(mvectorize-with-neon-double): New.\n\nFrom-SVN: r178588", "tree": {"sha": "773ee5e3b8e57331f762cef6afeca88b07d91c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/773ee5e3b8e57331f762cef6afeca88b07d91c3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/comments", "author": null, "committer": null, "parents": [{"sha": "f8e9fc30f7f06af84310ecb982ee8600f62610fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e9fc30f7f06af84310ecb982ee8600f62610fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e9fc30f7f06af84310ecb982ee8600f62610fb"}], "stats": {"total": 146, "additions": 111, "deletions": 35}, "files": [{"sha": "bb1fbec7497343f7e55e9316d27601c29b5827ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,3 +1,13 @@\n+2011-09-06  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\t * config/arm/arm.c (arm_preferred_simd_mode): Check\n+\tTARGET_NEON_VECTORIZE_DOUBLE instead of\n+\tTARGET_NEON_VECTORIZE_QUAD.\n+\t(arm_autovectorize_vector_sizes): Likewise.\n+\t* config/arm/arm.opt (mvectorize-with-neon-quad): Make inverse\n+\tmask of mvectorize-with-neon-double.  Add RejectNegative.\n+\t(mvectorize-with-neon-double): New.\n+\n 2011-09-06  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (visit_use): CSE stmt pieces and simplify"}, {"sha": "0a1a6518a1c3082363a4703514d166125321a0ac", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -23026,7 +23026,7 @@ arm_array_mode_supported_p (enum machine_mode mode,\n   return false;\n }\n \n-/* Use the option -mvectorize-with-neon-quad to override the use of doubleword\n+/* Use the option -mvectorize-with-neon-double to override the use of quardword\n    registers when autovectorizing for Neon, at least until multiple vector\n    widths are supported properly by the middle-end.  */\n \n@@ -23037,15 +23037,15 @@ arm_preferred_simd_mode (enum machine_mode mode)\n     switch (mode)\n       {\n       case SFmode:\n-\treturn TARGET_NEON_VECTORIZE_QUAD ? V4SFmode : V2SFmode;\n+\treturn TARGET_NEON_VECTORIZE_DOUBLE ? V2SFmode : V4SFmode;\n       case SImode:\n-\treturn TARGET_NEON_VECTORIZE_QUAD ? V4SImode : V2SImode;\n+\treturn TARGET_NEON_VECTORIZE_DOUBLE ? V2SImode : V4SImode;\n       case HImode:\n-\treturn TARGET_NEON_VECTORIZE_QUAD ? V8HImode : V4HImode;\n+\treturn TARGET_NEON_VECTORIZE_DOUBLE ? V4HImode : V8HImode;\n       case QImode:\n-\treturn TARGET_NEON_VECTORIZE_QUAD ? V16QImode : V8QImode;\n+\treturn TARGET_NEON_VECTORIZE_DOUBLE ? V8QImode : V16QImode;\n       case DImode:\n-\tif (TARGET_NEON_VECTORIZE_QUAD)\n+\tif (!TARGET_NEON_VECTORIZE_DOUBLE)\n \t  return V2DImode;\n \tbreak;\n \n@@ -24268,7 +24268,7 @@ arm_expand_sync (enum machine_mode mode,\n static unsigned int\n arm_autovectorize_vector_sizes (void)\n {\n-  return TARGET_NEON_VECTORIZE_QUAD ? 16 | 8 : 0;\n+  return TARGET_NEON_VECTORIZE_DOUBLE ? 0 : (16 | 8);\n }\n \n static bool"}, {"sha": "4d29e2fb707048f532d75a29ab9503a09e937112", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -238,9 +238,13 @@ Target Report RejectNegative Mask(LITTLE_WORDS)\n Assume big endian bytes, little endian words.  This option is deprecated.\n \n mvectorize-with-neon-quad\n-Target Report Mask(NEON_VECTORIZE_QUAD)\n+Target Report RejectNegative InverseMask(NEON_VECTORIZE_DOUBLE)\n Use Neon quad-word (rather than double-word) registers for vectorization\n \n+mvectorize-with-neon-double\n+Target Report RejectNegative Mask(NEON_VECTORIZE_DOUBLE)\n+Use Neon double-word (rather than quad-word) registers for vectorization\n+\n mword-relocations\n Target Report Var(target_word_relocations) Init(TARGET_DEFAULT_WORD_RELOCATIONS)\n Only generate absolute relocations on word sized values."}, {"sha": "79749668203cf2a4ee30c4f382e1e921114a673c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,3 +1,33 @@\n+2011-09-06  Ira Rosen  <ira.rosen@linaro.org>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_multiple_sizes):\n+\tNew procedure.\n+\t(add_options_for_quad_vectors): Replace with ...\n+\t(add_options_for_double_vectors): ... this.\n+\t* gfortran.dg/vect/pr19049.f90: Expect more printings on targets that\n+\tsupport multiple vector sizes since the vectorizer attempts to\n+\tvectorize with both vector sizes.\n+\t* gcc.dg/vect/no-vfa-vect-79.c,\n+\tgcc.dg/vect/no-vfa-vect-102a.c, gcc.dg/vect/vect-outer-1a.c,\n+\tgcc.dg/vect/vect-outer-1b.c, gcc.dg/vect/vect-outer-2b.c,\n+\tgcc.dg/vect/vect-outer-3a.c, gcc.dg/vect/no-vfa-vect-37.c,\n+\tgcc.dg/vect/vect-outer-3b.c, gcc.dg/vect/no-vfa-vect-101.c,\n+\tgcc.dg/vect/no-vfa-vect-102.c, gcc.dg/vect/vect-reduc-dot-s8b.c,\n+\tgcc.dg/vect/vect-outer-1.c, gcc.dg/vect/vect-104.c: Likewise.\n+\t* gcc.dg/vect/vect-42.c: Run with 64 bit vectors if applicable.\n+\t* gcc.dg/vect/vect-multitypes-6.c, gcc.dg/vect/vect-52.c,\n+\tgcc.dg/vect/vect-54.c, gcc.dg/vect/vect-46.c, gcc.dg/vect/vect-48.c,\n+\tgcc.dg/vect/vect-96.c, gcc.dg/vect/vect-multitypes-3.c,\n+\tgcc.dg/vect/vect-40.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-5.c: Remove quad-vectors option as\n+\tredundant.\n+\t* gcc.dg/vect/vect-109.c, gcc.dg/vect/vect-peel-1.c,\n+\tgcc.dg/vect/vect-peel-2.c, gcc.dg/vect/slp-25.c,\n+\tgcc.dg/vect/vect-multitypes-1.c, gcc.dg/vect/slp-3.c,\n+\tgcc.dg/vect/no-vfa-pr29145.c, gcc.dg/vect/vect-multitypes-4.c:\n+\tLikewise.\n+\t* gcc.dg/vect/vect-peel-4.c: Make ia global.\n+\n 2011-09-05  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR target/49606"}, {"sha": "e475ffff6385162be8bf3c8c527c6e8cb137a24b", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-pr29145.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-pr29145.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-pr29145.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-pr29145.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "3a54a7530650bdee3acf0e89d8042e4d8889d60f", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-101.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-101.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -45,6 +45,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "a8d3b042dc60a32d1ee79be96a274ece85bfc7af", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -53,6 +53,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "41bbbc15cb23329762a55cdfd76cd0c189e06bf0", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102a.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102a.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -53,6 +53,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "c8cf2cafb907eb2e120d35fd1c918bbb6cec5534", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-37.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-37.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -58,5 +58,6 @@ int main (void)\n    If/when the aliasing problems are resolved, unalignment may\n    prevent vectorization on some targets.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"can't determine dependence between\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 2 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 4 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3c5ce4be8479c26b2b92eb7ee33a4490f08716ce", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-79.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-79.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-79.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-79.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -46,5 +46,6 @@ int main (void)\n   If/when the aliasing problems are resolved, unalignment may\n   prevent vectorization on some targets.  */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\"  { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"can't determine dependence between\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"can't determine dependence\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "0dec2f11cdc3e909588c89975b94eeb6e04ce534", "filename": "gcc/testsuite/gcc.dg/vect/slp-25.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-25.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "7d9bd563739ab9170222de5a0b72cd71e3d4d45d", "filename": "gcc/testsuite/gcc.dg/vect/slp-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-3.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "2b56ddfb3c73bbf4bbd6e816f595bd82534edcf2", "filename": "gcc/testsuite/gcc.dg/vect/vect-104.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-104.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -64,6 +64,7 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } } */\n-/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"possible dependence between data-refs\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "854c9707a6d28c22e2332020b9a4b1478b1b61c7", "filename": "gcc/testsuite/gcc.dg/vect/vect-109.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-109.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "269b08955495b6ee0d83c3d6c087a9b5b4069946", "filename": "gcc/testsuite/gcc.dg/vect/vect-40.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-40.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "31810817b46a981d484902956a1165d0a929fe11", "filename": "gcc/testsuite/gcc.dg/vect/vect-42.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-42.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "26e0e520b9e7cd3078fa0a37a9480b0866b39a68", "filename": "gcc/testsuite/gcc.dg/vect/vect-46.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-46.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "d2eed3a6b97b747a89e20e2a17c66df1b064c9df", "filename": "gcc/testsuite/gcc.dg/vect/vect-48.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "69c097966edd18bee3bc755a2952be4b491b807f", "filename": "gcc/testsuite/gcc.dg/vect/vect-52.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-52.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "d563cc34b2d607e60f252e4859e7d0bdd54958a9", "filename": "gcc/testsuite/gcc.dg/vect/vect-54.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-54.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_float } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "0060d4eb4bf0d8cf3658d69a43fefffcd2f065db", "filename": "gcc/testsuite/gcc.dg/vect/vect-96.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-96.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "7981c4a475f4b98e00c1667a0cf4db24e4b3d87c", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-1.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "93796d0cec3f6628b4c405417b8e60994ccbe2b6", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-3.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "ed6ac6eda6b7662fb265dbb852adb10abb9955f2", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-4.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "7f72785069a51bc7f1d8850c31de30a472d22d04", "filename": "gcc/testsuite/gcc.dg/vect/vect-multitypes-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-multitypes-6.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,4 +1,5 @@\n /* { dg-require-effective-target vect_int } */\n+/* { dg-add-options double_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "2ce8f8ebac85e323ed8a4674b631ff96f21df5e0", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -22,5 +22,6 @@ foo (){\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a9b786e235c218681fc3f62475160df011f97c6a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1a.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -20,5 +20,6 @@ foo (){\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "815758c766f703b3c760587439f7ed15a9db12f4", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1b.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1b.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -22,5 +22,6 @@ foo (){\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "cb62881f004183280f8fb2e0cfbe7052f3d67c4f", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-2b.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-2b.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -37,5 +37,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"strided access in outer loop.\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "1759ee38db784d20d11e9f15ea6e30f519d35a93", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3a.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3a.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -49,5 +49,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail vect_no_align } } } */\n-/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 2 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"step doesn't divide the vector-size\" 3 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "fda8727bf68d42c94a859bb208edef2d39745362", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-3b.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-3b.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -49,5 +49,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"OUTER LOOP VECTORIZED\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 2 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"strided access in outer loop\" 4 \"vect\" { target vect_multiple_sizes } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e319d77e492bc990abded3f39624dee3373216d6", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-5.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-5.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_float } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include <signal.h>"}, {"sha": "342da1827a2143ad6d6779ad07b3562807b42561", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-1.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "6a764c150400f8470794300df2e0b4c9fa7c8dff", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-2.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -1,5 +1,4 @@\n /* { dg-require-effective-target vect_int } */\n-/* { dg-add-options quad_vectors } */\n \n #include <stdarg.h>\n #include \"tree-vect.h\""}, {"sha": "dffb858e2b2e662b215ac4a5ecd949c3fbfa89cf", "filename": "gcc/testsuite/gcc.dg/vect/vect-peel-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-peel-4.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -6,12 +6,12 @@\n #define N 128\n \n int ib[N+7];\n+int ia[N+1];\n \n __attribute__ ((noinline))\n int main1 ()\n {\n   int i;\n-  int ia[N+1];\n \n   /* Don't peel keeping one load and the store aligned.  */\n   for (i = 0; i <= N; i++)"}, {"sha": "dc9eb61580d0fb8ad4e28c58874f77ed8c62dc60", "filename": "gcc/testsuite/gcc.dg/vect/vect-reduc-dot-s8b.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s8b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s8b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-reduc-dot-s8b.c?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -58,7 +58,8 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vect_recog_dot_prod_pattern: detected\" 1 \"vect\" { xfail *-*-* } } } */\n-/* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 1 \"vect\" { xfail vect_multiple_sizes } } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 2 \"vect\" { target vect_multiple_sizes } } } */\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail *-*-* } } } */\n "}, {"sha": "5552af6da84081d5865686ccbe90693c20335663", "filename": "gcc/testsuite/gfortran.dg/vect/pr19049.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr19049.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr19049.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr19049.f90?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -19,6 +19,7 @@ subroutine s111 (ntimes,ld,n,ctime,dtime,a,b,c,d,e,aa,bb,cc)\n       end\n \n ! { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 0 \"vect\" } }\n-! { dg-final { scan-tree-dump-times \"complicated access pattern\" 1 \"vect\" } }\n+! { dg-final { scan-tree-dump-times \"complicated access pattern\" 1 \"vect\" { xfail vect_multiple_sizes } } }\n+! { dg-final { scan-tree-dump-times \"complicated access pattern\" 2 \"vect\" { target vect_multiple_sizes } } }\n ! { dg-final { cleanup-tree-dump \"vect\" } }\n "}, {"sha": "5470dafafc2a942130634e470ec26fa4219d1e12", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=8f40ccea457cba0ad1a7626d3ee13c7296b4b3f7", "patch": "@@ -3375,6 +3375,24 @@ foreach N {2 3 4 8} {\n     }]\n }\n \n+# Return 1 if the target supports multiple vector sizes\n+\n+proc check_effective_target_vect_multiple_sizes { } {\n+    global et_vect_multiple_sizes\n+\n+    if [info exists et_vect_multiple_sizes_saved] {\n+        verbose \"check_effective_target_vect_multiple_sizes: using cached result\" 2\n+    } else {\n+        set et_vect_multiple_sizes_saved 0\n+        if { ([istarget arm*-*-*] && [check_effective_target_arm_neon]) } {\n+           set et_vect_multiple_sizes_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_vect_multiple_sizes: returning $et_vect_multiple_sizes_saved\" 2\n+    return $et_vect_multiple_sizes_saved\n+}\n+\n # Return 1 if the target supports section-anchors\n \n proc check_effective_target_section_anchors { } {\n@@ -3758,11 +3776,11 @@ proc add_options_for_bind_pic_locally { flags } {\n     return $flags\n }\n \n-# Add to FLAGS the flags needed to enable 128-bit vectors.\n+# Add to FLAGS the flags needed to enable 64-bit vectors.\n \n-proc add_options_for_quad_vectors { flags } {\n+proc add_options_for_double_vectors { flags } {\n     if [is-effective-target arm_neon_ok] {\n-\treturn \"$flags -mvectorize-with-neon-quad\"\n+\treturn \"$flags -mvectorize-with-neon-double\"\n     }\n \n     return $flags"}]}