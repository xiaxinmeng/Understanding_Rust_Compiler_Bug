{"sha": "2df37a59e2e67d2f044c8609d12d5263b52b21bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRmMzdhNTllMmU2N2QyZjA0NGM4NjA5ZDEyZDUyNjNiNTJiMjFiYw==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-07-11T07:33:43Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-07-11T07:33:43Z"}, "message": "[multiple changes]\n\n2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* lang-specs.h: Forbit the use if `-femit-class-file{s}' without\n\t`-fsyntax-only.' Fixes PR java/3248\n\n2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* jcf-io.c (find_class): Clarified error message. Fixes PR java/2603\n\n2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.h (INNER_ENCLOSING_SCOPE_CHECK): No `this' is fine if the\n\tcurrent function is static. Fixes PR java/1970\n\n2001-07-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (patch_method_invocation): Add enclosing context to ctor\n\tcalls if necessary. Fixes PR java/2953\n\n2001-07-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* parse.y (resolve_package): Abort if qualified expression member\n\tisn't right.\n\t(qualify_ambiguous_name): Don't qualify as type if `this' in use.\n\tFixes PR java/1391\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-07/msg00701.html )\n\nFrom-SVN: r43927", "tree": {"sha": "0a8efa7d178e22f6ccfca66a5e9ef32573adf206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a8efa7d178e22f6ccfca66a5e9ef32573adf206"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2df37a59e2e67d2f044c8609d12d5263b52b21bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df37a59e2e67d2f044c8609d12d5263b52b21bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df37a59e2e67d2f044c8609d12d5263b52b21bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df37a59e2e67d2f044c8609d12d5263b52b21bc/comments", "author": null, "committer": null, "parents": [{"sha": "3a2a1b5264c1610b99b992f923261b5c80f96bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2a1b5264c1610b99b992f923261b5c80f96bf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2a1b5264c1610b99b992f923261b5c80f96bf9"}], "stats": {"total": 67, "additions": 49, "deletions": 18}, "files": [{"sha": "6a138b7e0b7898abd51458fc8ce6a4e0f8da108f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2df37a59e2e67d2f044c8609d12d5263b52b21bc", "patch": "@@ -1,3 +1,29 @@\n+2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* lang-specs.h: Forbit the use if `-femit-class-file{s}' without\n+\t`-fsyntax-only.' Fixes PR java/3248\n+\n+2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* jcf-io.c (find_class): Clarified error message. Fixes PR java/2603\n+\n+2001-07-10  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.h (INNER_ENCLOSING_SCOPE_CHECK): No `this' is fine if the\n+\tcurrent function is static. Fixes PR java/1970\n+\n+2001-07-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (patch_method_invocation): Add enclosing context to ctor\n+\tcalls if necessary. Fixes PR java/2953\n+\n+2001-07-09  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* parse.y (resolve_package): Abort if qualified expression member\n+\tisn't right.\n+\t(qualify_ambiguous_name): Don't qualify as type if `this' in use.\n+\tFixes PR java/1391\n+\n 2001-07-07  Zack Weinberg  <zackw@stanford.edu>\n \n \t* verify.c: Don't use // comments.\n@@ -31,8 +57,7 @@\n 2001-07-03  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* parse.y (resolve_expression_name): Improved error message for\n-\tinner class cases.\n-\tFixes PR java/1958\n+\tinner class cases. Fixes PR java/1958\n \n 2001-06-28  Gabriel Dos Reis  <gdr@codesourcery.com>\n "}, {"sha": "f8a0f591db97861bf2ff535537bc02301ffb2fe6", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=2df37a59e2e67d2f044c8609d12d5263b52b21bc", "patch": "@@ -405,16 +405,8 @@ DEFUN(find_class, (classname, classname_length, jcf, source_ok),\n      up no matter what. FIXME. */\n   if (! java && ! class && java_buf.st_mtime > class_buf.st_mtime)\n     {\n-      char *stripped_class_name = xstrdup (classname);\n-      int i = strlen (stripped_class_name);\n-      \n-      while (stripped_class_name [i] != '.')\n-\ti--;\n-      \n-      stripped_class_name [i] = '\\0';\n       if (flag_newer)\n-\twarning (\"Source file for class `%s' is newer than its matching class file. Source file used instead\", stripped_class_name);\n-      free (stripped_class_name);\n+\twarning (\"Source file for class `%s' is newer than its matching class file. Source file `%s' used instead\", classname, java_buffer);\n       class = -1;\n     }\n "}, {"sha": "3aaed8c103fd771483047d216dedbfc2a39bbde7", "filename": "gcc/java/lang-specs.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang-specs.h?ref=2df37a59e2e67d2f044c8609d12d5263b52b21bc", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for specs for the GNU compiler for the Java(TM) language.\n-   Copyright (C) 1996, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -32,6 +32,8 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n   {\"@java\",\n    \"%{fjni:%{femit-class-files:%e-fjni and -femit-class-files are incompatible}}\\\n     %{fjni:%{femit-class-file:%e-fjni and -femit-class-file are incompatible}}\\\n+    %{femit-class-file:%{!fsyntax-only:%e-femit-class-file should used along with -fsyntax-only}}\\\n+    %{femit-class-files:%{!fsyntax-only:%e-femit-class-file should used along with -fsyntax-only}}\\\n     %{!E:jc1 %i %(jc1) %(cc1_options) %{+e*} %{I*}\\\n              %{MD} %{MMD} %{M} %{MM} %{MA} %{MT*} %{MF*}\\\n              %{!fsyntax-only:%(invoke_as)}}\", 0},"}, {"sha": "798d139177066c7cd85546efae1b357e50e0430c", "filename": "gcc/java/parse.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=2df37a59e2e67d2f044c8609d12d5263b52b21bc", "patch": "@@ -844,8 +844,11 @@ struct parser_ctxt {\n \t      (TREE_TYPE (DECL_CONTEXT                                        \\\n \t\t\t  (TYPE_NAME (TREE_TYPE (TREE_TYPE (current_this))))),\\\n \t       TREE_TYPE (DECL_CONTEXT (TYPE_NAME (T)))))                     \\\n-       /* We don't have a this. */\t\t\t\t\t      \\\n-       || !current_this))\n+       /* We don't have a this, which is OK if the current function is        \\\n+\t  static. */                                                          \\\n+       || (!current_this\t\t\t\t\t\t      \\\n+\t   && current_function_decl                                           \\\n+           && ! METHOD_STATIC (current_function_decl))))\n \n /* Push macro. First argument to PUSH_CPC is a DECL_TYPE, second\n    argument is the unqualified currently parsed class name.  */"}, {"sha": "8c1806991de2b37cf3d8863cb4fa5bc8a7015474", "filename": "gcc/java/parse.y", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2df37a59e2e67d2f044c8609d12d5263b52b21bc/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=2df37a59e2e67d2f044c8609d12d5263b52b21bc", "patch": "@@ -6818,6 +6818,10 @@ resolve_package (pkg, next)\n     for (acc = NULL_TREE, current = EXPR_WFL_QUALIFICATION (pkg); \n \t current; current = TREE_CHAIN (current))\n       {\n+\t/* If we don't have what we're expecting, exit now. TYPE_NAME\n+\t   will be null and the error caught later. */\n+\tif (TREE_CODE (QUAL_WFL (current)) != EXPR_WITH_FILE_LOCATION)\n+\t  break;\n \tacc = merge_qualified_name (acc, EXPR_WFL_NODE (QUAL_WFL (current)));\n \tif ((type_name = resolve_no_layout (acc, NULL_TREE)))\n \t  {\n@@ -10120,7 +10124,9 @@ patch_method_invocation (patch, primary, where, from_super,\n      to have an enclosing context passed as a second parameter (the\n      constructor is one of an inner class. We extract it from the\n      current function.  */\n-  if (is_super_init && PURE_INNER_CLASS_TYPE_P (DECL_CONTEXT (list)))\n+  if ((is_super_init || \n+       (TREE_CODE (patch) == CALL_EXPR && name == this_identifier_node))\n+      && PURE_INNER_CLASS_TYPE_P (DECL_CONTEXT (list)))\n     {\n       tree enclosing_decl = DECL_CONTEXT (TYPE_NAME (current_class));\n       tree extra_arg;\n@@ -10986,9 +10992,12 @@ qualify_ambiguous_name (id)\n        of the compilation unit containing NAME,\n      - NAME is declared by exactly on type-import-on-demand declaration\n      of the compilation unit containing NAME. \n-     - NAME is actually a STRING_CST. */\n-  else if (TREE_CODE (name) == STRING_CST || TREE_CODE (name) == INTEGER_CST\n-\t   || (decl = resolve_and_layout (name, NULL_TREE)))\n+     - NAME is actually a STRING_CST.\n+     This can't happen if the expression was qualified by `this.' */\n+  else if (! this_found &&\n+\t   (TREE_CODE (name) == STRING_CST ||\n+\t    TREE_CODE (name) == INTEGER_CST ||\n+\t    (decl = resolve_and_layout (name, NULL_TREE))))\n     {\n       RESOLVE_TYPE_NAME_P (qual_wfl) = 1;\n       QUAL_RESOLUTION (qual) = decl;"}]}