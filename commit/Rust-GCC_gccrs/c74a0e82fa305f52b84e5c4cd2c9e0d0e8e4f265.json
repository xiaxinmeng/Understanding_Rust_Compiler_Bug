{"sha": "c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc0YTBlODJmYTMwNWY1MmI4NGU1YzRjZDJjOWUwZDBlOGU0ZjI2NQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-10T00:16:26Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-10-10T00:16:26Z"}, "message": "Daily bump.", "tree": {"sha": "90630f162be4aae8ae40168dfffe9db6da3e23f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90630f162be4aae8ae40168dfffe9db6da3e23f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/comments", "author": null, "committer": null, "parents": [{"sha": "3427e31331677ca826c5588c87924214f7e5c54b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3427e31331677ca826c5588c87924214f7e5c54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3427e31331677ca826c5588c87924214f7e5c54b"}], "stats": {"total": 267, "additions": 266, "deletions": 1}, "files": [{"sha": "506489eb8ceb0c1ffa77e0d359e601fc0821af7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "patch": "@@ -1,3 +1,144 @@\n+2020-10-09  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/97313\n+\t* lra-constraints.c (match_reload): Don't keep strict_low_part in\n+\treloads for non-registers.\n+\n+2020-10-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/97148\n+\t* config.gcc (extra_headers): Add x86gprintrin.h.\n+\t* config/i386/adxintrin.h: Check _X86GPRINTRIN_H_INCLUDED for\n+\t<x86gprintrin.h>.\n+\t* config/i386/bmi2intrin.h: Likewise.\n+\t* config/i386/bmiintrin.h: Likewise.\n+\t* config/i386/cetintrin.h: Likewise.\n+\t* config/i386/cldemoteintrin.h: Likewise.\n+\t* config/i386/clflushoptintrin.h: Likewise.\n+\t* config/i386/clwbintrin.h: Likewise.\n+\t* config/i386/enqcmdintrin.h: Likewise.\n+\t* config/i386/fxsrintrin.h: Likewise.\n+\t* config/i386/ia32intrin.h: Likewise.\n+\t* config/i386/lwpintrin.h: Likewise.\n+\t* config/i386/lzcntintrin.h: Likewise.\n+\t* config/i386/movdirintrin.h: Likewise.\n+\t* config/i386/pconfigintrin.h: Likewise.\n+\t* config/i386/pkuintrin.h: Likewise.\n+\t* config/i386/rdseedintrin.h: Likewise.\n+\t* config/i386/rtmintrin.h: Likewise.\n+\t* config/i386/serializeintrin.h: Likewise.\n+\t* config/i386/tbmintrin.h: Likewise.\n+\t* config/i386/tsxldtrkintrin.h: Likewise.\n+\t* config/i386/waitpkgintrin.h: Likewise.\n+\t* config/i386/wbnoinvdintrin.h: Likewise.\n+\t* config/i386/xsavecintrin.h: Likewise.\n+\t* config/i386/xsaveintrin.h: Likewise.\n+\t* config/i386/xsaveoptintrin.h: Likewise.\n+\t* config/i386/xsavesintrin.h: Likewise.\n+\t* config/i386/xtestintrin.h: Likewise.\n+\t* config/i386/immintrin.h: Include <x86gprintrin.h> instead of\n+\t<fxsrintrin.h>, <xsaveintrin.h>, <xsaveoptintrin.h>,\n+\t<xsavesintrin.h>, <xsavecintrin.h>, <lzcntintrin.h>,\n+\t<bmiintrin.h>, <bmi2intrin.h>, <xtestintrin.h>, <cetintrin.h>,\n+\t<movdirintrin.h>, <sgxintrin.h, <pconfigintrin.h>,\n+\t<waitpkgintrin.h>, <cldemoteintrin.h>, <enqcmdintrin.h>,\n+\t<serializeintrin.h>, <tsxldtrkintrin.h>, <adxintrin.h>,\n+\t<clwbintrin.h>, <clflushoptintrin.h>, <wbnoinvdintrin.h> and\n+\t<pkuintrin.h>.\n+\t(_wbinvd): Moved to config/i386/x86gprintrin.h.\n+\t(_rdrand16_step): Likewise.\n+\t(_rdrand32_step): Likewise.\n+\t(_rdpid_u32): Likewise.\n+\t(_readfsbase_u32): Likewise.\n+\t(_readfsbase_u64): Likewise.\n+\t(_readgsbase_u32): Likewise.\n+\t(_readgsbase_u64): Likewise.\n+\t(_writefsbase_u32): Likewise.\n+\t(_writefsbase_u64): Likewise.\n+\t(_writegsbase_u32): Likewise.\n+\t(_writegsbase_u64): Likewise.\n+\t(_rdrand64_step): Likewise.\n+\t(_ptwrite64): Likewise.\n+\t(_ptwrite32): Likewise.\n+\t* config/i386/x86gprintrin.h: New file.\n+\t* config/i386/x86intrin.h: Include <x86gprintrin.h>.  Don't\n+\tinclude <ia32intrin.h>, <lwpintrin.h>, <tbmintrin.h>,\n+\t<popcntintrin.h>, <mwaitxintrin.h> and <clzerointrin.h>.\n+\n+2020-10-09  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR target/97348\n+\t* config/nvptx/nvptx.h (ASM_SPEC): Also pass -m to nvptx-as if\n+\tdefault is used.\n+\t* config/nvptx/nvptx.opt (misa): Init with PTX_ISA_SM35.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/sourcebuild.texi (vect_masked_load): Document.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97334\n+\t* tree-vect-slp.c (vect_build_slp_tree_1): Do not fatally\n+\tfail lanes other than zero when BB vectorizing.\n+\n+2020-10-09  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR ipa/97292\n+\tPR ipa/97335\n+\t* ipa-modref-tree.h (copy_from): Drop summary in a\n+\tclone.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97347\n+\t* tree-vect-slp.c (vect_create_constant_vectors): Use\n+\tedge insertion when inserting on the fallthru edge,\n+\tappropriately insert at the start of BBs when inserting\n+\tafter PHIs.\n+\n+2020-10-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97317\n+\t* range-op.cc (operator_cast::op1_range): Handle casts where the precision\n+\tof the RHS is only 1 greater than the precision of the LHS.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* cgraphunit.c (expand_all_functions): Free tp_first_run_order.\n+\t* ipa-modref.c (pass_ipa_modref::execute): Free order.\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations): Free\n+\tloop body.\n+\t* tree-vect-data-refs.c (vect_find_stmt_data_reference): Free\n+\tdata references upon failure.\n+\t* tree-vect-loop.c (update_epilogue_loop_vinfo): Free BBs\n+\tarray of the original loop.\n+\t* tree-vect-slp.c (vect_slp_bbs): Use an auto_vec for\n+\tdataref_groups to release its memory.\n+\n+2020-10-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94801\n+\tPR target/97312\n+\t* vr-values.c (vr_values::extract_range_basic) <CASE_CFN_CLZ,\n+\tCASE_CFN_CTZ>: When stmt is not an internal-fn call or\n+\tC?Z_DEFINED_VALUE_AT_ZERO is not 2, assume argument is not zero\n+\tand thus use [0, prec-1] range unless it can be further improved.\n+\tFor CTZ, don't update maxi from upper bound if it was previously prec.\n+\t* gimple-range.cc (gimple_ranger::range_of_builtin_call) <CASE_CFN_CLZ,\n+\tCASE_CFN_CTZ>: Likewise.\n+\n+2020-10-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97325\n+\t* match.pd (FFS(nonzero) -> CTZ(nonzero) + 1): Cast argument to\n+\tcorresponding unsigned type.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_create_constant_vectors): Properly insert\n+\tafter PHIs.\n+\n 2020-10-08  Alexandre Oliva  <oliva@adacore.com>\n \n \t* builtins.c (mathfn_built_in_type): New."}, {"sha": "bca154ae9f3e24f519298f9dc435e0a5ac84f456", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "patch": "@@ -1 +1 @@\n-20201009\n+20201010"}, {"sha": "043b9bc1b9af4d0e9b5c2d4519741d63de750f8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "patch": "@@ -1,3 +1,69 @@\n+2020-10-09  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/97313\n+\t* gcc.target/i386/pr97313.c: New.\n+\n+2020-10-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/avx-1.c (__builtin_ia32_lwpval32): New to\n+\tsupport <lwpintrin.h> included in <x86gprintrin.h>.\n+\t(__builtin_ia32_lwpval64): Likewise.\n+\t(__builtin_ia32_lwpins32): Likewise.\n+\t(__builtin_ia32_lwpins64): Likewise.\n+\t(__builtin_ia32_bextri_u32): New to support <tbmintrin.h>\n+\tincluded in <x86gprintrin.h>.\n+\t(__builtin_ia32_bextri_u64): Likewise.\n+\t* gcc.target/i386/x86gprintrin-1.c: New test.\n+\t* gcc.target/i386/x86gprintrin-2.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-3.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-4.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-4a.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-5.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-5a.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-5b.c: Likewise.\n+\t* gcc.target/i386/x86gprintrin-6.c: Likewise.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* lib/target-supports.exp (check_effective_target_vect_masked_load):\n+\tNew effective target.\n+\t* gcc.dg/vect/pr65947-3.c: Update.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97334\n+\t* gcc.dg/vect/bb-slp-pr65935.c: Amend.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97347\n+\t* g++.dg/vect/pr97347.cc: New testcase.\n+\n+2020-10-09  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97317.c: New test.\n+\n+2020-10-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94801\n+\tPR target/97312\n+\t* gcc.dg/tree-ssa/pr94801.c: New test.\n+\n+2020-10-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97325\n+\t* gcc.c-torture/execute/pr97325.c: New test.\n+\n+2020-10-09  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR testsuite/97337\n+\t* gcc.dg/pr97315-1.c: Moved to...\n+\t* g++.dg/opt/pr97315-1.C: ...here.\n+\n+2020-10-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/bb-slp-phis-1.c: New testcase.\n+\n 2020-10-08  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/96805"}, {"sha": "83332b74e57343324d79c60ab0c4b9e9f9e82fb9", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "patch": "@@ -1,3 +1,9 @@\n+2020-10-09  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR target/97148\n+\t* config/i386/shadow-stack-unwind.h: Include <x86gprintrin.h>\n+\tinstead of <cetintrin.h>.\n+\n 2020-10-01  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/morestack.S,"}, {"sha": "1553cbdbe8efec186758ce83e10a73676ec997af", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c74a0e82fa305f52b84e5c4cd2c9e0d0e8e4f265", "patch": "@@ -1,3 +1,55 @@\n+2020-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/95904\n+\t* include/std/variant (__deduce_visit_result): Add a nested ::type.\n+\t(__gen_vtable_impl</*base case*/>::_S_apply):\n+\tCheck the visitor return type.\n+\t(__same_types): New.\n+\t(__check_visitor_result): Likewise.\n+\t(__check_visitor_results): Likewise.\n+\t(visit(_Visitor&&, _Variants&&...)): Use __check_visitor_results\n+\tin case we're visiting just one variant.\n+\t* testsuite/20_util/variant/visit_neg.cc: Adjust.\n+\n+2020-10-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97311\n+\t* include/bits/random.tcc (seed_seq::generate): Use uint32_t for\n+\tcalculations. Also split the first loop into three loops to\n+\tavoid branching on k on every iteration, resolving PR 94823.\n+\t* testsuite/26_numerics/random/seed_seq/97311.cc: New test.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-erro\n+\tline number.\n+\n+2020-10-09  Daniel Lemire  <lemire@gmail.com>\n+\n+\t* include/bits/uniform_int_dist.h (uniform_int_distribution::_S_nd):\n+\tNew member function implementing Lemire's \"nearly divisionless\"\n+\talgorithm.\n+\t(uniform_int_distribution::operator()): Use _S_nd when the range\n+\tof the URBG is the full width of the result type.\n+\n+2020-10-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/Makefile.am: Set and export variable separately.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2020-10-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* scripts/check_performance: Use gnu++11 instead of gnu++0x.\n+\t* testsuite/Makefile.am (check-performance): Export CXXFLAGS to\n+\tchild process.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n+2020-10-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/performance/26_numerics/random_dist.cc: New test.\n+\n+2020-10-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_performance.h (report_header): Remove\n+\tunused variable.\n+\n 2020-10-08  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/95788"}]}