{"sha": "4d926e34935942f5aa388388f441e61d7f007c99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5MjZlMzQ5MzU5NDJmNWFhMzg4Mzg4ZjQ0MWU2MWQ3ZjAwN2M5OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2016-06-10T17:38:19Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2016-06-10T17:38:19Z"}, "message": "PR c/71392 - SEGV calling integer overflow built-ins with a null pointer\n\ngcc/ChangeLog:\n2016-06-10  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/71392\n\t* builtin-attrs.def (ATTR_NOTHROW_NONNULL_LEAF_LIST): New macro.\n\t(ATTR_NOTHROW_NONNULL_TYPEGENERIC_LEAF): Same.\n\t* builtins.def (BUILT_IN_SADD_OVERFLOW, BUILT_IN_SADDL_OVERFLOW): Use\n\tthem.\n\t(BUILT_IN_SADDLL_OVERFLOW, BUILT_IN_SSUB_OVERFLOW): Same.\n\t(BUILT_IN_SSUBL_OVERFLOW, BUILT_IN_SSUBLL_OVERFLOW): Same.\n\t(BUILT_IN_SMUL_OVERFLOW, BUILT_IN_SMULL_OVERFLOW): Same.\n\t(BUILT_IN_SMULLL_OVERFLOW, BUILT_IN_UADD_OVERFLOW): Same.\n\t(BUILT_IN_UADDL_OVERFLOW, BUILT_IN_UADDLL_OVERFLOW): Same.\n\t(BUILT_IN_USUB_OVERFLOW, BUILT_IN_USUBL_OVERFLOW): Same.\n\t(BUILT_IN_USUBLL_OVERFLOW, BUILT_IN_UMUL_OVERFLOW): Same.\n\t(BUILT_IN_UMULL_OVERFLOW, BUILT_IN_UMULLL_OVERFLOW):\n\ngcc/ada/ChangeLog:\n2016-06-10  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/71392\n\t* gcc/ada/gcc-interface/utils.c (handle_nonnull_attribute): Accept\n\tthe nonnull attribute in type-generic builtins.\n\ngcc/c-family/ChangeLog:\n2016-06-10  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/71392\n\t* gcc/c-family/c-common.c (handle_nonnull_attribute): Accept\n\tthe nonnull attribute in type-generic builtins.\n\ngcc/lto/ChangeLog:\n2016-06-10  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/71392\n\t* gcc/lto/lto-lang.c (handle_nonnull_attribute): Accept the nonnull\n\tattribute in type-generic builtins.\n\ngcc/testsuite/ChangeLog:\n2016-06-10  Martin Sebor  <msebor@redhat.com>\n\n\tPR c/71392\n\t* c-c++-common/builtin-arith-overflow-1.c: Add test cases.\n\nFrom-SVN: r237314", "tree": {"sha": "65d78393bc8d9d87c657b1577f94ea00168ceaaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d78393bc8d9d87c657b1577f94ea00168ceaaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d926e34935942f5aa388388f441e61d7f007c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d926e34935942f5aa388388f441e61d7f007c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d926e34935942f5aa388388f441e61d7f007c99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d926e34935942f5aa388388f441e61d7f007c99/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a102ee4ba8e347318c65432b26d1220d6eca1329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a102ee4ba8e347318c65432b26d1220d6eca1329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a102ee4ba8e347318c65432b26d1220d6eca1329"}], "stats": {"total": 313, "additions": 281, "deletions": 32}, "files": [{"sha": "b4ce8dbaaaa704c91f824b1318f502b9de619028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -1,3 +1,19 @@\n+2016-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71392\n+\t* builtin-attrs.def (ATTR_NOTHROW_NONNULL_LEAF_LIST): New macro.\n+\t(ATTR_NOTHROW_NONNULL_TYPEGENERIC_LEAF): Same.\n+\t* builtins.def (BUILT_IN_SADD_OVERFLOW, BUILT_IN_SADDL_OVERFLOW): Use\n+\tthem.\n+\t(BUILT_IN_SADDLL_OVERFLOW, BUILT_IN_SSUB_OVERFLOW): Same.\n+\t(BUILT_IN_SSUBL_OVERFLOW, BUILT_IN_SSUBLL_OVERFLOW): Same.\n+\t(BUILT_IN_SMUL_OVERFLOW, BUILT_IN_SMULL_OVERFLOW): Same.\n+\t(BUILT_IN_SMULLL_OVERFLOW, BUILT_IN_UADD_OVERFLOW): Same.\n+\t(BUILT_IN_UADDL_OVERFLOW, BUILT_IN_UADDLL_OVERFLOW): Same.\n+\t(BUILT_IN_USUB_OVERFLOW, BUILT_IN_USUBL_OVERFLOW): Same.\n+\t(BUILT_IN_USUBLL_OVERFLOW, BUILT_IN_UMUL_OVERFLOW): Same.\n+\t(BUILT_IN_UMULL_OVERFLOW, BUILT_IN_UMULLL_OVERFLOW):\n+\n 2016-06-10  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* config/arm/arm.h (pool_vector_label,"}, {"sha": "7576463b4533564a2349bbac3263664ba80c6bbe", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -1,3 +1,9 @@\n+2016-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71392\n+\t* gcc/ada/gcc-interface/utils.c (handle_nonnull_attribute): Accept\n+\tthe nonnull attribute in type-generic builtins.\n+\n 2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (Gigi_Equivalent_Type): Make sure equivalent"}, {"sha": "1f1e4d3b81481d0536a280cb824810c08f4d2522", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -5833,10 +5833,14 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \n   /* If no arguments are specified, all pointer arguments should be\n      non-null.  Verify a full prototype is given so that the arguments\n-     will have the correct types when we actually check them later.  */\n+     will have the correct types when we actually check them later.\n+     Avoid diagnosing type-generic built-ins since those have no\n+     prototype.  */\n   if (!args)\n     {\n-      if (!prototype_p (type))\n+      if (!prototype_p (type)\n+\t  && (!TYPE_ATTRIBUTES (type)\n+\t      || !lookup_attribute (\"type generic\", TYPE_ATTRIBUTES (type))))\n \t{\n \t  error (\"nonnull attribute without arguments on a non-prototype\");\n \t  *no_add_attrs = true;"}, {"sha": "99658883872a8ca3a4fbb009839297c573cb32a2", "filename": "gcc/builtin-attrs.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fbuiltin-attrs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fbuiltin-attrs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-attrs.def?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -165,6 +165,7 @@ DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL, ATTR_NONNULL, ATTR_NULL, \\\n /* Nothrow leaf functions whose pointer parameter(s) are all nonnull.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_LEAF, ATTR_NONNULL, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_LEAF_LIST)\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_LEAF_LIST, ATTR_LEAF, ATTR_NULL, ATTR_NOTHROW_NONNULL_LEAF)\n /* Nothrow functions whose first parameter is a nonnull pointer.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_1, ATTR_NONNULL, ATTR_LIST_1, \\\n \t\t\tATTR_NOTHROW_LIST)\n@@ -183,6 +184,10 @@ DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_5, ATTR_NONNULL, ATTR_LIST_5, \\\n /* Nothrow leaf functions which are type-generic.  */\n DEF_ATTR_TREE_LIST (ATTR_NOTHROW_TYPEGENERIC_LEAF, ATTR_TYPEGENERIC, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_LEAF_LIST)\n+/* Nothrow nonnull leaf functions that are type-generic.  */\n+DEF_ATTR_TREE_LIST (ATTR_NOTHROW_NONNULL_TYPEGENERIC_LEAF,\n+\t\t    ATTR_TYPEGENERIC, ATTR_NULL,\n+\t\t    ATTR_NOTHROW_NONNULL_LEAF)\n /* Nothrow const functions whose pointer parameter(s) are all nonnull.  */\n DEF_ATTR_TREE_LIST (ATTR_CONST_NOTHROW_NONNULL, ATTR_CONST, ATTR_NULL, \\\n \t\t\tATTR_NOTHROW_NONNULL)"}, {"sha": "33a7626b70a2b4af23810c1b9f4dbb3cddbef610", "filename": "gcc/builtins.def", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -707,31 +707,31 @@ DEF_C94_BUILTIN        (BUILT_IN_TOWLOWER, \"towlower\", BT_FN_WINT_WINT, ATTR_PUR\n DEF_C94_BUILTIN        (BUILT_IN_TOWUPPER, \"towupper\", BT_FN_WINT_WINT, ATTR_PURE_NOTHROW_LEAF_LIST)\n \n /* Category: integer overflow checking builtins.  */\n-DEF_GCC_BUILTIN        (BUILT_IN_ADD_OVERFLOW, \"add_overflow\", BT_FN_BOOL_VAR, ATTR_NOTHROW_TYPEGENERIC_LEAF)\n-DEF_GCC_BUILTIN        (BUILT_IN_SUB_OVERFLOW, \"sub_overflow\", BT_FN_BOOL_VAR, ATTR_NOTHROW_TYPEGENERIC_LEAF)\n-DEF_GCC_BUILTIN        (BUILT_IN_MUL_OVERFLOW, \"mul_overflow\", BT_FN_BOOL_VAR, ATTR_NOTHROW_TYPEGENERIC_LEAF)\n+DEF_GCC_BUILTIN        (BUILT_IN_ADD_OVERFLOW, \"add_overflow\", BT_FN_BOOL_VAR, ATTR_NOTHROW_NONNULL_TYPEGENERIC_LEAF)\n+DEF_GCC_BUILTIN        (BUILT_IN_SUB_OVERFLOW, \"sub_overflow\", BT_FN_BOOL_VAR, ATTR_NOTHROW_NONNULL_TYPEGENERIC_LEAF)\n+DEF_GCC_BUILTIN        (BUILT_IN_MUL_OVERFLOW, \"mul_overflow\", BT_FN_BOOL_VAR, ATTR_NOTHROW_NONNULL_TYPEGENERIC_LEAF)\n DEF_GCC_BUILTIN        (BUILT_IN_ADD_OVERFLOW_P, \"add_overflow_p\", BT_FN_BOOL_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC_LEAF)\n DEF_GCC_BUILTIN        (BUILT_IN_SUB_OVERFLOW_P, \"sub_overflow_p\", BT_FN_BOOL_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC_LEAF)\n DEF_GCC_BUILTIN        (BUILT_IN_MUL_OVERFLOW_P, \"mul_overflow_p\", BT_FN_BOOL_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC_LEAF)\n /* Clang compatibility.  */\n-DEF_GCC_BUILTIN        (BUILT_IN_SADD_OVERFLOW, \"sadd_overflow\", BT_FN_BOOL_INT_INT_INTPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SADDL_OVERFLOW, \"saddl_overflow\", BT_FN_BOOL_LONG_LONG_LONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SADDLL_OVERFLOW, \"saddll_overflow\", BT_FN_BOOL_LONGLONG_LONGLONG_LONGLONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SSUB_OVERFLOW, \"ssub_overflow\", BT_FN_BOOL_INT_INT_INTPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SSUBL_OVERFLOW, \"ssubl_overflow\", BT_FN_BOOL_LONG_LONG_LONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SSUBLL_OVERFLOW, \"ssubll_overflow\", BT_FN_BOOL_LONGLONG_LONGLONG_LONGLONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SMUL_OVERFLOW, \"smul_overflow\", BT_FN_BOOL_INT_INT_INTPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SMULL_OVERFLOW, \"smull_overflow\", BT_FN_BOOL_LONG_LONG_LONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_SMULLL_OVERFLOW, \"smulll_overflow\", BT_FN_BOOL_LONGLONG_LONGLONG_LONGLONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_UADD_OVERFLOW, \"uadd_overflow\", BT_FN_BOOL_UINT_UINT_UINTPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_UADDL_OVERFLOW, \"uaddl_overflow\", BT_FN_BOOL_ULONG_ULONG_ULONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_UADDLL_OVERFLOW, \"uaddll_overflow\", BT_FN_BOOL_ULONGLONG_ULONGLONG_ULONGLONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_USUB_OVERFLOW, \"usub_overflow\", BT_FN_BOOL_UINT_UINT_UINTPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_USUBL_OVERFLOW, \"usubl_overflow\", BT_FN_BOOL_ULONG_ULONG_ULONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_USUBLL_OVERFLOW, \"usubll_overflow\", BT_FN_BOOL_ULONGLONG_ULONGLONG_ULONGLONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_UMUL_OVERFLOW, \"umul_overflow\", BT_FN_BOOL_UINT_UINT_UINTPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_UMULL_OVERFLOW, \"umull_overflow\", BT_FN_BOOL_ULONG_ULONG_ULONGPTR, ATTR_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_UMULLL_OVERFLOW, \"umulll_overflow\", BT_FN_BOOL_ULONGLONG_ULONGLONG_ULONGLONGPTR, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SADD_OVERFLOW, \"sadd_overflow\", BT_FN_BOOL_INT_INT_INTPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SADDL_OVERFLOW, \"saddl_overflow\", BT_FN_BOOL_LONG_LONG_LONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SADDLL_OVERFLOW, \"saddll_overflow\", BT_FN_BOOL_LONGLONG_LONGLONG_LONGLONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SSUB_OVERFLOW, \"ssub_overflow\", BT_FN_BOOL_INT_INT_INTPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SSUBL_OVERFLOW, \"ssubl_overflow\", BT_FN_BOOL_LONG_LONG_LONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SSUBLL_OVERFLOW, \"ssubll_overflow\", BT_FN_BOOL_LONGLONG_LONGLONG_LONGLONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SMUL_OVERFLOW, \"smul_overflow\", BT_FN_BOOL_INT_INT_INTPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SMULL_OVERFLOW, \"smull_overflow\", BT_FN_BOOL_LONG_LONG_LONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_SMULLL_OVERFLOW, \"smulll_overflow\", BT_FN_BOOL_LONGLONG_LONGLONG_LONGLONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UADD_OVERFLOW, \"uadd_overflow\", BT_FN_BOOL_UINT_UINT_UINTPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UADDL_OVERFLOW, \"uaddl_overflow\", BT_FN_BOOL_ULONG_ULONG_ULONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UADDLL_OVERFLOW, \"uaddll_overflow\", BT_FN_BOOL_ULONGLONG_ULONGLONG_ULONGLONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_USUB_OVERFLOW, \"usub_overflow\", BT_FN_BOOL_UINT_UINT_UINTPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_USUBL_OVERFLOW, \"usubl_overflow\", BT_FN_BOOL_ULONG_ULONG_ULONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_USUBLL_OVERFLOW, \"usubll_overflow\", BT_FN_BOOL_ULONGLONG_ULONGLONG_ULONGLONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UMUL_OVERFLOW, \"umul_overflow\", BT_FN_BOOL_UINT_UINT_UINTPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UMULL_OVERFLOW, \"umull_overflow\", BT_FN_BOOL_ULONG_ULONG_ULONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_UMULLL_OVERFLOW, \"umulll_overflow\", BT_FN_BOOL_ULONGLONG_ULONGLONG_ULONGLONGPTR, ATTR_NOTHROW_NONNULL_LEAF_LIST)\n \n /* Category: miscellaneous builtins.  */\n DEF_LIB_BUILTIN        (BUILT_IN_ABORT, \"abort\", BT_FN_VOID, ATTR_TMPURE_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "88cbd871d107383ef15b48d81a8b185aaece47a1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -1,3 +1,9 @@\n+2016-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71392\n+\t* gcc/c-family/c-common.c (handle_nonnull_attribute): Accept\n+\tthe nonnull attribute in type-generic builtins.\n+\n 2016-06-09  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/70883"}, {"sha": "85f3a03146ed1b6b8a82186b1ea5ed8ee26c1bf3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -9040,10 +9040,14 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \n   /* If no arguments are specified, all pointer arguments should be\n      non-null.  Verify a full prototype is given so that the arguments\n-     will have the correct types when we actually check them later.  */\n+     will have the correct types when we actually check them later.\n+     Avoid diagnosing type-generic built-ins since those have no\n+     prototype.  */\n   if (!args)\n     {\n-      if (!prototype_p (type))\n+      if (!prototype_p (type)\n+\t  && (!TYPE_ATTRIBUTES (type)\n+\t      || !lookup_attribute (\"type generic\", TYPE_ATTRIBUTES (type))))\n \t{\n \t  error (\"nonnull attribute without arguments on a non-prototype\");\n \t  *no_add_attrs = true;"}, {"sha": "9323a2551512fdf70e0497d3ce808432e70b68bd", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -1,3 +1,9 @@\n+2016-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71392\n+\t* gcc/lto/lto-lang.c (handle_nonnull_attribute): Accept the nonnull\n+\tattribute in type-generic builtins.\n+\n 2016-05-16  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* lto-partition.c (add_symbol_to_partition_1): Likewise."}, {"sha": "301cf2124a6a7a3f619219c3fc08e40d414d7181", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -352,10 +352,15 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n \n   /* If no arguments are specified, all pointer arguments should be\n      non-null.  Verify a full prototype is given so that the arguments\n-     will have the correct types when we actually check them later.  */\n+     will have the correct types when we actually check them later.\n+     Avoid diagnosing type-generic built-ins since those have no\n+     prototype.  */\n   if (!args)\n     {\n-      gcc_assert (prototype_p (type));\n+      gcc_assert (prototype_p (type)\n+\t\t  || !TYPE_ATTRIBUTES (type)\n+\t\t  || lookup_attribute (\"type generic\", TYPE_ATTRIBUTES (type)));\n+\n       return NULL_TREE;\n     }\n "}, {"sha": "932567e1bd472af5785cb62a34d4c8600a250cb0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -1,3 +1,8 @@\n+2016-06-10  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/71392\n+\t* c-c++-common/builtin-arith-overflow-1.c: Add test cases.\n+\n 2016-06-10  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/71335"}, {"sha": "3576748e1eeaa59bc89bc625f657ea0b2a5b0481", "filename": "gcc/testsuite/c-c++-common/builtin-arith-overflow-1.c", "status": "modified", "additions": 197, "deletions": 5, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-arith-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d926e34935942f5aa388388f441e61d7f007c99/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-arith-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-arith-overflow-1.c?ref=4d926e34935942f5aa388388f441e61d7f007c99", "patch": "@@ -1,7 +1,18 @@\n+/* Test exercising invalid calls to arithmetic overflow checking built-ins,\n+   including PR c/71392 - SEGV calling integer overflow built-ins with a null\n+   pointer, (issuing a warning for such invocations).  */\n /* { dg-do compile } */\n+/* { dg-additional-options \"-Wnonnull\" }\n+\n+/* Verify that calls with fewer or more than 3 arguments to the generic\n+   __builtin_op_overflow functions are rejected.  */\n+\n+#ifndef __cplusplus\n+#define bool _Bool\n+#endif\n \n int\n-f1 (void)\n+generic_0 (void)\n {\n   int x = __builtin_add_overflow ();\t/* { dg-error \"too few arguments to function\" } */\n   x += __builtin_sub_overflow ();\t/* { dg-error \"too few arguments to function\" } */\n@@ -12,6 +23,191 @@ f1 (void)\n   return x;\n }\n \n+int\n+generic_1 (int a)\n+{\n+  int x = __builtin_add_overflow (a);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_sub_overflow (a);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_mul_overflow (a);\t/* { dg-error \"too few arguments to function\" } */\n+\n+  /* Literal argument.  */\n+  x += __builtin_add_overflow (1);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_sub_overflow (2);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_mul_overflow (3);\t/* { dg-error \"too few arguments to function\" } */\n+  return x;\n+}\n+\n+int\n+generic_2 (int a, int b)\n+{\n+  int x = __builtin_add_overflow (a, b);/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_sub_overflow (a, b);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_mul_overflow (a, b);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_add_overflow (a, 1);   /* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_sub_overflow (a, 2);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_mul_overflow (a, 3);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_add_overflow (4, b);   /* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_sub_overflow (5, b);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_mul_overflow (6, b);\t/* { dg-error \"too few arguments to function\" } */\n+  return x;\n+}\n+\n+/* Verify that calls with the correct number of arguments to the generic\n+   __builtin_op_overflow functions are accepted.  */\n+\n+int\n+generic_3 (int a, int b, int c)\n+{\n+  int x = __builtin_add_overflow (a, b, &c);\n+  x += __builtin_sub_overflow (a, b, &c);\n+  x += __builtin_mul_overflow (a, b, &c);\n+  x += __builtin_add_overflow (a, 1, &c);\n+  x += __builtin_sub_overflow (a, 2, &c);\n+  x += __builtin_mul_overflow (a, 3, &c);\n+  x += __builtin_add_overflow (4, b, &c);\n+  x += __builtin_sub_overflow (5, b, &c);\n+  x += __builtin_mul_overflow (6, b, &c);\n+  x += __builtin_add_overflow (7, 8, &c);\n+  x += __builtin_sub_overflow (9, 10, &c);\n+  x += __builtin_mul_overflow (11, 12, &c);\n+\n+  /* Verify that a null pointer to an integer is diagnosed.  */\n+\n+  /* The following two are rejected due to c/71479 - error on\n+     __builtin_add_overflow with bool or enum pointer as last argument.\n+\n+    x += __builtin_add_overflow (0, 0, (bool *)0);\n+\n+    enum E { e0 };\n+    x += __builtin_add_overflow (0, 0, (enum E *)0);\n+  */\n+\n+  x += __builtin_sub_overflow (0, 0, (char *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_add_overflow (0, 0, (short *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_add_overflow (a, b, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_sub_overflow (a, b, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_mul_overflow (a, b, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_add_overflow (a, 1, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_sub_overflow (a, 2, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_mul_overflow (a, 3, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_add_overflow (4, b, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_sub_overflow (5, b, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_mul_overflow (6, b, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_add_overflow (7, 8, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_sub_overflow (9, 10, (int *)0);   /* { dg-warning \"null argument\" } */\n+  x += __builtin_mul_overflow (11, 12, (int *)0);   /* { dg-warning \"null argument\" } */\n+\n+  return x;\n+}\n+\n+int\n+generic_4 (int a, int b, int *c, int d)\n+{\n+  int x = __builtin_add_overflow (a, b, c, d);\t/* { dg-error \"too many arguments to function\" } */\n+  x += __builtin_sub_overflow (a, b, c, d, d, d);\t/* { dg-error \"too many arguments to function\" } */\n+  x += __builtin_sub_overflow (a, b, c, d);\t/* { dg-error \"too many arguments to function\" } */\n+  x += __builtin_mul_overflow (a, b, c, d);\t/* { dg-error \"too many arguments to function\" } */\n+  return x;\n+}\n+\n+/* Verify that calls with fewer or more than 3 arguments to the type\n+   specific forms of the __builtin_op_overflow functions are rejected.  */\n+\n+int\n+generic_wrong_type (int a, int b)\n+{\n+  void *p = 0;\n+  double d = 0;\n+  int x = __builtin_add_overflow (a, b, p);   /* { dg-error \"does not have pointer to integer type\" } */\n+  x += __builtin_sub_overflow (a, b, &p);     /* { dg-error \"does not have pointer to integer type\" } */\n+  x += __builtin_mul_overflow (a, b, &d);     /* { dg-error \"does not have pointer to integer type\" } */\n+\n+  /* Also verify literal arguments.  */\n+  x += __builtin_add_overflow (1, 1, p);   /* { dg-error \"does not have pointer to integer type\" } */\n+  x += __builtin_sub_overflow (1, 1, &p);     /* { dg-error \"does not have pointer to integer type\" } */\n+  x += __builtin_mul_overflow (1, 1, &d);     /* { dg-error \"does not have pointer to integer type\" } */\n+  return x;\n+}\n+\n+/* Verify that calls with fewer than 2 or more than 3 arguments to\n+   the typed __builtin_op_overflow functions are rejected.  */\n+int\n+typed_0 (void)\n+{\n+  int x = __builtin_add_overflow ();\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_sub_overflow ();\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_mul_overflow ();\t/* { dg-error \"too few arguments to function\" } */\n+  return x;\n+}\n+\n+int\n+typed_1 (int a)\n+{\n+  int x = __builtin_sadd_overflow (a);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_ssub_overflow (a);\t/* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_smul_overflow (a);\t/* { dg-error \"too few arguments to function\" } */\n+  return x;\n+}\n+\n+int\n+typed_2 (int a, int b)\n+{\n+  int x = __builtin_sadd_overflow (a, b);  /* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_ssub_overflow (a, b);\t   /* { dg-error \"too few arguments to function\" } */\n+  x += __builtin_smul_overflow (a, b);\t   /* { dg-error \"too few arguments to function\" } */\n+  return x;\n+}\n+\n+/* Exercise PR c/71392 - SEGV calling integer overflow built-ins with\n+   a null pointer.  Verify that calls with a null argument are diagnosed\n+   with -Wnonnull.  */\n+\n+int\n+typed_3_null (int a, int b)\n+{\n+  int x = 0;\n+\n+  x += __builtin_sadd_overflow (a, b, (int *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_uadd_overflow (a, b, (unsigned *)0); /* { dg-warning \"null argument\" } */\n+\n+  x += __builtin_saddl_overflow (a, b, (long *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_uaddl_overflow (a, b, (unsigned long *)0); /* { dg-warning \"null argument\" } */\n+\n+  x += __builtin_saddll_overflow (a, b, (long long *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_uaddll_overflow (a, b, (unsigned long long *)0); /* { dg-warning \"null argument\" } */\n+\n+\n+  x += __builtin_ssub_overflow (a, b, (int *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_usub_overflow (a, b, (unsigned *)0); /* { dg-warning \"null argument\" } */\n+\n+  x += __builtin_ssubl_overflow (a, b, (long *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_usubl_overflow (a, b, (unsigned long *)0); /* { dg-warning \"null argument\" } */\n+\n+  x += __builtin_ssubll_overflow (a, b, (long long *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_usubll_overflow (a, b, (unsigned long long *)0); /* { dg-warning \"null argument\" } */\n+\n+\n+  x += __builtin_smul_overflow (a, b, (int *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_umul_overflow (a, b, (unsigned *)0); /* { dg-warning \"null argument\" } */\n+\n+  x += __builtin_smull_overflow (a, b, (long *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_umull_overflow (a, b, (unsigned long *)0); /* { dg-warning \"null argument\" } */\n+\n+  x += __builtin_smulll_overflow (a, b, (long long *)0); /* { dg-warning \"null argument\" } */\n+  x += __builtin_umulll_overflow (a, b, (unsigned long long *)0); /* { dg-warning \"null argument\" } */\n+\n+  return x;\n+}\n+\n+int\n+typed_4 (int a, int b, int *c, int d)\n+{\n+  int x = __builtin_sadd_overflow (a, b, c, d);\t/* { dg-error \"too many arguments to function\" } */\n+  x += __builtin_ssub_overflow (a, b, c, d);\t/* { dg-error \"too many arguments to function\" } */\n+  x += __builtin_smul_overflow (a, b, c, d);\t/* { dg-error \"too many arguments to function\" } */\n+  return x;\n+}\n+\n int\n f2 (int a, int b, int *c, int d)\n {\n@@ -27,10 +223,6 @@ f2 (int a, int b, int *c, int d)\n \n enum E { e0 = 0, e1 = 1 };\n \n-#ifndef __cplusplus\n-#define bool _Bool\n-#endif\n-\n int\n f3 (float fa, int a, _Complex long int ca, double fb, void *pb, int b, enum E eb, bool bb, int *c)\n {"}]}