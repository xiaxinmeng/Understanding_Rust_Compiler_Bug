{"sha": "f9ba5949c966ee7267016544115addb761a63b62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliYTU5NDljOTY2ZWU3MjY3MDE2NTQ0MTE1YWRkYjc2MWE2M2I2Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-26T15:40:04Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-26T15:40:04Z"}, "message": "arm.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\n\t* config/arm/arm.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\t(arm_struct_value_rtx): Likewise.\n\t* config/arm/arm.h (PROMOTE_FUNCTION_ARGS): Remove.\n\t(STRUCT_VALUE): Likewise.\n\t(STRUCT_VALUE_REGNUM): Likewise.\n\t(PROMOTE_PROTOTYPES): Likewise.\n\nFrom-SVN: r76636", "tree": {"sha": "09b27dba019c2d92e6e2c6f7cd9bc63b011e1ca4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09b27dba019c2d92e6e2c6f7cd9bc63b011e1ca4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ba5949c966ee7267016544115addb761a63b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ba5949c966ee7267016544115addb761a63b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ba5949c966ee7267016544115addb761a63b62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ba5949c966ee7267016544115addb761a63b62/comments", "author": null, "committer": null, "parents": [{"sha": "351a758bd93d01a6782e922b3c094121ada93a0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351a758bd93d01a6782e922b3c094121ada93a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351a758bd93d01a6782e922b3c094121ada93a0b"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "60c03f17d299c5df9b4e5c209bc6d997b8accbbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ba5949c966ee7267016544115addb761a63b62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ba5949c966ee7267016544115addb761a63b62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9ba5949c966ee7267016544115addb761a63b62", "patch": "@@ -1,3 +1,14 @@\n+2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arm/arm.c (TARGET_PROMOTE_FUNCTION_ARGS): New.\n+\t(TARGET_PROMOTE_PROTOTYPES): Likewise.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\t(arm_struct_value_rtx): Likewise.\n+\t* config/arm/arm.h (PROMOTE_FUNCTION_ARGS): Remove.\n+\t(STRUCT_VALUE): Likewise.\n+\t(STRUCT_VALUE_REGNUM): Likewise.\n+\t(PROMOTE_PROTOTYPES): Likewise.\n+\n 2004-01-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/ia64/ia64-protos.h: Remove the prototype for"}, {"sha": "692432b3bdf7a9a696c39380a56bd79b56afff57", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ba5949c966ee7267016544115addb761a63b62/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ba5949c966ee7267016544115addb761a63b62/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f9ba5949c966ee7267016544115addb761a63b62", "patch": "@@ -150,6 +150,7 @@ static void aof_dump_pic_table (FILE *);\n static void aof_file_start (void);\n static void aof_file_end (void);\n #endif\n+static rtx arm_struct_value_rtx (tree, int);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -233,6 +234,14 @@ static void aof_file_end (void);\n #undef  TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN arm_expand_builtin\n \n+#undef TARGET_PROMOTE_FUNCTION_ARGS\n+#define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_PROTOTYPES\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+\n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX arm_struct_value_rtx\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -13322,3 +13331,22 @@ arm_output_load_gr (rtx *operands)\n \n   return \"\";\n }\n+\n+static rtx\n+arm_struct_value_rtx (tree fntype ATTRIBUTE_UNUSED,\n+\t\t      int incoming ATTRIBUTE_UNUSED)\n+{\n+#if 0\n+  /* FIXME: The ARM backend has special code to handle structure\n+\t returns, and will reserve its own hidden first argument.  So\n+\t if this macro is enabled a *second* hidden argument will be\n+\t reserved, which will break binary compatibility with old\n+\t toolchains and also thunk handling.  One day this should be\n+\t fixed.  */\n+  return 0;\n+#else\n+  /* Register in which address to store a structure value\n+     is passed to a function.  */\n+  return gen_rtx_REG (Pmode, ARG_REGISTER (1));\n+#endif\n+}"}, {"sha": "d169f180f817d8dd5b0daf76d35529733165c7d2", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ba5949c966ee7267016544115addb761a63b62/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ba5949c966ee7267016544115addb761a63b62/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=f9ba5949c966ee7267016544115addb761a63b62", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for ARM.\n    Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rearnsha@arm.com)\n@@ -709,11 +709,6 @@ extern int arm_is_6_or_7;\n       (MODE) = SImode;\t\t\t\t\\\n     }\n \n-/* Define this macro if the promotion described by `PROMOTE_MODE'\n-   should also be done for outgoing function arguments.  */\n-/* This is required to ensure that push insns always push a word.  */\n-#define PROMOTE_FUNCTION_ARGS\n-\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0\n@@ -1051,20 +1046,6 @@ extern const char * structure_size_string;\n /* Return the register number of the N'th (integer) argument.  */\n #define ARG_REGISTER(N) \t(N - 1)\n \n-#if 0 /* FIXME: The ARM backend has special code to handle structure\n-\t returns, and will reserve its own hidden first argument.  So\n-\t if this macro is enabled a *second* hidden argument will be\n-\t reserved, which will break binary compatibility with old\n-\t toolchains and also thunk handling.  One day this should be\n-\t fixed.  */\n-/* RTX for structure returns.  NULL means use a hidden first argument.  */\n-#define STRUCT_VALUE\t\t0\n-#else\n-/* Register in which address to store a structure value\n-   is passed to a function.  */\n-#define STRUCT_VALUE_REGNUM\tARG_REGISTER (1)\n-#endif\n-\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n \n@@ -2349,9 +2330,6 @@ do {\t\t\t\t\t\t\t\\\n /* Calling from registers is a massive pain.  */\n #define NO_FUNCTION_CSE 1\n \n-/* Chars and shorts should be passed as ints.  */\n-#define PROMOTE_PROTOTYPES 1\n-\n /* The machine modes of pointers and functions */\n #define Pmode  SImode\n #define FUNCTION_MODE  Pmode"}]}