{"sha": "65167982efa4dbb96698d026e6d7e17acb513f0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxNjc5ODJlZmE0ZGJiOTY2OThkMDI2ZTZkN2UxN2FjYjUxM2YwYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-09-30T13:01:13Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-09-30T13:01:13Z"}, "message": "Fortran: add contiguous check for ptr assignment, fix non-contig check (PR97242)\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/97242\n\t* expr.c (gfc_is_not_contiguous): Fix check.\n\t(gfc_check_pointer_assign): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/97242\n\t* gfortran.dg/contiguous_11.f90: New test.\n\t* gfortran.dg/contiguous_4.f90: Update.\n\t* gfortran.dg/contiguous_7.f90: Update.", "tree": {"sha": "3d5bc9c39be8e950bd889436ee84d1148c0ae582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d5bc9c39be8e950bd889436ee84d1148c0ae582"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65167982efa4dbb96698d026e6d7e17acb513f0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65167982efa4dbb96698d026e6d7e17acb513f0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65167982efa4dbb96698d026e6d7e17acb513f0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65167982efa4dbb96698d026e6d7e17acb513f0a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0a63e47cd83f4e8534d0d201739bdd10f321a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0a63e47cd83f4e8534d0d201739bdd10f321a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0a63e47cd83f4e8534d0d201739bdd10f321a2"}], "stats": {"total": 93, "additions": 82, "deletions": 11}, "files": [{"sha": "b87ae3d72a18ea0e3f5599a2b8e6500b6fb8568a", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=65167982efa4dbb96698d026e6d7e17acb513f0a", "patch": "@@ -4366,10 +4366,18 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n      contiguous.  */\n \n   if (lhs_attr.contiguous\n-      && lhs_attr.dimension > 0\n-      && !gfc_is_simply_contiguous (rvalue, false, true))\n-    gfc_warning (OPT_Wextra, \"Assignment to contiguous pointer from \"\n-\t\t \"non-contiguous target at %L\", &rvalue->where);\n+      && lhs_attr.dimension > 0)\n+    {\n+      if (gfc_is_not_contiguous (rvalue))\n+\t{\n+\t  gfc_error (\"Assignment to contiguous pointer from \"\n+\t\t     \"non-contiguous target at %L\", &rvalue->where);\n+\t  return false;\n+\t}\n+      if (!gfc_is_simply_contiguous (rvalue, false, true))\n+\tgfc_warning (OPT_Wextra, \"Assignment to contiguous pointer from \"\n+\t\t\t\t \"non-contiguous target at %L\", &rvalue->where);\n+    }\n \n   /* Warn if it is the LHS pointer may lives longer than the RHS target.  */\n   if (warn_target_lifetime\n@@ -5935,7 +5943,7 @@ gfc_is_not_contiguous (gfc_expr *array)\n     {\n       /* Array-ref shall be last ref.  */\n \n-      if (ar)\n+      if (ar && ar->type != AR_ELEMENT)\n \treturn true;\n \n       if (ref->type == REF_ARRAY)\n@@ -5955,10 +5963,11 @@ gfc_is_not_contiguous (gfc_expr *array)\n \n       if (gfc_ref_dimen_size (ar, i, &ref_size, NULL))\n \t{\n-\t  if (gfc_dep_difference (ar->as->lower[i], ar->as->upper[i], &arr_size))\n+\t  if (gfc_dep_difference (ar->as->upper[i], ar->as->lower[i], &arr_size))\n \t    {\n \t      /* a(2:4,2:) is known to be non-contiguous, but\n \t\t a(2:4,i:i) can be contiguous.  */\n+\t      mpz_add_ui (arr_size, arr_size, 1L);\n \t      if (previous_incomplete && mpz_cmp_si (ref_size, 1) != 0)\n \t\t{\n \t\t  mpz_clear (arr_size);\n@@ -5979,7 +5988,10 @@ gfc_is_not_contiguous (gfc_expr *array)\n \t      && ar->dimen_type[i] == DIMEN_RANGE\n \t      && ar->stride[i] && ar->stride[i]->expr_type == EXPR_CONSTANT\n \t      && mpz_cmp_si (ar->stride[i]->value.integer, 1) != 0)\n-\t    return true;\n+\t    {\n+\t      mpz_clear (ref_size);\n+\t      return true;\n+\t    }\n \n \t  mpz_clear (ref_size);\n \t}"}, {"sha": "b7eb7bfd0b49a405a6efb942e1b22c1ac07621c0", "filename": "gcc/testsuite/gfortran.dg/contiguous_11.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_11.f90?ref=65167982efa4dbb96698d026e6d7e17acb513f0a", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+!\n+! PR fortran/97242\n+!\n+implicit none\n+type t\n+  integer, allocatable :: A(:,:,:)\n+  integer :: D(5,5,5)\n+end type t\n+\n+type(t), target :: B(5)\n+integer, pointer, contiguous :: P(:,:,:)\n+integer, target :: C(5,5,5)\n+integer :: i\n+\n+i = 1\n+\n+! OK: contiguous\n+P => B(i)%A\n+P => B(i)%A(:,:,:)\n+P => C\n+P => C(:,:,:)\n+call foo (B(i)%A)\n+call foo (B(i)%A(:,:,:))\n+call foo (C)\n+call foo (C(:,:,:))\n+\n+! Invalid - not contiguous\n+! \"If the pointer object has the CONTIGUOUS attribute, the pointer target shall be contiguous.\"\n+! \u2192 known to be noncontigous (not always checkable, however)\n+P => B(i)%A(:,::3,::4)   ! <<< Unknown as (1:2:3,1:3:4) is contiguous and has one element.\n+P => B(i)%D(:,::2,::2)   ! { dg-error \"Assignment to contiguous pointer from non-contiguous target\" }\n+P => C(::2,::2,::2)      ! { dg-error \"Assignment to contiguous pointer from non-contiguous target\" }\n+\n+! This following is stricter:\n+! C1541  The actual argument corresponding to a dummy pointer with the\n+!        CONTIGUOUS attribute shall be simply contiguous (9.5.4).\n+call foo (B(i)%A(:,::3,::4))  ! { dg-error \"must be simply contiguous\" }\n+call foo (C(::2,::2,::2))     ! { dg-error \"must be simply contiguous\" }\n+\n+contains\n+  subroutine foo(Q)\n+    integer, pointer, intent(in), contiguous :: Q(:,:,:)\n+  end subroutine foo\n+end"}, {"sha": "e784287c00d8829131a1021bba5189272659c338", "filename": "gcc/testsuite/gfortran.dg/contiguous_4.f90", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_4.f90?ref=65167982efa4dbb96698d026e6d7e17acb513f0a", "patch": "@@ -10,8 +10,10 @@ program cont_01_neg\n \n   x = (/ (real(i),i=1,45) /)\n   x2 = reshape(x,shape(x2))\n-  r => x(::3)\n-  r2 => x2(2:,:)\n+  r => x(::46)  \n+  r => x(::3) ! { dg-error \"Assignment to contiguous pointer from non-contiguous target\" }\n+  r2 => x2(2:,9:)\n+  r2 => x2(2:,:)  ! { dg-error \"Assignment to contiguous pointer from non-contiguous target\" }\n   r2 => x2(:,2:3)\n   r => x2(2:3,1)\n   r => x(::1)"}, {"sha": "7444b4c5c30d29eb350c4b879301fc1c9fbd3bc3", "filename": "gcc/testsuite/gfortran.dg/contiguous_7.f90", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65167982efa4dbb96698d026e6d7e17acb513f0a/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcontiguous_7.f90?ref=65167982efa4dbb96698d026e6d7e17acb513f0a", "patch": "@@ -8,17 +8,29 @@ program cont_01_neg\n   implicit none\n   real, pointer, contiguous :: r(:)\n   real, pointer, contiguous :: r2(:,:)\n-  real, target :: x(45)\n-  real, target :: x2(5,9)\n+  real, target, allocatable :: x(:)\n+  real, target, allocatable :: x2(:,:)\n+  real, target :: y(45)\n+  real, target :: y2(5,9)\n   integer :: i\n   integer :: n=1\n \n   x = (/ (real(i),i=1,45) /)\n   x2 = reshape(x,shape(x2))\n+  y = x\n+  y2 = x2\n+\n   r => x(::3) ! { dg-warning \"ssignment to contiguous pointer from non-contiguous target\" }\n   r2 => x2(2:,:) ! { dg-warning \"ssignment to contiguous pointer from non-contiguous target\" }\n   r2 => x2(:,2:3)\n   r => x2(2:3,1)\n   r => x(::1)\n   r => x(::n) ! { dg-warning \"ssignment to contiguous pointer from non-contiguous target\" }\n+\n+  r => y(::3) ! { dg-error \"ssignment to contiguous pointer from non-contiguous target\" }\n+  r2 => y2(2:,:) ! { dg-error \"ssignment to contiguous pointer from non-contiguous target\" }\n+  r2 => y2(:,2:3)\n+  r => y2(2:3,1)\n+  r => y(::1)\n+  r => y(::n) ! { dg-warning \"ssignment to contiguous pointer from non-contiguous target\" }\n end program"}]}