{"sha": "a7faf57b71e6e562d5d9ac0e5b927f648fae1b02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmYWY1N2I3MWU2ZTU2MmQ1ZDlhYzBlNWI5MjdmNjQ4ZmFlMWIwMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2017-07-27T12:56:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2017-07-27T12:56:03Z"}, "message": "sparc.c (sparc_option_override): Set MASK_FSMULD flag earlier and only if MASK_FPU is set.\n\n\t* config/sparc/sparc.c (sparc_option_override): Set MASK_FSMULD flag\n\tearlier and only if MASK_FPU is set.  Adjust formatting.\n\nFrom-SVN: r250623", "tree": {"sha": "2dd9eda57667160f014096d88aad99e86f63bad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dd9eda57667160f014096d88aad99e86f63bad6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02/comments", "author": null, "committer": null, "parents": [{"sha": "89722cf73d9f52a127c111f7818d82c89de588a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89722cf73d9f52a127c111f7818d82c89de588a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89722cf73d9f52a127c111f7818d82c89de588a9"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "bcfe5f8fb2e72a74190a4a69aed5b1f64086fe89", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7faf57b71e6e562d5d9ac0e5b927f648fae1b02", "patch": "@@ -1,3 +1,8 @@\n+2017-07-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_option_override): Set MASK_FSMULD flag\n+\tearlier and only if MASK_FPU is set.  Adjust formatting.\n+\n 2017-07-27  Martin Liska  <mliska@suse.cz>\n \n \t* auto-profile.c (autofdo_source_profile::update_inlined_ind_target):"}, {"sha": "59761aac3106df84c021d5db5d5b3a363ccb8c58", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7faf57b71e6e562d5d9ac0e5b927f648fae1b02/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=a7faf57b71e6e562d5d9ac0e5b927f648fae1b02", "patch": "@@ -1449,8 +1449,7 @@ sparc_option_override (void)\n       MASK_V9|MASK_POPC|MASK_VIS4|MASK_FMAF|MASK_CBCOND|MASK_SUBXC },\n     /* UltraSPARC M8 */\n     { \"m8\",\t\tMASK_ISA,\n-      MASK_V9|MASK_POPC|MASK_VIS4|MASK_FMAF|MASK_CBCOND|MASK_SUBXC\n-      |MASK_VIS4B }\n+      MASK_V9|MASK_POPC|MASK_VIS4|MASK_FMAF|MASK_CBCOND|MASK_SUBXC|MASK_VIS4B }\n   };\n   const struct cpu_table *cpu;\n   unsigned int i;\n@@ -1489,6 +1488,11 @@ sparc_option_override (void)\n \t}\n     }\n \n+  /* Enable the FsMULd instruction by default if not explicitly specified by\n+     the user.  It may be later disabled by the CPU (explicitly or not).  */\n+  if (TARGET_FPU && !(target_flags_explicit & MASK_FSMULD))\n+    target_flags |= MASK_FSMULD;\n+\n   if (TARGET_DEBUG_OPTIONS)\n     {\n       dump_target_flags(\"Initial target_flags\", target_flags);\n@@ -1513,12 +1517,6 @@ sparc_option_override (void)\n       target_flags |= MASK_LONG_DOUBLE_128;\n     }\n \n-  /* Enable the FsMULd instruction by default if not explicitly configured by\n-     the user.  It may be later disabled by the CPU target flags or if\n-     !TARGET_FPU.  */\n-  if (!(target_flags_explicit & MASK_FSMULD))\n-    target_flags |= MASK_FSMULD;\n-\n   /* Code model selection.  */\n   sparc_cmodel = SPARC_DEFAULT_CMODEL;\n \n@@ -1540,7 +1538,7 @@ sparc_option_override (void)\n \t    sparc_cmodel = cmodel->value;\n \t}\n       else\n-\terror (\"-mcmodel= is not supported on 32 bit systems\");\n+\terror (\"-mcmodel= is not supported on 32-bit systems\");\n     }\n \n   /* Check that -fcall-saved-REG wasn't specified for out registers.  */\n@@ -1551,7 +1549,7 @@ sparc_option_override (void)\n         call_used_regs [i] = 1;\n       }\n \n-  /* Set the default CPU.  */\n+  /* Set the default CPU if no -mcpu option was specified.  */\n   if (!global_options_set.x_sparc_cpu_and_features)\n     {\n       for (def = &cpu_default[0]; def->cpu != -1; ++def)\n@@ -1561,6 +1559,7 @@ sparc_option_override (void)\n       sparc_cpu_and_features = def->processor;\n     }\n \n+  /* Set the default CPU if no -mtune option was specified.  */\n   if (!global_options_set.x_sparc_cpu)\n     sparc_cpu = sparc_cpu_and_features;\n \n@@ -1569,8 +1568,6 @@ sparc_option_override (void)\n   if (TARGET_DEBUG_OPTIONS)\n     {\n       fprintf (stderr, \"sparc_cpu_and_features: %s\\n\", cpu->name);\n-      fprintf (stderr, \"sparc_cpu: %s\\n\",\n-\t       cpu_table[(int) sparc_cpu].name);\n       dump_target_flags (\"cpu->disable\", cpu->disable);\n       dump_target_flags (\"cpu->enable\", cpu->enable);\n     }\n@@ -1613,7 +1610,7 @@ sparc_option_override (void)\n \n   /* Don't allow -mvis, -mvis2, -mvis3, -mvis4, -mvis4b, -mfmaf and -mfsmuld if\n      FPU is disabled.  */\n-  if (! TARGET_FPU)\n+  if (!TARGET_FPU)\n     target_flags &= ~(MASK_VIS | MASK_VIS2 | MASK_VIS3 | MASK_VIS4\n \t\t      | MASK_VIS4B | MASK_FMAF | MASK_FSMULD);\n \n@@ -1626,18 +1623,18 @@ sparc_option_override (void)\n     }\n \n   /* -mvis also implies -mv8plus on 32-bit.  */\n-  if (TARGET_VIS && ! TARGET_ARCH64)\n+  if (TARGET_VIS && !TARGET_ARCH64)\n     target_flags |= MASK_V8PLUS;\n \n-  /* Use the deprecated v8 insns for sparc64 in 32 bit mode.  */\n+  /* Use the deprecated v8 insns for sparc64 in 32-bit mode.  */\n   if (TARGET_V9 && TARGET_ARCH32)\n     target_flags |= MASK_DEPRECATED_V8_INSNS;\n \n-  /* V8PLUS requires V9, makes no sense in 64 bit mode.  */\n-  if (! TARGET_V9 || TARGET_ARCH64)\n+  /* V8PLUS requires V9 and makes no sense in 64-bit mode.  */\n+  if (!TARGET_V9 || TARGET_ARCH64)\n     target_flags &= ~MASK_V8PLUS;\n \n-  /* Don't use stack biasing in 32 bit mode.  */\n+  /* Don't use stack biasing in 32-bit mode.  */\n   if (TARGET_ARCH32)\n     target_flags &= ~MASK_STACK_BIAS;\n \n@@ -4975,7 +4972,7 @@ enum sparc_mode_class {\n    ??? Note that, despite the settings, non-double-aligned parameter\n    registers can hold double-word quantities in 32-bit mode.  */\n \n-/* This points to either the 32 bit or the 64 bit version.  */\n+/* This points to either the 32-bit or the 64-bit version.  */\n const int *hard_regno_mode_classes;\n \n static const int hard_32bit_mode_classes[] = {\n@@ -7309,7 +7306,7 @@ sparc_function_arg_advance (cumulative_args_t cum_v, machine_mode mode,\n }\n \n /* Handle the FUNCTION_ARG_PADDING macro.\n-   For the 64 bit ABI structs are always stored left shifted in their\n+   For the 64-bit ABI structs are always stored left shifted in their\n    argument slot.  */\n \n enum direction\n@@ -8428,7 +8425,7 @@ output_v9branch (rtx op, rtx dest, int reg, int label, int reversed,\n   if (reversed ^ far)\n     code = reverse_condition (code);\n \n-  /* Only 64 bit versions of these instructions exist.  */\n+  /* Only 64-bit versions of these instructions exist.  */\n   gcc_assert (mode == DImode);\n \n   /* Start by writing the branch condition.  */\n@@ -8857,7 +8854,7 @@ mems_ok_for_ldd_peep (rtx mem1, rtx mem2, rtx dependent_reg_rtx)\n     return 0;\n \n   /* The first offset must be evenly divisible by 8 to ensure the\n-     address is 64 bit aligned.  */\n+     address is 64-bit aligned.  */\n   if (offset1 % 8 != 0)\n     return 0;\n "}]}