{"sha": "e46ccf7c814d24040d7ba4bab65629ec73af1c59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2Y2NmN2M4MTRkMjQwNDBkN2JhNGJhYjY1NjI5ZWM3M2FmMWM1OQ==", "commit": {"author": {"name": "Philip Blundell", "email": "philb@gnu.org", "date": "2001-05-24T21:09:05Z"}, "committer": {"name": "Phil Blundell", "email": "pb@gcc.gnu.org", "date": "2001-05-24T21:09:05Z"}, "message": "arm.c (output_return_instruction): Correctly handle interworking and interrupt functions.\n\n2001-05-24  Philip Blundell  <philb@gnu.org>\n\n\t* config/arm/arm.c (output_return_instruction): Correctly handle\n\tinterworking and interrupt functions.\n\nFrom-SVN: r42543", "tree": {"sha": "bd779a568af9f649bd5ce368a537665bf8ee1b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd779a568af9f649bd5ce368a537665bf8ee1b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e46ccf7c814d24040d7ba4bab65629ec73af1c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46ccf7c814d24040d7ba4bab65629ec73af1c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46ccf7c814d24040d7ba4bab65629ec73af1c59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46ccf7c814d24040d7ba4bab65629ec73af1c59/comments", "author": {"login": "philb", "id": 227468, "node_id": "MDQ6VXNlcjIyNzQ2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/227468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philb", "html_url": "https://github.com/philb", "followers_url": "https://api.github.com/users/philb/followers", "following_url": "https://api.github.com/users/philb/following{/other_user}", "gists_url": "https://api.github.com/users/philb/gists{/gist_id}", "starred_url": "https://api.github.com/users/philb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philb/subscriptions", "organizations_url": "https://api.github.com/users/philb/orgs", "repos_url": "https://api.github.com/users/philb/repos", "events_url": "https://api.github.com/users/philb/events{/privacy}", "received_events_url": "https://api.github.com/users/philb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b605cfa89145e8a9b49419f03130a3bfe483d17a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b605cfa89145e8a9b49419f03130a3bfe483d17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b605cfa89145e8a9b49419f03130a3bfe483d17a"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "5d436c8b31b8f29f5c58e08e789e1304579d00c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46ccf7c814d24040d7ba4bab65629ec73af1c59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46ccf7c814d24040d7ba4bab65629ec73af1c59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e46ccf7c814d24040d7ba4bab65629ec73af1c59", "patch": "@@ -1,3 +1,8 @@\n+2001-05-24  Philip Blundell  <philb@gnu.org>\n+\n+\t* config/arm/arm.c (output_return_instruction): Correctly handle\n+\tinterworking and interrupt functions.\n+\n 2001-05-24  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.h (TARGET_SWITCHES): Correct misleading help for"}, {"sha": "ed4a35bd30b898f128193a6ae4b0e4094af89309", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e46ccf7c814d24040d7ba4bab65629ec73af1c59/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e46ccf7c814d24040d7ba4bab65629ec73af1c59/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e46ccf7c814d24040d7ba4bab65629ec73af1c59", "patch": "@@ -7037,6 +7037,8 @@ output_return_instruction (operand, really_return, reverse)\n      load a single register.  On other architectures, the cost is the same.\n      In 26 bit mode we have to use LDM in order to be able to restore the CPSR.  */\n   if ((live_regs_mask  == (1 << LR_REGNUM))\n+      && ! TARGET_INTERWORK\n+      && ! IS_INTERRUPT (func_type)\n       && (! really_return || TARGET_APCS_32))\n     {\n       if (! really_return)"}]}