{"sha": "fc6df7e10bc1039f50f917ecfe3740d38aa40674", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM2ZGY3ZTEwYmMxMDM5ZjUwZjkxN2VjZmUzNzQwZDM4YWE0MDY3NA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-09-18T16:34:35Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-09-18T16:34:35Z"}, "message": "c-common.c (check_format_info): Properly save the argument number and parameter for $ operand number formats in...\n\n\t* c-common.c (check_format_info): Properly save the argument\n\tnumber and parameter for $ operand number formats in case width\n\tand precision arguments are also used.  Allow printf width and\n\tprecision arguments to have operand numbers even if none was\n\tspecified for the main format, since this is OK for %*.*m.  Only\n\tobject to missing $ operand number if the format used requires an\n\targument.\n\ntestsuite:\n\t* gcc.dg/format-ext-1.c: Add tests for mixing %m with $ formats.\n\t* gcc.dg/format-xopen-1.c: Fix error in one $ format test.  Add\n\tmore $ format tests.\n\nFrom-SVN: r36493", "tree": {"sha": "afe91fed3f051f85e64931d64e2e92df5c5a70b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afe91fed3f051f85e64931d64e2e92df5c5a70b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6df7e10bc1039f50f917ecfe3740d38aa40674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6df7e10bc1039f50f917ecfe3740d38aa40674", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6df7e10bc1039f50f917ecfe3740d38aa40674", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6df7e10bc1039f50f917ecfe3740d38aa40674/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effa55410383b2a76aee22e37c86c5d11e95aad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/effa55410383b2a76aee22e37c86c5d11e95aad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/effa55410383b2a76aee22e37c86c5d11e95aad9"}], "stats": {"total": 104, "additions": 82, "deletions": 22}, "files": [{"sha": "4a0d658e38fd7f0bb614a95c35d4da8454dfcb64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc6df7e10bc1039f50f917ecfe3740d38aa40674", "patch": "@@ -1,3 +1,13 @@\n+2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (check_format_info): Properly save the argument\n+\tnumber and parameter for $ operand number formats in case width\n+\tand precision arguments are also used.  Allow printf width and\n+\tprecision arguments to have operand numbers even if none was\n+\tspecified for the main format, since this is OK for %*.*m.  Only\n+\tobject to missing $ operand number if the format used requires an\n+\targument.\n+\n 2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* c-common.c (format_char_info): Add 'W' flag to comment."}, {"sha": "6a1e687f42ca48b71d772e120e6ced5effd8980f", "filename": "gcc/c-common.c", "status": "modified", "additions": 55, "deletions": 20, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=fc6df7e10bc1039f50f917ecfe3740d38aa40674", "patch": "@@ -1904,6 +1904,8 @@ check_format_info (info, params)\n   tree format_tree;\n   tree cur_param;\n   tree wanted_type;\n+  int main_arg_num;\n+  tree main_arg_params;\n   enum format_std_version wanted_type_std;\n   const char *wanted_type_name;\n   format_wanted_type width_wanted_type;\n@@ -2051,6 +2053,8 @@ check_format_info (info, params)\n \t}\n       flag_chars[0] = 0;\n       suppressed = wide = precise = FALSE;\n+      main_arg_num = 0;\n+      main_arg_params = 0;\n       if (info->format_type == scanf_format_type)\n \t{\n \t  int non_zero_width_char = FALSE;\n@@ -2062,13 +2066,14 @@ check_format_info (info, params)\n \t      int opnum;\n \t      opnum = maybe_read_dollar_number (&format_chars,\n \t\t\t\t\t\thas_operand_number == 1,\n-\t\t\t\t\t\tfirst_fillin_param, &params);\n+\t\t\t\t\t\tfirst_fillin_param,\n+\t\t\t\t\t\t&main_arg_params);\n \t      if (opnum == -1)\n \t\treturn;\n \t      else if (opnum > 0)\n \t\t{\n \t\t  has_operand_number = 1;\n-\t\t  arg_num = opnum + info->first_arg_num - 1;\n+\t\t  main_arg_num = opnum + info->first_arg_num - 1;\n \t\t}\n \t      else\n \t\thas_operand_number = 0;\n@@ -2129,17 +2134,15 @@ check_format_info (info, params)\n \t    {\n \t      int opnum;\n \t      opnum = maybe_read_dollar_number (&format_chars,\n-\t\t\t\t\t\thas_operand_number == 1,\n-\t\t\t\t\t\tfirst_fillin_param, &params);\n+\t\t\t\t\t\t0, first_fillin_param,\n+\t\t\t\t\t\t&main_arg_params);\n \t      if (opnum == -1)\n \t\treturn;\n \t      else if (opnum > 0)\n \t\t{\n \t\t  has_operand_number = 1;\n-\t\t  arg_num = opnum + info->first_arg_num - 1;\n+\t\t  main_arg_num = opnum + info->first_arg_num - 1;\n \t\t}\n-\t      else\n-\t\thas_operand_number = 0;\n \t    }\n \n \t  while (*format_chars != 0 && index (\" +#0-'I\", *format_chars) != 0)\n@@ -2178,16 +2181,22 @@ check_format_info (info, params)\n \t\t  tfaff ();\n \t\t  return;\n \t\t}\n-\t      if (has_operand_number > 0)\n+\t      if (has_operand_number != 0)\n \t\t{\n \t\t  int opnum;\n-\t\t  opnum = maybe_read_dollar_number (&format_chars, 1,\n+\t\t  opnum = maybe_read_dollar_number (&format_chars,\n+\t\t\t\t\t\t    has_operand_number == 1,\n \t\t\t\t\t\t    first_fillin_param,\n \t\t\t\t\t\t    &params);\n-\t\t  if (opnum <= 0)\n+\t\t  if (opnum == -1)\n \t\t    return;\n+\t\t  else if (opnum > 0)\n+\t\t    {\n+\t\t      has_operand_number = 1;\n+\t\t      arg_num = opnum + info->first_arg_num - 1;\n+\t\t    }\n \t\t  else\n-\t\t    arg_num = opnum + info->first_arg_num - 1;\n+\t\t    has_operand_number = 0;\n \t\t}\n \t      if (info->first_arg_num != 0)\n \t\t{\n@@ -2230,16 +2239,22 @@ check_format_info (info, params)\n \t      if (*format_chars == '*')\n \t\t{\n \t\t  ++format_chars;\n-\t\t  if (has_operand_number > 0)\n+\t\t  if (has_operand_number != 0)\n \t\t    {\n \t\t      int opnum;\n-\t\t      opnum = maybe_read_dollar_number (&format_chars, 1,\n+\t\t      opnum = maybe_read_dollar_number (&format_chars,\n+\t\t\t\t\t\t\thas_operand_number == 1,\n \t\t\t\t\t\t\tfirst_fillin_param,\n \t\t\t\t\t\t\t&params);\n-\t\t      if (opnum <= 0)\n+\t\t      if (opnum == -1)\n \t\t\treturn;\n+\t\t      else if (opnum > 0)\n+\t\t\t{\n+\t\t\t  has_operand_number = 1;\n+\t\t\t  arg_num = opnum + info->first_arg_num - 1;\n+\t\t\t}\n \t\t      else\n-\t\t\targ_num = opnum + info->first_arg_num - 1;\n+\t\t\thas_operand_number = 0;\n \t\t    }\n \t\t  if (info->first_arg_num != 0)\n \t\t    {\n@@ -2466,16 +2481,36 @@ check_format_info (info, params)\n       /* Finally. . .check type of argument against desired type!  */\n       if (info->first_arg_num == 0)\n \tcontinue;\n-      if (!(fci->pointer_count == 0 && wanted_type == void_type_node))\n+      if (fci->pointer_count == 0 && wanted_type == void_type_node)\n \t{\n-\t  if (params == 0)\n+\t  if (main_arg_num != 0)\n+\t    warning (\"operand number specified for format taking no argument\");\n+\t}\n+      else\n+\t{\n+\t  if (main_arg_num != 0)\n \t    {\n-\t      tfaff ();\n-\t      return;\n+\t      arg_num = main_arg_num;\n+\t      params = main_arg_params;\n+\t    }\n+\t  else\n+\t    {\n+\t      ++arg_num;\n+\t      if (has_operand_number > 0)\n+\t\t{\n+\t\t  warning (\"missing $ operand number in format\");\n+\t\t  return;\n+\t\t}\n+\t      else\n+\t\thas_operand_number = 0;\n+\t      if (params == 0)\n+\t\t{\n+\t\t  tfaff ();\n+\t\t  return;\n+\t\t}\n \t    }\n \t  cur_param = TREE_VALUE (params);\n \t  params = TREE_CHAIN (params);\n-\t  ++arg_num;\n \t  main_wanted_type.wanted_type = wanted_type;\n \t  main_wanted_type.wanted_type_name = wanted_type_name;\n \t  main_wanted_type.pointer_count = fci->pointer_count + aflag;"}, {"sha": "1c1331087123ccc27b5c34472abf62aaddd2a86d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fc6df7e10bc1039f50f917ecfe3740d38aa40674", "patch": "@@ -1,3 +1,9 @@\n+2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format-ext-1.c: Add tests for mixing %m with $ formats.\n+\t* gcc.dg/format-xopen-1.c: Fix error in one $ format test.  Add\n+\tmore $ format tests.\n+\n 2000-09-18  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/format-errmk-1.c: New test."}, {"sha": "238a47802be5c40e17b2e22d18f3077c6b81a3bd", "filename": "gcc/testsuite/gcc.dg/format-ext-1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-ext-1.c?ref=fc6df7e10bc1039f50f917ecfe3740d38aa40674", "patch": "@@ -18,7 +18,7 @@ extern int printf (const char *, ...);\n void\n foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,\n      unsigned long long int ull, int i, unsigned int u, double d,\n-     char *s, void *p, wchar_t *ls, wint_t lc, int *n)\n+     char *s, void *p, wchar_t *ls, wint_t lc, int *n, long int l)\n {\n   /* As an extension, GCC allows the BSD length \"q\" for integer formats.\n      This is largely obsoleted in C99 by %j, %ll and PRId64.\n@@ -93,6 +93,13 @@ foo (quad_t q, u_quad_t uq, quad_t *qn, size_t z, size_t *zn, long long int ll,\n   printf (\"%Lm\", i); /* { dg-warning \"length\" \"bad %Lm\" } */\n   printf (\"%qm\", i); /* { dg-warning \"length\" \"bad %qm\" } */\n   printf (\"%Zm\", i); /* { dg-warning \"length\" \"bad %Zm\" } */\n+  /* It should be OK to mix %m formats with $ operand number formats.  */\n+  printf (\"%2$ld%m%1$d\", i, l);\n+  /* Likewise, %m formats with width and precision should not have an\n+     operand number for the %m itself.\n+  */\n+  printf (\"%*2$.*1$m\", i, i);\n+  printf (\"%1$*2$.*1$m\", i, i); /* { dg-warning \"no argument\" \"printf %1\\$m\" } */\n   /* As an extension, glibc includes the \"I\" flag for decimal integer\n      formats, to output using the locale's digits (e.g. in Arabic).\n      In GCC, we require this to be in the standard place for flags, though"}, {"sha": "c57855a110a9cb1b1c8d09138987a1ec6c0f8713", "filename": "gcc/testsuite/gcc.dg/format-xopen-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6df7e10bc1039f50f917ecfe3740d38aa40674/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-xopen-1.c?ref=fc6df7e10bc1039f50f917ecfe3740d38aa40674", "patch": "@@ -103,13 +103,15 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   */\n   scanf (\"%1$d\", ip);\n   printf (\"%1$d\", i);\n-  printf (\"%3$*2$.*1$d\", i2, i, l);\n+  printf (\"%1$d\", l); /* { dg-warning \"arg 2\" \"mismatched args with $ format\" } */\n+  printf (\"%3$*2$.*1$ld\", i2, i, l);\n   printf (\"%4$ld%7$ld%5$d%6$d%3$d%1$d%2$d\", i, i, i, l, i, i, l);\n   scanf (\"%4$ld%7$ld%5$d%6$d%3$d%1$d%2$d\", ip, ip, ip, lp, ip, ip, lp);\n   printf (\"%1$d%d\", i, i); /* { dg-warning \"missing\" \"mixing $ and non-$ formats\" } */\n   printf (\"%%%1$d%%%2$d\", i, i);\n   printf (\"%d%2$d\", i); /* { dg-warning \"type character\" \"mixing $ and non-$ formats\" } */\n   printf (\"%1$*d\", i, i); /* { dg-warning \"missing\" \"mixing $ and non-$ formats\" } */\n+  printf (\"%*1$d\", i); /* { dg-warning \"missing\" \"mixing $ and non-$ formats\" } */\n   scanf (\"%1$d%d\", ip, ip); /* { dg-warning \"missing\" \"mixing $ and non-$ formats\" } */\n   scanf (\"%*f%%%1$d%%%2$d\", ip, ip);\n   printf (\"%2$d\", i); /* { dg-warning \"operand\" \"$ number too large\" } */"}]}