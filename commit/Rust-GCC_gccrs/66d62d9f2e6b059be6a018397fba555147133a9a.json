{"sha": "66d62d9f2e6b059be6a018397fba555147133a9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZkNjJkOWYyZTZiMDU5YmU2YTAxODM5N2ZiYTU1NTE0NzEzM2E5YQ==", "commit": {"author": {"name": "Hrishikesh Kulkarni", "email": "hrishikeshparag@gmail.com", "date": "2019-05-06T07:23:25Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-06T07:23:25Z"}, "message": "Add lto-dump tool.\n\n2019-05-06  Hrishikesh Kulkarni  <hrishikeshparag@gmail.com>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* Makefile.in: Add lto-dump.texi.\n\t* cgraph.h: Add new functions get_visibility_string and\n\tget_symtab_type_string.\n\t* doc/gcc.texi: Include lto-dump section.\n\t* doc/lto-dump.texi: New file.\n\t* dumpfile.c (dump_switch_p_1): Use parse_dump_option.\n\t(parse_dump_option): Factor out this function.\n\t* dumpfile.h (enum dump_flag): Add new value TDF_ERROR.\n\t(parse_dump_option): Export the function.\n\t* symtab.c (symtab_node::get_visibility_string): New function.\n\t(symtab_node::get_symtab_type_string): Likewise.\n2019-05-06  Hrishikesh Kulkarni  <hrishikeshparag@gmail.com>\n\t    Martin Liska  <mliska@suse.cz>\n\n\t* Make-lang.in: Add lto_dump-related definition.\n\t* config-lang.in: Likewise.\n\t* lang.opt: Add new language LTODump and options related\n\tto LTO dump tool.\n\t* lto-common.c (lto_read_decls): Support type statistics dump.\n\t(lto_file_read): Likewise for object files.\n\t* lto-dump.c: New file.\n\t* lto-lang.c (lto_option_lang_mask): Move from ..\n\t* lto.c (lto_option_lang_mask): .. here.\n\t* lto.h (lto_option_lang_mask): New declaration.\n\nCo-Authored-By: Martin Liska <mliska@suse.cz>\n\nFrom-SVN: r270897", "tree": {"sha": "fab164b40d0f06c1e3b883ed151202724aa28fd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fab164b40d0f06c1e3b883ed151202724aa28fd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66d62d9f2e6b059be6a018397fba555147133a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d62d9f2e6b059be6a018397fba555147133a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d62d9f2e6b059be6a018397fba555147133a9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d62d9f2e6b059be6a018397fba555147133a9a/comments", "author": {"login": "hrisearch", "id": 34639442, "node_id": "MDQ6VXNlcjM0NjM5NDQy", "avatar_url": "https://avatars.githubusercontent.com/u/34639442?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hrisearch", "html_url": "https://github.com/hrisearch", "followers_url": "https://api.github.com/users/hrisearch/followers", "following_url": "https://api.github.com/users/hrisearch/following{/other_user}", "gists_url": "https://api.github.com/users/hrisearch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hrisearch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hrisearch/subscriptions", "organizations_url": "https://api.github.com/users/hrisearch/orgs", "repos_url": "https://api.github.com/users/hrisearch/repos", "events_url": "https://api.github.com/users/hrisearch/events{/privacy}", "received_events_url": "https://api.github.com/users/hrisearch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a79420f995764129dc40d1abcbf8ce75a0b0f906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a79420f995764129dc40d1abcbf8ce75a0b0f906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a79420f995764129dc40d1abcbf8ce75a0b0f906"}], "stats": {"total": 764, "additions": 721, "deletions": 43}, "files": [{"sha": "06ba752591d1bc7e4a1aa29ffb0d070fd21dc4e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -1,3 +1,18 @@\n+2019-05-06  Hrishikesh Kulkarni  <hrishikeshparag@gmail.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* Makefile.in: Add lto-dump.texi.\n+\t* cgraph.h: Add new functions get_visibility_string and\n+\tget_symtab_type_string.\n+\t* doc/gcc.texi: Include lto-dump section.\n+\t* doc/lto-dump.texi: New file.\n+\t* dumpfile.c (dump_switch_p_1): Use parse_dump_option.\n+\t(parse_dump_option): Factor out this function.\n+\t* dumpfile.h (enum dump_flag): Add new value TDF_ERROR.\n+\t(parse_dump_option): Export the function.\n+\t* symtab.c (symtab_node::get_visibility_string): New function.\n+\t(symtab_node::get_symtab_type_string): Likewise.\n+\n 2019-05-06  Martin Liska  <mliska@suse.cz>\n \n \t* config/i386/i386-builtins.c: New file."}, {"sha": "6677f77c76fe73437e9bbc7dd362e1845ca8d4ec", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -3157,7 +3157,7 @@ TEXI_GCC_FILES = gcc.texi gcc-common.texi gcc-vers.texi frontends.texi\t\\\n \t gcov.texi trouble.texi bugreport.texi service.texi\t\t\\\n \t contribute.texi compat.texi funding.texi gnu.texi gpl_v3.texi\t\\\n \t fdl.texi contrib.texi cppenv.texi cppopts.texi avr-mmcu.texi\t\\\n-\t implement-c.texi implement-cxx.texi gcov-tool.texi gcov-dump.texi\n+\t implement-c.texi implement-cxx.texi gcov-tool.texi gcov-dump.texi lto-dump.texi\n \n # we explicitly use $(srcdir)/doc/tm.texi here to avoid confusion with\n # the generated tm.texi; the latter might have a more recent timestamp,"}, {"sha": "18839a4a5ecf6c2451356f0b5cfd4146b59bafae", "filename": "gcc/cgraph.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -119,6 +119,12 @@ class GTY((desc (\"%h.type\"), tag (\"SYMTAB_SYMBOL\"),\n   /* Return dump name with assembler name.  */\n   const char *dump_asm_name () const;\n \n+  /* Return visibility name.  */\n+  const char *get_visibility_string () const;\n+\n+  /* Return type_name name.  */\n+  const char *get_symtab_type_string () const;\n+\n   /* Add node into symbol table.  This function is not used directly, but via\n      cgraph/varpool node creation routines.  */\n   void register_symbol (void);"}, {"sha": "4d03e3a6d96ed2e87ab7326f8f4ecc015a2b978d", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -68,6 +68,8 @@ Texts being (a) (see below), and with the Back-Cover Texts being (b)\n * gcov: (gcc) Gcov.            @command{gcov}---a test coverage program.\n * gcov-tool: (gcc) Gcov-tool.  @command{gcov-tool}---an offline gcda profile processing program.\n * gcov-dump: (gcc) Gcov-dump.  @command{gcov-dump}---an offline gcda and gcno profile dump tool.\n+* lto-dump: (gcc) lto-dump.    @command{lto-dump}---Tool for\n+dumping LTO object files.\n @end direntry\n This file documents the use of the GNU compilers.\n @sp 1\n@@ -142,6 +144,8 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n * Gcov::            @command{gcov}---a test coverage program.\n * Gcov-tool::       @command{gcov-tool}---an offline gcda profile processing program.\n * Gcov-dump::       @command{gcov-dump}---an offline gcda and gcno profile dump tool.\n+* lto-dump::        @command{lto-dump}---Tool for dumping LTO\n+object files.\n * Trouble::         If you have trouble using GCC.\n * Bugs::            How, why and where to report bugs.\n * Service::         How To Get Help with GCC\n@@ -170,6 +174,7 @@ Introduction, gccint, GNU Compiler Collection (GCC) Internals}.\n @include gcov.texi\n @include gcov-tool.texi\n @include gcov-dump.texi\n+@include lto-dump.texi\n @include trouble.texi\n @include bugreport.texi\n @include service.texi"}, {"sha": "d84397581c038f1cc73b2840e35d9f51bde74b3c", "filename": "gcc/doc/lto-dump.texi", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdoc%2Flto-dump.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdoc%2Flto-dump.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flto-dump.texi?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -0,0 +1,131 @@\n+@c Copyright (C) 2018-2019 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@ignore\n+@c man begin COPYRIGHT\n+Copyright @copyright{} 2017-2018 Free Software Foundation, Inc.\n+\n+Permission is granted to copy, distribute and/or modify this document\n+under the terms of the GNU Free Documentation License, Version 1.3 or\n+any later version published by the Free Software Foundation; with the\n+Invariant Sections being ``GNU General Public License'' and ``Funding\n+Free Software'', the Front-Cover texts being (a) (see below), and with\n+the Back-Cover Texts being (b) (see below).  A copy of the license is\n+included in the gfdl(7) man page.\n+\n+(a) The FSF's Front-Cover Text is:\n+\n+     A GNU Manual\n+\n+(b) The FSF's Back-Cover Text is:\n+\n+     You have freedom to copy and modify this GNU Manual, like GNU\n+     software.  Copies published by the Free Software Foundation raise\n+     funds for GNU development.\n+@c man end\n+@c Set file name and title for the man page.\n+@setfilename lto-dump\n+@settitle Tool for dumping LTO object files.\n+@end ignore\n+\n+@node lto-dump\n+@chapter @command{lto-dump}---Tool for dumping LTO object files.\n+\n+@menu\n+* lto-dump Intro::             Introduction to lto-dump.\n+* Invoking lto-dump::          How to use lto-dump.\n+@end menu\n+\n+@node lto-dump Intro\n+@section Introduction to @command{lto-dump}\n+@c man begin DESCRIPTION\n+\n+@command{lto-dump} is a tool you can use in conjunction with GCC to\n+dump link time optimization object files.\n+\n+@c man end\n+\n+@node Invoking lto-dump\n+@section Invoking @command{lto-dump}\n+\n+@smallexample\n+Usage: lto-dump @r{[}@var{OPTION}@r{]} ... @var{objfiles}\n+@end smallexample\n+\n+@command{lto-dump} accepts the following options:\n+\n+@ignore\n+@c man begin SYNOPSIS\n+lto-dump [@option{-list}]\n+     [@option{-demangle}]\n+     [@option{-defined-only}]\n+     [@option{-print-value}]\n+     [@option{-name-sort}]\n+     [@option{-size-sort}]\n+     [@option{-reverse-sort}]\n+     [@option{-no-sort}]\n+     [@option{-symbol=}]\n+     [@option{-objects}]\n+     [@option{-type-stats}]\n+     [@option{-tree-stats}]\n+     [@option{-gimple-stats}]\n+     [@option{-dump-level=}]\n+     [@option{-dump-body=}]\n+     [@option{-help}] @var{lto-dump}\n+@c man end\n+@end ignore\n+\n+@c man begin OPTIONS\n+@table @gcctabopt\n+@item -list\n+Dumps list of details of functions and variables.\n+\n+@item -demangle\n+Dump the demangled output.\n+\n+@item -defined-only\n+Dump only the defined symbols.\n+\n+@item -print-value\n+Dump initial values of the variables.\n+\n+@item -name-sort\n+Sort the symbols alphabetically.\n+\n+@item -size-sort\n+Sort the symbols according to size.\n+\n+@item -reverse-sort\n+Dump the symbols in reverse order.\n+\n+@item -no-sort\n+Dump the symbols in order of occurrence.\n+\n+@item -symbol=\n+Dump the details of specific symbol.\n+\n+@item -objects\n+Dump the details of LTO objects.\n+\n+@item -type-stats\n+Dump the statistics of tree types.\n+\n+@item -tree-stats\n+Dump the statistics of trees.\n+\n+@item -gimple-stats\n+Dump the statistics of gimple statements.\n+\n+@item -dump-level=\n+For deciding the optimization level of body.\n+\n+@item -dump-body=\n+Dump the specific gimple body.\n+\n+@item -help\n+Display the dump tool help.\n+\n+@end table\n+\n+@c man end"}, {"sha": "5263d3a213474b12bf09027be0252da1547f9f51", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -115,6 +115,7 @@ static struct dump_file_info dump_files[TDI_end] =\n    in dumpfile.h and opt_info_options below. */\n static const kv_pair<dump_flags_t> dump_options[] =\n {\n+  {\"none\", TDF_NONE},\n   {\"address\", TDF_ADDRESS},\n   {\"asmname\", TDF_ASMNAME},\n   {\"slim\", TDF_SLIM},\n@@ -1770,28 +1771,19 @@ gcc::dump_manager::update_dfi_for_opt_info (dump_file_info *dfi) const\n   return true;\n }\n \n-/* Parse ARG as a dump switch. Return nonzero if it is, and store the\n-   relevant details in the dump_files array.  */\n+/* Helper routine to parse -<dump format>[=filename]\n+   and return the corresponding dump flag.  If POS_P is non-NULL,\n+   assign start of filename into *POS_P.  */\n \n-int\n-gcc::dump_manager::\n-dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n+dump_flags_t\n+parse_dump_option (const char *option_value, const char **pos_p)\n {\n-  const char *option_value;\n   const char *ptr;\n   dump_flags_t flags;\n \n-  if (doglob && !dfi->glob)\n-    return 0;\n-\n-  option_value = skip_leading_substring (arg, doglob ? dfi->glob : dfi->swtch);\n-  if (!option_value)\n-    return 0;\n-\n-  if (*option_value && *option_value != '-' && *option_value != '=')\n-    return 0;\n-\n   ptr = option_value;\n+  if (pos_p)\n+    *pos_p = NULL;\n \n   /* Retain \"user-facing\" and \"internals\" messages, but filter out\n      those from an opt_problem being re-emitted at the top level\n@@ -1805,14 +1797,13 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n       const char *end_ptr;\n       const char *eq_ptr;\n       unsigned length;\n-\n       while (*ptr == '-')\n \tptr++;\n       end_ptr = strchr (ptr, '-');\n       eq_ptr = strchr (ptr, '=');\n \n       if (eq_ptr && !end_ptr)\n-        end_ptr = eq_ptr;\n+\tend_ptr = eq_ptr;\n \n       if (!end_ptr)\n \tend_ptr = ptr + strlen (ptr);\n@@ -1821,25 +1812,59 @@ dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n       for (option_ptr = dump_options; option_ptr->name; option_ptr++)\n \tif (strlen (option_ptr->name) == length\n \t    && !memcmp (option_ptr->name, ptr, length))\n-          {\n-            flags |= option_ptr->value;\n+\t  {\n+\t    flags |= option_ptr->value;\n \t    goto found;\n-          }\n+\t  }\n \n       if (*ptr == '=')\n-        {\n+\t{\n           /* Interpret rest of the argument as a dump filename.  This\n              filename overrides other command line filenames.  */\n-          if (dfi->pfilename)\n-            free (CONST_CAST (char *, dfi->pfilename));\n-          dfi->pfilename = xstrdup (ptr + 1);\n-          break;\n-        }\n+\t  if (pos_p)\n+\t    *pos_p = ptr + 1;\n+\t  break;\n+\t}\n       else\n-        warning (0, \"ignoring unknown option %q.*s in %<-fdump-%s%>\",\n-                 length, ptr, dfi->swtch);\n-    found:;\n+      {\n+\twarning (0, \"ignoring unknown option %q.*s\",\n+\t\t length, ptr);\n+\tflags = TDF_ERROR;\n+      }\n+    found:\n       ptr = end_ptr;\n+  }\n+\n+  return flags;\n+}\n+\n+/* Parse ARG as a dump switch.  Return nonzero if it is, and store the\n+   relevant details in the dump_files array.  */\n+\n+int\n+gcc::dump_manager::\n+dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob)\n+{\n+  const char *option_value;\n+  dump_flags_t flags = TDF_NONE;\n+\n+  if (doglob && !dfi->glob)\n+    return 0;\n+\n+  option_value = skip_leading_substring (arg, doglob ? dfi->glob : dfi->swtch);\n+  if (!option_value)\n+    return 0;\n+\n+  if (*option_value && *option_value != '-' && *option_value != '=')\n+    return 0;\n+\n+  const char *filename;\n+  flags = parse_dump_option (option_value, &filename);\n+  if (filename)\n+    {\n+      if (dfi->pfilename)\n+  free (CONST_CAST (char *, dfi->pfilename));\n+      dfi->pfilename = xstrdup (filename);\n     }\n \n   dfi->pstate = -1;"}, {"sha": "9bcaa25b0a5ba7aab358f4cb8f6ff093f782fe3a", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -193,6 +193,9 @@ enum dump_flag\n   /* Dumping for -fcompare-debug.  */\n   TDF_COMPARE_DEBUG = (1 << 28),\n \n+  /* For error.  */\n+  TDF_ERROR = (1 << 26),\n+\n   /* All values.  */\n   TDF_ALL_VALUES = (1 << 29) - 1\n };\n@@ -501,6 +504,8 @@ extern void dump_end (int, FILE *);\n extern int opt_info_switch_p (const char *);\n extern const char *dump_flag_name (int);\n extern const kv_pair<optgroup_flags_t> optgroup_options[];\n+extern dump_flags_t\n+parse_dump_option (const char *, const char **);\n \n /* Global variables used to communicate with passes.  */\n extern FILE *dump_file;"}, {"sha": "b2bd6b46c39ab8e8193c69d4962b05b2b0923703", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -1,3 +1,17 @@\n+2019-05-06  Hrishikesh Kulkarni  <hrishikeshparag@gmail.com>\n+\t    Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Add lto_dump-related definition.\n+\t* config-lang.in: Likewise.\n+\t* lang.opt: Add new language LTODump and options related\n+\tto LTO dump tool.\n+\t* lto-common.c (lto_read_decls): Support type statistics dump.\n+\t(lto_file_read): Likewise for object files.\n+\t* lto-dump.c: New file.\n+\t* lto-lang.c (lto_option_lang_mask): Move from ..\n+\t* lto.c (lto_option_lang_mask): .. here.\n+\t* lto.h (lto_option_lang_mask): New declaration.\n+\n 2019-05-06  Martin Liska  <mliska@suse.cz>\n \t    Hrishikesh Kulkarni  <hrishikeshparag@gmail.com>\n "}, {"sha": "92487e1f53eee36611f4259e2f53917189b54c9c", "filename": "gcc/lto/Make-lang.in", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FMake-lang.in?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -21,9 +21,12 @@\n \n # The name of the LTO compiler.\n LTO_EXE = lto1$(exeext)\n+LTO_DUMP_EXE = lto-dump$(exeext)\n # The LTO-specific object files inclued in $(LTO_EXE).\n LTO_OBJS = lto/lto-lang.o lto/lto.o lto/lto-object.o attribs.o lto/lto-partition.o lto/lto-symtab.o lto/lto-common.o\n lto_OBJS = $(LTO_OBJS)\n+LTO_DUMP_OBJS = lto/lto-lang.o lto/lto-object.o attribs.o lto/lto-partition.o lto/lto-symtab.o lto/lto-dump.o lto/lto-common.o\n+lto_dump_OBJS = $(LTO_DUMP_OBJS)\n \n # this is only useful in a LTO bootstrap, but this does not work right\n # now. Should reenable after this is fixed, but only when LTO bootstrap\n@@ -39,11 +42,14 @@ lto_OBJS = $(LTO_OBJS)\n \n # These hooks are used by the main GCC Makefile.  Consult that\n # Makefile for documentation.\n-lto.all.cross: $(LTO_EXE)\n-lto.start.encap: $(LTO_EXE)\n+lto.all.cross: $(LTO_EXE) $(LTO_DUMP_EXE)\n+lto.start.encap: $(LTO_EXE) $(LTO_DUMP_EXE)\n lto.rest.encap:\n lto.tags:\n-lto.install-common:\n+lto.install-common: installdirs\n+\t$(INSTALL_PROGRAM) $(LTO_DUMP_EXE) \\\n+\t$(DESTDIR)/$(bindir)/$(LTO_DUMP_EXE)\n+\n lto.install-man:\n lto.install-info:\n lto.dvi:\n@@ -60,7 +66,7 @@ lto.srcinfo:\n lto.install-plugin:\n \n lto.mostlyclean:\n-\trm -f $(LTO_OBJS) $(LTO_EXE) lto1.fda\n+\trm -f $(LTO_OBJS) $(LTO_EXE) lto1.fda $(LTO_DUMP_OBJS) $(LTO_DUMP_EXE) lto-dump.fda\n \n lto.clean:\n lto.distclean:\n@@ -81,6 +87,12 @@ $(LTO_EXE): $(LTO_OBJS) $(BACKEND) $(LIBDEPS)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n \t\t$(LTO_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)\n \n+$(LTO_DUMP_EXE): $(LTO_EXE) $(LTO_DUMP_OBJS) $(BACKEND) $(LIBDEPS)\n+\t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ \\\n+\t\t$(LTO_DUMP_OBJS) $(BACKEND) $(BACKENDLIBS) $(LIBS)\n+\n+lto/lto-dump.o: $(LTO_EXE)\n+\n lto1.fda: ../prev-gcc/lto1$(exeext) ../prev-gcc/$(PERF_DATA)\n \t$(CREATE_GCOV) -binary ../prev-gcc/lto1$(exeext) -gcov lto1.fda -profile ../prev-gcc/$(PERF_DATA) -gcov_version 1\n "}, {"sha": "37c8f6e12b176b8e1a6b261d56764ef84273f540", "filename": "gcc/lto/config-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Fconfig-lang.in?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -18,9 +18,9 @@\n # <http://www.gnu.org/licenses/>.\n \n language=\"lto\"\n-compilers=\"lto1\\$(exeext)\"\n+compilers=\"lto1\\$(exeext) lto-dump\\$(exeext)\"\n \n-gtfiles=\"\\$(srcdir)/lto/lto-tree.h \\$(srcdir)/lto/lto-lang.c \\$(srcdir)/lto/lto.c \\$(srcdir)/lto/lto.h \\$(srcdir)/lto/lto-common.h \\$(srcdir)/lto/lto-common.c\"\n+gtfiles=\"\\$(srcdir)/lto/lto-tree.h \\$(srcdir)/lto/lto-lang.c \\$(srcdir)/lto/lto.c \\$(srcdir)/lto/lto.h \\$(srcdir)/lto/lto-common.h \\$(srcdir)/lto/lto-common.c \\$(srcdir)/lto/lto-dump.c\"\n \n # LTO is a special front end.  From a user's perspective it is not\n # really a language, but a middle end feature.  However, the GIMPLE"}, {"sha": "5bacef349e30a1cd3a20cd4c346c7d29a3831cf6", "filename": "gcc/lto/lang.opt", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flang.opt?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -24,6 +24,9 @@\n Language\n LTO\n \n+Language\n+LTODump\n+\n Enum\n Name(lto_linker_output) Type(enum lto_linker_output) UnknownError(unknown linker output %qs)\n \n@@ -66,6 +69,65 @@ fwpa=\n LTO Driver RejectNegative Joined Var(flag_wpa)\n Whole program analysis (WPA) mode with number of parallel jobs specified.\n \n+\n+list\n+LTODump Var(flag_lto_dump_list)\n+Call the dump function for variables and function in IL.\n+\n+demangle\n+LTODump Var(flag_lto_dump_demangle)\n+Dump the demangled output.\n+\n+defined-only\n+LTODump Var(flag_lto_dump_defined)\n+Dump only the defined symbols.\n+\n+print-value\n+LTODump Var(flag_lto_print_value)\n+Print the initial values of the variables.\n+\n+name-sort\n+LTODump Var(flag_lto_name_sort)\n+Sort the symbols alphabetically.\n+\n+size-sort\n+LTODump Var(flag_lto_size_sort)\n+Sort the symbols according to size.\n+\n+reverse-sort\n+LTODump Var(flag_lto_reverse_sort)\n+Display the symbols in reverse order.\n+\n+symbol=\n+LTODump RejectNegative Joined Var(flag_lto_dump_symbol)\n+\n+objects\n+LTODump Var(flag_lto_dump_objects)\n+Dump the details of LTO objects.\n+\n+type-stats\n+LTODump Var(flag_lto_dump_type_stats)\n+Dump the statistics of tree types.\n+\n+tree-stats\n+LTODump Var(flag_lto_tree_stats)\n+Dump the statistics of trees.\n+\n+gimple-stats\n+LTODump Var(flag_lto_gimple_stats)\n+Dump the statistics of gimple statements.\n+\n+dump-level=\n+LTODump RejectNegative Joined Var(flag_dump_level)\n+\n+dump-body=\n+LTODump RejectNegative Joined Var(flag_dump_body)\n+\n+help\n+LTODump Var(flag_lto_dump_tool_help)\n+Dump the dump tool command line options.\n+\n+\n fresolution=\n LTO Joined\n The resolution file."}, {"sha": "01470c1708087ced3798fc87cf8ebfc1c239d50b", "filename": "gcc/lto/lto-common.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-common.c?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -1681,6 +1681,10 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n   /* We do not uniquify the pre-loaded cache entries, those are middle-end\n      internal types that should not be merged.  */\n \n+  typedef int_hash<unsigned, 0, UINT_MAX> code_id_hash;\n+  hash_map <code_id_hash, unsigned> hm;\n+  unsigned total = 0;\n+\n   /* Read the global declarations and types.  */\n   while (ib_main.p < ib_main.len)\n     {\n@@ -1730,6 +1734,15 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t\t chains.  */\n \t      if (TYPE_P (t))\n \t\t{\n+\t\t  /* Map the tree types to their frequencies.  */\n+\t\t  if (flag_lto_dump_type_stats)\n+\t\t    {\n+\t\t      unsigned key = (unsigned) TREE_CODE (t);\n+\t\t      unsigned *countp = hm.get (key);\n+\t\t      hm.put (key, countp ? (*countp) + 1 : 1);\n+\t\t      total++;\n+\t\t    }\n+\n \t\t  seen_type = true;\n \t\t  num_prevailing_types++;\n \t\t  lto_fixup_prevailing_type (t);\n@@ -1775,6 +1788,22 @@ lto_read_decls (struct lto_file_decl_data *decl_data, const void *data,\n \t  gcc_assert (t && data_in->reader_cache->nodes.length () == from);\n \t}\n     }\n+\n+  /* Dump type statistics.  */\n+  if (flag_lto_dump_type_stats)\n+    {\n+      fprintf (stdout, \"       Type     Frequency   Percentage\\n\\n\");\n+      for (hash_map<code_id_hash, unsigned>::iterator itr = hm.begin ();\n+\t   itr != hm.end ();\n+\t   ++itr)\n+\t{\n+\t  std::pair<unsigned, unsigned> p = *itr;\n+\t  enum tree_code code = (enum tree_code) p.first;\n+\t  fprintf (stdout, \"%14s %6d %12.2f\\n\", get_tree_code_name (code),\n+\t\t   p.second, float (p.second)/total*100);\n+\t}\n+    }\n+\n   data_in->location_cache.apply_location_cache ();\n \n   /* Read in lto_in_decl_state objects.  */\n@@ -2074,6 +2103,17 @@ lto_file_read (lto_file *file, FILE *resolution_file, int *count)\n   memset (&section_list, 0, sizeof (struct lto_section_list)); \n   section_hash_table = lto_obj_build_section_table (file, &section_list);\n \n+  /* Dump the details of LTO objects.  */\n+  if (flag_lto_dump_objects)\n+  {\n+    int i=0;\n+    fprintf (stdout, \"\\n    LTO Object Name: %s\\n\", file->filename);\n+    fprintf (stdout, \"\\nNo.    Offset    Size       Section Name\\n\\n\");\n+    for (section = section_list.first; section != NULL; section = section->next)\n+      fprintf (stdout, \"%2d %8ld %8ld   %s\\n\",\n+\t       ++i, section->start, section->len, section->name);\n+  }\n+\n   /* Find all sub modules in the object and put their sections into new hash\n      tables in a splay tree. */\n   file_ids = lto_splay_tree_new ();"}, {"sha": "d23d346d0d6cb935a70112160659f23a16779f95", "filename": "gcc/lto/lto-dump.c", "status": "added", "additions": 344, "deletions": 0, "changes": 344, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-dump.c?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -0,0 +1,344 @@\n+/* Functions for LTO dump tool.\n+   Copyright (C) 2018-2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include \"function.h\"\n+#include \"basic-block.h\"\n+#include \"tree.h\"\n+#include \"gimple.h\"\n+#include \"cfg.h\"\n+#include \"tree-cfg.h\"\n+#include \"tree-pass.h\"\n+#include \"tree-streamer.h\"\n+#include \"cgraph.h\"\n+#include \"opts.h\"\n+#include \"debug.h\"\n+#include \"lto-partition.h\"\n+#include \"tree-pretty-print.h\"\n+#include \"lto-common.h\"\n+\n+/* Stores details of symbols for dumping symbol list.  */\n+\n+struct symbol_entry\n+{\n+  symtab_node *node;\n+  symbol_entry (symtab_node *node_): node (node_)\n+  {}\n+\n+  char* get_name () const\n+  {\n+    if (flag_lto_dump_demangle)\n+      return xstrdup (node->name ());\n+    else\n+      return xstrdup (node->asm_name ());\n+  }\n+\n+  virtual size_t get_size () const = 0;\n+\n+  virtual void dump ()\n+  {\n+    const char *name = get_name ();\n+    const char *type_name = node->get_symtab_type_string ();\n+    const char *visibility = node->get_visibility_string ();\n+    size_t sz = get_size ();\n+    printf (\"%s  %s  %4lu  %s  \", type_name, visibility, sz, name);\n+  }\n+};\n+\n+/* Stores variable specific details of symbols for dumping symbol list.  */\n+\n+struct variable_entry: public symbol_entry\n+{\n+  variable_entry (varpool_node *node_): symbol_entry (node_)\n+  {}\n+\n+  virtual size_t get_size () const\n+  {\n+    varpool_node *vnode = dyn_cast<varpool_node *> (node);\n+    if (DECL_SIZE (vnode->decl) && tree_fits_shwi_p (DECL_SIZE (vnode->decl)))\n+      return tree_to_shwi (DECL_SIZE (vnode->decl));\n+    return 0;\n+  }\n+\n+  virtual void dump ()\n+  {\n+    symbol_entry :: dump ();\n+    varpool_node *vnode = dyn_cast<varpool_node *> (node);\n+    vnode->get_constructor ();\n+    tree value_tree = DECL_INITIAL (vnode->decl);\n+    if (flag_lto_print_value && value_tree)\n+      print_generic_expr (stdout, value_tree, TDF_NONE);\n+    printf (\"\\n\");\n+  }\n+};\n+\n+/* Stores function specific details of symbols for dumping symbol list.  */\n+\n+struct function_entry: public symbol_entry\n+{\n+  function_entry (cgraph_node *node_): symbol_entry (node_)\n+  {}\n+\n+  virtual void dump ()\n+  {\n+    symbol_entry :: dump ();\n+    printf (\"\\n\");\n+  }\n+\n+  virtual size_t get_size () const\n+  {\n+    cgraph_node *cnode = dyn_cast<cgraph_node *> (node);\n+    gcc_assert (cnode);\n+\n+    return (cnode->definition)\n+     ? n_basic_blocks_for_fn (DECL_STRUCT_FUNCTION (cnode->decl))\n+     : 0;\n+  }\n+};\n+\n+/* Comparing symbols based on size.  */\n+\n+int size_compare (const void *a, const void *b)\n+{\n+  const symbol_entry *e1 = *(const symbol_entry * const*) a;\n+  const symbol_entry *e2 = *(const symbol_entry * const*) b;\n+\n+  return e1->get_size () - e2->get_size ();\n+}\n+\n+/* Comparing symbols based on name.  */\n+\n+int name_compare (const void *a, const void *b)\n+{\n+  const symbol_entry *e1 = *(const symbol_entry * const*) a;\n+  const symbol_entry *e2 = *(const symbol_entry * const*) b;\n+\n+  return strcmp (e1->get_name (), e2->get_name ());\n+}\n+\n+/* Dump list of functions and their details.  */\n+\n+void dump_list_functions (void)\n+{\n+  auto_vec<symbol_entry *> v;\n+\n+  cgraph_node *cnode;\n+  FOR_EACH_FUNCTION (cnode)\n+  {\n+    if (cnode->definition)\n+      cnode->get_untransformed_body ();\n+    symbol_entry *e = new function_entry (cnode);\n+    if (!flag_lto_dump_defined || cnode->definition)\n+      v.safe_push (e);\n+  }\n+\n+  if (flag_lto_size_sort)\n+    v.qsort (size_compare);\n+  else if (flag_lto_name_sort)\n+    v.qsort (name_compare);\n+  if (flag_lto_reverse_sort)\n+    v.reverse ();\n+\n+  printf (\"Type   Visibility  Size  Name\");\n+  if (flag_lto_print_value)\n+    printf (\"  Value\");\n+  printf (\"\\n\");\n+  int i=0;\n+  symbol_entry* e;\n+  FOR_EACH_VEC_ELT (v, i, e)\n+    e->dump ();\n+}\n+\n+/* Dump list of variables and their details.  */\n+\n+void dump_list_variables (void)\n+{\n+  auto_vec<symbol_entry *> v;\n+\n+  varpool_node *vnode;\n+  FOR_EACH_VARIABLE (vnode)\n+  {\n+    symbol_entry *e = new variable_entry (vnode);\n+    if (!flag_lto_dump_defined || vnode->definition)\n+      v.safe_push (e);\n+  }\n+\n+  if (flag_lto_size_sort)\n+    v.qsort (size_compare);\n+  else if (flag_lto_name_sort)\n+    v.qsort (name_compare);\n+  if (flag_lto_reverse_sort)\n+    v.reverse ();\n+\n+  printf (\"\\n\");\n+  int i=0;\n+  symbol_entry* e;\n+  FOR_EACH_VEC_ELT (v, i, e)\n+    e->dump ();\n+}\n+\n+/* Dump symbol list.  */\n+\n+void dump_list (void)\n+{\n+  dump_list_functions ();\n+  dump_list_variables ();\n+  return;\n+}\n+\n+/* Dump specific variables and functions used in IL.  */\n+void dump_symbol ()\n+{\n+  symtab_node *node;\n+  printf (\"Symbol: %s\\n\", flag_lto_dump_symbol);\n+  FOR_EACH_SYMBOL (node)\n+    {\n+      if (!strcmp (flag_lto_dump_symbol, node->name ()))\n+\t{\n+\t  node->debug ();\n+\t  printf (\"\\n\");\n+\t}\n+    }\n+  return;\n+}\n+\n+/* Dump specific gimple body of specified function.  */\n+void dump_body ()\n+{\n+  int flag = 0;\n+  dump_flags_t flags = TDF_NONE;\n+  if (flag_dump_level)\n+    flags = parse_dump_option (flag_dump_level, NULL);\n+  if (flags == TDF_ERROR)\n+  {\n+    error_at (input_location, \"Level not found, use none, slim, blocks, vops.\");\n+    return;\n+  }\n+  cgraph_node *cnode;\n+  FOR_EACH_FUNCTION (cnode)\n+  if (cnode->definition && !strcmp (cnode->name (), flag_dump_body))\n+  {\n+    printf (\"Gimple Body of Function: %s\\n\", cnode->name ());\n+    cnode->get_untransformed_body ();\n+    debug_function (cnode->decl, flags);\n+    flag = 1;\n+  }\n+  if (!flag)\n+    error_at (input_location, \"Function not found.\");\n+  return;\n+}\n+\n+/* List of command line options for dumping.  */\n+void dump_tool_help ()\n+{\n+  printf (\"Usage: lto-dump [OPTION]... SUB_COMMAND [OPTION]...\\n\\n\");\n+  printf (\"LTO dump tool command line options.\\n\\n\");\n+  printf (\"  -list [options]           Dump the symbol list.\\n\");\n+  printf (\"    -demangle               Dump the demangled output.\\n\");\n+  printf (\"    -defined-only           Dump only the defined symbols.\\n\");\n+  printf (\"    -print-value            Dump initial values of the \"\n+\t  \"variables.\\n\");\n+  printf (\"    -name-sort              Sort the symbols alphabetically.\\n\");\n+  printf (\"    -size-sort              Sort the symbols according to size.\\n\");\n+  printf (\"    -reverse-sort           Dump the symbols in reverse order.\\n\");\n+  printf (\"  -symbol=                  Dump the details of specific symbol.\\n\");\n+  printf (\"  -objects                  Dump the details of LTO objects.\\n\");\n+  printf (\"  -type-stats               Dump statistics of tree types.\\n\");\n+  printf (\"  -tree-stats               Dump statistics of trees.\\n\");\n+  printf (\"  -gimple-stats             Dump statistics of gimple \"\n+\t  \"statements.\\n\");\n+  printf (\"  -dump-body=               Dump the specific gimple body.\\n\");\n+  printf (\"  -dump-level=              Deciding the optimization level \"\n+\t  \"of body.\\n\");\n+  printf (\"  -help                     Display the dump tool help.\\n\");\n+  return;\n+}\n+\n+unsigned int\n+lto_option_lang_mask (void)\n+{\n+  return CL_LTODump;\n+}\n+\n+/* Functions for dumping various details in LTO dump tool are called\n+   in lto_main(). The purpose of this dump tool is to analyze the LTO\n+   object files.  */\n+\n+void\n+lto_main (void)\n+{\n+  quiet_flag = true;\n+  if (flag_lto_dump_tool_help)\n+    dump_tool_help ();\n+\n+  /* LTO is called as a front end, even though it is not a front end.\n+     Because it is called as a front end, TV_PHASE_PARSING and\n+     TV_PARSE_GLOBAL are active, and we need to turn them off while\n+     doing LTO.  Later we turn them back on so they are active up in\n+     toplev.c.  */\n+\n+  /* Initialize the LTO front end.  */\n+  lto_fe_init ();\n+  g_timer = NULL;\n+  /* Read all the symbols and call graph from all the files in the\n+     command line.  */\n+  read_cgraph_and_symbols (num_in_fnames, in_fnames);\n+\n+  /* Dump symbol list.  */\n+  if (flag_lto_dump_list)\n+    dump_list ();\n+  else if (flag_lto_dump_symbol)\n+    {\n+      /* Dump specific variables and functions used in IL.  */\n+      dump_symbol ();\n+    }\n+  else if (flag_lto_gimple_stats)\n+    {\n+      /* Dump gimple statement statistics.  */\n+      cgraph_node *node;\n+      FOR_EACH_DEFINED_FUNCTION (node)\n+\tnode->get_untransformed_body ();\n+      if (!GATHER_STATISTICS)\n+\twarning_at (input_location, 0,\n+\t\t    \"Not configured with --enable-gather-detailed-mem-stats.\");\n+      else\n+\tdump_gimple_statistics ();\n+    }\n+  else if (flag_lto_tree_stats)\n+    {\n+      /* Dump tree statistics.  */\n+      if (!GATHER_STATISTICS)\n+\twarning_at (input_location, 0,\n+\t\t    \"Not configured with --enable-gather-detailed-mem-stats.\");\n+      else\n+\t{\n+\t  printf (\"Tree Statistics\\n\");\n+\t  dump_tree_statistics ();\n+\t}\n+    }\n+  else if (flag_dump_body)\n+    {\n+      /* Dump specific gimple body of specified function.  */\n+      dump_body ();\n+      return;\n+    }\n+}"}, {"sha": "e155ea33d32770db58e5bf2326aabfe3f0df9494", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -789,12 +789,6 @@ static GTY(()) tree registered_builtin_types;\n \n /* Language hooks.  */\n \n-static unsigned int\n-lto_option_lang_mask (void)\n-{\n-  return CL_LTO;\n-}\n-\n static bool\n lto_complain_wrong_lang_p (const struct cl_option *option ATTRIBUTE_UNUSED)\n {"}, {"sha": "d89f258bb5c14e8307092381a7e70582be7a4727", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -560,6 +560,12 @@ offload_handle_link_vars (void)\n #endif\n }\n \n+unsigned int\n+lto_option_lang_mask (void)\n+{\n+  return CL_LTO;\n+}\n+\n /* Main entry point for the GIMPLE front end.  This front end has\n    three main personalities:\n "}, {"sha": "e67e1e76d40e497a98e69d9b713623c4c18180e1", "filename": "gcc/lto/lto.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Flto%2Flto.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.h?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -69,4 +69,6 @@ struct lto_section_list\n   struct lto_section_slot *first, *last;\n };\n \n+extern unsigned int lto_option_lang_mask (void);\n+\n #endif /* LTO_H */"}, {"sha": "4bf37a181714186602521e0355380b9515b4e556", "filename": "gcc/symtab.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66d62d9f2e6b059be6a018397fba555147133a9a/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=66d62d9f2e6b059be6a018397fba555147133a9a", "patch": "@@ -808,6 +808,23 @@ symtab_node::dump_referring (FILE *file)\n \n static const char * const symtab_type_names[] = {\"symbol\", \"function\", \"variable\"};\n \n+/* Dump the visibility of the symbol.  */\n+\n+const char *\n+symtab_node::get_visibility_string () const\n+{\n+  static const char * const visibility_types[]\n+    = { \"default\", \"protected\", \"hidden\", \"internal\" };\n+  return visibility_types[DECL_VISIBILITY (decl)];\n+}\n+\n+/* Dump the type_name of the symbol.  */\n+const char *\n+symtab_node::get_symtab_type_string () const\n+{\n+  return symtab_type_names[type];\n+}\n+\n /* Dump base fields of symtab nodes to F.  Not to be used directly.  */\n \n void"}]}