{"sha": "62a539689073dac558732cb339cbcf0f7baee820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJhNTM5Njg5MDczZGFjNTU4NzMyY2IzMzljYmNmMGY3YmFlZTgyMA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2007-06-30T14:26:18Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2007-06-30T14:26:18Z"}, "message": "pa.md (return): Delete pattern.\n\n\trtl-optimization/32296\n\t* pa.md (return): Delete pattern.\n\t(return_internal): Remove \"(const_int 1)\" from pattern.\n\t(epilogue): Use return_internal pattern for trivial returns.\n\t* pa-protos.h (hppa_can_use_return_insn_p): Delete declaration.\n\t* pa.c (hppa_can_use_return_insn_p): Delete function.  Include \"df.h\".\n\nFrom-SVN: r126150", "tree": {"sha": "6a66f0056b4fbb9fbd88fcca99dfa7a20bbc6ecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a66f0056b4fbb9fbd88fcca99dfa7a20bbc6ecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62a539689073dac558732cb339cbcf0f7baee820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a539689073dac558732cb339cbcf0f7baee820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a539689073dac558732cb339cbcf0f7baee820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a539689073dac558732cb339cbcf0f7baee820/comments", "author": null, "committer": null, "parents": [{"sha": "89fb70a345104a84bff4d5105f3456e7b8a5ca1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89fb70a345104a84bff4d5105f3456e7b8a5ca1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89fb70a345104a84bff4d5105f3456e7b8a5ca1e"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "27bcd144fa496e96af828d86a65d6e6e3835b90d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a539689073dac558732cb339cbcf0f7baee820/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a539689073dac558732cb339cbcf0f7baee820/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62a539689073dac558732cb339cbcf0f7baee820", "patch": "@@ -1,3 +1,12 @@\n+2007-06-30  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\trtl-optimization/32296\n+\t* pa.md (return): Delete pattern.\n+\t(return_internal): Remove \"(const_int 1)\" from pattern.\n+\t(epilogue): Use return_internal pattern for trivial returns.\n+\t* pa-protos.h (hppa_can_use_return_insn_p): Delete declaration.\n+\t* pa.c (hppa_can_use_return_insn_p): Delete function.  Include \"df.h\".\n+\n 2007-06-30  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \tFix PR tree-optimization/32540"}, {"sha": "51b7ecb1ee2b19b4af049c1b962f8e5238a81d5d", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a539689073dac558732cb339cbcf0f7baee820/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a539689073dac558732cb339cbcf0f7baee820/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=62a539689073dac558732cb339cbcf0f7baee820", "patch": "@@ -144,7 +144,6 @@ extern int and_mask_p (unsigned HOST_WIDE_INT);\n extern int cint_ok_for_move (HOST_WIDE_INT);\n extern void hppa_expand_prologue (void);\n extern void hppa_expand_epilogue (void);\n-extern int hppa_can_use_return_insn_p (void);\n extern int ior_mask_p (unsigned HOST_WIDE_INT);\n extern void compute_zdepdi_operands (unsigned HOST_WIDE_INT,\n \t\t\t\t     unsigned *);"}, {"sha": "2be7b4efb67d80b4de2e86618e6687dca03b4918", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a539689073dac558732cb339cbcf0f7baee820/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a539689073dac558732cb339cbcf0f7baee820/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=62a539689073dac558732cb339cbcf0f7baee820", "patch": "@@ -47,6 +47,7 @@ Boston, MA 02110-1301, USA.  */\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"df.h\"\n \n /* Return nonzero if there is a bypass for the output of \n    OUT_INSN and the fp store IN_INSN.  */\n@@ -4403,22 +4404,6 @@ return_addr_rtx (int count, rtx frameaddr)\n   return saved_rp;\n }\n \n-/* This is only valid once reload has completed because it depends on\n-   knowing exactly how much (if any) frame there is and...\n-\n-   It's only valid if there is no frame marker to de-allocate and...\n-\n-   It's only valid if %r2 hasn't been saved into the caller's frame\n-   (we're not profiling and %r2 isn't live anywhere).  */\n-int\n-hppa_can_use_return_insn_p (void)\n-{\n-  return (reload_completed\n-\t  && (compute_frame_size (get_frame_size (), 0) ? 0 : 1)\n-\t  && ! df_regs_ever_live_p (2)\n-\t  && ! frame_pointer_needed);\n-}\n-\n void\n emit_bcond_fp (enum rtx_code code, rtx operand0)\n {"}, {"sha": "a732fa07eeeb23755feb8e39f4e791fd7c5b51a7", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62a539689073dac558732cb339cbcf0f7baee820/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62a539689073dac558732cb339cbcf0f7baee820/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=62a539689073dac558732cb339cbcf0f7baee820", "patch": "@@ -7343,28 +7343,10 @@\n \f\n ;; Unconditional and other jump instructions.\n \n-;; This can only be used in a leaf function, so we do\n-;; not need to use the PIC register when generating PIC code.\n-(define_insn \"return\"\n-  [(return)\n-   (use (reg:SI 2))\n-   (const_int 0)]\n-  \"hppa_can_use_return_insn_p ()\"\n-  \"*\n-{\n-  if (TARGET_PA_20)\n-    return \\\"bve%* (%%r2)\\\";\n-  return \\\"bv%* %%r0(%%r2)\\\";\n-}\"\n-  [(set_attr \"type\" \"branch\")\n-   (set_attr \"length\" \"4\")])\n-\n-;; Emit a different pattern for functions which have non-trivial\n-;; epilogues so as not to confuse jump and reorg.\n+;; This is used for most returns.\n (define_insn \"return_internal\"\n   [(return)\n-   (use (reg:SI 2))\n-   (const_int 1)]\n+   (use (reg:SI 2))]\n   \"\"\n   \"*\n {\n@@ -7406,14 +7388,16 @@\n   \"\"\n   \"\n {\n-  /* Try to use the trivial return first.  Else use the full\n-     epilogue.  */\n-  if (hppa_can_use_return_insn_p ())\n-    emit_jump_insn (gen_return ());\n+  rtx x;\n+\n+  /* Try to use the trivial return first.  Else use the full epilogue.  */\n+  if (reload_completed\n+      && !frame_pointer_needed\n+      && !df_regs_ever_live_p (2)\n+      && (compute_frame_size (get_frame_size (), 0) ? 0 : 1))\n+    x = gen_return_internal ();\n   else\n     {\n-      rtx x;\n-\n       hppa_expand_epilogue ();\n \n       /* EH returns bypass the normal return stub.  Thus, we must do an\n@@ -7426,9 +7410,8 @@\n \tx = gen_return_external_pic ();\n       else\n \tx = gen_return_internal ();\n-\n-      emit_jump_insn (x);\n     }\n+  emit_jump_insn (x);\n   DONE;\n }\")\n "}]}