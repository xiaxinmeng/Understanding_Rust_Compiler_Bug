{"sha": "4337bc937caa26789f01e16d3eaa7ddd72c9558a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMzN2JjOTM3Y2FhMjY3ODlmMDFlMTZkM2VhYTdkZGQ3MmM5NTU4YQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-09-11T04:29:58Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-09-11T04:29:58Z"}, "message": "c-pragma.c (handle_pragma_pack): Correct parsing logic so it won't give a spurious error for '#pragma pack()'.\n\n\t* c-pragma.c (handle_pragma_pack): Correct parsing logic so it\n\twon't give a spurious error for '#pragma pack()'.  Simplify\n\tcontrol flow for readability.  'reset' action is not necessary.\n\nFrom-SVN: r36308", "tree": {"sha": "4519490ec505b7c1812e087ae63f6d7cee10cd60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4519490ec505b7c1812e087ae63f6d7cee10cd60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4337bc937caa26789f01e16d3eaa7ddd72c9558a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4337bc937caa26789f01e16d3eaa7ddd72c9558a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4337bc937caa26789f01e16d3eaa7ddd72c9558a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4337bc937caa26789f01e16d3eaa7ddd72c9558a/comments", "author": null, "committer": null, "parents": [{"sha": "d8ea8f2871301b84310b2c37cbc394343db1af8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ea8f2871301b84310b2c37cbc394343db1af8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ea8f2871301b84310b2c37cbc394343db1af8a"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "5f7a72a3ad38de43804206b75655cc3fec3f2ae0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337bc937caa26789f01e16d3eaa7ddd72c9558a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337bc937caa26789f01e16d3eaa7ddd72c9558a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4337bc937caa26789f01e16d3eaa7ddd72c9558a", "patch": "@@ -1,3 +1,9 @@\n+2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* c-pragma.c (handle_pragma_pack): Correct parsing logic so it\n+\twon't give a spurious error for '#pragma pack()'.  Simplify\n+\tcontrol flow for readability.  'reset' action is not necessary.\n+\n 2000-09-10  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* defaults.h: Provide default definitions for: CHAR_TYPE_SIZE,"}, {"sha": "8503f3cacca41362ea1cb52f1b6e9b13f6220964", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4337bc937caa26789f01e16d3eaa7ddd72c9558a/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4337bc937caa26789f01e16d3eaa7ddd72c9558a/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=4337bc937caa26789f01e16d3eaa7ddd72c9558a", "patch": "@@ -188,59 +188,57 @@ handle_pragma_pack (dummy)\n   tree x, id = 0;\n   int align;\n   enum cpp_ttype token;\n-  enum { set, reset, push, pop } action;\n+  enum { set, push, pop } action;\n \n   if (c_lex (&x) != CPP_OPEN_PAREN)\n     BAD (\"missing '(' after '#pragma pack' - ignored\");\n \n   token = c_lex (&x);\n   if (token == CPP_CLOSE_PAREN)\n-    action = reset;\n+    {\n+      action = set;\n+      align = 0;\n+    }\n   else if (token == CPP_NUMBER)\n     {\n       align = TREE_INT_CST_LOW (x);\n       action = set;\n+      if (c_lex (&x) != CPP_CLOSE_PAREN)\n+\tBAD (\"malformed '#pragma pack' - ignored\");\n     }\n   else if (token == CPP_NAME)\n     {\n-      if (!strcmp (IDENTIFIER_POINTER (x), \"push\"))\n+      const char *op = IDENTIFIER_POINTER (x);\n+      if (!strcmp (op, \"push\"))\n \taction = push;\n-      else if (!strcmp (IDENTIFIER_POINTER (x), \"pop\"))\n+      else if (!strcmp (op, \"pop\"))\n \taction = pop;\n       else\n-\tBAD2 (\"unknown action '%s' for '#pragma pack' - ignored\",\n-\t      IDENTIFIER_POINTER (x));\n-    }\n-  else\n-    BAD (\"malformed '#pragma pack' - ignored\");\n+\tBAD2 (\"unknown action '%s' for '#pragma pack' - ignored\", op);\n \n-  token = c_lex (&x);\n-  if ((action == set || action == reset) && token != CPP_CLOSE_PAREN)\n-    BAD (\"malformed '#pragma pack' - ignored\");\n-  if ((action == push || action == pop) && token != CPP_COMMA)\n-    BAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\",\n-\t  action == push ? \"push\" : \"pop\");\n+      if (c_lex (&x) != CPP_COMMA)\n+\tBAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\", op);\n \n-  if (action == push || action == pop)\n-    {\n       token = c_lex (&x);\n       if (token == CPP_NAME)\n \t{\n \t  id = x;\n \t  if (c_lex (&x) != CPP_COMMA)\n-\t    BAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\",\n-\t\t  action == push ? \"push\" : \"pop\");\n+\t    BAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\", op);\n \t  token = c_lex (&x);\n \t}\n+\n       if (token == CPP_NUMBER)\n \talign = TREE_INT_CST_LOW (x);\n       else\n-\tBAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\",\n-\t      action == push ? \"push\" : \"pop\");\n+\tBAD2 (\"malformed '#pragma pack(%s[, id], <n>)' - ignored\", op);\n \n       if (c_lex (&x) != CPP_CLOSE_PAREN)\n \tBAD (\"malformed '#pragma pack' - ignored\");\n     }\n+  else\n+    BAD (\"malformed '#pragma pack' - ignored\");\n+\n   if (c_lex (&x) != CPP_EOF)\n     warning (\"junk at end of '#pragma pack'\");\n \n@@ -261,7 +259,6 @@ handle_pragma_pack (dummy)\n   switch (action)\n     {\n     case set:   SET_GLOBAL_ALIGNMENT (align);  break;\n-    case reset: SET_GLOBAL_ALIGNMENT (0);      break;\n     case push:  push_alignment (align, id);    break;\n     case pop:   pop_alignment (id);            break;\n     }"}]}