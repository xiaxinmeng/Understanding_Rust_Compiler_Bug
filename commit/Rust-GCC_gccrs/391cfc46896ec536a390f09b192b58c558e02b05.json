{"sha": "391cfc46896ec536a390f09b192b58c558e02b05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxY2ZjNDY4OTZlYzUzNmEzOTBmMDliMTkyYjU4YzU1OGUwMmIwNQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-07-06T09:37:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-07-06T09:37:11Z"}, "message": "locale_classes.h: Fully qualify standard functions with std::, thus avoiding Koenig lookup.\n\n2003-07-06  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/locale_classes.h: Fully qualify standard\n\tfunctions with std::, thus avoiding Koenig lookup.\n\t* include/bits/locale_facets.tcc: Likewise.\n\t* src/locale.cc: Likewise.\n\t* src/localename.cc: Likewise.\n\nFrom-SVN: r68997", "tree": {"sha": "7288a565b403e26864d9d0e0b5786ccdaa992d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7288a565b403e26864d9d0e0b5786ccdaa992d4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391cfc46896ec536a390f09b192b58c558e02b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391cfc46896ec536a390f09b192b58c558e02b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391cfc46896ec536a390f09b192b58c558e02b05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391cfc46896ec536a390f09b192b58c558e02b05/comments", "author": null, "committer": null, "parents": [{"sha": "1d088deebefc04b8c99fe00e4df4e9c4ddacec2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d088deebefc04b8c99fe00e4df4e9c4ddacec2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d088deebefc04b8c99fe00e4df4e9c4ddacec2d"}], "stats": {"total": 150, "additions": 79, "deletions": 71}, "files": [{"sha": "9ab1587ca0f53861825b615d128817e1b16b8734", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=391cfc46896ec536a390f09b192b58c558e02b05", "patch": "@@ -1,3 +1,11 @@\n+2003-07-06  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/locale_classes.h: Fully qualify standard\n+\tfunctions with std::, thus avoiding Koenig lookup.\n+\t* include/bits/locale_facets.tcc: Likewise.\n+\t* src/locale.cc: Likewise.\n+\t* src/localename.cc: Likewise.\n+\n 2003-07-06  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/bits/allocator_traits.h:  Fix doxygen markup."}, {"sha": "362e38f276703e695071c01cc8b97940b39d3de8", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=391cfc46896ec536a390f09b192b58c558e02b05", "patch": "@@ -386,7 +386,7 @@ namespace std\n \t{\n \t  delete [] _M_impl->_M_names[__i];\n \t  char* __new = new char[2];\n-\t  strcpy(__new, \"*\");\n+\t  std::strcpy(__new, \"*\");\n \t  _M_impl->_M_names[__i] = __new;\n \t}\n     }"}, {"sha": "97cec3f313d08cdd5bf6464f0a2a56572041a56c", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=391cfc46896ec536a390f09b192b58c558e02b05", "patch": "@@ -229,7 +229,7 @@ namespace std\n           // Add the ending grouping if a decimal wasn't found.\n \t  if (!__found_dec)\n \t    __found_grouping += static_cast<char>(__sep_pos);\n-          if (!__verify_grouping(__grouping, __found_grouping))\n+          if (!std::__verify_grouping(__grouping, __found_grouping))\n \t    __err |= ios_base::failbit;\n         }\n \n@@ -380,7 +380,7 @@ namespace std\n         {\n           // Add the ending grouping.\n           __found_grouping += static_cast<char>(__sep_pos);\n-          if (!__verify_grouping(__grouping, __found_grouping))\n+          if (!std::__verify_grouping(__grouping, __found_grouping))\n \t    __err |= ios_base::failbit;\n         }\n \n@@ -409,7 +409,7 @@ namespace std\n           __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n \n \t  unsigned long __ul; \n-\t  __convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+\t  std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n \t  if (!(__err & ios_base::failbit) && __ul <= 1)\n \t    __v = __ul;\n \t  else \n@@ -470,7 +470,7 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n \n@@ -484,7 +484,7 @@ namespace std\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n       unsigned long __ul;\n-      __convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n       if (!(__err & ios_base::failbit) \n \t  && __ul <= numeric_limits<unsigned short>::max())\n \t__v = static_cast<unsigned short>(__ul);\n@@ -503,7 +503,7 @@ namespace std\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n       unsigned long __ul;\n-      __convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n       if (!(__err & ios_base::failbit) \n \t  && __ul <= numeric_limits<unsigned int>::max())\n \t__v = static_cast<unsigned int>(__ul);\n@@ -521,7 +521,7 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n \n@@ -535,7 +535,7 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n \n@@ -548,7 +548,7 @@ namespace std\n       string __xtrc;\n       int __base;\n       __beg = _M_extract_int(__beg, __end, __io, __err, __xtrc, __base);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale, __base);\n       return __beg;\n     }\n #endif\n@@ -562,7 +562,7 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -575,7 +575,7 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -588,7 +588,7 @@ namespace std\n       string __xtrc;\n       __xtrc.reserve(32);\n       __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);\n-      __convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n+      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -613,7 +613,7 @@ namespace std\n       __io.flags(__fmt);\n \n       unsigned long __ul;\n-      __convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n+      std::__convert_to_v(__xtrc.c_str(), __ul, __err, _S_c_locale, __base);\n       if (!(__err & ios_base::failbit))\n \t__v = reinterpret_cast<void*>(__ul);\n       else \n@@ -770,8 +770,8 @@ namespace std\n \t    *(__new + 1) = *(__cs + 1);\n \t  }\n       _CharT* __p;\n-      __p = __add_grouping(__new + __off, __sep, \n-\t\t\t   __grouping.c_str(),\n+      __p = std::__add_grouping(__new + __off, __sep, \n+\t\t\t\t__grouping.c_str(),\n \t\t\t   __grouping.c_str() + __grouping.size(),\n \t\t\t   __cs + __off, __cs + __len);\n       __len = __p - __new;\n@@ -826,7 +826,7 @@ namespace std\n \n \t// [22.2.2.2.2] Stage 4.\n \t// Write resulting, fully-formatted string to output iterator.\n-\treturn __write(__s, __cs, __len);\n+\treturn std::__write(__s, __cs, __len);\n       } \n \n   template<typename _CharT, typename _OutIter>\n@@ -840,10 +840,10 @@ namespace std\n       // Add grouping, if necessary. \n       _CharT* __p2;\n       int __declen = __p ? __p - __cs : __len;\n-      __p2 = __add_grouping(__new, __sep, \n-\t\t\t    __grouping.c_str(),\n-\t\t\t    __grouping.c_str() + __grouping.size(),\n-\t\t\t    __cs, __cs + __declen);\n+      __p2 = std::__add_grouping(__new, __sep, \n+\t\t\t\t __grouping.c_str(),\n+\t\t\t\t __grouping.c_str() + __grouping.size(),\n+\t\t\t\t __cs, __cs + __declen);\n       \n       // Tack on decimal part.\n       int __newlen = __p2 - __new;\n@@ -905,16 +905,16 @@ namespace std\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n \t_S_format_float(__io, __fbuf, __mod);\n-\t__len = __convert_from_v(__cs, __cs_size, __fbuf, __v,\n-\t\t\t\t _S_c_locale, __prec);\n+\t__len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,\n+\t\t\t\t      _S_c_locale, __prec);\n \n \t// If the buffer was not large enough, try again with the correct size.\n \tif (__len >= __cs_size)\n \t  {\n \t    __cs_size = __len + 1; \n \t    __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t    __len = __convert_from_v(__cs, __cs_size, __fbuf, __v,\n-\t\t\t\t     _S_c_locale, __prec);\n+\t    __len = std::__convert_from_v(__cs, __cs_size, __fbuf, __v,\n+\t\t\t\t\t  _S_c_locale, __prec);\n \t  }\n #else\n \t// Consider the possibility of long ios_base::fixed outputs\n@@ -931,7 +931,7 @@ namespace std\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n \t_S_format_float(__io, __fbuf, __mod);\n-\t__len = __convert_from_v(__cs, 0, __fbuf, __v, _S_c_locale, __prec);\n+\t__len = std::__convert_from_v(__cs, 0, __fbuf, __v, _S_c_locale, __prec);\n #endif\n \n       // [22.2.2.2.2] Stage 2, convert to char_type, using correct\n@@ -975,7 +975,7 @@ namespace std\n       \n       // [22.2.2.2.2] Stage 4.\n       // Write resulting, fully-formatted string to output iterator.\n-      return __write(__s, __ws, __len);\n+      return std::__write(__s, __ws, __len);\n       }\n \n   template<typename _CharT, typename _OutIter>\n@@ -1014,7 +1014,7 @@ namespace std\n \t      __cs = __cs3;\n \t    }\n \t  __io.width(0);\n-\t  __s = __write(__s, __cs, __len);\n+\t  __s = std::__write(__s, __cs, __len);\n \t}\n       return __s;\n     }\n@@ -1100,7 +1100,7 @@ namespace std\n       const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc); \n       const _CharT* __wcs = __str.c_str();\n       __ctype.narrow(__wcs, __wcs + __str.size() + 1, char(), __cs);      \n-      __convert_to_v(__cs, __units, __err, _S_c_locale);\n+      std::__convert_to_v(__cs, __units, __err, _S_c_locale);\n       return __beg;\n     }\n \n@@ -1282,7 +1282,7 @@ namespace std\n       // Test for grouping fidelity.\n       if (__grouping.size() && __grouping_tmp.size())\n \t{\n-\t  if (!__verify_grouping(__grouping, __grouping_tmp))\n+\t  if (!std::__verify_grouping(__grouping, __grouping_tmp))\n \t    __testvalid = false;\n \t}\n \n@@ -1324,22 +1324,22 @@ namespace std\n       // First try a buffer perhaps big enough.\n       int __cs_size = 64;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = __convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n-\t\t\t\t   _S_c_locale);\n+      int __len = std::__convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n+\t\t\t\t\t_S_c_locale);\n       // If the buffer was not large enough, try again with the correct size.\n       if (__len >= __cs_size)\n \t{\n \t  __cs_size = __len + 1;\n \t  __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t  __len = __convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n-\t\t\t\t   _S_c_locale);\n+\t  __len = std::__convert_from_v(__cs, __cs_size, \"%.01Lf\", __units, \n+\t\t\t\t\t_S_c_locale);\n \t}\n #else\n       // max_exponent10 + 1 for the integer part, + 4 for sign, decimal point,\n       // decimal digit, '\\0'. \n       const int __cs_size = numeric_limits<long double>::max_exponent10 + 5;\n       char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-      int __len = __convert_from_v(__cs, 0, \"%.01Lf\", __units, _S_c_locale);\n+      int __len = std::__convert_from_v(__cs, 0, \"%.01Lf\", __units, _S_c_locale);\n #endif\n       _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) \n \t\t\t\t\t\t\t   * __cs_size));\n@@ -1437,8 +1437,8 @@ namespace std\n \t\t  const int __n = (__end - __beg) * 2;\n \t\t  _CharT* __ws2 =\n        \t          static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));\n-\t\t  _CharT* __ws_end = __add_grouping(__ws2, __sep, __gbeg, \n-\t\t\t\t\t\t    __gend, __beg, __end);\n+\t\t  _CharT* __ws_end = std::__add_grouping(__ws2, __sep, __gbeg, \n+\t\t\t\t\t\t\t __gend, __beg, __end);\n \t\t  __value.insert(0, __ws2, __ws_end - __ws2);\n \t\t}\n \t      else\n@@ -1505,7 +1505,7 @@ namespace std\n \t    }\n \n \t  // Write resulting, fully-formatted string to output iterator.\n-\t  __s = __write(__s, __res.c_str(), __len);\n+\t  __s = std::__write(__s, __res.c_str(), __len);\n \t}\n       __io.width(0);\n       return __s; \n@@ -1958,7 +1958,7 @@ namespace std\n       if (__i == 2 || __i == 4)\n \t{\n \t  long __l;\n-\t  __convert_to_v(__digits.c_str(), __l, __err, _S_c_locale);\n+\t  std::__convert_to_v(__digits.c_str(), __l, __err, _S_c_locale);\n \t  if (!(__err & ios_base::failbit) && __l <= INT_MAX)\n \t    {\n \t      __l = __i == 2 ? __l : __l - 1900; \n@@ -2047,7 +2047,7 @@ namespace std\n       __tp._M_put(__res, __maxlen, __fmt, __tm);\n \n       // Write resulting, fully-formatted string to output iterator.\n-      return __write(__s, __res, char_traits<char_type>::length(__res));\n+      return std::__write(__s, __res, char_traits<char_type>::length(__res));\n     }\n \n \n@@ -2280,9 +2280,9 @@ namespace std\n     {\n       if (__last - __first > *__gbeg)\n         {\n-          __s = __add_grouping(__s,  __sep, \n-\t\t\t       (__gbeg + 1 == __gend ? __gbeg : __gbeg + 1),\n-\t\t\t       __gend, __first, __last - *__gbeg);\n+          __s = std::__add_grouping(__s,  __sep, \n+\t\t\t\t    (__gbeg + 1 == __gend ? __gbeg : __gbeg + 1),\n+\t\t\t\t    __gend, __first, __last - *__gbeg);\n           __first = __last - *__gbeg;\n           *__s++ = __sep;\n         }"}, {"sha": "c6be06928ca1cc789fb10e4ee7633a28fbe96852", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=391cfc46896ec536a390f09b192b58c558e02b05", "patch": "@@ -176,18 +176,18 @@ namespace std\n     if (__s)\n       {\n \t_S_initialize(); \n-\tif (strcmp(__s, \"C\") == 0 || strcmp(__s, \"POSIX\") == 0)\n+\tif (std::strcmp(__s, \"C\") == 0 || std::strcmp(__s, \"POSIX\") == 0)\n \t  (_M_impl = _S_classic)->_M_add_reference();\n-\telse if (strcmp(__s, \"\") != 0)\n+\telse if (std::strcmp(__s, \"\") != 0)\n \t  _M_impl = new _Impl(__s, 1);\n \telse\n \t  {\n \t    // Get it from the environment.\n \t    char* __env = getenv(\"LC_ALL\");\n \t    // If LC_ALL is set we are done.\n-\t    if (__env && strcmp(__env, \"\") != 0)\n+\t    if (__env && std::strcmp(__env, \"\") != 0)\n \t      {\n-\t\tif (strcmp(__env, \"C\") == 0 || strcmp(__env, \"POSIX\") == 0)\n+\t\tif (std::strcmp(__env, \"C\") == 0 || std::strcmp(__env, \"POSIX\") == 0)\n \t\t  (_M_impl = _S_classic)->_M_add_reference();\n \t\telse\n \t\t  _M_impl = new _Impl(__env, 1);\n@@ -197,30 +197,30 @@ namespace std\n \t\tchar* __res;\n \t\t// LANG may set a default different from \"C\".\n \t\tchar* __env = getenv(\"LANG\");\n-\t\tif (!__env || strcmp(__env, \"\") == 0 || strcmp(__env, \"C\") == 0\n-\t\t    || strcmp(__env, \"POSIX\") == 0)\n+\t\tif (!__env || std::strcmp(__env, \"\") == 0 || std::strcmp(__env, \"C\") == 0\n+\t\t    || std::strcmp(__env, \"POSIX\") == 0)\n \t\t  __res = strdup(\"C\");\n \t\telse \n \t\t  __res = strdup(__env);\n \t\t\n \t\t// Scan the categories looking for the first one\n \t\t// different from LANG.\n \t\tsize_t __i = 0;\n-\t\tif (strcmp(__res, \"C\") == 0)\n+\t\tif (std::strcmp(__res, \"C\") == 0)\n \t\t  for (; __i < _S_categories_size; ++__i)\n \t\t    {\n \t\t      __env = getenv(_S_categories[__i]);\n-\t\t      if (__env && strcmp(__env, \"\") != 0 \n-\t\t\t  && strcmp(__env, \"C\") != 0 \n-\t\t\t  && strcmp(__env, \"POSIX\") != 0) \n+\t\t      if (__env && std::strcmp(__env, \"\") != 0 \n+\t\t\t  && std::strcmp(__env, \"C\") != 0 \n+\t\t\t  && std::strcmp(__env, \"POSIX\") != 0) \n \t\t\tbreak;\n \t\t    }\n \t\telse\n \t\t  for (; __i < _S_categories_size; ++__i)\n \t\t    {\n \t\t      __env = getenv(_S_categories[__i]);\n-\t\t      if (__env && strcmp(__env, \"\") != 0 \n-\t\t\t  && strcmp(__env, __res) != 0) \n+\t\t      if (__env && std::strcmp(__env, \"\") != 0 \n+\t\t\t  && std::strcmp(__env, __res) != 0) \n \t\t\tbreak;\n \t\t    }\n \t\n@@ -244,15 +244,15 @@ namespace std\n \t\t    for (; __i < _S_categories_size; ++__i)\n \t\t      {\n \t\t\t__env = getenv(_S_categories[__i]);\n-\t\t\tif (!__env || strcmp(__env, \"\") == 0)\n+\t\t\tif (!__env || std::strcmp(__env, \"\") == 0)\n \t\t\t  {\n \t\t\t    __str += _S_categories[__i];\n \t\t\t    __str += '=';\n \t\t\t    __str += __res;\n \t\t\t    __str += ';';\n \t\t\t  }\n-\t\t\telse if (strcmp(__env, \"C\") == 0\n-\t\t\t\t || strcmp(__env, \"POSIX\") == 0)\n+\t\t\telse if (std::strcmp(__env, \"C\") == 0\n+\t\t\t\t || std::strcmp(__env, \"POSIX\") == 0)\n \t\t\t  {\n \t\t\t    __str += _S_categories[__i];\n \t\t\t    __str += \"=C;\";\n@@ -270,7 +270,7 @@ namespace std\n \t\t  }\n \t\t// ... otherwise either an additional instance of\n \t\t// the \"C\" locale or LANG.\n-\t\telse if (strcmp(__res, \"C\") == 0)\n+\t\telse if (std::strcmp(__res, \"C\") == 0)\n \t\t  (_M_impl = _S_classic)->_M_add_reference();\n \t\telse\n \t\t  _M_impl = new _Impl(__res, 1);\n@@ -323,7 +323,7 @@ namespace std\n     __other._M_impl->_M_add_reference();\n     _S_global = __other._M_impl; \n     if (_S_global->_M_check_same_name() \n-\t&& (strcmp(_S_global->_M_names[0], \"*\") != 0))\n+\t&& (std::strcmp(_S_global->_M_names[0], \"*\") != 0))\n       setlocale(LC_ALL, __other.name().c_str());\n \n     // Reference count sanity check: one reference removed for the"}, {"sha": "0a2ef129f4e098d9fdd92be8cc2911be88ff9cd0", "filename": "libstdc++-v3/src/localename.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391cfc46896ec536a390f09b192b58c558e02b05/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocalename.cc?ref=391cfc46896ec536a390f09b192b58c558e02b05", "patch": "@@ -150,7 +150,7 @@ namespace std\n     for (size_t __i = 0; __i < _S_categories_size; ++__i)\n       {\n \tchar* __new = new char[strlen(__imp._M_names[__i]) + 1];\n-\tstrcpy(__new, __imp._M_names[__i]);\n+\tstd::strcpy(__new, __imp._M_names[__i]);\n \t_M_names[__i] = __new;\n       }\n   }\n@@ -199,26 +199,26 @@ namespace std\n \tdelete [] _M_names;\n \t__throw_exception_again;\n       }\n-    size_t __len = strlen(__s);\n-    if (!strchr(__s, ';'))\n+    size_t __len = std::strlen(__s);\n+    if (!std::strchr(__s, ';'))\n       {\n \tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n \t  {\n \t    _M_names[__i] = new char[__len + 1];\n-\t    strcpy(_M_names[__i], __s);\n+\t    std::strcpy(_M_names[__i], __s);\n \t  }\n       }\n     else\n       {\n \tconst char* __beg = __s;\n \tfor (size_t __i = 0; __i < _S_categories_size; ++__i)\n \t  {\n-\t    __beg = strchr(__beg, '=') + 1;\n-\t    const char* __end = strchr(__beg, ';');\n+\t    __beg = std::strchr(__beg, '=') + 1;\n+\t    const char* __end = std::strchr(__beg, ';');\n \t    if (!__end)\n \t      __end = __s + __len;\n \t    char* __new = new char[__end - __beg + 1];\n-\t    memcpy(__new, __beg, __end - __beg);\n+\t    std::memcpy(__new, __beg, __end - __beg);\n \t    __new[__end - __beg] = '\\0';\n \t    _M_names[__i] = __new;\n \t  }\n@@ -355,12 +355,12 @@ namespace std\n \t    // Need to replace entry in _M_facets with other locale's info.\n \t    _M_replace_category(__imp, _S_facet_categories[__ix]);\n \t    // If both have names, go ahead and mangle.\n-\t    if (strcmp(_M_names[__ix], \"*\") != 0 \n-\t\t&& strcmp(__imp->_M_names[__ix], \"*\") != 0)\n+\t    if (std::strcmp(_M_names[__ix], \"*\") != 0 \n+\t\t&& std::strcmp(__imp->_M_names[__ix], \"*\") != 0)\n \t      {\n \t\tdelete [] _M_names[__ix];\n-\t\tchar* __new = new char[strlen(__imp->_M_names[__ix]) + 1];\n-\t\tstrcpy(__new, __imp->_M_names[__ix]);\n+\t\tchar* __new = new char[std::strlen(__imp->_M_names[__ix]) + 1];\n+\t\tstd::strcpy(__new, __imp->_M_names[__ix]);\n \t\t_M_names[__ix] = __new;\n \t      }\n \t  }"}]}