{"sha": "b504a91833ea26e7469077975b098e3c42551d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwNGE5MTgzM2VhMjZlNzQ2OTA3Nzk3NWIwOThlM2M0MjU1MWQ0ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-06-10T11:08:14Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-10T11:08:14Z"}, "message": "cp-tree.h (error_operand_p): Remove.\n\n/gcc/cp\n2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* cp-tree.h (error_operand_p): Remove.\n\n/gcc\n2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* tree.h (error_operand_p): Add.\n\t* dbxout.c (dbxout_type_fields): Use the latter.\n\t* c-decl.c (add_stmt): Likewise.\n\t* gimplify.c (omp_add_variable, omp_notice_variable,\n\tgimplify_scan_omp_clauses): Likewise.\n\nFrom-SVN: r174899", "tree": {"sha": "9e97fc62830a4c4b6d61b8286612e1d1f1b41fb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e97fc62830a4c4b6d61b8286612e1d1f1b41fb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b504a91833ea26e7469077975b098e3c42551d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b504a91833ea26e7469077975b098e3c42551d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b504a91833ea26e7469077975b098e3c42551d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b504a91833ea26e7469077975b098e3c42551d4e/comments", "author": null, "committer": null, "parents": [{"sha": "3f5ea9dc58907a2d3898ac666572c103d46aa917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5ea9dc58907a2d3898ac666572c103d46aa917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5ea9dc58907a2d3898ac666572c103d46aa917"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "fa56bf092b5a50801a64c387f7aa5bad816dadf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -1,5 +1,13 @@\n+2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* tree.h (error_operand_p): Add.\n+\t* dbxout.c (dbxout_type_fields): Use the latter.\n+\t* c-decl.c (add_stmt): Likewise.\n+\t* gimplify.c (omp_add_variable, omp_notice_variable,\n+\tgimplify_scan_omp_clauses): Likewise.\n+\n 2011-06-10  Georg-Johann Lay  <avr@gjlay.de>\n-\t\n+\n \t* config/avr/avr.c (avr_function_arg_advance): Fix thinko about\n \twhen a value is actually passed in regs.\n "}, {"sha": "e42a3c54b4e4e5187ef39f1f321dc6ef7529c6b8", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -565,7 +565,7 @@ add_stmt (tree t)\n static bool\n decl_jump_unsafe (tree decl)\n {\n-  if (decl == error_mark_node || TREE_TYPE (decl) == error_mark_node)\n+  if (error_operand_p (decl))\n     return false;\n \n   /* Always warn about crossing variably modified types.  */"}, {"sha": "116e470ec3a3c9c7881bf75ec5727f5ff3a580aa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -1,3 +1,7 @@\n+2011-06-10  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* cp-tree.h (error_operand_p): Remove.\n+\n 2011-06-09  David Krauss  <potswa@mac.com>\n \n \tPR c++/49118"}, {"sha": "06b5926faa862cc490689d7e334b68e9f6f64889", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -1123,12 +1123,6 @@ struct GTY(()) language_function {\n #define ansi_assopname(CODE) \\\n   (assignment_operator_name_info[(int) (CODE)].identifier)\n \n-/* True if NODE is an erroneous expression.  */\n-\n-#define error_operand_p(NODE)\t\t\t\t\t\\\n-  ((NODE) == error_mark_node\t\t\t\t\t\\\n-   || ((NODE) && TREE_TYPE ((NODE)) == error_mark_node))\n-\f\n /* TRUE if a tree code represents a statement.  */\n extern bool statement_code_p[MAX_TREE_CODES];\n "}, {"sha": "9160fb3ded91f98f9b94b6dd779b1184b568e5e3", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -1510,7 +1510,7 @@ dbxout_type_fields (tree type)\n     {\n       /* If one of the nodes is an error_mark or its type is then\n \t return early.  */\n-      if (tem == error_mark_node || TREE_TYPE (tem) == error_mark_node)\n+      if (error_operand_p (tem))\n \treturn;\n \n       /* Omit here local type decls until we know how to support them.  */"}, {"sha": "bc6d32179a68bbd928afa3f729f11230f469ad01", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -5448,7 +5448,7 @@ omp_add_variable (struct gimplify_omp_ctx *ctx, tree decl, unsigned int flags)\n   unsigned int nflags;\n   tree t;\n \n-  if (decl == error_mark_node || TREE_TYPE (decl) == error_mark_node)\n+  if (error_operand_p (decl))\n     return;\n \n   /* Never elide decls whose type has TREE_ADDRESSABLE set.  This means\n@@ -5573,7 +5573,7 @@ omp_notice_variable (struct gimplify_omp_ctx *ctx, tree decl, bool in_code)\n   unsigned flags = in_code ? GOVD_SEEN : 0;\n   bool ret = false, shared;\n \n-  if (decl == error_mark_node || TREE_TYPE (decl) == error_mark_node)\n+  if (error_operand_p (decl))\n     return false;\n \n   /* Threadprivate variables are predetermined.  */\n@@ -5830,7 +5830,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \n \tdo_add:\n \t  decl = OMP_CLAUSE_DECL (c);\n-\t  if (decl == error_mark_node || TREE_TYPE (decl) == error_mark_node)\n+\t  if (error_operand_p (decl))\n \t    {\n \t      remove = true;\n \t      break;\n@@ -5889,7 +5889,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \tcase OMP_CLAUSE_COPYIN:\n \tcase OMP_CLAUSE_COPYPRIVATE:\n \t  decl = OMP_CLAUSE_DECL (c);\n-\t  if (decl == error_mark_node || TREE_TYPE (decl) == error_mark_node)\n+\t  if (error_operand_p (decl))\n \t    {\n \t      remove = true;\n \t      break;"}, {"sha": "30c77d8b8efe9988b6dcc4acb985964dcdc136ff", "filename": "gcc/tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b504a91833ea26e7469077975b098e3c42551d4e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b504a91833ea26e7469077975b098e3c42551d4e", "patch": "@@ -4053,6 +4053,12 @@ enum ptrmemfunc_vbit_where_t\n \f\n #define NULL_TREE (tree) NULL\n \n+/* True if NODE is an erroneous expression.  */\n+\n+#define error_operand_p(NODE)\t\t\t\t\t\\\n+  ((NODE) == error_mark_node\t\t\t\t\t\\\n+   || ((NODE) && TREE_TYPE ((NODE)) == error_mark_node))\n+\n extern tree decl_assembler_name (tree);\n extern bool decl_assembler_name_equal (tree decl, const_tree asmname);\n extern hashval_t decl_assembler_name_hash (const_tree asmname);"}]}