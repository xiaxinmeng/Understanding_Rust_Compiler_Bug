{"sha": "0c018b6fad1152159e90d0664f808503083eaa2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMwMThiNmZhZDExNTIxNTllOTBkMDY2NGY4MDg1MDMwODNlYWEyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-05-22T22:28:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-05-22T22:28:24Z"}, "message": "re PR c++/61088 (segfault with array of lambdas initialized with initializer list that contains a lambda that captures the array)\n\n/cp\n2014-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/61088\n\t* lambda.c (add_capture): Enforce that capture by value requires\n\tcomplete type.\n\t* typeck2.c (cxx_incomplete_type_inform): Early return if\n\tTYPE_MAIN_DECL is null.\n\n/testsuite\n2014-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/61088\n\t* g++.dg/cpp0x/lambda/lambda-ice13.C: New.\n\t* g++.dg/cpp0x/lambda/lambda-ice7.C: Adjust.\n\nFrom-SVN: r210829", "tree": {"sha": "482d94f82159646fb44fea3724778df67a2b8f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/482d94f82159646fb44fea3724778df67a2b8f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c018b6fad1152159e90d0664f808503083eaa2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c018b6fad1152159e90d0664f808503083eaa2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c018b6fad1152159e90d0664f808503083eaa2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c018b6fad1152159e90d0664f808503083eaa2f/comments", "author": null, "committer": null, "parents": [{"sha": "aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa87aced5ba964ce66bb2b6ea135dae8d5879e58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa87aced5ba964ce66bb2b6ea135dae8d5879e58"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "a594e9393f3dc3ad6051bfcc89243999978c3add", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c018b6fad1152159e90d0664f808503083eaa2f", "patch": "@@ -1,3 +1,11 @@\n+2014-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/61088\n+\t* lambda.c (add_capture): Enforce that capture by value requires\n+\tcomplete type.\n+\t* typeck2.c (cxx_incomplete_type_inform): Early return if\n+\tTYPE_MAIN_DECL is null.\n+\n 2014-05-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c/61271"}, {"sha": "e72682c9487c5fadc8f92dfe14bf08b621cc6666", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=0c018b6fad1152159e90d0664f808503083eaa2f", "patch": "@@ -453,6 +453,9 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n     initializer = build_x_compound_expr_from_list (initializer, ELK_INIT,\n \t\t\t\t\t\t   tf_warning_or_error);\n   type = TREE_TYPE (initializer);\n+  if (type == error_mark_node)\n+    return error_mark_node;\n+\n   if (array_of_runtime_bound_p (type))\n     {\n       vla = true;\n@@ -489,8 +492,16 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n \t    error (\"cannot capture %qE by reference\", initializer);\n \t}\n       else\n-\t/* Capture by copy requires a complete type.  */\n-\ttype = complete_type (type);\n+\t{\n+\t  /* Capture by copy requires a complete type.  */\n+\t  type = complete_type (type);\n+\t  if (!dependent_type_p (type) && !COMPLETE_TYPE_P (type))\n+\t    {\n+\t      error (\"capture by copy of incomplete type %qT\", type);\n+\t      cxx_incomplete_type_inform (type);\n+\t      return error_mark_node;\n+\t    }\n+\t}\n     }\n \n   /* Add __ to the beginning of the field name so that user code"}, {"sha": "18bc25f766da65cd769c1618d1346d51890514dd", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=0c018b6fad1152159e90d0664f808503083eaa2f", "patch": "@@ -434,6 +434,9 @@ abstract_virtuals_error (abstract_class_use use, tree type)\n void\n cxx_incomplete_type_inform (const_tree type)\n {\n+  if (!TYPE_MAIN_DECL (type))\n+    return;\n+\n   location_t loc = DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (type));\n   tree ptype = strip_top_quals (CONST_CAST_TREE (type));\n "}, {"sha": "a799992e502aa7210d4a0a18757d1af78bc331c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c018b6fad1152159e90d0664f808503083eaa2f", "patch": "@@ -1,3 +1,9 @@\n+2014-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/61088\n+\t* g++.dg/cpp0x/lambda/lambda-ice13.C: New.\n+\t* g++.dg/cpp0x/lambda/lambda-ice7.C: Adjust.\n+\n 2014-05-22  Xinliang David Li  <davidxl@google.com>\n \n \t* g++.dg/ipa/devirt-15.C: Fix expected message."}, {"sha": "4c611ad8ee1e47f5a8c70f633df63a193a5b5501", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice13.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice13.C?ref=0c018b6fad1152159e90d0664f808503083eaa2f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/61088\n+// { dg-do compile { target c++11 } }\n+\n+void f()\n+{\n+  typedef void (*X) ();\n+  X x[] = { [x](){} };  // { dg-error \"incomplete type\" }\n+}\n+\n+void g()\n+{\n+  typedef void (X) ();\n+  X x[] = { [x](){} };  // { dg-error \"array of functions|not declared\" }\n+}"}, {"sha": "6f8272aeb605b9b209a52c3a231a3527f02a0b1e", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-ice7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c018b6fad1152159e90d0664f808503083eaa2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-ice7.C?ref=0c018b6fad1152159e90d0664f808503083eaa2f", "patch": "@@ -5,5 +5,5 @@ struct A;         // { dg-message \"forward declaration\" }\n \n void foo(A& a)\n {\n-  [=](){a;};      // { dg-error \"invalid use of incomplete type\" }\n+  [=](){a;};      // { dg-error \"incomplete type\" }\n }"}]}