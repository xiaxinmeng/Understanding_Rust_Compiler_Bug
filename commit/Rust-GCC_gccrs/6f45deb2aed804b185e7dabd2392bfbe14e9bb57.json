{"sha": "6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "node_id": "C_kwDOANBUbNoAKDZmNDVkZWIyYWVkODA0YjE4NWU3ZGFiZDIzOTJiZmJlMTRlOWJiNTc", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-01-21T04:48:03Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2022-01-21T04:48:03Z"}, "message": "[committed] Fix expected output for various MIPS multiplication tests\n\nThe recent multiply-highpart work twiddled code generation on the MIPS targets\nand is causing mips.exp failures.\n\nThe resultant code is actually better and matches a comment in the test files\nwhich indicates that it would be better to generate a mult-highpart.  So I'm\npretty confident in removing the undesired mflo & changing the name of the\ntarget pattern we expect to see.\n\nThis fixes the mips64 and mips64el failures in my tester.  I suspect it'll\nalso fix the failures on mipsisa32, but that target is bootstrapped with qemu --\nwhich takes forever so it only runs once a week ;-)\n\ngcc/testsuite\n\t* gcc.target/mips/fix-r4000-2.c: Update expected output.\n\t* gcc.target/mips/fix-r4000-3.c: Update expected output.  Add\n\t-fexpensive-optimizations for consistency in output.\n\t* gcc.target/mips/fix-r4000-7.c: Update expected output.\n\t* gcc.target/mips/fix-r4000-8.c: Update expected output.", "tree": {"sha": "5713bd14dc6a241a2651f44a4e000a887973a07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5713bd14dc6a241a2651f44a4e000a887973a07a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39cd3cce52523bc807ff001a2c1290d28ef6f24e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39cd3cce52523bc807ff001a2c1290d28ef6f24e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39cd3cce52523bc807ff001a2c1290d28ef6f24e"}], "stats": {"total": 20, "additions": 6, "deletions": 14}, "files": [{"sha": "e0e65d60f42b38a963739dc301855247d9bc823e", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-2.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-2.c?ref=6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "patch": "@@ -4,6 +4,4 @@\n typedef int int32_t;\n typedef long long int64_t;\n NOMIPS16 int32_t foo (int32_t x, int32_t y) { return ((int64_t) x * y) >> 32; }\n-/* ??? A highpart pattern would be a better choice, but we currently\n-   don't use them.  */\n-/* { dg-final { scan-assembler \"[concat {\\tmult\\t\\$[45],\\$[45][^\\n]+mulsidi3_32bit_r4000\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */\n+/* { dg-final { scan-assembler \"[concat {\\tmult\\t\\$[45],\\$[45][^\\n]+smulsi3_highpart_internal\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "ec9d655dcfca643ac7ada330b00300f41deb6e45", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-3.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-3.c?ref=6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "patch": "@@ -1,8 +1,6 @@\n-/* { dg-options \"-mips1 -mfix-r4000 -dp -EB\" } */\n+/* { dg-options \"-mips1 -mfix-r4000 -dp -EB -fexpensive-optimizations\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n typedef unsigned int uint32_t;\n typedef unsigned long long uint64_t;\n NOMIPS16 uint32_t foo (uint32_t x, uint32_t y) { return ((uint64_t) x * y) >> 32; }\n-/* ??? A highpart pattern would be a better choice, but we currently\n-   don't use them.  */\n-/* { dg-final { scan-assembler \"[concat {\\tmultu\\t\\$[45],\\$[45][^\\n]+umulsidi3_32bit_r4000\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */\n+/* { dg-final { scan-assembler \"[concat {\\tmultu\\t\\$[45],\\$[45][^\\n]+umulsi3_highpart_internal\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "9b1057774e93578fd8292af34139f2086b54439a", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-7.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-7.c?ref=6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "patch": "@@ -4,6 +4,4 @@\n typedef long long int64_t;\n typedef int int128_t __attribute__((mode(TI)));\n NOMIPS16 int64_t foo (int64_t x, int64_t y) { return ((int128_t) x * y) >> 64; }\n-/* ??? A highpart pattern would be a better choice, but we currently\n-   don't use them.  */\n-/* { dg-final { scan-assembler \"[concat {\\tdmult\\t\\$[45],\\$[45][^\\n]+mulditi3_r4000\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */\n+/* { dg-final { scan-assembler \"[concat {\\tdmult\\t\\$[45],\\$[45][^\\n]+smuldi3_highpart_internal\\n\\tmfhi\\t\\$2\\n}]\" } } */"}, {"sha": "1ce35df301430e8f3e4f6f60be2976e9630928f6", "filename": "gcc/testsuite/gcc.target/mips/fix-r4000-8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f45deb2aed804b185e7dabd2392bfbe14e9bb57/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Ffix-r4000-8.c?ref=6f45deb2aed804b185e7dabd2392bfbe14e9bb57", "patch": "@@ -1,8 +1,6 @@\n-/* { dg-options \"-march=r4000 -mfix-r4000 -mgp64 -dp -EB\" } */\n+/* { dg-options \"-march=r4000 -mfix-r4000 -mgp64 -dp -EB -fexpensive-optimizations\" } */\n /* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" } { \"\" } } */\n typedef unsigned long long uint64_t;\n typedef unsigned int uint128_t __attribute__((mode(TI)));\n NOMIPS16 uint64_t foo (uint64_t x, uint64_t y) { return ((uint128_t) x * y) >> 64; }\n-/* ??? A highpart pattern would be a better choice, but we currently\n-   don't use them.  */\n-/* { dg-final { scan-assembler \"[concat {\\tdmultu\\t\\$[45],\\$[45][^\\n]+umulditi3_r4000\\n\\tmflo\\t\\$3\\n\\tmfhi\\t\\$2\\n}]\" } } */\n+/* { dg-final { scan-assembler \"[concat {\\tdmultu\\t\\$[45],\\$[45][^\\n]+umuldi3_highpart_internal\\n\\tmfhi\\t\\$2\\n}]\" } } */"}]}