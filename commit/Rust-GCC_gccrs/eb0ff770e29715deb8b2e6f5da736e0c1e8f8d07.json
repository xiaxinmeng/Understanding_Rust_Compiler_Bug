{"sha": "eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwZmY3NzBlMjk3MTVkZWI4YjJlNmY1ZGE3MzZlMGMxZThmOGQwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-24T10:45:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-24T11:35:59Z"}, "message": "libstdc++: Fix std::from_chars to ignore leading zeros in base 2\n\nThe parser for binary numbers returned an error if the entire string\ncontains more digits than the result type. Leading zeros should be\nignored.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/charconv (__from_chars_binary): Ignore leading zeros.\n\t* testsuite/20_util/from_chars/1.cc: Check \"0x1\" for all bases,\n\tnot just 10 and 16.\n\t* testsuite/20_util/from_chars/3.cc: New test.", "tree": {"sha": "9edf841f5567c4c6d06e117b009f5d2c4f1c148a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9edf841f5567c4c6d06e117b009f5d2c4f1c148a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25920dd18ad12ea501309b1487366e22f35db631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25920dd18ad12ea501309b1487366e22f35db631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25920dd18ad12ea501309b1487366e22f35db631"}], "stats": {"total": 106, "additions": 99, "deletions": 7}, "files": [{"sha": "b725e5d2afd4ba5741b8e83ee328400e544e7e48", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "patch": "@@ -417,7 +417,11 @@ namespace __detail\n       static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n \n       const ptrdiff_t __len = __last - __first;\n-      int __i = 0;\n+      ptrdiff_t __i = 0;\n+      while (__i < __len && __first[__i] == '0')\n+\t++__i;\n+      const ptrdiff_t __leading_zeroes = __i;\n+\n       while (__i < __len)\n \t{\n \t  const unsigned char __c = (unsigned)__first[__i] - '0';\n@@ -428,7 +432,7 @@ namespace __detail\n \t  __i++;\n \t}\n       __first += __i;\n-      return __i <= __detail::__int_limits<_Tp>::digits;\n+      return (__i - __leading_zeroes) <= __detail::__int_limits<_Tp>::digits;\n     }\n \n   /// std::from_chars implementation for integers in bases 3 to 10."}, {"sha": "ad5d50e67b3984d0d4abe82e2461c296848da2b4", "filename": "libstdc++-v3/testsuite/20_util/from_chars/1.cc", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F1.cc?ref=eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "patch": "@@ -31,7 +31,8 @@ check_from_chars(I expected, std::string s, int base = 0, char term = '\\0')\n   std::from_chars_result r = base == 0\n     ? std::from_chars(begin, end, val)\n     : std::from_chars(begin, end, val, base);\n-  return r.ec == std::errc{} && (r.ptr == end || *r.ptr == term) && val == expected;\n+  return r.ec == std::errc{} && (r.ptr == end || *r.ptr == term)\n+    && val == expected;\n }\n \n #include <climits>\n@@ -52,10 +53,18 @@ void\n test02()\n {\n   // \"0x\" parsed as \"0\" not as hex prefix:\n-  VERIFY( check_from_chars(0, \"0x1\", 10, 'x') );\n-  VERIFY( check_from_chars(0, \"0X1\", 10, 'X') );\n-  VERIFY( check_from_chars(0, \"0x1\", 16, 'x') );\n-  VERIFY( check_from_chars(0, \"0X1\", 16, 'X') );\n+  for (int base = 2; base < 34; ++base)\n+  {\n+    VERIFY( check_from_chars(0, \"0x1\", base, 'x') );\n+    VERIFY( check_from_chars(0, \"0X1\", base, 'X') );\n+  }\n+\n+  VERIFY( check_from_chars(1123, \"0x1\", 34) );\n+  VERIFY( check_from_chars(1123, \"0X1\", 34) );\n+  VERIFY( check_from_chars(1156, \"0x1\", 35) );\n+  VERIFY( check_from_chars(1156, \"0X1\", 35) );\n+  VERIFY( check_from_chars(1189, \"0x1\", 36) );\n+  VERIFY( check_from_chars(1189, \"0X1\", 36) );\n \n   VERIFY( check_from_chars(1155, \"xx\", 34) );\n   VERIFY( check_from_chars(1155, \"XX\", 34) );"}, {"sha": "9d4a77f5c31e5a1ef5869b69d85ff0b83d842454", "filename": "libstdc++-v3/testsuite/20_util/from_chars/3.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2F3.cc?ref=eb0ff770e29715deb8b2e6f5da736e0c1e8f8d07", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <charconv>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+long long\n+read(const char* first, const char* last, int base)\n+{\n+  long long val = 0;\n+  long long place = 1;\n+  while (last > first)\n+  {\n+    val += (*--last - '0') * place;\n+    place *= base;\n+  }\n+  return val;\n+}\n+\n+void\n+test01()\n+{\n+  std::from_chars_result res;\n+  long long val;\n+  for (auto s : { \"10001\", \"10010\", \"10011\", \"10101\", \"10110\", \"10111\",\n+\t\t  \"11001\", \"11010\", \"11011\", \"11101\", \"11110\", \"11111\" })\n+  {\n+    std::string ss[2] = { s, std::string(64, '0') + s };\n+    for (const auto& str : ss)\n+    {\n+      const char* first = str.data();\n+      for (int base = 2; base < 37; ++base)\n+      {\n+\tconst char* last = str.data() + str.length();\n+\tfor (size_t n = 0; n < ss[0].length(); ++n)\n+\t{\n+#ifdef DEBUG\n+\t  printf(\"Parsing \\\"%.*s\\\" in base %d\\n\", int(last - first), first,\n+\t\t base);\n+#endif\n+\t  res = std::from_chars(first, last, val, base);\n+\t  VERIFY( res.ptr == last );\n+\t  VERIFY( res.ec == std::errc{} );\n+\t  VERIFY( val == read(first, last, base) );\n+\t  // Test again with shorter string to check from_chars doesn't read\n+\t  // the digits past the last pointer.\n+\t  --last;\n+\t}\n+      }\n+    }\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}