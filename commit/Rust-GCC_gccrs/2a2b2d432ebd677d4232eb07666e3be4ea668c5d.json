{"sha": "2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyYjJkNDMyZWJkNjc3ZDQyMzJlYjA3NjY2ZTNiZTRlYTY2OGM1ZA==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-06-10T13:48:04Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-06-10T13:48:04Z"}, "message": "Makefile.in (c-parse.o): Depend on diagnostic.h\n\ngcc/\n\n2001-06-10  Mark Mitchell <mark@codesourcery.com>\n\t    Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* Makefile.in (c-parse.o): Depend on diagnostic.h\n\t(dwarf2out.o): Likewise.\n\n\t* dwarf2out.c: #include diagnostic.h\n\n\t* toplev.h (warningcount, errorcount, sorrycount): Remove\n\tdeclarations.\n\n\t* toplev.c (warningcount, errorcount, sorrycount): Remove\n\tdefinitions.\n\n\t* diagnostic.h (struct output_buffer): Reorder fields.\n\t(diagnostic_kind_count): New macro.\n\t(errorcount, warningcount, sorrycount): Define as macros.\n\t(diagnostic_report_warnings_p): New macro.\n\t(output_state): Add diagnostic_count field.\n\n\t* diagnostic.c (warningcount, errorcount, inhibit_warnings):\n\tRemove tentative declaration.\n\t(count_error): Use diagnostic_report_warnings_p.\n\n\t* c-parse.in: #include diagnostic.h\n\nch/\n\n2001-06-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* decl.c: #include diagnostic.h\n\t* actions.c: #include diagnostic.h\n\t* Makefile.in (actions.o): Depend on diagnostic.h\n\t(decl.o): Depend on diagnostic.h\n\ncp/\n\n2001-06-10  Mark Mitchell <mark@codesourcery.com>\n\t    Gabriel Dos Reis  <gdr@codesourcery.com>\n\n\t* Make-lang.in (cp/call.o): Depend on diagnostic.h\n\t(cp/typeck.o): Depend on diagnostic.h\n\t(cp/typeck2.o): Depend on diagnostic.h\n\t(cp/repo.o): Depend on dignostic.h\n\t* typeck.c: #include diagnostic.h\n\t(convert_for_initialization): Remove extern declaration for\n\twarningcount and errorcount.\n\n\t* call.c: #include diagnostic.h\n\t(convert_like_real): Remove extern declaration for warnincount and\n\terrorcount.\n\n\t* repo.c: #include diagnostic.h\n\t* typeck2.c: #include diagnostic.h\n\nFrom-SVN: r43140", "tree": {"sha": "0beb92444cb25b52bba6afa1198fdb6b47f5f556", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0beb92444cb25b52bba6afa1198fdb6b47f5f556"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/comments", "author": null, "committer": null, "parents": [{"sha": "3f0ae30efc3ebc8978440ff2137de65e194db99f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f0ae30efc3ebc8978440ff2137de65e194db99f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f0ae30efc3ebc8978440ff2137de65e194db99f"}], "stats": {"total": 129, "additions": 102, "deletions": 27}, "files": [{"sha": "4efb3ba388bc083f3cd96604919f97efc5d1de9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -1,3 +1,29 @@\n+2001-06-10  Mark Mitchell <mark@codesourcery.com>\n+\t    Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* Makefile.in (c-parse.o): Depend on diagnostic.h\n+\t(dwarf2out.o): Likewise.\n+\n+\t* dwarf2out.c: #include diagnostic.h\n+\n+\t* toplev.h (warningcount, errorcount, sorrycount): Remove\n+\tdeclarations. \n+\n+\t* toplev.c (warningcount, errorcount, sorrycount): Remove\n+\tdefinitions. \n+\n+\t* diagnostic.h (struct output_buffer): Reorder fields.\n+\t(diagnostic_kind_count): New macro.\t\n+\t(errorcount, warningcount, sorrycount): Define as macros.\n+\t(diagnostic_report_warnings_p): New macro.\n+\t(output_state): Add diagnostic_count field.\n+\n+\t* diagnostic.c (warningcount, errorcount, inhibit_warnings):\n+\tRemove tentative declaration.\n+\t(count_error): Use diagnostic_report_warnings_p.\n+\n+\t* c-parse.in: #include diagnostic.h\n+\n 2001-06-10  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md (\"extendhisi2\"): Fix constraints to"}, {"sha": "a9af1e1cdf99ff6b83ea2c2bbd081ddb8854229a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -1133,7 +1133,8 @@ s-crt0:\t$(CRT0_S) $(MCRT0_S) $(GCC_PASSES) $(CONFIG_H)\n c-errors.o: c-errors.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) flags.h \\\n     diagnostic.h $(TM_P_H)\n c-parse.o : $(srcdir)/c-parse.c $(CONFIG_H) $(TREE_H) c-lex.h $(GGC_H) intl.h \\\n-    $(C_TREE_H) input.h flags.h $(SYSTEM_H) toplev.h output.h cpplib.h\n+    $(C_TREE_H) input.h flags.h $(SYSTEM_H) toplev.h output.h cpplib.h \\\n+    diagnostic.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -c $(srcdir)/c-parse.c\n \n $(srcdir)/c-parse.c: $(srcdir)/c-parse.y\n@@ -1386,7 +1387,7 @@ sdbout.o : sdbout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) flags.h except.h\n dwarfout.o : dwarfout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf.h \\\n    flags.h insn-config.h reload.h output.h toplev.h dwarfout.h $(TM_P_H)\n dwarf2out.o : dwarf2out.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) dwarf2.h \\\n-   flags.h insn-config.h reload.h output.h \\\n+   flags.h insn-config.h reload.h output.h diagnostic.h \\\n    hard-reg-set.h $(REGS_H) $(EXPR_H) toplev.h dwarf2out.h varray.h \\\n    $(GGC_H) except.h dwarf2asm.h $(TM_P_H)\n dwarf2asm.o : dwarf2asm.c $(CONFIG_H) $(SYSTEM_H) flags.h $(RTL_H) $(TREE_H) \\"}, {"sha": "45b04dab71addd2759a38433339d81f7b1b54ff2", "filename": "gcc/c-parse.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -51,6 +51,7 @@ end ifc\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"diagnostic.h\"  \n   \n #ifdef MULTIBYTE_CHARS\n #include <locale.h>"}, {"sha": "be600bd3da51a95ef1992f688e0aa7f49ce6387c", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -1,3 +1,10 @@\n+2001-06-10  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* decl.c: #include diagnostic.h\n+\t* actions.c: #include diagnostic.h\n+\t* Makefile.in (actions.o): Depend on diagnostic.h\n+\t(decl.o): Depend on diagnostic.h\n+\n 2001-06-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* chill.texi: Move contents to just after title page."}, {"sha": "deb26f3a9bd9be3a71cbe6c8507afbe18c1759b9", "filename": "gcc/ch/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMakefile.in?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -269,12 +269,12 @@ $(srcdir)/hash.h:\n \n actions.o : actions.c $(CONFIG_H) $(CHILL_TREE_H) actions.h $(RTL_H)\t\\\n \tlex.h $(srcdir)/../flags.h $(srcdir)/../input.h\t\t\t\\\n-\t$(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h\n+\t$(EXPR_H) $(srcdir)/../system.h $(srcdir)/../toplev.h diagnostic.h\n convert.o : convert.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\\n \t$(srcdir)/../tree.h $(srcdir)/../system.h $(srcdir)/../toplev.h \\\n \t$(srcdir)/../convert.h\n decl.o : decl.c $(CONFIG_H) $(CHILL_TREE_H) $(srcdir)/../flags.h lex.h \\\n-\t$(srcdir)/../system.h $(srcdir)/../toplev.h\n+\t$(srcdir)/../system.h $(srcdir)/../toplev.h diagnostic.h\n except.o : except.c $(CONFIG_H) $(srcdir)/../tree.h $(RTL_H) $(CHILL_TREE_H) \\\n \t$(srcdir)/../system.h $(srcdir)/../toplev.h\n expr.o : expr.c $(CONFIG_H) $(RTL_H) $(CHILL_TREE_H) $(srcdir)/../flags.h \\"}, {"sha": "a0e50d68a5f834804df5f73af323555137aceabf", "filename": "gcc/ch/actions.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2Factions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2Factions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Factions.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"assert.h\"\n #include \"toplev.h\"\n+#include \"diagnostic.h\"\n \n static int id_cmp PARAMS ((tree *, tree *));\n static void warn_unhandled PARAMS ((const char *));"}, {"sha": "a433fa7b79b7a9e885c05519fe7649144fdeb325", "filename": "gcc/ch/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fch%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fdecl.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -191,6 +191,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"input.h\"\n #include \"rtl.h\"\n #include \"toplev.h\"\n+#include \"diagnostic.h\"\n \n #define IS_UNKNOWN_TYPE(type) (TYPE_SIZE(type)==0)\n #define BUILTIN_NESTING_LEVEL (-1)"}, {"sha": "f4527206cb708b86637616ee8a92c595f1455a98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -1,3 +1,21 @@\n+2001-06-10  Mark Mitchell <mark@codesourcery.com>\n+\t    Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* Make-lang.in (cp/call.o): Depend on diagnostic.h\n+\t(cp/typeck.o): Depend on diagnostic.h\n+\t(cp/typeck2.o): Depend on diagnostic.h\n+\t(cp/repo.o): Depend on dignostic.h\t\n+\t* typeck.c: #include diagnostic.h\n+\t(convert_for_initialization): Remove extern declaration for\n+\twarningcount and errorcount.\n+\n+\t* call.c: #include diagnostic.h\n+\t(convert_like_real): Remove extern declaration for warnincount and\n+\terrorcount. \n+\n+\t* repo.c: #include diagnostic.h\n+\t* typeck2.c: #include diagnostic.h\n+\n 2001-06-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* decl.c (duplicate_decls): Fix DECL_TEMPLATE_RESULT thinko"}, {"sha": "9965c5e737e432f78bbf28563d9749874181dc7e", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -245,10 +245,13 @@ cp/decl.o: cp/decl.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h stack.h \\\n   cp/operators.def $(TM_P_H)\n cp/decl2.o: cp/decl2.c $(CXX_TREE_H) flags.h cp/lex.h cp/decl.h $(EXPR_H) \\\n   output.h except.h toplev.h dwarf2out.h dwarfout.h $(GGC_H) $(RTL_H)\n-cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) flags.h toplev.h output.h $(TM_P_H)\n-cp/typeck.o: cp/typeck.c $(CXX_TREE_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \n+cp/typeck2.o: cp/typeck2.c $(CXX_TREE_H) flags.h toplev.h output.h $(TM_P_H) \\\n+   diagnostic.h\n+cp/typeck.o: cp/typeck.c $(CXX_TREE_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n+   diagnostic.h\n cp/class.o: cp/class.c $(CXX_TREE_H) flags.h toplev.h $(RTL_H)\n-cp/call.o: cp/call.c $(CXX_TREE_H) flags.h toplev.h $(RTL_H) $(EXPR_H) $(GGC_H)\n+cp/call.o: cp/call.c $(CXX_TREE_H) flags.h toplev.h $(RTL_H) $(EXPR_H) \\\n+     $(GGC_H) diagnostic.h\n cp/friend.o: cp/friend.c $(CXX_TREE_H) flags.h $(RTL_H) toplev.h $(EXPR_H)\n cp/init.o: cp/init.c $(CXX_TREE_H) flags.h $(RTL_H) $(EXPR_H) toplev.h \\\n   $(GGC_H) except.h\n@@ -269,7 +272,7 @@ cp/pt.o: cp/pt.c $(CXX_TREE_H) cp/decl.h cp/parse.h cp/lex.h toplev.h \\\n   $(GGC_H) $(RTL_H) except.h\n cp/error.o: cp/error.c $(CXX_TREE_H) toplev.h diagnostic.h\n cp/errfn.o: cp/errfn.c $(CXX_TREE_H) toplev.h\n-cp/repo.o: cp/repo.c $(CXX_TREE_H) toplev.h $(GGC_H)\n+cp/repo.o: cp/repo.c $(CXX_TREE_H) toplev.h $(GGC_H) diagnostic.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) cp/lex.h except.h toplev.h \\\n   flags.h $(GGC_H) output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H)\n cp/dump.o: cp/dump.c $(CXX_TREE_H) c-dump.h"}, {"sha": "e7b6bbd824b4f5f0c6a30b3c4b79b4e17bc58972", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -34,6 +34,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"expr.h\"\n #include \"ggc.h\"\n+#include \"diagnostic.h\"\n \n extern int inhibit_warnings;\n \n@@ -3716,7 +3717,6 @@ convert_like_real (convs, expr, fn, argnum, inner)\n      int argnum;\n      int inner;\n {\n-  extern int warningcount, errorcount;\n   int savew, savee;\n \n   tree totype = TREE_TYPE (convs);"}, {"sha": "74c5ee86b128dc15e47cfe09a076e853550fc3e5", "filename": "gcc/cp/repo.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Frepo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Frepo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frepo.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"diagnostic.h\"\n \n static tree repo_get_id PARAMS ((tree));\n static char *extract_string PARAMS ((char **));"}, {"sha": "3c2ea8d9666846ff5dc3e24d2f4c6399e27820a7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -40,6 +40,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n+#include \"diagnostic.h\"\n \n static tree convert_for_assignment PARAMS ((tree, tree, const char *, tree,\n \t\t\t\t\t  int));\n@@ -6431,7 +6432,6 @@ convert_for_initialization (exp, type, rhs, flags, errtype, fndecl, parmnum)\n   if (codel == REFERENCE_TYPE)\n     {\n       /* This should eventually happen in convert_arguments.  */\n-      extern int warningcount, errorcount;\n       int savew = 0, savee = 0;\n \n       if (fndecl)"}, {"sha": "09621d4cb5721e259e351d84bd533a2870456e1d", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -38,6 +38,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n+#include \"diagnostic.h\"\n \n static tree process_init_constructor PARAMS ((tree, tree, tree *));\n "}, {"sha": "bb75846c99b1fa8cabb55716f4557dad8c3a0bba", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -103,10 +103,7 @@ static void default_diagnostic_finalizer PARAMS ((output_buffer *,\n static void error_recursion PARAMS ((void)) ATTRIBUTE_NORETURN;\n \n extern int rtl_dump_and_exit;\n-extern int inhibit_warnings;\n extern int warnings_are_errors;\n-extern int warningcount;\n-extern int errorcount;\n \n /* Front-end specific tree formatter, if non-NULL.  */\n printer_fn lang_printer = NULL;\n@@ -1049,9 +1046,7 @@ int\n count_error (warningp)\n      int warningp;\n {\n-  if (warningp\n-      && (inhibit_warnings\n-          || (in_system_header && !warn_system_headers)))\n+  if (warningp && !diagnostic_report_warnings_p ())\n     return 0;\n \n   if (warningp && !warnings_are_errors)"}, {"sha": "02029ea59c7e0054a5eff807acf8202c3457473f", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -55,9 +55,11 @@ typedef struct\n {\n   /* The prefix for each new line.   */\n   const char *prefix;\n+\n   /* The real upper bound of number of characters per line, taking into\n      account the case of a very very looong prefix.  */  \n   int maximum_length;\n+\n   /* The ideal upper bound of number of characters per line, as suggested\n      by front-end. */  \n   int ideal_maximum_length;\n@@ -77,11 +79,16 @@ typedef struct\n      o DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE: emit current PREFIX each time\n        a physical line is started.  */\n   int prefixing_rule;\n+\n   /* The current char to output.  Updated by front-end (*format_map) when\n      it is called to report front-end printer for a specified format.  */  \n   const char *cursor;\n+\n   /* A pointer to the variable argument-list for formatting.  */  \n   va_list *format_args;\n+\n+  /* The number of times we have issued diagnostics.  */\n+  int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];\n } output_state;\n \n /* The output buffer datatype.  This is best seen as an abstract datatype.  */\n@@ -90,16 +97,20 @@ struct output_buffer\n   /* Internal data.  These fields should not be accessed directly by\n      front-ends.  */\n \n+  /* The current state of the buffer.  */\n+  output_state state;\n+\n   /* Where to output formatted text.  */\n   FILE* stream;\n+\n   /* The obstack where the text is built up.  */  \n   struct obstack obstack;\n+\n   /* The amount of characters output so far.  */  \n   int line_length;\n-  /* The current state of the buffer.  */\n-  output_state state;\n };\n \n+#define output_buffer_state(BUFFER) (BUFFER)->state\n #define output_buffer_attached_stream(BUFFER) (BUFFER)->stream\n #define output_buffer_text_cursor(BUFFER) (BUFFER)->state.cursor\n #define output_buffer_format_args(BUFFER) *((BUFFER)->state.format_args)\n@@ -178,6 +189,23 @@ extern int diagnostic_message_length_per_line;\n    has been removed.  */\n extern output_buffer *diagnostic_buffer;\n \n+#define diagnostic_kind_count(BUFFER, DK) \\\n+   (BUFFER)->state.diagnostic_count[(int) DK]\n+\n+/* The number of errors that have been issued so far.  Ideally, these\n+   would take an output_buffer as an argument.  */\n+#define errorcount diagnostic_kind_count (diagnostic_buffer, DK_ERROR)\n+/* Similarly, but for warnings.  */\n+#define warningcount diagnostic_kind_count (diagnostic_buffer, DK_WARNING)\n+/* Similarly, but for sorrys.  */\n+#define sorrycount diagnostic_kind_count (diagnostic_buffer, DK_SORRY)\n+\n+/* Returns non-zero if warnings should be emitted.  */\n+#define diagnostic_report_warnings_p()\t\t\t\\\n+  (!inhibit_warnings\t\t\t\t\t\\\n+   && !(in_system_header && !warn_system_headers))\n+\n+\n /* Prototypes */\n extern void set_diagnostic_context\tPARAMS ((diagnostic_context *,\n \t\t\t\t\t\t const char *, va_list *,"}, {"sha": "5257b9146198c6f0e19a43393d08a3c7c75ccc8b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -56,6 +56,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"md5.h\"\n #include \"tm_p.h\"\n+#include \"diagnostic.h\"\n \n /* DWARF2 Abbreviation Glossary:\n    CFA = Canonical Frame Address"}, {"sha": "16a1de5f45ca7e2d2047f66e594caf058a55ddb6", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -379,12 +379,6 @@ int optimize = 0;\n \n int optimize_size = 0;\n \n-/* Number of error messages and warning messages so far.  */\n-\n-int errorcount = 0;\n-int warningcount = 0;\n-int sorrycount = 0;\n-\n /* Nonzero if we should exit after parsing options.  */\n static int exit_after_options = 0;\n "}, {"sha": "ca09e0ef2e87aab811337ead110676fc1c4ffc7b", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2b2d432ebd677d4232eb07666e3be4ea668c5d/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=2a2b2d432ebd677d4232eb07666e3be4ea668c5d", "patch": "@@ -132,9 +132,6 @@ extern void note_deferral_of_defined_inline_function\n \t\t\t\t\tPARAMS ((union tree_node *));\n extern void note_outlining_of_inline_function\n \t\t\t\t\tPARAMS ((union tree_node *));\n-extern int errorcount;\n-extern int warningcount;\n-extern int sorrycount;\n \n extern const char *progname;\n extern const char *dump_base_name;"}]}