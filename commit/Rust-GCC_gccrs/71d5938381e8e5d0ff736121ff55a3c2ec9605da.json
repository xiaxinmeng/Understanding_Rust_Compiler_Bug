{"sha": "71d5938381e8e5d0ff736121ff55a3c2ec9605da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFkNTkzODM4MWU4ZTVkMGZmNzM2MTIxZmY1NWEzYzJlYzk2MDVkYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-02-08T23:57:21Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-02-08T23:57:21Z"}, "message": "tree.def (CHAR_TYPE): Remove.\n\n\n\t* tree.def (CHAR_TYPE): Remove.\n\t* dbxout.c (dbxout_type): Delete dead handling of CHAR_TYPE.\n\t* dwarf2out.c (base_type_die, is_base_type): Likewise.\n\t(gen_type_die) <ARRAY_TYPE>: Remove handling of CHAR_TYPE arrays.\n\t(gen_string_type_die): Delete unreachable function.\n\n\t* tree-pretty-print.c (dump_generic_node): Don't handle CHAR_TYPE.\n\t* tree.c (build_int_cst_wide, type_contains_placeholder_1,\n\ttype_hash_eq, variably_modified_type_p, walk_type_fields): Likewise.\n\t* tree.h (NUMERICAL_TYPE_CHECK, INTEGRAL_TYPE_P): Likewise.\n\t* builtins.c (type_to_class): Likewise.\n\t* fold-const.c (fold_convert, build_range_check,\n\tmerge_ranges): Likewise.\n\t* expr.c (count_type_elements): Likewise.\n\t* c-pretty-print.c (pp_c_type_specifier): Likewise.\n\t* stor-layout.c (layout_type): Likewise.\n\t* ipa-type-escape.c (type_to_consider): Likewise.\n\t* gimplify.c (omp_firstprivatize_type_sizes,\n\tgimplify_type_sizes): Likewise.\n\t* explow.c (promote_mode): Likewise.\n\t* tree-sra.c (is_sra_scalar_type): Likewise.\n\t* varasm.c (output_constant): Likewise.\n\t* tree-inline.c (remap_type_1): Likewise.\n\t* convert.c (convert_to_pointer, convert_to_real,\n\tconvert_to_integer, convert_to_complex): Likewise.\n\nFrom-SVN: r110775", "tree": {"sha": "6521631fb7c31b9b19c0acb2b2cb077de5d84613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6521631fb7c31b9b19c0acb2b2cb077de5d84613"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71d5938381e8e5d0ff736121ff55a3c2ec9605da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d5938381e8e5d0ff736121ff55a3c2ec9605da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71d5938381e8e5d0ff736121ff55a3c2ec9605da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71d5938381e8e5d0ff736121ff55a3c2ec9605da/comments", "author": null, "committer": null, "parents": [{"sha": "62b6fce6c778ac904aa9ce08e7cd89539ca31914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62b6fce6c778ac904aa9ce08e7cd89539ca31914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62b6fce6c778ac904aa9ce08e7cd89539ca31914"}], "stats": {"total": 157, "additions": 58, "deletions": 99}, "files": [{"sha": "232da90df2e01de20887a65d83c7dc965ea82edc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,3 +1,31 @@\n+2006-02-08  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.def (CHAR_TYPE): Remove.\n+\t* dbxout.c (dbxout_type): Delete dead handling of CHAR_TYPE.\n+\t* dwarf2out.c (base_type_die, is_base_type): Likewise.\n+\t(gen_type_die) <ARRAY_TYPE>: Remove handling of CHAR_TYPE arrays.\n+\t(gen_string_type_die): Delete unreachable function.\n+\n+\t* tree-pretty-print.c (dump_generic_node): Don't handle CHAR_TYPE.\n+\t* tree.c (build_int_cst_wide, type_contains_placeholder_1,\n+\ttype_hash_eq, variably_modified_type_p, walk_type_fields): Likewise.\n+\t* tree.h (NUMERICAL_TYPE_CHECK, INTEGRAL_TYPE_P): Likewise.\n+\t* builtins.c (type_to_class): Likewise.\n+\t* fold-const.c (fold_convert, build_range_check,\n+\tmerge_ranges): Likewise.\n+\t* expr.c (count_type_elements): Likewise.\n+\t* c-pretty-print.c (pp_c_type_specifier): Likewise.\n+\t* stor-layout.c (layout_type): Likewise.\n+\t* ipa-type-escape.c (type_to_consider): Likewise.\n+\t* gimplify.c (omp_firstprivatize_type_sizes,\n+\tgimplify_type_sizes): Likewise.\n+\t* explow.c (promote_mode): Likewise.\n+\t* tree-sra.c (is_sra_scalar_type): Likewise.\n+\t* varasm.c (output_constant): Likewise.\n+\t* tree-inline.c (remap_type_1): Likewise.\n+\t* convert.c (convert_to_pointer, convert_to_real,\n+\tconvert_to_integer, convert_to_complex): Likewise.\n+\n 2006-02-08  Daniel Berlin  <dberlin@dberlin.org>\n \n \t* df-scan.c (df_def_record_1): A set destination may"}, {"sha": "e0cf55ec732510efca6d561e7d207727297c88ff", "filename": "gcc/builtins.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1585,7 +1585,6 @@ type_to_class (tree type)\n     {\n     case VOID_TYPE:\t   return void_type_class;\n     case INTEGER_TYPE:\t   return integer_type_class;\n-    case CHAR_TYPE:\t   return char_type_class;\n     case ENUMERAL_TYPE:\t   return enumeral_type_class;\n     case BOOLEAN_TYPE:\t   return boolean_type_class;\n     case POINTER_TYPE:\t   return pointer_type_class;"}, {"sha": "67015675234f5336c1fe49569679515c4465486d", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines common to both C and C++ pretty-printers.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n This file is part of GCC.\n@@ -311,7 +311,6 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n \n     case VOID_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case INTEGER_TYPE:\n     case REAL_TYPE:\n       if (TYPE_NAME (t))"}, {"sha": "ba5f6fd7e73b9172eeeeef6ba173a25bba1ea45d", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,6 @@\n /* Utility routines for data type conversion for GCC.\n    Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1997, 1998,\n-   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -53,7 +53,6 @@ convert_to_pointer (tree type, tree expr)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       if (TYPE_PRECISION (TREE_TYPE (expr)) != POINTER_SIZE)\n \texpr = fold_build1 (NOP_EXPR,\n                             lang_hooks.types.type_for_size (POINTER_SIZE, 0),\n@@ -313,7 +312,6 @@ convert_to_real (tree type, tree expr)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       return build1 (FLOAT_EXPR, type, expr);\n \n     case COMPLEX_TYPE:\n@@ -447,7 +445,6 @@ convert_to_integer (tree type, tree expr)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       /* If this is a logical operation, which just returns 0 or 1, we can\n \t change the type of the expression.  */\n \n@@ -729,7 +726,6 @@ convert_to_complex (tree type, tree expr)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       return build2 (COMPLEX_EXPR, type, convert (subtype, expr),\n \t\t     convert (subtype, integer_zero_node));\n "}, {"sha": "f936ac678add205f86deeb6bcdb3cb8a2839abeb", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,7 @@\n /* Output dbx-format symbol table information from GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1911,23 +1912,6 @@ dbxout_type (tree type, int full)\n       stabstr_S (\";0;\");\n       break;\n \n-    case CHAR_TYPE:\n-      if (use_gnu_debug_info_extensions)\n-\t{\n-\t  stabstr_S (\"@s\");\n-\t  stabstr_D (BITS_PER_UNIT * int_size_in_bytes (type));\n-\t  stabstr_S (\";-20;\");\n-\t}\n-      else\n-\t{\n-\t  /* Output the type `char' as a subrange of itself.\n-\t     That is what pcc seems to do.  */\n-\t  stabstr_C ('r');\n-\t  dbxout_type_index (char_type_node);\n-\t  stabstr_S (TYPE_UNSIGNED (type) ? \";0;255;\" : \";0;127;\");\n-\t}\n-      break;\n-\n     case BOOLEAN_TYPE:\n       if (use_gnu_debug_info_extensions)\n \t{"}, {"sha": "fc82d1a596529098c4f18b7683752a99c5ad4e06", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -4146,7 +4146,6 @@ static void gen_inlined_subroutine_die (tree, dw_die_ref, int);\n static void gen_field_die (tree, dw_die_ref);\n static void gen_ptr_to_mbr_type_die (tree, dw_die_ref);\n static dw_die_ref gen_compile_unit_die (const char *);\n-static void gen_string_type_die (tree, dw_die_ref);\n static void gen_inheritance_die (tree, tree, dw_die_ref);\n static void gen_member_die (tree, dw_die_ref);\n static void gen_struct_or_union_type_die (tree, dw_die_ref);\n@@ -8105,7 +8104,6 @@ base_type_die (tree type)\n \n   switch (TREE_CODE (type))\n     {\n-    case CHAR_TYPE:\n     case INTEGER_TYPE:\n       if (TYPE_STRING_FLAG (type))\n \t{\n@@ -8201,7 +8199,6 @@ is_base_type (tree type)\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       return 1;\n \n     case ARRAY_TYPE:\n@@ -12187,24 +12184,6 @@ gen_compile_unit_die (const char *filename)\n   return die;\n }\n \n-/* Generate a DIE for a string type.  */\n-\n-static void\n-gen_string_type_die (tree type, dw_die_ref context_die)\n-{\n-  dw_die_ref type_die\n-    = new_die (DW_TAG_string_type, scope_die_for (type, context_die), type);\n-\n-  equate_type_number_to_die (type, type_die);\n-\n-  /* ??? Fudge the string length attribute for now.\n-     TODO: add string length info.  */\n-#if 0\n-  string_length_attribute (TYPE_MAX_VALUE (TYPE_DOMAIN (type)));\n-  bound_representation (upper_bound, 0, 'u');\n-#endif\n-}\n-\n /* Generate the DIE for a base class.  */\n \n static void\n@@ -12506,13 +12485,7 @@ gen_type_die (tree type, dw_die_ref context_die)\n       break;\n \n     case ARRAY_TYPE:\n-      if (TYPE_STRING_FLAG (type) && TREE_CODE (TREE_TYPE (type)) == CHAR_TYPE)\n-\t{\n-\t  gen_type_die (TREE_TYPE (type), context_die);\n-\t  gen_string_type_die (type, context_die);\n-\t}\n-      else\n-\tgen_array_type_die (type, context_die);\n+      gen_array_type_die (type, context_die);\n       break;\n \n     case VECTOR_TYPE:\n@@ -12567,7 +12540,6 @@ gen_type_die (tree type, dw_die_ref context_die)\n     case REAL_TYPE:\n     case COMPLEX_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       /* No DIEs needed for fundamental types.  */\n       break;\n "}, {"sha": "677ef7a218a1ca03292a39de224f8c4465790bcb", "filename": "gcc/explow.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,7 @@\n /* Subroutines for manipulating rtx's in semantically interesting ways.\n    Copyright (C) 1987, 1991, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -724,7 +725,7 @@ promote_mode (tree type, enum machine_mode mode, int *punsignedp,\n     {\n #ifdef PROMOTE_FUNCTION_MODE\n     case INTEGER_TYPE:   case ENUMERAL_TYPE:   case BOOLEAN_TYPE:\n-    case CHAR_TYPE:      case REAL_TYPE:       case OFFSET_TYPE:\n+    case REAL_TYPE:      case OFFSET_TYPE:\n #ifdef PROMOTE_MODE\n       if (for_call)\n \t{"}, {"sha": "537ce1ef83ef81335d18227341107b16837563d7", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -4648,7 +4648,6 @@ count_type_elements (tree type, bool allow_flexarr)\n     case REAL_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case POINTER_TYPE:\n     case OFFSET_TYPE:\n     case REFERENCE_TYPE:"}, {"sha": "01734a624007a0a17aff9991d0edd70b68d2ac04", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,6 @@\n /* Fold a constant sub-tree into a single node for C-compiler\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1995,7 +1995,7 @@ fold_convert (tree type, tree arg)\n \n   switch (TREE_CODE (type))\n     {\n-    case INTEGER_TYPE: case CHAR_TYPE: case ENUMERAL_TYPE: case BOOLEAN_TYPE:\n+    case INTEGER_TYPE: case ENUMERAL_TYPE: case BOOLEAN_TYPE:\n     case POINTER_TYPE: case REFERENCE_TYPE:\n     case OFFSET_TYPE:\n       if (TREE_CODE (arg) == INTEGER_CST)\n@@ -2032,7 +2032,7 @@ fold_convert (tree type, tree arg)\n \n       switch (TREE_CODE (orig))\n \t{\n-\tcase INTEGER_TYPE: case CHAR_TYPE:\n+\tcase INTEGER_TYPE:\n \tcase BOOLEAN_TYPE: case ENUMERAL_TYPE:\n \tcase POINTER_TYPE: case REFERENCE_TYPE:\n \t  return fold_build1 (FLOAT_EXPR, type, arg);\n@@ -2051,7 +2051,7 @@ fold_convert (tree type, tree arg)\n     case COMPLEX_TYPE:\n       switch (TREE_CODE (orig))\n \t{\n-\tcase INTEGER_TYPE: case CHAR_TYPE:\n+\tcase INTEGER_TYPE:\n \tcase BOOLEAN_TYPE: case ENUMERAL_TYPE:\n \tcase POINTER_TYPE: case REFERENCE_TYPE:\n \tcase REAL_TYPE:\n@@ -4101,7 +4101,6 @@ build_range_check (tree type, tree exp, int in_p, tree low, tree high)\n \t{\n \tcase INTEGER_TYPE:\n \tcase ENUMERAL_TYPE:\n-\tcase CHAR_TYPE:\n \t  /* There is no requirement that LOW be within the range of ETYPE\n \t     if the latter is a subtype.  It must, however, be within the base\n \t     type of ETYPE.  So be sure we do the subtraction in that type.  */\n@@ -4280,7 +4279,6 @@ merge_ranges (int *pin_p, tree *plow, tree *phigh, int in0_p, tree low0,\n \t\t      break;\n \t\t    /* FALLTHROUGH */\n \t\t  case INTEGER_TYPE:\n-\t\t  case CHAR_TYPE:\n \t\t    if (tree_int_cst_equal (low0,\n \t\t\t\t\t    TYPE_MIN_VALUE (TREE_TYPE (low0))))\n \t\t      low0 = 0;\n@@ -4304,7 +4302,6 @@ merge_ranges (int *pin_p, tree *plow, tree *phigh, int in0_p, tree low0,\n \t\t      break;\n \t\t    /* FALLTHROUGH */\n \t\t  case INTEGER_TYPE:\n-\t\t  case CHAR_TYPE:\n \t\t    if (tree_int_cst_equal (high1,\n \t\t\t\t\t    TYPE_MAX_VALUE (TREE_TYPE (high1))))\n \t\t      high1 = 0;"}, {"sha": "da800bba1952465d628a388eab104ccc2bd3e873", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,6 @@\n /* Tree lowering pass.  This pass converts the GENERIC functions-as-trees\n    tree representation into the GIMPLE form.\n-   Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Major work done by Sebastian Pop <s.pop@laposte.net>,\n    Diego Novillo <dnovillo@redhat.com> and Jason Merrill <jason@redhat.com>.\n \n@@ -4176,7 +4176,6 @@ omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *ctx, tree type)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case REAL_TYPE:\n       omp_firstprivatize_variable (ctx, TYPE_MIN_VALUE (type));\n       omp_firstprivatize_variable (ctx, TYPE_MAX_VALUE (type));\n@@ -5803,7 +5802,6 @@ gimplify_type_sizes (tree type, tree *list_p)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case REAL_TYPE:\n       gimplify_one_sizepos (&TYPE_MIN_VALUE (type), list_p);\n       gimplify_one_sizepos (&TYPE_MAX_VALUE (type), list_p);"}, {"sha": "2d9e7badcca41359dfd1a9e54ac3ffd8466ce112", "filename": "gcc/ipa-type-escape.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fipa-type-escape.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fipa-type-escape.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-type-escape.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,5 +1,5 @@\n /* Type based alias analysis.\n-   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Kenneth Zadeck <zadeck@naturalbridge.com>\n \n This file is part of GCC.\n@@ -267,7 +267,6 @@ type_to_consider (tree type)\n   switch (TREE_CODE (type))\n     {\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case COMPLEX_TYPE:\n     case ENUMERAL_TYPE:\n     case INTEGER_TYPE:"}, {"sha": "a9879771fb2a1e8b6c22636110f9d64787d75441", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,7 @@\n /* C-compiler utilities for types and variables storage layout\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1996, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1592,7 +1593,6 @@ layout_type (tree type)\n \n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n-    case CHAR_TYPE:\n       if (TREE_CODE (TYPE_MIN_VALUE (type)) == INTEGER_CST\n \t  && tree_int_cst_sgn (TYPE_MIN_VALUE (type)) >= 0)\n \tTYPE_UNSIGNED (type) = 1;\n@@ -1998,8 +1998,8 @@ set_sizetype (tree type)\n     }\n }\n \f\n-/* TYPE is an integral type, i.e., an INTEGRAL_TYPE, ENUMERAL_TYPE,\n-   BOOLEAN_TYPE, or CHAR_TYPE.  Set TYPE_MIN_VALUE and TYPE_MAX_VALUE\n+/* TYPE is an integral type, i.e., an INTEGRAL_TYPE, ENUMERAL_TYPE\n+   or BOOLEAN_TYPE.  Set TYPE_MIN_VALUE and TYPE_MAX_VALUE\n    for TYPE, based on the PRECISION and whether or not the TYPE\n    IS_UNSIGNED.  PRECISION need not correspond to a width supported\n    natively by the hardware; for example, on a machine with 8-bit,"}, {"sha": "07085b104b1811e4233d4392250d055f110f845b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -266,7 +266,6 @@ remap_type_1 (tree type, copy_body_data *id)\n     case REAL_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       t = TYPE_MIN_VALUE (new);\n       if (t && TREE_CODE (t) != INTEGER_CST)\n         walk_tree (&TYPE_MIN_VALUE (new), copy_body_r, id, NULL);"}, {"sha": "fdf3f132a309186a5e675d418fe1540c5bc540df", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -508,7 +508,6 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case VECTOR_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       {\n \tunsigned int quals = TYPE_QUALS (node);\n \tenum tree_code_class class;"}, {"sha": "37e2a3a5c4d5475523456e5f7659e0a869197d90", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,7 +1,7 @@\n /* Scalar Replacement of Aggregates (SRA) converts some structure\n    references into scalar references, exposing them to the scalar\n    optimizers.\n-   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Diego Novillo <dnovillo@redhat.com>\n \n This file is part of GCC.\n@@ -165,7 +165,7 @@ is_sra_scalar_type (tree type)\n   enum tree_code code = TREE_CODE (type);\n   return (code == INTEGER_TYPE || code == REAL_TYPE || code == VECTOR_TYPE\n \t  || code == ENUMERAL_TYPE || code == BOOLEAN_TYPE\n-\t  || code == CHAR_TYPE || code == POINTER_TYPE || code == OFFSET_TYPE\n+\t  || code == POINTER_TYPE || code == OFFSET_TYPE\n \t  || code == REFERENCE_TYPE);\n }\n "}, {"sha": "d66e0c63d6f52e5f7f9867eb8ace5a7ea444c76f", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,7 @@\n /* Language-independent node constructors for parse phase of GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -823,7 +824,6 @@ build_int_cst_wide (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n       break;\n \n     case INTEGER_TYPE:\n-    case CHAR_TYPE:\n     case OFFSET_TYPE:\n       if (TYPE_UNSIGNED (type))\n \t{\n@@ -2179,7 +2179,6 @@ type_contains_placeholder_1 (tree type)\n     case COMPLEX_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n     case POINTER_TYPE:\n     case OFFSET_TYPE:\n     case REFERENCE_TYPE:\n@@ -4058,7 +4057,6 @@ type_hash_eq (const void *va, const void *vb)\n     case INTEGER_TYPE:\n     case REAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       return ((TYPE_MAX_VALUE (a->type) == TYPE_MAX_VALUE (b->type)\n \t       || tree_int_cst_equal (TYPE_MAX_VALUE (a->type),\n \t\t\t\t      TYPE_MAX_VALUE (b->type)))\n@@ -5008,9 +5006,8 @@ build_nonstandard_integer_type (unsigned HOST_WIDE_INT precision,\n }\n \n /* Create a range of some discrete type TYPE (an INTEGER_TYPE,\n-   ENUMERAL_TYPE, BOOLEAN_TYPE, or CHAR_TYPE), with\n-   low bound LOWVAL and high bound HIGHVAL.\n-   if TYPE==NULL_TREE, sizetype is used.  */\n+   ENUMERAL_TYPE or BOOLEAN_TYPE), with low bound LOWVAL and\n+   high bound HIGHVAL.  If TYPE is NULL, sizetype is used.  */\n \n tree\n build_range_type (tree type, tree lowval, tree highval)\n@@ -5675,7 +5672,6 @@ variably_modified_type_p (tree type, tree fn)\n     case REAL_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n-    case CHAR_TYPE:\n       /* Scalar types are variably modified if their end points\n \t aren't constant.  */\n       RETURN_TRUE_IF_VAR (TYPE_MIN_VALUE (type));\n@@ -7261,7 +7257,6 @@ walk_type_fields (tree type, walk_tree_fn func, void *data,\n     case BOOLEAN_TYPE:\n     case ENUMERAL_TYPE:\n     case INTEGER_TYPE:\n-    case CHAR_TYPE:\n     case REAL_TYPE:\n       WALK_SUBTREE (TYPE_MIN_VALUE (type));\n       WALK_SUBTREE (TYPE_MAX_VALUE (type));"}, {"sha": "bc227e20346331774a522f052e094eeed7c9e7d6", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -124,8 +124,8 @@ DEFTREECODE (BLOCK, \"block\", tcc_exceptional, 0)\n \n /* The ordering of the following codes is optimized for the checking\n    macros in tree.h.  Changing the order will degrade the speed of the\n-   compiler.  OFFSET_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE, CHAR_TYPE,\n-   INTEGER_TYPE, REAL_TYPE, POINTER_TYPE.  */\n+   compiler.  OFFSET_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE, INTEGER_TYPE,\n+   REAL_TYPE, POINTER_TYPE.  */\n      \n /* An offset is a pointer relative to an object.\n    The TREE_TYPE field is the type of the object at the offset.\n@@ -150,16 +150,13 @@ DEFTREECODE (ENUMERAL_TYPE, \"enumeral_type\", tcc_type, 0)\n    INTEGRAL_TYPE.  */\n DEFTREECODE (BOOLEAN_TYPE, \"boolean_type\", tcc_type, 0)\n \n-/* CHAR in Java; not used in C.  Looks like an INTEGRAL_TYPE.  */\n-DEFTREECODE (CHAR_TYPE, \"char_type\", tcc_type, 0)\n-\n /* Integer types in all languages, including char in C.\n    Also used for sub-ranges of other discrete types.\n    Has components TYPE_MIN_VALUE, TYPE_MAX_VALUE (expressions, inclusive)\n    and TYPE_PRECISION (number of bits used by this type).\n    In the case of a subrange type in Pascal, the TREE_TYPE\n    of this will point at the supertype (another INTEGER_TYPE,\n-   or an ENUMERAL_TYPE, CHAR_TYPE, or BOOLEAN_TYPE).\n+   or an ENUMERAL_TYPE or BOOLEAN_TYPE).\n    Otherwise, the TREE_TYPE is zero.  */\n DEFTREECODE (INTEGER_TYPE, \"integer_type\", tcc_type, 0)\n "}, {"sha": "b4e390df37c1ea3967bcb63507f76f14746d500a", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,6 @@\n /* Front-end tree definitions for GNU compiler.\n    Copyright (C) 1989, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+   2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -853,8 +853,7 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n   TREE_NOT_CHECK3 (T, RECORD_TYPE, UNION_TYPE, QUAL_UNION_TYPE)\n \n #define NUMERICAL_TYPE_CHECK(T)\t\t\t\t\t\\\n-  TREE_CHECK5 (T, INTEGER_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE,\t\\\n-\t       CHAR_TYPE, REAL_TYPE)\n+  TREE_CHECK4 (T, INTEGER_TYPE, ENUMERAL_TYPE, BOOLEAN_TYPE, REAL_TYPE)\n \n /* In all nodes that are expressions, this is the data type of the expression.\n    In POINTER_TYPE nodes, this is the type that the pointer points to.\n@@ -931,7 +930,6 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n #define INTEGRAL_TYPE_P(TYPE)  \\\n   (TREE_CODE (TYPE) == ENUMERAL_TYPE  \\\n    || TREE_CODE (TYPE) == BOOLEAN_TYPE \\\n-   || TREE_CODE (TYPE) == CHAR_TYPE \\\n    || TREE_CODE (TYPE) == INTEGER_TYPE)\n \n /* Nonzero if TYPE represents a scalar floating-point type.  */"}, {"sha": "68bd026a2791f926b6d6dff6d8c608c1bd689b59", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71d5938381e8e5d0ff736121ff55a3c2ec9605da/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=71d5938381e8e5d0ff736121ff55a3c2ec9605da", "patch": "@@ -1,6 +1,6 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+   1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -3748,7 +3748,6 @@ output_constant (tree exp, unsigned HOST_WIDE_INT size, unsigned int align)\n      Otherwise, break and ensure SIZE is the size written.  */\n   switch (code)\n     {\n-    case CHAR_TYPE:\n     case BOOLEAN_TYPE:\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:"}]}