{"sha": "361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYxZDRhOWViNmIzOTdmMzQwMWI3NjkzZWU5ZmJjMDMyZTk1YTBmMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-11-05T16:20:44Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-11-05T16:20:44Z"}, "message": "PR middle-end/92341 - missing -Warray-bounds indexing past the end of a compound literal\n\nPR middle-end/92341 - missing -Warray-bounds indexing past the end of a compound literal\nPR middle-end/82612 - missing -Warray-bounds on a non-zero offset from the address of a non-array object\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/92341\n\tPR middle-end/82612\n\t* g++.dg/warn/Warray-bounds-4.C: Adjust text of expected warning.\n\t* gcc.dg/Warray-bounds-53.c: New test.\n\t* gcc.dg/Warray-bounds-54.c: New test.\n\ngcc/ChangeLog:\n\n\tPR middle-end/92341\n\tPR middle-end/82612\n\t* tree-sra.c (get_access_for_expr): Fail for out-of-bounds offsets.\n\t* tree-vrp.c (vrp_prop::check_array_ref): Correct index and text\n\tof message printed in a warning for empty arrays.\n\t(vrp_prop::check_mem_ref): Also handle function parameters and\n\tempty arrays.\n\nFrom-SVN: r277851", "tree": {"sha": "d0efeac99cf67e900fd19921105e9211998dbe51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0efeac99cf67e900fd19921105e9211998dbe51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02bf7e6fa219f939b3225c54fbe8bab2133b1aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02bf7e6fa219f939b3225c54fbe8bab2133b1aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02bf7e6fa219f939b3225c54fbe8bab2133b1aeb"}], "stats": {"total": 169, "additions": 159, "deletions": 10}, "files": [{"sha": "18247e7e87e89e0b4cfc2460d590be0123e860ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -1,3 +1,13 @@\n+2019-11-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/92341\n+\tPR middle-end/82612\n+\t* tree-sra.c (get_access_for_expr): Fail for out-of-bounds offsets.\n+\t* tree-vrp.c (vrp_prop::check_array_ref): Correct index and text\n+\tof message printed in a warning for empty arrays.\n+\t(vrp_prop::check_mem_ref): Also handle function parameters and\n+\tempty arrays.\n+\n 2019-11-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92371"}, {"sha": "248d180774651dc0cd02579c86e46b7e6f899750", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -1,3 +1,11 @@\n+2019-11-04  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/92341\n+\tPR middle-end/82612\n+\t* g++.dg/warn/Warray-bounds-4.C: Adjust text of expected warning.\n+\t* gcc.dg/Warray-bounds-53.c: New test.\n+\t* gcc.dg/Warray-bounds-54.c: New test.\n+\n 2019-11-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92371"}, {"sha": "874aeee41e16eecc03755aeed8e3185ad33850e3", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-4.C?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -23,7 +23,7 @@ public:\n   virtual void set(unsigned long index, char value) { contents[index] = value; }\n   virtual char& operator[] (unsigned long index) { return contents[index]; }\n \n-  FixedString() { contents[0] = '\\0'; } // { dg-warning \"above array bounds\" }\n+  FixedString() { contents[0] = '\\0'; } // { dg-warning \"\\\\\\[-Warray-bounds\" }\n };\n \n void print_length (const String& string);"}, {"sha": "0f062225b29d882c5d07748691c781e86c1bccc3", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-53.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-53.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-53.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-53.c?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -0,0 +1,97 @@\n+/* PR middle-end/92341 - missing -Warray-bounds indexing past the end\n+   of a compound literal\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+#include \"range.h\"\n+\n+#define INT_MAX    __INT_MAX__\n+#define INT_MIN    (-__INT_MAX__ - 1)\n+\n+void sink (int, ...);\n+\n+\n+#define T(...) sink (__LINE__, (__VA_ARGS__))\n+\n+\n+void direct_idx_cst (void)\n+{\n+  T ((int[]){ }[-1]);           // { dg-warning \"array subscript -1 is outside array bounds of 'int\\\\\\[0]'\" }\n+  T ((int[]){ }[0]);            // { dg-warning \"array subscript 0 is outside array bounds of 'int\\\\\\[0]'\" }\n+  T ((int[]){ }[1]);            // { dg-warning \"array subscript 1 is outside array bounds of 'int\\\\\\[0]'\" }\n+\n+  T ((int[]){ 1 }[-1]);         // { dg-warning \"array subscript -1 is below array bounds of 'int\\\\\\[1]'\" }\n+  T ((int[]){ 1 }[0]);\n+  T ((int[]){ 1 }[1]);          // { dg-warning \"array subscript 1 is above array bounds of 'int\\\\\\[1]'\" }\n+  T ((int[]){ 1 }[INT_MIN]);    // { dg-warning \"array subscript -\\[0-9\\]+ is below array bounds of 'int\\\\\\[1]'\" }\n+  T ((int[]){ 1 }[INT_MAX]);    // { dg-warning \"array subscript \\[0-9\\]+ is above array bounds of 'int\\\\\\[1]'\" }\n+  T ((int[]){ 1 }[SIZE_MAX]);   // { dg-warning \"array subscript \\[0-9\\]+ is above array bounds of 'int\\\\\\[1]'\" }\n+}\n+\n+\n+void direct_idx_var (int i)\n+{\n+  T ((char[]){ }[i]);           // { dg-warning \"array subscript i is outside array bounds of 'char\\\\\\[0]'\" }\n+  T ((int[]){ }[i]);            // { dg-warning \"array subscript i is outside array bounds of 'int\\\\\\[0]'\" }\n+}\n+\n+\n+void direct_idx_range (void)\n+{\n+  ptrdiff_t i = SR (-2, -1);\n+\n+  T ((int[]){ 1 }[i]);          // { dg-warning \"array subscript \\[ \\n\\r]+ is outside array bounds of 'int\\\\\\[0]'\" \"pr?????\" { xfail *-*-* } }\n+}\n+\n+\n+#undef T\n+#define T(idx, ...) do {\t\t\t\\\n+    int *p = (__VA_ARGS__);\t\t\t\\\n+    sink (p[idx]);\t\t\t\t\\\n+  } while (0)\n+\n+void ptr_idx_cst (void)\n+{\n+  T (-1, (int[]){ });           // { dg-warning \"array subscript -1 is outside array bounds of 'int\\\\\\[0]'\" }\n+  T ( 0, (int[]){ });           // { dg-warning \"array subscript 0 is outside array bounds of 'int\\\\\\[0]'\" }\n+  T (+1, (int[]){ });           // { dg-warning \"array subscript 1 is outside array bounds of 'int\\\\\\[0]'\" }\n+\n+  T (-1, (int[]){ 1 });         // { dg-warning \"array subscript -1 is outside array bounds of 'int\\\\\\[1]'\" }\n+  T ( 0, (int[]){ 1 });\n+  T (+1, (int[]){ 1 });         // { dg-warning \"array subscript 1 is outside array bounds of 'int\\\\\\[1]'\" }\n+  T (INT_MIN, (int[]){ 1 });    // { dg-warning \"array subscript -\\[0-9\\]+ is outside array bounds of 'int\\\\\\[1]'\" \"pr92381\" { xfail ilp32 } }\n+  T (INT_MAX, (int[]){ 1 });    // { dg-warning \"array subscript \\[0-9\\]+ is outside array bounds of 'int\\\\\\[1]'\" \"pr92381\" { xfail ilp32 } }\n+  // { dg-warning \"array subscript -\\[0-9\\]+ is outside array bounds of 'int\\\\\\[1]'\" \"\" { target ilp32 } .-1 }\n+  T (SIZE_MAX, (int[]){ 1 });   // { dg-warning \"array subscript -?\\[0-9\\]+ is outside array bounds of 'int\\\\\\[1]'\" }\n+}\n+\n+\n+void ptr_idx_var (int i)\n+{\n+  T (i, (int[]){ });            // { dg-warning \"array subscript \\[^\\n\\r\\]+ is outside array bounds of 'int\\\\\\[0]'\" }\n+  T (i, (int[]){ 1 });\n+  T (i, (int[]){ i, 1 });\n+}\n+\n+void ptr_idx_range (void)\n+{\n+  ptrdiff_t i = SR (-2, -1);\n+\n+  T (i, (int[]){ });            // { dg-warning \"array subscript \\\\\\[-2, -1] is outside array bounds of 'int\\\\\\[0]'\" }\n+  T (i, (int[]){ 1 });          // { dg-warning \"array subscript \\\\\\[-2, -1] is outside array bounds of 'int\\\\\\[1]'\" }\n+  T (i, (int[]){ i });          // { dg-warning \"array subscript \\\\\\[-2, -1] is outside array bounds of 'int\\\\\\[1]'\" }\n+\n+  i = SR (0, 1);\n+\n+  T (i, (int[]){ });            // { dg-warning \"array subscript \\\\\\[0, 1] is outside array bounds of 'int\\\\\\[0]'\" }\n+  T (i, (int[]){ 1 });\n+\n+  i = SR (1, 2);\n+  T (i, (int[]){ 1 });          // { dg-warning \"array subscript \\\\\\[1, 2] is outside array bounds of 'int\\\\\\[1]'\" }\n+\n+  i = SR (2, 3);\n+  T (i, (int[]){ 1, 2, 3 });\n+\n+  i = SR (3, 4);\n+  T (i, (int[]){ 2, 3, 4 });          // { dg-warning \"array subscript \\\\\\[3, 4] is outside array bounds of 'int\\\\\\[3]'\" }\n+}"}, {"sha": "644fcd02cb6847d5db52b18b703dc3d02a6c4a25", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-54.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-54.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-54.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-54.c?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -0,0 +1,24 @@\n+/* PR middle-end/82612 - missing -Warray-bounds on a non-zero offset\n+   from the address of a non-array object\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+int i;\n+int f0 (void)\n+{\n+  int *p = &i;\n+  return p[2];      // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+int f1 (void)\n+{\n+  int i;\n+  int *p = &i;\n+  return p[2];      // { dg-warning \"-Warray-bounds\" }\n+}\n+\n+int f2 (int i)\n+{\n+  int *p = &i;\n+  return p[2];      // { dg-warning \"-Warray-bounds\" }\n+}"}, {"sha": "44862690559c72efc004f525fade851302931a4a", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -3068,6 +3068,13 @@ get_access_for_expr (tree expr)\n       || !DECL_P (base))\n     return NULL;\n \n+  if (tree basesize = DECL_SIZE (base))\n+    {\n+      poly_int64 sz = tree_to_poly_int64 (basesize);\n+      if (offset < 0 || known_le (sz, offset))\n+\treturn NULL;\n+    }\n+\n   if (!bitmap_bit_p (candidate_bitmap, DECL_UID (base)))\n     return NULL;\n "}, {"sha": "940ed9cb7dc39d55ddc12e8d4abb24e7c8db03ab", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361d4a9eb6b397f3401b7693ee9fbc032e95a0f0/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=361d4a9eb6b397f3401b7693ee9fbc032e95a0f0", "patch": "@@ -4083,18 +4083,18 @@ bool\n vrp_prop::check_array_ref (location_t location, tree ref,\n \t\t\t   bool ignore_off_by_one)\n {\n-  tree low_sub, up_sub;\n-  tree low_bound, up_bound, up_bound_p1;\n-\n   if (TREE_NO_WARNING (ref))\n     return false;\n \n-  low_sub = up_sub = TREE_OPERAND (ref, 1);\n-  up_bound = array_ref_up_bound (ref);\n+  tree low_sub = TREE_OPERAND (ref, 1);\n+  tree up_sub = low_sub;\n+  tree up_bound = array_ref_up_bound (ref);\n \n   /* Set for accesses to interior zero-length arrays.  */\n   bool interior_zero_len = false;\n \n+  tree up_bound_p1;\n+\n   if (!up_bound\n       || TREE_CODE (up_bound) != INTEGER_CST\n       || (warn_array_bounds < 2\n@@ -4148,7 +4148,7 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n     up_bound_p1 = int_const_binop (PLUS_EXPR, up_bound,\n \t\t\t\t   build_int_cst (TREE_TYPE (up_bound), 1));\n \n-  low_bound = array_ref_low_bound (ref);\n+  tree low_bound = array_ref_low_bound (ref);\n \n   tree artype = TREE_TYPE (TREE_OPERAND (ref, 0));\n \n@@ -4157,8 +4157,8 @@ vrp_prop::check_array_ref (location_t location, tree ref,\n   /* Empty array.  */\n   if (up_bound && tree_int_cst_equal (low_bound, up_bound_p1))\n     warned = warning_at (location, OPT_Warray_bounds,\n-\t\t\t \"array subscript %E is above array bounds of %qT\",\n-\t\t\t low_bound, artype);\n+\t\t\t \"array subscript %E is outside array bounds of %qT\",\n+\t\t\t low_sub, artype);\n \n   const value_range_equiv *vr = NULL;\n   if (TREE_CODE (low_sub) == SSA_NAME)\n@@ -4372,6 +4372,7 @@ vrp_prop::check_mem_ref (location_t location, tree ref,\n     {\n       arg = TREE_OPERAND (arg, 0);\n       if (TREE_CODE (arg) != STRING_CST\n+\t  && TREE_CODE (arg) != PARM_DECL\n \t  && TREE_CODE (arg) != VAR_DECL)\n \treturn false;\n     }\n@@ -4455,7 +4456,9 @@ vrp_prop::check_mem_ref (location_t location, tree ref,\n   if (ignore_off_by_one)\n     ubound += 1;\n \n-  if (offrange[0] >= ubound || offrange[1] < arrbounds[0])\n+  if (arrbounds[0] == arrbounds[1]\n+      || offrange[0] >= ubound\n+      || offrange[1] < arrbounds[0])\n     {\n       /* Treat a reference to a non-array object as one to an array\n \t of a single element.  */"}]}