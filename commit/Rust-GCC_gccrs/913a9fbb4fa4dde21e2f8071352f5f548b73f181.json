{"sha": "913a9fbb4fa4dde21e2f8071352f5f548b73f181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzYTlmYmI0ZmE0ZGRlMjFlMmY4MDcxMzUyZjVmNTQ4YjczZjE4MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-04-28T19:12:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-04-28T19:12:13Z"}, "message": "compiler: Export String_index_expression.\n\n    \n    Exports String_index_expression and adds the getter `string` that\n    returns the underlying string.  This will be used to handle string\n    indexing different from array indexing in escape analysis.\n    \n    Reviewed-on: https://go-review.googlesource.com/18545\n\nFrom-SVN: r235602", "tree": {"sha": "66ab4e8f808963572df8a20a15f966f75e9667ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66ab4e8f808963572df8a20a15f966f75e9667ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/913a9fbb4fa4dde21e2f8071352f5f548b73f181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913a9fbb4fa4dde21e2f8071352f5f548b73f181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913a9fbb4fa4dde21e2f8071352f5f548b73f181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913a9fbb4fa4dde21e2f8071352f5f548b73f181/comments", "author": null, "committer": null, "parents": [{"sha": "9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fae9ece6abc4212cbdd21c7fe334b43f78eb3a0"}], "stats": {"total": 137, "additions": 76, "deletions": 61}, "files": [{"sha": "ced2068e9c11c9c9ea17339a057c494013a42027", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913a9fbb4fa4dde21e2f8071352f5f548b73f181/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913a9fbb4fa4dde21e2f8071352f5f548b73f181/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=913a9fbb4fa4dde21e2f8071352f5f548b73f181", "patch": "@@ -1,4 +1,4 @@\n-ba520fdcbea95531ebb9ef3d5be2de405ca90df3\n+b17e404f5b8954e008b512741296d238ab7b2ef9\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "da7b4e0e7884e3a0d10546a9c9b18d4978595e09", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913a9fbb4fa4dde21e2f8071352f5f548b73f181/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913a9fbb4fa4dde21e2f8071352f5f548b73f181/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=913a9fbb4fa4dde21e2f8071352f5f548b73f181", "patch": "@@ -10380,66 +10380,7 @@ Expression::make_array_index(Expression* array, Expression* start,\n   return new Array_index_expression(array, start, end, cap, location);\n }\n \n-// A string index.  This is used for both indexing and slicing.\n-\n-class String_index_expression : public Expression\n-{\n- public:\n-  String_index_expression(Expression* string, Expression* start,\n-\t\t\t  Expression* end, Location location)\n-    : Expression(EXPRESSION_STRING_INDEX, location),\n-      string_(string), start_(start), end_(end)\n-  { }\n-\n- protected:\n-  int\n-  do_traverse(Traverse*);\n-\n-  Expression*\n-  do_flatten(Gogo*, Named_object*, Statement_inserter*);\n-\n-  Type*\n-  do_type();\n-\n-  void\n-  do_determine_type(const Type_context*);\n-\n-  void\n-  do_check_types(Gogo*);\n-\n-  Expression*\n-  do_copy()\n-  {\n-    return Expression::make_string_index(this->string_->copy(),\n-\t\t\t\t\t this->start_->copy(),\n-\t\t\t\t\t (this->end_ == NULL\n-\t\t\t\t\t  ? NULL\n-\t\t\t\t\t  : this->end_->copy()),\n-\t\t\t\t\t this->location());\n-  }\n-\n-  bool\n-  do_must_eval_subexpressions_in_order(int* skip) const\n-  {\n-    *skip = 1;\n-    return true;\n-  }\n-\n-  Bexpression*\n-  do_get_backend(Translate_context*);\n-\n-  void\n-  do_dump_expression(Ast_dump_context*) const;\n-\n- private:\n-  // The string we are getting a value from.\n-  Expression* string_;\n-  // The start or only index.\n-  Expression* start_;\n-  // The end index of a slice.  This may be NULL for a single index,\n-  // or it may be a nil expression for the length of the string.\n-  Expression* end_;\n-};\n+// Class String_index_expression.\n \n // String index traversal.\n "}, {"sha": "a953bbd0a7d5da61abeefdcfd449b7ff95252bb1", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913a9fbb4fa4dde21e2f8071352f5f548b73f181/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913a9fbb4fa4dde21e2f8071352f5f548b73f181/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=913a9fbb4fa4dde21e2f8071352f5f548b73f181", "patch": "@@ -44,6 +44,7 @@ class Func_descriptor_expression;\n class Unknown_expression;\n class Index_expression;\n class Array_index_expression;\n+class String_index_expression;\n class Map_index_expression;\n class Bound_method_expression;\n class Field_reference_expression;\n@@ -675,6 +676,13 @@ class Expression\n   array_index_expression()\n   { return this->convert<Array_index_expression, EXPRESSION_ARRAY_INDEX>(); }\n \n+  // If this is an expression which refers to indexing in a string,\n+  // return the String_index_expression structure.  Otherwise, return\n+  // NULL.\n+  String_index_expression*\n+  string_index_expression()\n+  { return this->convert<String_index_expression, EXPRESSION_STRING_INDEX>(); }\n+\n   // If this is an expression which refers to indexing in a map,\n   // return the Map_index_expression structure.  Otherwise, return\n   // NULL.\n@@ -2583,6 +2591,72 @@ class Array_index_expression : public Expression\n   Type* type_;\n };\n \n+// A string index.  This is used for both indexing and slicing.\n+\n+class String_index_expression : public Expression\n+{\n+ public:\n+  String_index_expression(Expression* string, Expression* start,\n+\t\t\t  Expression* end, Location location)\n+    : Expression(EXPRESSION_STRING_INDEX, location),\n+      string_(string), start_(start), end_(end)\n+  { }\n+\n+  // Return the string being indexed.\n+  Expression*\n+  string() const\n+  { return this->string_; }\n+\n+ protected:\n+  int\n+  do_traverse(Traverse*);\n+\n+  Expression*\n+  do_flatten(Gogo*, Named_object*, Statement_inserter*);\n+\n+  Type*\n+  do_type();\n+\n+  void\n+  do_determine_type(const Type_context*);\n+\n+  void\n+  do_check_types(Gogo*);\n+\n+  Expression*\n+  do_copy()\n+  {\n+    return Expression::make_string_index(this->string_->copy(),\n+\t\t\t\t\t this->start_->copy(),\n+\t\t\t\t\t (this->end_ == NULL\n+\t\t\t\t\t  ? NULL\n+\t\t\t\t\t  : this->end_->copy()),\n+\t\t\t\t\t this->location());\n+  }\n+\n+  bool\n+  do_must_eval_subexpressions_in_order(int* skip) const\n+  {\n+    *skip = 1;\n+    return true;\n+  }\n+\n+  Bexpression*\n+  do_get_backend(Translate_context*);\n+\n+  void\n+  do_dump_expression(Ast_dump_context*) const;\n+\n+ private:\n+  // The string we are getting a value from.\n+  Expression* string_;\n+  // The start or only index.\n+  Expression* start_;\n+  // The end index of a slice.  This may be NULL for a single index,\n+  // or it may be a nil expression for the length of the string.\n+  Expression* end_;\n+};\n+\n // An index into a map.\n \n class Map_index_expression : public Expression"}]}