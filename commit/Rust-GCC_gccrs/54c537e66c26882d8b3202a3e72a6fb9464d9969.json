{"sha": "54c537e66c26882d8b3202a3e72a6fb9464d9969", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRjNTM3ZTY2YzI2ODgyZDhiMzIwMmEzZTcyYTZmYjk0NjRkOTk2OQ==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2018-05-27T06:46:43Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-27T06:46:43Z"}, "message": "[NDS32] new attribute no_prologue and new option -mret-in-naked-func.\n\ngcc/\n\t* config/nds32/nds32.c (nds32_attribute_table): Add \"no_prologue\".\n\t(nds32_init_machine_status): Initialize machine->attr_naked_p and\n\tmachine->attr_no_prologue_p.\n\t(nds32_compute_stack_frame): Check \"naked\" and \"no_prologue\" attributes.\n\t(nds32_naked_function_p): Handle \"naked\" and \"no_prologue\" attributes.\n\t(nds32_expand_epilogue): Consider attr_naked_p.\n\t(nds32_expand_epilogue_v3pop): Likewise.\n\t(nds32_can_use_return_insn): Likewise.\n\t* config/nds32/nds32.h (machine_function): Add attr_naked_p and\n\tattr_no_prologue_p fields.\n\t* config/nds32/nds32.opt (mret-in-naked-func): New option.\n\nFrom-SVN: r260803", "tree": {"sha": "3406836ef47f427b56a8e7ba400723c56b59becc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3406836ef47f427b56a8e7ba400723c56b59becc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54c537e66c26882d8b3202a3e72a6fb9464d9969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c537e66c26882d8b3202a3e72a6fb9464d9969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54c537e66c26882d8b3202a3e72a6fb9464d9969", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54c537e66c26882d8b3202a3e72a6fb9464d9969/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cdb54eaaeffa42f23d34a71d09dde49cfc641df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cdb54eaaeffa42f23d34a71d09dde49cfc641df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cdb54eaaeffa42f23d34a71d09dde49cfc641df"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "73c578165f37874d90130a55dbc4a7034513c06e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54c537e66c26882d8b3202a3e72a6fb9464d9969", "patch": "@@ -1,3 +1,17 @@\n+2018-05-27  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.c (nds32_attribute_table): Add \"no_prologue\".\n+\t(nds32_init_machine_status): Initialize machine->attr_naked_p and\n+\tmachine->attr_no_prologue_p.\n+\t(nds32_compute_stack_frame): Check \"naked\" and \"no_prologue\" attributes.\n+\t(nds32_naked_function_p): Handle \"naked\" and \"no_prologue\" attributes.\n+\t(nds32_expand_epilogue): Consider attr_naked_p.\n+\t(nds32_expand_epilogue_v3pop): Likewise.\n+\t(nds32_can_use_return_insn): Likewise.\n+\t* config/nds32/nds32.h (machine_function): Add attr_naked_p and\n+\tattr_no_prologue_p fields.\n+\t* config/nds32/nds32.opt (mret-in-naked-func): New option.\n+\n 2018-05-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/85918"}, {"sha": "9fcd24f7e34b1d93ce875d9ea24e308e7c031dbb", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 58, "deletions": 8, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=54c537e66c26882d8b3202a3e72a6fb9464d9969", "patch": "@@ -320,6 +320,10 @@ static const struct attribute_spec nds32_attribute_table[] =\n   /* The attribute is used to tell this function to be ROM patch.  */\n   { \"indirect_call\",0,  0, false, false, false, false, NULL, NULL },\n \n+  /* FOR BACKWARD COMPATIBILITY,\n+     this attribute also tells no prologue/epilogue.  */\n+  { \"no_prologue\",  0,  0, false, false, false, false, NULL, NULL },\n+\n   /* The last attribute spec is set to be NULL.  */\n   { NULL,           0,  0, false, false, false, false, NULL, NULL }\n };\n@@ -348,6 +352,10 @@ nds32_init_machine_status (void)\n   /* Initially this function is not under strictly aligned situation.  */\n   machine->strict_aligned_p = 0;\n \n+  /* Initially this function has no naked and no_prologue attributes.  */\n+  machine->attr_naked_p = 0;\n+  machine->attr_no_prologue_p = 0;\n+\n   return machine;\n }\n \n@@ -365,6 +373,15 @@ nds32_compute_stack_frame (void)\n      needs prologue/epilogue.  */\n   cfun->machine->naked_p = 0;\n \n+  /* We need to mark whether this function has naked and no_prologue\n+     attribute so that we can distinguish the difference if users applies\n+     -mret-in-naked-func option.  */\n+  cfun->machine->attr_naked_p\n+    = lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl))\n+      ? 1 : 0;\n+  cfun->machine->attr_no_prologue_p\n+    = lookup_attribute (\"no_prologue\", DECL_ATTRIBUTES (current_function_decl))\n+      ? 1 : 0;\n \n   /* If __builtin_eh_return is used, we better have frame pointer needed\n      so that we can easily locate the stack slot of return address.  */\n@@ -501,7 +518,7 @@ nds32_compute_stack_frame (void)\n     }\n \n   /* Check if this function can omit prologue/epilogue code fragment.\n-     If there is 'naked' attribute in this function,\n+     If there is 'no_prologue'/'naked' attribute in this function,\n      we can set 'naked_p' flag to indicate that\n      we do not have to generate prologue/epilogue.\n      Or, if all the following conditions succeed,\n@@ -514,7 +531,8 @@ nds32_compute_stack_frame (void)\n \t\t    is no outgoing size.\n        condition 3: There is no local_size, which means\n \t\t    we do not need to adjust $sp.  */\n-  if (lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl))\n+  if (lookup_attribute (\"no_prologue\", DECL_ATTRIBUTES (current_function_decl))\n+      || lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl))\n       || (cfun->machine->callee_saved_first_gpr_regno == SP_REGNUM\n \t  && cfun->machine->callee_saved_last_gpr_regno == SP_REGNUM\n \t  && cfun->machine->callee_saved_first_fpr_regno == SP_REGNUM\n@@ -1376,14 +1394,22 @@ nds32_needs_double_word_align (machine_mode mode, const_tree type)\n static bool\n nds32_naked_function_p (tree func)\n {\n-  tree t;\n+  /* FOR BACKWARD COMPATIBILITY,\n+     we need to support 'no_prologue' attribute as well.  */\n+  tree t_naked;\n+  tree t_no_prologue;\n \n   if (TREE_CODE (func) != FUNCTION_DECL)\n     abort ();\n \n-  t = lookup_attribute (\"naked\", DECL_ATTRIBUTES (func));\n+  /* We have to use lookup_attribute() to check attributes.\n+     Because attr_naked_p and attr_no_prologue_p are set in\n+     nds32_compute_stack_frame() and the function has not been\n+     invoked yet.  */\n+  t_naked       = lookup_attribute (\"naked\", DECL_ATTRIBUTES (func));\n+  t_no_prologue = lookup_attribute (\"no_prologue\", DECL_ATTRIBUTES (func));\n \n-  return (t != NULL_TREE);\n+  return ((t_naked != NULL_TREE) || (t_no_prologue != NULL_TREE));\n }\n \n /* Function that determine whether a load postincrement is a good thing to use\n@@ -4719,7 +4745,16 @@ nds32_expand_epilogue (bool sibcall_p)\n       /* Generate return instruction by using 'return_internal' pattern.\n \t Make sure this instruction is after gen_blockage().  */\n       if (!sibcall_p)\n-\temit_jump_insn (gen_return_internal ());\n+\t{\n+\t  /* We need to further check attributes to determine whether\n+\t     there should be return instruction at epilogue.\n+\t     If the attribute naked exists but -mno-ret-in-naked-func\n+\t     is issued, there is NO need to generate return instruction.  */\n+\t  if (cfun->machine->attr_naked_p && !flag_ret_in_naked_func)\n+\t    return;\n+\n+\t  emit_jump_insn (gen_return_internal ());\n+\t}\n       return;\n     }\n \n@@ -5075,9 +5110,19 @@ nds32_expand_epilogue_v3pop (bool sibcall_p)\n   if (cfun->machine->naked_p)\n     {\n       /* Generate return instruction by using 'return_internal' pattern.\n-\t Make sure this instruction is after gen_blockage().  */\n+\t Make sure this instruction is after gen_blockage().\n+\t First we need to check this is a function without sibling call.  */\n       if (!sibcall_p)\n-\temit_jump_insn (gen_return_internal ());\n+\t{\n+\t  /* We need to further check attributes to determine whether\n+\t     there should be return instruction at epilogue.\n+\t     If the attribute naked exists but -mno-ret-in-naked-func\n+\t     is issued, there is NO need to generate return instruction.  */\n+\t  if (cfun->machine->attr_naked_p && !flag_ret_in_naked_func)\n+\t    return;\n+\n+\t  emit_jump_insn (gen_return_internal ());\n+\t}\n       return;\n     }\n \n@@ -5241,6 +5286,11 @@ nds32_can_use_return_insn (void)\n   if (!reload_completed)\n     return 0;\n \n+  /* If attribute 'naked' appears but -mno-ret-in-naked-func is used,\n+     we cannot use return instruction.  */\n+  if (cfun->machine->attr_naked_p && !flag_ret_in_naked_func)\n+    return 0;\n+\n   sp_adjust = cfun->machine->local_size\n \t      + cfun->machine->out_args_size\n \t      + cfun->machine->callee_saved_area_gpr_padding_bytes"}, {"sha": "523492fea175348e76f1c24ee4e73c4eacda46fd", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=54c537e66c26882d8b3202a3e72a6fb9464d9969", "patch": "@@ -318,6 +318,10 @@ struct GTY(()) machine_function\n        2. The rtl lowering and optimization are close to target code.\n \t  For this case we need address to be strictly aligned.  */\n   int strict_aligned_p;\n+\n+  /* Record two similar attributes status.  */\n+  int attr_naked_p;\n+  int attr_no_prologue_p;\n };\n \n /* A C structure that contains the arguments information.  */"}, {"sha": "d32e2ec116506078e0518384a1a405d586961de8", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54c537e66c26882d8b3202a3e72a6fb9464d9969/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=54c537e66c26882d8b3202a3e72a6fb9464d9969", "patch": "@@ -439,6 +439,10 @@ mforce-no-ext-dsp\n Target Undocumented Report Mask(FORCE_NO_EXT_DSP)\n Force disable hardware loop, even use -mext-dsp.\n \n+mret-in-naked-func\n+Target Var(flag_ret_in_naked_func) Init(1)\n+Generate return instruction in naked function.\n+\n malways-save-lp\n Target Var(flag_always_save_lp) Init(0)\n Always save $lp in the stack."}]}