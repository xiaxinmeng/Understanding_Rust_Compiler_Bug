{"sha": "071d00e0faabbd45449d2e83f207fca0f8e8ef68", "node_id": "C_kwDOANBUbNoAKDA3MWQwMGUwZmFhYmJkNDU0NDlkMmU4M2YyMDdmY2EwZjhlOGVmNjg", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-11-07T10:32:33Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-11-07T10:32:33Z"}, "message": "Fortran: Fix reallocation on assignment for kind=4 strings [PR107508]\n\nThe check whether reallocation on assignment was required did not handle\nkind=4 characters correctly such that there was always a reallocation,\nimplying issues with pointer addresses and lower bounds.  Additionally,\nwith all deferred strings, the old memory was not freed on reallocation.\nAnd, finally, inside the block which was only executed if string lengths\nor bounds or dynamic types changed, was a subcheck of the same, which\nwas effectively a no op but still confusing and at least added with -O0\nextra instructions to the binary.\n\n\tPR fortran/107508\n\ngcc/fortran/ChangeLog:\n\n\t* trans-array.cc (gfc_alloc_allocatable_for_assignment): Fix\n\tstring-length check, plug memory leak, and avoid generation of\n\teffectively no-op code.\n\t* trans-expr.cc (alloc_scalar_allocatable_for_assignment): Extend\n\tcomment; minor cleanup.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/widechar_11.f90: New test.", "tree": {"sha": "84c47e3261635ef97b6a310c0cd21638bf2f9343", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84c47e3261635ef97b6a310c0cd21638bf2f9343"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/071d00e0faabbd45449d2e83f207fca0f8e8ef68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071d00e0faabbd45449d2e83f207fca0f8e8ef68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/071d00e0faabbd45449d2e83f207fca0f8e8ef68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/071d00e0faabbd45449d2e83f207fca0f8e8ef68/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21cd625eb8f055a72ee056be32a958b786843e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cd625eb8f055a72ee056be32a958b786843e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cd625eb8f055a72ee056be32a958b786843e80"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "b7d4c41b5fecdfca197c5c4f071e99795b039bc4", "filename": "gcc/fortran/trans-array.cc", "status": "modified", "additions": 6, "deletions": 51, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071d00e0faabbd45449d2e83f207fca0f8e8ef68/gcc%2Ffortran%2Ftrans-array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071d00e0faabbd45449d2e83f207fca0f8e8ef68/gcc%2Ffortran%2Ftrans-array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.cc?ref=071d00e0faabbd45449d2e83f207fca0f8e8ef68", "patch": "@@ -10527,7 +10527,6 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   tree offset;\n   tree jump_label1;\n   tree jump_label2;\n-  tree neq_size;\n   tree lbd;\n   tree class_expr2 = NULL_TREE;\n   int n;\n@@ -10607,6 +10606,11 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n \telemsize1 = expr1->ts.u.cl->backend_decl;\n       else\n \telemsize1 = lss->info->string_length;\n+      tree unit_size = TYPE_SIZE_UNIT (gfc_get_char_type (expr1->ts.kind));\n+      elemsize1 = fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\t   TREE_TYPE (elemsize1), elemsize1,\n+\t\t\t\t   fold_convert (TREE_TYPE (elemsize1), unit_size));\n+\n     }\n   else if (expr1->ts.type == BT_CLASS)\n     {\n@@ -10699,19 +10703,7 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   /* Allocate if data is NULL.  */\n   cond_null = fold_build2_loc (input_location, EQ_EXPR, logical_type_node,\n \t\t\t array1, build_int_cst (TREE_TYPE (array1), 0));\n-\n-  if (expr1->ts.type == BT_CHARACTER && expr1->ts.deferred)\n-    {\n-      tmp = fold_build2_loc (input_location, NE_EXPR,\n-\t\t\t     logical_type_node,\n-\t\t\t     lss->info->string_length,\n-\t\t\t     rss->info->string_length);\n-      cond_null = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n-\t\t\t\t   logical_type_node, tmp, cond_null);\n-      cond_null= gfc_evaluate_now (cond_null, &fblock);\n-    }\n-  else\n-    cond_null= gfc_evaluate_now (cond_null, &fblock);\n+  cond_null= gfc_evaluate_now (cond_null, &fblock);\n \n   tmp = build3_v (COND_EXPR, cond_null,\n \t\t  build1_v (GOTO_EXPR, jump_label1),\n@@ -10778,19 +10770,6 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   tmp = build1_v (LABEL_EXPR, jump_label1);\n   gfc_add_expr_to_block (&fblock, tmp);\n \n-  /* If the lhs has not been allocated, its bounds will not have been\n-     initialized and so its size is set to zero.  */\n-  size1 = gfc_create_var (gfc_array_index_type, NULL);\n-  gfc_init_block (&alloc_block);\n-  gfc_add_modify (&alloc_block, size1, gfc_index_zero_node);\n-  gfc_init_block (&realloc_block);\n-  gfc_add_modify (&realloc_block, size1,\n-\t\t  gfc_conv_descriptor_size (desc, expr1->rank));\n-  tmp = build3_v (COND_EXPR, cond_null,\n-\t\t  gfc_finish_block (&alloc_block),\n-\t\t  gfc_finish_block (&realloc_block));\n-  gfc_add_expr_to_block (&fblock, tmp);\n-\n   /* Get the rhs size and fix it.  */\n   size2 = gfc_index_one_node;\n   for (n = 0; n < expr2->rank; n++)\n@@ -10807,16 +10786,6 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n     }\n   size2 = gfc_evaluate_now (size2, &fblock);\n \n-  cond = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n-\t\t\t  size1, size2);\n-\n-  /* If the lhs is deferred length, assume that the element size\n-     changes and force a reallocation.  */\n-  if (expr1->ts.deferred)\n-    neq_size = gfc_evaluate_now (logical_true_node, &fblock);\n-  else\n-    neq_size = gfc_evaluate_now (cond, &fblock);\n-\n   /* Deallocation of allocatable components will have to occur on\n      reallocation.  Fix the old descriptor now.  */\n   if ((expr1->ts.type == BT_DERIVED)\n@@ -11048,20 +11017,6 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   gfc_add_block_to_block (&realloc_block, &caf_se.post);\n   realloc_expr = gfc_finish_block (&realloc_block);\n \n-  /* Reallocate if sizes or dynamic types are different.  */\n-  if (elemsize1)\n-    {\n-      tmp = fold_build2_loc (input_location, NE_EXPR, logical_type_node,\n-\t\t\t     elemsize1, elemsize2);\n-      tmp = gfc_evaluate_now (tmp, &fblock);\n-      neq_size = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n-\t\t\t\t  logical_type_node, neq_size, tmp);\n-    }\n-  tmp = build3_v (COND_EXPR, neq_size, realloc_expr,\n-\t\t  build_empty_stmt (input_location));\n-\n-  realloc_expr = tmp;\n-\n   /* Malloc expression.  */\n   gfc_init_block (&alloc_block);\n   if (!coarray)"}, {"sha": "f3fbb52715703828f893e8d097fe079e53bd22d0", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071d00e0faabbd45449d2e83f207fca0f8e8ef68/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071d00e0faabbd45449d2e83f207fca0f8e8ef68/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=071d00e0faabbd45449d2e83f207fca0f8e8ef68", "patch": "@@ -11236,10 +11236,10 @@ alloc_scalar_allocatable_for_assignment (stmtblock_t *block,\n \n   if (expr1->ts.type == BT_CHARACTER && expr1->ts.deferred)\n     {\n-      /* Use the rhs string length and the lhs element size.  */\n+      /* Use the rhs string length and the lhs element size. Note that 'size' is\n+\t used below for the string-length comparison, only.  */\n       size = string_length;\n-      tmp = TREE_TYPE (gfc_typenode_for_spec (&expr1->ts));\n-      tmp = TYPE_SIZE_UNIT (tmp);\n+      tmp = TYPE_SIZE_UNIT (gfc_get_char_type (expr1->ts.kind));\n       size_in_bytes = fold_build2_loc (input_location, MULT_EXPR,\n \t\t\t\t       TREE_TYPE (tmp), tmp,\n \t\t\t\t       fold_convert (TREE_TYPE (tmp), size));"}, {"sha": "02530fb1730c2271e5550f0e8a1169d9782d63be", "filename": "gcc/testsuite/gfortran.dg/widechar_11.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/071d00e0faabbd45449d2e83f207fca0f8e8ef68/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/071d00e0faabbd45449d2e83f207fca0f8e8ef68/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_11.f90?ref=071d00e0faabbd45449d2e83f207fca0f8e8ef68", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/107508\n+!\n+use iso_c_binding\n+implicit none\n+character(len=:,kind=4), allocatable, target :: a4str(:), a4str2\n+type(c_ptr) :: cptr, cptr2\n+\n+allocate(character(len=7,kind=4) :: a4str(-2:3))\n+allocate(character(len=9,kind=4) :: a4str2)\n+\n+cptr = c_loc(a4str)\n+cptr2 = c_loc(a4str2)\n+\n+if (len(a4str) /= 7) error stop\n+if (lbound(a4str,1) /= -2) error stop\n+if (ubound(a4str,1) /= 3) error stop\n+if (len(a4str2) /= 9) error stop\n+\n+a4str = [4_\"sf456aq\", 4_\"3dtzu24\", 4_\"_4fh7sm\", 4_\"=ff85s7\", 4_\"j=8af4d\", 4_\".,A%Fsz\"]\n+a4str2 = 4_\"4f5g5f8a9\"\n+\n+!print *, lbound(a4str), ubound(a4str)  ! expected (-2:3) - actually: (1:6)\n+\n+if (len(a4str) /= 7) error stop\n+if (lbound(a4str,1) /= -2) error stop\n+if (ubound(a4str,1) /= 3) error stop\n+if (len(a4str2) /= 9) error stop\n+if (.not. c_associated (cptr, c_loc(a4str))) error stop\n+if (.not. c_associated (cptr2, c_loc(a4str2))) error stop\n+end\n+\n+! { dg-final { scan-tree-dump-times \"__builtin_malloc\" 4 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_realloc\" 2 \"original\" } }\n+\n+! { dg-final { scan-tree-dump-times \"a4str.data = __builtin_malloc \\\\(168\\\\);\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"a4str.data = __builtin_realloc \\\\(a4str.data, 168\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"a4str2 = \\\\(character\\\\(kind=4\\\\)\\\\\\[1:.a4str2\\\\\\] \\\\*\\\\) __builtin_malloc \\\\(36\\\\);\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"a4str2 = \\\\(character\\\\(kind=4\\\\)\\\\\\[1:.a4str2\\\\\\] \\\\*\\\\) __builtin_realloc \\\\(\\\\(void \\\\*\\\\) a4str2, 36\\\\);\" 1 \"original\" } }\n+\n+! Array: Assert, realloc-check assign string length (alloc + (realloc'ed) assignment):\n+! { dg-final { scan-tree-dump-times \"if \\\\(\\[^\\\\n\\\\r\\]*\\\\.a4str != 7\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"if \\\\(D\\\\.\\[0-9\\]+ != 28\\\\) goto L\\\\.\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"\\\\.a4str = 7;\" 2 \"original\" } }\n+\n+! Scalar: Assert, realloc-check assign string length (alloc + (realloc'ed) assignment):\n+! { dg-final { scan-tree-dump-times \"if \\\\(\\[^\\\\n\\\\r\\]*\\\\.a4str2 != 9\\\\)\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"if \\\\(\\\\.a4str2 == 9\\\\) goto L\\\\.\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"\\\\.a4str2 = 9;\" 2 \"original\" } }"}]}