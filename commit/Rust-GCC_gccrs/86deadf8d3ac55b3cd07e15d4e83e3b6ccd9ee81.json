{"sha": "86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZkZWFkZjhkM2FjNTViM2NkMDdlMTVkNGU4M2UzYjZjY2Q5ZWU4MQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-11-02T14:43:28Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-11-02T14:43:28Z"}, "message": "ipa-cp: New debug counters for IPA-CP\n\nMartin Li\u0161ka has been asking me to add debug counters to the IPA-CP pass so\nthat testcase reductions are easier.  The pass already has one for the bit\nvalue propagation, so this patch adds one for value_range propagation\nand one for the actual constant propagation.\n\ngcc/ChangeLog:\n\n2020-10-30  Martin Jambor  <mjambor@suse.cz>\n\n\t* dbgcnt.def (ipa_cp_values): New counter.\n\t(ipa_cp_vr): Likewise.\n\t* ipa-cp.c (decide_about_value): Check and bump ipa_cp_values debug\n\tcounter.\n\t(decide_whether_version_node): Likewise.\n\t(ipcp_store_vr_results):Check and bump ipa_cp_vr debug counter.", "tree": {"sha": "a8d8e820d75f7e9da4504721780a726fdf5d7441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8d8e820d75f7e9da4504721780a726fdf5d7441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637aeb6b8da36a621cf076068498adc5322be069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/637aeb6b8da36a621cf076068498adc5322be069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/637aeb6b8da36a621cf076068498adc5322be069"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "a5b6bb66a6c1ab037e99571675cefbcc42a87b15", "filename": "gcc/dbgcnt.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81/gcc%2Fdbgcnt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81/gcc%2Fdbgcnt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.def?ref=86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81", "patch": "@@ -171,6 +171,8 @@ DEBUG_COUNTER (if_after_reload)\n DEBUG_COUNTER (if_conversion)\n DEBUG_COUNTER (if_conversion_tree)\n DEBUG_COUNTER (ipa_cp_bits)\n+DEBUG_COUNTER (ipa_cp_values)\n+DEBUG_COUNTER (ipa_cp_vr)\n DEBUG_COUNTER (ipa_mod_ref)\n DEBUG_COUNTER (ipa_sra_params)\n DEBUG_COUNTER (ipa_sra_retvalues)"}, {"sha": "465b072d88da29a03e607c312012d3dddb149e66", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=86deadf8d3ac55b3cd07e15d4e83e3b6ccd9ee81", "patch": "@@ -5469,6 +5469,9 @@ decide_about_value (struct cgraph_node *node, int index, HOST_WIDE_INT offset,\n \t\t\t\t\t    &caller_count))\n     return false;\n \n+  if (!dbg_cnt (ipa_cp_values))\n+    return false;\n+\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n       fprintf (dump_file, \" - considering value \");\n@@ -5584,6 +5587,12 @@ decide_whether_version_node (struct cgraph_node *node)\n \n   if (info->do_clone_for_all_contexts)\n     {\n+      if (!dbg_cnt (ipa_cp_values))\n+\t{\n+\t  info->do_clone_for_all_contexts = false;\n+\t  return ret;\n+\t}\n+\n       struct cgraph_node *clone;\n       vec<cgraph_edge *> callers = node->collect_callers ();\n \n@@ -5871,7 +5880,8 @@ ipcp_store_vr_results (void)\n \t  ipa_vr vr;\n \n \t  if (!plats->m_value_range.bottom_p ()\n-\t      && !plats->m_value_range.top_p ())\n+\t      && !plats->m_value_range.top_p ()\n+\t      && dbg_cnt (ipa_cp_vr))\n \t    {\n \t      vr.known = true;\n \t      vr.type = plats->m_value_range.m_vr.kind ();"}]}