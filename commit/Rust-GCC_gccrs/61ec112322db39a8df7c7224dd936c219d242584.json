{"sha": "61ec112322db39a8df7c7224dd936c219d242584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlYzExMjMyMmRiMzlhOGRmN2M3MjI0ZGQ5MzZjMjE5ZDI0MjU4NA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-06T17:51:12Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-06T17:51:12Z"}, "message": "re PR target/22152 (Poor loop optimization when using mmx builtins)\n\n\tPR target/22152\n\t* config/i386/mmx.md (*mov<mode>_internal_rex64,\n\t*mov<mode>_internal_avx, *mov<mode>_internal,\n\t*movv2sf_internal_rex64_avx, *movv2sf_internal_rex64,\n\t*movv2sf_internal_avx, *movv2sf_internal): Split out !y-!y alternative.\n[\n\nFrom-SVN: r163926", "tree": {"sha": "5afecde396f0a6ae03298b8d110e6ceba3731105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5afecde396f0a6ae03298b8d110e6ceba3731105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ec112322db39a8df7c7224dd936c219d242584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ec112322db39a8df7c7224dd936c219d242584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ec112322db39a8df7c7224dd936c219d242584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ec112322db39a8df7c7224dd936c219d242584/comments", "author": null, "committer": null, "parents": [{"sha": "c5ee1358b94d1dc84376932d65d407d928289d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ee1358b94d1dc84376932d65d407d928289d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ee1358b94d1dc84376932d65d407d928289d30"}], "stats": {"total": 116, "additions": 65, "deletions": 51}, "files": [{"sha": "965d0c3002f5fcbff76613b33daf6041526bb224", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ec112322db39a8df7c7224dd936c219d242584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ec112322db39a8df7c7224dd936c219d242584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61ec112322db39a8df7c7224dd936c219d242584", "patch": "@@ -1,3 +1,11 @@\n+2010-09-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/22152\n+\t* config/i386/mmx.md (*mov<mode>_internal_rex64,\n+\t*mov<mode>_internal_avx, *mov<mode>_internal,\n+\t*movv2sf_internal_rex64_avx, *movv2sf_internal_rex64,\n+\t*movv2sf_internal_avx, *movv2sf_internal): Split out !y-!y alternative.\n+\n 2010-09-06  Mark Mitchell  <mark@codesourcery.com>\n \n \t* c-typeck.c (do_warn_double_promotion): Remove.\n@@ -22,8 +30,7 @@\n 2010-09-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/45524\n-\t* configure.ac (enable_decimal_float): Set to\n-\t$default_decimal_float.\n+\t* configure.ac (enable_decimal_float): Set to $default_decimal_float.\n \t* configure: Regenerated.\n \n 2010-09-06  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>"}, {"sha": "a4149c085a411f282477042cca5c16e95d53e374", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 56, "deletions": 49, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ec112322db39a8df7c7224dd936c219d242584/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ec112322db39a8df7c7224dd936c219d242584/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=61ec112322db39a8df7c7224dd936c219d242584", "patch": "@@ -65,9 +65,9 @@\n \n (define_insn \"*mov<mode>_internal_rex64\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r,!?y,!?y ,m  ,!y,*Y2,x,x ,m,r,Yi\")\n+\t \"=rm,r,!?y,!y,!?y,m  ,!y ,*Y2,x,x ,m,r ,Yi\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m,C  ,!?ym,!?y,*Y2,!y,C,xm,x,Yi,r\"))]\n+\t \"Cr ,m,C  ,!y,m  ,!?y,*Y2,!y ,C,xm,x,Yi,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -76,65 +76,68 @@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     %vpxor\\t%0, %d0\n     %vmovq\\t{%1, %0|%0, %1}\n     %vmovq\\t{%1, %0|%0, %1}\n     %vmovq\\t{%1, %0|%0, %1}\n     %vmovq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"unit\" \"*,*,*,*,*,mmx,mmx,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,*,1,1,*,1,*,*,*\")\n-   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,*,1,1,1\")\n+  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"unit\" \"*,*,*,*,*,*,mmx,mmx,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,*,*,1,1,*,1,*,*,*\")\n+   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,*,*,1,1,1\")\n    (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"8,9\")\n+     (if_then_else (eq_attr \"alternative\" \"9,10\")\n        (symbol_ref \"x86_extended_reg_mentioned_p (insn)\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"7,8,9,10,11\")\n+     (if_then_else (eq_attr \"alternative\" \"8,9,10,11,12\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*mov<mode>_internal_avx\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t\t\t\"=!?y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,r  ,m\")\n+\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,r  ,m\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t\t\t\"C   ,!ym,!?y,*Y2,!y ,C  ,*Y2m,*Y2,irm,r\"))]\n+\t \"C   ,!y,m  ,!?y,*Y2,!y ,C  ,*Y2m,*Y2,irm,r\"))]\n   \"TARGET_AVX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     vpxor\\t%0, %0, %0\n     vmovq\\t{%1, %0|%0, %1}\n     vmovq\\t{%1, %0|%0, %1}\n     #\n     #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,*,*\")\n-   (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,*,*,*,*\")\n+  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,*,*\")\n+   (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,*,*,*,*\")\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"5,6,7\")\n+     (if_then_else (eq_attr \"alternative\" \"6,7,8\")\n        (const_string \"vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,DI,DI,DI\")])\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,TI,DI,DI,DI,DI\")])\n \n (define_insn \"*mov<mode>_internal\"\n   [(set (match_operand:MMXMODEI8 0 \"nonimmediate_operand\"\n-\t\t\t\"=!?y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,r  ,m\")\n+\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*Y2,*Y2 ,m  ,*x,*x,*x,m ,r  ,m\")\n \t(match_operand:MMXMODEI8 1 \"vector_move_operand\"\n-\t\t\t\"C   ,!ym,!?y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n+\t \"C   ,!y,m  ,!?y,*Y2,!y ,C  ,*Y2m,*Y2,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     pxor\\t%0, %0\n@@ -146,11 +149,11 @@\n     movlps\\t{%1, %0|%0, %1}\n     #\n     #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov,*,*\")\n-   (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,1,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,1,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n+  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,sselog1,ssemov,ssemov,ssemov,*,*\")\n+   (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_data16\" \"*,*,*,*,*,*,*,*,1,*,*,*,*,*,*\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,TI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_expand \"movv2sf\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\" \"\")\n@@ -163,9 +166,9 @@\n \n (define_insn \"*movv2sf_internal_rex64_avx\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r ,!?y,!?y ,m ,!y,Y2,x,x,x,m,r,x\")\n+\t \"=rm,r,!?y,!y,!?y,m  ,!y,Y2,x,x,x,m,r,x\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C  ,!?ym,!y,Y2,!y,C,x,m,x,x,r\"))]\n+\t \"Cr ,m,C  ,!y,m  ,!?y,Y2,!y,C,x,m,x,x,r\"))]\n   \"TARGET_64BIT && TARGET_AVX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -174,6 +177,7 @@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     vxorps\\t%0, %0, %0\n@@ -182,21 +186,21 @@\n     vmovlps\\t{%1, %0|%0, %1}\n     vmovq\\t{%1, %0|%0, %1}\n     vmovq\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"unit\" \"*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,*,1,1,*,*,*,*,*,*\")\n-   (set_attr \"length_vex\" \"*,*,*,*,*,*,*,*,*,*,*,4,4\")\n+  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"unit\" \"*,*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,*,*,1,1,*,*,*,*,*,*\")\n+   (set_attr \"length_vex\" \"*,*,*,*,*,*,*,*,*,*,*,*,4,4\")\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"7,8,9,10,11,12\")\n+     (if_then_else (eq_attr \"alternative\" \"8,9,10,11,12,13\")\n        (const_string \"vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_insn \"*movv2sf_internal_rex64\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\t\"=rm,r ,!?y,!?y ,m ,!y,*Y2,x,x,x,m,r,Yi\")\n+\t \"=rm,r,!?y,!y,!?y,m  ,!y ,*Y2,x,x,x,m,r ,Yi\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\t\"Cr ,m ,C  ,!?ym,!y,*Y2,!y,C,x,m,x,Yi,r\"))]\n+\t \"Cr ,m,C  ,!y,m  ,!?y,*Y2,!y ,C,x,m,x,Yi,r\"))]\n   \"TARGET_64BIT && TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n@@ -205,6 +209,7 @@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     xorps\\t%0, %0\n@@ -213,22 +218,23 @@\n     movlps\\t{%1, %0|%0, %1}\n     movd\\t{%1, %0|%0, %1}\n     movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n-   (set_attr \"unit\" \"*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,*,*,1,1,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n+  [(set_attr \"type\" \"imov,imov,mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,ssemov,sselog1,ssemov,ssemov,ssemov,ssemov\")\n+   (set_attr \"unit\" \"*,*,*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,*,*,1,1,*,*,*,*,*,*\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_insn \"*movv2sf_internal_avx\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\"=!?y,!?y ,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n+\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\"C   ,!?ym,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n+\t \"C   ,!y,m  ,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_AVX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     vxorps\\t%0, %0, %0\n@@ -237,26 +243,27 @@\n     vmovlps\\t{%1, %0|%0, %1}\n     #\n     #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n-   (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,*,*,*,*,*\")\n+  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n+   (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,*,*,*,*,*\")\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"5,6,7,8\")\n+     (if_then_else (eq_attr \"alternative\" \"6,7,8,9\")\n        (const_string \"vex\")\n        (const_string \"orig\")))\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n (define_insn \"*movv2sf_internal\"\n   [(set (match_operand:V2SF 0 \"nonimmediate_operand\"\n-\t\t\t\"=!?y,!?y ,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n+\t \"=!?y,!y,!?y,m  ,!y ,*Y2,*x,*x,*x,m ,r  ,m\")\n         (match_operand:V2SF 1 \"vector_move_operand\"\n-\t\t\t\"C   ,!?ym,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n+\t \"C   ,!y,m  ,!?y,*Y2,!y ,C ,*x,m ,*x,irm,r\"))]\n   \"TARGET_MMX\n    && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n     pxor\\t%0, %0\n     movq\\t{%1, %0|%0, %1}\n     movq\\t{%1, %0|%0, %1}\n+    movq\\t{%1, %0|%0, %1}\n     movdq2q\\t{%1, %0|%0, %1}\n     movq2dq\\t{%1, %0|%0, %1}\n     xorps\\t%0, %0\n@@ -265,10 +272,10 @@\n     movlps\\t{%1, %0|%0, %1}\n     #\n     #\"\n-  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n-   (set_attr \"unit\" \"*,*,*,mmx,mmx,*,*,*,*,*,*\")\n-   (set_attr \"prefix_rep\" \"*,*,*,1,1,*,*,*,*,*,*\")\n-   (set_attr \"mode\" \"DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n+  [(set_attr \"type\" \"mmx,mmxmov,mmxmov,mmxmov,ssecvt,ssecvt,sselog1,ssemov,ssemov,ssemov,*,*\")\n+   (set_attr \"unit\" \"*,*,*,*,mmx,mmx,*,*,*,*,*,*\")\n+   (set_attr \"prefix_rep\" \"*,*,*,*,1,1,*,*,*,*,*,*\")\n+   (set_attr \"mode\" \"DI,DI,DI,DI,DI,DI,V4SF,V4SF,V2SF,V2SF,DI,DI\")])\n \n ;; %%% This multiword shite has got to go.\n (define_split"}]}