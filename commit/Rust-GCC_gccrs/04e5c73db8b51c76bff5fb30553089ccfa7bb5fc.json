{"sha": "04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRlNWM3M2RiOGI1MWM3NmJmZjVmYjMwNTUzMDg5Y2NmYTdiYjVmYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-09T09:28:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-09T09:28:04Z"}, "message": "re PR target/79645 (missing period in microblaze.opt)\n\n\tPR target/79645\n\t* common.opt (fdiagnostics-show-labels,\n\tfdiagnostics-show-line-numbers, fdiagnostics-format=,\n\tfdiagnostics-minimum-margin-width=, fgnat-encodings=, gas-loc-support,\n\tgas-locview-support, ginline-points, ginternal-reset-location-views):\n\tTerminate description text with a dot.\n\t* config/microblaze/microblaze.opt (mxl-prefetch): Likewise.\n\t* config/mcore/mcore.opt (m210, m340): Likewise.\n\t* config/epiphany/epiphany.opt (mprefer-short-insn-regs, mcmove,\n\tmnops=): Start description text with a capital letter.\n\t* config/arc/arc.opt (msize-level=): Likewise.\n\t* config/sh/sh.opt (minline-ic_invalidate): Likewise.\n\t* config/rs6000/sysv4.opt (mno-toc, mtoc, mno-traceback, mshlib,\n\tmnewlib): Likewise.\n\t* config/ft32/ft32.opt (msim): Likewise.\n\t(mft32b, mcompress): Likewise.  Terminate description text with a dot.\n\t(mnodiv, mnopm): Terminate description text with a dot.\n\t* config/c6x/c6x.opt (c6x_sdata): Terminate Enum description with\n\ta colon.\n\t* config/i386/i386.opt (prefer_vector_width, instrument_return):\n\tLikewise.\n\t* config/rx/rx.opt (nofpu): Remove trailing spaces from description\n\ttext.\nlto/\n\t* lang.opt: Terminate description text with a dot.\n\nFrom-SVN: r269523", "tree": {"sha": "8dcf94c6226f820eacdbd5564d89cee37e83bf7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dcf94c6226f820eacdbd5564d89cee37e83bf7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23c6448136e9a8aa7dbf7a6d2a76efbe8edf1681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23c6448136e9a8aa7dbf7a6d2a76efbe8edf1681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23c6448136e9a8aa7dbf7a6d2a76efbe8edf1681"}], "stats": {"total": 93, "additions": 61, "deletions": 32}, "files": [{"sha": "a4cfe91d0957498220e330e6b98e1e6f5d99eaca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -1,5 +1,29 @@\n 2019-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/79645\n+\t* common.opt (fdiagnostics-show-labels,\n+\tfdiagnostics-show-line-numbers, fdiagnostics-format=,\n+\tfdiagnostics-minimum-margin-width=, fgnat-encodings=, gas-loc-support,\n+\tgas-locview-support, ginline-points, ginternal-reset-location-views):\n+\tTerminate description text with a dot.\n+\t* config/microblaze/microblaze.opt (mxl-prefetch): Likewise.\n+\t* config/mcore/mcore.opt (m210, m340): Likewise.\n+\t* config/epiphany/epiphany.opt (mprefer-short-insn-regs, mcmove,\n+\tmnops=): Start description text with a capital letter.\n+\t* config/arc/arc.opt (msize-level=): Likewise.\n+\t* config/sh/sh.opt (minline-ic_invalidate): Likewise.\n+\t* config/rs6000/sysv4.opt (mno-toc, mtoc, mno-traceback, mshlib,\n+\tmnewlib): Likewise.\n+\t* config/ft32/ft32.opt (msim): Likewise.\n+\t(mft32b, mcompress): Likewise.  Terminate description text with a dot.\n+\t(mnodiv, mnopm): Terminate description text with a dot.\n+\t* config/c6x/c6x.opt (c6x_sdata): Terminate Enum description with\n+\ta colon.\n+\t* config/i386/i386.opt (prefer_vector_width, instrument_return):\n+\tLikewise.\n+\t* config/rx/rx.opt (nofpu): Remove trailing spaces from description\n+\ttext.\n+\n \tPR rtl-optimization/89634\n \t* cfgcleanup.c (thread_jump): Punt if registers mentioned in cond1\n \tare modified in BB_END (e->src) instruction."}, {"sha": "d342c4f3749a39df086236162636f14f91bcd8a0", "filename": "gcc/common.opt", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -1251,11 +1251,11 @@ Show the source line with a caret indicating the column.\n \n fdiagnostics-show-labels\n Common Var(flag_diagnostics_show_labels) Init(1)\n-Show labels annotating ranges of source code when showing source\n+Show labels annotating ranges of source code when showing source.\n \n fdiagnostics-show-line-numbers\n Common Var(flag_diagnostics_show_line_numbers) Init(1)\n-Show line numbers in the left margin when showing source\n+Show line numbers in the left margin when showing source.\n \n fdiagnostics-color\n Common Alias(fdiagnostics-color=,always,never)\n@@ -1283,7 +1283,7 @@ Enum(diagnostic_color_rule) String(auto) Value(DIAGNOSTICS_COLOR_AUTO)\n \n fdiagnostics-format=\n Common Joined RejectNegative Enum(diagnostics_output_format)\n--fdiagnostics-format=[text|json] Select output format\n+-fdiagnostics-format=[text|json] Select output format.\n \n ; Required for these enum values.\n SourceInclude\n@@ -1312,7 +1312,7 @@ Amend appropriate diagnostic messages with the command line option that controls\n \n fdiagnostics-minimum-margin-width=\n Common Joined UInteger Var(diagnostics_minimum_margin_width) Init(6)\n-Set minimum width of left margin of source code when showing source\n+Set minimum width of left margin of source code when showing source.\n \n fdisable-\n Common Joined RejectNegative Var(common_deferred_options) Defer\n@@ -1521,7 +1521,7 @@ Enum(dwarf_gnat_encodings) String(minimal) Value(DWARF_GNAT_ENCODINGS_MINIMAL)\n \n fgnat-encodings=\n Common Enum(dwarf_gnat_encodings) Joined RejectNegative Report Undocumented Var(gnat_encodings)\n--fgnat-encodings=[all|gdb|minimal]\tSelect the balance between GNAT encodings and standard DWARF emitted in the debug information\n+-fgnat-encodings=[all|gdb|minimal]\tSelect the balance between GNAT encodings and standard DWARF emitted in the debug information.\n \n ; This option is not documented yet as its semantics will change.\n fgraphite\n@@ -2969,11 +2969,11 @@ Generate debug information in default format.\n \n gas-loc-support\n Common Driver Var(dwarf2out_as_loc_support) Init(2)\n-Assume assembler support for (DWARF2+) .loc directives\n+Assume assembler support for (DWARF2+) .loc directives.\n \n gas-locview-support\n Common Driver Var(dwarf2out_as_locview_support) Init(2)\n-Assume assembler support for view in (DWARF2+) .loc directives\n+Assume assembler support for view in (DWARF2+) .loc directives.\n \n gcoff\n Common Driver Deprecated\n@@ -3009,11 +3009,11 @@ Generate debug information in default extended format.\n \n ginline-points\n Common Driver Var(debug_inline_points) Init(2)\n-Generate extended entry point information for inlined functions\n+Generate extended entry point information for inlined functions.\n \n ginternal-reset-location-views\n Common Driver Var(debug_internal_reset_location_views) Init(2)\n-Compute locview reset points based on insn length estimates\n+Compute locview reset points based on insn length estimates.\n \n gno-\n RejectNegative Joined Undocumented"}, {"sha": "3e864ddcfe68d3fb917c1ee5865b305566a0814a", "filename": "gcc/config/arc/arc.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Farc%2Farc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Farc%2Farc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -239,7 +239,7 @@ Target RejectNegative Joined Var(arc_cpu) Enum(processor_type) Init(PROCESSOR_NO\n \n msize-level=\n Target RejectNegative Joined UInteger Var(arc_size_opt_level) Init(-1)\n-size optimization level: 0:none 1:opportunistic 2: regalloc 3:drop align, -Os.\n+Size optimization level: 0:none 1:opportunistic 2: regalloc 3:drop align, -Os.\n \n misize\n Target Report PchIgnore Var(TARGET_DUMPISIZE)"}, {"sha": "e7424c9254137458bcc63ab68c36ed13b7f10170", "filename": "gcc/config/c6x/c6x.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fc6x%2Fc6x.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fc6x%2Fc6x.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -43,7 +43,7 @@ Select method for sdata handling.\n \n Enum\n Name(c6x_sdata) Type(enum c6x_sdata)\n-Valid arguments for the -msdata= option.\n+Valid arguments for the -msdata= option:\n \n EnumValue\n Enum(c6x_sdata) String(none) Value(C6X_SDATA_NONE)"}, {"sha": "6c84414286bbc92d696b02c6bc054f9f05346a40", "filename": "gcc/config/epiphany/epiphany.opt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fepiphany%2Fepiphany.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fepiphany%2Fepiphany.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -25,19 +25,19 @@ Don't use any of r32..r63.\n \n mprefer-short-insn-regs\n Target Mask(PREFER_SHORT_INSN_REGS)\n-preferentially allocate registers that allow short instruction generation.\n+Preferentially allocate registers that allow short instruction generation.\n \n mbranch-cost=\n Target RejectNegative Joined UInteger Var(epiphany_branch_cost) Init(3)\n Set branch cost.\n \n mcmove\n Target Mask(CMOVE)\n-enable conditional move instruction usage.\n+Enable conditional move instruction usage.\n \n mnops=\n Target RejectNegative Joined UInteger Var(epiphany_n_nops) Init(0)\n-set number of nops to emit before each insn pattern.\n+Set number of nops to emit before each insn pattern.\n \n ; Problems with using the flags from fsub for comparison are:\n ; - Because of underflow (lack of subnormal numbers), different small numbers"}, {"sha": "10905a7c2a01360859edd8babf313de5f2cc5643", "filename": "gcc/config/ft32/ft32.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fft32%2Fft32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fft32%2Fft32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fft32%2Fft32.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -20,24 +20,24 @@\n \n msim\n Target Report Mask(SIM)\n-target the software simulator.\n+Target the software simulator.\n \n mlra\n Target Report Var(ft32_lra_flag) Init(0) Save\n Use LRA instead of reload.\n \n mnodiv\n Target Report Mask(NODIV)\n-Avoid use of the DIV and MOD instructions\n+Avoid use of the DIV and MOD instructions.\n \n mft32b\n Target Report Mask(FT32B)\n-target the FT32B architecture\n+Target the FT32B architecture.\n \n mcompress\n Target Report Mask(COMPRESS)\n-enable FT32B code compression\n+Enable FT32B code compression.\n \n mnopm\n Target Report Mask(NOPM)\n-Avoid placing any readable data in program memory\n+Avoid placing any readable data in program memory."}, {"sha": "5fb2ec6aeae5236bac1c25c8a907f98aaa1ae228", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -601,7 +601,7 @@ Use given register vector width instructions instead of maximum register width i\n \n Enum\n Name(prefer_vector_width) Type(enum prefer_vector_width)\n-Known preferred register vector length (to use with the -mprefer-vector-width= option)\n+Known preferred register vector length (to use with the -mprefer-vector-width= option):\n \n EnumValue\n Enum(prefer_vector_width) String(none) Value(PVW_NONE)\n@@ -1087,7 +1087,7 @@ Instrument function exit in instrumented functions with __fentry__.\n \n Enum\n Name(instrument_return) Type(enum instrument_return)\n-Known choices for return instrumentation with -minstrument-return=\n+Known choices for return instrumentation with -minstrument-return=:\n \n EnumValue\n Enum(instrument_return) String(none) Value(instrument_return_none)"}, {"sha": "418a34e003bd90af38c94096d9847f5ebbff81a0", "filename": "gcc/config/mcore/mcore.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fmcore%2Fmcore.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fmcore%2Fmcore.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -20,11 +20,11 @@\n \n m210\n Target RejectNegative Report InverseMask(M340)\n-Generate code for the M*Core M210\n+Generate code for the M*Core M210.\n \n m340\n Target RejectNegative Report Mask(M340)\n-Generate code for the M*Core M340\n+Generate code for the M*Core M340.\n \n m4byte-functions\n Target Report Mask(OVERALIGN_FUNC)"}, {"sha": "2e46941d08724dea1622783bd5ccb0cf65324c6d", "filename": "gcc/config/microblaze/microblaze.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -125,7 +125,7 @@ Description for mxl-mode-novectors.\n \n mxl-prefetch\n Target Mask(PREFETCH)\n-Use hardware prefetch instruction\n+Use hardware prefetch instruction.\n \n mpic-data-is-text-relative\n Target Mask(PIC_DATA_TEXT_REL)"}, {"sha": "a8ce44baef37282d4e19526ace7b7d0d0dc9f0f1", "filename": "gcc/config/rs6000/sysv4.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Frs6000%2Fsysv4.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -83,11 +83,11 @@ Produce big endian code.\n ;; FIXME: This does nothing.  What should be done?\n mno-toc\n Target RejectNegative\n-no description yet.\n+No description yet.\n \n mtoc\n Target RejectNegative\n-no description yet.\n+No description yet.\n \n mprototype\n Target Var(target_prototype) Save\n@@ -96,7 +96,7 @@ Assume all variable arg functions are prototyped.\n ;; FIXME: Does nothing.\n mno-traceback\n Target RejectNegative\n-no description yet.\n+No description yet.\n \n meabi\n Target Report Mask(EABI) Var(rs6000_isa_flags)\n@@ -138,7 +138,7 @@ Set the PPC_EMB bit in the ELF flags header.\n \n mshlib\n Target RejectNegative\n-no description yet.\n+No description yet.\n \n m64\n Target Report RejectNegative Negative(m32) Mask(64BIT) Var(rs6000_isa_flags)\n@@ -150,7 +150,7 @@ Generate 32-bit code.\n \n mnewlib\n Target RejectNegative\n-no description yet.\n+No description yet.\n \n msecure-plt\n Target Report RejectNegative Var(secure_plt, 1) Save"}, {"sha": "50814a17a75dcd330c5e24373210a4083cfd6e54", "filename": "gcc/config/rx/rx.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Frx%2Frx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Frx%2Frx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -34,7 +34,7 @@ Stores doubles in 32 bits.  This is the default.\n \n nofpu\n Target RejectNegative Alias(mnofpu)\n-Disable the use of RX FPU instructions.  \n+Disable the use of RX FPU instructions.\n \n mnofpu\n Target RejectNegative Mask(NO_USE_FPU) Report Undocumented"}, {"sha": "8eb1a4e121aacc68db1af5d8ecafe488cdb8440d", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -236,7 +236,7 @@ Increase the IEEE compliance for floating-point comparisons.\n \n minline-ic_invalidate\n Target Report Var(TARGET_INLINE_IC_INVALIDATE)\n-inline code to invalidate instruction cache entries after setting up nested function trampolines.\n+Inline code to invalidate instruction cache entries after setting up nested function trampolines.\n \n misize\n Target Report RejectNegative Mask(DUMPISIZE)"}, {"sha": "96d74b73e9f46cfcd4fe3331090232114f95c49c", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -1,3 +1,8 @@\n+2019-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/79645\n+\t* lang.opt: Terminate description text with a dot.\n+\n 2019-02-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/88049 - ICE with undefined destructor and anon namespace."}, {"sha": "4c4c1ced38cfc7a38fd23376bb1f1dbcc9dc6195", "filename": "gcc/lto/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Flto%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04e5c73db8b51c76bff5fb30553089ccfa7bb5fc/gcc%2Flto%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flang.opt?ref=04e5c73db8b51c76bff5fb30553089ccfa7bb5fc", "patch": "@@ -47,7 +47,7 @@ Enum(lto_linker_output) String(exec) Value(LTO_LINKER_OUTPUT_EXEC)\n \n flinker-output=\n LTO Report Driver Joined RejectNegative Enum(lto_linker_output) Var(flag_lto_linker_output) Init(LTO_LINKER_OUTPUT_UNKNOWN)\n-Set linker output type (used internally during LTO optimization)\n+Set linker output type (used internally during LTO optimization).\n \n \n fltrans"}]}