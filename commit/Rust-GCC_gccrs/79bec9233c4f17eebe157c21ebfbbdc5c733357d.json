{"sha": "79bec9233c4f17eebe157c21ebfbbdc5c733357d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliZWM5MjMzYzRmMTdlZWJlMTU3YzIxZWJmYmJkYzVjNzMzMzU3ZA==", "commit": {"author": {"name": "Satoru Takabayashi", "email": "satorux@google.com", "date": "2011-05-11T18:28:14Z"}, "committer": {"name": "Paul Pluzhnikov", "email": "ppluzhnikov@gcc.gnu.org", "date": "2011-05-11T18:28:14Z"}, "message": "install.texi (Configuration): Document --with-linker-hash-style.\n\n2011-05-11  Satoru Takabayashi  <satorux@google.com>\n\t    Paul Pluzhnikov  <ppluzhnikov@google.com>\n\n\t* gcc/doc/install.texi (Configuration): Document\n\t--with-linker-hash-style.\n\t* gcc/gcc.c (init_spec): Handle LINKER_HASH_STYLE.\n\t* gcc/config.in: Add LINKER_HASH_STYLE.\n\t* gcc/configure.ac: Add --with-linker-hash-style.\n\t* gcc/configure: Regenerate.\n\n\nCo-Authored-By: Paul Pluzhnikov <ppluzhnikov@google.com>\n\nFrom-SVN: r173668", "tree": {"sha": "2291400aa0fc2186bd4074198aeca58dd81e6625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2291400aa0fc2186bd4074198aeca58dd81e6625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79bec9233c4f17eebe157c21ebfbbdc5c733357d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bec9233c4f17eebe157c21ebfbbdc5c733357d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bec9233c4f17eebe157c21ebfbbdc5c733357d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bec9233c4f17eebe157c21ebfbbdc5c733357d/comments", "author": null, "committer": null, "parents": [{"sha": "e5b00edff55b11ccb722f6a14f6449b68bec8069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b00edff55b11ccb722f6a14f6449b68bec8069", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b00edff55b11ccb722f6a14f6449b68bec8069"}], "stats": {"total": 95, "additions": 92, "deletions": 3}, "files": [{"sha": "fae9956804e55ae33bb31389fd9f9329e3e4d603", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79bec9233c4f17eebe157c21ebfbbdc5c733357d", "patch": "@@ -1,3 +1,13 @@\n+2011-05-11  Satoru Takabayashi  <satorux@google.com>\n+\t    Paul Pluzhnikov  <ppluzhnikov@google.com>\n+\n+\t* gcc/doc/install.texi (Configuration): Document\n+\t--with-linker-hash-style.\n+\t* gcc/gcc.c (init_spec): Handle LINKER_HASH_STYLE.\n+\t* gcc/config.in: Add LINKER_HASH_STYLE.\n+\t* gcc/configure.ac: Add --with-linker-hash-style.\n+\t* gcc/configure: Regenerate.\n+\n 2011-05-11  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/48964"}, {"sha": "43aa919e669b9dfa6d77924489ad1c5388e98608", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=79bec9233c4f17eebe157c21ebfbbdc5c733357d", "patch": "@@ -1580,6 +1580,12 @@\n #endif\n \n \n+/* The linker hash style */\n+#ifndef USED_FOR_TARGET\n+#undef LINKER_HASH_STYLE\n+#endif\n+\n+\n /* Define to the name of the LTO plugin DSO that must be passed to the\n    linker's -plugin=LIB option. */\n #ifndef USED_FOR_TARGET"}, {"sha": "9317601817438a31cc3cb573bc17833a17448d51", "filename": "gcc/configure", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=79bec9233c4f17eebe157c21ebfbbdc5c733357d", "patch": "@@ -915,6 +915,7 @@ enable_version_specific_runtime_libs\n with_slibdir\n enable_plugin\n enable_libquadmath_support\n+with_linker_hash_style\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1665,6 +1666,8 @@ Optional Packages:\n                           with the compiler\n   --with-system-zlib      use installed libz\n   --with-slibdir=DIR      shared libraries in DIR [LIBDIR]\n+  --with-linker-hash-style={sysv,gnu,both}\n+                          specify the linker hash style\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -17514,7 +17517,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17517 \"configure\"\n+#line 17520 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17620,7 +17623,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17623 \"configure\"\n+#line 17626 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -26469,6 +26472,36 @@ $as_echo \"#define ENABLE_LIBQUADMATH_SUPPORT 1\" >>confdefs.h\n fi\n \n \n+# Specify what hash style to use by default.\n+\n+# Check whether --with-linker-hash-style was given.\n+if test \"${with_linker_hash_style+set}\" = set; then :\n+  withval=$with_linker_hash_style; case x\"$withval\" in\n+   xsysv)\n+     LINKER_HASH_STYLE=sysv\n+     ;;\n+   xgnu)\n+     LINKER_HASH_STYLE=gnu\n+     ;;\n+   xboth)\n+     LINKER_HASH_STYLE=both\n+     ;;\n+   *)\n+     as_fn_error \"$withval is an invalid option to --with-linker-hash-style\" \"$LINENO\" 5\n+     ;;\n+ esac\n+else\n+  LINKER_HASH_STYLE=''\n+fi\n+\n+if test x\"${LINKER_HASH_STYLE}\" != x; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LINKER_HASH_STYLE \"$LINKER_HASH_STYLE\"\n+_ACEOF\n+\n+fi\n+\n # Configure the subdirectories\n # AC_CONFIG_SUBDIRS($subdirs)\n "}, {"sha": "92d9e2950866e89e07218b6a7f77348c476f7411", "filename": "gcc/configure.ac", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=79bec9233c4f17eebe157c21ebfbbdc5c733357d", "patch": "@@ -4942,6 +4942,30 @@ if test \"${ENABLE_LIBQUADMATH_SUPPORT}\" != \"no\" ; then\n fi\n \n \n+# Specify what hash style to use by default.\n+AC_ARG_WITH([linker-hash-style],\n+[AC_HELP_STRING([--with-linker-hash-style={sysv,gnu,both}],\n+                [specify the linker hash style])],\n+[case x\"$withval\" in\n+   xsysv)\n+     LINKER_HASH_STYLE=sysv\n+     ;;\n+   xgnu)\n+     LINKER_HASH_STYLE=gnu\n+     ;;\n+   xboth)\n+     LINKER_HASH_STYLE=both\n+     ;;\n+   *)\n+     AC_MSG_ERROR([$withval is an invalid option to --with-linker-hash-style])\n+     ;;\n+ esac],\n+[LINKER_HASH_STYLE=''])\n+if test x\"${LINKER_HASH_STYLE}\" != x; then\n+  AC_DEFINE_UNQUOTED(LINKER_HASH_STYLE, \"$LINKER_HASH_STYLE\",\n+                                         [The linker hash style])\n+fi\n+\n # Configure the subdirectories\n # AC_CONFIG_SUBDIRS($subdirs)\n "}, {"sha": "904b805dc6182f591a5531bd479d0840344a1ba4", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=79bec9233c4f17eebe157c21ebfbbdc5c733357d", "patch": "@@ -1659,6 +1659,11 @@ option), if the linker supports it.  If you specify\n support @option{--build-id} option, a warning is issued and the\n @option{--enable-linker-build-id} option is ignored.  The default is off.\n \n+@item --with-linker-hash-style=@var{choice}\n+Tells GCC to pass @option{--hash-style=@var{choice}} option to the\n+linker for all final links. @var{choice} can be one of\n+@samp{sysv}, @samp{gnu}, and @samp{both} where @samp{sysv} is the default.\n+\n @item --enable-gnu-unique-object\n @itemx --disable-gnu-unique-object\n Tells GCC to use the gnu_unique_object relocation for C++ template"}, {"sha": "c43e45ab427add091f0917cdb39cd05c4a0c9a5f", "filename": "gcc/gcc.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bec9233c4f17eebe157c21ebfbbdc5c733357d/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=79bec9233c4f17eebe157c21ebfbbdc5c733357d", "patch": "@@ -1438,14 +1438,25 @@ init_spec (void)\n   }\n #endif\n \n-#if defined LINK_EH_SPEC || defined LINK_BUILDID_SPEC\n+#if defined LINK_EH_SPEC || defined LINK_BUILDID_SPEC || \\\n+    defined LINKER_HASH_STYLE\n # ifdef LINK_BUILDID_SPEC\n   /* Prepend LINK_BUILDID_SPEC to whatever link_spec we had before.  */\n   obstack_grow (&obstack, LINK_BUILDID_SPEC, sizeof(LINK_BUILDID_SPEC) - 1);\n # endif\n # ifdef LINK_EH_SPEC\n   /* Prepend LINK_EH_SPEC to whatever link_spec we had before.  */\n   obstack_grow (&obstack, LINK_EH_SPEC, sizeof(LINK_EH_SPEC) - 1);\n+# endif\n+# ifdef LINKER_HASH_STYLE\n+  /* Prepend --hash-style=LINKER_HASH_STYLE to whatever link_spec we had\n+     before.  */\n+  {\n+    static const char hash_style[] = \"--hash-style=\";\n+    obstack_grow (&obstack, hash_style, sizeof(hash_style) - 1);\n+    obstack_grow (&obstack, LINKER_HASH_STYLE, sizeof(LINKER_HASH_STYLE) - 1);\n+    obstack_1grow (&obstack, ' ');\n+  }\n # endif\n   obstack_grow0 (&obstack, link_spec, strlen (link_spec));\n   link_spec = XOBFINISH (&obstack, const char *);"}]}