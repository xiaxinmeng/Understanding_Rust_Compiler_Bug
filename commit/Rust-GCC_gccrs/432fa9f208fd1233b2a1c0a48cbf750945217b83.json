{"sha": "432fa9f208fd1233b2a1c0a48cbf750945217b83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyZmE5ZjIwOGZkMTIzM2IyYTFjMGE0OGNiZjc1MDk0NTIxN2I4Mw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2001-07-19T18:08:17Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2001-07-19T18:08:17Z"}, "message": "osf.h (ASM_OUTPUT_WEAK_ALIAS, [...]): Define.\n\n\t* config/alpha/osf.h (ASM_OUTPUT_WEAK_ALIAS, ASM_WEAKEN_LABEL,\n\tHANDLE_SYSV_PRAGMA): Define.\n\t* mips-tfile.c (add_ext_symbol): Pass complete symbol ptr, inline\n\tprevious args.\n\t(copy_object): Caller changed.\n\n\ttestsuite:\n\t* g++.old-deja/g++.pt/static3.C: Removed alpha*-*-osf* XFAIL.\n\tg++.old-deja/g++.pt/static6.C: Likewise.\n\t* lib/target-supports.exp (check_weak_available): alpha*-*-osf*\n\tsupports weak symbols.\n\nFrom-SVN: r44153", "tree": {"sha": "29f37a4bd9ffd0c7abd0a476ec4b4ae64881e8be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29f37a4bd9ffd0c7abd0a476ec4b4ae64881e8be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/432fa9f208fd1233b2a1c0a48cbf750945217b83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432fa9f208fd1233b2a1c0a48cbf750945217b83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432fa9f208fd1233b2a1c0a48cbf750945217b83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432fa9f208fd1233b2a1c0a48cbf750945217b83/comments", "author": null, "committer": null, "parents": [{"sha": "deaabf1413702dac464e2814ab1d57338a3d686f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deaabf1413702dac464e2814ab1d57338a3d686f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deaabf1413702dac464e2814ab1d57338a3d686f"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "88ab499e2260a397ffaf0bae0b954a13920c3ba2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -1,3 +1,11 @@\n+2001-07-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* config/alpha/osf.h (ASM_OUTPUT_WEAK_ALIAS, ASM_WEAKEN_LABEL,\n+\tHANDLE_SYSV_PRAGMA): Define.\n+\t* mips-tfile.c (add_ext_symbol): Pass complete symbol ptr, inline\n+\tprevious args.\n+\t(copy_object): Caller changed.\n+\n 2001-07-19  Andreas Schwab  <schwab@suse.de>\n \n \t* configure.in (assembler dwarf2 debug_line support): Define nop"}, {"sha": "250974c46e7b7666178191e6677e2702514a6e64", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -186,3 +186,26 @@ __enable_execute_stack (addr)\t\t\t\t\t\t\\\n   (TARGET_GAS\t\t\t\t\t\t\t\t     \\\n    ? (((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4) \\\n    : DW_EH_PE_aligned)\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#define ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, VALUE)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      ASM_GLOBALIZE_LABEL (FILE, NAME);\t\t\t\\\n+      fputs (\"\\t.weakext\\t\", FILE);\t\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\\\n+      if (VALUE)\t\t\t\t\t\\\n+        {\t\t\t\t\t\t\\\n+          fputc (' ', FILE);\t\t\t\t\\\n+          assemble_name (FILE, VALUE);\t\t\t\\\n+        }\t\t\t\t\t\t\\\n+      fputc ('\\n', FILE);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define ASM_WEAKEN_LABEL(FILE, NAME) ASM_OUTPUT_WEAK_ALIAS(FILE, NAME, 0)\n+\n+/* Handle #pragma weak and #pragma pack.  */\n+#undef HANDLE_SYSV_PRAGMA\n+#define HANDLE_SYSV_PRAGMA 1"}, {"sha": "5de540a03bdf1d88f05382fb9c3bacd8ba003c81", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 16, "deletions": 29, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -1624,13 +1624,8 @@ STATIC symint_t\tadd_local_symbol\n \t\t\t\t\t symint_t,\n \t\t\t\t\t symint_t));\n \n-STATIC symint_t\tadd_ext_symbol\tPARAMS ((const char *,\n-\t\t\t\t\t const char *,\n-\t\t\t\t\t st_t,\n-\t\t\t\t\t sc_t,\n-\t\t\t\t\t long,\n-\t\t\t\t\t symint_t,\n-\t\t\t\t\t int));\n+STATIC symint_t\tadd_ext_symbol\tPARAMS ((EXTR *,\n+  \t\t\t\t\t int));\n \n STATIC symint_t\tadd_aux_sym_symint\n \t\t\t\tPARAMS ((symint_t));\n@@ -2044,23 +2039,24 @@ add_local_symbol (str_start, str_end_p1, type, storage, value, indx)\n /* Add an external symbol.  */\n \n STATIC symint_t\n-add_ext_symbol (str_start, str_end_p1, type, storage, value, indx, ifd)\n-     const char *str_start;\t\t/* first byte in string */\n-     const char *str_end_p1;\t\t/* first byte after string */\n-     st_t type;\t\t\t\t/* symbol type */\n-     sc_t storage;\t\t\t/* storage class */\n-     long value;\t\t\t/* value of symbol */\n-     symint_t indx;\t\t\t/* index to local/aux. syms */\n+add_ext_symbol (esym, ifd)\n+     EXTR *esym;\t\t\t/* symbol pointer */\n      int ifd;\t\t\t\t/* file index */\n {\n+  const char *str_start;\t\t/* first byte in string */\n+  const char *str_end_p1;\t\t/* first byte after string */\n   register EXTR *psym;\n   register varray_t *vp = &ext_symbols;\n   shash_t *hash_ptr = (shash_t *) 0;\n \n+  str_start = ORIG_ESTRS (esym->asym.iss);\n+  str_end_p1 = str_start + strlen(str_start);\n+\n   if (debug > 1)\n     {\n-      const char *sc_str = sc_to_string (storage);\n-      const char *st_str = st_to_string (type);\n+      long value = esym->asym.value;\n+      const char *sc_str = sc_to_string (esym->asym.sc);\n+      const char *st_str = st_to_string (esym->asym.st);\n \n       fprintf (stderr,\n \t       \"\\tesym\\tv= %10ld, ifd= %2d, sc= %-12s\",\n@@ -2078,11 +2074,9 @@ add_ext_symbol (str_start, str_end_p1, type, storage, value, indx, ifd)\n \n   psym = &vp->last->datum->esym[ vp->objects_last_page++ ];\n \n+  *psym = *esym;\n   psym->ifd = ifd;\n-  psym->asym.value = value;\n-  psym->asym.st    = (unsigned) type;\n-  psym->asym.sc    = (unsigned) storage;\n-  psym->asym.index = indx;\n+  psym->asym.index = indexNil;\n   psym->asym.iss   = (str_start == (const char *) 0)\n \t\t\t? 0\n \t\t\t: add_string (&ext_strings,\n@@ -4629,17 +4623,10 @@ copy_object ()\n   for (es = 0; es < orig_sym_hdr.iextMax; es++)\n     {\n       register EXTR *eptr = orig_ext_syms + es;\n-      register char *ename = ORIG_ESTRS (eptr->asym.iss);\n       register unsigned ifd = eptr->ifd;\n \n-      (void) add_ext_symbol (ename,\n-\t\t\t     ename + strlen (ename),\n-\t\t\t     (st_t) eptr->asym.st,\n-\t\t\t     (sc_t) eptr->asym.sc,\n-\t\t\t     eptr->asym.value,\n-\t\t\t     (symint_t) indexNil,\n-\t\t\t     ((long) ifd < orig_sym_hdr.ifdMax\n-\t\t\t      ? remap_file_number[ifd] : (int) ifd));\n+      (void) add_ext_symbol (eptr, ((long) ifd < orig_sym_hdr.ifdMax)\n+\t\t\t     ? remap_file_number[ ifd ] : ifd );\n     }\n \n "}, {"sha": "c5dd4b216262895363aec21f3582668df22d8db6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -1,3 +1,10 @@\n+2001-07-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* g++.old-deja/g++.pt/static3.C: Removed alpha*-*-osf* XFAIL.\n+\tg++.old-deja/g++.pt/static6.C: Likewise.\n+\t* lib/target-supports.exp (check_weak_available): alpha*-*-osf*\n+\tsupports weak symbols.\n+\n 2001-07-18  Andreas Jaeger  <aj@suse.de>\n \n \t* g++.dg/vtgc1.C: Revert patch from 2001-04-26 since vtable-gc is"}, {"sha": "bfcfbdbe743c53f01dd6bab700f2cae2c6589343", "filename": "gcc/testsuite/g++.old-deja/g++.pt/static3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic3.C?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -1,6 +1,6 @@\n // On targets that don't support weak symbols, we require an explicit\n // instantiation of arr.\n-// excess errors test - XFAIL *-*-aout *-*-coff *-*-hpux* alpha*-dec-osf* *-*-hms\n+// excess errors test - XFAIL *-*-aout *-*-coff *-*-hpux* *-*-hms\n \n template<class T>\n struct A {"}, {"sha": "8052dc219a3098ba8a47dcd51d4448562b2ec074", "filename": "gcc/testsuite/g++.old-deja/g++.pt/static6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fstatic6.C?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -1,5 +1,5 @@\n // Build don't run:\n-// excess errors test - XFAIL *-*-aout *-*-coff *-*-hpux* alpha*-dec-osf* *-*-hms\n+// excess errors test - XFAIL *-*-aout *-*-coff *-*-hpux* *-*-hms\n \n // Simplified from testcase by Erez Louidor Lior <s3824888@techst02.technion.ac.il>\n "}, {"sha": "8664256787809aaaed702bc659036150b09280f8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/432fa9f208fd1233b2a1c0a48cbf750945217b83/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=432fa9f208fd1233b2a1c0a48cbf750945217b83", "patch": "@@ -27,6 +27,7 @@\n # this proc returns 1 if they're supported, 0 if they're not, or -1 if unsure\n \n proc check_weak_available { } {\n+    global target_triplet\n     global target_cpu\n \n     # All mips targets should support it\n@@ -35,6 +36,12 @@ proc check_weak_available { } {\n         return 1\n     }\n \n+    # DEC OSF/1/Digital UNIX/Tru64 UNIX supports it\n+\n+    if { [regexp \"alpha.*osf.*\" $target_triplet] } {\n+\treturn 1\n+    }\n+\n     # ELF and ECOFF support it. a.out does with gas/gld but may also with\n     # other linkers, so we should try it\n "}]}