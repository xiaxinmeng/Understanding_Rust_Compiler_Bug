{"sha": "bca467e56fe111fa6d876656c60d5704065e83fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhNDY3ZTU2ZmUxMTFmYTZkODc2NjU2YzYwZDU3MDQwNjVlODNmZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-12T21:16:44Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-01-22T00:22:01Z"}, "message": "c++: ICE with delayed noexcept and attribute used [PR97966]\n\nAnother ICE with delayed noexcept parsing, but a bit gnarlier.\n\nA function definition marked with __attribute__((used)) ought to be\nemitted even when it is not referenced in the TU.  For a member function\ntemplate marked with __attribute__((used)) this means that it will\nbe instantiated: in instantiate_class_template_1 we have\n\n11971               /* Instantiate members marked with attribute used.  */\n11972               if (r != error_mark_node && DECL_PRESERVE_P (r))\n11973                 mark_used (r);\n\nIt is not so surprising that this doesn't work well with delayed\nnoexcept parsing: when we're processing the function template we delay\nthe parsing, so the member \"foo\" is found, but then when we're\ninstantiating it, \"foo\" hasn't yet been seen, which creates a\ndiscrepancy and a crash ensues.  \"foo\" hasn't yet been seen because\ninstantiate_class_template_1 just loops over the class members and\ninstantiates right away.\n\nTo make it work, this patch uses a vector to keep track of members\nmarked with attribute used and uses it to instantiate such members\nonly after we're done with the class; in particular, after we have\ncalled finish_member_declaration for each member.  And we ought to\nbe verifying that we did emit such members, so I've added a bunch\nof dg-finals.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97966\n\t* pt.c (instantiate_class_template_1): Instantiate members\n\tmarked with attribute used only after we're done instantiating\n\tthe class.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97966\n\t* g++.dg/cpp0x/noexcept63.C: New test.", "tree": {"sha": "b3b2b30911d0fbfd08bf01044ab9a3319845aa98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3b2b30911d0fbfd08bf01044ab9a3319845aa98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca467e56fe111fa6d876656c60d5704065e83fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca467e56fe111fa6d876656c60d5704065e83fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca467e56fe111fa6d876656c60d5704065e83fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca467e56fe111fa6d876656c60d5704065e83fe/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "070a1fb5f5254a08cd87783a1b51c3a3ac7ae18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070a1fb5f5254a08cd87783a1b51c3a3ac7ae18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070a1fb5f5254a08cd87783a1b51c3a3ac7ae18e"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "63a0a1104404109d486bfe515bdbc41cf71a4514", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca467e56fe111fa6d876656c60d5704065e83fe/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca467e56fe111fa6d876656c60d5704065e83fe/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bca467e56fe111fa6d876656c60d5704065e83fe", "patch": "@@ -11895,6 +11895,9 @@ instantiate_class_template_1 (tree type)\n      relative to the scope of the class.  */\n   pop_to_parent_deferring_access_checks ();\n \n+  /* A vector to hold members marked with attribute used. */\n+  auto_vec<tree> used;\n+\n   /* Now members are processed in the order of declaration.  */\n   for (member = CLASSTYPE_DECL_LIST (pattern);\n        member; member = TREE_CHAIN (member))\n@@ -11968,7 +11971,7 @@ instantiate_class_template_1 (tree type)\n \t      finish_member_declaration (r);\n \t      /* Instantiate members marked with attribute used.  */\n \t      if (r != error_mark_node && DECL_PRESERVE_P (r))\n-\t\tmark_used (r);\n+\t\tused.safe_push (r);\n \t      if (TREE_CODE (r) == FUNCTION_DECL\n \t\t  && DECL_OMP_DECLARE_REDUCTION_P (r))\n \t\tcp_check_omp_declare_reduction (r);\n@@ -12034,7 +12037,7 @@ instantiate_class_template_1 (tree type)\n \t\t\t     /*flags=*/0);\n \t\t\t  /* Instantiate members marked with attribute used. */\n \t\t\t  if (r != error_mark_node && DECL_PRESERVE_P (r))\n-\t\t\t    mark_used (r);\n+\t\t\t    used.safe_push (r);\n \t\t\t}\n \t\t      else if (TREE_CODE (r) == FIELD_DECL)\n \t\t\t{\n@@ -12225,6 +12228,11 @@ instantiate_class_template_1 (tree type)\n   if (TYPE_CONTAINS_VPTR_P (type) && CLASSTYPE_KEY_METHOD (type))\n     vec_safe_push (keyed_classes, type);\n \n+  /* Now that we've gone through all the members, instantiate those\n+     marked with attribute used.  */\n+  for (tree x : used)\n+    mark_used (x);\n+\n   return type;\n }\n "}, {"sha": "cf048f56c2acbd4356402aac77781291c4b2d286", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept63.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca467e56fe111fa6d876656c60d5704065e83fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca467e56fe111fa6d876656c60d5704065e83fe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept63.C?ref=bca467e56fe111fa6d876656c60d5704065e83fe", "patch": "@@ -0,0 +1,63 @@\n+// PR c++/97966\n+// { dg-do compile { target c++11 } }\n+\n+template <int>\n+struct S1 {\n+  __attribute__((used)) S1() noexcept(noexcept(this->foo())) { }\n+  void foo();\n+};\n+\n+template <int>\n+struct S2 {\n+  __attribute__((used)) void bar() noexcept(noexcept(this->foo())) { }\n+  void foo();\n+};\n+\n+template <int>\n+struct S3 {\n+  void __attribute__((used)) bar() noexcept(noexcept(this->foo())) { }\n+  void foo();\n+};\n+\n+template <int>\n+struct S4 {\n+  [[gnu::used]] void bar() noexcept(noexcept(this->foo())) { }\n+  void foo();\n+};\n+\n+template <int>\n+struct S5 {\n+  void bar() noexcept(noexcept(this->foo())) __attribute__((used)) { }\n+  void foo();\n+};\n+\n+template <int>\n+struct S6 {\n+  template <int>\n+  struct N {\n+    [[gnu::used]] void bar() noexcept(noexcept(this->foo())) { }\n+    void foo();\n+  };\n+};\n+\n+void\n+g ()\n+{\n+  S1<1> s1;\n+  S2<1> s2;\n+  S3<1> s3;\n+  S4<1> s4;\n+  S5<1> s5;\n+  S6<1>::N<1> n;\n+}\n+\n+// Make sure that we did emit the functions marked with attribute used\n+// even though they're not referenced in this TU.  (Well, the S1()\n+// constructor is.)\n+// { dg-final { scan-assembler \"_ZN2S1ILi1EEC1Ev\" } }\n+// { dg-final { scan-assembler \"_ZN2S1ILi1EEC2Ev\" } }\n+// { dg-final { scan-assembler \"_ZN2S2ILi1EE3barEv\" } }\n+// { dg-final { scan-assembler \"_ZN2S3ILi1EE3barEv\" } }\n+// { dg-final { scan-assembler \"_ZN2S4ILi1EE3barEv\" } }\n+// { dg-final { scan-assembler \"_ZN2S5ILi1EE3barEv\" } }\n+// { dg-final { scan-assembler \"_ZN2S6ILi1EE1NILi1EE3barEv\" } }"}]}