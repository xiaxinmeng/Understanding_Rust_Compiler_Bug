{"sha": "886e9779581102caf97cd05dea80d9be87c24784", "node_id": "C_kwDOANBUbNoAKDg4NmU5Nzc5NTgxMTAyY2FmOTdjZDA1ZGVhODBkOWJlODdjMjQ3ODQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-21T18:42:30Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-01-21T18:50:22Z"}, "message": "PR middle-end/104140: bootstrap ICE on riscv.\n\nThis patch resolves the P1 \"ice-on-valid-code\" regression boostrapping\nGCC on risv-unknown-linux-gnu caused by my recent MULT_HIGHPART_EXPR\nfunctionality.  RISC-V differs from x86_64 and many targets by\nsupporting a usmusidi3 instruction, basically a widening multiply\nwhere one operand is signed and the other is unsigned.  Alas the\nfinal version of my patch to recognize MULT_HIGHPART_EXPR didn't\nsufficiently defend against the operands of WIDEN_MULT_EXPR having\ndifferent signedness.  This is fixed by the two-line change to\ntree-ssa-math-opts.cc's convert_mult_to_highpart in the patch below.\n\nThe majority of the rest of the patch is to the documentation\n(in tree.def and generic.texi).  It turns out that WIDEN_MULT_EXPR\nwasn't previously documented in generic.texi, let alone the slightly\nunusual semantics of allowing mismatched (signed vs unsigned) operands.\nThis also clarifies that MULT_HIGHPART_EXPR currently requires the\nsignedness of operands to match [but this might change in a future\nrelease of GCC to support targets with usmul<mode>3_highpart].\n\nThe one final chunk of this patch (that is hopefully sufficiently\nclose to obvious for stage 4) is a similar (NULL pointer) sanity\ncheck in riscv_cpu_cpp_builtins.  Currently running cc1 from the\ncommand line (or from gdb) without specifying -march results in a\nsegmentation fault (ICE).  This is a minor annoyance tracking down\nissues (in cross compilers) for riscv, and trivially fixed as below.\n\n2022-01-22  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/104140\n\t* tree-ssa-math-opts.cc (convert_mult_to_highpart): Check that the\n\toperands of the widening multiplication are either both signed or\n\tboth unsigned, and abort the conversion if mismatched.\n\t* doc/generic.texi (WIDEN_MULT_EXPR): Describe expression node.\n\t(MULT_HIGHPART_EXPR): Clarify that operands must have the same\n\tsignedness.\n\t* tree.def (MULT_HIGHPART_EXPR): Document both operands must have\n\tinteger types with the same precision and signedness.\n\t(WIDEN_MULT_EXPR): Document that operands must have integer types\n\twith the same precision, but possibly differing signedness.\n\t* config/riscv/riscv-c.cc (riscv_cpu_cpp_builtins): Defend against\n\triscv_current_subset_list returning a NULL pointer (empty list).\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/104140\n\t* gcc.target/riscv/pr104140.c: New test case.", "tree": {"sha": "dbc28f07650d7c1ea9d7faf1ce95dffb1e5b230c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc28f07650d7c1ea9d7faf1ce95dffb1e5b230c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/886e9779581102caf97cd05dea80d9be87c24784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886e9779581102caf97cd05dea80d9be87c24784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/886e9779581102caf97cd05dea80d9be87c24784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/886e9779581102caf97cd05dea80d9be87c24784/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85419ac59724b7ce710ebb4acf03dbd747edeea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85419ac59724b7ce710ebb4acf03dbd747edeea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85419ac59724b7ce710ebb4acf03dbd747edeea3"}], "stats": {"total": 41, "additions": 36, "deletions": 5}, "files": [{"sha": "73c62f412742be146134efc4d9baef7e1c3f0c2d", "filename": "gcc/config/riscv/riscv-c.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Fconfig%2Friscv%2Friscv-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Fconfig%2Friscv%2Friscv-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-c.cc?ref=886e9779581102caf97cd05dea80d9be87c24784", "patch": "@@ -108,6 +108,9 @@ riscv_cpu_cpp_builtins (cpp_reader *pfile)\n   builtin_define_with_int_value (\"__riscv_arch_test\", 1);\n \n   const riscv_subset_list *subset_list = riscv_current_subset_list ();\n+  if (!subset_list)\n+    return;\n+\n   size_t max_ext_len = 0;\n \n   /* Figure out the max length of extension name for reserving buffer.   */"}, {"sha": "e5f9d1be8ea81f3da002ec3bb925590d331a2551", "filename": "gcc/doc/generic.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Fdoc%2Fgeneric.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Fdoc%2Fgeneric.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgeneric.texi?ref=886e9779581102caf97cd05dea80d9be87c24784", "patch": "@@ -1318,6 +1318,7 @@ The type of the node specifies the alignment of the access.\n @tindex PLUS_EXPR\n @tindex MINUS_EXPR\n @tindex MULT_EXPR\n+@tindex WIDEN_MULT_EXPR\n @tindex MULT_HIGHPART_EXPR\n @tindex RDIV_EXPR\n @tindex TRUNC_DIV_EXPR\n@@ -1532,10 +1533,18 @@ one operand is of floating type and the other is of integral type.\n The behavior of these operations on signed arithmetic overflow is\n controlled by the @code{flag_wrapv} and @code{flag_trapv} variables.\n \n+@item WIDEN_MULT_EXPR\n+This node represents a widening multiplication.  The operands have\n+integral types with same @var{b} bits of precision, producing an\n+integral type result with at least @math{2@var{b}} bits of precision.\n+The behaviour is equivalent to extending both operands, possibly of\n+different signedness, to the result type, then multiplying them.\n+\n @item MULT_HIGHPART_EXPR\n This node represents the ``high-part'' of a widening multiplication.\n For an integral type with @var{b} bits of precision, the result is\n the most significant @var{b} bits of the full @math{2@var{b}} product.\n+Both operands must have the same precision and same signedness.\n \n @item RDIV_EXPR\n This node represents a floating point division operation."}, {"sha": "648e131109fa4586e8044110e82f35f95747fbc7", "filename": "gcc/testsuite/gcc.target/riscv/pr104140.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr104140.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr104140.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpr104140.c?ref=886e9779581102caf97cd05dea80d9be87c24784", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32im -mabi=ilp32\" } */\n+int x;\n+unsigned u, v;\n+void f (void)\n+{\n+  long long y = x;\n+  u = y * v >> 32;\n+}\n+void g (void) { f (); }\n+"}, {"sha": "ac277756d24bad2adfd55d6cab0cd309e858c760", "filename": "gcc/tree-ssa-math-opts.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Ftree-ssa-math-opts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Ftree-ssa-math-opts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.cc?ref=886e9779581102caf97cd05dea80d9be87c24784", "patch": "@@ -4608,6 +4608,10 @@ convert_mult_to_highpart (gassign *stmt, gimple_stmt_iterator *gsi)\n   if (bits < prec || bits >= 2 * prec)\n     return false;\n \n+  /* For the time being, require operands to have the same sign.  */\n+  if (unsignedp != TYPE_UNSIGNED (TREE_TYPE (mop2)))\n+    return false;\n+\n   machine_mode mode = TYPE_MODE (optype);\n   optab tab = unsignedp ? umul_highpart_optab : smul_highpart_optab;\n   if (optab_handler (tab, mode) == CODE_FOR_nothing)"}, {"sha": "62650b6934b337c5d56e5393dc114173d72c9aa9", "filename": "gcc/tree.def", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/886e9779581102caf97cd05dea80d9be87c24784/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=886e9779581102caf97cd05dea80d9be87c24784", "patch": "@@ -700,7 +700,9 @@ DEFTREECODE (POINTER_PLUS_EXPR, \"pointer_plus_expr\", tcc_binary, 2)\n DEFTREECODE (POINTER_DIFF_EXPR, \"pointer_diff_expr\", tcc_binary, 2)\n \n /* Highpart multiplication.  For an integral type with precision B,\n-   returns bits [2B-1, B] of the full 2*B product.  */\n+   returns bits [2B-1, B] of the full 2*B product.  Both operands\n+   and the result should have integer types of the same precision\n+   and signedness.  */\n DEFTREECODE (MULT_HIGHPART_EXPR, \"mult_highpart_expr\", tcc_binary, 2)\n \n /* Division for integer result that rounds the quotient toward zero.  */\n@@ -1349,10 +1351,12 @@ DEFTREECODE (WIDEN_SUM_EXPR, \"widen_sum_expr\", tcc_binary, 2)\n DEFTREECODE (SAD_EXPR, \"sad_expr\", tcc_expression, 3)\n \n /* Widening multiplication.\n-   The two arguments are of type t1.\n-   The result is of type t2, such that t2 is at least twice\n-   the size of t1. WIDEN_MULT_EXPR is equivalent to first widening (promoting)\n-   the arguments from type t1 to type t2, and then multiplying them.  */\n+   The two arguments are of type t1 and t2, both integral types that\n+   have the same precision, but possibly different signedness.\n+   The result is of integral type t3, such that t3 is at least twice\n+   the size of t1/t2. WIDEN_MULT_EXPR is equivalent to first widening\n+   (promoting) the arguments from type t1 to type t3, and from t2 to\n+   type t3 and then multiplying them.  */\n DEFTREECODE (WIDEN_MULT_EXPR, \"widen_mult_expr\", tcc_binary, 2)\n \n /* Widening multiply-accumulate."}]}