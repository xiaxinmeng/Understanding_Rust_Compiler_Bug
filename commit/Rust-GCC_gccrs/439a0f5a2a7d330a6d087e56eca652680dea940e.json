{"sha": "439a0f5a2a7d330a6d087e56eca652680dea940e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM5YTBmNWEyYTdkMzMwYTZkMDg3ZTU2ZWNhNjUyNjgwZGVhOTQwZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-08-25T22:29:08Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-08-25T22:29:08Z"}, "message": "basic_string.h (basic_string): Add cbegin(), cend(), crbegin(), crend() in C++0x mode.\n\n2009-08-25  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_string.h (basic_string): Add cbegin(),\n\tcend(), crbegin(), crend() in C++0x mode.\n\t* config/abi/pre/gnu.ver: Add exports.\n\n\t* testsuite/util/testsuite_containers.h: New.\n\t* testsuite/util/testsuite_container_traits.h: New.\n\t* testsuite/21_strings/basic_string/requirements/citerators.cc: New.\n\t* testsuite/21_strings/basic_string/requirements/typedefs.cc: New.\n\t* testsuite/ext/vstring/requirements/citerators.cc: Edit.\n\t* testsuite/ext/vstring/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/unordered_map/requirements/\n\tcliterators.cc: Edit.\n\t* testsuite/23_containers/unordered_map/requirements/\n\tciterators.cc: Edit.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/3.cc: New.\n\t* testsuite/23_containers/unordered_map/requirements/typedefs.cc: Edit.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation.cc: Move to nested directory.\n\t* testsuite/23_containers/queue/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/priority_queue/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/multimap/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/multimap/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/set/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/set/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\tcliterators.cc: Edit.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\tciterators.cc: Edit.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/2.cc: Edit.: New.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/3.cc: New.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\ttypedefs.cc: Edit.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation.cc: Move to nested.\n\t* testsuite/23_containers/forward_list/requirements/citerators.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/1.cc: Remove.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor.cc: New.\n\t* testsuite/23_containers/forward_list/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/unordered_set/requirements/\n\tcliterators.cc: Edit.\n\t* testsuite/23_containers/unordered_set/requirements/\n\tciterators.cc: Edit.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/3.cc: New.\n\t* testsuite/23_containers/unordered_set/requirements/typedefs.cc: Edit.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation.cc: Move to nested.\n\t* testsuite/23_containers/vector/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/vector/requirements/dr438/bool/\n\tconstructor.cc: Move.\n\t* testsuite/23_containers/vector/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/vector/bool/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/vector/bool/requirements/dr438/\n\tconstructor.cc: New.\n\t* testsuite/23_containers/deque/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/deque/requirements/typedefs.cc\n\t* testsuite/23_containers/stack/requirements/typedefs.cc\n\t* testsuite/23_containers/multiset/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/multiset/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/list/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/list/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\tcliterators.cc: Edit.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\tciterators.cc: Edit.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation.cc: Move.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/3.cc: New.\n\t* testsuite/23_containers/unordered_multiset/requirements/typedefs.cc\n\t* testsuite/23_containers/map/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/map/requirements/typedefs.cc: New.\n\t* testsuite/23_containers/array/requirements/citerators.cc: Edit.\n\t* testsuite/23_containers/array/requirements/explicit_instantiation.cc:\n\tMove.\n\t* testsuite/23_containers/array/requirements/\n\texplicit_instantiation/1.cc: New.\n\t* testsuite/23_containers/array/requirements/\n\texplicit_instantiation/2.cc: New.\n\t* testsuite/23_containers/array/requirements/typedefs.cc: New.\n\nFrom-SVN: r151106", "tree": {"sha": "57b49f93cf285f8979379f2249d8b9a3d4bcb0e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57b49f93cf285f8979379f2249d8b9a3d4bcb0e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/439a0f5a2a7d330a6d087e56eca652680dea940e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439a0f5a2a7d330a6d087e56eca652680dea940e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/439a0f5a2a7d330a6d087e56eca652680dea940e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/439a0f5a2a7d330a6d087e56eca652680dea940e/comments", "author": null, "committer": null, "parents": [{"sha": "5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634"}], "stats": {"total": 1996, "additions": 1509, "deletions": 487}, "files": [{"sha": "cd892b2c879a9cb223aab63f246be28073338c6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 116, "deletions": 7, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -1,3 +1,112 @@\n+2009-08-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_string.h (basic_string): Add cbegin(),\n+\tcend(), crbegin(), crend() in C++0x mode.\n+\t* config/abi/pre/gnu.ver: Add exports.\n+\n+\t* testsuite/util/testsuite_containers.h: New.\n+\t* testsuite/util/testsuite_container_traits.h: New.\n+\t* testsuite/21_strings/basic_string/requirements/citerators.cc: New.\n+\t* testsuite/21_strings/basic_string/requirements/typedefs.cc: New.\n+\t* testsuite/ext/vstring/requirements/citerators.cc: Edit.\n+\t* testsuite/ext/vstring/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\tcliterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\tciterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/3.cc: New.\n+\t* testsuite/23_containers/unordered_map/requirements/typedefs.cc: Edit.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation.cc: Move to nested directory.\n+\t* testsuite/23_containers/queue/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/priority_queue/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/multimap/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/multimap/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/set/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/set/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\tcliterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\tciterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/2.cc: Edit.: New.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/3.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\ttypedefs.cc: Edit.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation.cc: Move to nested.\n+\t* testsuite/23_containers/forward_list/requirements/citerators.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/1.cc: Remove.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor.cc: New.\n+\t* testsuite/23_containers/forward_list/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\tcliterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\tciterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/3.cc: New.\n+\t* testsuite/23_containers/unordered_set/requirements/typedefs.cc: Edit.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation.cc: Move to nested.\n+\t* testsuite/23_containers/vector/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/vector/requirements/dr438/bool/\n+\tconstructor.cc: Move.\n+\t* testsuite/23_containers/vector/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/vector/bool/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/vector/bool/requirements/dr438/\n+\tconstructor.cc: New.\n+\t* testsuite/23_containers/deque/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/deque/requirements/typedefs.cc\n+\t* testsuite/23_containers/stack/requirements/typedefs.cc\n+\t* testsuite/23_containers/multiset/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/multiset/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/list/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/list/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\tcliterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\tciterators.cc: Edit.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation.cc: Move.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/3.cc: New.\n+\t* testsuite/23_containers/unordered_multiset/requirements/typedefs.cc\n+\t* testsuite/23_containers/map/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/map/requirements/typedefs.cc: New.\n+\t* testsuite/23_containers/array/requirements/citerators.cc: Edit.\n+\t* testsuite/23_containers/array/requirements/explicit_instantiation.cc:\n+\tMove.\n+\t* testsuite/23_containers/array/requirements/\n+\texplicit_instantiation/1.cc: New.\n+\t* testsuite/23_containers/array/requirements/\n+\texplicit_instantiation/2.cc: New.\n+\t* testsuite/23_containers/array/requirements/typedefs.cc: New.\n+\n 2009-08-24  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* configure.ac (AC_PREREQ): Bump to 2.64.\n@@ -76,7 +185,7 @@\n \n \tPR libstdc++/41061\n \t* include/bits/random.h (operator<<(std::basic_ostream<>&,\n-\tconst std::lognormal_distribution<>&), \n+\tconst std::lognormal_distribution<>&),\n \toperator>>(std::basic_istream<>&, std::lognormal_distribution<>&),\n \toperator<<(std::basic_ostream<>&, const std::gamma_distribution<>&),\n \toperator>>(std::basic_istream<>&, std::gamma_distribution<>&),\n@@ -257,12 +366,12 @@\n 2009-08-06  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/compatibility.cc: Make C++0x safe, add in explicit casts to\n-        bool for stream sentry objects.\n-        * include/bits/istream.tcc: Same.\n-        * include/bits/ostream.tcc: Same.\n-        * include/bits/basic_string.tcc: Same.\n+\tbool for stream sentry objects.\n+\t* include/bits/istream.tcc: Same.\n+\t* include/bits/ostream.tcc: Same.\n+\t* include/bits/basic_string.tcc: Same.\n \t* include/bits/ostream_insert.h: Same.\n-        * src/istream.cc: Same.\n+\t* src/istream.cc: Same.\n \n 2009-08-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -1105,7 +1214,7 @@\n \tconst param_type&): Define here.\n \t(geometric_distribution<>::operator()(_UniformRandomNumberGenerator&,\n \tconst param_type&), discrete_distribution<>::operator()\n-\t(_UniformRandomNumberGenerator&, const param_type&), \n+\t(_UniformRandomNumberGenerator&, const param_type&),\n \tpiecewise_constant_distribution<>::operator()\n \t(_UniformRandomNumberGenerator&, const param_type&),\n \tpiecewise_linear_distribution<>::operator()"}, {"sha": "e73b5fef1692857c127e8a0c4ee5d8650e5cf1a7", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -193,7 +193,8 @@ GLIBCXX_3.4 {\n     _ZNSsaSE[PRc]*;\n     _ZNSsixE*;\n     _ZNSspLE[PRc]*;\n-    _ZNKSs[0-9][a-z]*;\n+    _ZNKSs[0-9][a-b]*;\n+    _ZNKSs[0-9][d-z]*;\n     _ZNKSs[0-9][0-9][a-z]*;\n     _ZNKSs[a-z]*;\n     _ZNKSs4_Rep12_M_is_leakedEv;\n@@ -205,12 +206,17 @@ GLIBCXX_3.4 {\n     _ZNKSs8_M_limit*;\n     _ZNKSs9_M_ibeginEv;\n     _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_E*;\n+    _ZNKSs7compare*; \n+    _ZNKSs5c_strEv;\n+    _ZNKSs8capacityEv;\n+    _ZNKSs4copyEPcmm;\n \n     # std::wstring\n     _ZNSbIwSt11char_traitsIwESaIwEEC[12][EI][PRjmvN]*;\n     _ZNSbIwSt11char_traitsIwESaIwEED*;\n     _ZNSbIwSt11char_traitsIwESaIwEE[0-58-9][a-z]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[67][a-z]*E[PRwjmv]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[67][a-b]*E[PRwjmv]*;\n+    _ZNSbIwSt11char_traitsIwESaIwEE[67][d-z]*E[PRwjmv]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE7[a-z]*EES6_[NPRjm]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE7[a-z]*EES6_S[56]*;\n     _ZNSbIwSt11char_traitsIwESaIwEE12_Alloc_hiderC*;\n@@ -250,6 +256,7 @@ GLIBCXX_3.4 {\n     _ZNKSbIwSt11char_traitsIwESaIwEE8_M_limit*;\n     _ZNKSbIwSt11char_traitsIwESaIwEE9_M_ibeginEv;\n     _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_E*;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE7compare*;\n \n     # std::basic_streambuf\n     _ZNSt15basic_streambufI[cw]St11char_traitsI[cw]EE[CD]*;\n@@ -980,6 +987,16 @@ GLIBCXX_3.4.13 {\n     _ZTISt12future_error;\n     _ZSt20__throw_future_errori;\n \n+    # string|wstring ::cbegin member functions\n+    _ZNKSs6cbeginEv;\n+    _ZNKSs4cendEv;\n+    _ZNKSs7crbeginEv;\n+    _ZNKSs5crendEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE4cendEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE6cbeginEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE7crbeginEv;\n+    _ZNKSbIwSt11char_traitsIwESaIwEE5crendEv;\n+\n } GLIBCXX_3.4.12;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "bd54537cdc10cab357b8e1601e6b1afcc90d15db", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -620,6 +620,42 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       rend() const\n       { return const_reverse_iterator(this->begin()); }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      /**\n+       *  Returns a read-only (constant) iterator that points to the first\n+       *  character in the %string.\n+       */\n+      const_iterator\n+      cbegin() const\n+      { return const_iterator(this->_M_data()); }\n+\n+      /**\n+       *  Returns a read-only (constant) iterator that points one past the\n+       *  last character in the %string.\n+       */\n+      const_iterator\n+      cend() const\n+      { return const_iterator(this->_M_data() + this->size()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to the last character in the %string.  Iteration is done in\n+       *  reverse element order.\n+       */\n+      const_reverse_iterator\n+      crbegin() const\n+      { return const_reverse_iterator(this->end()); }\n+\n+      /**\n+       *  Returns a read-only (constant) reverse iterator that points\n+       *  to one before the first character in the %string.  Iteration\n+       *  is done in reverse element order.\n+       */\n+      const_reverse_iterator\n+      crend() const\n+      { return const_reverse_iterator(this->begin()); }\n+#endif\n+\n     public:\n       // Capacity:\n       ///  Returns the number of characters in the string, not including any"}, {"sha": "fe262b0986a9007ba315ec2f71ad33ca977989d2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/citerators.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-string-conversions \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <testsuite_containers.h>\n+\n+int main()\n+{\n+  __gnu_test::citerator<std::string> test1;\n+  __gnu_test::citerator<std::wstring> test2;\n+  return 0;\n+}"}, {"sha": "aa0ac08742b9fbbc55c1ed5b8dba3ca8ee8186c9", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/requirements/typedefs.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,26 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <string>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::string> t1;\n+__gnu_test::types<std::wstring> t2;"}, {"sha": "c448a8419ecff9b6fb18416ba7e2e085f576170b", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <array>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::array<int, 7> a;\n-  VERIFY( a.cbegin() == a.begin() );\n-  VERIFY( a.cend() == a.end() );\n-  VERIFY( a.crbegin() == a.rbegin() );\n-  VERIFY( a.crend() == a.rend() );\n-  VERIFY( a.cbegin() != a.cend() );\n-  VERIFY( a.crbegin() != a.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::array<int, 7> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "0e1044124161363c841e9b421afdc1aeae43108e", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -18,7 +18,6 @@\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <array>\n \n template class std::array<int, 5>;", "previous_filename": "libstdc++-v3/testsuite/23_containers/array/requirements/explicit_instantiation.cc"}, {"sha": "aadf76b7223119809ced9db95709790b76a7f675", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <array>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+template class std::array<__gnu_test::NonDefaultConstructible, 3>;"}, {"sha": "152988df76f85f4798974d7226bd66595e8dec9c", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <array>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::array<int, 10> > t;"}, {"sha": "4a05e606010fb57a61d2493b4e86eb3b5f7760c9", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <deque>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::deque<int> d(7);\n-  VERIFY( d.cbegin() == d.begin() );\n-  VERIFY( d.cend() == d.end() );\n-  VERIFY( d.crbegin() == d.rbegin() );\n-  VERIFY( d.crend() == d.rend() );\n-  VERIFY( d.cbegin() != d.cend() );\n-  VERIFY( d.crbegin() != d.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::deque<int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "6263951fed7feaab0bec215a44528949ace48e34", "filename": "libstdc++-v3/testsuite/23_containers/deque/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <deque>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::deque<int> > t;"}, {"sha": "67aa70bccb8a48aa99f4b30693885d20cfccace1", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/1.cc", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c1a2bb1fc24ed257c69026e896d4bdeaeb64634/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2F1.cc?ref=5c1a2bb1fc24ed257c69026e896d4bdeaeb64634", "patch": "@@ -1,69 +0,0 @@\n-// { dg-options \"-std=gnu++0x\" }\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 23.2.3.n forward_list xxx [lib.forward_list.xxx]\n-\n-#include <forward_list>\n-#include <testsuite_hooks.h>\n-\n-bool test __attribute__((unused)) = true;\n-\n-// A nontrivial type.\n-template<typename T>\n-  struct A { };\n-\n-// Another nontrivial type\n-struct B { };\n-\n-// A nontrivial type convertible from an int\n-struct C\n-{\n-  C(int i) : i_(i) { }\n-  bool operator==(const C& rhs) { return i_ == rhs.i_; }\n-  int i_;\n-};\n-\n-// This test verifies the following.\n-//\n-void\n-test01()\n-{\n-  std::forward_list< A<B> > lst;\n-  VERIFY(lst.begin() == lst.end());\n-  VERIFY(std::distance(lst.begin(), lst.end()) == 0);\n-\n-  // check type definitions -- will fail compile if missing\n-  typedef std::forward_list< A<B> >::reference              reference;\n-  typedef std::forward_list< A<B> >::const_reference        const_reference;\n-  typedef std::forward_list< A<B> >::iterator               iterator;\n-  typedef std::forward_list< A<B> >::const_iterator         const_iterator;\n-  typedef std::forward_list< A<B> >::size_type              size_type;\n-  typedef std::forward_list< A<B> >::difference_type        difference_type;\n-  typedef std::forward_list< A<B> >::value_type             value_type;\n-  typedef std::forward_list< A<B> >::allocator_type         allocator_type;\n-  typedef std::forward_list< A<B> >::pointer                pointer;\n-  typedef std::forward_list< A<B> >::const_pointer          const_pointer;\n-}\n-\n-int\n-main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "86fa26e31986dc84bf1311e3b02d7322c49d567e", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/citerators.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <testsuite_containers.h>\n+\n+namespace __gnu_test\n+{\n+  template<>\n+    struct populate<std::forward_list<int>, true>\n+    {\n+      populate(std::forward_list<int>& container)\n+      {\n+\tcontainer.push_front(1);\n+\tcontainer.push_front(2);\n+      }      \n+  };\n+}\n+\n+int main()\n+{\n+  typedef std::forward_list<int>  test_type;\n+  __gnu_test::citerator<test_type> test;\n+  return 0;\n+}"}, {"sha": "93f0e6d591d0b5d14c8f73dc08c0c423b786bbfe", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-excess-errors \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  typedef std::forward_list<A> test_type;\n+  test_type l;\n+  l.assign(10, 1);\n+}"}, {"sha": "407d8d16942b92b1d9beb263962a3261ad5bea50", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+void f()\n+{\n+  typedef std::forward_list<int> test_type;\n+  test_type l(10, 1);\n+}"}, {"sha": "70d0447a5d6008d6bfdd2336a593a62f75657d61", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-excess-errors \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+void f()\n+{\n+  typedef std::forward_list<std::forward_list<int> > test_type;\n+  test_type l(10, 1);\n+}"}, {"sha": "2ee8b9f6baf1fceb48fd7b1ff3344a43b5842670", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-excess-errors \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <utility>\n+\n+void f()\n+{\n+  typedef std::forward_list<std::forward_list<std::pair<char, char> > > test_type;\n+  test_type l('a', 'b');\n+}"}, {"sha": "a21c22242b366d5907ca840635cad9793fb47698", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1209 }\n+// { dg-excess-errors \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+struct A\n+{\n+  explicit A(int) { }\n+};\n+\n+void f()\n+{\n+  typedef std::forward_list<A> test_type;\n+  test_type l;\n+  l.insert_after(l.begin(), 10, 1);\n+}"}, {"sha": "3497b09de7cedda8fddbca6f836f98f66de766e7", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <forward_list>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::forward_list<int> > t;"}, {"sha": "ac5bdec983afe0853126bc4caa7d7fa57a1a1ecb", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,28 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <list>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::list<int> list_type;\n-  list_type l(7);\n-\n-  VERIFY( l.cbegin() == l.begin() );\n-  VERIFY( l.cend() == l.end() );\n-  VERIFY( l.crbegin() == l.rbegin() );\n-  VERIFY( l.crend() == l.rend() );\n-  VERIFY( l.cbegin() != l.cend() );\n-  VERIFY( l.crbegin() != l.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::list<int>  test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "444ebb540a53ff7cd86c02a8cc10a9be147302a1", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <list>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::list<int> > t;"}, {"sha": "17db1e7da38846ad03411c215eebbad663c71021", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,27 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <map>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::map<int, int> m;\n-  m[1] = 1;\n-  VERIFY( m.cbegin() == m.begin() );\n-  VERIFY( m.cend() == m.end() );\n-  VERIFY( m.crbegin() == m.rbegin() );\n-  VERIFY( m.crend() == m.rend() );\n-  VERIFY( m.cbegin() != m.cend() );\n-  VERIFY( m.crbegin() != m.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::map<int, int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "1325cc607dec0aa864f0c45065c52c343520fc41", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <map>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::map<int, long> > t;"}, {"sha": "15773cb51268ad5372b50ebb5b61969ab627a27e", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,28 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <map>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::multimap<int, int> mm_type;\n-  mm_type mm;\n-  mm.insert(mm_type::value_type(1, 1));\n-  VERIFY( mm.cbegin() == mm.begin() );\n-  VERIFY( mm.cend() == mm.end() );\n-  VERIFY( mm.crbegin() == mm.rbegin() );\n-  VERIFY( mm.crend() == mm.rend() );\n-  VERIFY( mm.cbegin() != mm.cend() );\n-  VERIFY( mm.crbegin() != mm.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::multimap<int, int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "38a4bc5358ca7d91479c226695c952e8deb4a0bc", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <map>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::multimap<int, long> > t;"}, {"sha": "bf3aa16447c6aac5146057100ed14fb872d0f301", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,27 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <set>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::multiset<int> ms;\n-  ms.insert(1);\n-  VERIFY( ms.cbegin() == ms.begin() );\n-  VERIFY( ms.cend() == ms.end() );\n-  VERIFY( ms.crbegin() == ms.rbegin() );\n-  VERIFY( ms.crend() == ms.rend() );\n-  VERIFY( ms.cbegin() != ms.cend() );\n-  VERIFY( ms.crbegin() != ms.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::multiset<int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "7244003c2821daa6ad68fe024009a6ac3a348086", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <set>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::multiset<int> > t;"}, {"sha": "86fcb0c13372426af378fe04bfa9a770c9d3e544", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <queue>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::priority_queue<int> > t;"}, {"sha": "7563a2cc937d4f9c741cddae00a9d993378bfc4d", "filename": "libstdc++-v3/testsuite/23_containers/queue/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <queue>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::queue<int> > t;"}, {"sha": "20dd8b9f1e404bd2d47f3b5f4b6dadce7059b1af", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,27 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <set>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::set<int> s;\n-  s.insert(1);\n-  VERIFY( s.cbegin() == s.begin() );\n-  VERIFY( s.cend() == s.end() );\n-  VERIFY( s.crbegin() == s.rbegin() );\n-  VERIFY( s.crend() == s.rend() );\n-  VERIFY( s.cbegin() != s.cend() );\n-  VERIFY( s.crbegin() != s.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::set<int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "0581e49ecbead8fcf5be68693bb7a4fd261728fa", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <set>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::set<int> > t;"}, {"sha": "d0f56e5d60ca1b90bef49a5fd9ca24550472bd8c", "filename": "libstdc++-v3/testsuite/23_containers/stack/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <stack>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::stack<int> > t;"}, {"sha": "a00635a568f5aeed3377a1de1286fa1b07fd8c55", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/citerators.cc", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,24 +19,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_map>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::unordered_map<int, int> um;\n-  um[1] = 1;\n-  VERIFY( um.cbegin() == um.begin() );\n-  VERIFY( um.cend() == um.end() );\n-  VERIFY( um.cbegin() != um.cend() );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_map<int, int>  test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }\n+"}, {"sha": "3cad0a16a06cb8fd0ce45eedd9a132c1f8fb3c8b", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/cliterators.cc", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fcliterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fcliterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fcliterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_map>\n-#include <testsuite_hooks.h>\n-\n-// DR 691.\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::unordered_map<int, int> um_type;\n-  um_type um;\n-  um[1] = 1;\n-  VERIFY( um.cbegin(0) == um.begin(0) );\n-  VERIFY( um.cend(0) == um.end(0) );\n-  const um_type::size_type bn = um.bucket(1);\n-  VERIFY( um.cbegin(bn) != um.cend(bn) );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_map<int, int> \ttest_type;\n+  typedef typename test_type::value_type\tvalue_type;\n+  value_type v(1, 1);\n+  __gnu_test::forward_members_unordered<test_type> test(v);\n   return 0;\n }"}, {"sha": "9027fdcc14457e2223a48ccf4b7f5738d6381b35", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "previous_filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation.cc"}, {"sha": "f6b5fe372748a244989a579932bfbacac8959509", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+typedef __gnu_test::NonDefaultConstructible inst_type;\n+template class std::unordered_map<inst_type, inst_type>;"}, {"sha": "695fa6f58e3b8a915670f98f2dcdabb8c24df2bb", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+\n+using namespace std;\n+template class unordered_map<int, int, hash<int>, equal_to<int>, allocator<char>>;"}, {"sha": "9b978cebc2000bd56a9310eba00292428cc5fba0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/typedefs.cc", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -1,9 +1,7 @@\n-// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n \n-// 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,27 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include <testsuite_containers.h>\n #include <unordered_map>\n \n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::unordered_map<int, int>            test_type;\n-\n-  typedef test_type::key_type                     key_type;\n-  typedef test_type::value_type                   value_type;\n-  typedef test_type::mapped_type                  mapped_type;\n-  typedef test_type::hasher                       hasher;\n-  typedef test_type::key_equal                    key_equal;\n-  typedef test_type::allocator_type               allocator_type;\n-  typedef test_type::pointer                      pointer;\n-  typedef test_type::const_pointer                const_pointer;\n-  typedef test_type::reference                    reference;\n-  typedef test_type::const_reference              const_reference;\n-  typedef test_type::size_type                    size_type;\n-  typedef test_type::difference_type              difference_type;\n-  typedef test_type::iterator                     iterator;\n-  typedef test_type::const_iterator               const_iterator;\n-  typedef test_type::local_iterator               local_iterator;\n-  typedef test_type::const_local_iterator         const_local_iterator;\n-}\n+// Check container for required typedefs.\n+__gnu_test::types<std::unordered_map<int, long> > t;"}, {"sha": "736220b73bffffbfdcea598b11d732b1d2a8a359", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,25 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_map>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::unordered_multimap<int, int> umm_type;\n-  umm_type umm;\n-  umm.insert(umm_type::value_type(1, 1));\n-  VERIFY( umm.cbegin() == umm.begin() );\n-  VERIFY( umm.cend() == umm.end() );\n-  VERIFY( umm.cbegin() != umm.cend() );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_multimap<int, int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "612787cc76381db6d282cc5c63a403ddbb198c79", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/cliterators.cc", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fcliterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fcliterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fcliterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_map>\n-#include <testsuite_hooks.h>\n-\n-// DR 691.\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::unordered_multimap<int, int> umm_type;\n-  umm_type umm;\n-  umm.insert(umm_type::value_type(1, 1));\n-  VERIFY( umm.cbegin(0) == umm.begin(0) );\n-  VERIFY( umm.cend(0) == umm.end(0) );\n-  const umm_type::size_type bn = umm.bucket(1);\n-  VERIFY( umm.cbegin(bn) != umm.cend(bn) );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_multimap<int, int> \ttest_type;\n+  typedef typename test_type::value_type\tvalue_type;\n+  value_type v(1, 1);\n+  __gnu_test::forward_members_unordered<test_type> test(v);\n   return 0;\n }"}, {"sha": "863562db855b2f5c5f3973bb1d15775cc0506405", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "previous_filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation.cc"}, {"sha": "e26428dd698cc8540b5f502725e076995fb2a50a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+typedef __gnu_test::NonDefaultConstructible inst_type;\n+template class std::unordered_multimap<inst_type, inst_type>;"}, {"sha": "5085f611071625359ed4186b21000218e91cbc73", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+\n+using namespace std;\n+template class unordered_multimap<int, int, hash<int>, equal_to<int>, allocator<char>>;"}, {"sha": "eb1b9157a5cf4749cfd7b2cf4b7f96fc26e029b2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/typedefs.cc", "status": "modified", "additions": 5, "deletions": 26, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -1,9 +1,7 @@\n-// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n \n-// 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,27 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include <testsuite_containers.h>\n #include <unordered_map>\n \n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::unordered_multimap<int, int>       test_type;\n-\n-  typedef test_type::key_type                     key_type;\n-  typedef test_type::value_type                   value_type;\n-  typedef test_type::mapped_type                  mapped_type;\n-  typedef test_type::hasher                       hasher;\n-  typedef test_type::key_equal                    key_equal;\n-  typedef test_type::allocator_type               allocator_type;\n-  typedef test_type::pointer                      pointer;\n-  typedef test_type::const_pointer                const_pointer;\n-  typedef test_type::reference                    reference;\n-  typedef test_type::const_reference              const_reference;\n-  typedef test_type::size_type                    size_type;\n-  typedef test_type::difference_type              difference_type;\n-  typedef test_type::iterator                     iterator;\n-  typedef test_type::const_iterator               const_iterator;\n-  typedef test_type::local_iterator               local_iterator;\n-  typedef test_type::const_local_iterator         const_local_iterator;\n-}\n+// Check container for required typedefs.\n+__gnu_test::types<std::unordered_multimap<int, long> > t;"}, {"sha": "6731848fe6c0a2a7c9509bb364dd94d6b59524c3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,24 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_set>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::unordered_multiset<int> ums;\n-  ums.insert(1);\n-  VERIFY( ums.cbegin() == ums.begin() );\n-  VERIFY( ums.cend() == ums.end() );\n-  VERIFY( ums.cbegin() != ums.cend() );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_multiset<int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "c9db47ce5005e2084855f577c1a41e10873a429d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/cliterators.cc", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fcliterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fcliterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fcliterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_set>\n-#include <testsuite_hooks.h>\n-\n-// DR 691.\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::unordered_multiset<int> ums_type;\n-  ums_type ums;\n-  ums.insert(1);\n-  VERIFY( ums.cbegin(0) == ums.begin(0) );\n-  VERIFY( ums.cend(0) == ums.end(0) );\n-  const ums_type::size_type bn = ums.bucket(1);\n-  VERIFY( ums.cbegin(bn) != ums.cend(bn) );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_multiset<int> \t\ttest_type;\n+  typedef typename test_type::value_type\tvalue_type;\n+  value_type v(1);\n+  __gnu_test::forward_members_unordered<test_type> test(v);\n   return 0;\n }"}, {"sha": "a8fbbd081b5dc681dc6f65816d2a55be0bdeafb4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "previous_filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation.cc"}, {"sha": "d2a120a533ef6fc63bd618b0d1a8e9791f3e1484", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+template class std::unordered_multiset<__gnu_test::NonDefaultConstructible>;"}, {"sha": "faf119ca26ef139dd33ed3d010bd48e8bfed0cfc", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+\n+using namespace std;\n+template class unordered_multiset<int, hash<int>, equal_to<int>, allocator<char>>;"}, {"sha": "7e65e3a214ce378bdc86571821a908141329d30e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/typedefs.cc", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -1,9 +1,7 @@\n-// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n \n-// 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,26 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include <testsuite_containers.h>\n #include <unordered_set>\n \n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::unordered_multiset<int>            test_type;\n-\n-  typedef test_type::key_type                     key_type;\n-  typedef test_type::value_type                   value_type;\n-  typedef test_type::hasher                       hasher;\n-  typedef test_type::key_equal                    key_equal;\n-  typedef test_type::allocator_type               allocator_type;\n-  typedef test_type::pointer                      pointer;\n-  typedef test_type::const_pointer                const_pointer;\n-  typedef test_type::reference                    reference;\n-  typedef test_type::const_reference              const_reference;\n-  typedef test_type::size_type                    size_type;\n-  typedef test_type::difference_type              difference_type;\n-  typedef test_type::iterator                     iterator;\n-  typedef test_type::const_iterator               const_iterator;\n-  typedef test_type::local_iterator               local_iterator;\n-  typedef test_type::const_local_iterator         const_local_iterator;\n-}\n+// Check container for required typedefs.\n+__gnu_test::types<std::unordered_multiset<int> > t;"}, {"sha": "ce7f79fd69df9d4c7f0a5d2ccc1d12769236faf2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,24 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_set>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::unordered_set<int> us;\n-  us.insert(1);\n-  VERIFY( us.cbegin() == us.begin() );\n-  VERIFY( us.cend() == us.end() );\n-  VERIFY( us.cbegin() != us.cend() );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_set<int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "8abef8c1c9a7a8af817679e7906b7d636a077e42", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/cliterators.cc", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fcliterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fcliterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fcliterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <unordered_set>\n-#include <testsuite_hooks.h>\n-\n-// DR 691.\n-void test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  typedef std::unordered_set<int> us_type;\n-  us_type us;\n-  us.insert(1);\n-  VERIFY( us.cbegin(0) == us.begin(0) );\n-  VERIFY( us.cend(0) == us.end(0) );\n-  const us_type::size_type bn = us.bucket(1);\n-  VERIFY( us.cbegin(bn) != us.cend(bn) );\n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::unordered_set<int> \t\ttest_type;\n+  typedef typename test_type::value_type\tvalue_type;\n+  value_type v(1);\n+  __gnu_test::forward_members_unordered<test_type> test(v);\n   return 0;\n }"}, {"sha": "10d0bf5667deaeba54a2b9f1229203d6e778d1fc", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "previous_filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation.cc"}, {"sha": "13e9e37c3ddddcc4c739aea9b887ceb37fd31092", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/2.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F2.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+#include <testsuite_api.h>\n+\n+template class std::unordered_set<__gnu_test::NonDefaultConstructible>;"}, {"sha": "7d84ffd7fdc8eab22ea40982f484340ebf98fb55", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/3.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F3.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+\n+using namespace std;\n+template class unordered_set<int, hash<int>, equal_to<int>, allocator<char>>;"}, {"sha": "86983e5a611a69b8842f86613b13af5f820fd8ca", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/typedefs.cc", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -1,9 +1,7 @@\n-// { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n \n-// 2008-08-27  Paolo Carlini  <paolo.carlini@oracle.com>\n-\n-// Copyright (C) 2008, 2009 Free Software Foundation\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,26 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include <testsuite_containers.h>\n #include <unordered_set>\n \n-void test01()\n-{\n-  // Check for required typedefs\n-  typedef std::unordered_set<int>                 test_type;\n-\n-  typedef test_type::key_type                     key_type;\n-  typedef test_type::value_type                   value_type;\n-  typedef test_type::hasher                       hasher;\n-  typedef test_type::key_equal                    key_equal;\n-  typedef test_type::allocator_type               allocator_type;\n-  typedef test_type::pointer                      pointer;\n-  typedef test_type::const_pointer                const_pointer;\n-  typedef test_type::reference                    reference;\n-  typedef test_type::const_reference              const_reference;\n-  typedef test_type::size_type                    size_type;\n-  typedef test_type::difference_type              difference_type;\n-  typedef test_type::iterator                     iterator;\n-  typedef test_type::const_iterator               const_iterator;\n-  typedef test_type::local_iterator               local_iterator;\n-  typedef test_type::const_local_iterator         const_local_iterator;\n-}\n+// Check container for required typedefs.\n+__gnu_test::types<std::unordered_set<int> > t;"}, {"sha": "9f4783b743933e3dc904fb2e888a1db8c0ff87f2", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <vector>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::vector<bool> vb(7);\n-  VERIFY( vb.cbegin() == vb.begin() );\n-  VERIFY( vb.cend() == vb.end() );\n-  VERIFY( vb.crbegin() == vb.rbegin() );\n-  VERIFY( vb.crend() == vb.rend() );\n-  VERIFY( vb.cbegin() != vb.cend() );\n-  VERIFY( vb.crbegin() != vb.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::vector<bool> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "9a815ec7dec6f4e0524d6925834d09c4f922847f", "filename": "libstdc++-v3/testsuite/23_containers/vector/bool/requirements/dr438/constructor.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fdr438%2Fconstructor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fdr438%2Fconstructor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fbool%2Frequirements%2Fdr438%2Fconstructor.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/dr438/bool/constructor.cc"}, {"sha": "eee16b04ed64428e53b5a558521364415b67961b", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -19,26 +19,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <vector>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  std::vector<int> v(7);\n-  VERIFY( v.cbegin() == v.begin() );\n-  VERIFY( v.cend() == v.end() );\n-  VERIFY( v.crbegin() == v.rbegin() );\n-  VERIFY( v.crend() == v.rend() );\n-  VERIFY( v.cbegin() != v.cend() );\n-  VERIFY( v.crbegin() != v.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef std::vector<int> test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "24897ff3aeab3bd9bffb7f951799c7a64c8ba8b9", "filename": "libstdc++-v3/testsuite/23_containers/vector/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <vector>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<std::vector<int> > t;"}, {"sha": "582cadac338e683b78f5ff4cc5392a4f8b71e283", "filename": "libstdc++-v3/testsuite/ext/vstring/requirements/citerators.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fciterators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fciterators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Fciterators.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -20,26 +20,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <ext/vstring.h>\n-#include <testsuite_hooks.h>\n-\n-void\n-test01()\n-{\n-  bool test __attribute__((unused)) = true;\n-\n-  __gnu_cxx::__vstring v(7, 'a');\n-  VERIFY( v.cbegin() == v.begin() );\n-  VERIFY( v.cend() == v.end() );\n-  VERIFY( v.crbegin() == v.rbegin() );\n-  VERIFY( v.crend() == v.rend() );\n-  VERIFY( v.cbegin() != v.cend() );\n-  VERIFY( v.crbegin() != v.crend() );  \n-}\n+#include <testsuite_containers.h>\n \n int main()\n {\n-  test01();\n+  typedef __gnu_cxx::__vstring  test_type;\n+  __gnu_test::citerator<test_type> test;\n   return 0;\n }"}, {"sha": "06db6afc32ad05095462c9a92e6d6d595b07c4c7", "filename": "libstdc++-v3/testsuite/ext/vstring/requirements/typedefs.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Frequirements%2Ftypedefs.cc?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <testsuite_containers.h>\n+#include <ext/vstring.h>\n+\n+// Check container for required typedefs.\n+__gnu_test::types<__gnu_cxx::__vstring> t;"}, {"sha": "7c4b1a27097d7701d4fe513b922599ad0ed8756c", "filename": "libstdc++-v3/testsuite/util/testsuite_container_traits.h", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,207 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef _GLIBCXX_TESTSUITE_CONTAINER_TRAITS_H\n+#define _GLIBCXX_TESTSUITE_CONTAINER_TRAITS_H\n+\n+#include <bits/stdc++.h>\n+#include <ext/vstring.h>\n+\n+namespace __gnu_test\n+{  \n+  // Container traits.\n+  struct traits_base\n+  {\n+    // Type, nested type, and typedef related traits.\n+    typedef std::false_type\tis_container;\n+    typedef std::false_type\tis_adaptor;\n+    typedef std::false_type\tis_reversible;\n+    typedef std::false_type\tis_allocator_aware;\n+    typedef std::false_type\tis_pointer_aware;\n+    typedef std::false_type\tis_associative;\n+    typedef std::false_type\tis_unordered;\n+    typedef std::false_type\tis_mapped;\n+  };\n+\n+  // Primary template does nothing. Specialize on each type under\n+  // test, derive off of traits_base and just add the true traits.\n+  template<typename _Tp>\n+    struct traits;\n+\n+  // Specialize for each container.\n+  template<typename _Tp, size_t _Np>\n+    struct traits<std::array<_Tp, _Np> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::deque<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::forward_list<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::list<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+    };\n+\n+  template<typename _Kp, typename _Tp>\n+    struct traits<std::map<_Kp, _Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_associative;\n+      typedef std::true_type\tis_mapped;\n+    };\n+\n+  template<typename _Kp, typename _Tp>\n+    struct traits<std::multimap<_Kp, _Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_associative;\n+      typedef std::true_type\tis_mapped;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::multiset<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_associative;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::priority_queue<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_adaptor;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::queue<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_adaptor;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::set<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_reversible;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_associative;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::stack<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_adaptor;\n+    };\n+\n+  template<typename _Kp, typename _Tp>\n+    struct traits<std::unordered_map<_Kp, _Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_unordered;\n+      typedef std::true_type\tis_mapped;\n+    };\n+\n+  template<typename _Kp, typename _Tp>\n+    struct traits<std::unordered_multimap<_Kp, _Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_unordered;\n+      typedef std::true_type\tis_mapped;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::unordered_multiset<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_unordered;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::unordered_set<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type\tis_container;\n+      typedef std::true_type\tis_allocator_aware;\n+      typedef std::true_type\tis_pointer_aware;\n+      typedef std::true_type\tis_unordered;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::vector<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type    is_container;\n+      typedef std::true_type    is_reversible;\n+      typedef std::true_type    is_allocator_aware;\n+      typedef std::true_type    is_pointer_aware;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<std::basic_string<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type    is_container;\n+      typedef std::true_type    is_reversible;\n+      typedef std::true_type    is_allocator_aware;\n+      typedef std::true_type    is_pointer_aware;\n+    };\n+\n+  template<typename _Tp>\n+    struct traits<__gnu_cxx::__versa_string<_Tp> > : public traits_base\n+    {\n+      typedef std::true_type    is_container;\n+      typedef std::true_type    is_reversible;\n+      typedef std::true_type    is_allocator_aware;\n+      typedef std::true_type    is_pointer_aware;\n+    };\n+} // namespace __gnu_test\n+\n+#endif "}, {"sha": "62bf38f3d1c839078def4f92693d101ac3f1d6ec", "filename": "libstdc++-v3/testsuite/util/testsuite_containers.h", "status": "added", "additions": 238, "deletions": 0, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/439a0f5a2a7d330a6d087e56eca652680dea940e/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_containers.h?ref=439a0f5a2a7d330a6d087e56eca652680dea940e", "patch": "@@ -0,0 +1,238 @@\n+// -*- C++ -*-\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the terms\n+// of the GNU General Public License as published by the Free Software\n+// Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// This library is distributed in the hope that it will be useful, but\n+// WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+// General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef _GLIBCXX_TESTSUITE_CONTAINERS_H\n+#define _GLIBCXX_TESTSUITE_CONTAINERS_H\n+\n+#include <cassert>\n+#include <testsuite_container_traits.h>\n+\n+// Container requirement testing.\n+namespace __gnu_test\n+{\n+  // Compile-time typedef testing.\n+  template<typename _Tp, bool _Bt = traits<_Tp>::is_container::value>\n+    struct basic_types\n+    {\n+      // Base container requirements (table 80)\n+      typedef _Tp \t\t\t\t\ttest_type;\n+      typedef typename test_type::value_type \t\tvalue_type;\n+      typedef typename test_type::reference \t\treference;\n+      typedef typename test_type::const_reference \tconst_reference;\n+      typedef typename test_type::iterator \t\titerator;\n+      typedef typename test_type::const_iterator \tconst_iterator;\n+      typedef typename test_type::size_type \t\tsize_type;\n+      typedef typename test_type::difference_type \tdifference_type;\n+    };\n+\n+  // Conditional typedef testing, positive.\n+  template<typename _Tp, bool _Bt = traits<_Tp>::is_reversible::value>\n+    struct reversible_types\n+    {\n+      // Reversible container requirements (table 81)\n+      typedef _Tp \t\t\t\t\t test_type;\n+      typedef typename test_type::reverse_iterator \t reverse_iterator;\n+      typedef typename test_type::const_reverse_iterator const_reverse_iterator;\n+    };\n+\n+  template<typename _Tp, bool _Bt = traits<_Tp>::is_allocator_aware::value>\n+    struct allocator_aware_types\n+    {\n+      // Allocator-aware requirements (table 82)\n+      typedef _Tp \t\t\t\t\t test_type;\n+      typedef typename test_type::allocator_type      \t allocator_type;\n+    };\n+\n+  template<typename _Tp, bool _Bt = traits<_Tp>::is_pointer_aware::value>\n+    struct pointer_aware_types\n+    {\n+      // Allocator-aware requirements (table 82)\n+      typedef _Tp \t\t\t\t\t test_type;\n+      typedef typename test_type::pointer\t\t pointer;\n+      typedef typename test_type::const_pointer\t\t const_pointer;\n+    };\n+\n+  template<typename _Tp, bool _Bt = traits<_Tp>::is_associative::value>\n+    struct associative_types\n+    {\n+      // Associative container requirements (table 85)\n+      typedef _Tp \t\t\t\t\t test_type;\n+      typedef typename test_type::key_type\t\t key_type;\n+      typedef typename test_type::key_compare\t\t key_compare;\n+      typedef typename test_type::value_compare\t\t value_compare;\n+    };\n+\n+  template<typename _Tp, bool = traits<_Tp>::is_unordered::value>\n+    struct unordered_types\n+    {\n+      // Unordered associative container requirements (table 87)\n+      typedef _Tp \t\t\t\t\t test_type;\n+      typedef typename test_type::key_type\t\t key_type;\n+      typedef typename test_type::hasher\t\t hasher;\n+      typedef typename test_type::key_equal\t\t key_equal;\n+      typedef typename test_type::local_iterator\t local_iterator;\n+      typedef typename test_type::const_local_iterator\t const_local_iterator;\n+    };\n+\n+  template<typename _Tp, bool _Bt = traits<_Tp>::is_mapped::value>\n+    struct mapped_types\n+    {\n+      typedef _Tp \t\t\t\t\t test_type;\n+      typedef typename test_type::mapped_type\t   \t mapped_type;\n+    };\n+\n+  template<typename _Tp, bool = traits<_Tp>::is_adaptor::value>\n+    struct adaptor_types\n+    {\n+      // Container adaptor requirements.\n+      typedef _Tp \t\t\t\t\ttest_type;\n+      typedef typename test_type::value_type \t\tvalue_type;\n+      typedef typename test_type::reference \t\treference;\n+      typedef typename test_type::const_reference \tconst_reference;\n+      typedef typename test_type::size_type \t\tsize_type;\n+      typedef typename test_type::container_type \tcontainer_type;\n+    };\n+\n+  // Conditional typedef testing, negative.\n+  template<typename _Tp>\n+    struct basic_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct reversible_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct allocator_aware_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct pointer_aware_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct associative_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct unordered_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct mapped_types<_Tp, false> { };\n+\n+  template<typename _Tp>\n+    struct adaptor_types<_Tp, false> { };\n+\n+  // Primary template.\n+  template<typename _Tp>\n+    struct types\n+    : basic_types<_Tp>, adaptor_types<_Tp>, reversible_types<_Tp>,\n+      allocator_aware_types<_Tp>, pointer_aware_types<_Tp>,\n+      associative_types<_Tp>, unordered_types<_Tp>, mapped_types<_Tp>\n+    { };\n+\n+\n+  // Run-time test for constant_iterator requirements.\n+  template<typename _Tp, bool = traits<_Tp>::is_allocator_aware::value>\n+    struct populate\n+    {\n+      populate(_Tp& container)\n+      {\n+\ttypename _Tp::value_type v;\n+\tcontainer.insert(container.begin(), v);\n+\tcontainer.insert(container.begin(), v);\n+      }\n+  };\n+\n+  template<typename _Tp>\n+    struct populate<_Tp, false>\n+    {\n+      populate(_Tp& container) { }\n+    };\n+\n+  template<typename _Tp, bool = traits<_Tp>::is_reversible::value>\n+    struct reverse_members\n+    {\n+      reverse_members(_Tp& container)\n+      {\n+\tassert( container.crbegin() == container.rbegin() );\n+\tassert( container.crend() == container.rend() );\n+\tassert( container.crbegin() != container.crend() );\n+      }\n+    };\n+\n+  template<typename _Tp>\n+    struct reverse_members<_Tp, false>\n+    {\n+      reverse_members(_Tp& container) { }\n+    };\n+\n+  // DR 691.\n+  template<typename _Tp, bool = traits<_Tp>::is_unordered::value>\n+    struct forward_members_unordered\n+    {\n+      forward_members_unordered(typename _Tp::value_type& v)\n+      {\n+\ttypedef _Tp\t\t\t\t\ttest_type;\n+\ttest_type container;\n+\tcontainer.insert(v);\n+\tassert( container.cbegin(0) == container.begin(0) );\n+\tassert( container.cend(0) == container.end(0) );\n+\tconst typename test_type::size_type bn = container.bucket(1);\n+\tassert( container.cbegin(bn) != container.cend(bn) );\n+      }\n+    };\n+\n+  template<typename _Tp>\n+    struct forward_members_unordered<_Tp, false>\n+    {\n+      forward_members_unordered(_Tp& container) { }\n+    };\n+\n+  template<typename _Tp>\n+    struct citerator\n+    {\n+      typedef _Tp \t\t\t\t\ttest_type;\n+      typedef traits<test_type>\t\t\t\ttraits_type;\n+      typedef typename test_type::value_type \t\tvalue_type;\n+\n+      static test_type _S_container;\n+\n+      // Unconditional.\n+      struct forward_members\n+      {\n+\tforward_members()\n+\t{\n+\t  assert( _S_container.cbegin() == _S_container.begin() );\n+\t  assert( _S_container.cend() == _S_container.end() );\n+\t  assert( _S_container.cbegin() != _S_container.cend() );\n+\t}\n+      };\n+\n+      // Run test.\n+      citerator()\n+      {\n+\tpopulate<test_type> p(_S_container);\n+\tforward_members m1;\n+\treverse_members<test_type> m2(_S_container);\n+      }\n+  };\n+\n+  template<typename _Tp>\n+  _Tp citerator<_Tp>::_S_container;\n+\n+\n+} // namespace __gnu_test\n+\n+#endif"}]}