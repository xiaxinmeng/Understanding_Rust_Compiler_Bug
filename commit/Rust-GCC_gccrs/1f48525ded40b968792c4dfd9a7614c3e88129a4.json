{"sha": "1f48525ded40b968792c4dfd9a7614c3e88129a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY0ODUyNWRlZDQwYjk2ODc5MmM0ZGZkOWE3NjE0YzNlODgxMjlhNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-01-29T00:47:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-01-29T00:47:25Z"}, "message": "Ensure pool resources always use normal mode vector\n\nThe __pool_resource::_M_unpooled member was declared with type\nstd::vector, which means that the type depends on whether debug mode is\nactive or not. Because the non-inline definitions in\nsrc/c++17/memory_resource.cc are never compiled with debug mode, the\ntype declared in the header doesn't match the type in the library\ndefinitions, leading to undefined behaviour.\n\nThe solution is to ensure the header always uses the non-debug vector,\neven when debug mode is active. To make this easier a new alias template\nis defined: _GLIBCXX_STD_C::pmr::vector.\n\n\t* include/std/memory_resource (__pool_resource::_M_unpooled): Use\n\tnormal mode vector, even for debug mode.\n\t* include/std/vector [_GLIBCXX_DEBUG] (_GLIBCXX_STD_C::pmr::vector):\n\tDefine alias template for normal mode vector.\n\nFrom-SVN: r268354", "tree": {"sha": "fc2d3d9bb79c9d94adc789855952b43be97fb435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2d3d9bb79c9d94adc789855952b43be97fb435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f48525ded40b968792c4dfd9a7614c3e88129a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f48525ded40b968792c4dfd9a7614c3e88129a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f48525ded40b968792c4dfd9a7614c3e88129a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f48525ded40b968792c4dfd9a7614c3e88129a4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a097ba8abb6ca31638a5ad3f1f49a21c1b772839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a097ba8abb6ca31638a5ad3f1f49a21c1b772839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a097ba8abb6ca31638a5ad3f1f49a21c1b772839"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "30038524ec3789bf6fef8244f249b736524efb7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f48525ded40b968792c4dfd9a7614c3e88129a4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f48525ded40b968792c4dfd9a7614c3e88129a4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f48525ded40b968792c4dfd9a7614c3e88129a4", "patch": "@@ -1,3 +1,10 @@\n+2019-01-29  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory_resource (__pool_resource::_M_unpooled): Use\n+\tnormal mode vector, even for debug mode.\n+\t* include/std/vector [_GLIBCXX_DEBUG] (_GLIBCXX_STD_C::pmr::vector):\n+\tDefine alias template for normal mode vector.\n+\n 2019-01-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/68737"}, {"sha": "93b2ebd97599a34501b00b6481e76b6e6366ddcb", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f48525ded40b968792c4dfd9a7614c3e88129a4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f48525ded40b968792c4dfd9a7614c3e88129a4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=1f48525ded40b968792c4dfd9a7614c3e88129a4", "patch": "@@ -354,7 +354,7 @@ namespace pmr\n     struct _BigBlock;\n     // Collection of blocks too big for any pool, sorted by address.\n     // This also stores the only copy of the upstream memory resource pointer.\n-    pmr::vector<_BigBlock> _M_unpooled;\n+    _GLIBCXX_STD_C::pmr::vector<_BigBlock> _M_unpooled;\n \n     const int _M_npools;\n   };"}, {"sha": "e5e13ab3ef7cde0eea162a4dc38117c95dda87d1", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f48525ded40b968792c4dfd9a7614c3e88129a4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f48525ded40b968792c4dfd9a7614c3e88129a4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=1f48525ded40b968792c4dfd9a7614c3e88129a4", "patch": "@@ -89,6 +89,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<typename _Tp>\n       using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;\n   } // namespace pmr\n+# ifdef _GLIBCXX_DEBUG\n+  namespace _GLIBCXX_STD_C::pmr {\n+    template<typename _Tp>\n+      using vector\n+\t= _GLIBCXX_STD_C::vector<_Tp, std::pmr::polymorphic_allocator<_Tp>>;\n+  } // namespace _GLIBCXX_STD_C::pmr\n+# endif\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++17"}]}