{"sha": "be080b17271cfbe3b8b46d9ca635f8d77de2088e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUwODBiMTcyNzFjZmJlM2I4YjQ2ZDljYTYzNWY4ZDc3ZGUyMDg4ZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-03-25T23:57:54Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-03-28T12:47:36Z"}, "message": "d: Don't create gdc.test symlink in the gdc testsuite directory\n\nInstead, tests are copied from the source tree (i.e: $srcdir/compilable)\ninto the test base directory ($base_dir/compilable).   A dejagnu test\nfile with all translated test directives is created in a path that\nfollows DejaGnu naming conventions ($base_dir/gdc.test/compilable),\nwhich is then passed to `dg-test'.\n\nBefore invoking the compiler, the gdc.test prefixed is trimmed from the\ntest program in `gdc-dg-test' so that all copied test files are picked\nup with the correct path names.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/gdc-utils.exp (gdc-copy-extra): Rename to...\n\t(gdc-copy-file): ... this.  Use file copy instead of open/close.\n\t(gdc-convert-test): Save translated dejagnu test to gdc.test\n\tdirectory, only write dejagnu directives to the test file.\n\t(gdc-do-test): Don't create gdc.test symlink.", "tree": {"sha": "7f709385a7d09fbd495432020a53e24b8d411c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f709385a7d09fbd495432020a53e24b8d411c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be080b17271cfbe3b8b46d9ca635f8d77de2088e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be080b17271cfbe3b8b46d9ca635f8d77de2088e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be080b17271cfbe3b8b46d9ca635f8d77de2088e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be080b17271cfbe3b8b46d9ca635f8d77de2088e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0907036f4541cfb51a626ef13c282f7be2098add", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0907036f4541cfb51a626ef13c282f7be2098add", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0907036f4541cfb51a626ef13c282f7be2098add"}], "stats": {"total": 85, "additions": 32, "deletions": 53}, "files": [{"sha": "33c01450eb441c5e9a2a3cd069705a1180579c31", "filename": "gcc/testsuite/lib/gdc-utils.exp", "status": "modified", "additions": 32, "deletions": 53, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be080b17271cfbe3b8b46d9ca635f8d77de2088e/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be080b17271cfbe3b8b46d9ca635f8d77de2088e/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp?ref=be080b17271cfbe3b8b46d9ca635f8d77de2088e", "patch": "@@ -145,37 +145,33 @@ proc gdc-convert-args { args } {\n     return $out\n }\n \n-proc gdc-copy-extra { base extra } {\n-    # Split base, folder/file.\n-    set type [file dirname $extra]\n+proc gdc-copy-file { srcdir filename } {\n+    # Split folder/file from the filename.\n+    set targetdir [file dirname $filename]\n \n-    # print \"Filename: $base - $extra\"\n+    # print \"Filename: $srcdir - $filename\"\n \n-    set fdin [open $base/$extra r]\n-    fconfigure $fdin -encoding binary\n-\n-    file mkdir $type\n-    set fdout [open $extra w]\n-    fconfigure $fdout -encoding binary\n-\n-    while { [gets $fdin copy_line] >= 0 } {\n-\tset out_line $copy_line\n-\tputs $fdout $out_line\n-    }\n-\n-    close $fdin\n-    close $fdout\n+    file mkdir $targetdir\n+    file copy -force $srcdir/$filename $filename\n \n     # Remove file once test is finished.\n     upvar 2 cleanup_extra_files cleanups\n-    lappend cleanups $extra\n-\n-    return $extra\n+    lappend cleanups $filename\n }\n \n #\n # Translate DMD test directives to dejagnu equivalent.\n #\n+# This procedure copies the test and all its dependencies from its source\n+# location in `$srcdir/$type' to `$base_dir/$type'.  A stub dejagnu test file\n+# is then created in `$base_dir/gdc.test/$type' containing all translated test\n+# directives.  This stub is then the test that is handed over to `dg-test'.\n+# Before invoking the compiler, the `gdc.test' prefix is trimmed from the test\n+# `$prog' name in `gdc-dg-test' so that all copied tests then get picked up\n+# with the correct path names.\n+#\n+# The following directives are recognized:\n+#\n #   COMPILE_SEPARATELY: Not handled.\n #   EXECUTE_ARGS:\tParameters to add to the execution of the test.\n #   COMPILED_IMPORTS:\tList of modules files that are imported by the main\n@@ -215,121 +211,110 @@ proc gdc-convert-test { base test } {\n     upvar 1 compilable_do_what compilable_do_what\n     set compilable_output_file_ext \"\"\n \n-    # Split base, folder/file.\n+    # Split folder/file from the test.\n     set type [file dirname $test]\n     set name [file tail $test]\n \n     # print \"Filename: $base - $test\"\n+    gdc-copy-file $base $test\n \n+    # Read in all test directives, and save the dejagnu equivalents to a new\n+    # file that will be returned as the test to run. \n     set fdin [open $base/$test r]\n     #fconfigure $fdin -encoding binary\n \n-    file mkdir $type\n-    set fdout [open $test w]\n+    # Include gdc.test prefix so test names follow DejaGnu conventions.\n+    set testdir [file tail $base]\n+    file mkdir $testdir/$type\n+    set fdout [open $testdir/$test w]\n     #fconfigure $fdout -encoding binary\n \n     while { [gets $fdin copy_line] >= 0 } {\n-\tset out_line $copy_line\n \n \tif [regexp -- {COMPILE_SEPARATELY} $copy_line] {\n \t    # COMPILE_SEPARATELY is not handled.\n-\t    regsub -- {COMPILE_SEPARATELY.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {DISABLED} $copy_line] {\n \t    # DISABLED is not handled.\n-\t    regsub -- {DISABLED.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {LINK:} $copy_line] {\n \t    # LINK sets dg-do-what-default \"link\"\n \t    set compilable_do_what \"link\"\n \n \t} elseif [regexp -- {POST_SCRIPT} $copy_line] {\n \t    # POST_SCRIPT is not handled\n-\t    regsub -- {POST_SCRIPT.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {DFLAGS\\s*:\\s*(.*)} $copy_line match args] {\n \t    # DFLAGS overrides the default value of PERMUTE_ARGS.\n \t    if { $args != \"\" } {\n \t\terror \"gdc-convert-test: DFLAGS is not empty as expected\"\n \t    }\n \t    set saw_test_flags 1\n-\t    regsub -- {DFLAGS.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {PERMUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n \t    # PERMUTE_ARGS is handled by gdc-do-test.\n \t    set PERMUTE_ARGS [gdc-convert-args $args]\n \t    set saw_test_flags 1\n-\t    regsub -- {PERMUTE_ARGS.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {EXECUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n \t    # EXECUTE_ARGS is handled by gdc_load.\n \t    foreach arg $args {\n \t\tlappend GDC_EXECUTE_ARGS $arg\n \t    }\n-\t    regsub -- {EXECUTE_ARGS.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {REQUIRED_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n \t    # Convert all listed arguments to from dmd to gdc-style.\n-\t    set new_option \"{ dg-additional-options \\\"[gdc-convert-args $args]\\\" }\"\n-\t    regsub -- {REQUIRED_ARGS.*$} $copy_line $new_option out_line\n+\t    puts $fdout \"// { dg-additional-options \\\"[gdc-convert-args $args]\\\" }\"\n \n \t} elseif [regexp -- {EXTRA_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n \t    # EXTRA_SOURCES are appended to extra_sources list\n \t    foreach srcfile $sources {\n \t\tlappend extra_sources $srcfile\n \t    }\n-\t    regsub -- {EXTRA_SOURCES.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {EXTRA_CPP_SOURCES\\s*:\\s*(.*)} $copy_line match sources] {\n \t    # EXTRA_CPP_SOURCES are appended to extra_sources list\n \t    foreach srcfile $sources {\n \t\t# C++ sources are found in the extra-files directory.\n \t\tlappend extra_sources \"extra-files/$srcfile\"\n \t    }\n-\t    regsub -- {EXTRA_CPP_SOURCES.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {EXTRA_FILES\\s*:\\s*(.*)} $copy_line match files] {\n \t    # EXTRA_FILES are appended to extra_files list\n \t    foreach file $files {\n \t\tlappend extra_files $file\n \t    }\n-\t    regsub -- {EXTRA_FILES.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {COMPILED_IMPORTS\\s*:\\s*(.*)} $copy_line match sources] {\n \t    # COMPILED_IMPORTS are appended to extra_sources list\n \t    foreach import $sources {\n \t\tlappend extra_sources $import\n \t    }\n-\t    regsub -- {COMPILED_IMPORTS.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {RUNNABLE_PHOBOS_TEST} $copy_line match sources] {\n \t    # RUNNABLE_PHOBOS_TEST annotates tests that import the std module.\n \t    # It will need skipping if phobos is not available on the target.\n-\t    regsub -- {RUNNABLE_PHOBOS_TEST.*$} $copy_line \"\" out_line\n \t    set needs_phobos 1\n \n \t} elseif [regexp -- {COMPILABLE_MATH_TEST} $copy_line match sources] {\n \t    # COMPILABLE_MATH_TEST annotates tests that import the std.math\n \t    # module.  Which will need skipping if not available on the target.\n-\t    regsub -- {RUNNABLE_PHOBOS_TEST.*$} $copy_line \"\" out_line\n \t    set needs_phobos 1\n \t}\n-\n-\tputs $fdout $out_line\n     }\n \n     # Now that all extra sources and files have been collected, copy them all\n     # to the testsuite build directory.\n     if { [llength $extra_sources] > 0 } {\n \tforeach srcfile $extra_sources {\n-\t    gdc-copy-extra $base \"$type/$srcfile\"\n+\t    gdc-copy-file $base \"$type/$srcfile\"\n \t}\n \tputs $fdout \"// { dg-additional-sources \\\"$extra_sources\\\" }\"\n     }\n \n     if { [llength $extra_files] > 0 } {\n \tforeach file $extra_files {\n-\t    gdc-copy-extra $base \"$type/$file\"\n+\t    gdc-copy-file $base \"$type/$file\"\n \t}\n \tputs $fdout \"// { dg-additional-files \\\"$extra_files\\\" }\"\n     }\n@@ -367,9 +352,9 @@ proc gdc-convert-test { base test } {\n \t\t# Check that file generation tests output the expected file.\n \t\tset genfile \"[file rootname $name].$compilable_output_file_ext\"\n \t\tputs $fdout \"// { dg-final { if \\[file exists $genfile\\] \\\\{           } }\"\n-\t\tputs $fdout \"// { dg-final {     pass \\\"$test (file exists $genfile)\\\" } }\"\n+\t\tputs $fdout \"// { dg-final {     pass \\\"$testdir/$test (file exists $genfile)\\\" } }\"\n \t\tputs $fdout \"// { dg-final { \\\\} else \\\\{                              } }\"\n-\t\tputs $fdout \"// { dg-final {     fail \\\"$test (file exists $genfile)\\\" } }\"\n+\t\tputs $fdout \"// { dg-final {     fail \\\"$testdir/$test (file exists $genfile)\\\" } }\"\n \t\tputs $fdout \"// { dg-final { \\\\}                                       } }\"\n \t\t# Cleanup extra generated files.\n \t\tputs $fdout \"// { dg-final { file delete $genfile } }\"\n@@ -387,7 +372,7 @@ proc gdc-convert-test { base test } {\n     close $fdin\n     close $fdout\n \n-    return $test\n+    return $testdir/$test\n }\n \n proc gdc-permute-options { options } {\n@@ -413,7 +398,6 @@ proc gdc-permute-options { options } {\n \n proc gdc-do-test { testcases } {\n     global dg-do-what-default\n-    global subdir\n     global verbose\n \n     # If a testcase doesn't have special options, use these.\n@@ -441,10 +425,6 @@ proc gdc-do-test { testcases } {\n \n     set saved-dg-do-what-default ${dg-do-what-default}\n \n-    # Create gdc.test link so test names include that subdir.\n-    set testdir [file dirname $subdir]\n-    catch { file link $testdir . }\n-\n     # Main loop.\n \n     # set verbose 1\n@@ -457,8 +437,7 @@ proc gdc-do-test { testcases } {\n \tset imports [format \"-I%s/%s\" $base $type]\n \tset cleanup_extra_files \"\"\n \tset compilable_do_what \"compile\"\n-\t# Include $testdir prefix so test names follow DejaGnu conventions.\n-\tset filename \"$testdir/[gdc-convert-test $base $type/$name.$ext]\"\n+\tset filename \"[gdc-convert-test $base $type/$name.$ext]\"\n \n \tif { $type == \"runnable\" || $type == \"runnable_cxx\" } {\n \t    append PERMUTE_ARGS \" $SHARED_OPTION\""}]}