{"sha": "f6135b207a02f8daa8653e4b0a91ed5156041494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxMzViMjA3YTAyZjhkYWE4NjUzZTRiMGE5MWVkNTE1NjA0MTQ5NA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-02-13T22:43:08Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1996-02-13T22:43:08Z"}, "message": "(save_constants_in_decl_trees): New function.\n\n(save_for_inline_copying, save_for_inline_nocopy): Call it.\n\nFrom-SVN: r11263", "tree": {"sha": "38811c742e1c32a833d3411154b21eefd84c2055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38811c742e1c32a833d3411154b21eefd84c2055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6135b207a02f8daa8653e4b0a91ed5156041494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6135b207a02f8daa8653e4b0a91ed5156041494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6135b207a02f8daa8653e4b0a91ed5156041494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6135b207a02f8daa8653e4b0a91ed5156041494/comments", "author": null, "committer": null, "parents": [{"sha": "53ac8a7b367c106d3e48f48a6f3a922e091674c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ac8a7b367c106d3e48f48a6f3a922e091674c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ac8a7b367c106d3e48f48a6f3a922e091674c5"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "4ecbfb27ea4c4bc0f4673677df3feea933f7fbd9", "filename": "gcc/integrate.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6135b207a02f8daa8653e4b0a91ed5156041494/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6135b207a02f8daa8653e4b0a91ed5156041494/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=f6135b207a02f8daa8653e4b0a91ed5156041494", "patch": "@@ -67,6 +67,7 @@ static void note_modified_parmregs PROTO((rtx, rtx));\n static rtx copy_for_inline\tPROTO((rtx));\n static void integrate_parm_decls PROTO((tree, struct inline_remap *, rtvec));\n static void integrate_decl_tree\tPROTO((tree, int, struct inline_remap *));\n+static void save_constants_in_decl_trees PROTO ((tree));\n static void subst_constants\tPROTO((rtx *, rtx, struct inline_remap *));\n static void restore_constants\tPROTO((rtx *));\n static void set_block_origin_self PROTO((tree));\n@@ -430,6 +431,10 @@ save_for_inline_copying (fndecl)\n \t      save_constants (&REG_NOTES (insn));\n \t  }\n \n+      /* Also scan all decls, and replace any constant pool references with the\n+\t actual constant.  */\n+      save_constants_in_decl_trees (DECL_INITIAL (fndecl));\n+\n       /* Clear out the constant pool so that we can recreate it with the\n \t copied constants below.  */\n       init_const_rtx_hash_table ();\n@@ -790,6 +795,10 @@ save_for_inline_nocopy (fndecl)\n \t}\n     }\n \n+  /* Also scan all decls, and replace any constant pool references with the\n+     actual constant.  */\n+  save_constants_in_decl_trees (DECL_INITIAL (fndecl));\n+\n   /* We have now allocated all that needs to be allocated permanently\n      on the rtx obstack.  Set our high-water mark, so that we\n      can free the rest of this when the time comes.  */\n@@ -2031,6 +2040,23 @@ integrate_decl_tree (let, level, map)\n \t}\n     }\n }\n+\n+/* Given a BLOCK node LET, search for all DECL_RTL fields, and pass them\n+   through save_constants.  */\n+\n+static void\n+save_constants_in_decl_trees (let)\n+     tree let;\n+{\n+  tree t;\n+\n+  for (t = BLOCK_VARS (let); t; t = TREE_CHAIN (t))\n+    if (DECL_RTL (t) != 0)\n+      save_constants (&DECL_RTL (t));\n+\n+  for (t = BLOCK_SUBBLOCKS (let); t; t = TREE_CHAIN (t))\n+    save_constants_in_decl_trees (t);\n+}\n \f\n /* Create a new copy of an rtx.\n    Recursively copies the operands of the rtx,"}]}