{"sha": "d6e840eed2559f03c82cdb203cc2339c4a5c6425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlODQwZWVkMjU1OWYwM2M4MmNkYjIwM2NjMjMzOWM0YTVjNjQyNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-27T16:27:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-27T16:27:08Z"}, "message": "re PR tree-optimization/18754 (unrolling happens too late/SRA does not happen late enough)\n\n2008-04-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/18754\n\tPR tree-optimization/34223\n\t* tree-pass.h (pass_complete_unrolli): Declare.\n\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Print\n\tloop size before and after unconditionally of UL_NO_GROWTH in effect.\n\tRewrite loop into loop closed SSA form if it is not already.\n\t(tree_unroll_loops_completely): Re-structure to iterate over\n\tinnermost loops with intermediate CFG cleanups.\n\tUnroll outermost loops only if requested or the code does not grow\n\tdoing so.\n\t* tree-ssa-loop.c (gate_tree_vectorize): Don't shortcut if no\n\tloops are available.\n\t(tree_vectorize): Instead do so here.\n\t(tree_complete_unroll): Also unroll outermost loops.\n\t(tree_complete_unroll_inner): New function.\n\t(gate_tree_complete_unroll_inner): Likewise.\n\t(pass_complete_unrolli): New pass.\n\t* tree-ssa-loop-manip.c (find_uses_to_rename_use): Only record\n\tuses outside of the loop.\n\t(tree_duplicate_loop_to_header_edge): Only verify loop-closed SSA\n\tform if it is available.  \n\t* tree-flow.h (tree_unroll_loops_completely): Add extra parameter.\n\t* passes.c (init_optimization_passes): Schedule complete inner\n\tloop unrolling pass before the first CCP pass after final inlining.\n\n\t* gcc.dg/tree-ssa/loop-36.c: New testcase.\n\t* gcc.dg/tree-ssa/loop-37.c: Likewise.\n\t* gcc.dg/vect/vect-118.c: Likewise.\n\t* gcc.dg/Wunreachable-8.c: XFAIL bogus warning.\n\t* gcc.dg/vect/vect-66.c: Increase loop trip count.\n\t* gcc.dg/vect/no-section-anchors-vect-66.c: Likewise.\n\t* gcc.dg/vect/no-section-anchors-vect-69.c: Likewise.\n\t* gcc.dg/vect/vect-76.c: Likewise.\n\t* gcc.dg/vect/vect-outer-6.c: Likewise.\n\t* gcc.dg/vect/vect-outer-1.c: Likewise.\n\t* gcc.dg/vect/vect-outer-1a.c: Likewise.\n\t* gcc.dg/vect/vect-11a.c: Likewise.\n\t* gcc.dg/vect/vect-shift-1.c: Likewise.\n\t* gcc.target/i386/vectorize1.c: Likewise.\n\nFrom-SVN: r134730", "tree": {"sha": "9a909683a7cb44b23b9f7839b7acb08f6bf9a976", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a909683a7cb44b23b9f7839b7acb08f6bf9a976"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6e840eed2559f03c82cdb203cc2339c4a5c6425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e840eed2559f03c82cdb203cc2339c4a5c6425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6e840eed2559f03c82cdb203cc2339c4a5c6425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6e840eed2559f03c82cdb203cc2339c4a5c6425/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "feb60f0328c33740a09678e40a6f27e655e43b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/feb60f0328c33740a09678e40a6f27e655e43b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/feb60f0328c33740a09678e40a6f27e655e43b91"}], "stats": {"total": 394, "additions": 307, "deletions": 87}, "files": [{"sha": "f1144d6569679c3f056a8ebc95a628f8e0eb4cbf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -1,3 +1,30 @@\n+2008-04-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/18754\n+\tPR tree-optimization/34223\n+\t* tree-pass.h (pass_complete_unrolli): Declare.\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Print\n+\tloop size before and after unconditionally of UL_NO_GROWTH in effect.\n+\tRewrite loop into loop closed SSA form if it is not already.\n+\t(tree_unroll_loops_completely): Re-structure to iterate over\n+\tinnermost loops with intermediate CFG cleanups.\n+\tUnroll outermost loops only if requested or the code does not grow\n+\tdoing so.\n+\t* tree-ssa-loop.c (gate_tree_vectorize): Don't shortcut if no\n+\tloops are available.\n+\t(tree_vectorize): Instead do so here.\n+\t(tree_complete_unroll): Also unroll outermost loops.\n+\t(tree_complete_unroll_inner): New function.\n+\t(gate_tree_complete_unroll_inner): Likewise.\n+\t(pass_complete_unrolli): New pass.\n+\t* tree-ssa-loop-manip.c (find_uses_to_rename_use): Only record\n+\tuses outside of the loop.\n+\t(tree_duplicate_loop_to_header_edge): Only verify loop-closed SSA\n+\tform if it is available.  \n+\t* tree-flow.h (tree_unroll_loops_completely): Add extra parameter.\n+\t* passes.c (init_optimization_passes): Schedule complete inner\n+\tloop unrolling pass before the first CCP pass after final inlining.\n+\n 2008-04-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* targhooks.h (default_emutls_var_fields,"}, {"sha": "42f456c7f832e5ad140d28297fde7c16bfa78c13", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -567,6 +567,7 @@ init_optimization_passes (void)\n       NEXT_PASS (pass_rename_ssa_copies);\n \n       /* Initial scalar cleanups.  */\n+      NEXT_PASS (pass_complete_unrolli);\n       NEXT_PASS (pass_ccp);\n       NEXT_PASS (pass_phiprop);\n       NEXT_PASS (pass_fre);"}, {"sha": "4f2b2129b3af0c4712b53c37c8d237308b2a4806", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -1,3 +1,22 @@\n+2008-04-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/18754\n+\tPR tree-optimization/34223\n+\t* gcc.dg/tree-ssa/loop-36.c: New testcase.\n+\t* gcc.dg/tree-ssa/loop-37.c: Likewise.\n+\t* gcc.dg/vect/vect-118.c: Likewise.\n+\t* gcc.dg/Wunreachable-8.c: XFAIL bogus warning.\n+\t* gcc.dg/vect/vect-66.c: Increase loop trip count.\n+\t* gcc.dg/vect/no-section-anchors-vect-66.c: Likewise.\n+\t* gcc.dg/vect/no-section-anchors-vect-69.c: Likewise.\n+\t* gcc.dg/vect/vect-76.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-6.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-1.c: Likewise.\n+\t* gcc.dg/vect/vect-outer-1a.c: Likewise.\n+\t* gcc.dg/vect/vect-11a.c: Likewise.\n+\t* gcc.dg/vect/vect-shift-1.c: Likewise.\n+\t* gcc.target/i386/vectorize1.c: Likewise.\n+\n 2008-04-27  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gcc.dg/tls/section-2.c: New."}, {"sha": "81254ba3b2a596f92ff65effeccb779faa67b9b6", "filename": "gcc/testsuite/gcc.dg/Wunreachable-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunreachable-8.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -6,7 +6,7 @@ float Factorial(float X)\n   int k,j;\n   for (k=1; k < 5; k++)\n     {\n-      val += 1.0;\n+      val += 1.0; /* { dg-bogus \"will never be executed\" \"\" { xfail *-*-* } } */\n     }\n   return (val); /* { dg-bogus \"will never be executed\" } */\n }"}, {"sha": "6b408a20386ee61338808dba0025015e771848ad", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-36.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-36.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-36.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-36.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-dce2\" } */\n+\n+struct X { float array[4]; };\n+\n+struct X a,b;\n+\n+float foobar () {\n+  float s = 0;\n+  unsigned int d;\n+  struct X c;\n+  for (d=0; d<4; ++d)\n+    c.array[d] = a.array[d] * b.array[d];\n+  for (d=0; d<4; ++d)\n+    s+=c.array[d];\n+  return s;\n+}\n+\n+/* The temporary structure should have been promoted to registers\n+   by FRE after the loops have been unrolled by the early unrolling pass.  */\n+/* { dg-final { scan-tree-dump-not \"c\\.array\" \"dce2\" } } */"}, {"sha": "46b26bb873f231c8fb2b66a9d0cc7d70261a2afa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-37.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-37.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+extern void link_error (void);\n+static const int my_array [3] = { 4, 5, 6 };\n+\n+void f0 (void)\n+{\n+  int j, sum = 0;\n+  for (j = 0; j < 3; j ++)\n+    sum += my_array [j];\n+  if (15 != sum)\n+    link_error ();\n+}\n+\n+int f1 (int a [])\n+{\n+  int j, sum = 0;\n+  for (j = 0; j < 3; j ++)\n+    sum += a [j] + my_array [j];\n+  return sum;\n+}\n+\n+int main() { }\n+\n+/* { dg-final { scan-tree-dump-not \"my_array\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "d590975e57fdde84baff8b677960e2df6f38e3eb", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-66.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-66.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -3,11 +3,10 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 8\n \n-int ib[6] = {0,3,6,9,12,15};\n-int ia[8][5][6];\n-int ic[16][16][5][6];\n+int ia[8][5][N+2];\n+int ic[16][16][5][N+2];\n \n __attribute__ ((noinline))\n int main1 ()\n@@ -17,7 +16,7 @@ int main1 ()\n   /* Multidimensional array. Aligned. */\n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            ia[2][6][j] = 5;\n         }\n@@ -26,7 +25,7 @@ int main1 ()\n   /* check results: */  \n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            if (ia[2][6][j] != 5)\n                 abort();\n@@ -35,14 +34,14 @@ int main1 ()\n   /* Multidimensional array. Aligned. */\n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n            ia[3][6][j+2] = 5;\n     }\n \n   /* check results: */  \n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 2; j < 6; j++)\n+      for (j = 2; j < N+2; j++)\n         {\n            if (ia[3][6][j] != 5)\n                 abort();\n@@ -52,7 +51,7 @@ int main1 ()\n   /* Multidimensional array. Not aligned. */\n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            ic[2][1][6][j+1] = 5;\n         }\n@@ -61,7 +60,7 @@ int main1 ()\n   /* check results: */  \n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            if (ic[2][1][6][j+1] != 5)\n                 abort();"}, {"sha": "c63ae2fd21b4c9b9ec5e74bc170d739f07c912a8", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-69.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 8\n+#define N 12\n \n struct s{\n   int m;"}, {"sha": "6c0268cc78c830b774cc1e45bbd48bee6897b565", "filename": "gcc/testsuite/gcc.dg/vect/vect-118.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-118.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-options \"-O3 -fdump-tree-vect-details\" } */\n+\n+#include \"tree-vect.h\"\n+\n+#define M 10\n+#define N 3\n+\n+void __attribute__((noinline))\n+foo (int n, int *ub, int *uc)\n+{\n+  int i, j, tmp1;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      tmp1 = 0;\n+      for (j = 0; j < M; j++)\n+        {\n+          tmp1 += uc[i] * ((int)(j << N) / M);\n+        }\n+      ub[i] = tmp1;\n+    }\n+}\n+\n+int main()\n+{\n+  int uc[16], ub[16];\n+  check_vect ();\n+  foo (16, uc, ub);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "75b1035df4d61683ada389b49f91ae57d23030ea", "filename": "gcc/testsuite/gcc.dg/vect/vect-11a.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-11a.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -9,31 +9,37 @@ extern void abort (void);\n __attribute__ ((noinline))\n void u ()\n {  \n-  unsigned int A[4] = {0x08000000,0xffffffff,0xff0000ff,0xf0000001};\n-  unsigned int B[4] = {0x08000000,0x08000001,0xff0000ff,0xf0000001};\n-  unsigned int Answer[4] = {0,0xf7ffffff,0x0200fe01,0xe0000001};\n-  unsigned int C[4];\n+  unsigned int A[8] = {0x08000000,0xffffffff,0xff0000ff,0xf0000001,\n+\t\t       0x08000000,0xffffffff,0xff0000ff,0xf0000001};\n+  unsigned int B[8] = {0x08000000,0x08000001,0xff0000ff,0xf0000001,\n+\t\t       0x08000000,0x08000001,0xff0000ff,0xf0000001};\n+  unsigned int Answer[8] = {0,0xf7ffffff,0x0200fe01,0xe0000001,\n+\t\t\t    0,0xf7ffffff,0x0200fe01,0xe0000001};\n+  unsigned int C[8];\n   int i, j;\n   \n-  for (i=0; i<4; i++)\n+  for (i=0; i<8; i++)\n     C[i] = A[i] * B[i];\n-  for (i=0; i<4; i++)\n+  for (i=0; i<8; i++)\n     if (C[i] != Answer[i])\n       abort ();\n }\n \n __attribute__ ((noinline))\n void s()\n {\n-  signed int A[4] = {0x08000000,0xffffffff,0xff0000ff,0xf0000001};\n-  signed int B[4] = {0x08000000,0x08000001,0xff0000ff,0xf0000001};\n-  signed int Answer[4] = {0,0xf7ffffff,0x0200fe01, 0xe0000001};\n-  signed int C[4];\n+  signed int A[8] = {0x08000000,0xffffffff,0xff0000ff,0xf0000001,\n+\t\t     0x08000000,0xffffffff,0xff0000ff,0xf0000001};\n+  signed int B[8] = {0x08000000,0x08000001,0xff0000ff,0xf0000001,\n+\t\t     0x08000000,0x08000001,0xff0000ff,0xf0000001};\n+  signed int Answer[8] = {0,0xf7ffffff,0x0200fe01, 0xe0000001,\n+\t\t\t  0,0xf7ffffff,0x0200fe01, 0xe0000001};\n+  signed int C[8];\n   int i, j;\n   \n-  for (i=0; i<4; i++)\n+  for (i=0; i<8; i++)\n     C[i] = A[i] * B[i];\n-  for (i=0; i<4; i++)\n+  for (i=0; i<8; i++)\n     if (C[i] != Answer[i])\n       abort ();\n }"}, {"sha": "a332fa024b9c3decabf7b95c619d88e227bf4c50", "filename": "gcc/testsuite/gcc.dg/vect/vect-66.c", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-66.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -3,20 +3,18 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 16\n+#define N 8\n \n __attribute__ ((noinline))\n-int main1 ()\n+void main1 ()\n {\n   int i, j;\n-  int ib[6] = {0,3,6,9,12,15};\n-  int ia[8][5][6];\n-  int ic[16][16][5][6];\n+  int ia[8][5][N+2];\n \n   /* Multidimensional array. Aligned. */\n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            ia[2][6][j] = 5;\n         }\n@@ -25,33 +23,48 @@ int main1 ()\n   /* check results: */  \n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            if (ia[2][6][j] != 5)\n                 abort();\n         }\n     }\n+}\n+\n+__attribute__ ((noinline))\n+void main2 ()\n+{\n+  int i, j;\n+  int ia[8][5][N+2];\n+\n   /* Multidimensional array. Aligned. */\n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n            ia[3][6][j+2] = 5;\n     }\n \n   /* check results: */  \n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 2; j < 6; j++)\n+      for (j = 2; j < N+2; j++)\n         {\n            if (ia[3][6][j] != 5)\n                 abort();\n         }\n     }\n+}\n+\n+__attribute__ ((noinline))\n+void main3 ()\n+{\n+  int i, j;\n+  int ic[16][16][5][N+2];\n \n   /* Multidimensional array. Not aligned. */\n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            ic[2][1][6][j+1] = 5;\n         }\n@@ -60,22 +73,24 @@ int main1 ()\n   /* check results: */  \n   for (i = 0; i < 16; i++)\n     {\n-      for (j = 0; j < 4; j++)\n+      for (j = 0; j < N; j++)\n         {\n            if (ic[2][1][6][j+1] != 5)\n                 abort();\n         }\n     }\n-\n-  return 0;\n }\n \n int main (void)\n { \n   check_vect ();\n \n-  return main1 ();\n+  main1 ();\n+  main2 ();\n+  main3 ();\n+\n+  return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8a2f7514e7ed17681532b7e4c52eac53fd56fca3", "filename": "gcc/testsuite/gcc.dg/vect/vect-76.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-76.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -3,7 +3,7 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 8\n+#define N 12\n #define OFF 4\n \n /* Check handling of accesses for which the \"initial condition\" -"}, {"sha": "f18924886036f3bbcd03b2ab1aa5152008c3710a", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 40\n+#define N 64\n signed short image[N][N] __attribute__ ((__aligned__(16)));\n signed short block[N][N] __attribute__ ((__aligned__(16)));\n signed short out[N] __attribute__ ((__aligned__(16)));"}, {"sha": "2d903937f91a39ae0ca8c7569284461127814dd4", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-1a.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-1a.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n \n-#define N 40\n+#define N 64\n signed short image[N][N] __attribute__ ((__aligned__(16)));\n signed short block[N][N] __attribute__ ((__aligned__(16)));\n "}, {"sha": "6c4fa1ecb08fc7ac83a1e2a924c940608f3b7cb0", "filename": "gcc/testsuite/gcc.dg/vect/vect-outer-6.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-outer-6.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -20,10 +20,10 @@ int main1 ()\n \n   int i, j;\n \n-  for (i = 0; i < 8; i++)\n+  for (i = 0; i < N; i++)\n     {\n       s = 0;\n-      for (j=0; j<8; j+=4)\n+      for (j = 0; j < N; j += 4)\n \ts += C[j];\n       A[i] = s;\n     }\n@@ -49,10 +49,10 @@ int main ()\n   main1();\n \n   /* check results:  */\n-  for (i = 0; i < 8; i++)\n+  for (i = 0; i < N; i++)\n     {\n       s = 0;\n-      for (j=0; j<8; j+=4)\n+      for (j = 0; j < N; j += 4)\n         s += C[j];\n       if (A[i] != s)\n         abort ();"}, {"sha": "346fffee102d51748533af6bb42c48fd88d25500", "filename": "gcc/testsuite/gcc.dg/vect/vect-shift-1.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-shift-1.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -4,12 +4,14 @@\n #include <stdarg.h>\n #include \"tree-vect.h\"\n \n-#define N 4\n+#define N 8\n \n int main ()\n {\n-  unsigned int A[N] = { 0x08000000, 0x08000001, 0x0ff0000ff, 0xf0000001 };\n-  unsigned int B[N] = { 0x01000000, 0x01000000, 0x01fe0001f, 0x1e000000 };\n+  unsigned int A[N] = { 0x08000000, 0x08000001, 0x0ff0000ff, 0xf0000001,\n+\t\t\t0x08000000, 0x08000001, 0x0ff0000ff, 0xf0000001 };\n+  unsigned int B[N] = { 0x01000000, 0x01000000, 0x01fe0001f, 0x1e000000,\n+\t\t\t0x01000000, 0x01000000, 0x01fe0001f, 0x1e000000 };\n   int i;\n \n   check_vect ();"}, {"sha": "7a5023aa9058a5c75c5ab57f904df5fce6d18d82", "filename": "gcc/testsuite/gcc.target/i386/vectorize1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize1.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -4,14 +4,14 @@\n extern char lanip[3][40];\n typedef struct\n {\n-  char *t[4];\n+  char *t[8];\n }tx_typ;\n \n int set_names (void)\n {\n   static tx_typ tt1;\n   int ln;\n-  for (ln = 0; ln < 4; ln++)\n+  for (ln = 0; ln < 8; ln++)\n       tt1.t[ln] = lanip[1];\n }\n "}, {"sha": "e36493dae42e81c0aaba740c89a484c30416b133", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -1018,7 +1018,7 @@ basic_block *blocks_in_phiopt_order (void);\n void tree_ssa_lim (void);\n unsigned int tree_ssa_unswitch_loops (void);\n unsigned int canonicalize_induction_variables (void);\n-unsigned int tree_unroll_loops_completely (bool);\n+unsigned int tree_unroll_loops_completely (bool, bool);\n unsigned int tree_ssa_prefetch_arrays (void);\n unsigned int remove_empty_loops (void);\n void tree_ssa_iv_optimize (void);"}, {"sha": "f391c52c374a059d2db2fc4e50bc3e7aa74dfb4e", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -290,6 +290,7 @@ extern struct gimple_opt_pass pass_if_conversion;\n extern struct gimple_opt_pass pass_loop_distribution;\n extern struct gimple_opt_pass pass_vectorize;\n extern struct gimple_opt_pass pass_complete_unroll;\n+extern struct gimple_opt_pass pass_complete_unrolli;\n extern struct gimple_opt_pass pass_parallelize_loops;\n extern struct gimple_opt_pass pass_loop_prefetch;\n extern struct gimple_opt_pass pass_iv_optimize;"}, {"sha": "1472b0d237d1b3e0bad999483f547b729e62e949", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -187,23 +187,20 @@ try_unroll_loop_completely (struct loop *loop,\n \t  > (unsigned) PARAM_VALUE (PARAM_MAX_COMPLETELY_PEELED_INSNS))\n \treturn false;\n \n-      if (ul == UL_NO_GROWTH)\n+      unr_insns = estimated_unrolled_size (ninsns, n_unroll);\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"  Loop size: %d\\n\", (int) ninsns);\n+\t  fprintf (dump_file, \"  Estimated size after unrolling: %d\\n\",\n+\t\t   (int) unr_insns);\n+\t}\n+\n+      if (ul == UL_NO_GROWTH\n+\t  && unr_insns > ninsns)\n \t{\n-\t  unr_insns = estimated_unrolled_size (ninsns, n_unroll);\n-\t  \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    {\n-\t      fprintf (dump_file, \"  Loop size: %d\\n\", (int) ninsns);\n-\t      fprintf (dump_file, \"  Estimated size after unrolling: %d\\n\",\n-\t\t       (int) unr_insns);\n-\t    }\n-\t  \n-\t  if (unr_insns > ninsns)\n-\t    {\n-\t      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t\tfprintf (dump_file, \"Not unrolling loop %d:\\n\", loop->num);\n-\t      return false;\n-\t    }\n+\t    fprintf (dump_file, \"Not unrolling loop %d.\\n\", loop->num);\n+\t  return false;\n \t}\n     }\n \n@@ -339,30 +336,45 @@ canonicalize_induction_variables (void)\n    size of the code does not increase.  */\n \n unsigned int\n-tree_unroll_loops_completely (bool may_increase_size)\n+tree_unroll_loops_completely (bool may_increase_size, bool unroll_outer)\n {\n   loop_iterator li;\n   struct loop *loop;\n-  bool changed = false;\n+  bool changed;\n   enum unroll_level ul;\n \n-  FOR_EACH_LOOP (li, loop, 0)\n+  do\n     {\n-      if (may_increase_size && maybe_hot_bb_p (loop->header))\n-\tul = UL_ALL;\n-      else\n-\tul = UL_NO_GROWTH;\n-      changed |= canonicalize_loop_induction_variables (loop,\n-\t\t\t\t\t\t\tfalse, ul,\n-\t\t\t\t\t\t\t!flag_tree_loop_ivcanon);\n-    }\n+      changed = false;\n \n-  /* Clean up the information about numbers of iterations, since complete\n-     unrolling might have invalidated it.  */\n-  scev_reset ();\n+      FOR_EACH_LOOP (li, loop, LI_ONLY_INNERMOST)\n+\t{\n+\t  if (may_increase_size && maybe_hot_bb_p (loop->header)\n+\t      /* Unroll outermost loops only if asked to do so or they do\n+\t\t not cause code growth.  */\n+\t      && (unroll_outer\n+\t\t  || loop_outer (loop_outer (loop))))\n+\t    ul = UL_ALL;\n+\t  else\n+\t    ul = UL_NO_GROWTH;\n+\t  changed |= canonicalize_loop_induction_variables\n+\t\t       (loop, false, ul, !flag_tree_loop_ivcanon);\n+\t}\n+\n+      if (changed)\n+\t{\n+\t  /* This will take care of removing completely unrolled loops\n+\t     from the loop structures so we can continue unrolling now\n+\t     innermost loops.  */\n+\t  cleanup_tree_cfg ();\n+\n+\t  /* Clean up the information about numbers of iterations, since\n+\t     complete unrolling might have invalidated it.  */\n+\t  scev_reset ();\n+\t}\n+    }\n+  while (changed);\n \n-  if (changed)\n-    return TODO_cleanup_cfg;\n   return 0;\n }\n "}, {"sha": "1ff6254c0b1a36ae83d16aa97a1ed14a7fd05786", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -248,10 +248,15 @@ find_uses_to_rename_use (basic_block bb, tree use, bitmap *use_blocks,\n     return;\n   def_loop = def_bb->loop_father;\n \n-  /* If the definition is not inside loop, it is not interesting.  */\n+  /* If the definition is not inside a loop, it is not interesting.  */\n   if (!loop_outer (def_loop))\n     return;\n \n+  /* If the use is not outside of the loop it is defined in, it is not\n+     interesting.  */\n+  if (flow_bb_inside_loop_p (def_loop, bb))\n+    return;\n+\n   if (!use_blocks[ver])\n     use_blocks[ver] = BITMAP_ALLOC (NULL);\n   bitmap_set_bit (use_blocks[ver], bb->index);\n@@ -592,7 +597,8 @@ tree_duplicate_loop_to_header_edge (struct loop *loop, edge e,\n     return false;\n \n #ifdef ENABLE_CHECKING\n-  verify_loop_closed_ssa ();\n+  if (loops_state_satisfies_p (LOOP_CLOSED_SSA))\n+    verify_loop_closed_ssa ();\n #endif\n \n   first_new_block = last_basic_block;"}, {"sha": "52f5a7f58f8c47a5b69b13b91bcd0c10c40a51cc", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6e840eed2559f03c82cdb203cc2339c4a5c6425/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=d6e840eed2559f03c82cdb203cc2339c4a5c6425", "patch": "@@ -223,13 +223,16 @@ struct gimple_opt_pass pass_predcom =\n static unsigned int\n tree_vectorize (void)\n {\n+  if (number_of_loops () <= 1)\n+    return 0;\n+\n   return vectorize_loops ();\n }\n \n static bool\n gate_tree_vectorize (void)\n {\n-  return flag_tree_vectorize && number_of_loops () > 1;\n+  return flag_tree_vectorize;\n }\n \n struct gimple_opt_pass pass_vectorize =\n@@ -466,7 +469,7 @@ tree_complete_unroll (void)\n \n   return tree_unroll_loops_completely (flag_unroll_loops\n \t\t\t\t       || flag_peel_loops\n-\t\t\t\t       || optimize >= 3);\n+\t\t\t\t       || optimize >= 3, true);\n }\n \n static bool\n@@ -495,6 +498,53 @@ struct gimple_opt_pass pass_complete_unroll =\n  }\n };\n \n+/* Complete unrolling of inner loops.  */\n+\n+static unsigned int\n+tree_complete_unroll_inner (void)\n+{\n+  unsigned ret = 0;\n+\n+  loop_optimizer_init (LOOPS_NORMAL\n+\t\t       | LOOPS_HAVE_RECORDED_EXITS);\n+  if (number_of_loops () > 1)\n+    {\n+      scev_initialize ();\n+      ret = tree_unroll_loops_completely (optimize >= 3, false);\n+      free_numbers_of_iterations_estimates ();\n+      scev_finalize ();\n+    }\n+  loop_optimizer_finalize ();\n+\n+  return ret;\n+}\n+\n+static bool\n+gate_tree_complete_unroll_inner (void)\n+{\n+  return optimize >= 2;\n+}\n+\n+struct gimple_opt_pass pass_complete_unrolli =\n+{\n+ {\n+  GIMPLE_PASS,\n+  \"cunrolli\",\t\t\t\t/* name */\n+  gate_tree_complete_unroll_inner,\t/* gate */\n+  tree_complete_unroll_inner,\t       \t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  TV_COMPLETE_UNROLL,\t  \t\t/* tv_id */\n+  PROP_cfg | PROP_ssa,\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  TODO_dump_func | TODO_verify_loops\n+    | TODO_ggc_collect \t\t\t/* todo_flags_finish */\n+ }\n+};\n+\n /* Parallelization.  */\n \n static bool"}]}