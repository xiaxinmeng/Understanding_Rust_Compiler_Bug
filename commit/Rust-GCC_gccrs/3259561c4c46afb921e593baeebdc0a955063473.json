{"sha": "3259561c4c46afb921e593baeebdc0a955063473", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI1OTU2MWM0YzQ2YWZiOTIxZTU5M2JhZWViZGMwYTk1NTA2MzQ3Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2003-12-03T09:18:28Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-12-03T09:18:28Z"}, "message": "re PR libstdc++/12791 (_M_extract_num returns a wrong __beg in case of error)\n\n2003-12-03  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/12791\n\t* include/bits/locale_facets.tcc (time_get::_M_extract_num):\n\tRewrite, stop the parsing as soon as a digit cannot possibly\n\tlead to a final number within the bounds; otherwise, simplify,\n\tavoiding __ctype.is() and atoi().\n\t* testsuite/22_locale/time_get/get_date/char/12791.cc: New.\n\t* testsuite/22_locale/time_get/get_date/wchar_t/12791.cc: New.\n\n\t* include/bits/locale_facets.tcc (time_get::_M_extract_via_format):\n\tMinor tweak: a 4-digit integer cannot be bigger than 9999.\n\n\t* testsuite/22_locale/time_get/get_date/wchar_t/1.cc: Use\n\ttype-correct wchar_t string literals.\n\t* testsuite/22_locale/time_get/get_monthname/wchar_t/1.cc: Ditto.\n\t* testsuite/22_locale/time_get/get_time/wchar_t/1.cc: Ditto.\n\t* testsuite/22_locale/time_get/get_weekday/wchar_t/1.cc: Ditto.\n\t* testsuite/22_locale/time_get/get_year/wchar_t/1.cc: Ditto.\n\nFrom-SVN: r74220", "tree": {"sha": "6b2133520095c88dcebbddb70318a43ff390faa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b2133520095c88dcebbddb70318a43ff390faa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3259561c4c46afb921e593baeebdc0a955063473", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3259561c4c46afb921e593baeebdc0a955063473", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3259561c4c46afb921e593baeebdc0a955063473", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3259561c4c46afb921e593baeebdc0a955063473/comments", "author": null, "committer": null, "parents": [{"sha": "c6a25d3a3dff96bf920d34b31faba6fdb5ff9323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6a25d3a3dff96bf920d34b31faba6fdb5ff9323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6a25d3a3dff96bf920d34b31faba6fdb5ff9323"}], "stats": {"total": 206, "additions": 181, "deletions": 25}, "files": [{"sha": "1a45fef10c361b0a6f8edb6950a3ad2f20f39586", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -1,3 +1,23 @@\n+2003-12-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/12791\n+\t* include/bits/locale_facets.tcc (time_get::_M_extract_num):\n+\tRewrite, stop the parsing as soon as a digit cannot possibly\n+\tlead to a final number within the bounds; otherwise, simplify,\n+\tavoiding __ctype.is() and atoi().\n+\t* testsuite/22_locale/time_get/get_date/char/12791.cc: New.\n+\t* testsuite/22_locale/time_get/get_date/wchar_t/12791.cc: New.\n+\n+\t* include/bits/locale_facets.tcc (time_get::_M_extract_via_format):\n+\tMinor tweak: a 4-digit integer cannot be bigger than 9999.\n+\n+\t* testsuite/22_locale/time_get/get_date/wchar_t/1.cc: Use\n+\ttype-correct wchar_t string literals.\n+\t* testsuite/22_locale/time_get/get_monthname/wchar_t/1.cc: Ditto.\n+\t* testsuite/22_locale/time_get/get_time/wchar_t/1.cc: Ditto.\n+\t* testsuite/22_locale/time_get/get_weekday/wchar_t/1.cc: Ditto.\n+\t* testsuite/22_locale/time_get/get_year/wchar_t/1.cc: Ditto.\n+\n 2003-12-02  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (time_get::do_get_year):"}, {"sha": "e921585fe9cb10d834045d49fc41b78f9044d0a7", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -1679,8 +1679,7 @@ namespace std\n \t\t  break;\n \t\tcase 'Y':\n \t\t  // Year [1900). [tm_year]\n-\t\t  _M_extract_num(__beg, __end, __mem, 0, \n-\t\t\t\t numeric_limits<int>::max(), 4, \n+\t\t  _M_extract_num(__beg, __end, __mem, 0, 9999, 4, \n \t\t\t\t __ctype, __err);\n \t\t  if (!__err)\n \t\t    __tm->tm_year = __mem - 1900;\n@@ -1732,23 +1731,29 @@ namespace std\n \t\t   const ctype<_CharT>& __ctype, \n \t\t   ios_base::iostate& __err) const\n     {\n+      // As-is works for __len = 1, 2, 4, the values actually used.\n+      int __mult = __len == 2 ? 10 : (__len == 4 ? 1000 : 1);\n+\n+      ++__min;\n       size_t __i = 0;\n-      string __digits;\n-      bool __testvalid = true;\n-      for (; __beg != __end && __i < __len \n-\t     && __ctype.is(ctype_base::digit, *__beg); ++__beg, ++__i) \n-\t__digits += __ctype.narrow(*__beg, 0);\n-      if (__i == __len)\n+      int __value = 0;\n+      for (; __beg != __end && __i < __len; ++__beg, ++__i)\n \t{\n-\t  const int __value = std::atoi(__digits.c_str());\n-\t  if (__min <= __value && __value <= __max)\n-\t    __member = __value;\n+\t  const char __c = __ctype.narrow(*__beg, '*');\n+\t  if (__c >= '0' && __c <= '9')\n+\t    {\n+\t      __value = __value * 10 + (__c - '0');\n+\t      const int __valuec = __value * __mult;\n+\t      if (__valuec > __max || __valuec + __mult < __min)\n+\t\tbreak;\n+\t      __mult /= 10;\n+\t    }\n \t  else\n-\t    __testvalid = false;\n+\t    break;\n \t}\n+      if (__i == __len)\n+\t__member = __value;\n       else\n-\t__testvalid = false;\n-      if (!__testvalid)\n \t__err |= ios_base::failbit;\n     }\n \n@@ -2031,7 +2036,8 @@ namespace std\n       // NB: This size is arbitrary. Should this be a data member,\n       // initialized at construction?\n       const size_t __maxlen = 64;\n-      char_type* __res = static_cast<char_type*>(__builtin_alloca(sizeof(char_type) * __maxlen));\n+      char_type* __res = static_cast<char_type*>(__builtin_alloca(sizeof(char_type)\n+\t\t\t\t\t\t\t\t  * __maxlen));\n \n       // NB: In IEE 1003.1-200x, and perhaps other locale models, it\n       // is possible that the format character will be longer than one"}, {"sha": "643bbca81d4a6619c052207886e9b12162a23910", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/12791.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F12791.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F12791.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F12791.cc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -0,0 +1,65 @@\n+// 2003-12-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12791\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  iss.str(\"60/04/71\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_date(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it01 == '6' );\n+\n+  iss.str(\"04/38/71\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_date(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it02 == '8' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "e4b67e0778dd2b1e9afc20f8e4dd692bc665c1b8", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -80,7 +80,7 @@ void test01()\n   VERIFY( time02.tm_mon == time_bday.tm_mon );\n   VERIFY( time02.tm_mday == time_bday.tm_mday );\n   VERIFY( errorstate == good );\n-  VERIFY( *is_it02 == ' ');\n+  VERIFY( *is_it02 == L' ' );\n \n   iss.str(L\"04/04d/71 \");\n   iterator_type is_it03(iss);\n@@ -92,7 +92,7 @@ void test01()\n   VERIFY( time03.tm_mon == time_bday.tm_mon );\n   VERIFY( time03.tm_mday == time_bday.tm_mday );\n   VERIFY( errorstate == ios_base::failbit );\n-  VERIFY( *is_it03 == 'd');\n+  VERIFY( *is_it03 == L'd' );\n }\n \n int main()"}, {"sha": "d06fca8d34e366f5297dce2a60333eb5c8a5d34b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/12791.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F12791.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F12791.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F12791.cc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -0,0 +1,65 @@\n+// 2003-12-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/12791\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  wistringstream iss;\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  iss.str(L\"60/04/71\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_date(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it01 == L'6' );\n+\n+  iss.str(L\"04/38/71\");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_date(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it02 == L'8' );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "17a8075f16d3ab9a5d911c2570e913b1f11aa30f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/1.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F1.cc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -81,7 +81,7 @@ void test01()\n   tim_get.get_monthname(is_it03, end, iss, errorstate, &time03);\n   VERIFY( time03.tm_mon == time_bday.tm_mon );\n   VERIFY( errorstate == good );\n-  VERIFY( *is_it03 == ' ');\n+  VERIFY( *is_it03 == L' ' );\n \n   iss.str(L\"Aar\");\n   iterator_type is_it04(iss);\n@@ -90,7 +90,7 @@ void test01()\n   errorstate = good;\n   tim_get.get_monthname(is_it04, end, iss, errorstate, &time04);\n   VERIFY( time04.tm_mon == 5 );\n-  VERIFY( *is_it04 == 'a');\n+  VERIFY( *is_it04 == L'a' );\n   VERIFY( errorstate == ios_base::failbit );\n \n   iss.str(L\"December \");\n@@ -100,7 +100,7 @@ void test01()\n   tim_get.get_monthname(is_it05, end, iss, errorstate, &time05);\n   VERIFY( time05.tm_mon == 11 );\n   VERIFY( errorstate == good );\n-  VERIFY( *is_it05 == ' ');\n+  VERIFY( *is_it05 == L' ' );\n \n   iss.str(L\"Decelember \"); \n   iterator_type is_it06(iss);\n@@ -110,7 +110,7 @@ void test01()\n   tim_get.get_monthname(is_it06, end, iss, errorstate, &time06);\n   VERIFY( time06.tm_mon == 4 );\n   VERIFY( errorstate == ios_base::failbit );\n-  VERIFY( *is_it05 == 'l');\n+  VERIFY( *is_it05 == L'l' );\n }\n \n int main()"}, {"sha": "f8d0bc6de608c1873f86c90e04169bad50081a1f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F1.cc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -94,7 +94,7 @@ void test01()\n   errorstate = good;\n   tim_get.get_time(is_it04, end, iss, errorstate, &time04);\n   VERIFY( time01.tm_hour == time_bday.tm_hour );\n-  VERIFY( *is_it04 == 'a');\n+  VERIFY( *is_it04 == L'a' );\n   VERIFY( errorstate == ios_base::failbit );\n \n   // inspection of named locales, de_DE"}, {"sha": "578d18f7e047e93e3bad509de9de9742593f77ff", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/1.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3259561c4c46afb921e593baeebdc0a955063473/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc?ref=3259561c4c46afb921e593baeebdc0a955063473", "patch": "@@ -76,7 +76,7 @@ void test01()\n   tim_get.get_year(is_it02, end, iss, errorstate, &time02);\n   VERIFY( time02.tm_year == time_bday.tm_year );\n   VERIFY( errorstate == good );\n-  VERIFY( *is_it02 == ' ');\n+  VERIFY( *is_it02 == L' ' );\n \n   iss.str(L\"197d1 \");\n   iterator_type is_it03(iss);\n@@ -86,7 +86,7 @@ void test01()\n   tim_get.get_year(is_it03, end, iss, errorstate, &time03);\n   VERIFY( time03.tm_year == 3 );\n   VERIFY( errorstate == ios_base::failbit );\n-  VERIFY( *is_it03 == 'd');\n+  VERIFY( *is_it03 == L'd' );\n \n   iss.str(L\"71d71\");\n   iterator_type is_it04(iss);\n@@ -95,7 +95,7 @@ void test01()\n   tim_get.get_year(is_it04, end, iss, errorstate, &time04);\n   VERIFY( time04.tm_year == time_bday.tm_year );\n   VERIFY( errorstate == good );\n-  VERIFY( *is_it03 == 'd');\n+  VERIFY( *is_it03 == L'd' );\n \n   iss.str(L\"71\");\n   iterator_type is_it05(iss);"}]}