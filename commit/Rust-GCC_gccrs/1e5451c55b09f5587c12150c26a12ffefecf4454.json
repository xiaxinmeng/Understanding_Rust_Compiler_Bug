{"sha": "1e5451c55b09f5587c12150c26a12ffefecf4454", "node_id": "C_kwDOANBUbNoAKDFlNTQ1MWM1NWIwOWY1NTg3YzEyMTUwYzI2YTEyZmZlZmVjZjQ0NTQ", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-29T23:37:39Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-30T16:46:25Z"}, "message": "RISC-V: Add vloxei16 C++ API intrinsic testcases\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vloxei16-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_mu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_mu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_mu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tu-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tum-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tum-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tum-3.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tumu-1.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tumu-2.C: New test.\n\t* g++.target/riscv/rvv/base/vloxei16_tumu-3.C: New test.", "tree": {"sha": "5dbe8c2d97fd4345b9a37684abf8a867e853e287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbe8c2d97fd4345b9a37684abf8a867e853e287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e5451c55b09f5587c12150c26a12ffefecf4454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5451c55b09f5587c12150c26a12ffefecf4454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e5451c55b09f5587c12150c26a12ffefecf4454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e5451c55b09f5587c12150c26a12ffefecf4454/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e"}], "stats": {"total": 5976, "additions": 5976, "deletions": 0}, "files": [{"sha": "0edea6d951d83f6c043f034602af2d3126cef522", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16-1.C", "status": "added", "additions": 660, "deletions": 0, "changes": 660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-1.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,660 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16(const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16(const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16(const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16(const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16(const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16(const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16(const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16(const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16(const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16(const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16(const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16(const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16(const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16(const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16(const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16(const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16(const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16(const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16(const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16(const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16(const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16(const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16(const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16(const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16(const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16(const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16(const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16(const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16(const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16(const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16(const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16(const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16(const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16(const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16(const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16(const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16(const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16(const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16(const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16(const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16(const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16(const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16(const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16(const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16(const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16(const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16(const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16(const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16(const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16(const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16(const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,vl);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei16(vbool64_t mask,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16(vbool32_t mask,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16(vbool16_t mask,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16(vbool8_t mask,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16(vbool4_t mask,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16(vbool2_t mask,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16(vbool64_t mask,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16(vbool32_t mask,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16(vbool16_t mask,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16(vbool8_t mask,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16(vbool4_t mask,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16(vbool2_t mask,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16(vbool64_t mask,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16(vbool32_t mask,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16(vbool16_t mask,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16(vbool8_t mask,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16(vbool4_t mask,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16(vbool64_t mask,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16(vbool32_t mask,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16(vbool16_t mask,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16(vbool8_t mask,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16(vbool64_t mask,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16(vbool32_t mask,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16(vbool16_t mask,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16(vbool8_t mask,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16(vbool4_t mask,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16(vbool2_t mask,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16(vbool64_t mask,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16(vbool32_t mask,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16(vbool16_t mask,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16(vbool8_t mask,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16(vbool4_t mask,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16(vbool2_t mask,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16(vbool64_t mask,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16(vbool32_t mask,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16(vbool16_t mask,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16(vbool8_t mask,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16(vbool4_t mask,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16(vbool64_t mask,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16(vbool32_t mask,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16(vbool16_t mask,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16(vbool8_t mask,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16(vbool64_t mask,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16(vbool32_t mask,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16(vbool16_t mask,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16(vbool8_t mask,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16(vbool4_t mask,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16(vbool64_t mask,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16(vbool32_t mask,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16(vbool16_t mask,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16(vbool8_t mask,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "26ec06dc6ccdede6ac9f9e4e9d1164589b73196c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16-2.C", "status": "added", "additions": 660, "deletions": 0, "changes": 660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-2.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,660 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16(const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16(const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16(const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16(const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16(const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16(const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16(const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16(const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16(const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16(const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16(const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16(const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16(const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16(const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16(const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16(const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16(const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16(const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16(const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16(const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16(const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16(const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16(const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16(const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16(const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16(const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16(const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16(const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16(const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16(const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16(const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16(const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16(const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16(const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16(const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16(const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16(const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16(const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16(const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16(const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16(const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16(const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16(const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16(const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16(const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16(const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16(const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16(const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16(const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16(const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16(const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,31);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei16(vbool64_t mask,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16(vbool32_t mask,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16(vbool16_t mask,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16(vbool8_t mask,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16(vbool4_t mask,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16(vbool2_t mask,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16(vbool64_t mask,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16(vbool32_t mask,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16(vbool16_t mask,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16(vbool8_t mask,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16(vbool4_t mask,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16(vbool2_t mask,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16(vbool64_t mask,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16(vbool32_t mask,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16(vbool16_t mask,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16(vbool8_t mask,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16(vbool4_t mask,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16(vbool64_t mask,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16(vbool32_t mask,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16(vbool16_t mask,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16(vbool8_t mask,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16(vbool64_t mask,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16(vbool32_t mask,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16(vbool16_t mask,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16(vbool8_t mask,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16(vbool4_t mask,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16(vbool2_t mask,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16(vbool64_t mask,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16(vbool32_t mask,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16(vbool16_t mask,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16(vbool8_t mask,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16(vbool4_t mask,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16(vbool2_t mask,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16(vbool64_t mask,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16(vbool32_t mask,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16(vbool16_t mask,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16(vbool8_t mask,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16(vbool4_t mask,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16(vbool64_t mask,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16(vbool32_t mask,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16(vbool16_t mask,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16(vbool8_t mask,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16(vbool64_t mask,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16(vbool32_t mask,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16(vbool16_t mask,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16(vbool8_t mask,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16(vbool4_t mask,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16(vbool64_t mask,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16(vbool32_t mask,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16(vbool16_t mask,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16(vbool8_t mask,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "e66a505a7fff6d8e163acb36dcfd6228fe91e36d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16-3.C", "status": "added", "additions": 660, "deletions": 0, "changes": 660, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16-3.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,660 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16(const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16(const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16(const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16(const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16(const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16(const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16(const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16(const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16(const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16(const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16(const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16(const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16(const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16(const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16(const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16(const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16(const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16(const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16(const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16(const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16(const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16(const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16(const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16(const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16(const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16(const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16(const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16(const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16(const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16(const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16(const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16(const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16(const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16(const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16(const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16(const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16(const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16(const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16(const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16(const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16(const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16(const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16(const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16(const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16(const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16(const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16(const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16(const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16(const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16(const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16(const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(base,bindex,32);\n+}\n+\n+\n+vint8mf8_t test___riscv_vloxei16(vbool64_t mask,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16(vbool32_t mask,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16(vbool16_t mask,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16(vbool8_t mask,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16(vbool4_t mask,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16(vbool2_t mask,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16(vbool64_t mask,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16(vbool32_t mask,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16(vbool16_t mask,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16(vbool8_t mask,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16(vbool4_t mask,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16(vbool2_t mask,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16(vbool64_t mask,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16(vbool32_t mask,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16(vbool16_t mask,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16(vbool8_t mask,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16(vbool4_t mask,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16(vbool64_t mask,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16(vbool32_t mask,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16(vbool16_t mask,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16(vbool8_t mask,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16(vbool64_t mask,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16(vbool32_t mask,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16(vbool16_t mask,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16(vbool8_t mask,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16(vbool4_t mask,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16(vbool2_t mask,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16(vbool64_t mask,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16(vbool32_t mask,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16(vbool16_t mask,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16(vbool8_t mask,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16(vbool4_t mask,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16(vbool2_t mask,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16(vbool64_t mask,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16(vbool32_t mask,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16(vbool16_t mask,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16(vbool8_t mask,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16(vbool4_t mask,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16(vbool64_t mask,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16(vbool32_t mask,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16(vbool16_t mask,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16(vbool8_t mask,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16(vbool64_t mask,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16(vbool32_t mask,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16(vbool16_t mask,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16(vbool8_t mask,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16(vbool4_t mask,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16(vbool64_t mask,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16(vbool32_t mask,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16(vbool16_t mask,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16(vbool8_t mask,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16(mask,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0a41e0d8a1a07c71721f60703e3b7f49411351c2", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_mu-1.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-1.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "16e042e3385dffc9f424292157d9787f3f0edbcd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_mu-2.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-2.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f54e8bb6146d3ca6ea3ce7e8baad9cabeff4cc83", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_mu-3.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_mu-3.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_mu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_mu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_mu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_mu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_mu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_mu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_mu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_mu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_mu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_mu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_mu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_mu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_mu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_mu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_mu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_mu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_mu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_mu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_mu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_mu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_mu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_mu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_mu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_mu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_mu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_mu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_mu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_mu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_mu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_mu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_mu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_mu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_mu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_mu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "3024d8f5973cc5306400d087168a29efbeea1e43", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tu-1.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-1.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tu(vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tu(vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tu(vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tu(vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tu(vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tu(vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tu(vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tu(vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tu(vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tu(vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tu(vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tu(vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tu(vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tu(vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tu(vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tu(vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tu(vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tu(vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tu(vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tu(vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tu(vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tu(vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tu(vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tu(vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tu(vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tu(vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tu(vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tu(vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tu(vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tu(vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tu(vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tu(vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tu(vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tu(vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tu(vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tu(vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tu(vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tu(vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tu(vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tu(vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tu(vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tu(vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tu(vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tu(vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tu(vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tu(vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tu(vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tu(vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tu(vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tu(vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tu(vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "51448ac73dfa181a9dfaa4b908a1b45bd9144bb7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tu-2.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-2.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tu(vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tu(vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tu(vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tu(vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tu(vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tu(vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tu(vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tu(vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tu(vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tu(vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tu(vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tu(vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tu(vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tu(vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tu(vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tu(vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tu(vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tu(vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tu(vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tu(vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tu(vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tu(vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tu(vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tu(vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tu(vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tu(vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tu(vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tu(vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tu(vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tu(vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tu(vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tu(vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tu(vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tu(vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tu(vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tu(vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tu(vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tu(vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tu(vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tu(vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tu(vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tu(vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tu(vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tu(vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tu(vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tu(vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tu(vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tu(vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tu(vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tu(vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tu(vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "3400737c80c71f8723e3151fcdf60748d48e5aab", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tu-3.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tu-3.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tu(vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tu(vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tu(vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tu(vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tu(vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tu(vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tu(vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tu(vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tu(vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tu(vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tu(vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tu(vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tu(vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tu(vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tu(vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tu(vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tu(vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tu(vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tu(vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tu(vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tu(vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tu(vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tu(vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tu(vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tu(vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tu(vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tu(vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tu(vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tu(vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tu(vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tu(vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tu(vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tu(vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tu(vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tu(vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tu(vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tu(vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tu(vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tu(vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tu(vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tu(vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tu(vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tu(vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tu(vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tu(vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tu(vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tu(vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tu(vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tu(vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tu(vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tu(vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tu(merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+\\s+} 3 } } */"}, {"sha": "cb0e175270a04021e75f4633bf5530104dce8a89", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tum-1.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-1.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0ca2f95c650855b695d27bbd49f1c232335815fa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tum-2.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-2.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "dddc13b91f181b6f2b54e59d1a3ecad71cf414cc", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tum-3.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tum-3.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tum(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tum(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tum(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tum(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tum(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tum(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tum(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tum(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tum(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tum(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tum(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tum(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tum(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tum(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tum(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tum(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tum(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tum(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tum(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tum(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tum(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tum(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tum(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tum(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tum(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tum(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tum(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tum(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tum(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tum(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tum(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tum(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tum(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tum(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "4b5ee50c7601c5522d91c102f2cb08d5e9ca31d8", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tumu-1.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-1.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "f81107d5ae6b5de58d51550372511e5b9af71fae", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tumu-2.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-2.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}, {"sha": "0c764e65437fc5ffee2504dbc1ff3972e924f5a3", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vloxei16_tumu-3.C", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e5451c55b09f5587c12150c26a12ffefecf4454/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvloxei16_tumu-3.C?ref=1e5451c55b09f5587c12150c26a12ffefecf4454", "patch": "@@ -0,0 +1,333 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vloxei16_tumu(vbool64_t mask,vint8mf8_t merge,const int8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vloxei16_tumu(vbool32_t mask,vint8mf4_t merge,const int8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vloxei16_tumu(vbool16_t mask,vint8mf2_t merge,const int8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vloxei16_tumu(vbool8_t mask,vint8m1_t merge,const int8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vloxei16_tumu(vbool4_t mask,vint8m2_t merge,const int8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vloxei16_tumu(vbool2_t mask,vint8m4_t merge,const int8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vloxei16_tumu(vbool64_t mask,vint16mf4_t merge,const int16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vloxei16_tumu(vbool32_t mask,vint16mf2_t merge,const int16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vloxei16_tumu(vbool16_t mask,vint16m1_t merge,const int16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vloxei16_tumu(vbool8_t mask,vint16m2_t merge,const int16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vloxei16_tumu(vbool4_t mask,vint16m4_t merge,const int16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vloxei16_tumu(vbool2_t mask,vint16m8_t merge,const int16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vint32mf2_t merge,const int32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vint32m1_t merge,const int32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vint32m2_t merge,const int32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vint32m4_t merge,const int32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vint32m8_t merge,const int32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vint64m1_t merge,const int64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vint64m2_t merge,const int64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vint64m4_t merge,const int64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vint64m8_t merge,const int64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint8mf8_t merge,const uint8_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint8mf4_t merge,const uint8_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint8mf2_t merge,const uint8_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint8m1_t merge,const uint8_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint8m2_t merge,const uint8_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vloxei16_tumu(vbool2_t mask,vuint8m4_t merge,const uint8_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint16mf4_t merge,const uint16_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint16mf2_t merge,const uint16_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint16m1_t merge,const uint16_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint16m2_t merge,const uint16_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint16m4_t merge,const uint16_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vloxei16_tumu(vbool2_t mask,vuint16m8_t merge,const uint16_t* base,vuint16m8_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint32mf2_t merge,const uint32_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint32m1_t merge,const uint32_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint32m2_t merge,const uint32_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint32m4_t merge,const uint32_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vuint32m8_t merge,const uint32_t* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vuint64m1_t merge,const uint64_t* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vuint64m2_t merge,const uint64_t* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vuint64m4_t merge,const uint64_t* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vuint64m8_t merge,const uint64_t* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32mf2_t test___riscv_vloxei16_tumu(vbool64_t mask,vfloat32mf2_t merge,const float* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m1_t test___riscv_vloxei16_tumu(vbool32_t mask,vfloat32m1_t merge,const float* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m2_t test___riscv_vloxei16_tumu(vbool16_t mask,vfloat32m2_t merge,const float* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m4_t test___riscv_vloxei16_tumu(vbool8_t mask,vfloat32m4_t merge,const float* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat32m8_t test___riscv_vloxei16_tumu(vbool4_t mask,vfloat32m8_t merge,const float* base,vuint16m4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m1_t test___riscv_vloxei16_tumu(vbool64_t mask,vfloat64m1_t merge,const double* base,vuint16mf4_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m2_t test___riscv_vloxei16_tumu(vbool32_t mask,vfloat64m2_t merge,const double* base,vuint16mf2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m4_t test___riscv_vloxei16_tumu(vbool16_t mask,vfloat64m4_t merge,const double* base,vuint16m1_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+vfloat64m8_t test___riscv_vloxei16_tumu(vbool8_t mask,vfloat64m8_t merge,const double* base,vuint16m2_t bindex,size_t vl)\n+{\n+    return __riscv_vloxei16_tumu(mask,merge,base,bindex,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*mu\\s+vloxei16\\.v\\s+v[0-9]+,\\s*0?\\([a-x0-9]+\\),\\s*v[0-9]+,\\s*v0.t} 3 } } */"}]}