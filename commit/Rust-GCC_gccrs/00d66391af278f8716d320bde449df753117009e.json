{"sha": "00d66391af278f8716d320bde449df753117009e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBkNjYzOTFhZjI3OGY4NzE2ZDMyMGJkZTQ0OWRmNzUzMTE3MDA5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-11-19T14:43:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-11-19T14:43:02Z"}, "message": "gimple.h (gimple_build_assign_with_ops): Add unary arg overload.\n\n\t* gimple.h (gimple_build_assign_with_ops): Add unary arg overload.\n\t(gimple_assign_set_rhs_with_ops_1): Renamed to ...\n\t(gimple_assign_set_rhs_with_ops): ... this.  Adjust binary arg\n\tinline overload to use it.  Add unary arg overload.\n\t* gimple.c (gimple_build_assign_with_ops): New unary arg overload.\n\t(gimple_assign_set_rhs_from_tree): Use\n\tgimple_assign_set_rhs_with_ops instead of\n\tgimple_assign_set_rhs_with_ops_1.\n\t(gimple_assign_set_rhs_with_ops_1): Renamed to ...\n\t(gimple_assign_set_rhs_with_ops): ... this.\n\t* ipa-split.c (split_function): Remove last NULL argument\n\tfrom gimple_build_assign_with_ops call.\n\t* tree-ssa-loop-im.c\n\t(move_computations_dom_walker::before_dom_children): Likewise.\n\t* tsan.c (instrument_builtin_call): Likewise.\n\t* tree-vect-stmts.c (vect_init_vector, vectorizable_mask_load_store,\n\tvectorizable_conversion, vectorizable_load): Likewise.\n\t* tree-vect-loop.c (vect_is_simple_reduction_1,\n\tget_initial_def_for_induction): Likewise.\n\t* tree-loop-distribution.c (generate_memset_builtin): Likewise.\n\t* tree-vect-patterns.c (vect_handle_widen_op_by_const,\n\tvect_recog_widen_mult_pattern, vect_operation_fits_smaller_type,\n\tvect_recog_over_widening_pattern, vect_recog_rotate_pattern,\n\tvect_recog_vector_vector_shift_pattern, vect_recog_divmod_pattern,\n\tvect_recog_mixed_size_cond_pattern, adjust_bool_pattern_cast,\n\tadjust_bool_pattern, vect_recog_bool_pattern): Likewise.\n\t* tree-ssa-phiopt.c (conditional_replacement, abs_replacement,\n\tneg_replacement): Likewise.\n\t* asan.c (build_shadow_mem_access, maybe_create_ssa_name,\n\tmaybe_cast_to_ptrmode, asan_expand_check_ifn): Likewise.\n\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n\t* omp-low.c (lower_rec_input_clauses, expand_omp_for_generic,\n\texpand_omp_for_static_nochunk, expand_omp_for_static_chunk,\n\tsimd_clone_adjust): Likewise.\n\t* tree-vect-loop-manip.c (vect_create_cond_for_align_checks): Likewise.\n\t* gimple-ssa-strength-reduction.c (introduce_cast_before_cand,\n\treplace_one_candidate): Likewise.\n\t* gimple-builder.c (build_type_cast): Likewise.\n\t* tree-ssa-forwprop.c (simplify_rotate): Likewise.\n\t(forward_propagate_addr_expr_1): Remove last NULL argument\n\tfrom gimple_assign_set_rhs_with_ops call.\n\t(simplify_vector_constructor): Use gimple_assign_set_rhs_with_ops\n\tinstead of gimple_assign_set_rhs_with_ops_1.\n\t* tree-ssa-reassoc.c (maybe_optimize_range_tests): Remove last NULL\n\targument from gimple_build_assign_with_ops call.\n\t(repropagate_negates): Remove last NULL argument from\n\tgimple_assign_set_rhs_with_ops call.\n\t* ubsan.c (ubsan_expand_null_ifn, ubsan_expand_objsize_ifn): Remove\n\tlast NULL argument from gimple_build_assign_with_ops call.\n\t(instrument_bool_enum_load): Likewise.  Remove last NULL argument\n\tfrom gimple_assign_set_rhs_with_ops call.\n\t* tree-ssa-math-opts.c (build_and_insert_cast, convert_mult_to_fma):\n\tRemove last NULL argument from gimple_build_assign_with_ops call.\n\t(bswap_replace): Likewise.  Use gimple_assign_set_rhs_with_ops instead\n\tof gimple_assign_set_rhs_with_ops_1.\n\t(convert_plusminus_to_widen): Use gimple_assign_set_rhs_with_ops\n\tinstead of gimple_assign_set_rhs_with_ops_1.\n\t* gimple-fold.c (replace_stmt_with_simplification): Likewise.\n\t(rewrite_to_defined_overflow, gimple_build): Remove last NULL argument\n\tfrom gimple_build_assign_with_ops call.\n\t* tree-ssa-strlen.c (handle_pointer_plus): Remove last NULL argument\n\tfrom gimple_assign_set_rhs_with_ops call.\n\t* tree-vrp.c (simplify_truth_ops_using_ranges,\n\tsimplify_bit_ops_using_ranges): Remove last NULL argument from\n\tgimple_assign_set_rhs_with_ops call.\n\t(simplify_float_conversion_using_ranges,\n\tsimplify_internal_call_using_ranges): Remove last NULL argument from\n\tgimple_build_assign_with_ops call.\n\nFrom-SVN: r217781", "tree": {"sha": "2167f9378a88e24dbc4dcb866270087c8a42fe0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2167f9378a88e24dbc4dcb866270087c8a42fe0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00d66391af278f8716d320bde449df753117009e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d66391af278f8716d320bde449df753117009e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d66391af278f8716d320bde449df753117009e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d66391af278f8716d320bde449df753117009e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3969c51028bcc4fd5d76d611784b31e86f33ed90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3969c51028bcc4fd5d76d611784b31e86f33ed90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3969c51028bcc4fd5d76d611784b31e86f33ed90"}], "stats": {"total": 339, "additions": 195, "deletions": 144}, "files": [{"sha": "16f6e1b009fb93518b1a3b7a975faf57c77753ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1,3 +1,74 @@\n+2014-11-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple.h (gimple_build_assign_with_ops): Add unary arg overload.\n+\t(gimple_assign_set_rhs_with_ops_1): Renamed to ...\n+\t(gimple_assign_set_rhs_with_ops): ... this.  Adjust binary arg\n+\tinline overload to use it.  Add unary arg overload.\n+\t* gimple.c (gimple_build_assign_with_ops): New unary arg overload.\n+\t(gimple_assign_set_rhs_from_tree): Use\n+\tgimple_assign_set_rhs_with_ops instead of\n+\tgimple_assign_set_rhs_with_ops_1.\n+\t(gimple_assign_set_rhs_with_ops_1): Renamed to ...\n+\t(gimple_assign_set_rhs_with_ops): ... this.\n+\t* ipa-split.c (split_function): Remove last NULL argument\n+\tfrom gimple_build_assign_with_ops call.\n+\t* tree-ssa-loop-im.c\n+\t(move_computations_dom_walker::before_dom_children): Likewise.\n+\t* tsan.c (instrument_builtin_call): Likewise.\n+\t* tree-vect-stmts.c (vect_init_vector, vectorizable_mask_load_store,\n+\tvectorizable_conversion, vectorizable_load): Likewise.\n+\t* tree-vect-loop.c (vect_is_simple_reduction_1,\n+\tget_initial_def_for_induction): Likewise.\n+\t* tree-loop-distribution.c (generate_memset_builtin): Likewise.\n+\t* tree-vect-patterns.c (vect_handle_widen_op_by_const,\n+\tvect_recog_widen_mult_pattern, vect_operation_fits_smaller_type,\n+\tvect_recog_over_widening_pattern, vect_recog_rotate_pattern,\n+\tvect_recog_vector_vector_shift_pattern, vect_recog_divmod_pattern,\n+\tvect_recog_mixed_size_cond_pattern, adjust_bool_pattern_cast,\n+\tadjust_bool_pattern, vect_recog_bool_pattern): Likewise.\n+\t* tree-ssa-phiopt.c (conditional_replacement, abs_replacement,\n+\tneg_replacement): Likewise.\n+\t* asan.c (build_shadow_mem_access, maybe_create_ssa_name,\n+\tmaybe_cast_to_ptrmode, asan_expand_check_ifn): Likewise.\n+\t* tree-vect-slp.c (vect_get_constant_vectors): Likewise.\n+\t* omp-low.c (lower_rec_input_clauses, expand_omp_for_generic,\n+\texpand_omp_for_static_nochunk, expand_omp_for_static_chunk,\n+\tsimd_clone_adjust): Likewise.\n+\t* tree-vect-loop-manip.c (vect_create_cond_for_align_checks): Likewise.\n+\t* gimple-ssa-strength-reduction.c (introduce_cast_before_cand,\n+\treplace_one_candidate): Likewise.\n+\t* gimple-builder.c (build_type_cast): Likewise.\n+\t* tree-ssa-forwprop.c (simplify_rotate): Likewise.\n+\t(forward_propagate_addr_expr_1): Remove last NULL argument\n+\tfrom gimple_assign_set_rhs_with_ops call.\n+\t(simplify_vector_constructor): Use gimple_assign_set_rhs_with_ops\n+\tinstead of gimple_assign_set_rhs_with_ops_1.\n+\t* tree-ssa-reassoc.c (maybe_optimize_range_tests): Remove last NULL\n+\targument from gimple_build_assign_with_ops call.\n+\t(repropagate_negates): Remove last NULL argument from\n+\tgimple_assign_set_rhs_with_ops call.\n+\t* ubsan.c (ubsan_expand_null_ifn, ubsan_expand_objsize_ifn): Remove\n+\tlast NULL argument from gimple_build_assign_with_ops call.\n+\t(instrument_bool_enum_load): Likewise.  Remove last NULL argument\n+\tfrom gimple_assign_set_rhs_with_ops call.\n+\t* tree-ssa-math-opts.c (build_and_insert_cast, convert_mult_to_fma):\n+\tRemove last NULL argument from gimple_build_assign_with_ops call.\n+\t(bswap_replace): Likewise.  Use gimple_assign_set_rhs_with_ops instead\n+\tof gimple_assign_set_rhs_with_ops_1.\n+\t(convert_plusminus_to_widen): Use gimple_assign_set_rhs_with_ops\n+\tinstead of gimple_assign_set_rhs_with_ops_1.\n+\t* gimple-fold.c (replace_stmt_with_simplification): Likewise.\n+\t(rewrite_to_defined_overflow, gimple_build): Remove last NULL argument\n+\tfrom gimple_build_assign_with_ops call.\n+\t* tree-ssa-strlen.c (handle_pointer_plus): Remove last NULL argument\n+\tfrom gimple_assign_set_rhs_with_ops call.\n+\t* tree-vrp.c (simplify_truth_ops_using_ranges,\n+\tsimplify_bit_ops_using_ranges): Remove last NULL argument from\n+\tgimple_assign_set_rhs_with_ops call.\n+\t(simplify_float_conversion_using_ranges,\n+\tsimplify_internal_call_using_ranges): Remove last NULL argument from\n+\tgimple_build_assign_with_ops call.\n+\n 2014-11-19  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR target/61915"}, {"sha": "ff08f1becd7f6b6b45557a7a336aa0387facecdd", "filename": "gcc/asan.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1599,15 +1599,14 @@ build_shadow_mem_access (gimple_stmt_iterator *gsi, location_t location,\n \n   g = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t    make_ssa_name (shadow_ptr_type, NULL),\n-\t\t\t\t    gimple_assign_lhs (g), NULL_TREE);\n+\t\t\t\t    gimple_assign_lhs (g));\n   gimple_set_location (g, location);\n   gsi_insert_after (gsi, g, GSI_NEW_STMT);\n \n   t = build2 (MEM_REF, shadow_type, gimple_assign_lhs (g),\n \t      build_int_cst (shadow_ptr_type, 0));\n   g = gimple_build_assign_with_ops (MEM_REF,\n-\t\t\t\t    make_ssa_name (shadow_type, NULL),\n-\t\t\t\t    t, NULL_TREE);\n+\t\t\t\t    make_ssa_name (shadow_type, NULL), t);\n   gimple_set_location (g, location);\n   gsi_insert_after (gsi, g, GSI_NEW_STMT);\n   return gimple_assign_lhs (g);\n@@ -1625,7 +1624,7 @@ maybe_create_ssa_name (location_t loc, tree base, gimple_stmt_iterator *iter,\n   gimple g\n     = gimple_build_assign_with_ops (TREE_CODE (base),\n \t\t\t\t    make_ssa_name (TREE_TYPE (base), NULL),\n-\t\t\t\t    base, NULL_TREE);\n+\t\t\t\t    base);\n   gimple_set_location (g, loc);\n   if (before_p)\n     gsi_insert_before (iter, g, GSI_SAME_STMT);\n@@ -1645,8 +1644,8 @@ maybe_cast_to_ptrmode (location_t loc, tree len, gimple_stmt_iterator *iter,\n     return len;\n   gimple g\n     = gimple_build_assign_with_ops (NOP_EXPR,\n-\t\t\t\t    make_ssa_name (pointer_sized_int_node, NULL),\n-\t\t\t\t    len, NULL);\n+\t\t\t\t    make_ssa_name (pointer_sized_int_node,\n+\t\t\t\t\t\t   NULL), len);\n   gimple_set_location (g, loc);\n   if (before_p)\n     gsi_insert_before (iter, g, GSI_SAME_STMT);\n@@ -2536,8 +2535,7 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n       gimple g\n \t= gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t\tmake_ssa_name (pointer_sized_int_node,\n-\t\t\t\t\tNULL),\n-\t\t\t\t\tbase, NULL_TREE);\n+\t\t\t\t\t\t       NULL), base);\n       gimple_set_location (g, loc);\n       gsi_insert_before (iter, g, GSI_SAME_STMT);\n       tree base_addr = gimple_assign_lhs (g);\n@@ -2551,8 +2549,7 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n \t  gcc_assert (nargs == 2);\n \t  g = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t\t    make_ssa_name (pointer_sized_int_node,\n-\t\t\t\t\t\t\t   NULL),\n-\t\t\t\t\t    len, NULL_TREE);\n+\t\t\t\t\t\t\t   NULL), len);\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_before (iter, g, GSI_SAME_STMT);\n \t  tree sz_arg = gimple_assign_lhs (g);\n@@ -2610,8 +2607,7 @@ asan_expand_check_ifn (gimple_stmt_iterator *iter, bool use_calls)\n \n   g = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t    make_ssa_name (pointer_sized_int_node,\n-\t\t\t\t\t\t   NULL),\n-\t\t\t\t    base, NULL_TREE);\n+\t\t\t\t\t\t   NULL), base);\n   gimple_set_location (g, loc);\n   gsi_insert_before (&gsi, g, GSI_NEW_STMT);\n   tree base_addr = gimple_assign_lhs (g);"}, {"sha": "388cf679734519ae40698dd0dc893174d18ac06e", "filename": "gcc/gimple-builder.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple-builder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple-builder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-builder.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -120,7 +120,7 @@ build_type_cast (tree to_type, tree op, tree lhs)\n {\n   if (lhs == NULL_TREE)\n     lhs = make_ssa_name (to_type, NULL);\n-  return gimple_build_assign_with_ops (NOP_EXPR, lhs, op, NULL_TREE);\n+  return gimple_build_assign_with_ops (NOP_EXPR, lhs, op);\n }\n \n gimple"}, {"sha": "ae6e1e86e8941cc35e0773d99e39d4abe78ee202", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -2983,8 +2983,7 @@ replace_stmt_with_simplification (gimple_stmt_iterator *gsi,\n \t  maybe_build_generic_op (rcode,\n \t\t\t\t  TREE_TYPE (gimple_assign_lhs (stmt)),\n \t\t\t\t  &ops[0], ops[1], ops[2]);\n-\t  gimple_assign_set_rhs_with_ops_1 (gsi, rcode,\n-\t\t\t\t\t    ops[0], ops[1], ops[2]);\n+\t  gimple_assign_set_rhs_with_ops (gsi, rcode, ops[0], ops[1], ops[2]);\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"gimple_simplified to \");\n@@ -5644,8 +5643,8 @@ rewrite_to_defined_overflow (gimple stmt)\n   if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n     gimple_assign_set_rhs_code (stmt, PLUS_EXPR);\n   gimple_seq_add_stmt (&stmts, stmt);\n-  gimple cvt = gimple_build_assign_with_ops\n-      (NOP_EXPR, lhs, gimple_assign_lhs (stmt), NULL_TREE);\n+  gimple cvt = gimple_build_assign_with_ops (NOP_EXPR, lhs,\n+\t\t\t\t\t     gimple_assign_lhs (stmt));\n   gimple_seq_add_stmt (&stmts, cvt);\n \n   return stmts;\n@@ -5675,10 +5674,9 @@ gimple_build (gimple_seq *seq, location_t loc,\n \t  || code == IMAGPART_EXPR\n \t  || code == VIEW_CONVERT_EXPR)\n \tstmt = gimple_build_assign_with_ops (code, res,\n-\t\t\t\t\t     build1 (code, type,\n-\t\t\t\t\t\t     op0), NULL_TREE);\n+\t\t\t\t\t     build1 (code, type, op0));\n       else\n-\tstmt = gimple_build_assign_with_ops (code, res, op0, NULL_TREE);\n+\tstmt = gimple_build_assign_with_ops (code, res, op0);\n       gimple_set_location (stmt, loc);\n       gimple_seq_add_stmt_without_update (seq, stmt);\n     }\n@@ -5733,8 +5731,7 @@ gimple_build (gimple_seq *seq, location_t loc,\n       if (code == BIT_FIELD_REF)\n \tstmt = gimple_build_assign_with_ops (code, res,\n \t\t\t\t\t     build3 (BIT_FIELD_REF, type,\n-\t\t\t\t\t\t     op0, op1, op2),\n-\t\t\t\t\t     NULL_TREE);\n+\t\t\t\t\t\t     op0, op1, op2));\n       else\n \tstmt = gimple_build_assign_with_ops (code, res, op0, op1, op2);\n       gimple_set_location (stmt, loc);"}, {"sha": "1a4187423d50edebeeaf1980f800ef8b13bbce85", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -3261,8 +3261,7 @@ introduce_cast_before_cand (slsr_cand_t c, tree to_type, tree from_expr)\n   gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \n   cast_lhs = make_temp_ssa_name (to_type, NULL, \"slsr\");\n-  cast_stmt = gimple_build_assign_with_ops (NOP_EXPR, cast_lhs,\n-\t\t\t\t\t    from_expr, NULL_TREE);\n+  cast_stmt = gimple_build_assign_with_ops (NOP_EXPR, cast_lhs, from_expr);\n   gimple_set_location (cast_stmt, gimple_location (c->cand_stmt));\n   gsi_insert_before (&gsi, cast_stmt, GSI_SAME_STMT);\n \n@@ -3432,8 +3431,7 @@ replace_one_candidate (slsr_cand_t c, unsigned i, tree basis_name)\n \t{\n \t  gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n \t  gimple cast_stmt = gimple_build_assign_with_ops (NOP_EXPR, lhs,\n-\t\t\t\t\t\t\t   basis_name,\n-\t\t\t\t\t\t\t   NULL_TREE);\n+\t\t\t\t\t\t\t   basis_name);\n \t  gimple_set_location (cast_stmt, gimple_location (c->cand_stmt));\n \t  gsi_replace (&gsi, cast_stmt, false);\n \t  c->cand_stmt = cast_stmt;"}, {"sha": "6f21fdd034ffbcf93338b23fda0cf4c7172aaac2", "filename": "gcc/gimple.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -446,6 +446,14 @@ gimple_build_assign_with_ops (enum tree_code subcode, tree lhs, tree op1,\n \t\t\t\t       PASS_MEM_STAT);\n }\n \n+gimple\n+gimple_build_assign_with_ops (enum tree_code subcode, tree lhs, tree op1\n+\t\t\t      MEM_STAT_DECL)\n+{\n+  return gimple_build_assign_with_ops (subcode, lhs, op1, NULL_TREE, NULL_TREE\n+\t\t\t\t       PASS_MEM_STAT);\n+}\n+\n \n /* Build a GIMPLE_COND statement.\n \n@@ -1550,7 +1558,7 @@ gimple_assign_set_rhs_from_tree (gimple_stmt_iterator *gsi, tree expr)\n   tree op1, op2, op3;\n \n   extract_ops_from_tree_1 (expr, &subcode, &op1, &op2, &op3);\n-  gimple_assign_set_rhs_with_ops_1 (gsi, subcode, op1, op2, op3);\n+  gimple_assign_set_rhs_with_ops (gsi, subcode, op1, op2, op3);\n }\n \n \n@@ -1561,8 +1569,8 @@ gimple_assign_set_rhs_from_tree (gimple_stmt_iterator *gsi, tree expr)\n    did not have enough operand slots.  */\n \n void\n-gimple_assign_set_rhs_with_ops_1 (gimple_stmt_iterator *gsi, enum tree_code code,\n-\t\t\t\t  tree op1, tree op2, tree op3)\n+gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *gsi, enum tree_code code,\n+\t\t\t\ttree op1, tree op2, tree op3)\n {\n   unsigned new_rhs_ops = get_gimple_rhs_num_ops (code);\n   gimple stmt = gsi_stmt (*gsi);"}, {"sha": "23b4b6b0623ee5db8d6f692039845f6bf57990a4", "filename": "gcc/gimple.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1180,6 +1180,8 @@ gimple gimple_build_assign_with_ops (enum tree_code, tree,\n \t\t\t\t     tree, tree, tree CXX_MEM_STAT_INFO);\n gimple gimple_build_assign_with_ops (enum tree_code, tree,\n \t\t\t\t     tree, tree CXX_MEM_STAT_INFO);\n+gimple gimple_build_assign_with_ops (enum tree_code, tree,\n+\t\t\t\t     tree CXX_MEM_STAT_INFO);\n gimple gimple_build_cond (enum tree_code, tree, tree, tree, tree);\n gimple gimple_build_cond_from_tree (tree, tree, tree);\n void gimple_cond_set_condition_from_tree (gimple, tree);\n@@ -1244,8 +1246,8 @@ bool gimple_assign_ssa_name_copy_p (gimple);\n bool gimple_assign_unary_nop_p (gimple);\n void gimple_set_bb (gimple, basic_block);\n void gimple_assign_set_rhs_from_tree (gimple_stmt_iterator *, tree);\n-void gimple_assign_set_rhs_with_ops_1 (gimple_stmt_iterator *, enum tree_code,\n-\t\t\t\t       tree, tree, tree);\n+void gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *, enum tree_code,\n+\t\t\t\t     tree, tree, tree);\n tree gimple_get_lhs (const_gimple);\n void gimple_set_lhs (gimple, tree);\n gimple gimple_copy (gimple);\n@@ -2313,14 +2315,24 @@ gimple_assign_set_rhs3 (gimple gs, tree rhs)\n   gimple_set_op (gs, 3, rhs);\n }\n \n-/* A wrapper around gimple_assign_set_rhs_with_ops_1, for callers which expect\n-   to see only a maximum of two operands.  */\n+/* A wrapper around 3 operand gimple_assign_set_rhs_with_ops, for callers\n+   which expect to see only two operands.  */\n \n static inline void\n gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *gsi, enum tree_code code,\n \t\t\t\ttree op1, tree op2)\n {\n-  gimple_assign_set_rhs_with_ops_1 (gsi, code, op1, op2, NULL);\n+  gimple_assign_set_rhs_with_ops (gsi, code, op1, op2, NULL);\n+}\n+\n+/* A wrapper around 3 operand gimple_assign_set_rhs_with_ops, for callers\n+   which expect to see only one operands.  */\n+\n+static inline void\n+gimple_assign_set_rhs_with_ops (gimple_stmt_iterator *gsi, enum tree_code code,\n+\t\t\t\ttree op1)\n+{\n+  gimple_assign_set_rhs_with_ops (gsi, code, op1, NULL, NULL);\n }\n \n /* Returns true if GS is a nontemporal move.  */"}, {"sha": "6c24def1a821a4717eaf131bfc78c5e875ca44f6", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1577,7 +1577,7 @@ split_function (struct split_point *split_point)\n \t\t      tree tem = create_tmp_reg (restype, NULL);\n \t\t      tem = make_ssa_name (tem, call);\n \t\t      cpy = gimple_build_assign_with_ops (NOP_EXPR, retval,\n-\t\t\t\t\t\t\t  tem, NULL_TREE);\n+\t\t\t\t\t\t\t  tem);\n \t\t      gsi_insert_after (&gsi, cpy, GSI_NEW_STMT);\n \t\t      retval = tem;\n \t\t    }"}, {"sha": "ef217c1e003194296632104f463c4d477b27580f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -3841,8 +3841,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n       OMP_CLAUSE_CHAIN (c) = gimple_omp_for_clauses (ctx->stmt);\n       gimple_omp_for_set_clauses (ctx->stmt, c);\n       g = gimple_build_assign_with_ops (INTEGER_CST, lane,\n-\t\t\t\t\tbuild_int_cst (unsigned_type_node, 0),\n-\t\t\t\t\tNULL_TREE);\n+\t\t\t\t\tbuild_int_cst (unsigned_type_node, 0));\n       gimple_seq_add_stmt (ilist, g);\n       for (int i = 0; i < 2; i++)\n \tif (llist[i])\n@@ -3853,7 +3852,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n \t    gimple_seq *seq = i == 0 ? ilist : dlist;\n \t    gimple_seq_add_stmt (seq, g);\n \t    tree t = build_int_cst (unsigned_type_node, 0);\n-\t    g = gimple_build_assign_with_ops (INTEGER_CST, idx, t, NULL_TREE);\n+\t    g = gimple_build_assign_with_ops (INTEGER_CST, idx, t);\n \t    gimple_seq_add_stmt (seq, g);\n \t    tree body = create_artificial_label (UNKNOWN_LOCATION);\n \t    tree header = create_artificial_label (UNKNOWN_LOCATION);\n@@ -5847,8 +5846,7 @@ expand_omp_for_generic (struct omp_region *region,\n       if (useless_type_conversion_p (TREE_TYPE (fd->loop.v), TREE_TYPE (iend)))\n \tstmt = gimple_build_assign (fd->loop.v, iend);\n       else\n-\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, iend,\n-\t\t\t\t\t     NULL_TREE);\n+\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, iend);\n       gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n     }\n   if (fd->collapse > 1)\n@@ -6268,8 +6266,7 @@ expand_omp_for_static_nochunk (struct omp_region *region,\n       if (useless_type_conversion_p (TREE_TYPE (fd->loop.v), TREE_TYPE (e)))\n \tstmt = gimple_build_assign (fd->loop.v, e);\n       else\n-\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, e,\n-\t\t\t\t\t     NULL_TREE);\n+\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, e);\n       gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n     }\n   if (fd->collapse > 1)\n@@ -6659,8 +6656,7 @@ expand_omp_for_static_chunk (struct omp_region *region,\n       if (useless_type_conversion_p (TREE_TYPE (fd->loop.v), TREE_TYPE (e)))\n \tstmt = gimple_build_assign (fd->loop.v, e);\n       else\n-\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, e,\n-\t\t\t\t\t     NULL_TREE);\n+\tstmt = gimple_build_assign_with_ops (NOP_EXPR, fd->loop.v, e);\n       gsi_insert_after (&gsi, stmt, GSI_CONTINUE_LINKING);\n     }\n   if (fd->collapse > 1)\n@@ -12203,8 +12199,7 @@ simd_clone_adjust (struct cgraph_node *node)\n \t      {\n \t\tt = make_ssa_name (orig_arg, NULL);\n \t\tg = gimple_build_assign_with_ops (NOP_EXPR, t,\n-\t\t\t\t\t\t  gimple_call_lhs (g),\n-\t\t\t\t\t\t  NULL_TREE);\n+\t\t\t\t\t\t  gimple_call_lhs (g));\n \t\tgimple_seq_add_stmt_without_update (&seq, g);\n \t      }\n \t    gsi_insert_seq_on_edge_immediate"}, {"sha": "39a4a66fcc6e837a1ac34fb3f4b7c0253d3e3add", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -821,9 +821,8 @@ generate_memset_builtin (struct loop *loop, partition_t partition)\n     val = fold_convert (integer_type_node, val);\n   else if (!useless_type_conversion_p (integer_type_node, TREE_TYPE (val)))\n     {\n-      gimple cstmt;\n       tree tem = make_ssa_name (integer_type_node, NULL);\n-      cstmt = gimple_build_assign_with_ops (NOP_EXPR, tem, val, NULL_TREE);\n+      gimple cstmt = gimple_build_assign_with_ops (NOP_EXPR, tem, val);\n       gsi_insert_after (&gsi, cstmt, GSI_CONTINUE_LINKING);\n       val = tem;\n     }"}, {"sha": "3b8822f2e6d0683f3c27763d47cec8a0d2ebd267", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -757,10 +757,9 @@ forward_propagate_addr_expr_1 (tree name, tree def_rhs,\n \n       if (useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (new_def_rhs)))\n \tgimple_assign_set_rhs_with_ops (use_stmt_gsi, TREE_CODE (new_def_rhs),\n-\t\t\t\t\tnew_def_rhs, NULL_TREE);\n+\t\t\t\t\tnew_def_rhs);\n       else if (is_gimple_min_invariant (new_def_rhs))\n-\tgimple_assign_set_rhs_with_ops (use_stmt_gsi, NOP_EXPR,\n-\t\t\t\t\tnew_def_rhs, NULL_TREE);\n+\tgimple_assign_set_rhs_with_ops (use_stmt_gsi, NOP_EXPR, new_def_rhs);\n       else\n \treturn false;\n       gcc_assert (gsi_stmt (*use_stmt_gsi) == use_stmt);\n@@ -1725,8 +1724,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n     {\n       g = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t\tmake_ssa_name (TREE_TYPE (def_arg2[0]),\n-\t\t\t\t\t\t       NULL),\n-\t\t\t\t\trotcnt, NULL_TREE);\n+\t\t\t\t\t\t       NULL), rotcnt);\n       gsi_insert_before (gsi, g, GSI_SAME_STMT);\n       rotcnt = gimple_assign_lhs (g);\n     }\n@@ -1740,7 +1738,7 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n     {\n       gsi_insert_before (gsi, g, GSI_SAME_STMT);\n       g = gimple_build_assign_with_ops (NOP_EXPR, gimple_assign_lhs (stmt),\n-\t\t\t\t\tlhs, NULL_TREE);\n+\t\t\t\t\tlhs);\n     }\n   gsi_replace (gsi, g, false);\n   return true;\n@@ -2055,7 +2053,7 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       for (i = 0; i < nelts; i++)\n \tmask_elts[i] = build_int_cst (TREE_TYPE (mask_type), sel[i]);\n       op2 = build_vector (mask_type, mask_elts);\n-      gimple_assign_set_rhs_with_ops_1 (gsi, VEC_PERM_EXPR, orig, orig, op2);\n+      gimple_assign_set_rhs_with_ops (gsi, VEC_PERM_EXPR, orig, orig, op2);\n     }\n   update_stmt (gsi_stmt (*gsi));\n   return true;"}, {"sha": "7f7f3528c14e7435a754ffa3d3efa0a7180233ac", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1211,7 +1211,7 @@ move_computations_dom_walker::before_dom_children (basic_block bb)\n \t  tree arg = PHI_ARG_DEF (stmt, 0);\n \t  new_stmt = gimple_build_assign_with_ops (TREE_CODE (arg),\n \t\t\t\t\t\t   gimple_phi_result (stmt),\n-\t\t\t\t\t\t   arg, NULL_TREE);\n+\t\t\t\t\t\t   arg);\n \t}\n       else\n \t{"}, {"sha": "2621534f4f4d817f6022d04ab7a89388f10c1353", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1129,7 +1129,7 @@ build_and_insert_cast (gimple_stmt_iterator *gsi, location_t loc,\n \t\t       tree type, tree val)\n {\n   tree result = make_ssa_name (type, NULL);\n-  gimple stmt = gimple_build_assign_with_ops (NOP_EXPR, result, val, NULL_TREE);\n+  gimple stmt = gimple_build_assign_with_ops (NOP_EXPR, result, val);\n   gimple_set_location (stmt, loc);\n   gsi_insert_before (gsi, stmt, GSI_SAME_STMT);\n   return result;\n@@ -2259,13 +2259,11 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n \t      load_stmt = gimple_build_assign (val_tmp, val_expr);\n \t      gimple_set_vuse (load_stmt, n->vuse);\n \t      gsi_insert_before (&gsi, load_stmt, GSI_SAME_STMT);\n-\t      gimple_assign_set_rhs_with_ops_1 (&gsi, NOP_EXPR, val_tmp,\n-\t\t\t\t\t\tNULL_TREE, NULL_TREE);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, NOP_EXPR, val_tmp);\n \t    }\n \t  else\n \t    {\n-\t      gimple_assign_set_rhs_with_ops_1 (&gsi, MEM_REF, val_expr,\n-\t\t\t\t\t\tNULL_TREE, NULL_TREE);\n+\t      gimple_assign_set_rhs_with_ops (&gsi, MEM_REF, val_expr);\n \t      gimple_set_vuse (cur_stmt, n->vuse);\n \t    }\n \t  update_stmt (cur_stmt);\n@@ -2319,8 +2317,7 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n \t{\n \t  gimple convert_stmt;\n \t  tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapsrc\");\n-\t  convert_stmt = gimple_build_assign_with_ops (NOP_EXPR, tmp, src,\n-\t\t\t\t\t\t       NULL);\n+\t  convert_stmt = gimple_build_assign_with_ops (NOP_EXPR, tmp, src);\n \t  gsi_insert_before (&gsi, convert_stmt, GSI_SAME_STMT);\n \t}\n \n@@ -2334,7 +2331,7 @@ bswap_replace (gimple cur_stmt, gimple src_stmt, tree fndecl, tree bswap_type,\n     {\n       gimple convert_stmt;\n       tmp = make_temp_ssa_name (bswap_type, NULL, \"bswapdst\");\n-      convert_stmt = gimple_build_assign_with_ops (NOP_EXPR, tgt, tmp, NULL);\n+      convert_stmt = gimple_build_assign_with_ops (NOP_EXPR, tgt, tmp);\n       gsi_insert_after (&gsi, convert_stmt, GSI_SAME_STMT);\n     }\n \n@@ -2973,8 +2970,8 @@ convert_plusminus_to_widen (gimple_stmt_iterator *gsi, gimple stmt,\n   if (TREE_CODE (mult_rhs2) == INTEGER_CST)\n     mult_rhs2 = fold_convert (type2, mult_rhs2);\n \n-  gimple_assign_set_rhs_with_ops_1 (gsi, wmult_code, mult_rhs1, mult_rhs2,\n-\t\t\t\t    add_rhs);\n+  gimple_assign_set_rhs_with_ops (gsi, wmult_code, mult_rhs1, mult_rhs2,\n+\t\t\t\t  add_rhs);\n   update_stmt (gsi_stmt (*gsi));\n   widen_mul_stats.maccs_inserted++;\n   return true;\n@@ -3177,8 +3174,7 @@ convert_mult_to_fma (gimple mul_stmt, tree op1, tree op2)\n \n       fma_stmt = gimple_build_assign_with_ops (FMA_EXPR,\n \t\t\t\t\t       gimple_assign_lhs (use_stmt),\n-\t\t\t\t\t       mulop1, op2,\n-\t\t\t\t\t       addop);\n+\t\t\t\t\t       mulop1, op2, addop);\n       gsi_replace (&gsi, fma_stmt, true);\n       widen_mul_stats.fmas_inserted++;\n     }"}, {"sha": "561490c3b105854d7faa0ac5cad47fff8f8eda69", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -536,7 +536,7 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n \n       new_var2 = make_ssa_name (TREE_TYPE (result), NULL);\n       new_stmt = gimple_build_assign_with_ops (CONVERT_EXPR, new_var2,\n-\t\t\t\t\t       new_var, NULL);\n+\t\t\t\t\t       new_var);\n       gsi_insert_before (&gsi, new_stmt, GSI_SAME_STMT);\n       new_var = new_var2;\n \n@@ -1254,7 +1254,7 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n     lhs = result;\n \n   /* Build the modify expression with abs expression.  */\n-  new_stmt = gimple_build_assign_with_ops (ABS_EXPR, lhs, rhs, NULL);\n+  new_stmt = gimple_build_assign_with_ops (ABS_EXPR, lhs, rhs);\n \n   gsi = gsi_last_bb (cond_bb);\n   gsi_insert_before (&gsi, new_stmt, GSI_NEW_STMT);\n@@ -1264,7 +1264,7 @@ abs_replacement (basic_block cond_bb, basic_block middle_bb,\n       /* Get the right GSI.  We want to insert after the recently\n \t added ABS_EXPR statement (which we know is the first statement\n \t in the block.  */\n-      new_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, result, lhs, NULL);\n+      new_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, result, lhs);\n \n       gsi_insert_after (&gsi, new_stmt, GSI_NEW_STMT);\n     }\n@@ -1388,12 +1388,12 @@ neg_replacement (basic_block cond_bb, basic_block middle_bb,\n      logical and arithmetic operations on it.  */\n   tree cond_val_converted = make_ssa_name (TREE_TYPE (rhs), NULL);\n   new_stmt = gimple_build_assign_with_ops (NOP_EXPR, cond_val_converted,\n-\t\t\t\t\t   cond_val, NULL_TREE);\n+\t\t\t\t\t   cond_val);\n   gsi_insert_after (&gsi, new_stmt, GSI_NEW_STMT);\n \n   tree neg_cond_val_converted = make_ssa_name (TREE_TYPE (rhs), NULL);\n   new_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, neg_cond_val_converted,\n-\t\t\t\t\t   cond_val_converted, NULL_TREE);\n+\t\t\t\t\t   cond_val_converted);\n   gsi_insert_after (&gsi, new_stmt, GSI_NEW_STMT);\n \n   tree tmp = make_ssa_name (TREE_TYPE (rhs), NULL);"}, {"sha": "1438db84d5bb4c6accd67f3f0fcb8b4f5a2b0c17", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -3307,7 +3307,7 @@ maybe_optimize_range_tests (gimple stmt)\n \t\t\t}\n \t\t      else\n \t\t\tg = gimple_build_assign_with_ops (rhs_code, new_lhs,\n-\t\t\t\t\t\t\t  new_op, NULL_TREE);\n+\t\t\t\t\t\t\t  new_op);\n \t\t      gimple_stmt_iterator gsi = gsi_for_stmt (cast_stmt);\n \t\t      gimple_set_uid (g, gimple_uid (cast_stmt));\n \t\t      gimple_set_visited (g, true);\n@@ -4214,10 +4214,11 @@ repropagate_negates (void)\n \t      tree b = gimple_assign_rhs2 (user);\n \t      gimple_stmt_iterator gsi = gsi_for_stmt (feed);\n \t      gimple_stmt_iterator gsi2 = gsi_for_stmt (user);\n-\t      tree x = make_ssa_name (TREE_TYPE (gimple_assign_lhs (feed)), NULL);\n+\t      tree x = make_ssa_name (TREE_TYPE (gimple_assign_lhs (feed)),\n+\t\t\t\t      NULL);\n \t      gimple g = gimple_build_assign_with_ops (PLUS_EXPR, x, a, b);\n \t      gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n-\t      gimple_assign_set_rhs_with_ops (&gsi2, NEGATE_EXPR, x, NULL);\n+\t      gimple_assign_set_rhs_with_ops (&gsi2, NEGATE_EXPR, x);\n \t      user = gsi_stmt (gsi2);\n \t      update_stmt (user);\n \t      reassoc_remove_stmt (&gsi);"}, {"sha": "98a1b240652ca342a914c36fa8334a2d096fa992", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1816,7 +1816,7 @@ handle_pointer_plus (gimple_stmt_iterator *gsi)\n       enum tree_code rhs_code\n \t= useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (si->endptr))\n \t  ? SSA_NAME : NOP_EXPR;\n-      gimple_assign_set_rhs_with_ops (gsi, rhs_code, si->endptr, NULL_TREE);\n+      gimple_assign_set_rhs_with_ops (gsi, rhs_code, si->endptr);\n       gcc_assert (gsi_stmt (*gsi) == stmt);\n       update_stmt (stmt);\n     }"}, {"sha": "543f1b4c2cdbcbcab1ee71ea67df35ea87491cc7", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -2157,7 +2157,7 @@ vect_create_cond_for_align_checks (loop_vec_info loop_vinfo,\n       sprintf (tmp_name, \"addr2int%d\", i);\n       addr_tmp_name = make_temp_ssa_name (int_ptrsize_type, NULL, tmp_name);\n       addr_stmt = gimple_build_assign_with_ops (NOP_EXPR, addr_tmp_name,\n-\t\t\t\t\t\taddr_base, NULL_TREE);\n+\t\t\t\t\t\taddr_base);\n       gimple_seq_add_stmt (cond_expr_stmt_list, addr_stmt);\n \n       /* The addresses are OR together.  */"}, {"sha": "8861fbb689869c3347de34a78ad370848ab97020", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -2501,7 +2501,7 @@ vect_is_simple_reduction_1 (loop_vec_info loop_info, gimple phi,\n       tree rhs = gimple_assign_rhs2 (def_stmt);\n       tree negrhs = make_ssa_name (TREE_TYPE (rhs), NULL);\n       gimple negate_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, negrhs,\n-\t\t\t\t\t\t\t rhs, NULL);\n+\t\t\t\t\t\t\t rhs);\n       gimple_stmt_iterator gsi = gsi_for_stmt (def_stmt);\n       set_vinfo_for_stmt (negate_stmt, new_stmt_vec_info (negate_stmt, \n \t\t\t\t\t\t\t  loop_info, NULL));\n@@ -3379,7 +3379,7 @@ get_initial_def_for_induction (gimple iv_phi)\n \t  new_stmt = gimple_build_assign_with_ops\n \t      (VIEW_CONVERT_EXPR,\n \t       vect_get_new_vect_var (vectype, vect_simple_var, \"vec_iv_\"),\n-\t       build1 (VIEW_CONVERT_EXPR, vectype, vec_init), NULL_TREE);\n+\t       build1 (VIEW_CONVERT_EXPR, vectype, vec_init));\n \t  vec_init = make_ssa_name (gimple_assign_lhs (new_stmt), new_stmt);\n \t  gimple_assign_set_lhs (new_stmt, vec_init);\n \t  new_bb = gsi_insert_on_edge_immediate (loop_preheader_edge (iv_loop),\n@@ -3555,7 +3555,7 @@ get_initial_def_for_induction (gimple iv_phi)\n \t\t   vect_get_new_vect_var (resvectype, vect_simple_var,\n \t\t\t\t\t  \"vec_iv_\"),\n \t\t   build1 (VIEW_CONVERT_EXPR, resvectype,\n-\t\t\t   gimple_assign_lhs (new_stmt)), NULL_TREE);\n+\t\t\t   gimple_assign_lhs (new_stmt)));\n \t      gimple_assign_set_lhs (new_stmt,\n \t\t\t\t     make_ssa_name\n \t\t\t\t       (gimple_assign_lhs (new_stmt), new_stmt));\n@@ -3622,7 +3622,7 @@ get_initial_def_for_induction (gimple iv_phi)\n       new_stmt = gimple_build_assign_with_ops\n \t (VIEW_CONVERT_EXPR,\n \t  vect_get_new_vect_var (resvectype, vect_simple_var, \"vec_iv_\"),\n-\t  build1 (VIEW_CONVERT_EXPR, resvectype, induc_def), NULL_TREE);\n+\t  build1 (VIEW_CONVERT_EXPR, resvectype, induc_def));\n       induc_def = make_ssa_name (gimple_assign_lhs (new_stmt), new_stmt);\n       gimple_assign_set_lhs (new_stmt, induc_def);\n       si = gsi_after_labels (bb);"}, {"sha": "5def606b60fdff25ee88925103a791d8b784655e", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -760,8 +760,7 @@ vect_handle_widen_op_by_const (gimple stmt, enum tree_code code,\n       /* Create a_T = (NEW_TYPE) a_t;  */\n       *oprnd = gimple_assign_rhs1 (def_stmt);\n       new_oprnd = make_ssa_name (new_type, NULL);\n-      new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd, *oprnd,\n-\t\t\t\t\t       NULL_TREE);\n+      new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd, *oprnd);\n       STMT_VINFO_RELATED_STMT (vinfo_for_stmt (def_stmt)) = new_stmt;\n       stmts->safe_push (def_stmt);\n       *oprnd = new_oprnd;\n@@ -935,7 +934,7 @@ vect_recog_widen_mult_pattern (vec<gimple> *stmts,\n         tree old_oprnd = gimple_assign_rhs1 (def_stmt);\n         tree new_oprnd = make_ssa_name (half_type0, NULL);\n         new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n-                                                 old_oprnd, NULL_TREE);\n+\t\t\t\t\t\t old_oprnd);\n         *oprnd = new_oprnd;\n     }\n \n@@ -1032,8 +1031,7 @@ vect_recog_widen_mult_pattern (vec<gimple> *stmts,\n       pattern_stmt\n         = gimple_build_assign_with_ops (NOP_EXPR,\n                                         vect_recog_temp_ssa_var (type, NULL),\n-                                        gimple_assign_lhs (pattern_stmt),\n-                                        NULL_TREE);\n+\t\t\t\t\tgimple_assign_lhs (pattern_stmt));\n     }\n \n   if (dump_enabled_p ())\n@@ -1443,7 +1441,7 @@ vect_operation_fits_smaller_type (gimple stmt, tree def, tree *new_type,\n               oprnd = gimple_assign_rhs1 (def_stmt);\n               new_oprnd = make_ssa_name (interm_type, NULL);\n               new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n-                                                       oprnd, NULL_TREE);\n+\t\t\t\t\t\t       oprnd);\n               STMT_VINFO_RELATED_STMT (vinfo_for_stmt (def_stmt)) = new_stmt;\n               stmts->safe_push (def_stmt);\n               oprnd = new_oprnd;\n@@ -1462,7 +1460,7 @@ vect_operation_fits_smaller_type (gimple stmt, tree def, tree *new_type,\n           /* Create a type conversion HALF_TYPE->INTERM_TYPE.  */\n           new_oprnd = make_ssa_name (interm_type, NULL);\n           new_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n-                                                   oprnd, NULL_TREE);\n+\t\t\t\t\t\t   oprnd);\n           oprnd = new_oprnd;\n           *new_def_stmt = new_stmt;\n         }\n@@ -1594,7 +1592,7 @@ vect_recog_over_widening_pattern (vec<gimple> *stmts,\n           /* Create NEW_TYPE->USE_TYPE conversion.  */\n           new_oprnd = make_ssa_name (use_type, NULL);\n           pattern_stmt = gimple_build_assign_with_ops (NOP_EXPR, new_oprnd,\n-                                                       var, NULL_TREE);\n+\t\t\t\t\t\t       var);\n           STMT_VINFO_RELATED_STMT (vinfo_for_stmt (use_stmt)) = pattern_stmt;\n \n           *type_in = get_vectype_for_scalar_type (new_type);\n@@ -1946,8 +1944,7 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n   if (def == NULL_TREE)\n     {\n       def = vect_recog_temp_ssa_var (type, NULL);\n-      def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1,\n-\t\t\t\t\t       NULL_TREE);\n+      def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1);\n       if (ext_def)\n \t{\n \t  basic_block new_bb\n@@ -1977,8 +1974,7 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n       if (vecstype == NULL_TREE)\n \treturn NULL;\n       def2 = vect_recog_temp_ssa_var (stype, NULL);\n-      def_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, def2, def,\n-\t\t\t\t\t       NULL_TREE);\n+      def_stmt = gimple_build_assign_with_ops (NEGATE_EXPR, def2, def);\n       if (ext_def)\n \t{\n \t  basic_block new_bb\n@@ -2151,8 +2147,7 @@ vect_recog_vector_vector_shift_pattern (vec<gimple> *stmts,\n   if (def == NULL_TREE)\n     {\n       def = vect_recog_temp_ssa_var (TREE_TYPE (oprnd0), NULL);\n-      def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1,\n-\t\t\t\t\t       NULL_TREE);\n+      def_stmt = gimple_build_assign_with_ops (NOP_EXPR, def, oprnd1);\n       new_pattern_def_seq (stmt_vinfo, def_stmt);\n     }\n \n@@ -2350,8 +2345,7 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n \t      append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t      signmask = vect_recog_temp_ssa_var (itype, NULL);\n \t      def_stmt\n-\t\t= gimple_build_assign_with_ops (NOP_EXPR, signmask, var,\n-\t\t\t\t\t\tNULL_TREE);\n+\t\t= gimple_build_assign_with_ops (NOP_EXPR, signmask, var);\n \t      append_pattern_def_seq (stmt_vinfo, def_stmt);\n \t    }\n \t  def_stmt\n@@ -2613,8 +2607,7 @@ vect_recog_divmod_pattern (vec<gimple> *stmts,\n \t  if (msb != 1)\n \t    def_stmt\n \t      = gimple_build_assign_with_ops (INTEGER_CST,\n-\t\t\t\t\t      t4, build_int_cst (itype, msb),\n-\t\t\t\t\t      NULL_TREE);\n+\t\t\t\t\t      t4, build_int_cst (itype, msb));\n \t  else\n \t    def_stmt\n \t      = gimple_build_assign_with_ops (RSHIFT_EXPR, t4, oprnd0,\n@@ -2809,7 +2802,7 @@ vect_recog_mixed_size_cond_pattern (vec<gimple> *stmts, tree *type_in,\n   pattern_stmt\n     = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t    vect_recog_temp_ssa_var (type, NULL),\n-\t\t\t\t    gimple_assign_lhs (def_stmt), NULL_TREE);\n+\t\t\t\t    gimple_assign_lhs (def_stmt));\n \n   new_pattern_def_seq (stmt_vinfo, def_stmt);\n   def_stmt_info = new_stmt_vec_info (def_stmt, loop_vinfo, bb_vinfo);\n@@ -2923,8 +2916,7 @@ adjust_bool_pattern_cast (tree type, tree var)\n   cast_stmt\n     = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t    vect_recog_temp_ssa_var (type, NULL),\n-\t\t\t\t    gimple_assign_lhs (pattern_stmt),\n-\t\t\t\t    NULL_TREE);\n+\t\t\t\t    gimple_assign_lhs (pattern_stmt));\n   STMT_VINFO_RELATED_STMT (stmt_vinfo) = cast_stmt;\n   return gimple_assign_lhs (cast_stmt);\n }\n@@ -2961,7 +2953,7 @@ adjust_bool_pattern (tree var, tree out_type, tree trueval,\n       pattern_stmt\n \t= gimple_build_assign_with_ops (SSA_NAME,\n \t\t\t\t\tvect_recog_temp_ssa_var (itype, NULL),\n-\t\t\t\t\tirhs1, NULL_TREE);\n+\t\t\t\t\tirhs1);\n       break;\n \n     case BIT_NOT_EXPR:\n@@ -3209,10 +3201,10 @@ vect_recog_bool_pattern (vec<gimple> *stmts, tree *type_in,\n       lhs = vect_recog_temp_ssa_var (TREE_TYPE (lhs), NULL);\n       if (useless_type_conversion_p (TREE_TYPE (lhs), TREE_TYPE (rhs)))\n \tpattern_stmt\n-\t  = gimple_build_assign_with_ops (SSA_NAME, lhs, rhs, NULL_TREE);\n+\t  = gimple_build_assign_with_ops (SSA_NAME, lhs, rhs);\n       else\n \tpattern_stmt\n-\t  = gimple_build_assign_with_ops (NOP_EXPR, lhs, rhs, NULL_TREE);\n+\t  = gimple_build_assign_with_ops (NOP_EXPR, lhs, rhs);\n       *type_out = vectype;\n       *type_in = vectype;\n       stmts->safe_push (last_stmt);\n@@ -3278,12 +3270,12 @@ vect_recog_bool_pattern (vec<gimple> *stmts, tree *type_in,\n \t{\n \t  tree rhs2 = vect_recog_temp_ssa_var (TREE_TYPE (lhs), NULL);\n \t  gimple cast_stmt\n-\t    = gimple_build_assign_with_ops (NOP_EXPR, rhs2, rhs, NULL_TREE);\n+\t    = gimple_build_assign_with_ops (NOP_EXPR, rhs2, rhs);\n \t  new_pattern_def_seq (stmt_vinfo, cast_stmt);\n \t  rhs = rhs2;\n \t}\n       pattern_stmt\n-\t= gimple_build_assign_with_ops (SSA_NAME, lhs, rhs, NULL_TREE);\n+\t= gimple_build_assign_with_ops (SSA_NAME, lhs, rhs);\n       pattern_stmt_info = new_stmt_vec_info (pattern_stmt, loop_vinfo,\n \t\t\t\t\t\tbb_vinfo);\n       set_vinfo_for_stmt (pattern_stmt, pattern_stmt_info);"}, {"sha": "2d680eb0df2ad0bbdb095016fde957c9b1551199", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -2609,7 +2609,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \t\t\t       op);\t\t  \n \t\t  init_stmt\n \t\t    = gimple_build_assign_with_ops (VIEW_CONVERT_EXPR,\n-\t\t\t\t\t\t    new_temp, op, NULL_TREE);\n+\t\t\t\t\t\t    new_temp, op);\n \t\t  gimple_seq_add_stmt (&ctor_seq, init_stmt);\n \t\t  op = new_temp;\n \t\t}"}, {"sha": "198d4698928fcbc86471d6742befccfa33513d72", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -1333,8 +1333,7 @@ vect_init_vector (gimple stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n \t    {\n \t      new_temp = make_ssa_name (TREE_TYPE (type), NULL);\n \t      init_stmt = gimple_build_assign_with_ops (NOP_EXPR,\n-\t\t\t\t\t\t\tnew_temp, val,\n-\t\t\t\t\t\t\tNULL_TREE);\n+\t\t\t\t\t\t\tnew_temp, val);\n \t      vect_init_vector_1 (stmt, init_stmt, gsi);\n \t      val = new_temp;\n \t    }\n@@ -1970,8 +1969,7 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t      var = make_ssa_name (var, NULL);\n \t      op = build1 (VIEW_CONVERT_EXPR, idxtype, op);\n \t      new_stmt\n-\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var,\n-\t\t\t\t\t\top, NULL_TREE);\n+\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var, op);\n \t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t      op = var;\n \t    }\n@@ -2001,7 +1999,7 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t  mask_op = build1 (VIEW_CONVERT_EXPR, masktype, mask_op);\n \t\t  new_stmt\n \t\t    = gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var,\n-\t\t\t\t\t\t    mask_op, NULL_TREE);\n+\t\t\t\t\t\t    mask_op);\n \t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t\t  mask_op = var;\n \t\t}\n@@ -2022,8 +2020,7 @@ vectorizable_mask_load_store (gimple stmt, gimple_stmt_iterator *gsi,\n \t      var = make_ssa_name (vec_dest, NULL);\n \t      op = build1 (VIEW_CONVERT_EXPR, vectype, op);\n \t      new_stmt\n-\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var, op,\n-\t\t\t\t\t\tNULL_TREE);\n+\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var, op);\n \t    }\n \t  else\n \t    {\n@@ -3790,7 +3787,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t{\n \t\t  gcc_assert (TREE_CODE_LENGTH (code1) == unary_op);\n \t\t  new_stmt = gimple_build_assign_with_ops (code1, vec_dest,\n-\t\t\t\t\t\t\t   vop0, NULL);\n+\t\t\t\t\t\t\t   vop0);\n \t\t  new_temp = make_ssa_name (vec_dest, new_stmt);\n \t\t  gimple_assign_set_lhs (new_stmt, new_temp);\n \t\t}\n@@ -3902,8 +3899,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t      gcc_assert (TREE_CODE_LENGTH (codecvt1) == unary_op);\n \t\t      new_temp = make_ssa_name (vec_dest, NULL);\n \t\t      new_stmt = gimple_build_assign_with_ops (codecvt1,\n-\t\t\t\t\t\t\t       new_temp,\n-\t\t\t\t\t\t\t       vop0, NULL);\n+\t\t\t\t\t\t\t       new_temp, vop0);\n \t\t    }\n \n \t\t  vect_finish_stmt_generation (stmt, new_stmt, gsi);\n@@ -3960,7 +3956,7 @@ vectorizable_conversion (gimple stmt, gimple_stmt_iterator *gsi,\n \t\t    gcc_assert (TREE_CODE_LENGTH (codecvt1) == unary_op);\n \t\t    new_temp = make_ssa_name (vec_dest, NULL);\n \t\t    new_stmt = gimple_build_assign_with_ops (codecvt1, new_temp,\n-\t\t\t\t\t\t\t     vop0, NULL);\n+\t\t\t\t\t\t\t     vop0);\n \t\t  }\n \n \t\tvect_finish_stmt_generation (stmt, new_stmt, gsi);\n@@ -5958,8 +5954,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      var = make_ssa_name (var, NULL);\n \t      op = build1 (VIEW_CONVERT_EXPR, idxtype, op);\n \t      new_stmt\n-\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var,\n-\t\t\t\t\t\top, NULL_TREE);\n+\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var, op);\n \t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n \t      op = var;\n \t    }\n@@ -5978,8 +5973,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      var = make_ssa_name (vec_dest, NULL);\n \t      op = build1 (VIEW_CONVERT_EXPR, vectype, op);\n \t      new_stmt\n-\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var, op,\n-\t\t\t\t\t\tNULL_TREE);\n+\t\t= gimple_build_assign_with_ops (VIEW_CONVERT_EXPR, var, op);\n \t    }\n \t  else\n \t    {"}, {"sha": "230ce8c65007538fdb8fef299f6b85dd8be9091d", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -8879,15 +8879,14 @@ simplify_truth_ops_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n   if (integer_zerop (op1))\n     gimple_assign_set_rhs_with_ops (gsi,\n \t\t\t\t    need_conversion\n-\t\t\t\t    ? NOP_EXPR : TREE_CODE (op0),\n-\t\t\t\t    op0, NULL_TREE);\n+\t\t\t\t    ? NOP_EXPR : TREE_CODE (op0), op0);\n   /* For A != B we substitute A ^ B.  Either with conversion.  */\n   else if (need_conversion)\n     {\n       tree tem = make_ssa_name (TREE_TYPE (op0), NULL);\n       gimple newop = gimple_build_assign_with_ops (BIT_XOR_EXPR, tem, op0, op1);\n       gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n-      gimple_assign_set_rhs_with_ops (gsi, NOP_EXPR, tem, NULL_TREE);\n+      gimple_assign_set_rhs_with_ops (gsi, NOP_EXPR, tem);\n     }\n   /* Or without.  */\n   else\n@@ -9107,7 +9106,7 @@ simplify_bit_ops_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n   if (op == NULL_TREE)\n     return false;\n \n-  gimple_assign_set_rhs_with_ops (gsi, TREE_CODE (op), op, NULL);\n+  gimple_assign_set_rhs_with_ops (gsi, TREE_CODE (op), op);\n   update_stmt (gsi_stmt (*gsi));\n   return true;\n }\n@@ -9611,7 +9610,7 @@ simplify_float_conversion_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n      float conversion.  */\n   tem = make_ssa_name (build_nonstandard_integer_type\n \t\t\t  (GET_MODE_PRECISION (mode), 0), NULL);\n-  conv = gimple_build_assign_with_ops (NOP_EXPR, tem, rhs1, NULL_TREE);\n+  conv = gimple_build_assign_with_ops (NOP_EXPR, tem, rhs1);\n   gsi_insert_before (gsi, conv, GSI_SAME_STMT);\n   gimple_assign_set_rhs1 (stmt, tem);\n   update_stmt (stmt);\n@@ -9685,8 +9684,7 @@ simplify_internal_call_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n       else if (!useless_type_conversion_p (utype, TREE_TYPE (op0)))\n \t{\n \t  g = gimple_build_assign_with_ops (NOP_EXPR,\n-\t\t\t\t\t    make_ssa_name (utype, NULL),\n-\t\t\t\t\t    op0, NULL_TREE);\n+\t\t\t\t\t    make_ssa_name (utype, NULL), op0);\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \t  op0 = gimple_assign_lhs (g);\n@@ -9696,8 +9694,7 @@ simplify_internal_call_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n       else if (!useless_type_conversion_p (utype, TREE_TYPE (op1)))\n \t{\n \t  g = gimple_build_assign_with_ops (NOP_EXPR,\n-\t\t\t\t\t    make_ssa_name (utype, NULL),\n-\t\t\t\t\t    op1, NULL_TREE);\n+\t\t\t\t\t    make_ssa_name (utype, NULL), op1);\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \t  op1 = gimple_assign_lhs (g);\n@@ -9710,7 +9707,7 @@ simplify_internal_call_using_ranges (gimple_stmt_iterator *gsi, gimple stmt)\n \t{\n \t  g = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t\t    make_ssa_name (type, NULL),\n-\t\t\t\t\t    gimple_assign_lhs (g), NULL_TREE);\n+\t\t\t\t\t    gimple_assign_lhs (g));\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \t}"}, {"sha": "763f57383be2def5622da8856572fecc7be18109", "filename": "gcc/tsan.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -501,8 +501,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t\t\t\t\t\tTREE_TYPE (args[1])))\n \t\t  {\n \t\t    tree var = make_ssa_name (TREE_TYPE (lhs), NULL);\n-\t\t    g = gimple_build_assign_with_ops (NOP_EXPR, var,\n-\t\t\t\t\t\t      args[1], NULL_TREE);\n+\t\t    g = gimple_build_assign_with_ops (NOP_EXPR, var, args[1]);\n \t\t    gsi_insert_after (gsi, g, GSI_NEW_STMT);\n \t\t    args[1] = var;\n \t\t  }\n@@ -516,8 +515,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t\t\t\t\t\t      gimple_call_lhs (stmt),\n \t\t\t\t\t\t      args[1]);\n \t\t    gsi_insert_after (gsi, g, GSI_NEW_STMT);\n-\t\t    g = gimple_build_assign_with_ops (BIT_NOT_EXPR, lhs, var,\n-\t\t\t\t\t\t      NULL_TREE);\n+\t\t    g = gimple_build_assign_with_ops (BIT_NOT_EXPR, lhs, var);\n \t\t  }\n \t\telse\n \t\t  g = gimple_build_assign_with_ops (tsan_atomic_table[i].code,\n@@ -560,7 +558,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t\tg = gimple_build_assign_with_ops (NOP_EXPR,\n \t\t\t\t\t\t  make_ssa_name (TREE_TYPE (t),\n \t\t\t\t\t\t\t\t NULL),\n-\t\t\t\t\t\t  args[1], NULL_TREE);\n+\t\t\t\t\t\t  args[1]);\n \t\tgsi_insert_before (gsi, g, GSI_SAME_STMT);\n \t\targs[1] = gimple_assign_lhs (g);\n \t      }"}, {"sha": "16f94e2298263e6a9bb741874721974db2555f8f", "filename": "gcc/ubsan.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00d66391af278f8716d320bde449df753117009e/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00d66391af278f8716d320bde449df753117009e/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=00d66391af278f8716d320bde449df753117009e", "patch": "@@ -736,8 +736,7 @@ ubsan_expand_null_ifn (gimple_stmt_iterator *gsip)\n       if (compare_tree_int (align, ptralign) == 1)\n \t{\n \t  check_align = make_ssa_name (pointer_sized_int_node, NULL);\n-\t  g = gimple_build_assign_with_ops (NOP_EXPR, check_align,\n-\t\t\t\t\t    ptr, NULL_TREE);\n+\t  g = gimple_build_assign_with_ops (NOP_EXPR, check_align, ptr);\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_before (&gsi, g, GSI_SAME_STMT);\n \t}\n@@ -934,7 +933,7 @@ ubsan_expand_objsize_ifn (gimple_stmt_iterator *gsi)\n \t      ? BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH\n \t      : BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT;\n \t  tree p = make_ssa_name (pointer_sized_int_node, NULL);\n-\t  g = gimple_build_assign_with_ops (NOP_EXPR, p, ptr, NULL_TREE);\n+\t  g = gimple_build_assign_with_ops (NOP_EXPR, p, ptr);\n \t  gimple_set_location (g, loc);\n \t  gsi_insert_before (gsi, g, GSI_SAME_STMT);\n \t  g = gimple_build_call (builtin_decl_explicit (bcode), 2, data, p);\n@@ -1175,7 +1174,7 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   if (can_throw)\n     {\n       gimple_assign_set_lhs (stmt, urhs);\n-      g = gimple_build_assign_with_ops (NOP_EXPR, lhs, urhs, NULL_TREE);\n+      g = gimple_build_assign_with_ops (NOP_EXPR, lhs, urhs);\n       gimple_set_location (g, loc);\n       edge e = find_fallthru_edge (gimple_bb (stmt)->succs);\n       gsi_insert_on_edge_immediate (e, g);\n@@ -1213,7 +1212,7 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n \n   if (!can_throw)\n     {\n-      gimple_assign_set_rhs_with_ops (&gsi2, NOP_EXPR, urhs, NULL_TREE);\n+      gimple_assign_set_rhs_with_ops (&gsi2, NOP_EXPR, urhs);\n       update_stmt (stmt);\n     }\n "}]}