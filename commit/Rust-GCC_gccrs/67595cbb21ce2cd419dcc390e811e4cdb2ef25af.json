{"sha": "67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc1OTVjYmIyMWNlMmNkNDE5ZGNjMzkwZTgxMWU0Y2RiMmVmMjVhZg==", "commit": {"author": {"name": "Roman Zippel", "email": "zippel@linux-m68k.org", "date": "2007-09-24T21:00:22Z"}, "committer": {"name": "Roman Zippel", "email": "zippel@gcc.gnu.org", "date": "2007-09-24T21:00:22Z"}, "message": "m68k.c (notice_update_cc): Recognize fp compare (moved from fp compare patterns).\n\n\t* config/m68k/m68k.c (notice_update_cc): Recognize fp compare\n\t(moved from fp compare patterns).\n\t* config/m68k/m68k.md (cmp<mode>, cmp<mode>_68881, cmp<mode>_cf):\n\tCleanup predicates to relieve reload.\n\t(conditional_trap): Reject conditional trap with fp condition.\n\t* gcc/config/m68k/predicates.md (fp_src_operand): New, reject\n\tcertain constants early.\n\nFrom-SVN: r128727", "tree": {"sha": "b12c268d3ca97c1c3fc26e082610c65867cd1276", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b12c268d3ca97c1c3fc26e082610c65867cd1276"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/comments", "author": null, "committer": null, "parents": [{"sha": "d5aa0eb1c46a81b4daa9d6107504e4464a05116e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5aa0eb1c46a81b4daa9d6107504e4464a05116e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5aa0eb1c46a81b4daa9d6107504e4464a05116e"}], "stats": {"total": 107, "additions": 67, "deletions": 40}, "files": [{"sha": "c092fec34fe258b11f036d6a6fd09df0fb2b1418", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "patch": "@@ -1,3 +1,13 @@\n+2007-09-24  Roman Zippel <zippel@linux-m68k.org> \n+\n+\t* config/m68k/m68k.c (notice_update_cc): Recognize fp compare\n+\t(moved from fp compare patterns).\n+\t* config/m68k/m68k.md (cmp<mode>, cmp<mode>_68881, cmp<mode>_cf):\n+\tCleanup predicates to relieve reload.\n+\t(conditional_trap): Reject conditional trap with fp condition.\n+\t* gcc/config/m68k/predicates.md (fp_src_operand): New, reject\n+\tcertain constants early.\n+\n 2007-09-24  Roman Zippel <zippel@linux-m68k.org>\n \n \t* gcc/final.c (final_scan_insn): Remove accidentally duplicated code."}, {"sha": "1f6b4f9fde7a7b198b6d7ae51d62c66f5228fe65", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "patch": "@@ -3513,6 +3513,13 @@ notice_update_cc (rtx exp, rtx insn)\n   if (((cc_status.value1 && FP_REG_P (cc_status.value1))\n        || (cc_status.value2 && FP_REG_P (cc_status.value2))))\n     cc_status.flags = CC_IN_68881;\n+  if (cc_status.value2 && GET_CODE (cc_status.value2) == COMPARE\n+      && GET_MODE_CLASS (GET_MODE (XEXP (cc_status.value2, 0))) == MODE_FLOAT)\n+    {\n+      cc_status.flags = CC_IN_68881;\n+      if (!FP_REG_P (XEXP (cc_status.value2, 0)))\n+\tcc_status.flags |= CC_REVERSED;\n+    }\n }\n \f\n const char *"}, {"sha": "b6ce6a8df0ea5c3562f5db4e63a1f840c04c8120", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "patch": "@@ -632,51 +632,35 @@\n \n (define_expand \"cmp<mode>\"\n   [(set (cc0)\n-\t(compare (match_operand:FP 0 \"general_operand\" \"\")\n-\t\t (match_operand:FP 1 \"general_operand\" \"\")))]\n+\t(compare (match_operand:FP 0 \"register_operand\" \"\")\n+\t\t (match_operand:FP 1 \"fp_src_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-{\n-  m68k_last_compare_had_fp_operands = 1;\n-  if (TARGET_COLDFIRE && !reload_completed)\n-    operands[1] = force_reg (<MODE>mode, operands[1]);\n-})\n+  \"m68k_last_compare_had_fp_operands = 1;\")\n \n-(define_insn \"cmp<mode>_68881\"\n+(define_insn \"*cmp<mode>_68881\"\n   [(set (cc0)\n-\t(compare (match_operand:FP 0 \"general_operand\" \"f,m<FP:const>\")\n-\t\t (match_operand:FP 1 \"general_operand\" \"f<FP:dreg>m<FP:const>,f\")))]\n-  \"TARGET_68881\"\n-{\n-  cc_status.flags = CC_IN_68881;\n-  if (FP_REG_P (operands[0]))\n-    {\n-      if (FP_REG_P (operands[1]))\n-\treturn \"fcmp%.x %1,%0\";\n-      else\n-        return \"fcmp%.<FP:prec> %f1,%0\";\n-    }\n-  cc_status.flags |= CC_REVERSED; /*|*/\n-  return \"fcmp%.<FP:prec> %f0,%1\";\n-}\n+\t(compare (match_operand:FP 0 \"fp_src_operand\" \"f,f,<FP:dreg>mF\")\n+\t\t (match_operand:FP 1 \"fp_src_operand\" \"f,<FP:dreg>mF,f\")))]\n+  \"TARGET_68881\n+   && (register_operand (operands[0], <MODE>mode)\n+       || register_operand (operands[1], <MODE>mode))\"\n+  \"@\n+   fcmp%.x %1,%0\n+   fcmp%.<FP:prec> %f1,%0\n+   fcmp%.<FP:prec> %0,%f1\"\n   [(set_attr \"type\" \"fcmp\")])\n \n-(define_insn \"cmp<mode>_cf\"\n+(define_insn \"*cmp<mode>_cf\"\n   [(set (cc0)\n-\t(compare (match_operand:FP 0 \"general_operand\" \"f,<FP:dreg><Q>U\")\n-\t\t (match_operand:FP 1 \"general_operand\" \"f<FP:dreg><Q>U,f\")))]\n-  \"TARGET_COLDFIRE_FPU\"\n-{\n-  cc_status.flags = CC_IN_68881;\n-  if (FP_REG_P (operands[0]))\n-    {\n-      if (FP_REG_P (operands[1]))\n-\treturn \"fcmp%.d %1,%0\";\n-      else\n-\treturn \"fcmp%.<FP:prec> %f1,%0\";\n-    }\n-  cc_status.flags |= CC_REVERSED; /*|*/\n-  return \"fcmp%.<FP:prec> %f0,%1\";\n-}\n+\t(compare (match_operand:FP 0 \"fp_src_operand\" \"f,f,<FP:dreg><Q>U\")\n+\t\t (match_operand:FP 1 \"fp_src_operand\" \"f,<FP:dreg><Q>U,f\")))]\n+  \"TARGET_COLDFIRE_FPU\n+   && (register_operand (operands[0], <MODE>mode)\n+       || register_operand (operands[1], <MODE>mode))\"\n+  \"@\n+   fcmp%.d %1,%0\n+   fcmp%.<FP:prec> %f1,%0\n+   fcmp%.<FP:prec> %0,%f1\"\n   [(set_attr \"type\" \"fcmp\")])\n \f\n ;; Recognizers for btst instructions.\n@@ -7683,7 +7667,20 @@\n   \"trap #7\"\n   [(set_attr \"type\" \"trap\")])\n \n-(define_insn \"conditional_trap\"\n+(define_expand \"conditional_trap\"\n+  [(trap_if (match_operator 0 \"valid_dbcc_comparison_p\"\n+\t\t\t    [(cc0) (const_int 0)])\n+\t    (match_operand:SI 1 \"const_int_operand\" \"I\"))]\n+  \"TARGET_68020\"\n+{\n+  if (m68k_last_compare_had_fp_operands)\n+    {\n+      m68k_last_compare_had_fp_operands = 0;\n+      FAIL;\n+    }\n+})\n+\n+(define_insn \"*conditional_trap\"\n   [(trap_if (match_operator 0 \"valid_dbcc_comparison_p\"\n \t\t\t    [(cc0) (const_int 0)])\n \t    (match_operand:SI 1 \"const_int_operand\" \"I\"))]"}, {"sha": "b43e55b8972b4792c995293fd89c73f86cdb50f2", "filename": "gcc/config/m68k/predicates.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67595cbb21ce2cd419dcc390e811e4cdb2ef25af/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpredicates.md?ref=67595cbb21ce2cd419dcc390e811e4cdb2ef25af", "patch": "@@ -206,3 +206,16 @@\n        (ior (and (match_code \"const_int\")\n  \t\t (match_test \"!symbolic_operand (op, mode)\"))\n  \t    (match_test \"!symbolic_operand (op,mode)\"))))\n+\n+;; Special case of general_src_operand, which rejects a few fp\n+;; constants (which we prefer in registers) before reload.\n+\n+(define_predicate \"fp_src_operand\"\n+  (match_operand 0 \"general_src_operand\")\n+{\n+  return !CONSTANT_P (op)\n+\t || (TARGET_68881\n+\t     && (!standard_68881_constant_p (op)\n+\t\t || reload_in_progress\n+\t\t || reload_completed));\n+})"}]}