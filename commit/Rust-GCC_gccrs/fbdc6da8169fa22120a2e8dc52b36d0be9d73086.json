{"sha": "fbdc6da8169fa22120a2e8dc52b36d0be9d73086", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkYzZkYTgxNjlmYTIyMTIwYTJlOGRjNTJiMzZkMGJlOWQ3MzA4Ng==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-10T23:01:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-05-10T23:01:08Z"}, "message": "(maybe_eliminate_biv_1): Disable all but two cases of biv elimination with givs...\n\n(maybe_eliminate_biv_1): Disable all but two cases of biv elimination\nwith givs and restrict those two cases to an ADD_VAL that is an\naddress.\n\nFrom-SVN: r11968", "tree": {"sha": "fdcefc7671e3635b7e85027d6357c1d9648b5f06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdcefc7671e3635b7e85027d6357c1d9648b5f06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbdc6da8169fa22120a2e8dc52b36d0be9d73086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdc6da8169fa22120a2e8dc52b36d0be9d73086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdc6da8169fa22120a2e8dc52b36d0be9d73086", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdc6da8169fa22120a2e8dc52b36d0be9d73086/comments", "author": null, "committer": null, "parents": [{"sha": "cb9e8ad176e75e65cc130c318c4a84922aa98f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb9e8ad176e75e65cc130c318c4a84922aa98f2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb9e8ad176e75e65cc130c318c4a84922aa98f2a"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "0ee43c9e509d6c056ccfab795a04dc49ab9d6ed2", "filename": "gcc/loop.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbdc6da8169fa22120a2e8dc52b36d0be9d73086/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbdc6da8169fa22120a2e8dc52b36d0be9d73086/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=fbdc6da8169fa22120a2e8dc52b36d0be9d73086", "patch": "@@ -6178,13 +6178,16 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n \t{\n \t  /* Can replace with any giv that was reduced and\n \t     that has (MULT_VAL != 0) and (ADD_VAL == 0).\n-\t     Require a constant for MULT_VAL, so we know it's nonzero.  */\n+\t     Require a constant for MULT_VAL, so we know it's nonzero.\n+\t     ??? We disable this optimization to avoid potential\n+\t     overflows.  */\n \n \t  for (v = bl->giv; v; v = v->next_iv)\n \t    if (CONSTANT_P (v->mult_val) && v->mult_val != const0_rtx\n \t\t&& v->add_val == const0_rtx\n \t\t&& ! v->ignore && ! v->maybe_dead && v->always_computable\n-\t\t&& v->mode == mode)\n+\t\t&& v->mode == mode\n+\t\t&& 0)\n \t      {\n \t\t/* If the giv V had the auto-inc address optimization applied\n \t\t   to it, and INSN occurs between the giv insn and the biv\n@@ -6215,12 +6218,19 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n \n \t  /* Look for a giv with (MULT_VAL != 0) and (ADD_VAL != 0);\n \t     replace test insn with a compare insn (cmp REDUCED_GIV ADD_VAL).\n-\t     Require a constant for MULT_VAL, so we know it's nonzero.  */\n+\t     Require a constant for MULT_VAL, so we know it's nonzero.\n+\t     ??? Do this only if ADD_VAL is a pointer to avoid a potential\n+\t     overflow problem.  */\n \n \t  for (v = bl->giv; v; v = v->next_iv)\n \t    if (CONSTANT_P (v->mult_val) && v->mult_val != const0_rtx\n \t\t&& ! v->ignore && ! v->maybe_dead && v->always_computable\n-\t\t&& v->mode == mode)\n+\t\t&& v->mode == mode\n+\t\t&& (GET_CODE (v->add_val) == SYMBOL_REF\n+\t\t    || GET_CODE (v->add_val) == LABEL_REF\n+\t\t    || GET_CODE (v->add_val) == CONST\n+\t\t    || (GET_CODE (v->add_val) == REG\n+\t\t\t&& REGNO_POINTER_FLAG (REGNO (v->add_val)))))\n \t      {\n \t\t/* If the giv V had the auto-inc address optimization applied\n \t\t   to it, and INSN occurs between the giv insn and the biv\n@@ -6286,7 +6296,11 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n \n \t  for (v = bl->giv; v; v = v->next_iv)\n \t    if (CONSTANT_P (v->mult_val) && INTVAL (v->mult_val) > 0\n-\t\t&& CONSTANT_P (v->add_val)\n+\t\t&& (GET_CODE (v->add_val) == SYMBOL_REF\n+\t\t    || GET_CODE (v->add_val) == LABEL_REF\n+\t\t    || GET_CODE (v->add_val) == CONST\n+\t\t    || (GET_CODE (v->add_val) == REG\n+\t\t\t&& REGNO_POINTER_FLAG (REGNO (v->add_val))))\n \t\t&& ! v->ignore && ! v->maybe_dead && v->always_computable\n \t\t&& v->mode == mode)\n \t      {\n@@ -6330,12 +6344,14 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n \t      }\n \t  \n \t  /* Look for giv with positive constant mult_val and nonconst add_val.\n-\t     Insert insns to calculate new compare value.  */\n+\t     Insert insns to calculate new compare value.  \n+\t     ??? Turn this off due to possible overflow.  */\n \n \t  for (v = bl->giv; v; v = v->next_iv)\n \t    if (CONSTANT_P (v->mult_val) && INTVAL (v->mult_val) > 0\n \t\t&& ! v->ignore && ! v->maybe_dead && v->always_computable\n-\t\t&& v->mode == mode)\n+\t\t&& v->mode == mode\n+\t\t&& 0)\n \t      {\n \t\trtx tem;\n \n@@ -6372,12 +6388,14 @@ maybe_eliminate_biv_1 (x, insn, bl, eliminate_p, where)\n \t  if (invariant_p (arg) == 1)\n \t    {\n \t      /* Look for giv with constant positive mult_val and nonconst\n-\t\t add_val. Insert insns to compute new compare value.  */\n+\t\t add_val. Insert insns to compute new compare value. \n+\t\t ??? Turn this off due to possible overflow.  */\n \n \t      for (v = bl->giv; v; v = v->next_iv)\n \t\tif (CONSTANT_P (v->mult_val) && INTVAL (v->mult_val) > 0\n \t\t    && ! v->ignore && ! v->maybe_dead && v->always_computable\n-\t\t    && v->mode == mode)\n+\t\t    && v->mode == mode\n+\t\t    && 0)\n \t\t  {\n \t\t    rtx tem;\n "}]}