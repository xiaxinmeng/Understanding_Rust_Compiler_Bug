{"sha": "486b10aa89499699906fecc6630fbdc7b26996b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2YjEwYWE4OTQ5OTY5OTkwNmZlY2M2NjMwZmJkYzdiMjY5OTZiMg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-12-21T08:05:57Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-12-21T08:05:57Z"}, "message": "sh.h (PREFERRED_RELOAD_CLASS): Remove.\n\n\t* config/sh/sh.h (PREFERRED_RELOAD_CLASS): Remove.\n\t* config/sh/sh-protos.h (secondary_reload_info, sh_secondary_reload):\n\tRemove forward declaration.\n\t* config/sh/sh.c (sh_preferred_reload_class): New function.\n\t(sh_secondary_reload): Make static.\n\t(TARGET_PREFERRED_RELOAD_CLASS): Define.\n\nFrom-SVN: r168104", "tree": {"sha": "b82c8d7ae00e3099afdc6e82d16bc8f52c680928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b82c8d7ae00e3099afdc6e82d16bc8f52c680928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486b10aa89499699906fecc6630fbdc7b26996b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486b10aa89499699906fecc6630fbdc7b26996b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486b10aa89499699906fecc6630fbdc7b26996b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486b10aa89499699906fecc6630fbdc7b26996b2/comments", "author": null, "committer": null, "parents": [{"sha": "5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ae2ca96ad36d168af9e4dcb23d76fa5be1662fe"}], "stats": {"total": 52, "additions": 34, "deletions": 18}, "files": [{"sha": "b70ef959cdba2bb5e7a365cb46a497cd80aed5ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=486b10aa89499699906fecc6630fbdc7b26996b2", "patch": "@@ -1,3 +1,12 @@\n+2010-12-21  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/sh/sh.h (PREFERRED_RELOAD_CLASS): Remove.\n+\t* config/sh/sh-protos.h (secondary_reload_info, sh_secondary_reload):\n+\tRemove forward declaration.\n+\t* config/sh/sh.c (sh_preferred_reload_class): New function.\n+\t(sh_secondary_reload): Make static.\n+\t(TARGET_PREFERRED_RELOAD_CLASS): Define.\n+\n 2010-12-20  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/alpha/linux.h (OPTION_GLIBC): Define differently if"}, {"sha": "d29147c98375b9fa2337564744cb67484ab2f5e3", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=486b10aa89499699906fecc6630fbdc7b26996b2", "patch": "@@ -165,10 +165,6 @@ extern int shmedia_cleanup_truncate (rtx *, void *);\n extern int sh_contains_memref_p (rtx);\n extern int sh_loads_bankedreg_p (rtx);\n extern rtx shmedia_prepare_call_address (rtx fnaddr, int is_sibcall);\n-struct secondary_reload_info;\n-extern reg_class_t sh_secondary_reload (bool, rtx, reg_class_t,\n-\t\t\t\t\tenum machine_mode,\n-\t\t\t\t\tstruct secondary_reload_info *);\n extern int sh2a_get_function_vector_number (rtx);\n extern int sh2a_is_function_vector_call (rtx);\n extern void sh_fix_range (const char *);"}, {"sha": "67c7c44a077c37ffddb7cb5a41c41d32ccec1fd1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=486b10aa89499699906fecc6630fbdc7b26996b2", "patch": "@@ -253,6 +253,10 @@ static bool sh_rtx_costs (rtx, int, int, int *, bool);\n static int sh_address_cost (rtx, bool);\n static int sh_pr_n_sets (void);\n static rtx sh_allocate_initial_value (rtx);\n+static reg_class_t sh_preferred_reload_class (rtx, reg_class_t);\n+static reg_class_t sh_secondary_reload (bool, rtx, reg_class_t,\n+                                        enum machine_mode,\n+                                        struct secondary_reload_info *);\n static bool sh_legitimate_address_p (enum machine_mode, rtx, bool);\n static rtx sh_legitimize_address (rtx, rtx, enum machine_mode);\n static rtx sh_delegitimize_address (rtx);\n@@ -591,6 +595,9 @@ static const struct default_options sh_option_optimization_table[] =\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD sh_secondary_reload\n \n+#undef  TARGET_PREFERRED_RELOAD_CLASS\n+#define TARGET_PREFERRED_RELOAD_CLASS sh_preferred_reload_class\n+\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE sh_conditional_register_usage\n \n@@ -12426,7 +12433,24 @@ shmedia_prepare_call_address (rtx fnaddr, int is_sibcall)\n   return fnaddr;\n }\n \n-reg_class_t\n+/* Implement TARGET_PREFERRED_RELOAD_CLASS.  */\n+\n+static reg_class_t\n+sh_preferred_reload_class (rtx x, reg_class_t rclass)\n+{\n+  if (rclass == NO_REGS\n+      && TARGET_SHMEDIA\n+      && (CONST_DOUBLE_P (x)\n+\t  || GET_CODE (x) == SYMBOL_REF\n+\t  || PIC_ADDR_P (x)))\n+    return GENERAL_REGS;\n+\n+  return rclass;\n+}\n+\n+/* Implement TARGET_SECONDARY_RELOAD.  */\n+\n+static reg_class_t\n sh_secondary_reload (bool in_p, rtx x, reg_class_t rclass_i,\n \t\t     enum machine_mode mode, secondary_reload_info *sri)\n {"}, {"sha": "861b66573d307d2debbd5e7c3fa0509e8f47db87", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486b10aa89499699906fecc6630fbdc7b26996b2/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=486b10aa89499699906fecc6630fbdc7b26996b2", "patch": "@@ -1213,19 +1213,6 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define CONST_OK_FOR_K08(VALUE) (((HOST_WIDE_INT)(VALUE))>= 0 \\\n \t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 255)\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.  */\n-\n-#define PREFERRED_RELOAD_CLASS(X, CLASS) \\\n-  ((CLASS) == NO_REGS && TARGET_SHMEDIA \\\n-   && (GET_CODE (X) == CONST_DOUBLE \\\n-       || GET_CODE (X) == SYMBOL_REF \\\n-       || PIC_ADDR_P (X)) \\\n-   ? GENERAL_REGS \\\n-   : (CLASS)) \\\n-\n #if 0\n #define SECONDARY_INOUT_RELOAD_CLASS(CLASS,MODE,X,ELSE) \\\n   ((((REGCLASS_HAS_FP_REG (CLASS) \t\t\t\t\t\\"}]}