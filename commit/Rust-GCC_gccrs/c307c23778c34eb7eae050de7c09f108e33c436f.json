{"sha": "c307c23778c34eb7eae050de7c09f108e33c436f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMwN2MyMzc3OGMzNGViN2VhZTA1MGRlN2MwOWYxMDhlMzNjNDM2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-23T11:46:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-23T11:46:27Z"}, "message": "(mark_scratch_live): New function.\n\n(reload): Call it on each SCRATCH.\nFree scratch list and block.\n(spill_hard_reg): Reallocate any SCRATCH whose register we want to spill.\n\nFrom-SVN: r4712", "tree": {"sha": "ab2f870e0d1b58e339b2f98aaeab39cb3811461a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2f870e0d1b58e339b2f98aaeab39cb3811461a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c307c23778c34eb7eae050de7c09f108e33c436f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c307c23778c34eb7eae050de7c09f108e33c436f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c307c23778c34eb7eae050de7c09f108e33c436f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c307c23778c34eb7eae050de7c09f108e33c436f/comments", "author": null, "committer": null, "parents": [{"sha": "a65b6597c4ec13edfa3f6e4d89bf052f0b945dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a65b6597c4ec13edfa3f6e4d89bf052f0b945dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a65b6597c4ec13edfa3f6e4d89bf052f0b945dbf"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "11bf8f42463edaafdc72b4ea1a0da487fcccc0cc", "filename": "gcc/reload1.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c307c23778c34eb7eae050de7c09f108e33c436f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c307c23778c34eb7eae050de7c09f108e33c436f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c307c23778c34eb7eae050de7c09f108e33c436f", "patch": "@@ -336,6 +336,7 @@ static int new_spill_reg\t\tPROTO((int, int, int *, int *, int,\n \t\t\t\t\t       FILE *));\n static void delete_dead_insn\t\tPROTO((rtx));\n static void alter_reg  \t\t\tPROTO((int, int));\n+static void mark_scratch_live\t\tPROTO((rtx));\n static void set_label_offsets\t\tPROTO((rtx, rtx, int));\n static int eliminate_regs_in_insn\tPROTO((rtx, int));\n static void mark_not_eliminable\t\tPROTO((rtx, rtx));\n@@ -491,6 +492,10 @@ reload (first, global, dumpfile)\n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n     mark_home_live (i);\n \n+  for (i = 0; i < scratch_list_length; i++)\n+    if (scratch_list[i])\n+      mark_scratch_live (scratch_list[i]);\n+\n   /* Make sure that the last insn in the chain\n      is not something that needs reloading.  */\n   emit_note (NULL_PTR, NOTE_INSN_DELETED);\n@@ -1992,6 +1997,11 @@ reload (first, global, dumpfile)\n   reg_equiv_constant = 0;\n   reg_equiv_memory_loc = 0;\n \n+  free (scratch_list);\n+  scratch_list = 0;\n+  free (scratch_block);\n+  scratch_block = 0;\n+\n   return failure;\n }\n \f\n@@ -2394,6 +2404,20 @@ mark_home_live (regno)\n   while (i < lim)\n     regs_ever_live[i++] = 1;\n }\n+\n+/* Mark the registers used in SCRATCH as being live.  */\n+\n+static void\n+mark_scratch_live (scratch)\n+     rtx scratch;\n+{\n+  register int i;\n+  int regno = REGNO (scratch);\n+  int lim = regno + HARD_REGNO_NREGS (regno, GET_MODE (scratch));\n+\n+  for (i = regno; i < lim; i++)\n+    regs_ever_live[i] = 1;\n+}\n \f\n /* This function handles the tracking of elimination offsets around branches.\n \n@@ -3279,6 +3303,7 @@ spill_hard_reg (regno, global, dumpfile, cant_eliminate)\n      FILE *dumpfile;\n      int cant_eliminate;\n {\n+  enum reg_class class = REGNO_REG_CLASS (regno);\n   int something_changed = 0;\n   register int i;\n \n@@ -3295,8 +3320,6 @@ spill_hard_reg (regno, global, dumpfile, cant_eliminate)\n \t\t\t\tPSEUDO_REGNO_MODE (i))\n \t    > regno))\n       {\n-\tenum reg_class class = REGNO_REG_CLASS (regno);\n-\n \t/* If this register belongs solely to a basic block which needed no\n \t   spilling of any class that this register is contained in,\n \t   leave it be, unless we are spilling this register because\n@@ -3335,6 +3358,29 @@ spill_hard_reg (regno, global, dumpfile, cant_eliminate)\n \t\t       i, reg_renumber[i]);\n \t  }\n       }\n+  for (i = 0; i < scratch_list_length; i++)\n+    {\n+      if (scratch_list[i] && REGNO (scratch_list[i]) == regno)\n+\t{\n+\t  if (! cant_eliminate && basic_block_needs[0]\n+\t      && ! basic_block_needs[(int) class][scratch_block[i]])\n+\t    {\n+\t      enum reg_class *p;\n+\n+\t      for (p = reg_class_superclasses[(int) class];\n+\t\t   *p != LIM_REG_CLASSES; p++)\n+\t\tif (basic_block_needs[(int) *p][scratch_block[i]] > 0)\n+\t\t  break;\n+\n+\t      if (*p == LIM_REG_CLASSES)\n+\t\tcontinue;\n+\t    }\n+\t  PUT_CODE (scratch_list[i], SCRATCH);\n+\t  scratch_list[i] = 0;\n+\t  something_changed = 1;\n+\t  continue;\n+\t}\n+    }\n \n   return something_changed;\n }"}]}