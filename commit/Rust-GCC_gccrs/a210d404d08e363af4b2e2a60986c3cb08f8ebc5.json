{"sha": "a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxMGQ0MDRkMDhlMzYzYWY0YjJlMmE2MDk4NmMzY2IwOGY4ZWJjNQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-10T19:57:19Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-11-10T20:02:51Z"}, "message": "c++: Add 5 unfixed tests.\n\nA couple of dg-ice tests.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/52830\n\tPR c++/88982\n\tPR c++/90799\n\tPR c++/87765\n\tPR c++/89565\n\t* g++.dg/cpp0x/constexpr-52830.C: New test.\n\t* g++.dg/cpp0x/vt-88982.C: New test.\n\t* g++.dg/cpp1z/class-deduction76.C: New test.\n\t* g++.dg/cpp1z/constexpr-lambda26.C: New test.\n\t* g++.dg/cpp2a/nontype-class39.C: New test.", "tree": {"sha": "6eb292f4e467b47e845f6d5cd3b231acdcf2a13a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb292f4e467b47e845f6d5cd3b231acdcf2a13a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c41c572bbc16d852104515e506936d447debbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c41c572bbc16d852104515e506936d447debbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c41c572bbc16d852104515e506936d447debbe"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "2c9d2f9b329eafb5c2f8f0ca51a2f3d903c6a05c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-52830.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-52830.C?ref=a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "patch": "@@ -0,0 +1,37 @@\n+// PR c++/52830\n+// { dg-do compile { target c++11 } }\n+// { dg-ice \"comptypes\" }\n+\n+template<bool b> struct eif { typedef void type; };\n+template<>       struct eif<false> {};\n+\n+template<class A, class B> struct same\n+{\n+  static constexpr bool value = false;\n+};\n+template<class A>\n+struct same<A, A>\n+{\n+  static constexpr bool value = true;\n+};\n+\n+\n+struct foo {\n+  template<class T>\n+  void func(T && a,\n+            typename eif<same<decltype(a), int&&>::value>::type * = 0);\n+};\n+\n+template<class T>\n+void\n+foo::\n+func(T && a,\n+     typename eif<same<decltype(a), int&&>::value>::type * )\n+{\n+}\n+\n+void do_stuff()\n+{\n+  foo f;\n+  f.func(12);\n+}"}, {"sha": "cb9530dcee12251ca842787fdfa1b82fea010bb4", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-88982.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-88982.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-88982.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-88982.C?ref=a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/88982\n+// { dg-do compile { target c++11 } }\n+// { dg-ice \"tsubst_pack_expansion\" }\n+\n+template<typename...Ts> struct A {\n+  template<template<typename, Ts = 0> class ...Cs, Cs<Ts> ...Vs> struct B {\n+    B() {\n+    }\n+  };\n+};\n+\n+template<typename, int> using Int = int;\n+template<typename, short> using Char = char;\n+A<int, short>::B<Int, Char> b;"}, {"sha": "23bb6e8fa9af59a2bef04ff1267bb3f2ca9c41ae", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction76.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction76.C?ref=a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/90799\n+// { dg-do compile { target c++17 } }\n+// { dg-ice \"unify\" }\n+\n+template<class T>\n+void foo() noexcept(T::value);\n+\n+struct S {\n+    static constexpr const bool value = true;\n+\n+    template<class T>\n+    void bar() noexcept(T::value);\n+};\n+\n+template<class... Args, bool is_noexcept>\n+constexpr bool is_noexcept_function(void(Args...) noexcept(is_noexcept)) noexcept {\n+    return is_noexcept;\n+}\n+\n+template<class... Args, bool is_noexcept>\n+constexpr bool is_noexcept_member_function(void(S::*)(Args...) noexcept(is_noexcept)) noexcept {\n+    return is_noexcept;\n+}\n+\n+static_assert(is_noexcept_function(foo<S>));"}, {"sha": "d6c8bae525fa5c843999633a8bdb55215f779cf1", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-lambda26.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-lambda26.C?ref=a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/87765\n+// { dg-do compile { target c++17 } }\n+// { dg-ice \"cxx_eval_constant_expression\" }\n+\n+template <int N>\n+using foo = int;\n+\n+struct A {\n+  constexpr int bar() const { return 42; }\n+};\n+\n+void baz(A a) {\n+  [=](auto c) { return foo<a.bar()> { }; }; }"}, {"sha": "f5f79a71ec2c31f1380487dafb5d46ee59034b2e", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class39.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a210d404d08e363af4b2e2a60986c3cb08f8ebc5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class39.C?ref=a210d404d08e363af4b2e2a60986c3cb08f8ebc5", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/89565\n+// { dg-do compile { target c++20 } }\n+// { dg-ice \"resolve_args\" }\n+\n+template <auto>\n+struct N{};\n+\n+template <N>\n+struct S {};\n+\n+template <typename T>\n+using NS = S<T::value>;"}]}