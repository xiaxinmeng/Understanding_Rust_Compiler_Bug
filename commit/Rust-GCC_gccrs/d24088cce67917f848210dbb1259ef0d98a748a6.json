{"sha": "d24088cce67917f848210dbb1259ef0d98a748a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0MDg4Y2NlNjc5MTdmODQ4MjEwZGJiMTI1OWVmMGQ5OGE3NDhhNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-04-12T21:07:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-04-12T21:07:47Z"}, "message": "sparc.h (APPLY_RESULT_SIZE): Set to 24 in 64-bit mode.\n\n\t* config/sparc/sparc.h (APPLY_RESULT_SIZE): Set to 24 in 64-bit mode.\n\t* config/sparc/sparc.md (untyped_call): Save the registers manually.\n\n\t* config/sparc/sparc.c (legitimate_address_p): Use TARGET_ARCH32.\n\nFrom-SVN: r98044", "tree": {"sha": "73429c0c636619f8b503728c14b81dd12a2ab71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73429c0c636619f8b503728c14b81dd12a2ab71d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d24088cce67917f848210dbb1259ef0d98a748a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24088cce67917f848210dbb1259ef0d98a748a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d24088cce67917f848210dbb1259ef0d98a748a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d24088cce67917f848210dbb1259ef0d98a748a6/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca11b3fb997da7fc100bebcbfb2b2928dc6b1949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca11b3fb997da7fc100bebcbfb2b2928dc6b1949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca11b3fb997da7fc100bebcbfb2b2928dc6b1949"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "52c93c06661026ca6eb930d35236141baf8598e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d24088cce67917f848210dbb1259ef0d98a748a6", "patch": "@@ -1,3 +1,10 @@\n+2005-04-12  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* config/sparc/sparc.h (APPLY_RESULT_SIZE): Set to 24 in 64-bit mode.\n+\t* config/sparc/sparc.md (untyped_call): Save the registers manually.\n+\n+\t* config/sparc/sparc.c (legitimate_address_p): Use TARGET_ARCH32.\n+\n 2005-04-12  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \tPR middle-end/20917"}, {"sha": "bae1b83ee21b28667cadc7cf760b335ca18b5e6f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d24088cce67917f848210dbb1259ef0d98a748a6", "patch": "@@ -3554,7 +3554,7 @@ legitimate_address_p (enum machine_mode mode, rtx addr, int strict)\n \n       /* We can't allow TFmode in 32-bit mode, because an offset greater\n \t than the alignment (8) may cause the LO_SUM to overflow.  */\n-      if (mode == TFmode && !TARGET_64BIT)\n+      if (mode == TFmode && TARGET_ARCH32)\n \treturn 0;\n     }\n   else if (GET_CODE (addr) == CONST_INT && SMALL_INT (addr))"}, {"sha": "ae8624d076fe22c44344de6fa8e807afe0b3057a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d24088cce67917f848210dbb1259ef0d98a748a6", "patch": "@@ -1680,7 +1680,7 @@ extern char leaf_reg_remap[];\n /* Define the size of space to allocate for the return value of an\n    untyped_call.  */\n \n-#define APPLY_RESULT_SIZE 16\n+#define APPLY_RESULT_SIZE (TARGET_ARCH64 ? 24 : 16)\n \n /* 1 if N is a possible register number for function argument passing.\n    On SPARC, these are the \"output\" registers.  v9 also uses %f0-%f31.  */"}, {"sha": "2073e681c0d3d02df211ad0ce650a112c4380cbd", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d24088cce67917f848210dbb1259ef0d98a748a6/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d24088cce67917f848210dbb1259ef0d98a748a6", "patch": "@@ -7621,21 +7621,22 @@\n (define_expand \"untyped_call\"\n   [(parallel [(call (match_operand 0 \"\" \"\")\n \t\t    (const_int 0))\n-\t      (match_operand 1 \"\" \"\")\n+\t      (match_operand:BLK 1 \"memory_operand\" \"\")\n \t      (match_operand 2 \"\" \"\")])]\n   \"\"\n {\n-  int i;\n+  rtx valreg1 = gen_rtx_REG (DImode, 8);\n+  rtx valreg2 = gen_rtx_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n+  rtx result = operands[1];\n \n   /* Pass constm1 to indicate that it may expect a structure value, but\n      we don't know what size it is.  */\n   emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, constm1_rtx));\n \n-  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n-    {\n-      rtx set = XVECEXP (operands[2], 0, i);\n-      emit_move_insn (SET_DEST (set), SET_SRC (set));\n-    }\n+  /* Save the function value registers.  */\n+  emit_move_insn (adjust_address (result, DImode, 0), valreg1);\n+  emit_move_insn (adjust_address (result, TARGET_ARCH64 ? TFmode : DFmode, 8),\n+\t\t\t\t  valreg2);\n \n   /* The optimizer does not know that the call sets the function value\n      registers we stored in the result block.  We avoid problems by"}]}