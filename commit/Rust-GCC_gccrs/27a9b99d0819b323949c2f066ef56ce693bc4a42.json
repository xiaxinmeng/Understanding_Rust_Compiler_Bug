{"sha": "27a9b99d0819b323949c2f066ef56ce693bc4a42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdhOWI5OWQwODE5YjMyMzk0OWMyZjA2NmVmNTZjZTY5M2JjNGE0Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-02-18T02:18:25Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-02-18T02:18:25Z"}, "message": "ia64.h, [...]: Follow spelling conventions.\n\n\t* config/ia64/ia64.h, config/ia64/ia64.md,\n\tconfig/ia64/predicates.md, config/ia64/sysv4.h: Follow\n\tspelling conventions.\n\nFrom-SVN: r122087", "tree": {"sha": "7b976ef0fc40d976959f5950a5da1b552c252979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b976ef0fc40d976959f5950a5da1b552c252979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27a9b99d0819b323949c2f066ef56ce693bc4a42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a9b99d0819b323949c2f066ef56ce693bc4a42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a9b99d0819b323949c2f066ef56ce693bc4a42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a9b99d0819b323949c2f066ef56ce693bc4a42/comments", "author": null, "committer": null, "parents": [{"sha": "165a0dc32a4be8f6d81ae7e667ca2605a6658d2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165a0dc32a4be8f6d81ae7e667ca2605a6658d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165a0dc32a4be8f6d81ae7e667ca2605a6658d2e"}], "stats": {"total": 80, "additions": 43, "deletions": 37}, "files": [{"sha": "c20044cc3fc8365bacae8f87e43221c15607dd27", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27a9b99d0819b323949c2f066ef56ce693bc4a42", "patch": "@@ -1,3 +1,9 @@\n+2007-02-18  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/ia64/ia64.h, config/ia64/ia64.md,\n+\tconfig/ia64/predicates.md, config/ia64/sysv4.h: Follow\n+\tspelling conventions.\n+\n 2007-02-18  Roman Zippel <zippel@linux-m68k.org>\n \n \t* config/m68k/m68k.c (split_di): New."}, {"sha": "9e33042fd495bc5621ca00a962e7c47047a04523", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=27a9b99d0819b323949c2f066ef56ce693bc4a42", "patch": "@@ -175,7 +175,7 @@ extern enum processor_type ia64_tune;\n \n    You need not define this macro if the `POINTER_SIZE' is equal to the width\n    of `Pmode'.  */\n-/* Need this for 32 bit pointers, see hpux.h for setting it.  */\n+/* Need this for 32-bit pointers, see hpux.h for setting it.  */\n /* #define POINTERS_EXTEND_UNSIGNED */\n \n /* A macro to update MODE and UNSIGNEDP when an object whose type is TYPE and\n@@ -206,7 +206,7 @@ while (0)\n #define FUNCTION_BOUNDARY 128\n \n /* Optional x86 80-bit float, quad-precision 128-bit float, and quad-word\n-   128 bit integers all require 128 bit alignment.  */\n+   128-bit integers all require 128-bit alignment.  */\n #define BIGGEST_ALIGNMENT 128\n \n /* If defined, a C expression to compute the alignment for a static variable.\n@@ -910,19 +910,19 @@ enum reg_class\n    letters (`I', `J', `K', .. 'P') that specify particular ranges of\n    integer values.  */\n \n-/* 14 bit signed immediate for arithmetic instructions.  */\n+/* 14-bit signed immediate for arithmetic instructions.  */\n #define CONST_OK_FOR_I(VALUE) \\\n   ((unsigned HOST_WIDE_INT)(VALUE) + 0x2000 < 0x4000)\n-/* 22 bit signed immediate for arith instructions with r0/r1/r2/r3 source.  */\n+/* 22-bit signed immediate for arith instructions with r0/r1/r2/r3 source.  */\n #define CONST_OK_FOR_J(VALUE) \\\n   ((unsigned HOST_WIDE_INT)(VALUE) + 0x200000 < 0x400000)\n-/* 8 bit signed immediate for logical instructions.  */\n+/* 8-bit signed immediate for logical instructions.  */\n #define CONST_OK_FOR_K(VALUE) ((unsigned HOST_WIDE_INT)(VALUE) + 0x80 < 0x100)\n-/* 8 bit adjusted signed immediate for compare pseudo-ops.  */\n+/* 8-bit adjusted signed immediate for compare pseudo-ops.  */\n #define CONST_OK_FOR_L(VALUE) ((unsigned HOST_WIDE_INT)(VALUE) + 0x7F < 0x100)\n-/* 6 bit unsigned immediate for shift counts.  */\n+/* 6-bit unsigned immediate for shift counts.  */\n #define CONST_OK_FOR_M(VALUE) ((unsigned HOST_WIDE_INT)(VALUE) < 0x40)\n-/* 9 bit signed immediate for load/store post-increments.  */\n+/* 9-bit signed immediate for load/store post-increments.  */\n #define CONST_OK_FOR_N(VALUE) ((unsigned HOST_WIDE_INT)(VALUE) + 0x100 < 0x200)\n /* 0 for r0.  Used by Linux kernel, do not change.  */\n #define CONST_OK_FOR_O(VALUE) ((VALUE) == 0)"}, {"sha": "2704089184e1a19265edfce14ea6982d05b46aa6", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=27a9b99d0819b323949c2f066ef56ce693bc4a42", "patch": "@@ -1408,7 +1408,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 1 bit Integer arithmetic\n+;; :: 1-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -1921,7 +1921,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 16 bit Integer arithmetic\n+;; :: 16-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -1936,7 +1936,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit Integer arithmetic\n+;; :: 32-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -2234,7 +2234,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit Integer arithmetic\n+;; :: 64-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -2714,7 +2714,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 128 bit Integer arithmetic\n+;; :: 128-bit Integer arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -2908,7 +2908,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit floating point arithmetic\n+;; :: 32-bit floating point arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3313,7 +3313,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit floating point arithmetic\n+;; :: 64-bit floating point arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -3831,7 +3831,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 80 bit floating point arithmetic\n+;; :: 80-bit floating point arithmetic\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -4536,7 +4536,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit Integer Shifts and Rotates\n+;; :: 32-bit Integer Shifts and Rotates\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -4676,7 +4676,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit Integer Shifts and Rotates\n+;; :: 64-bit Integer Shifts and Rotates\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -4788,7 +4788,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 128 bit Integer Shifts and Rotates\n+;; :: 128-bit Integer Shifts and Rotates\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -4981,7 +4981,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 32 bit Integer Logical operations\n+;; :: 32-bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -5008,7 +5008,7 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n-;; :: 64 bit Integer Logical operations\n+;; :: 64-bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::\n \n@@ -6492,7 +6492,7 @@\n   [(set_attr \"itanium_class\" \"ignore\")\n    (set_attr \"predicable\" \"no\")])\n \n-;; UNSPEC instruction definition to \"swizzle\" 32 bit pointer into 64 bit\n+;; UNSPEC instruction definition to \"swizzle\" 32-bit pointer into 64-bit\n ;; pointer.  This is used by the HP-UX 32 bit mode.\n \n (define_insn \"ptr_extend\""}, {"sha": "3dd5973f43b228c4e4736d4c9f40f50423a194a6", "filename": "gcc/config/ia64/predicates.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fpredicates.md?ref=27a9b99d0819b323949c2f066ef56ce693bc4a42", "patch": "@@ -424,38 +424,38 @@\n        (and (match_code \"const_int,const_double,const_vector\")\n \t    (match_test \"op == CONST0_RTX (GET_MODE (op))\"))))\n \n-;; True if OP is a GR register operand, or a 5 bit immediate operand.\n+;; True if OP is a GR register operand, or a 5-bit immediate operand.\n (define_predicate \"gr_reg_or_5bit_operand\"\n   (ior (match_operand 0 \"gr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"INTVAL (op) >= 0 && INTVAL (op) < 32\"))))\n \n-;; True if OP is a GR register operand, or a 6 bit immediate operand.\n+;; True if OP is a GR register operand, or a 6-bit immediate operand.\n (define_predicate \"gr_reg_or_6bit_operand\"\n   (ior (match_operand 0 \"gr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_M (INTVAL (op))\"))))\n \n-;; True if OP is a GR register operand, or an 8 bit immediate operand.\n+;; True if OP is a GR register operand, or an 8-bit immediate operand.\n (define_predicate \"gr_reg_or_8bit_operand\"\n   (ior (match_operand 0 \"gr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_K (INTVAL (op))\"))))\n \n-;; True if OP is a GR/FR register operand, or an 8 bit immediate operand.\n+;; True if OP is a GR/FR register operand, or an 8-bit immediate operand.\n (define_predicate \"grfr_reg_or_8bit_operand\"\n   (ior (match_operand 0 \"grfr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_K (INTVAL (op))\"))))\n \n-;; True if OP is a register operand, or an 8 bit adjusted immediate operand.\n+;; True if OP is a register operand, or an 8-bit adjusted immediate operand.\n (define_predicate \"gr_reg_or_8bit_adjusted_operand\"\n   (ior (match_operand 0 \"gr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_L (INTVAL (op))\"))))\n \n-;; True if OP is a register operand, or is valid for both an 8 bit\n-;; immediate and an 8 bit adjusted immediate operand.  This is necessary\n+;; True if OP is a register operand, or is valid for both an 8-bit\n+;; immediate and an 8-bit adjusted immediate operand.  This is necessary\n ;; because when we emit a compare, we don't know what the condition will be,\n ;; so we need the union of the immediates accepted by GT and LT.\n (define_predicate \"gr_reg_or_8bit_and_adjusted_operand\"\n@@ -464,34 +464,34 @@\n \t    (match_test \"CONST_OK_FOR_K (INTVAL (op))\n                          && CONST_OK_FOR_L (INTVAL (op))\"))))\n \n-;; True if OP is a register operand, or a 14 bit immediate operand.\n+;; True if OP is a register operand, or a 14-bit immediate operand.\n (define_predicate \"gr_reg_or_14bit_operand\"\n   (ior (match_operand 0 \"gr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_I (INTVAL (op))\"))))\n \n-;;  True if OP is a register operand, or a 22 bit immediate operand.\n+;;  True if OP is a register operand, or a 22-bit immediate operand.\n (define_predicate \"gr_reg_or_22bit_operand\"\n   (ior (match_operand 0 \"gr_register_operand\")\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_J (INTVAL (op))\"))))\n \n-;; True if OP is a 7 bit immediate operand.\n+;; True if OP is a 7-bit immediate operand.\n (define_predicate \"dshift_count_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) >= 0 && INTVAL (op) < 128\")))\n \n-;; True if OP is a 6 bit immediate operand.\n+;; True if OP is a 6-bit immediate operand.\n (define_predicate \"shift_count_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"CONST_OK_FOR_M (INTVAL (op))\")))\n \n-;; True if OP-1 is a 6 bit immediate operand, used in extr instruction.\n+;; True if OP-1 is a 6-bit immediate operand, used in extr instruction.\n (define_predicate \"extr_len_operand\"\n   (and (match_code \"const_int\")\n        (match_test \"CONST_OK_FOR_M (INTVAL (op) - 1)\")))\n \n-;; True if OP is a 5 bit immediate operand.\n+;; True if OP is a 5-bit immediate operand.\n (define_predicate \"shift_32bit_count_operand\"\n    (and (match_code \"const_int\")\n         (match_test \"INTVAL (op) >= 0 && INTVAL (op) < 32\")))"}, {"sha": "5e93d4cd2d9d90be1244cd5d41edaf1a0984e6e4", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27a9b99d0819b323949c2f066ef56ce693bc4a42/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=27a9b99d0819b323949c2f066ef56ce693bc4a42", "patch": "@@ -84,8 +84,8 @@ do {\t\t\t\t\t\t\\\n #define DBX_REGISTER_NUMBER(REGNO) \\\n   ia64_dbx_register_number(REGNO)\n \n-/* Things that svr4.h defines to the wrong type, because it assumes 32 bit\n-   ints and 32 bit longs.  */\n+/* Things that svr4.h defines to the wrong type, because it assumes 32-bit\n+   ints and 32-bit longs.  */\n \n #undef SIZE_TYPE\n #define SIZE_TYPE \"long unsigned int\""}]}