{"sha": "cbc75e6222900e5247774843699eea0c41c41cc8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JjNzVlNjIyMjkwMGU1MjQ3Nzc0ODQzNjk5ZWVhMGM0MWM0MWNjOA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2006-04-03T17:08:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2006-04-03T17:08:42Z"}, "message": "tree-ssa-dom.c (propagate_rhs_into_lhs): Avoid useless folding and operand scanning in some common cases.\n\n\n        * tree-ssa-dom.c (propagate_rhs_into_lhs): Avoid useless folding\n        and operand scanning in some common cases.\n\nFrom-SVN: r112642", "tree": {"sha": "84dc8a6be3eb377b00a9178a3c11bd830efbe958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84dc8a6be3eb377b00a9178a3c11bd830efbe958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbc75e6222900e5247774843699eea0c41c41cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc75e6222900e5247774843699eea0c41c41cc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc75e6222900e5247774843699eea0c41c41cc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc75e6222900e5247774843699eea0c41c41cc8/comments", "author": null, "committer": null, "parents": [{"sha": "e47247850c490308bdc8986838a4005d4ce0ddf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e47247850c490308bdc8986838a4005d4ce0ddf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e47247850c490308bdc8986838a4005d4ce0ddf0"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "b264035e7c7a9344dd0d8f8a1e1ac82e13076f1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc75e6222900e5247774843699eea0c41c41cc8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc75e6222900e5247774843699eea0c41c41cc8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbc75e6222900e5247774843699eea0c41c41cc8", "patch": "@@ -1,3 +1,8 @@\n+2006-04-03  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Avoid useless folding\n+\tand operand scanning in some common cases.\n+\n 2006-04-03  Paolo Bonzini  <bonzini@gnu.org>\n \t    Dale Johannesen  <dalej@apple.com>\n "}, {"sha": "45034dd2ce79dcd90f0a654cb5979a6fe7618608", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 45, "deletions": 10, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbc75e6222900e5247774843699eea0c41c41cc8/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbc75e6222900e5247774843699eea0c41c41cc8/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=cbc75e6222900e5247774843699eea0c41c41cc8", "patch": "@@ -2155,10 +2155,46 @@ propagate_rhs_into_lhs (tree stmt, tree lhs, tree rhs, bitmap interesting_names)\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n \n-\t  /* Propagate, fold and update the statement.  Note this may\n-\t     expose new const/copy propagation opportunities as well\n-\t     collapse control statements.  */\n+\t  /* Propagate the RHS into this use of the LHS.  */\n \t  propagate_value (use_p, rhs);\n+\n+\t  /* Special cases to avoid useless calls into the folding\n+\t     routines, operand scanning, etc.\n+\n+\t     First, propagation into a PHI may cause the PHI to become\n+\t     a degenerate, so mark the PHI as interesting.  No other\n+\t     actions are necessary.\n+\n+\t     Second, if we're propagating a virtual operand and the\n+\t     propagation does not change the underlying _DECL node for\n+\t     the virtual operand, then no further actions are necessary.  */\n+\t  if (TREE_CODE (use_stmt) == PHI_NODE\n+\t      || (! is_gimple_reg (lhs)\n+\t\t  && TREE_CODE (rhs) == SSA_NAME\n+\t\t  && SSA_NAME_VAR (lhs) == SSA_NAME_VAR (rhs)))\n+\t    {\n+\t      /* Dump details.  */\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"    Updated statement:\");\n+\t\t  print_generic_expr (dump_file, use_stmt, dump_flags);\n+\t\t  fprintf (dump_file, \"\\n\");\n+\t\t}\n+\n+\t      /* Propagation into a PHI may expose new degenerate PHIs,\n+\t\t so mark the result of the PHI as interesting.  */\n+\t      if (TREE_CODE (use_stmt) == PHI_NODE)\n+\t\t{\n+\t\t  tree result = get_lhs_or_phi_result (use_stmt);\n+\t\t  bitmap_set_bit (interesting_names, SSA_NAME_VERSION (result));\n+\t\t}\n+\t      continue;\n+\t    }\n+\n+\t  /* From this point onward we are propagating into a \n+\t     real statement.  Folding may (or may not) be possible,\n+\t     we may expose new operands, expose dead EH edges,\n+\t     etc.  */\n \t  fold_stmt_inplace (use_stmt);\n \n \t  /* Sometimes propagation can expose new operands to the\n@@ -2189,13 +2225,12 @@ propagate_rhs_into_lhs (tree stmt, tree lhs, tree rhs, bitmap interesting_names)\n \t\tfprintf (dump_file, \"  Flagged to clear EH edges.\\n\");\n \t    }\n \n-\t  /* Propagation may expose new degenerate PHIs or\n-\t     trivial copy/constant propagation opportunities.  */\n-\t  if (TREE_CODE (use_stmt) == PHI_NODE\n-\t      || (TREE_CODE (use_stmt) == MODIFY_EXPR\n-\t\t  && TREE_CODE (TREE_OPERAND (use_stmt, 0)) == SSA_NAME\n-\t\t  && (TREE_CODE (TREE_OPERAND (use_stmt, 1)) == SSA_NAME\n-\t\t      || is_gimple_min_invariant (TREE_OPERAND (use_stmt, 1)))))\n+\t  /* Propagation may expose new trivial copy/constant propagation\n+\t     opportunities.  */\n+\t  if (TREE_CODE (use_stmt) == MODIFY_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (use_stmt, 0)) == SSA_NAME\n+\t      && (TREE_CODE (TREE_OPERAND (use_stmt, 1)) == SSA_NAME\n+\t\t  || is_gimple_min_invariant (TREE_OPERAND (use_stmt, 1))))\n \t    {\n \t      tree result = get_lhs_or_phi_result (use_stmt);\n \t      bitmap_set_bit (interesting_names, SSA_NAME_VERSION (result));"}]}