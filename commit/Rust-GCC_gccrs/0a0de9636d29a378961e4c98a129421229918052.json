{"sha": "0a0de9636d29a378961e4c98a129421229918052", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwZGU5NjM2ZDI5YTM3ODk2MWU0Yzk4YTEyOTQyMTIyOTkxODA1Mg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-12T20:53:49Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-02-12T20:53:49Z"}, "message": "PR middle-end/93646 - confusing -Wstringop-truncation on strncat where -Wstringop-overflow is expected\n\ngcc/ChangeLog:\n\n\tPR middle-end/93646\n\t* tree-ssa-strlen.c (handle_builtin_stxncpy): Rename...\n\t(handle_builtin_stxncpy_strncat): ...to this.  Change first argument.\n\tIssue only -Wstringop-overflow strncat, never -Wstringop-truncation.\n\t(strlen_check_and_optimize_call): Adjust callee name.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/93646\n\t* gcc.dg/Wstringop-overflow-31.c: New test.", "tree": {"sha": "72425aa1d84b0615bc2cade753c1030ec7aff55e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72425aa1d84b0615bc2cade753c1030ec7aff55e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a0de9636d29a378961e4c98a129421229918052", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0de9636d29a378961e4c98a129421229918052", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0de9636d29a378961e4c98a129421229918052", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0de9636d29a378961e4c98a129421229918052/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37462a131c528d0980915d98567361aa9396b030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37462a131c528d0980915d98567361aa9396b030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37462a131c528d0980915d98567361aa9396b030"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "3332f56527ec8d2942dee7f78df7d25a1f06eba0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0de9636d29a378961e4c98a129421229918052/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0de9636d29a378961e4c98a129421229918052/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a0de9636d29a378961e4c98a129421229918052", "patch": "@@ -1,3 +1,11 @@\n+2020-02-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/93646\n+\t* tree-ssa-strlen.c (handle_builtin_stxncpy): Rename...\n+\t(handle_builtin_stxncpy_strncat): ...to this.  Change first argument.\n+\tIssue only -Wstringop-overflow strncat, never -Wstringop-truncation.\n+\t(strlen_check_and_optimize_call): Adjust callee name.\n+\n 2020-02-12  Jeff Law  <law@redhat.com>\n \n \t* config/h8300/h8300.md (comparison shortening peepholes): Drop"}, {"sha": "c87281281d76ecc4908eec1400abe5329f5a21be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0de9636d29a378961e4c98a129421229918052/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0de9636d29a378961e4c98a129421229918052/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0a0de9636d29a378961e4c98a129421229918052", "patch": "@@ -1,3 +1,8 @@\n+2020-02-12  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/93646\n+\t* gcc.dg/Wstringop-overflow-31.c: New test.\n+\n 2020-02-12  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \tPR rtl-optimization/93565"}, {"sha": "24be256a54784760d3b1db7555eb881ea394a1b1", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-31.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0de9636d29a378961e4c98a129421229918052/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0de9636d29a378961e4c98a129421229918052/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-31.c?ref=0a0de9636d29a378961e4c98a129421229918052", "patch": "@@ -0,0 +1,40 @@\n+/* PR middle-end/93646 - confusing -Wstringop-truncation on strncat where\n+   -Wstringop-overflow is expected\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+extern __SIZE_TYPE__ strlen (const char*);\n+extern char* strncat (char*, const char*, __SIZE_TYPE__);\n+\n+\n+char a[4];\n+\n+\n+void f0 (char *d, const char *s)\n+{\n+  strncat (d, s, strlen (s));   // { dg-warning \"specified bound depends on the length of the source argument\" }\n+  /* { dg-message \"function 'f0'.*inlined from 'f1'\" \"inlining stack\" { target *-*-* } 0 }  */\n+\n+  // Prevent f0 from being replaced by g0.\n+  *d = 'f';\n+}\n+\n+void f1 (const char *s)\n+{\n+  f0 (a, s);\n+}\n+\n+\n+static void g0 (char *d, const char *s)\n+{\n+  strncat (d, s, strlen (s));   // { dg-warning \"specified bound 3 equals source length\" }\n+  /* { dg-message \"function 'g0'.*inlined from 'g1'\" \"inlining stack\" { target *-*-* } 0 }  */\n+\n+  // Prevent g0 from being replaced by f0.\n+  *d = 'g';\n+}\n+\n+void g1 (void)\n+{\n+  g0 (a, \"123\");\n+}"}, {"sha": "9a88a85b07c056a37a18ee12a8201c5659bc8037", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0de9636d29a378961e4c98a129421229918052/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0de9636d29a378961e4c98a129421229918052/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=0a0de9636d29a378961e4c98a129421229918052", "patch": "@@ -192,7 +192,7 @@ struct laststmt_struct\n } laststmt;\n \n static int get_stridx_plus_constant (strinfo *, unsigned HOST_WIDE_INT, tree);\n-static void handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *);\n+static void handle_builtin_stxncpy_strncat (bool, gimple_stmt_iterator *);\n \n /* Sets MINMAX to either the constant value or the range VAL is in\n    and returns either the constant value or VAL on success or null\n@@ -2876,10 +2876,10 @@ handle_builtin_strcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi,\n    and if so, issue an appropriate warning.  */\n \n static void\n-handle_builtin_strncat (built_in_function bcode, gimple_stmt_iterator *gsi)\n+handle_builtin_strncat (built_in_function, gimple_stmt_iterator *gsi)\n {\n   /* Same as stxncpy().  */\n-  handle_builtin_stxncpy (bcode, gsi);\n+  handle_builtin_stxncpy_strncat (true, gsi);\n }\n \n /* Return true if LEN depends on a call to strlen(SRC) in an interesting\n@@ -2974,8 +2974,8 @@ is_strlen_related_p (tree src, tree len)\n   return false;\n }\n \n-/* Called by handle_builtin_stxncpy and by gimple_fold_builtin_strncpy\n-   in gimple-fold.c.\n+/* Called by handle_builtin_stxncpy_strncat and by\n+   gimple_fold_builtin_strncpy in gimple-fold.c.\n    Check to see if the specified bound is a) equal to the size of\n    the destination DST and if so, b) if it's immediately followed by\n    DST[CNT - 1] = '\\0'.  If a) holds and b) does not, warn.  Otherwise,\n@@ -3283,13 +3283,14 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n   return false;\n }\n \n-/* Check the arguments to the built-in forms of stpncpy and strncpy for\n-   out-of-bounds offsets or overlapping access, and to see if the size\n-   is derived from calling strlen() on the source argument, and if so,\n-   issue the appropriate warning.  */\n+/* Check the arguments to the built-in forms of stpncpy, strncpy, and\n+   strncat, for out-of-bounds offsets or overlapping access, and to see\n+   if the size is derived from calling strlen() on the source argument,\n+   and if so, issue the appropriate warning.\n+   APPEND_P is true for strncat.  */\n \n static void\n-handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n+handle_builtin_stxncpy_strncat (bool append_p, gimple_stmt_iterator *gsi)\n {\n   if (!strlen_to_stridx)\n     return;\n@@ -3385,7 +3386,8 @@ handle_builtin_stxncpy (built_in_function, gimple_stmt_iterator *gsi)\n      whether its value is known.  Otherwise, issue the more generic\n      -Wstringop-overflow which triggers for LEN arguments that in\n      any meaningful way depend on strlen(SRC).  */\n-  if (sisrc == silen\n+  if (!append_p\n+      && sisrc == silen\n       && is_strlen_related_p (src, len)\n       && warning_at (callloc, OPT_Wstringop_truncation,\n \t\t     \"%G%qD output truncated before terminating nul \"\n@@ -5352,7 +5354,7 @@ strlen_check_and_optimize_call (gimple_stmt_iterator *gsi, bool *zero_write,\n     case BUILT_IN_STPNCPY_CHK:\n     case BUILT_IN_STRNCPY:\n     case BUILT_IN_STRNCPY_CHK:\n-      handle_builtin_stxncpy (DECL_FUNCTION_CODE (callee), gsi);\n+      handle_builtin_stxncpy_strncat (false, gsi);\n       break;\n \n     case BUILT_IN_MEMCPY:"}]}