{"sha": "dc549f34cb94f69b00296c45517a97e6de57ecba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1NDlmMzRjYjk0ZjY5YjAwMjk2YzQ1NTE3YTk3ZTZkZTU3ZWNiYQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@arm.com", "date": "2014-08-04T09:57:49Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-08-04T09:57:49Z"}, "message": "[sched-deps] Generalise usage of macro fusion to work on any two insns.\n\n\t* sched-deps.c (try_group_insn): Generalise macro fusion hook usage\n\tto any two insns.  Update comment.  Rename to sched_macro_fuse_insns.\n\t(sched_analyze_insn): Update use of try_group_insn to\n\tsched_macro_fuse_insns.\n\t* config/i386/i386.c (ix86_macro_fusion_pair_p): Reject 2nd\n\targuments that are not conditional jumps.\n\nCo-Authored-By: Kyrylo Tkachov <kyrylo.tkachov@arm.com>\n\nFrom-SVN: r213551", "tree": {"sha": "33061b27da0df6c3eb72fbac9e0c4b2559787f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33061b27da0df6c3eb72fbac9e0c4b2559787f16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc549f34cb94f69b00296c45517a97e6de57ecba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc549f34cb94f69b00296c45517a97e6de57ecba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc549f34cb94f69b00296c45517a97e6de57ecba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc549f34cb94f69b00296c45517a97e6de57ecba/comments", "author": null, "committer": null, "parents": [{"sha": "bb304287342b02608f8df217b65f2a93f65ae90c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb304287342b02608f8df217b65f2a93f65ae90c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb304287342b02608f8df217b65f2a93f65ae90c"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "e2a17a6db0a49f6354c922ae66ad1cd4eb1979b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc549f34cb94f69b00296c45517a97e6de57ecba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc549f34cb94f69b00296c45517a97e6de57ecba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc549f34cb94f69b00296c45517a97e6de57ecba", "patch": "@@ -1,3 +1,13 @@\n+2014-07-14  Ramana Radhakrishnan <ramana.radhakrishnan@arm.com>\n+            Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* sched-deps.c (try_group_insn): Generalise macro fusion hook usage\n+\tto any two insns.  Update comment.  Rename to sched_macro_fuse_insns.\n+\t(sched_analyze_insn): Update use of try_group_insn to\n+\tsched_macro_fuse_insns.\n+\t* config/i386/i386.c (ix86_macro_fusion_pair_p): Reject 2nd\n+\targuments that are not conditional jumps.\n+\n 2014-08-04 Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* config/i386/driver-i386.c (host_detect_local_cpu): Handle AMD's extended"}, {"sha": "d13e2350176db72d5caf4d9992bd20d353348214", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc549f34cb94f69b00296c45517a97e6de57ecba/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc549f34cb94f69b00296c45517a97e6de57ecba/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dc549f34cb94f69b00296c45517a97e6de57ecba", "patch": "@@ -25808,6 +25808,9 @@ ix86_macro_fusion_pair_p (rtx condgen, rtx condjmp)\n   rtx compare_set = NULL_RTX, test_if, cond;\n   rtx alu_set = NULL_RTX, addr = NULL_RTX;\n \n+  if (!any_condjump_p (condjmp))\n+    return false;\n+\n   if (get_attr_type (condgen) != TYPE_TEST\n       && get_attr_type (condgen) != TYPE_ICMP\n       && get_attr_type (condgen) != TYPE_INCDEC"}, {"sha": "51c1a0114968074b05e0fe0b831bd46f5dd6a5c8", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc549f34cb94f69b00296c45517a97e6de57ecba/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc549f34cb94f69b00296c45517a97e6de57ecba/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=dc549f34cb94f69b00296c45517a97e6de57ecba", "patch": "@@ -2821,35 +2821,42 @@ sched_analyze_2 (struct deps_desc *deps, rtx x, rtx insn)\n     sched_deps_info->finish_rhs ();\n }\n \n-/* Try to group comparison and the following conditional jump INSN if\n-   they're already adjacent. This is to prevent scheduler from scheduling\n-   them apart.  */\n+/* Try to group two fuseable insns together to prevent scheduler\n+   from scheduling them apart.  */\n \n static void\n-try_group_insn (rtx insn)\n+sched_macro_fuse_insns (rtx insn)\n {\n-  unsigned int condreg1, condreg2;\n-  rtx cc_reg_1;\n   rtx prev;\n \n-  if (!any_condjump_p (insn))\n-    return;\n+  if (any_condjump_p (insn))\n+    {\n+      unsigned int condreg1, condreg2;\n+      rtx cc_reg_1;\n+      targetm.fixed_condition_code_regs (&condreg1, &condreg2);\n+      cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n+      prev = prev_nonnote_nondebug_insn (insn);\n+      if (!reg_referenced_p (cc_reg_1, PATTERN (insn))\n+          || !prev\n+          || !modified_in_p (cc_reg_1, prev))\n+        return;\n+    }\n+  else\n+    {\n+      rtx insn_set = single_set (insn);\n \n-  targetm.fixed_condition_code_regs (&condreg1, &condreg2);\n-  cc_reg_1 = gen_rtx_REG (CCmode, condreg1);\n-  prev = prev_nonnote_nondebug_insn (insn);\n-  if (!reg_referenced_p (cc_reg_1, PATTERN (insn))\n-      || !prev\n-      || !modified_in_p (cc_reg_1, prev))\n-    return;\n+      prev = prev_nonnote_nondebug_insn (insn);\n+      if (!prev\n+          || !insn_set\n+          || !single_set (prev)\n+          || !modified_in_p (SET_DEST (insn_set), prev))\n+        return;\n \n-  /* Different microarchitectures support macro fusions for different\n-     combinations of insn pairs.  */\n-  if (!targetm.sched.macro_fusion_pair_p\n-      || !targetm.sched.macro_fusion_pair_p (prev, insn))\n-    return;\n+    }\n+\n+  if (targetm.sched.macro_fusion_pair_p (prev, insn))\n+    SCHED_GROUP_P (insn) = 1;\n \n-  SCHED_GROUP_P (insn) = 1;\n }\n \n /* Analyze an INSN with pattern X to find all dependencies.  */\n@@ -2878,7 +2885,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n   /* Group compare and branch insns for macro-fusion.  */\n   if (targetm.sched.macro_fusion_p\n       && targetm.sched.macro_fusion_p ())\n-    try_group_insn (insn);\n+    sched_macro_fuse_insns (insn);\n \n   if (may_trap_p (x))\n     /* Avoid moving trapping instructions across function calls that might"}]}