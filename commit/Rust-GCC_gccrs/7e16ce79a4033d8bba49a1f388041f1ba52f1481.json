{"sha": "7e16ce79a4033d8bba49a1f388041f1ba52f1481", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxNmNlNzlhNDAzM2Q4YmJhNDlhMWYzODgwNDFmMWJhNTJmMTQ4MQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-09-15T16:31:35Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-09-15T16:31:35Z"}, "message": "re PR tree-optimization/77503 (ICE in vect_transform_stmt compiling postgresql)\n\n\tPR tree-optimization/77503\n\t* tree-vect-loop.c (vectorizable_reduction): Record reduction\n\tcode for CONST_COND_REDUCTION at analysis stage and use it at\n\ttransform stage.\n\t* tree-vectorizer.h (struct _stmt_vec_info): New field.\n\t(STMT_VINFO_VEC_CONST_COND_REDUC_CODE): New macro.\n\t* tree-vect-stmts.c (new_stmt_vec_info): Initialize above new\n\tfield.\n\n\tgcc/testsuite\n\t* gcc.dg/vect/pr77503.c: New test.\n\nFrom-SVN: r240166", "tree": {"sha": "64c5356862fbe772dbead17cbce71cf117afdcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c5356862fbe772dbead17cbce71cf117afdcd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e16ce79a4033d8bba49a1f388041f1ba52f1481", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e16ce79a4033d8bba49a1f388041f1ba52f1481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e16ce79a4033d8bba49a1f388041f1ba52f1481", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e16ce79a4033d8bba49a1f388041f1ba52f1481/comments", "author": null, "committer": null, "parents": [{"sha": "7c05f5c46d5b0db80d65bec5f14a893d0e939c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c05f5c46d5b0db80d65bec5f14a893d0e939c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c05f5c46d5b0db80d65bec5f14a893d0e939c85"}], "stats": {"total": 64, "additions": 57, "deletions": 7}, "files": [{"sha": "63651f74fbd9543193df66fe5a8d0d7086c041bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e16ce79a4033d8bba49a1f388041f1ba52f1481", "patch": "@@ -1,3 +1,14 @@\n+2016-09-15  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/77503\n+\t* tree-vect-loop.c (vectorizable_reduction): Record reduction\n+\tcode for CONST_COND_REDUCTION at analysis stage and use it at\n+\ttransform stage.\n+\t* tree-vectorizer.h (struct _stmt_vec_info): New field.\n+\t(STMT_VINFO_VEC_CONST_COND_REDUC_CODE): New macro.\n+\t* tree-vect-stmts.c (new_stmt_vec_info): Initialize above new\n+\tfield.\n+\n 2016-09-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77544"}, {"sha": "fdd2acdcca762ad574014417b11a3355748c4530", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7e16ce79a4033d8bba49a1f388041f1ba52f1481", "patch": "@@ -1,3 +1,8 @@\n+2016-09-15  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/77503\n+\t* gcc.dg/vect/pr77503.c: New test.\n+\n 2016-09-15  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/77544"}, {"sha": "609e7fb5fd76f7ff16a13540e4b6df86bfe27ff8", "filename": "gcc/testsuite/gcc.dg/vect/pr77503.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr77503.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr77503.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr77503.c?ref=7e16ce79a4033d8bba49a1f388041f1ba52f1481", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_condition } */\n+/* { dg-skip-if \"need vect_max_reduc support\" { ! vect_max_reduc } } */\n+\n+extern void d(void);\n+void a() {\n+  char *b;\n+  char c = 0;\n+  for (; b < (char *)a; b++) {\n+    if (*b)\n+      c = 1;\n+    *b = 0;\n+  }\n+  if (c)\n+    d();\n+}\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "58f3456fe407e2da9049880b8348154ebeb9cc86", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=7e16ce79a4033d8bba49a1f388041f1ba52f1481", "patch": "@@ -5438,7 +5438,7 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   tree def0, def1, tem, op1 = NULL_TREE;\n   bool first_p = true;\n   tree cr_index_scalar_type = NULL_TREE, cr_index_vector_type = NULL_TREE;\n-  tree cond_reduc_val = NULL_TREE, const_cond_cmp = NULL_TREE;\n+  tree cond_reduc_val = NULL_TREE;\n \n   /* In case of reduction chain we switch to the first stmt in the chain, but\n      we don't update STMT_INFO, since only the last stmt is marked as reduction\n@@ -5645,7 +5645,19 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t    = INTEGER_INDUC_COND_REDUCTION;\n \t}\n \n-      if (cond_reduc_dt == vect_constant_def)\n+      /* Loop peeling modifies initial value of reduction PHI, which\n+\t makes the reduction stmt to be transformed different to the\n+\t original stmt analyzed.  We need to record reduction code for\n+\t CONST_COND_REDUCTION type reduction at analyzing stage, thus\n+\t it can be used directly at transform stage.  */\n+      if (STMT_VINFO_VEC_CONST_COND_REDUC_CODE (stmt_info) == MAX_EXPR\n+\t  || STMT_VINFO_VEC_CONST_COND_REDUC_CODE (stmt_info) == MIN_EXPR)\n+\t{\n+\t  /* Also set the reduction type to CONST_COND_REDUCTION.  */\n+\t  gcc_assert (cond_reduc_dt == vect_constant_def);\n+\t  STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) = CONST_COND_REDUCTION;\n+\t}\n+      else if (cond_reduc_dt == vect_constant_def)\n \t{\n \t  enum vect_def_type cond_initial_dt;\n \t  gimple *def_stmt = SSA_NAME_DEF_STMT (ops[reduc_index]);\n@@ -5667,7 +5679,9 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t\t    dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t\t     \"condition expression based on \"\n \t\t\t\t     \"compile time constant.\\n\");\n-\t\t  const_cond_cmp = e;\n+\t\t  /* Record reduction code at analysis stage.  */\n+\t\t  STMT_VINFO_VEC_CONST_COND_REDUC_CODE (stmt_info)\n+\t\t    = integer_onep (e) ? MAX_EXPR : MIN_EXPR;\n \t\t  STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n \t\t    = CONST_COND_REDUCTION;\n \t\t}\n@@ -5821,10 +5835,8 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n \t we want to base our reduction around.  */\n       if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info) == CONST_COND_REDUCTION)\n \t{\n-\t  gcc_assert (const_cond_cmp != NULL_TREE);\n-\t  gcc_assert (integer_onep (const_cond_cmp)\n-\t\t      || integer_zerop (const_cond_cmp));\n-\t  orig_code = integer_onep (const_cond_cmp) ? MAX_EXPR : MIN_EXPR;\n+\t  orig_code = STMT_VINFO_VEC_CONST_COND_REDUC_CODE (stmt_info);\n+\t  gcc_assert (orig_code == MAX_EXPR || orig_code == MIN_EXPR);\n \t}\n       else if (STMT_VINFO_VEC_REDUCTION_TYPE (stmt_info)\n \t\t == INTEGER_INDUC_COND_REDUCTION)"}, {"sha": "6a6167ba50431c2f8ed3704c0df94f161a9c6c12", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7e16ce79a4033d8bba49a1f388041f1ba52f1481", "patch": "@@ -8563,6 +8563,7 @@ new_stmt_vec_info (gimple *stmt, vec_info *vinfo)\n   STMT_VINFO_PATTERN_DEF_SEQ (res) = NULL;\n   STMT_VINFO_DATA_REF (res) = NULL;\n   STMT_VINFO_VEC_REDUCTION_TYPE (res) = TREE_CODE_REDUCTION;\n+  STMT_VINFO_VEC_CONST_COND_REDUC_CODE (res) = ERROR_MARK;\n \n   STMT_VINFO_DR_BASE_ADDRESS (res) = NULL;\n   STMT_VINFO_DR_OFFSET (res) = NULL;"}, {"sha": "240af069a51fb18d196745217279046fe08f19e1", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e16ce79a4033d8bba49a1f388041f1ba52f1481/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=7e16ce79a4033d8bba49a1f388041f1ba52f1481", "patch": "@@ -657,6 +657,9 @@ typedef struct _stmt_vec_info {\n   /* For reduction loops, this is the type of reduction.  */\n   enum vect_reduction_type v_reduc_type;\n \n+  /* For CONST_COND_REDUCTION, record the reduc code.  */\n+  enum tree_code const_cond_reduc_code;\n+\n   /* The number of scalar stmt references from active SLP instances.  */\n   unsigned int num_slp_uses;\n } *stmt_vec_info;\n@@ -711,6 +714,7 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_MEMORY_ACCESS_TYPE(S)   (S)->memory_access_type\n #define STMT_VINFO_SIMD_LANE_ACCESS_P(S)   (S)->simd_lane_access_p\n #define STMT_VINFO_VEC_REDUCTION_TYPE(S)   (S)->v_reduc_type\n+#define STMT_VINFO_VEC_CONST_COND_REDUC_CODE(S) (S)->const_cond_reduc_code\n \n #define STMT_VINFO_DR_BASE_ADDRESS(S)      (S)->dr_base_address\n #define STMT_VINFO_DR_INIT(S)              (S)->dr_init"}]}