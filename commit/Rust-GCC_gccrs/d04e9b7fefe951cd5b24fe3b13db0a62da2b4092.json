{"sha": "d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA0ZTliN2ZlZmU5NTFjZDViMjRmZTNiMTNkYjBhNjJkYTJiNDA5Mg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-06-29T11:48:53Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-06-29T11:48:53Z"}, "message": "re PR libstdc++/22131 (std::num_get fails for input with invalid groups)\n\n2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/22131\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int,\n\tnum_get<>::_M_extract_float, money_get<>::_M_extract):\n\tAdjust to assign the result also when digit grouping is\n\twrong (but the grammar is correct), as per 22.2.2.1.2, p11-12\n\t(NB: consistently for money_get too).\n\t* config/locale/generic/c_locale.cc (__convert_from_v): Do\n\tnot check ios_base::failbit at the outset.\n\t* config/locale/gnu/c_locale.cc: Likewise.\n\t* testsuite/22_locale/money_get/get/char/22131.cc: New.\n\t* testsuite/22_locale/money_get/get/wchar_t/22131.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/22131.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/wchar_t/22131.cc: Likewise.\n\t* testsuite/22_locale/num_get/get/char/12.cc: Adjust.\n\t* testsuite/22_locale/num_get/get/wchar_t/12.cc: Likewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/07.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/07.cc:\n\tLikewise.\n\nFrom-SVN: r101416", "tree": {"sha": "2b6cb424d6ec5f62b07742a58556da2ccfca63d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b6cb424d6ec5f62b07742a58556da2ccfca63d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/comments", "author": null, "committer": null, "parents": [{"sha": "43b3a5b10fe5e139b2fcf763022843f83ba07f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b3a5b10fe5e139b2fcf763022843f83ba07f2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b3a5b10fe5e139b2fcf763022843f83ba07f2e"}], "stats": {"total": 719, "additions": 577, "deletions": 142}, "files": [{"sha": "e0510128968f1a94aa8fd13b35256a70b142ae5a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,3 +1,25 @@\n+2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/22131\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_int,\n+\tnum_get<>::_M_extract_float, money_get<>::_M_extract):\n+\tAdjust to assign the result also when digit grouping is\n+\twrong (but the grammar is correct), as per 22.2.2.1.2, p11-12\n+\t(NB: consistently for money_get too).\n+\t* config/locale/generic/c_locale.cc (__convert_from_v): Do\n+\tnot check ios_base::failbit at the outset.\n+\t* config/locale/gnu/c_locale.cc: Likewise.\n+\t* testsuite/22_locale/money_get/get/char/22131.cc: New.\n+\t* testsuite/22_locale/money_get/get/wchar_t/22131.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/22131.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/wchar_t/22131.cc: Likewise.\n+\t* testsuite/22_locale/num_get/get/char/12.cc: Adjust.\n+\t* testsuite/22_locale/num_get/get/wchar_t/12.cc: Likewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/char/07.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/07.cc:\n+\tLikewise.\n+\n 2005-06-28  Paul Brook  <paul@codesourcery.com>\n \n \t* acinclude.m4 (GLIBCXX_ENABLE_SJLJ_EXCEPTIONS): Check for"}, {"sha": "eee8e067cd371da1620e5c89fd6336f8d348c11f", "filename": "libstdc++-v3/config/locale/generic/c_locale.cc", "status": "modified", "additions": 54, "deletions": 63, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,6 +1,7 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -50,93 +51,83 @@ namespace std\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n \t\t   const __c_locale&) \t      \n     {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  // Assumes __s formatted for \"C\" locale.\n-\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n-\t  setlocale(LC_ALL, \"C\");\n-\t  char* __sanity;\n-\t  errno = 0;\n+      // Assumes __s formatted for \"C\" locale.\n+      errno = 0;\n+      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      setlocale(LC_ALL, \"C\");\n+      char* __sanity;\n #if defined(_GLIBCXX_HAVE_STRTOF)\n-\t  float __f = strtof(__s, &__sanity);\n+      float __f = strtof(__s, &__sanity);\n #else\n-\t  double __d = strtod(__s, &__sanity);\n-\t  float __f = static_cast<float>(__d);\n+      double __d = strtod(__s, &__sanity);\n+      float __f = static_cast<float>(__d);\n #ifdef _GLIBCXX_HAVE_FINITEF\n-\t  if (!finitef (__f))\n-\t    errno = ERANGE;\n+      if (!finitef (__f))\n+\terrno = ERANGE;\n #elif defined (_GLIBCXX_HAVE_FINITE)\n-\t  if (!finite (static_cast<double> (__f)))\n-\t    errno = ERANGE;\n+      if (!finite (static_cast<double> (__f)))\n+\terrno = ERANGE;\n #elif defined (_GLIBCXX_HAVE_ISINF)\n-\t  if (isinf (static_cast<double> (__f)))\n-\t    errno = ERANGE;\n+      if (isinf (static_cast<double> (__f)))\n+\terrno = ERANGE;\n #else\n-\t  if (fabs(__d) > numeric_limits<float>::max())\n-\t    errno = ERANGE;\n+      if (fabs(__d) > numeric_limits<float>::max())\n+\terrno = ERANGE;\n #endif\n #endif\n-          if (__sanity != __s && errno != ERANGE)\n-\t    __v = __f;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t  setlocale(LC_ALL, __old);\n-\t  free(__old);\n-\t}\n+      if (__sanity != __s && errno != ERANGE)\n+\t__v = __f;\n+      else\n+\t__err |= ios_base::failbit;\n+      setlocale(LC_ALL, __old);\n+      free(__old);\n     }\n \n   template<>\n     void\n     __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n \t\t   const __c_locale&) \n     {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  // Assumes __s formatted for \"C\" locale.\n-\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n-\t  setlocale(LC_ALL, \"C\");\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  double __d = strtod(__s, &__sanity);\n-          if (__sanity != __s && errno != ERANGE)\n-\t    __v = __d;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t  setlocale(LC_ALL, __old);\n-\t  free(__old);\n-\t}\n+      // Assumes __s formatted for \"C\" locale.\n+      errno = 0;\n+      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      setlocale(LC_ALL, \"C\");\n+      char* __sanity;\n+      double __d = strtod(__s, &__sanity);\n+      if (__sanity != __s && errno != ERANGE)\n+\t__v = __d;\n+      else\n+\t__err |= ios_base::failbit;\n+      setlocale(LC_ALL, __old);\n+      free(__old);\n     }\n \n   template<>\n     void\n     __convert_to_v(const char* __s, long double& __v, \n \t\t   ios_base::iostate& __err, const __c_locale&) \n     {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  // Assumes __s formatted for \"C\" locale.\n-\t  char* __old = strdup(setlocale(LC_ALL, NULL));\n-\t  setlocale(LC_ALL, \"C\");\n+      // Assumes __s formatted for \"C\" locale.\n+      errno = 0;\n+      char* __old = strdup(setlocale(LC_ALL, NULL));\n+      setlocale(LC_ALL, \"C\");\n #if defined(_GLIBCXX_HAVE_STRTOLD)\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  long double __ld = strtold(__s, &__sanity);\n-          if (__sanity != __s && errno != ERANGE)\n-\t    __v = __ld;\n+      char* __sanity;\n+      long double __ld = strtold(__s, &__sanity);\n+      if (__sanity != __s && errno != ERANGE)\n+\t__v = __ld;\n #else\n-\t  typedef char_traits<char>::int_type int_type;\n-\t  long double __ld;\n-\t  errno = 0;\n-\t  int __p = sscanf(__s, \"%Lf\", &__ld);\n-\t  if (__p && static_cast<int_type>(__p) != char_traits<char>::eof()\n-\t      && errno != ERANGE)\n-\t    __v = __ld;\n+      typedef char_traits<char>::int_type int_type;\n+      long double __ld;\n+      int __p = sscanf(__s, \"%Lf\", &__ld);\n+      if (__p && static_cast<int_type>(__p) != char_traits<char>::eof()\n+\t  && errno != ERANGE)\n+\t__v = __ld;\n #endif\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t  setlocale(LC_ALL, __old);\n-\t  free(__old);\n-\t}\n+      else\n+\t__err |= ios_base::failbit;\n+      setlocale(LC_ALL, __old);\n+      free(__old);\n     }\n \n   void"}, {"sha": "c83aa56f6ea60e3b3e6ac8dc4b9316d8def8d81e", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 23, "deletions": 31, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,6 +1,7 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 \n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,50 +47,41 @@ namespace std\n     __convert_to_v(const char* __s, float& __v, ios_base::iostate& __err, \n \t\t   const __c_locale& __cloc)\n     {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  float __f = __strtof_l(__s, &__sanity, __cloc);\n-          if (__sanity != __s && errno != ERANGE)\n-\t    __v = __f;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n+      char* __sanity;\n+      errno = 0;\n+      float __f = __strtof_l(__s, &__sanity, __cloc);\n+      if (__sanity != __s && errno != ERANGE)\n+\t__v = __f;\n+      else\n+\t__err |= ios_base::failbit;\n     }\n \n   template<>\n     void\n     __convert_to_v(const char* __s, double& __v, ios_base::iostate& __err, \n \t\t   const __c_locale& __cloc)\n     {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  double __d = __strtod_l(__s, &__sanity, __cloc);\n-          if (__sanity != __s && errno != ERANGE)\n-\t    __v = __d;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n+      char* __sanity;\n+      errno = 0;\n+      double __d = __strtod_l(__s, &__sanity, __cloc);\n+      if (__sanity != __s && errno != ERANGE)\n+\t__v = __d;\n+      else\n+\t__err |= ios_base::failbit;\n     }\n \n   template<>\n     void\n     __convert_to_v(const char* __s, long double& __v, ios_base::iostate& __err,\n \t\t   const __c_locale& __cloc)\n     {\n-      if (!(__err & ios_base::failbit))\n-\t{\n-\t  char* __sanity;\n-\t  errno = 0;\n-\t  long double __ld = __strtold_l(__s, &__sanity, __cloc);\n-          if (__sanity != __s && errno != ERANGE)\n-\t    __v = __ld;\n-\t  else\n-\t    __err |= ios_base::failbit;\n-\t}\n+      char* __sanity;\n+      errno = 0;\n+      long double __ld = __strtold_l(__s, &__sanity, __cloc);\n+      if (__sanity != __s && errno != ERANGE)\n+\t__v = __ld;\n+      else\n+\t__err |= ios_base::failbit;\n     }\n \n   void"}, {"sha": "7987e678ebba476e1ff98f61d469caf521665689", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -306,6 +306,7 @@ namespace std\n \n       // Next, look for leading zeros.\n       bool __found_mantissa = false;\n+      int __sep_pos = 0;\n       while (!__testeof)\n \t{\n \t  if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep\n@@ -318,6 +319,8 @@ namespace std\n \t\t  __xtrc += '0';\n \t\t  __found_mantissa = true;\n \t\t}\n+\t      ++__sep_pos;\n+\n \t      if (++__beg != __end)\n \t\t__c = *__beg;\n \t      else\n@@ -333,7 +336,6 @@ namespace std\n       string __found_grouping;\n       if (__lc->_M_use_grouping)\n \t__found_grouping.reserve(32);\n-      int __sep_pos = 0;\n       const char_type* __q;\n       const char_type* __lit_zero = __lit + __num_base::_S_izero;\n       while (!__testeof)\n@@ -353,7 +355,9 @@ namespace std\n \t\t    }\n \t\t  else\n \t\t    {\n-\t\t      __err |= ios_base::failbit;\n+\t\t      // NB: __convert_to_v will not assign __v and will\n+\t\t      // set the failbit.\n+\t\t      __xtrc.clear();\n \t\t      break;\n \t\t    }\n \t\t}\n@@ -383,7 +387,7 @@ namespace std\n \t    }\n \t  else if ((__c == __lit[__num_base::_S_ie] \n \t\t    || __c == __lit[__num_base::_S_iE])\n-\t\t   && __found_mantissa && !__found_sci)\n+\t\t   && !__found_sci && __found_mantissa)\n \t    {\n \t      // Scientific notation.\n \t      if (__found_grouping.size() && !__found_dec)\n@@ -500,32 +504,35 @@ namespace std\n \t// Next, look for leading zeros and check required digits\n \t// for base formats.\n \tbool __found_zero = false;\n+\tint __sep_pos = 0;\n \twhile (!__testeof)\n \t  {\n \t    if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep\n \t\t|| __c == __lc->_M_decimal_point)\n \t      break;\n \t    else if (__c == __lit[__num_base::_S_izero] \n \t\t     && (!__found_zero || __base == 10))\n-\t      __found_zero = true;\n-\t    else if (__found_zero)\n \t      {\n-\t\tif (__c == __lit[__num_base::_S_ix] \n-\t\t    || __c == __lit[__num_base::_S_iX])\n+\t\t__found_zero = true;\n+\t\t++__sep_pos;\n+\t\tif (__basefield == 0)\n+\t\t  __base = 8;\n+\t\tif (__base == 8)\n+\t\t  __sep_pos = 0;\n+\t      }\n+\t    else if (__found_zero\n+\t\t     && (__c == __lit[__num_base::_S_ix]\n+\t\t\t || __c == __lit[__num_base::_S_iX]))\n+\t      {\n+\t\tif (__basefield == 0)\n+\t\t  __base = 16;\n+\t\tif (__base == 16)\n \t\t  {\n-\t\t    if (__basefield == 0)\n-\t\t      __base = 16;\n-\t\t    if (__base == 16)\n-\t\t      __found_zero = false;\n-\t\t    else\n-\t\t      break;\n+\t\t    __found_zero = false;\n+\t\t    __sep_pos = 0;\n \t\t  }\n \t\telse\n-\t\t  {\n-\t\t    if (__basefield == 0)\n-\t\t      __base = 8;\n-\t\t    break;\n-\t\t  }\n+\t\t  break;\n \t      }\n \t    else\n \t      break;\n@@ -549,8 +556,7 @@ namespace std\n \tstring __found_grouping;\n \tif (__lc->_M_use_grouping)\n \t  __found_grouping.reserve(32);\n-\tint __sep_pos = 0;\n-\tbool __overflow = false;\n+\tbool __testfail = false;\n \tconst __unsigned_type __max = __negative ?\n \t  -numeric_limits<_ValueT>::min() : numeric_limits<_ValueT>::max();\n \tconst __unsigned_type __smax = __max / __base;\n@@ -572,7 +578,7 @@ namespace std\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    __err |= ios_base::failbit;\n+\t\t    __testfail = true;\n \t\t    break;\n \t\t  }\n \t      }\n@@ -584,11 +590,11 @@ namespace std\n \t\tif (__digit > 15)\n \t\t  __digit -= 6;\n \t\tif (__result > __smax)\n-\t\t  __overflow = true;\n+\t\t  __testfail = true;\n \t\telse\n \t\t  {\n \t\t    __result *= __base;\n-\t\t    __overflow |= __result > __max - __digit;\n+\t\t    __testfail |= __result > __max - __digit;\n \t\t    __result += __digit;\n \t\t    ++__sep_pos;\n \t\t  }\n@@ -616,8 +622,8 @@ namespace std\n \t      __err |= ios_base::failbit;\n \t  }\n \n-\tif (!(__err & ios_base::failbit) && !__overflow\n-\t    && (__sep_pos || __found_zero || __found_grouping.size()))\n+\tif (!__testfail && (__sep_pos || __found_zero \n+\t\t\t    || __found_grouping.size()))\n \t  __v = __negative ? -__result : __result;\n \telse\n \t  __err |= ios_base::failbit;\n@@ -1444,7 +1450,7 @@ namespace std\n \t\tif (!std::__verify_grouping(__lc->_M_grouping,\n \t\t\t\t\t    __lc->_M_grouping_size,\n \t\t\t\t\t    __grouping_tmp))\n-\t\t  __testvalid = false;\n+\t\t  __err |= ios_base::failbit;\n \t      }\n \t    \n \t    // Iff not enough digits were supplied after the decimal-point."}, {"sha": "2bcf42aa4d32a81eeb0068b3ac263c4800821da7", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/22131.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F22131.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F22131.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F22131.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -0,0 +1,83 @@\n+// 2005-06-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io : public std::moneypunct<char, false>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  char_type do_thousands_sep() const { return '#'; }\n+  \n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { symbol, none, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/22131\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> InIt;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  string buffer1(\"00#0#1\");\n+  string buffer2(\"000##1\");\n+\n+  bool intl = false;\n+\n+  InIt iend1, iend2;\n+  ios_base::iostate err1, err2;\n+  string val1, val2;\n+\n+  const money_get<char,InIt>& mg =\n+    use_facet<money_get<char, InIt> >(loc);\n+\n+  istringstream fmt1(buffer1);\n+  fmt1.imbue(loc);\n+  InIt ibeg1(fmt1);\n+  err1 = ios_base::goodbit;\n+  mg.get(ibeg1, iend1, intl, fmt1, err1, val1);\n+  VERIFY( err1 == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( val1 == \"1\" );\n+\n+  istringstream fmt2(buffer2);\n+  fmt2.imbue(loc);\n+  InIt ibeg2(fmt2);\n+  err2 = ios_base::goodbit;\n+  mg.get(ibeg2, iend2, intl, fmt2, err2, val2);\n+  VERIFY( err2 == ios_base::failbit );\n+  VERIFY( *ibeg2 == '#' );\n+  VERIFY( val2 == \"\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "a3faaf8948480b46c0c2d9dd99acedda5f338feb", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/22131.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F22131.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F22131.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F22131.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -0,0 +1,83 @@\n+// 2005-06-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io : public std::moneypunct<wchar_t, false>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  char_type do_thousands_sep() const { return L'#'; }\n+  \n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { symbol, none, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/22131\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> InIt;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  wstring buffer1(L\"00#0#1\");\n+  wstring buffer2(L\"000##1\");\n+\n+  bool intl = false;\n+\n+  InIt iend1, iend2;\n+  ios_base::iostate err1, err2;\n+  wstring val1, val2;\n+\n+  const money_get<wchar_t,InIt>& mg =\n+    use_facet<money_get<wchar_t, InIt> >(loc);\n+\n+  wistringstream fmt1(buffer1);\n+  fmt1.imbue(loc);\n+  InIt ibeg1(fmt1);\n+  err1 = ios_base::goodbit;\n+  mg.get(ibeg1, iend1, intl, fmt1, err1, val1);\n+  VERIFY( err1 == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( val1 == L\"1\" );\n+\n+  wistringstream fmt2(buffer2);\n+  fmt2.imbue(loc);\n+  InIt ibeg2(fmt2);\n+  err2 = ios_base::goodbit;\n+  mg.get(ibeg2, iend2, intl, fmt2, err2, val2);\n+  VERIFY( err2 == ios_base::failbit );\n+  VERIFY( *ibeg2 == L'#' );\n+  VERIFY( val2 == L\"\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "93300d428d2614beab4704bd9ab80cee788bef12", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/12.cc", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F12.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,6 +1,6 @@\n // 2003-12-22  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2003 Free Software Foundation\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,8 +60,9 @@ void test01()\n   long l3 = 1l;\n   long l4 = 63l;\n   double d = 0.0;\n-  double d1 = .4;  \n-  double d2 = .1;\n+  double d1 = .4;\n+  double d2 = 0.0;\n+  double d3 = .1;\n \n   iss1.str(\"+3\");\n   err = ios_base::goodbit;\n@@ -128,6 +129,7 @@ void test01()\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == 'X' );\n+  VERIFY( l == l3 );\n \n   iss2.str(\"000778\");\n   iss2.clear();\n@@ -141,15 +143,15 @@ void test01()\n   iss2.clear();\n   err = ios_base::goodbit;\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n-  VERIFY( err == ios_base::failbit );\n-  VERIFY( *end == 'X' );\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( d == d2 );\n \n   iss2.str(\"-1\");\n   iss2.clear();\n   err = ios_base::goodbit;\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n   VERIFY( err == ios_base::eofbit );\n-  VERIFY( d == d2 );  \n+  VERIFY( d == d3 );  \n }\n \n "}, {"sha": "47e637829979cc6d3128ee06121fa9598a3f58f1", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/22131.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F22131.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F22131.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F22131.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -0,0 +1,126 @@\n+// 2005-06-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct: std::numpunct<char>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  char do_thousands_sep() const { return '#'; }\n+};\n+\n+// libstdc++/22131\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  istringstream iss1, iss2;\n+  iss1.imbue(locale(iss1.getloc(), new Punct));\n+  const num_get<char>& ng1 = use_facet<num_get<char> >(iss1.getloc()); \n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  long l = 0l;\n+  long l1 = 1l;\n+  long l2 = 2l;\n+  long l3 = 3l;\n+  double d = 0.0;\n+  double d1 = 1.0;\n+  double d2 = 2.0;\n+\n+  iss1.str(\"00#0#1\");\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( l == l1 );\n+\n+  iss1.str(\"000##2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == '#' );\n+  VERIFY( l == l1 );\n+\n+  iss1.str(\"0#0#0#2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l2 );\n+\n+  iss1.str(\"00#0#1\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( d == d1 );\n+\n+  iss1.str(\"000##2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == '#' );\n+  VERIFY( d == d1 );\n+\n+  iss1.str(\"0#0#0#2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d2 );\n+\n+  iss1.str(\"0#0\");\n+  iss1.clear();\n+  iss1.unsetf(ios::basefield);\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == '#' );\n+  VERIFY( l == l2 );\n+\n+  iss1.str(\"00#0#3\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l3 );\n+\n+  iss1.str(\"00#02\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( l == l2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "63c38530ab8b8325ed50a9ef57dacc6d774e75fc", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/12.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F12.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,6 +1,6 @@\n // 2003-12-22  Paolo Carlini  <pcarlini@suse.de>\n \n-// Copyright (C) 2003 Free Software Foundation\n+// Copyright (C) 2003, 2004, 2005 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -60,8 +60,9 @@ void test01()\n   long l3 = 1l;\n   long l4 = 63l;\n   double d = 0.0;\n-  double d1 = .4;  \n-  double d2 = .1;\n+  double d1 = .4;\n+  double d2 = 0.0;\n+  double d3 = .1;\n \n   iss1.str(L\"+3\");\n   err = ios_base::goodbit;\n@@ -128,6 +129,7 @@ void test01()\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, l);\n   VERIFY( err == ios_base::failbit );\n   VERIFY( *end == L'X' );\n+  VERIFY( l == l3 );\n \n   iss2.str(L\"000778\");\n   iss2.clear();\n@@ -141,18 +143,17 @@ void test01()\n   iss2.clear();\n   err = ios_base::goodbit;\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n-  VERIFY( err == ios_base::failbit );\n-  VERIFY( *end == L'X' );\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( d == d2 );\n \n   iss2.str(L\"-1\");\n   iss2.clear();\n   err = ios_base::goodbit;\n   end = ng2.get(iss2.rdbuf(), 0, iss2, err, d);\n   VERIFY( err == ios_base::eofbit );\n-  VERIFY( d == d2 );  \n+  VERIFY( d == d3 );  \n }\n \n-\n int main()\n {\n   test01();"}, {"sha": "de7cf71454419f5030cb4cb79a677284d6d29643", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/22131.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F22131.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F22131.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F22131.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -0,0 +1,126 @@\n+// 2005-06-28  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2005 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct Punct: std::numpunct<wchar_t>\n+{\n+  std::string do_grouping() const { return \"\\1\"; }\n+  wchar_t do_thousands_sep() const { return L'#'; }\n+};\n+\n+// libstdc++/22131\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+  \n+  bool test __attribute__((unused)) = true;\n+\n+  wistringstream iss1, iss2;\n+  iss1.imbue(locale(iss1.getloc(), new Punct));\n+  const num_get<wchar_t>& ng1 = use_facet<num_get<wchar_t> >(iss1.getloc());\n+\n+  ios_base::iostate err = ios_base::goodbit;\n+  iterator_type end;\n+  long l = 0l;\n+  long l1 = 1l;\n+  long l2 = 2l;\n+  long l3 = 3l;\n+  double d = 0.0;\n+  double d1 = 1.0;\n+  double d2 = 2.0;\n+\n+  iss1.str(L\"00#0#1\");\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( l == l1 );\n+\n+  iss1.str(L\"000##2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == L'#' );\n+  VERIFY( l == l1 );\n+\n+  iss1.str(L\"0#0#0#2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l2 );\n+\n+  iss1.str(L\"00#0#1\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( d == d1 );\n+\n+  iss1.str(L\"000##2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == L'#' );\n+  VERIFY( d == d1 );\n+\n+  iss1.str(L\"0#0#0#2\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, d);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( d == d2 );\n+\n+  iss1.str(L\"0#0\");\n+  iss1.clear();\n+  iss1.unsetf(ios::basefield);\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::failbit );\n+  VERIFY( *end == L'#' );\n+  VERIFY( l == l2 );\n+\n+  iss1.str(L\"00#0#3\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == ios_base::eofbit );\n+  VERIFY( l == l3 );\n+\n+  iss1.str(L\"00#02\");\n+  iss1.clear();\n+  err = ios_base::goodbit;\n+  end = ng1.get(iss1.rdbuf(), 0, iss1, err, l);\n+  VERIFY( err == (ios_base::eofbit | ios_base::failbit) );\n+  VERIFY( l == l2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ed5940b3cb5d9dfebe3151e6600f1efb7eb4328e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/char/07.cc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fchar%2F07.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,6 +1,7 @@\n // 1999-04-12 bkoz\n \n-// Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2002, 2003, 2004, 2005 \n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -62,7 +63,7 @@ void test07()\n \n   is.clear();\n   is >> h2; \n-  VERIFY( h2 == 0 );\n+  VERIFY( h2 == 1232224 );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n \n@@ -124,8 +125,9 @@ void test07()\n   VERIFY( is.good() );\n \n   is >> h2; \n-  VERIFY( h2 == 0 );\n+  VERIFY( h2 == 1000000 );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  h2 = 0;\n   is.clear();\n \n   is >> h2; \n@@ -134,7 +136,7 @@ void test07()\n   h2 = 0;\n \n   is >> h2; \n-  VERIFY( h2 == 0 );\n+  VERIFY( h2 == 1234567 );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n   is.clear();"}, {"sha": "a18a610dc611429161d22f6de07f7eb26d4b033e", "filename": "libstdc++-v3/testsuite/27_io/basic_istream/extractors_arithmetic/wchar_t/07.cc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F07.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d04e9b7fefe951cd5b24fe3b13db0a62da2b4092/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F07.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istream%2Fextractors_arithmetic%2Fwchar_t%2F07.cc?ref=d04e9b7fefe951cd5b24fe3b13db0a62da2b4092", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -59,8 +59,8 @@ void test07()\n   VERIFY( is.good() );\n \n   is.clear();\n-  is >> h2; \n-  VERIFY( h2 == 0 );\n+  is >> h2;\n+  VERIFY( h2 == 1232224 );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n \n@@ -122,8 +122,9 @@ void test07()\n   VERIFY( is.good() );\n \n   is >> h2; \n-  VERIFY( h2 == 0 );\n+  VERIFY( h2 == 1000000 );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n+  h2 = 0;\n   is.clear();\n \n   is >> h2; \n@@ -132,7 +133,7 @@ void test07()\n   h2 = 0;\n \n   is >> h2; \n-  VERIFY( h2 == 0 );\n+  VERIFY( h2 == 1234567 );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::failbit) );\n   VERIFY( static_cast<bool>(is.rdstate() & std::ios_base::eofbit) );\n   is.clear();"}]}