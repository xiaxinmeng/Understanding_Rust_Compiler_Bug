{"sha": "527a3750579f5b8aa0b49129b80df48cfbaa5813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3YTM3NTA1NzlmNWI4YWEwYjQ5MTI5YjgwZGY0OGNmYmFhNTgxMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-09-12T11:43:21Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-09-12T11:43:21Z"}, "message": "extend.texi: Use lowercase \"boolean\".\n\n\t* doc/extend.texi: Use lowercase \"boolean\".\n\t* doc/invoke.texi: Likewise.\n\t* doc/md.texi: Likewise.\n\t* target.def: Likewise.\n\t* doc/tm.texi: Regenerated.\n\nFrom-SVN: r240091", "tree": {"sha": "7e3206dd209f59a7ca75d2d1202cd747bbd7acd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e3206dd209f59a7ca75d2d1202cd747bbd7acd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/527a3750579f5b8aa0b49129b80df48cfbaa5813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527a3750579f5b8aa0b49129b80df48cfbaa5813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/527a3750579f5b8aa0b49129b80df48cfbaa5813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527a3750579f5b8aa0b49129b80df48cfbaa5813/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "684211e11b3722ae171a76b075fe22528a275a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684211e11b3722ae171a76b075fe22528a275a7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684211e11b3722ae171a76b075fe22528a275a7b"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "a12f3d8a15ed72dcff6d43b53f5d77b0d765d12c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=527a3750579f5b8aa0b49129b80df48cfbaa5813", "patch": "@@ -1,3 +1,11 @@\n+2016-09-12  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/extend.texi: Use lowercase \"boolean\".\n+\t* doc/invoke.texi: Likewise.\n+\t* doc/md.texi: Likewise.\n+\t* target.def: Likewise.\n+\t* doc/tm.texi: Regenerated.\n+\n 2016-09-12  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR middle-end/77426"}, {"sha": "8df9d6262b77c82d65ca1291c7fc8ad614ff661f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=527a3750579f5b8aa0b49129b80df48cfbaa5813", "patch": "@@ -9486,7 +9486,7 @@ the pointer points.\n @end smallexample\n \n The object pointed to by the first argument must be of integer or pointer\n-type.  It must not be a Boolean type.\n+type.  It must not be a boolean type.\n \n @emph{Note:} GCC 4.4 and later implement @code{__sync_fetch_and_nand}\n as @code{*ptr = ~(tmp & value)} instead of @code{*ptr = ~tmp & value}.\n@@ -9772,7 +9772,7 @@ they are not scaled by the size of the type to which the pointer points.\n @end smallexample\n \n The object pointed to by the first argument must be of integer or pointer\n-type.  It must not be a Boolean type.  All memory orders are valid.\n+type.  It must not be a boolean type.  All memory orders are valid.\n \n @end deftypefn\n \n@@ -9896,7 +9896,7 @@ behavior for all argument values.\n \n The first built-in function allows arbitrary integral types for operands and\n the result type must be pointer to some integral type other than enumerated or\n-Boolean type, the rest of the built-in functions have explicit integer types.\n+boolean type, the rest of the built-in functions have explicit integer types.\n \n The compiler will attempt to use hardware instructions to implement\n these built-in functions where possible, like conditional jump on overflow\n@@ -9942,7 +9942,7 @@ These built-in functions are similar to @code{__builtin_add_overflow},\n @code{__builtin_sub_overflow}, or @code{__builtin_mul_overflow}, except that\n they don't store the result of the arithmetic operation anywhere and the\n last argument is not a pointer, but some expression with integral type other\n-than enumerated or Boolean type.\n+than enumerated or boolean type.\n \n The built-in functions promote the first two operands into infinite precision signed type\n and perform addition on those promoted operands. The result is then"}, {"sha": "8eb5eff098eb81c9bef6242f3c8feaffc0f54b61", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=527a3750579f5b8aa0b49129b80df48cfbaa5813", "patch": "@@ -5497,7 +5497,7 @@ if (a < 0 && a < 0) @{ @dots{} @}\n @opindex Wlogical-not-parentheses\n @opindex Wno-logical-not-parentheses\n Warn about logical not used on the left hand side operand of a comparison.\n-This option does not warn if the right operand is considered to be a Boolean\n+This option does not warn if the right operand is considered to be a boolean\n expression.  Its purpose is to detect suspicious code like the following:\n @smallexample\n int a;"}, {"sha": "c1015f09a82408e4d2a1c4a96653336a1c845fdb", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=527a3750579f5b8aa0b49129b80df48cfbaa5813", "patch": "@@ -700,7 +700,7 @@ predicates used with @code{match_operand} have names that end in\n @samp{_operand}, and those used with @code{match_operator} have names\n that end in @samp{_operator}.\n \n-All predicates are Boolean functions (in the mathematical sense) of\n+All predicates are boolean functions (in the mathematical sense) of\n two arguments: the RTL expression that is being considered at that\n position in the instruction pattern, and the machine mode that the\n @code{match_operand} or @code{match_operator} specifies.  In this\n@@ -4274,7 +4274,7 @@ constraint.  Docstrings are explained further below.\n @end deffn\n \n Non-register constraints are more like predicates: the constraint\n-definition gives a Boolean expression which indicates whether the\n+definition gives a boolean expression which indicates whether the\n constraint matches.\n \n @deffn {MD Expression} define_constraint name docstring exp"}, {"sha": "dc5bcd66effd2c1a6c5549b8ff97b6d82e4b3f65", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=527a3750579f5b8aa0b49129b80df48cfbaa5813", "patch": "@@ -1891,7 +1891,7 @@ This hook may conditionally modify five variables\n @code{fixed_regs}, @code{call_used_regs}, @code{global_regs},\n @code{reg_names}, and @code{reg_class_contents}, to take into account\n any dependence of these register sets on target flags.  The first three\n-of these are of type @code{char []} (interpreted as Boolean vectors).\n+of these are of type @code{char []} (interpreted as boolean vectors).\n @code{global_regs} is a @code{const char *[]}, and\n @code{reg_class_contents} is a @code{HARD_REG_SET}.  Before the macro is\n called, @code{fixed_regs}, @code{call_used_regs},"}, {"sha": "8509e7d2d30aafacd2964e08ce1e9a5f1b7f16f8", "filename": "gcc/target.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/527a3750579f5b8aa0b49129b80df48cfbaa5813/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=527a3750579f5b8aa0b49129b80df48cfbaa5813", "patch": "@@ -5340,7 +5340,7 @@ DEFHOOK\n @code{fixed_regs}, @code{call_used_regs}, @code{global_regs},\\n\\\n @code{reg_names}, and @code{reg_class_contents}, to take into account\\n\\\n any dependence of these register sets on target flags.  The first three\\n\\\n-of these are of type @code{char []} (interpreted as Boolean vectors).\\n\\\n+of these are of type @code{char []} (interpreted as boolean vectors).\\n\\\n @code{global_regs} is a @code{const char *[]}, and\\n\\\n @code{reg_class_contents} is a @code{HARD_REG_SET}.  Before the macro is\\n\\\n called, @code{fixed_regs}, @code{call_used_regs},\\n\\"}]}