{"sha": "677feb77ce2344d316c2026a4a1dd95677b5d39e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc3ZmViNzdjZTIzNDRkMzE2YzIwMjZhNGExZGQ5NTY3N2I1ZDM5ZQ==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2007-07-11T04:13:10Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-07-11T04:13:10Z"}, "message": "builtins.def (BUILT_IN_CLEAR_CACHE): New builtin.\n\n2007-07-10  David Daney  <ddaney@avtrex.com>\n\n\t* builtins.def (BUILT_IN_CLEAR_CACHE): New builtin.\n\t* builtins.c (expand_builtin___clear_cache): New function.\n\t(expand_builtin): Call expand_builtin___clear_cache for\n\tBUILT_IN_CLEAR_CACHE case.\n\t* doc/extend.texi (__builtin___clear_cache): Document new builtin.\n\t* doc/md.texi (clear_cache): Document new instruction pattern.\n\t* testsuite/gcc.dg/builtins-64.c: New test.\n\nFrom-SVN: r126535", "tree": {"sha": "401faf6e2bf0facb662a8bc501c9a5f2f15df8ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/401faf6e2bf0facb662a8bc501c9a5f2f15df8ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/677feb77ce2344d316c2026a4a1dd95677b5d39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677feb77ce2344d316c2026a4a1dd95677b5d39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677feb77ce2344d316c2026a4a1dd95677b5d39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677feb77ce2344d316c2026a4a1dd95677b5d39e/comments", "author": null, "committer": null, "parents": [{"sha": "3a0e695acde4dc47332f6c22a93d2763e186b2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0e695acde4dc47332f6c22a93d2763e186b2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0e695acde4dc47332f6c22a93d2763e186b2f1"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "e9ee311c35695d978a831222e14604814fbc8e51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=677feb77ce2344d316c2026a4a1dd95677b5d39e", "patch": "@@ -1,3 +1,13 @@\n+2007-07-10  David Daney  <ddaney@avtrex.com>\n+\n+\t* builtins.def (BUILT_IN_CLEAR_CACHE): New builtin.\n+\t* builtins.c (expand_builtin___clear_cache): New function.\n+\t(expand_builtin): Call expand_builtin___clear_cache for\n+\tBUILT_IN_CLEAR_CACHE case.\n+\t* doc/extend.texi (__builtin___clear_cache): Document new builtin.\n+\t* doc/md.texi (clear_cache): Document new instruction pattern.\n+\t* testsuite/gcc.dg/builtins-64.c: New test.\n+\n 2007-07-11  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* config/cris/cris.md (\"movsi\"): Fix typo in last change."}, {"sha": "da76f61db32c7a5a06aef1e5f1cddb85913b4724", "filename": "gcc/builtins.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=677feb77ce2344d316c2026a4a1dd95677b5d39e", "patch": "@@ -5512,6 +5512,59 @@ expand_builtin_profile_func (bool exitp)\n   return const0_rtx;\n }\n \n+/* Expand a call to __builtin___clear_cache.  */\n+\n+static rtx\n+expand_builtin___clear_cache (tree exp ATTRIBUTE_UNUSED)\n+{\n+#ifndef HAVE_clear_cache\n+#ifdef CLEAR_INSN_CACHE\n+  /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n+     does something.  Just do the default expansion to a call to\n+     __clear_cache().  */\n+  return NULL_RTX;\n+#else\n+  /* There is no \"clear_cache\" insn, and __clear_cache() in libgcc\n+     does nothing.  There is no need to call it.  Do nothing.  */\n+  return const0_rtx;\n+#endif /* CLEAR_INSN_CACHE */\n+#else\n+  /* We have a \"clear_cache\" insn, and it will handle everything.  */\n+  tree begin, end;\n+  rtx begin_rtx, end_rtx;\n+  enum insn_code icode;\n+\n+  /* We must not expand to a library call.  If we did, any\n+     fallback library function in libgcc that might contain a call to\n+     __builtin___clear_cache() would recurse infinitely.  */\n+  if (!validate_arglist (exp, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n+    {\n+      error (\"both arguments to %<__builtin___clear_cache%> must be pointers\");\n+      return const0_rtx;\n+    }\n+\n+  if (HAVE_clear_cache)\n+    {\n+      icode = CODE_FOR_clear_cache;\n+\n+      begin = CALL_EXPR_ARG (exp, 0);\n+      begin_rtx = expand_expr (begin, NULL_RTX, Pmode, EXPAND_NORMAL);\n+      begin_rtx = convert_memory_address (Pmode, begin_rtx);\n+      if (!insn_data[icode].operand[0].predicate (begin_rtx, Pmode))\n+\tbegin_rtx = copy_to_mode_reg (Pmode, begin_rtx);\n+\n+      end = CALL_EXPR_ARG (exp, 1);\n+      end_rtx = expand_expr (end, NULL_RTX, Pmode, EXPAND_NORMAL);\n+      end_rtx = convert_memory_address (Pmode, end_rtx);\n+      if (!insn_data[icode].operand[1].predicate (end_rtx, Pmode))\n+\tend_rtx = copy_to_mode_reg (Pmode, end_rtx);\n+\n+      emit_insn (gen_clear_cache (begin_rtx, end_rtx));\n+    }\n+  return const0_rtx;\n+#endif /* HAVE_clear_cache */\n+}\n+\n /* Given a trampoline address, make sure it satisfies TRAMPOLINE_ALIGNMENT.  */\n \n static rtx\n@@ -6198,6 +6251,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn const0_rtx;\n       return expand_builtin_next_arg ();\n \n+    case BUILT_IN_CLEAR_CACHE:\n+      target = expand_builtin___clear_cache (exp);\n+      if (target)\n+        return target;\n+      break;\n+\n     case BUILT_IN_CLASSIFY_TYPE:\n       return expand_builtin_classify_type (exp);\n "}, {"sha": "dd06d4b38f6ad22fa59a74b590a69d194bcd8b24", "filename": "gcc/builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=677feb77ce2344d316c2026a4a1dd95677b5d39e", "patch": "@@ -1,6 +1,6 @@\n /* This file contains the definitions and documentation for the\n    builtins used in the GNU compiler.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -609,6 +609,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_APPLY_ARGS, \"apply_args\", BT_FN_PTR_VAR, ATTR_N\n DEF_GCC_BUILTIN        (BUILT_IN_ARGS_INFO, \"args_info\", BT_FN_INT_INT, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP32, \"bswap32\", BT_FN_UINT32_UINT32, ATTR_CONST_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_BSWAP64, \"bswap64\", BT_FN_UINT64_UINT64, ATTR_CONST_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_CLEAR_CACHE, \"__clear_cache\", BT_FN_VOID_PTR_PTR, ATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN        (BUILT_IN_CALLOC, \"calloc\", BT_FN_PTR_SIZE_SIZE, ATTR_MALLOC_NOTHROW_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_CLASSIFY_TYPE, \"classify_type\", BT_FN_INT_VAR, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_CLZ, \"clz\", BT_FN_INT_UINT, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "9fa09f4c460916403c817b34ed06334b158a0b89", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=677feb77ce2344d316c2026a4a1dd95677b5d39e", "patch": "@@ -6143,6 +6143,19 @@ if (__builtin_expect (ptr != NULL, 1))\n when testing pointer or floating-point values.\n @end deftypefn\n \n+@deftypefn {Built-in Function} void __builtin___clear_cache (char *@var{begin}, char *@var{end})\n+This function is used to flush the processor's instruction cache for\n+the region of memory between @var{begin} inclusive and @var{end}\n+exclusive.  Some targets require that the instruction cache be\n+flushed, after modifying memory containing code, in order to obtain\n+deterministic behavior.\n+\n+If the target does not require instruction cache flushes,\n+@code{__builtin___clear_cache} has no effect.  Otherwise either\n+instructions are emitted in-line to clear the instruction cache or a\n+call to the @code{__clear_cache} function in libgcc is made.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} void __builtin_prefetch (const void *@var{addr}, ...)\n This function is used to minimize cache-miss latency by moving data into\n a cache before it is accessed."}, {"sha": "dc45ed8acd18fa5a2d69ee6c8d79c786a7dd307d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=677feb77ce2344d316c2026a4a1dd95677b5d39e", "patch": "@@ -5036,6 +5036,16 @@ weren't equal.\n If this pattern is not defined, then a plain compare pattern and\n conditional branch pattern is used.\n \n+@cindex @code{clear_cache} instruction pattern\n+@item @samp{clear_cache}\n+\n+This pattern, if defined, flushes the instruction cache for a region of\n+memory.  The region is bounded to by the Pmode pointers in operand 0\n+inclusive and operand 1 exclusive.\n+\n+If this pattern is not defined, a call to the library function\n+@code{__clear_cache} is used.\n+\n @end table\n \n @end ifset"}, {"sha": "6e84633d5916a06d8d91c5bd51e0d81e5304d640", "filename": "gcc/testsuite/gcc.dg/builtins-64.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/677feb77ce2344d316c2026a4a1dd95677b5d39e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-64.c?ref=677feb77ce2344d316c2026a4a1dd95677b5d39e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+\n+int main ()\n+{\n+  char *mem = __builtin_alloca (40);\n+  __builtin___clear_cache (mem, mem + 40);\n+  return 0;\n+}"}]}