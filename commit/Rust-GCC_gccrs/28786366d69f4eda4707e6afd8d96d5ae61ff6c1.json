{"sha": "28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3ODYzNjZkNjlmNGVkYTQ3MDdlNmFmZDhkOTZkNWFlNjFmZjZjMQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-07-09T05:28:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-07-09T05:28:04Z"}, "message": "toplev.c (warn_dummy, W_options): Die.\n\n\t* toplev.c (warn_dummy, W_options): Die.\n\t(display_help): Don't print W_options.\n\t* common.opt: Add W_options help from toplev.c.\n\nFrom-SVN: r69125", "tree": {"sha": "c335d57a3364a46b42410708d6b043579c47269a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c335d57a3364a46b42410708d6b043579c47269a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbdb0453f10c7c46d776e765c5974453b39da70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdb0453f10c7c46d776e765c5974453b39da70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdb0453f10c7c46d776e765c5974453b39da70f"}], "stats": {"total": 93, "additions": 29, "deletions": 64}, "files": [{"sha": "d5ee8c611e1b0bb13c027efbfa96b1da021085e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "patch": "@@ -1,3 +1,9 @@\n+2003-07-09  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* toplev.c (warn_dummy, W_options): Die.\n+\t(display_help): Don't print W_options.\n+\t* common.opt: Add W_options help from toplev.c.\n+\n 2003-07-09  Andreas Jaeger  <aj@suse.de>\n \n \t* opts.c (wrap_help): Only pass int arguments as arguments to"}, {"sha": "44d8381a1ee5b56e5c1d8bf6f68ddaadd2426c1e", "filename": "gcc/common.opt", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "patch": "@@ -49,84 +49,107 @@ Optimize for space rather than speed\n \n W\n Common RejectNegative\n+This switch is deprecated; use -Wextra instead\n \n Waggregate-return\n Common\n+Warn about returning structures, unions or arrays\n \n Wcast-align\n Common\n+Warn about pointer casts which increase alignment\n \n Wdeprecated-declarations\n Common\n+Warn about uses of __attribute__((deprecated)) declarations\n \n Wdisabled-optimization\n Common\n+Warn when an optimization pass is disabled\n \n Werror\n Common\n+Treat all warnings as errors\n \n Wextra\n Common\n Print extra (possibly unwanted) warnings\n \n Winline\n Common\n+Warn when an inlined function cannot be inlined\n \n Wlarger-than-\n Common RejectNegative Joined UInteger\n -Wlarger-than-<number>\tWarn if an object is larger than <number> bytes\n \n Wmissing-noreturn\n Common\n+Warn about functions which might be candidates for __attribute__((noreturn))\n \n Wpacked\n Common\n+Warn when the packed attribute has no effect on struct layout\n \n Wpadded\n Common\n+Warn when padding is required to align structure members\n \n Wshadow\n Common\n+Warn when one local variable shadows another\n \n Wstrict-aliasing\n Common\n+Warn about code which might break strict aliasing rules\n \n Wswitch\n Common\n+Warn about enumerated switches, with no default, missing a case\n \n Wswitch-default\n Common\n+Warn about enumerated switches missing a \\\"default:\\\" statement\n \n Wswitch-enum\n Common\n+Warn about all enumerated switches missing a specific case\n \n Wsystem-headers\n Common\n+Suppress warnings from system headers\n \n Wuninitialized\n Common\n+Warn about uninitialized automatic variables\n \n Wunreachable-code\n Common\n+Warn about code that will never be executed\n \n Wunused\n Common\n Enable all -Wunused- warnings\n \n Wunused-function\n Common\n+Warn when a function is unused\n \n Wunused-label\n Common\n+Warn when a label is unused\n \n Wunused-parameter\n Common\n+Warn when a function parameter is unused\n \n Wunused-value\n Common\n+Warn when an expression value is unused\n \n Wunused-variable\n Common\n+Warn when a variable is unused\n \n aux-info\n Common Separate"}, {"sha": "731c95cba1362fcb90c469f2553be9ec42c9ca1d", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28786366d69f4eda4707e6afd8d96d5ae61ff6c1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=28786366d69f4eda4707e6afd8d96d5ae61ff6c1", "patch": "@@ -1503,66 +1503,11 @@ static const struct\n target_options[] = TARGET_OPTIONS;\n #endif\n \n-/* Options controlling warnings.  */\n-\n /* Nonzero means warn about function definitions that default the return type\n    or that use a null return and have a return-type other than void.  */\n \n int warn_return_type;\n \n-/* Used for the -W options array temporarily.  */\n-static int warn_dummy;\n-\n-/* Like f_options, but for -W.  */\n-\n-static const lang_independent_options W_options[] =\n-{\n-  {\"unused-function\", &warn_dummy, 1,\n-   N_(\"Warn when a function is unused\") },\n-  {\"unused-label\", &warn_dummy, 1,\n-   N_(\"Warn when a label is unused\") },\n-  {\"unused-parameter\", &warn_dummy, 1,\n-   N_(\"Warn when a function parameter is unused\") },\n-  {\"unused-variable\", &warn_dummy, 1,\n-   N_(\"Warn when a variable is unused\") },\n-  {\"unused-value\", &warn_dummy, 1,\n-   N_(\"Warn when an expression value is unused\") },\n-  {\"system-headers\", &warn_dummy, 1,\n-   N_(\"Do not suppress warnings from system headers\") },\n-  {\"error\", &warn_dummy, 1,\n-   N_(\"Treat all warnings as errors\") },\n-  {\"shadow\", &warn_dummy, 1,\n-   N_(\"Warn when one local variable shadows another\") },\n-  {\"switch\", &warn_dummy, 1,\n-   N_(\"Warn about enumerated switches, with no default, missing a case\") },\n-  {\"switch-default\", &warn_dummy, 1,\n-   N_(\"Warn about enumerated switches missing a default case\") },\n-  {\"switch-enum\", &warn_dummy, 1,\n-   N_(\"Warn about all enumerated switches missing a specific case\") },\n-  {\"aggregate-return\", &warn_dummy, 1,\n-   N_(\"Warn about returning structures, unions or arrays\") },\n-  {\"cast-align\", &warn_dummy, 1,\n-   N_(\"Warn about pointer casts which increase alignment\") },\n-  {\"unreachable-code\", &warn_dummy, 1,\n-   N_(\"Warn about code that will never be executed\") },\n-  {\"uninitialized\", &warn_dummy, 1,\n-   N_(\"Warn about uninitialized automatic variables\") },\n-  {\"inline\", &warn_dummy, 1,\n-   N_(\"Warn when an inlined function cannot be inlined\") },\n-  {\"packed\", &warn_dummy, 1,\n-   N_(\"Warn when the packed attribute has no effect on struct layout\") },\n-  {\"padded\", &warn_dummy, 1,\n-   N_(\"Warn when padding is required to align struct members\") },\n-  {\"disabled-optimization\", &warn_dummy, 1,\n-   N_(\"Warn when an optimization pass is disabled\") },\n-  {\"deprecated-declarations\", &warn_dummy, 1,\n-   N_(\"Warn about uses of __attribute__((deprecated)) declarations\") },\n-  {\"missing-noreturn\", &warn_dummy, 1,\n-   N_(\"Warn about functions which might be candidates for attribute noreturn\") },\n-  {\"strict-aliasing\", &warn_dummy, 1,\n-   N_ (\"Warn about code which might break the strict aliasing rules\") }\n-};\n-\n /* Output files for assembler code (real compiler output)\n    and debugging dumps.  */\n \n@@ -3966,15 +3911,6 @@ display_help (void)\n \t\t_(description));\n     }\n \n-  for (i = ARRAY_SIZE (W_options); i--;)\n-    {\n-      const char *description = W_options[i].description;\n-\n-      if (description != NULL && *description != 0)\n-\tprintf (\"  -W%-21s %s\\n\",\n-\t\tW_options[i].string, _(description));\n-    }\n-\n   for (i = ARRAY_SIZE (debug_args); i--;)\n     {\n       if (debug_args[i].description != NULL)"}]}