{"sha": "63dbcd13e93578e21e0717d4990c1701d6957e3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkYmNkMTNlOTM1NzhlMjFlMDcxN2Q0OTkwYzE3MDFkNjk1N2UzZQ==", "commit": {"author": {"name": "Volker Reichelt", "email": "v.reichelt@netcologne.de", "date": "2017-05-25T17:05:07Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2017-05-25T17:05:07Z"}, "message": "invoke.texi (-Wcatch-value=): Document new warning option.\n\n        * doc/invoke.texi (-Wcatch-value=): Document new warning option.\n\n        * c.opt (Wcatch-value=): New C++ warning flag.\n\n        * semantics.c (finish_handler_parms): Warn about non-reference\n        * type\n        catch handlers.\n\n        * g++.dg/warn/Wcatch-value-1.C: New test.\n        * g++.dg/warn/Wcatch-value-2.C: New test.\n        * g++.dg/warn/Wcatch-value-3.C: New test.\n\nFrom-SVN: r248466", "tree": {"sha": "33570c2d557c1068f7b7f286e8a8d7adf1becc24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33570c2d557c1068f7b7f286e8a8d7adf1becc24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63dbcd13e93578e21e0717d4990c1701d6957e3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dbcd13e93578e21e0717d4990c1701d6957e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63dbcd13e93578e21e0717d4990c1701d6957e3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dbcd13e93578e21e0717d4990c1701d6957e3e/comments", "author": {"login": "VReichelt", "id": 85767072, "node_id": "MDQ6VXNlcjg1NzY3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/85767072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VReichelt", "html_url": "https://github.com/VReichelt", "followers_url": "https://api.github.com/users/VReichelt/followers", "following_url": "https://api.github.com/users/VReichelt/following{/other_user}", "gists_url": "https://api.github.com/users/VReichelt/gists{/gist_id}", "starred_url": "https://api.github.com/users/VReichelt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VReichelt/subscriptions", "organizations_url": "https://api.github.com/users/VReichelt/orgs", "repos_url": "https://api.github.com/users/VReichelt/repos", "events_url": "https://api.github.com/users/VReichelt/events{/privacy}", "received_events_url": "https://api.github.com/users/VReichelt/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "932f48ac85f5111b1f3666b2c15718db2d10bcbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932f48ac85f5111b1f3666b2c15718db2d10bcbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932f48ac85f5111b1f3666b2c15718db2d10bcbf"}], "stats": {"total": 248, "additions": 246, "deletions": 2}, "files": [{"sha": "3d14b4c8ae6bdf59bab0c865520fa808e8916ce5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -1,3 +1,7 @@\n+2017-05-25  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* doc/invoke.texi (-Wcatch-value=): Document new warning option.\n+\n 2017-05-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* doc/invoke.texi (--enable-languages): Update documentation."}, {"sha": "818d39ba8024f09a8b4befc6a50d217744e49d15", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -1,3 +1,7 @@\n+2017-05-25  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* c.opt (Wcatch-value=): New C++ warning flag.\n+\n 2017-05-24  Nathan Sidwell  <nathan@acm.org>\n \n \t* c=common.c (field_decl_cmp, resort_field_decl_cmp): Adjust T"}, {"sha": "648e0add9c64b45010d4206cf6304b8074695364", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -388,6 +388,10 @@ Wcast-qual\n C ObjC C++ ObjC++ Var(warn_cast_qual) Warning\n Warn about casts which discard qualifiers.\n \n+Wcatch-value=\n+C++ ObjC++ Var(warn_catch_value) Warning Joined RejectNegative UInteger\n+Warn about catch handlers of non-reference type.\n+\n Wchar-subscripts\n C ObjC C++ ObjC++ Var(warn_char_subscripts) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn about subscripts whose type is \\\"char\\\"."}, {"sha": "6d71bd66b38776ad9cc5092a6225b10e4e1e7409", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -1,3 +1,8 @@\n+2017-05-25  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* semantics.c (finish_handler_parms): Warn about non-reference type\n+\tcatch handlers.\n+\n 2017-05-25  Nathan Sidwell  <nathan@acm.org>\n \n \tReimplement unqualified namespace lookup."}, {"sha": "df83d23c71351e8f149f7531a10f5ca21eff5ba9", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -1323,7 +1323,28 @@ finish_handler_parms (tree decl, tree handler)\n \t}\n     }\n   else\n-    type = expand_start_catch_block (decl);\n+    {\n+      type = expand_start_catch_block (decl);\n+      if (warn_catch_value\n+\t  && type != NULL_TREE\n+\t  && type != error_mark_node\n+\t  && TREE_CODE (TREE_TYPE (decl)) != REFERENCE_TYPE)\n+\t{\n+\t  tree orig_type = TREE_TYPE (decl);\n+\t  if (CLASS_TYPE_P (orig_type))\n+\t    {\n+\t      if (TYPE_POLYMORPHIC_P (orig_type))\n+\t\twarning (OPT_Wcatch_value_,\n+\t\t\t \"catching polymorphic type %q#T by value\", orig_type);\n+\t      else if (warn_catch_value > 1)\n+\t\twarning (OPT_Wcatch_value_,\n+\t\t\t \"catching type %q#T by value\", orig_type);\n+\t    }\n+\t  else if (warn_catch_value > 2)\n+\t    warning (OPT_Wcatch_value_,\n+\t\t     \"catching non-reference type %q#T\", orig_type);\n+\t}\n+    }\n   HANDLER_TYPE (handler) = type;\n }\n "}, {"sha": "1b40c51cc807e5bdf462ab9a522fa1c7d4735100", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -265,7 +265,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-builtin-declaration-mismatch @gol\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n -Wc++-compat  -Wc++11-compat  -Wc++14-compat  -Wcast-align  -Wcast-qual  @gol\n--Wchar-subscripts -Wchkp  -Wclobbered  -Wcomment  @gol\n+-Wchar-subscripts  -Wchkp  -Wcatch-value=@var{n}  -Wclobbered  -Wcomment  @gol\n -Wconditionally-supported  @gol\n -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wdangling-else  -Wdate-time @gol\n -Wdelete-incomplete @gol\n@@ -5834,6 +5834,14 @@ When compiling C++, warn about the deprecated conversion from string\n literals to @code{char *}.  This warning is enabled by default for C++\n programs.\n \n+@item -Wcatch-value=@var{n} @r{(C++ and Objective-C++ only)}\n+@opindex Wcatch-value\n+Warn about catch handlers that do not catch via reference.\n+With @option{-Wcatch-value=1} warn about polymorphic class types that\n+are caught by value. With @option{-Wcatch-value=2} warn about all class\n+types that are caught by value. With @option{-Wcatch-value=3} warn about\n+all types that are not caught by reference.\n+\n @item -Wclobbered\n @opindex Wclobbered\n @opindex Wno-clobbered"}, {"sha": "9df0539a14534aa45042d95a5e8e6c150b823449", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -1,3 +1,9 @@\n+2017-05-25  Volker Reichelt  <v.reichelt@netcologne.de>\n+\n+\t* g++.dg/warn/Wcatch-value-1.C: New test.\n+\t* g++.dg/warn/Wcatch-value-2.C: New test.\n+\t* g++.dg/warn/Wcatch-value-3.C: New test.\n+\n 2017-05-25  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/lookup/using17.C: Adjust diagnostics."}, {"sha": "94ee934b6aea085c1b7806e250db02159ccbea99", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-1.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-1.C?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-Wcatch-value=1\" }\n+\n+struct A { virtual ~A() {} };\n+struct B : A {};\n+struct C {};\n+struct D : C {};\n+\n+void foo()\n+{\n+  try {}\n+  catch (D)    {}\n+  catch (C)    {}\n+  catch (B)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (A)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (A*)   {}\n+  catch (int)  {}\n+\n+  try {}\n+  catch (D&)   {}\n+  catch (C&)   {}\n+  catch (B&)   {}\n+  catch (A&)   {}\n+  catch (A*)   {}\n+  catch (int&) {}\n+}\n+\n+template<typename T> void foo1()\n+{\n+  try {}\n+  catch (T) {}  // { dg-warning \"catching polymorphic type\" }\n+}\n+\n+template<typename T> void foo2()\n+{\n+  try {}\n+  catch (T*) {}\n+\n+  try {}\n+  catch (T&) {}\n+\n+  try {}\n+  catch (const T&) {}\n+}\n+\n+void bar()\n+{\n+  foo1<int&>();\n+  foo1<const A&>();\n+  foo1<B&>();\n+  foo1<const C&>();\n+  foo1<D&>();\n+\n+  foo1<int>();\n+  foo1<A>();  // { dg-message \"required\" }\n+  foo1<B>();  // { dg-message \"required\" }\n+  foo1<C>();\n+  foo1<D>();\n+\n+  foo2<int>();\n+  foo2<A>();\n+  foo2<B>();\n+  foo2<C>();\n+  foo2<D>();\n+}"}, {"sha": "1bcf4056027350374659a71e4c9f3c897dc8eca5", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-2.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-2.C?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-Wcatch-value=2\" }\n+\n+struct A { virtual ~A() {} };\n+struct B : A {};\n+struct C {};\n+struct D : C {};\n+\n+void foo()\n+{\n+  try {}\n+  catch (D)    {}  // { dg-warning \"catching type\" }\n+  catch (C)    {}  // { dg-warning \"catching type\" }\n+  catch (B)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (A)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (A*)   {}\n+  catch (int)  {}\n+\n+  try {}\n+  catch (D&)   {}\n+  catch (C&)   {}\n+  catch (B&)   {}\n+  catch (A&)   {}\n+  catch (A*)   {}\n+  catch (int&) {}\n+}\n+\n+template<typename T> void foo1()\n+{\n+  try {}\n+  catch (T) {}  // { dg-warning \"catching\" }\n+}\n+\n+template<typename T> void foo2()\n+{\n+  try {}\n+  catch (T*) {}\n+\n+  try {}\n+  catch (T&) {}\n+\n+  try {}\n+  catch (const T&) {}\n+}\n+\n+void bar()\n+{\n+  foo1<int&>();\n+  foo1<const A&>();\n+  foo1<B&>();\n+  foo1<const C&>();\n+  foo1<D&>();\n+\n+  foo1<int>();\n+  foo1<A>();  // { dg-message \"required\" }\n+  foo1<B>();  // { dg-message \"required\" }\n+  foo1<C>();  // { dg-message \"required\" }\n+  foo1<D>();  // { dg-message \"required\" }\n+\n+  foo2<int>();\n+  foo2<A>();\n+  foo2<B>();\n+  foo2<C>();\n+  foo2<D>();\n+}"}, {"sha": "88ae698caf62e1d411364b0f7c82eb011fe1e977", "filename": "gcc/testsuite/g++.dg/warn/Wcatch-value-3.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63dbcd13e93578e21e0717d4990c1701d6957e3e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWcatch-value-3.C?ref=63dbcd13e93578e21e0717d4990c1701d6957e3e", "patch": "@@ -0,0 +1,64 @@\n+// { dg-options \"-Wcatch-value=3\" }\n+\n+struct A { virtual ~A() {} };\n+struct B : A {};\n+struct C {};\n+struct D : C {};\n+\n+void foo()\n+{\n+  try {}\n+  catch (D)    {}  // { dg-warning \"catching type\" }\n+  catch (C)    {}  // { dg-warning \"catching type\" }\n+  catch (B)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (A)    {}  // { dg-warning \"catching polymorphic type\" }\n+  catch (A*)   {}  // { dg-warning \"catching non-reference type\" }\n+  catch (int)  {}  // { dg-warning \"catching non-reference type\" }\n+\n+  try {}\n+  catch (D&)   {}\n+  catch (C&)   {}\n+  catch (B&)   {}\n+  catch (A&)   {}\n+  catch (A*)   {}  // { dg-warning \"catching non-reference type\" }\n+  catch (int&) {}\n+}\n+\n+template<typename T> void foo1()\n+{\n+  try {}\n+  catch (T) {}  // { dg-warning \"catching\" }\n+}\n+\n+template<typename T> void foo2()\n+{\n+  try {}\n+  catch (T*) {}  // { dg-warning \"catching non-reference type\" }\n+\n+  try {}\n+  catch (T&) {}\n+\n+  try {}\n+  catch (const T&) {}\n+}\n+\n+void bar()\n+{\n+  foo1<int&>();\n+  foo1<const A&>();\n+  foo1<B&>();\n+  foo1<const C&>();\n+  foo1<D&>();\n+\n+  foo1<int>();  // { dg-message \"required\" }\n+  foo1<A>();    // { dg-message \"required\" }\n+  foo1<B>();    // { dg-message \"required\" }\n+  foo1<C>();    // { dg-message \"required\" }\n+  foo1<D>();    // { dg-message \"required\" }\n+\n+  foo2<int>();  // { dg-message \"required\" }\n+  foo2<A>();    // { dg-message \"required\" }\n+  foo2<B>();    // { dg-message \"required\" }\n+  foo2<C>();    // { dg-message \"required\" }\n+  foo2<D>();    // { dg-message \"required\" }\n+}"}]}