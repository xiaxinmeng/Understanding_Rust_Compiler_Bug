{"sha": "3e459226165206f305fd98e030c3cc4a234d8838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0NTkyMjYxNjUyMDZmMzA1ZmQ5OGUwMzBjM2NjNGEyMzRkODgzOA==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-15T06:33:30Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-12-15T06:33:30Z"}, "message": "Changed more index for loops to iterator for loops", "tree": {"sha": "48a0b6ec02908a5ccaffdb5a538c88c2964ba888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a0b6ec02908a5ccaffdb5a538c88c2964ba888"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e459226165206f305fd98e030c3cc4a234d8838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e459226165206f305fd98e030c3cc4a234d8838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e459226165206f305fd98e030c3cc4a234d8838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e459226165206f305fd98e030c3cc4a234d8838/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0cc1df59137c0d29408c18ccd88d8077979efb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0cc1df59137c0d29408c18ccd88d8077979efb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0cc1df59137c0d29408c18ccd88d8077979efb3"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "ed0069e6be6b31824619ee1c88c59dcd55bd277e", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e459226165206f305fd98e030c3cc4a234d8838/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e459226165206f305fd98e030c3cc4a234d8838/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=3e459226165206f305fd98e030c3cc4a234d8838", "patch": "@@ -2054,6 +2054,55 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // strip match cases\n     auto &match_cases = expr.get_match_cases ();\n+    for (auto it = match_cases.begin (); it != match_cases.end ();)\n+      {\n+\tauto &match_case = *it;\n+\n+\t// strip match case based on outer attributes in match arm\n+\tauto &match_arm = match_case.get_arm ();\n+\texpander.expand_cfg_attrs (match_arm.get_outer_attrs ());\n+\tif (expander.fails_cfg (match_arm.get_outer_attrs ()))\n+\t  {\n+\t    // strip match case\n+\t    it = match_cases.erase (it);\n+\t    continue;\n+\t  }\n+\n+\tfor (auto &pattern : match_arm.get_patterns ())\n+\t  {\n+\t    pattern->accept_vis (*this);\n+\t    if (pattern->is_marked_for_strip ())\n+\t      rust_error_at (pattern->get_locus_slow (),\n+\t\t\t     \"cannot strip pattern in this position\");\n+\t  }\n+\n+\t/* assuming that guard expression cannot be stripped as\n+\t * strictly speaking you would have to strip the whole guard to\n+\t * make syntactical sense, which you can't do. as such, only\n+\t * strip sub-expressions */\n+\tif (match_arm.has_match_arm_guard ())\n+\t  {\n+\t    auto &guard_expr = match_arm.get_guard_expr ();\n+\t    guard_expr->accept_vis (*this);\n+\t    if (guard_expr->is_marked_for_strip ())\n+\t      rust_error_at (guard_expr->get_locus_slow (),\n+\t\t\t     \"cannot strip expression in this position - outer \"\n+\t\t\t     \"attributes not allowed\");\n+\t  }\n+\n+\t// strip sub-expressions from match cases\n+\tauto &case_expr = match_case.get_expr ();\n+\tcase_expr->accept_vis (*this);\n+\tif (case_expr->is_marked_for_strip ())\n+\t  rust_error_at (case_expr->get_locus_slow (),\n+\t\t\t \"cannot strip expression in this position - outer \"\n+\t\t\t \"attributes not allowed\");\n+\n+\t// increment to next case if haven't continued\n+\t++it;\n+      }\n+\n+#if 0\n     for (int i = 0; i < match_cases.size ();)\n       {\n \tauto &match_case = match_cases[i];\n@@ -2101,6 +2150,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment to next case if haven't continued\n \ti++;\n       }\n+#endif\n   }\n   void visit (AST::AwaitExpr &expr) override\n   {\n@@ -2864,6 +2914,28 @@ class AttrVisitor : public AST::ASTVisitor\n     /* strip function parameters if required - this is specifically\n      * allowed by spec */\n     auto &params = item.get_function_params ();\n+    for (auto it = params.begin (); it != params.end ();)\n+      {\n+\tauto &param = *it;\n+\n+\tauto &param_attrs = param.get_outer_attrs ();\n+\texpander.expand_cfg_attrs (param_attrs);\n+\tif (expander.fails_cfg (param_attrs))\n+\t  {\n+\t    it = params.erase (it);\n+\t    continue;\n+\t  }\n+\n+\tauto &type = param.get_type ();\n+\ttype->accept_vis (*this);\n+\tif (type->is_marked_for_strip ())\n+\t  rust_error_at (type->get_locus_slow (),\n+\t\t\t \"cannot strip type in this position\");\n+\n+\t// increment if nothing else happens\n+\t++it;\n+      }\n+#if 0\n     for (int i = 0; i < params.size ();)\n       {\n \tauto &param = params[i];\n@@ -2885,6 +2957,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if nothing else happens\n \ti++;\n       }\n+#endif\n     /* NOTE: these are extern function params, which may have different\n      * rules and restrictions to \"normal\" function params. So expansion\n      * handled separately. */\n@@ -3419,6 +3492,28 @@ class AttrVisitor : public AST::ASTVisitor\n \n     // presumably function params can be stripped\n     auto &params = type.get_function_params ();\n+    for (auto it = params.begin (); it != params.end ();)\n+      {\n+\tauto &param = *it;\n+\n+\tauto &param_attrs = param.get_outer_attrs ();\n+\texpander.expand_cfg_attrs (param_attrs);\n+\tif (expander.fails_cfg (param_attrs))\n+\t  {\n+\t    it = params.erase (it);\n+\t    continue;\n+\t  }\n+\n+\tauto &type = param.get_type ();\n+\ttype->accept_vis (*this);\n+\tif (type->is_marked_for_strip ())\n+\t  rust_error_at (type->get_locus_slow (),\n+\t\t\t \"cannot strip type in this position\");\n+\n+\t// increment if nothing else happens\n+\t++it;\n+      }\n+#if 0\n     for (int i = 0; i < params.size ();)\n       {\n \tauto &param = params[i];\n@@ -3440,6 +3535,7 @@ class AttrVisitor : public AST::ASTVisitor\n \t// increment if nothing else happens\n \ti++;\n       }\n+#endif\n \n     /* TODO: assuming that variadic nature cannot be stripped. If this\n      * is not true, then have code here to do so. */\n@@ -3574,6 +3670,20 @@ MacroExpander::expand_crate ()\n   // expand attributes recursively and strip items if required\n   AttrVisitor attr_visitor (*this);\n   auto &items = crate.items;\n+  for (auto it = items.begin (); it != items.end ();)\n+    {\n+      auto &item = *it;\n+\n+      // mark for stripping if required\n+      item->accept_vis (attr_visitor);\n+\n+      if (item->is_marked_for_strip ())\n+\tit = items.erase (it);\n+      else\n+\t++it;\n+    }\n+\n+#if 0\n   for (int i = 0; i < items.size ();)\n     {\n       auto &item = items[i];\n@@ -3586,6 +3696,7 @@ MacroExpander::expand_crate ()\n       else\n \ti++;\n     }\n+#endif\n   // TODO: should recursive attribute and macro expansion be done in the same\n   // transversal? Or in separate ones like currently?\n "}]}