{"sha": "d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJhMGMyZWVlNDZmMzU3YTljZGZmNjhjNzM2NTkxZmVmZDllMGZhZQ==", "commit": {"author": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-06-27T17:47:15Z"}, "committer": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-06-27T17:47:15Z"}, "message": "dsp16xx.h (FIRST_PSEUDO_REGISTER): Add parentheses to definition.\n\n\t* dsp16xx.h (FIRST_PSEUDO_REGISTER): Add parentheses to definition.\n\t* dsp16xx.c (next_cc_user_unsigned): New function.\n\tRemove save_next_cc_user_code.\n\t(print_operand): Use HOST_WIDE_INT_PRINT_* macros.\n\t* dsp16xx.md: Call next_cc_user_unsigned instead of using\n \tsave_next_cc_user_code.\n\tUse gen_rtx_* functions instead of gen_rtx.\n\t* rs6000.c: Add trap_comparison_operator to PREDICATE_CODES.\n\nFrom-SVN: r20757", "tree": {"sha": "ad74698a9032cec6a9e9bf86de946f6ccba8134b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad74698a9032cec6a9e9bf86de946f6ccba8134b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/comments", "author": null, "committer": null, "parents": [{"sha": "4c649323e35b4334684c43c13f55f8dcdd1e849a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c649323e35b4334684c43c13f55f8dcdd1e849a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c649323e35b4334684c43c13f55f8dcdd1e849a"}], "stats": {"total": 125, "additions": 73, "deletions": 52}, "files": [{"sha": "5da61d29f0ec71dfbd76fb1b218d1cc9fb3bbfdd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "patch": "@@ -1,3 +1,17 @@\n+Sat Jun 27 20:20:00 1998  John Carr  <jfc@mit.edu>\n+\n+\t* dsp16xx.h (FIRST_PSEUDO_REGISTER): Add parentheses to definition.\n+\t* dsp16xx.c (next_cc_user_unsigned): New function.\n+\tRemove save_next_cc_user_code.\n+\t(print_operand): Use HOST_WIDE_INT_PRINT_* macros.\n+\t* dsp16xx.md: Call next_cc_user_unsigned instead of using\n+ \tsave_next_cc_user_code.\n+\tUse gen_rtx_* functions instead of gen_rtx.\n+\n+Sat Jun 27 20:18:34 1998  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n+\n+\t* rs6000.c: Add trap_comparison_operator to PREDICATE_CODES.\n+\n Sat Jun 27 16:45:42 1998  Jeffrey A Law  (law@cygnus.com)\n \n \t* flow.c (count_reg_sets): New function."}, {"sha": "e7bcdced235a16e1617e608d409b5a594cec2ebe", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "patch": "@@ -1531,8 +1531,6 @@ override_options ()\n     }\n }\n \n-enum rtx_code save_next_cc_user_code;\n-\n enum rtx_code\n next_cc_user_code (insn)\n rtx insn;\n@@ -1551,6 +1549,22 @@ rtx insn;\n     abort ();\n }\n \n+int\n+next_cc_user_unsigned (insn)\n+     rtx insn;\n+{\n+  switch (next_cc_user_code (insn))\n+    {\n+    case GTU:\n+    case GEU:\n+    case LTU:\n+    case LEU:\n+      return 1;\n+    default:\n+      return 0;\n+    }\n+}\n+\n void\n print_operand(file, op, letter)\n FILE *file;\n@@ -1624,12 +1638,13 @@ int letter;\n         output_address( XEXP(op,0) );\n     else if( code == CONST_INT )\n     { \n+\tHOST_WIDE_INT val = INTVAL (op);\n         if( letter == 'H' )\n-            fprintf( file, \"0x%x\", (INTVAL(op) & 0xffff) );\n+            fprintf( file, HOST_WIDE_INT_PRINT_HEX, val & 0xffff);\n \telse if (letter == 'h')\n-            fprintf( file, \"%d\", INTVAL (op) );\n+            fprintf( file, HOST_WIDE_INT_PRINT_DEC, val);\n         else if( letter == 'U' )\n-            fprintf( file, \"0x%x\", ((INTVAL(op) & 0xffff0000) >> 16) & 0xffff );\n+            fprintf( file, HOST_WIDE_INT_PRINT_HEX, (val >> 16) & 0xffff);\n         else\n            output_addr_const( file, op );\n     }"}, {"sha": "785e8ca983b7d2f66112eda7521fe8f3cf5d2f7f", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "patch": "@@ -76,7 +76,7 @@ extern void bss_section ();\n extern struct rtx_def *dsp16xx_function_arg ();\n extern void dsp16xx_function_arg_advance ();\n extern enum rtx_code next_cc_user_code ();\n-extern enum rtx_code save_next_cc_user_code;\n+extern int next_cc_user_unsigned ();\n extern struct rtx_def *gen_tst_reg ();\n extern char *output_block_move();\n \n@@ -436,7 +436,7 @@ extern int target_flags;\n    The hardware registers are assigned numbers for the compiler\n    from 0 to FIRST_PSEUDO_REGISTER-1 */\n \n-#define FIRST_PSEUDO_REGISTER REG_YBASE31 + 1\n+#define FIRST_PSEUDO_REGISTER (REG_YBASE31 + 1)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n@@ -1131,11 +1131,11 @@ extern struct dsp16xx_frame_info current_frame_info;\n #define VALUE_REGNO(MODE)  (REG_Y)\n \n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n-  gen_rtx (REG, TYPE_MODE (VALTYPE), VALUE_REGNO(TYPE_MODE(VALTYPE)))\n+  gen_rtx_REG (TYPE_MODE (VALTYPE), VALUE_REGNO(TYPE_MODE(VALTYPE)))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n-#define LIBCALL_VALUE(MODE)  gen_rtx (REG, MODE, VALUE_REGNO(MODE))\n+#define LIBCALL_VALUE(MODE)  gen_rtx_REG (MODE, VALUE_REGNO(MODE))\n \n /* 1 if N is a possible register number for a function value. */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == REG_Y)"}, {"sha": "9923178d90ce5c1a8a60bdc83ef7889ce7aa1246", "filename": "gcc/config/dsp16xx/dsp16xx.md", "status": "modified", "additions": 31, "deletions": 41, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.md?ref=d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for the AT&T DSP1600 for GNU C compiler\n-;;  Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n+;;  Copyright (C) 1994, 1995, 1997 Free Software Foundation, Inc.\n ;;  Contributed by Michael Collison (collison@world.std.com).\n \n ;; This file is part of GNU CC.\n@@ -149,14 +149,10 @@\n   if (GET_CODE (operands[1]) == CONST_INT)\n     operands[1] = force_reg (HImode, operands[1]);\n \n-  if (operands[0])\t/* Avoid unused code warning */\n-    {\n-      dsp16xx_compare_gen = gen_compare_reg;\n-      dsp16xx_compare_op0 = operands[0];\n-      dsp16xx_compare_op1 = operands[1];\n-      DONE;\n-    }\n-\n+  dsp16xx_compare_gen = gen_compare_reg;\n+  dsp16xx_compare_op0 = operands[0];\n+  dsp16xx_compare_op1 = operands[1];\n+  DONE;\n }\")\n \n (define_insn \"\"\n@@ -167,10 +163,7 @@\n    (clobber (match_scratch:QI 3 \"=&A\"))\n    (clobber (match_scratch:QI 4 \"=&A\"))\n    (clobber (match_scratch:QI 5 \"=&A\"))]\n-  \"(save_next_cc_user_code = next_cc_user_code (insn)) == GTU \\\n-   || save_next_cc_user_code == GEU \\\n-   || save_next_cc_user_code == LTU \\\n-   || save_next_cc_user_code == LEU\"\n+  \"next_cc_user_unsigned (insn)\"\n   \"*\n {\n   if (GET_CODE(operands[0]) == REG)\n@@ -195,7 +188,7 @@\n     {\n       rtx xoperands[2];\n \n-      xoperands[0] = gen_rtx (REG, HImode, REG_A0);\n+      xoperands[0] = gen_rtx_REG (HImode, REG_A0);\n       xoperands[1] = operands[0];\n       double_reg_from_memory (xoperands);\n     }\n@@ -218,7 +211,7 @@\n     {\n       rtx xoperands[2];\n \n-      xoperands[0] = gen_rtx (REG, HImode, REG_A1);\n+      xoperands[0] = gen_rtx_REG (HImode, REG_A1);\n       xoperands[1] = operands[1];\n       double_reg_from_memory (xoperands);\n     }\n@@ -262,10 +255,7 @@\n                        (match_operand:QI 1 \"nonmemory_operand\" \"w,z,u,i,w,z,k,i\")))\n \t(clobber (match_scratch:QI 2 \"=j,j,j,j,q,q,q,q\"))\n \t(clobber (match_scratch:QI 3 \"=v,y,q,X,v,y,j,X\"))]\n-  \"(save_next_cc_user_code = next_cc_user_code (insn)) == GTU \\\n-   || save_next_cc_user_code == GEU \\\n-   || save_next_cc_user_code == LTU \\\n-   || save_next_cc_user_code == LEU\"\n+  \"next_cc_user_unsigned (insn)\"\n   \"@\n    %2=0\\;%3=0\\;%2-%3\n    %2=0\\;%3=0\\;%2-%3\n@@ -302,7 +292,7 @@\n   \"\n {\n   if (!dsp16xx_cmphf3_libcall)\n-    dsp16xx_cmphf3_libcall = gen_rtx (SYMBOL_REF, Pmode, CMPHF3_LIBCALL);\n+    dsp16xx_cmphf3_libcall = gen_rtx_SYMBOL_REF (Pmode, CMPHF3_LIBCALL);\n \n    dsp16xx_compare_gen = gen_compare_reg;\n    dsp16xx_compare_op0 = operands[0];\n@@ -426,7 +416,7 @@\n   \"\n {\n   if (!dsp16xx_addhf3_libcall)\n-    dsp16xx_addhf3_libcall = gen_rtx (SYMBOL_REF, Pmode, ADDHF3_LIBCALL);\n+    dsp16xx_addhf3_libcall = gen_rtx_SYMBOL_REF (Pmode, ADDHF3_LIBCALL);\n \n    emit_library_call (dsp16xx_addhf3_libcall, 1, HFmode, 2,\n \t\t      operands[1], HFmode,\n@@ -506,7 +496,7 @@\n   \"\n {\n   if (!dsp16xx_subhf3_libcall)\n-    dsp16xx_subhf3_libcall = gen_rtx (SYMBOL_REF, Pmode, SUBHF3_LIBCALL);\n+    dsp16xx_subhf3_libcall = gen_rtx_SYMBOL_REF (Pmode, SUBHF3_LIBCALL);\n   \n   emit_library_call (dsp16xx_subhf3_libcall, 1, HFmode, 2,\n \t\t     operands[1], HFmode,\n@@ -529,7 +519,7 @@\n \"\n {\n   if (!dsp16xx_neghf2_libcall)\n-    dsp16xx_neghf2_libcall = gen_rtx (SYMBOL_REF, Pmode, NEGHF2_LIBCALL);\n+    dsp16xx_neghf2_libcall = gen_rtx_SYMBOL_REF (Pmode, NEGHF2_LIBCALL);\n   \n   emit_library_call (dsp16xx_neghf2_libcall, 1, HFmode, 1,\n \t\t     operands[1], HFmode);\n@@ -553,7 +543,7 @@\n   \"\n {\n   if (!dsp16xx_mulhi3_libcall)\n-    dsp16xx_mulhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, MULHI3_LIBCALL);\n+    dsp16xx_mulhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, MULHI3_LIBCALL);\n \n    emit_library_call (dsp16xx_mulhi3_libcall, 1, HImode, 2,\n \t\t      operands[1], HImode,\n@@ -595,7 +585,7 @@\n   \"\n {\n   if (!dsp16xx_mulhf3_libcall)\n-    dsp16xx_mulhf3_libcall = gen_rtx (SYMBOL_REF, Pmode, MULHF3_LIBCALL);\n+    dsp16xx_mulhf3_libcall = gen_rtx_SYMBOL_REF (Pmode, MULHF3_LIBCALL);\n   \n   emit_library_call (dsp16xx_mulhf3_libcall, 1, HFmode, 2,\n \t\t     operands[1], HFmode,\n@@ -620,7 +610,7 @@\n   \"\n {\n   if (!dsp16xx_divhi3_libcall)\n-    dsp16xx_divhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, DIVHI3_LIBCALL);\n+    dsp16xx_divhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, DIVHI3_LIBCALL);\n \n    emit_library_call (dsp16xx_divhi3_libcall, 1, HImode, 2,\n \t\t      operands[1], HImode,\n@@ -637,7 +627,7 @@\n   \"\n {\n   if (!dsp16xx_udivhi3_libcall)\n-    dsp16xx_udivhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, UDIVHI3_LIBCALL);\n+    dsp16xx_udivhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, UDIVHI3_LIBCALL);\n   \n   emit_library_call (dsp16xx_udivhi3_libcall, 1, HImode, 2,\n \t\t     operands[1], HImode,\n@@ -654,7 +644,7 @@\n   \"\n {\n   if (!dsp16xx_divqi3_libcall)\n-    dsp16xx_divqi3_libcall = gen_rtx (SYMBOL_REF, Pmode, DIVQI3_LIBCALL);\n+    dsp16xx_divqi3_libcall = gen_rtx_SYMBOL_REF (Pmode, DIVQI3_LIBCALL);\n   \n   emit_library_call (dsp16xx_divqi3_libcall, 1, QImode, 2,\n \t\t     operands[1], QImode,\n@@ -671,7 +661,7 @@\n   \"\n {\n   if (!dsp16xx_udivqi3_libcall)\n-    dsp16xx_udivqi3_libcall = gen_rtx (SYMBOL_REF, Pmode, UDIVQI3_LIBCALL);\n+    dsp16xx_udivqi3_libcall = gen_rtx_SYMBOL_REF (Pmode, UDIVQI3_LIBCALL);\n \n    emit_library_call (dsp16xx_udivqi3_libcall, 1, QImode, 2,\n \t\t      operands[1], QImode,\n@@ -695,7 +685,7 @@\n   \"\n {\n   if (!dsp16xx_modhi3_libcall)\n-    dsp16xx_modhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, MODHI3_LIBCALL);\n+    dsp16xx_modhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, MODHI3_LIBCALL);\n   \n   emit_library_call (dsp16xx_modhi3_libcall, 1, HImode, 2,\n \t\t     operands[1], HImode,\n@@ -712,7 +702,7 @@\n   \"\n {\n   if (!dsp16xx_umodhi3_libcall)\n-    dsp16xx_umodhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, UMODHI3_LIBCALL);\n+    dsp16xx_umodhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, UMODHI3_LIBCALL);\n   \n   emit_library_call (dsp16xx_umodhi3_libcall, 1, HImode, 2,\n \t\t     operands[1], HImode,\n@@ -729,7 +719,7 @@\n   \"\n {\n   if (!dsp16xx_modqi3_libcall)\n-    dsp16xx_modqi3_libcall = gen_rtx (SYMBOL_REF, Pmode, MODQI3_LIBCALL);\n+    dsp16xx_modqi3_libcall = gen_rtx_SYMBOL_REF (Pmode, MODQI3_LIBCALL);\n   \n   emit_library_call (dsp16xx_modqi3_libcall, 1, QImode, 2,\n \t\t     operands[1], QImode,\n@@ -746,7 +736,7 @@\n   \"\n {\n   if (!dsp16xx_umodqi3_libcall)\n-    dsp16xx_umodqi3_libcall = gen_rtx (SYMBOL_REF, Pmode, UMODQI3_LIBCALL);\n+    dsp16xx_umodqi3_libcall = gen_rtx_SYMBOL_REF (Pmode, UMODQI3_LIBCALL);\n   \n   emit_library_call (dsp16xx_umodqi3_libcall, 1, QImode, 2,\n \t\t     operands[1], QImode,\n@@ -763,7 +753,7 @@\n   \"\n {\n   if (!dsp16xx_divhf3_libcall)\n-    dsp16xx_divhf3_libcall = gen_rtx (SYMBOL_REF, Pmode, DIVHF3_LIBCALL);\n+    dsp16xx_divhf3_libcall = gen_rtx_SYMBOL_REF (Pmode, DIVHF3_LIBCALL);\n   \n   emit_library_call (dsp16xx_divhf3_libcall, 1, HFmode, 2,\n \t\t     operands[1], HFmode,\n@@ -1136,8 +1126,8 @@\n   operands[5] = addr0;\n   operands[6] = addr1;\n \n-  operands[0] = gen_rtx (MEM, BLKmode, addr0);\n-  operands[1] = gen_rtx (MEM, BLKmode, addr1);\n+  operands[0] = change_address (operands[0], VOIDmode, addr0);\n+  operands[1] = change_address (operands[1], VOIDmode, addr1);\n }\")\n \n (define_insn \"\"\n@@ -1322,7 +1312,7 @@\n   \"\n {\n   if (!dsp16xx_floathihf2_libcall)\n-    dsp16xx_floathihf2_libcall = gen_rtx (SYMBOL_REF, Pmode, FLOATHIHF2_LIBCALL);\n+    dsp16xx_floathihf2_libcall = gen_rtx_SYMBOL_REF (Pmode, FLOATHIHF2_LIBCALL);\n   \n   emit_library_call (dsp16xx_floathihf2_libcall, 1, HFmode, 1,\n \t\t     operands[1], HImode);\n@@ -1337,7 +1327,7 @@\n   \"\n {\n   if (!dsp16xx_fixhfhi2_libcall)\n-    dsp16xx_fixhfhi2_libcall = gen_rtx (SYMBOL_REF, Pmode, FIXHFHI2_LIBCALL);\n+    dsp16xx_fixhfhi2_libcall = gen_rtx_SYMBOL_REF (Pmode, FIXHFHI2_LIBCALL);\n   \n   emit_library_call (dsp16xx_fixhfhi2_libcall, 1, HImode, 1,\n \t\t     operands[1], HFmode);\n@@ -1448,7 +1438,7 @@\n \n #if 0\n \tif (!dsp16xx_ashrhi3_libcall)\n-\t  dsp16xx_ashrhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, ASHRHI3_LIBCALL);\n+\t  dsp16xx_ashrhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, ASHRHI3_LIBCALL);\n \n \t  emit_library_call (dsp16xx_ashrhi3_libcall, 1, HImode, 2,\n \t\t\t     operands[1], HImode,\n@@ -1572,7 +1562,7 @@\n \t  rtx label2 = gen_label_rtx ();\n #if 0\n \t  if (!dsp16xx_lshrhi3_libcall)\n-\t    dsp16xx_lshrhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, LSHRHI3_LIBCALL);\n+\t    dsp16xx_lshrhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, LSHRHI3_LIBCALL);\n \t  \n \t  emit_library_call (dsp16xx_lshrhi3_libcall, 1, HImode, 2,\n \t\t\t     operands[1], HImode,\n@@ -1714,7 +1704,7 @@\n \trtx label2 = gen_label_rtx ();\n #if 0\n \tif (!dsp16xx_ashlhi3_libcall)\n-\t  dsp16xx_ashlhi3_libcall = gen_rtx (SYMBOL_REF, Pmode, ASHLHI3_LIBCALL);\n+\t  dsp16xx_ashlhi3_libcall = gen_rtx_SYMBOL_REF (Pmode, ASHLHI3_LIBCALL);\n \n \t  emit_library_call (dsp16xx_ashlhi3_libcall, 1, HImode, 2,\n \t\t\t     operands[1], HImode,"}, {"sha": "329bc1aee260f18b1625e6e688c552cb61247ece", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2a0c2eee46f357a9cdff68c736591fefd9e0fae/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=d2a0c2eee46f357a9cdff68c736591fefd9e0fae", "patch": "@@ -3131,7 +3131,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n   {\"branch_comparison_operator\", {EQ, NE, LE, LT, GE,\t\t\\\n \t\t\t\t  GT, LEU, LTU, GEU, GTU}},\t\\\n   {\"scc_comparison_operator\", {EQ, NE, LE, LT, GE,\t\t\\\n-\t\t\t       GT, LEU, LTU, GEU, GTU}},\n+\t\t\t       GT, LEU, LTU, GEU, GTU}},\t\\\n+  {\"trap_comparison_operator\", {EQ, NE, LE, LT, GE,\t\t\\\n+\t\t\t\tGT, LEU, LTU, GEU, GTU}},\n \n \n /* uncomment for disabling the corresponding default options */\n@@ -3205,6 +3207,7 @@ extern int load_multiple_operation ();\n extern int store_multiple_operation ();\n extern int branch_comparison_operator ();\n extern int scc_comparison_operator ();\n+extern int trap_comparison_operator ();\n extern int includes_lshift_p ();\n extern int includes_rshift_p ();\n extern int registers_ok_for_quad_peep ();\n@@ -3242,7 +3245,6 @@ extern struct rtx_def *rs6000_longcall_ref ();\n extern int function_arg_padding ();\n extern void toc_section ();\n extern void private_data_section ();\n-extern int trap_comparison_operator ();\n \n /* See nonlocal_goto_receiver for when this must be set.  */\n "}]}