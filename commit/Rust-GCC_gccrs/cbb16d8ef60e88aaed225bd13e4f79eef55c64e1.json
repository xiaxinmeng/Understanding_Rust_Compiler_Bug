{"sha": "cbb16d8ef60e88aaed225bd13e4f79eef55c64e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JiMTZkOGVmNjBlODhhYWVkMjI1YmQxM2U0Zjc5ZWVmNTVjNjRlMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-05T19:52:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-05T19:52:24Z"}, "message": "re PR target/18841 (setjmp and eh receivers can mis-schedule)\n\n        PR target/18841\n        * config/alpha/alpha.md (UNSPECV_SETJMPR_ER): New.\n        (builtin_setjmp_receiver_er_sl_1): Use it.\n        (builtin_setjmp_receiver_er_1): Likewise.\n        (builtin_setjmp_receiver_er, exception_receiver_er): Remove.\n        (builtin_setjmp_receiver): Don't split for explicit relocs until\n        after reload.\n        (exception_receiver): Likewise.\n\nFrom-SVN: r91753", "tree": {"sha": "dbb5946016e7ffe496f9a7644d5730988c053965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbb5946016e7ffe496f9a7644d5730988c053965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1/comments", "author": null, "committer": null, "parents": [{"sha": "82f4593a97f20deebb71cc7d624727cfe01f8c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f4593a97f20deebb71cc7d624727cfe01f8c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f4593a97f20deebb71cc7d624727cfe01f8c2c"}], "stats": {"total": 130, "additions": 64, "deletions": 66}, "files": [{"sha": "80f8776c28e113ec74c0b3cfddc8c8e2a30d981d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbb16d8ef60e88aaed225bd13e4f79eef55c64e1", "patch": "@@ -1,3 +1,14 @@\n+2004-12-05  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/18841\n+\t* config/alpha/alpha.md (UNSPECV_SETJMPR_ER): New.\n+\t(builtin_setjmp_receiver_er_sl_1): Use it.\n+\t(builtin_setjmp_receiver_er_1): Likewise.\n+\t(builtin_setjmp_receiver_er, exception_receiver_er): Remove.\n+\t(builtin_setjmp_receiver): Don't split for explicit relocs until\n+\tafter reload.\n+\t(exception_receiver): Likewise.\n+\n 2004-12-05  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* mklibgcc.in (vis_hide): Add the prototype for the test."}, {"sha": "21bf64bea2a71b0538214592d7379116ab0cebc9", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 53, "deletions": 66, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbb16d8ef60e88aaed225bd13e4f79eef55c64e1/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=cbb16d8ef60e88aaed225bd13e4f79eef55c64e1", "patch": "@@ -77,6 +77,7 @@\n    (UNSPECV_PLDGP2\t11)\t; prologue ldgp\n    (UNSPECV_SET_TP\t12)\n    (UNSPECV_RPCC\t13)\n+   (UNSPECV_SETJMPR_ER\t14)\t; builtin_setjmp_receiver fragment\n   ])\n \n ;; Where necessary, the suffixes _le and _be are used to distinguish between\n@@ -6780,99 +6781,85 @@\n   \"jmp $31,(%0),0\"\n   [(set_attr \"type\" \"ibr\")])\n \n-(define_insn \"*builtin_setjmp_receiver_er_sl_1\"\n-  [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF && TARGET_AS_CAN_SUBTRACT_LABELS\"\n-  \"lda $27,$LSJ%=-%l0($27)\\n$LSJ%=:\")\n-  \n-(define_insn \"*builtin_setjmp_receiver_er_1\"\n-  [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\"\n-  \"br $27,$LSJ%=\\n$LSJ%=:\"\n-  [(set_attr \"type\" \"ibr\")])\n-\n-(define_split\n-  [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)]\n-  \"TARGET_EXPLICIT_RELOCS && TARGET_ABI_OSF\n-   && prev_nonnote_insn (insn) == operands[0]\"\n-  [(const_int 0)]\n-  \"\n-{\n-  emit_note (NOTE_INSN_DELETED);\n-  DONE;\n-}\")\n-\n-(define_insn \"*builtin_setjmp_receiver_1\"\n+(define_expand \"builtin_setjmp_receiver\"\n   [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)]\n   \"TARGET_ABI_OSF\"\n-  \"br $27,$LSJ%=\\n$LSJ%=:\\;ldgp $29,0($27)\"\n-  [(set_attr \"length\" \"12\")\n-   (set_attr \"type\" \"multi\")])\n+  \"\")\n \n-(define_expand \"builtin_setjmp_receiver_er\"\n-  [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)\n-   (set (match_dup 1)\n+(define_insn_and_split \"*builtin_setjmp_receiver_1\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR)]\n+  \"TARGET_ABI_OSF\"\n+{\n+  if (TARGET_EXPLICIT_RELOCS)\n+    return \"#\";\n+  else\n+    return \"br $27,$LSJ%=\\n$LSJ%=:\\;ldgp $29,0($27)\";\n+}\n+  \"&& TARGET_EXPLICIT_RELOCS && reload_completed\"\n+  [(set (match_dup 1)\n \t(unspec_volatile:DI [(match_dup 2) (match_dup 3)] UNSPECV_LDGP1))\n    (set (match_dup 1)\n \t(unspec:DI [(match_dup 1) (match_dup 3)] UNSPEC_LDGP2))]\n-  \"\"\n {\n+  if (prev_nonnote_insn (curr_insn) != XEXP (operands[0], 0))\n+    emit_insn (gen_rtx_UNSPEC_VOLATILE (VOIDmode, gen_rtvec (1, operands[0]),\n+\t\t\t\t\tUNSPECV_SETJMPR_ER));\n   operands[1] = pic_offset_table_rtx;\n   operands[2] = gen_rtx_REG (Pmode, 27);\n   operands[3] = GEN_INT (alpha_next_sequence_number++);\n-})\n-\n-(define_expand \"builtin_setjmp_receiver\"\n-  [(unspec_volatile [(label_ref (match_operand 0 \"\" \"\"))] UNSPECV_SETJMPR)]\n-  \"TARGET_ABI_OSF\"\n-{\n-  if (TARGET_EXPLICIT_RELOCS)\n-    {\n-      emit_insn (gen_builtin_setjmp_receiver_er (operands[0]));\n-      DONE;\n-    }\n-})\n+}\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multi\")])\n \n-(define_expand \"exception_receiver_er\"\n-  [(set (match_dup 0)\n-\t(unspec_volatile:DI [(match_dup 1) (match_dup 2)] UNSPECV_LDGP1))\n-   (set (match_dup 0)\n-\t(unspec:DI [(match_dup 0) (match_dup 2)] UNSPEC_LDGP2))]\n-  \"\"\n-{\n-  operands[0] = pic_offset_table_rtx;\n-  operands[1] = gen_rtx_REG (Pmode, 26);\n-  operands[2] = GEN_INT (alpha_next_sequence_number++);\n-})\n+(define_insn \"*builtin_setjmp_receiver_er_sl_1\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR_ER)]\n+  \"TARGET_ABI_OSF && TARGET_EXPLICIT_RELOCS && TARGET_AS_CAN_SUBTRACT_LABELS\"\n+  \"lda $27,$LSJ%=-%l0($27)\\n$LSJ%=:\")\n+  \n+(define_insn \"*builtin_setjmp_receiver_er_1\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_SETJMPR_ER)]\n+  \"TARGET_ABI_OSF && TARGET_EXPLICIT_RELOCS\"\n+  \"br $27,$LSJ%=\\n$LSJ%=:\"\n+  [(set_attr \"type\" \"ibr\")])\n \n (define_expand \"exception_receiver\"\n   [(unspec_volatile [(match_dup 0)] UNSPECV_EHR)]\n   \"TARGET_ABI_OSF\"\n {\n   if (TARGET_LD_BUGGY_LDGP)\n     operands[0] = alpha_gp_save_rtx ();\n-  else if (TARGET_EXPLICIT_RELOCS)\n-    {\n-      emit_insn (gen_exception_receiver_er ());\n-      DONE;\n-    }\n   else\n     operands[0] = const0_rtx;\n })\n \n-(define_insn \"*exception_receiver_1\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_EHR)]\n-  \"! TARGET_LD_BUGGY_LDGP\"\n-  \"ldgp $29,0($26)\"\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"multi\")])\n-\n (define_insn \"*exception_receiver_2\"\n   [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")] UNSPECV_EHR)]\n-  \"TARGET_LD_BUGGY_LDGP\"\n+  \"TARGET_ABI_OSF && TARGET_LD_BUGGY_LDGP\"\n   \"ldq $29,%0\"\n   [(set_attr \"type\" \"ild\")])\n \n+(define_insn_and_split \"*exception_receiver_1\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_EHR)]\n+  \"TARGET_ABI_OSF\"\n+{\n+  if (TARGET_EXPLICIT_RELOCS)\n+    return \"ldah $29,0($26)\\t\\t!gpdisp!%*\\;lda $29,0($29)\\t\\t!gpdisp!%*\";\n+  else\n+    return \"ldgp $29,0($26)\";\n+}\n+  \"&& TARGET_EXPLICIT_RELOCS && reload_completed\"\n+  [(set (match_dup 0)\n+\t(unspec_volatile:DI [(match_dup 1) (match_dup 2)] UNSPECV_LDGP1))\n+   (set (match_dup 0)\n+\t(unspec:DI [(match_dup 0) (match_dup 2)] UNSPEC_LDGP2))]\n+{\n+  operands[0] = pic_offset_table_rtx;\n+  operands[1] = gen_rtx_REG (Pmode, 26);\n+  operands[2] = GEN_INT (alpha_next_sequence_number++);\n+}\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multi\")])\n+\n (define_expand \"nonlocal_goto_receiver\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_BLOCKAGE)\n    (set (reg:DI 27) (mem:DI (reg:DI 29)))"}]}