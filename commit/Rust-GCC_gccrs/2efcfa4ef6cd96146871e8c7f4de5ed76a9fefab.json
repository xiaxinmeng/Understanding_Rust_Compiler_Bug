{"sha": "2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmY2ZhNGVmNmNkOTYxNDY4NzFlOGM3ZjRkZTVlZDc2YTlmZWZhYg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-12-04T14:11:45Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-12-04T14:11:45Z"}, "message": "re PR middle-end/17909 (ICE: verifiy_stms failed)\n\n2004-12-04  Andrew  Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/17909\n        * builtins.c (fold_builtin_next_arg): Export and return true\n        when there is a warning or an error.\n        (expand_builtin_va_start): When fold_builtin_next_arg returns true,\n        return const0_rtx.\n        (expand_builtin): Likewise.\n        * gimplify.c (gimplify_call_expr): Error out if there is not\n        enough arguments to va_start. Call fold_builtin_next_arg also\n        on the second argument.\n        * tree.h (fold_builtin_next_arg): Prototype.\n\nFrom-SVN: r91727", "tree": {"sha": "cbf7c78afc4e2cbb6aeed7f265db741b9c045876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbf7c78afc4e2cbb6aeed7f265db741b9c045876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/comments", "author": null, "committer": null, "parents": [{"sha": "e4887861341b842247647d2a5e2e45b45c358895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4887861341b842247647d2a5e2e45b45c358895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4887861341b842247647d2a5e2e45b45c358895"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "7dbfb2099cb78388169730bcbb16b0d8384f589b", "filename": "gcc/builtins.c", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "patch": "@@ -185,7 +185,6 @@ static tree fold_builtin_strcat (tree);\n static tree fold_builtin_strncat (tree);\n static tree fold_builtin_strspn (tree);\n static tree fold_builtin_strcspn (tree);\n-static void fold_builtin_next_arg (tree);\n static tree fold_builtin_sprintf (tree, int);\n \n \n@@ -3868,7 +3867,10 @@ expand_builtin_va_start (tree arglist)\n   if (TREE_CHAIN (chain))\n     error (\"too many arguments to function %<va_start%>\");\n \n-  fold_builtin_next_arg (chain);\n+  if (fold_builtin_next_arg (chain))\n+    {\n+      return const0_rtx;\n+    }\n \n   nextarg = expand_builtin_next_arg (chain);\n   valist = stabilize_va_list (TREE_VALUE (arglist), 1);\n@@ -5249,7 +5251,8 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \n       /* Return the address of the first anonymous stack arg.  */\n     case BUILT_IN_NEXT_ARG:\n-      fold_builtin_next_arg (arglist);\n+      if (fold_builtin_next_arg (arglist))\n+        return const0_rtx;\n       return expand_builtin_next_arg (arglist);\n \n     case BUILT_IN_CLASSIFY_TYPE:\n@@ -8650,15 +8653,21 @@ fold_builtin_fputs (tree arglist, bool ignore, bool unlocked, tree len)\n   return build_function_call_expr (fn, arglist);\n }\n \n-static void\n+/* Fold the new_arg's agruments (ARGLIST). Returns true if there was an error\n+   produced.  False otherwise.  This is done so that we don't output the error\n+   or warning twice or three times.  */\n+bool\n fold_builtin_next_arg (tree arglist)\n {\n   tree fntype = TREE_TYPE (current_function_decl);\n \n   if (TYPE_ARG_TYPES (fntype) == 0\n       || (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n \t  == void_type_node))\n-    error (\"%<va_start%> used in function with fixed args\");\n+    {\n+      error (\"%<va_start%> used in function with fixed args\");\n+      return true;\n+    }\n   else if (arglist)\n     {\n       tree last_parm = tree_last (DECL_ARGUMENTS (current_function_decl));\n@@ -8674,13 +8683,23 @@ fold_builtin_next_arg (tree arglist)\n \t     || TREE_CODE (arg) == INDIRECT_REF)\n \targ = TREE_OPERAND (arg, 0);\n       if (arg != last_parm)\n-\twarning (\"second parameter of %<va_start%> not last named argument\");\n+        {\n+\t  /* FIXME: Sometimes with the tree optimizaters we can get the not the last argument\n+\t     even though the user used the last argument.  We just warn and set the arg to be\n+\t     the last argument so that we will get wrong-code because of it.  */\n+\t  arg = last_parm;\n+\t  warning (\"second parameter of %<va_start%> not last named argument\");\n+\t}\n       TREE_VALUE (arglist) = arg;\n     }\n   else\n-    /* Evidently an out of date version of <stdarg.h>; can't validate\n-       va_start's second argument, but can still work as intended.  */\n-    warning (\"%<__builtin_next_arg%> called without an argument\");\n+    {\n+      /* Evidently an out of date version of <stdarg.h>; can't validate\n+\t va_start's second argument, but can still work as intended.  */\n+      warning (\"%<__builtin_next_arg%> called without an argument\");\n+      return true;\n+    }\n+  return false;\n }\n \n "}, {"sha": "6a9e3b140c7a379bc332b0a332a280d82a17dd00", "filename": "gcc/gimplify.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "patch": "@@ -1744,9 +1744,25 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n \t}\n \n       if (DECL_FUNCTION_CODE (decl) == BUILT_IN_VA_START)\n-\t/* Avoid gimplifying the second argument to va_start, which needs\n-\t   to be the plain PARM_DECL.  */\n-\treturn gimplify_arg (&TREE_VALUE (TREE_OPERAND (*expr_p, 1)), pre_p);\n+        {\n+\t  tree arglist = TREE_OPERAND (*expr_p, 1);\n+\t  \n+\t  if (!arglist || !TREE_CHAIN (arglist))\n+\t    {\n+\t      error (\"too few arguments to function %<va_start%>\");\n+\t      *expr_p = build_empty_stmt ();\n+\t      return GS_OK;\n+\t    }\n+\t  \n+\t  if (fold_builtin_next_arg (TREE_CHAIN (arglist)))\n+\t    {\n+\t      *expr_p = build_empty_stmt ();\n+\t      return GS_OK;\n+\t    }\n+\t  /* Avoid gimplifying the second argument to va_start, which needs\n+\t     to be the plain PARM_DECL.  */\n+\t  return gimplify_arg (&TREE_VALUE (TREE_OPERAND (*expr_p, 1)), pre_p);\n+\t}\n     }\n \n   /* There is a sequence point before the call, so any side effects in"}, {"sha": "a6963796c312408041df8a37f19ea24d0e53e82b", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=2efcfa4ef6cd96146871e8c7f4de5ed76a9fefab", "patch": "@@ -3535,6 +3535,7 @@ extern tree fold_builtin (tree, bool);\n extern tree fold_builtin_fputs (tree, bool, bool, tree);\n extern tree fold_builtin_strcpy (tree, tree);\n extern tree fold_builtin_strncpy (tree, tree);\n+extern bool fold_builtin_next_arg (tree);\n extern enum built_in_function builtin_mathfn_code (tree);\n extern tree build_function_call_expr (tree, tree);\n extern tree mathfn_built_in (tree, enum built_in_function fn);"}]}