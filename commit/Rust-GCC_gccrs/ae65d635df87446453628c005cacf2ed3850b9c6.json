{"sha": "ae65d635df87446453628c005cacf2ed3850b9c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2NWQ2MzVkZjg3NDQ2NDUzNjI4YzAwNWNhY2YyZWQzODUwYjljNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T12:55:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-20T12:55:43Z"}, "message": "[multiple changes]\n\n2009-07-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting\n\n\t* einfo.ads: Minor reformatting\n\tComponent_Bit_Offset is no longer considered obsolescent\n\n2009-07-20  Nicolas Roche  <roche@adacore.com>\n\n\t* a-calend.adb: Redefine time_t as signed integer with same size as\n\tAddress type.\n\t* s-os_lib.ads: Redefine OS_Time as signed integer with same size as\n\tAddress type\n\t* adaint.h: On Windows 64bits declare OS_Time as long long instead of\n\tlong\n\n2009-07-20  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_tss.adb (Init_Proc): Add missing support for non-default C++\n\tconstructors that have anonymous access type formals.\n\n\t* sem_res.adb (Resolve_Actuals): Disable checks associated with Ada\n\tclass-wide arguments in case of imported C++ subprograms.\n\n\t* exp_ch3.adb (Build_Initialization_Call): Add assertion.\n\n2009-07-20  Sergey Rybin  <rybin@adacore.com>\n\n\t* vms_data.ads: Update qualifiers.\n\nFrom-SVN: r149810", "tree": {"sha": "fa9429c3abb0b2200bdc7151416d825424d673a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa9429c3abb0b2200bdc7151416d825424d673a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae65d635df87446453628c005cacf2ed3850b9c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae65d635df87446453628c005cacf2ed3850b9c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae65d635df87446453628c005cacf2ed3850b9c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae65d635df87446453628c005cacf2ed3850b9c6/comments", "author": null, "committer": null, "parents": [{"sha": "5132708f8a29709b74d5eedb36c3414cdf44fa96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5132708f8a29709b74d5eedb36c3414cdf44fa96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5132708f8a29709b74d5eedb36c3414cdf44fa96"}], "stats": {"total": 118, "additions": 91, "deletions": 27}, "files": [{"sha": "b0014dbf33e8bef49787f91a6735d4ed623d005a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -1,3 +1,33 @@\n+2009-07-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting\n+\n+\t* einfo.ads: Minor reformatting\n+\tComponent_Bit_Offset is no longer considered obsolescent\n+\n+2009-07-20  Nicolas Roche  <roche@adacore.com>\n+\n+\t* a-calend.adb: Redefine time_t as signed integer with same size as\n+\tAddress type.\n+\t* s-os_lib.ads: Redefine OS_Time as signed integer with same size as\n+\tAddress type\n+\t* adaint.h: On Windows 64bits declare OS_Time as long long instead of\n+\tlong\n+\n+2009-07-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_tss.adb (Init_Proc): Add missing support for non-default C++\n+\tconstructors that have anonymous access type formals.\n+\n+\t* sem_res.adb (Resolve_Actuals): Disable checks associated with Ada\n+\tclass-wide arguments in case of imported C++ subprograms.\n+\n+\t* exp_ch3.adb (Build_Initialization_Call): Add assertion.\n+\n+2009-07-20  Sergey Rybin  <rybin@adacore.com>\n+\n+\t* vms_data.ads: Update qualifiers.\n+\n 2009-07-20  Robert Dewar  <dewar@adacore.com>\n \n \t* einfo.ads, switch.adb, gnatls.adb, inline.adb, sem_ch13.adb: Minor"}, {"sha": "1a49c58888adddc7e27b276fa8904ea412e9e435", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -1471,7 +1471,9 @@ package body Ada.Calendar is\n       subtype long is Long_Integer;\n       type long_Pointer is access all long;\n \n-      subtype time_t is long;\n+      type time_t is\n+        range -(2 ** (Standard'Address_Size - Integer'(1))) ..\n+              +(2 ** (Standard'Address_Size - Integer'(1)) - 1);\n       type time_t_Pointer is access all time_t;\n \n       procedure localtime_tzoff"}, {"sha": "f5c283a2228f78dc4b5fbab490a7dfa091f95a23", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -62,7 +62,12 @@\n #define STRUCT_STAT struct stat\n #endif\n \n-typedef long OS_Time; /* Type corresponding to GNAT.OS_Lib.OS_Time */\n+/* Type corresponding to GNAT.OS_Lib.OS_Time */\n+#if defined (_WIN64)\n+typedef long long OS_Time;\n+#else\n+typedef long OS_Time;\n+#endif\n \n extern int    __gnat_max_path_len;\n extern OS_Time __gnat_current_time\t\t   (void);"}, {"sha": "5fa7194b2ac4f1cfbd55ebf5a75ac8f0554d09bf", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -545,12 +545,10 @@ package Einfo is\n --       at run-time (this happens if fields of a record have variable\n --       lengths). See package Layout for details of these values.\n --\n---       Note: this field is obsolescent, to be eventually replaced entirely\n---       by Normalized_First_Bit and Normalized_Position, but for the moment,\n---       gigi is still using (and back annotating) this field, and gigi does\n---       not know about the new fields. For the front end layout case, the\n---       Component_Bit_Offset field is only set if it is static, and otherwise\n---       the new Normalized_First_Bit and Normalized_Position fields are used.\n+--       Note: Component_Bit_Offset is redundant with respect to the fields\n+--       Normalized_First_Bit and Normalized_Position, and could in principle\n+--       be eliminated, but it is convenient in several situations, including\n+--       use in Gigi, to have this redundant field.\n \n --    Component_Clause (Node13)\n --       Present in record components and discriminants. If a record\n@@ -3094,23 +3092,23 @@ package Einfo is\n --    Packed_Array_Type (Node23)\n --       Present in array types and subtypes, including the string literal\n --       subtype case, if the corresponding type is packed (either bit packed\n---       or packed to eliminate holes in non-contiguous enumeration type\n---       index types). References the type used to represent the packed array,\n---       which is either a modular type for short static arrays, or an\n---       array of System.Unsigned. Note that in some situations (internal\n---       types, and references to fields of variant records), it is not\n---       always possible to construct this type in advance of its use. If\n---       Packed_Array_Type is empty, then the necessary type is declared\n---       on the fly for each reference to the array.\n+--       or packed to eliminate holes in non-contiguous enumeration type index\n+--       types). References the type used to represent the packed array, which\n+--       is either a modular type for short static arrays, or an array of\n+--       System.Unsigned. Note that in some situations (internal types, and\n+--       references to fields of variant records), it is not always possible\n+--       to construct this type in advance of its use. If Packed_Array_Type\n+--       is empty, then the necessary type is declared on the fly for each\n+--       reference to the array.\n \n --    Parameter_Mode (synthesized)\n --       Applies to formal parameter entities. This is a synonym for Ekind,\n --       used when obtaining the formal kind of a formal parameter (the result\n --       is one of E_[In/Out/In_Out]_Parameter)\n \n --    Parent_Subtype (Node19)\n---       Present in E_Record_Type. Points to the subtype to use for a\n---       field that references the parent record.\n+--       Present in E_Record_Type. Points to the subtype to use for a field\n+--       that references the parent record.\n \n --    Postcondition_Proc (Node8)\n --       Present only in procedure entities, saves the entity of the generated\n@@ -3135,13 +3133,13 @@ package Einfo is\n --       protected types. Set to the original private component.\n \n --    Private_Dependents (Elist18)\n---       Present in private (sub)types. Records the subtypes of the\n---       private type, derivations from it, and records and arrays\n---       with components dependent on the type.\n+--       Present in private (sub)types. Records the subtypes of the private\n+--       type, derivations from it, and records and arrays with components\n+--       dependent on the type.\n --\n---       The subtypes are traversed when installing and deinstalling\n---       (the full view of) a private type in order to ensure correct\n---       view of the subtypes.\n+--       The subtypes are traversed when installing and deinstalling (the full\n+--       view of) a private type in order to ensure correct view of the\n+--       subtypes.\n --\n --       Used in similar fashion for incomplete types: holds list of subtypes\n --       of these incomplete types that have discriminant constraints. The"}, {"sha": "0c55bb32e05fc432d9ef32449fe0e91dbd5bcffe", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -1398,6 +1398,7 @@ package body Exp_Ch3 is\n          Proc := Base_Init_Proc (Typ, Entity (Name (Constructor_Ref)));\n       end if;\n \n+      pragma Assert (Present (Proc));\n       Init_Type      := Etype (First_Formal (Proc));\n       Full_Init_Type := Underlying_Type (Init_Type);\n "}, {"sha": "8d27395dddea173634dacdb9623d9697ac583cc5", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -243,7 +243,19 @@ package body Exp_Tss is\n                while Present (E1) and then Present (E2) loop\n                   if Chars (E1) /= Chars (E2)\n                     or else Ekind (E1) /= Ekind (E2)\n-                    or else Etype (E1) /= Etype (E2)\n+                  then\n+                     exit;\n+\n+                  elsif Ekind (Etype (E1)) /= E_Anonymous_Access_Type\n+                    and then Ekind (Etype (E2)) /= E_Anonymous_Access_Type\n+                    and then Etype (E1) /= Etype (E2)\n+                  then\n+                     exit;\n+\n+                  elsif Ekind (Etype (E1)) = E_Anonymous_Access_Type\n+                    and then Ekind (Etype (E2)) = E_Anonymous_Access_Type\n+                    and then Directly_Designated_Type (Etype (E1))\n+                               /= Directly_Designated_Type (Etype (E2))\n                   then\n                      exit;\n                   end if;"}, {"sha": "b77b3f012666499ac69146243ea88ac173dd66ec", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -879,7 +879,9 @@ private\n    pragma Import (C, Directory_Separator, \"__gnat_dir_separator\");\n    pragma Import (C, Current_Time, \"__gnat_current_time\");\n \n-   type OS_Time is new Long_Integer;\n+   type OS_Time is\n+     range -(2 ** (Standard'Address_Size - Integer'(1))) ..\n+           +(2 ** (Standard'Address_Size - Integer'(1)) - 1);\n    --  Type used for timestamps in the compiler. This type is used to hold\n    --  time stamps, but may have a different representation than C's time_t.\n    --  This type needs to match the declaration of OS_Time in adaint.h."}, {"sha": "40dd75abfea2c13731bff9bd909e32c943aa1e51", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -2731,7 +2731,6 @@ package body Sem_Ch13 is\n                      if Has_Discriminants (Defining_Identifier (Clist)) then\n                         C2_Ent :=\n                           First_Discriminant (Defining_Identifier (Clist));\n-\n                         while Present (C2_Ent) loop\n                            exit when C1_Ent = C2_Ent;\n                            Check_Component_Overlap (C1_Ent, C2_Ent);"}, {"sha": "e6c4f59def25dcf571cb6d380c9a78e15f826c0a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -3662,6 +3662,12 @@ package body Sem_Res is\n                                   Is_Class_Wide_Type (Etype (Prefix (A)))))\n               and then not Is_Class_Wide_Type (Designated_Type (F_Typ))\n               and then not Is_Controlling_Formal (F)\n+\n+              --  Disable these checks in imported C++ subprograms\n+\n+              and then not (Is_Imported (Entity (Name (N)))\n+                              and then Convention (Entity (Name (N)))\n+                                         = Convention_CPP)\n             then\n                Error_Msg_N\n                  (\"access to class-wide argument not allowed here!\", A);"}, {"sha": "9302175f37b78588b36ad508982f93c77006a028", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae65d635df87446453628c005cacf2ed3850b9c6/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=ae65d635df87446453628c005cacf2ed3850b9c6", "patch": "@@ -6556,6 +6556,14 @@ package VMS_Data is\n    --\n    --  Avoid raising PROGRAM_ERROR in the generated program unit stubs.\n \n+   S_Stub_No_Head : aliased constant S := \"/NO_LOCAL_HEADER \"             &\n+                                          \"--no-local-header\";\n+   --        /NONO_LOCAL_HEADER (D)\n+   --        /NO_LOCAL_HEADER\n+   --\n+   --  Do not put local comment header before body stub for a local progran\n+   --  unit\n+\n    S_Stub_Output  : aliased constant S := \"/OUTPUT=@\"                      &\n                                             \"-o@\";\n    --        /OUTPUT=filespec\n@@ -6653,6 +6661,7 @@ package VMS_Data is\n                       S_Stub_Output     'Access,\n                       S_Stub_Project    'Access,\n                       S_Stub_No_Exc     'Access,\n+                      S_Stub_No_Head    'Access,\n                       S_Stub_Quiet      'Access,\n                       S_Stub_Search     'Access,\n                       S_Stub_Subdirs    'Access,"}]}