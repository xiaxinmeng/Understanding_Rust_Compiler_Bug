{"sha": "1bae456237b6460d61718df2cacaa8e9d7fd3725", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhZTQ1NjIzN2I2NDYwZDYxNzE4ZGYyY2FjYWE4ZTlkN2ZkMzcyNQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-08-08T12:22:02Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-08T12:22:02Z"}, "message": "g-comlin.adb: Minor code reorganization Minor reformatting\n\n2008-08-08  Robert Dewar  <dewar@adacore.com>\n\n\t* g-comlin.adb: Minor code reorganization\n\tMinor reformatting\n\nFrom-SVN: r138866", "tree": {"sha": "d65992e62f3c4e6ff52b5a082accfc388d8dcdf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d65992e62f3c4e6ff52b5a082accfc388d8dcdf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bae456237b6460d61718df2cacaa8e9d7fd3725", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bae456237b6460d61718df2cacaa8e9d7fd3725", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bae456237b6460d61718df2cacaa8e9d7fd3725", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bae456237b6460d61718df2cacaa8e9d7fd3725/comments", "author": null, "committer": null, "parents": [{"sha": "0f336c35d5317473e1d5536ef57573f714323ec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f336c35d5317473e1d5536ef57573f714323ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f336c35d5317473e1d5536ef57573f714323ec6"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "11ed78a34762e277d1bfaded61562d93b9230877", "filename": "gcc/ada/g-comlin.adb", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bae456237b6460d61718df2cacaa8e9d7fd3725/gcc%2Fada%2Fg-comlin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bae456237b6460d61718df2cacaa8e9d7fd3725/gcc%2Fada%2Fg-comlin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.adb?ref=1bae456237b6460d61718df2cacaa8e9d7fd3725", "patch": "@@ -1143,16 +1143,18 @@ package body GNAT.Command_Line is\n    is\n       Ret : Ada.Strings.Unbounded.Unbounded_String;\n       use type Ada.Strings.Unbounded.Unbounded_String;\n+\n    begin\n       if Config = null or else Config.Switches = null then\n          return \"\";\n       end if;\n \n       for J in Config.Switches'Range loop\n          if Config.Switches (J) (Config.Switches (J)'First) = Switch_Char then\n-            Ret := Ret & \" \" &\n-              Config.Switches (J)\n-                (Config.Switches (J)'First + 1 .. Config.Switches (J)'Last);\n+            Ret :=\n+              Ret & \" \" &\n+                Config.Switches (J)\n+                  (Config.Switches (J)'First + 1 .. Config.Switches (J)'Last);\n          else\n             Ret := Ret & \" \" & Config.Switches (J).all;\n          end if;\n@@ -1259,13 +1261,16 @@ package body GNAT.Command_Line is\n \n                   if not Is_Section then\n                      if Section = null then\n+\n                         --  Workaround some weird cases: some switches may\n                         --  expect parameters, but have the same value as\n                         --  longer switches: -gnaty3 (-gnaty, parameter=3) and\n                         --  -gnatya (-gnatya, no parameter).\n+\n                         --  So we are calling add_switch here with parameter\n                         --  attached. This will be anyway correctly handled by\n                         --  Add_Switch if -gnaty3 is actually furnished.\n+\n                         if Separator (Parser) = ASCII.NUL then\n                            Add_Switch\n                              (Cmd, Sw & Parameter (Parser), \"\");\n@@ -1295,6 +1300,7 @@ package body GNAT.Command_Line is\n \n                   --  Add it with no parameter, if that's the way the user\n                   --  wants it.\n+\n                   --  Specify the separator in all cases, as the switch might\n                   --  need to be unaliased, and the alias might contain\n                   --  switches with parameters.\n@@ -1406,9 +1412,11 @@ package body GNAT.Command_Line is\n         (Prefix : String;\n          Group  : String) return Boolean\n       is\n-         Idx   : Natural := Group'First;\n+         Idx   : Natural;\n          Found : Boolean;\n+\n       begin\n+         Idx := Group'First;\n          while Idx <= Group'Last loop\n             Found := False;\n \n@@ -1424,17 +1432,23 @@ package body GNAT.Command_Line is\n \n                begin\n                   if Sw'Length >= Prefix'Length\n-                  --  Verify that sw starts with Prefix\n-                    and then Looking_At (Sw, Sw'First, Prefix)\n-                  --  Verify that the group starts with sw\n-                    and then Looking_At (Full, Full'First, Sw)\n+\n+                     --  Verify that sw starts with Prefix\n+\n+                     and then Looking_At (Sw, Sw'First, Prefix)\n+\n+                     --  Verify that the group starts with sw\n+\n+                     and then Looking_At (Full, Full'First, Sw)\n                   then\n                      Last := Idx + Sw'Length - Prefix'Length - 1;\n                      Param := Last + 1;\n \n                      if Can_Have_Parameter (Cmd.Config.Switches (S).all) then\n+\n                         --  Include potential parameter to the recursive call.\n                         --  Only numbers are allowed.\n+\n                         while Last < Group'Last\n                           and then Group (Last + 1) in '0' .. '9'\n                         loop\n@@ -1456,12 +1470,14 @@ package body GNAT.Command_Line is\n                            --  a parameter is detected in the switch, as this\n                            --  is a way to correctly identify such a parameter\n                            --  in aliases.\n+\n                            return False;\n                         end if;\n \n                         Found := True;\n \n                         --  Recursive call, using the detected parameter if any\n+\n                         if Last >= Param then\n                            For_Each_Simple_Switch\n                              (Cmd,\n@@ -1871,16 +1887,19 @@ package body GNAT.Command_Line is\n \n       function Compatible_Parameter (Param : String_Access) return Boolean is\n       begin\n+         --  No parameter OK\n+\n          if Param = null then\n-            --  No parameter, OK\n             return True;\n \n+         --  We need parameters without separators\n+\n          elsif Param (Param'First) /= ASCII.NUL then\n-            --  We need parameters without separators...\n             return False;\n \n+         --  Parameters must be all digits\n+\n          else\n-            --  We need number only parameters.\n             for J in Param'First + 1 .. Param'Last loop\n                if Param (J) not in '0' .. '9' then\n                   return False;\n@@ -1889,13 +1908,16 @@ package body GNAT.Command_Line is\n \n             return True;\n          end if;\n-\n       end Compatible_Parameter;\n \n-      Group   : Ada.Strings.Unbounded.Unbounded_String;\n-      First   : Natural;\n+      --  Local declarations\n+\n+      Group : Ada.Strings.Unbounded.Unbounded_String;\n+      First : Natural;\n       use type Ada.Strings.Unbounded.Unbounded_String;\n \n+   --  Start of processing for Group_Switches\n+\n    begin\n       if Cmd.Config = null\n         or else Cmd.Config.Prefixes = null\n@@ -1914,24 +1936,26 @@ package body GNAT.Command_Line is\n                 (Result (C).all, Result (C)'First, Cmd.Config.Prefixes (P).all)\n             then\n                --  If we are still in the same section, group the switches\n+\n                if First = 0\n                  or else\n                    (Sections (C) = null\n-                    and then Sections (First) = null)\n+                     and then Sections (First) = null)\n                  or else\n                    (Sections (C) /= null\n-                    and then Sections (First) /= null\n-                    and then Sections (C).all = Sections (First).all)\n+                     and then Sections (First) /= null\n+                     and then Sections (C).all = Sections (First).all)\n                then\n                   Group :=\n                     Group &\n                       Result (C)\n                         (Result (C)'First + Cmd.Config.Prefixes (P)'Length ..\n-                           Result (C)'Last);\n+                         Result (C)'Last);\n \n                   if Params (C) /= null then\n-                     Group := Group &\n-                       Params (C) (Params (C)'First + 1 .. Params (C)'Last);\n+                     Group :=\n+                       Group &\n+                         Params (C) (Params (C)'First + 1 .. Params (C)'Last);\n                      Free (Params (C));\n                   end if;\n \n@@ -1940,9 +1964,11 @@ package body GNAT.Command_Line is\n                   end if;\n \n                   Free (Result (C));\n+\n                else\n                   --  We changed section: we put the grouped switches to the\n                   --  first place, on continue with the new section.\n+\n                   Result (First) :=\n                     new String'\n                       (Cmd.Config.Prefixes (P).all &"}]}