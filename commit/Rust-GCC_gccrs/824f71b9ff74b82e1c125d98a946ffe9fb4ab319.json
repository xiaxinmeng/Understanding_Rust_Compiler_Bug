{"sha": "824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0ZjcxYjlmZjc0YjgyZTFjMTI1ZDk4YTk0NmZmZTlmYjRhYjMxOQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-07-20T12:56:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-07-20T12:56:41Z"}, "message": "tree-dfa.c (collect_dfa_stats): Simplify.\n\n2012-07-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-dfa.c (collect_dfa_stats): Simplify.\n\t* tree-ssa-structalias.c (compute_may_aliases): Do not dump\n\treferenced vars.\n\t* cfgexpand.c (estimated_stack_frame_size): Walk over local\n\tdecls instead of referenced vars.\n\t* tree-ssa.c (delete_tree_ssa): Simplify.\n\t* tree-tailcall.c (find_tail_calls): Walk over local decls\n\tinstead of referenced vars.\n\t(add_virtual_phis): Remove.\n\t(tree_optimize_tail_calls_1): Instead mark the virtual operand\n\tfor renaming.\n\nFrom-SVN: r189718", "tree": {"sha": "0ce8a7a96625c3f82c59f92dc328c670a5145386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ce8a7a96625c3f82c59f92dc328c670a5145386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c4669594047cb4a711e77a0ea53c139d9ed16f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4669594047cb4a711e77a0ea53c139d9ed16f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4669594047cb4a711e77a0ea53c139d9ed16f31"}], "stats": {"total": 85, "additions": 27, "deletions": 58}, "files": [{"sha": "79a9ec77d3d4ea4ccc903f835f3bbbe6c7f66576", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "patch": "@@ -1,3 +1,17 @@\n+2012-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-dfa.c (collect_dfa_stats): Simplify.\n+\t* tree-ssa-structalias.c (compute_may_aliases): Do not dump\n+\treferenced vars.\n+\t* cfgexpand.c (estimated_stack_frame_size): Walk over local\n+\tdecls instead of referenced vars.\n+\t* tree-ssa.c (delete_tree_ssa): Simplify.\n+\t* tree-tailcall.c (find_tail_calls): Walk over local decls\n+\tinstead of referenced vars.\n+\t(add_virtual_phis): Remove.\n+\t(tree_optimize_tail_calls_1): Instead mark the virtual operand\n+\tfor renaming.\n+\n 2012-07-20  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* basic-block.h (BB_FLAGS_TO_PRESERVE): New define."}, {"sha": "96c2e2ed8a2079ee148e7279c147db6ff7a1e01a", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "patch": "@@ -1420,15 +1420,14 @@ estimated_stack_frame_size (struct cgraph_node *node)\n   size_t i;\n   tree var;\n   tree old_cur_fun_decl = current_function_decl;\n-  referenced_var_iterator rvi;\n   struct function *fn = DECL_STRUCT_FUNCTION (node->symbol.decl);\n \n   current_function_decl = node->symbol.decl;\n   push_cfun (fn);\n \n-  gcc_checking_assert (gimple_referenced_vars (fn));\n-  FOR_EACH_REFERENCED_VAR (fn, var, rvi)\n-    size += expand_one_var (var, true, false);\n+  FOR_EACH_LOCAL_DECL (fn, i, var)\n+    if (auto_var_in_fn_p (var, fn->decl))\n+      size += expand_one_var (var, true, false);\n \n   if (stack_vars_num > 0)\n     {"}, {"sha": "f8ebfd2697299a5f993a4dc298b428ec8fcb272a", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "patch": "@@ -371,17 +371,13 @@ static void\n collect_dfa_stats (struct dfa_stats_d *dfa_stats_p ATTRIBUTE_UNUSED)\n {\n   basic_block bb;\n-  referenced_var_iterator vi;\n-  tree var;\n \n   gcc_assert (dfa_stats_p);\n \n   memset ((void *)dfa_stats_p, 0, sizeof (struct dfa_stats_d));\n \n   /* Count all the variable annotations.  */\n-  FOR_EACH_REFERENCED_VAR (cfun, var, vi)\n-    if (var_ann (var))\n-      dfa_stats_p->num_var_anns++;\n+  dfa_stats_p->num_var_anns = htab_elements (gimple_referenced_vars (cfun));\n \n   /* Walk all the statements in the function counting references.  */\n   FOR_EACH_BB (bb)"}, {"sha": "5c229e942676b329f2beb95c8a70231ae7af129e", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "patch": "@@ -6736,9 +6736,6 @@ compute_may_aliases (void)\n \n \t  /* But still dump what we have remaining it.  */\n \t  dump_alias_info (dump_file);\n-\n-\t  if (dump_flags & TDF_DETAILS)\n-\t    dump_referenced_vars (dump_file);\n \t}\n \n       return 0;\n@@ -6751,12 +6748,7 @@ compute_may_aliases (void)\n \n   /* Debugging dumps.  */\n   if (dump_file)\n-    {\n-      dump_alias_info (dump_file);\n-\n-      if (dump_flags & TDF_DETAILS)\n-\tdump_referenced_vars (dump_file);\n-    }\n+    dump_alias_info (dump_file);\n \n   /* Deallocate memory used by aliasing data structures and the internal\n      points-to solution.  */"}, {"sha": "9acb03549410728937e04aa2f1f0ae2ea0ebc91c", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "patch": "@@ -1156,13 +1156,8 @@ delete_tree_ssa (void)\n   /* Remove annotations from every referenced local variable.  */\n   FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n     {\n-      if (is_global_var (var))\n-\tcontinue;\n-      if (var_ann (var))\n-\t{\n-\t  ggc_free (var_ann (var));\n-\t  *DECL_VAR_ANN_PTR (var) = NULL;\n-\t}\n+      ggc_free (var_ann (var));\n+      *DECL_VAR_ANN_PTR (var) = NULL;\n     }\n   htab_delete (gimple_referenced_vars (cfun));\n   cfun->gimple_df->referenced_vars = NULL;"}, {"sha": "ec77c5fbeee2dadf93b5e6361eba80b7370c565a", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824f71b9ff74b82e1c125d98a946ffe9fb4ab319/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=824f71b9ff74b82e1c125d98a946ffe9fb4ab319", "patch": "@@ -390,7 +390,6 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n   basic_block abb;\n   size_t idx;\n   tree var;\n-  referenced_var_iterator rvi;\n \n   if (!single_succ_p (bb))\n     return;\n@@ -484,7 +483,7 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \n   /* Make sure the tail invocation of this function does not refer\n      to local variables.  */\n-  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n+  FOR_EACH_LOCAL_DECL (cfun, idx, var)\n     {\n       if (TREE_CODE (var) != PARM_DECL\n \t  && auto_var_in_fn_p (var, cfun->decl)\n@@ -872,36 +871,6 @@ eliminate_tail_call (struct tailcall *t)\n   release_defs (call);\n }\n \n-/* Add phi nodes for the virtual operands defined in the function to the\n-   header of the loop created by tail recursion elimination.\n-\n-   Originally, we used to add phi nodes only for call clobbered variables,\n-   as the value of the non-call clobbered ones obviously cannot be used\n-   or changed within the recursive call.  However, the local variables\n-   from multiple calls now share the same location, so the virtual ssa form\n-   requires us to say that the location dies on further iterations of the loop,\n-   which requires adding phi nodes.\n-*/\n-static void\n-add_virtual_phis (void)\n-{\n-  referenced_var_iterator rvi;\n-  tree var;\n-\n-  /* The problematic part is that there is no way how to know what\n-     to put into phi nodes (there in fact does not have to be such\n-     ssa name available).  A solution would be to have an artificial\n-     use/kill for all virtual operands in EXIT node.  Unless we have\n-     this, we cannot do much better than to rebuild the ssa form for\n-     possibly affected virtual ssa names from scratch.  */\n-\n-  FOR_EACH_REFERENCED_VAR (cfun, var, rvi)\n-    {\n-      if (!is_gimple_reg (var) && gimple_default_def (cfun, var) != NULL_TREE)\n-\tmark_sym_for_renaming (var);\n-    }\n-}\n-\n /* Optimizes the tailcall described by T.  If OPT_TAILCALLS is true, also\n    mark the tailcalls for the sibcall optimization.  */\n \n@@ -1056,8 +1025,12 @@ tree_optimize_tail_calls_1 (bool opt_tailcalls)\n   if (changed)\n     free_dominance_info (CDI_DOMINATORS);\n \n+  /* Add phi nodes for the virtual operands defined in the function to the\n+     header of the loop created by tail recursion elimination.  Do so\n+     by triggering the SSA renamer.  */\n   if (phis_constructed)\n-    add_virtual_phis ();\n+    mark_sym_for_renaming (gimple_vop (cfun));\n+\n   if (changed)\n     return TODO_cleanup_cfg | TODO_update_ssa_only_virtuals;\n   return 0;"}]}