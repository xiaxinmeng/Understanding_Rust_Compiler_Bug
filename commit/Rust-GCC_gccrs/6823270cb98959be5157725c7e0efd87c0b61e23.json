{"sha": "6823270cb98959be5157725c7e0efd87c0b61e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgyMzI3MGNiOTg5NTliZTUxNTc3MjVjN2UwZWZkODdjMGI2MWUyMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-22T13:15:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-22T13:15:08Z"}, "message": "[multiple changes]\n\n2009-06-22  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration, Freeze_Entity): Move to the\n\tfreezing point the check on the use of abstract types in object\n\tdeclarations. Done to allow the declaration of C++ imported variables\n\tor constants whose type corresponds with an imported C++ classes for\n\twhich the constructor is not imported.\n\n2009-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch6.adb: Minor reformatting\n\n2009-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch3.adb (Build_Initialization_Call): If a discriminated record\n\tcomponent is constrained with an expression rather than with a\n\tdiscriminant of the enclosing type, use that expression when building\n\tthe call to default-initialize the component, when the call is part of\n\tan aggregate with box initialization.\n\nFrom-SVN: r148793", "tree": {"sha": "6125b7f8442e33eeeb9d44c9f01c87cbce2e5066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6125b7f8442e33eeeb9d44c9f01c87cbce2e5066"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6823270cb98959be5157725c7e0efd87c0b61e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6823270cb98959be5157725c7e0efd87c0b61e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6823270cb98959be5157725c7e0efd87c0b61e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6823270cb98959be5157725c7e0efd87c0b61e23/comments", "author": null, "committer": null, "parents": [{"sha": "c9e7bd8efbef325c4cd76b2382ce5858d153e2c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9e7bd8efbef325c4cd76b2382ce5858d153e2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9e7bd8efbef325c4cd76b2382ce5858d153e2c4"}], "stats": {"total": 80, "additions": 57, "deletions": 23}, "files": [{"sha": "3fd0df3391296e159a3e62dcb34992704cd0376d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6823270cb98959be5157725c7e0efd87c0b61e23", "patch": "@@ -1,3 +1,23 @@\n+2009-06-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration, Freeze_Entity): Move to the\n+\tfreezing point the check on the use of abstract types in object\n+\tdeclarations. Done to allow the declaration of C++ imported variables\n+\tor constants whose type corresponds with an imported C++ classes for\n+\twhich the constructor is not imported.\n+\n+2009-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch6.adb: Minor reformatting\n+\n+2009-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Initialization_Call): If a discriminated record\n+\tcomponent is constrained with an expression rather than with a\n+\tdiscriminant of the enclosing type, use that expression when building\n+\tthe call to default-initialize the component, when the call is part of\n+\tan aggregate with box initialization.\n+\n 2009-06-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Check_Overriding_Indicator): Clean up code, make warning"}, {"sha": "219175b5a14e3fb5e35cc51c221c0c0c14184ade", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=6823270cb98959be5157725c7e0efd87c0b61e23", "patch": "@@ -1565,14 +1565,17 @@ package body Exp_Ch3 is\n             end if;\n \n             --  Ada 2005 (AI-287): In case of default initialized components,\n-            --  we need to generate the corresponding selected component node\n-            --  to access the discriminant value. In other cases this is not\n-            --  required because we are inside the init proc and we use the\n-            --  corresponding formal.\n+            --  if the component is constrained with a discriminant of the\n+            --  enclosing type, we need to generate the corresponding selected\n+            --  component node to access the discriminant value. In other cases\n+            --  this is not required, either  because we are inside the init\n+            --  proc and we use the corresponding formal, or else because the\n+            --  component is constrained by an expression.\n \n             if With_Default_Init\n               and then Nkind (Id_Ref) = N_Selected_Component\n               and then Nkind (Arg) = N_Identifier\n+              and then Ekind (Entity (Arg)) = E_Discriminant\n             then\n                Append_To (Args,\n                  Make_Selected_Component (Loc,"}, {"sha": "5a7d0ef47dee7d358c187e00a635f1fcd739a5ac", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6823270cb98959be5157725c7e0efd87c0b61e23", "patch": "@@ -2670,6 +2670,28 @@ package body Freeze is\n \n             if Nkind (Declaration_Node (E)) = N_Object_Declaration then\n \n+               --  Abstract type allowed only for C++ imported variables or\n+               --  constants.\n+\n+               --  Note: we inhibit this check for objects that do not come\n+               --  from source because there is at least one case (the\n+               --  expansion of x'class'input where x is abstract) where we\n+               --  legitimately generate an abstract object.\n+\n+               if Is_Abstract_Type (Etype (E))\n+                 and then Comes_From_Source (Parent (E))\n+                 and then not (Is_Imported (E)\n+                                 and then Is_CPP_Class (Etype (E)))\n+               then\n+                  Error_Msg_N (\"type of object cannot be abstract\",\n+                               Object_Definition (Parent (E)));\n+\n+                  if Is_CPP_Class (Etype (E)) then\n+                     Error_Msg_NE (\"\\} may need a cpp_constructor\",\n+                       Object_Definition (Parent (E)), Etype (E));\n+                  end if;\n+               end if;\n+\n                --  For object created by object declaration, perform required\n                --  categorization (preelaborate and pure) checks. Defer these\n                --  checks to freeze time since pragma Import inhibits default"}, {"sha": "47616825e35929c4d6cec7bc813431e0a0f846aa", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=6823270cb98959be5157725c7e0efd87c0b61e23", "patch": "@@ -2657,24 +2657,9 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  Abstract type is never permitted for a variable or constant.\n-      --  Note: we inhibit this check for objects that do not come from\n-      --  source because there is at least one case (the expansion of\n-      --  x'class'input where x is abstract) where we legitimately\n-      --  generate an abstract object.\n-\n-      if Is_Abstract_Type (T) and then Comes_From_Source (N) then\n-         Error_Msg_N (\"type of object cannot be abstract\",\n-                      Object_Definition (N));\n-\n-         if Is_CPP_Class (T) then\n-            Error_Msg_NE (\"\\} may need a cpp_constructor\",\n-              Object_Definition (N), T);\n-         end if;\n-\n       --  Case of unconstrained type\n \n-      elsif Is_Indefinite_Subtype (T) then\n+      if Is_Indefinite_Subtype (T) then\n \n          --  Nothing to do in deferred constant case\n "}, {"sha": "bb0da6d7538085230509531f59f0b243246d510c", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6823270cb98959be5157725c7e0efd87c0b61e23/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=6823270cb98959be5157725c7e0efd87c0b61e23", "patch": "@@ -4376,7 +4376,7 @@ package body Sem_Ch6 is\n \n       --  The overriding operation is type conformant with the overridden one,\n       --  but the names of the formals are not required to match. If the names\n-      --  appear permuted in the overriding operation  this is a possible\n+      --  appear permuted in the overriding operation, this is a possible\n       --  source of confusion that is worth diagnosing. Controlling formals\n       --  often carry names that reflect the type, and it is not worthwhile\n       --  requiring that their names match.\n@@ -4394,9 +4394,13 @@ package body Sem_Ch6 is\n \n             --  If the overriding operation is a synchronized operation, skip\n             --  the first parameter of the overridden operation, which is\n-            --  implicit in the new one.\n+            --  implicit in the new one. If the operation is declared in the\n+            --  body it is not primitive and all formals must match.\n \n-            if Is_Concurrent_Type (Scope (Subp)) then\n+            if Is_Concurrent_Type (Scope (Subp))\n+              and then Is_Tagged_Type (Scope (Subp))\n+              and then not Has_Completion (Scope (Subp))\n+            then\n                Form2 := Next_Formal (Form2);\n             end if;\n "}]}