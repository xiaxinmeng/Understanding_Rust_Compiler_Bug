{"sha": "1ba24090f6871f1bf7d6c5408589f2041b5165ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhMjQwOTBmNjg3MWYxYmY3ZDZjNTQwODU4OWYyMDQxYjUxNjVhYw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2012-10-18T16:35:07Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2012-10-18T16:35:07Z"}, "message": "altivec.md (altivec_lvsl, [...]): Add mode.\n\ngcc/\n\t* config/rs6000/altivec.md (altivec_lvsl, altivec_lvsr): Add mode.\n\t(altivec_vsumsws_nomode): Delete.\n\t(reduc_splus_<mode>, reduc_uplus_<mode>): Call gen_altivec_vsumsws\n\tinstead of gen_altivec_vsumsws_nomode.\n\t(altivec_lvlx, altivec_lvlxl, altivec_lvrx, altivec_lvrxl):\n\tAdd mode.\n\t* config/rs6000/rs6000.md (probe_stack): Rename to...\n\t(probe_stack_<mode>): ... this.  Add mode.  Change pattern to\n\tuse std instead of stw when appropriate.\n\t(probe_stack): New expander.\n\t(move_from_CR_ov_bit): Add mode.\n\t(splitter for compare_plus_ne0_<mode>, splitter for\n\tcompare_plus_ne0_<mode>_1): Remove constraints.\n\t* config/rs6000/sync.md (loadsync): Rename to...\n\t(loadsync_<mode>): ... this.  Add mode.\n\t(atomic_load<mode>): Adjust.\n\nFrom-SVN: r192568", "tree": {"sha": "339281778cfb906cf8d7b4ba482e9cad107742d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/339281778cfb906cf8d7b4ba482e9cad107742d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ba24090f6871f1bf7d6c5408589f2041b5165ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba24090f6871f1bf7d6c5408589f2041b5165ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba24090f6871f1bf7d6c5408589f2041b5165ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba24090f6871f1bf7d6c5408589f2041b5165ac/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a17bd35048b702b3c5eb2ece720588a77e842c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a17bd35048b702b3c5eb2ece720588a77e842c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a17bd35048b702b3c5eb2ece720588a77e842c1"}], "stats": {"total": 102, "additions": 67, "deletions": 35}, "files": [{"sha": "8da1c078483715f01faa1d896330db89e48affb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ba24090f6871f1bf7d6c5408589f2041b5165ac", "patch": "@@ -1,3 +1,22 @@\n+2012-10-18  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/altivec.md (altivec_lvsl, altivec_lvsr): Add mode.\n+\t(altivec_vsumsws_nomode): Delete.\n+\t(reduc_splus_<mode>, reduc_uplus_<mode>): Call gen_altivec_vsumsws\n+\tinstead of gen_altivec_vsumsws_nomode.\n+\t(altivec_lvlx, altivec_lvlxl, altivec_lvrx, altivec_lvrxl):\n+\tAdd mode.\n+\t* config/rs6000/rs6000.md (probe_stack): Rename to...\n+\t(probe_stack_<mode>): ... this.  Add mode.  Change pattern to\n+\tuse std instead of stw when appropriate.\n+\t(probe_stack): New expander.\n+\t(move_from_CR_ov_bit): Add mode.\n+\t(splitter for compare_plus_ne0_<mode>, splitter for\n+\tcompare_plus_ne0_<mode>_1): Remove constraints.\n+\t* config/rs6000/sync.md (loadsync): Rename to...\n+\t(loadsync_<mode>): ... this.  Add mode.\n+\t(atomic_load<mode>): Adjust.\n+\n 2012-10-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* loop-invariant.c: Include target.h."}, {"sha": "7ca496f937a2a65a5a15e6fdb974c1775b977ad7", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=1ba24090f6871f1bf7d6c5408589f2041b5165ac", "patch": "@@ -1674,14 +1674,16 @@\n \n (define_insn \"altivec_lvsl\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] UNSPEC_LVSL))]\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"memory_operand\" \"Z\")]\n+\t\t      UNSPEC_LVSL))]\n   \"TARGET_ALTIVEC\"\n   \"lvsl %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvsr\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-\t(unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] UNSPEC_LVSR))]\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"memory_operand\" \"Z\")]\n+\t\t      UNSPEC_LVSR))]\n   \"TARGET_ALTIVEC\"\n   \"lvsr %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n@@ -1831,47 +1833,37 @@\n   operands[3] = gen_reg_rtx (GET_MODE (operands[0]));\n })\n \n-(define_insn \"altivec_vsumsws_nomode\"\n-  [(set (match_operand 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")]\n-\t\t     UNSPEC_VSUMSWS))\n-   (set (reg:SI 110) (unspec:SI [(const_int 0)] UNSPEC_SET_VSCR))]\n-  \"TARGET_ALTIVEC\"\n-  \"vsumsws %0,%1,%2\"\n-  [(set_attr \"type\" \"veccomplex\")])\n-\n (define_expand \"reduc_splus_<mode>\"\n   [(set (match_operand:VIshort 0 \"register_operand\" \"=v\")\n         (unspec:VIshort [(match_operand:VIshort 1 \"register_operand\" \"v\")]\n \t\t\tUNSPEC_REDUC_PLUS))]\n   \"TARGET_ALTIVEC\"\n-  \"\n-{ \n+{\n   rtx vzero = gen_reg_rtx (V4SImode);\n   rtx vtmp1 = gen_reg_rtx (V4SImode);\n+  rtx dest = gen_lowpart (V4SImode, operands[0]);\n \n   emit_insn (gen_altivec_vspltisw (vzero, const0_rtx));\n   emit_insn (gen_altivec_vsum4s<VI_char>s (vtmp1, operands[1], vzero));\n-  emit_insn (gen_altivec_vsumsws_nomode (operands[0], vtmp1, vzero));\n+  emit_insn (gen_altivec_vsumsws (dest, vtmp1, vzero));\n   DONE;\n-}\")\n+})\n \n (define_expand \"reduc_uplus_v16qi\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n         (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n \t\t      UNSPEC_REDUC_PLUS))]\n   \"TARGET_ALTIVEC\"\n-  \"\n {\n   rtx vzero = gen_reg_rtx (V4SImode);\n   rtx vtmp1 = gen_reg_rtx (V4SImode);\n+  rtx dest = gen_lowpart (V4SImode, operands[0]);\n \n   emit_insn (gen_altivec_vspltisw (vzero, const0_rtx));\n   emit_insn (gen_altivec_vsum4ubs (vtmp1, operands[1], vzero));\n-  emit_insn (gen_altivec_vsumsws_nomode (operands[0], vtmp1, vzero));\n+  emit_insn (gen_altivec_vsumsws (dest, vtmp1, vzero));\n   DONE;\n-}\")\n+})\n \n (define_expand \"neg<mode>2\"\n   [(use (match_operand:VI 0 \"register_operand\" \"\"))\n@@ -2348,31 +2340,31 @@\n ;; STVLX, STVLXL, STVVRX, STVRXL are available only on Cell.\n (define_insn \"altivec_lvlx\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+        (unspec:V16QI [(match_operand:BLK 1 \"memory_operand\" \"Z\")]\n \t\t      UNSPEC_LVLX))]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"lvlx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvlxl\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+        (unspec:V16QI [(match_operand:BLK 1 \"memory_operand\" \"Z\")]\n \t\t      UNSPEC_LVLXL))]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"lvlxl %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvrx\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+        (unspec:V16QI [(match_operand:BLK 1 \"memory_operand\" \"Z\")]\n \t\t      UNSPEC_LVRX))]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"lvrx %0,%y1\"\n   [(set_attr \"type\" \"vecload\")])\n \n (define_insn \"altivec_lvrxl\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n-        (unspec:V16QI [(match_operand 1 \"memory_operand\" \"Z\")] \n+        (unspec:V16QI [(match_operand:BLK 1 \"memory_operand\" \"Z\")]\n \t\t      UNSPEC_LVRXL))]\n   \"TARGET_ALTIVEC && rs6000_cpu == PROCESSOR_CELL\"\n   \"lvrxl %0,%y1\""}, {"sha": "2625bd72c076d8091ddf046bf32872bed3dcc5ac", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=1ba24090f6871f1bf7d6c5408589f2041b5165ac", "patch": "@@ -11134,15 +11134,26 @@\n   \"\"\n   \"\")\n \n-(define_insn \"probe_stack\"\n+(define_expand \"probe_stack\"\n   [(set (match_operand 0 \"memory_operand\" \"=m\")\n         (unspec [(const_int 0)] UNSPEC_PROBE_STACK))]\n   \"\"\n-  \"*\n+{\n+  if (TARGET_64BIT)\n+    emit_insn (gen_probe_stack_di (operands[0]));\n+  else\n+    emit_insn (gen_probe_stack_si (operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"probe_stack_<mode>\"\n+  [(set (match_operand:P 0 \"memory_operand\" \"=m\")\n+        (unspec:P [(const_int 0)] UNSPEC_PROBE_STACK))]\n+  \"\"\n {\n   operands[1] = gen_rtx_REG (Pmode, 0);\n-  return \\\"stw%U0%X0 %1,%0\\\";\n-}\"\n+  return \"st<wd>%U0%X0 %1,%0\";\n+}\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4\")])\n \n@@ -11560,7 +11571,8 @@\n ;; Same as above, but get the OV/ORDERED bit.\n (define_insn \"move_from_CR_ov_bit\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(unspec:SI [(match_operand 1 \"cc_reg_operand\" \"y\")] UNSPEC_MV_CR_OV))]\n+\t(unspec:SI [(match_operand:CC 1 \"cc_reg_operand\" \"y\")]\n+\t\t   UNSPEC_MV_CR_OV))]\n   \"TARGET_ISEL\"\n   \"mfcr %0\\;rlwinm %0,%0,%t1,1\"\n   [(set_attr \"type\" \"mfcr\")\n@@ -12008,9 +12020,9 @@\n \n (define_split\n   [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (ne:P (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t(compare:CC (ne:P (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t  (const_int 0))\n-\t\t    (neg:P (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))))\n+\t\t    (neg:P (match_operand:P 2 \"gpc_reg_operand\" \"\"))))\n    (clobber (match_scratch:P 3 \"\"))\n    (clobber (match_scratch:P 4 \"\"))]\n   \"reload_completed\"\n@@ -12041,9 +12053,9 @@\n \n (define_split\n   [(set (match_operand:CCEQ 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CCEQ (ne:P (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n+\t(compare:CCEQ (ne:P (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t    (const_int 0))\n-\t\t      (neg:P (match_operand:P 2 \"gpc_reg_operand\" \"r,r\"))))\n+\t\t      (neg:P (match_operand:P 2 \"gpc_reg_operand\" \"\"))))\n    (clobber (match_scratch:P 3 \"\"))\n    (clobber (match_scratch:P 4 \"\"))]\n   \"reload_completed\""}, {"sha": "42ac90373e59bb4782fd8b4b2da2b74ca6f4dd9d", "filename": "gcc/config/rs6000/sync.md", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2Fconfig%2Frs6000%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba24090f6871f1bf7d6c5408589f2041b5165ac/gcc%2Fconfig%2Frs6000%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsync.md?ref=1ba24090f6871f1bf7d6c5408589f2041b5165ac", "patch": "@@ -100,8 +100,8 @@\n \n ;; The control dependency used for load dependency described\n ;; in B.2.3 of the Power ISA 2.06B.\n-(define_insn \"loadsync\"\n-  [(unspec_volatile:BLK [(match_operand 0 \"register_operand\" \"r\")]\n+(define_insn \"loadsync_<mode>\"\n+  [(unspec_volatile:BLK [(match_operand:INT1 0 \"register_operand\" \"r\")]\n \t\t\tUNSPECV_ISYNC)\n    (clobber (match_scratch:CC 1 \"=y\"))]\n   \"\"\n@@ -129,7 +129,16 @@\n     case MEMMODEL_CONSUME:\n     case MEMMODEL_ACQUIRE:\n     case MEMMODEL_SEQ_CST:\n-      emit_insn (gen_loadsync (operands[0]));\n+      if (GET_MODE (operands[0]) == QImode)\n+\temit_insn (gen_loadsync_qi (operands[0]));\n+      else if (GET_MODE (operands[0]) == HImode)\n+\temit_insn (gen_loadsync_hi (operands[0]));\n+      else if (GET_MODE (operands[0]) == SImode)\n+\temit_insn (gen_loadsync_si (operands[0]));\n+      else if (GET_MODE (operands[0]) == DImode)\n+\temit_insn (gen_loadsync_di (operands[0]));\n+      else\n+\tgcc_unreachable ();\n       break;\n     default:\n       gcc_unreachable ();"}]}