{"sha": "c83cf304523c57ff552eb760957936245e29acf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzY2YzMDQ1MjNjNTdmZjU1MmViNzYwOTU3OTM2MjQ1ZTI5YWNmOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-07-07T08:42:49Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-07-07T08:42:49Z"}, "message": "expmed.c (struct init_expmed_rtl): Change all fields but pow2 and cint from struct rtx_def to rtx.\n\n\t* expmed.c (struct init_expmed_rtl): Change all fields but\n\tpow2 and cint from struct rtx_def to rtx.\n\t(init_expmed_one_conv, init_expmed_one_mode): Adjust for that change.\n\t(init_expmed): Likewise.  Allocate all the 18 rtxes and ggc_free them\n\tat the end again.\n\nFrom-SVN: r212325", "tree": {"sha": "54fbb52fd8c4c7e74cde6f5dd5b41c50d8ed2305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54fbb52fd8c4c7e74cde6f5dd5b41c50d8ed2305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83cf304523c57ff552eb760957936245e29acf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83cf304523c57ff552eb760957936245e29acf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83cf304523c57ff552eb760957936245e29acf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83cf304523c57ff552eb760957936245e29acf8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a709346f066f6cfdb34c4fe70fa4b3bf81487bb9"}], "stats": {"total": 224, "additions": 103, "deletions": 121}, "files": [{"sha": "872ce7ba7409f99ec5ad293c63512b9a84834c3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83cf304523c57ff552eb760957936245e29acf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83cf304523c57ff552eb760957936245e29acf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c83cf304523c57ff552eb760957936245e29acf8", "patch": "@@ -1,3 +1,11 @@\n+2014-07-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* expmed.c (struct init_expmed_rtl): Change all fields but\n+\tpow2 and cint from struct rtx_def to rtx.\n+\t(init_expmed_one_conv, init_expmed_one_mode): Adjust for that change.\n+\t(init_expmed): Likewise.  Allocate all the 18 rtxes and ggc_free them\n+\tat the end again.\n+\n 2014-07-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/6940"}, {"sha": "98b827e64a330f7a42538025d2bd8ebde7d751a8", "filename": "gcc/expmed.c", "status": "modified", "additions": 95, "deletions": 121, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83cf304523c57ff552eb760957936245e29acf8/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83cf304523c57ff552eb760957936245e29acf8/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c83cf304523c57ff552eb760957936245e29acf8", "patch": "@@ -88,24 +88,24 @@ mask_rtx (enum machine_mode mode, int bitpos, int bitsize, bool complement)\n \n struct init_expmed_rtl\n {\n-  struct rtx_def reg;\n-  struct rtx_def plus;\n-  struct rtx_def neg;\n-  struct rtx_def mult;\n-  struct rtx_def sdiv;\n-  struct rtx_def udiv;\n-  struct rtx_def sdiv_32;\n-  struct rtx_def smod_32;\n-  struct rtx_def wide_mult;\n-  struct rtx_def wide_lshr;\n-  struct rtx_def wide_trunc;\n-  struct rtx_def shift;\n-  struct rtx_def shift_mult;\n-  struct rtx_def shift_add;\n-  struct rtx_def shift_sub0;\n-  struct rtx_def shift_sub1;\n-  struct rtx_def zext;\n-  struct rtx_def trunc;\n+  rtx reg;\n+  rtx plus;\n+  rtx neg;\n+  rtx mult;\n+  rtx sdiv;\n+  rtx udiv;\n+  rtx sdiv_32;\n+  rtx smod_32;\n+  rtx wide_mult;\n+  rtx wide_lshr;\n+  rtx wide_trunc;\n+  rtx shift;\n+  rtx shift_mult;\n+  rtx shift_add;\n+  rtx shift_sub0;\n+  rtx shift_sub1;\n+  rtx zext;\n+  rtx trunc;\n \n   rtx pow2[MAX_BITS_PER_WORD];\n   rtx cint[MAX_BITS_PER_WORD];\n@@ -127,9 +127,9 @@ init_expmed_one_conv (struct init_expmed_rtl *all, enum machine_mode to_mode,\n \t       - (GET_MODE_CLASS (from_mode) == MODE_PARTIAL_INT));\n   \n   /* Assume cost of zero-extend and sign-extend is the same.  */\n-  which = (to_size < from_size ? &all->trunc : &all->zext);\n+  which = (to_size < from_size ? all->trunc : all->zext);\n \n-  PUT_MODE (&all->reg, from_mode);\n+  PUT_MODE (all->reg, from_mode);\n   set_convert_cost (to_mode, from_mode, speed, set_src_cost (which, speed));\n }\n \n@@ -142,32 +142,32 @@ init_expmed_one_mode (struct init_expmed_rtl *all,\n \n   mode_bitsize = GET_MODE_UNIT_BITSIZE (mode);\n \n-  PUT_MODE (&all->reg, mode);\n-  PUT_MODE (&all->plus, mode);\n-  PUT_MODE (&all->neg, mode);\n-  PUT_MODE (&all->mult, mode);\n-  PUT_MODE (&all->sdiv, mode);\n-  PUT_MODE (&all->udiv, mode);\n-  PUT_MODE (&all->sdiv_32, mode);\n-  PUT_MODE (&all->smod_32, mode);\n-  PUT_MODE (&all->wide_trunc, mode);\n-  PUT_MODE (&all->shift, mode);\n-  PUT_MODE (&all->shift_mult, mode);\n-  PUT_MODE (&all->shift_add, mode);\n-  PUT_MODE (&all->shift_sub0, mode);\n-  PUT_MODE (&all->shift_sub1, mode);\n-  PUT_MODE (&all->zext, mode);\n-  PUT_MODE (&all->trunc, mode);\n-\n-  set_add_cost (speed, mode, set_src_cost (&all->plus, speed));\n-  set_neg_cost (speed, mode, set_src_cost (&all->neg, speed));\n-  set_mul_cost (speed, mode, set_src_cost (&all->mult, speed));\n-  set_sdiv_cost (speed, mode, set_src_cost (&all->sdiv, speed));\n-  set_udiv_cost (speed, mode, set_src_cost (&all->udiv, speed));\n-\n-  set_sdiv_pow2_cheap (speed, mode, (set_src_cost (&all->sdiv_32, speed)\n+  PUT_MODE (all->reg, mode);\n+  PUT_MODE (all->plus, mode);\n+  PUT_MODE (all->neg, mode);\n+  PUT_MODE (all->mult, mode);\n+  PUT_MODE (all->sdiv, mode);\n+  PUT_MODE (all->udiv, mode);\n+  PUT_MODE (all->sdiv_32, mode);\n+  PUT_MODE (all->smod_32, mode);\n+  PUT_MODE (all->wide_trunc, mode);\n+  PUT_MODE (all->shift, mode);\n+  PUT_MODE (all->shift_mult, mode);\n+  PUT_MODE (all->shift_add, mode);\n+  PUT_MODE (all->shift_sub0, mode);\n+  PUT_MODE (all->shift_sub1, mode);\n+  PUT_MODE (all->zext, mode);\n+  PUT_MODE (all->trunc, mode);\n+\n+  set_add_cost (speed, mode, set_src_cost (all->plus, speed));\n+  set_neg_cost (speed, mode, set_src_cost (all->neg, speed));\n+  set_mul_cost (speed, mode, set_src_cost (all->mult, speed));\n+  set_sdiv_cost (speed, mode, set_src_cost (all->sdiv, speed));\n+  set_udiv_cost (speed, mode, set_src_cost (all->udiv, speed));\n+\n+  set_sdiv_pow2_cheap (speed, mode, (set_src_cost (all->sdiv_32, speed)\n \t\t\t\t     <= 2 * add_cost (speed, mode)));\n-  set_smod_pow2_cheap (speed, mode, (set_src_cost (&all->smod_32, speed)\n+  set_smod_pow2_cheap (speed, mode, (set_src_cost (all->smod_32, speed)\n \t\t\t\t     <= 4 * add_cost (speed, mode)));\n \n   set_shift_cost (speed, mode, 0, 0);\n@@ -181,13 +181,13 @@ init_expmed_one_mode (struct init_expmed_rtl *all,\n   n = MIN (MAX_BITS_PER_WORD, mode_bitsize);\n   for (m = 1; m < n; m++)\n     {\n-      XEXP (&all->shift, 1) = all->cint[m];\n-      XEXP (&all->shift_mult, 1) = all->pow2[m];\n+      XEXP (all->shift, 1) = all->cint[m];\n+      XEXP (all->shift_mult, 1) = all->pow2[m];\n \n-      set_shift_cost (speed, mode, m, set_src_cost (&all->shift, speed));\n-      set_shiftadd_cost (speed, mode, m, set_src_cost (&all->shift_add, speed));\n-      set_shiftsub0_cost (speed, mode, m, set_src_cost (&all->shift_sub0, speed));\n-      set_shiftsub1_cost (speed, mode, m, set_src_cost (&all->shift_sub1, speed));\n+      set_shift_cost (speed, mode, m, set_src_cost (all->shift, speed));\n+      set_shiftadd_cost (speed, mode, m, set_src_cost (all->shift_add, speed));\n+      set_shiftsub0_cost (speed, mode, m, set_src_cost (all->shift_sub0, speed));\n+      set_shiftsub1_cost (speed, mode, m, set_src_cost (all->shift_sub1, speed));\n     }\n \n   if (SCALAR_INT_MODE_P (mode))\n@@ -201,15 +201,15 @@ init_expmed_one_mode (struct init_expmed_rtl *all,\n       enum machine_mode  wider_mode = GET_MODE_WIDER_MODE (mode);\n       if (wider_mode != VOIDmode)\n \t{\n-\t  PUT_MODE (&all->zext, wider_mode);\n-\t  PUT_MODE (&all->wide_mult, wider_mode);\n-\t  PUT_MODE (&all->wide_lshr, wider_mode);\n-\t  XEXP (&all->wide_lshr, 1) = GEN_INT (mode_bitsize);\n+\t  PUT_MODE (all->zext, wider_mode);\n+\t  PUT_MODE (all->wide_mult, wider_mode);\n+\t  PUT_MODE (all->wide_lshr, wider_mode);\n+\t  XEXP (all->wide_lshr, 1) = GEN_INT (mode_bitsize);\n \n \t  set_mul_widen_cost (speed, wider_mode,\n-\t\t\t      set_src_cost (&all->wide_mult, speed));\n+\t\t\t      set_src_cost (all->wide_mult, speed));\n \t  set_mul_highpart_cost (speed, mode,\n-\t\t\t\t set_src_cost (&all->wide_trunc, speed));\n+\t\t\t\t set_src_cost (all->wide_trunc, speed));\n \t}\n     }\n }\n@@ -218,7 +218,7 @@ void\n init_expmed (void)\n {\n   struct init_expmed_rtl all;\n-  enum machine_mode mode;\n+  enum machine_mode mode = QImode;\n   int m, speed;\n \n   memset (&all, 0, sizeof all);\n@@ -228,70 +228,25 @@ init_expmed (void)\n       all.cint[m] = GEN_INT (m);\n     }\n \n-  PUT_CODE (&all.reg, REG);\n   /* Avoid using hard regs in ways which may be unsupported.  */\n-  SET_REGNO (&all.reg, LAST_VIRTUAL_REGISTER + 1);\n-\n-  PUT_CODE (&all.plus, PLUS);\n-  XEXP (&all.plus, 0) = &all.reg;\n-  XEXP (&all.plus, 1) = &all.reg;\n-\n-  PUT_CODE (&all.neg, NEG);\n-  XEXP (&all.neg, 0) = &all.reg;\n-\n-  PUT_CODE (&all.mult, MULT);\n-  XEXP (&all.mult, 0) = &all.reg;\n-  XEXP (&all.mult, 1) = &all.reg;\n-\n-  PUT_CODE (&all.sdiv, DIV);\n-  XEXP (&all.sdiv, 0) = &all.reg;\n-  XEXP (&all.sdiv, 1) = &all.reg;\n-\n-  PUT_CODE (&all.udiv, UDIV);\n-  XEXP (&all.udiv, 0) = &all.reg;\n-  XEXP (&all.udiv, 1) = &all.reg;\n-\n-  PUT_CODE (&all.sdiv_32, DIV);\n-  XEXP (&all.sdiv_32, 0) = &all.reg;\n-  XEXP (&all.sdiv_32, 1) = 32 < MAX_BITS_PER_WORD ? all.cint[32] : GEN_INT (32);\n-\n-  PUT_CODE (&all.smod_32, MOD);\n-  XEXP (&all.smod_32, 0) = &all.reg;\n-  XEXP (&all.smod_32, 1) = XEXP (&all.sdiv_32, 1);\n-\n-  PUT_CODE (&all.zext, ZERO_EXTEND);\n-  XEXP (&all.zext, 0) = &all.reg;\n-\n-  PUT_CODE (&all.wide_mult, MULT);\n-  XEXP (&all.wide_mult, 0) = &all.zext;\n-  XEXP (&all.wide_mult, 1) = &all.zext;\n-\n-  PUT_CODE (&all.wide_lshr, LSHIFTRT);\n-  XEXP (&all.wide_lshr, 0) = &all.wide_mult;\n-\n-  PUT_CODE (&all.wide_trunc, TRUNCATE);\n-  XEXP (&all.wide_trunc, 0) = &all.wide_lshr;\n-\n-  PUT_CODE (&all.shift, ASHIFT);\n-  XEXP (&all.shift, 0) = &all.reg;\n-\n-  PUT_CODE (&all.shift_mult, MULT);\n-  XEXP (&all.shift_mult, 0) = &all.reg;\n-\n-  PUT_CODE (&all.shift_add, PLUS);\n-  XEXP (&all.shift_add, 0) = &all.shift_mult;\n-  XEXP (&all.shift_add, 1) = &all.reg;\n-\n-  PUT_CODE (&all.shift_sub0, MINUS);\n-  XEXP (&all.shift_sub0, 0) = &all.shift_mult;\n-  XEXP (&all.shift_sub0, 1) = &all.reg;\n-\n-  PUT_CODE (&all.shift_sub1, MINUS);\n-  XEXP (&all.shift_sub1, 0) = &all.reg;\n-  XEXP (&all.shift_sub1, 1) = &all.shift_mult;\n-\n-  PUT_CODE (&all.trunc, TRUNCATE);\n-  XEXP (&all.trunc, 0) = &all.reg;\n+  all.reg = gen_rtx_raw_REG (mode, LAST_VIRTUAL_REGISTER + 1);\n+  all.plus = gen_rtx_PLUS (mode, all.reg, all.reg);\n+  all.neg = gen_rtx_NEG (mode, all.reg);\n+  all.mult = gen_rtx_MULT (mode, all.reg, all.reg);\n+  all.sdiv = gen_rtx_DIV (mode, all.reg, all.reg);\n+  all.udiv = gen_rtx_UDIV (mode, all.reg, all.reg);\n+  all.sdiv_32 = gen_rtx_DIV (mode, all.reg, all.pow2[5]);\n+  all.smod_32 = gen_rtx_MOD (mode, all.reg, all.pow2[5]);\n+  all.zext = gen_rtx_ZERO_EXTEND (mode, all.reg);\n+  all.wide_mult = gen_rtx_MULT (mode, all.zext, all.zext);\n+  all.wide_lshr = gen_rtx_LSHIFTRT (mode, all.wide_mult, all.reg);\n+  all.wide_trunc = gen_rtx_TRUNCATE (mode, all.wide_lshr);\n+  all.shift = gen_rtx_ASHIFT (mode, all.reg, all.reg);\n+  all.shift_mult = gen_rtx_MULT (mode, all.reg, all.reg);\n+  all.shift_add = gen_rtx_PLUS (mode, all.shift_mult, all.reg);\n+  all.shift_sub0 = gen_rtx_MINUS (mode, all.shift_mult, all.reg);\n+  all.shift_sub1 = gen_rtx_MINUS (mode, all.reg, all.shift_mult);\n+  all.trunc = gen_rtx_TRUNCATE (mode, all.reg);\n \n   for (speed = 0; speed < 2; speed++)\n     {\n@@ -321,6 +276,25 @@ init_expmed (void)\n   else\n     set_alg_hash_used_p (true);\n   default_rtl_profile ();\n+\n+  ggc_free (all.trunc);\n+  ggc_free (all.shift_sub1);\n+  ggc_free (all.shift_sub0);\n+  ggc_free (all.shift_add);\n+  ggc_free (all.shift_mult);\n+  ggc_free (all.shift);\n+  ggc_free (all.wide_trunc);\n+  ggc_free (all.wide_lshr);\n+  ggc_free (all.wide_mult);\n+  ggc_free (all.zext);\n+  ggc_free (all.smod_32);\n+  ggc_free (all.sdiv_32);\n+  ggc_free (all.udiv);\n+  ggc_free (all.sdiv);\n+  ggc_free (all.mult);\n+  ggc_free (all.neg);\n+  ggc_free (all.plus);\n+  ggc_free (all.reg);\n }\n \n /* Return an rtx representing minus the value of X."}]}