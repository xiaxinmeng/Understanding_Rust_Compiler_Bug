{"sha": "25aeb92221659067b5d83c6ca1639374ce9be555", "node_id": "C_kwDOANBUbNoAKDI1YWViOTIyMjE2NTkwNjdiNWQ4M2M2Y2ExNjM5Mzc0Y2U5YmU1NTU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-07T00:17:51Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-07T00:17:51Z"}, "message": "Daily bump.", "tree": {"sha": "053bb38e702b8f7b0aac5cf309dba469afa31781", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/053bb38e702b8f7b0aac5cf309dba469afa31781"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25aeb92221659067b5d83c6ca1639374ce9be555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25aeb92221659067b5d83c6ca1639374ce9be555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25aeb92221659067b5d83c6ca1639374ce9be555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25aeb92221659067b5d83c6ca1639374ce9be555/comments", "author": null, "committer": null, "parents": [{"sha": "0a2fba3697411c07a8330abfe7460ce62bce5e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2fba3697411c07a8330abfe7460ce62bce5e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2fba3697411c07a8330abfe7460ce62bce5e7f"}], "stats": {"total": 618, "additions": 617, "deletions": 1}, "files": [{"sha": "e2e3e15ba1ff1dbd41c2b2f5b7dee45a1f2c4f84", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,7 @@\n+2022-09-06  Xianmiao Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* MAINTAINERS: Update c-sky port maintainers' emails.\n+\n 2022-08-31  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "2b22b70f33453a30efae58c8d38d30924e363e04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,104 @@\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106754\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain_pdom):\n+\tNew function, split out from compute_control_dep_chain.  Handle\n+\tloop-exit like conditions here by pushing to the control vector.\n+\t(compute_control_dep_chain): Adjust and streamline dumping.\n+\tIn the wrapper perform a post-dominator walk as well.\n+\t(uninit_analysis::init_use_preds): Remove premature early exit.\n+\n+2022-09-06  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/linux.h (LINK_SPEC): Add static-pie.\n+\n+2022-09-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* range-op-float.cc (build_le): Handle NANs and going past infinity.\n+\t(build_lt): Same.\n+\t(build_ge): Same.\n+\t(build_gt): Same.\n+\t(foperator_lt::op1_range): Avoid adjustments to range if build_*\n+\treturned false.\n+\t(foperator_lt::op2_range): Same.\n+\t(foperator_le::op1_range): Same.\n+\t(foperator_le::op2_range): Same.\n+\t(foperator_gt::op1_range): Same.\n+\t(foperator_gt::op2_range): Same.\n+\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n+\tAdd output flag to indicate whether we possibly have dropped\n+\tany chains.  Return whether the info is complete from the\n+\twrapping overload.\n+\t(uninit_analysis::init_use_preds): Adjust accordingly, with\n+\ta workaround for PR106754.\n+\t(uninit_analysis::init_from_phi_def): Properly guard the\n+\tcase where we complete an empty chain.\n+\n+2022-09-06  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/msp430/msp430.cc (msp430_single_op_cost): Document unused argument.\n+\n+2022-09-06  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* tree-ssa-forwprop.cc (simplify_permutation): Set res_type to a vector\n+\ttype with same element type as arg0, and length as op2.\n+\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106844\n+\t* gimple-predicate-analysis.cc (compute_control_dep_chain):\n+\tReturn whether we found a chain.\n+\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106841\n+\t* tree-vect-slp.cc (vect_detect_hybrid_slp): Also process\n+\tscatter/gather offset.\n+\n+2022-09-06  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* config/bpf/bpf.h (REGNO_REG_CLASS): Reference arguments as (void).\n+\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimple.h (enum gf_mask): Add GF_OMP_ORDERED_STANDALONE enumerator.\n+\t(gimple_omp_subcode):  Use GIMPLE_OMP_ORDERED instead of\n+\tGIMPLE_OMP_TEAMS as upper bound.\n+\t(gimple_omp_ordered_standalone_p, gimple_omp_ordered_standalone): New\n+\tinline functions.\n+\t* gimplify.cc (find_standalone_omp_ordered): Look for OMP_ORDERED with\n+\tNULL OMP_ORDERED_BODY rather than with OMP_DOACROSS clause.\n+\t(gimplify_expr): Call gimple_omp_ordered_standalone for OMP_ORDERED\n+\twith NULL OMP_ORDERED_BODY.\n+\t* omp-low.cc (check_omp_nesting_restrictions): Use\n+\tgimple_omp_ordered_standalone_p test instead of\n+\tomp_find_clause (..., OMP_CLAUSE_DOACROSS).\n+\t(lower_omp_ordered): Likewise.\n+\t* omp-expand.cc (expand_omp, build_omp_regions_1,\n+\tomp_make_gimple_edges): Likewise.\n+\n+2022-09-06  Xianmiao Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config/csky/csky.md (cskyv2_addcc): Fix missing operand.\n+\t(cskyv2_addcc_invert): Likewise.\n+\n+2022-09-06  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config/bpf/bpf.cc (bpf_expand_prologue): Remove unused automatic\n+\t`insn'.\n+\t(bpf_expand_epilogue): Likewise.\n+\n+2022-09-06  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-builtin.def (IX86_BUILTIN_CVTPS2PH512):\n+\tMap to CODE_FOR_avx512f_vcvtps2ph512_mask_sae.\n+\t* config/i386/sse.md (<mask_codefor>avx512f_vcvtps2ph512<mask_name>): Extend to ..\n+\t(<mask_codefor>avx512f_vcvtps2ph512<mask_name><round_saeonly_name>): .. this.\n+\t(avx512f_vcvtps2ph512_mask_sae): New expander\n+\n 2022-09-05  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-range-fold.cc"}, {"sha": "a4aec9eaaa2eef79e65339f45f31ea64b4c0d01d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1 +1 @@\n-20220906\n+20220907"}, {"sha": "b1fbd1ec2db47a221e037fb4eb27353a048b4612", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 432, "deletions": 0, "changes": 432, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,435 @@\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.cc (gnat_to_gnu_param): Set DECL_ARTIFICIAL.\n+\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (At_End_Proc_to_gnu): Use the End_Label of\n+\tthe child Handled_Statement_Sequence for body nodes.\n+\t(set_end_locus_from_node): Minor tweaks.\n+\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (Full_View_Of_Private_Constant): New\n+\tfunction returning the Full_View of a private constant, after\n+\tlooking through a chain of renamings, if any.\n+\t(Identifier_to_gnu): Call it on the entity.  Small cleanup.\n+\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.cc (gnat_pushdecl): Preserve named\n+\tTYPE_DECLs consistently for all kind of pointer types.\n+\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (gnat_to_gnu) <N_Op_Divide>: Report a\n+\tviolation of No_Dependence on System.GCC if the result type is\n+\tlarger than a word.\n+\t<N_Op_Shift>: Likewise.\n+\t<N_Op_Mod>: Likewise.\n+\t<N_Op_Rem>: Likewise.\n+\t(convert_with_check): Report a violation of No_Dependence on\n+\tSystem.GCC for a conversion between an integer type larger than\n+\ta word and a floating-point type.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch9.adb\n+\t(Allows_Lock_Free_Implementation): Return False if\n+\tSupport_Atomic_Primitives is False.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* debug.adb: Remove comment regarding the -gnatd9 switch.\n+\t* doc/gnat_rm/implementation_defined_attributes.rst: Remove all\n+\tmention of the Lock_Free attribute.\n+\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.\n+\t* exp_attr.adb, sem_attr.adb: Remove all mention of the former\n+\tAttribute_Lock_Free enumeration element of the Attribute_Id type.\n+\t* sem_ch9.adb\n+\t(Allows_Lock_Free_Implementation): Remove the Debug_Flag_9 test.\n+\tReturn False in the case of a protected function whose result type\n+\trequires use of the secondary stack.\n+\t(Satisfies_Lock_Free_Requirements): This functions checks for\n+\tcertain constructs and returns False if one is found. In the case\n+\tof a protected function, there is no need to check to see if the\n+\tprotected object is being modified. So it is ok to omit *some*\n+\tchecks in the case of a protected function. But other checks which\n+\tare required (e.g., the test for a reference to a variable that is\n+\tnot part of the protected object) were being incorrectly omitted.\n+\tThis could result in accepting \"Lock_Free => True\" aspect\n+\tspecifications that should be rejected.\n+\t* snames.adb-tmpl: Name_Lock_Free no longer requires special\n+\ttreatment in Get_Pragma_Id or Is_Pragma_Name (because it is no\n+\tlonger an attribute name).\n+\t* snames.ads-tmpl: Move the declaration of Name_Lock_Free to\n+\treflect the fact that it is no longer the name of an attribute.\n+\tDelete Attribute_Lock_Free from the Attribute_Id enumeration type.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-coorse.ads: Restore Aggregate aspect specification for\n+\ttype Set.\n+\n+2022-09-06  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* exp_util.adb (Build_Allocate_Deallocate_Proc): Add\n+\tAlignment_Param in the formal list for calls to SS_Allocate.\n+\n+2022-09-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Process_Formals): Preserve Has_Private_View flag while\n+\trewriting formal into actual parameters.\n+\n+2022-09-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* debug.adb\n+\t(Debug_Flag_Underscore_X): Switch added temporarily to allow\n+\tdisabling extra formal checks.\n+\t* exp_attr.adb\n+\t(Expand_N_Attribute_Reference [access types]): Add extra formals\n+\tto the subprogram referenced in the prefix of 'Unchecked_Access,\n+\t'Unrestricted_Access or 'Access; required to check that its extra\n+\tformals match the extra formals of the corresponding subprogram\n+\ttype.\n+\t* exp_ch3.adb\n+\t(Stream_Operation_OK): Declaration moved to the public part of the\n+\tpackage.\n+\t(Validate_Tagged_Type_Extra_Formals): New subprogram.\n+\t(Expand_Freeze_Record_Type): Improve the code that takes care of\n+\tadding the extra formals of dispatching primitives; extended to\n+\tadd also the extra formals to renamings of dispatching primitives.\n+\t* exp_ch3.ads\n+\t(Stream_Operation_OK): Declaration moved from the package body.\n+\t* exp_ch6.adb\n+\t(Has_BIP_Extra_Formal): Subprogram declaration moved to the public\n+\tpart of the package. In addition, a parameter has been added to\n+\tdisable an assertion that requires its use with frozen entities.\n+\t(Expand_Call_Helper): Enforce assertion checking extra formals on\n+\tthunks.\n+\t(Is_Build_In_Place_Function): Return False for entities with\n+\tforeign convention.\n+\t(Make_Build_In_Place_Call_In_Object_Declaration): Occurrences of\n+\tIs_Return_Object replaced by the local variable\n+\tIs_OK_Return_Object that evaluates to False for scopes with\n+\tforeign convention.\n+\t(Might_Have_Tasks): Fix check of class-wide limited record types.\n+\t(Needs_BIP_Task_Actuals): Remove assertion to allow calling this\n+\tfunction in more contexts; in addition it returns False for\n+\tfunctions returning objects with foreign convention.\n+\t(Needs_BIP_Finalization_Master): Likewise.\n+\t(Needs_BIP_Alloc_Form): Likewise.\n+\t* exp_ch6.ads\n+\t(Stream_Operation_OK): Declaration moved from the package body. In\n+\taddition, a parameter has been added to disable assertion that\n+\trequires its use with frozen entities.\n+\t* freeze.adb\n+\t(Check_Itype): Add extra formals to anonymous access subprogram\n+\titypes.\n+\t(Freeze_Expression): Improve code that disables the addition of\n+\textra formals to functions with foreign convention.\n+\t(Check_Extra_Formals): Moved to package Sem_Ch6 as\n+\tExtra_Formals_OK.\n+\t(Freeze_Subprogram): Add extra formals to non-dispatching\n+\tsubprograms.\n+\t* sem_ch3.adb\n+\t(Access_Subprogram_Declaration): Defer the addition of extra\n+\tformals to the freezing point so that we know the convention.\n+\t(Check_Anonymous_Access_Component): Likewise.\n+\t(Derive_Subprogram): Fix documentation.\n+\t* sem_ch6.adb\n+\t(Check_Anonymous_Return): Fix check of access to class-wide\n+\tlimited record types.\n+\t(Check_Untagged_Equality): Placed in alphabetical order.\n+\t(Extra_Formals_OK): Subprogram moved from freeze.adb.\n+\t(Extra_Formals_Match_OK): New subprogram.\n+\t(Has_BIP_Formals): New subprogram.\n+\t(Has_Extra_Formals): New subprograms.\n+\t(Needs_Accessibility_Check_Extra): New subprogram.\n+\t(Needs_Constrained_Extra): New subprogram.\n+\t(Parent_Subprogram): New subprogram.\n+\t(Add_Extra_Formal): Minor code cleanup.\n+\t(Create_Extra_Formals): Enforce matching extra formals on\n+\toverridden and aliased entities.\n+\t(Has_Reliable_Extra_Formals): New subprogram.\n+\t* sem_ch6.ads\n+\t(Extra_Formals_OK): Subprogram moved from freeze.adb.\n+\t(Extra_Formals_Match_OK): New subprogram.\n+\t* sem_eval.adb\n+\t(Compile_Time_Known_Value): Improve predicate to avoid assertion\n+\tfailure; found working on this ticket; this change does not affect\n+\tthe behavior of the compiler because this subprogram has an\n+\texception handler that returns False when the assertion fails.\n+\t* sem_util.adb\n+\t(Needs_Result_Accessibility_Level): Do not return False for\n+\tdispatching operations compiled with Ada_Version < 2012 since they\n+\tthey may be overridden by primitives compiled with Ada_Version >=\n+\tAda_2012.\n+\n+2022-09-06  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_If_Expression): Disable optimization\n+\tfor LLVM.\n+\n+2022-09-06  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb\n+\t(Analyze_Pre_Post_Condition_In_Decl_Part): Improve check to report\n+\tan error in non-legal class-wide conditions.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-strsup.adb, libgnat/a-stwisu.adb, libgnat/a-stzsup.adb\n+\t(Super_Slice function and procedure): fix slice length computation.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tImprove -gnatVa, -gnatVc, -gnatVd, -gnatVe, -gnatVf, -gnatVo,\n+\t-gnatVp, -gnatVr, and -gnatVs switch descriptions.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-09-06  Justin Squirek  <squirek@adacore.com>\n+\n+\t* exp_unst.adb\n+\t(Visit_Node): Add N_Block_Statement to the enclosing construct\n+\tcase since they can now have \"At end\" procedures. Also, recognize\n+\tcalls from \"At end\" procedures when recording subprograms.\n+\n+2022-09-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Replace_Formal): Fix name of the referenced routine.\n+\n+2022-09-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Old]):\n+\tRemove unnecessary local constant that was shadowing another\n+\tconstant with the same initial value.\n+\n+2022-09-06  Julien Bortolussi  <bortolussi@adacore.com>\n+\n+\t* libgnat/a-cforse.ads (Replace): Fix the postcondition.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_attr.adb\n+\t(Attribute_Valid): Ensure that PBtyp is initialized to a value for\n+\twhich Is_Scalar_Type is True.\n+\t* checks.adb\n+\t(Determine_Range): Call Implemention_Base_Type instead of\n+\tBase_Type in order to ensure that result is suitable for passing\n+\tto Enum_Pos_To_Rep.\n+\n+2022-09-06  Bob Duff  <duff@adacore.com>\n+\t    Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gen_il-fields.ads\n+\t(First_Real_Statement): Remove this field.\n+\t* gen_il-gen-gen_nodes.adb: Remove the First_Real_Statement field.\n+\tAdd the At_End_Proc field to nodes that have both Declarations and\n+\tHSS.\n+\t* sinfo.ads\n+\t(At_End_Proc): Document new semantics.\n+\t(First_Real_Statement): Remove comment.\n+\t* exp_ch11.adb\n+\t(Expand_N_Handled_Sequence_Of_Statements): Remove\n+\tFirst_Real_Statement.\n+\t* exp_ch7.adb\n+\t(Build_Cleanup_Statements): Remove \"Historical note\"; it doesn't\n+\tseem useful, and we have revision history.\n+\t(Create_Finalizer): Insert the finalizer later, typically in the\n+\tstatement list, in some cases.\n+\t(Build_Finalizer_Call): Attach the \"at end\" handler to the parent\n+\tof the HSS node in most cases, so it applies to declarations.\n+\t(Expand_Cleanup_Actions): Remove Wrap_HSS_In_Block and the call to\n+\tit. Remove the code that moves declarations. Remove some redundant\n+\tcode.\n+\t* exp_ch9.adb\n+\t(Build_Protected_Entry): Copy the At_End_Proc.\n+\t(Build_Protected_Subprogram_Body): Reverse the sense of Exc_Safe,\n+\tto avoid double negatives. Remove \"Historical note\" as in\n+\texp_ch7.adb.\n+\t(Build_Unprotected_Subprogram_Body): Copy the At_End_Proc from the\n+\tprotected version.\n+\t(Expand_N_Conditional_Entry_Call): Use First (Statements(...))\n+\tinstead of First_Real_Statement(...).\n+\t(Expand_N_Task_Body): Put the Abort_Undefer call at the beginning\n+\tof the declarations, rather than in the HSS. Use First\n+\t(Statements(...)) instead of First_Real_Statement(...). Copy the\n+\tAt_End_Proc.\n+\t* inline.adb\n+\t(Has_Initialized_Type): Return False if the declaration does not\n+\tcome from source.\n+\t* libgnarl/s-tpoben.ads\n+\t(Lock_Entries, Lock_Entries_With_Status): Document when these\n+\tthings raise Program_Error. It's not clear that\n+\tLock_Entries_With_Status ought to be raising exceptions, but at\n+\tleast it's documented now.\n+\t* sem.ads: Minor comment fixes.\n+\t* sem_ch6.adb\n+\t(Analyze_Subprogram_Body_Helper): Use First (Statements(...))\n+\tinstead of First_Real_Statement(...).\n+\t(Analyze_Null_Procedure): Minor comment fix.\n+\t* sem_util.adb\n+\t(Might_Raise): Return True for N_Raise_Expression. Adjust the part\n+\tabout exceptions generated by the back end to match the reality of\n+\twhat the back end generates.\n+\t(Update_First_Real_Statement): Remove.\n+\t* sem_util.ads: Remove First_Real_Statement from comment.\n+\t* sinfo-utils.ads\n+\t(First_Real_Statement): New function that always returns Empty.\n+\tThis should be removed once gnat-llvm and codepeer have been\n+\tupdated to not refer to First_Real_Statement.\n+\t* sprint.adb\n+\t(Sprint_At_End_Proc): Deal with printing At_End_Proc.\n+\t* sem_prag.adb: Minor comment fixes.\n+\t* gcc-interface/trans.cc (At_End_Proc_to_gnu): New function.\n+\t(Subprogram_Body_to_gnu): Call it to handle an At_End_Proc.\n+\t(Handled_Sequence_Of_Statements_to_gnu): Likewise. Remove the\n+\tsupport for First_Real_Statement and clean up the rest.\n+\t(Exception_Handler_to_gnu): Do not push binding levels.\n+\t(Compilation_Unit_to_gnu): Adjust call to process_decls.\n+\t(gnat_to_gnu) <N_Package_Specification>: Likewise. <N_Entry_Body>:\n+\tLikewise. <N_Freeze_Entity>: Likewise. <N_Block_Statement>:\n+\tLikewise and call At_End_Proc_to_gnu to handle an At_End_Proc.\n+\t<N_Package_Body>: Likewise.\n+\t(process_decls): Remove GNAT_END_LIST parameter and adjust\n+\trecursive calls.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document new\n+\ttemporary rule that a \"when others =>\" case choice must be given\n+\twhen casing on a composite selector.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_case.adb: Define a new Boolean constant,\n+\tSimplified_Composite_Coverage_Rules, initialized to True. Setting\n+\tthis constant to True has two effects: 1- Representative value\n+\tsets are not fully initialized - this is done to avoid capacity\n+\tproblems, as well as for performance. 2- In\n+\tCheck_Case_Pattern_Choices, the only legality check performed is a\n+\tcheck that a \"when others =>\" choice is present.\n+\n+2022-09-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Relaxed_Initialization): Fix error\n+\ttemplate.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_attr.adb\n+\t(Make_Range_Test): In determining which subtype's First and Last\n+\tattributes are to be queried as part of a range test, call\n+\tValidated_View in order to get a scalar (as opposed to private)\n+\tsubtype.\n+\t(Attribute_Valid): In determining whether to perform a signed or\n+\tunsigned comparison for a range test, call Validated_View in order\n+\tto get a scalar (as opposed to private) type. Also correct a typo\n+\twhich, by itself, is the source of the problem reported for this\n+\tticket.\n+\n+2022-09-06  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch4.adb\n+\t(Analyze_Selected_Component): Define new Boolean-valued function,\n+\tConstraint_Has_Unprefixed_Discriminant_Reference, which takes a\n+\tsubtype that is subject to a discriminant-dependent constraint and\n+\treturns True if any of the constraint values are unprefixed\n+\tdiscriminant names. Usually, the Etype of a selected component\n+\tnode is set to Etype of the component. However, in the case of an\n+\taccess-to-array component for which this predicate returns True,\n+\twe instead use the base type of the Etype of the component.\n+\tNormally such problematic discriminant references are addressed by\n+\tcalling Build_Actual_Subtype_Of_Component, but that doesn't work\n+\tif Full_Analyze is False.\n+\n+2022-09-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* Makefile.rtl (GNATRTL_NONTASKING_OBJS): Include\n+\tSystem.Value_U_Spec and System.Value_I_Spec units.\n+\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-powflt.ads (Powfive): New constant array.\n+\t* libgnat/s-powlfl.ads (Powfive): Likewise.\n+\t(Powfive_100): New constant.\n+\t(Powfive_200): Likewise.\n+\t(Powfive_300): Likewise.\n+\t* libgnat/s-powllf.ads (Powfive): New constant array.\n+\t(Powfive_100): New constant.\n+\t(Powfive_200): Likewise.\n+\t(Powfive_300): Likewise.\n+\t* libgnat/s-valflt.ads (Impl): Replace Powten with Powfive and pass\n+\tNull_Address for the address of large constants.\n+\t* libgnat/s-vallfl.ads (Impl): Replace Powten with Powfive and pass\n+\tthe address of large constants.\n+\t* libgnat/s-valllf.ads (Impl): Likewise.\n+\t* libgnat/s-valrea.ads (System.Val_Real): Replace Powten_Address\n+\twith Powfive_Address and add Powfive_{1,2,3}00_Address parameters.\n+\t* libgnat/s-valrea.adb (Is_Large_Type): New boolean constant.\n+\t(Is_Very_Large_Type): Likewise.\n+\t(Maxexp32): Change value of 10 to that of 5.\n+\t(Maxexp64): Likewise.\n+\t(Maxexp80): Likewise.\n+\t(Integer_to_Real): Use a combination of tables of powers of 5 and\n+\tscaling if the base is 10.\n+\t(Large_Powten): Rename into...\n+\t(Large_Powfive): ...this.  Add support for large constants.\n+\t(Large_Powfive): New overloaded function for very large exponents.\n+\n+2022-09-06  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_aspects.rst\n+\t(Aspect Iterable): Include Last and Previous primitives in\n+\tsyntactic and semantic description.\n+\t* exp_attr.adb\n+\t(Expand_N_Attribute_Reference): Don't expect attributes like\n+\tIterable that can only appear in attribute definition clauses.\n+\t* sem_ch13.adb\n+\t(Analyze_Attribute_Definition_Clause): Prevent crash on\n+\tnon-aggregate Iterable attribute; improve basic diagnosis of\n+\tattribute values.\n+\t(Resolve_Iterable_Operation): Improve checks for illegal\n+\tprimitives in aspect Iterable, e.g. with wrong number of formal\n+\tparameters.\n+\t(Validate_Iterable_Aspect): Prevent crashes on syntactically\n+\tillegal aspect expression.\n+\t* sem_util.adb\n+\t(Get_Cursor_Type): Fix style.\n+\t* gnat_ugn.texi, gnat_rm.texi: Regenerate.\n+\n+2022-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* libgnat/s-valuer.ads (System.Value_R): Add Parts formal parameter\n+\tas well as Data_Index, Scale_Array and Value_Array types.\n+\t(Scan_Raw_Real): Change type of Scale and return type.\n+\t(Value_Raw_Real): Likewise.\n+\t* libgnat/s-valuer.adb (Round_Extra): Reorder parameters and adjust\n+\trecursive call.\n+\t(Scan_Decimal_Digits): Reorder parameters, add N parameter and deal\n+\twith multi-part scale and value.\n+\t(Scan_Integral_Digits): Likewise.\n+\t(Scan_Raw_Real): Change type of Scale and return type and deal with\n+\tmulti-part scale and value.\n+\t(Value_Raw_Real): Change type of Scale and return type and tidy up.\n+\t* libgnat/s-valued.adb (Impl): Pass 1 as Parts actual parameter.\n+\t(Scan_Decimal): Adjust to type changes.\n+\t(Value_Decimal): Likewise.\n+\t* libgnat/s-valuef.adb (Impl): Pass 1 as Parts actual parameter.\n+\t(Scan_Fixed): Adjust to type changes.\n+\t(Value_Fixed): Likewise.\n+\t* libgnat/s-valrea.adb (Need_Extra): Delete.\n+\t(Precision_Limit): Always use the precision of the mantissa.\n+\t(Impl): Pass 2 as Parts actual parameter.\n+\t(Exact_Log2): New expression function.\n+\t(Integer_to_Real): Change type of Scale and Val and deal with a\n+\t2-part integer mantissa.\n+\t(Scan_Real): Adjust to type changes.\n+\t(Value_Real): Likewise.\n+\n 2022-09-05  Martin Liska  <mliska@suse.cz>\n \n \t* sigtramp-vxworks-target.h: Rename DBX_REGISTER_NUMBER to"}, {"sha": "9233213d2f2ac12b110739b886f903822baf6d9c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,8 @@\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/106836\n+\t* c-omp.cc (c_omp_split_clauses): Handle OMP_CLAUSE_DOACROSS.\n+\n 2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-pragma.h (enum pragma_omp_clause): Add PRAGMA_OMP_CLAUSE_DOACROSS."}, {"sha": "f0c49710d2299e83c264c726c7c4cee2c08339db", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,8 @@\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parser_omp_clause_doacross_sink): Don't verify val\n+\tin omp_cur_iteration - 1 has integer_type_node type.\n+\n 2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.cc (c_parser_omp_clause_name): Handle doacross."}, {"sha": "d068bf1cbfd0a2795e17aa79f77d6f29dc473e93", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,17 @@\n+2022-09-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.cc (grok_op_properties): Return sooner for C++23 op[].\n+\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.cc (cp_parser_omp_clause_doacross_sink): Don't verify val\n+\tin omp_cur_iteration - 1 has integer_type_node type.\n+\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* pt.cc (tsubst_expr) <case OMP_ORDERED>: If OMP_BODY was NULL, keep\n+\tit NULL after instantiation too.\n+\n 2022-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.cc (cp_parser_omp_clause_name): Handle doacross."}, {"sha": "ebd29cd414811c6c654b3882121e895dc9fdb1bc", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,8 @@\n+2022-09-06  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* openmp.cc (resolve_omp_clauses): Remove ordered/linear\n+\tcheck as it is handled now in the middle end.\n+\n 2022-09-05  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* dump-parse-tree.cc (show_omp_namelist, show_omp_clauses): Handle"}, {"sha": "0cf2d2e2dc4da7b1198dbaf4437e2611f29e4b88", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,47 @@\n+2022-09-06  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp23/subscript8.C: New test.\n+\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106754\n+\t* gcc.dg/uninit-pred-12.c: New testcase.\n+\t* gcc.dg/uninit-pr106155-1.c: Likewise.\n+\n+2022-09-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp-float-inf-1.c: New test.\n+\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106844\n+\t* gcc.dg/pr106844.c: New testcase.\n+\n+2022-09-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106841\n+\t* g++.dg/vect/pr106841.cc: New testcase.\n+\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/doacross-6.c (corge): Don't expect an error here.\n+\tAdd a few further tests.\n+\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/106836\n+\t* c-c++-common/gomp/pr106836.c: New test.\n+\n+2022-09-06  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/sink-3.c: Don't expect a superfluous error during\n+\terror recovery.\n+\t* c-c++-common/gomp/doacross-6.c (foo): Add further tests.\n+\n+2022-09-06  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vcvtps2ph-sae.c: New test.\n+\n 2022-09-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/cpp/c11-trigraphs-1.c, gcc.dg/cpp/c2x-trigraphs-1.c,"}, {"sha": "78913d83b9b2c3a34eabcd593ec4b32f727f919c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25aeb92221659067b5d83c6ca1639374ce9be555/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25aeb92221659067b5d83c6ca1639374ce9be555/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=25aeb92221659067b5d83c6ca1639374ce9be555", "patch": "@@ -1,3 +1,9 @@\n+2022-09-06  Philipp Fent  <fent@in.tum.de>\n+\n+\t* testsuite/libstdc++-prettyprinters/48362.cc: Fix expected\n+\ttuple indices.\n+\t* testsuite/libstdc++-prettyprinters/cxx11.cc: Likewise.\n+\n 2022-09-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/type_traits (__success_type, __failure_type): Move"}]}