{"sha": "2984fe64968ad7140e84f8137c877c9e6d25136a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk4NGZlNjQ5NjhhZDcxNDBlODRmODEzN2M4NzdjOWU2ZDI1MTM2YQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2002-08-17T14:48:28Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2002-08-17T14:48:28Z"}, "message": "c-decl.c (flexible_array_type_p): New function.\n\n\t* c-decl.c (flexible_array_type_p): New function.\n\t(grokdeclarator, finish_struct): Use it.\n\t* doc/extend.texi: Document constraints on use of structures with\n\tflexible array members.\n\ntestsuite:\n\t* gcc.dg/c90-flex-array-1.c, gcc.dg/c99-flex-array-3.c,\n\tgcc.dg/c99-flex-array-4.c: New tests.\n\nFrom-SVN: r56411", "tree": {"sha": "89955359e44fa2311d348937a438303874397fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89955359e44fa2311d348937a438303874397fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2984fe64968ad7140e84f8137c877c9e6d25136a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2984fe64968ad7140e84f8137c877c9e6d25136a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2984fe64968ad7140e84f8137c877c9e6d25136a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2984fe64968ad7140e84f8137c877c9e6d25136a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fded6d781c8e005bc195fc047a7e480073871c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fded6d781c8e005bc195fc047a7e480073871c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fded6d781c8e005bc195fc047a7e480073871c35"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "8ebb481b48c777e7a3f3b41f8cf835f8f54a84fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -1,3 +1,10 @@\n+2002-08-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* c-decl.c (flexible_array_type_p): New function.\n+\t(grokdeclarator, finish_struct): Use it.\n+\t* doc/extend.texi: Document constraints on use of structures with\n+\tflexible array members.\n+\n 2002-08-17  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/t-coff, config/mips/t-elf, config/mips/t-isa3264,"}, {"sha": "d61d9557be6696b4db61484734da324ac044e9f1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -282,6 +282,7 @@ static void layout_array_type\t\tPARAMS ((tree));\n static tree c_make_fname_decl           PARAMS ((tree, int));\n static void c_expand_body               PARAMS ((tree, int, int));\n static void warn_if_shadowing\t\tPARAMS ((tree, tree));\n+static bool flexible_array_type_p\tPARAMS ((tree));\n \f\n /* States indicating how grokdeclarator() should handle declspecs marked\n    with __attribute__((deprecated)).  An object declared as\n@@ -3357,6 +3358,40 @@ complete_array_type (type, initial_value, do_default)\n   return value;\n }\n \f\n+/* Determine whether TYPE is a structure with a flexible array member,\n+   or a union containing such a structure (possibly recursively).  */\n+\n+static bool\n+flexible_array_type_p (type)\n+     tree type;\n+{\n+  tree x;\n+  switch (TREE_CODE (type))\n+    {\n+    case RECORD_TYPE:\n+      x = TYPE_FIELDS (type);\n+      if (x == NULL_TREE)\n+\treturn false;\n+      while (TREE_CHAIN (x) != NULL_TREE)\n+\tx = TREE_CHAIN (x);\n+      if (TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n+\t  && TYPE_SIZE (TREE_TYPE (x)) == NULL_TREE\n+\t  && TYPE_DOMAIN (TREE_TYPE (x)) != NULL_TREE\n+\t  && TYPE_MAX_VALUE (TYPE_DOMAIN (TREE_TYPE (x))) == NULL_TREE)\n+\treturn true;\n+      return false;\n+    case UNION_TYPE:\n+      for (x = TYPE_FIELDS (type); x != NULL_TREE; x = TREE_CHAIN (x))\n+\t{\n+\t  if (flexible_array_type_p (TREE_TYPE (x)))\n+\t    return true;\n+\t}\n+      return false;\n+    default:\n+    return false;\n+  }\n+}\n+\f\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared\n    and construct a ..._DECL node for it.\n@@ -3953,6 +3988,9 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n \t      type = error_mark_node;\n \t    }\n \n+\t  if (pedantic && flexible_array_type_p (type))\n+\t    pedwarn (\"invalid use of structure with flexible array member\");\n+\n \t  if (size == error_mark_node)\n \t    type = error_mark_node;\n \n@@ -5216,6 +5254,11 @@ finish_struct (t, fieldlist, attributes)\n \t  else if (! saw_named_field)\n \t    error_with_decl (x, \"flexible array member in otherwise empty struct\");\n \t}\n+\n+      if (pedantic && TREE_CODE (t) == RECORD_TYPE\n+\t  && flexible_array_type_p (TREE_TYPE (x)))\n+\tpedwarn_with_decl (x, \"invalid use of structure with flexible array member\");\n+\n       if (DECL_NAME (x))\n \tsaw_named_field = 1;\n     }"}, {"sha": "32fabae5ccf6779321fa4da935cfc3234d14fac0", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -1293,6 +1293,12 @@ of zero-length arrays, @code{sizeof} evaluates to zero.\n @item\n Flexible array members may only appear as the last member of a\n @code{struct} that is otherwise non-empty.\n+\n+@item\n+A structure containing a flexible array member, or a union containing\n+such a structure (possibly recursively), may not be a member of a\n+structure or an element of an array.  (However, these uses are\n+permitted by GCC as extensions.)\n @end itemize\n \n GCC versions before 3.0 allowed zero-length arrays to be statically"}, {"sha": "dad59ab4d4a8161e9a919383b7afd74a5ff6ca66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -1,3 +1,8 @@\n+2002-08-17  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* gcc.dg/c90-flex-array-1.c, gcc.dg/c99-flex-array-3.c,\n+\tgcc.dg/c99-flex-array-4.c: New tests.\n+\n 2002-08-16  Stan Shebs  <shebs@apple.com>\n \n \t* objc/execute/selector-1.m: Add __NEXT_RUNTIME__ case."}, {"sha": "1eead199e12691de1f565fa07067dc36e89dc54c", "filename": "gcc/testsuite/gcc.dg/c90-flex-array-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-flex-array-1.c?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -0,0 +1,7 @@\n+/* Test for flexible array members.  Test for rejection in C90 mode.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1990 -pedantic-errors\" } */\n+\n+struct flex { int a; int b[]; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"ISO C90\" \"flexible array members not in C90\" { target *-*-* } 6 } */"}, {"sha": "e8647f6ec7be673fa1e8dc38647d86be38e03b5f", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-3.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-3.c?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -0,0 +1,47 @@\n+/* Test for flexible array members.  Test for where structures with\n+   such members may not occur.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+struct flex { int a; int b[]; };\n+union rf1 { struct flex a; int b; };\n+union rf2 { int a; struct flex b; };\n+union rf3 { int a; union rf1 b; };\n+union rf4 { union rf2 a; int b; };\n+\n+/* The above structure and unions may not be members of structures or\n+   elements of arrays (6.7.2.1#2).  */\n+\n+struct t0 { struct flex a; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"struct in struct\" { target *-*-* } 16 } */\n+struct t1 { union rf1 a; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"union in struct\" { target *-*-* } 18 } */\n+struct t2 { union rf2 a; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"union in struct\" { target *-*-* } 20 } */\n+struct t3 { union rf3 a; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"recursive union in struct\" { target *-*-* } 22 } */\n+struct t4 { union rf4 a; }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"recursive union in struct\" { target *-*-* } 24 } */\n+\n+void f0 (struct flex[]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"struct in array\" { target *-*-* } 27 } */\n+void f1 (union rf1[]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"union in array\" { target *-*-* } 29 } */\n+void f2 (union rf2[]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"union in array\" { target *-*-* } 31 } */\n+void f3 (union rf3[]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"recursive union in array\" { target *-*-* } 33 } */\n+void f4 (union rf4[]); /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"recursive union in array\" { target *-*-* } 35 } */\n+\n+struct flex a0[1]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"struct in array\" { target *-*-* } 38 } */\n+union rf1 a1[1]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"union in array\" { target *-*-* } 40 } */\n+union rf2 a2[1]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"union in array\" { target *-*-* } 42 } */\n+union rf3 a3[1]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"recursive union in array\" { target *-*-* } 44 } */\n+union rf4 a4[1]; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n+/* { dg-error \"invalid use of structure\" \"recursive union in array\" { target *-*-* } 46 } */"}, {"sha": "ab20cf07cc468dd72ab9a22067938456a59cdaba", "filename": "gcc/testsuite/gcc.dg/c99-flex-array-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2984fe64968ad7140e84f8137c877c9e6d25136a/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-flex-array-4.c?ref=2984fe64968ad7140e84f8137c877c9e6d25136a", "patch": "@@ -0,0 +1,25 @@\n+/* Test for flexible array members.  Test for agreement of offset and\n+   structure size.  This is expected to fail, because of a possible\n+   defect in the standard.  */\n+/* Origin: http://gcc.gnu.org/ml/gcc/2002-05/msg02844.html\n+   from Tony Finch <dot@dotat.at>, adapted to a testcase by Joseph Myers\n+   <jsm28@cam.ac.uk>.  See also WG14 reflector messages 9571-3.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=iso9899:1999 -pedantic-errors\" } */\n+\n+#include <stddef.h>\n+\n+struct foo {\n+  int a;\n+  short b;\n+  char pad[];\n+};\n+\n+struct bar {\n+  int a;\n+  short b;\n+  char pad[1024];\n+};\n+\n+char x[(sizeof(struct foo) == offsetof(struct foo, pad)) ? 1 : -1]; /* { dg-bogus \"negative\" \"sizeof != offsetof\" { xfail *-*-* } } */\n+char y[(offsetof(struct foo, pad) == offsetof(struct bar, pad)) ? 1 : -1];"}]}