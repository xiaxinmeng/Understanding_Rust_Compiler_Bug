{"sha": "0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "node_id": "C_kwDOANBUbNoAKDBkODc1M2NmMzA0ODZjNGU3ZmIwNzQ1NWI3Y2FlNDlhYTgxMmM2YTQ", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2020-03-26T21:22:45Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2022-10-11T10:37:10Z"}, "message": "amdgcn: Resolve insn conditions at compile time\n\nGET_MODE_NUNITS isn't a compile time constant, so we end up with many\nimpossible insns in the machine description.  Adding MODE_VF allows the insns\nto be eliminated completely.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-valu.md\n\t(<cvt_name><VCVT_MODE:mode><VCVT_FMODE:mode>2<exec>): Use MODE_VF.\n\t(<cvt_name><VCVT_FMODE:mode><VCVT_IMODE:mode>2<exec>): Likewise.\n\t* config/gcn/gcn.h (MODE_VF): New macro.", "tree": {"sha": "9ade043577b6405a2e0977e6d1b3e4e51eb8d347", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ade043577b6405a2e0977e6d1b3e4e51eb8d347"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d8753cf30486c4e7fb07455b7cae49aa812c6a4/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45381d6f9f4e7b5c7b062f5ad8cc9788091c2d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45381d6f9f4e7b5c7b062f5ad8cc9788091c2d07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45381d6f9f4e7b5c7b062f5ad8cc9788091c2d07"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "c7be23611647ceb7be381e790be59e13e1006225", "filename": "gcc/config/gcn/gcn-valu.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8753cf30486c4e7fb07455b7cae49aa812c6a4/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8753cf30486c4e7fb07455b7cae49aa812c6a4/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-valu.md?ref=0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "patch": "@@ -2873,8 +2873,9 @@\n   [(set (match_operand:VCVT_FMODE 0 \"register_operand\" \"=  v\")\n \t(cvt_op:VCVT_FMODE\n \t  (match_operand:VCVT_MODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n-  \"gcn_valid_cvt_p (<VCVT_MODE:MODE>mode, <VCVT_FMODE:MODE>mode,\n-\t\t    <cvt_name>_cvt)\"\n+  \"MODE_VF (<VCVT_MODE:MODE>mode) == MODE_VF (<VCVT_FMODE:MODE>mode)\n+   && gcn_valid_cvt_p (<VCVT_MODE:MODE>mode, <VCVT_FMODE:MODE>mode,\n+\t\t       <cvt_name>_cvt)\"\n   \"v_cvt<cvt_operands>\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])\n@@ -2883,8 +2884,9 @@\n   [(set (match_operand:VCVT_IMODE 0 \"register_operand\"  \"=  v\")\n \t(cvt_op:VCVT_IMODE\n \t  (match_operand:VCVT_FMODE 1 \"gcn_alu_operand\" \"vSvB\")))]\n-  \"gcn_valid_cvt_p (<VCVT_FMODE:MODE>mode, <VCVT_IMODE:MODE>mode,\n-\t\t    <cvt_name>_cvt)\"\n+  \"MODE_VF (<VCVT_IMODE:MODE>mode) == MODE_VF (<VCVT_FMODE:MODE>mode)\n+   && gcn_valid_cvt_p (<VCVT_FMODE:MODE>mode, <VCVT_IMODE:MODE>mode,\n+\t\t       <cvt_name>_cvt)\"\n   \"v_cvt<cvt_operands>\\t%0, %1\"\n   [(set_attr \"type\" \"vop1\")\n    (set_attr \"length\" \"8\")])"}, {"sha": "38f7212db59a209ca0762f62e26b924562878261", "filename": "gcc/config/gcn/gcn.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d8753cf30486c4e7fb07455b7cae49aa812c6a4/gcc%2Fconfig%2Fgcn%2Fgcn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d8753cf30486c4e7fb07455b7cae49aa812c6a4/gcc%2Fconfig%2Fgcn%2Fgcn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.h?ref=0d8753cf30486c4e7fb07455b7cae49aa812c6a4", "patch": "@@ -678,3 +678,27 @@ enum gcn_builtin_codes\n /* Trampolines */\n #define TRAMPOLINE_SIZE 36\n #define TRAMPOLINE_ALIGNMENT 64\n+\n+/* MD Optimization.\n+   The following are intended to be obviously constant at compile time to\n+   allow genconditions to eliminate bad patterns at compile time.  */\n+#define MODE_VF(M) \\\n+  ((M == V64QImode || M == V64HImode || M == V64HFmode || M == V64SImode \\\n+    || M == V64SFmode || M == V64DImode || M == V64DFmode) \\\n+   ? 64 \\\n+   : (M == V32QImode || M == V32HImode || M == V32HFmode || M == V32SImode \\\n+      || M == V32SFmode || M == V32DImode || M == V32DFmode) \\\n+   ? 32 \\\n+   : (M == V16QImode || M == V16HImode || M == V16HFmode || M == V16SImode \\\n+      || M == V16SFmode || M == V16DImode || M == V16DFmode) \\\n+   ? 16 \\\n+   : (M == V8QImode || M == V8HImode || M == V8HFmode || M == V8SImode \\\n+      || M == V8SFmode || M == V8DImode || M == V8DFmode) \\\n+   ? 8 \\\n+   : (M == V4QImode || M == V4HImode || M == V4HFmode || M == V4SImode \\\n+      || M == V4SFmode || M == V4DImode || M == V4DFmode) \\\n+   ? 4 \\\n+   : (M == V2QImode || M == V2HImode || M == V2HFmode || M == V2SImode \\\n+      || M == V2SFmode || M == V2DImode || M == V2DFmode) \\\n+   ? 2 \\\n+   : 1)"}]}