{"sha": "9d4c1565091e0017b2d4b54126f4d691d1d8681d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0YzE1NjUwOTFlMDAxN2IyZDRiNTQxMjZmNGQ2OTFkMWQ4NjgxZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-25T11:09:44Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-25T11:09:44Z"}, "message": "MappedByteFileBuffer.java, [...]: New files, both are not compiled yet to get not noncompiling CVS.\n\n2003-02-25  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/MappedByteFileBuffer.java,\n\tgnu/java/nio/natMappedByteFileBuffer.cc:\n\tNew files, both are not compiled yet to get not noncompiling CVS.\n\nFrom-SVN: r63403", "tree": {"sha": "c3783a6c80e03005b2c9dd6ee8eb19eb72e3a733", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3783a6c80e03005b2c9dd6ee8eb19eb72e3a733"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d4c1565091e0017b2d4b54126f4d691d1d8681d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c1565091e0017b2d4b54126f4d691d1d8681d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4c1565091e0017b2d4b54126f4d691d1d8681d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4c1565091e0017b2d4b54126f4d691d1d8681d/comments", "author": null, "committer": null, "parents": [{"sha": "b103bfefc953931570791246da6bc4264d07fd98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b103bfefc953931570791246da6bc4264d07fd98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b103bfefc953931570791246da6bc4264d07fd98"}], "stats": {"total": 572, "additions": 572, "deletions": 0}, "files": [{"sha": "5b55699f41fbee92da19bd023725d442944492d8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c1565091e0017b2d4b54126f4d691d1d8681d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c1565091e0017b2d4b54126f4d691d1d8681d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=9d4c1565091e0017b2d4b54126f4d691d1d8681d", "patch": "@@ -1,3 +1,9 @@\n+2003-02-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/MappedByteFileBuffer.java,\n+\tgnu/java/nio/natMappedByteFileBuffer.cc:\n+\tNew files, both are not compiled yet to get not noncompiling CVS.\n+\n 2003-02-24  Tom Tromey  <tromey@redhat.com>\n \n \t* java/util/prefs/AbstractPreferences.java (isUserNode):"}, {"sha": "e8399047d5a5e2277d2e044ba421de33a104ae64", "filename": "libjava/gnu/java/nio/MappedByteFileBuffer.java", "status": "added", "additions": 426, "deletions": 0, "changes": 426, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c1565091e0017b2d4b54126f4d691d1d8681d/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c1565091e0017b2d4b54126f4d691d1d8681d/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FMappedByteFileBuffer.java?ref=9d4c1565091e0017b2d4b54126f4d691d1d8681d", "patch": "@@ -0,0 +1,426 @@\n+/* MappedByteFileBuffer.java -- \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.nio;\n+import java.nio.*;\n+import java.io.IOException;\n+\n+final public class MappedByteFileBuffer\n+  extends MappedByteBuffer\n+{\n+  public long address;\n+  boolean readOnly;\n+  boolean direct;\n+  public FileChannelImpl ch;\n+  \n+  public MappedByteFileBuffer (FileChannelImpl ch) throws IOException\n+  {\n+    super ((int) ch.size (), (int) ch.size (), 0, -1);\n+    \n+    this.ch = ch;\n+    address = ch.address;\n+    try {\n+      long si = ch.size() / 1;\n+      limit((int)si);\n+    } catch (IOException e) {\n+      System.err.println(\"failed to get size of file-channel's file\");\n+    }\n+  }\n+  \n+  public MappedByteFileBuffer (MappedByteFileBuffer b)\n+  {\n+    // FIXME: fix last value\n+    super (b.capacity (), b.limit (), b.position (), -1);\n+    \n+    this.readOnly = b.isReadOnly ();\n+    this.ch = b.ch;\n+    address = b.address;\n+    limit (b.limit ());\n+  }\n+\n+  public boolean isReadOnly ()\n+  {\n+    return readOnly;\n+  }\n+  \n+  public static native byte nio_read_Byte_file_channel (FileChannelImpl ch,\n+                                                        int index, int limit,\n+                                                        long address);\n+  public static native void nio_write_Byte_file_channel (FileChannelImpl ch,\n+                                                         int index, int limit,\n+                                                         byte value,\n+                                                         long address);\n+  public static native short nio_read_Short_file_channel (FileChannelImpl ch,\n+                                                          int index, int limit,\n+                                                          long address);\n+  public static native void nio_write_Short_file_channel (FileChannelImpl ch,\n+                                                          int index, int limit,\n+                                                          short value,\n+                                                          long address);\n+  public static native char nio_read_Char_file_channel (FileChannelImpl ch,\n+                                                        int index, int limit,\n+                                                        long address);\n+  public static native void nio_write_Char_file_channel (FileChannelImpl ch,\n+                                                         int index, int limit,\n+                                                         char value,\n+                                                         long address);\n+  public static native int nio_read_Int_file_channel (FileChannelImpl ch,\n+                                                      int index, int limit,\n+                                                      long address);\n+  public static native void nio_write_Int_file_channel (FileChannelImpl ch,\n+                                                        int index, int limit,\n+                                                        int value, long address);\n+  public static native long nio_read_Long_file_channel (FileChannelImpl ch,\n+                                                        int index, int limit,\n+                                                        long address);\n+  public static native void nio_write_Long_file_channel (FileChannelImpl ch,\n+                                                         int index, int limit,\n+                                                         long value,\n+                                                         long address);\n+  public static native float nio_read_Float_file_channel (FileChannelImpl ch,\n+                                                          int index, int limit,\n+                                                          long address);\n+  public static native void nio_write_Float_file_channel (FileChannelImpl ch,\n+                                                          int index, int limit,\n+                                                          float value,\n+                                                          long address);\n+  public static native double nio_read_Double_file_channel (FileChannelImpl ch,\n+                                                            int index, int limit,\n+                                                            long address);\n+  public static native void nio_write_Double_file_channel (FileChannelImpl ch,\n+                                                           int index, int limit,\n+                                                           double value,\n+                                                           long address);\n+\n+  final public byte get ()\n+  {\n+    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, position (),\n+                                                              limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+\n+  final public ByteBuffer put (byte b)\n+  {\n+    MappedByteFileBuffer.nio_write_Byte_file_channel (ch, position (), limit (),\n+                                                      b, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+\n+  final public byte get (int index)\n+  {\n+    byte a = MappedByteFileBuffer.nio_read_Byte_file_channel (ch, index,\n+                                                              limit (),\n+                                                              address);\n+    return a;\n+  }\n+\n+  final public ByteBuffer put (int index, byte b)\n+  {\n+    MappedByteFileBuffer.nio_write_Byte_file_channel (ch, index, limit (), b,\n+                                                      address);\n+    return this;\n+  }\n+\n+  final public ByteBuffer compact ()\n+  {\n+    return this;\n+  }\n+\n+  final public boolean isDirect ()\n+  {\n+    return direct;\n+  }\n+\n+  final public ByteBuffer slice ()\n+  {\n+    MappedByteFileBuffer A = new MappedByteFileBuffer (this);\n+    return A;\n+  }\n+\n+  public ByteBuffer duplicate ()\n+  {\n+    return new MappedByteFileBuffer (this);\n+  }\n+\n+  public ByteBuffer asReadOnlyBuffer ()\n+  {\n+    MappedByteFileBuffer b = new MappedByteFileBuffer (this);\n+    b.readOnly = true;\n+    return b;\n+  }\n+\n+  final public ByteBuffer asByteBuffer ()\n+  {\n+//     ByteBuffer res = new MappedByteFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 1);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  final public byte getByte ()\n+  {\n+    byte a = nio_read_Byte_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putByte (byte value)\n+  {\n+    nio_write_Byte_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public byte getByte (int index)\n+  {\n+    byte a = nio_read_Byte_file_channel (ch, index, limit(), address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putByte (int index, byte value)\n+  {\n+    nio_write_Byte_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  };\n+  \n+  final public CharBuffer asCharBuffer ()\n+  {\n+//     CharBuffer res = new MappedCharFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 2);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+\n+  final public char getChar ()\n+  {\n+    char a = nio_read_Char_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putChar (char value)\n+  {\n+    nio_write_Char_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public char getChar (int index)\n+  {\n+    char a = nio_read_Char_file_channel (ch, index, limit (), address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putChar (int index, char value)\n+  {\n+    nio_write_Char_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  };\n+\n+  final public ShortBuffer asShortBuffer ()\n+  {\n+//     ShortBuffer res = new MappedShortFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 2);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  final public short getShort ()\n+  {\n+    short a = nio_read_Short_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putShort (short value)\n+  {\n+    nio_write_Short_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public short getShort (int index)\n+  {\n+    short a = nio_read_Short_file_channel (ch, index, limit (), address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putShort (int index, short value)\n+  {\n+    nio_write_Short_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  }\n+\n+  final public IntBuffer asIntBuffer ()\n+  {\n+//     IntBuffer res = new MappedIntFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 4);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  final public int getInt ()\n+  {\n+    int a = nio_read_Int_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putInt (int value)\n+  {\n+    nio_write_Int_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public int getInt (int index)\n+  {\n+    int a = nio_read_Int_file_channel (ch, index, limit (),\n+                                                            address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putInt (int index, int value)\n+  {\n+    nio_write_Int_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  }\n+\n+  final public LongBuffer asLongBuffer ()\n+  {\n+//     LongBuffer res = new MappedLongFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 8);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  final public long getLong ()\n+  {\n+    long a = nio_read_Long_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putLong (long value)\n+  {\n+    nio_write_Long_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public long getLong (int index)\n+  {\n+    long a = nio_read_Long_file_channel (ch, index, limit (), address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putLong (int index, long value)\n+  {\n+    nio_write_Long_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  }\n+\n+  final public FloatBuffer asFloatBuffer ()\n+  {\n+//     FloatBuffer res = new MappedFloatFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 4);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  final public float getFloat ()\n+  {\n+    float a = nio_read_Float_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putFloat (float value)\n+  {\n+    nio_write_Float_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public float getFloat (int index)\n+  {\n+    float a = nio_read_Float_file_channel (ch, index, limit (), address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putFloat (int index, float value)\n+  {\n+    nio_write_Float_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  }\n+\n+  final public DoubleBuffer asDoubleBuffer ()\n+  {\n+//     DoubleBuffer res = new MappedDoubleFileBuffer (ch);\n+//     res.limit ((limit () * 1) / 8);\n+//     return res;\n+    throw new Error (\"not implemented\");\n+  }\n+  \n+  final public double getDouble ()\n+  {\n+    double a = nio_read_Double_file_channel (ch, position (), limit (), address);\n+    position (position () + 1);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putDouble (double value)\n+  {\n+    nio_write_Double_file_channel (ch, position (), limit (), value, address);\n+    position (position () + 1);\n+    return this;\n+  }\n+  \n+  final public double getDouble (int index)\n+  {\n+    double a = nio_read_Double_file_channel (ch, index, limit (), address);\n+    return a;\n+  }\n+  \n+  final public ByteBuffer putDouble (int index, double value)\n+  {\n+    nio_write_Double_file_channel (ch, index, limit (), value, address);\n+    return this;\n+  }\n+}"}, {"sha": "6f2eee2107d9346ab4c9bdf0a409aa17aebde952", "filename": "libjava/gnu/java/nio/natMappedByteFileBuffer.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d4c1565091e0017b2d4b54126f4d691d1d8681d/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d4c1565091e0017b2d4b54126f4d691d1d8681d/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FnatMappedByteFileBuffer.cc?ref=9d4c1565091e0017b2d4b54126f4d691d1d8681d", "patch": "@@ -0,0 +1,140 @@\n+// natMappedByteFileBuffer.cc\n+\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <config.h>\n+\n+#include <jvm.h>\n+\n+#include <errno.h>\n+#include <string.h>\n+#include <sys/types.h>\n+\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef HAVE_FCNTL_H\n+#include <fcntl.h>\n+#endif\n+\n+#include <gnu/java/nio/MappedByteFileBuffer.h>\n+#include <java/lang/Error.h>\n+\n+jbyte\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Byte_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+jchar\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Char_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+jdouble\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Double_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+jfloat\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Float_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+jint\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Int_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+jlong\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Long_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+jshort\n+gnu::java::nio::MappedByteFileBuffer::nio_read_Short_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Byte_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jbyte, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Char_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jchar, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Double_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jdouble, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Float_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jfloat, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Int_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jint, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Long_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jlong, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}\n+\n+void\n+gnu::java::nio::MappedByteFileBuffer::nio_write_Short_file_channel\n+                                            (gnu::java::nio::FileChannelImpl*,\n+                                             jint, jint, jshort, jlong)\n+{\n+  throw new ::java::lang::Error (_Jv_NewStringUTF (\"not implemented\"));\n+}"}]}