{"sha": "d2463960a40d5ce16499da8b4d5317ace514586d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0NjM5NjBhNDBkNWNlMTY0OTlkYThiNGQ1MzE3YWNlNTE0NTg2ZA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2015-05-06T19:10:14Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2015-05-06T19:10:14Z"}, "message": "oacc-init.c (acc_device_lock): Add explanatory comment.\n\n\t* oacc-init.c (acc_device_lock): Add explanatory comment.\n\t(resolve_device): Add comment about locking requirement.\n\t(acc_init_1, acc_shutdown_1): Likewise. Add locking around\n\tgomp_init_device and gomp_fini_device calls.\n\t(acc_get_num_devices, acc_set_device_type, acc_get_device_type)\n\t(acc_get_device_num, acc_set_device_num): Add locking around\n\tresolve_device and gomp_init_device calls.\n\nFrom-SVN: r222862", "tree": {"sha": "148a675cc1d8e884f9647e7d6118b36eb18cda8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/148a675cc1d8e884f9647e7d6118b36eb18cda8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2463960a40d5ce16499da8b4d5317ace514586d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2463960a40d5ce16499da8b4d5317ace514586d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2463960a40d5ce16499da8b4d5317ace514586d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2463960a40d5ce16499da8b4d5317ace514586d/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e38fdba42b1380d32845b3891a3e0deb4b653e1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e38fdba42b1380d32845b3891a3e0deb4b653e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e38fdba42b1380d32845b3891a3e0deb4b653e1a"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "982e2d3f03355be5dad464e17b93f50055ffb053", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2463960a40d5ce16499da8b4d5317ace514586d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2463960a40d5ce16499da8b4d5317ace514586d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d2463960a40d5ce16499da8b4d5317ace514586d", "patch": "@@ -1,3 +1,13 @@\n+2015-05-06  Julian Brown  <julian@codesourcery.com>\n+\n+\t* oacc-init.c (acc_device_lock): Add explanatory comment.\n+\t(resolve_device): Add comment about locking requirement.\n+\t(acc_init_1, acc_shutdown_1): Likewise. Add locking around\n+\tgomp_init_device and gomp_fini_device calls.\n+\t(acc_get_num_devices, acc_set_device_type, acc_get_device_type)\n+\t(acc_get_device_num, acc_set_device_num): Add locking around\n+\tresolve_device and gomp_init_device calls.\n+\n 2015-05-06  Julian Brown  <julian@codesourcery.com>\n \n \t* oacc-init.c (acc_shutdown_1): Call gomp_mutex_unlock for"}, {"sha": "54995e36b587e9446c4753984acf6c40d019bfcf", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2463960a40d5ce16499da8b4d5317ace514586d/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2463960a40d5ce16499da8b4d5317ace514586d/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=d2463960a40d5ce16499da8b4d5317ace514586d", "patch": "@@ -35,6 +35,9 @@\n #include <stdbool.h>\n #include <string.h>\n \n+/* This lock is used to protect access to cached_base_dev, dispatchers and\n+   the (abstract) initialisation state of attached offloading devices.  */\n+\n static gomp_mutex_t acc_device_lock;\n \n /* A cached version of the dispatcher for the global \"current\" accelerator type,\n@@ -105,6 +108,8 @@ name_of_acc_device_t (enum acc_device_t type)\n     }\n }\n \n+/* ACC_DEVICE_LOCK should be held before calling this function.  */\n+\n static struct gomp_device_descr *\n resolve_device (acc_device_t d)\n {\n@@ -165,7 +170,8 @@ resolve_device (acc_device_t d)\n \n /* This is called when plugins have been initialized, and serves to call\n    (indirectly) the target's device_init hook.  Calling multiple times without\n-   an intervening acc_shutdown_1 call is an error.  */\n+   an intervening acc_shutdown_1 call is an error.  ACC_DEVICE_LOCK should be\n+   held before calling this function.  */\n \n static struct gomp_device_descr *\n acc_init_1 (acc_device_t d)\n@@ -182,14 +188,21 @@ acc_init_1 (acc_device_t d)\n \n   acc_dev = &base_dev[goacc_device_num];\n \n+  gomp_mutex_lock (&acc_dev->lock);\n   if (acc_dev->is_initialized)\n-    gomp_fatal (\"device already active\");\n+    {\n+      gomp_mutex_unlock (&acc_dev->lock);\n+      gomp_fatal (\"device already active\");\n+    }\n \n   gomp_init_device (acc_dev);\n+  gomp_mutex_unlock (&acc_dev->lock);\n \n   return base_dev;\n }\n \n+/* ACC_DEVICE_LOCK should be held before calling this function.  */\n+\n static void\n acc_shutdown_1 (acc_device_t d)\n {\n@@ -248,11 +261,13 @@ acc_shutdown_1 (acc_device_t d)\n   for (i = 0; i < ndevs; i++)\n     {\n       struct gomp_device_descr *acc_dev = &base_dev[i];\n+      gomp_mutex_lock (&acc_dev->lock);\n       if (acc_dev->is_initialized)\n         {\n \t  devices_active = true;\n \t  gomp_fini_device (acc_dev);\n \t}\n+      gomp_mutex_unlock (&acc_dev->lock);\n     }\n \n   if (!devices_active)\n@@ -409,7 +424,10 @@ acc_get_num_devices (acc_device_t d)\n \n   gomp_init_targets_once ();\n \n+  gomp_mutex_lock (&acc_device_lock);\n   acc_dev = resolve_device (d);\n+  gomp_mutex_unlock (&acc_device_lock);\n+\n   if (!acc_dev)\n     return 0;\n \n@@ -440,8 +458,10 @@ acc_set_device_type (acc_device_t d)\n   cached_base_dev = base_dev = resolve_device (d);\n   acc_dev = &base_dev[goacc_device_num];\n \n+  gomp_mutex_lock (&acc_dev->lock);\n   if (!acc_dev->is_initialized)\n     gomp_init_device (acc_dev);\n+  gomp_mutex_unlock (&acc_dev->lock);\n \n   gomp_mutex_unlock (&acc_device_lock);\n \n@@ -472,7 +492,9 @@ acc_get_device_type (void)\n     {\n       gomp_init_targets_once ();\n \n+      gomp_mutex_lock (&acc_device_lock);\n       dev = resolve_device (acc_device_default);\n+      gomp_mutex_unlock (&acc_device_lock);\n       res = acc_device_type (dev->type);\n     }\n \n@@ -496,7 +518,9 @@ acc_get_device_num (acc_device_t d)\n   if (!cached_base_dev)\n     gomp_init_targets_once ();\n \n+  gomp_mutex_lock (&acc_device_lock);\n   dev = resolve_device (d);\n+  gomp_mutex_unlock (&acc_device_lock);\n   if (!dev)\n     gomp_fatal (\"device %s not supported\", name_of_acc_device_t (d));\n \n@@ -538,8 +562,10 @@ acc_set_device_num (int ord, acc_device_t d)\n \n       acc_dev = &base_dev[ord];\n \n+      gomp_mutex_lock (&acc_dev->lock);\n       if (!acc_dev->is_initialized)\n         gomp_init_device (acc_dev);\n+      gomp_mutex_unlock (&acc_dev->lock);\n \n       gomp_mutex_unlock (&acc_device_lock);\n "}]}