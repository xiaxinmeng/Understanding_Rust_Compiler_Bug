{"sha": "54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmYmY2YTFiNGFkYmIwOGRkYzhjYTUzYTViNWZlYTRjOGRkNmU1Ng==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-08-02T01:12:09Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-08-02T01:12:09Z"}, "message": "varasm.c (asm_emit_uninitialized): Return false if global BSS and ASM_EMIT_BSS not supported by target.\n\n        * varasm.c (asm_emit_uninitialized): Return false if global BSS\n        and ASM_EMIT_BSS not supported by target.\n        (assemble_variable): Do not duplicate uninitialized logic.\n        Fall through if asm_emit_uninitialized failed.\n\nFrom-SVN: r55964", "tree": {"sha": "27b82ad39287fb775d6b341a461b87f7c5fa543b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27b82ad39287fb775d6b341a461b87f7c5fa543b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56/comments", "author": null, "committer": null, "parents": [{"sha": "3d16b40796929b5013a1a255244d778a0d022983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d16b40796929b5013a1a255244d778a0d022983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d16b40796929b5013a1a255244d778a0d022983"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "480722d12b6abf70dc9f4943ceb40ccec95d9341", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56", "patch": "@@ -1,3 +1,10 @@\n+2002-08-01  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* varasm.c (asm_emit_uninitialized): Return false if global BSS\n+\tand ASM_EMIT_BSS not supported by target.\n+\t(assemble_variable): Do not duplicate uninitialized logic.\n+\tFall through if asm_emit_uninitialized failed.\n+\n 2002-08-01  Chris Demetriou  <cgd@broadcom.com>\n \n \t* config/mips/mips.h (BRANCH_LIKELY_P): Remove unused macro."}, {"sha": "71ab7b6b6b8d0e28c267fcd1e2a8d0ad40724d86", "filename": "gcc/varasm.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=54fbf6a1b4adbb08ddc8ca53a5b5fea4c8dd6e56", "patch": "@@ -172,7 +172,7 @@ static void asm_output_aligned_bss\tPARAMS ((FILE *, tree, const char *,\n #endif /* BSS_SECTION_ASM_OP */\n static hashval_t const_str_htab_hash\tPARAMS ((const void *x));\n static int const_str_htab_eq\t\tPARAMS ((const void *x, const void *y));\n-static void asm_emit_uninitialised\tPARAMS ((tree, const char*, int, int));\n+static bool asm_emit_uninitialised\tPARAMS ((tree, const char*, int, int));\n static void resolve_unique_section\tPARAMS ((tree, int, int));\n static void mark_weak                   PARAMS ((tree));\n \f\n@@ -1350,7 +1350,7 @@ assemble_string (p, size)\n #endif\n #endif\n \n-static void\n+static bool\n asm_emit_uninitialised (decl, name, size, rounded)\n      tree decl;\n      const char *name;\n@@ -1365,13 +1365,17 @@ asm_emit_uninitialised (decl, name, size, rounded)\n   }\n   destination = asm_dest_local;\n \n+  /* ??? We should handle .bss via select_section mechanisms rather than\n+     via special target hooks.  That would eliminate this special case.  */\n   if (TREE_PUBLIC (decl))\n     {\n-#if defined ASM_EMIT_BSS\n-      if (! DECL_COMMON (decl))\n+      if (!DECL_COMMON (decl))\n+#ifdef ASM_EMIT_BSS\n \tdestination = asm_dest_bss;\n-      else\n+#else\n+\treturn false;\n #endif\n+      else\n \tdestination = asm_dest_common;\n     }\n \n@@ -1420,7 +1424,7 @@ asm_emit_uninitialised (decl, name, size, rounded)\n       abort ();\n     }\n \n-  return;\n+  return true;\n }\n \n /* Assemble everything that is needed for a variable or function declaration.\n@@ -1593,16 +1597,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n       if (DECL_COMMON (decl))\n \tsorry (\"thread-local COMMON data not implemented\");\n     }\n-#ifndef ASM_EMIT_BSS\n-  /* If the target can't output uninitialized but not common global data\n-     in .bss, then we have to use .data.  */\n-  /* ??? We should handle .bss via select_section mechanisms rather than\n-     via special target hooks.  That would eliminate this special case.  */\n-  /* Duplicate BSS test in asm_emit_uninitialized instead of having it\n-     return success or failure for that case.  Shrug.  */\n-  else if (TREE_PUBLIC (decl) && !DECL_COMMON (decl))\n-    ;\n-#endif\n   else if (DECL_INITIAL (decl) == 0\n \t   || DECL_INITIAL (decl) == error_mark_node\n \t   || (flag_zero_initialized_in_bss\n@@ -1629,9 +1623,10 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \t  (decl, \"requested alignment for %s is greater than implemented alignment of %d\",rounded);\n #endif\n \n-      asm_emit_uninitialised (decl, name, size, rounded);\n-\n-      return;\n+      /* If the target cannot output uninitialized but not common global data\n+\t in .bss, then we have to use .data, so fall through.  */\n+      if (asm_emit_uninitialised (decl, name, size, rounded))\n+\treturn;\n     }\n \n   /* Handle initialized definitions."}]}