{"sha": "d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJmMjVjZDE0NGFkNjdmNWI1YjA4YTYxMGUxNDlhYWViNGE3NTQ3MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2010-08-05T08:52:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-08-05T08:52:20Z"}, "message": "sem.adb: Minor reformatting\n\n\t* sem.adb: Minor reformatting\n\t* sem_ch4.adb (Analyze_Reference): Disable error message in CodePeer\n\tmode, not useful.\n\nFrom-SVN: r162901", "tree": {"sha": "60f8139f84dce304d15abced1e03ebf8951bf516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f8139f84dce304d15abced1e03ebf8951bf516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9316258dcb09219753a9cb0864c7d493bb7d3b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9316258dcb09219753a9cb0864c7d493bb7d3b31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9316258dcb09219753a9cb0864c7d493bb7d3b31"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "7db14d05b116d6b2909cb6437d7d00a6ba366129", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "patch": "@@ -1,3 +1,9 @@\n+2010-08-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem.adb: Minor reformatting\n+\t* sem_ch4.adb (Analyze_Reference): Disable error message in CodePeer\n+\tmode, not useful.\n+\n 2010-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c: Do not undefine IN_GCC_FRONTEND and do not"}, {"sha": "7f71cadcfcfc515ad6e420c38c97c165988be053", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "patch": "@@ -1796,8 +1796,8 @@ package body Sem is\n          --  The body of a unit that is withed by the spec of the main unit\n          --  may in turn have a with_clause on that spec. In that case do not\n          --  traverse the body, to prevent loops. It can also happen that the\n-         --  main body as a with_clause on a child, which of course has an\n-         --  implicit with on its parent. It's ok to traverse the child body\n+         --  main body has a with_clause on a child, which of course has an\n+         --  implicit with on its parent. It's OK to traverse the child body\n          --  if the main spec has been processed, otherwise we also have a\n          --  circularity to avoid.\n \n@@ -1811,7 +1811,7 @@ package body Sem is\n          begin\n             CL := First (Context_Items (CU));\n \n-            --  Problem does not arise with main subprograms.\n+            --  Problem does not arise with main subprograms\n \n             if Nkind (Unit (Main_CU)) /= N_Package_Body then\n                return False;\n@@ -1820,8 +1820,7 @@ package body Sem is\n             while Present (CL) loop\n                if Nkind (CL) = N_With_Clause\n                  and then Library_Unit (CL) = Library_Unit (Main_CU)\n-                 and then\n-                   not Done (Get_Cunit_Unit_Number (Library_Unit (CL)))\n+                 and then not Done (Get_Cunit_Unit_Number (Library_Unit (CL)))\n                then\n                   return True;\n                end if;"}, {"sha": "ca85389e6d87e393b60dd8dc4799d4c11822370f", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2f25cd144ad67f5b5b08a610e149aaeb4a75471/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=d2f25cd144ad67f5b5b08a610e149aaeb4a75471", "patch": "@@ -3244,12 +3244,14 @@ package body Sem_Ch4 is\n       --  It is not clear if that can ever occur, but in case it does, we will\n       --  generate an error message. Not clear if this message can ever be\n       --  generated, and pretty clear that it represents a bug if it is, still\n-      --  seems worth checking!\n+      --  seems worth checking, except in CodePeer mode where we do not really\n+      --  care and don't want to bother the user.\n \n       T := Etype (P);\n \n       if Is_Entity_Name (P)\n         and then Is_Object_Reference (P)\n+        and then not CodePeer_Mode\n       then\n          E := Entity (P);\n          T := Etype (P);"}]}