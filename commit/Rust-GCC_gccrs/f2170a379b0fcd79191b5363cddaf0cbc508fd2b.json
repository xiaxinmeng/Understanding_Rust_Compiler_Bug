{"sha": "f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIxNzBhMzc5YjBmY2Q3OTE5MWI1MzYzY2RkYWYwY2JjNTA4ZmQyYg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T17:06:58Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T17:06:58Z"}, "message": "[ARM][GCC][3/4x]: MVE intrinsics with quaternary operands.\n\nThis patch supports following MVE ACLE intrinsics with quaternary operands.\n\nvmlaldavaq_p_s16, vmlaldavaq_p_s32, vmlaldavaq_p_u16, vmlaldavaq_p_u32, vmlaldavaxq_p_s16, vmlaldavaxq_p_s32, vmlaldavaxq_p_u16, vmlaldavaxq_p_u32, vmlsldavaq_p_s16, vmlsldavaq_p_s32, vmlsldavaxq_p_s16, vmlsldavaxq_p_s32, vmullbq_poly_m_p16, vmullbq_poly_m_p8, vmulltq_poly_m_p16, vmulltq_poly_m_p8, vqdmullbq_m_n_s16, vqdmullbq_m_n_s32, vqdmullbq_m_s16, vqdmullbq_m_s32, vqdmulltq_m_n_s16, vqdmulltq_m_n_s32, vqdmulltq_m_s16, vqdmulltq_m_s32, vqrshrnbq_m_n_s16, vqrshrnbq_m_n_s32, vqrshrnbq_m_n_u16, vqrshrnbq_m_n_u32, vqrshrntq_m_n_s16, vqrshrntq_m_n_s32, vqrshrntq_m_n_u16, vqrshrntq_m_n_u32, vqrshrunbq_m_n_s16, vqrshrunbq_m_n_s32, vqrshruntq_m_n_s16, vqrshruntq_m_n_s32, vqshrnbq_m_n_s16, vqshrnbq_m_n_s32, vqshrnbq_m_n_u16, vqshrnbq_m_n_u32, vqshrntq_m_n_s16, vqshrntq_m_n_s32, vqshrntq_m_n_u16, vqshrntq_m_n_u32, vqshrunbq_m_n_s16, vqshrunbq_m_n_s32, vqshruntq_m_n_s16, vqshruntq_m_n_s32, vrmlaldavhaq_p_s32, vrmlaldavhaq_p_u32, vrmlaldavhaxq_p_s32, vrmlsldavhaq_p_s32, vrmlsldavhaxq_p_s32, vrshrnbq_m_n_s16, vrshrnbq_m_n_s32, vrshrnbq_m_n_u16, vrshrnbq_m_n_u32, vrshrntq_m_n_s16, vrshrntq_m_n_s32, vrshrntq_m_n_u16, vrshrntq_m_n_u32, vshllbq_m_n_s16, vshllbq_m_n_s8, vshllbq_m_n_u16, vshllbq_m_n_u8, vshlltq_m_n_s16, vshlltq_m_n_s8, vshlltq_m_n_u16, vshlltq_m_n_u8, vshrnbq_m_n_s16, vshrnbq_m_n_s32, vshrnbq_m_n_u16, vshrnbq_m_n_u32, vshrntq_m_n_s16, vshrntq_m_n_s32, vshrntq_m_n_u16, vshrntq_m_n_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-protos.h (arm_mve_immediate_check):\n\t* config/arm/arm.c (arm_mve_immediate_check): Define fuction to\tcheck\n\tmode and interger value.\n\t* config/arm/arm_mve.h (vmlaldavaq_p_s32): Define macro.\n\t(vmlaldavaq_p_s16): Likewise.\n\t(vmlaldavaq_p_u32): Likewise.\n\t(vmlaldavaq_p_u16): Likewise.\n\t(vmlaldavaxq_p_s32): Likewise.\n\t(vmlaldavaxq_p_s16): Likewise.\n\t(vmlaldavaxq_p_u32): Likewise.\n\t(vmlaldavaxq_p_u16): Likewise.\n\t(vmlsldavaq_p_s32): Likewise.\n\t(vmlsldavaq_p_s16): Likewise.\n\t(vmlsldavaxq_p_s32): Likewise.\n\t(vmlsldavaxq_p_s16): Likewise.\n\t(vmullbq_poly_m_p8): Likewise.\n\t(vmullbq_poly_m_p16): Likewise.\n\t(vmulltq_poly_m_p8): Likewise.\n\t(vmulltq_poly_m_p16): Likewise.\n\t(vqdmullbq_m_n_s32): Likewise.\n\t(vqdmullbq_m_n_s16): Likewise.\n\t(vqdmullbq_m_s32): Likewise.\n\t(vqdmullbq_m_s16): Likewise.\n\t(vqdmulltq_m_n_s32): Likewise.\n\t(vqdmulltq_m_n_s16): Likewise.\n\t(vqdmulltq_m_s32): Likewise.\n\t(vqdmulltq_m_s16): Likewise.\n\t(vqrshrnbq_m_n_s32): Likewise.\n\t(vqrshrnbq_m_n_s16): Likewise.\n\t(vqrshrnbq_m_n_u32): Likewise.\n\t(vqrshrnbq_m_n_u16): Likewise.\n\t(vqrshrntq_m_n_s32): Likewise.\n\t(vqrshrntq_m_n_s16): Likewise.\n\t(vqrshrntq_m_n_u32): Likewise.\n\t(vqrshrntq_m_n_u16): Likewise.\n\t(vqrshrunbq_m_n_s32): Likewise.\n\t(vqrshrunbq_m_n_s16): Likewise.\n\t(vqrshruntq_m_n_s32): Likewise.\n\t(vqrshruntq_m_n_s16): Likewise.\n\t(vqshrnbq_m_n_s32): Likewise.\n\t(vqshrnbq_m_n_s16): Likewise.\n\t(vqshrnbq_m_n_u32): Likewise.\n\t(vqshrnbq_m_n_u16): Likewise.\n\t(vqshrntq_m_n_s32): Likewise.\n\t(vqshrntq_m_n_s16): Likewise.\n\t(vqshrntq_m_n_u32): Likewise.\n\t(vqshrntq_m_n_u16): Likewise.\n\t(vqshrunbq_m_n_s32): Likewise.\n\t(vqshrunbq_m_n_s16): Likewise.\n\t(vqshruntq_m_n_s32): Likewise.\n\t(vqshruntq_m_n_s16): Likewise.\n\t(vrmlaldavhaq_p_s32): Likewise.\n\t(vrmlaldavhaq_p_u32): Likewise.\n\t(vrmlaldavhaxq_p_s32): Likewise.\n\t(vrmlsldavhaq_p_s32): Likewise.\n\t(vrmlsldavhaxq_p_s32): Likewise.\n\t(vrshrnbq_m_n_s32): Likewise.\n\t(vrshrnbq_m_n_s16): Likewise.\n\t(vrshrnbq_m_n_u32): Likewise.\n\t(vrshrnbq_m_n_u16): Likewise.\n\t(vrshrntq_m_n_s32): Likewise.\n\t(vrshrntq_m_n_s16): Likewise.\n\t(vrshrntq_m_n_u32): Likewise.\n\t(vrshrntq_m_n_u16): Likewise.\n\t(vshllbq_m_n_s8): Likewise.\n\t(vshllbq_m_n_s16): Likewise.\n\t(vshllbq_m_n_u8): Likewise.\n\t(vshllbq_m_n_u16): Likewise.\n\t(vshlltq_m_n_s8): Likewise.\n\t(vshlltq_m_n_s16): Likewise.\n\t(vshlltq_m_n_u8): Likewise.\n\t(vshlltq_m_n_u16): Likewise.\n\t(vshrnbq_m_n_s32): Likewise.\n\t(vshrnbq_m_n_s16): Likewise.\n\t(vshrnbq_m_n_u32): Likewise.\n\t(vshrnbq_m_n_u16): Likewise.\n\t(vshrntq_m_n_s32): Likewise.\n\t(vshrntq_m_n_s16): Likewise.\n\t(vshrntq_m_n_u32): Likewise.\n\t(vshrntq_m_n_u16): Likewise.\n\t(__arm_vmlaldavaq_p_s32): Define intrinsic.\n\t(__arm_vmlaldavaq_p_s16): Likewise.\n\t(__arm_vmlaldavaq_p_u32): Likewise.\n\t(__arm_vmlaldavaq_p_u16): Likewise.\n\t(__arm_vmlaldavaxq_p_s32): Likewise.\n\t(__arm_vmlaldavaxq_p_s16): Likewise.\n\t(__arm_vmlaldavaxq_p_u32): Likewise.\n\t(__arm_vmlaldavaxq_p_u16): Likewise.\n\t(__arm_vmlsldavaq_p_s32): Likewise.\n\t(__arm_vmlsldavaq_p_s16): Likewise.\n\t(__arm_vmlsldavaxq_p_s32): Likewise.\n\t(__arm_vmlsldavaxq_p_s16): Likewise.\n\t(__arm_vmullbq_poly_m_p8): Likewise.\n\t(__arm_vmullbq_poly_m_p16): Likewise.\n\t(__arm_vmulltq_poly_m_p8): Likewise.\n\t(__arm_vmulltq_poly_m_p16): Likewise.\n\t(__arm_vqdmullbq_m_n_s32): Likewise.\n\t(__arm_vqdmullbq_m_n_s16): Likewise.\n\t(__arm_vqdmullbq_m_s32): Likewise.\n\t(__arm_vqdmullbq_m_s16): Likewise.\n\t(__arm_vqdmulltq_m_n_s32): Likewise.\n\t(__arm_vqdmulltq_m_n_s16): Likewise.\n\t(__arm_vqdmulltq_m_s32): Likewise.\n\t(__arm_vqdmulltq_m_s16): Likewise.\n\t(__arm_vqrshrnbq_m_n_s32): Likewise.\n\t(__arm_vqrshrnbq_m_n_s16): Likewise.\n\t(__arm_vqrshrnbq_m_n_u32): Likewise.\n\t(__arm_vqrshrnbq_m_n_u16): Likewise.\n\t(__arm_vqrshrntq_m_n_s32): Likewise.\n\t(__arm_vqrshrntq_m_n_s16): Likewise.\n\t(__arm_vqrshrntq_m_n_u32): Likewise.\n\t(__arm_vqrshrntq_m_n_u16): Likewise.\n\t(__arm_vqrshrunbq_m_n_s32): Likewise.\n\t(__arm_vqrshrunbq_m_n_s16): Likewise.\n\t(__arm_vqrshruntq_m_n_s32): Likewise.\n\t(__arm_vqrshruntq_m_n_s16): Likewise.\n\t(__arm_vqshrnbq_m_n_s32): Likewise.\n\t(__arm_vqshrnbq_m_n_s16): Likewise.\n\t(__arm_vqshrnbq_m_n_u32): Likewise.\n\t(__arm_vqshrnbq_m_n_u16): Likewise.\n\t(__arm_vqshrntq_m_n_s32): Likewise.\n\t(__arm_vqshrntq_m_n_s16): Likewise.\n\t(__arm_vqshrntq_m_n_u32): Likewise.\n\t(__arm_vqshrntq_m_n_u16): Likewise.\n\t(__arm_vqshrunbq_m_n_s32): Likewise.\n\t(__arm_vqshrunbq_m_n_s16): Likewise.\n\t(__arm_vqshruntq_m_n_s32): Likewise.\n\t(__arm_vqshruntq_m_n_s16): Likewise.\n\t(__arm_vrmlaldavhaq_p_s32): Likewise.\n\t(__arm_vrmlaldavhaq_p_u32): Likewise.\n\t(__arm_vrmlaldavhaxq_p_s32): Likewise.\n\t(__arm_vrmlsldavhaq_p_s32): Likewise.\n\t(__arm_vrmlsldavhaxq_p_s32): Likewise.\n\t(__arm_vrshrnbq_m_n_s32): Likewise.\n\t(__arm_vrshrnbq_m_n_s16): Likewise.\n\t(__arm_vrshrnbq_m_n_u32): Likewise.\n\t(__arm_vrshrnbq_m_n_u16): Likewise.\n\t(__arm_vrshrntq_m_n_s32): Likewise.\n\t(__arm_vrshrntq_m_n_s16): Likewise.\n\t(__arm_vrshrntq_m_n_u32): Likewise.\n\t(__arm_vrshrntq_m_n_u16): Likewise.\n\t(__arm_vshllbq_m_n_s8): Likewise.\n\t(__arm_vshllbq_m_n_s16): Likewise.\n\t(__arm_vshllbq_m_n_u8): Likewise.\n\t(__arm_vshllbq_m_n_u16): Likewise.\n\t(__arm_vshlltq_m_n_s8): Likewise.\n\t(__arm_vshlltq_m_n_s16): Likewise.\n\t(__arm_vshlltq_m_n_u8): Likewise.\n\t(__arm_vshlltq_m_n_u16): Likewise.\n\t(__arm_vshrnbq_m_n_s32): Likewise.\n\t(__arm_vshrnbq_m_n_s16): Likewise.\n\t(__arm_vshrnbq_m_n_u32): Likewise.\n\t(__arm_vshrnbq_m_n_u16): Likewise.\n\t(__arm_vshrntq_m_n_s32): Likewise.\n\t(__arm_vshrntq_m_n_s16): Likewise.\n\t(__arm_vshrntq_m_n_u32): Likewise.\n\t(__arm_vshrntq_m_n_u16): Likewise.\n\t(vmullbq_poly_m): Define polymorphic variant.\n\t(vmulltq_poly_m): Likewise.\n\t(vshllbq_m): Likewise.\n\t(vshrntq_m_n): Likewise.\n\t(vshrnbq_m_n): Likewise.\n\t(vshlltq_m_n): Likewise.\n\t(vshllbq_m_n): Likewise.\n\t(vrshrntq_m_n): Likewise.\n\t(vrshrnbq_m_n): Likewise.\n\t(vqshruntq_m_n): Likewise.\n\t(vqshrunbq_m_n): Likewise.\n\t(vqdmullbq_m_n): Likewise.\n\t(vqdmullbq_m): Likewise.\n\t(vqdmulltq_m_n): Likewise.\n\t(vqdmulltq_m): Likewise.\n\t(vqrshrnbq_m_n): Likewise.\n\t(vqrshrntq_m_n): Likewise.\n\t(vqrshrunbq_m_n): Likewise.\n\t(vqrshruntq_m_n): Likewise.\n\t(vqshrnbq_m_n): Likewise.\n\t(vqshrntq_m_n): Likewise.\n\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_NONE_IMM_UNONE): Use\n\tbuiltin qualifiers.\n\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE): Likewise.\n\t* config/arm/mve.md (VMLALDAVAQ_P): Define iterator.\n\t(VMLALDAVAXQ_P): Likewise.\n\t(VQRSHRNBQ_M_N): Likewise.\n\t(VQRSHRNTQ_M_N): Likewise.\n\t(VQSHRNBQ_M_N): Likewise.\n\t(VQSHRNTQ_M_N): Likewise.\n\t(VRSHRNBQ_M_N): Likewise.\n\t(VRSHRNTQ_M_N): Likewise.\n\t(VSHLLBQ_M_N): Likewise.\n\t(VSHLLTQ_M_N): Likewise.\n\t(VSHRNBQ_M_N): Likewise.\n\t(VSHRNTQ_M_N): Likewise.\n\t(mve_vmlaldavaq_p_<supf><mode>): Define RTL pattern.\n\t(mve_vmlaldavaxq_p_<supf><mode>): Likewise.\n\t(mve_vqrshrnbq_m_n_<supf><mode>): Likewise.\n\t(mve_vqrshrntq_m_n_<supf><mode>): Likewise.\n\t(mve_vqshrnbq_m_n_<supf><mode>): Likewise.\n\t(mve_vqshrntq_m_n_<supf><mode>): Likewise.\n\t(mve_vrmlaldavhaq_p_sv4si): Likewise.\n\t(mve_vrshrnbq_m_n_<supf><mode>): Likewise.\n\t(mve_vrshrntq_m_n_<supf><mode>): Likewise.\n\t(mve_vshllbq_m_n_<supf><mode>): Likewise.\n\t(mve_vshlltq_m_n_<supf><mode>): Likewise.\n\t(mve_vshrnbq_m_n_<supf><mode>): Likewise.\n\t(mve_vshrntq_m_n_<supf><mode>): Likewise.\n\t(mve_vmlsldavaq_p_s<mode>): Likewise.\n\t(mve_vmlsldavaxq_p_s<mode>): Likewise.\n\t(mve_vmullbq_poly_m_p<mode>): Likewise.\n\t(mve_vmulltq_poly_m_p<mode>): Likewise.\n\t(mve_vqdmullbq_m_n_s<mode>): Likewise.\n\t(mve_vqdmullbq_m_s<mode>): Likewise.\n\t(mve_vqdmulltq_m_n_s<mode>): Likewise.\n\t(mve_vqdmulltq_m_s<mode>): Likewise.\n\t(mve_vqrshrunbq_m_n_s<mode>): Likewise.\n\t(mve_vqrshruntq_m_n_s<mode>): Likewise.\n\t(mve_vqshrunbq_m_n_s<mode>): Likewise.\n\t(mve_vqshruntq_m_n_s<mode>): Likewise.\n\t(mve_vrmlaldavhaq_p_uv4si): Likewise.\n\t(mve_vrmlaldavhaxq_p_sv4si): Likewise.\n\t(mve_vrmlsldavhaq_p_sv4si): Likewise.\n\t(mve_vrmlsldavhaxq_p_sv4si): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_p_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_u32.c: Likewise.", "tree": {"sha": "d52c73c345d098f2f915e0e4b83e358e2bbbe59a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d52c73c345d098f2f915e0e4b83e358e2bbbe59a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb3b6b9cf2e285450fc5efc98a63cf717d2b002"}], "stats": {"total": 3551, "additions": 3547, "deletions": 4}, "files": [{"sha": "8bb2b7efde2a887a294f8afbacfa932a25d86b66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 230, "deletions": 0, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -1,3 +1,233 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-protos.h (arm_mve_immediate_check): \n+\t* config/arm/arm.c (arm_mve_immediate_check): Define fuction to\tcheck\n+\tmode and interger value.\n+\t* config/arm/arm_mve.h (vmlaldavaq_p_s32): Define macro.\n+\t(vmlaldavaq_p_s16): Likewise.\n+\t(vmlaldavaq_p_u32): Likewise.\n+\t(vmlaldavaq_p_u16): Likewise.\n+\t(vmlaldavaxq_p_s32): Likewise.\n+\t(vmlaldavaxq_p_s16): Likewise.\n+\t(vmlaldavaxq_p_u32): Likewise.\n+\t(vmlaldavaxq_p_u16): Likewise.\n+\t(vmlsldavaq_p_s32): Likewise.\n+\t(vmlsldavaq_p_s16): Likewise.\n+\t(vmlsldavaxq_p_s32): Likewise.\n+\t(vmlsldavaxq_p_s16): Likewise.\n+\t(vmullbq_poly_m_p8): Likewise.\n+\t(vmullbq_poly_m_p16): Likewise.\n+\t(vmulltq_poly_m_p8): Likewise.\n+\t(vmulltq_poly_m_p16): Likewise.\n+\t(vqdmullbq_m_n_s32): Likewise.\n+\t(vqdmullbq_m_n_s16): Likewise.\n+\t(vqdmullbq_m_s32): Likewise.\n+\t(vqdmullbq_m_s16): Likewise.\n+\t(vqdmulltq_m_n_s32): Likewise.\n+\t(vqdmulltq_m_n_s16): Likewise.\n+\t(vqdmulltq_m_s32): Likewise.\n+\t(vqdmulltq_m_s16): Likewise.\n+\t(vqrshrnbq_m_n_s32): Likewise.\n+\t(vqrshrnbq_m_n_s16): Likewise.\n+\t(vqrshrnbq_m_n_u32): Likewise.\n+\t(vqrshrnbq_m_n_u16): Likewise.\n+\t(vqrshrntq_m_n_s32): Likewise.\n+\t(vqrshrntq_m_n_s16): Likewise.\n+\t(vqrshrntq_m_n_u32): Likewise.\n+\t(vqrshrntq_m_n_u16): Likewise.\n+\t(vqrshrunbq_m_n_s32): Likewise.\n+\t(vqrshrunbq_m_n_s16): Likewise.\n+\t(vqrshruntq_m_n_s32): Likewise.\n+\t(vqrshruntq_m_n_s16): Likewise.\n+\t(vqshrnbq_m_n_s32): Likewise.\n+\t(vqshrnbq_m_n_s16): Likewise.\n+\t(vqshrnbq_m_n_u32): Likewise.\n+\t(vqshrnbq_m_n_u16): Likewise.\n+\t(vqshrntq_m_n_s32): Likewise.\n+\t(vqshrntq_m_n_s16): Likewise.\n+\t(vqshrntq_m_n_u32): Likewise.\n+\t(vqshrntq_m_n_u16): Likewise.\n+\t(vqshrunbq_m_n_s32): Likewise.\n+\t(vqshrunbq_m_n_s16): Likewise.\n+\t(vqshruntq_m_n_s32): Likewise.\n+\t(vqshruntq_m_n_s16): Likewise.\n+\t(vrmlaldavhaq_p_s32): Likewise.\n+\t(vrmlaldavhaq_p_u32): Likewise.\n+\t(vrmlaldavhaxq_p_s32): Likewise.\n+\t(vrmlsldavhaq_p_s32): Likewise.\n+\t(vrmlsldavhaxq_p_s32): Likewise.\n+\t(vrshrnbq_m_n_s32): Likewise.\n+\t(vrshrnbq_m_n_s16): Likewise.\n+\t(vrshrnbq_m_n_u32): Likewise.\n+\t(vrshrnbq_m_n_u16): Likewise.\n+\t(vrshrntq_m_n_s32): Likewise.\n+\t(vrshrntq_m_n_s16): Likewise.\n+\t(vrshrntq_m_n_u32): Likewise.\n+\t(vrshrntq_m_n_u16): Likewise.\n+\t(vshllbq_m_n_s8): Likewise.\n+\t(vshllbq_m_n_s16): Likewise.\n+\t(vshllbq_m_n_u8): Likewise.\n+\t(vshllbq_m_n_u16): Likewise.\n+\t(vshlltq_m_n_s8): Likewise.\n+\t(vshlltq_m_n_s16): Likewise.\n+\t(vshlltq_m_n_u8): Likewise.\n+\t(vshlltq_m_n_u16): Likewise.\n+\t(vshrnbq_m_n_s32): Likewise.\n+\t(vshrnbq_m_n_s16): Likewise.\n+\t(vshrnbq_m_n_u32): Likewise.\n+\t(vshrnbq_m_n_u16): Likewise.\n+\t(vshrntq_m_n_s32): Likewise.\n+\t(vshrntq_m_n_s16): Likewise.\n+\t(vshrntq_m_n_u32): Likewise.\n+\t(vshrntq_m_n_u16): Likewise.\n+\t(__arm_vmlaldavaq_p_s32): Define intrinsic.\n+\t(__arm_vmlaldavaq_p_s16): Likewise.\n+\t(__arm_vmlaldavaq_p_u32): Likewise.\n+\t(__arm_vmlaldavaq_p_u16): Likewise.\n+\t(__arm_vmlaldavaxq_p_s32): Likewise.\n+\t(__arm_vmlaldavaxq_p_s16): Likewise.\n+\t(__arm_vmlaldavaxq_p_u32): Likewise.\n+\t(__arm_vmlaldavaxq_p_u16): Likewise.\n+\t(__arm_vmlsldavaq_p_s32): Likewise.\n+\t(__arm_vmlsldavaq_p_s16): Likewise.\n+\t(__arm_vmlsldavaxq_p_s32): Likewise.\n+\t(__arm_vmlsldavaxq_p_s16): Likewise.\n+\t(__arm_vmullbq_poly_m_p8): Likewise.\n+\t(__arm_vmullbq_poly_m_p16): Likewise.\n+\t(__arm_vmulltq_poly_m_p8): Likewise.\n+\t(__arm_vmulltq_poly_m_p16): Likewise.\n+\t(__arm_vqdmullbq_m_n_s32): Likewise.\n+\t(__arm_vqdmullbq_m_n_s16): Likewise.\n+\t(__arm_vqdmullbq_m_s32): Likewise.\n+\t(__arm_vqdmullbq_m_s16): Likewise.\n+\t(__arm_vqdmulltq_m_n_s32): Likewise.\n+\t(__arm_vqdmulltq_m_n_s16): Likewise.\n+\t(__arm_vqdmulltq_m_s32): Likewise.\n+\t(__arm_vqdmulltq_m_s16): Likewise.\n+\t(__arm_vqrshrnbq_m_n_s32): Likewise.\n+\t(__arm_vqrshrnbq_m_n_s16): Likewise.\n+\t(__arm_vqrshrnbq_m_n_u32): Likewise.\n+\t(__arm_vqrshrnbq_m_n_u16): Likewise.\n+\t(__arm_vqrshrntq_m_n_s32): Likewise.\n+\t(__arm_vqrshrntq_m_n_s16): Likewise.\n+\t(__arm_vqrshrntq_m_n_u32): Likewise.\n+\t(__arm_vqrshrntq_m_n_u16): Likewise.\n+\t(__arm_vqrshrunbq_m_n_s32): Likewise.\n+\t(__arm_vqrshrunbq_m_n_s16): Likewise.\n+\t(__arm_vqrshruntq_m_n_s32): Likewise.\n+\t(__arm_vqrshruntq_m_n_s16): Likewise.\n+\t(__arm_vqshrnbq_m_n_s32): Likewise.\n+\t(__arm_vqshrnbq_m_n_s16): Likewise.\n+\t(__arm_vqshrnbq_m_n_u32): Likewise.\n+\t(__arm_vqshrnbq_m_n_u16): Likewise.\n+\t(__arm_vqshrntq_m_n_s32): Likewise.\n+\t(__arm_vqshrntq_m_n_s16): Likewise.\n+\t(__arm_vqshrntq_m_n_u32): Likewise.\n+\t(__arm_vqshrntq_m_n_u16): Likewise.\n+\t(__arm_vqshrunbq_m_n_s32): Likewise.\n+\t(__arm_vqshrunbq_m_n_s16): Likewise.\n+\t(__arm_vqshruntq_m_n_s32): Likewise.\n+\t(__arm_vqshruntq_m_n_s16): Likewise.\n+\t(__arm_vrmlaldavhaq_p_s32): Likewise.\n+\t(__arm_vrmlaldavhaq_p_u32): Likewise.\n+\t(__arm_vrmlaldavhaxq_p_s32): Likewise.\n+\t(__arm_vrmlsldavhaq_p_s32): Likewise.\n+\t(__arm_vrmlsldavhaxq_p_s32): Likewise.\n+\t(__arm_vrshrnbq_m_n_s32): Likewise.\n+\t(__arm_vrshrnbq_m_n_s16): Likewise.\n+\t(__arm_vrshrnbq_m_n_u32): Likewise.\n+\t(__arm_vrshrnbq_m_n_u16): Likewise.\n+\t(__arm_vrshrntq_m_n_s32): Likewise.\n+\t(__arm_vrshrntq_m_n_s16): Likewise.\n+\t(__arm_vrshrntq_m_n_u32): Likewise.\n+\t(__arm_vrshrntq_m_n_u16): Likewise.\n+\t(__arm_vshllbq_m_n_s8): Likewise.\n+\t(__arm_vshllbq_m_n_s16): Likewise.\n+\t(__arm_vshllbq_m_n_u8): Likewise.\n+\t(__arm_vshllbq_m_n_u16): Likewise.\n+\t(__arm_vshlltq_m_n_s8): Likewise.\n+\t(__arm_vshlltq_m_n_s16): Likewise.\n+\t(__arm_vshlltq_m_n_u8): Likewise.\n+\t(__arm_vshlltq_m_n_u16): Likewise.\n+\t(__arm_vshrnbq_m_n_s32): Likewise.\n+\t(__arm_vshrnbq_m_n_s16): Likewise.\n+\t(__arm_vshrnbq_m_n_u32): Likewise.\n+\t(__arm_vshrnbq_m_n_u16): Likewise.\n+\t(__arm_vshrntq_m_n_s32): Likewise.\n+\t(__arm_vshrntq_m_n_s16): Likewise.\n+\t(__arm_vshrntq_m_n_u32): Likewise.\n+\t(__arm_vshrntq_m_n_u16): Likewise.\n+\t(vmullbq_poly_m): Define polymorphic variant.\n+\t(vmulltq_poly_m): Likewise.\n+\t(vshllbq_m): Likewise.\n+\t(vshrntq_m_n): Likewise.\n+\t(vshrnbq_m_n): Likewise.\n+\t(vshlltq_m_n): Likewise.\n+\t(vshllbq_m_n): Likewise.\n+\t(vrshrntq_m_n): Likewise.\n+\t(vrshrnbq_m_n): Likewise.\n+\t(vqshruntq_m_n): Likewise.\n+\t(vqshrunbq_m_n): Likewise.\n+\t(vqdmullbq_m_n): Likewise.\n+\t(vqdmullbq_m): Likewise.\n+\t(vqdmulltq_m_n): Likewise.\n+\t(vqdmulltq_m): Likewise.\n+\t(vqrshrnbq_m_n): Likewise.\n+\t(vqrshrntq_m_n): Likewise.\n+\t(vqrshrunbq_m_n): Likewise.\n+\t(vqrshruntq_m_n): Likewise.\n+\t(vqshrnbq_m_n): Likewise.\n+\t(vqshrntq_m_n): Likewise.\n+\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_NONE_IMM_UNONE): Use\n+\tbuiltin qualifiers.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE): Likewise.\n+\t* config/arm/mve.md (VMLALDAVAQ_P): Define iterator.\n+\t(VMLALDAVAXQ_P): Likewise.\n+\t(VQRSHRNBQ_M_N): Likewise.\n+\t(VQRSHRNTQ_M_N): Likewise.\n+\t(VQSHRNBQ_M_N): Likewise.\n+\t(VQSHRNTQ_M_N): Likewise.\n+\t(VRSHRNBQ_M_N): Likewise.\n+\t(VRSHRNTQ_M_N): Likewise.\n+\t(VSHLLBQ_M_N): Likewise.\n+\t(VSHLLTQ_M_N): Likewise.\n+\t(VSHRNBQ_M_N): Likewise.\n+\t(VSHRNTQ_M_N): Likewise.\n+\t(mve_vmlaldavaq_p_<supf><mode>): Define RTL pattern.\n+\t(mve_vmlaldavaxq_p_<supf><mode>): Likewise.\n+\t(mve_vqrshrnbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqrshrntq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqshrnbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vqshrntq_m_n_<supf><mode>): Likewise.\n+\t(mve_vrmlaldavhaq_p_sv4si): Likewise.\n+\t(mve_vrshrnbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vrshrntq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshllbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshlltq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshrnbq_m_n_<supf><mode>): Likewise.\n+\t(mve_vshrntq_m_n_<supf><mode>): Likewise.\n+\t(mve_vmlsldavaq_p_s<mode>): Likewise.\n+\t(mve_vmlsldavaxq_p_s<mode>): Likewise.\n+\t(mve_vmullbq_poly_m_p<mode>): Likewise.\n+\t(mve_vmulltq_poly_m_p<mode>): Likewise.\n+\t(mve_vqdmullbq_m_n_s<mode>): Likewise.\n+\t(mve_vqdmullbq_m_s<mode>): Likewise.\n+\t(mve_vqdmulltq_m_n_s<mode>): Likewise.\n+\t(mve_vqdmulltq_m_s<mode>): Likewise.\n+\t(mve_vqrshrunbq_m_n_s<mode>): Likewise.\n+\t(mve_vqrshruntq_m_n_s<mode>): Likewise.\n+\t(mve_vqshrunbq_m_n_s<mode>): Likewise.\n+\t(mve_vqshruntq_m_n_s<mode>): Likewise.\n+\t(mve_vrmlaldavhaq_p_uv4si): Likewise.\n+\t(mve_vrmlaldavhaxq_p_sv4si): Likewise.\n+\t(mve_vrmlsldavhaq_p_sv4si): Likewise.\n+\t(mve_vrmlsldavhaxq_p_sv4si): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "9571b60f84f947851639de94501b8bccd0149727", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -579,4 +579,5 @@ void arm_initialize_isa (sbitmap, const enum isa_feature *);\n \n const char * arm_gen_far_branch (rtx *, int, const char * , const char *);\n \n+bool arm_mve_immediate_check(rtx, machine_mode, bool);\n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "9b799084d440dc548ba0fe0d6ee9ab7351d7f846", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -32702,6 +32702,31 @@ arm_simd_check_vect_par_cnst_half_p (rtx op, machine_mode mode,\n   return true;\n }\n \n+/* To check op's immediate values matches the mode of the defined insn.  */\n+bool\n+arm_mve_immediate_check (rtx op, machine_mode mode, bool val)\n+{\n+  if (val)\n+    {\n+      if (((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 7)\n+\t   && (mode == E_V16QImode))\n+\t  || ((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 15)\n+\t   && (mode == E_V8HImode))\n+\t  || ((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 31)\n+\t   && (mode == E_V4SImode)))\n+\treturn true;\n+    }\n+  else\n+    {\n+      if (((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 7)\n+\t   && (mode == E_V8HImode))\n+\t  || ((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 15)\n+\t   && (mode == E_V4SImode)))\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* Can output mi_thunk for all cases except for non-zero vcall_offset\n    in Thumb1.  */\n static bool"}, {"sha": "06628122de6a82ecfd86d972b7654da3c4f6f0a3", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 823, "deletions": 1, "changes": 824, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -1563,6 +1563,83 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vsubq_m_n_u8(__inactive, __a, __b, __p) __arm_vsubq_m_n_u8(__inactive, __a, __b, __p)\n #define vsubq_m_n_u32(__inactive, __a, __b, __p) __arm_vsubq_m_n_u32(__inactive, __a, __b, __p)\n #define vsubq_m_n_u16(__inactive, __a, __b, __p) __arm_vsubq_m_n_u16(__inactive, __a, __b, __p)\n+#define vmlaldavaq_p_s32(__a, __b, __c, __p) __arm_vmlaldavaq_p_s32(__a, __b, __c, __p)\n+#define vmlaldavaq_p_s16(__a, __b, __c, __p) __arm_vmlaldavaq_p_s16(__a, __b, __c, __p)\n+#define vmlaldavaq_p_u32(__a, __b, __c, __p) __arm_vmlaldavaq_p_u32(__a, __b, __c, __p)\n+#define vmlaldavaq_p_u16(__a, __b, __c, __p) __arm_vmlaldavaq_p_u16(__a, __b, __c, __p)\n+#define vmlaldavaxq_p_s32(__a, __b, __c, __p) __arm_vmlaldavaxq_p_s32(__a, __b, __c, __p)\n+#define vmlaldavaxq_p_s16(__a, __b, __c, __p) __arm_vmlaldavaxq_p_s16(__a, __b, __c, __p)\n+#define vmlaldavaxq_p_u32(__a, __b, __c, __p) __arm_vmlaldavaxq_p_u32(__a, __b, __c, __p)\n+#define vmlaldavaxq_p_u16(__a, __b, __c, __p) __arm_vmlaldavaxq_p_u16(__a, __b, __c, __p)\n+#define vmlsldavaq_p_s32(__a, __b, __c, __p) __arm_vmlsldavaq_p_s32(__a, __b, __c, __p)\n+#define vmlsldavaq_p_s16(__a, __b, __c, __p) __arm_vmlsldavaq_p_s16(__a, __b, __c, __p)\n+#define vmlsldavaxq_p_s32(__a, __b, __c, __p) __arm_vmlsldavaxq_p_s32(__a, __b, __c, __p)\n+#define vmlsldavaxq_p_s16(__a, __b, __c, __p) __arm_vmlsldavaxq_p_s16(__a, __b, __c, __p)\n+#define vmullbq_poly_m_p8(__inactive, __a, __b, __p) __arm_vmullbq_poly_m_p8(__inactive, __a, __b, __p)\n+#define vmullbq_poly_m_p16(__inactive, __a, __b, __p) __arm_vmullbq_poly_m_p16(__inactive, __a, __b, __p)\n+#define vmulltq_poly_m_p8(__inactive, __a, __b, __p) __arm_vmulltq_poly_m_p8(__inactive, __a, __b, __p)\n+#define vmulltq_poly_m_p16(__inactive, __a, __b, __p) __arm_vmulltq_poly_m_p16(__inactive, __a, __b, __p)\n+#define vqdmullbq_m_n_s32(__inactive, __a, __b, __p) __arm_vqdmullbq_m_n_s32(__inactive, __a, __b, __p)\n+#define vqdmullbq_m_n_s16(__inactive, __a, __b, __p) __arm_vqdmullbq_m_n_s16(__inactive, __a, __b, __p)\n+#define vqdmullbq_m_s32(__inactive, __a, __b, __p) __arm_vqdmullbq_m_s32(__inactive, __a, __b, __p)\n+#define vqdmullbq_m_s16(__inactive, __a, __b, __p) __arm_vqdmullbq_m_s16(__inactive, __a, __b, __p)\n+#define vqdmulltq_m_n_s32(__inactive, __a, __b, __p) __arm_vqdmulltq_m_n_s32(__inactive, __a, __b, __p)\n+#define vqdmulltq_m_n_s16(__inactive, __a, __b, __p) __arm_vqdmulltq_m_n_s16(__inactive, __a, __b, __p)\n+#define vqdmulltq_m_s32(__inactive, __a, __b, __p) __arm_vqdmulltq_m_s32(__inactive, __a, __b, __p)\n+#define vqdmulltq_m_s16(__inactive, __a, __b, __p) __arm_vqdmulltq_m_s16(__inactive, __a, __b, __p)\n+#define vqrshrnbq_m_n_s32(__a, __b,  __imm, __p) __arm_vqrshrnbq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqrshrnbq_m_n_s16(__a, __b,  __imm, __p) __arm_vqrshrnbq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqrshrnbq_m_n_u32(__a, __b,  __imm, __p) __arm_vqrshrnbq_m_n_u32(__a, __b,  __imm, __p)\n+#define vqrshrnbq_m_n_u16(__a, __b,  __imm, __p) __arm_vqrshrnbq_m_n_u16(__a, __b,  __imm, __p)\n+#define vqrshrntq_m_n_s32(__a, __b,  __imm, __p) __arm_vqrshrntq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqrshrntq_m_n_s16(__a, __b,  __imm, __p) __arm_vqrshrntq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqrshrntq_m_n_u32(__a, __b,  __imm, __p) __arm_vqrshrntq_m_n_u32(__a, __b,  __imm, __p)\n+#define vqrshrntq_m_n_u16(__a, __b,  __imm, __p) __arm_vqrshrntq_m_n_u16(__a, __b,  __imm, __p)\n+#define vqrshrunbq_m_n_s32(__a, __b,  __imm, __p) __arm_vqrshrunbq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqrshrunbq_m_n_s16(__a, __b,  __imm, __p) __arm_vqrshrunbq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqrshruntq_m_n_s32(__a, __b,  __imm, __p) __arm_vqrshruntq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqrshruntq_m_n_s16(__a, __b,  __imm, __p) __arm_vqrshruntq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqshrnbq_m_n_s32(__a, __b,  __imm, __p) __arm_vqshrnbq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqshrnbq_m_n_s16(__a, __b,  __imm, __p) __arm_vqshrnbq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqshrnbq_m_n_u32(__a, __b,  __imm, __p) __arm_vqshrnbq_m_n_u32(__a, __b,  __imm, __p)\n+#define vqshrnbq_m_n_u16(__a, __b,  __imm, __p) __arm_vqshrnbq_m_n_u16(__a, __b,  __imm, __p)\n+#define vqshrntq_m_n_s32(__a, __b,  __imm, __p) __arm_vqshrntq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqshrntq_m_n_s16(__a, __b,  __imm, __p) __arm_vqshrntq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqshrntq_m_n_u32(__a, __b,  __imm, __p) __arm_vqshrntq_m_n_u32(__a, __b,  __imm, __p)\n+#define vqshrntq_m_n_u16(__a, __b,  __imm, __p) __arm_vqshrntq_m_n_u16(__a, __b,  __imm, __p)\n+#define vqshrunbq_m_n_s32(__a, __b,  __imm, __p) __arm_vqshrunbq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqshrunbq_m_n_s16(__a, __b,  __imm, __p) __arm_vqshrunbq_m_n_s16(__a, __b,  __imm, __p)\n+#define vqshruntq_m_n_s32(__a, __b,  __imm, __p) __arm_vqshruntq_m_n_s32(__a, __b,  __imm, __p)\n+#define vqshruntq_m_n_s16(__a, __b,  __imm, __p) __arm_vqshruntq_m_n_s16(__a, __b,  __imm, __p)\n+#define vrmlaldavhaq_p_s32(__a, __b, __c, __p) __arm_vrmlaldavhaq_p_s32(__a, __b, __c, __p)\n+#define vrmlaldavhaq_p_u32(__a, __b, __c, __p) __arm_vrmlaldavhaq_p_u32(__a, __b, __c, __p)\n+#define vrmlaldavhaxq_p_s32(__a, __b, __c, __p) __arm_vrmlaldavhaxq_p_s32(__a, __b, __c, __p)\n+#define vrmlsldavhaq_p_s32(__a, __b, __c, __p) __arm_vrmlsldavhaq_p_s32(__a, __b, __c, __p)\n+#define vrmlsldavhaxq_p_s32(__a, __b, __c, __p) __arm_vrmlsldavhaxq_p_s32(__a, __b, __c, __p)\n+#define vrshrnbq_m_n_s32(__a, __b,  __imm, __p) __arm_vrshrnbq_m_n_s32(__a, __b,  __imm, __p)\n+#define vrshrnbq_m_n_s16(__a, __b,  __imm, __p) __arm_vrshrnbq_m_n_s16(__a, __b,  __imm, __p)\n+#define vrshrnbq_m_n_u32(__a, __b,  __imm, __p) __arm_vrshrnbq_m_n_u32(__a, __b,  __imm, __p)\n+#define vrshrnbq_m_n_u16(__a, __b,  __imm, __p) __arm_vrshrnbq_m_n_u16(__a, __b,  __imm, __p)\n+#define vrshrntq_m_n_s32(__a, __b,  __imm, __p) __arm_vrshrntq_m_n_s32(__a, __b,  __imm, __p)\n+#define vrshrntq_m_n_s16(__a, __b,  __imm, __p) __arm_vrshrntq_m_n_s16(__a, __b,  __imm, __p)\n+#define vrshrntq_m_n_u32(__a, __b,  __imm, __p) __arm_vrshrntq_m_n_u32(__a, __b,  __imm, __p)\n+#define vrshrntq_m_n_u16(__a, __b,  __imm, __p) __arm_vrshrntq_m_n_u16(__a, __b,  __imm, __p)\n+#define vshllbq_m_n_s8(__inactive, __a,  __imm, __p) __arm_vshllbq_m_n_s8(__inactive, __a,  __imm, __p)\n+#define vshllbq_m_n_s16(__inactive, __a,  __imm, __p) __arm_vshllbq_m_n_s16(__inactive, __a,  __imm, __p)\n+#define vshllbq_m_n_u8(__inactive, __a,  __imm, __p) __arm_vshllbq_m_n_u8(__inactive, __a,  __imm, __p)\n+#define vshllbq_m_n_u16(__inactive, __a,  __imm, __p) __arm_vshllbq_m_n_u16(__inactive, __a,  __imm, __p)\n+#define vshlltq_m_n_s8(__inactive, __a,  __imm, __p) __arm_vshlltq_m_n_s8(__inactive, __a,  __imm, __p)\n+#define vshlltq_m_n_s16(__inactive, __a,  __imm, __p) __arm_vshlltq_m_n_s16(__inactive, __a,  __imm, __p)\n+#define vshlltq_m_n_u8(__inactive, __a,  __imm, __p) __arm_vshlltq_m_n_u8(__inactive, __a,  __imm, __p)\n+#define vshlltq_m_n_u16(__inactive, __a,  __imm, __p) __arm_vshlltq_m_n_u16(__inactive, __a,  __imm, __p)\n+#define vshrnbq_m_n_s32(__a, __b,  __imm, __p) __arm_vshrnbq_m_n_s32(__a, __b,  __imm, __p)\n+#define vshrnbq_m_n_s16(__a, __b,  __imm, __p) __arm_vshrnbq_m_n_s16(__a, __b,  __imm, __p)\n+#define vshrnbq_m_n_u32(__a, __b,  __imm, __p) __arm_vshrnbq_m_n_u32(__a, __b,  __imm, __p)\n+#define vshrnbq_m_n_u16(__a, __b,  __imm, __p) __arm_vshrnbq_m_n_u16(__a, __b,  __imm, __p)\n+#define vshrntq_m_n_s32(__a, __b,  __imm, __p) __arm_vshrntq_m_n_s32(__a, __b,  __imm, __p)\n+#define vshrntq_m_n_s16(__a, __b,  __imm, __p) __arm_vshrntq_m_n_s16(__a, __b,  __imm, __p)\n+#define vshrntq_m_n_u32(__a, __b,  __imm, __p) __arm_vshrntq_m_n_u32(__a, __b,  __imm, __p)\n+#define vshrntq_m_n_u16(__a, __b,  __imm, __p) __arm_vshrntq_m_n_u16(__a, __b,  __imm, __p)\n #endif\n \n __extension__ extern __inline void\n@@ -10317,6 +10394,545 @@ __arm_vsubq_m_n_u16 (uint16x8_t __inactive, uint16x8_t __a, uint16_t __b, mve_pr\n   return __builtin_mve_vsubq_m_n_uv8hi (__inactive, __a, __b, __p);\n }\n \n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaq_p_s16 (int64_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaq_p_sv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaq_p_u32 (uint64_t __a, uint32x4_t __b, uint32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaq_p_uv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaq_p_u16 (uint64_t __a, uint16x8_t __b, uint16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaq_p_uv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaxq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaxq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaxq_p_s16 (int64_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaxq_p_sv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaxq_p_u32 (uint64_t __a, uint32x4_t __b, uint32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaxq_p_uv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlaldavaxq_p_u16 (uint64_t __a, uint16x8_t __b, uint16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlaldavaxq_p_uv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlsldavaq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlsldavaq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlsldavaq_p_s16 (int64_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlsldavaq_p_sv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlsldavaxq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlsldavaxq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmlsldavaxq_p_s16 (int64_t __a, int16x8_t __b, int16x8_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmlsldavaxq_p_sv8hi (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmullbq_poly_m_p8 (uint16x8_t __inactive, uint8x16_t __a, uint8x16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmullbq_poly_m_pv16qi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmullbq_poly_m_p16 (uint32x4_t __inactive, uint16x8_t __a, uint16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmullbq_poly_m_pv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmulltq_poly_m_p8 (uint16x8_t __inactive, uint8x16_t __a, uint8x16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmulltq_poly_m_pv16qi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmulltq_poly_m_p16 (uint32x4_t __inactive, uint16x8_t __a, uint16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vmulltq_poly_m_pv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmullbq_m_n_s32 (int64x2_t __inactive, int32x4_t __a, int32_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmullbq_m_n_sv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmullbq_m_n_s16 (int32x4_t __inactive, int16x8_t __a, int16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmullbq_m_n_sv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmullbq_m_s32 (int64x2_t __inactive, int32x4_t __a, int32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmullbq_m_sv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmullbq_m_s16 (int32x4_t __inactive, int16x8_t __a, int16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmullbq_m_sv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmulltq_m_n_s32 (int64x2_t __inactive, int32x4_t __a, int32_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmulltq_m_n_sv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmulltq_m_n_s16 (int32x4_t __inactive, int16x8_t __a, int16_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmulltq_m_n_sv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmulltq_m_s32 (int64x2_t __inactive, int32x4_t __a, int32x4_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmulltq_m_sv4si (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqdmulltq_m_s16 (int32x4_t __inactive, int16x8_t __a, int16x8_t __b, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqdmulltq_m_sv8hi (__inactive, __a, __b, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrnbq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrnbq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrnbq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrnbq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrnbq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrntq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrntq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrntq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrntq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrntq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrntq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrntq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrntq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrunbq_m_n_s32 (uint16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrunbq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshrunbq_m_n_s16 (uint8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshrunbq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshruntq_m_n_s32 (uint16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshruntq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqrshruntq_m_n_s16 (uint8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqrshruntq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrnbq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrnbq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrnbq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrnbq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrnbq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrnbq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrnbq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrnbq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrntq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrntq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrntq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrntq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrntq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrntq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrntq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrntq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrunbq_m_n_s32 (uint16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrunbq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshrunbq_m_n_s16 (uint8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshrunbq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshruntq_m_n_s32 (uint16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshruntq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vqshruntq_m_n_s16 (uint8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vqshruntq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlaldavhaq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrmlaldavhaq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlaldavhaq_p_u32 (uint64_t __a, uint32x4_t __b, uint32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrmlaldavhaq_p_uv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlaldavhaxq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrmlaldavhaxq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlsldavhaq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrmlsldavhaq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrmlsldavhaxq_p_s32 (int64_t __a, int32x4_t __b, int32x4_t __c, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrmlsldavhaxq_p_sv4si (__a, __b, __c, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrnbq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrnbq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrnbq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrnbq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrnbq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrnbq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrnbq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrnbq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrntq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrntq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrntq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrntq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrntq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrntq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrshrntq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vrshrntq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshllbq_m_n_s8 (int16x8_t __inactive, int8x16_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshllbq_m_n_sv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshllbq_m_n_s16 (int32x4_t __inactive, int16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshllbq_m_n_sv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshllbq_m_n_u8 (uint16x8_t __inactive, uint8x16_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshllbq_m_n_uv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshllbq_m_n_u16 (uint32x4_t __inactive, uint16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshllbq_m_n_uv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlltq_m_n_s8 (int16x8_t __inactive, int8x16_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlltq_m_n_sv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlltq_m_n_s16 (int32x4_t __inactive, int16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlltq_m_n_sv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlltq_m_n_u8 (uint16x8_t __inactive, uint8x16_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlltq_m_n_uv16qi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlltq_m_n_u16 (uint32x4_t __inactive, uint16x8_t __a, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshlltq_m_n_uv8hi (__inactive, __a, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrnbq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrnbq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrnbq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrnbq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrnbq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrnbq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrnbq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrnbq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrntq_m_n_s32 (int16x8_t __a, int32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrntq_m_n_sv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrntq_m_n_s16 (int8x16_t __a, int16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrntq_m_n_sv8hi (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrntq_m_n_u32 (uint16x8_t __a, uint32x4_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrntq_m_n_uv4si (__a, __b, __imm, __p);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshrntq_m_n_u16 (uint8x16_t __a, uint16x8_t __b, const int __imm, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vshrntq_m_n_uv8hi (__a, __b, __imm, __p);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -16547,7 +17163,6 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vqrdmulhq_m_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t), p3), \\\n   int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vqrdmulhq_m_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t), p3));})\n \n-\n #define vqrdmlsdhxq_m(p0,p1,p2,p3) __arm_vqrdmlsdhxq_m(p0,p1,p2,p3)\n #define __arm_vqrdmlsdhxq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n   __typeof(p1) __p1 = (p1); \\\n@@ -16611,6 +17226,213 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_int32_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmladavaxq_p_s16 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n   int (*)[__ARM_mve_type_int32_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmladavaxq_p_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3));})\n \n+#define vmullbq_poly_m(p0,p1,p2,p3) __arm_vmullbq_poly_m(p0,p1,p2,p3)\n+#define __arm_vmullbq_poly_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vmullbq_poly_m_p8 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmullbq_poly_m_p16 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3));})\n+\n+#define vmulltq_poly_m(p0,p1,p2,p3) __arm_vmulltq_poly_m(p0,p1,p2,p3)\n+#define __arm_vmulltq_poly_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vmulltq_poly_m_p8 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint8x16_t), __ARM_mve_coerce(__p2, uint8x16_t), p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmulltq_poly_m_p16 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3));})\n+\n+#define vshllbq_m(p0,p1,p2,p3) __arm_vshllbq_m(p0,p1,p2,p3)\n+#define __arm_vshllbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int8x16_t]: __arm_vshllbq_m_n_s8 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int16x8_t]: __arm_vshllbq_m_n_s16 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint8x16_t]: __arm_vshllbq_m_n_u8 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint16x8_t]: __arm_vshllbq_m_n_u16 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3));})\n+\n+#define vshrntq_m(p0,p1,p2,p3) __arm_vshrntq_m(p0,p1,p2,p3)\n+#define __arm_vshrntq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vshrntq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vshrntq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vshrntq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vshrntq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vshrnbq_m(p0,p1,p2,p3) __arm_vshrnbq_m(p0,p1,p2,p3)\n+#define __arm_vshrnbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vshrnbq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vshrnbq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vshrnbq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vshrnbq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vshlltq_m(p0,p1,p2,p3) __arm_vshlltq_m(p0,p1,p2,p3)\n+#define __arm_vshlltq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int8x16_t]: __arm_vshlltq_m_n_s8 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int16x8_t]: __arm_vshlltq_m_n_s16 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint8x16_t]: __arm_vshlltq_m_n_u8 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint8x16_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint16x8_t]: __arm_vshlltq_m_n_u16 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3));})\n+\n+#define vrshrntq_m(p0,p1,p2,p3) __arm_vrshrntq_m(p0,p1,p2,p3)\n+#define __arm_vrshrntq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vrshrntq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vrshrntq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vrshrntq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vrshrntq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vqshruntq_m(p0,p1,p2,p3) __arm_vqshruntq_m(p0,p1,p2,p3)\n+#define __arm_vqshruntq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqshruntq_m_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqshruntq_m_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3));})\n+\n+#define vqshrunbq_m(p0,p1,p2,p3) __arm_vqshrunbq_m(p0,p1,p2,p3)\n+#define __arm_vqshrunbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqshrunbq_m_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqshrunbq_m_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3));})\n+\n+#define vqdmullbq_m(p0,p1,p2,p3) __arm_vqdmullbq_m(p0,p1,p2,p3)\n+#define __arm_vqdmullbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vqdmullbq_m_s16 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int64x2_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vqdmullbq_m_s32 (__ARM_mve_coerce(__p0, int64x2_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vqdmullbq_m_n_s16 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t), p3), \\\n+  int (*)[__ARM_mve_type_int64x2_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vqdmullbq_m_n_s32 (__ARM_mve_coerce(__p0, int64x2_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t), p3));})\n+\n+#define vqdmulltq_m(p0,p1,p2,p3) __arm_vqdmulltq_m(p0,p1,p2,p3)\n+#define __arm_vqdmulltq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16_t]: __arm_vqdmulltq_m_n_s16 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16_t), p3), \\\n+  int (*)[__ARM_mve_type_int64x2_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32_t]: __arm_vqdmulltq_m_n_s32 (__ARM_mve_coerce(__p0, int64x2_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vqdmulltq_m_s16 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int64x2_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vqdmulltq_m_s32 (__ARM_mve_coerce(__p0, int64x2_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3));})\n+\n+#define vqrshrnbq_m(p0,p1,p2,p3) __arm_vqrshrnbq_m(p0,p1,p2,p3)\n+#define __arm_vqrshrnbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrnbq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrnbq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vqrshrnbq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vqrshrnbq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vqrshrntq_m(p0,p1,p2,p3) __arm_vqrshrntq_m(p0,p1,p2,p3)\n+#define __arm_vqrshrntq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrntq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrntq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vqrshrntq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vqrshrntq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vqrshrunbq_m(p0,p1,p2,p3) __arm_vqrshrunbq_m(p0,p1,p2,p3)\n+#define __arm_vqrshrunbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshrunbq_m_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshrunbq_m_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3));})\n+\n+#define vqrshruntq_m(p0,p1,p2,p3) __arm_vqrshruntq_m(p0,p1,p2,p3)\n+#define __arm_vqrshruntq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqrshruntq_m_n_s16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqrshruntq_m_n_s32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3));})\n+\n+#define vqshrnbq_m(p0,p1,p2,p3) __arm_vqshrnbq_m(p0,p1,p2,p3)\n+#define __arm_vqshrnbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqshrnbq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqshrnbq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vqshrnbq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vqshrnbq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vqshrntq_m(p0,p1,p2,p3) __arm_vqshrntq_m(p0,p1,p2,p3)\n+#define __arm_vqshrntq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vqshrntq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vqshrntq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vqshrntq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vqshrntq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vrshrnbq_m(p0,p1,p2,p3) __arm_vrshrnbq_m(p0,p1,p2,p3)\n+#define __arm_vrshrnbq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int16x8_t]: __arm_vrshrnbq_m_n_s16 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int32x4_t]: __arm_vrshrnbq_m_n_s32 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int32x4_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint16x8_t]: __arm_vrshrnbq_m_n_u16 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint32x4_t]: __arm_vrshrnbq_m_n_u32 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint32x4_t), p2, p3));})\n+\n+#define vmlaldavaq_p(p0,p1,p2,p3) __arm_vmlaldavaq_p(p0,p1,p2,p3)\n+#define __arm_vmlaldavaq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmlaldavaq_p_s16 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlaldavaq_p_s32 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmlaldavaq_p_u16 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vmlaldavaq_p_u32 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vmlaldavaxq_p(p0,p1,p2,p3) __arm_vmlaldavaxq_p(p0,p1,p2,p3)\n+#define __arm_vmlaldavaxq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmlaldavaxq_p_s16 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlaldavaxq_p_s32 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vmlaldavaxq_p_u16 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint16x8_t), __ARM_mve_coerce(__p2, uint16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vmlaldavaxq_p_u32 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vmlsldavaq_p(p0,p1,p2,p3) __arm_vmlsldavaq_p(p0,p1,p2,p3)\n+#define __arm_vmlsldavaq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmlsldavaq_p_s16(__p0, __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlsldavaq_p_s32(__p0, __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3));})\n+\n+#define vmlsldavaxq_p(p0,p1,p2,p3) __arm_vmlsldavaxq_p(p0,p1,p2,p3)\n+#define __arm_vmlsldavaxq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vmlsldavaxq_p_s16(__p0, __ARM_mve_coerce(__p1, int16x8_t), __ARM_mve_coerce(__p2, int16x8_t), p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vmlsldavaxq_p_s32(__p0, __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3));})\n+\n+#define vrmlaldavhaq_p(p0,p1,p2,p3) __arm_vrmlaldavhaq_p(p0,p1,p2,p3)\n+#define __arm_vrmlaldavhaq_p(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  __typeof(p2) __p2 = (p2); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)][__ARM_mve_typeid(__p2)])0, \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vrmlaldavhaq_p_s32 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int32x4_t), __ARM_mve_coerce(__p2, int32x4_t), p3), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vrmlaldavhaq_p_u32 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint32x4_t), __ARM_mve_coerce(__p2, uint32x4_t), p3));})\n+\n+#define vrmlaldavhaxq_p(p0,p1,p2,p3) __arm_vrmlaldavhaxq_p(p0,p1,p2,p3)\n+#define __arm_vrmlaldavhaxq_p(p0,p1,p2,p3) __arm_vrmlaldavhaxq_p_s32(p0,p1,p2,p3)\n+\n+#define vrmlsldavhaq_p(p0,p1,p2,p3) __arm_vrmlsldavhaq_p(p0,p1,p2,p3)\n+#define __arm_vrmlsldavhaq_p(p0,p1,p2,p3) __arm_vrmlsldavhaq_p_s32(p0,p1,p2,p3)\n+\n+#define vrmlsldavhaxq_p(p0,p1,p2,p3) __arm_vrmlsldavhaxq_p(p0,p1,p2,p3)\n+#define __arm_vrmlsldavhaxq_p(p0,p1,p2,p3) __arm_vrmlsldavhaxq_p_s32(p0,p1,p2,p3)\n+\n #endif /* MVE Integer.  */\n \n #define vqdmladhq_m(p0,p1,p2,p3) __arm_vqdmladhq_m(p0,p1,p2,p3)"}, {"sha": "6048591cada9f44430948914efdce484df40f325", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -613,3 +613,44 @@ VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshrq_m_n_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshlq_m_n_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vrshrq_m_n_s, v16qi, v8hi, v4si)\n VAR3 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqshlq_m_n_s, v16qi, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmulltq_poly_m_p, v16qi, v8hi)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmullbq_poly_m_p, v16qi, v8hi)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmlaldavaxq_p_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vmlaldavaq_p_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshrntq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshrnbq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlltq_m_n_u, v16qi, v8hi)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshllbq_m_n_u, v16qi, v8hi)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vrshrntq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vrshrnbq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vqshrntq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vqshrnbq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vqrshrntq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vqrshrnbq_m_n_u, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_NONE_IMM_UNONE, vqshruntq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_NONE_IMM_UNONE, vqshrunbq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_NONE_IMM_UNONE, vqrshruntq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_NONE_IMM_UNONE, vqrshrunbq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmulltq_m_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmulltq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmullbq_m_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vqdmullbq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlsldavaxq_p_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlsldavaq_p_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlaldavaxq_p_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmlaldavaq_p_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshrntq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshrnbq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshlltq_m_n_s, v16qi, v8hi)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vshllbq_m_n_s, v16qi, v8hi)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vrshrntq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vrshrnbq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqshrntq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqshrnbq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqrshrntq_m_n_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vqrshrnbq_m_n_s, v8hi, v4si)\n+VAR1 (QUADOP_UNONE_UNONE_UNONE_UNONE_UNONE, vrmlaldavhaq_p_u, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlsldavhaxq_p_s, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlsldavhaq_p_s, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlaldavhaxq_p_s, v4si)\n+VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlaldavhaq_p_s, v4si)"}, {"sha": "3dd33d88cbfef95e0a4c10a592ec810c35a83900", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 532, "deletions": 3, "changes": 535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -173,7 +173,20 @@\n \t\t\t VQRDMULHQ_M_S VMLSDAVAXQ_P_S VQDMULHQ_M_N_S\n \t\t\t VHCADDQ_ROT270_M_S VQDMLSDHQ_M_S VQDMLSDHXQ_M_S\n \t\t\t VMLSDAVAQ_P_S VQRDMLADHQ_M_S VQDMLADHQ_M_S\n-\t\t\t VQRDMULHQ_M_N_S])\n+\t\t\t VMLALDAVAQ_P_U VMLALDAVAQ_P_S VMLALDAVAXQ_P_U\n+\t\t\t VQRSHRNBQ_M_N_U VQRSHRNBQ_M_N_S VQRSHRNTQ_M_N_S\n+\t\t\t VQSHRNBQ_M_N_U VQSHRNBQ_M_N_S VQSHRNTQ_M_N_S\n+\t\t\t VRSHRNBQ_M_N_U VRSHRNBQ_M_N_S VRSHRNTQ_M_N_U\n+\t\t\t VSHLLBQ_M_N_U VSHLLBQ_M_N_S VSHLLTQ_M_N_U VSHLLTQ_M_N_S\n+\t\t\t VSHRNBQ_M_N_S VSHRNBQ_M_N_U VSHRNTQ_M_N_S VSHRNTQ_M_N_U\n+\t\t\t VMLALDAVAXQ_P_S VQRSHRNTQ_M_N_U VQSHRNTQ_M_N_U\n+\t\t\t VRSHRNTQ_M_N_S VQRDMULHQ_M_N_S VRMLALDAVHAQ_P_S\n+\t\t\t VMLSLDAVAQ_P_S VMLSLDAVAXQ_P_S VMULLBQ_POLY_M_P\n+\t\t\t VMULLTQ_POLY_M_P VQDMULLBQ_M_N_S VQDMULLBQ_M_S\n+\t\t\t VQDMULLTQ_M_N_S VQDMULLTQ_M_S VQRSHRUNBQ_M_N_S\n+\t\t\t VQRSHRUNTQ_M_N_SVQSHRUNBQ_M_N_S VQSHRUNTQ_M_N_S\n+\t\t\t VRMLALDAVHAQ_P_U VRMLALDAVHAXQ_P_S VRMLSLDAVHAQ_P_S\n+\t\t\t VRMLSLDAVHAXQ_P_S VQRSHRUNTQ_M_N_S VQSHRUNBQ_M_N_S])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -311,7 +324,20 @@\n \t\t       (VADDQ_M_U \"u\") (VRSHLQ_M_U \"u\") (VSLIQ_M_N_S \"s\")\n \t\t       (VQADDQ_M_N_U \"u\") (VADDQ_M_N_S \"s\") (VQSUBQ_M_N_U \"u\")\n \t\t       (VMLAQ_M_N_U \"u\") (VMINQ_M_S \"s\") (VMULHQ_M_U \"u\")\n-\t\t       (VQADDQ_M_S \"s\") (VBICQ_M_S \"s\") (VQSHLQ_M_N_S \"s\")])\n+\t\t       (VQADDQ_M_S \"s\") (VBICQ_M_S \"s\") (VQSHLQ_M_N_S \"s\")\n+\t\t       (VQSHRNTQ_M_N_S \"s\") (VQSHRNTQ_M_N_U \"u\")\n+\t\t       (VSHRNTQ_M_N_U \"u\") (VSHRNTQ_M_N_S \"s\")\n+\t\t       (VSHRNBQ_M_N_S \"s\") (VSHRNBQ_M_N_U \"u\")\n+\t\t       (VSHLLTQ_M_N_S \"s\") (VSHLLTQ_M_N_U \"u\")\n+\t\t       (VSHLLBQ_M_N_S \"s\") (VSHLLBQ_M_N_U \"u\")\n+\t\t       (VRSHRNTQ_M_N_S \"s\") (VRSHRNTQ_M_N_U \"u\")\n+\t\t       (VRSHRNBQ_M_N_U \"u\") (VRSHRNBQ_M_N_S \"s\")\n+\t\t       (VQSHRNTQ_M_N_U \"u\") (VQSHRNTQ_M_N_S \"s\")\n+\t\t       (VQSHRNBQ_M_N_S \"s\") (VQSHRNBQ_M_N_U \"u\")\n+\t\t       (VQRSHRNTQ_M_N_S \"s\") (VQRSHRNTQ_M_N_U \"u\")\n+\t\t       (VQRSHRNBQ_M_N_S \"s\") (VQRSHRNBQ_M_N_U \"u\")\n+\t\t       (VMLALDAVAXQ_P_S \"s\") (VMLALDAVAXQ_P_U \"u\")\n+\t\t       (VMLALDAVAQ_P_S \"s\") (VMLALDAVAQ_P_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -519,7 +545,18 @@\n (define_int_iterator VABDQ_M [VABDQ_M_S VABDQ_M_U])\n (define_int_iterator VMLAQ_M_N [VMLAQ_M_N_S VMLAQ_M_N_U])\n (define_int_iterator VQSHLQ_M_N [VQSHLQ_M_N_S VQSHLQ_M_N_U])\n-\n+(define_int_iterator VMLALDAVAQ_P [VMLALDAVAQ_P_U VMLALDAVAQ_P_S])\n+(define_int_iterator VMLALDAVAXQ_P [VMLALDAVAXQ_P_U VMLALDAVAXQ_P_S])\n+(define_int_iterator VQRSHRNBQ_M_N [VQRSHRNBQ_M_N_U VQRSHRNBQ_M_N_S])\n+(define_int_iterator VQRSHRNTQ_M_N [VQRSHRNTQ_M_N_S VQRSHRNTQ_M_N_U])\n+(define_int_iterator VQSHRNBQ_M_N [VQSHRNBQ_M_N_U VQSHRNBQ_M_N_S])\n+(define_int_iterator VQSHRNTQ_M_N [VQSHRNTQ_M_N_S VQSHRNTQ_M_N_U])\n+(define_int_iterator VRSHRNBQ_M_N [VRSHRNBQ_M_N_U VRSHRNBQ_M_N_S])\n+(define_int_iterator VRSHRNTQ_M_N [VRSHRNTQ_M_N_U VRSHRNTQ_M_N_S])\n+(define_int_iterator VSHLLBQ_M_N [VSHLLBQ_M_N_U VSHLLBQ_M_N_S])\n+(define_int_iterator VSHLLTQ_M_N [VSHLLTQ_M_N_U VSHLLTQ_M_N_S])\n+(define_int_iterator VSHRNBQ_M_N [VSHRNBQ_M_N_S VSHRNBQ_M_N_U])\n+(define_int_iterator VSHRNTQ_M_N [VSHRNTQ_M_N_S VSHRNTQ_M_N_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -6914,3 +6951,495 @@\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n \n+;;\n+;; [vmlaldavaq_p_u, vmlaldavaq_p_s])\n+;;\n+(define_insn \"mve_vmlaldavaq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLALDAVAQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlaldavat.<supf>%#<V_sz_elem>\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlaldavaxq_p_u, vmlaldavaxq_p_s])\n+;;\n+(define_insn \"mve_vmlaldavaxq_p_<supf><mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLALDAVAXQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlaldavaxt.<supf>%#<V_sz_elem> %Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrshrnbq_m_n_u, vqrshrnbq_m_n_s])\n+;;\n+(define_insn \"mve_vqrshrnbq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRSHRNBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrshrnbt.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrshrntq_m_n_s, vqrshrntq_m_n_u])\n+;;\n+(define_insn \"mve_vqrshrntq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRSHRNTQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrshrntt.<supf>%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshrnbq_m_n_u, vqshrnbq_m_n_s])\n+;;\n+(define_insn \"mve_vqshrnbq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred1>\" \"<MVE_constraint1>\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHRNBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE && arm_mve_immediate_check (operands[3], <MODE>mode, 0)\"\n+  \"vpst\\n\\tvqshrnbt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshrntq_m_n_s, vqshrntq_m_n_u])\n+;;\n+(define_insn \"mve_vqshrntq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHRNTQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqshrntt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlaldavhaq_p_s])\n+;;\n+(define_insn \"mve_vrmlaldavhaq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRMLALDAVHAQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlaldavhat.s32\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrshrnbq_m_n_u, vrshrnbq_m_n_s])\n+;;\n+(define_insn \"mve_vrshrnbq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRSHRNBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrshrnbt.i%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrshrntq_m_n_u, vrshrntq_m_n_s])\n+;;\n+(define_insn \"mve_vrshrntq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRSHRNTQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrshrntt.i%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshllbq_m_n_u, vshllbq_m_n_s])\n+;;\n+(define_insn \"mve_vshllbq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHLLBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshllbt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshlltq_m_n_u, vshlltq_m_n_s])\n+;;\n+(define_insn \"mve_vshlltq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"immediate_operand\" \"i\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHLLTQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshlltt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshrnbq_m_n_s, vshrnbq_m_n_u])\n+;;\n+(define_insn \"mve_vshrnbq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHRNBQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshrnbt.i%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vshrntq_m_n_s, vshrntq_m_n_u])\n+;;\n+(define_insn \"mve_vshrntq_m_n_<supf><mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSHRNTQ_M_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vshrntt.i%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlsldavaq_p_s])\n+;;\n+(define_insn \"mve_vmlsldavaq_p_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLSLDAVAQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsldavat.s%#<V_sz_elem>\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmlsldavaxq_p_s])\n+;;\n+(define_insn \"mve_vmlsldavaxq_p_s<mode>\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMLSLDAVAXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmlsldavaxt.s%#<V_sz_elem>\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmullbq_poly_m_p])\n+;;\n+(define_insn \"mve_vmullbq_poly_m_p<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_3 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULLBQ_POLY_M_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmullbt.p%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulltq_poly_m_p])\n+;;\n+(define_insn \"mve_vmulltq_poly_m_p<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_3 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_3 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULLTQ_POLY_M_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vmulltt.p%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmullbq_m_n_s])\n+;;\n+(define_insn \"mve_vqdmullbq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMULLBQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmullbt.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmullbq_m_s])\n+;;\n+(define_insn \"mve_vqdmullbq_m_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMULLBQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmullbt.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmulltq_m_n_s])\n+;;\n+(define_insn \"mve_vqdmulltq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMULLTQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmulltt.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqdmulltq_m_s])\n+;;\n+(define_insn \"mve_vqdmulltq_m_s<mode>\"\n+  [\n+   (set (match_operand:<V_double_width> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_double_width> [(match_operand:<V_double_width> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_5 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQDMULLTQ_M_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqdmulltt.s%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrshrunbq_m_n_s])\n+;;\n+(define_insn \"mve_vqrshrunbq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRSHRUNBQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrshrunbt.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqrshruntq_m_n_s])\n+;;\n+(define_insn \"mve_vqrshruntq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQRSHRUNTQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqrshruntt.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshrunbq_m_n_s])\n+;;\n+(define_insn \"mve_vqshrunbq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHRUNBQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqshrunbt.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vqshruntq_m_n_s])\n+;;\n+(define_insn \"mve_vqshruntq_m_n_s<mode>\"\n+  [\n+   (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n+\t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VQSHRUNTQ_M_N_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vqshruntt.s%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlaldavhaq_p_u])\n+;;\n+(define_insn \"mve_vrmlaldavhaq_p_uv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRMLALDAVHAQ_P_U))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlaldavhat.u32\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlaldavhaxq_p_s])\n+;;\n+(define_insn \"mve_vrmlaldavhaxq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRMLALDAVHAXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlaldavhaxt.s32\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlsldavhaq_p_s])\n+;;\n+(define_insn \"mve_vrmlsldavhaq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRMLSLDAVHAQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlsldavhat.s32\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vrmlsldavhaxq_p_s])\n+;;\n+(define_insn \"mve_vrmlsldavhaxq_p_sv4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:V4SI 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:V4SI 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VRMLSLDAVHAXQ_P_S))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vrmlsldavhaxt.s32\\t%Q0, %R0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])"}, {"sha": "650a6b983b840e64d8a515efd0451ba444a5fead", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -1,3 +1,85 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmullbq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqdmulltq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_p_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshllbq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlltq_m_n_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshrntq_m_n_u32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "e9847899dc99eddd8d378af202c2929770132a8e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.s16\"  }  } */"}, {"sha": "e59f1a79a73ff7fd44190bf7d239f952bf2155cc", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.s32\"  }  } */"}, {"sha": "78a3161df4272c5e9e9d19c7ad5254c1d2db78d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p_u16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.u16\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.u16\"  }  } */"}, {"sha": "093fa2e10ae9b4432f76d337fb88c830d26c4b79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaq_p_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavat.u32\"  }  } */"}, {"sha": "ddc03ff94ad4ac488cb0b4cc1ce99adf417cc2c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.s16\"  }  } */"}, {"sha": "e2aa7b3386aaea26a1cb50875ac513d2a4843c34", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.s32\"  }  } */"}, {"sha": "937e6f87219d741afe94dcf97b1316651d41cac8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p_u16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.u16\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint16x8_t b, uint16x8_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.u16\"  }  } */"}, {"sha": "6f650f93929f029540f789c17a082dca0bfe9a8d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlaldavaxq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlaldavaxq_p_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vmlaldavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlaldavaxt.u32\"  }  } */"}, {"sha": "6b7e4b4bedca1728b72d593ac509886b2352d44f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_p_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavat.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavat.s16\"  }  } */"}, {"sha": "82867b1120c33fb3f84d9efeca02f01d958719df", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavat.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavat.s32\"  }  } */"}, {"sha": "8a44364c0a78c1f35ed858bb58b02c150140db4c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_p_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_p_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_p_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaxq_p_s16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavaxt.s16\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int16x8_t b, int16x8_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavaxt.s16\"  }  } */"}, {"sha": "e03085868bc34d1a9908d5b37ee4e62f805b670a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmlsldavaxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmlsldavaxq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaxq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavaxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vmlsldavaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vmlsldavaxt.s32\"  }  } */"}, {"sha": "9128d66e154958d33bc42fd202ff31ae084c8b96", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_m_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_m_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_m_p16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_m_p16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.p16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.p16\"  }  } */"}, {"sha": "32716b69566372d4ebe37ee25b0606ecc0df23de", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmullbq_poly_m_p8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_m_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_m_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmullbq_poly_m_p8.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_m_p8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.p8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmullbq_poly_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmullbt.p8\"  }  } */"}, {"sha": "0ee24e039ff209242ea5c932f8e268ccf8a4c2ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_m_p16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_m_p16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_m_p16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_m_p16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.p16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.p16\"  }  } */"}, {"sha": "2138081653b90c60531b1830c7a55e88ab3d2255", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulltq_poly_m_p8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_m_p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_m_p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulltq_poly_m_p8.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_m_p8 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.p8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, uint8x16_t b, mve_pred16_t p)\n+{\n+  return vmulltq_poly_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmulltt.p8\"  }  } */"}, {"sha": "df6fc10d59a1c557529645e92e54643b404629e8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s16\"  }  } */"}, {"sha": "337b9a9ea77d84bb16b69b4abdd563218b0b52b0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s32\"  }  } */"}, {"sha": "b9054a0af8d7cc5a1c7479ca16de5edb4e30f91e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s16\"  }  } */"}, {"sha": "65d14fa0a2764cdc4dcfd0663203861adde4277b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmullbq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmullbq_m_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmullbq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmullbt.s32\"  }  } */"}, {"sha": "dee11f9c8db4112138cef9d24fb7850a8a023d6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m_n_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, int16_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s16\"  }  } */"}, {"sha": "abba2b6375fd831d87332e6bd9b0b5206a151fd7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m_n_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t inactive, int32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s32\"  }  } */"}, {"sha": "45ee4a719e03cb2200e92af54dabf2230c730449", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_m_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m_s16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s16\"  }  } */"}, {"sha": "692fcf459e21ca1862b52fb8a0d08f7926bb741f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqdmulltq_m_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqdmulltq_m_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m_s32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s32\"  }  } */\n+\n+int64x2_t\n+foo1 (int64x2_t inactive, int32x4_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqdmulltq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqdmulltt.s32\"  }  } */"}, {"sha": "fca9f97b86e010222dff2f7f13afb532942b61e9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.s16\"  }  } */"}, {"sha": "f3b3eba715af1c106e097e3c50b7010441cc8141", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.s32\"  }  } */"}, {"sha": "1a64f8e1212b2cc2f8cf3a8f263ef069a018c518", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.u16\"  }  } */"}, {"sha": "395677558caafb994186379814a845be593a381a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrnbq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrnbq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m_n_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrnbt.u32\"  }  } */"}, {"sha": "be887661673a6f9d0a3e353606e7461b315db4f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.s16\"  }  } */"}, {"sha": "d17caaea1899d2e13f16fc7d6e539fdf550dec4e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.s32\"  }  } */"}, {"sha": "76328bcf3f93702b4dd429e8cf0a98e5d0c03b6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.u16\"  }  } */"}, {"sha": "175fd6a4bb3b270e7f4de5229e7975bedec16ef3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrntq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrntq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m_n_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrntt.u32\"  }  } */"}, {"sha": "dfad144d2214fc40af6dff320e7551d544b7b9f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrunbq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrunbt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshrunbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrunbt.s16\"  }  } */"}, {"sha": "4fdd2962d9a12937e363cc56623afce91ef16ee8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshrunbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshrunbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrunbq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrunbt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshrunbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshrunbt.s32\"  }  } */"}, {"sha": "ad01c2f34e9bc0ab040e9674aafe3efa4096e2a1", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshruntq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshruntt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqrshruntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshruntt.s16\"  }  } */"}, {"sha": "a4d10ef276e5ab66e87a75e26339a3a82877c210", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqrshruntq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqrshruntq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshruntq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshruntt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqrshruntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqrshruntt.s32\"  }  } */"}, {"sha": "94c369e3d7f372db7e002bea1218417e947dcdb5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m_n_s16 (a, b, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m (a, b, 7, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.s16\"  }  } */"}, {"sha": "33cc442b96ae105a6f13216e2fcfe74ab53fc91c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m_n_s32 (a, b, 11, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m (a, b, 11, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.s32\"  }  } */"}, {"sha": "49ce2de324c056eef99621a22e0c5c3df5ff0171", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.u16\"  }  } */"}, {"sha": "56bc3fa5490efef23a201d34a7fe82962728c299", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrnbq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrnbq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m_n_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrnbt.u32\"  }  } */"}, {"sha": "b746c16c374d889c9e6e76cdebfe2546afaa4922", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.s16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.s16\"  }  } */"}, {"sha": "9132ac1e84a9ecebc412330a44040241cd78c788", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.s32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.s32\"  }  } */"}, {"sha": "3124c835d4fe9edec28cabbccf7d8bcb018655b7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.u16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.u16\"  }  } */"}, {"sha": "ebef349546c849396610702616b4c682e9d6bf94", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrntq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrntq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m_n_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.u32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrntt.u32\"  }  } */"}, {"sha": "f4fdc0c2bb437bd0b798d78342b27d7088d30f7b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrunbq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrunbt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshrunbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrunbt.s16\"  }  } */"}, {"sha": "d6a0eb5409e2825b6748204459e440f33c97afc6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshrunbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshrunbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrunbq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrunbt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshrunbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshrunbt.s32\"  }  } */"}, {"sha": "47b3c9a43aa2d172ed678172d8cb1df08562ec0b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshruntq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshruntt.s16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vqshruntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshruntt.s16\"  }  } */"}, {"sha": "7697660e2c1dcd36fd405242834c552990281c8f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vqshruntq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvqshruntq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshruntq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshruntt.s32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vqshruntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vqshruntt.s32\"  }  } */"}, {"sha": "5dbd263f265d7e3466c7d47ef303c934a4fa16bb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlaldavhaq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhat.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlaldavhaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhat.s32\"  }  } */"}, {"sha": "02fd762619c24fb809b3bbcdafdcaf6c1b33b651", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhaq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaq_p_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlaldavhaq_p_u32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhat.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint64_t a, uint32x4_t b, uint32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlaldavhaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhat.u32\"  }  } */"}, {"sha": "45ae3943de28e9410f73031afa47ce9738937258", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlaldavhaxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlaldavhaxq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlaldavhaxq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhaxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlaldavhaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlaldavhaxt.s32\"  }  } */"}, {"sha": "d32aa69c72bdbd4fbb81ede68bf60a754a51b532", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhaq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlsldavhaq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhat.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlsldavhaq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhat.s32\"  }  } */"}, {"sha": "2b629f96be3624ae2a9f4a0453d1e4b7822d9a6f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrmlsldavhaxq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaxq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaxq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrmlsldavhaxq_p_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlsldavhaxq_p_s32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhaxt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int64_t a, int32x4_t b, int32x4_t c, mve_pred16_t p)\n+{\n+  return vrmlsldavhaxq_p (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vrmlsldavhaxt.s32\"  }  } */"}, {"sha": "b3bb8b00bf235d6a314e92627ef71e6fd95cebbd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i16\"  }  } */"}, {"sha": "375be7ae795b64d773f91d97250800248c26c20a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i32\"  }  } */"}, {"sha": "73a1f61e0fe9c9da66ef304a54f4522ea380912d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i16\"  }  } */"}, {"sha": "30d412504e130b2ce90901453bdc83e0ae37c1ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrnbq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrnbq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m_n_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrnbq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrnbt.i32\"  }  } */"}, {"sha": "29c76ad838b665c692956c7819a4562dcbacf9b2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m_n_s16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i16\"  }  } */"}, {"sha": "ae490fddf5e5705c1587616d3db201ebff4c1dcb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m_n_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i32\"  }  } */"}, {"sha": "5163f52f2f5616b8cab2c15b14ba0e5abc1d5935", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m_n_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i16\"  }  } */"}, {"sha": "bba6543b9939b66e30fd7db5885b37b3a61ece87", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrshrntq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrshrntq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m_n_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vrshrntq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vrshrntt.i32\"  }  } */"}, {"sha": "adf52c398dcd47983d728f94beee1a3d3d079b3f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m_n_s16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.s16\"  }  } */"}, {"sha": "6ae43ff8380158b5eac9033741674191853c7402", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_s8.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m_n_s8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.s8\"  }  } */"}, {"sha": "b643afbbba7aadc9d5fbe4ea22a026051f71052a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m_n_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.u16\"  }  } */"}, {"sha": "79648c48b6caa3427d6e0e2fc960181bcf4373ce", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshllbq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshllbq_m_n_u8.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m_n_u8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshllbq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshllbt.u8\"  }  } */"}, {"sha": "7f0b0dcbcd50ce62d0f77295d4b2e0a51e005064", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m_n_s16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.s16\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, int16x8_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.s16\"  }  } */"}, {"sha": "cfea61d6949347c4d23bc0349fc00b57e659ab77", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_m_n_s8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_s8.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m_n_s8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.s8\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, int8x16_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.s8\"  }  } */"}, {"sha": "cc3b7b44faeec6ff8a12c3c0a16c56fa2c614050", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m_n_u16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.u16\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, uint16x8_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.u16\"  }  } */"}, {"sha": "857d954729aa47c7198f4267d261a9b4458aaf88", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlltq_m_n_u8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlltq_m_n_u8.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m_n_u8 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.u8\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, uint8x16_t a, mve_pred16_t p)\n+{\n+  return vshlltq_m (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlltt.u8\"  }  } */"}, {"sha": "e2d86a6264506bdeaa14d9f6ef00b993bc0bac20", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m_n_s16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i16\"  }  } */"}, {"sha": "d13b28dd35b40ee87807a77575cbc3d4bb1eb609", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m_n_s32 (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i32\"  }  } */"}, {"sha": "d008bd6a833a6d6d26c831b5972d38660b1bf668", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m_n_u16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i16\"  }  } */"}, {"sha": "daad5493e6aa62c4b97b461b6a2173e6ec42c80c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrnbq_m_n_u32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrnbq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m_n_u32 (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vshrnbq_m (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrnbt.i32\"  }  } */"}, {"sha": "86dbb1e2f076b802566180d26ba7f5ec7b2f5cb0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_m_n_s16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_s16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m_n_s16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i16\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int16x8_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i16\"  }  } */"}, {"sha": "df4d5aaf5c8380491cc2901d6c6c99789d280b23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_m_n_s32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_s32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m_n_s32 (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i32\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int32x4_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i32\"  }  } */"}, {"sha": "4d2111fd735dca031ed877b911ce37fe05fa5252", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_m_n_u16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_u16.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m_n_u16 (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i16\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint16x8_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m (a, b, 8, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i16\"  }  } */"}, {"sha": "6c3eda56a17f034f362eb5b7302a8fac5312d2c5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshrntq_m_n_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2170a379b0fcd79191b5363cddaf0cbc508fd2b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshrntq_m_n_u32.c?ref=f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile  } */\n+/* { dg-additional-options \"-march=armv8.1-m.main+mve -mfloat-abi=hard -O2\"  }  */\n+/* { dg-skip-if \"Skip if not auto\" {*-*-*} {\"-mfpu=*\"} {\"-mfpu=auto\"} } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m_n_u32 (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i32\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32x4_t b, mve_pred16_t p)\n+{\n+  return vshrntq_m (a, b, 16, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshrntt.i32\"  }  } */"}]}