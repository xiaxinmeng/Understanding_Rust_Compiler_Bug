{"sha": "4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyZDkzZGJmYWFlNWVjNWE4NmQ5MDNjYzEzODNjMjU1OGMwMTU2ZQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "francois.cppdevs@free.fr", "date": "2011-06-29T20:11:50Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-06-29T20:11:50Z"}, "message": "set.h, [...]: Remove base class default constructor calls.\n\n2011-06-29  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n\t* include/debug/set.h, unordered_map, multiset.h, forward_list,\n\tunordered_set, vector, deque, string, list, multimap.h: Remove base\n\tclass default constructor calls.\n\t* include/debug/map.h: Likewise and cleanup several redefinition of\n\tbase iterator typedef.\n\nFrom-SVN: r175665", "tree": {"sha": "f5936d88794627a9de34beca288056058a9a9241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5936d88794627a9de34beca288056058a9a9241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/comments", "author": null, "committer": null, "parents": [{"sha": "5c0d88e64ad5180036145f1de53783fae391bcc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c0d88e64ad5180036145f1de53783fae391bcc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c0d88e64ad5180036145f1de53783fae391bcc6"}], "stats": {"total": 130, "additions": 62, "deletions": 68}, "files": [{"sha": "cd0b29340083322b1aad7af68e9cfd1f9ef6bf4c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -1,3 +1,11 @@\n+2011-06-29  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n+\n+\t* include/debug/set.h, unordered_map, multiset.h, forward_list,\n+\tunordered_set, vector, deque, string, list, multimap.h: Remove\n+\tbase class default constructor calls.\n+\t* include/debug/map.h: Likewise and cleanup several redefinition of\n+\tbase iterator typedef.\n+\n 2011-06-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* libsupc++/eh_arm.c (__cxa_type_match): Construct address of"}, {"sha": "08c1cdfd0b4e43fba88f353cf8f2df12d06cbaa7", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -45,7 +45,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<deque<_Tp, _Allocator> >\n     {\n       typedef  _GLIBCXX_STD_C::deque<_Tp, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<deque> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n@@ -98,19 +97,19 @@ namespace __debug\n         { }\n \n       deque(const deque& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       deque(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       deque(deque&& __x)\n-      : _Base(std::move(__x)), _Safe_base()\n+      : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n \n       deque(initializer_list<value_type> __l,\n \t    const allocator_type& __a = allocator_type())\n-      : _Base(__l, __a), _Safe_base() { }\n+      : _Base(__l, __a) { }\n #endif\n \n       ~deque() _GLIBCXX_NOEXCEPT { }"}, {"sha": "b74b38a02bc22f06451574ed51b9628925ecd255", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -46,7 +46,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<forward_list<_Tp, _Alloc> >\n     {\n       typedef _GLIBCXX_STD_C::forward_list<_Tp, _Alloc> _Base;\n-      typedef __gnu_debug::_Safe_sequence<forward_list> _Safe_base;\n \n       typedef typename _Base::iterator       _Base_iterator;\n       typedef typename _Base::const_iterator _Base_const_iterator;"}, {"sha": "3931a3d3b683e280db177b6cc8ed84d64f6dc2ec", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -45,7 +45,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<list<_Tp, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_C::list<_Tp, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<list>  _Safe_base;\n \n       typedef typename _Base::iterator       _Base_iterator;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n@@ -100,19 +99,19 @@ namespace __debug\n \n \n       list(const list& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       list(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       list(list&& __x) noexcept\n-      : _Base(std::move(__x)), _Safe_base()\n+      : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n \n       list(initializer_list<value_type> __l,\n            const allocator_type& __a = allocator_type())\n-        : _Base(__l, __a), _Safe_base() { }\n+        : _Base(__l, __a) { }\n #endif\n \n       ~list() _GLIBCXX_NOEXCEPT { }\n@@ -395,7 +394,7 @@ namespace __debug\n       insert(iterator __p, initializer_list<value_type> __l)\n       {\n \t__glibcxx_check_insert(__p);\n-\t_Base::insert(__p, __l);\n+\t_Base::insert(__p.base(), __l);\n       }\n #endif\n "}, {"sha": "e80c1e3b4b7a2af27492d6778b219329d86a64a4", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -46,7 +46,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<map<_Key, _Tp, _Compare, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_C::map<_Key, _Tp, _Compare, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<map> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n@@ -61,9 +60,9 @@ namespace __debug\n       typedef typename _Base::reference             reference;\n       typedef typename _Base::const_reference       const_reference;\n \n-      typedef __gnu_debug::_Safe_iterator<typename _Base::iterator, map>\n+      typedef __gnu_debug::_Safe_iterator<_Base_iterator, map>\n                                                     iterator;\n-      typedef __gnu_debug::_Safe_iterator<typename _Base::const_iterator, map>\n+      typedef __gnu_debug::_Safe_iterator<_Base_const_iterator, map>\n                                                     const_iterator;\n \n       typedef typename _Base::size_type             size_type;\n@@ -85,24 +84,24 @@ namespace __debug\n \t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n \t\t\t\t\t\t\t\t     __last)),\n \t\t__gnu_debug::__base(__last),\n-\t\t__comp, __a), _Safe_base() { }\n+\t\t__comp, __a) { }\n \n       map(const map& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       map(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       map(map&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x)), _Safe_base()\n+      : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n \n       map(initializer_list<value_type> __l,\n \t  const _Compare& __c = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n-      : _Base(__l, __c, __a), _Safe_base() { }\n+      : _Base(__l, __c, __a) { }\n #endif\n \n       ~map() _GLIBCXX_NOEXCEPT { }\n@@ -206,7 +205,6 @@ namespace __debug\n       std::pair<iterator, bool>\n       insert(const value_type& __x)\n       {\n-\ttypedef typename _Base::iterator _Base_iterator;\n \tstd::pair<_Base_iterator, bool> __res = _Base::insert(__x);\n \treturn std::pair<iterator, bool>(iterator(__res.first, this),\n \t\t\t\t\t __res.second);\n@@ -219,7 +217,6 @@ namespace __debug\n         std::pair<iterator, bool>\n         insert(_Pair&& __x)\n         {\n-\t  typedef typename _Base::iterator _Base_iterator;\n \t  std::pair<_Base_iterator, bool> __res\n \t    = _Base::insert(std::forward<_Pair>(__x));\n \t  return std::pair<iterator, bool>(iterator(__res.first, this),\n@@ -384,7 +381,6 @@ namespace __debug\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n-\ttypedef typename _Base::iterator _Base_iterator;\n \tstd::pair<_Base_iterator, _Base_iterator> __res =\n \t_Base::equal_range(__x);\n \treturn std::make_pair(iterator(__res.first, this),\n@@ -394,7 +390,6 @@ namespace __debug\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n-\ttypedef typename _Base::const_iterator _Base_const_iterator;\n \tstd::pair<_Base_const_iterator, _Base_const_iterator> __res =\n \t_Base::equal_range(__x);\n \treturn std::make_pair(const_iterator(__res.first, this),\n@@ -411,7 +406,6 @@ namespace __debug\n       void\n       _M_invalidate_all()\n       {\n-\ttypedef typename _Base::const_iterator _Base_const_iterator;\n \ttypedef __gnu_debug::_Not_equal_to<_Base_const_iterator> _Not_equal;\n \tthis->_M_invalidate_if(_Not_equal(_M_base().end()));\n       }"}, {"sha": "cf18d7cc1140e6d1d7af8037907c1b45a81aa6f9", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -47,7 +47,6 @@ namespace __debug\n \t\t\t\t\t\t  _Compare, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_C::multimap<_Key, _Tp, _Compare, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<multimap> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n@@ -89,21 +88,21 @@ namespace __debug\n \t      __comp, __a) { }\n \n       multimap(const multimap& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       multimap(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multimap(multimap&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x)), _Safe_base()\n+      : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n \n       multimap(initializer_list<value_type> __l,\n \t       const _Compare& __c = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n-      : _Base(__l, __c, __a), _Safe_base() { }\n+      : _Base(__l, __c, __a) { }\n #endif\n \n       ~multimap() _GLIBCXX_NOEXCEPT { }"}, {"sha": "9f510000d4d98ad3589b44df6ebd902e644ce905", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -46,7 +46,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<multiset<_Key, _Compare, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_C::multiset<_Key, _Compare, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<multiset> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n@@ -88,21 +87,21 @@ namespace __debug\n \t\t__comp, __a) { }\n \n       multiset(const multiset& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       multiset(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       multiset(multiset&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x)), _Safe_base()\n+      : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n \n       multiset(initializer_list<value_type> __l,\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n-      : _Base(__l, __comp, __a), _Safe_base() { }\n+      : _Base(__l, __comp, __a) { }\n #endif\n \n       ~multiset() _GLIBCXX_NOEXCEPT { }"}, {"sha": "9846ec865f95643d95fc46e6d5ee0d5222d2643d", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -46,7 +46,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<set<_Key, _Compare, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_C::set<_Key, _Compare, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<set> _Safe_base;\n \n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n@@ -88,21 +87,21 @@ namespace __debug\n \t\t__comp, __a) { }\n \n       set(const set& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       set(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       set(set&& __x)\n       noexcept(is_nothrow_copy_constructible<_Compare>::value)\n-      : _Base(std::move(__x)), _Safe_base()\n+      : _Base(std::move(__x))\n       { this->_M_swap(__x); }\n \n       set(initializer_list<value_type> __l,\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n-      : _Base(__l, __comp, __a), _Safe_base() { }\n+      : _Base(__l, __comp, __a) { }\n #endif\n \n       ~set() _GLIBCXX_NOEXCEPT { }\n@@ -206,7 +205,6 @@ namespace __debug\n       std::pair<iterator, bool>\n       insert(value_type&& __x)\n       {\n-\ttypedef typename _Base::iterator _Base_iterator;\n \tstd::pair<_Base_iterator, bool> __res\n \t  = _Base::insert(std::move(__x));\n \treturn std::pair<iterator, bool>(iterator(__res.first, this),"}, {"sha": "7856b240b866c82379424d733754c4b486f2ed87", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -75,12 +75,12 @@ namespace __gnu_debug\n     { }\n \n     // Provides conversion from a release-mode string to a debug-mode string\n-    basic_string(const _Base& __base) : _Base(__base), _Safe_base() { }\n+    basic_string(const _Base& __base) : _Base(__base) { }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS\n     // 42. string ctors specify wrong default allocator\n     basic_string(const basic_string& __str)\n-    : _Base(__str, 0, _Base::npos, __str.get_allocator()), _Safe_base()\n+    : _Base(__str, 0, _Base::npos, __str.get_allocator())\n     { }\n \n     // _GLIBCXX_RESOLVE_LIB_DEFECTS"}, {"sha": "4f087b75992d0d649eb78ee99645389d5bb527ce", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -89,25 +89,25 @@ namespace __debug\n \t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n \t\t\t\t\t\t\t\t     __last)),\n \t\t__gnu_debug::__base(__last), __n,\n-\t\t__hf, __eql, __a), _Safe_base() { }\n+\t\t__hf, __eql, __a) { }\n \n       unordered_map(const unordered_map& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_map(const _Base& __x)\n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_map(unordered_map&& __x)\n       noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n \t              is_nothrow_copy_constructible<_Pred>>::value)\n-      : _Base(std::move(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_map(initializer_list<value_type> __l,\n \t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n-      : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n+      : _Base(__l, __n, __hf, __eql, __a) { }\n \n       ~unordered_map() noexcept { }\n \n@@ -381,25 +381,25 @@ namespace __debug\n \t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n \t\t\t\t\t\t\t\t     __last)),\n \t\t__gnu_debug::__base(__last), __n,\n-\t\t__hf, __eql, __a), _Safe_base() { }\n+\t\t__hf, __eql, __a) { }\n \n       unordered_multimap(const unordered_multimap& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_multimap(const _Base& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_multimap(unordered_multimap&& __x)\n       noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n \t              is_nothrow_copy_constructible<_Pred>>::value)\n-      : _Base(std::move(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_multimap(initializer_list<value_type> __l,\n \t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n-      : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n+      : _Base(__l, __n, __hf, __eql, __a) { }\n \n       ~unordered_multimap() noexcept { }\n "}, {"sha": "c0b245d95a0f5aa7e39b90f4875e4e93b790996b", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -89,25 +89,25 @@ namespace __debug\n \t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n \t\t\t\t\t\t\t\t     __last)),\n \t\t__gnu_debug::__base(__last), __n,\n-\t\t__hf, __eql, __a), _Safe_base() { }\n+\t\t__hf, __eql, __a) { }\n \n       unordered_set(const unordered_set& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_set(const _Base& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_set(unordered_set&& __x)\n       noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n \t              is_nothrow_copy_constructible<_Pred>>::value)\n-      : _Base(std::move(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_set(initializer_list<value_type> __l,\n \t\t    size_type __n = 0,\n \t\t    const hasher& __hf = hasher(),\n \t\t    const key_equal& __eql = key_equal(),\n \t\t    const allocator_type& __a = allocator_type())\n-      : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n+      : _Base(__l, __n, __hf, __eql, __a) { }\n \n       ~unordered_set() noexcept { }\n \n@@ -370,25 +370,25 @@ namespace __debug\n \t: _Base(__gnu_debug::__base(__gnu_debug::__check_valid_range(__first,\n \t\t\t\t\t\t\t\t     __last)),\n \t\t__gnu_debug::__base(__last), __n,\n-\t\t__hf, __eql, __a), _Safe_base() { }\n+\t\t__hf, __eql, __a) { }\n \n       unordered_multiset(const unordered_multiset& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_multiset(const _Base& __x) \n-      : _Base(__x), _Safe_base() { }\n+      : _Base(__x) { }\n \n       unordered_multiset(unordered_multiset&& __x)\n       noexcept(__and_<is_nothrow_copy_constructible<_Hash>,\n \t              is_nothrow_copy_constructible<_Pred>>::value)\n-      : _Base(std::move(__x)), _Safe_base() { }\n+      : _Base(std::move(__x)) { }\n \n       unordered_multiset(initializer_list<value_type> __l,\n \t\t\t size_type __n = 0,\n \t\t\t const hasher& __hf = hasher(),\n \t\t\t const key_equal& __eql = key_equal(),\n \t\t\t const allocator_type& __a = allocator_type())\n-      : _Base(__l, __n, __hf, __eql, __a), _Safe_base() { }\n+      : _Base(__l, __n, __hf, __eql, __a) { }\n \n       ~unordered_multiset() noexcept { }\n "}, {"sha": "9d68d007c121ca1c461198301a5ab52f0706fd60", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2d93dbfaae5ec5a86d903cc1383c2558c0156e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=4c2d93dbfaae5ec5a86d903cc1383c2558c0156e", "patch": "@@ -47,7 +47,6 @@ namespace __debug\n       public __gnu_debug::_Safe_sequence<vector<_Tp, _Allocator> >\n     {\n       typedef _GLIBCXX_STD_C::vector<_Tp, _Allocator> _Base;\n-      typedef __gnu_debug::_Safe_sequence<vector>              _Safe_base;\n \n       typedef typename _Base::iterator _Base_iterator;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n@@ -102,15 +101,15 @@ namespace __debug\n         { _M_update_guaranteed_capacity(); }\n \n       vector(const vector& __x)\n-      : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n+      : _Base(__x), _M_guaranteed_capacity(__x.size()) { }\n \n       /// Construction from a release-mode vector\n       vector(const _Base& __x)\n-      : _Base(__x), _Safe_base(), _M_guaranteed_capacity(__x.size()) { }\n+      : _Base(__x), _M_guaranteed_capacity(__x.size()) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       vector(vector&& __x) noexcept\n-      : _Base(std::move(__x)), _Safe_base(),\n+      : _Base(std::move(__x)),\n \t_M_guaranteed_capacity(this->size())\n       {\n \tthis->_M_swap(__x);\n@@ -119,7 +118,7 @@ namespace __debug\n \n       vector(initializer_list<value_type> __l,\n \t     const allocator_type& __a = allocator_type())\n-      : _Base(__l, __a), _Safe_base(),\n+      : _Base(__l, __a),\n \t_M_guaranteed_capacity(__l.size()) { }\n #endif\n "}]}