{"sha": "37b8524ce81b644bb78238c3e14327a0eaae1a5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiODUyNGNlODFiNjQ0YmI3ODIzOGMzZTE0MzI3YTBlYWFlMWE1Yg==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-03-02T01:11:50Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-03-02T01:11:50Z"}, "message": "cpplib.c (_cpp_init_stacks): Cast enum for comparison.\n\n\t* cpplib.c (_cpp_init_stacks): Cast enum for comparison.\n\t* cppexp.c (lex): Cast enums for comparison.\n\t* cppinit.c (parse_option): Cast enum for comparison.\n\t* cpplex.c (cpp_spell_token): Cast enums to int for minus.\n\t(cpp_output_token): Likewise.\n\t(cpp_can_paste): Cast enums for comparsion and plus/minus.\n\t(cpp_avoid_paste): Cast enums for minus and comparison.\n\nFrom-SVN: r40174", "tree": {"sha": "da9ac0ba27ed4ebd50b3f9958d9ae1f81ef897f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da9ac0ba27ed4ebd50b3f9958d9ae1f81ef897f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b8524ce81b644bb78238c3e14327a0eaae1a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b8524ce81b644bb78238c3e14327a0eaae1a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b8524ce81b644bb78238c3e14327a0eaae1a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b8524ce81b644bb78238c3e14327a0eaae1a5b/comments", "author": null, "committer": null, "parents": [{"sha": "f71434274cd0439bde0dbdfd1fc53e2f24dee485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71434274cd0439bde0dbdfd1fc53e2f24dee485", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71434274cd0439bde0dbdfd1fc53e2f24dee485"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "3b5ad656bcc9debe3fe94ab4e63d31b41e0b2efb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b8524ce81b644bb78238c3e14327a0eaae1a5b", "patch": "@@ -1,3 +1,13 @@\n+2001-03-01  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* cpplib.c (_cpp_init_stacks): Cast enum for comparison.\n+\t* cppexp.c (lex): Cast enums for comparison.\n+\t* cppinit.c (parse_option): Cast enum for comparison.\n+\t* cpplex.c (cpp_spell_token): Cast enums to int for minus.\n+\t(cpp_output_token): Likewise.\n+\t(cpp_can_paste): Cast enums for comparsion and plus/minus.\n+\t(cpp_avoid_paste): Cast enums for minus and comparison.\n+\n 2001-03-01  Zack Weinberg  <zackw@stanford.edu>\n \n \t* gcc.c, objc/lang-specs.h: Add zero initializer for cpp_spec"}, {"sha": "6ce693e48cccfc3ae0fd0042578eae427082870d", "filename": "gcc/cppexp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=37b8524ce81b644bb78238c3e14327a0eaae1a5b", "patch": "@@ -477,7 +477,8 @@ lex (pfile, skip_evaluation, token)\n       /* Fall through.  */\n \n     default:\n-      if ((token->type > CPP_EQ && token->type < CPP_PLUS_EQ)\n+      if (((int) token->type > (int) CPP_EQ\n+\t   && (int) token->type < (int) CPP_PLUS_EQ)\n \t  || token->type == CPP_EOF)\n \t{\n \t  op.op = token->type;"}, {"sha": "2b2e1998420e6b6c05417b7725312b450fd4581d", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=37b8524ce81b644bb78238c3e14327a0eaae1a5b", "patch": "@@ -1191,7 +1191,7 @@ parse_option (input)\n \t\t Otherwise, return the longest option-accepting match.\n \t\t This loops no more than twice with current options.  */\n \t      mx = md;\n-\t      for (; mn < N_OPTS; mn++)\n+\t      for (; mn < (unsigned int) N_OPTS; mn++)\n \t\t{\n \t\t  opt_len = cl_options[mn].opt_len;\n \t\t  if (memcmp (input, cl_options[mn].opt_text, opt_len))"}, {"sha": "1d98b056a635838cc3243d7a5d347e66a38e68b0", "filename": "gcc/cpplex.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=37b8524ce81b644bb78238c3e14327a0eaae1a5b", "patch": "@@ -1321,7 +1321,8 @@ cpp_spell_token (pfile, token, buffer)\n \tunsigned char c;\n \n \tif (token->flags & DIGRAPH)\n-\t  spelling = digraph_spellings[token->type - CPP_FIRST_DIGRAPH];\n+\t  spelling\n+\t    = digraph_spellings[(int) token->type - (int) CPP_FIRST_DIGRAPH];\n \telse if (token->flags & NAMED_OP)\n \t  goto spell_ident;\n \telse\n@@ -1413,7 +1414,8 @@ cpp_output_token (token, fp)\n \tconst unsigned char *spelling;\n \n \tif (token->flags & DIGRAPH)\n-\t  spelling = digraph_spellings[token->type - CPP_FIRST_DIGRAPH];\n+\t  spelling\n+\t    = digraph_spellings[(int) token->type - (int) CPP_FIRST_DIGRAPH];\n \telse if (token->flags & NAMED_OP)\n \t  goto spell_ident;\n \telse\n@@ -1523,8 +1525,8 @@ cpp_can_paste (pfile, token1, token2, digraph)\n   if (token2->flags & NAMED_OP)\n     b = CPP_NAME;\n \n-  if (a <= CPP_LAST_EQ && b == CPP_EQ)\n-    return a + (CPP_EQ_EQ - CPP_EQ);\n+  if ((int) a <= (int) CPP_LAST_EQ && b == CPP_EQ)\n+    return (enum cpp_ttype) ((int) a + ((int) CPP_EQ_EQ - (int) CPP_EQ));\n \n   switch (a)\n     {\n@@ -1637,12 +1639,12 @@ cpp_avoid_paste (pfile, token1, token2)\n \n   c = EOF;\n   if (token2->flags & DIGRAPH)\n-    c = digraph_spellings[b - CPP_FIRST_DIGRAPH][0];\n+    c = digraph_spellings[(int) b - (int) CPP_FIRST_DIGRAPH][0];\n   else if (token_spellings[b].category == SPELL_OPERATOR)\n     c = token_spellings[b].name[0];\n \n   /* Quickly get everything that can paste with an '='.  */\n-  if (a <= CPP_LAST_EQ && c == '=')\n+  if ((int) a <= (int) CPP_LAST_EQ && c == '=')\n     return 1;\n \n   switch (a)"}, {"sha": "07f8fad728ba6e4658abf9494fa0538a23e69889", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b8524ce81b644bb78238c3e14327a0eaae1a5b/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=37b8524ce81b644bb78238c3e14327a0eaae1a5b", "patch": "@@ -1879,7 +1879,7 @@ _cpp_init_stacks (pfile)\n   obstack_init (pfile->buffer_ob);\n \n   /* Register the directives.  */\n-  for (i = 0; i < N_DIRECTIVES; i++)\n+  for (i = 0; i < (unsigned int) N_DIRECTIVES; i++)\n     {\n       node = cpp_lookup (pfile, dtable[i].name, dtable[i].length);\n       node->directive_index = i + 1;"}]}