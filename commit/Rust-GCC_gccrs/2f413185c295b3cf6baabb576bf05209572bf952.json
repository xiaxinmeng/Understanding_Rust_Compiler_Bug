{"sha": "2f413185c295b3cf6baabb576bf05209572bf952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0MTMxODVjMjk1YjNjZjZiYWFiYjU3NmJmMDUyMDk1NzJiZjk1Mg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-11-13T10:01:33Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-11-13T10:01:33Z"}, "message": "[multiple changes]\n\n2010-10-30  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c/20385\n\t* c-parser.c (c_parser_next_token_starts_declaration): Rename to...\n\t(c_parser_next_tokens_start_declaration): ... this.  Handle 2nd\n\ttoken lookahead.\n\t(c_parser_compound_statement_nostart, c_parser_label,\n\tc_parser_for_statement, c_parser_omp_for_loop): Adjust calls.\n\t(c_parser_declaration_or_fndef): Detect the case now matched by\n\tc_parser_next_tokens_start_declaration, give error and correct it.\n\ntestsuite:\n2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c/20385\n\t* gcc.dg/decl-9.c: New.\n\nFrom-SVN: r166700", "tree": {"sha": "4fb6150727f97abf234833db07b615d4efb0a5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb6150727f97abf234833db07b615d4efb0a5f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f413185c295b3cf6baabb576bf05209572bf952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f413185c295b3cf6baabb576bf05209572bf952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f413185c295b3cf6baabb576bf05209572bf952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f413185c295b3cf6baabb576bf05209572bf952/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e5b21156632fd14bfaeea24919c614e56645989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5b21156632fd14bfaeea24919c614e56645989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5b21156632fd14bfaeea24919c614e56645989"}], "stats": {"total": 98, "additions": 89, "deletions": 9}, "files": [{"sha": "4a036dc3290e664cdbc8c9c7aa70e41dbb15b888", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f413185c295b3cf6baabb576bf05209572bf952", "patch": "@@ -1,3 +1,14 @@\n+2010-10-30  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c/20385\n+\t* c-parser.c (c_parser_next_token_starts_declaration): Rename to...\n+\t(c_parser_next_tokens_start_declaration): ... this.  Handle 2nd\n+\ttoken lookahead.\n+\t(c_parser_compound_statement_nostart, c_parser_label,\n+\tc_parser_for_statement, c_parser_omp_for_loop): Adjust calls.\n+\t(c_parser_declaration_or_fndef): Detect the case now matched by\n+\tc_parser_next_tokens_start_declaration, give error and correct it.\n+\n 2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-tree.h (enum c_typespec_kind): Add ctsk_none."}, {"sha": "e5ec2d9b38838098e7adcf4f6dd8f5f4f212ef1f", "filename": "gcc/c-parser.c", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=2f413185c295b3cf6baabb576bf05209572bf952", "patch": "@@ -614,10 +614,10 @@ c_parser_next_token_starts_declspecs (c_parser *parser)\n   return c_token_starts_declspecs (token);\n }\n \n-/* Return true if the next token from PARSER can start declaration\n+/* Return true if the next tokens from PARSER can start declaration\n    specifiers or a static assertion, false otherwise.  */\n static inline bool\n-c_parser_next_token_starts_declaration (c_parser *parser)\n+c_parser_next_tokens_start_declaration (c_parser *parser)\n {\n   c_token *token = c_parser_peek_token (parser);\n \n@@ -628,7 +628,23 @@ c_parser_next_token_starts_declaration (c_parser *parser)\n       && c_parser_peek_2nd_token (parser)->type == CPP_DOT)\n     return false;\n \n-  return c_token_starts_declaration (token);\n+  /* Labels do not start declarations.  */\n+  if (token->type == CPP_NAME\n+      && c_parser_peek_2nd_token (parser)->type == CPP_COLON)\n+    return false;\n+\n+  if (c_token_starts_declaration (token))\n+    return true;\n+\n+  /* Try a bit harder to detect an unknown typename.  */\n+  if (token->type == CPP_NAME\n+      && token->id_kind == C_ID_ID\n+      && (c_parser_peek_2nd_token (parser)->type == CPP_NAME\n+          || c_parser_peek_2nd_token (parser)->type == CPP_MULT)\n+      && !lookup_name (token->value))\n+    return true;\n+\n+  return false;\n }\n \n /* Return a pointer to the next-but-one token from PARSER, reading it\n@@ -1345,6 +1361,24 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n       return;\n     }\n   specs = build_null_declspecs ();\n+\n+  /* Try to detect an unknown type name when we have \"A B\" or \"A *B\".  */\n+  if (c_parser_peek_token (parser)->type == CPP_NAME\n+      && c_parser_peek_token (parser)->id_kind == C_ID_ID\n+      && (c_parser_peek_2nd_token (parser)->type == CPP_NAME\n+          || c_parser_peek_2nd_token (parser)->type == CPP_MULT)\n+      && (!nested || !lookup_name (c_parser_peek_token (parser)->value)))\n+    {\n+      error_at (here, \"unknown type name %qE\",\n+                c_parser_peek_token (parser)->value);\n+\n+      /* Parse declspecs normally to get a correct pointer type, but avoid\n+         a further \"fails to be a type name\" error.  */\n+      c_parser_peek_token (parser)->type = CPP_KEYWORD;\n+      c_parser_peek_token (parser)->keyword = RID_VOID;\n+      c_parser_peek_token (parser)->value = error_mark_node;\n+    }\n+\n   c_parser_declspecs (parser, specs, true, true, start_attr_ok);\n   if (parser->error)\n     {\n@@ -3868,7 +3902,7 @@ c_parser_compound_statement_nostart (c_parser *parser)\n \t  c_parser_label (parser);\n \t}\n       else if (!last_label\n-\t       && c_parser_next_token_starts_declaration (parser))\n+\t       && c_parser_next_tokens_start_declaration (parser))\n \t{\n \t  last_label = false;\n \t  mark_valid_location_for_stdc_pragma (false);\n@@ -4030,9 +4064,7 @@ c_parser_label (c_parser *parser)\n     }\n   if (label)\n     {\n-      if (c_parser_next_token_starts_declaration (parser)\n-\t  && !(c_parser_next_token_is (parser, CPP_NAME)\n-\t       && c_parser_peek_2nd_token (parser)->type == CPP_COLON))\n+      if (c_parser_next_tokens_start_declaration (parser))\n \t{\n \t  error_at (c_parser_peek_token (parser)->location,\n \t\t    \"a label can only be part of a statement and \"\n@@ -4626,7 +4658,7 @@ c_parser_for_statement (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  c_finish_expr_stmt (loc, NULL_TREE);\n \t}\n-      else if (c_parser_next_token_starts_declaration (parser))\n+      else if (c_parser_next_tokens_start_declaration (parser))\n \t{\n \t  parser->objc_could_be_foreach_context = true;\n \t  c_parser_declaration_or_fndef (parser, true, true, true, true, true, \n@@ -9010,7 +9042,7 @@ c_parser_omp_for_loop (location_t loc,\n \tgoto pop_scopes;\n \n       /* Parse the initialization declaration or expression.  */\n-      if (c_parser_next_token_starts_declaration (parser))\n+      if (c_parser_next_tokens_start_declaration (parser))\n \t{\n \t  if (i > 0)\n \t    VEC_safe_push (tree, gc, for_block, c_begin_compound_stmt (true));"}, {"sha": "a2d1a56023323cf04d5856e4b8bd1e2b62f4c8e8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f413185c295b3cf6baabb576bf05209572bf952", "patch": "@@ -1,3 +1,8 @@\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c/20385\n+\t* gcc.dg/decl-9.c: New.\n+\n 2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/Wcxx-compat-8.c: Add testcases involving incomplete types."}, {"sha": "cc23b0724e11af8eb367d1b3dff96566cfa6aefd", "filename": "gcc/testsuite/gcc.dg/decl-9.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f413185c295b3cf6baabb576bf05209572bf952/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c?ref=2f413185c295b3cf6baabb576bf05209572bf952", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu89\" } */\n+\n+w *x; /* { dg-error \"unknown type name 'w'\" } */\n+\n+int z;    /* { dg-message \"previous declaration of 'z'\" } */\n+y         /* { dg-error \"unknown type name 'y'\" } */\n+  * z;    /* { dg-error \"conflicting \" } */\n+\n+int f1()\n+{\n+  int d, e;\n+  d * e; /* { dg-bogus \"unknown type name 'd'\" } */\n+  g * h; /* { dg-error \"unknown type name 'g'\" } */\n+  g i;   /* { dg-error \"unknown type name 'g'\" } */\n+}\n+\n+typedef int a;\n+\n+int f2()\n+{\n+b: a: ; /* { dg-bogus \"a label can only be part of a statement\" } */\n+c: d e; /* { dg-error \"a label can only be part of a statement\" } */\n+/* { dg-error \"unknown type name 'd'\" \"\" { target *-*-* } 23 } */\n+   ;\n+}\n+\n+void *f3()\n+{\n+  return x; /* { dg-bogus \"'x' undeclared\" } */\n+}\n+"}]}