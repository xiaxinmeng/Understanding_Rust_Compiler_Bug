{"sha": "52b7724b84b30caf28859178911271d03a1f8037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJiNzcyNGI4NGIzMGNhZjI4ODU5MTc4OTExMjcxZDAzYTFmODAzNw==", "commit": {"author": {"name": "Weiwen Liu", "email": "liu@hepunix.physics.yale.edu", "date": "1997-09-08T16:06:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-08T16:06:18Z"}, "message": "alias.c (init_alias_analysis): Clean up incompatible pointer type warning in bzero.\n\n        * alias.c (init_alias_analysis): Clean up incompatible pointer\n        type warning in bzero.\n        * regmove.c (regmove_optimize): Ditto.\n        * haifa-sched.c (find_rgns): Ditto.\n\n        * haifa-sched.c (print_value): Clean up ptr->int cast\n        warnings.\n\nFrom-SVN: r15169", "tree": {"sha": "7bc4f86ffe3e06a2455f123bf5e70b9e7e60cd5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bc4f86ffe3e06a2455f123bf5e70b9e7e60cd5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52b7724b84b30caf28859178911271d03a1f8037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b7724b84b30caf28859178911271d03a1f8037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b7724b84b30caf28859178911271d03a1f8037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b7724b84b30caf28859178911271d03a1f8037/comments", "author": null, "committer": null, "parents": [{"sha": "1a5de45f376c6d0afb0c1957a162bfe0feb9df55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5de45f376c6d0afb0c1957a162bfe0feb9df55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5de45f376c6d0afb0c1957a162bfe0feb9df55"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "48fd0a83c5356824994236cf2f95631c51f922c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b7724b84b30caf28859178911271d03a1f8037/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b7724b84b30caf28859178911271d03a1f8037/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52b7724b84b30caf28859178911271d03a1f8037", "patch": "@@ -1,3 +1,13 @@\n+Sun Sep  7 23:57:50 1997  Weiwen Liu  <liu@hepunix.physics.yale.edu>\n+\n+\t* alias.c (init_alias_analysis): Clean up incompatible pointer\n+\ttype warning in bzero.\n+\t* regmove.c (regmove_optimize): Ditto.\n+\t* haifa-sched.c (find_rgns): Ditto.\n+\n+\t* haifa-sched.c (print_value): Clean up ptr->int cast\n+\twarnings.\n+\n Sun Sep  7 23:18:32 1997  Fred Fish  <fnf@ninemoons.com>\n \n \t* INSTALL: Change 'amigados' to 'amigaos' to match current usage."}, {"sha": "e85b388ef874ac75b682d0bf64202acbff2aba11", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b7724b84b30caf28859178911271d03a1f8037/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b7724b84b30caf28859178911271d03a1f8037/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=52b7724b84b30caf28859178911271d03a1f8037", "patch": "@@ -925,7 +925,7 @@ init_alias_analysis ()\n       reg_base_value_size = maxreg * 2;\n       reg_base_value = (rtx *)oballoc (reg_base_value_size * sizeof (rtx));\n       reg_seen = (char *)alloca (reg_base_value_size);\n-      bzero (reg_base_value, reg_base_value_size * sizeof (rtx));\n+      bzero ((char *) reg_base_value, reg_base_value_size * sizeof (rtx));\n       bzero (reg_seen, reg_base_value_size);\n \n       /* Mark all hard registers which may contain an address."}, {"sha": "f5a5f4e84d7cef9809d40a07c6bd5c28ffe6f683", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b7724b84b30caf28859178911271d03a1f8037/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b7724b84b30caf28859178911271d03a1f8037/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=52b7724b84b30caf28859178911271d03a1f8037", "patch": "@@ -1628,7 +1628,7 @@ find_rgns ()\n   /* function's inner arrays allocation and initialization */\n   max_hdr = (int *) alloca (n_basic_blocks * sizeof (int));\n   dfs_nr = (int *) alloca (n_basic_blocks * sizeof (int));\n-  bzero ((int *) dfs_nr, n_basic_blocks * sizeof (int));\n+  bzero ((char *) dfs_nr, n_basic_blocks * sizeof (int));\n   stack = (int *) alloca (nr_edges * sizeof (int));\n   queue = (int *) alloca (n_basic_blocks * sizeof (int));\n \n@@ -6089,11 +6089,11 @@ print_value (buf, x, verbose)\n \tstrcpy (t, \"fr\");\n       else\n \tstrcpy (t, \"r\");\n-      sprintf (buf, \"%s%d\", t, (int) XEXP (x, 0));\n+      sprintf (buf, \"%s%d\", t, !! XEXP (x, 0));\n       break;\n     case SUBREG:\n       print_value (t, XEXP (x, 0), verbose);\n-      sprintf (buf, \"%s#%d\", t, (int) XEXP (x, 1));\n+      sprintf (buf, \"%s#%d\", t, !! XEXP (x, 1));\n       break;\n     case SCRATCH:\n       sprintf (buf, \"scratch\");"}, {"sha": "1efb9ceed89f3f5d43b6fc0aef0705ec53c2d359", "filename": "gcc/regmove.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b7724b84b30caf28859178911271d03a1f8037/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b7724b84b30caf28859178911271d03a1f8037/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=52b7724b84b30caf28859178911271d03a1f8037", "patch": "@@ -152,7 +152,7 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t      /* Must initialize this before the loop, because the code for\n \t\t the commutative case may set matches for operands other than\n \t\t the current one.  */\n-\t      bzero (matches, sizeof (matches));\n+\t      bzero ((char *)matches, sizeof (matches));\n     \n \t      for (operand_number = 0;\n \t\t   operand_number < insn_n_operands[insn_code_number];\n@@ -714,7 +714,7 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t  /* Must initialize this before the loop, because the code for\n \t     the commutative case may set matches for operands other than\n \t     the current one.  */\n-\t  bzero (matches, sizeof (matches));\n+\t  bzero ((char *) matches, sizeof (matches));\n \n \t  for (operand_number = 0;\n \t       operand_number < insn_n_operands[insn_code_number];"}]}