{"sha": "1753331b5bb8a14b709916450c93c98c2e2a007b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1MzMzMWI1YmI4YTE0YjcwOTkxNjQ1MGM5M2M5OGMyZTJhMDA3Yg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-05-29T16:22:05Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-05-29T16:22:05Z"}, "message": "re PR tree-optimization/24964 (Does not optimise abs(x)**2 to x**2)\n\n\n\tPR tree-optimization/24964\n\t* simplify-rtx.c (simplify_binary_operation_1): Add function comment.\n\t<MULT>: Minor clean-up.  Don't convert x*-1.0 into -x if we honor\n\tsignaling NaNs.  Optimize -x*-x as x*x for all float modes, and\n\tabs(x)*abs(x) as x*x for scalar floating point modes.\n\n\t* gcc.target/i386/387-10.c: New test case.\n\nFrom-SVN: r114206", "tree": {"sha": "978c2831d92b849c43dacb024987911ecab7ea4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/978c2831d92b849c43dacb024987911ecab7ea4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1753331b5bb8a14b709916450c93c98c2e2a007b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1753331b5bb8a14b709916450c93c98c2e2a007b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1753331b5bb8a14b709916450c93c98c2e2a007b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1753331b5bb8a14b709916450c93c98c2e2a007b/comments", "author": null, "committer": null, "parents": [{"sha": "06ac89d1ca5a07462804d35fff86331f9f61eae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ac89d1ca5a07462804d35fff86331f9f61eae4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ac89d1ca5a07462804d35fff86331f9f61eae4"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "97ec80cda0397714cc99be0b7a35b61cb86ceaeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1753331b5bb8a14b709916450c93c98c2e2a007b", "patch": "@@ -1,3 +1,11 @@\n+2006-05-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR tree-optimization/24964\n+\t* simplify-rtx.c (simplify_binary_operation_1): Add function comment.\n+\t<MULT>: Minor clean-up.  Don't convert x*-1.0 into -x if we honor\n+\tsignaling NaNs.  Optimize -x*-x as x*x for all float modes, and\n+\tabs(x)*abs(x) as x*x for scalar floating point modes.\n+\n 2006-05-29  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \tPR middle-end/27745"}, {"sha": "c51ca9e701725610800a5518f79db4f984e04ca7", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=1753331b5bb8a14b709916450c93c98c2e2a007b", "patch": "@@ -1472,6 +1472,11 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n   return simplify_binary_operation_1 (code, mode, op0, op1, trueop0, trueop1);\n }\n \n+/* Subroutine of simplify_binary_operation.  Simplify a binary operation\n+   CODE with result mode MODE, operating on OP0 and OP1.  If OP0 and/or\n+   OP1 are constant pool references, TRUEOP0 and TRUEOP1 represent the\n+   actual constants.  */\n+\n static rtx\n simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t\t\t     rtx op0, rtx op1, rtx trueop0, rtx trueop1)\n@@ -1907,12 +1912,12 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \treturn simplify_gen_binary (ASHIFT, mode, op0, GEN_INT (val));\n \n       /* Likewise for multipliers wider than a word.  */\n-      else if (GET_CODE (trueop1) == CONST_DOUBLE\n-\t       && (GET_MODE (trueop1) == VOIDmode\n-\t\t   || GET_MODE_CLASS (GET_MODE (trueop1)) == MODE_INT)\n-\t       && GET_MODE (op0) == mode\n-\t       && CONST_DOUBLE_LOW (trueop1) == 0\n-\t       && (val = exact_log2 (CONST_DOUBLE_HIGH (trueop1))) >= 0)\n+      if (GET_CODE (trueop1) == CONST_DOUBLE\n+\t  && (GET_MODE (trueop1) == VOIDmode\n+\t      || GET_MODE_CLASS (GET_MODE (trueop1)) == MODE_INT)\n+\t  && GET_MODE (op0) == mode\n+\t  && CONST_DOUBLE_LOW (trueop1) == 0\n+\t  && (val = exact_log2 (CONST_DOUBLE_HIGH (trueop1))) >= 0)\n \treturn simplify_gen_binary (ASHIFT, mode, op0,\n \t\t\t\t    GEN_INT (val + HOST_BITS_PER_WIDE_INT));\n \n@@ -1927,10 +1932,27 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  if (REAL_VALUES_EQUAL (d, dconst2))\n \t    return simplify_gen_binary (PLUS, mode, op0, copy_rtx (op0));\n \n-\t  if (REAL_VALUES_EQUAL (d, dconstm1))\n+\t  if (!HONOR_SNANS (mode)\n+\t      && REAL_VALUES_EQUAL (d, dconstm1))\n \t    return simplify_gen_unary (NEG, mode, op0, mode);\n \t}\n \n+      /* Optimize -x * -x as x * x.  */\n+      if (FLOAT_MODE_P (mode)\n+\t  && GET_CODE (op0) == NEG\n+\t  && GET_CODE (op1) == NEG\n+\t  && rtx_equal_p (XEXP (op0, 0), XEXP (op1, 0))\n+\t  && !side_effects_p (XEXP (op0, 0)))\n+\treturn simplify_gen_binary (MULT, mode, XEXP (op0, 0), XEXP (op1, 0));\n+\n+      /* Likewise, optimize abs(x) * abs(x) as x * x.  */\n+      if (SCALAR_FLOAT_MODE_P (mode)\n+\t  && GET_CODE (op0) == ABS\n+\t  && GET_CODE (op1) == ABS\n+\t  && rtx_equal_p (XEXP (op0, 0), XEXP (op1, 0))\n+\t  && !side_effects_p (XEXP (op0, 0)))\n+\treturn simplify_gen_binary (MULT, mode, XEXP (op0, 0), XEXP (op1, 0));\n+\n       /* Reassociate multiplication, but for floating point MULTs\n \t only when the user specifies unsafe math optimizations.  */\n       if (! FLOAT_MODE_P (mode)"}, {"sha": "8778352c85d00189b8442a04dabda27a3f80f7da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1753331b5bb8a14b709916450c93c98c2e2a007b", "patch": "@@ -1,3 +1,8 @@\n+2006-05-29  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR tree-optimization/24964\n+\t* gcc.target/i386/387-10.c: New test case.\n+\n 2006-05-28  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \t* intrinsics/string_intrinsics.c (compare_string):"}, {"sha": "150515b2a82bec6482dab2256b403d2a43b93ebf", "filename": "gcc/testsuite/gcc.target/i386/387-10.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1753331b5bb8a14b709916450c93c98c2e2a007b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-10.c?ref=1753331b5bb8a14b709916450c93c98c2e2a007b", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/24964 */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-O2 -mfpmath=387\" } */\n+\n+double fabs(double x);\n+\n+double test1(double x)\n+{\n+  double t = fabs(x);\n+  return t*t;\n+}\n+\n+double test2(double x)\n+{\n+  double t = -x;\n+  return t*t;\n+}\n+\n+/* { dg-final { scan-assembler-not \"fchs\" } } */\n+/* { dg-final { scan-assembler-not \"fabs\" } } */"}]}