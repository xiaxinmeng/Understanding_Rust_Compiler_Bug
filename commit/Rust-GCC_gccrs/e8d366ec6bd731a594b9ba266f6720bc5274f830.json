{"sha": "e8d366ec6bd731a594b9ba266f6720bc5274f830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkMzY2ZWM2YmQ3MzFhNTk0YjliYTI2NmY2NzIwYmM1Mjc0ZjgzMA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2007-01-27T19:02:25Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2007-01-27T19:02:25Z"}, "message": "trans-stmt.c (forall_info): Replace the next_nest and outer fields that previously implemented a...\n\n\n\t* trans-stmt.c (forall_info): Replace the next_nest and outer\n\tfields that previously implemented a doubly-linked list with a\n\tsingle prev_nest field (singly-linked list).\n\t(gfc_trans_nested_forall_loop): The nested_forall_info argument\n\tnow denotes the innermost FORALL in the loop nest.\n\t(compute_overall_iter_number): Use prev_nest instead of next_nest.\n\t(gfc_trans_forall_1): Link/cons the new \"info\" to the head of the\n\tnested_forall_info linked list.  Free the current \"info\" when done.\n\n\t* gfortran.dg/forall_7.f90: New test case.\n\nFrom-SVN: r121236", "tree": {"sha": "a0770f87c543313505f4e635c59d46c79bd78a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0770f87c543313505f4e635c59d46c79bd78a3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8d366ec6bd731a594b9ba266f6720bc5274f830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d366ec6bd731a594b9ba266f6720bc5274f830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8d366ec6bd731a594b9ba266f6720bc5274f830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8d366ec6bd731a594b9ba266f6720bc5274f830/comments", "author": null, "committer": null, "parents": [{"sha": "a00b8d1a38973eb176d7932bb2bd6cf7e59c5495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00b8d1a38973eb176d7932bb2bd6cf7e59c5495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00b8d1a38973eb176d7932bb2bd6cf7e59c5495"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "963031d3ce281c48d343396c8e25b73f5ff99c32", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8d366ec6bd731a594b9ba266f6720bc5274f830", "patch": "@@ -1,3 +1,14 @@\n+2007-01-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* trans-stmt.c (forall_info): Replace the next_nest and outer\n+\tfields that previously implemented a doubly-linked list with a\n+\tsingle prev_nest field (singly-linked list).\n+\t(gfc_trans_nested_forall_loop): The nested_forall_info argument\n+\tnow denotes the innermost FORALL in the loop nest.\n+\t(compute_overall_iter_number): Use prev_nest instead of next_nest.\n+\t(gfc_trans_forall_1): Link/cons the new \"info\" to the head of the\n+\tnested_forall_info linked list.  Free the current \"info\" when done.\n+\n 2007-01-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30407"}, {"sha": "f32a931dab67fe57b821d0177b7e04154210cbd8", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=e8d366ec6bd731a594b9ba266f6720bc5274f830", "patch": "@@ -57,8 +57,7 @@ typedef struct forall_info\n   tree maskindex;\n   int nvar;\n   tree size;\n-  struct forall_info  *outer;\n-  struct forall_info  *next_nest;\n+  struct forall_info  *prev_nest;\n }\n forall_info;\n \n@@ -1653,8 +1652,6 @@ gfc_trans_nested_forall_loop (forall_info * nested_forall_info, tree body,\n   gfc_start_block (&header);\n \n   forall_tmp = nested_forall_info;\n-  while (forall_tmp->next_nest != NULL)\n-    forall_tmp = forall_tmp->next_nest;\n   while (forall_tmp != NULL)\n     {\n       /* Generate body with masks' control.  */\n@@ -1671,7 +1668,7 @@ gfc_trans_nested_forall_loop (forall_info * nested_forall_info, tree body,\n             }\n         }\n       body = gfc_trans_forall_loop (forall_tmp, body, mask_flag, &header);\n-      forall_tmp = forall_tmp->outer;\n+      forall_tmp = forall_tmp->prev_nest;\n       mask_flag = 1;\n     }\n \n@@ -2043,7 +2040,7 @@ compute_overall_iter_number (forall_info *nested_forall_info, tree inner_size,\n       /* First check whether all the bounds are constant.  */\n       for (forall_tmp = nested_forall_info;\n \t   forall_tmp;\n-\t   forall_tmp = forall_tmp->next_nest)\n+\t   forall_tmp = forall_tmp->prev_nest)\n \tif (forall_tmp->mask || !INTEGER_CST_P (forall_tmp->size))\n \t  {\n \t    all_const_p = false;\n@@ -2055,7 +2052,7 @@ compute_overall_iter_number (forall_info *nested_forall_info, tree inner_size,\n \t  tree tmp = inner_size;\n \t  for (forall_tmp = nested_forall_info;\n \t       forall_tmp;\n-\t       forall_tmp = forall_tmp->next_nest)\n+\t       forall_tmp = forall_tmp->prev_nest)\n \t    tmp = fold_build2 (MULT_EXPR, gfc_array_index_type,\n \t\t\t       tmp, forall_tmp->size);\n \t  return tmp;\n@@ -2584,16 +2581,8 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n     }\n \n   /* Link the current forall level to nested_forall_info.  */\n-  if (nested_forall_info)\n-    {\n-      forall_info *forall_tmp = nested_forall_info;\n-      while (forall_tmp->next_nest != NULL)\n-        forall_tmp = forall_tmp->next_nest;\n-      info->outer = forall_tmp;\n-      forall_tmp->next_nest = info;\n-    }\n-  else\n-    nested_forall_info = info;\n+  info->prev_nest = nested_forall_info;\n+  nested_forall_info = info;\n \n   /* Copy the mask into a temporary variable if required.\n      For now we assume a mask temporary is needed.  */\n@@ -2713,6 +2702,9 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n   gfc_free (varexpr);\n   gfc_free (saved_vars);\n \n+  /* Free the space for this forall_info.  */\n+  gfc_free (info);\n+\n   if (pmask)\n     {\n       /* Free the temporary for the mask.  */"}, {"sha": "ce96d1a72c54de205eeba612bf4668e80b3f97ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8d366ec6bd731a594b9ba266f6720bc5274f830", "patch": "@@ -1,3 +1,7 @@\n+2007-01-27  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gfortran.dg/forall_7.f90: New test case.\n+\n 2007-01-27  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/30407"}, {"sha": "bea437f3bf5704ddd9a6e912985ef15c4ee6adba", "filename": "gcc/testsuite/gfortran.dg/forall_7.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8d366ec6bd731a594b9ba266f6720bc5274f830/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fforall_7.f90?ref=e8d366ec6bd731a594b9ba266f6720bc5274f830", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+  integer :: a(10,10)\n+  integer :: tot\n+  a(:,:) = 0\n+  forall (i = 1:10)\n+    forall (j = 1:10)\n+      a(i,j) = 1\n+    end forall\n+    forall (k = 1:10)\n+      a(i,k) = a(i,k) + 1\n+    end forall\n+  end forall\n+  tot = sum(a(:,:))\n+! print *, tot\n+  if (tot .ne. 200) call abort ()\n+end"}]}