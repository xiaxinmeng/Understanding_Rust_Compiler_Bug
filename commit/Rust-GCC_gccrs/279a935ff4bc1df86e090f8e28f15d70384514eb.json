{"sha": "279a935ff4bc1df86e090f8e28f15d70384514eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5YTkzNWZmNGJjMWRmODZlMDkwZjhlMjhmMTVkNzAzODQ1MTRlYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-04-28T14:01:40Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-04-28T14:01:40Z"}, "message": "configure.ac: Do valgrind header checks unconditionally.\n\n2014-04-28  Richard Biener  <rguenther@suse.de>\n\n\t* configure.ac: Do valgrind header checks unconditionally.\n\tAdd --enable-valgrind-annotations.\n\t* system.h: Guard valgrind header inclusion with\n\tENABLE_VALGRIND_ANNOTATIONS instead of ENABLE_VALGRIND_CHECKING.\n\t* alloc-pool.c (pool_alloc, pool_free): Use\n\tENABLE_VALGRIND_ANNOTATIONS instead of ENABLE_VALGRIND_CHECKING\n\tto guard possibly dead code.\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\nFrom-SVN: r209861", "tree": {"sha": "a5bc6249aa24285c664840fc0a7c18d7aea148b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5bc6249aa24285c664840fc0a7c18d7aea148b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/279a935ff4bc1df86e090f8e28f15d70384514eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279a935ff4bc1df86e090f8e28f15d70384514eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/279a935ff4bc1df86e090f8e28f15d70384514eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/279a935ff4bc1df86e090f8e28f15d70384514eb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07357f2f5a81e008b78af738e5e0050d850425a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07357f2f5a81e008b78af738e5e0050d850425a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07357f2f5a81e008b78af738e5e0050d850425a8"}], "stats": {"total": 145, "additions": 101, "deletions": 44}, "files": [{"sha": "3b3f613464d5d9a882e34ee8acd184e92fe3d3aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=279a935ff4bc1df86e090f8e28f15d70384514eb", "patch": "@@ -1,3 +1,15 @@\n+2014-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\t* configure.ac: Do valgrind header checks unconditionally.\n+\tAdd --enable-valgrind-annotations.\n+\t* system.h: Guard valgrind header inclusion with\n+\tENABLE_VALGRIND_ANNOTATIONS instead of ENABLE_VALGRIND_CHECKING.\n+\t* alloc-pool.c (pool_alloc, pool_free): Use\n+\tENABLE_VALGRIND_ANNOTATIONS instead of ENABLE_VALGRIND_CHECKING\n+\tto guard possibly dead code.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\n 2014-04-28  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/60902"}, {"sha": "87fbd8556fbb5f079a1ea1d44228c88eb2d63969", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=279a935ff4bc1df86e090f8e28f15d70384514eb", "patch": "@@ -250,7 +250,7 @@ void *\n pool_alloc (alloc_pool pool)\n {\n   alloc_pool_list header;\n-#ifdef ENABLE_VALGRIND_CHECKING\n+#ifdef ENABLE_VALGRIND_ANNOTATIONS\n   int size;\n #endif\n \n@@ -265,7 +265,7 @@ pool_alloc (alloc_pool pool)\n     }\n \n   gcc_checking_assert (pool);\n-#ifdef ENABLE_VALGRIND_CHECKING\n+#ifdef ENABLE_VALGRIND_ANNOTATIONS\n   size = pool->elt_size - offsetof (allocation_object, u.data);\n #endif\n \n@@ -334,7 +334,7 @@ void\n pool_free (alloc_pool pool, void *ptr)\n {\n   alloc_pool_list header;\n-#if defined(ENABLE_VALGRIND_CHECKING) || defined(ENABLE_CHECKING)\n+#if defined(ENABLE_VALGRIND_ANNOTATIONS) || defined(ENABLE_CHECKING)\n   int size;\n   size = pool->elt_size - offsetof (allocation_object, u.data);\n #endif"}, {"sha": "c0ba36ea98b140f0db192d85990fef9e0f98932d", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=279a935ff4bc1df86e090f8e28f15d70384514eb", "patch": "@@ -172,6 +172,12 @@\n #endif\n \n \n+/* Define to get calls to the valgrind runtime enabled. */\n+#ifndef USED_FOR_TARGET\n+#undef ENABLE_VALGRIND_ANNOTATIONS\n+#endif\n+\n+\n /* Define if you want to run subprograms and generated programs through\n    valgrind (a memory checker). This is extremely expensive. */\n #ifndef USED_FOR_TARGET"}, {"sha": "d912261c1cf925371e2eed870a3807108826e8f3", "filename": "gcc/configure", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=279a935ff4bc1df86e090f8e28f15d70384514eb", "patch": "@@ -882,6 +882,7 @@ enable_werror_always\n enable_checking\n enable_coverage\n enable_gather_detailed_mem_stats\n+enable_valgrind_annotations\n with_stabs\n enable_multilib\n enable_multiarch\n@@ -1591,6 +1592,8 @@ Optional Features:\n                           Values are opt, noopt, default is noopt\n   --enable-gather-detailed-mem-stats\n                           enable detailed memory allocation stats gathering\n+  --enable-valgrind-annotations\n+                          enable valgrind runtime interaction\n   --enable-multilib       enable library support for multiple ABIs\n   --enable-multiarch      enable support for multiarch paths\n   --enable-__cxa_atexit   enable __cxa_atexit for C++\n@@ -6772,12 +6775,11 @@ fi\n \n \n \n-if test x$ac_valgrind_checking != x ; then\n-  # It is certainly possible that there's valgrind but no valgrind.h.\n-  # GCC relies on making annotations so we must have both.\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for VALGRIND_DISCARD in <valgrind/memcheck.h>\" >&5\n+# It is certainly possible that there's valgrind but no valgrind.h.\n+# GCC relies on making annotations so we must have both.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for VALGRIND_DISCARD in <valgrind/memcheck.h>\" >&5\n $as_echo_n \"checking for VALGRIND_DISCARD in <valgrind/memcheck.h>... \" >&6; }\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <valgrind/memcheck.h>\n #ifndef VALGRIND_DISCARD\n@@ -6790,11 +6792,11 @@ else\n   gcc_cv_header_valgrind_memcheck_h=no\n fi\n rm -f conftest.err conftest.$ac_ext\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_valgrind_memcheck_h\" >&5\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_valgrind_memcheck_h\" >&5\n $as_echo \"$gcc_cv_header_valgrind_memcheck_h\" >&6; }\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for VALGRIND_DISCARD in <memcheck.h>\" >&5\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for VALGRIND_DISCARD in <memcheck.h>\" >&5\n $as_echo_n \"checking for VALGRIND_DISCARD in <memcheck.h>... \" >&6; }\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <memcheck.h>\n #ifndef VALGRIND_DISCARD\n@@ -6807,8 +6809,20 @@ else\n   gcc_cv_header_memcheck_h=no\n fi\n rm -f conftest.err conftest.$ac_ext\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_memcheck_h\" >&5\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_memcheck_h\" >&5\n $as_echo \"$gcc_cv_header_memcheck_h\" >&6; }\n+if test $gcc_cv_header_valgrind_memcheck_h = yes; then\n+\n+$as_echo \"#define HAVE_VALGRIND_MEMCHECK_H 1\" >>confdefs.h\n+\n+fi\n+if test $gcc_cv_header_memcheck_h = yes; then\n+\n+$as_echo \"#define HAVE_MEMCHECK_H 1\" >>confdefs.h\n+\n+fi\n+\n+if test x$ac_valgrind_checking != x ; then\n \n # Prepare PATH_SEPARATOR.\n # The user is always right.\n@@ -6887,16 +6901,6 @@ fi\n \n $as_echo \"#define ENABLE_VALGRIND_CHECKING 1\" >>confdefs.h\n \n-  if test $gcc_cv_header_valgrind_memcheck_h = yes; then\n-\n-$as_echo \"#define HAVE_VALGRIND_MEMCHECK_H 1\" >>confdefs.h\n-\n-  fi\n-  if test $gcc_cv_header_memcheck_h = yes; then\n-\n-$as_echo \"#define HAVE_MEMCHECK_H 1\" >>confdefs.h\n-\n-  fi\n fi\n \n \n@@ -6939,6 +6943,25 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+# Check whether --enable-valgrind-annotations was given.\n+if test \"${enable_valgrind_annotations+set}\" = set; then :\n+  enableval=$enable_valgrind_annotations;\n+else\n+  enable_valgrind_annotations=no\n+fi\n+\n+if test x$enable_valgrind_annotations != xno \\\n+    || test x$ac_valgrind_checking != x; then\n+  if (test $have_valgrind_h = no \\\n+      && test $gcc_cv_header_memcheck_h = no \\\n+      && test $gcc_cv_header_valgrind_memcheck_h = no); then\n+    as_fn_error \"*** Can't find valgrind/memcheck.h, memcheck.h or valgrind.h\" \"$LINENO\" 5\n+  fi\n+\n+$as_echo \"#define ENABLE_VALGRIND_ANNOTATIONS 1\" >>confdefs.h\n+\n+fi\n+\n # -------------------------------\n # Miscenalleous configure options\n # -------------------------------\n@@ -17971,7 +17994,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17974 \"configure\"\n+#line 17997 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18077,7 +18100,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18080 \"configure\"\n+#line 18103 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "5565524c89a8195a470a06f266845e4d1b0667e2", "filename": "gcc/configure.ac", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=279a935ff4bc1df86e090f8e28f15d70384514eb", "patch": "@@ -514,27 +514,36 @@ dnl # an if statement.  This was the source of very frustrating bugs\n dnl # in converting to autoconf 2.5x!\n AC_CHECK_HEADER(valgrind.h, have_valgrind_h=yes, have_valgrind_h=no)\n \n-if test x$ac_valgrind_checking != x ; then\n-  # It is certainly possible that there's valgrind but no valgrind.h.\n-  # GCC relies on making annotations so we must have both.\n-  AC_MSG_CHECKING(for VALGRIND_DISCARD in <valgrind/memcheck.h>)\n-  AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n-    [[#include <valgrind/memcheck.h>\n+# It is certainly possible that there's valgrind but no valgrind.h.\n+# GCC relies on making annotations so we must have both.\n+AC_MSG_CHECKING(for VALGRIND_DISCARD in <valgrind/memcheck.h>)\n+AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n+  [[#include <valgrind/memcheck.h>\n #ifndef VALGRIND_DISCARD\n #error VALGRIND_DISCARD not defined\n #endif]])],\n   [gcc_cv_header_valgrind_memcheck_h=yes],\n   [gcc_cv_header_valgrind_memcheck_h=no])\n-  AC_MSG_RESULT($gcc_cv_header_valgrind_memcheck_h)\n-  AC_MSG_CHECKING(for VALGRIND_DISCARD in <memcheck.h>)\n-  AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n-    [[#include <memcheck.h>\n+AC_MSG_RESULT($gcc_cv_header_valgrind_memcheck_h)\n+AC_MSG_CHECKING(for VALGRIND_DISCARD in <memcheck.h>)\n+AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n+  [[#include <memcheck.h>\n #ifndef VALGRIND_DISCARD\n #error VALGRIND_DISCARD not defined\n #endif]])],\n   [gcc_cv_header_memcheck_h=yes],\n   [gcc_cv_header_memcheck_h=no])\n-  AC_MSG_RESULT($gcc_cv_header_memcheck_h)\n+AC_MSG_RESULT($gcc_cv_header_memcheck_h)\n+if test $gcc_cv_header_valgrind_memcheck_h = yes; then\n+  AC_DEFINE(HAVE_VALGRIND_MEMCHECK_H, 1,\n+\t[Define if valgrind's valgrind/memcheck.h header is installed.])\n+fi\n+if test $gcc_cv_header_memcheck_h = yes; then\n+  AC_DEFINE(HAVE_MEMCHECK_H, 1,\n+\t[Define if valgrind's memcheck.h header is installed.])\n+fi\n+\n+if test x$ac_valgrind_checking != x ; then\n   AM_PATH_PROG_WITH_TEST(valgrind_path, valgrind,\n \t[$ac_dir/$ac_word --version | grep valgrind- >/dev/null 2>&1])\n   if test \"x$valgrind_path\" = \"x\" \\\n@@ -548,14 +557,6 @@ if test x$ac_valgrind_checking != x ; then\n   AC_DEFINE(ENABLE_VALGRIND_CHECKING, 1,\n [Define if you want to run subprograms and generated programs\n    through valgrind (a memory checker).  This is extremely expensive.])\n-  if test $gcc_cv_header_valgrind_memcheck_h = yes; then\n-    AC_DEFINE(HAVE_VALGRIND_MEMCHECK_H, 1,\n-\t[Define if valgrind's valgrind/memcheck.h header is installed.])\n-  fi\n-  if test $gcc_cv_header_memcheck_h = yes; then\n-    AC_DEFINE(HAVE_MEMCHECK_H, 1,\n-\t[Define if valgrind's memcheck.h header is installed.])\n-  fi\n fi\n AC_SUBST(valgrind_path_defines)\n AC_SUBST(valgrind_command)\n@@ -594,6 +595,21 @@ gather_stats=`if test $enable_gather_detailed_mem_stats != no; then echo 1; else\n AC_DEFINE_UNQUOTED(GATHER_STATISTICS, $gather_stats,\n [Define to enable detailed memory allocation stats gathering.])\n \n+AC_ARG_ENABLE(valgrind-annotations,\n+[AS_HELP_STRING([--enable-valgrind-annotations],\n+\t\t[enable valgrind runtime interaction])], [],\n+[enable_valgrind_annotations=no])\n+if test x$enable_valgrind_annotations != xno \\\n+    || test x$ac_valgrind_checking != x; then\n+  if (test $have_valgrind_h = no \\\n+      && test $gcc_cv_header_memcheck_h = no \\\n+      && test $gcc_cv_header_valgrind_memcheck_h = no); then\n+    AC_MSG_ERROR([*** Can't find valgrind/memcheck.h, memcheck.h or valgrind.h])\n+  fi\n+  AC_DEFINE(ENABLE_VALGRIND_ANNOTATIONS, 1,\n+[Define to get calls to the valgrind runtime enabled.])\n+fi\n+\n # -------------------------------\n # Miscenalleous configure options\n # -------------------------------"}, {"sha": "892271f58a8b5e404195056010f238511da0b22c", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/279a935ff4bc1df86e090f8e28f15d70384514eb/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=279a935ff4bc1df86e090f8e28f15d70384514eb", "patch": "@@ -1025,7 +1025,7 @@ helper_const_non_const_cast (const char *p)\n #endif\n #endif\n \n-#ifdef ENABLE_VALGRIND_CHECKING\n+#ifdef ENABLE_VALGRIND_ANNOTATIONS\n # ifdef HAVE_VALGRIND_MEMCHECK_H\n #  include <valgrind/memcheck.h>\n # elif defined HAVE_MEMCHECK_H"}]}