{"sha": "619dea2d5c764e83340099eea2f33296e148b4da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE5ZGVhMmQ1Yzc2NGU4MzM0MDA5OWVlYTJmMzMyOTZlMTQ4YjRkYQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-05-01T00:32:13Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2010-05-01T00:32:13Z"}, "message": "[multiple changes]\n\n2010-04-30  Iain Sandoe  <iains@gcc.gnu.org>\n\n\tPR objc++/32052\n\t* objc-act.c (encode_aggregate_within): Encode structure tags\n\twith template args for ObjC++.\n\n2010-04-30  Iain Sandoe <iains@gcc.gnu.org>\n\n\tPR objc++/32052\n\t* obj-c++.dg/encode-2.mm: Remove XFAIL. Add test for anonymous\n\tstructure and nested declarations.\n\t* obj-c++.dg/encode-3.mm:  Remove XFAIL. Add test for anonymous\n\tstructure and nested declarations.  Reduce header clutter and\n\tuse _exit() rather than abort().\n\t* objc.dg/encode-10.m: New.\n\t* objc.dg/encode-11.m: New.\n\nFrom-SVN: r158958", "tree": {"sha": "862aeb59dc18687953e343e21d22bb8d5451fde4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/862aeb59dc18687953e343e21d22bb8d5451fde4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/619dea2d5c764e83340099eea2f33296e148b4da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619dea2d5c764e83340099eea2f33296e148b4da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/619dea2d5c764e83340099eea2f33296e148b4da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/619dea2d5c764e83340099eea2f33296e148b4da/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6482762d8114f68c7bc26dc0e253c22088e2c249", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6482762d8114f68c7bc26dc0e253c22088e2c249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6482762d8114f68c7bc26dc0e253c22088e2c249"}], "stats": {"total": 144, "additions": 128, "deletions": 16}, "files": [{"sha": "2f1343b4268a0edb2a18be77bc07b6c7677fad7c", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -1,3 +1,9 @@\n+2010-04-30  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\tPR objc++/32052\n+\t* objc-act.c (encode_aggregate_within): Encode structure tags\n+\twith template args for ObjC++.\n+\n 2010-04-30  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* objc-act.c: Do not include varray.h."}, {"sha": "465376d55ba1c02b526727d0a40376d8237039de", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -8129,15 +8129,21 @@ encode_aggregate_within (tree type, int curtype, int format, int left,\n \n   /* Encode the struct/union tag name, or '?' if a tag was\n      not provided.  Typedef aliases do not qualify.  */\n-  if (name && TREE_CODE (name) == IDENTIFIER_NODE\n #ifdef OBJCPLUS\n+  /* For compatibility with the NeXT runtime, ObjC++ encodes template\n+     args as a composite struct tag name. */\n+  if (name && TREE_CODE (name) == IDENTIFIER_NODE\n       /* Did this struct have a tag?  */\n-      && !TYPE_WAS_ANONYMOUS (type)\n-#endif\n-      )\n+      && !TYPE_WAS_ANONYMOUS (type))\n+    obstack_grow (&util_obstack,\n+\t\t  decl_as_string (type, TFF_DECL_SPECIFIERS | TFF_UNQUALIFIED_NAME),\n+\t\t  strlen (decl_as_string (type, TFF_DECL_SPECIFIERS | TFF_UNQUALIFIED_NAME)));\n+#else\n+  if (name && TREE_CODE (name) == IDENTIFIER_NODE)\n     obstack_grow (&util_obstack,\n \t\t  IDENTIFIER_POINTER (name),\n \t\t  strlen (IDENTIFIER_POINTER (name)));\n+#endif\n   else\n     obstack_1grow (&util_obstack, '?');\n "}, {"sha": "4ef7a6fb11df246d92aa174ec0c7473951a5bef7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -1,3 +1,14 @@\n+2010-04-30  Iain Sandoe <iains@gcc.gnu.org>\n+\n+\tPR objc++/32052\n+\t* obj-c++.dg/encode-2.mm: Remove XFAIL. Add test for anonymous\n+\tstructure and nested declarations.\n+\t* obj-c++.dg/encode-3.mm:  Remove XFAIL. Add test for anonymous\n+\tstructure and nested declarations.  Reduce header clutter and\n+\tuse _exit() rather than abort().\n+\t* objc.dg/encode-10.m: New.\n+\t* objc.dg/encode-11.m: New.\n+\n 2010-04-30  DJ Delorie  <dj@redhat.com>\n \n \t* gcc.c-torture/execute/20100430-1.c: New test."}, {"sha": "cfa9bc783e30469b998e817724be81b6612be407", "filename": "gcc/testsuite/obj-c++.dg/encode-2.mm", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-2.mm?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -6,9 +6,21 @@\n  int z;\n };\n \n+typedef struct {\n+  Vec<double> dvec;\n+  Vec<float> fvec;\n+  float fscalar;\n+  double dscalar;\n+  Vec<char> chVec;\n+  int iscalar;\n+} anonymous;\n+\n Vec<double> dd;\n+\n const char *enc = @encode(Vec<float>);\n const char *enc2 = @encode(Vec<double>);\n+const char *enc3 = @encode(anonymous);\n \n-/* { dg-final { scan-assembler \"{Vec<float>=ffi}\" { xfail \"*-*-*\" } } } PR32052 */\n-/* { dg-final { scan-assembler \"{Vec<double>=ddi}\" { xfail \"*-*-*\" } } } PR32052 */\n+/* { dg-final { scan-assembler \"{Vec<float>=ffi}\" } }  */\n+/* { dg-final { scan-assembler \"{Vec<double>=ddi}\" } }  */\n+/* { dg-final { scan-assembler \"{?={Vec<double>=ddi}{Vec<float>=ffi}fd{Vec<char>=cci}i}\" } }  */"}, {"sha": "05193ae2c2fbfad7733eb3c36b94b07f6d285099", "filename": "gcc/testsuite/obj-c++.dg/encode-3.mm", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fencode-3.mm?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -1,18 +1,30 @@\n-/* { dg-do run { xfail { \"*-*-*\" } } } PR32052 */\n+/* { dg-do run } */\n \n-#include <stdlib.h>\n-#include <string.h>\n+extern \"C\" {\n+extern void _exit(int);\n+extern int strcmp(const char *, const char *);\n+}\n \n template <class T>\n struct Vec {\n- T x, y;\n- long z;\n- long long zz;\n+  T x, y;\n+  long z;\n+  long long zz;\n };\n \n-Vec<double> dd;\n+typedef struct {\n+  float fscalar;\n+  double dv[10];\n+  int iscalar;\n+  long z;\n+  long long zz;\n+  Vec<const char> cv;\n+} anonymous;\n+\n+//Vec<double> dd;\n const char *enc = @encode(Vec<float>);\n const char *enc2 = @encode(Vec<double>);\n+const char *enc3 = @encode(anonymous);\n \n #ifdef __LP64__\n #define L \"q\"\n@@ -24,13 +36,16 @@ int main(void) {\n   const char *encode = @encode(long);\n \n   if (strcmp (encode, L))\n-    abort();\n+    _exit(-(__LINE__));\n \n   if (strcmp (enc, \"{Vec<float>=ff\" L \"q}\"))\n-    abort();\n+    _exit(-(__LINE__));\n \n   if (strcmp (enc2, \"{Vec<double>=dd\" L \"q}\"))\n-    abort();\n+    _exit(-(__LINE__));\n+\n+  if (strcmp (enc3, \"{?=f[10d]i\" L \"q{Vec<const char>=rcrc\" L \"q}}\"))\n+    _exit(-(__LINE__));\n \n   return 0;\n }"}, {"sha": "bdfdb82b8d21f5b266b6d5d0c78afda9754784cf", "filename": "gcc/testsuite/objc.dg/encode-10.m", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-10.m?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+\n+typedef struct Vec {\n+ double x, y;\n+ int z;\n+} xyz_t ;\n+\n+typedef struct {\n+  float fscalar;\n+  double dscalar;\n+  xyz_t dv;\n+  int iscalar;\n+} anonymous;\n+\n+const char *enc = @encode(xyz_t);\n+const char *enc2 = @encode(anonymous);\n+\n+/* { dg-final { scan-assembler \"{Vec=ddi}\" } }  */\n+/* { dg-final { scan-assembler \"{?=fd{Vec=ddi}i}\" } }  */"}, {"sha": "2e5fc84c86329eb9dd6acfa1db13661faedfbce2", "filename": "gcc/testsuite/objc.dg/encode-11.m", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/619dea2d5c764e83340099eea2f33296e148b4da/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-11.m?ref=619dea2d5c764e83340099eea2f33296e148b4da", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+\n+extern void _exit(int);\n+extern int strcmp(const char *, const char *);\n+\n+typedef struct Vec {\n+ double xv[10], yv[5];\n+ float fscal;\n+ int z;\n+} xyz_t ;\n+\n+typedef struct {\n+  float fscalar;\n+  double dscalar;\n+  xyz_t dv;\n+  int iscalar;\n+  long ln;\n+  long long lln;\n+} anonymous;\n+\n+const char *enc = @encode(xyz_t);\n+const char *enc2 = @encode(anonymous);\n+\n+#ifdef __LP64__\n+#define L \"q\"\n+#else\n+#define L \"l\"\n+#endif\n+\n+int main(void) {\n+  const char *encode = @encode(long);\n+\n+  if (strcmp (encode, L))\n+    _exit(-(__LINE__));\n+\n+  if (strcmp (enc, \"{Vec=[10d][5d]fi}\"))\n+    _exit(-(__LINE__));\n+\n+  if (strcmp (enc2, \"{?=fd{Vec=[10d][5d]fi}i\" L \"q}\"))\n+    _exit(-(__LINE__));\n+\n+  return 0;\n+}"}]}