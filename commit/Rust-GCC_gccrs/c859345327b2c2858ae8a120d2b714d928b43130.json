{"sha": "c859345327b2c2858ae8a120d2b714d928b43130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg1OTM0NTMyN2IyYzI4NThhZThhMTIwZDJiNzE0ZDkyOGI0MzEzMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T08:15:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-26T08:15:24Z"}, "message": "[multiple changes]\n\n2015-05-26  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb: Add aspect Disable_Controlled.\n\t* einfo.ads, einfo.adb (Disable_Controlled): New flag.\n\t(Is_Controlled_Active): New function.\n\t* exp_ch3.adb (Expand_Freeze_Record_Type): Use\n\tIs_Controlled_Active.\n\t* exp_util.adb (Needs_Finalization): Finalization not needed\n\tif Disable_Controlled set.\n\t* freeze.adb (Freeze_Array_Type): Do not set\n\tHas_Controlled_Component if the component has Disable_Controlled.\n\t(Freeze_Record_Type): ditto.\n\t* sem_ch13.adb (Decorate): Minor reformatting.\n\t(Analyze_Aspect_Specifications): Implement Disable_Controlled.\n\t* sem_ch3.adb (Analyze_Object_Declaration): Handle\n\tDisable_Controlled.\n\t(Array_Type_Declaration): ditto.\n\t(Build_Derived_Private_Type): ditto.\n\t(Build_Derived_Type): ditto.\n\t(Record_Type_Definition): ditto.\n\t* snames.ads-tmpl: Add Name_Disable_Controlled.\n\n2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch6.adb (Expand_Actuals): Use a constant declaration instead\n\tof a renaming to capture the return value of a function call.\n\t(Expand_Simple_Function_Return): Call Remove_Side_Effects\n\tinstead of removing side effects manually before the call to\n\t_Postconditions.\n\nFrom-SVN: r223667", "tree": {"sha": "581bde70e3975c92ecbf185b6e851dcc262fcddd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/581bde70e3975c92ecbf185b6e851dcc262fcddd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c859345327b2c2858ae8a120d2b714d928b43130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c859345327b2c2858ae8a120d2b714d928b43130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c859345327b2c2858ae8a120d2b714d928b43130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c859345327b2c2858ae8a120d2b714d928b43130/comments", "author": null, "committer": null, "parents": [{"sha": "2945460b983487c6b61a79dba21a6f621aced345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2945460b983487c6b61a79dba21a6f621aced345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2945460b983487c6b61a79dba21a6f621aced345"}], "stats": {"total": 288, "additions": 150, "deletions": 138}, "files": [{"sha": "accd480b8f61bd809e1fe35bd1f6b3551a3044ec", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -1,3 +1,33 @@\n+2015-05-26  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Add aspect Disable_Controlled.\n+\t* einfo.ads, einfo.adb (Disable_Controlled): New flag.\n+\t(Is_Controlled_Active): New function.\n+\t* exp_ch3.adb (Expand_Freeze_Record_Type): Use\n+\tIs_Controlled_Active.\n+\t* exp_util.adb (Needs_Finalization): Finalization not needed\n+\tif Disable_Controlled set.\n+\t* freeze.adb (Freeze_Array_Type): Do not set\n+\tHas_Controlled_Component if the component has Disable_Controlled.\n+\t(Freeze_Record_Type): ditto.\n+\t* sem_ch13.adb (Decorate): Minor reformatting.\n+\t(Analyze_Aspect_Specifications): Implement Disable_Controlled.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Handle\n+\tDisable_Controlled.\n+\t(Array_Type_Declaration): ditto.\n+\t(Build_Derived_Private_Type): ditto.\n+\t(Build_Derived_Type): ditto.\n+\t(Record_Type_Definition): ditto.\n+\t* snames.ads-tmpl: Add Name_Disable_Controlled.\n+\n+2015-05-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Actuals): Use a constant declaration instead\n+\tof a renaming to capture the return value of a function call.\n+\t(Expand_Simple_Function_Return): Call Remove_Side_Effects\n+\tinstead of removing side effects manually before the call to\n+\t_Postconditions.\n+\n 2015-05-26  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Op_Expon): Deal with problem of wrong"}, {"sha": "bf01f77a609691f8e9e0b703c84e0e584f43d90b", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -517,6 +517,7 @@ package body Aspects is\n     Aspect_Depends                      => Aspect_Depends,\n     Aspect_Dimension                    => Aspect_Dimension,\n     Aspect_Dimension_System             => Aspect_Dimension_System,\n+    Aspect_Disable_Controlled           => Aspect_Disable_Controlled,\n     Aspect_Discard_Names                => Aspect_Discard_Names,\n     Aspect_Dispatching_Domain           => Aspect_Dispatching_Domain,\n     Aspect_Dynamic_Predicate            => Aspect_Predicate,"}, {"sha": "e2156224deecf11a8ed7da249f706d43918c938a", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -171,6 +171,7 @@ package Aspects is\n       Aspect_Asynchronous,\n       Aspect_Atomic,\n       Aspect_Atomic_Components,\n+      Aspect_Disable_Controlled,            -- GNAT\n       Aspect_Discard_Names,\n       Aspect_Effective_Reads,               -- GNAT\n       Aspect_Effective_Writes,              -- GNAT\n@@ -414,6 +415,7 @@ package Aspects is\n       Aspect_Depends                      => Name_Depends,\n       Aspect_Dimension                    => Name_Dimension,\n       Aspect_Dimension_System             => Name_Dimension_System,\n+      Aspect_Disable_Controlled           => Name_Disable_Controlled,\n       Aspect_Discard_Names                => Name_Discard_Names,\n       Aspect_Dispatching_Domain           => Name_Dispatching_Domain,\n       Aspect_Dynamic_Predicate            => Name_Dynamic_Predicate,\n@@ -704,6 +706,7 @@ package Aspects is\n       Aspect_Depends                      => Never_Delay,\n       Aspect_Dimension                    => Never_Delay,\n       Aspect_Dimension_System             => Never_Delay,\n+      Aspect_Disable_Controlled           => Never_Delay,\n       Aspect_Effective_Reads              => Never_Delay,\n       Aspect_Effective_Writes             => Never_Delay,\n       Aspect_Extensions_Visible           => Never_Delay,"}, {"sha": "285e924c11ae167338944ae0223681d67d38c4d9", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -558,6 +558,7 @@ package body Einfo is\n \n    --    Has_Implicit_Dereference        Flag251\n    --    Is_Processed_Transient          Flag252\n+   --    Disable_Controlled              Flag253\n    --    Is_Implementation_Defined       Flag254\n    --    Is_Predicate_Function           Flag255\n    --    Is_Predicate_Function_M         Flag256\n@@ -595,7 +596,6 @@ package body Einfo is\n    --    Is_Volatile_Full_Access         Flag285\n    --    Needs_Typedef                   Flag286\n \n-   --    (unused)                        Flag253\n    --    (unused)                        Flag287\n    --    (unused)                        Flag288\n    --    (unused)                        Flag289\n@@ -1026,6 +1026,11 @@ package body Einfo is\n       return Node20 (Id);\n    end Directly_Designated_Type;\n \n+   function Disable_Controlled (Id : E) return B is\n+   begin\n+      return Flag253 (Base_Type (Id));\n+   end Disable_Controlled;\n+\n    function Discard_Names (Id : E) return B is\n    begin\n       return Flag88 (Id);\n@@ -3941,6 +3946,12 @@ package body Einfo is\n       Set_Node20 (Id, V);\n    end Set_Directly_Designated_Type;\n \n+   procedure Set_Disable_Controlled (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Is_Type (Id) and then Is_Base_Type (Id));\n+      Set_Flag253 (Id, V);\n+   end Set_Disable_Controlled;\n+\n    procedure Set_Discard_Names (Id : E; V : B := True) is\n    begin\n       Set_Flag88 (Id, V);\n@@ -7394,6 +7405,15 @@ package body Einfo is\n         K = E_Constant or else K = E_In_Parameter or else K = E_Loop_Parameter;\n    end Is_Constant_Object;\n \n+   --------------------------\n+   -- Is_Controlled_Active --\n+   --------------------------\n+\n+   function Is_Controlled_Active (Id : E) return B is\n+   begin\n+      return Is_Controlled (Id) and then not Disable_Controlled (Id);\n+   end Is_Controlled_Active;\n+\n    --------------------\n    -- Is_Discriminal --\n    --------------------"}, {"sha": "1c0ee5168d6704659d4a403b13d67f600bcadaa5", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -911,6 +911,10 @@ package Einfo is\n --       Designated_Type obtains this full type in the case of access to an\n --       incomplete type.\n \n+--    Disable_Controlled (Flag253)\n+--      Present in all entities. Set for controlled type (Is_Controlled flag\n+--      set) if the aspect Disable_Controlled is active for the type.\n+\n --    Discard_Names (Flag88)\n --       Defined in types and exception entities. Set if pragma Discard_Names\n --       applies to the entity. It is also set for declarative regions and\n@@ -2337,6 +2341,10 @@ package Einfo is\n --       i.e. is either a descendant of Ada.Finalization.Controlled or of\n --       Ada.Finalization.Limited_Controlled.\n \n+--    Is_Controlled_Active (synth) [base type only]\n+--       Defined in all type entities. Set if Is_Controlled is set for the\n+--       type, and Disable_Controlled is not set.\n+\n --    Is_Controlling_Formal (Flag97)\n --       Defined in all Formal_Kind entities. Marks the controlling parameters\n --       of dispatching operations.\n@@ -5413,6 +5421,7 @@ package Einfo is\n    --    Linker_Section_Pragma               (Node33)\n \n    --    Depends_On_Private                  (Flag14)\n+   --    Disable_Controlled                  (Flag253)\n    --    Discard_Names                       (Flag88)\n    --    Finalize_Storage_Only               (Flag158)  (base type only)\n    --    From_Limited_With                   (Flag159)\n@@ -5491,6 +5500,7 @@ package Einfo is\n    --    Invariant_Procedure                 (synth)\n    --    Is_Access_Protected_Subprogram_Type (synth)\n    --    Is_Atomic_Or_VFA                    (synth)\n+   --    Is_Controlled_Active                (synth)\n    --    Predicate_Function                  (synth)\n    --    Predicate_Function_M                (synth)\n    --    Root_Type                           (synth)\n@@ -6724,6 +6734,7 @@ package Einfo is\n    function Digits_Value                        (Id : E) return U;\n    function Direct_Primitive_Operations         (Id : E) return L;\n    function Directly_Designated_Type            (Id : E) return E;\n+   function Disable_Controlled                  (Id : E) return B;\n    function Discard_Names                       (Id : E) return B;\n    function Discriminal                         (Id : E) return E;\n    function Discriminal_Link                    (Id : E) return E;\n@@ -7206,6 +7217,7 @@ package Einfo is\n    function Is_Base_Type                        (Id : E) return B;\n    function Is_Boolean_Type                     (Id : E) return B;\n    function Is_Constant_Object                  (Id : E) return B;\n+   function Is_Controlled_Active                (Id : E) return B;\n    function Is_Discriminal                      (Id : E) return B;\n    function Is_Dynamic_Scope                    (Id : E) return B;\n    function Is_External_State                   (Id : E) return B;\n@@ -7380,6 +7392,7 @@ package Einfo is\n    procedure Set_Digits_Value                    (Id : E; V : U);\n    procedure Set_Direct_Primitive_Operations     (Id : E; V : L);\n    procedure Set_Directly_Designated_Type        (Id : E; V : E);\n+   procedure Set_Disable_Controlled              (Id : E; V : B := True);\n    procedure Set_Discard_Names                   (Id : E; V : B := True);\n    procedure Set_Discriminal                     (Id : E; V : E);\n    procedure Set_Discriminal_Link                (Id : E; V : E);\n@@ -8155,6 +8168,7 @@ package Einfo is\n    pragma Inline (Digits_Value);\n    pragma Inline (Direct_Primitive_Operations);\n    pragma Inline (Directly_Designated_Type);\n+   pragma Inline (Disable_Controlled);\n    pragma Inline (Discard_Names);\n    pragma Inline (Discriminal);\n    pragma Inline (Discriminal_Link);\n@@ -8658,6 +8672,7 @@ package Einfo is\n    pragma Inline (Set_Digits_Value);\n    pragma Inline (Set_Direct_Primitive_Operations);\n    pragma Inline (Set_Directly_Designated_Type);\n+   pragma Inline (Set_Disable_Controlled);\n    pragma Inline (Set_Discard_Names);\n    pragma Inline (Set_Discriminal);\n    pragma Inline (Set_Discriminal_Link);\n@@ -9062,6 +9077,7 @@ package Einfo is\n \n    pragma Inline (Base_Type);\n    pragma Inline (Is_Base_Type);\n+   pragma Inline (Is_Controlled_Active);\n    pragma Inline (Is_Package_Or_Generic_Package);\n    pragma Inline (Is_Packed_Array);\n    pragma Inline (Is_Subprogram_Or_Generic_Subprogram);"}, {"sha": "0bb41fd8a558979291daa859387bd0757ca9c0cf", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -6936,9 +6936,10 @@ package body Exp_Ch3 is\n          --  type. See Make_CW_Equivalent_Type.\n \n          if not Is_Class_Wide_Equivalent_Type (Def_Id)\n-           and then (Has_Controlled_Component (Comp_Typ)\n-                      or else (Chars (Comp) /= Name_uParent\n-                                and then Is_Controlled (Comp_Typ)))\n+           and then\n+             (Has_Controlled_Component (Comp_Typ)\n+               or else (Chars (Comp) /= Name_uParent\n+                         and then (Is_Controlled_Active (Comp_Typ))))\n          then\n             Set_Has_Controlled_Component (Def_Id);\n          end if;"}, {"sha": "e89103ce3f12e1302fcc89a300893613f75e6f2e", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 20, "deletions": 107, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -1979,7 +1979,7 @@ package body Exp_Ch6 is\n                --  To deal with this, we replace the call by\n \n                --    do\n-               --       Tnnn : function-result-type renames function-call;\n+               --       Tnnn : constant function-result-type := function-call;\n                --       Post_Call actions\n                --    in\n                --       Tnnn;\n@@ -1996,10 +1996,11 @@ package body Exp_Ch6 is\n \n                begin\n                   Prepend_To (Post_Call,\n-                    Make_Object_Renaming_Declaration (Loc,\n+                    Make_Object_Declaration (Loc,\n                       Defining_Identifier => Tnnn,\n-                      Subtype_Mark        => New_Occurrence_Of (FRTyp, Loc),\n-                      Name                => Name));\n+                      Object_Definition   => New_Occurrence_Of (FRTyp, Loc),\n+                      Constant_Present    => True,\n+                      Expression          => Name));\n \n                   Rewrite (N,\n                     Make_Expression_With_Actions (Loc,\n@@ -6619,119 +6620,31 @@ package body Exp_Ch6 is\n       if Ekind (Scope_Id) = E_Function\n         and then Present (Postconditions_Proc (Scope_Id))\n       then\n-         --  We are going to reference the returned value twice in this case,\n-         --  once in the call to _Postconditions, and once in the actual return\n-         --  statement, but we can't have side effects happening twice, and in\n-         --  any case for efficiency we don't want to do the computation twice.\n-\n-         --  If the returned expression is an entity name, we don't need to\n-         --  worry since it is efficient and safe to reference it twice, that's\n-         --  also true for literals other than string literals, and for the\n-         --  case of X.all where X is an entity name.\n-\n-         if Is_Entity_Name (Exp)\n-           or else Nkind_In (Exp, N_Character_Literal,\n-                                  N_Integer_Literal,\n-                                  N_Real_Literal)\n-           or else (Nkind (Exp) = N_Explicit_Dereference\n-                     and then Is_Entity_Name (Prefix (Exp)))\n+         --  In the case of discriminated objects, we have created a\n+         --  constrained subtype above, and used the underlying type. This\n+         --  transformation is post-analysis and harmless, except that now the\n+         --  call to the post-condition will be analyzed and the type kinds\n+         --  have to match.\n+\n+         if Nkind (Exp) = N_Unchecked_Type_Conversion\n+           and then Is_Private_Type (R_Type) /= Is_Private_Type (Etype (Exp))\n          then\n-            null;\n-\n-         --  Otherwise we are going to need a temporary to capture the value\n-\n-         else\n-            declare\n-               ExpR : Node_Id            := Relocate_Node (Exp);\n-               Tnn  : constant Entity_Id := Make_Temporary (Loc, 'T', ExpR);\n-\n-            begin\n-               --  In the case of discriminated objects, we have created a\n-               --  constrained subtype above, and used the underlying type.\n-               --  This transformation is post-analysis and harmless, except\n-               --  that now the call to the post-condition will be analyzed and\n-               --  type kinds have to match.\n-\n-               if Nkind (ExpR) = N_Unchecked_Type_Conversion\n-                 and then\n-                   Is_Private_Type (R_Type) /= Is_Private_Type (Etype (ExpR))\n-               then\n-                  ExpR := Expression (ExpR);\n-               end if;\n-\n-               --  For a complex expression of an elementary type, capture\n-               --  value in the temporary and use it as the reference.\n-\n-               if Is_Elementary_Type (R_Type) then\n-                  Insert_Action (Exp,\n-                    Make_Object_Declaration (Loc,\n-                      Defining_Identifier => Tnn,\n-                      Constant_Present    => True,\n-                      Object_Definition   => New_Occurrence_Of (R_Type, Loc),\n-                      Expression          => ExpR),\n-                    Suppress => All_Checks);\n-\n-                  Rewrite (Exp, New_Occurrence_Of (Tnn, Loc));\n-\n-               --  If we have something we can rename, generate a renaming of\n-               --  the object and replace the expression with a reference\n-\n-               elsif Is_Object_Reference (Exp) then\n-                  Insert_Action (Exp,\n-                    Make_Object_Renaming_Declaration (Loc,\n-                      Defining_Identifier => Tnn,\n-                      Subtype_Mark        => New_Occurrence_Of (R_Type, Loc),\n-                      Name                => ExpR),\n-                    Suppress => All_Checks);\n-\n-                  Rewrite (Exp, New_Occurrence_Of (Tnn, Loc));\n-\n-               --  Otherwise we have something like a string literal or an\n-               --  aggregate. We could copy the value, but that would be\n-               --  inefficient. Instead we make a reference to the value and\n-               --  capture this reference with a renaming, the expression is\n-               --  then replaced by a dereference of this renaming.\n+            Rewrite (Exp, Expression (Relocate_Node (Exp)));\n+         end if;\n \n-               else\n-                  --  For now, copy the value, since the code below does not\n-                  --  seem to work correctly ???\n+         --  We are going to reference the returned value twice in this case,\n+         --  once in the call to _Postconditions, and once in the actual return\n+         --  statement, but we can't have side effects happening twice.\n \n-                  Insert_Action (Exp,\n-                    Make_Object_Declaration (Loc,\n-                      Defining_Identifier => Tnn,\n-                      Constant_Present    => True,\n-                      Object_Definition   => New_Occurrence_Of (R_Type, Loc),\n-                      Expression          => Relocate_Node (Exp)),\n-                    Suppress => All_Checks);\n-\n-                  Rewrite (Exp, New_Occurrence_Of (Tnn, Loc));\n-\n-                  --  Insert_Action (Exp,\n-                  --    Make_Object_Renaming_Declaration (Loc,\n-                  --      Defining_Identifier => Tnn,\n-                  --      Access_Definition =>\n-                  --        Make_Access_Definition (Loc,\n-                  --          All_Present  => True,\n-                  --          Subtype_Mark => New_Occurrence_Of (R_Type, Loc)),\n-                  --      Name =>\n-                  --        Make_Reference (Loc,\n-                  --          Prefix => Relocate_Node (Exp))),\n-                  --    Suppress => All_Checks);\n-\n-                  --  Rewrite (Exp,\n-                  --    Make_Explicit_Dereference (Loc,\n-                  --      Prefix => New_Occurrence_Of (Tnn, Loc)));\n-               end if;\n-            end;\n-         end if;\n+         Remove_Side_Effects (Exp);\n \n          --  Generate call to _Postconditions\n \n          Insert_Action (Exp,\n            Make_Procedure_Call_Statement (Loc,\n              Name                   =>\n                New_Occurrence_Of (Postconditions_Proc (Scope_Id), Loc),\n-             Parameter_Associations => New_List (Duplicate_Subexpr (Exp))));\n+             Parameter_Associations => New_List (New_Copy_Tree (Exp))));\n       end if;\n \n       --  Ada 2005 (AI-251): If this return statement corresponds with an"}, {"sha": "046b18917284e6b068810f1fec466bf4976c6839", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -6848,12 +6848,16 @@ package body Exp_Util is\n       then\n          return False;\n \n+      --  Never needs finalization if Disable_Controlled set\n+\n+      elsif Disable_Controlled (T) then\n+         return False;\n+\n       else\n          --  Class-wide types are treated as controlled because derivations\n          --  from the root type can introduce controlled components.\n \n-         return\n-           Is_Class_Wide_Type (T)\n+         return Is_Class_Wide_Type (T)\n              or else Is_Controlled (T)\n              or else Has_Controlled_Component (T)\n              or else Has_Some_Controlled_Component (T)"}, {"sha": "f411e1e27707475edaf0b0ec52031b3e7fa668e4", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -2226,7 +2226,7 @@ package body Freeze is\n \n             --  Propagate flags for component type\n \n-            if Is_Controlled (Component_Type (Arr))\n+            if Is_Controlled_Active (Component_Type (Arr))\n               or else Has_Controlled_Component (Ctyp)\n             then\n                Set_Has_Controlled_Component (Arr);\n@@ -4106,7 +4106,7 @@ package body Freeze is\n                    (Has_Controlled_Component (Etype (Comp))\n                      or else\n                        (Chars (Comp) /= Name_uParent\n-                         and then Is_Controlled (Etype (Comp)))\n+                         and then Is_Controlled_Active (Etype (Comp)))\n                      or else\n                        (Is_Protected_Type (Etype (Comp))\n                          and then"}, {"sha": "29153d7a67bff3a415ada93ed76281f4f706afe4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -1205,8 +1205,7 @@ package body Sem_Ch13 is\n \n    procedure Analyze_Aspect_Specifications (N : Node_Id; E : Entity_Id) is\n       procedure Decorate (Asp : Node_Id; Prag : Node_Id);\n-      --  Establish linkages between an aspect and its corresponding\n-      --  pragma.\n+      --  Establish linkages between an aspect and its corresponding pragma\n \n       procedure Insert_After_SPARK_Mode\n         (Prag    : Node_Id;\n@@ -1235,7 +1234,7 @@ package body Sem_Ch13 is\n \n       procedure Decorate (Asp : Node_Id; Prag : Node_Id) is\n       begin\n-         Set_Aspect_Rep_Item           (Asp,  Prag);\n+         Set_Aspect_Rep_Item           (Asp, Prag);\n          Set_Corresponding_Aspect      (Prag, Asp);\n          Set_From_Aspect_Specification (Prag);\n          Set_Parent                    (Prag, Asp);\n@@ -3055,7 +3054,7 @@ package body Sem_Ch13 is\n                --  Case 5: Special handling for aspects with an optional\n                --  boolean argument.\n \n-               --  In the general case, the corresponding pragma cannot be\n+               --  In the delayed case, the corresponding pragma cannot be\n                --  generated yet because the evaluation of the boolean needs\n                --  to be delayed till the freeze point.\n \n@@ -3144,6 +3143,25 @@ package body Sem_Ch13 is\n                         end if;\n                      end if;\n \n+                     goto Continue;\n+\n+                  --  Disable_Controlled\n+\n+                  elsif A_Id = Aspect_Disable_Controlled then\n+                     if Ekind (E) /= E_Record_Type\n+                       or else not Is_Controlled (E)\n+                     then\n+                        Error_Msg_N\n+                          (\"aspect % requires controlled record type\", Aspect);\n+                        goto Continue;\n+                     end if;\n+\n+                     if not Present (Expr)\n+                       or else Is_True (Static_Boolean (Expr))\n+                     then\n+                        Set_Disable_Controlled (E);\n+                     end if;\n+\n                      goto Continue;\n                   end if;\n "}, {"sha": "de8b1c4add5020d41859c5a107f1e271153503e7", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -4386,7 +4386,7 @@ package body Sem_Ch3 is\n         and then not Is_Constrained (Underlying_Type (T))\n         and then not Is_Aliased (Id)\n         and then not Is_Class_Wide_Type (T)\n-        and then not Is_Controlled (T)\n+        and then not Is_Controlled_Active (T)\n         and then not Has_Controlled_Component (Base_Type (T))\n         and then Expander_Active\n       then\n@@ -5614,7 +5614,7 @@ package body Sem_Ch3 is\n          Set_Packed_Array_Impl_Type (Implicit_Base, Empty);\n          Set_Has_Controlled_Component (Implicit_Base,\n            Has_Controlled_Component (Element_Type)\n-             or else Is_Controlled  (Element_Type));\n+             or else Is_Controlled_Active  (Element_Type));\n          Set_Finalize_Storage_Only (Implicit_Base,\n            Finalize_Storage_Only (Element_Type));\n \n@@ -5640,7 +5640,7 @@ package body Sem_Ch3 is\n          Set_Has_Controlled_Component (T, Has_Controlled_Component\n                                                         (Element_Type)\n                                             or else\n-                                          Is_Controlled (Element_Type));\n+                                          Is_Controlled_Active (Element_Type));\n          Set_Finalize_Storage_Only    (T, Finalize_Storage_Only\n                                                         (Element_Type));\n          Set_Default_SSO              (T);\n@@ -7351,16 +7351,18 @@ package body Sem_Ch3 is\n             Error_Msg_N (\"cannot add discriminants to untagged type\", N);\n          end if;\n \n-         Set_Stored_Constraint (Derived_Type, No_Elist);\n-         Set_Is_Constrained    (Derived_Type, Is_Constrained (Parent_Type));\n-         Set_Is_Controlled     (Derived_Type, Is_Controlled  (Parent_Type));\n+         Set_Stored_Constraint  (Derived_Type, No_Elist);\n+         Set_Is_Constrained     (Derived_Type, Is_Constrained (Parent_Type));\n+         Set_Is_Controlled      (Derived_Type, Is_Controlled  (Parent_Type));\n+         Set_Disable_Controlled (Derived_Type, Disable_Controlled\n+                                                              (Parent_Type));\n          Set_Has_Controlled_Component\n-                               (Derived_Type, Has_Controlled_Component\n-                                                             (Parent_Type));\n+                                (Derived_Type, Has_Controlled_Component\n+                                                              (Parent_Type));\n \n          --  Direct controlled types do not inherit Finalize_Storage_Only flag\n \n-         if not Is_Controlled  (Parent_Type) then\n+         if not Is_Controlled_Active (Parent_Type) then\n             Set_Finalize_Storage_Only\n               (Base_Type (Derived_Type), Finalize_Storage_Only (Parent_Type));\n          end if;\n@@ -8974,16 +8976,18 @@ package body Sem_Ch3 is\n    begin\n       --  Set common attributes\n \n-      Set_Scope          (Derived_Type, Current_Scope);\n+      Set_Scope              (Derived_Type, Current_Scope);\n+\n+      Set_Etype              (Derived_Type,                Parent_Base);\n+      Set_Ekind              (Derived_Type, Ekind         (Parent_Base));\n+      Set_Has_Task           (Derived_Type, Has_Task      (Parent_Base));\n+      Set_Has_Protected      (Derived_Type, Has_Protected (Parent_Base));\n \n-      Set_Etype          (Derived_Type,                Parent_Base);\n-      Set_Ekind          (Derived_Type, Ekind         (Parent_Base));\n-      Set_Has_Task       (Derived_Type, Has_Task      (Parent_Base));\n-      Set_Has_Protected  (Derived_Type, Has_Protected (Parent_Base));\n+      Set_Size_Info          (Derived_Type,                     Parent_Type);\n+      Set_RM_Size            (Derived_Type, RM_Size            (Parent_Type));\n+      Set_Is_Controlled      (Derived_Type, Is_Controlled      (Parent_Type));\n+      Set_Disable_Controlled (Derived_Type, Disable_Controlled (Parent_Type));\n \n-      Set_Size_Info      (Derived_Type,                 Parent_Type);\n-      Set_RM_Size        (Derived_Type, RM_Size        (Parent_Type));\n-      Set_Is_Controlled  (Derived_Type, Is_Controlled  (Parent_Type));\n       Set_Is_Tagged_Type (Derived_Type, Is_Tagged_Type (Parent_Type));\n       Set_Is_Volatile    (Derived_Type, Is_Volatile    (Parent_Type));\n \n@@ -21174,7 +21178,7 @@ package body Sem_Ch3 is\n          end;\n       end if;\n \n-      Final_Storage_Only := not Is_Controlled (T);\n+      Final_Storage_Only := not Is_Controlled_Active (T);\n \n       --  Ada 2005: Check whether an explicit Limited is present in a derived\n       --  type declaration.\n@@ -21240,7 +21244,8 @@ package body Sem_Ch3 is\n          elsif not Is_Class_Wide_Equivalent_Type (T)\n            and then (Has_Controlled_Component (Etype (Component))\n                       or else (Chars (Component) /= Name_uParent\n-                                and then Is_Controlled (Etype (Component))))\n+                                and then Is_Controlled_Active\n+                                           (Etype (Component))))\n          then\n             Set_Has_Controlled_Component (T, True);\n             Final_Storage_Only :="}, {"sha": "b76e6295059cb85dee830071728a284b8063744d", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c859345327b2c2858ae8a120d2b714d928b43130/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=c859345327b2c2858ae8a120d2b714d928b43130", "patch": "@@ -141,6 +141,7 @@ package Snames is\n    Name_Default_Component_Value        : constant Name_Id := N + $;\n    Name_Dimension                      : constant Name_Id := N + $;\n    Name_Dimension_System               : constant Name_Id := N + $;\n+   Name_Disable_Controlled             : constant Name_Id := N + $;\n    Name_Dynamic_Predicate              : constant Name_Id := N + $;\n    Name_Static_Predicate               : constant Name_Id := N + $;\n    Name_Synchronization                : constant Name_Id := N + $;"}]}