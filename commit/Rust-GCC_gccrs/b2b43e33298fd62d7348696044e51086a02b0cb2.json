{"sha": "b2b43e33298fd62d7348696044e51086a02b0cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiNDNlMzMyOThmZDYyZDczNDg2OTYwNDRlNTEwODZhMDJiMGNiMg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-06-03T09:36:08Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-06-03T09:36:08Z"}, "message": "Fix memory report layout at various places.\n\n\t* alloc-pool.h (struct pool_usage): Correct space padding.\n\t* ggc-page.c (ggc_print_statistics): Align columns in a report.\n\t* mem-stats.h (struct mem_usage): Add argument to print_dash_line.\n\t* tree.c (dump_tree_statistics): Align columns in a report.\n\nFrom-SVN: r224071", "tree": {"sha": "7c6a8149f569ee6faec897bb31d43beb8e5b4577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c6a8149f569ee6faec897bb31d43beb8e5b4577"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2b43e33298fd62d7348696044e51086a02b0cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b43e33298fd62d7348696044e51086a02b0cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b43e33298fd62d7348696044e51086a02b0cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b43e33298fd62d7348696044e51086a02b0cb2/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac05926156c0997b191af1176122ee3d8663d19e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac05926156c0997b191af1176122ee3d8663d19e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac05926156c0997b191af1176122ee3d8663d19e"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "9f054ff145724bc7470451b3531e05f7bb57bb4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2b43e33298fd62d7348696044e51086a02b0cb2", "patch": "@@ -1,3 +1,10 @@\n+2015-06-03  Martin Liska  <mliska@suse.cz>\n+\n+\t* alloc-pool.h (struct pool_usage): Correct space padding.\n+\t* ggc-page.c (ggc_print_statistics): Align columns in a report.\n+\t* mem-stats.h (struct mem_usage): Add argument to print_dash_line.\n+\t* tree.c (dump_tree_statistics): Align columns in a report.\n+\n 2015-06-03  Martin Liska  <mliska@suse.cz>\n \n \t* alloc-pool.c (allocate_pool_descriptor): Remove."}, {"sha": "b10cfa413b844444542c371c3bb923d9ea6eb659", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=b2b43e33298fd62d7348696044e51086a02b0cb2", "patch": "@@ -76,7 +76,7 @@ struct pool_usage: public mem_usage\n   inline void dump_footer ()\n   {\n     print_dash_line ();\n-    fprintf (stderr, \"%s%75li%10li\\n\", \"Total\", (long)m_instances,\n+    fprintf (stderr, \"%s%82li%10li\\n\", \"Total\", (long)m_instances,\n \t     (long)m_allocated);\n     print_dash_line ();\n   }"}, {"sha": "7fceeba2a5113338e78c335ed167f0f97b7e4f73", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=b2b43e33298fd62d7348696044e51086a02b0cb2", "patch": "@@ -2268,7 +2268,7 @@ ggc_print_statistics (void)\n      allocation.  */\n   fprintf (stderr,\n            \"Memory still allocated at the end of the compilation process\\n\");\n-  fprintf (stderr, \"%-5s %10s  %10s  %10s\\n\",\n+  fprintf (stderr, \"%-8s %10s  %10s  %10s\\n\",\n \t   \"Size\", \"Allocated\", \"Used\", \"Overhead\");\n   for (i = 0; i < NUM_ORDERS; ++i)\n     {\n@@ -2295,47 +2295,51 @@ ggc_print_statistics (void)\n \t  overhead += (sizeof (page_entry) - sizeof (long)\n \t\t       + BITMAP_SIZE (OBJECTS_IN_PAGE (p) + 1));\n \t}\n-      fprintf (stderr, \"%-5lu %10lu%c %10lu%c %10lu%c\\n\",\n+      fprintf (stderr, \"%-8lu %10lu%c %10lu%c %10lu%c\\n\",\n \t       (unsigned long) OBJECT_SIZE (i),\n \t       SCALE (allocated), STAT_LABEL (allocated),\n \t       SCALE (in_use), STAT_LABEL (in_use),\n \t       SCALE (overhead), STAT_LABEL (overhead));\n       total_overhead += overhead;\n     }\n-  fprintf (stderr, \"%-5s %10lu%c %10lu%c %10lu%c\\n\", \"Total\",\n+  fprintf (stderr, \"%-8s %10lu%c %10lu%c %10lu%c\\n\", \"Total\",\n \t   SCALE (G.bytes_mapped), STAT_LABEL (G.bytes_mapped),\n \t   SCALE (G.allocated), STAT_LABEL (G.allocated),\n \t   SCALE (total_overhead), STAT_LABEL (total_overhead));\n \n   if (GATHER_STATISTICS)\n     {\n-      fprintf (stderr, \"\\nTotal allocations and overheads during the compilation process\\n\");\n+      fprintf (stderr, \"\\nTotal allocations and overheads during \"\n+\t       \"the compilation process\\n\");\n \n-      fprintf (stderr, \"Total Overhead:                        %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_overhead);\n-      fprintf (stderr, \"Total Allocated:                       %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n+      fprintf (stderr, \"Total Overhead:                          %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead);\n+      fprintf (stderr, \"Total Allocated:                         %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\",\n \t       G.stats.total_allocated);\n \n-      fprintf (stderr, \"Total Overhead  under  32B:            %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_overhead_under32);\n-      fprintf (stderr, \"Total Allocated under  32B:            %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_allocated_under32);\n-      fprintf (stderr, \"Total Overhead  under  64B:            %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_overhead_under64);\n-      fprintf (stderr, \"Total Allocated under  64B:            %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_allocated_under64);\n-      fprintf (stderr, \"Total Overhead  under 128B:            %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_overhead_under128);\n-      fprintf (stderr, \"Total Allocated under 128B:            %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n-\t       G.stats.total_allocated_under128);\n+      fprintf (stderr, \"Total Overhead  under  32B:              %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead_under32);\n+      fprintf (stderr, \"Total Allocated under  32B:              %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_allocated_under32);\n+      fprintf (stderr, \"Total Overhead  under  64B:              %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead_under64);\n+      fprintf (stderr, \"Total Allocated under  64B:              %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_allocated_under64);\n+      fprintf (stderr, \"Total Overhead  under 128B:              %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_overhead_under128);\n+      fprintf (stderr, \"Total Allocated under 128B:              %10\"\n+\t       HOST_LONG_LONG_FORMAT \"d\\n\", G.stats.total_allocated_under128);\n \n       for (i = 0; i < NUM_ORDERS; i++)\n \tif (G.stats.total_allocated_per_order[i])\n \t  {\n-\t    fprintf (stderr, \"Total Overhead  page size %7lu:     %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n+\t    fprintf (stderr, \"Total Overhead  page size %9lu:     %10\"\n+\t\t     HOST_LONG_LONG_FORMAT \"d\\n\",\n \t\t     (unsigned long) OBJECT_SIZE (i),\n \t\t     G.stats.total_overhead_per_order[i]);\n-\t    fprintf (stderr, \"Total Allocated page size %7lu:     %10\" HOST_LONG_LONG_FORMAT \"d\\n\",\n+\t    fprintf (stderr, \"Total Allocated page size %9lu:     %10\"\n+\t\t     HOST_LONG_LONG_FORMAT \"d\\n\",\n \t\t     (unsigned long) OBJECT_SIZE (i),\n \t\t     G.stats.total_allocated_per_order[i]);\n \t  }"}, {"sha": "641f7c1c787e345ea9714366d7f66296af270934", "filename": "gcc/mem-stats.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Fmem-stats.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Fmem-stats.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmem-stats.h?ref=b2b43e33298fd62d7348696044e51086a02b0cb2", "patch": "@@ -185,9 +185,9 @@ struct mem_usage\n   }\n \n   /* Print line made of dashes.  */\n-  static inline void print_dash_line ()\n+  static inline void print_dash_line (size_t count = 140)\n   {\n-    fprintf (stderr, \"%s\\n\", std::string (140, '-').c_str ());\n+    fprintf (stderr, \"%s\\n\", std::string (count, '-').c_str ());\n   }\n \n   /* Dump header with NAME.  */"}, {"sha": "701a592cca2816596b0344e23dc37c374ca3b1e7", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2b43e33298fd62d7348696044e51086a02b0cb2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b2b43e33298fd62d7348696044e51086a02b0cb2", "patch": "@@ -9156,6 +9156,8 @@ get_callee_fndecl (const_tree call)\n   return NULL_TREE;\n }\n \n+#define TREE_MEM_USAGE_SPACES 40\n+\n /* Print debugging information about tree nodes generated during the compile,\n    and any language-specific information.  */\n \n@@ -9166,8 +9168,8 @@ dump_tree_statistics (void)\n     {\n       int i;\n       int total_nodes, total_bytes;\n-      fprintf (stderr, \"Kind                   Nodes      Bytes\\n\");\n-      fprintf (stderr, \"---------------------------------------\\n\");\n+      fprintf (stderr, \"\\nKind                   Nodes      Bytes\\n\");\n+      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       total_nodes = total_bytes = 0;\n       for (i = 0; i < (int) all_kinds; i++)\n \t{\n@@ -9176,17 +9178,20 @@ dump_tree_statistics (void)\n \t  total_nodes += tree_node_counts[i];\n \t  total_bytes += tree_node_sizes[i];\n \t}\n-      fprintf (stderr, \"---------------------------------------\\n\");\n+      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       fprintf (stderr, \"%-20s %7d %10d\\n\", \"Total\", total_nodes, total_bytes);\n-      fprintf (stderr, \"---------------------------------------\\n\");\n+      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       fprintf (stderr, \"Code                   Nodes\\n\");\n-      fprintf (stderr, \"----------------------------\\n\");\n+      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n       for (i = 0; i < (int) MAX_TREE_CODES; i++)\n-\tfprintf (stderr, \"%-20s %7d\\n\", get_tree_code_name ((enum tree_code) i),\n+\tfprintf (stderr, \"%-32s %7d\\n\", get_tree_code_name ((enum tree_code) i),\n                  tree_code_counts[i]);\n-      fprintf (stderr, \"----------------------------\\n\");\n+      mem_usage::print_dash_line (TREE_MEM_USAGE_SPACES);\n+      fprintf (stderr, \"\\n\");\n       ssanames_print_statistics ();\n+      fprintf (stderr, \"\\n\");\n       phinodes_print_statistics ();\n+      fprintf (stderr, \"\\n\");\n     }\n   else\n     fprintf (stderr, \"(No per-node statistics)\\n\");"}]}