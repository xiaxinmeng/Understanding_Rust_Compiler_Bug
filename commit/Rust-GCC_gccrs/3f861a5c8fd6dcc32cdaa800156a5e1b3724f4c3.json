{"sha": "3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "node_id": "C_kwDOANBUbNoAKDNmODYxYTVjOGZkNmRjYzMyY2RhYTgwMDE1NmE1ZTFiMzcyNGY0YzM", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-24T17:49:38Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2021-10-24T17:52:02Z"}, "message": "Revise -mdisable-fpregs option and add new -msoft-mult option\n\nThe behavior of the -mdisable-fpregs is confusing in that it doesn't\ndisable the use of the floating-point registers in all situations.\nThe -msoft-float disables the use of the floating-point registers in\nall situations.  The Linux kernel only needs to disable use of the\nxmpyu instruction to avoid using the floating-point registers.\n\nThis change revises the -mdisable-fpregs option to disable the use of\nthe floating-point registers in all situations.  It is now equivalent\nto the -msoft-float option.  A new -msoft-mult option is added to\ndisable use of the xmpyu instruction.  The libgcc library can be\ncompiled with the -msoft-mult option to avoid using hardware integer\nmultiplication.\n\n2021-10-24  John David Anglin  <danglin@gcc.gnu.org>\n\ngcc/ChangeLog:\n\n\t* config/pa/pa-d.c (pa_d_handle_target_float_abi): Don't check\n\tTARGET_DISABLE_FPREGS.\n\t* config/pa/pa.c (fix_range): Use MASK_SOFT_FLOAT instead of\n\tMASK_DISABLE_FPREGS.\n\t(hppa_rtx_costs): Don't check TARGET_DISABLE_FPREGS.  Adjust\n\tcost of hardware integer multiplication.\n\t(pa_conditional_register_usage): Don't check TARGET_DISABLE_FPREGS.\n\t* config/pa/pa.h (INT14_OK_STRICT): Likewise.\n\t* config/pa/pa.md: Don't check TARGET_DISABLE_FPREGS. Check\n\tTARGET_SOFT_FLOAT in patterns that use xmpyu instruction.\n\t* config/pa/pa.opt (mdisable-fpregs): Change target mask to\n\tSOFT_FLOAT.  Revise comment.\n\t(msoft-float): New option.", "tree": {"sha": "1f5fe6ac3ea7035f4e516f0ed9e135fac08c5bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f5fe6ac3ea7035f4e516f0ed9e135fac08c5bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/comments", "author": null, "committer": null, "parents": [{"sha": "c448579312b061e54acf0cdc0666eed4059f9fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c448579312b061e54acf0cdc0666eed4059f9fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c448579312b061e54acf0cdc0666eed4059f9fa4"}], "stats": {"total": 43, "additions": 23, "deletions": 20}, "files": [{"sha": "14ef8cae343b1cbe8db3159d7a51467cb350957b", "filename": "gcc/config/pa/pa-d.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-d.c?ref=3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "patch": "@@ -47,7 +47,7 @@ pa_d_handle_target_float_abi (void)\n {\n   const char *abi;\n \n-  if (TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\n+  if (TARGET_SOFT_FLOAT)\n     abi = \"soft\";\n   else\n     abi = \"hard\";"}, {"sha": "21b812e9be73e0a6fee870d9844b3d52f3ad4bc5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "patch": "@@ -497,7 +497,7 @@ fix_range (const char *const_str)\n       break;\n \n   if (i > FP_REG_LAST)\n-    target_flags |= MASK_DISABLE_FPREGS;\n+    target_flags |= MASK_SOFT_FLOAT;\n }\n \n /* Implement the TARGET_OPTION_OVERRIDE hook.  */\n@@ -1578,14 +1578,14 @@ hppa_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t}\n       else if (mode == DImode)\n \t{\n-\t  if (TARGET_PA_11 && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT)\n-\t    *total = COSTS_N_INSNS (32);\n+\t  if (TARGET_PA_11 && !TARGET_SOFT_FLOAT && !TARGET_SOFT_MULT)\n+\t    *total = COSTS_N_INSNS (25);\n \t  else\n \t    *total = COSTS_N_INSNS (80);\n \t}\n       else\n \t{\n-\t  if (TARGET_PA_11 && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT)\n+\t  if (TARGET_PA_11 && !TARGET_SOFT_FLOAT && !TARGET_SOFT_MULT)\n \t    *total = COSTS_N_INSNS (8);\n \t  else\n \t    *total = COSTS_N_INSNS (20);\n@@ -10627,7 +10627,7 @@ pa_conditional_register_usage (void)\n       for (i = 33; i < 56; i += 2)\n \tfixed_regs[i] = call_used_regs[i] = 1;\n     }\n-  if (TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\n+  if (TARGET_SOFT_FLOAT)\n     {\n       for (i = FP_REG_FIRST; i <= FP_REG_LAST; i++)\n \tfixed_regs[i] = call_used_regs[i] = 1;"}, {"sha": "7a313d617b0d66dd2007ebdf9c915899014a8ab0", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "patch": "@@ -833,7 +833,6 @@ extern int may_call_alloca;\n \n #define INT14_OK_STRICT \\\n   (TARGET_SOFT_FLOAT                                                   \\\n-   || TARGET_DISABLE_FPREGS                                            \\\n    || (TARGET_PA_20 && !TARGET_ELF32))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx"}, {"sha": "ea6da457fcbd531f7a16960c06b978a53bf46ebc", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "patch": "@@ -5384,7 +5384,7 @@\n   \"\n {\n   operands[4] = gen_rtx_REG (SImode, TARGET_64BIT ? 2 : 31);\n-  if (TARGET_PA_11 && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT)\n+  if (TARGET_PA_11 && !TARGET_SOFT_FLOAT && !TARGET_SOFT_MULT)\n     {\n       rtx scratch = gen_reg_rtx (DImode);\n       operands[1] = force_reg (SImode, operands[1]);\n@@ -5402,7 +5402,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"f\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"f\"))))]\n-  \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT && ! TARGET_SOFT_MULT\"\n   \"xmpyu %1,%2,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n@@ -5411,7 +5411,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"f\"))\n \t\t (match_operand:DI 2 \"uint32_operand\" \"f\")))]\n-  \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT && !TARGET_64BIT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT && ! TARGET_SOFT_MULT && !TARGET_64BIT\"\n   \"xmpyu %1,%R2,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n@@ -5420,7 +5420,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=f\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"f\"))\n \t\t (match_operand:DI 2 \"uint32_operand\" \"f\")))]\n-  \"TARGET_PA_11 && ! TARGET_DISABLE_FPREGS && ! TARGET_SOFT_FLOAT && TARGET_64BIT\"\n+  \"TARGET_PA_11 && ! TARGET_SOFT_FLOAT && ! TARGET_SOFT_MULT && TARGET_64BIT\"\n   \"xmpyu %1,%2R,%0\"\n   [(set_attr \"type\" \"fpmuldbl\")\n    (set_attr \"length\" \"4\")])\n@@ -5457,8 +5457,8 @@\n \t\t (match_operand:DI 2 \"register_operand\" \"\")))]\n   \"! optimize_size\n    && TARGET_PA_11\n-   && ! TARGET_DISABLE_FPREGS\n-   && ! TARGET_SOFT_FLOAT\"\n+   && ! TARGET_SOFT_FLOAT\n+   && ! TARGET_SOFT_MULT\"\n   \"\n {\n   rtx low_product = gen_reg_rtx (DImode);\n@@ -7805,7 +7805,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n       if (GET_CODE (op) == SYMBOL_REF)\n \t{\n \t  /* Handle special call to buggy powf function.  */\n-\t  if (TARGET_HPUX && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\n+\t  if (TARGET_HPUX && !TARGET_SOFT_FLOAT\n \t      && !strcmp (targetm.strip_name_encoding (XSTR (op, 0)), \"powf\"))\n \t    call_powf = true;\n \n@@ -10260,7 +10260,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n {\n   enum memmodel model;\n \n-  if (TARGET_64BIT || TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\n+  if (TARGET_64BIT || TARGET_SOFT_FLOAT)\n     FAIL;\n \n   model = memmodel_from_int (INTVAL (operands[2]));\n@@ -10276,7 +10276,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (mem:DI (match_operand:SI 1 \"register_operand\" \"r\")))\n    (clobber (match_scratch:DI 2 \"=f\"))]\n-  \"!TARGET_64BIT && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\"\n+  \"!TARGET_64BIT && !TARGET_SOFT_FLOAT\"\n   \"{fldds|fldd} 0(%1),%2\\n\\t{fstds|fstd} %2,-16(%%sp)\\n\\t{ldws|ldw} -16(%%sp),%0\\n\\t{ldws|ldw} -12(%%sp),%R0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"16\")])\n@@ -10299,7 +10299,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n \tDONE;\n     }\n \n-  if (TARGET_64BIT || TARGET_DISABLE_FPREGS || TARGET_SOFT_FLOAT)\n+  if (TARGET_64BIT || TARGET_SOFT_FLOAT)\n     FAIL;\n \n   model = memmodel_from_int (INTVAL (operands[2]));\n@@ -10317,7 +10317,7 @@ add,l %2,%3,%3\\;bv,n %%r0(%3)\"\n   [(set (mem:DI (match_operand:SI 0 \"register_operand\" \"r,r\"))\n         (match_operand:DI 1 \"reg_or_0_operand\" \"M,r\"))\n    (clobber (match_scratch:DI 2 \"=X,f\"))]\n-  \"!TARGET_64BIT && !TARGET_DISABLE_FPREGS && !TARGET_SOFT_FLOAT\"\n+  \"!TARGET_64BIT && !TARGET_SOFT_FLOAT\"\n   \"@\n    {fstds|fstd} %%fr0,0(%0)\n    {stws|stw} %1,-16(%%sp)\\n\\t{stws|stw} %R1,-12(%%sp)\\n\\t{fldds|fldd} -16(%%sp),%2\\n\\t{fstds|fstd} %2,0(%0)\""}, {"sha": "47995f73e65db6a8727b6e493368f9342ca141d7", "filename": "gcc/config/pa/pa.opt", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3/gcc%2Fconfig%2Fpa%2Fpa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.opt?ref=3f861a5c8fd6dcc32cdaa800156a5e1b3724f4c3", "patch": "@@ -50,8 +50,8 @@ Target Var(TARGET_COHERENT_LDCW) Init(1)\n Use ldcw/ldcd coherent cache-control hint.\n \n mdisable-fpregs\n-Target Mask(DISABLE_FPREGS)\n-Disable FP regs.\n+Target Mask(SOFT_FLOAT)\n+Disable FP regs.  Equivalent to -msoft-float.\n \n mdisable-indexing\n Target Mask(DISABLE_INDEXING)\n@@ -143,6 +143,10 @@ msoft-float\n Target Mask(SOFT_FLOAT)\n Use software floating point.\n \n+msoft-mult\n+Target Mask(SOFT_MULT)\n+Use software integer multiplication.\n+\n msnake\n Target RejectNegative\n Generate PA1.1 code."}]}