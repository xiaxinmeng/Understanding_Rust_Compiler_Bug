{"sha": "198075e1c94ef8f9ecc31c9d4698b0761aab7d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4MDc1ZTFjOTRlZjhmOWVjYzMxYzlkNDY5OGIwNzYxYWFiN2Q4Yw==", "commit": {"author": {"name": "Matthew Fortune", "email": "matthew.fortune@imgtec.com", "date": "2017-02-22T17:20:14Z"}, "committer": {"name": "Matthew Fortune", "email": "mpf@gcc.gnu.org", "date": "2017-02-22T17:20:14Z"}, "message": "Support WORD_REGISTER_OPERATIONS requirements in simplify_operand_subreg\n\ngcc/\n\tPR target/78660\n\t* lra-constraints.c (simplify_operand_subreg): Handle\n\tWORD_REGISTER_OPERATIONS targets.\n\nFrom-SVN: r245655", "tree": {"sha": "cd03ff69a35e2ae583bc804da4db724ce66b8fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd03ff69a35e2ae583bc804da4db724ce66b8fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c/comments", "author": {"login": "mfortune", "id": 10220247, "node_id": "MDQ6VXNlcjEwMjIwMjQ3", "avatar_url": "https://avatars.githubusercontent.com/u/10220247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfortune", "html_url": "https://github.com/mfortune", "followers_url": "https://api.github.com/users/mfortune/followers", "following_url": "https://api.github.com/users/mfortune/following{/other_user}", "gists_url": "https://api.github.com/users/mfortune/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfortune/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfortune/subscriptions", "organizations_url": "https://api.github.com/users/mfortune/orgs", "repos_url": "https://api.github.com/users/mfortune/repos", "events_url": "https://api.github.com/users/mfortune/events{/privacy}", "received_events_url": "https://api.github.com/users/mfortune/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "888c705092d00dc3101d00701367f7c9a2c449cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888c705092d00dc3101d00701367f7c9a2c449cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888c705092d00dc3101d00701367f7c9a2c449cd"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "40a1d1f488a28614a86f1bfef13c59e6fa34ec6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=198075e1c94ef8f9ecc31c9d4698b0761aab7d8c", "patch": "@@ -1,3 +1,9 @@\n+2017-02-22  Matthew Fortune  <matthew.fortune@imgtec.com>\n+\n+\tPR target/78660\n+\t* lra-constraints.c (simplify_operand_subreg): Handle\n+\tWORD_REGISTER_OPERATIONS targets.\n+\n 2017-02-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/70465"}, {"sha": "224a9560c5650dad29a65eda99a013fbbb28c84c", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/198075e1c94ef8f9ecc31c9d4698b0761aab7d8c/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=198075e1c94ef8f9ecc31c9d4698b0761aab7d8c", "patch": "@@ -1541,11 +1541,22 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t     subregs as we don't substitute such equiv memory (see processing\n \t     equivalences in function lra_constraints) and because for spilled\n \t     pseudos we allocate stack memory enough for the biggest\n-\t     corresponding paradoxical subreg.  */\n-\t  if (!(MEM_ALIGN (subst) < GET_MODE_ALIGNMENT (mode)\n-\t\t&& SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (subst)))\n-\t      || (MEM_ALIGN (reg) < GET_MODE_ALIGNMENT (innermode)\n-\t\t  && SLOW_UNALIGNED_ACCESS (innermode, MEM_ALIGN (reg))))\n+\t     corresponding paradoxical subreg.\n+\n+\t     However, do not blindly simplify a (subreg (mem ...)) for\n+\t     WORD_REGISTER_OPERATIONS targets as this may lead to loading junk\n+\t     data into a register when the inner is narrower than outer or\n+\t     missing important data from memory when the inner is wider than\n+\t     outer.  This rule only applies to modes that are no wider than\n+\t     a word.  */\n+\t  if (!(GET_MODE_PRECISION (mode) != GET_MODE_PRECISION (innermode)\n+\t\t&& GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n+\t\t&& GET_MODE_SIZE (innermode) <= UNITS_PER_WORD\n+\t\t&& WORD_REGISTER_OPERATIONS)\n+\t      && (!(MEM_ALIGN (subst) < GET_MODE_ALIGNMENT (mode)\n+\t\t    && SLOW_UNALIGNED_ACCESS (mode, MEM_ALIGN (subst)))\n+\t\t  || (MEM_ALIGN (reg) < GET_MODE_ALIGNMENT (innermode)\n+\t\t      && SLOW_UNALIGNED_ACCESS (innermode, MEM_ALIGN (reg)))))\n \t    return true;\n \n \t  *curr_id->operand_loc[nop] = operand;"}]}