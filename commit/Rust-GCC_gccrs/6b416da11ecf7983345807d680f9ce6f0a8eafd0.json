{"sha": "6b416da11ecf7983345807d680f9ce6f0a8eafd0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0MTZkYTExZWNmNzk4MzM0NTgwN2Q2ODBmOWNlNmYwYThlYWZkMA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-07-04T22:51:36Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-07-04T22:51:36Z"}, "message": "tree-ssa-pre.c (bb_value_sets): phi_gen, tmp_gen, new_sets now are bitmap_set_t's.\n\n2004-07-04  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-pre.c (bb_value_sets): phi_gen, tmp_gen, new_sets\n\tnow are bitmap_set_t's.\n\t(bitmap_insert_into_set): No point in inserting the value if\n\tit's invariant.\n\t(bitmap_set_contains): New function.\n\t(bitmap_set_replace_value): Add comment on why we do it\n\tthis way.\n\t(set_contains): Removed.\n\t(bitmap_set_subtract_from_value_set): New name of\n\tset_subtract now that it's arguments are two different\n\ttypes of sets.\n\tUpdate callers.\n\t(bitmap_find_leader): Change algorithm used.\n\t(find_or_generate_expression): Update use of functions for new\n\tbitmap sets.\n\t(create_expression_by_pieces): Ditto.\n\t(insert_aux): Ditto.\n\t(insert): Ditto.\n\t(add_to_sets): Ditto.\n\t(init_pre): Ditto.\n\t(execute_pre): Ditto.\n\t(compute_avail): Ditto.\n\tAlso ignore virtual phis.\n\nFrom-SVN: r84099", "tree": {"sha": "87cc6364fff2bda825a729af05994685335fd224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87cc6364fff2bda825a729af05994685335fd224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b416da11ecf7983345807d680f9ce6f0a8eafd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b416da11ecf7983345807d680f9ce6f0a8eafd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b416da11ecf7983345807d680f9ce6f0a8eafd0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b416da11ecf7983345807d680f9ce6f0a8eafd0/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8ff6ca0621e015eadc50c6d5212be6c67530035", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8ff6ca0621e015eadc50c6d5212be6c67530035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8ff6ca0621e015eadc50c6d5212be6c67530035"}], "stats": {"total": 174, "additions": 111, "deletions": 63}, "files": [{"sha": "de05dad0dce3d18f82e303a103d8b3c38c56b904", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b416da11ecf7983345807d680f9ce6f0a8eafd0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b416da11ecf7983345807d680f9ce6f0a8eafd0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b416da11ecf7983345807d680f9ce6f0a8eafd0", "patch": "@@ -1,3 +1,29 @@\n+2004-07-04  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-pre.c (bb_value_sets): phi_gen, tmp_gen, new_sets\n+\tnow are bitmap_set_t's.\n+\t(bitmap_insert_into_set): No point in inserting the value if\n+\tit's invariant.\n+\t(bitmap_set_contains): New function.\n+\t(bitmap_set_replace_value): Add comment on why we do it \n+\tthis way.\n+\t(set_contains): Removed.\n+\t(bitmap_set_subtract_from_value_set): New name of\n+\tset_subtract now that it's arguments are two different\n+\ttypes of sets.\n+\tUpdate callers.\n+\t(bitmap_find_leader): Change algorithm used.\n+\t(find_or_generate_expression): Update use of functions for new\n+\tbitmap sets.\n+\t(create_expression_by_pieces): Ditto.\n+\t(insert_aux): Ditto.\n+\t(insert): Ditto.\n+\t(add_to_sets): Ditto.\n+\t(init_pre): Ditto.\n+\t(execute_pre): Ditto.\n+\t(compute_avail): Ditto.\n+\tAlso ignore virtual phis.\n+\n 2004-07-04  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* combine.c (simplify_comparison): Fix comment typo."}, {"sha": "66fc3086058d0ce1e2d9e89fc5e3e5257019166d", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 85, "deletions": 63, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b416da11ecf7983345807d680f9ce6f0a8eafd0/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b416da11ecf7983345807d680f9ce6f0a8eafd0/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6b416da11ecf7983345807d680f9ce6f0a8eafd0", "patch": "@@ -232,10 +232,7 @@ typedef struct bitmap_set\n   bitmap values;\n } *bitmap_set_t;\n \n-/* All of the following sets, except for TMP_GEN, are indexed.\n-   TMP_GEN is only ever iterated over, we never check what values\n-   exist in it.  */\n-\n+/* Sets that we need to keep track of.  */\n typedef struct bb_value_sets\n {\n   /* The EXP_GEN set, which represents expressions/values generated in\n@@ -244,11 +241,11 @@ typedef struct bb_value_sets\n \n   /* The PHI_GEN set, which represents PHI results generated in a\n      basic block.  */\n-  value_set_t phi_gen;\n+  bitmap_set_t phi_gen;\n \n   /* The TMP_GEN set, which represents results/temporaries generated\n      in a basic block. IE the LHS of an expression.  */\n-  value_set_t tmp_gen;\n+  bitmap_set_t tmp_gen;\n \n   /* The AVAIL_OUT set, which represents which values are available in\n      a given basic block.  */\n@@ -261,7 +258,7 @@ typedef struct bb_value_sets\n   /* The NEW_SETS set, which is used during insertion to augment the\n      AVAIL_OUT set of blocks with the new insertions performed during\n      the current iteration.  */\n-  value_set_t new_sets;\n+  bitmap_set_t new_sets;\n } *bb_value_sets_t;\n \n #define EXP_GEN(BB)\t((bb_value_sets_t) ((BB)->aux))->exp_gen\n@@ -501,7 +498,7 @@ set_new  (bool indexed)\n   return ret;\n }\n \n-/* Insert an expression, EXPR, into a bitmapped set.  */\n+/* Insert an expression EXPR into a bitmapped set.  */\n \n static void\n bitmap_insert_into_set (bitmap_set_t set, tree expr)\n@@ -514,8 +511,8 @@ bitmap_insert_into_set (bitmap_set_t set, tree expr)\n   \n   if (val == NULL)\n     abort ();\n-\n-  bitmap_set_bit (set->values, VALUE_HANDLE_ID (val));\n+  if (!is_gimple_min_invariant (val))\n+    bitmap_set_bit (set->values, VALUE_HANDLE_ID (val));\n   bitmap_set_bit (set->expressions, SSA_NAME_VERSION (expr));\n }\n \n@@ -623,6 +620,17 @@ set_contains_value (value_set_t set, tree val)\n   return value_exists_in_set_bitmap (set, val);\n }\n \n+/* Return true if bitmapped set SET contains the expression EXPR.  */\n+static bool\n+bitmap_set_contains (bitmap_set_t set, tree expr)\n+{\n+  /* XXX: Bitmapped sets only contain SSA_NAME's for now.  */\n+  if (TREE_CODE (expr) != SSA_NAME)\n+    return false;\n+  return bitmap_bit_p (set->expressions, SSA_NAME_VERSION (expr));\n+}\n+\n+  \n /* Return true if bitmapped set SET contains the value VAL.  */\n \n static bool\n@@ -644,6 +652,15 @@ bitmap_set_replace_value (bitmap_set_t set, tree lookfor, tree expr)\n     return;\n   if (!bitmap_set_contains_value (set, lookfor))\n     return;\n+  /* The number of expressions having a given value is usually\n+     significantly less than the total number of expressions in SET.\n+     Thus, rather than check, for each expression in SET, whether it\n+     has the value LOOKFOR, we walk the reverse mapping that tells us\n+     what expressions have a given value, and see if any of those\n+     expressions are in our set.  For large testcases, this is about\n+     5-10x faster than walking the bitmap.  If this is somehow a\n+     significant lose for some cases, we can choose which set to walk\n+     based on the set size.  */\n   exprset = VALUE_HANDLE_EXPR_SET (lookfor);\n   for (node = exprset->head; node; node = node->next)\n     {\n@@ -659,35 +676,19 @@ bitmap_set_replace_value (bitmap_set_t set, tree lookfor, tree expr)\n     }\n }\n \n-/* Return true if the set contains expression (not value) EXPR.  */\n-\n-static bool\n-set_contains (value_set_t set, tree expr)\n-{\n-  value_set_node_t node;\n-  \n-  for (node = set->head;\n-       node;\n-       node = node->next)\n-    {\n-      if (operand_equal_p (node->expr, expr, 0))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n-/* Subtract set B from set A, and return the new set.  */\n+/* Subtract bitmapped set B from value set A, and return the new set.  */\n \n static value_set_t\n-set_subtract (value_set_t a, value_set_t b, bool indexed)\n+bitmap_set_subtract_from_value_set (value_set_t a, bitmap_set_t b,\n+\t\t\t\t    bool indexed)\n {\n   value_set_t ret = set_new (indexed);\n   value_set_node_t node;\n   for (node = a->head;\n        node;\n        node = node->next)\n     {\n-      if (!set_contains (b, node->expr))\n+      if (!bitmap_set_contains (b, node->expr))\n \tinsert_into_set (ret, node->expr);\n     }\n   return ret;\n@@ -970,13 +971,29 @@ bitmap_find_leader (bitmap_set_t set, tree val)\n     return val;\n   if (bitmap_set_contains_value (set, val))\n     {\n-      int i;\n-      EXECUTE_IF_SET_IN_BITMAP (set->expressions, 0, i,\n-      {\n-\tif (get_value_handle (ssa_name (i)) == val)\n-\t  return ssa_name (i);\n-      });\n-      \n+      /* Rather than walk the entire bitmap of expressions, and see\n+\t whether any of them has the value we are looking for, we look\n+\t at the reverse mapping, which tells us the set of expressions\n+\t that have a given value (IE value->expressions with that\n+\t value) and see if any of those expressions are in our set.\n+\t The number of expressions per value is usually significantly\n+\t less than the number of expressions in the set.  In fact, for\n+\t large testcases, doing it this way is roughly 5-10x faster\n+\t than walking the bitmap.\n+\t If this is somehow a significant lose for some cases, we can\n+\t choose which set to walk based on which set is smaller.  */\t \n+      value_set_t exprset;\n+      value_set_node_t node;\n+      exprset = VALUE_HANDLE_EXPR_SET (val);\n+      for (node = exprset->head; node; node = node->next)\n+\t{\n+\t  if (TREE_CODE (node->expr) == SSA_NAME)\n+\t    {\n+\t      if (bitmap_bit_p (set->expressions, \n+\t\t\t\tSSA_NAME_VERSION (node->expr)))\n+\t\treturn node->expr;\n+\t    }\n+\t}\n     }\n   return NULL;\n }\n@@ -1178,10 +1195,12 @@ compute_antic_aux (basic_block block)\n     }\n \n   /* Generate ANTIC_OUT - TMP_GEN */\n-  S = set_subtract (ANTIC_OUT, TMP_GEN (block), false);\n+  S = bitmap_set_subtract_from_value_set (ANTIC_OUT, TMP_GEN (block), false);\n \n   /* Start ANTIC_IN with EXP_GEN - TMP_GEN */\n-  ANTIC_IN (block) = set_subtract (EXP_GEN (block),TMP_GEN (block), true);\n+  ANTIC_IN (block) = bitmap_set_subtract_from_value_set (EXP_GEN (block), \n+\t\t\t\t\t\t\t TMP_GEN (block),\n+\t\t\t\t\t\t\t true);\n   \n   /* Then union in the ANTIC_OUT - TMP_GEN values, to get ANTIC_OUT U\n      EXP_GEN - TMP_GEN */\n@@ -1267,7 +1286,7 @@ find_or_generate_expression (basic_block block, tree expr, tree stmts)\n      the NEW_SETS for us already, having been propagated from our\n      dominator.  */\n   if (genop == NULL)\n-    genop = find_leader (NEW_SETS (block), expr);\n+    genop = bitmap_find_leader (NEW_SETS (block), expr);\n   /* If it's still NULL, see if it is a complex expression, and if\n      so, generate it recursively, otherwise, abort, because it's\n      not really .  */\n@@ -1355,7 +1374,7 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     }\n   v = get_value_handle (expr);\n   vn_add (name, v, NULL);\n-  insert_into_set (NEW_SETS (block), name);\n+  bitmap_insert_into_set (NEW_SETS (block), name);\n   bitmap_value_insert_into_set (AVAIL_OUT (block), name);\n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\t\t\t\t    \n@@ -1388,18 +1407,17 @@ insert_aux (basic_block block)\n \n   if (block)\n     {\n-      value_set_node_t e;\n       basic_block dom;\n       dom = get_immediate_dominator (CDI_DOMINATORS, block);\n       if (dom)\n \t{\n-\t  e = NEW_SETS (dom)->head;\n-\t  while (e)\n-\t    {\n-\t      insert_into_set (NEW_SETS (block), e->expr);\n-\t      bitmap_value_replace_in_set (AVAIL_OUT (block), e->expr);\n-\t      e = e->next;\n-\t    }\n+\t  int i;\n+\t  bitmap_set_t newset = NEW_SETS (dom);\n+\t  EXECUTE_IF_SET_IN_BITMAP (newset->expressions, 0, i,\n+          {\n+\t    bitmap_insert_into_set (NEW_SETS (block), ssa_name (i));\n+\t    bitmap_value_replace_in_set (AVAIL_OUT (block), ssa_name (i));\n+\t  });\n \t  if (block->pred->pred_next)\n \t    {\n \t      value_set_node_t node;\n@@ -1421,7 +1439,7 @@ insert_aux (basic_block block)\n \t\t      tree eprime;\n \n \t\t      val = get_value_handle (node->expr);\n-\t\t      if (set_contains_value (PHI_GEN (block), val))\n+\t\t      if (bitmap_set_contains_value (PHI_GEN (block), val))\n \t\t\tcontinue; \n \t\t      if (bitmap_set_contains_value (AVAIL_OUT (dom), val))\n \t\t\t{\n@@ -1544,10 +1562,10 @@ insert_aux (basic_block block)\n \t\t\t    }\n \t\t\t  pre_stats.phis++;\n \t\t\t  new_stuff = true;\n-\t\t\t  insert_into_set (NEW_SETS (block),\n-\t\t\t\t\t   PHI_RESULT (temp));\n-\t\t\t  insert_into_set (PHI_GEN (block),\n-\t\t\t\t\t   PHI_RESULT (temp));\n+\t\t\t  bitmap_insert_into_set (NEW_SETS (block),\n+\t\t\t\t\t\t  PHI_RESULT (temp));\n+\t\t\t  bitmap_insert_into_set (PHI_GEN (block),\n+\t\t\t\t\t\t  PHI_RESULT (temp));\n \t\t\t}\n \n \t\t      free (avail);\n@@ -1576,7 +1594,7 @@ insert (void)\n   int num_iterations = 0;\n   \n   FOR_ALL_BB (bb)\n-    NEW_SETS (bb) = set_new (true);\n+    NEW_SETS (bb) = bitmap_set_new ();\n   \n   while (new_stuff)\n     {\n@@ -1612,7 +1630,7 @@ is_undefined_value (tree expr)\n    any). They are used when computing the hash value for EXPR.  */\n \n static inline void\n-add_to_sets (tree var, tree expr, vuse_optype vuses, value_set_t s1,\n+add_to_sets (tree var, tree expr, vuse_optype vuses, bitmap_set_t s1,\n \t     bitmap_set_t s2)\n {\n   tree val = vn_lookup_or_add (expr, vuses);\n@@ -1624,7 +1642,7 @@ add_to_sets (tree var, tree expr, vuse_optype vuses, value_set_t s1,\n   if (var != expr)\n     vn_add (var, val, vuses);\n \n-  insert_into_set (s1, var);\n+  bitmap_insert_into_set (s1, var);\n   bitmap_value_insert_into_set (s2, var);\n }\n \n@@ -1702,7 +1720,7 @@ compute_avail (basic_block block)\n \t      tree val;\n \t      tree def = default_def (param);\n \t      val = vn_lookup_or_add (def, NULL);\n-\t      insert_into_set (TMP_GEN (block), def);\n+\t      bitmap_insert_into_set (TMP_GEN (block), def);\n \t      bitmap_value_insert_into_set (AVAIL_OUT (block), def);\n \t    }\n \t}\n@@ -1721,8 +1739,11 @@ compute_avail (basic_block block)\n \n       /* Generate values for PHI nodes.  */\n       for (phi = phi_nodes (block); phi; phi = PHI_CHAIN (phi))\n-\tadd_to_sets (PHI_RESULT (phi), PHI_RESULT (phi), NULL,\n-\t\t     PHI_GEN (block), AVAIL_OUT (block));\n+\t/* We have no need for virtual phis, as they don't represent\n+\t   actual computations.  */\n+\tif (is_gimple_reg (PHI_RESULT (phi)))\n+\t  add_to_sets (PHI_RESULT (phi), PHI_RESULT (phi), NULL,\n+\t\t       PHI_GEN (block), AVAIL_OUT (block));\n \n       /* Now compute value numbers and populate value sets with all\n \t the expressions computed in BLOCK.  */\n@@ -1894,8 +1915,8 @@ init_pre (void)\n   FOR_ALL_BB (bb)\n     {\n       EXP_GEN (bb) = set_new (true);\n-      PHI_GEN (bb) = set_new (true);\n-      TMP_GEN (bb) = set_new (false);\n+      PHI_GEN (bb) = bitmap_set_new ();\n+      TMP_GEN (bb) = bitmap_set_new ();\n       AVAIL_OUT (bb) = bitmap_set_new ();\n     }\n }\n@@ -1944,7 +1965,8 @@ execute_pre (bool do_fre)\n       FOR_ALL_BB (bb)\n \t{\n \t  print_value_set (dump_file, EXP_GEN (bb), \"exp_gen\", bb->index);\n-\t  print_value_set (dump_file, TMP_GEN (bb), \"tmp_gen\", bb->index);\n+\t  bitmap_print_value_set (dump_file, TMP_GEN (bb), \"tmp_gen\", \n+\t\t\t\t  bb->index);\n \t  bitmap_print_value_set (dump_file, AVAIL_OUT (bb), \"avail_out\", \n \t\t\t\t  bb->index);\n \t}"}]}