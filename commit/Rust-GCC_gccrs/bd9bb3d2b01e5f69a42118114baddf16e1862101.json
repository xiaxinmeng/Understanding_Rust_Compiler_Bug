{"sha": "bd9bb3d2b01e5f69a42118114baddf16e1862101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5YmIzZDJiMDFlNWY2OWE0MjExODExNGJhZGRmMTZlMTg2MjEwMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-04T05:13:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-04T05:13:59Z"}, "message": "re PR c++/7931 (The compiler ices on some legal code)\n\n \tPR c++/7931\n\t* pt.c (for_each_template_parm_r): Handle BASELINKs.\n\n\tPR c++/7754\n\t* decl2.c (finish_anon_union): Do not expand anonymous unions when\n\tprocesing template functions.\n\t* pt.c (tsubst_decl, case VAR_DECL): Try to complete the variable\n\ttype. Call layout_decl.\n\t(tsubst_expr, case DECL_STMT): Handle anonymous unions.\n\n\tPR c++/7931\n\t* g++.dg/template/ptrmem3.C: New test.\n\n\tPR c++/7754\n\t* g++.dg/template/union1.C: New test.\n\nFrom-SVN: r57800", "tree": {"sha": "48ff2f7f2c9fc83ca936cfb7cd280a4c8cd24e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48ff2f7f2c9fc83ca936cfb7cd280a4c8cd24e18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9bb3d2b01e5f69a42118114baddf16e1862101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9bb3d2b01e5f69a42118114baddf16e1862101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9bb3d2b01e5f69a42118114baddf16e1862101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9bb3d2b01e5f69a42118114baddf16e1862101/comments", "author": null, "committer": null, "parents": [{"sha": "6397d80b752df0770438e1edbc1efd8773fbb7eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6397d80b752df0770438e1edbc1efd8773fbb7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6397d80b752df0770438e1edbc1efd8773fbb7eb"}], "stats": {"total": 155, "additions": 123, "deletions": 32}, "files": [{"sha": "78ffd60f2a60c62dfcb7e54b99c33a591ac70b80", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bd9bb3d2b01e5f69a42118114baddf16e1862101", "patch": "@@ -1,3 +1,15 @@\n+2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+ \tPR c++/7931\n+\t* pt.c (for_each_template_parm_r): Handle BASELINKs.\n+\n+\tPR c++/7754\n+\t* decl2.c (finish_anon_union): Do not expand anonymous unions when\n+\tprocesing template functions.\n+\t* pt.c (tsubst_decl, case VAR_DECL): Try to complete the variable\n+\ttype. Call layout_decl.\n+\t(tsubst_expr, case DECL_STMT): Handle anonymous unions.\n+\n 2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8006"}, {"sha": "c738b37896db3a714a7d61b3754172875b2ddfab", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=bd9bb3d2b01e5f69a42118114baddf16e1862101", "patch": "@@ -1382,26 +1382,31 @@ finish_anon_union (anon_union_decl)\n       return;\n     }\n \n-  main_decl = build_anon_union_vars (anon_union_decl,\n-\t\t\t\t     &DECL_ANON_UNION_ELEMS (anon_union_decl),\n-\t\t\t\t     static_p, external_p);\n-\n-  if (main_decl == NULL_TREE)\n+  if (!processing_template_decl)\n     {\n-      warning (\"anonymous aggregate with no members\");\n-      return;\n-    }\n+      main_decl \n+\t= build_anon_union_vars (anon_union_decl,\n+\t\t\t\t &DECL_ANON_UNION_ELEMS (anon_union_decl),\n+\t\t\t\t static_p, external_p);\n+      \n+      if (main_decl == NULL_TREE)\n+\t{\n+\t  warning (\"anonymous aggregate with no members\");\n+\t  return;\n+\t}\n \n-  if (static_p)\n-    {\n-      make_decl_rtl (main_decl, 0);\n-      COPY_DECL_RTL (main_decl, anon_union_decl);\n-      expand_anon_union_decl (anon_union_decl, \n-\t\t\t      NULL_TREE,\n-\t\t\t      DECL_ANON_UNION_ELEMS (anon_union_decl));\n+      if (static_p)\n+\t{\n+\t  make_decl_rtl (main_decl, 0);\n+\t  COPY_DECL_RTL (main_decl, anon_union_decl);\n+\t  expand_anon_union_decl (anon_union_decl, \n+\t\t\t\t  NULL_TREE,\n+\t\t\t\t  DECL_ANON_UNION_ELEMS (anon_union_decl));\n+\t  return;\n+\t}\n     }\n-  else\n-    add_decl_stmt (anon_union_decl);\n+\n+  add_decl_stmt (anon_union_decl);\n }\n \n /* Finish processing a builtin type TYPE.  It's name is NAME,"}, {"sha": "242c5284eaae701a4ed1f97830094401fe66737b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bd9bb3d2b01e5f69a42118114baddf16e1862101", "patch": "@@ -4469,6 +4469,15 @@ for_each_template_parm_r (tp, walk_subtrees, d)\n \treturn error_mark_node;\n       break;\n \n+    case BASELINK:\n+      /* If we do not handle this case specially, we end up walking\n+\t the BINFO hierarchy, which is circular, and therefore\n+\t confuses walk_tree.  */\n+      *walk_subtrees = 0;\n+      if (for_each_template_parm (BASELINK_FUNCTIONS (*tp), fn, data))\n+\treturn error_mark_node;\n+      break;\n+\n     default:\n       break;\n     }\n@@ -6125,7 +6134,7 @@ tsubst_decl (t, args, type, complain)\n \t  }\n \n \tr = copy_decl (t);\n-\tTREE_TYPE (r) = type;\n+\tTREE_TYPE (r) = complete_type (type);\n \tc_apply_type_quals_to_decl (cp_type_quals (type), r);\n \tDECL_CONTEXT (r) = ctx;\n \t/* Clear out the mangled name and RTL for the instantiation.  */\n@@ -6164,6 +6173,8 @@ tsubst_decl (t, args, type, complain)\n \tTREE_CHAIN (r) = NULL_TREE;\n \tif (TREE_CODE (r) == VAR_DECL && VOID_TYPE_P (type))\n \t  cp_error_at (\"instantiation of `%D' as type `%T'\", r, type);\n+\t/* Compute the size, alignment, etc. of R.  */\n+\tlayout_decl (r, 0);\n       }\n       break;\n \n@@ -7415,9 +7426,6 @@ tsubst_expr (t, args, complain, in_decl)\n \t    decl = tsubst (decl, args, complain, in_decl);\n \t    if (decl != error_mark_node)\n \t      {\n-                if (TREE_CODE (decl) != TYPE_DECL)\n-                  /* Make sure the type is instantiated now.  */\n-                  complete_type (TREE_TYPE (decl));\n \t        if (init)\n \t          DECL_INITIAL (decl) = error_mark_node;\n \t        /* By marking the declaration as instantiated, we avoid\n@@ -7427,19 +7435,26 @@ tsubst_expr (t, args, complain, in_decl)\n \t           do.  */\n \t        if (TREE_CODE (decl) == VAR_DECL)\n \t          DECL_TEMPLATE_INSTANTIATED (decl) = 1;\n-\t        maybe_push_decl (decl);\n-\t\tif (DECL_PRETTY_FUNCTION_P (decl))\n+\t\tif (TREE_CODE (decl) == VAR_DECL\n+\t\t    && ANON_AGGR_TYPE_P (TREE_TYPE (decl)))\n+\t\t  /* Anonymous aggregates are a special case.  */\n+\t\t  finish_anon_union (decl);\n+\t\telse \n \t\t  {\n-\t\t    /* For __PRETTY_FUNCTION__ we have to adjust the\n-\t\t       initializer.  */\n-\t\t    const char *const name\n-\t\t      = cxx_printable_name (current_function_decl, 2);\n-\t\t    init = cp_fname_init (name);\n-\t\t    TREE_TYPE (decl) = TREE_TYPE (init);\n+\t\t    maybe_push_decl (decl);\n+\t\t    if (DECL_PRETTY_FUNCTION_P (decl))\n+\t\t      {\n+\t\t\t/* For __PRETTY_FUNCTION__ we have to adjust the\n+\t\t\t   initializer.  */\n+\t\t\tconst char *const name\n+\t\t\t  = cxx_printable_name (current_function_decl, 2);\n+\t\t\tinit = cp_fname_init (name);\n+\t\t\tTREE_TYPE (decl) = TREE_TYPE (init);\n+\t\t      }\n+\t\t    else\n+\t\t      init = tsubst_expr (init, args, complain, in_decl);\n+\t\t    cp_finish_decl (decl, init, NULL_TREE, 0);\n \t\t  }\n-\t\telse\n-\t\t  init = tsubst_expr (init, args, complain, in_decl);\n-\t        cp_finish_decl (decl, init, NULL_TREE, 0);\n \t      }\n \t  }\n "}, {"sha": "5a663255055e14581b6eac3da370350250a7a87e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd9bb3d2b01e5f69a42118114baddf16e1862101", "patch": "@@ -1,3 +1,11 @@\n+2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/7931\n+\t* g++.dg/template/ptrmem3.C: New test.\n+\t\n+\tPR c++/7754\n+\t* g++.dg/template/union1.C: New test.\n+\n 2002-10-03  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8006"}, {"sha": "fda7bf10a4d6f247b3989c10e8d7db4be4b50233", "filename": "gcc/testsuite/g++.dg/template/ptrmem3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem3.C?ref=bd9bb3d2b01e5f69a42118114baddf16e1862101", "patch": "@@ -0,0 +1,22 @@\n+// Origin: Theo Papadopoulo <Theodore.Papadopoulo@sophia.inria.fr>\n+\n+template <typename T,double (T::*fun)() const>\n+struct I {\n+};\n+\n+struct R {\n+    R() { }\n+};\n+\n+class H: public R {\n+public:\n+    H(): R() { }\n+    double& f() { return a; }\n+    double  f() const { return 1.0; }\n+    double a;\n+};\n+\n+struct A {\n+    typedef I<H,&H::f> F;\n+    A() { }\n+};"}, {"sha": "9019c38a28543ea26a2809fb12bd3aaf47dfff34", "filename": "gcc/testsuite/g++.dg/template/union1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funion1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9bb3d2b01e5f69a42118114baddf16e1862101/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funion1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funion1.C?ref=bd9bb3d2b01e5f69a42118114baddf16e1862101", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+void g (char c) \n+{\n+  if (c != 'a')\n+    abort ();\n+}\n+\n+void h (int i)\n+{\n+  if (i != 3)\n+    abort ();\n+}\n+\n+template <typename T> void f(T const &t)\n+{\n+    union { char c; T t_; };\n+\n+    c = 'a';\n+    g (c);\n+    t_ = 3;\n+    h (t_);\n+}\n+\n+int main () {\n+  f (3);\n+}"}]}