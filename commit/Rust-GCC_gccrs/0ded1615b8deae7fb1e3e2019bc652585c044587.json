{"sha": "0ded1615b8deae7fb1e3e2019bc652585c044587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRlZDE2MTViOGRlYWU3ZmIxZTNlMjAxOWJjNjUyNTg1YzA0NDU4Nw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-10-10T11:35:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-10-10T11:35:42Z"}, "message": "libstdc++.exp (v3-build_support): Link libtestc++.a, not a bunch of object files.\n\n2006-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/lib/libstdc++.exp (v3-build_support): Link\n\tlibtestc++.a, not a bunch of object files.\n\nFrom-SVN: r117601", "tree": {"sha": "117315478ca10388fc4baa91e8ca69f8c8b2df64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/117315478ca10388fc4baa91e8ca69f8c8b2df64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ded1615b8deae7fb1e3e2019bc652585c044587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ded1615b8deae7fb1e3e2019bc652585c044587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ded1615b8deae7fb1e3e2019bc652585c044587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ded1615b8deae7fb1e3e2019bc652585c044587/comments", "author": null, "committer": null, "parents": [{"sha": "8ba9f0133450c920cfd936ebdf26b19f016b10d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ba9f0133450c920cfd936ebdf26b19f016b10d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ba9f0133450c920cfd936ebdf26b19f016b10d5"}], "stats": {"total": 44, "additions": 17, "deletions": 27}, "files": [{"sha": "babd0c8b3c2c91291932bffc31daafe622891cc5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ded1615b8deae7fb1e3e2019bc652585c044587/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ded1615b8deae7fb1e3e2019bc652585c044587/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0ded1615b8deae7fb1e3e2019bc652585c044587", "patch": "@@ -1,3 +1,8 @@\n+2006-10-10  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/lib/libstdc++.exp (v3-build_support): Link\n+\tlibtestc++.a, not a bunch of object files.\n+\n 2006-10-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/29118"}, {"sha": "1f877be99ea4dc8440b7e25db092a98d7b5771f9", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ded1615b8deae7fb1e3e2019bc652585c044587/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ded1615b8deae7fb1e3e2019bc652585c044587/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=0ded1615b8deae7fb1e3e2019bc652585c044587", "patch": "@@ -1,6 +1,7 @@\n # libstdc++ \"tool init file\" for DejaGNU\n \n-# Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+# Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+# Free Software Foundation, Inc.\n #\n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -272,24 +273,21 @@ proc libstdc++-dg-test { prog do_what extra_tool_flags } {\n         }\n     }\n \n+    # Short-circut a bunch of complicated goo here for the special\n+    # case of compiling a test file as a \"C\" file, not as C++. Why? So\n+    # -nostdc++ doesn't trip us up. So all the extra object files\n+    # don't trip us up. So automatically linking in libstdc++ doesn't\n+    # happen. So CXXFLAGS don't error.\n     set select_compile \"v3_target_compile\"\n     set options \"\"\n     if { $extra_tool_flags != \"\" } {\n \tverbose -log \"extra_tool_flags are:\"\n \tverbose -log $extra_tool_flags\n \tif { [string first \"-x c\" $extra_tool_flags ] != -1 } {\n-\t    # Short-circut a bunch of complicated goo here for the\n-\t    # special case of compiling a test file as a \"C\" file, not\n-\t    # as C++. Why? So -nostdc++ doesn't trip us up. So all the\n-\t    # extra object files don't trip us up. So automatically\n-\t    # linking in libstdc++ doesn't happen. So CXXFLAGS don't\n-\t    # error.\n \t    verbose -log \"compiling and executing as C, not C++\"\n-\n \t    set edit_tool_flags $extra_tool_flags\n \t    regsub -all \".x c\" $edit_tool_flags \"\" edit_tool_flags\n \t    lappend options \"additional_flags=$edit_tool_flags\"\n-\n \t    set select_compile \"v3_target_compile_as_c\"\n         } else {\n \t    lappend options \"additional_flags=$extra_tool_flags\"\n@@ -313,9 +311,6 @@ set v3-threads 0\n # True if the library supports symbol versioning.\n set v3-symver 0\n \n-# A string naming object files to be linked into all tests.\n-set v3-test_objs \"\"\n-\n # Called from libstdc++-dg-test above.  Calls back into system's\n # target_compile to actually do the work.\n proc v3_target_compile { source dest type options } {\n@@ -325,7 +320,6 @@ proc v3_target_compile { source dest type options } {\n     global cxxflags\n     global cxxldflags\n     global includes\n-    global v3-test_objs\n \n     if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n         lappend options \"libs=${gluefile}\"\n@@ -342,8 +336,7 @@ proc v3_target_compile { source dest type options } {\n     if { $type == \"executable\" } {\n \t# Link the support objects into executables.\n         set cxx_final [concat $cxx_final $cxxldflags]\n-\t# lappend options \"additional_flags=./libtestc++.a\"\n-\tset cxx_final [concat $cxx_final ${v3-test_objs}]\n+\tlappend options \"additional_flags=./libtestc++.a\"\n     } else {\n \tif { $type == \"sharedlib\" } {\n \t    # Don't link in anything.\n@@ -384,21 +377,19 @@ proc v3_target_compile_as_c { source dest type options } {\n }\n \n # Build the support objects linked in with the libstdc++ tests.  In\n-# addition, set v3-wchar_t, v3-threads, v3-test_objs, and v3-symver\n-# appropriately.\n+# addition, set v3-wchar_t, v3-threads, and v3-symver appropriately.\n proc v3-build_support { } {\n     global srcdir\n     global v3-wchar_t\n     global v3-threads\n-    global v3-test_objs\n     global v3-symver\n     global v3-sharedlib\n \n     # Figure out whether or not the library supports certain features.\n     set v3-wchar_t 0\n     set v3-threads 0\n     set v3-symver 0\n-    set v3-test_objs \"\"\n+    set libtest_objs \"\"\n \n     set config_src \"config.cc\"\n     set f [open $config_src \"w\"]\n@@ -449,24 +440,18 @@ proc v3-build_support { } {\n \t     != \"\" } {\n \t    error \"could not compile $f\"\n \t}\n-\tappend v3-test_objs \"$object_file \"\n+\tappend libtest_objs \"$object_file \"\n     }\n \n     # Collect into libtestc++.a\n-    set arcommand \"ar -rc ./libtestc++.a ${v3-test_objs}\"\n+    set arcommand \"ar -rc ./libtestc++.a ${libtest_objs}\"\n     set result [lindex [local_exec \"$arcommand\" \"\" \"\" 300] 0]\n     verbose \"link result is $result\"\n     if { $result == 0 } {\n \tset ranlibcommand \"ranlib ./libtestc++.a\"\n \tset result [lindex [local_exec \"$ranlibcommand\" \"\" \"\" 300] 0]\n \tif { $result != 0 } {\n \t    error \"could not link libtestc++.a\"\n-\t    \n-\t    # We cannot actually use libtestc++.a because it's hard to\n-\t    # position this library after the test file being compiled\n-\t    # on the constructed compile line. However, we use this as\n-\t    # a convenience for performance testing.  \n-\t    #set v3-test_objs \"./libtestc++.a\"\n \t}\n     }\n "}]}