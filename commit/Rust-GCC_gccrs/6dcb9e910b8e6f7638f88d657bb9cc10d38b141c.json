{"sha": "6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjYjllOTEwYjhlNmY3NjM4Zjg4ZDY1N2JiOWNjMTBkMzhiMTQxYw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2017-10-11T19:35:48Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2017-10-11T19:35:48Z"}, "message": "re PR sanitizer/82353 (runtime ubsan crash)\n\n2017-10-11  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR sanitizer/82353\n\t* lra.c (collect_non_operand_hard_regs): Don't ignore operator\n\tlocations.\n\t* lra-lives.c (bb_killed_pseudos, bb_gen_pseudos): Move up.\n\t(make_hard_regno_born, make_hard_regno_dead): Update\n\tbb_killed_pseudos and bb_gen_pseudos.\n\n2017-10-11  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR sanitizer/82353\n\t* gcc.target/i386/i386.exp (tests): Permit '.C' extension.\n\t* gcc.target/i386/pr82353.C: New.\n\nFrom-SVN: r253656", "tree": {"sha": "a17ff4d65544206c16ca9632f2628cfef3264600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a17ff4d65544206c16ca9632f2628cfef3264600"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b90c93381261e3c7fff0bf25fad4c22407ab9b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90c93381261e3c7fff0bf25fad4c22407ab9b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90c93381261e3c7fff0bf25fad4c22407ab9b73"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "c3d95d9ba5b2c979b3b16beeb471fe2c29f3d675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "patch": "@@ -1,3 +1,12 @@\n+2017-10-11  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR sanitizer/82353\n+\t* lra.c (collect_non_operand_hard_regs): Don't ignore operator\n+\tlocations.\n+\t* lra-lives.c (bb_killed_pseudos, bb_gen_pseudos): Move up.\n+\t(make_hard_regno_born, make_hard_regno_dead): Update\n+\tbb_killed_pseudos and bb_gen_pseudos.\n+\n 2017-10-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* incpath.h (enum incpath_kind): Name enum, prefix values."}, {"sha": "6a49f9a8341b18eb23c98db8b25f6101a35357bf", "filename": "gcc/lra-lives.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Flra-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Flra-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-lives.c?ref=6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "patch": "@@ -220,6 +220,9 @@ lra_intersected_live_ranges_p (lra_live_range_t r1, lra_live_range_t r2)\n   return false;\n }\n \n+/* The corresponding bitmaps of BB currently being processed.  */\n+static bitmap bb_killed_pseudos, bb_gen_pseudos;\n+\n /* The function processing birth of hard register REGNO.  It updates\n    living hard regs, START_LIVING, and conflict hard regs for living\n    pseudos.  Conflict hard regs for the pic pseudo is not updated if\n@@ -243,6 +246,7 @@ make_hard_regno_born (int regno, bool check_pic_pseudo_p ATTRIBUTE_UNUSED)\n \t|| i != REGNO (pic_offset_table_rtx))\n #endif\n       SET_HARD_REG_BIT (lra_reg_info[i].conflict_hard_regs, regno);\n+  bitmap_set_bit (bb_gen_pseudos, regno);\n }\n \n /* Process the death of hard register REGNO.  This updates\n@@ -255,6 +259,8 @@ make_hard_regno_dead (int regno)\n     return;\n   sparseset_set_bit (start_dying, regno);\n   CLEAR_HARD_REG_BIT (hard_regs_live, regno);\n+  bitmap_clear_bit (bb_gen_pseudos, regno);\n+  bitmap_set_bit (bb_killed_pseudos, regno);\n }\n \n /* Mark pseudo REGNO as living at program point POINT, update conflicting\n@@ -299,9 +305,6 @@ mark_pseudo_dead (int regno, int point)\n     }\n }\n \n-/* The corresponding bitmaps of BB currently being processed.  */\n-static bitmap bb_killed_pseudos, bb_gen_pseudos;\n-\n /* Mark register REGNO (pseudo or hard register) in MODE as live at\n    program point POINT.  Update BB_GEN_PSEUDOS.\n    Return TRUE if the liveness tracking sets were modified, or FALSE"}, {"sha": "3122f2c25053a8b48b2ab277510bf18c4376cec9", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "patch": "@@ -820,7 +820,8 @@ collect_non_operand_hard_regs (rtx *x, lra_insn_recog_data_t data,\n   const char *fmt = GET_RTX_FORMAT (code);\n \n   for (i = 0; i < data->insn_static_data->n_operands; i++)\n-    if (x == data->operand_loc[i])\n+    if (! data->insn_static_data->operand[i].is_operator\n+\t&& x == data->operand_loc[i])\n       /* It is an operand loc. Stop here.  */\n       return list;\n   for (i = 0; i < data->insn_static_data->n_dups; i++)"}, {"sha": "740454058d32807682b92e72c742b968fbefc551", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "patch": "@@ -1,3 +1,9 @@\n+2017-10-11  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR sanitizer/82353\n+\t* gcc.target/i386/i386.exp (tests): Permit '.C' extension.\n+\t* gcc.target/i386/pr82353.C: New.\n+\n 2017-10-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.target/i386/387-ficom-1.c: New test."}, {"sha": "1dc37cdac1247b87ed4cb477083eb6e5f4783d79", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "patch": "@@ -445,7 +445,7 @@ if [runtest_file_p $runtests $srcdir/$subdir/vect-args.c] {\n }\n \n # Everything else.\n-set tests [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cS\\]]]\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]]\n set tests [prune $tests $srcdir/$subdir/vect-args.c]\n \n # Main loop."}, {"sha": "309bff764a4fbc077a0a7b8d34ec3edbfdaa5d56", "filename": "gcc/testsuite/gcc.target/i386/pr82353.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82353.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcb9e910b8e6f7638f88d657bb9cc10d38b141c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82353.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr82353.C?ref=6dcb9e910b8e6f7638f88d657bb9cc10d38b141c", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++11 -fsanitize=undefined -fno-sanitize-recover=undefined -w -fdump-rtl-reload\" } */\n+\n+extern unsigned long tf_2_var_1, tf_2_var_21;\n+extern bool tf_2_var_2, tf_2_var_24, tf_2_var_6, tf_2_var_5;\n+extern unsigned char tf_2_var_16, tf_2_var_31;\n+extern short tf_2_var_69;\n+extern unsigned tf_2_var_233;\n+struct tf_2_struct_1 {\n+  short member_1_0 : 27;\n+  long member_1_1 : 10;\n+};\n+struct a {\n+  int member_2_0 : 5;\n+};\n+struct tf_2_struct_3 {\n+  static tf_2_struct_1 member_3_0;\n+};\n+struct tf_2_struct_4 {\n+  static unsigned member_4_0;\n+  a member_4_1;\n+};\n+struct tf_2_struct_5 {\n+  tf_2_struct_1 member_5_2;\n+  tf_2_struct_4 member_5_4;\n+};\n+struct tf_2_struct_6 {\n+  tf_2_struct_5 member_6_2;\n+  short member_6_4;\n+} extern tf_2_struct_obj_2;\n+extern tf_2_struct_3 tf_2_struct_obj_8;\n+tf_2_struct_1 a;\n+tf_2_struct_5 b;\n+tf_2_struct_1 tf_2_struct_3::member_3_0;\n+unsigned tf_2_struct_4::member_4_0;\n+void tf_2_init() {\n+  a.member_1_1 = tf_2_struct_obj_2.member_6_2.member_5_2.member_1_1 = 5;\n+}\n+void tf_2_foo() {\n+  int c = tf_2_struct_obj_2.member_6_2.member_5_4.member_4_1.member_2_0 -\n+          -~tf_2_struct_obj_2.member_6_4 * char(90284000534361);\n+  tf_2_struct_obj_8.member_3_0.member_1_0 =\n+      tf_2_var_24 >\n+      tf_2_var_21 * a.member_1_0 * tf_2_var_2 - tf_2_var_5 % a.member_1_1;\n+  if ((~(tf_2_var_31 * tf_2_var_6) &&\n+       -~tf_2_struct_obj_2.member_6_4 * 90284000534361) %\n+      ~tf_2_var_31 * tf_2_var_6)\n+    b.member_5_2.member_1_0 << tf_2_var_16 << tf_2_var_1;\n+  tf_2_var_233 = -~tf_2_struct_obj_2.member_6_4 * char(90284000534361);\n+  int d(tf_2_struct_obj_2.member_6_4);\n+  if (b.member_5_2.member_1_0)\n+    b.member_5_2.member_1_1 = c;\n+  bool e(~-~tf_2_struct_obj_2.member_6_4);\n+  a.member_1_1 % e;\n+  if (tf_2_var_5 / tf_2_struct_obj_2.member_6_2.member_5_2.member_1_1)\n+    b.member_5_4.member_4_0 = tf_2_var_21 * a.member_1_0 * tf_2_var_2;\n+  tf_2_var_69 = tf_2_var_6;\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"Inserting rematerialization insn\" \"reload\" } } */"}]}