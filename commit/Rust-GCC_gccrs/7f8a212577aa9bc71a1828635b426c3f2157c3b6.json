{"sha": "7f8a212577aa9bc71a1828635b426c3f2157c3b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y4YTIxMjU3N2FhOWJjNzFhMTgyODYzNWI0MjZjM2YyMTU3YzNiNg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-08-01T04:55:49Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-08-01T04:55:49Z"}, "message": "* basic-block.h: Add prototype for last_loop_beg_note.\n\nFrom-SVN: r44531", "tree": {"sha": "1ca9f729b1461dab1e25fd2e3c3698565528e2b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ca9f729b1461dab1e25fd2e3c3698565528e2b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f8a212577aa9bc71a1828635b426c3f2157c3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8a212577aa9bc71a1828635b426c3f2157c3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8a212577aa9bc71a1828635b426c3f2157c3b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8a212577aa9bc71a1828635b426c3f2157c3b6/comments", "author": null, "committer": null, "parents": [{"sha": "f2f25b6d56c863260b28cc0f11d7372b459f4a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f25b6d56c863260b28cc0f11d7372b459f4a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f25b6d56c863260b28cc0f11d7372b459f4a60"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "f392c820daa9d436f3fcf6c03617774716744e58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a212577aa9bc71a1828635b426c3f2157c3b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a212577aa9bc71a1828635b426c3f2157c3b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f8a212577aa9bc71a1828635b426c3f2157c3b6", "patch": "@@ -1,3 +1,7 @@\n+2001-08-01  Andreas Jaeger  <aj@suse.de>\n+\n+\t* basic-block.h: Add prototype for last_loop_beg_note.\n+\n 2001-07-31  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* expr.c (safe_from_p): Use WITH_CLEANUP_EXPR_RTL instead of\n@@ -12,7 +16,7 @@\n \toperand while calling simple_cst_equal.\n \t* tree.def (WITH_CLEANUP_EXPR): Switched operands: the second\n \toperand is the cleanup expression, the third is the RTL_EXPR.\n-\t* tree.h (WITH_CLEANUP_EXPR_RTL): New macro.\t\n+\t* tree.h (WITH_CLEANUP_EXPR_RTL): New macro.\n \n 2001-07-31  Jeff Sturm  <jsturm@one-point.com>\n \n@@ -34,12 +38,12 @@\n \n \tAlso fixes emitting of constants on 32 bit and 64 bit\n \tplatforms.\n-\t\n+\n \t* config.gcc: powerpc64-*-linux* is a new target.\n-\tThings that needed aix.h now also include xcoff.h\t\n+\tThings that needed aix.h now also include xcoff.h\n \n \t* config/rs6000/rs6000.h: Split XCOFF specific stuff into\n-\txcoff.h. \n+\txcoff.h.\n \tMove AIX specific stuff into aix.h.\n \t(TARGET_AIX): Renamed to TARGET_XCOFF, since the AIX ABI is used\n \twith more than just XCOFF now."}, {"sha": "810071509ceaf08f5ad3010cee34f47555e54735", "filename": "gcc/basic-block.h", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f8a212577aa9bc71a1828635b426c3f2157c3b6/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f8a212577aa9bc71a1828635b426c3f2157c3b6/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=7f8a212577aa9bc71a1828635b426c3f2157c3b6", "patch": "@@ -19,7 +19,7 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #ifndef GCC_BASIC_BLOCK_H\n-#define GCC_BASIC_BLOCK_H \n+#define GCC_BASIC_BLOCK_H\n \n #include \"bitmap.h\"\n #include \"sbitmap.h\"\n@@ -114,7 +114,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Grow any tables needed when the number of registers is calculated\n    or extended.  For the linked list allocation, nothing needs to\n    be done, other than zero the statistics on the first allocation.  */\n-#define MAX_REGNO_REG_SET(NUM_REGS, NEW_P, RENUMBER_P) \n+#define MAX_REGNO_REG_SET(NUM_REGS, NEW_P, RENUMBER_P)\n \n /* Type we use to hold basic block counters.  Should be at least 64bit.  */\n typedef HOST_WIDEST_INT gcov_type;\n@@ -215,11 +215,11 @@ typedef struct basic_block_def {\n \n   /* Expected number of executions: calculated in profile.c.  */\n   gcov_type count;\n- \n+\n   /* Expected frequency.  Normalized to be in range 0 to BB_FREQ_MAX.  */\n   int frequency;\n } *basic_block;\n- \n+\n #define BB_FREQ_MAX 10000\n \n /* Number of basic blocks in the current function.  */\n@@ -290,7 +290,7 @@ extern void commit_edge_insertions\tPARAMS ((void));\n extern void remove_fake_edges\t\tPARAMS ((void));\n extern void add_noreturn_fake_exit_edges\tPARAMS ((void));\n extern void connect_infinite_loops_to_exit\tPARAMS ((void));\n-extern int flow_call_edges_add \t\tPARAMS ((sbitmap));\n+extern int flow_call_edges_add\t\tPARAMS ((sbitmap));\n extern rtx flow_delete_insn\t\tPARAMS ((rtx));\n extern void flow_delete_insn_chain\tPARAMS ((rtx, rtx));\n extern void make_edge\t\t\tPARAMS ((sbitmap *, basic_block,\n@@ -325,7 +325,7 @@ struct loop\n   /* Basic block of loop pre-header or NULL if it does not exist.  */\n   basic_block pre_header;\n \n-  /* Array of edges along the pre-header extended basic block trace. \n+  /* Array of edges along the pre-header extended basic block trace.\n      The source of the first edge is the root node of pre-header\n      extended basic block, if it exists.  */\n   edge *pre_header_edges;\n@@ -419,7 +419,7 @@ struct loop\n   /* List of all LABEL_REFs which refer to code labels outside the\n      loop.  Used by routines that need to know all loop exits, such as\n      final_biv_value and final_giv_value.\n-     \n+\n      This does not include loop exits due to return instructions.\n      This is because all bivs and givs are pseudos, and hence must be\n      dead after a return, so the presense of a return does not affect\n@@ -479,7 +479,7 @@ extern void flow_loop_dump PARAMS ((const struct loop *, FILE *,\n extern int flow_loop_scan PARAMS ((struct loops *, struct loop *, int));\n \n /* This structure maintains an edge list vector.  */\n-struct edge_list \n+struct edge_list\n {\n   int num_blocks;\n   int num_edges;\n@@ -522,7 +522,7 @@ struct edge_list * create_edge_list\tPARAMS ((void));\n void free_edge_list\t\t\tPARAMS ((struct edge_list *));\n void print_edge_list\t\t\tPARAMS ((FILE *, struct edge_list *));\n void verify_edge_list\t\t\tPARAMS ((FILE *, struct edge_list *));\n-int find_edge_index\t\t\tPARAMS ((struct edge_list *, \n+int find_edge_index\t\t\tPARAMS ((struct edge_list *,\n \t\t\t\t\t\t basic_block, basic_block));\n \n \n@@ -556,13 +556,13 @@ enum update_life_extent\n \t\t\t\t\t   notes.  */\n /* Flags for loop discovery.  */\n \n-#define LOOP_TREE\t\t1 \t/* Build loop hierarchy tree.  */\n+#define LOOP_TREE\t\t1\t/* Build loop hierarchy tree.  */\n #define LOOP_PRE_HEADER\t\t2\t/* Analyse loop pre-header.  */\n-#define LOOP_ENTRY_EDGES\t4 \t/* Find entry edges.  */\n-#define LOOP_EXIT_EDGES\t\t8 \t/* Find exit edges.  */\n+#define LOOP_ENTRY_EDGES\t4\t/* Find entry edges.  */\n+#define LOOP_EXIT_EDGES\t\t8\t/* Find exit edges.  */\n #define LOOP_EDGES\t\t(LOOP_ENTRY_EDGES | LOOP_EXIT_EDGES)\n-#define LOOP_EXITS_DOMS\t       16 \t/* Find nodes that dom. all exits.  */\n-#define LOOP_ALL\t       31 \t/* All of the above  */\n+#define LOOP_EXITS_DOMS\t       16\t/* Find nodes that dom. all exits.  */\n+#define LOOP_ALL\t       31\t/* All of the above  */\n \n extern void life_analysis\tPARAMS ((rtx, FILE *, int));\n extern void update_life_info\tPARAMS ((sbitmap, enum update_life_extent,\n@@ -578,13 +578,13 @@ extern struct propagate_block_info *init_propagate_block_info\n extern void free_propagate_block_info PARAMS ((struct propagate_block_info *));\n \n /* In lcm.c */\n-extern struct edge_list *pre_edge_lcm \tPARAMS ((FILE *, int, sbitmap *,\n-\t\t\t\t\t\t sbitmap *, sbitmap *, \n+extern struct edge_list *pre_edge_lcm\tPARAMS ((FILE *, int, sbitmap *,\n+\t\t\t\t\t\t sbitmap *, sbitmap *,\n \t\t\t\t\t\t sbitmap *, sbitmap **,\n \t\t\t\t\t\t sbitmap **));\n extern struct edge_list *pre_edge_rev_lcm PARAMS ((FILE *, int, sbitmap *,\n-\t\t\t\t\t\t   sbitmap *, sbitmap *, \n-\t\t\t\t\t\t   sbitmap *, sbitmap **, \n+\t\t\t\t\t\t   sbitmap *, sbitmap *,\n+\t\t\t\t\t\t   sbitmap *, sbitmap **,\n \t\t\t\t\t\t   sbitmap **));\n extern void compute_available\t\tPARAMS ((sbitmap *, sbitmap *,\n \t\t\t\t\t\t sbitmap *, sbitmap *));\n@@ -610,6 +610,7 @@ extern void allocate_reg_life_data      PARAMS ((void));\n extern void allocate_bb_life_data\tPARAMS ((void));\n extern void find_unreachable_blocks\tPARAMS ((void));\n extern void delete_noop_moves\t\tPARAMS ((rtx));\n+extern rtx last_loop_beg_note\t\tPARAMS ((rtx));\n extern basic_block redirect_edge_and_branch_force PARAMS ((edge, basic_block));\n extern bool redirect_edge_and_branch\tPARAMS ((edge, basic_block));\n extern rtx block_label\t\t\tPARAMS ((basic_block));\n@@ -635,20 +636,20 @@ typedef int (*conflict_graph_enum_fn) PARAMS ((int, int, void *));\n \n /* Prototypes of operations on conflict graphs.  */\n \n-extern conflict_graph conflict_graph_new \n+extern conflict_graph conflict_graph_new\n                                         PARAMS ((int));\n extern void conflict_graph_delete       PARAMS ((conflict_graph));\n-extern int conflict_graph_add           PARAMS ((conflict_graph, \n+extern int conflict_graph_add           PARAMS ((conflict_graph,\n \t\t\t\t\t\t int, int));\n-extern int conflict_graph_conflict_p    PARAMS ((conflict_graph, \n+extern int conflict_graph_conflict_p    PARAMS ((conflict_graph,\n \t\t\t\t\t\t int, int));\n-extern void conflict_graph_enum         PARAMS ((conflict_graph, int, \n-\t\t\t\t\t\t conflict_graph_enum_fn, \n+extern void conflict_graph_enum         PARAMS ((conflict_graph, int,\n+\t\t\t\t\t\t conflict_graph_enum_fn,\n \t\t\t\t\t\t void *));\n extern void conflict_graph_merge_regs   PARAMS ((conflict_graph, int,\n \t\t\t\t\t\t int));\n extern void conflict_graph_print        PARAMS ((conflict_graph, FILE*));\n-extern conflict_graph conflict_graph_compute \n+extern conflict_graph conflict_graph_compute\n                                         PARAMS ((regset,\n \t\t\t\t\t\t partition));\n extern bool mark_dfs_back_edges\t\tPARAMS ((void));"}]}