{"sha": "486516b60ba69fa8bd5fd13a9e4f630642d18546", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg2NTE2YjYwYmE2OWZhOGJkNWZkMTNhOWU0ZjYzMDY0MmQxODU0Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-10-19T14:25:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-10-19T14:25:31Z"}, "message": "rc_string_base.h (_S_terminal): Remove.\n\n2005-10-19  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/rc_string_base.h (_S_terminal): Remove.\n\t(_M_set_length): Adjust.\n\t(_S_max_size): Change to anonymous enum.\n\t(_M_max_size()): Add, returns the latter.\n\t* include/ext/sso_string_base.h: Likewise.\n\t* include/ext/vstring.h (max_size): Adjust.\n\nFrom-SVN: r105616", "tree": {"sha": "1574610f046d1f60505b52e0354fe6d251919f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1574610f046d1f60505b52e0354fe6d251919f8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/486516b60ba69fa8bd5fd13a9e4f630642d18546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486516b60ba69fa8bd5fd13a9e4f630642d18546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486516b60ba69fa8bd5fd13a9e4f630642d18546", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486516b60ba69fa8bd5fd13a9e4f630642d18546/comments", "author": null, "committer": null, "parents": [{"sha": "0bf72672367ae1c7110a042dda32dafa771c2f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf72672367ae1c7110a042dda32dafa771c2f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf72672367ae1c7110a042dda32dafa771c2f86"}], "stats": {"total": 90, "additions": 43, "deletions": 47}, "files": [{"sha": "8927bdd194b82d1a98654d27e4977a670c457c84", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=486516b60ba69fa8bd5fd13a9e4f630642d18546", "patch": "@@ -1,3 +1,12 @@\n+2005-10-19  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/rc_string_base.h (_S_terminal): Remove.\n+\t(_M_set_length): Adjust.\n+\t(_S_max_size): Change to anonymous enum.\n+\t(_M_max_size()): Add, returns the latter.\n+\t* include/ext/sso_string_base.h: Likewise.\n+\t* include/ext/vstring.h (max_size): Adjust.\n+\n 2005-10-17  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \tPR libstdc++/24244"}, {"sha": "e462680eddf7902e2b607d45fbb8e464e2d370d1", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=486516b60ba69fa8bd5fd13a9e4f630642d18546", "patch": "@@ -96,22 +96,7 @@ namespace __gnu_cxx\n         _CharT_alloc_type                                   _CharT_alloc_type;\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n \n-      // The maximum number of individual char_type elements of an\n-      // individual string is determined by _S_max_size. This is the\n-      // value that will be returned by max_size().  (Whereas npos\n-      // is the maximum number of bytes the allocator can allocate.)\n-      // If one was to divvy up the theoretical largest size string,\n-      // with a terminating character and m _CharT elements, it'd\n-      // look like this:\n-      // npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)\n-      // Solving for m:\n-      // m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1\n-      // In addition, this implementation quarters this amount.\n-      static const size_type\t_S_max_size;\n-\n     private:\n-      static const _CharT\t_S_terminal;\n-\n       // _Rep: string representation\n       //   Invariants:\n       //   1. String really contains _M_length + 1 characters: due to 21.3.4\n@@ -151,7 +136,7 @@ namespace __gnu_cxx\n \t  _M_length = __n;\n \t  // grrr. (per 21.3.4)\n \t  // You cannot leave those LWG people alone for a second.\n-\t  traits_type::assign(_M_refdata()[__n], _S_terminal);\n+\t  traits_type::assign(_M_refdata()[__n], _CharT());\n \t}\n \n \t// Create & Destroy\n@@ -170,6 +155,20 @@ namespace __gnu_cxx\n \t_CharT                  _M_terminal;\n       };\n \n+      // The maximum number of individual char_type elements of an\n+      // individual string is determined by _S_max_size. This is the\n+      // value that will be returned by max_size().  (Whereas npos\n+      // is the maximum number of bytes the allocator can allocate.)\n+      // If one was to divvy up the theoretical largest size string,\n+      // with a terminating character and m _CharT elements, it'd\n+      // look like this:\n+      // npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)\n+      // Solving for m:\n+      // m = ((npos - sizeof(_Rep)) / sizeof(_CharT)) - 1\n+      // In addition, this implementation quarters this amount.\n+      enum { _S_max_size = (((static_cast<size_type>(-1) - sizeof(_Rep))\n+\t\t\t     / sizeof(_CharT)) - 1) / 4 };\n+\n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n       struct _Alloc_hider : _Alloc\n       {\n@@ -257,6 +256,10 @@ namespace __gnu_cxx\n       _S_construct(size_type __req, _CharT __c, const _Alloc& __a);\n \n     public:\n+      size_type\n+      _M_max_size() const\n+      { return size_type(_S_max_size); }\n+\n       _CharT*\n       _M_data() const\n       { return _M_dataplus._M_p; }\n@@ -335,24 +338,14 @@ namespace __gnu_cxx\n     };\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n-    const typename __rc_string_base<_CharT, _Traits, _Alloc>::size_type\n-    __rc_string_base<_CharT, _Traits, _Alloc>::\n-    _S_max_size = (((static_cast<size_type>(-1) - sizeof(_Rep))\n-\t\t    / sizeof(_CharT)) - 1) / 4;\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    const _CharT\n-    __rc_string_base<_CharT, _Traits, _Alloc>::_S_terminal = _CharT();\n-\n-    template<typename _CharT, typename _Traits, typename _Alloc>\n     typename __rc_string_base<_CharT, _Traits, _Alloc>::_Rep*\n     __rc_string_base<_CharT, _Traits, _Alloc>::_Rep::\n     _S_create(size_type __capacity, size_type __old_capacity,\n \t      const _Alloc& __alloc)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n-      if (__capacity > _S_max_size)\n+      if (__capacity > size_type(_S_max_size))\n \tstd::__throw_length_error(__N(\"__rc_string_base::_Rep::_S_create\"));\n \n       // The standard places no restriction on allocating more memory\n@@ -404,8 +397,8 @@ namespace __gnu_cxx\n \t  const size_type __extra = __pagesize - __adj_size % __pagesize;\n \t  __capacity += __extra / sizeof(_CharT);\n \t  // Never allocate a string bigger than _S_max_size.\n-\t  if (__capacity > _S_max_size)\n-\t    __capacity = _S_max_size;\n+\t  if (__capacity > size_type(_S_max_size))\n+\t    __capacity = size_type(_S_max_size);\n \t  __size = ((__capacity + 1) * sizeof(_CharT) + sizeof(_Rep)\n \t\t    + sizeof(size_type) - 1);\n \t}"}, {"sha": "e578d2448d7f954d016084e12ad42431af3c5f4b", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=486516b60ba69fa8bd5fd13a9e4f630642d18546", "patch": "@@ -51,6 +51,7 @@ namespace __gnu_cxx\n         _CharT_alloc_type                                   _CharT_alloc_type;\n       typedef typename _CharT_alloc_type::size_type\t    size_type;\n       \n+    private:\n       // The maximum number of individual char_type elements of an\n       // individual string is determined by _S_max_size. This is the\n       // value that will be returned by max_size().  (Whereas npos\n@@ -60,13 +61,11 @@ namespace __gnu_cxx\n       // look like this:\n       // npos = m * sizeof(_CharT) + sizeof(_CharT)\n       // Solving for m:\n-      // m = npos / sizeof(CharT) - 1\n+      // m = npos / sizeof(_CharT) - 1\n       // In addition, this implementation quarters this amount.\n-      static const size_type\t_S_max_size;\n+      enum { _S_max_size = (((static_cast<size_type>(-1)\n+\t\t\t      / sizeof(_CharT)) - 1) / 4) };\n \n-    private:\n-      static const _CharT\t_S_terminal;\n-      \n       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html\n       struct _Alloc_hider : _Alloc\n       {\n@@ -159,6 +158,10 @@ namespace __gnu_cxx\n       _M_construct(size_type __req, _CharT __c);\n \n     public:\n+      size_type\n+      _M_max_size() const\n+      { return size_type(_S_max_size); }\n+\n       _CharT*\n       _M_data() const\n       { return _M_dataplus._M_p; }\n@@ -194,7 +197,7 @@ namespace __gnu_cxx\n \t_M_length(__n);\n \t// grrr. (per 21.3.4)\n \t// You cannot leave those LWG people alone for a second.\n-\ttraits_type::assign(_M_data()[__n], _S_terminal);\n+\ttraits_type::assign(_M_data()[__n], _CharT());\n       }\n \n       void\n@@ -296,23 +299,14 @@ namespace __gnu_cxx\n \t}\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    const typename __sso_string_base<_CharT, _Traits, _Alloc>::size_type\n-    __sso_string_base<_CharT, _Traits, _Alloc>::\n-    _S_max_size = ((static_cast<size_type>(-1) / sizeof(_CharT)) - 1) / 4;\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    const _CharT\n-    __sso_string_base<_CharT, _Traits, _Alloc>::_S_terminal = _CharT();\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     _CharT*\n     __sso_string_base<_CharT, _Traits, _Alloc>::\n     _M_create(size_type& __capacity, size_type __old_capacity)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n-      if (__capacity > _S_max_size)\n+      if (__capacity > size_type(_S_max_size))\n \tstd::__throw_length_error(__N(\"__sso_string_base::_M_create\"));\n \n       // The below implements an exponential growth policy, necessary to"}, {"sha": "a7741949f64c6fa45f6e46f102373633ac80b15a", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/486516b60ba69fa8bd5fd13a9e4f630642d18546/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=486516b60ba69fa8bd5fd13a9e4f630642d18546", "patch": "@@ -73,7 +73,7 @@ namespace __gnu_cxx\n       typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n       typedef std::reverse_iterator<iterator>\t\t    reverse_iterator;\n \n-      // Data Members (public):\n+      // Data Member (public):\n       // NB: This is an unsigned type, and thus represents the maximum\n       // size that the allocator can hold.\n       ///  Value returned by various member functions when they fail.\n@@ -346,7 +346,7 @@ namespace __gnu_cxx\n       /// Returns the size() of the largest possible %string.\n       size_type\n       max_size() const\n-      { return __vstring_base::_S_max_size; }\n+      { return this->_M_max_size(); }\n \n       /**\n        *  @brief  Resizes the %string to the specified number of characters."}]}