{"sha": "863af9a44a8f5995d57055054e84ff379a62440a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYzYWY5YTQ0YThmNTk5NWQ1NzA1NTA1NGU4NGZmMzc5YTYyNDQwYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-11-26T14:13:28Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-11-26T14:13:28Z"}, "message": "nvptx.c (write_func_decl_from_insn): Replace callee arg with name.\n\n\t* config/nvptx/nvptx.c (write_func_decl_from_insn): Replace callee\n\targ with name.  Don't deal with split regs.  Tweak formatting.\n\t(nvptx_expand_call): Adjust write_func_decl_from_insn call.\n\t(nvptx_output_call_insn): Don't deal with split regs here.\n\n\ttestsuite/\n\t* gcc.target/nvptx/proto-1.c: Adjust expected asm.\n\nFrom-SVN: r230965", "tree": {"sha": "434630d2024f7693ad067fdab445822a10200ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/434630d2024f7693ad067fdab445822a10200ff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/863af9a44a8f5995d57055054e84ff379a62440a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863af9a44a8f5995d57055054e84ff379a62440a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/863af9a44a8f5995d57055054e84ff379a62440a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/863af9a44a8f5995d57055054e84ff379a62440a/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5977cb070e54643f79b5a05a5378fe060e0319da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5977cb070e54643f79b5a05a5378fe060e0319da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5977cb070e54643f79b5a05a5378fe060e0319da"}], "stats": {"total": 182, "additions": 72, "deletions": 110}, "files": [{"sha": "98bd3f685197934f1ccfc0990048732d0c16886d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=863af9a44a8f5995d57055054e84ff379a62440a", "patch": "@@ -1,3 +1,10 @@\n+2015-11-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (write_func_decl_from_insn): Replace callee\n+\targ with name.  Don't deal with split regs.  Tweak formatting.\n+\t(nvptx_expand_call): Adjust write_func_decl_from_insn call.\n+\t(nvptx_output_call_insn): Don't deal with split regs here.\n+\n 2015-11-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def"}, {"sha": "61030f2f40a671e50fd7842ff46814b1d1fac179", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 58, "deletions": 107, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=863af9a44a8f5995d57055054e84ff379a62440a", "patch": "@@ -719,69 +719,46 @@ nvptx_output_return (void)\n    generated by emit_library_call for which no decl exists.  */\n \n static void\n-write_func_decl_from_insn (std::stringstream &s, rtx result, rtx pat,\n-\t\t\t   rtx callee)\n+write_func_decl_from_insn (std::stringstream &s, const char *name,\n+\t\t\t   rtx result, rtx pat)\n {\n-  bool callprototype = register_operand (callee, Pmode);\n-  const char *name = \"_\";\n-  if (!callprototype)\n+  if (!name)\n+    {\n+      s << \"\\t.callprototype \";\n+      name = \"_\";\n+    }\n+  else\n     {\n-      name = XSTR (callee, 0);\n-      name = nvptx_name_replacement (name);\n       s << \"\\n// BEGIN GLOBAL FUNCTION DECL: \" << name << \"\\n\";\n+      s << \"\\t.extern .func \";\n     }\n-  s << (callprototype ? \"\\t.callprototype\\t\" : \"\\t.extern .func \");\n \n   if (result != NULL_RTX)\n-    {\n-      s << \"(.param\";\n-      s << nvptx_ptx_type_from_mode (arg_promotion (GET_MODE (result)),\n-\t\t\t\t     false);\n-      s << \" \";\n-      if (callprototype)\n-\ts << \"_\";\n-      else\n-\ts << \"%out_retval\";\n-      s << \")\";\n-    }\n+    s << \"(.param\"\n+      << nvptx_ptx_type_from_mode (arg_promotion (GET_MODE (result)), false)\n+      << \" %rval) \";\n \n   s << name;\n \n+  const char *sep = \" (\";\n   int arg_end = XVECLEN (pat, 0);\n-      \n-  if (1 < arg_end)\n+  for (int i = 1; i < arg_end; i++)\n     {\n-      const char *comma = \"\";\n-      s << \" (\";\n-      for (int i = 1; i < arg_end; i++)\n-\t{\n-\t  rtx t = XEXP (XVECEXP (pat, 0, i), 0);\n-\t  machine_mode mode = GET_MODE (t);\n-\t  machine_mode split = maybe_split_mode (mode);\n-\t  int count = 1;\n-\n-\t  if (split != VOIDmode)\n-\t    {\n-\t      mode = split;\n-\t      count = 2;\n-\t    }\n-\n-\t  while (count--)\n-\t    {\n-\t      s << comma << \".param\";\n-\t      s << nvptx_ptx_type_from_mode (mode, false);\n-\t      s << \" \";\n-\t      if (callprototype)\n-\t\ts << \"_\";\n-\t      else\n-\t\ts << \"%arg\" << i - 1;\n-\t      if (mode == QImode || mode == HImode)\n-\t\ts << \"[1]\";\n-\t      comma = \", \";\n-\t    }\n-\t}\n-      s << \")\";\n+      /* We don't have to deal with mode splitting here, as that was\n+\t already done when generating the call sequence.  */\n+      machine_mode mode = GET_MODE (XEXP (XVECEXP (pat, 0, i), 0));\n+\n+      s << sep\n+\t<< \".param\"\n+\t<< nvptx_ptx_type_from_mode (mode, false)\n+\t<< \" %arg\"\n+\t<< i;\n+      if (mode == QImode || mode == HImode)\n+\ts << \"[1]\";\n+      sep = \", \";\n     }\n+  if (arg_end != 1)\n+    s << \")\";\n   s << \";\\n\";\n }\n \n@@ -905,10 +882,7 @@ nvptx_expand_call (rtx retval, rtx address)\n       && stdarg_p (cfun->machine->funtype))\n     {\n       varargs = gen_reg_rtx (Pmode);\n-      if (Pmode == DImode)\n-\temit_move_insn (varargs, stack_pointer_rtx);\n-      else\n-\temit_move_insn (varargs, stack_pointer_rtx);\n+      emit_move_insn (varargs, stack_pointer_rtx);\n       cfun->machine->has_call_with_varargs = true;\n     }\n   vec = rtvec_alloc (nargs + 1 + (varargs ? 1 : 0));\n@@ -951,7 +925,11 @@ nvptx_expand_call (rtx retval, rtx address)\n       if (*slot == NULL)\n \t{\n \t  *slot = callee;\n-\t  write_func_decl_from_insn (func_decls, retval, pat, callee);\n+\n+\t  const char *name = XSTR (callee, 0);\n+\t  if (decl_type)\n+\t    name = nvptx_name_replacement (name);\n+\t  write_func_decl_from_insn (func_decls, name, retval, pat);\n \t}\n     }\n \n@@ -1798,7 +1776,7 @@ nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n const char *\n nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n {\n-  char buf[256];\n+  char buf[16];\n   static int labelno;\n   bool needs_tgt = register_operand (callee, Pmode);\n   rtx pat = PATTERN (insn);\n@@ -1825,36 +1803,22 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n       labelno++;\n       ASM_OUTPUT_LABEL (asm_out_file, buf);\n       std::stringstream s;\n-      write_func_decl_from_insn (s, result, pat, callee);\n+      write_func_decl_from_insn (s, NULL, result, pat);\n       fputs (s.str().c_str(), asm_out_file);\n     }\n \n-  for (int i = 1, argno = 0; i < arg_end; i++)\n+  for (int argno = 1; argno < arg_end; argno++)\n     {\n-      rtx t = XEXP (XVECEXP (pat, 0, i), 0);\n+      rtx t = XEXP (XVECEXP (pat, 0, argno), 0);\n       machine_mode mode = GET_MODE (t);\n-      machine_mode split = maybe_split_mode (mode);\n-      int count = 1;\n-      \n-      if (split != VOIDmode)\n-\t{\n-\t  mode = split;\n-\t  count = 2;\n-\t}\n \n-      for (int n = 0; n != count; n++)\n-\t{\n-\t  fprintf (asm_out_file, \"\\t\\t.param%s %%out_arg%d%s;\\n\",\n-\t\t   nvptx_ptx_type_from_mode (mode, false), argno,\n-\t\t   mode == QImode || mode == HImode ? \"[1]\" : \"\");\n-\t  fprintf (asm_out_file, \"\\t\\tst.param%s [%%out_arg%d], %%r%d\",\n-\t\t   nvptx_ptx_type_from_mode (mode, false), argno,\n-\t\t   REGNO (t));\n-\t  if (split != VOIDmode)\n-\t    fprintf (asm_out_file, \"$%d\", n);\n-\t  fprintf (asm_out_file, \";\\n\");\n-\t  argno++;\n-\t}\n+      /* Mode splitting has already been done.  */\n+      fprintf (asm_out_file, \"\\t\\t.param%s %%out_arg%d%s;\\n\",\n+\t       nvptx_ptx_type_from_mode (mode, false), argno,\n+\t       mode == QImode || mode == HImode ? \"[1]\" : \"\");\n+      fprintf (asm_out_file, \"\\t\\tst.param%s [%%out_arg%d], %%r%d;\\n\",\n+\t       nvptx_ptx_type_from_mode (mode, false), argno,\n+\t       REGNO (t));\n     }\n \n   fprintf (asm_out_file, \"\\t\\tcall \");\n@@ -1870,42 +1834,29 @@ nvptx_output_call_insn (rtx_insn *insn, rtx result, rtx callee)\n   else\n     output_address (VOIDmode, callee);\n \n-  if (arg_end > 1 || (decl && DECL_STATIC_CHAIN (decl)))\n+  const char *open = \"(\";\n+  for (int argno = 1; argno < arg_end; argno++)\n     {\n-      const char *comma = \"\";\n-      \n-      fprintf (asm_out_file, \", (\");\n-      for (int i = 1, argno = 0; i < arg_end; i++)\n-\t{\n-\t  rtx t = XEXP (XVECEXP (pat, 0, i), 0);\n-\t  machine_mode mode = GET_MODE (t);\n-\t  machine_mode split = maybe_split_mode (mode);\n-\n-\t  if (split != VOIDmode)\n-\t    {\n-\t      fprintf (asm_out_file, \"%s%%out_arg%d\", comma, argno++);\n-\t      comma = \", \";\n-\t    }\n-\t  fprintf (asm_out_file, \"%s%%out_arg%d\", comma, argno++);\n-\t  comma = \", \";\n-\t}\n-      if (decl && DECL_STATIC_CHAIN (decl))\n-\tfprintf (asm_out_file, \"%s%s\", comma,\n-\t\t reg_names [OUTGOING_STATIC_CHAIN_REGNUM]);\n-\n-      fprintf (asm_out_file, \")\");\n+      fprintf (asm_out_file, \", %s%%out_arg%d\", open, argno);\n+      open = \"\";\n     }\n+  if (decl && DECL_STATIC_CHAIN (decl))\n+    {\n+      fprintf (asm_out_file, \", %s%s\", open,\n+\t       reg_names [OUTGOING_STATIC_CHAIN_REGNUM]);\n+      open = \"\";\n+    }\n+  if (!open[0])\n+    fprintf (asm_out_file, \")\");\n \n   if (needs_tgt)\n     {\n       fprintf (asm_out_file, \", \");\n       assemble_name (asm_out_file, buf);\n     }\n   fprintf (asm_out_file, \";\\n\");\n-  if (result != NULL_RTX)\n-    return \"\\tld.param%t0\\t%0, [%%retval_in];\\n\\t}\";\n \n-  return \"}\";\n+  return result != NULL_RTX ? \"\\tld.param%t0\\t%0, [%%retval_in];\\n\\t}\" : \"}\";\n }\n \n /* Implement TARGET_PRINT_OPERAND_PUNCT_VALID_P.  */"}, {"sha": "46810e8191ff6b16fecd0f1933665c748b96ed0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=863af9a44a8f5995d57055054e84ff379a62440a", "patch": "@@ -1,3 +1,7 @@\n+2015-11-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.target/nvptx/proto-1.c: Adjust expected asm.\n+\n 2015-11-26  Richard Biener  <rguenther@suse.de>\n \n \tPR testsuite/68555"}, {"sha": "6245d915ed4afb99b061a50516d48f162918d628", "filename": "gcc/testsuite/gcc.target/nvptx/proto-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fproto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/863af9a44a8f5995d57055054e84ff379a62440a/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fproto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fproto-1.c?ref=863af9a44a8f5995d57055054e84ff379a62440a", "patch": "@@ -6,8 +6,8 @@ int f(void)\n \n   /* Check that without an explicit prototype, we deduce from call site the\n      signature for the (mandatory in PTX) prototype.  */\n-  /* extern int acc_on_device_(int *); */\n+  /* extern int foo (int *); */\n   /* { dg-final { scan-assembler-not \"\\\\\\.callprototype\" } } */\n-  /* { dg-final { scan-assembler \"\\\\\\.extern \\\\\\.func \\\\\\(\\[^,\\n\\r\\]+\\\\\\)acc_on_device_ \\\\\\(\\[^,\\n\\r\\]+\\\\\\);\" } } */\n-  return !acc_on_device_(&dev);\n+  /* { dg-final { scan-assembler \"\\\\\\.extern \\\\\\.func \\\\\\(\\[^,\\n\\r\\]+\\\\\\) foo \\\\\\(\\[^,\\n\\r\\]+\\\\\\);\" } } */\n+  return !foo(&dev);\n }"}]}