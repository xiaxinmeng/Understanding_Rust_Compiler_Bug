{"sha": "15077df5dcd5c9fd996f31cd56ed12a677a2b771", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUwNzdkZjVkY2Q1YzlmZDk5NmYzMWNkNTZlZDEyYTY3N2EyYjc3MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-05-24T02:29:34Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-05-24T02:29:34Z"}, "message": "re PR c++/15044 (ICE on syntax error, template header.)\n\n\tPR c++/15044\n\t* parser.c (cp_parser_class_head): Robustify.\n\n\tPR c++/15317\n\t* parser.c (cp_parser_decl_specifier_seq): Correct error in\n\tcomment.\n\t(cp_parser_constructor_declarator_p): Treat attributes\n\tas decl-specifiers.\n\n\tPR c++/15329\n\t* typeck.c (build_unary_op): Do not attempt to resolve casts to\n\tbase classes in templates.\n\n\tPR c++/15044\n\t* g++.dg/template/error12.C: New test.\n\n\tPR c++/15317\n\t* g++.dg/ext/attrib15.C: New test.\n\n\tPR c++/15329\n\t* g++.dg/template/ptrmem9.C: New test.\n\nFrom-SVN: r82191", "tree": {"sha": "53a75488b33cd796dfcbd46bc8916fe219c7f84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53a75488b33cd796dfcbd46bc8916fe219c7f84b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15077df5dcd5c9fd996f31cd56ed12a677a2b771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15077df5dcd5c9fd996f31cd56ed12a677a2b771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15077df5dcd5c9fd996f31cd56ed12a677a2b771", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15077df5dcd5c9fd996f31cd56ed12a677a2b771/comments", "author": null, "committer": null, "parents": [{"sha": "8eeea0c1c72e64f95114c53e9a41dabc98c8978b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eeea0c1c72e64f95114c53e9a41dabc98c8978b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eeea0c1c72e64f95114c53e9a41dabc98c8978b"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "8e5e03adcf9691325b8e1389c4a4c44af562b25b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -1,3 +1,18 @@\n+2004-05-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15044\n+\t* parser.c (cp_parser_class_head): Robustify.\n+\n+\tPR c++/15317\n+\t* parser.c (cp_parser_decl_specifier_seq): Correct error in\n+\tcomment.\n+\t(cp_parser_constructor_declarator_p): Treat attributes\n+\tas decl-specifiers.\n+\n+\tPR c++/15329\n+\t* typeck.c (build_unary_op): Do not attempt to resolve casts to\n+\tbase classes in templates.\n+\n 2004-05-23  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15165"}, {"sha": "44c820a2868fec65e9cc273fff127c366e4164c5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -6659,8 +6659,8 @@ cp_parser_simple_declaration (cp_parser* parser,\n \n    GNU Extension:\n \n-   decl-specifier-seq:\n-     decl-specifier-seq [opt] attributes\n+   decl-specifier:\n+     attributes\n \n    Returns a TREE_LIST, giving the decl-specifiers in the order they\n    appear in the source code.  The TREE_VALUE of each node is the\n@@ -12101,7 +12101,8 @@ cp_parser_class_head (cp_parser* parser,\n \n   pop_deferring_access_checks ();\n \n-  cp_parser_check_for_invalid_template_id (parser, id);\n+  if (id)\n+    cp_parser_check_for_invalid_template_id (parser, id);\n \n   /* If it's not a `:' or a `{' then we can't really be looking at a\n      class-head, since a class-head only appears as part of a\n@@ -14154,6 +14155,10 @@ cp_parser_constructor_declarator_p (cp_parser *parser, bool friend_p)\n     {\n       if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN)\n \t  && cp_lexer_next_token_is_not (parser->lexer, CPP_ELLIPSIS)\n+\t  /* A parameter declaration begins with a decl-specifier,\n+\t     which is either the \"attribute\" keyword, a storage class\n+\t     specifier, or (usually) a type-specifier.  */\n+\t  && !cp_lexer_next_token_is_keyword (parser->lexer, RID_ATTRIBUTE)\n \t  && !cp_parser_storage_class_specifier_opt (parser))\n \t{\n \t  tree type;"}, {"sha": "fb00f58d815d1e55257441f4add440667563a174", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -4046,7 +4046,11 @@ build_unary_op (enum tree_code code, tree xarg, int noconvert)\n       {\n \ttree addr;\n \n-\tif (TREE_CODE (arg) != COMPONENT_REF)\n+\tif (TREE_CODE (arg) != COMPONENT_REF\n+\t    /* Inside a template, we are processing a non-dependent\n+\t       expression so we can just form an ADDR_EXPR with the\n+\t       correct type.  */\n+\t    || processing_template_decl)\n \t  addr = build_address (arg);\n \telse if (TREE_CODE (TREE_OPERAND (arg, 1)) == BASELINK)\n \t  {"}, {"sha": "667a742a8ecf04afa961edd5c1eec648ac6838a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -1,3 +1,14 @@\n+2004-05-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/15044\n+\t* g++.dg/template/error12.C: New test.\n+\n+\tPR c++/15317\n+\t* g++.dg/ext/attrib15.C: New test.\n+\n+\tPR c++/15329\n+\t* g++.dg/template/ptrmem9.C: New test.\n+\n 2004-05-25  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.fortran-torture/compile/inquiry_1.f90: New test."}, {"sha": "05de12ccecb29ab118d8f54c4dd1805fddfc9264", "filename": "gcc/testsuite/g++.dg/ext/attrib15.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib15.C?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/15317\n+\n+struct A\n+{\n+  A(char);\n+};\n+A::A(__attribute__((unused)) char i2)\n+{}\n+"}, {"sha": "c15961fc33e59deba2f3f1a4870d6d1bd7e9c0d3", "filename": "gcc/testsuite/g++.dg/template/error12.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror12.C?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/15044\n+\n+template class <num_t> class a { num_t n; } // { dg-error \"\" }\n+"}, {"sha": "55e881599357ab92e3a4782fd1b07f7dcabb211c", "filename": "gcc/testsuite/g++.dg/template/ptrmem9.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15077df5dcd5c9fd996f31cd56ed12a677a2b771/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fptrmem9.C?ref=15077df5dcd5c9fd996f31cd56ed12a677a2b771", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/15329\n+\n+struct S {}; \n+ \n+template <typename> struct X { \n+    S s; \n+    void foo (void (S::*p)()) \n+      { (s.*p)(); } \n+}; "}]}