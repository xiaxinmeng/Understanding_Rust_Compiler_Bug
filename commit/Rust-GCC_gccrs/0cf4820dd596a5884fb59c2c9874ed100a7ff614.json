{"sha": "0cf4820dd596a5884fb59c2c9874ed100a7ff614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmNDgyMGRkNTk2YTU4ODRmYjU5YzJjOTg3NGVkMTAwYTdmZjYxNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-12-15T15:04:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-12-15T15:04:59Z"}, "message": "[PR C++/59930] template friend classes & default args\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-12/msg01055.html\n\tPR c++/59930\n\t* decl.c (xref_tag_1): Correct comments about template friends and\n\tdefault args.\n\t* friend.c (make_friend_class): Move comments concerning\n\tself-friendliness to code dealing with such.\n\t* pt.c (check_default_tmpl_args): Deal with template friend\n\tclasses too.\n\t(push_template_decl_real): Check default args for non-function\n\ttemplate friends.\n\n\tPR c++/59930\n\t* g++.dg/cpp0x/temp_default4.C: Adjust diagnostic.\n\t* g++.old-deja/g++.pt/friend23.C: Likewise.\n\t* g++.old-deja/g++.pt/friend24.C: Delete.\n\nFrom-SVN: r255698", "tree": {"sha": "599aa3e7811f0d64352939a93b471f1440562272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/599aa3e7811f0d64352939a93b471f1440562272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cf4820dd596a5884fb59c2c9874ed100a7ff614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf4820dd596a5884fb59c2c9874ed100a7ff614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf4820dd596a5884fb59c2c9874ed100a7ff614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf4820dd596a5884fb59c2c9874ed100a7ff614/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7425c18b5af5a12f68bde8b5f30adf02a774536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7425c18b5af5a12f68bde8b5f30adf02a774536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7425c18b5af5a12f68bde8b5f30adf02a774536"}], "stats": {"total": 127, "additions": 62, "deletions": 65}, "files": [{"sha": "37c129d174f7d2dd058a407d8ee618f3ff317c0f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -1,3 +1,15 @@\n+2017-12-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/59930\n+\t* decl.c (xref_tag_1): Correct comments about template friends and\n+\tdefault args.\n+\t* friend.c (make_friend_class): Move comments concerning\n+\tself-friendliness to code dealing with such.\n+\t* pt.c (check_default_tmpl_args): Deal with template friend\n+\tclasses too.\n+\t(push_template_decl_real): Check default args for non-function\n+\ttemplate friends.\n+\n 2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* decl2.c (start_static_storage_duration_function): Avoid warning."}, {"sha": "63a7b92b3bc871f534f125fcde4b10929ccce1d7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -13538,37 +13538,28 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t processing a (member) template declaration of a template\n \t class, we must be very careful; consider:\n \n-\t   template <class X>\n-\t   struct S1\n+\t   template <class X> struct S1\n \n-\t   template <class U>\n-\t   struct S2\n-\t   { template <class V>\n-\t   friend struct S1; };\n+\t   template <class U> struct S2\n+\t   {\n+\t     template <class V> friend struct S1;\n+\t   };\n \n \t Here, the S2::S1 declaration should not be confused with the\n \t outer declaration.  In particular, the inner version should\n-\t have a template parameter of level 2, not level 1.  This\n-\t would be particularly important if the member declaration\n-\t were instead:\n-\n-\t   template <class V = U> friend struct S1;\n+\t have a template parameter of level 2, not level 1.\n \n-\t say, when we should tsubst into `U' when instantiating\n-\t S2.  On the other hand, when presented with:\n+\t On the other hand, when presented with:\n \n-\t   template <class T>\n-\t   struct S1 {\n-\t     template <class U>\n-\t     struct S2 {};\n-\t     template <class U>\n-\t     friend struct S2;\n+\t   template <class T> struct S1\n+\t   {\n+\t     template <class U> struct S2 {};\n+\t     template <class U> friend struct S2;\n \t   };\n \n-\t we must find the inner binding eventually.  We\n-\t accomplish this by making sure that the new type we\n-\t create to represent this declaration has the right\n-\t TYPE_CONTEXT.  */\n+\t the friend must find S1::S2 eventually.  We accomplish this\n+\t by making sure that the new type we create to represent this\n+\t declaration has the right TYPE_CONTEXT.  */\n       context = TYPE_CONTEXT (t);\n       t = NULL_TREE;\n     }\n@@ -13622,9 +13613,10 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t  return error_mark_node;\n \t}\n \n-      /* Make injected friend class visible.  */\n       if (scope != ts_within_enclosing_non_class && TYPE_HIDDEN_P (t))\n \t{\n+\t  /* This is no longer an invisible friend.  Make it\n+\t     visible.  */\n \t  tree decl = TYPE_NAME (t);\n \n \t  DECL_ANTICIPATED (decl) = false;"}, {"sha": "e99ae681f1e39158cfa1184ab6933c30f4d40e8e", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -283,21 +283,18 @@ make_friend_class (tree type, tree friend_type, bool complain)\n     return;\n \n   if (friend_depth)\n-    /* If the TYPE is a template then it makes sense for it to be\n-       friends with itself; this means that each instantiation is\n-       friends with all other instantiations.  */\n     {\n+      /* [temp.friend] Friend declarations shall not declare partial\n+\t specializations.  */\n       if (CLASS_TYPE_P (friend_type)\n \t  && CLASSTYPE_TEMPLATE_SPECIALIZATION (friend_type)\n \t  && uses_template_parms (friend_type))\n \t{\n-\t  /* [temp.friend]\n-\t     Friend declarations shall not declare partial\n-\t     specializations.  */\n \t  error (\"partial specialization %qT declared %<friend%>\",\n \t\t friend_type);\n \t  return;\n \t}\n+\n       if (TYPE_TEMPLATE_INFO (friend_type)\n \t  && !PRIMARY_TEMPLATE_P (TYPE_TI_TEMPLATE (friend_type)))\n \t{\n@@ -311,7 +308,11 @@ make_friend_class (tree type, tree friend_type, bool complain)\n \t  return;\n \t}\n     }\n-  else if (same_type_p (type, friend_type))\n+\n+  /* It makes sense for a template class to be friends with itself,\n+     that means the instantiations can be friendly.  Other cases are\n+     not so meaningful.  */\n+  if (!friend_depth && same_type_p (type, friend_type))\n     {\n       if (complain)\n \twarning (0, \"class %qT is implicitly friends with itself\","}, {"sha": "5a6a7cff939496a29caa2b315bdd24be9addb208", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -4980,9 +4980,10 @@ fixed_parameter_pack_p (tree parm)\n    a primary template.  IS_PARTIAL is true if DECL is a partial\n    specialization.\n \n-   IS_FRIEND_DECL is nonzero if DECL is a friend function template\n-   declaration (but not a definition); 1 indicates a declaration, 2\n-   indicates a redeclaration. When IS_FRIEND_DECL=2, no errors are\n+   IS_FRIEND_DECL is nonzero if DECL is either a non-defining friend\n+   function template declaration or a friend class template\n+   declaration.  In the function case, 1 indicates a declaration, 2\n+   indicates a redeclaration.  When IS_FRIEND_DECL=2, no errors are\n    emitted for extraneous default arguments.\n \n    Returns TRUE if there were no errors found, FALSE otherwise. */\n@@ -5130,7 +5131,7 @@ check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n     msg = G_(\"default template arguments may not be used in function template \"\n \t     \"friend re-declaration\");\n   else if (is_friend_decl)\n-    msg = G_(\"default template arguments may not be used in function template \"\n+    msg = G_(\"default template arguments may not be used in template \"\n \t     \"friend declarations\");\n   else if (TREE_CODE (decl) == FUNCTION_DECL && (cxx_dialect == cxx98))\n     msg = G_(\"default template arguments may not be used in function templates \"\n@@ -5277,7 +5278,7 @@ push_template_decl_real (tree decl, bool is_friend)\n     is_friend = true;\n \n   if (is_friend)\n-    /* For a friend, we want the context of the friend function, not\n+    /* For a friend, we want the context of the friend, not\n        the type of which it is a friend.  */\n     ctx = CP_DECL_CONTEXT (decl);\n   else if (CP_DECL_CONTEXT (decl)\n@@ -5380,9 +5381,12 @@ push_template_decl_real (tree decl, bool is_friend)\n     }\n \n   /* Check to see that the rules regarding the use of default\n-     arguments are not being violated.  */\n-  check_default_tmpl_args (decl, current_template_parms,\n-\t\t\t   is_primary, is_partial, /*is_friend_decl=*/0);\n+     arguments are not being violated.  We check args for a friend\n+     functions when we know whether it's a definition, introducing\n+     declaration or re-declaration.  */\n+  if (!is_friend || TREE_CODE (decl) != FUNCTION_DECL)\n+    check_default_tmpl_args (decl, current_template_parms,\n+\t\t\t     is_primary, is_partial, is_friend);\n \n   /* Ensure that there are no parameter packs in the type of this\n      declaration that have not been expanded.  */"}, {"sha": "2a73f82c97f08a8247e89a5969af9f10a87f6f42", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -1,3 +1,10 @@\n+2017-12-14  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/59930\n+\t* g++.dg/cpp0x/temp_default4.C: Adjust diagnostic.\n+\t* g++.old-deja/g++.pt/friend23.C: Likewise.\n+\t* g++.old-deja/g++.pt/friend24.C: Delete.\n+\n 2017-12-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/83269"}, {"sha": "0dc58548255d6645fd54e71e6d4af6bd7efe5621", "filename": "gcc/testsuite/g++.dg/cpp0x/temp_default4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ftemp_default4.C?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile { target c++11 } }\n \n class X {\n-  template<typename T = int> friend void f(X) { }\n+  template<typename T = int> friend void f(X) { } // OK\n   template<typename T> friend void g(X); // { dg-message \"previously declared here\" }\n-  template<typename T = int> friend void h(X); // { dg-error \"function template friend\" }\n+  template<typename T = int> friend void h(X); // { dg-error \"template friend\" }\n };\n \n template<typename T = int> void g(X) // { dg-error \"default template argument\" }"}, {"sha": "b79a599a45e2d3360fb4f81364bf0017873555fe", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend23.C", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf4820dd596a5884fb59c2c9874ed100a7ff614/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend23.C?ref=0cf4820dd596a5884fb59c2c9874ed100a7ff614", "patch": "@@ -1,10 +1,9 @@\n-// { dg-do assemble  }\n+// PR 59930 (part)  templated class friend declarations cannot have\n+// default args.\n \n-template <class T = int> // { dg-message \"note: original definition\" }\n+template <class T>\n struct S\n { \n-  template <class U = int>\n-  friend class S; // { dg-error \"redefinition of default argument\" }\n+  template <class U = int> friend class R; // { dg-error \"template friend\" }\n+  template <class U = int> friend class S; // { dg-error \"template friend\" }\n };\n-\n-template struct S<int>;"}, {"sha": "5a4116fd47bc6dedc4f9aab9469b552e779dee9d", "filename": "gcc/testsuite/g++.old-deja/g++.pt/friend24.C", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7425c18b5af5a12f68bde8b5f30adf02a774536/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7425c18b5af5a12f68bde8b5f30adf02a774536/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Ffriend24.C?ref=e7425c18b5af5a12f68bde8b5f30adf02a774536", "patch": "@@ -1,18 +0,0 @@\n-// { dg-do assemble  }\n-\n-template <class T>\n-struct S\n-{\n-  template <class U = T>\n-  friend class S;\n-\n-  void f(T);\n-};\n-\n-template struct S<int>;\n-\n-void g()\n-{\n-  S<> s;\n-  s.f(3);\n-}"}]}