{"sha": "a4744f620f32b6b859a39c6876f5e21b52b1af4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ3NDRmNjIwZjMyYjZiODU5YTM5YzY4NzZmNWUyMWI1MmIxYWY0Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-14T16:12:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-14T16:12:21Z"}, "message": "Avoid copies in std::scoped_allocator_adaptor piecewise construction\n\n\t* include/std/scoped_allocator (scoped_allocator_adaptor): Forward\n\tpiecewise construction arguments as tuples of references, to avoid\n\tcopies (related to LWG 2511).\n\t* testsuite/20_util/scoped_allocator/construct_pair.cc: New test.\n\nFrom-SVN: r241169", "tree": {"sha": "1066398a67a405a7006243379c47c61cdac0098d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1066398a67a405a7006243379c47c61cdac0098d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4744f620f32b6b859a39c6876f5e21b52b1af4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4744f620f32b6b859a39c6876f5e21b52b1af4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4744f620f32b6b859a39c6876f5e21b52b1af4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4744f620f32b6b859a39c6876f5e21b52b1af4b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30cd7c740ce5525181b557b51238963260f16637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cd7c740ce5525181b557b51238963260f16637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30cd7c740ce5525181b557b51238963260f16637"}], "stats": {"total": 123, "additions": 107, "deletions": 16}, "files": [{"sha": "7a3fdaf29f157ac7ddd0356a347a9f2a68b44dbe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4744f620f32b6b859a39c6876f5e21b52b1af4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4744f620f32b6b859a39c6876f5e21b52b1af4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a4744f620f32b6b859a39c6876f5e21b52b1af4b", "patch": "@@ -1,3 +1,10 @@\n+2016-10-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/scoped_allocator (scoped_allocator_adaptor): Forward\n+\tpiecewise construction arguments as tuples of references, to avoid\n+\tcopies (related to LWG 2511).\n+\t* testsuite/20_util/scoped_allocator/construct_pair.cc: New test.\n+\n 2016-10-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/26_numerics/accumulate/1.cc: Remove 'test' variables."}, {"sha": "dcb97df63b39c77d6cf2da457b71493fe8aa3b96", "filename": "libstdc++-v3/include/std/scoped_allocator", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4744f620f32b6b859a39c6876f5e21b52b1af4b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4744f620f32b6b859a39c6876f5e21b52b1af4b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fscoped_allocator?ref=a4744f620f32b6b859a39c6876f5e21b52b1af4b", "patch": "@@ -369,10 +369,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    = __use_alloc<_T1, inner_allocator_type, _Args1...>(__inner);\n \t  auto __y_use_tag\n \t    = __use_alloc<_T2, inner_allocator_type, _Args2...>(__inner);\n+\t  typename _Build_index_tuple<sizeof...(_Args1)>::__type __x_indices;\n+\t  typename _Build_index_tuple<sizeof...(_Args2)>::__type __y_indices;\n \t  typedef __outermost_alloc_traits<scoped_allocator_adaptor> _O_traits;\n \t  _O_traits::construct(__outermost(*this), __p, piecewise_construct,\n-\t\t\t       _M_construct_p(__x_use_tag, __x),\n-\t\t\t       _M_construct_p(__y_use_tag, __y));\n+\t\t\t       _M_construct_p(__x_use_tag, __x_indices, __x),\n+\t\t\t       _M_construct_p(__y_use_tag, __y_indices, __y));\n \t}\n \n       template<typename _T1, typename _T2>\n@@ -428,26 +430,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                  const scoped_allocator_adaptor<_OutA2, _InA...>& __b) noexcept;\n \n     private:\n-      template<typename _Tuple>\n-\t_Tuple&&\n-\t_M_construct_p(__uses_alloc0, _Tuple& __t)\n+      template<typename _Ind, typename... _Args>\n+\ttuple<_Args&&...>\n+\t_M_construct_p(__uses_alloc0, _Ind, tuple<_Args...>& __t)\n \t{ return std::move(__t); }\n \n-      template<typename... _Args>\n-\tstd::tuple<allocator_arg_t, inner_allocator_type&, _Args...>\n-\t_M_construct_p(__uses_alloc1_, std::tuple<_Args...>& __t)\n+      template<size_t... _Ind, typename... _Args>\n+\ttuple<allocator_arg_t, inner_allocator_type&, _Args&&...>\n+\t_M_construct_p(__uses_alloc1_, _Index_tuple<_Ind...>,\n+\t\t       tuple<_Args...>& __t)\n \t{\n-\t  typedef std::tuple<allocator_arg_t, inner_allocator_type&> _Tuple;\n-\t  return std::tuple_cat(_Tuple(allocator_arg, inner_allocator()),\n-\t\t\t\tstd::move(__t));\n+\t  return { allocator_arg, inner_allocator(),\n+\t      std::get<_Ind>(std::move(__t))...\n+\t  };\n \t}\n \n-      template<typename... _Args>\n-\tstd::tuple<_Args..., inner_allocator_type&>\n-\t_M_construct_p(__uses_alloc2_, std::tuple<_Args...>& __t)\n+      template<size_t... _Ind, typename... _Args>\n+\ttuple<_Args&&..., inner_allocator_type&>\n+\t_M_construct_p(__uses_alloc2_, _Index_tuple<_Ind...>,\n+\t\t       tuple<_Args...>& __t)\n \t{\n-\t  typedef std::tuple<inner_allocator_type&> _Tuple;\n-\t  return std::tuple_cat(std::move(__t), _Tuple(inner_allocator()));\n+\t  return { std::get<_Ind>(std::move(__t))..., inner_allocator() };\n \t}\n     };\n "}, {"sha": "2996412a674a7ee137295a7d9d891597e2e4bb63", "filename": "libstdc++-v3/testsuite/20_util/scoped_allocator/construct_pair.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4744f620f32b6b859a39c6876f5e21b52b1af4b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4744f620f32b6b859a39c6876f5e21b52b1af4b/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fscoped_allocator%2Fconstruct_pair.cc?ref=a4744f620f32b6b859a39c6876f5e21b52b1af4b", "patch": "@@ -0,0 +1,81 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <utility>\n+#include <tuple>\n+#include <scoped_allocator>\n+\n+struct do_not_copy {\n+  do_not_copy() = default;\n+  do_not_copy(const do_not_copy&) { throw 1; }\n+};\n+\n+void\n+test01()\n+{\n+  struct X {\n+    X(do_not_copy&&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::scoped_allocator_adaptor<std::allocator<pair>> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<do_not_copy>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test02()\n+{\n+  struct X {\n+    using allocator_type = std::allocator<int>;\n+    X(do_not_copy&&, const allocator_type&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::scoped_allocator_adaptor<std::allocator<pair>> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<do_not_copy>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+void\n+test03()\n+{\n+  struct X {\n+    using allocator_type = std::allocator<int>;\n+    X(std::allocator_arg_t, const allocator_type&, do_not_copy&&) { }\n+  };\n+\n+  using pair = std::pair<X, int>;\n+  std::scoped_allocator_adaptor<std::allocator<pair>> a;\n+  auto ptr = a.allocate(1);\n+  a.construct(ptr, std::piecewise_construct,\n+      std::tuple<do_not_copy>{}, std::make_tuple(1));\n+  a.deallocate(ptr, 1);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}