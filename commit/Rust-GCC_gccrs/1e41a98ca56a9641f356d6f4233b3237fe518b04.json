{"sha": "1e41a98ca56a9641f356d6f4233b3237fe518b04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU0MWE5OGNhNTZhOTY0MWYzNTZkNmY0MjMzYjMyMzdmZTUxOGIwNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-02-26T18:42:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-02-26T18:42:29Z"}, "message": "cmath: Add templates (8.16.3).\n\n2006-02-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cmath: Add templates (8.16.3).\t\n\t* include/tr1/cstbool: New.\n\t* include/tr1/stdbool.h: Likewise.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cmath/templates.cc: New.\n\t* testsuite/tr1/headers.cc: Update.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <stdbool.h> check.\n\t* docs/html/ext/tr1.html: Update.\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\n\nFrom-SVN: r111456", "tree": {"sha": "73d312f69816168920d505f647047caa376efd23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d312f69816168920d505f647047caa376efd23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e41a98ca56a9641f356d6f4233b3237fe518b04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e41a98ca56a9641f356d6f4233b3237fe518b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e41a98ca56a9641f356d6f4233b3237fe518b04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e41a98ca56a9641f356d6f4233b3237fe518b04/comments", "author": null, "committer": null, "parents": [{"sha": "cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cef65eaa924c2c9eff16af8a19b051ad61d65ec2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cef65eaa924c2c9eff16af8a19b051ad61d65ec2"}], "stats": {"total": 281, "additions": 275, "deletions": 6}, "files": [{"sha": "96bce8c6655361597d0d12b5d6503cf6adea0a2d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -1,3 +1,17 @@\n+2006-02-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cmath: Add templates (8.16.3).\t\n+\t* include/tr1/cstbool: New.\n+\t* include/tr1/stdbool.h: Likewise.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cmath/templates.cc: New.\n+\t* testsuite/tr1/headers.cc: Update.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <stdbool.h> check.\n+\t* docs/html/ext/tr1.html: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n 2006-02-24  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/array (array<>::swap, assign): Implement."}, {"sha": "4dc38b883ac8c7e2479417fc605f929c774b5cc0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -1330,6 +1330,9 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n               <tr1/cinttypes> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of the <stdbool.h> header.\t\n+  AC_CHECK_HEADERS(stdbool.h)\n+\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "5c373f53fedd2bd60e49a5a8a0303c2abbe7d111", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -286,6 +286,9 @@\n /* Define to 1 if you have the `sqrtl' function. */\n #undef HAVE_SQRTL\n \n+/* Define to 1 if you have the <stdbool.h> header file. */\n+#undef HAVE_STDBOOL_H\n+\n /* Define to 1 if you have the <stdint.h> header file. */\n #undef HAVE_STDINT_H\n "}, {"sha": "11d3cdacb08312c6c621176bfe7799bfd4907940", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -30873,6 +30873,158 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of the <stdbool.h> header.\n+\n+for ac_header in stdbool.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "dcce47327c4a86e928336fcd6821568378aee5fe", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -1971,25 +1971,25 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.16.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.16.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.16.3</td>\n       <td>Function template definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -2027,17 +2027,17 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.20</td>\n       <td>The header <code>&lt;cstdbool&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.21</td>\n       <td>The header <code>&lt;stdbool.h&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -2307,7 +2307,7 @@ <h3>Footnotes</h3>\n <table width=\"100%\" border=\"0\">\n <tr>\n   <td>\n-    <!-- IGNORE DIFF -->Last modified 2006-02-07\n+    <!-- IGNORE DIFF -->Last modified 2006-02-26\n   </td>\n   <td align=\"right\" valign=\"bottom\">\n     <a href=\"http://validator.w3.org/check/referer\">"}, {"sha": "0d179c9bfbd77fba6f12794d0bbd93e9f0f44f55", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -493,6 +493,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdarg \\\n+\t${tr1_srcdir}/cstdbool \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/cstdio \\\n \t${tr1_srcdir}/cstdlib \\\n@@ -514,6 +515,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/stdarg.h \\\n+\t${tr1_srcdir}/stdbool.h \\\n \t${tr1_srcdir}/stdint.h \\\n \t${tr1_srcdir}/stdio.h \\\n \t${tr1_srcdir}/stdlib.h \\"}, {"sha": "c749a2c9a42231248d620eb75abb02a9234c861d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -712,6 +712,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/cstdarg \\\n+\t${tr1_srcdir}/cstdbool \\\n \t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/cstdio \\\n \t${tr1_srcdir}/cstdlib \\\n@@ -733,6 +734,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/stdarg.h \\\n+\t${tr1_srcdir}/stdbool.h \\\n \t${tr1_srcdir}/stdint.h \\\n \t${tr1_srcdir}/stdio.h \\\n \t${tr1_srcdir}/stdlib.h \\"}, {"sha": "3549868cd4d90d0ce266e81626d415744afb190d", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -295,4 +295,32 @@ _GLIBCXX_END_NAMESPACE\n \n #endif\n \n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+#if _GLIBCXX_USE_C99_MATH\n+#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n+  using std::signbit;\n+  \n+  using std::fpclassify;\n+\n+  using std::isfinite;\n+  using std::isinf;\n+  using std::isnan;\n+  using std::isnormal;\n+\n+  using std::isgreater;\n+  using std::isgreaterequal;\n+  using std::isless;\n+  using std::islessequal;\n+  using std::islessgreater;\n+  using std::isunordered;\n+#endif\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n #endif"}, {"sha": "31542894ef2e078fc33e60d04a8024e07862eadb", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/templates.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftemplates.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftemplates.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftemplates.cc?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do compile }\n+\n+// 2006-02-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.16 Additions to header <cmath>\n+\n+#include <tr1/cmath>\n+\n+#if _GLIBCXX_USE_C99\n+#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n+\n+template<typename T>\n+  void test01_do()\n+  {\n+    T x = T();\n+    \n+    bool ret;\n+    int iret;\n+\n+    ret = std::tr1::signbit(x);\n+    \n+    iret = std::tr1::fpclassify(x);\n+    \n+    ret = std::tr1::isfinite(x);\n+    ret = std::tr1::isinf(x);\n+    ret = std::tr1::isnan(x);\n+    ret = std::tr1::isnormal(x);\n+    \n+    ret = std::tr1::isgreater(x, x);\n+    ret = std::tr1::isgreaterequal(x, x);\n+    ret = std::tr1::isless(x, x);\n+    ret = std::tr1::islessequal(x, x);\n+    ret = std::tr1::islessgreater(x, x);\n+    ret = std::tr1::isunordered(x, x);\n+  }\n+\n+void test01()\n+{\n+  test01_do<float>();\n+  test01_do<double>();\n+  test01_do<long double>();\n+}\n+\n+#endif\n+#endif"}, {"sha": "ad77006a7c2cb17002b4ac85e52051bbc94e9b8c", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e41a98ca56a9641f356d6f4233b3237fe518b04/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=1e41a98ca56a9641f356d6f4233b3237fe518b04", "patch": "@@ -29,6 +29,7 @@\n #include <tr1/cmath>\n #include <tr1/complex>\n #include <tr1/cstdarg>\n+#include <tr1/cstdbool>\n #include <tr1/cstdint>\n #include <tr1/cstdio>\n #include <tr1/cstdlib>\n@@ -44,6 +45,7 @@\n #include <tr1/math.h>\n #include <tr1/memory>\n #include <tr1/stdarg.h>\n+#include <tr1/stdbool.h>\n #include <tr1/stdint.h>\n #include <tr1/stdio.h>\n #include <tr1/stdlib.h>"}]}