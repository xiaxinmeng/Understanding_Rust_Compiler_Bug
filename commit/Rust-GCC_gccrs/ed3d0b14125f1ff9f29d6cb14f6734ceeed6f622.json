{"sha": "ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQzZDBiMTQxMjVmMWZmOWYyOWQ2Y2IxNGY2NzM0Y2VlZWQ2ZjYyMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-05-28T01:38:11Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-05-28T01:38:11Z"}, "message": "c-decl.c (add_stmt): Add C frontend specific version.\n\n./:\t* c-decl.c (add_stmt): Add C frontend specific version.\n\t(stmts_are_full_exprs_p): Remove.\n\t* c-common.h (STMT_IS_FULL_EXPR_P): Remove.\n\t(stmts_are_full_exprs_p): Don't declare.\n\t* c-semantics.c (add_stmt): Remove.\ncp/:\n\t* semantics.c (add_stmt): Add C++ frontend specific version.\n\t* cp-tree.h (STMT_IS_FULL_EXPR_P): Define.\n\t(stmts_are_full_exprs_p): Declare.\n\nFrom-SVN: r100289", "tree": {"sha": "fd13f92af3cb33e0387f4cd14cef0ef59efafcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd13f92af3cb33e0387f4cd14cef0ef59efafcfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d336d6dc025c6a9b1310aeb07a1a909c818116d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d336d6dc025c6a9b1310aeb07a1a909c818116d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d336d6dc025c6a9b1310aeb07a1a909c818116d"}], "stats": {"total": 117, "additions": 72, "deletions": 45}, "files": [{"sha": "5530706a50b081f208b961cb0e789dcb51b74fc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -1,3 +1,11 @@\n+2005-05-27  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* c-decl.c (add_stmt): Add C frontend specific version.\n+\t(stmts_are_full_exprs_p): Remove.\n+\t* c-common.h (STMT_IS_FULL_EXPR_P): Remove.\n+\t(stmts_are_full_exprs_p): Don't declare.\n+\t* c-semantics.c (add_stmt): Remove.\n+\n 2005-05-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* config/mips/mips-protos.h (mips_declare_object): Add printf"}, {"sha": "04b434616b222f044356633aba36562e958fd1fd", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -31,7 +31,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n       IDENTIFIER_MARKED (used by search routines).\n       DECL_PRETTY_FUNCTION_P (in VAR_DECL)\n    1: C_DECLARED_LABEL_FLAG (in LABEL_DECL)\n-      STMT_IS_FULL_EXPR_P (in _STMT)\n       STATEMENT_LIST_STMT_EXPR (in STATEMENT_LIST)\n    2: unused\n    3: STATEMENT_LIST_HAS_LABEL (in STATEMENT_LIST)\n@@ -704,12 +703,6 @@ extern void finish_file\t(void);\n \n /* These macros provide convenient access to the various _STMT nodes.  */\n \n-/* Nonzero if this statement should be considered a full-expression,\n-   i.e., if temporaries created during this statement should have\n-   their destructors run at the end of this statement.  (In C, this\n-   will always be false, since there are no destructors.)  */\n-#define STMT_IS_FULL_EXPR_P(NODE) TREE_LANG_FLAG_1 ((NODE))\n-\n /* Nonzero if a given STATEMENT_LIST represents the outermost binding\n    if a statement expression.  */\n #define STATEMENT_LIST_STMT_EXPR(NODE) \\\n@@ -735,7 +728,6 @@ enum c_tree_code {\n \n #undef DEFTREECODE\n \n-extern int stmts_are_full_exprs_p (void);\n extern int anon_aggr_type_p (tree);\n \n /* For a VAR_DECL that is an anonymous union, these are the various"}, {"sha": "d36ceb563d2a706779794405493a886e460d58b7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -418,6 +418,31 @@ static tree grokdeclarator (const struct c_declarator *,\n static tree grokparms (struct c_arg_info *, bool);\n static void layout_array_type (tree);\n \f\n+/* T is a statement.  Add it to the statement-tree.  This is the\n+   C/ObjC version--C++ has a slightly different version of this\n+   function.  */\n+\n+tree\n+add_stmt (tree t)\n+{\n+  enum tree_code code = TREE_CODE (t);\n+\n+  if (EXPR_P (t) && code != LABEL_EXPR)\n+    {\n+      if (!EXPR_HAS_LOCATION (t))\n+\tSET_EXPR_LOCATION (t, input_location);\n+    }\n+\n+  if (code == LABEL_EXPR || code == CASE_LABEL_EXPR)\n+    STATEMENT_LIST_HAS_LABEL (cur_stmt_list) = 1;\n+\n+  /* Add T to the statement-tree.  Non-side-effect statements need to be\n+     recorded during statement expressions.  */\n+  append_to_statement_list_force (t, &cur_stmt_list);\n+\n+  return t;\n+}\n+\f\n /* States indicating how grokdeclarator() should handle declspecs marked\n    with __attribute__((deprecated)).  An object declared as\n    __attribute__((deprecated)) suppresses warnings of uses of other\n@@ -6717,16 +6742,6 @@ c_dup_lang_specific_decl (tree decl)\n    functions are not called from anywhere in the C front end, but as\n    these changes continue, that will change.  */\n \n-/* Returns nonzero if the current statement is a full expression,\n-   i.e. temporaries created during that statement should be destroyed\n-   at the end of the statement.  */\n-\n-int\n-stmts_are_full_exprs_p (void)\n-{\n-  return 0;\n-}\n-\n /* Returns the stmt_tree (if any) to which statements are currently\n    being added.  If there is no active statement-tree, NULL is\n    returned.  */"}, {"sha": "d2f9650a957aa7d88b3728cf7845d41157d8de8f", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -101,33 +101,6 @@ pop_stmt_list (tree t)\n   return t;\n }\n \n-/* T is a statement.  Add it to the statement-tree.  */\n-\n-tree\n-add_stmt (tree t)\n-{\n-  enum tree_code code = TREE_CODE (t);\n-\n-  if (EXPR_P (t) && code != LABEL_EXPR)\n-    {\n-      if (!EXPR_HAS_LOCATION (t))\n-\tSET_EXPR_LOCATION (t, input_location);\n-\n-      /* When we expand a statement-tree, we must know whether or not the\n-\t statements are full-expressions.  We record that fact here.  */\n-      STMT_IS_FULL_EXPR_P (t) = stmts_are_full_exprs_p ();\n-    }\n-\n-  if (code == LABEL_EXPR || code == CASE_LABEL_EXPR)\n-    STATEMENT_LIST_HAS_LABEL (cur_stmt_list) = 1;\n-\n-  /* Add T to the statement-tree.  Non-side-effect statements need to be\n-     recorded during statement expressions.  */\n-  append_to_statement_list_force (t, &cur_stmt_list);\n-\n-  return t;\n-}\n-\n /* Build a generic statement based on the given type of node and\n    arguments. Similar to `build_nt', except that we set\n    EXPR_LOCATION to be the current source location.  */"}, {"sha": "2a9b21681226b2559277e3f48561ed184e9281ff", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -1,3 +1,9 @@\n+2005-05-27  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* semantics.c (add_stmt): Add C++ frontend specific version.\n+\t* cp-tree.h (STMT_IS_FULL_EXPR_P): Define.\n+\t(stmts_are_full_exprs_p): Declare.\n+\n 2005-05-27  Roger Sayle  <roger@eyesopen.com>\n \t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n "}, {"sha": "f4f5a12c79bb753f03f2e54b639a72be847d88c9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -59,6 +59,7 @@ struct diagnostic_context;\n       ICS_ELLIPSIS_FLAG (in _CONV)\n       DECL_INITIALIZED_P (in VAR_DECL)\n       TYPENAME_IS_CLASS_P (in TYPENAME_TYPE)\n+      STMT_IS_FULL_EXPR_P (in _STMT)\n    2: IDENTIFIER_OPNAME_P (in IDENTIFIER_NODE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n@@ -259,6 +260,11 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define STATEMENT_LIST_TRY_BLOCK(NODE) \\\n   TREE_LANG_FLAG_2 (STATEMENT_LIST_CHECK (NODE))\n \n+/* Nonzero if this statement should be considered a full-expression,\n+   i.e., if temporaries created during this statement should have\n+   their destructors run at the end of this statement.  */\n+#define STMT_IS_FULL_EXPR_P(NODE) TREE_LANG_FLAG_1 ((NODE))\n+\n /* Marks the result of a statement expression.  */\n #define EXPR_STMT_STMT_EXPR_RESULT(NODE) \\\n   TREE_LANG_FLAG_0 (EXPR_STMT_CHECK (NODE))\n@@ -4063,6 +4069,7 @@ extern tree get_deferred_access_checks\t\t(void);\n extern void pop_to_parent_deferring_access_checks\t(void);\n extern void perform_deferred_access_checks\t(void);\n extern void perform_or_defer_access_check\t(tree, tree);\n+extern int stmts_are_full_exprs_p\t\t(void);\n extern void init_cp_semantics                   (void);\n extern tree do_poplevel\t\t\t\t(tree);\n extern void add_decl_expr\t\t\t(tree);"}, {"sha": "d969a2463791bb072f9bd01dc3e60cf769267915", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ed3d0b14125f1ff9f29d6cb14f6734ceeed6f622", "patch": "@@ -340,6 +340,32 @@ stmts_are_full_exprs_p (void)\n   return current_stmt_tree ()->stmts_are_full_exprs_p;\n }\n \n+/* T is a statement.  Add it to the statement-tree.  This is the C++\n+   version.  The C/ObjC frontends have a slightly different version of\n+   this function.  */\n+\n+tree\n+add_stmt (tree t)\n+{\n+  enum tree_code code = TREE_CODE (t);\n+\n+  if (EXPR_P (t) && code != LABEL_EXPR)\n+    {\n+      if (!EXPR_HAS_LOCATION (t))\n+\tSET_EXPR_LOCATION (t, input_location);\n+\n+      /* When we expand a statement-tree, we must know whether or not the\n+\t statements are full-expressions.  We record that fact here.  */\n+      STMT_IS_FULL_EXPR_P (t) = stmts_are_full_exprs_p ();\n+    }\n+\n+  /* Add T to the statement-tree.  Non-side-effect statements need to be\n+     recorded during statement expressions.  */\n+  append_to_statement_list_force (t, &cur_stmt_list);\n+\n+  return t;\n+}\n+\n /* Returns the stmt_tree (if any) to which statements are currently\n    being added.  If there is no active statement-tree, NULL is\n    returned.  */"}]}