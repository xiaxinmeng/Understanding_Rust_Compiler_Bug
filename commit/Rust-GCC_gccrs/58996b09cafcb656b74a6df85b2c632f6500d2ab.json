{"sha": "58996b09cafcb656b74a6df85b2c632f6500d2ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg5OTZiMDljYWZjYjY1NmI3NGE2ZGY4NWIyYzYzMmY2NTAwZDJhYg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2015-10-26T15:40:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-26T15:40:10Z"}, "message": "contracts.adb (Analyze_Object_Contract): Set and restore the SPARK_Mode for both constants and objects.\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* contracts.adb (Analyze_Object_Contract): Set and restore\n\tthe SPARK_Mode for both constants and objects. Factor out the\n\tsemantic checks concerning Ghost objects.\n\t* freeze.adb (Freeze_Array_Type): A Ghost array type cannot have a\n\tconcurrent component type.\n\t(Freeze_Entity): A Ghost type cannot also be concurrent.\n\t(Freeze_Record_Type): A Ghost record type cannot have a concurrent\n\tcomponent.\n\t* sem_prag.adb (Analyze_Abstract_State): A Ghost abstract\n\tstate cannot also be synchronized.\n\t(Check_Ghost_Synchronous): New routine.\n\t* sem_util.adb (Yields_Synchronized_Object): Correct the case\n\tof record components to account for the case where the type has\n\tno component list.\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* expander.adb (Expand): Expand a single protected declaration.\n\t* exp_ch9.ads, exp_ch9.adb (Expand_N_Single_Protected_Declaration): New\n\troutine.\n\n2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_res.adb (Is_OK_Volatile_Context): A volatile object may appear\n\tin an object declaration as long as it denotes the name.\n\nFrom-SVN: r229376", "tree": {"sha": "9e5112a192e9b07ac50732ae3a8af868df7dd3e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e5112a192e9b07ac50732ae3a8af868df7dd3e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58996b09cafcb656b74a6df85b2c632f6500d2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58996b09cafcb656b74a6df85b2c632f6500d2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58996b09cafcb656b74a6df85b2c632f6500d2ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58996b09cafcb656b74a6df85b2c632f6500d2ab/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c67e5194634c5c3dfd16580e862fb9d4a4552bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67e5194634c5c3dfd16580e862fb9d4a4552bc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67e5194634c5c3dfd16580e862fb9d4a4552bc9"}], "stats": {"total": 253, "additions": 184, "deletions": 69}, "files": [{"sha": "7cafbd88c89346a73abc1c33a0cc229aa61b1e2f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -1,3 +1,31 @@\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* contracts.adb (Analyze_Object_Contract): Set and restore\n+\tthe SPARK_Mode for both constants and objects. Factor out the\n+\tsemantic checks concerning Ghost objects.\n+\t* freeze.adb (Freeze_Array_Type): A Ghost array type cannot have a\n+\tconcurrent component type.\n+\t(Freeze_Entity): A Ghost type cannot also be concurrent.\n+\t(Freeze_Record_Type): A Ghost record type cannot have a concurrent\n+\tcomponent.\n+\t* sem_prag.adb (Analyze_Abstract_State): A Ghost abstract\n+\tstate cannot also be synchronized.\n+\t(Check_Ghost_Synchronous): New routine.\n+\t* sem_util.adb (Yields_Synchronized_Object): Correct the case\n+\tof record components to account for the case where the type has\n+\tno component list.\n+\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* expander.adb (Expand): Expand a single protected declaration.\n+\t* exp_ch9.ads, exp_ch9.adb (Expand_N_Single_Protected_Declaration): New\n+\troutine.\n+\n+2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_res.adb (Is_OK_Volatile_Context): A volatile object may appear\n+\tin an object declaration as long as it denotes the name.\n+\n 2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_ch9.adb (Analyze_Single_Protected_Declaration): The anonymous"}, {"sha": "2ab91f98fec04a5b85e0b8a5954ec0d1685b00ed", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -648,10 +648,34 @@ package body Contracts is\n          end if;\n       end if;\n \n+      --  The anonymous object created for a single concurrent type inherits\n+      --  the SPARK_Mode from the type. Due to the timing of contract analysis,\n+      --  delayed pragmas may be subject to the wrong SPARK_Mode, usually that\n+      --  of the enclosing context. To remedy this, restore the original mode\n+      --  of the related anonymous object.\n+\n+      if Is_Single_Concurrent_Object (Obj_Id)\n+        and then Present (SPARK_Pragma (Obj_Id))\n+      then\n+         Restore_Mode := True;\n+         Save_SPARK_Mode_And_Set (Obj_Id, Mode);\n+      end if;\n+\n       --  Constant-related checks\n \n       if Ekind (Obj_Id) = E_Constant then\n \n+         --  Analyze indicator Part_Of\n+\n+         Prag := Get_Pragma (Obj_Id, Pragma_Part_Of);\n+\n+         --  Check whether the lack of indicator Part_Of agrees with the\n+         --  placement of the constant with respect to the state space.\n+\n+         if No (Prag) then\n+            Check_Missing_Part_Of (Obj_Id);\n+         end if;\n+\n          --  A constant cannot be effectively volatile (SPARK RM 7.1.3(4)).\n          --  This check is relevant only when SPARK_Mode is on, as it is not\n          --  a standard Ada legality rule. Internally-generated constants that\n@@ -666,32 +690,10 @@ package body Contracts is\n             Error_Msg_N (\"constant cannot be volatile\", Obj_Id);\n          end if;\n \n-         Prag := Get_Pragma (Obj_Id, Pragma_Part_Of);\n-\n-         --  Check whether the lack of indicator Part_Of agrees with the\n-         --  placement of the constant with respect to the state space.\n-\n-         if No (Prag) then\n-            Check_Missing_Part_Of (Obj_Id);\n-         end if;\n-\n       --  Variable-related checks\n \n       else pragma Assert (Ekind (Obj_Id) = E_Variable);\n \n-         --  The anonymous object created for a single concurrent type inherits\n-         --  the SPARK_Mode from the type. Due to the timing of contract\n-         --  analysis, delayed pragmas may be subject to the wrong SPARK_Mode,\n-         --  usually that of the enclosing context. To remedy this, restore the\n-         --  original SPARK_Mode of the related variable.\n-\n-         if Is_Single_Concurrent_Object (Obj_Id)\n-           and then Present (SPARK_Pragma (Obj_Id))\n-         then\n-            Restore_Mode := True;\n-            Save_SPARK_Mode_And_Set (Obj_Id, Mode);\n-         end if;\n-\n          --  Analyze all external properties\n \n          Prag := Get_Pragma (Obj_Id, Pragma_Async_Readers);\n@@ -834,44 +836,42 @@ package body Contracts is\n                   & \"protected type %\"), Obj_Id);\n             end if;\n          end if;\n+      end if;\n \n-         if Is_Ghost_Entity (Obj_Id) then\n+      --  Common checks\n \n-            --  A Ghost object cannot be effectively volatile (SPARK RM 6.9(8))\n+      if Comes_From_Source (Obj_Id) and then Is_Ghost_Entity (Obj_Id) then\n \n-            if Is_Effectively_Volatile (Obj_Id) then\n-               Error_Msg_N (\"ghost variable & cannot be volatile\", Obj_Id);\n+         --  A Ghost object cannot be of a type that yields a synchronized\n+         --  object (SPARK RM 6.9(19)).\n \n-            --  A Ghost object cannot be imported or exported (SPARK RM 6.9(8))\n+         if Yields_Synchronized_Object (Obj_Typ) then\n+            Error_Msg_N (\"ghost object & cannot be synchronized\", Obj_Id);\n \n-            elsif Is_Imported (Obj_Id) then\n-               Error_Msg_N (\"ghost object & cannot be imported\", Obj_Id);\n+         --  A Ghost object cannot be effectively volatile (SPARK RM 6.9(8) and\n+         --  SPARK RM 6.9(19)).\n \n-            elsif Is_Exported (Obj_Id) then\n-               Error_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n-            end if;\n-         end if;\n+         elsif Is_Effectively_Volatile (Obj_Id) then\n+            Error_Msg_N (\"ghost object & cannot be volatile\", Obj_Id);\n \n-         --  Restore the SPARK_Mode of the enclosing context after all delayed\n-         --  pragmas have been analyzed.\n+         --  A Ghost object cannot be imported or exported (SPARK RM 6.9(8)).\n+         --  One exception to this is the object that represents the dispatch\n+         --  table of a Ghost tagged type, as the symbol needs to be exported.\n \n-         if Restore_Mode then\n-            Restore_SPARK_Mode (Mode);\n-         end if;\n-      end if;\n-\n-      --  A ghost object cannot be imported or exported (SPARK RM 6.9(8)). One\n-      --  exception to this is the object that represents the dispatch table of\n-      --  a Ghost tagged type, as the symbol needs to be exported.\n-\n-      if Comes_From_Source (Obj_Id) and then Is_Ghost_Entity (Obj_Id) then\n-         if Is_Exported (Obj_Id) then\n+         elsif Is_Exported (Obj_Id) then\n             Error_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n \n          elsif Is_Imported (Obj_Id) then\n             Error_Msg_N (\"ghost object & cannot be imported\", Obj_Id);\n          end if;\n       end if;\n+\n+      --  Restore the SPARK_Mode of the enclosing context after all delayed\n+      --  pragmas have been analyzed.\n+\n+      if Restore_Mode then\n+         Restore_SPARK_Mode (Mode);\n+      end if;\n    end Analyze_Object_Contract;\n \n    -----------------------------------"}, {"sha": "4887c707f69f58c80e1a38f408a5fb1dedb62ae9", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -11388,14 +11388,28 @@ package body Exp_Ch9 is\n       end loop;\n    end Expand_N_Selective_Accept;\n \n+   -------------------------------------------\n+   -- Expand_N_Single_Protected_Declaration --\n+   -------------------------------------------\n+\n+   --  A single protected declaration should never be present after semantic\n+   --  analysis because it is transformed into a protected type declaration\n+   --  and an accompanying anonymous object. This routine ensures that the\n+   --  transformation takes place.\n+\n+   procedure Expand_N_Single_Protected_Declaration (N : Node_Id) is\n+   begin\n+      raise Program_Error;\n+   end Expand_N_Single_Protected_Declaration;\n+\n    --------------------------------------\n    -- Expand_N_Single_Task_Declaration --\n    --------------------------------------\n \n-   --  Single task declarations should never be present after semantic\n-   --  analysis, since we expect them to be replaced by a declaration of an\n-   --  anonymous task type, followed by a declaration of the task object. We\n-   --  include this routine to make sure that is happening.\n+   --  A single task declaration should never be present after semantic\n+   --  analysis because it is transformed into a task type declaration and\n+   --  an accompanying anonymous object. This routine ensures that the\n+   --  transformation takes place.\n \n    procedure Expand_N_Single_Task_Declaration (N : Node_Id) is\n    begin"}, {"sha": "d49201bfe0dbc221085131f61c057018629c4fb8", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -266,12 +266,13 @@ package Exp_Ch9 is\n    --  allows these two nodes to be found from the type, without benefit of\n    --  further attributes, using Corresponding_Record.\n \n-   procedure Expand_N_Requeue_Statement          (N : Node_Id);\n-   procedure Expand_N_Selective_Accept           (N : Node_Id);\n-   procedure Expand_N_Single_Task_Declaration    (N : Node_Id);\n-   procedure Expand_N_Task_Body                  (N : Node_Id);\n-   procedure Expand_N_Task_Type_Declaration      (N : Node_Id);\n-   procedure Expand_N_Timed_Entry_Call           (N : Node_Id);\n+   procedure Expand_N_Requeue_Statement            (N : Node_Id);\n+   procedure Expand_N_Selective_Accept             (N : Node_Id);\n+   procedure Expand_N_Single_Protected_Declaration (N : Node_Id);\n+   procedure Expand_N_Single_Task_Declaration      (N : Node_Id);\n+   procedure Expand_N_Task_Body                    (N : Node_Id);\n+   procedure Expand_N_Task_Type_Declaration        (N : Node_Id);\n+   procedure Expand_N_Timed_Entry_Call             (N : Node_Id);\n \n    procedure Expand_Protected_Body_Declarations\n      (N       : Node_Id;"}, {"sha": "4aa20d6f41b6e810d9e7d7b83a6abca5b5538a92", "filename": "gcc/ada/expander.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fexpander.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fexpander.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -432,6 +432,9 @@ package body Expander is\n                when N_Selective_Accept =>\n                   Expand_N_Selective_Accept (N);\n \n+               when N_Single_Protected_Declaration =>\n+                  Expand_N_Single_Protected_Declaration (N);\n+\n                when N_Single_Task_Declaration =>\n                   Expand_N_Single_Task_Declaration (N);\n \n@@ -471,7 +474,7 @@ package body Expander is\n                when N_Variant_Part =>\n                   Expand_N_Variant_Part (N);\n \n-                  --  For all other node kinds, no expansion activity required\n+               --  For all other node kinds, no expansion activity required\n \n                when others =>\n                   null;"}, {"sha": "59a49ced0ae9509bc29811d310a523f91a7dd53d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -2806,6 +2806,15 @@ package body Freeze is\n          then\n             Set_Alignment (Arr, Alignment (Component_Type (Arr)));\n          end if;\n+\n+         --  A Ghost type cannot have a component of protected or task type\n+         --  (SPARK RM 6.9(19)).\n+\n+         if Is_Ghost_Entity (Arr) and then Is_Concurrent_Type (Ctyp) then\n+            Error_Msg_N\n+              (\"ghost array type & cannot have concurrent component type\",\n+               Arr);\n+         end if;\n       end Freeze_Array_Type;\n \n       -------------------------------\n@@ -4341,6 +4350,25 @@ package body Freeze is\n                   Next_Component (Comp);\n                end loop;\n             end if;\n+\n+            --  A Ghost type cannot have a component of protected or task type\n+            --  (SPARK RM 6.9(19)).\n+\n+            if Is_Ghost_Entity (Rec) then\n+               Comp := First_Component (Rec);\n+               while Present (Comp) loop\n+                  if Comes_From_Source (Comp)\n+                    and then Is_Concurrent_Type (Etype (Comp))\n+                  then\n+                     Error_Msg_Name_1 := Chars (Rec);\n+                     Error_Msg_N\n+                       (\"component & of ghost type % cannot be concurrent\",\n+                        Comp);\n+                  end if;\n+\n+                  Next_Component (Comp);\n+               end loop;\n+            end if;\n          end if;\n \n          --  Make sure that if we have an iterator aspect, then we have\n@@ -5091,12 +5119,19 @@ package body Freeze is\n             end if;\n          end;\n \n-         --  A Ghost type cannot be effectively volatile (SPARK RM 6.9(8))\n+         if Is_Ghost_Entity (E) then\n \n-         if Is_Ghost_Entity (E)\n-           and then Is_Effectively_Volatile (E)\n-         then\n-            Error_Msg_N (\"ghost type & cannot be volatile\", E);\n+            --  A Ghost type cannot be concurrent (SPARK RM 6.9(19)). Verify\n+            --  this legality rule first to five a finer-grained diagnostic.\n+\n+            if Is_Concurrent_Type (E) then\n+               Error_Msg_N (\"ghost type & cannot be concurrent\", E);\n+\n+            --  A Ghost type cannot be effectively volatile (SPARK RM 6.9(8))\n+\n+            elsif Is_Effectively_Volatile (E) then\n+               Error_Msg_N (\"ghost type & cannot be volatile\", E);\n+            end if;\n          end if;\n \n          --  Deal with special cases of freezing for subtype"}, {"sha": "17544f0cb810edc21e9a4c122e3338e7bb5b96b4", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -10068,6 +10068,11 @@ package body Sem_Prag is\n                --  Opt is not a duplicate property and sets the flag Status.\n                --  (SPARK RM 7.1.4(2))\n \n+               procedure Check_Ghost_Synchronous;\n+               --  Ensure that the abstract state is not subject to both Ghost\n+               --  and Synchronous simple options. Emit an error if this is the\n+               --  case.\n+\n                procedure Create_Abstract_State\n                  (Nam     : Name_Id;\n                   Decl    : Node_Id;\n@@ -10320,6 +10325,20 @@ package body Sem_Prag is\n                   Status := True;\n                end Check_Duplicate_Property;\n \n+               -----------------------------\n+               -- Check_Ghost_Synchronous --\n+               -----------------------------\n+\n+               procedure Check_Ghost_Synchronous is\n+               begin\n+                  --  A synchronized abstract state cannot be Ghost and vice\n+                  --  versa (SPARK RM 6.9(19)).\n+\n+                  if Ghost_Seen and Synchronous_Seen then\n+                     SPARK_Msg_N (\"synchronized state cannot be ghost\", State);\n+                  end if;\n+               end Check_Ghost_Synchronous;\n+\n                ---------------------------\n                -- Create_Abstract_State --\n                ---------------------------\n@@ -10464,6 +10483,7 @@ package body Sem_Prag is\n \n                         elsif Chars (Opt) = Name_Ghost then\n                            Check_Duplicate_Option (Opt, Ghost_Seen);\n+                           Check_Ghost_Synchronous;\n \n                            if Present (State_Id) then\n                               Set_Is_Ghost_Entity (State_Id);\n@@ -10473,6 +10493,7 @@ package body Sem_Prag is\n \n                         elsif Chars (Opt) = Name_Synchronous then\n                            Check_Duplicate_Option (Opt, Synchronous_Seen);\n+                           Check_Ghost_Synchronous;\n \n                         --  Option Part_Of without an encapsulating state is\n                         --  illegal (SPARK RM 7.1.4(9))."}, {"sha": "d3312e2d84c1c89e840790ae1ed9090e37e78f3d", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -6993,6 +6993,13 @@ package body Sem_Res is\n                return True;\n             end if;\n \n+         --  The volatile object acts as the name of a renaming declaration\n+\n+         elsif Nkind (Context) = N_Object_Renaming_Declaration\n+           and then Name (Context) = Obj_Ref\n+         then\n+            return True;\n+\n          --  The volatile object appears as an actual parameter in a call to an\n          --  instance of Unchecked_Conversion whose result is renamed.\n "}, {"sha": "d8567c59e7ff069490464ba50c48bdcd73071965", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58996b09cafcb656b74a6df85b2c632f6500d2ab/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=58996b09cafcb656b74a6df85b2c632f6500d2ab", "patch": "@@ -20121,7 +20121,8 @@ package body Sem_Util is\n    --------------------------------\n \n    function Yields_Synchronized_Object (Typ : Entity_Id) return Boolean is\n-      Id : Entity_Id;\n+      Has_Sync_Comp : Boolean := False;\n+      Id            : Entity_Id;\n \n    begin\n       --  An array type yields a synchronized object if its component type\n@@ -20154,10 +20155,15 @@ package body Sem_Util is\n          Id := First_Entity (Typ);\n          while Present (Id) loop\n             if Comes_From_Source (Id) then\n-               if Ekind (Id) = E_Component\n-                 and then not Yields_Synchronized_Object (Etype (Id))\n-               then\n-                  return False;\n+               if Ekind (Id) = E_Component then\n+                  if Yields_Synchronized_Object (Etype (Id)) then\n+                     Has_Sync_Comp := True;\n+\n+                  --  The component does not yield a synchronized object\n+\n+                  else\n+                     return False;\n+                  end if;\n \n                elsif Ekind (Id) = E_Discriminant\n                  and then Present (Expression (Parent (Id)))\n@@ -20181,7 +20187,7 @@ package body Sem_Util is\n          --  If we get here, then all discriminants lack default values and all\n          --  components are of a type that yields a synchronized object.\n \n-         return True;\n+         return Has_Sync_Comp;\n \n       --  A synchronized interface type yields a synchronized object by default\n "}]}