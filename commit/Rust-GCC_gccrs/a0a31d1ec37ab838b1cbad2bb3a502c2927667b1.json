{"sha": "a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhMzFkMWVjMzdhYjgzOGIxY2JhZDJiYjNhNTAyYzI5Mjc2NjdiMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-04-29T08:41:32Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-04-29T08:41:32Z"}, "message": "bfin.md (sp_or_sm, [...]): New macro.\n\ngcc/\n\t* config/bfin/bfin.md (sp_or_sm, spm_string, spm_name): New macro.\n\t(ss<spm_name>hi3, ss<spm_name>hi3_parts, ss<spm_name>hi3_low_parts,\n\tss<spm_name_hi3_high_parts): New patterns, replacing ssaddhi3, ssubhi3,\n\tssaddhi3_parts and sssubhi3_parts.\n\t(flag_mulhi3_parts): Produce a HImode output rather than trying to set\n\ta VEC_SELECT.\n\t* config/bfin/bfin.c (bfin_expand_builtin, case BFIN_BUILTIN_CPLX_SQU):\n\tAdjust accordingly.\n\ngcc/testsuite/\n\t* gcc.target/bfin/20090411-1.c: New test.\n\nFrom-SVN: r146929", "tree": {"sha": "3ff1370db7bb76a2cc0cdf52ba19728a259ab002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff1370db7bb76a2cc0cdf52ba19728a259ab002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/comments", "author": null, "committer": null, "parents": [{"sha": "5f3153cdb4059e20672b5f4a4df42b23a08c7063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3153cdb4059e20672b5f4a4df42b23a08c7063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3153cdb4059e20672b5f4a4df42b23a08c7063"}], "stats": {"total": 190, "additions": 117, "deletions": 73}, "files": [{"sha": "be525c32508507aaaf33c56569967840ac7e6eaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "patch": "@@ -1,3 +1,14 @@\n+2009-04-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.md (sp_or_sm, spm_string, spm_name): New macro.\n+\t(ss<spm_name>hi3, ss<spm_name>hi3_parts, ss<spm_name>hi3_low_parts,\n+\tss<spm_name_hi3_high_parts): New patterns, replacing ssaddhi3, ssubhi3,\n+\tssaddhi3_parts and sssubhi3_parts.\n+\t(flag_mulhi3_parts): Produce a HImode output rather than trying to set\n+\ta VEC_SELECT.\n+\t* config/bfin/bfin.c (bfin_expand_builtin, case BFIN_BUILTIN_CPLX_SQU):\n+\tAdjust accordingly.\n+\n 2009-04-28  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vect-loop.c (get_initial_def_for_induction): Use"}, {"sha": "d094d52ab0034bf73590f0d7a634d44b9dae72f9", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "patch": "@@ -6169,15 +6169,14 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \n       emit_insn (gen_flag_mulv2hi (tmp1, op0, op0, GEN_INT (MACFLAG_NONE)));\n \n-      emit_insn (gen_flag_mulhi_parts (tmp2, op0, op0, const0_rtx,\n+      emit_insn (gen_flag_mulhi_parts (gen_lowpart (HImode, tmp2), op0, op0,\n \t\t\t\t       const0_rtx, const1_rtx,\n \t\t\t\t       GEN_INT (MACFLAG_NONE)));\n \n-      emit_insn (gen_ssaddhi3_parts (target, tmp2, tmp2, const1_rtx,\n-\t\t\t\t\t  const0_rtx, const0_rtx));\n-\n-      emit_insn (gen_sssubhi3_parts (target, tmp1, tmp1, const0_rtx,\n-\t\t\t\t\t  const0_rtx, const1_rtx));\n+      emit_insn (gen_ssaddhi3_high_parts (target, tmp2, tmp2, tmp2, const0_rtx,\n+\t\t\t\t\t  const0_rtx));\n+      emit_insn (gen_sssubhi3_low_parts (target, target, tmp1, tmp1,\n+\t\t\t\t\t const0_rtx, const1_rtx));\n \n       return target;\n "}, {"sha": "4d422f8869f3d905150a0338e04675c7e4564374", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 68, "deletions": 67, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "patch": "@@ -2962,74 +2962,82 @@\n \n ;; Unusual arithmetic operations on 16-bit registers.\n \n-(define_insn \"ssaddhi3\"\n+(define_code_iterator sp_or_sm [ss_plus ss_minus])\n+(define_code_attr spm_string [(ss_plus \"+\") (ss_minus \"-\")])\n+(define_code_attr spm_name [(ss_plus \"add\") (ss_minus \"sub\")])\n+\n+(define_insn \"ss<spm_name>hi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(ss_plus:HI (match_operand:HI 1 \"register_operand\" \"d\")\n+\t(sp_or_sm:HI (match_operand:HI 1 \"register_operand\" \"d\")\n \t\t    (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n-  \"%h0 = %h1 + %h2 (S)%!\"\n+  \"%h0 = %h1 <spm_string>  %h2 (S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"ssaddhi3_parts\"\n-  [(set (vec_select:HI\n-\t (match_operand:V2HI 0 \"register_operand\" \"d\")\n-\t (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n-\t(ss_plus:HI (vec_select:HI\n-\t\t     (match_operand:V2HI 1 \"register_operand\" \"d\")\n-\t\t     (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n-\t\t    (vec_select:HI\n-\t\t     (match_operand:V2HI 2 \"register_operand\" \"d\")\n-\t\t     (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")]))))]\n-  \"\"\n+(define_insn \"ss<spm_name>hi3_parts\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+\t(sp_or_sm:HI (vec_select:HI\n+\t\t      (match_operand:V2HI 1 \"register_operand\" \"d\")\n+\t\t      (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t      (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))))]\n+   \"\"\n {\n   const char *templates[] = {\n-    \"%h0 = %h1 + %h2 (S)%!\",\n-    \"%d0 = %h1 + %h2 (S)%!\",\n-    \"%h0 = %d1 + %h2 (S)%!\",\n-    \"%d0 = %d1 + %h2 (S)%!\",\n-    \"%h0 = %h1 + %d2 (S)%!\",\n-    \"%d0 = %h1 + %d2 (S)%!\",\n-    \"%h0 = %d1 + %d2 (S)%!\",\n-    \"%d0 = %d1 + %d2 (S)%!\" };\n-  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n-\t    + (INTVAL (operands[5]) << 2);\n+    \"%h0 = %h1 <spm_string> %h2 (S)%!\",\n+    \"%h0 = %d1 <spm_string> %h2 (S)%!\",\n+    \"%h0 = %h1 <spm_string> %d2 (S)%!\",\n+    \"%h0 = %d1 <spm_string> %d2 (S)%!\" };\n+  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1);\n   return templates[alt];\n }\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"sssubhi3_parts\"\n-  [(set (vec_select:HI\n-\t (match_operand:V2HI 0 \"register_operand\" \"d\")\n-\t (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n-\t(ss_minus:HI (vec_select:HI\n-\t\t      (match_operand:V2HI 1 \"register_operand\" \"d\")\n-\t\t      (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n-\t\t     (vec_select:HI\n-\t\t      (match_operand:V2HI 2 \"register_operand\" \"d\")\n-\t\t      (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")]))))]\n-  \"\"\n+(define_insn \"ss<spm_name>hi3_low_parts\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(vec_concat:V2HI\n+\t (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"0\")\n+\t\t\t(parallel [(const_int 0)]))\n+\t (sp_or_sm:HI (vec_select:HI\n+\t\t       (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t       (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t      (vec_select:HI\n+\t\t       (match_operand:V2HI 3 \"register_operand\" \"d\")\n+\t\t       (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")])))))]\n+   \"\"\n {\n   const char *templates[] = {\n-    \"%h0 = %h1 - %h2 (S)%!\",\n-    \"%d0 = %h1 - %h2 (S)%!\",\n-    \"%h0 = %d1 - %h2 (S)%!\",\n-    \"%d0 = %d1 - %h2 (S)%!\",\n-    \"%h0 = %h1 - %d2 (S)%!\",\n-    \"%d0 = %h1 - %d2 (S)%!\",\n-    \"%h0 = %d1 - %d2 (S)%!\",\n-    \"%d0 = %d1 - %d2 (S)%!\" };\n-  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n-\t    + (INTVAL (operands[5]) << 2);\n+    \"%h0 = %h2 <spm_string> %h3 (S)%!\",\n+    \"%h0 = %d2 <spm_string> %h3 (S)%!\",\n+    \"%h0 = %h2 <spm_string> %d3 (S)%!\",\n+    \"%h0 = %d2 <spm_string> %d3 (S)%!\" };\n+  int alt = INTVAL (operands[4]) + (INTVAL (operands[5]) << 1);\n   return templates[alt];\n }\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"sssubhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-\t(ss_minus:HI (match_operand:HI 1 \"register_operand\" \"d\")\n-\t\t     (match_operand:HI 2 \"register_operand\" \"d\")))]\n-  \"\"\n-  \"%h0 = %h1 - %h2 (S)%!\"\n+(define_insn \"ss<spm_name>hi3_high_parts\"\n+  [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n+\t(vec_concat:V2HI\n+\t (sp_or_sm:HI (vec_select:HI\n+\t\t       (match_operand:V2HI 2 \"register_operand\" \"d\")\n+\t\t       (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t      (vec_select:HI\n+\t\t       (match_operand:V2HI 3 \"register_operand\" \"d\")\n+\t\t       (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")])))\n+\t (vec_select:HI (match_operand:V2HI 1 \"register_operand\" \"0\")\n+\t\t\t(parallel [(const_int 1)]))))]\n+   \"\"\n+{\n+  const char *templates[] = {\n+    \"%d0 = %h2 <spm_string> %h3 (S)%!\",\n+    \"%d0 = %d2 <spm_string> %h3 (S)%!\",\n+    \"%d0 = %h2 <spm_string> %d3 (S)%!\",\n+    \"%d0 = %d2 <spm_string> %d3 (S)%!\" };\n+  int alt = INTVAL (operands[4]) + (INTVAL (operands[5]) << 1);\n+  return templates[alt];\n+}\n   [(set_attr \"type\" \"dsp32\")])\n \n ;; V2HI vector insns\n@@ -3239,30 +3247,23 @@\n   [(set_attr \"type\" \"dsp32\")])\n \n (define_insn \"flag_mulhi_parts\"\n-  [(set (vec_select:HI\n-\t (match_operand:V2HI 0 \"register_operand\" \"d\")\n-\t (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(unspec:HI [(vec_select:HI\n \t\t     (match_operand:V2HI 1 \"register_operand\" \"d\")\n-\t\t     (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t     (parallel [(match_operand 3 \"const01_operand\" \"P0P1\")]))\n \t\t    (vec_select:HI\n \t\t     (match_operand:V2HI 2 \"register_operand\" \"d\")\n-\t\t     (parallel [(match_operand 5 \"const01_operand\" \"P0P1\")]))\n-\t\t    (match_operand 6 \"const_int_operand\" \"n\")]\n+\t\t     (parallel [(match_operand 4 \"const01_operand\" \"P0P1\")]))\n+\t\t    (match_operand 5 \"const_int_operand\" \"n\")]\n \t\t   UNSPEC_MUL_WITH_FLAG))]\n   \"\"\n {\n   const char *templates[] = {\n-    \"%h0 = %h1 * %h2 %M6%!\",\n-    \"%d0 = %h1 * %h2 %M6%!\",\n-    \"%h0 = %d1 * %h2 %M6%!\",\n-    \"%d0 = %d1 * %h2 %M6%!\",\n-    \"%h0 = %h1 * %d2 %M6%!\",\n-    \"%d0 = %h1 * %d2 %M6%!\",\n-    \"%h0 = %d1 * %d2 %M6%!\",\n-    \"%d0 = %d1 * %d2 %M6%!\" };\n-  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1)\n-\t    + (INTVAL (operands[5]) << 2);\n+    \"%h0 = %h1 * %h2 %M5%!\",\n+    \"%h0 = %d1 * %h2 %M5%!\",\n+    \"%h0 = %h1 * %d2 %M5%!\",\n+    \"%h0 = %d1 * %d2 %M5%!\" };\n+  int alt = INTVAL (operands[3]) + (INTVAL (operands[4]) << 1);\n   return templates[alt];\n }\n   [(set_attr \"type\" \"dsp32\")])"}, {"sha": "bd54a302f243eebefef30332458b5f12642d3da4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "patch": "@@ -1,3 +1,7 @@\n+2009-04-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* gcc.target/bfin/20090411-1.c: New test.\n+\n 2009-04-29  Anmol P. Paralkar  <anmol@freescale.com>\n \n \tPR target/39565"}, {"sha": "e301518a51bca6981093c860ab8a8d562a721043", "filename": "gcc/testsuite/gcc.target/bfin/20090411-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090411-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a31d1ec37ab838b1cbad2bb3a502c2927667b1/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090411-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fbfin%2F20090411-1.c?ref=a0a31d1ec37ab838b1cbad2bb3a502c2927667b1", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target bfin-*-* } } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef short __v2hi __attribute__ ((vector_size (4)));\n+typedef __v2hi raw2x16;\n+typedef raw2x16 fract2x16;\n+typedef short fract16;\n+typedef struct complex_fract16\n+{\n+  fract16 re;\n+  fract16 im;\n+} __attribute__ ((aligned (4))) complex_fract16;\n+\n+\n+__inline__ __attribute__ ((always_inline))\n+     static complex_fract16 csqu_fr16 (complex_fract16 _a)\n+{\n+  complex_fract16 _x;\n+  fract2x16 i =\n+    __builtin_bfin_csqu_fr16 (__builtin_bfin_compose_2x16 ((_a).im, (_a).re));\n+  (_x).re = __builtin_bfin_extract_lo (i);\n+  (_x).im = __builtin_bfin_extract_hi (i);\n+  return _x;\n+}\n+\n+complex_fract16 f (complex_fract16 _a)\n+{\n+  return csqu_fr16 (_a);\n+}"}]}