{"sha": "aa35e3ba8ef4cd36991a877063632edef552068b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEzNWUzYmE4ZWY0Y2QzNjk5MWE4NzcwNjM2MzJlZGVmNTUyMDY4Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-07T11:29:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-12-07T11:29:28Z"}, "message": "Adjust comment\n\nFrom-SVN: r243338", "tree": {"sha": "ab30e4f48177fe32e17222bce32fa02cc5459db3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab30e4f48177fe32e17222bce32fa02cc5459db3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa35e3ba8ef4cd36991a877063632edef552068b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa35e3ba8ef4cd36991a877063632edef552068b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa35e3ba8ef4cd36991a877063632edef552068b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa35e3ba8ef4cd36991a877063632edef552068b/comments", "author": null, "committer": null, "parents": [{"sha": "2c1f5c0a344e2f127decf13eb851794401b54e29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c1f5c0a344e2f127decf13eb851794401b54e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c1f5c0a344e2f127decf13eb851794401b54e29"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "0ae381fea05bb50755e49e423def52ce8c7f5ead", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa35e3ba8ef4cd36991a877063632edef552068b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa35e3ba8ef4cd36991a877063632edef552068b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=aa35e3ba8ef4cd36991a877063632edef552068b", "patch": "@@ -1662,12 +1662,12 @@ finish_character_type (tree char_type)\n   SET_TYPE_DEBUG_TYPE (char_type, unsigned_char_type);\n \n   /* If this is a subtype, make the debug type a subtype of the debug type\n-     of the base type and convert literal bounds to unsigned.  */\n+     of the base type and convert literal RM bounds to unsigned.  */\n   if (TREE_TYPE (char_type))\n     {\n       tree base_unsigned_char_type = TYPE_DEBUG_TYPE (TREE_TYPE (char_type));\n-      tree min_value = TYPE_MIN_VALUE (char_type);\n-      tree max_value = TYPE_MAX_VALUE (char_type);\n+      tree min_value = TYPE_RM_MIN_VALUE (char_type);\n+      tree max_value = TYPE_RM_MAX_VALUE (char_type);\n \n       if (TREE_CODE (min_value) == INTEGER_CST)\n \tmin_value = fold_convert (base_unsigned_char_type, min_value);\n@@ -1679,7 +1679,7 @@ finish_character_type (tree char_type)\n       SET_TYPE_RM_MAX_VALUE (unsigned_char_type, max_value);\n     }\n \n-  /* Adjust the bounds of the original type to unsigned; that's especially\n+  /* Adjust the RM bounds of the original type to unsigned; that's especially\n      important for types since they are implicit in this case.  */\n   SET_TYPE_RM_MIN_VALUE (char_type, TYPE_MIN_VALUE (unsigned_char_type));\n   SET_TYPE_RM_MAX_VALUE (char_type, TYPE_MAX_VALUE (unsigned_char_type));"}]}