{"sha": "64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRiYjJlMWRkNGUyYWMzZjg5ODlkYWUxMjc1OGRiMjI4MGFjNmZmZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-10-19T11:10:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-10-19T11:10:59Z"}, "message": "alpha.c (fix_operator): New.\n\n        * config/alpha/alpha.c (fix_operator): New.\n        (divmod_operator): Tidy.\n        (alpha_emit_xfloating_cvt): Handle UNSIGNED_FIX.\n        * config/alpha/alpha.h (FIXUNS_TRUNC_LIKE_FIX_TRUNC): Remove.\n        (PREDICATE_CODES): Update.\n        * config/alpha/alpha.md (fix_truncdfsi_ieee): Use match_operator.\n        (fix_truncdfsi_internal, fix_truncdfdi_ieee): Likewise.\n        (fix_truncsfsi_ieee, fix_truncsfsi_internal): Likewise.\n        (fix_truncsfdi_ieee): Likewise.\n        (fix_truncdfdi2, fix_truncsfdi2): Turn into define_expand.\n        (fixuns_truncdfdi2, fixuns_truncsfdi2, fixuns_trunctfdi2): New.\n        * config/alpha/alpha-protos.h: Update.\n\nFrom-SVN: r72677", "tree": {"sha": "5e3e639af73a94a92485af864fe94e963e72f645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e3e639af73a94a92485af864fe94e963e72f645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/comments", "author": null, "committer": null, "parents": [{"sha": "91999e1db85c0e701fcfdea8c415076c610621ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91999e1db85c0e701fcfdea8c415076c610621ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91999e1db85c0e701fcfdea8c415076c610621ee"}], "stats": {"total": 142, "additions": 100, "deletions": 42}, "files": [{"sha": "f81a84c7273c40ccea6bdcac61b1135179d4f8fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "patch": "@@ -1,3 +1,18 @@\n+2003-10-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.c (fix_operator): New.\n+\t(divmod_operator): Tidy.\n+\t(alpha_emit_xfloating_cvt): Handle UNSIGNED_FIX.\n+\t* config/alpha/alpha.h (FIXUNS_TRUNC_LIKE_FIX_TRUNC): Remove.\n+\t(PREDICATE_CODES): Update.\n+\t* config/alpha/alpha.md (fix_truncdfsi_ieee): Use match_operator.\n+\t(fix_truncdfsi_internal, fix_truncdfdi_ieee): Likewise.\n+\t(fix_truncsfsi_ieee, fix_truncsfsi_internal): Likewise.\n+\t(fix_truncsfdi_ieee): Likewise.\n+\t(fix_truncdfdi2, fix_truncsfdi2): Turn into define_expand.\n+\t(fixuns_truncdfdi2, fixuns_truncsfdi2, fixuns_trunctfdi2): New.\n+\t* config/alpha/alpha-protos.h: Update.\n+\n 2003-10-19  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.h (INITIALIZE_TRAMPOLINE): Simplify."}, {"sha": "f96a4fbf4cc2d51702dba532bebcaabdd5d49790", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "patch": "@@ -75,6 +75,7 @@ extern int alpha_swapped_comparison_operator (rtx, enum machine_mode);\n extern int signed_comparison_operator (rtx, enum machine_mode);\n extern int alpha_fp_comparison_operator (rtx, enum machine_mode);\n extern int divmod_operator (rtx, enum machine_mode);\n+extern int fix_operator (rtx, enum machine_mode);\n extern int aligned_memory_operand (rtx, enum machine_mode);\n extern int unaligned_memory_operand (rtx, enum machine_mode);\n extern int reg_or_unaligned_mem_operand (rtx, enum machine_mode);"}, {"sha": "c79a0b5799eded60fe23482070e2496213d5f271", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "patch": "@@ -1179,16 +1179,19 @@ alpha_fp_comparison_operator (rtx op, enum machine_mode mode)\n int\n divmod_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n {\n-  switch (GET_CODE (op))\n-    {\n-    case DIV:  case MOD:  case UDIV:  case UMOD:\n-      return 1;\n+  enum rtx_code code = GET_CODE (op);\n \n-    default:\n-      break;\n-    }\n+  return (code == DIV || code == MOD || code == UDIV || code == UMOD);\n+}\n \n-  return 0;\n+/* Return 1 if this is a float->int conversion operator.  */\n+\n+int\n+fix_operator (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n+{\n+  enum rtx_code code = GET_CODE (op);\n+\n+  return (code == FIX || code == UNSIGNED_FIX);\n }\n \n /* Return 1 if this memory address is a known aligned register plus\n@@ -3774,11 +3777,15 @@ alpha_emit_xfloating_compare (enum rtx_code code, rtx op0, rtx op1)\n /* Emit an X_floating library function call for a conversion.  */\n \n void\n-alpha_emit_xfloating_cvt (enum rtx_code code, rtx operands[])\n+alpha_emit_xfloating_cvt (enum rtx_code orig_code, rtx operands[])\n {\n   int noperands = 1, mode;\n   rtx out_operands[2];\n   const char *func;\n+  enum rtx_code code = orig_code;\n+\n+  if (code == UNSIGNED_FIX)\n+    code = FIX;\n \n   func = alpha_lookup_xfloating_lib_func (code);\n \n@@ -3801,7 +3808,8 @@ alpha_emit_xfloating_cvt (enum rtx_code code, rtx operands[])\n     }\n \n   alpha_emit_xfloating_libcall (func, operands[0], out_operands, noperands,\n-\t\t\t\tgen_rtx_fmt_e (code, GET_MODE (operands[0]),\n+\t\t\t\tgen_rtx_fmt_e (orig_code,\n+\t\t\t\t\t       GET_MODE (operands[0]),\n \t\t\t\t\t       operands[1]));\n }\n "}, {"sha": "94d5b0b3d1744d97103e2ca8742850aafe2138a1", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "patch": "@@ -1338,14 +1338,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n \n-/* This flag, if defined, says the same insns that convert to a signed fixnum\n-   also convert validly to an unsigned one.\n-\n-   We actually lie a bit here as overflow conditions are different.  But\n-   they aren't being checked anyway.  */\n-\n-#define FIXUNS_TRUNC_LIKE_FIX_TRUNC\n-\n /* Max number of bytes we can move to or from memory\n    in one reasonably fast instruction.  */\n \n@@ -1654,6 +1646,7 @@ do {\t\t\t\t\t\t\\\n   {\"signed_comparison_operator\", {EQ, NE, LE, LT, GE, GT}},\t\t\\\n   {\"alpha_fp_comparison_operator\", {EQ, LE, LT, UNORDERED}},\t\t\\\n   {\"divmod_operator\", {DIV, MOD, UDIV, UMOD}},\t\t\t\t\\\n+  {\"fix_operator\", {FIX, UNSIGNED_FIX}},\t\t\t\t\\\n   {\"const0_operand\", {CONST_INT, CONST_DOUBLE, CONST_VECTOR}},\t\t\\\n   {\"samegp_function_operand\", {SYMBOL_REF}},\t\t\t\t\\\n   {\"direct_call_operand\", {SYMBOL_REF}},\t\t\t\t\\"}, {"sha": "01f96ca47c218df0385bed0dbf7736441f30e114", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 65, "deletions": 24, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64bb2e1dd4e2ac3f8989dae12758db2280ac6fff/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=64bb2e1dd4e2ac3f8989dae12758db2280ac6fff", "patch": "@@ -2337,13 +2337,15 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \n (define_insn_and_split \"*fix_truncdfsi_ieee\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")) 0))\n+\t(subreg:SI\n+\t  (match_operator:DI 4 \"fix_operator\" \n+\t    [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")]) 0))\n    (clobber (match_scratch:DI 2 \"=&f\"))\n    (clobber (match_scratch:SI 3 \"=&f\"))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2) (fix:DI (match_dup 1)))\n+  [(set (match_dup 2) (match_op_dup 4 [(match_dup 1)]))\n    (set (match_dup 3) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n    (set (match_dup 0) (match_dup 3))]\n   \"\"\n@@ -2352,51 +2354,69 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \n (define_insn_and_split \"*fix_truncdfsi_internal\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(subreg:SI (fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")) 0))\n+\t(subreg:SI\n+\t  (match_operator:DI 3 \"fix_operator\" \n+\t    [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")]) 0))\n    (clobber (match_scratch:DI 2 \"=f\"))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2) (fix:DI (match_dup 1)))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n-   (set (match_dup 0) (match_dup 3))]\n+  [(set (match_dup 2) (match_op_dup 3 [(match_dup 1)]))\n+   (set (match_dup 4) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n+   (set (match_dup 0) (match_dup 4))]\n   ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n-  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n+  \"operands[4] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"*fix_truncdfdi_ieee\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=&f\")\n-\t(fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")))]\n+\t(match_operator:DI 2 \"fix_operator\" \n+\t  [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")]))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"c\")\n    (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n-(define_insn \"fix_truncdfdi2\"\n+(define_insn \"*fix_truncdfdi2\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=f\")\n-\t(fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"fG\")))]\n+\t(match_operator:DI 2 \"fix_operator\" \n+\t  [(match_operand:DF 1 \"reg_or_0_operand\" \"fG\")]))]\n   \"TARGET_FP\"\n   \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"c\")\n    (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n+(define_expand \"fix_truncdfdi2\"\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n+\t(fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"\")))]\n+  \"TARGET_FP\"\n+  \"\")\n+\n+(define_expand \"fixuns_truncdfdi2\"\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n+\t(unsigned_fix:DI (match_operand:DF 1 \"reg_or_0_operand\" \"\")))]\n+  \"TARGET_FP\"\n+  \"\")\n+\n ;; Likewise between SFmode and SImode.\n \n (define_insn_and_split \"*fix_truncsfsi_ieee\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(subreg:SI (fix:DI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))) 0))\n+\t(subreg:SI\n+\t  (match_operator:DI 4 \"fix_operator\" \n+\t    [(float_extend:DF\n+\t       (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))]) 0))\n    (clobber (match_scratch:DI 2 \"=&f\"))\n    (clobber (match_scratch:SI 3 \"=&f\"))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n+  [(set (match_dup 2) (match_op_dup 4 [(float_extend:DF (match_dup 1))]))\n    (set (match_dup 3) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n    (set (match_dup 0) (match_dup 3))]\n   \"\"\n@@ -2405,48 +2425,69 @@ fadd,fmul,fcpys,fdiv,fsqrt,misc,mvi,ftoi,itof,multi,none\"\n \n (define_insn_and_split \"*fix_truncsfsi_internal\"\n   [(set (match_operand:SI 0 \"memory_operand\" \"=m\")\n-\t(subreg:SI (fix:DI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))) 0))\n+\t(subreg:SI\n+\t  (match_operator:DI 3 \"fix_operator\" \n+\t    [(float_extend:DF\n+\t       (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))]) 0))\n    (clobber (match_scratch:DI 2 \"=f\"))]\n   \"TARGET_FP && alpha_fptm < ALPHA_FPTM_SU\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(set (match_dup 2) (fix:DI (float_extend:DF (match_dup 1))))\n-   (set (match_dup 3) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n-   (set (match_dup 0) (match_dup 3))]\n+  [(set (match_dup 2) (match_op_dup 3 [(float_extend:DF (match_dup 1))]))\n+   (set (match_dup 4) (unspec:SI [(match_dup 2)] UNSPEC_CVTQL))\n+   (set (match_dup 0) (match_dup 4))]\n   ;; Due to REG_CANNOT_CHANGE_SIZE issues, we cannot simply use SUBREG.\n-  \"operands[3] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n+  \"operands[4] = gen_rtx_REG (SImode, REGNO (operands[2]));\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")])\n \n (define_insn \"*fix_truncsfdi_ieee\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=&f\")\n-\t(fix:DI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))))]\n+\t(match_operator:DI 2 \"fix_operator\" \n+\t  [(float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))]))]\n   \"TARGET_FP && alpha_fptm >= ALPHA_FPTM_SU\"\n   \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"c\")\n    (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n-(define_insn \"fix_truncsfdi2\"\n+(define_insn \"*fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"=f\")\n-\t(fix:DI (float_extend:DF\n-\t\t (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))))]\n+\t(match_operator:DI 2 \"fix_operator\" \n+\t  [(float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"fG\"))]))]\n   \"TARGET_FP\"\n   \"cvt%-q%/ %R1,%0\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"trap\" \"yes\")\n    (set_attr \"round_suffix\" \"c\")\n    (set_attr \"trap_suffix\" \"v_sv_svi\")])\n \n+(define_expand \"fix_truncsfdi2\"\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n+\t(fix:DI (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"\"))))]\n+  \"TARGET_FP\"\n+  \"\")\n+\n+(define_expand \"fixuns_truncsfdi2\"\n+  [(set (match_operand:DI 0 \"reg_no_subreg_operand\" \"\")\n+\t(unsigned_fix:DI\n+\t  (float_extend:DF (match_operand:SF 1 \"reg_or_0_operand\" \"\"))))]\n+  \"TARGET_FP\"\n+  \"\")\n+\n (define_expand \"fix_trunctfdi2\"\n   [(use (match_operand:DI 0 \"register_operand\" \"\"))\n    (use (match_operand:TF 1 \"general_operand\" \"\"))]\n   \"TARGET_HAS_XFLOATING_LIBS\"\n   \"alpha_emit_xfloating_cvt (FIX, operands); DONE;\")\n \n+(define_expand \"fixuns_trunctfdi2\"\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:TF 1 \"general_operand\" \"\"))]\n+  \"TARGET_HAS_XFLOATING_LIBS\"\n+  \"alpha_emit_xfloating_cvt (UNSIGNED_FIX, operands); DONE;\")\n+\n (define_insn \"*floatdisf_ieee\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=&f\")\n \t(float:SF (match_operand:DI 1 \"reg_no_subreg_operand\" \"f\")))]"}]}