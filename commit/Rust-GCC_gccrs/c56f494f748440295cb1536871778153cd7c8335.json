{"sha": "c56f494f748440295cb1536871778153cd7c8335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU2ZjQ5NGY3NDg0NDAyOTVjYjE1MzY4NzE3NzgxNTNjZDdjODMzNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-29T12:06:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-29T12:06:14Z"}, "message": "genmatch.c (c_expr::gen_transform): Error on unknown captures.\n\n2015-07-29  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (c_expr::gen_transform): Error on unknown captures.\n\t(parser::parse_capture): Add bool argument on whether to reject\n\tunknown captures.\n\t(parser::parse_expr): Adjust.\n\t(parser::parse_op): Likewise.\n\t(parser::parse_pattern): Likewise.\n\nFrom-SVN: r226344", "tree": {"sha": "48ad90c6ec01799211a2947cf488f0dbdf109b1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48ad90c6ec01799211a2947cf488f0dbdf109b1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c56f494f748440295cb1536871778153cd7c8335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56f494f748440295cb1536871778153cd7c8335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56f494f748440295cb1536871778153cd7c8335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56f494f748440295cb1536871778153cd7c8335/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89a79e9629f0713df2c893133084563b5082e8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89a79e9629f0713df2c893133084563b5082e8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89a79e9629f0713df2c893133084563b5082e8e8"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "df429fdb05661aa8765468d987a14a45907f8fbd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56f494f748440295cb1536871778153cd7c8335/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56f494f748440295cb1536871778153cd7c8335/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c56f494f748440295cb1536871778153cd7c8335", "patch": "@@ -1,3 +1,12 @@\n+2015-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* genmatch.c (c_expr::gen_transform): Error on unknown captures.\n+\t(parser::parse_capture): Add bool argument on whether to reject\n+\tunknown captures.\n+\t(parser::parse_expr): Adjust.\n+\t(parser::parse_op): Likewise.\n+\t(parser::parse_pattern): Likewise.\n+\n 2015-07-29  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.c (has_use_on_stmt): New function."}, {"sha": "5f6d9dc340658aa1b29726d37feefb1d5b7afcf7", "filename": "gcc/genmatch.c", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c56f494f748440295cb1536871778153cd7c8335/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c56f494f748440295cb1536871778153cd7c8335/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=c56f494f748440295cb1536871778153cd7c8335", "patch": "@@ -2048,7 +2048,10 @@ c_expr::gen_transform (FILE *f, int indent, const char *dest,\n \t\tid = (const char *)n->val.str.text;\n \t      else\n \t\tid = (const char *)CPP_HASHNODE (n->val.node.node)->ident.str;\n-\t      fprintf (f, \"captures[%u]\", *capture_ids->get(id));\n+\t      unsigned *cid = capture_ids->get (id);\n+\t      if (!cid)\n+\t\tfatal_at (token, \"unknown capture id\");\n+\t      fprintf (f, \"captures[%u]\", *cid);\n \t      ++i;\n \t      continue;\n \t    }\n@@ -3153,7 +3156,7 @@ class parser\n   const char *get_number ();\n \n   id_base *parse_operation ();\n-  operand *parse_capture (operand *);\n+  operand *parse_capture (operand *, bool);\n   operand *parse_expr ();\n   c_expr *parse_c_expr (cpp_ttype);\n   operand *parse_op ();\n@@ -3383,7 +3386,7 @@ parser::parse_operation ()\n      capture = '@'<number>  */\n \n struct operand *\n-parser::parse_capture (operand *op)\n+parser::parse_capture (operand *op, bool require_existing)\n {\n   source_location src_loc = eat_token (CPP_ATSIGN)->src_loc;\n   const cpp_token *token = peek ();\n@@ -3398,7 +3401,11 @@ parser::parse_capture (operand *op)\n   bool existed;\n   unsigned &num = capture_ids->get_or_insert (id, &existed);\n   if (!existed)\n-    num = next_id;\n+    {\n+      if (require_existing)\n+\tfatal_at (src_loc, \"unknown capture id\");\n+      num = next_id;\n+    }\n   return new capture (src_loc, num, op);\n }\n \n@@ -3452,7 +3459,7 @@ parser::parse_expr ()\n \n   if (token->type == CPP_ATSIGN\n       && !(token->flags & PREV_WHITE))\n-    op = parse_capture (e);\n+    op = parse_capture (e, !parsing_match_operand);\n   else if (force_capture)\n     {\n       unsigned num = capture_ids->elements ();\n@@ -3604,7 +3611,7 @@ parser::parse_op ()\n       if (token->type == CPP_COLON)\n \tfatal_at (token, \"not implemented: predicate on leaf operand\");\n       if (token->type == CPP_ATSIGN)\n-\top = parse_capture (op);\n+\top = parse_capture (op, !parsing_match_operand);\n     }\n \n   return op;\n@@ -4074,7 +4081,7 @@ parser::parse_pattern ()\n \t  capture_ids = new cid_map_t;\n \t  e = new expr (p, e_loc);\n \t  while (peek ()->type == CPP_ATSIGN)\n-\t    e->append_op (parse_capture (NULL));\n+\t    e->append_op (parse_capture (NULL, false));\n \t  eat_token (CPP_CLOSE_PAREN);\n \t}\n       if (p->nargs != -1"}]}