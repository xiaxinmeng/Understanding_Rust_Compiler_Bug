{"sha": "a90bd866a9726aa68ea89f83e84376d7098b0b2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwYmQ4NjZhOTcyNmFhNjhlYTg5ZjgzZTg0Mzc2ZDcwOThiMGIyZA==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-29T15:53:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-29T15:53:48Z"}, "message": "a-except-2005.adb, [...]: Minor reformatting.\n\n2014-01-29  Robert Dewar  <dewar@adacore.com>\n\n\t* a-except-2005.adb, a-except.adb, a-excpol-abort.adb, a-exstat.adb,\n\tali.adb, a-numaux.ads, a-numaux-darwin.ads, a-numaux-libc-x86.ads,\n\ta-numaux-vms.ads, a-numaux-vxworks.ads, a-numaux-x86.ads, aspects.ads,\n\ta-taside.adb, a-teioed.adb, a-textio.adb, a-textio.ads, atree.adb,\n\tatree.ads, a-witeio.adb, a-witeio.ads, a-wtedit.adb, a-ztedit.adb,\n\ta-ztexio.adb, bcheck.adb, binde.adb, checks.adb, comperr.adb,\n\tcstand.adb, debug_a.adb, einfo.ads, errout.adb, erroutc.adb,\n\teval_fat.adb, exp_aggr.adb, exp_attr.adb, exp_ch11.adb, exp_ch3.adb,\n\texp_ch4.adb, exp_ch5.adb, exp_ch6.adb, exp_ch9.adb, exp_dbug.adb,\n\texp_disp.adb, exp_fixd.adb, exp_imgv.adb, exp_intr.adb, exp_util.adb,\n\tfreeze.adb, frontend.adb, g-comlin.ads, g-mbdira.adb, gnat1drv.adb,\n\tgprep.adb, g-spipat.adb, i-cpp.ads, i-vxwork.ads, i-vxwork-x86.ads,\n\tkrunch.ads, layout.adb, lib-load.adb, lib-writ.adb, lib-writ.ads,\n\tlive.adb, namet.ads, osint.adb, osint-c.adb, output.ads, par.adb,\n\tpar-ch10.adb, par-ch13.adb, par-ch3.adb, par-ch4.adb, par-ch5.adb,\n\tpar-ch6.adb, par-ch9.adb, par-endh.adb, par-labl.adb, par-prag.adb,\n\tpar-sync.adb, par-tchk.adb, par-util.adb, prj.adb, repinfo.adb,\n\trtsfind.adb, s-arit64.adb, s-asthan-vms-alpha.adb,\n\ts-asthan-vms-ia64.adb, s-bignum.adb, scans.adb, scng.adb, s-dimmks.ads,\n\tsem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_cat.adb, sem_ch10.adb,\n\tsem_ch12.adb, sem_ch13.adb, sem_ch13.ads, sem_ch3.adb, sem_ch4.adb,\n\tsem_ch5.adb, sem_ch6.adb, sem_ch8.adb, sem_disp.adb, sem_elab.adb,\n\tsem_elim.adb, sem_eval.adb, sem_intr.adb, sem_prag.adb, sem_res.adb,\n\tsem_type.adb, sem_util.adb, sem_warn.adb, set_targ.adb, s-fatgen.adb,\n\ts-fatgen.ads, s-fileio.adb, s-imgcha.adb, s-imgrea.adb, sinfo.ads,\n\tsinput-c.adb, snames.ads-tmpl, s-os_lib.adb, sprint.adb,\n\ts-regpat.adb, s-secsta.adb, s-stalib.ads,\n\ts-stchop.adb, s-stoele.ads, stand.ads, s-taprop-solaris.adb,\n\ts-tasdeb-vms.adb, s-tasini.adb, s-tassta.adb, s-valdec.adb,\n\ts-valuti.adb, s-wchjis.adb, s-wchwts.adb, system.ads, system-vms_64.ads,\n\tsystem-vms-ia64.ads, treepr.adb, types.ads, uintp.adb, uname.adb,\n\turealp.adb, usage.adb, vxaddr2line.adb: Minor reformatting.\n\nFrom-SVN: r207260", "tree": {"sha": "f24be0f079581c60ab07cab8130ff5be1bddd109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f24be0f079581c60ab07cab8130ff5be1bddd109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a90bd866a9726aa68ea89f83e84376d7098b0b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90bd866a9726aa68ea89f83e84376d7098b0b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a90bd866a9726aa68ea89f83e84376d7098b0b2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90bd866a9726aa68ea89f83e84376d7098b0b2d/comments", "author": null, "committer": null, "parents": [{"sha": "f32b006110733d03603a428e5a02d80a28d9fcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f32b006110733d03603a428e5a02d80a28d9fcda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f32b006110733d03603a428e5a02d80a28d9fcda"}], "stats": {"total": 1153, "additions": 592, "deletions": 561}, "files": [{"sha": "35eea8d1997c0520dbfbbc8a3fec1707d4a801d8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1,3 +1,38 @@\n+2014-01-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-except-2005.adb, a-except.adb, a-excpol-abort.adb, a-exstat.adb,\n+\tali.adb, a-numaux.ads, a-numaux-darwin.ads, a-numaux-libc-x86.ads,\n+\ta-numaux-vms.ads, a-numaux-vxworks.ads, a-numaux-x86.ads, aspects.ads,\n+\ta-taside.adb, a-teioed.adb, a-textio.adb, a-textio.ads, atree.adb,\n+\tatree.ads, a-witeio.adb, a-witeio.ads, a-wtedit.adb, a-ztedit.adb,\n+\ta-ztexio.adb, bcheck.adb, binde.adb, checks.adb, comperr.adb,\n+\tcstand.adb, debug_a.adb, einfo.ads, errout.adb, erroutc.adb,\n+\teval_fat.adb, exp_aggr.adb, exp_attr.adb, exp_ch11.adb, exp_ch3.adb,\n+\texp_ch4.adb, exp_ch5.adb, exp_ch6.adb, exp_ch9.adb, exp_dbug.adb,\n+\texp_disp.adb, exp_fixd.adb, exp_imgv.adb, exp_intr.adb, exp_util.adb,\n+\tfreeze.adb, frontend.adb, g-comlin.ads, g-mbdira.adb, gnat1drv.adb,\n+\tgprep.adb, g-spipat.adb, i-cpp.ads, i-vxwork.ads, i-vxwork-x86.ads,\n+\tkrunch.ads, layout.adb, lib-load.adb, lib-writ.adb, lib-writ.ads,\n+\tlive.adb, namet.ads, osint.adb, osint-c.adb, output.ads, par.adb,\n+\tpar-ch10.adb, par-ch13.adb, par-ch3.adb, par-ch4.adb, par-ch5.adb,\n+\tpar-ch6.adb, par-ch9.adb, par-endh.adb, par-labl.adb, par-prag.adb,\n+\tpar-sync.adb, par-tchk.adb, par-util.adb, prj.adb, repinfo.adb,\n+\trtsfind.adb, s-arit64.adb, s-asthan-vms-alpha.adb,\n+\ts-asthan-vms-ia64.adb, s-bignum.adb, scans.adb, scng.adb, s-dimmks.ads,\n+\tsem_aggr.adb, sem_attr.adb, sem_aux.adb, sem_cat.adb, sem_ch10.adb,\n+\tsem_ch12.adb, sem_ch13.adb, sem_ch13.ads, sem_ch3.adb, sem_ch4.adb,\n+\tsem_ch5.adb, sem_ch6.adb, sem_ch8.adb, sem_disp.adb, sem_elab.adb,\n+\tsem_elim.adb, sem_eval.adb, sem_intr.adb, sem_prag.adb, sem_res.adb,\n+\tsem_type.adb, sem_util.adb, sem_warn.adb, set_targ.adb, s-fatgen.adb,\n+\ts-fatgen.ads, s-fileio.adb, s-imgcha.adb, s-imgrea.adb, sinfo.ads,\n+\tsinput-c.adb, snames.ads-tmpl, s-os_lib.adb, sprint.adb,\n+\ts-regpat.adb, s-secsta.adb, s-stalib.ads,\n+\ts-stchop.adb, s-stoele.ads, stand.ads, s-taprop-solaris.adb,\n+\ts-tasdeb-vms.adb, s-tasini.adb, s-tassta.adb, s-valdec.adb,\n+\ts-valuti.adb, s-wchjis.adb, s-wchwts.adb, system.ads, system-vms_64.ads,\n+\tsystem-vms-ia64.ads, treepr.adb, types.ads, uintp.adb, uname.adb,\n+\turealp.adb, usage.adb, vxaddr2line.adb: Minor reformatting.\n+\n 2014-01-29  Robert Dewar  <dewar@adacore.com>\n \n \t* expander.adb: Minor reformatting."}, {"sha": "7ed9e0302bdbe4374e6bcc7e5f8861af311b375e", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -160,9 +160,9 @@ package body Ada.Exceptions is\n       --  The Exception_Name and Message lines are omitted in the abort\n       --  signal case, since this is not really an exception.\n \n-      --  !! If the format of the generated string is changed, please note\n-      --  !! that an equivalent modification to the routine String_To_EO must\n-      --  !! be made to preserve proper functioning of the stream attributes.\n+      --  Note: If the format of the generated string is changed, please note\n+      --  that an equivalent modification to the routine String_To_EO must be\n+      --  made to preserve proper functioning of the stream attributes.\n \n       ---------------------------------------\n       -- Exception backtracing subprograms --\n@@ -573,7 +573,7 @@ package body Ada.Exceptions is\n    pragma Export (C, Rcheck_CE_Range_Check_Ext,\n                   \"__gnat_rcheck_CE_Range_Check_ext\");\n \n-   --  None of these procedures ever returns (they raise an exception!). By\n+   --  None of these procedures ever returns (they raise an exception). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n    --  such as normal return epilog stuff, can be eliminated).\n \n@@ -690,7 +690,7 @@ package body Ada.Exceptions is\n \n    --  This function gives us the start of the PC range for addresses\n    --  within the exception unit itself. We hope that gigi/gcc keep all the\n-   --  procedures in their original order!\n+   --  procedures in their original order.\n \n    function Code_Address_For_AAA return System.Address is\n    begin\n@@ -1746,7 +1746,7 @@ package body Ada.Exceptions is\n \n    --  This function gives us the end of the PC range for addresses\n    --  within the exception unit itself. We hope that gigi/gcc keeps all the\n-   --  procedures in their original order!\n+   --  procedures in their original order.\n \n    function Code_Address_For_ZZZ return System.Address is\n    begin"}, {"sha": "a90cfc707852cd6f774e16cb68e4cc567960a27e", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -511,7 +511,7 @@ package body Ada.Exceptions is\n    pragma Export (C, Rcheck_SE_Object_Too_Large,\n                   \"__gnat_rcheck_SE_Object_Too_Large\");\n \n-   --  None of these procedures ever returns (they raise an exception!). By\n+   --  None of these procedures ever returns (they raise an exception). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n    --  such as normal return epilog stuff, can be eliminated).\n \n@@ -629,7 +629,7 @@ package body Ada.Exceptions is\n    pragma Export (C, Rcheck_34, \"__gnat_rcheck_34\");\n    pragma Export (C, Rcheck_35, \"__gnat_rcheck_35\");\n \n-   --  None of these procedures ever returns (they raise an exception!). By\n+   --  None of these procedures ever returns (they raise an exception). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n    --  such as normal return epilog stuff, can be eliminated).\n \n@@ -962,7 +962,7 @@ package body Ada.Exceptions is\n       --  the parameter value in a local variable, and add a pragma Volatile to\n       --  make sure it is spilled. The pragma Warnings (Off) is needed because\n       --  the compiler knows that Id is not referenced and that this use of\n-      --  pragma Volatile is peculiar!\n+      --  pragma Volatile is peculiar.\n \n    begin\n       Debug_Raise_Exception (E => SSL.Exception_Data_Ptr (E));"}, {"sha": "ebfc1a0b4d47cfac73492f8b3f2c83db35484a06", "filename": "gcc/ada/a-excpol-abort.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-excpol-abort.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-excpol-abort.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-excpol-abort.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,7 @@\n pragma Warnings (Off);\n --  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n --  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules!\n+--  It is safe in the context of the run-time to violate the rules.\n \n with System.Soft_Links;\n "}, {"sha": "f8f75b2cd137b47c0458fbb49e913402272fb656", "filename": "gcc/ada/a-exstat.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-exstat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-exstat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exstat.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,7 @@\n pragma Warnings (Off);\n --  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n --  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules!\n+--  It is safe in the context of the run-time to violate the rules.\n \n with System.Exception_Table;  use System.Exception_Table;\n with System.Storage_Elements; use System.Storage_Elements;"}, {"sha": "4164f512d12c59f6a0b7f0bbbfbde47d8cd03bb7", "filename": "gcc/ada/a-numaux-darwin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-darwin.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                          (Apple OS X Version)                            --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,7 +58,7 @@ package Ada.Numerics.Aux is\n    pragma Inline (Cos);\n \n    --  We import these functions directly from C. Note that we label them\n-   --  all as pure functions, because indeed all of them are in fact pure!\n+   --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Tan (X : Double) return Double;\n    pragma Import (C, Tan, \"tan\");"}, {"sha": "3261c111c43892f1b06ac54ffc0430d4759b401f", "filename": "gcc/ada/a-numaux-libc-x86.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-libc-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-libc-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-libc-x86.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (C Library Version for x86)                        --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -49,7 +49,7 @@ package Ada.Numerics.Aux is\n    type Double is digits 18;\n \n    --  We import these functions directly from C. Note that we label them\n-   --  all as pure functions, because indeed all of them are in fact pure!\n+   --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n    pragma Import (C, Sin, \"sinl\");"}, {"sha": "f6d1dfa90816fd1271c476a211d548ecd6b830d7", "filename": "gcc/ada/a-numaux-vms.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-vms.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                             (VMS Version)                                --\n --                                                                          --\n---          Copyright (C) 2003-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,7 +47,7 @@ package Ada.Numerics.Aux is\n    --  since we use the IEEE version of the C library with VMS.\n \n    --  We import these functions directly from C. Note that we label them\n-   --  all as pure functions, because indeed all of them are in fact pure!\n+   --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n    pragma Import (C, Sin, \"MATH$SIN_T\");"}, {"sha": "ce567ad65860863ba3add5b754b341b473602e48", "filename": "gcc/ada/a-numaux-vxworks.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-vxworks.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (C Library Version, VxWorks)                       --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,7 +51,7 @@ package Ada.Numerics.Aux is\n    --  Type Double is the type used to call the C routines\n \n    --  We import these functions directly from C. Note that we label them\n-   --  all as pure functions, because indeed all of them are in fact pure!\n+   --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n    pragma Import (C, Sin, \"sin\");"}, {"sha": "7211fbb64cee4be3c8a740e50020e045f709724e", "filename": "gcc/ada/a-numaux-x86.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-x86.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                        (Machine Version for x86)                         --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "cef530183f5b6cd70a913f57388ed5c8cab4153e", "filename": "gcc/ada/a-numaux.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-numaux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                       (C Library Version, non-x86)                       --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,7 +52,7 @@ package Ada.Numerics.Aux is\n    --  Type Double is the type used to call the C routines\n \n    --  We import these functions directly from C. Note that we label them\n-   --  all as pure functions, because indeed all of them are in fact pure!\n+   --  all as pure functions, because indeed all of them are in fact pure.\n \n    function Sin (X : Double) return Double;\n    pragma Import (C, Sin, \"sin\");"}, {"sha": "ac4473e4c1a5a0828997f4fbfa035dd80a007da2", "filename": "gcc/ada/a-taside.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-taside.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-taside.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-taside.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -39,7 +39,7 @@ with Ada.Unchecked_Conversion;\n pragma Warnings (Off);\n --  Allow withing of non-Preelaborated units in Ada 2005 mode where this\n --  package will be categorized as Preelaborate. See AI-362 for details.\n---  It is safe in the context of the run-time to violate the rules!\n+--  It is safe in the context of the run-time to violate the rules.\n \n with System.Tasking.Utilities;\n "}, {"sha": "423e6873d9659ff7548e05c4035c655bb9beb0aa", "filename": "gcc/ada/a-teioed.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-teioed.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-teioed.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-teioed.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -751,13 +751,13 @@ package body Ada.Text_IO.Editing is\n          return String'(1 .. Last => '*');\n       end if;\n \n-      --  This was once a simple return statement, now there are nine\n-      --  different return cases.  Not to mention the five above to deal\n-      --  with zeros.  Why not split things out?\n+      --  This was once a simple return statement, now there are nine different\n+      --  return cases. Not to mention the five above to deal with zeros. Why\n+      --  not split things out?\n \n-      --  Processing the radix and sign expansion separately\n-      --  would require lots of copying--the string and some of its\n-      --  indicies--without really simplifying the logic.  The cases are:\n+      --  Processing the radix and sign expansion separately would require\n+      --  lots of copying--the string and some of its indexes--without\n+      --  really simplifying the logic. The cases are:\n \n       --  1) Expand $, replace '.' with Radix_Point\n       --  2) No currency expansion, replace '.' with Radix_Point\n@@ -875,7 +875,7 @@ package body Ada.Text_IO.Editing is\n             when '0' =>\n \n                --  Only count a zero before the decimal point if it follows a\n-               --  non-zero digit.  After the decimal point, zeros will be\n+               --  non-zero digit. After the decimal point, zeros will be\n                --  counted if followed by a non-zero digit.\n \n                if not Answer.Has_Fraction then\n@@ -910,7 +910,7 @@ package body Ada.Text_IO.Editing is\n                Answer.End_Of_Int        := J - 1;\n \n             when others =>\n-               raise Picture_Error; -- can this happen? probably not!\n+               raise Picture_Error; -- can this happen? probably not\n          end case;\n       end loop;\n \n@@ -1321,9 +1321,8 @@ package body Ada.Text_IO.Editing is\n       -- Leading_Dollar --\n       --------------------\n \n-      --  Note that Leading_Dollar can be called in either State.\n-      --  It will set state to Okay only if a 9 or (second) $\n-      --  is encountered.\n+      --  Note that Leading_Dollar can be called in either State. It will set\n+      --  state to Okay only if a 9 or (second) $ is encountered.\n \n       --  Also notice the tricky bit with State and Zero_Suppression.\n       --  Zero_Suppression is Picture_Error if a '$' or a '9' has been\n@@ -1448,11 +1447,10 @@ package body Ada.Text_IO.Editing is\n \n       --  This one is complex!  A Leading_Pound can be fixed or floating,\n       --  but in some cases the decision has to be deferred until we leave\n-      --  this procedure.  Also note that Leading_Pound can be called in\n+      --  this procedure. Also note that Leading_Pound can be called in\n       --  either State.\n \n-      --  It will set state to Okay only if a 9 or  (second) # is\n-      --  encountered.\n+      --  It will set state to Okay only if a 9 or (second) # is encountered\n \n       --  One Last note:  In ambiguous cases, the currency is treated as\n       --  floating unless there is only one '#'."}, {"sha": "f28711e57f2b763c59f7b3f598cc347cd1fac738", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -71,7 +71,7 @@ package body Ada.Text_IO is\n    --  correct filename length.\n    --\n    --  Note: the names for these files are bogus, and probably it would be\n-   --  better for these files to have no names, but the ACVC tests insist!\n+   --  better for these files to have no names, but the ACVC tests insist.\n    --  We use names that are bound to fail in open etc.\n \n    Null_Str : aliased constant String := \"\";"}, {"sha": "5ae8334695d214c2ab1a9fbe8772b1be96f458ce", "filename": "gcc/ada/a-textio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-textio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-textio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -389,7 +389,7 @@ private\n       --  there is no convenient way of backing up more than one character,\n       --  what we do is to leave ourselves positioned past the LM, but set\n       --  this flag, so that we know that from an Ada point of view we are\n-      --  in front of the LM, not after it. A bit of a kludge, but it works!\n+      --  in front of the LM, not after it. A bit of a kludge, but it works.\n \n       Before_LM_PM : Boolean := False;\n       --  This flag similarly handles the case of being physically positioned"}, {"sha": "045705448b89ecb4c1382d6566319f03ce177de9", "filename": "gcc/ada/a-witeio.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-witeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-witeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -71,7 +71,7 @@ package body Ada.Wide_Text_IO is\n    --  correct filename length.\n    --\n    --  Note: the names for these files are bogus, and probably it would be\n-   --  better for these files to have no names, but the ACVC tests insist!\n+   --  better for these files to have no names, but the ACVC tests insist.\n    --  We use names that are bound to fail in open etc.\n \n    Null_Str : aliased constant String := \"\";\n@@ -663,15 +663,15 @@ package body Ada.Wide_Text_IO is\n \n             --  Otherwise store the character, note that we know that ch is\n             --  something other than LM or EOF. It could possibly be a page\n-            --  mark if there is a stray page mark in the middle of a line,\n-            --  but this is not an official page mark in any case, since\n-            --  official page marks can only follow a line mark. The whole\n-            --  page business is pretty much nonsense anyway, so we do not\n-            --  want to waste time trying to make sense out of non-standard\n-            --  page marks in the file! This means that the behavior of\n-            --  Get_Line is different from repeated Get of a character, but\n-            --  that's too bad. We only promise that page numbers etc make\n-            --  sense if the file is formatted in a standard manner.\n+            --  mark if there is a stray page mark in the middle of a line, but\n+            --  this is not an official page mark in any case, since official\n+            --  page marks can only follow a line mark. The whole page business\n+            --  is pretty much nonsense anyway, so we do not want to waste\n+            --  time trying to make sense out of non-standard page marks in\n+            --  the file. This means that the behavior of Get_Line is different\n+            --  from repeated Get of a character, but that's too bad. We\n+            --  only promise that page numbers etc make sense if the file\n+            --  is formatted in a standard manner.\n \n             --  Note: we do not adjust the column number because it is quicker\n             --  to adjust it once at the end of the operation than incrementing"}, {"sha": "9151bf9b520f81c6df271fe5ea2804ac9d2a2990", "filename": "gcc/ada/a-witeio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-witeio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-witeio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -389,7 +389,7 @@ private\n       --  there is no convenient way of backing up more than one character,\n       --  what we do is to leave ourselves positioned past the LM, but set\n       --  this flag, so that we know that from an Ada point of view we are\n-      --  in front of the LM, not after it. A bit of a kludge, but it works!\n+      --  in front of the LM, not after it. A bit of a kludge, but it works.\n \n       Before_LM_PM : Boolean := False;\n       --  This flag similarly handles the case of being physically positioned"}, {"sha": "e616488585b9386e2b36854a10ca3659af66f353", "filename": "gcc/ada/a-wtedit.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-wtedit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-wtedit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtedit.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -909,12 +909,12 @@ package body Ada.Wide_Text_IO.Editing is\n       end if;\n \n       --  This was once a simple return statement, now there are nine\n-      --  different return cases.  Not to mention the five above to deal\n-      --  with zeros.  Why not split things out?\n+      --  different return cases. Not to mention the five above to deal\n+      --  with zeros. Why not split things out?\n \n-      --  Processing the radix and sign expansion separately\n-      --  would require lots of copying--the string and some of its\n-      --  indicies--without really simplifying the logic.  The cases are:\n+      --  Processing the radix and sign expansion separately would require\n+      --  lots of copying--the string and some of its indexes--without\n+      --  really simplifying the logic. The cases are:\n \n       --  1) Expand $, replace '.' with Radix_Point\n       --  2) No currency expansion, replace '.' with Radix_Point\n@@ -1033,7 +1033,7 @@ package body Ada.Wide_Text_IO.Editing is\n             when '0' =>\n \n                --  Only count a zero before the decimal point if it follows a\n-               --  non-zero digit.  After the decimal point, zeros will be\n+               --  non-zero digit. After the decimal point, zeros will be\n                --  counted if followed by a non-zero digit.\n \n                if not Answer.Has_Fraction then\n@@ -1068,7 +1068,7 @@ package body Ada.Wide_Text_IO.Editing is\n                Answer.End_Of_Int        := J - 1;\n \n             when others =>\n-               raise Picture_Error; -- can this happen? probably not!\n+               raise Picture_Error; -- can this happen? probably not\n          end case;\n       end loop;\n \n@@ -1412,8 +1412,7 @@ package body Ada.Wide_Text_IO.Editing is\n       --------------------\n \n       --  Note that Leading_Dollar can be called in either State.\n-      --  It will set state to Okay only if a 9 or (second) $\n-      --  is encountered.\n+      --  It will set state to Okay only if a 9 or (second) $ is encountered.\n \n       --  Also notice the tricky bit with State and Zero_Suppression.\n       --  Zero_Suppression is Picture_Error if a '$' or a '9' has been\n@@ -1521,9 +1520,9 @@ package body Ada.Wide_Text_IO.Editing is\n       -- Leading_Pound --\n       -------------------\n \n-      --  This one is complex!  A Leading_Pound can be fixed or floating,\n+      --  This one is complex. A Leading_Pound can be fixed or floating,\n       --  but in some cases the decision has to be deferred until we leave\n-      --  this procedure.  Also note that Leading_Pound can be called in\n+      --  this procedure. Also note that Leading_Pound can be called in\n       --  either State.\n \n       --  It will set state to Okay only if a 9 or  (second) # is"}, {"sha": "f28a81f4f466f98c7cd9d8ea05dbb90f6f3b8d84", "filename": "gcc/ada/a-ztedit.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-ztedit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-ztedit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztedit.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -910,13 +910,13 @@ package body Ada.Wide_Wide_Text_IO.Editing is\n          return Wide_Wide_String'(1 .. Last => '*');\n       end if;\n \n-      --  This was once a simple return statement, now there are nine\n-      --  different return cases.  Not to mention the five above to deal\n-      --  with zeros.  Why not split things out?\n+      --  This was once a simple return statement, now there are nine different\n+      --  return cases. Not to mention the five above to deal with zeros. Why\n+      --  not split things out?\n \n-      --  Processing the radix and sign expansion separately\n-      --  would require lots of copying--the string and some of its\n-      --  indicies--without really simplifying the logic.  The cases are:\n+      --  Processing the radix and sign expansion separately would require\n+      --  lots of copying--the string and some of its indexes--without\n+      --  really simplifying the logic. The cases are:\n \n       --  1) Expand $, replace '.' with Radix_Point\n       --  2) No currency expansion, replace '.' with Radix_Point\n@@ -1034,7 +1034,7 @@ package body Ada.Wide_Wide_Text_IO.Editing is\n             when '0' =>\n \n                --  Only count a zero before the decimal point if it follows a\n-               --  non-zero digit.  After the decimal point, zeros will be\n+               --  non-zero digit. After the decimal point, zeros will be\n                --  counted if followed by a non-zero digit.\n \n                if not Answer.Has_Fraction then\n@@ -1069,7 +1069,7 @@ package body Ada.Wide_Wide_Text_IO.Editing is\n                Answer.End_Of_Int        := J - 1;\n \n             when others =>\n-               raise Picture_Error; -- can this happen? probably not!\n+               raise Picture_Error; -- can this happen? probably not\n          end case;\n       end loop;\n \n@@ -1521,10 +1521,10 @@ package body Ada.Wide_Wide_Text_IO.Editing is\n       -- Leading_Pound --\n       -------------------\n \n-      --  This one is complex!  A Leading_Pound can be fixed or floating,\n-      --  but in some cases the decision has to be deferred until we leave\n-      --  this procedure.  Also note that Leading_Pound can be called in\n-      --  either State.\n+      --  This one is complex. A Leading_Pound can be fixed or floating, but\n+      --  in some cases the decision has to be deferred until we leave this\n+      --  procedure. Also note that Leading_Pound can be called in either\n+      --  State.\n \n       --  It will set state to Okay only if a 9 or (second) # is encountered\n "}, {"sha": "803f62b6ac0b39667d895961277c8cb6fa7c24a3", "filename": "gcc/ada/a-ztexio.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-ztexio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fa-ztexio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztexio.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -71,7 +71,7 @@ package body Ada.Wide_Wide_Text_IO is\n    --  correct filename length.\n    --\n    --  Note: the names for these files are bogus, and probably it would be\n-   --  better for these files to have no names, but the ACVC tests insist!\n+   --  better for these files to have no names, but the ACVC tests insist.\n    --  We use names that are bound to fail in open etc.\n \n    Null_Str : aliased constant String := \"\";\n@@ -668,7 +668,7 @@ package body Ada.Wide_Wide_Text_IO is\n             --  official page marks can only follow a line mark. The whole\n             --  page business is pretty much nonsense anyway, so we do not\n             --  want to waste time trying to make sense out of non-standard\n-            --  page marks in the file! This means that the behavior of\n+            --  page marks in the file. This means that the behavior of\n             --  Get_Line is different from repeated Get of a character, but\n             --  that's too bad. We only promise that page numbers etc make\n             --  sense if the file is formatted in a standard manner."}, {"sha": "3bf12f32584a55302f7dcf4f77bb10b0afb1c734", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2216,7 +2216,7 @@ package body ALI is\n       else\n          --  Deal with body only and spec only cases, note that the reason we\n          --  do our own checking of the name (rather than using Is_Body_Name)\n-         --  is that Uname drags in far too much compiler junk!\n+         --  is that Uname drags in far too much compiler junk.\n \n          Get_Name_String (Units.Table (Units.Last).Uname);\n "}, {"sha": "e8d3a1dc73d6981b7e23d37272cc5f318d5c8a87", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -559,7 +559,7 @@ package Aspects is\n       --  identifier, and there is no issue of evaluating it and thus no\n       --  issue of delaying the evaluation. The second case is implementation\n       --  defined aspects where we have decided that we don't want to allow\n-      --  delays (and for our own aspects we can do what we like!).\n+      --  delays (and for our own aspects we can do what we like).\n \n       Rep_Aspect);\n       --  These are the cases of representation aspects that are in general"}, {"sha": "35e8a7a09ff3dc510a93a551b2c5540511f2461f", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -122,10 +122,10 @@ package body Atree is\n    --  Count allocated nodes for Num_Nodes function\n \n    use Unchecked_Access;\n-   --  We are allowed to see these from within our own body!\n+   --  We are allowed to see these from within our own body\n \n    use Atree_Private_Part;\n-   --  We are also allowed to see our private data structures!\n+   --  We are also allowed to see our private data structures\n \n    --  Functions used to store Entity_Kind value in Nkind field\n \n@@ -1326,7 +1326,7 @@ package body Atree is\n       Set_Name1 (Empty, No_Name);\n \n       --  Allocate Error node, and set Error_Posted, since we certainly\n-      --  only generate an Error node if we do post some kind of error!\n+      --  only generate an Error node if we do post some kind of error.\n \n       Dummy := New_Node (N_Error, No_Location);\n       Set_Name1 (Error, Error_Name);"}, {"sha": "b167d8f438e704b788746a3119d48a35d02d3b3a", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -3793,7 +3793,7 @@ package Atree is\n          --     Fifth entry:  holds 8 additional flags (Flag247-254)\n          --     Sixth entry:  holds 8 additional flags (Flag310-317)\n \n-         --  Now finally (on an 32-bit boundary!) comes the variant part\n+         --  Now finally (on an 32-bit boundary) comes the variant part\n \n          case Is_Extension is\n "}, {"sha": "fec69598cc74943df08211ac0b1193623a4fd490", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -889,7 +889,7 @@ package body Bcheck is\n                   declare\n                      M1 : constant String := \"{ has restriction \";\n                      S  : constant String := Restriction_Id'Image (R);\n-                     M2 : String (1 .. 2000); -- big enough!\n+                     M2 : String (1 .. 2000); -- big enough\n                      P  : Integer;\n \n                   begin"}, {"sha": "1e79756de4ee82b52716fea232fb9fa76d92c932", "filename": "gcc/ada/binde.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fbinde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fbinde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbinde.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -124,7 +124,7 @@ package body Binde is\n    --  than the spec link) to the spec. Then when then the spec gets chosen,\n    --  we choose the body right afterwards. We mark the links that get moved\n    --  from the body to the spec by setting their Elab_Body flag True, so\n-   --  that we can understand what is going on!\n+   --  that we can understand what is going on.\n \n    Succ_First : constant := 1;\n \n@@ -580,7 +580,7 @@ package body Binde is\n       Elab_Order.Table (Elab_Order.Last) := Chosen;\n \n       --  Remove from No_Pred list. This is a little inefficient and may\n-      --  be we should doubly link the list, but it will do for now!\n+      --  be we should doubly link the list, but it will do for now.\n \n       if No_Pred = Chosen then\n          No_Pred := UNR.Table (Chosen).Nextnp;\n@@ -849,7 +849,7 @@ package body Binde is\n \n       --  Try to find cycles starting with any of the remaining nodes that have\n       --  not yet been chosen. There must be at least one (there is some reason\n-      --  we are being called!)\n+      --  we are being called).\n \n       for U in Units.First .. Units.Last loop\n          if UNR.Table (U).Elab_Position = 0 then\n@@ -1314,7 +1314,7 @@ package body Binde is\n                      end if;\n \n                   --  A limited_with does not establish an elaboration\n-                  --  dependence (that's the whole point!).\n+                  --  dependence (that's the whole point)..\n \n                   elsif Withs.Table (W).Limited_With then\n                      null;\n@@ -1470,7 +1470,7 @@ package body Binde is\n          return False;\n \n       --  Prefer anything else to a waiting body. We want to make bodies wait\n-      --  as long as possible, till we are forced to choose them!\n+      --  as long as possible, till we are forced to choose them.\n \n       elsif Is_Waiting_Body (U1) and then not Is_Waiting_Body (U2) then\n          if Debug_Flag_B then\n@@ -1486,7 +1486,7 @@ package body Binde is\n \n          return True;\n \n-      --  Prefer a spec to a body (!)\n+      --  Prefer a spec to a body (this is mandatory)\n \n       elsif Is_Body_Unit (U1) and then not Is_Body_Unit (U2) then\n          if Debug_Flag_B then"}, {"sha": "7fd8bc576d7c190ce37e9636f9c49e4cfad38acc", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2780,7 +2780,7 @@ package body Checks is\n       end if;\n \n       --  Do not set range checks for any values from System.Scalar_Values\n-      --  since the whole idea of such values is to avoid checking them!\n+      --  since the whole idea of such values is to avoid checking them.\n \n       if Is_Entity_Name (Expr)\n         and then Is_RTU (Scope (Entity (Expr)), System_Scalar_Values)\n@@ -3267,7 +3267,7 @@ package body Checks is\n          --  An unconstrained derived type may have inherited discriminant.\n          --  Build an actual discriminant constraint list using the stored\n          --  constraint, to verify that the expression of the parent type\n-         --  satisfies the constraints imposed by the (unconstrained!)\n+         --  satisfies the constraints imposed by the (unconstrained)\n          --  derived type. This applies to value conversions, not to view\n          --  conversions of tagged types.\n \n@@ -3618,7 +3618,7 @@ package body Checks is\n          --  such as itype declarations in this context, to keep the loop going\n          --  since we may well have generated such stuff in complex situations.\n          --  Also done if no parent (probably an error condition, but no point\n-         --  in behaving nasty if we find it!)\n+         --  in behaving nasty if we find it).\n \n          if No (P)\n            or else (K not in N_Subexpr and then Comes_From_Source (P))\n@@ -3758,7 +3758,7 @@ package body Checks is\n       --  Only do this check for expressions that come from source. We assume\n       --  that expander generated assignments explicitly include any necessary\n       --  checks. Note that this is not just an optimization, it avoids\n-      --  infinite recursions!\n+      --  infinite recursions.\n \n       elsif not Comes_From_Source (Expr) then\n          return;\n@@ -4022,7 +4022,7 @@ package body Checks is\n \n    Cache_Size : constant := 2 ** 10;\n    type Cache_Index is range 0 .. Cache_Size - 1;\n-   --  Determine size of below cache (power of 2 is more efficient!)\n+   --  Determine size of below cache (power of 2 is more efficient)\n \n    Determine_Range_Cache_N  : array (Cache_Index) of Node_Id;\n    Determine_Range_Cache_V  : array (Cache_Index) of Boolean;\n@@ -4144,7 +4144,7 @@ package body Checks is\n       OK := True;\n \n       --  If value is compile time known, then the possible range is the one\n-      --  value that we know this expression definitely has!\n+      --  value that we know this expression definitely has.\n \n       if Compile_Time_Known_Value (N) then\n          Lo := Expr_Value (N);\n@@ -4705,7 +4705,7 @@ package body Checks is\n       --  is not worth the effort to eliminate checks for other than discrete\n       --  types. In addition, we take this same path if we have stored the\n       --  maximum number of checks possible already (a very unlikely situation,\n-      --  but we do not want to blow up!)\n+      --  but we do not want to blow up).\n \n       if Optimization_Level = 0\n         or else not Is_Discrete_Type (Etype (N))\n@@ -4810,7 +4810,7 @@ package body Checks is\n \n    begin\n       --  Return if unchecked type conversion with range check killed. In this\n-      --  case we never set the flag (that's what Kill_Range_Check is about!)\n+      --  case we never set the flag (that's what Kill_Range_Check is about).\n \n       if Nkind (N) = N_Unchecked_Type_Conversion\n         and then Kill_Range_Check (N)\n@@ -4874,7 +4874,7 @@ package body Checks is\n       --  is not worth the effort to eliminate checks for other than discrete\n       --  types. In addition, we take this same path if we have stored the\n       --  maximum number of checks possible already (a very unlikely situation,\n-      --  but we do not want to blow up!)\n+      --  but we do not want to blow up).\n \n       if Optimization_Level = 0\n         or else No (Etype (N))\n@@ -5061,7 +5061,7 @@ package body Checks is\n \n       --  No check required if expression is from the expander, we assume the\n       --  expander will generate whatever checks are needed. Note that this is\n-      --  not just an optimization, it avoids infinite recursions!\n+      --  not just an optimization, it avoids infinite recursions.\n \n       --  Unchecked conversions must be checked, unless they are initialized\n       --  scalar values, as in a component assignment in an init proc.\n@@ -5843,7 +5843,7 @@ package body Checks is\n       --  First special case, if the source type is already within the range\n       --  of the target type, then no check is needed (probably we should have\n       --  stopped Do_Range_Check from being set in the first place, but better\n-      --  late than never in preventing junk code!\n+      --  late than never in preventing junk code.\n \n       if In_Subrange_Of (Source_Type, Target_Type)\n \n@@ -6019,7 +6019,7 @@ package body Checks is\n             --  With these two checks out of the way, we can do the check\n             --  using the source type safely\n \n-            --  This is definitely the most annoying case!\n+            --  This is definitely the most annoying case.\n \n             --    [constraint_error\n             --       when (Target_Type'First >= 0\n@@ -6454,7 +6454,7 @@ package body Checks is\n \n          --  Insert the validity check. Note that we do this with validity\n          --  checks turned off, to avoid recursion, we do not want validity\n-         --  checks on the validity checking code itself!\n+         --  checks on the validity checking code itself.\n \n          Insert_Action (Expr, CE, Suppress => Validity_Check);\n \n@@ -6488,7 +6488,7 @@ package body Checks is\n          --  when a range check is present, but that's not the case, because\n          --  the back end is allowed to assume for the range check that the\n          --  operand is within its declared range (an assumption that validity\n-         --  checking is all about NOT assuming!)\n+         --  checking is all about NOT assuming).\n \n          --  Note: no need to worry about Possible_Local_Raise here, it will\n          --  already have been called if original node has Do_Range_Check set.\n@@ -6645,7 +6645,7 @@ package body Checks is\n          if Is_Entity_Name (N) then\n \n             --  For sure, we want to clear an indication that this is known to\n-            --  be null, since if we get past this check, it definitely is not!\n+            --  be null, since if we get past this check, it definitely is not.\n \n             Set_Is_Known_Null (Entity (N), False);\n \n@@ -7023,7 +7023,7 @@ package body Checks is\n       --  This is called when we have modified the node and we therefore need\n       --  to reanalyze it. It is important that we reset the mode to STRICT for\n       --  this reanalysis, since if we leave it in MINIMIZED or ELIMINATED mode\n-      --  we would reenter this routine recursively which would not be good!\n+      --  we would reenter this routine recursively which would not be good.\n       --  The argument Suppress is set True if we also want to suppress\n       --  overflow checking for the reexpansion (this is set when we know\n       --  overflow is not possible). Typ is the type for the reanalysis.\n@@ -7154,7 +7154,7 @@ package body Checks is\n          --  Use the normal Determine_Range routine to get the range. We\n          --  don't require operands to be valid, invalid values may result in\n          --  rubbish results where the result has not been properly checked for\n-         --  overflow, that's fine!\n+         --  overflow, that's fine.\n \n          Determine_Range (N, OK, Lo, Hi, Assume_Valid => False);\n \n@@ -7204,7 +7204,7 @@ package body Checks is\n             --  If at least one of our operands is now Bignum, we must rebuild\n             --  the if expression to use Bignum operands. We will analyze the\n             --  rebuilt if expression with overflow checks off, since once we\n-            --  are in bignum mode, we are all done with overflow checks!\n+            --  are in bignum mode, we are all done with overflow checks.\n \n             if Bignum_Operands then\n                Rewrite (N,\n@@ -7681,7 +7681,7 @@ package body Checks is\n          --  here because it will cause recursion into the whole MINIMIZED/\n          --  ELIMINATED overflow processing which is not what we want. Here\n          --  we are at the top level, and we need a check against the result\n-         --  mode (i.e. we want to use STRICT mode). So do exactly that!\n+         --  mode (i.e. we want to use STRICT mode). So do exactly that.\n          --  Also, we have not modified the node, so this is a case where\n          --  we need to reexpand, but not reanalyze.\n \n@@ -7821,7 +7821,7 @@ package body Checks is\n \n       --  Here we will do the operation in Long_Long_Integer. We do this even\n       --  if we know an overflow check is required, better to do this in long\n-      --  long integer mode, since we are less likely to overflow!\n+      --  long integer mode, since we are less likely to overflow.\n \n       --  Convert right or only operand to Long_Long_Integer, except that\n       --  we do not touch the exponentiation right operand.\n@@ -7849,7 +7849,7 @@ package body Checks is\n       --  setting of the Do_Division_Check flag).\n \n       --  We do this reanalysis in STRICT mode to avoid recursion into the\n-      --  MINIMIZED/ELIMINATED handling, since we are now done with that!\n+      --  MINIMIZED/ELIMINATED handling, since we are now done with that.\n \n       declare\n          SG : constant Overflow_Mode_Type :="}, {"sha": "13646a5c1555935c788558683799b221d4b15ca3", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -115,15 +115,15 @@ package body Comperr is\n \n       Abort_In_Progress := True;\n \n-      --  Generate a \"standard\" error message instead of a bug box in case of\n-      --  .NET compiler, since we do not support all constructs of the\n-      --  language. Of course ideally, we should detect this before bombing\n-      --  on e.g. an assertion error, but in practice most of these bombs\n-      --  are due to a legitimate case of a construct not being supported (in\n-      --  a sense they all are, since for sure we are not supporting something\n-      --  if we bomb!) By giving this message, we provide a more reasonable\n-      --  practical interface, since giving scary bug boxes on unsupported\n-      --  features is definitely not helpful.\n+      --  Generate a \"standard\" error message instead of a bug box in case\n+      --  of .NET compiler, since we do not support all constructs of the\n+      --  language. Of course ideally, we should detect this before bombing on\n+      --  e.g. an assertion error, but in practice most of these bombs are due\n+      --  to a legitimate case of a construct not being supported (in a sense\n+      --  they all are, since for sure we are not supporting something if we\n+      --  bomb). By giving this message, we provide a more reasonable practical\n+      --  interface, since giving scary bug boxes on unsupported features is\n+      --  definitely not helpful.\n \n       --  Similarly if we are generating SCIL, an error message is sufficient\n       --  instead of generating a bug box."}, {"sha": "062a2dab8a24cb6b82cccdbb16f5f41cc31223e5", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1126,7 +1126,7 @@ package body CStand is\n       --  special insertion character } for types results in special handling\n       --  of these type names in any case. The blanks in these names would\n       --  trouble in Gigi, but that's OK here, since none of these types\n-      --  should ever get through to Gigi! Attributes of these types are\n+      --  should ever get through to Gigi. Attributes of these types are\n       --  filled out to minimize problems with cascaded errors (for example,\n       --  Any_Integer is given reasonable and consistent type and size values)\n \n@@ -1812,7 +1812,7 @@ package body CStand is\n       Set_Needs_Debug_Info (E);\n \n       --  All standard entities are built with fully qualified names, so\n-      --  set the flag to prevent an abortive attempt at requalification!\n+      --  set the flag to prevent an abortive attempt at requalification.\n \n       Set_Has_Qualified_Name (E);\n \n@@ -1828,7 +1828,7 @@ package body CStand is\n    procedure Print_Standard is\n \n       procedure P (Item : String) renames Output.Write_Line;\n-      --  Short-hand, since we do a lot of line writes here!\n+      --  Short-hand, since we do a lot of line writes here\n \n       procedure P_Int_Range (Size : Pos);\n       --  Prints the range of an integer based on its Size"}, {"sha": "30d584e09db50ac992666c8009af022cba6cd322", "filename": "gcc/ada/debug_a.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fdebug_a.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fdebug_a.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug_a.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@ package body Debug_A is\n    --  A stack used to keep track of Node_Id values for setting the value of\n    --  Current_Error_Node correctly. Note that if we have more than 200\n    --  recursion levels, we just don't reset the right value on exit, which\n-   --  is not crucial, since this is only for debugging!\n+   --  is not crucial, since this is only for debugging.\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "9dbc54b77bc10ef11c0f46fca3f4aecd2a4bb418", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -127,7 +127,7 @@ package Einfo is\n -- Handling of Type'Size Values --\n ----------------------------------\n \n---  The Ada 95 RM contains some rather peculiar (to us!) rules on the value\n+--  The Ada 95 RM contains some rather peculiar (to us) rules on the value\n --  of type'Size (see RM 13.3(55)). We have found that attempting to use\n --  these RM Size values generally, and in particular for determining the\n --  default size of objects, creates chaos, and major incompatibilities in\n@@ -3738,7 +3738,7 @@ package Einfo is\n --    Scope_Depth_Set (synthesized)\n --       Applies to a special predicate function that returns a Boolean value\n --       indicating whether or not the Scope_Depth field has been set. It is\n---       needed, since returns an invalid value in this case!\n+--       needed, since returns an invalid value in this case.\n \n --    Sec_Stack_Needed_For_Return (Flag167)\n --       Defined in scope entities (blocks, functions, procedures, tasks,\n@@ -4570,7 +4570,7 @@ package Einfo is\n    );\n \n    for Entity_Kind'Size use 8;\n-   --  The data structures in Atree assume this!\n+   --  The data structures in Atree assume this\n \n    --------------------------\n    -- Subtype Declarations --\n@@ -6076,7 +6076,7 @@ package Einfo is\n    --  computation. Of course, from the point of view of a user of this\n    --  package, the distinction is not visible (even the field information\n    --  provided below should be disregarded, as it is subject to  change\n-   --  without notice!). A number of  attributes appear as lists: lists of\n+   --  without notice). A number of  attributes appear as lists: lists of\n    --  formals,  lists of actuals, of discriminants, etc. For these, pairs\n    --  of functions are defined, which take the form:\n "}, {"sha": "390583794b5c25a7d757b43edab0fb34839ae273", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -23,7 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Warning! Error messages can be generated during Gigi processing by direct\n+--  Warning: Error messages can be generated during Gigi processing by direct\n --  calls to error message routines, so it is essential that the processing\n --  in this body be consistent with the requirements for the Gigi processing\n --  environment, and that in particular, no disallowed table expansion is\n@@ -3113,7 +3113,7 @@ package body Errout is\n          --  but it makes too much noise to be accurate and add 'Base in all\n          --  cases. Note that we only do this is the first named subtype is not\n          --  itself an internal name. This avoids the obvious loop (subtype ->\n-         --  basetype -> subtype) which would otherwise occur!)\n+         --  basetype -> subtype) which would otherwise occur).\n \n          else\n             declare\n@@ -3152,7 +3152,7 @@ package body Errout is\n          --  If we are stuck in a loop, get out and settle for the internal\n          --  name after all. In this case we set to kill the message if it is\n          --  not the first error message (we really try hard not to show the\n-         --  dirty laundry of the implementation to the poor user!)\n+         --  dirty laundry of the implementation to the poor user).\n \n          if Ent = Old_Ent then\n             Kill_Message := True;"}, {"sha": "6924ce2644903cc6f5dd361be07670a2b8df33ee", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -23,7 +23,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Warning! Error messages can be generated during Gigi processing by direct\n+--  Warning: Error messages can be generated during Gigi processing by direct\n --  calls to error message routines, so it is essential that the processing\n --  in this body be consistent with the requirements for the Gigi processing\n --  environment, and that in particular, no disallowed table expansion is\n@@ -185,7 +185,7 @@ package body Erroutc is\n             return;\n \n          --  Otherwise see if continuations are the same, if not, keep both\n-         --  sequences, a curious case, but better to keep everything!\n+         --  sequences, a curious case, but better to keep everything.\n \n          elsif not Same_Error (N1, N2) then\n             return;"}, {"sha": "bb729f9e0b94836c8dc0e034252dc07eca105176", "filename": "gcc/ada/eval_fat.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Feval_fat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Feval_fat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,7 +178,7 @@ package body Eval_Fat is\n \n       Uintp_Mark : Uintp.Save_Mark;\n       --  The code is divided into blocks that systematically release\n-      --  intermediate values (this routine generates lots of junk!)\n+      --  intermediate values (this routine generates lots of junk).\n \n    begin\n       if N = Uint_0 then"}, {"sha": "5c0f4de75114385fae7fcee7cff3403bf9c86a1c", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -4933,7 +4933,7 @@ package body Exp_Aggr is\n       --  Here we test for is packed array aggregate that we can handle at\n       --  compile time. If so, return with transformation done. Note that we do\n       --  this even if the aggregate is nested, because once we have done this\n-      --  processing, there is no more nested aggregate!\n+      --  processing, there is no more nested aggregate.\n \n       if Packed_Array_Aggregate_Handled (N) then\n          return;\n@@ -5279,7 +5279,7 @@ package body Exp_Aggr is\n          --  form (others => 'x'), with a single choice and no expressions,\n          --  and N is less than 80 (an arbitrary limit for now), then replace\n          --  the aggregate by the equivalent string literal (but do not mark\n-         --  it as static since it is not!)\n+         --  it as static since it is not).\n \n          --  Note: this entire circuit is redundant with respect to code in\n          --  Expand_Array_Aggregate that collapses others choices to positional\n@@ -5303,7 +5303,7 @@ package body Exp_Aggr is\n \n          --       But it succeeds (DH looks static to pragma Export)\n \n-         --    To be sorted out! ???\n+         --    To be sorted out ???\n \n          if Present (Component_Associations (N)) then\n             declare"}, {"sha": "a52342cf409f0268db55f25f565e76b6a265ab9b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -567,7 +567,7 @@ package body Exp_Attr is\n       --  of the entities in the Fat packages, but first they have identical\n       --  names (so we would have to have lots of renaming declarations to\n       --  meet the normal RE rule of separate names for all runtime entities),\n-      --  and second there would be an awful lot of them!\n+      --  and second there would be an awful lot of them.\n \n       Fnm :=\n         Make_Selected_Component (Loc,\n@@ -2602,7 +2602,7 @@ package body Exp_Attr is\n          --  This is simply a direct conversion from the enumeration type to\n          --  the target integer type, which is treated by the back end as a\n          --  normal integer conversion, treating the enumeration type as an\n-         --  integer, which is exactly what we want! We set Conversion_OK to\n+         --  integer, which is exactly what we want. We set Conversion_OK to\n          --  make sure that the analyzer does not complain about what otherwise\n          --  might be an illegal conversion.\n \n@@ -2798,7 +2798,7 @@ package body Exp_Attr is\n \n       --  Note: it might appear that a properly analyzed unchecked conversion\n       --  would be just fine here, but that's not the case, since the full\n-      --  range checks performed by the following call are critical!\n+      --  range checks performed by the following call are critical.\n \n          Apply_Type_Conversion_Checks (N);\n       end Fixed_Value;\n@@ -3274,7 +3274,7 @@ package body Exp_Attr is\n \n       --  Note: it might appear that a properly analyzed unchecked conversion\n       --  would be just fine here, but that's not the case, since the full\n-      --  range checks performed by the following call are critical!\n+      --  range checks performed by the following call are critical.\n \n          Apply_Type_Conversion_Checks (N);\n       end Integer_Value;\n@@ -5775,7 +5775,7 @@ package body Exp_Attr is\n          begin\n             --  The value whose validity is being checked has been captured in\n             --  an object declaration. We certainly don't want this object to\n-            --  appear valid because the declaration initializes it!\n+            --  appear valid because the declaration initializes it.\n \n             if Is_Entity_Name (Temp) then\n                Set_Is_Known_Valid (Entity (Temp), False);\n@@ -5991,7 +5991,7 @@ package body Exp_Attr is\n \n          --  But that's precisely what won't work because of possible\n          --  unwanted optimization (and indeed the basic motivation for\n-         --  the Valid attribute is exactly that this test does not work!)\n+         --  the Valid attribute is exactly that this test does not work).\n          --  What will work is:\n \n          --     Btyp!(X) >= Btyp!(type(X)'First)"}, {"sha": "8951ffbac7403d13193efe301dc77083478bde4c", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1118,7 +1118,7 @@ package body Exp_Ch11 is\n                   --  handling of exceptions. When control is passed to the\n                   --  handler, then in the normal case we undefer aborts. In\n                   --  any case this entire handling is relevant only if aborts\n-                  --  are allowed!\n+                  --  are allowed.\n \n                elsif Abort_Allowed\n                  and then Exception_Mechanism /= Back_End_Exceptions\n@@ -1431,7 +1431,7 @@ package body Exp_Ch11 is\n       --  We adjust the condition to deal with the C/Fortran boolean case. This\n       --  may well not be necessary, as all such conditions are generated by\n       --  the expander and probably are all standard boolean, but who knows\n-      --  what strange optimization in future may require this adjustment!\n+      --  what strange optimization in future may require this adjustment.\n \n       Adjust_Condition (Condition (N));\n \n@@ -1505,7 +1505,7 @@ package body Exp_Ch11 is\n       --  We adjust the condition to deal with the C/Fortran boolean case. This\n       --  may well not be necessary, as all such conditions are generated by\n       --  the expander and probably are all standard boolean, but who knows\n-      --  what strange optimization in future may require this adjustment!\n+      --  what strange optimization in future may require this adjustment.\n \n       Adjust_Condition (Condition (N));\n \n@@ -1822,7 +1822,7 @@ package body Exp_Ch11 is\n       --  We adjust the condition to deal with the C/Fortran boolean case. This\n       --  may well not be necessary, as all such conditions are generated by\n       --  the expander and probably are all standard boolean, but who knows\n-      --  what strange optimization in future may require this adjustment!\n+      --  what strange optimization in future may require this adjustment.\n \n       Adjust_Condition (Condition (N));\n \n@@ -2171,7 +2171,7 @@ package body Exp_Ch11 is\n \n       --  Note: it is a little irregular for the body of exp_ch11 to know\n       --  the details of the encoding scheme for names, but on the other\n-      --  hand, gigi knows them, and this is for gigi's benefit anyway!\n+      --  hand, gigi knows them, and this is for gigi's benefit anyway.\n \n       if Name_Buffer (1 .. 30) /= \"system__aux_dec__non_ada_error\" then\n          return False;"}, {"sha": "f3055872099b0f0774c29132ae81ef108a4ad919", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -3406,7 +3406,7 @@ package body Exp_Ch3 is\n          --     the client will think an initialization procedure is present\n          --     and call it, when in fact no such procedure is required, but\n          --     since the call is generated, there had better be a routine\n-         --     at the other end of the call, even if it does nothing!)\n+         --     at the other end of the call, even if it does nothing).\n \n          --  Note: the reason we exclude the CPP_Class case is because in this\n          --  case the initialization is performed by the C++ constructors, and\n@@ -5298,7 +5298,7 @@ package body Exp_Ch3 is\n          elsif Is_Interface (Typ)\n \n            --  Avoid never-ending recursion because if Equivalent_Type is set\n-           --  then we've done it already and must not do it again!\n+           --  then we've done it already and must not do it again.\n \n            and then not\n              (Nkind (Object_Definition (N)) = N_Identifier\n@@ -5746,7 +5746,7 @@ package body Exp_Ch3 is\n             --  We do not analyze this renaming declaration, because all its\n             --  components have already been analyzed, and if we were to go\n             --  ahead and analyze it, we would in effect be trying to generate\n-            --  another declaration of X, which won't do!\n+            --  another declaration of X, which won't do.\n \n             Set_Renamed_Object (Defining_Identifier (N), Expr_Q);\n             Set_Analyzed (N);\n@@ -6295,7 +6295,7 @@ package body Exp_Ch3 is\n \n       --  Note: if exceptions are not supported, then we suppress the raise\n       --  and return -1 unconditionally (this is an erroneous program in any\n-      --  case and there is no obligation to raise Constraint_Error here!) We\n+      --  case and there is no obligation to raise Constraint_Error here). We\n       --  also do this if pragma Restrictions (No_Exceptions) is active.\n \n       --  Is this right??? What about No_Exception_Propagation???\n@@ -9795,7 +9795,7 @@ package body Exp_Ch3 is\n             Append_To (Res, Decl);\n          end if;\n \n-         --  Body for inequality (if required!)\n+         --  Body for inequality (if required)\n \n          Decl := Make_Neq_Body (Tag_Typ);\n "}, {"sha": "06c69b1fc369c5523ab6e8763ee4a71a7acaa927", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1790,7 +1790,7 @@ package body Exp_Ch4 is\n       --  components of the arrays.\n       --\n       --  The actual way the code works is to return the comparison of\n-      --  corresponding components for the N+1 call. That's neater!\n+      --  corresponding components for the N+1 call. That's neater.\n \n       function Test_Empty_Arrays return Node_Id;\n       --  This function constructs the test for both arrays being empty\n@@ -4419,7 +4419,7 @@ package body Exp_Ch4 is\n          Analyze_And_Resolve (N, PtrT);\n \n          --  We set the variable as statically allocated, since we don't want\n-         --  it going on the stack of the current procedure!\n+         --  it going on the stack of the current procedure.\n \n          Set_Is_Statically_Allocated (Temp);\n          return;\n@@ -5727,7 +5727,7 @@ package body Exp_Ch4 is\n             --  way we get all the processing above for an explicit range.\n \n             --  Don't do this for predicated types, since in this case we\n-            --  want to check the predicate!\n+            --  want to check the predicate.\n \n             elsif Is_Scalar_Type (Typ) then\n                if No (Predicate_Function (Typ)) then\n@@ -6004,7 +6004,7 @@ package body Exp_Ch4 is\n \n       --  If a predicate is present, then we do the predicate test, but we\n       --  most certainly want to omit this if we are within the predicate\n-      --  function itself, since otherwise we have an infinite recursion!\n+      --  function itself, since otherwise we have an infinite recursion.\n       --  The check should also not be emitted when testing against a range\n       --  (the check is only done when the right operand is a subtype; see\n       --  RM12-4.5.2 (28.1/3-30/3)).\n@@ -7151,7 +7151,7 @@ package body Exp_Ch4 is\n             then\n                --  Search for equality operation, checking that the operands\n                --  have the same type. Note that we must find a matching entry,\n-               --  or something is very wrong!\n+               --  or something is very wrong.\n \n                Prim := First_Elmt (Collect_Primitive_Operations (A_Typ));\n \n@@ -9127,15 +9127,15 @@ package body Exp_Ch4 is\n            and then Is_Constrained (Ptyp)\n          then\n             --  Do this optimization for discrete types only, and not for\n-            --  access types (access discriminants get us into trouble!)\n+            --  access types (access discriminants get us into trouble).\n \n             if not Is_Discrete_Type (Etype (N)) then\n                null;\n \n             --  Don't do this on the left hand of an assignment statement.\n             --  Normally one would think that references like this would not\n             --  occur, but they do in generated code, and mean that we really\n-            --  do want to assign the discriminant!\n+            --  do want to assign the discriminant.\n \n             elsif Nkind (Par) = N_Assignment_Statement\n               and then Name (Par) = N\n@@ -9154,7 +9154,7 @@ package body Exp_Ch4 is\n \n             --  Don't do this optimization if we are within the code for a\n             --  discriminant check, since the whole point of such a check may\n-            --  be to verify the condition on which the code below depends!\n+            --  be to verify the condition on which the code below depends.\n \n             elsif Is_In_Discriminant_Check (N) then\n                null;\n@@ -9248,7 +9248,7 @@ package body Exp_Ch4 is\n                         return;\n \n                      --  Otherwise we can just copy the constraint, but the\n-                     --  result is certainly not static! In some cases the\n+                     --  result is certainly not static. In some cases the\n                      --  discriminant constraint has been analyzed in the\n                      --  context of the original subtype indication, but for\n                      --  itypes the constraint might not have been analyzed\n@@ -9961,7 +9961,7 @@ package body Exp_Ch4 is\n       --  in Checks.Apply_Arithmetic_Overflow_Check, but we catch more cases in\n       --  the processing here. Also we still need the Checks circuit, since we\n       --  have to be sure not to generate junk overflow checks in the first\n-      --  place, since it would be trick to remove them here!\n+      --  place, since it would be trick to remove them here.\n \n       if Integer_Promotion_Possible (N) then\n "}, {"sha": "e563ccf8edc5d66c14c4819f9fa97aa48af2f096", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -631,7 +631,7 @@ package body Exp_Ch5 is\n             --  Otherwise, we assume the worst, which is that the two arrays\n             --  are the same array. There is no need to check if we know that\n             --  is the case, because if we don't know it, we still have to\n-            --  assume it!\n+            --  assume it.\n \n             --  Generally if the same array is involved, then we have an\n             --  overlapping case. We will have to really assume the worst (i.e.\n@@ -697,7 +697,7 @@ package body Exp_Ch5 is\n \n          --    Note: the above code MUST be analyzed with checks off, because\n          --    otherwise the Succ could overflow. But in any case this is more\n-         --    efficient!\n+         --    efficient.\n \n          --  Forwards_OK = False, Backwards_OK = True\n \n@@ -709,7 +709,7 @@ package body Exp_Ch5 is\n \n          --    Note: the above code MUST be analyzed with checks off, because\n          --    otherwise the Pred could overflow. But in any case this is more\n-         --    efficient!\n+         --    efficient.\n \n          --  Forwards_OK = Backwards_OK = False\n \n@@ -1775,7 +1775,7 @@ package body Exp_Ch5 is\n             --  We do not need to reanalyze that assignment, and we do not need\n             --  to worry about references to the temporary, but we do need to\n             --  make sure that the temporary is not marked as a true constant\n-            --  since we now have a generated assignment to it!\n+            --  since we now have a generated assignment to it.\n \n             Set_Is_True_Constant (Tnn, False);\n          end;"}, {"sha": "494f11efdee84e09651659e315a7f44e4933ed13", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -825,7 +825,7 @@ package body Exp_Ch6 is\n \n       --  We must have a call, since Has_Recursive_Call was set. If not just\n       --  ignore (this is only an error check, so if we have a funny situation,\n-      --  due to bugs or errors, we do not want to bomb!)\n+      --  due to bugs or errors, we do not want to bomb).\n \n       elsif Is_Empty_Elmt_List (Call_List) then\n          return;\n@@ -2043,7 +2043,7 @@ package body Exp_Ch6 is\n          procedure Do_Backend_Inline is\n          begin\n             --  No extra test needed for init subprograms since we know they\n-            --  are available to the backend!\n+            --  are available to the backend.\n \n             if Is_Init_Proc (Subp) then\n                Add_Inlined_Body (Subp);\n@@ -3108,7 +3108,7 @@ package body Exp_Ch6 is\n          --  For an OUT or IN OUT parameter, if the actual is an entity, then\n          --  clear current values, since they can be clobbered. We are probably\n          --  doing this in more places than we need to, but better safe than\n-         --  sorry when it comes to retaining bad current values!\n+         --  sorry when it comes to retaining bad current values.\n \n          if Ekind (Formal) /= E_In_Parameter\n            and then Is_Entity_Name (Actual)\n@@ -3122,7 +3122,7 @@ package body Exp_Ch6 is\n                --  For an OUT or IN OUT parameter that is an assignable entity,\n                --  we do not want to clobber the Last_Assignment field, since\n                --  if it is set, it was precisely because it is indeed an OUT\n-               --  or IN OUT parameter! We do reset the Is_Known_Valid flag\n+               --  or IN OUT parameter. We do reset the Is_Known_Valid flag\n                --  since the subprogram could have returned in invalid value.\n \n                if Ekind_In (Formal, E_Out_Parameter, E_In_Out_Parameter)\n@@ -3746,7 +3746,7 @@ package body Exp_Ch6 is\n \n       --  If this is a call to an intrinsic subprogram, then perform the\n       --  appropriate expansion to the corresponding tree node and we\n-      --  are all done (since after that the call is gone!)\n+      --  are all done (since after that the call is gone).\n \n       --  In the case where the intrinsic is to be processed by the back end,\n       --  the call to Expand_Intrinsic_Call will do nothing, which is fine,\n@@ -4056,7 +4056,7 @@ package body Exp_Ch6 is\n                begin\n                   --  First step, remove all the named parameters from the\n                   --  list (they are still chained using First_Named_Actual\n-                  --  and Next_Named_Actual, so we have not lost them!)\n+                  --  and Next_Named_Actual, so we have not lost them).\n \n                   Temp := First (Parameter_Associations (Call_Node));\n \n@@ -5665,7 +5665,7 @@ package body Exp_Ch6 is\n \n       if Is_Unc_Decl then\n \n-         --  No action needed since return statement has been already removed!\n+         --  No action needed since return statement has been already removed\n \n          null;\n \n@@ -7634,7 +7634,7 @@ package body Exp_Ch6 is\n    -----------------------------------\n \n    --  The \"simple\" comes from the syntax rule simple_return_statement. The\n-   --  semantics are not at all simple!\n+   --  semantics are not at all simple.\n \n    procedure Expand_Simple_Function_Return (N : Node_Id) is\n       Loc : constant Source_Ptr := Sloc (N);"}, {"sha": "0557995c563c7fd9363130654c4406cea2a9fa9f", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -5701,7 +5701,7 @@ package body Exp_Ch9 is\n          --  Mark NULL statement as coming from source so that it is not\n          --  eliminated by GIGI.\n \n-         --  Another covert channel! If this is a requirement, it must be\n+         --  Another covert channel. If this is a requirement, it must be\n          --  documented in sinfo/einfo ???\n \n          Set_Comes_From_Source (Stmt, True);\n@@ -11228,7 +11228,7 @@ package body Exp_Ch9 is\n    --  Single task declarations should never be present after semantic\n    --  analysis, since we expect them to be replaced by a declaration of an\n    --  anonymous task type, followed by a declaration of the task object. We\n-   --  include this routine to make sure that is happening!\n+   --  include this routine to make sure that is happening.\n \n    procedure Expand_N_Single_Task_Declaration (N : Node_Id) is\n    begin"}, {"sha": "6db896fa72de353e7f44b6a3bc0111f33d0b1f12", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -488,7 +488,7 @@ package body Exp_Dbug is\n \n    --  If we get an exception, just figure it is a case that we cannot\n    --  successfully handle using our current approach, since this is\n-   --  only for debugging, no need to take the compilation with us!\n+   --  only for debugging, no need to take the compilation with us.\n \n    exception\n       when others =>\n@@ -1199,9 +1199,7 @@ package body Exp_Dbug is\n \n       function Is_BNPE (S : Entity_Id) return Boolean is\n       begin\n-         return\n-           Ekind (S) = E_Package\n-             and then Is_Package_Body_Entity (S);\n+         return Ekind (S) = E_Package and then Is_Package_Body_Entity (S);\n       end Is_BNPE;\n \n       --------------------\n@@ -1212,7 +1210,7 @@ package body Exp_Dbug is\n       begin\n          --  If we got all the way to Standard, then we have certainly\n          --  fully qualified the name, so set the flag appropriately,\n-         --  and then return False, since we are most certainly done!\n+         --  and then return False, since we are most certainly done.\n \n          if S = Standard_Standard then\n             Set_Has_Fully_Qualified_Name (Ent, True);\n@@ -1221,13 +1219,10 @@ package body Exp_Dbug is\n          --  Otherwise figure out if further qualification is required\n \n          else\n-            return\n-              Is_Subprogram (Ent)\n-                or else\n-              Ekind (Ent) = E_Subprogram_Body\n-                or else\n-                  (Ekind (S) /= E_Block\n-                    and then not Is_Dynamic_Scope (S));\n+            return Is_Subprogram (Ent)\n+              or else Ekind (Ent) = E_Subprogram_Body\n+              or else (Ekind (S) /= E_Block\n+                        and then not Is_Dynamic_Scope (S));\n          end if;\n       end Qualify_Needed;\n "}, {"sha": "d18e32c18c41e80ecd8e0d141874eca16fd73066", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1287,11 +1287,11 @@ package body Exp_Disp is\n                Selector_Name => New_Occurrence_Of (Iface_Tag, Loc))));\n \n       else\n-         --  Build internal function to handle the case in which the\n-         --  actual is null. If the actual is null returns null because\n-         --  no displacement is required; otherwise performs a type\n-         --  conversion that will be expanded in the code that returns\n-         --  the value of the displaced actual. That is:\n+         --  Build internal function to handle the case in which the actual is\n+         --  null. If the actual is null returns null because no displacement\n+         --  is required; otherwise performs a type conversion that will be\n+         --  expanded in the code that returns the value of the displaced\n+         --  actual. That is:\n \n          --     function Func (O : Address) return Iface_Typ is\n          --        type Op_Typ is access all Operand_Typ;\n@@ -5050,7 +5050,7 @@ package body Exp_Disp is\n \n       --  Of course this value will only be valid if the tagged type is still\n       --  in scope, but it clearly must be erroneous to compute the internal\n-      --  tag of a tagged type that is out of scope!\n+      --  tag of a tagged type that is out of scope.\n \n       --  We don't do this processing if an explicit external tag has been\n       --  specified. That's an odd case for which we have already issued a\n@@ -7217,7 +7217,7 @@ package body Exp_Disp is\n       --  the decoration required by the backend.\n \n       --  Odd comment, the back end cannot require anything not properly\n-      --  documented in einfo! ???\n+      --  documented in einfo. ???\n \n       Set_Is_Dispatch_Table_Entity (RTE (RE_Prim_Ptr));\n       Set_Is_Dispatch_Table_Entity (RTE (RE_Predef_Prims_Table_Ptr));"}, {"sha": "37cded71c9e8df46baa92f6641c74beb6f5627a7", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -122,7 +122,7 @@ package body Exp_Fixd is\n    --  both integer types, which need not be the same. Build_Rem converts the\n    --  operand with the smaller sized type to match the type of the other\n    --  operand and sets this as the result type. The result is never rounded\n-   --  (rem operations cannot be rounded in any case!) On return, the resulting\n+   --  (rem operations cannot be rounded in any case). On return, the resulting\n    --  node is analyzed and has its Etype set.\n \n    function Build_Scaled_Divide\n@@ -407,7 +407,7 @@ package body Exp_Fixd is\n \n    begin\n       --  If denominator fits in 64 bits, we can build the operations directly\n-      --  without causing any intermediate overflow, so that's what we do!\n+      --  without causing any intermediate overflow, so that's what we do.\n \n       if Int'Max (Y_Size, Z_Size) <= 32 then\n          return\n@@ -787,7 +787,7 @@ package body Exp_Fixd is\n \n    begin\n       --  If numerator fits in 64 bits, we can build the operations directly\n-      --  without causing any intermediate overflow, so that's what we do!\n+      --  without causing any intermediate overflow, so that's what we do.\n \n       if Int'Max (X_Size, Y_Size) <= 32 then\n          return"}, {"sha": "2a62dad72c218539c68b88f47a0adaa7eed721cc", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -310,7 +310,8 @@ package body Exp_Imgv is\n          Tent := Rtyp;\n \n       --  For standard character, we have to select the version which handles\n-      --  soft hyphen correctly, based on the version of Ada in use (ugly!)\n+      --  soft hyphen correctly, based on the version of Ada in use (this is\n+      --  ugly, but we have no choice).\n \n       elsif Rtyp = Standard_Character then\n          if Ada_Version < Ada_2005 then"}, {"sha": "6f9df3883627a8d5cefe1cabd60c4c4d25c426ad", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -420,7 +420,7 @@ package body Exp_Intr is\n                   New_Occurrence_Of (Choice_Parameter (P), Loc))));\n             exit;\n \n-         --  Keep climbing!\n+         --  Keep climbing\n \n          else\n             P := Parent (P);\n@@ -747,7 +747,7 @@ package body Exp_Intr is\n \n          --  Loop to output the name\n \n-         --  is this right wrt wide char encodings ??? (no!)\n+         --  This is not right wrt wide char encodings ??? ()\n \n          SDef := Sloc (E);\n          while TDef (SDef) in '0' .. '9'"}, {"sha": "c77a1cb3a7be3fcb10fcd46cde49fb0d3bc3eb24", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -4691,7 +4691,7 @@ package body Exp_Util is\n             --  The following code is historical, it used to be present but it\n             --  is too cautious, because the front-end does not know the proper\n             --  default alignments for the target. Also, if the alignment is\n-            --  not known, the front end can't know in any case! If a copy is\n+            --  not known, the front end can't know in any case. If a copy is\n             --  needed, the back-end will take care of it. This whole section\n             --  including this comment can be removed later ???\n \n@@ -6225,7 +6225,7 @@ package body Exp_Util is\n             end;\n \n          --  For a slice, test the prefix, if that is possibly misaligned,\n-         --  then for sure the slice is!\n+         --  then for sure the slice is.\n \n          when N_Slice =>\n             return Possible_Bit_Aligned_Component (Prefix (N));\n@@ -7958,7 +7958,7 @@ package body Exp_Util is\n       --  We need the last guard because we don't want to raise CE for empty\n       --  arrays since no out of range values result. (Empty arrays with a\n       --  component type of True .. True -- very useful -- even the ACATS\n-      --  does not test that marginal case!)\n+      --  does not test that marginal case).\n \n       Insert_Action (N,\n         Make_Raise_Constraint_Error (Loc,\n@@ -8009,7 +8009,7 @@ package body Exp_Util is\n       --  We need the last guard because we don't want to raise CE for empty\n       --  arrays since no out of range values result (Empty arrays with a\n       --  component type of True .. True -- very useful -- even the ACATS\n-      --  does not test that marginal case!).\n+      --  does not test that marginal case).\n \n       Insert_Action (N,\n         Make_Raise_Constraint_Error (Loc,\n@@ -8039,7 +8039,7 @@ package body Exp_Util is\n \n    Integer_Sized_Small : Ureal;\n    --  Set to 2.0 ** -(Integer'Size - 1) the first time that this function is\n-   --  called (we don't want to compute it more than once!)\n+   --  called (we don't want to compute it more than once).\n \n    Long_Integer_Sized_Small : Ureal;\n    --  Set to 2.0 ** -(Long_Integer'Size - 1) the first time that this function"}, {"sha": "3b5f01b9ec6b6c4e32a685d33adfb728f39e51c3", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2147,11 +2147,9 @@ package body Freeze is\n                      then\n                         Error_Msg_Sloc := Sloc (Comp_Size_C);\n                         Error_Msg_NE\n-                          (\"?r?pragma Pack for& ignored!\",\n-                           Pack_Pragma, Ent);\n+                          (\"?r?pragma Pack for& ignored!\", Pack_Pragma, Ent);\n                         Error_Msg_N\n-                          (\"\\?r?explicit component size given#!\",\n-                           Pack_Pragma);\n+                          (\"\\?r?explicit component size given#!\", Pack_Pragma);\n                         Set_Is_Packed (Base_Type (Ent), False);\n                         Set_Is_Bit_Packed_Array (Base_Type (Ent), False);\n                      end if;\n@@ -3280,7 +3278,7 @@ package body Freeze is\n            and then RM_Size (Rec) < Scalar_Component_Total_Esize\n \n            --  And the total RM size cannot be greater than the specified size\n-           --  since otherwise packing will not get us where we have to be!\n+           --  since otherwise packing will not get us where we have to be.\n \n            and then RM_Size (Rec) >= Scalar_Component_Total_RM_Size\n \n@@ -3966,7 +3964,7 @@ package body Freeze is\n \n                --  However, we don't do that for internal entities. We figure\n                --  that if we deliberately set Is_True_Constant for an internal\n-               --  entity, e.g. a dispatch table entry, then we mean it!\n+               --  entity, e.g. a dispatch table entry, then we mean it.\n \n                if (Is_Aliased (E) or else Is_Aliased (Etype (E)))\n                  and then not Is_Internal_Name (Chars (E))\n@@ -4091,7 +4089,7 @@ package body Freeze is\n             then\n                --  Make sure we actually have a pragma, and have not merely\n                --  inherited the indication from elsewhere (e.g. an address\n-               --  clause, which is not good enough in RM terms!)\n+               --  clause, which is not good enough in RM terms).\n \n                if Has_Rep_Pragma (E, Name_Atomic)\n                     or else\n@@ -5393,7 +5391,7 @@ package body Freeze is\n       --  expression, see section \"Handling of Default Expressions\" in the\n       --  spec of package Sem for further details. Note that we have to make\n       --  sure that we actually have a real expression (if we have a subtype\n-      --  indication, we can't test Is_Static_Expression!) However, we exclude\n+      --  indication, we can't test Is_Static_Expression). However, we exclude\n       --  the case of the prefix of an attribute of a static scalar subtype\n       --  from this early return, because static subtype attributes should\n       --  always cause freezing, even in default expressions, but the attribute\n@@ -5740,7 +5738,7 @@ package body Freeze is\n          end case;\n \n          --  We fall through the case if we did not yet find the proper\n-         --  place in the free for inserting the freeze node, so climb!\n+         --  place in the free for inserting the freeze node, so climb.\n \n          P := Parent_P;\n       end loop;\n@@ -6532,7 +6530,7 @@ package body Freeze is\n       --  For non-foreign convention subprograms, this is where we create\n       --  the extra formals (for accessibility level and constrained bit\n       --  information). We delay this till the freeze point precisely so\n-      --  that we know the convention!\n+      --  that we know the convention.\n \n       if not Has_Foreign_Convention (E) then\n          Create_Extra_Formals (E);"}, {"sha": "e07e0cc6c7b5bac09d736b459fefc2f34917aa49", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -226,7 +226,7 @@ begin\n          end loop;\n       end if;\n \n-      --  Restore style check, but if config file turned on checks, leave on!\n+      --  Restore style check, but if config file turned on checks, leave on\n \n       Opt.Style_Check := Save_Style_Check or Style_Check;\n "}, {"sha": "c3bfe304b623592dc1b659addd89def86889b105", "filename": "gcc/ada/g-comlin.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fg-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fg-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2012, AdaCore                     --\n+--                     Copyright (C) 1999-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -64,7 +64,7 @@\n --           when 'b' => Put_Line (\"Got b + \" & Parameter);\n \n --           when others =>\n---              raise Program_Error;         -- cannot occur!\n+--              raise Program_Error; -- cannot occur\n --        end case;\n --     end loop;\n "}, {"sha": "3d026ab5242c02a940652712c8ed5915bc9dd666", "filename": "gcc/ada/g-mbdira.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fg-mbdira.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fg-mbdira.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-mbdira.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -111,7 +111,7 @@ package body GNAT.MBBS_Discrete_Random is\n       S.X2 := Square_Mod_N (S.X2, S.Q);\n       Temp := S.X2 - S.X1;\n \n-      --  Following duplication is not an error, it is a loop unwinding!\n+      --  Following duplication is not an error, it is a loop unwinding\n \n       if Temp < 0 then\n          Temp := Temp + S.Q;"}, {"sha": "f11bcfc997a53494490fd67a15017470ce1795be", "filename": "gcc/ada/g-spipat.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fg-spipat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fg-spipat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-spipat.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1998-2011, AdaCore                     --\n+--                     Copyright (C) 1998-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1081,7 +1081,7 @@ package body GNAT.Spitbol.Patterns is\n       --  control. One might be tempted to think that at this point, the\n       --  history stack entries made by matching P can just be removed since\n       --  they certainly are not going to be used for rematching (that is\n-      --  whole point of Fence after all!) However, this is wrong, because\n+      --  whole point of Fence after all). However, this is wrong, because\n       --  it would result in the loss of possible assign-on-match entries\n       --  for deferred pattern assignments.\n "}, {"sha": "f5c312a678d19066f33e518842f2aaa3f6e84b34", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -283,7 +283,7 @@ procedure Gnat1drv is\n \n          --  Make the Ada front-end more liberal so that the compiler will\n          --  allow illegal code that is allowed by other compilers. CodePeer\n-         --  is in the business of finding problems, not enforcing rules!\n+         --  is in the business of finding problems, not enforcing rules.\n          --  This is useful when using CodePeer mode with other compilers.\n \n          Relaxed_RM_Semantics := True;\n@@ -441,7 +441,7 @@ procedure Gnat1drv is\n \n       --  Deal with forcing OpenVMS switches True if debug flag M is set, but\n       --  record the setting of Targparm.Open_VMS_On_Target in True_VMS_Target\n-      --  before doing this, so we know if we are in real OpenVMS or not!\n+      --  before doing this, so we know if we are in real OpenVMS or not.\n \n       Opt.True_VMS_Target := Targparm.OpenVMS_On_Target;\n \n@@ -696,8 +696,8 @@ procedure Gnat1drv is\n                   --  Remaining cases are packages and generic packages. Here\n                   --  we only do the test if there are no previous errors,\n                   --  because if there are errors, they may lead us to\n-                  --  incorrectly believe that a package does not allow a body\n-                  --  when in fact it does.\n+                  --  incorrectly believe that a package does not allow a\n+                  --  body when in fact it does.\n \n                elsif not Compilation_Errors then\n                   if Main_Kind = N_Package_Declaration then\n@@ -1258,7 +1258,7 @@ begin\n       when Storage_Error =>\n \n          --  Assume this is a bug. If it is real, the message will in any case\n-         --  say Storage_Error, giving a strong hint!\n+         --  say Storage_Error, giving a strong hint.\n \n          Comperr.Compiler_Abort (\"Storage_Error\");\n    end;"}, {"sha": "54d2c8e92e84af08b008e8dba85d4079a5a0d051", "filename": "gcc/ada/gprep.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fgprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fgprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprep.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2002-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -165,7 +165,7 @@ package body GPrep is\n \n    procedure Gnatprep is\n    begin\n-      --  Do some initializations (order is important here!)\n+      --  Do some initializations (order is important here)\n \n       Csets.Initialize;\n       Snames.Initialize;"}, {"sha": "27db1c2b1fd732f1240b5ee376f224decd44b785", "filename": "gcc/ada/i-cpp.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fi-cpp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fi-cpp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cpp.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,7 +39,7 @@ package Interfaces.CPP is\n \n    subtype Vtable_Ptr is Ada.Tags.Tag;\n \n-   --  These need commenting (this is not an RM package!)\n+   --  These need commenting (this is not an RM package) ???\n \n    function Expanded_Name (T : Vtable_Ptr) return String\n      renames Ada.Tags.Expanded_Name;"}, {"sha": "549c3c7badbbef509c00e56982a9e972ba505ed9", "filename": "gcc/ada/i-vxwork-x86.ads", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fi-vxwork-x86.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fi-vxwork-x86.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-vxwork-x86.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -85,9 +85,10 @@ package Interfaces.VxWorks is\n    --\n    --  with P; use P;\n    --  procedure Useint is\n-   --     --  Be sure to use a reasonable interrupt number for the target\n-   --     --  board!\n+   --\n+   --     --  Be sure to use a reasonable interrupt number for target board.\n    --     --  This one is an unreserved interrupt for the Pentium 3 BSP\n+   --\n    --     Interrupt : constant := 16#33#;\n    --\n    --     task T;\n@@ -101,6 +102,7 @@ package Interfaces.VxWorks is\n    --           delay 1.0;\n    --\n    --           --  Generate interrupt, using interrupt number\n+   --\n    --           Asm (\"int %0\",\n    --                Inputs =>\n    --                  Ada.Interrupts.Interrupt_ID'Asm_Input\n@@ -134,32 +136,32 @@ package Interfaces.VxWorks is\n      (vector    : Interrupt_Vector;\n       handler   : VOIDFUNCPTR;\n       parameter : System.Address := System.Null_Address) return STATUS;\n-   --  Binding to the C routine intConnect. Use this to set up an\n-   --  user handler. The routine generates a wrapper around the user\n-   --  handler to save and restore context\n+   --  Binding to the C routine intConnect. Use this to set up an user handler.\n+   --  The routine generates a wrapper around the user handler to save and\n+   --  restore context\n \n    function intContext return int;\n-   --  Binding to the C routine intContext. This function returns 1 only\n-   --  if the current execution state is in interrupt context.\n+   --  Binding to the C routine intContext. This function returns 1 only if the\n+   --  current execution state is in interrupt context.\n \n    function intVecGet\n      (Vector : Interrupt_Vector) return VOIDFUNCPTR;\n-   --  Binding to the C routine intVecGet. Use this to get the\n-   --  existing handler for later restoral\n+   --  Binding to the C routine intVecGet. Use this to get the existing handler\n+   --  for later restoral\n \n    procedure intVecSet\n      (Vector  : Interrupt_Vector;\n       Handler : VOIDFUNCPTR);\n-   --  Binding to the C routine intVecSet. Use this to restore a\n-   --  handler obtained using intVecGet\n+   --  Binding to the C routine intVecSet. Use this to restore a handler\n+   --  obtained using intVecGet\n \n    procedure intVecGet2\n      (vector       : Interrupt_Vector;\n       pFunction    : out VOIDFUNCPTR;\n       pIdtGate     : not null access int;\n       pIdtSelector : not null access int);\n-   --  Binding to the C routine intVecGet2. Use this to get the\n-   --  existing handler for later restoral\n+   --  Binding to the C routine intVecGet2. Use this to get the existing\n+   --  handler for later restoral\n \n    procedure intVecSet2\n      (vector       : Interrupt_Vector;\n@@ -180,12 +182,11 @@ package Interfaces.VxWorks is\n    --  (e.g logMsg (\"Interrupt\" & ASCII.NUL))\n \n    type FP_CONTEXT is private;\n-   --  Floating point context save and restore. Handlers using floating\n-   --  point must be bracketed with these calls. The pFpContext parameter\n-   --  should be an object of type FP_CONTEXT that is\n-   --  declared local to the handler.\n-   --  See the VxWorks Intel Architecture Supplement regarding\n-   --  these routines.\n+   --  Floating point context save and restore. Handlers using floating point\n+   --  must be bracketed with these calls. The pFpContext parameter should be\n+   --  an object of type FP_CONTEXT that is declared local to the handler.\n+   --\n+   --  See the VxWorks Intel Architecture Supplement regarding these routines\n \n    procedure fppRestore (pFpContext : in out FP_CONTEXT);\n    --  Restore floating point context - old style"}, {"sha": "81c42993730b439db9433c563d1a8b7b0d51c5ac", "filename": "gcc/ada/i-vxwork.ads", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fi-vxwork.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fi-vxwork.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-vxwork.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                   S p e c                                --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,15 +30,16 @@\n ------------------------------------------------------------------------------\n \n --  This package provides a limited binding to the VxWorks API\n+\n --  In particular, it interfaces with the VxWorks hardware interrupt\n---  facilities, allowing the use of low-latency direct-vectored\n---  interrupt handlers. Note that such handlers have a variety of\n---  restrictions regarding system calls and language constructs. In particular,\n---  the use of exception handlers and functions returning variable-length\n---  objects cannot be used. Less restrictive, but higher-latency handlers can\n---  be written using Ada protected procedures, Ada 83 style interrupt entries,\n---  or by signalling an Ada task from within an interrupt handler using a\n---  binary semaphore as described in the VxWorks Programmer's Manual.\n+--  facilities, allowing the use of low-latency direct-vectored interrupt\n+--  handlers. Note that such handlers have a variety of restrictions regarding\n+--  system calls and language constructs. In particular, the use of exception\n+--  handlers and functions returning variable-length objects cannot be used.\n+--  Less restrictive, but higher-latency handlers can be written using Ada\n+--  protected procedures, Ada 83 style interrupt entries, or by signalling\n+--  an Ada task from within an interrupt handler using a binary semaphore\n+--  as described in the VxWorks Programmer's Manual.\n --\n --  For complete documentation of the operations in this package, please\n --  consult the VxWorks Programmer's Manual and VxWorks Reference Manual.\n@@ -81,6 +82,7 @@ package Interfaces.VxWorks is\n    --        logMsg (\"received an interrupt\" & ASCII.LF & ASCII.NUL);\n    --\n    --        --  Acknowledge VME interrupt\n+   --\n    --        S := sysBusIntAck (intLevel => Level);\n    --     end Handler;\n    --  end P;\n@@ -90,9 +92,10 @@ package Interfaces.VxWorks is\n    --\n    --  with P; use P;\n    --  procedure Useint is\n-   --     --  Be sure to use a reasonable interrupt number for the target\n-   --     --  board!\n+   --\n+   --     --  Be sure to use a reasonable interrupt number for  board.\n    --     --  This one is the unused VME graphics interrupt on the PPC MV2604\n+   --\n    --     Interrupt : constant := 16#14#;\n    --\n    --     task T;\n@@ -106,6 +109,7 @@ package Interfaces.VxWorks is\n    --           delay 1.0;\n    --\n    --           --  Generate VME interrupt, using interrupt number\n+   --\n    --           S := sysBusIntGen (1, Interrupt);\n    --        end loop;\n    --     end T;\n@@ -137,24 +141,24 @@ package Interfaces.VxWorks is\n      (vector    : Interrupt_Vector;\n       handler   : VOIDFUNCPTR;\n       parameter : System.Address := System.Null_Address) return STATUS;\n-   --  Binding to the C routine intConnect. Use this to set up an\n-   --  user handler. The routine generates a wrapper around the user\n-   --  handler to save and restore context\n+   --  Binding to the C routine intConnect. Use this to set up an user handler.\n+   --  The routine generates a wrapper around the user handler to save and\n+   --  restore context\n \n    function intContext return int;\n-   --  Binding to the C routine intContext. This function returns 1 only\n-   --  if the current execution state is in interrupt context.\n+   --  Binding to the C routine intContext. This function returns 1 only if the\n+   --  current execution state is in interrupt context.\n \n    function intVecGet\n      (Vector : Interrupt_Vector) return VOIDFUNCPTR;\n-   --  Binding to the C routine intVecGet. Use this to get the\n-   --  existing handler for later restoral\n+   --  Binding to the C routine intVecGet. Use this to get the existing handler\n+   --  for later restoral\n \n    procedure intVecSet\n      (Vector  : Interrupt_Vector;\n       Handler : VOIDFUNCPTR);\n-   --  Binding to the C routine intVecSet. Use this to restore a\n-   --  handler obtained using intVecGet\n+   --  Binding to the C routine intVecSet. Use this to restore a handler\n+   --  obtained using intVecGet\n \n    function INUM_TO_IVEC (intNum : int) return Interrupt_Vector;\n    --  Equivalent to the C macro INUM_TO_IVEC used to convert an interrupt\n@@ -170,10 +174,10 @@ package Interfaces.VxWorks is\n    --  Binding to the C routine sysBusIntAck\n \n    function sysBusIntGen (intLevel : int; Intnum : int) return STATUS;\n-   --  Binding to the C routine sysBusIntGen. Note that the T2\n-   --  documentation implies that a vector address is the proper\n-   --  argument - it's not. The interrupt number in the range\n-   --  0 .. 255 (for 68K and PPC) is the correct argument.\n+   --  Binding to the C routine sysBusIntGen. Note that the T2 documentation\n+   --  implies that a vector address is the proper argument - it's not. The\n+   --  interrupt number in the range 0 .. 255 (for 68K and PPC) is the correct\n+   --  argument.\n \n    procedure logMsg\n      (fmt : String; arg1, arg2, arg3, arg4, arg5, arg6 : int := 0);\n@@ -182,10 +186,9 @@ package Interfaces.VxWorks is\n    --  (e.g logMsg (\"Interrupt\" & ASCII.NUL))\n \n    type FP_CONTEXT is private;\n-   --  Floating point context save and restore. Handlers using floating\n-   --  point must be bracketed with these calls. The pFpContext parameter\n-   --  should be an object of type FP_CONTEXT that is\n-   --  declared local to the handler.\n+   --  Floating point context save and restore. Handlers using floating point\n+   --  must be bracketed with these calls. The pFpContext parameter should be\n+   --  an object of type FP_CONTEXT that is declared local to the handler.\n \n    procedure fppRestore (pFpContext : in out FP_CONTEXT);\n    --  Restore floating point context"}, {"sha": "2a6d9681ed40f95fffba5d717102b06d3b741c59", "filename": "gcc/ada/krunch.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fkrunch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fkrunch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fkrunch.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -114,7 +114,7 @@\n --  we replace the prefix ada.wide_wide_text_io- by a-zt- and then\n --  the normal crunching rules are applied.\n \n---  These are the only irregularity required (so far!) to keep the file names\n+--  These are the only irregularity required (so far) to keep the file names\n --  unique in the standard predefined libraries.\n \n procedure Krunch"}, {"sha": "75957c53fc1bc54cddf077f438c275525f128897", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -751,7 +751,7 @@ package body Layout is\n          then\n             S := Expr_Value (Hi) - Expr_Value (Lo) + 1;\n \n-            --  If known flat bound, entire size of array is zero!\n+            --  If known flat bound, entire size of array is zero\n \n             if S <= 0 then\n                return Make_Integer_Literal (Loc, 0);\n@@ -1088,7 +1088,7 @@ package body Layout is\n          then\n             S := Expr_Value (Hi) - Expr_Value (Lo) + 1;\n \n-            --  If known flat bound, entire size of array is zero!\n+            --  If known flat bound, entire size of array is zero\n \n             if S <= 0 then\n                Set_Esize (E, Uint_0);\n@@ -1688,7 +1688,7 @@ package body Layout is\n \n          --  Set size of component from type. We use the Esize except in a\n          --  packed record, where we use the RM_Size (since that is what the\n-         --  RM_Size value, as distinct from the Object_Size is useful for!)\n+         --  RM_Size value, as distinct from the Object_Size is useful for).\n \n          if Is_Packed (E) then\n             Set_Esize (Comp, RM_Size (Ctyp));\n@@ -1771,7 +1771,7 @@ package body Layout is\n          End_NPMax : SO_Ref;\n \n       begin\n-         --  Only lay out components if there are some to lay out!\n+         --  Only lay out components if there are some to lay out\n \n          if Present (From) then\n \n@@ -2508,7 +2508,7 @@ package body Layout is\n          --  since this is part of the earlier processing and the front end is\n          --  always required to lay out the sizes of such types (since they are\n          --  available as static attributes). All we do is to check that this\n-         --  rule is indeed obeyed!\n+         --  rule is indeed obeyed.\n \n          if Is_Discrete_Type (E) then\n "}, {"sha": "540bd63043c60708fb920497b2205bf1f2f9dda3", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -740,7 +740,7 @@ package body Lib.Load is\n                goto Done;\n             end if;\n \n-            --  If loaded unit had a fatal error, then caller inherits it!\n+            --  If loaded unit had a fatal error, then caller inherits it\n \n             if Units.Table (Unum).Fatal_Error\n               and then Present (Error_Node)"}, {"sha": "48adf70c97a4618f550faf7307f3da5ac79f5169", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1496,7 +1496,7 @@ package body Lib.Writ is\n       end if;\n \n       --  Output final blank line and we are done. This final blank line is\n-      --  probably junk, but we don't feel like making an incompatible change!\n+      --  probably junk, but we don't feel like making an incompatible change.\n \n       Write_Info_Terminate;\n       Close_Output_Library_Info;"}, {"sha": "cfcc01c6dfa60319999943fc3c13a63904046fe1", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -260,7 +260,7 @@ package Lib.Writ is\n \n    --    Note: The P line must be present. Even in Ignore_Errors mode, Scan_ALI\n    --    insists on finding a P line. So if changes are made to the ALI format,\n-   --    they should not include removing the P line!\n+   --    they should not include removing the P line.\n \n    --  ---------------------\n    --  -- R  Restrictions --"}, {"sha": "5366b513d6cd5bc43e8444a512057cdfa2f29b2c", "filename": "gcc/ada/live.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flive.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Flive.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flive.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2000-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -84,7 +84,7 @@ package body Live is\n    --  Given a subprogram body N, return defining identifier of its declaration\n \n    --  ??? the body of this package contains no comments at all, this\n-   --  should be fixed!\n+   --  should be fixed.\n \n    -------------\n    -- Body_Of --"}, {"sha": "431204b6a776aaa98d3c4fe92c3c15ae41619dce", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -128,7 +128,7 @@ package Namet is\n    --  This buffer is used to set the name to be stored in the table for the\n    --  Name_Find call, and to retrieve the name for the Get_Name_String call.\n    --  The limit here is intended to be an infinite value that ensures that we\n-   --  never overflow the buffer (names this long are too absurd to worry!)\n+   --  never overflow the buffer (names this long are too absurd to worry).\n \n    Name_Len : Natural := 0;\n    --  Length of name stored in Name_Buffer. Used as an input parameter for"}, {"sha": "72395f84c6b215896cd52151a4c09108f4a5fad2", "filename": "gcc/ada/osint-c.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fosint-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fosint-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint-c.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -225,7 +225,7 @@ package body Osint.C is\n \n    function Debug_File_Eol_Length return Nat is\n    begin\n-      --  There has to be a cleaner way to do this! ???\n+      --  There has to be a cleaner way to do this ???\n \n       if Directory_Separator = '/' then\n          return 1;"}, {"sha": "b9b03d45f6dc6ad23d19ca51b12d1e5422f141dd", "filename": "gcc/ada/osint.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fosint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fosint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fosint.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2430,7 +2430,8 @@ package body Osint is\n \n       Len : Integer;\n       --  Length of source file text (ALI). If it doesn't fit in an integer\n-      --  we're probably stuck anyway (>2 gigs of source seems a lot!)\n+      --  we're probably stuck anyway (>2 gigs of source seems a lot, and\n+      --  there are other places in the compiler that make this assumption).\n \n       Text : Text_Buffer_Ptr;\n       --  Allocated text buffer\n@@ -2585,7 +2586,7 @@ package body Osint is\n       --  indicates failure to open the specified source file.\n \n       Len : Integer;\n-      --  Length of file. Assume no more than 2 gigabytes of source!\n+      --  Length of file, assume no more than 2 gigabytes of source\n \n       Actual_Len : Integer;\n "}, {"sha": "bcbca57328d3965222c4f03ddb05efd81718ba44", "filename": "gcc/ada/output.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Foutput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Foutput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Foutput.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -168,7 +168,7 @@ package Output is\n    --  The following procedures are intended only for debugging purposes,\n    --  for temporary insertion into the text in environments where a debugger\n    --  is not available. They all have non-standard very short lower case\n-   --  names, precisely to make sure that they are only used for debugging!\n+   --  names, precisely to make sure that they are only used for debugging.\n \n    procedure w (C : Character);\n    --  Dump quote, character, quote, followed by line return"}, {"sha": "2cb424102a74a4a10aed9b91d89ee3fb6eb202c2", "filename": "gcc/ada/par-ch10.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch10.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -514,7 +514,7 @@ package body Ch10 is\n          return Error;\n       end if;\n \n-      --  Only try this if we got an OK unit!\n+      --  Only try this if we got an OK unit\n \n       if Unit_Node /= Error then\n          if Nkind (Unit_Node) = N_Subunit then\n@@ -577,7 +577,7 @@ package body Ch10 is\n          Set_Sloc (Comp_Unit_Node, Sloc (Name_Node));\n          Set_Sloc (Aux_Decls_Node (Comp_Unit_Node), Sloc (Name_Node));\n \n-         --  Set Entity field in file table. Easier now that we have name!\n+         --  Set Entity field in file table. Easier now that we have name.\n          --  Note that this is also skipped if we had a bad unit\n \n          if Nkind (Name_Node) = N_Defining_Program_Unit_Name then\n@@ -601,7 +601,7 @@ package body Ch10 is\n \n       --  Clear away any missing semicolon indication, we are done with that\n       --  unit, so what's done is done, and we don't want anything hanging\n-      --  around from the attempt to parse it!\n+      --  around from the attempt to parse it.\n \n       SIS_Entry_Active := False;\n "}, {"sha": "4c661a5a5f7f81671193a81e305e38a4ac476447", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -454,7 +454,7 @@ package body Ch13 is\n       Scan; -- past FOR\n \n       --  Note that the name in a representation clause is always a simple\n-      --  name, even in the attribute case, see AI-300 which made this so!\n+      --  name, even in the attribute case, see AI-300 which made this so.\n \n       Identifier_Node := P_Identifier (C_Use);\n "}, {"sha": "c09a68fbb2fa949bf6bff4240c9ecaa009336e0e", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -701,7 +701,7 @@ package body Ch3 is\n                else\n                   Decl_Node := New_Node (N_Private_Type_Declaration, Type_Loc);\n                   Set_Limited_Present (Decl_Node, True);\n-                  T_Private; -- past PRIVATE (or complain if not there!)\n+                  T_Private; -- past PRIVATE (or complain if not there)\n                end if;\n \n                exit;\n@@ -4506,7 +4506,7 @@ package body Ch3 is\n                Scan; -- past PRIVATE\n             end if;\n \n-         --  An end of file definitely terminates the declarations!\n+         --  An end of file definitely terminates the declarations\n \n          when Tok_EOF =>\n             Done := True;\n@@ -4730,7 +4730,7 @@ package body Ch3 is\n       --  declaration sequence on a second error, we scan out the statement\n       --  and append it to the list of declarations (note that the semantics\n       --  can handle statements in a declaration list so if we proceed to\n-      --  call the semantic phase, all will be (reasonably) well!\n+      --  call the semantic phase, all will be (reasonably) well.\n \n       Append_List_To (Decls, P_Sequence_Of_Statements (SS_Unco));\n "}, {"sha": "8dd49f3166ce6812d248c635db5877ea8ec9668b", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1512,7 +1512,7 @@ package body Ch4 is\n \n          --  If we are at an expression terminator, something is seriously\n          --  wrong, so let's get out now, before we start eating up stuff\n-         --  that doesn't belong to us!\n+         --  that doesn't belong to us.\n \n          if Token in Token_Class_Eterm then\n             Error_Msg_AP\n@@ -1992,7 +1992,7 @@ package body Ch4 is\n \n             --  If range attribute, then we return with Token pointing to the\n             --  apostrophe. Note: avoid the normal error check on exit. We\n-            --  know that the expression really is complete in this case!\n+            --  know that the expression really is complete in this case.\n \n             else -- Token = Tok_Range then\n                Restore_Scan_State (Scan_State); -- to apostrophe\n@@ -2634,7 +2634,7 @@ package body Ch4 is\n                end if;\n \n             --  Minus may well be an improper attempt at a unary minus. Give\n-            --  a message, skip the minus and keep going!\n+            --  a message, skip the minus and keep going.\n \n             when Tok_Minus =>\n                Error_Msg_SC (\"parentheses required for unary minus\");\n@@ -2893,7 +2893,7 @@ package body Ch4 is\n \n    --  Parsed by P_Factor (4.4)\n \n-   --  Note: this rule is not in fact used by the grammar at any point!\n+   --  Note: this rule is not in fact used by the grammar at any point\n \n    --------------------------\n    -- 4.6  Type Conversion --"}, {"sha": "2f83c3bc1e3ad946e6632fe28630a3bd20d1a27e", "filename": "gcc/ada/par-ch5.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch5.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -447,7 +447,7 @@ package body Ch5 is\n \n                   --  Otherwise we treat THEN as some kind of mess where we did\n                   --  not see the associated IF, but we pick up assuming it had\n-                  --  been there!\n+                  --  been there.\n \n                   Restore_Scan_State (Scan_State); -- to THEN\n                   Append_To (Statement_List, P_If_Statement);\n@@ -570,7 +570,7 @@ package body Ch5 is\n \n                            --  We will set Error_name as the Block_Label since\n                            --  we really don't know which of the labels might\n-                           --  be used at the end of the loop or block!\n+                           --  be used at the end of the loop or block.\n \n                            Block_Label := Error_Name;\n "}, {"sha": "b8391e5314566dc31fa2656ab016e166ece7c3e3", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1146,7 +1146,7 @@ package body Ch6 is\n \n          --  On exit from the loop, Ident_Node is the last identifier scanned,\n          --  i.e. the defining identifier, and Prefix_Node is a node for the\n-         --  entire name, structured (incorrectly!) as a selected component.\n+         --  entire name, structured (incorrectly) as a selected component.\n \n          Name_Node := Prefix (Prefix_Node);\n          Change_Node (Prefix_Node, N_Designator);\n@@ -1252,7 +1252,7 @@ package body Ch6 is\n \n          --  On exit from the loop, Ident_Node is the last identifier scanned,\n          --  i.e. the defining identifier, and Prefix_Node is a node for the\n-         --  entire name, structured (incorrectly!) as a selected component.\n+         --  entire name, structured (incorrectly) as a selected component.\n \n          Name_Node := Prefix (Prefix_Node);\n          Change_Node (Prefix_Node, N_Defining_Program_Unit_Name);\n@@ -1399,7 +1399,7 @@ package body Ch6 is\n \n                      --  If we run into a semicolon, then assume that a\n                      --  colon was missing, e.g.  Parms (X Y; ...). Also\n-                     --  assume missing colon on EOF (a real disaster!)\n+                     --  assume missing colon on EOF (a real disaster)\n                      --  and on a right paren, e.g. Parms (X Y), and also\n                      --  on an assignment symbol, e.g. Parms (X Y := ..)\n "}, {"sha": "7e4a9ee4e39e56bf784d2f02a589644e23d9a4c0", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -267,7 +267,7 @@ package body Ch9 is\n    --  regard the semicolon after end as part of the Task_Definition, and in\n    --  the official syntax, it's part of the enclosing declaration. The reason\n    --  for this deviation is that otherwise the end processing would have to\n-   --  be special cased, which would be a nuisance!\n+   --  be special cased, which would be a nuisance.\n \n    --  Error recovery:  cannot raise Error_Resync\n \n@@ -1036,7 +1036,7 @@ package body Ch9 is\n \n             else\n                Restore_Scan_State (Scan_State); -- to left paren\n-               Scan; -- past left paren (again!)\n+               Scan; -- past left paren (again)\n                Set_Entry_Index (Accept_Node, P_Expression);\n                T_Right_Paren;\n                Set_Parameter_Specifications (Accept_Node, P_Parameter_Profile);\n@@ -1280,7 +1280,7 @@ package body Ch9 is\n       Scan; -- past DELAY\n \n       --  The following check for delay until misused in Ada 83 doesn't catch\n-      --  all cases, but it's good enough to catch most of them!\n+      --  all cases, but it's good enough to catch most of them.\n \n       if Token_Name = Name_Until then\n          Check_95_Keyword (Tok_Until, Tok_Left_Paren);"}, {"sha": "d22cce2a5340793a89bdf242699fbf253eaf0576", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -700,7 +700,7 @@ package body Endh is\n \n          --  Extra statements past the bogus END are discarded. This is not\n          --  ideal for maximum error recovery, but it's too much trouble to\n-         --  find an appropriate place to put them!\n+         --  find an appropriate place to put them.\n \n          Discard_Junk_List (P_Sequence_Of_Statements (SS_None));\n       end loop;\n@@ -973,7 +973,7 @@ package body Endh is\n \n       --  The other possibility is a missing END for a subprogram with a\n       --  suspicious IS (that probably should have been a semicolon). The\n-      --  missing IS confirms the suspicion!\n+      --  missing IS confirms the suspicion.\n \n       else -- End_Type = E_Suspicious_Is or E_Bad_Is\n          Scope.Table (Scope.Last).Etyp := E_Bad_Is;"}, {"sha": "8b2cb5eccbab4c8e67f8be221fe3832752fcf4d0", "filename": "gcc/ada/par-labl.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-labl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-labl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-labl.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -407,7 +407,7 @@ procedure Labl is\n                --  Intervening label before possible end of loop. Current\n                --  label is not a candidate. This is conservative, because\n                --  the label might not be the target of any jumps, but not\n-               --  worth dealing with useless labels!\n+               --  worth dealing with useless labels.\n \n                No_Header (N);\n                return;"}, {"sha": "2061eb9e0f320561f593e99429c4e94e343fa424", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -407,7 +407,7 @@ begin\n \n          --  We unconditionally make a List_On entry for the pragma, so that\n          --  in the List (Off) case, the pragma will print even in a region\n-         --  of code with listing turned off (this is required!)\n+         --  of code with listing turned off (this is required).\n \n          List_Pragmas.Increment_Last;\n          List_Pragmas.Table (List_Pragmas.Last) :="}, {"sha": "0cf73db55a457ef64ab510717aff2077515d6a3c", "filename": "gcc/ada/par-sync.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-sync.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-sync.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-sync.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -41,7 +41,7 @@ package body Sync is\n       Resync_Init;\n \n       --  Loop till we get a token that terminates a choice. Note that EOF is\n-      --  one such token, so we are sure to get out of this loop eventually!\n+      --  one such token, so we are sure to get out of this loop eventually.\n \n       while Token not in Token_Class_Cterm loop\n          Scan;\n@@ -135,7 +135,7 @@ package body Sync is\n       --  loop resynchronizing and getting nowhere. If we are called to do a\n       --  resynchronize and we are exactly at the same point that we left off\n       --  on the last resynchronize call, then we force at least one token to\n-      --  be skipped so that we make progress!\n+      --  be skipped so that we make progress.\n \n       if Token_Ptr = Last_Resync_Point then\n          Scan; -- to skip at least one token"}, {"sha": "c2d37bda22a23888dff75795525c4d2ced0db4a9", "filename": "gcc/ada/par-tchk.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-tchk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-tchk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-tchk.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -558,11 +558,11 @@ package body Tchk is\n               or else Token = Tok_Semicolon\n               or else Token = Tok_EOF\n             then\n-               Restore_Scan_State (Scan_State); -- to where we were!\n+               Restore_Scan_State (Scan_State); -- to where we were\n                return;\n             end if;\n \n-            Scan; -- continue search!\n+            Scan; -- continue search\n \n             if Token = Tok_Arrow then\n                Scan; -- past arrow\n@@ -600,11 +600,11 @@ package body Tchk is\n               or else Token = Tok_Semicolon\n               or else Token = Tok_EOF\n             then\n-               Restore_Scan_State (Scan_State); -- to where we were!\n+               Restore_Scan_State (Scan_State); -- to where we were\n                return;\n             end if;\n \n-            Scan; -- continue search!\n+            Scan; -- continue search\n \n             if Token = Tok_Is\n               or else Token = Tok_Of\n@@ -642,11 +642,11 @@ package body Tchk is\n               or else Token = Tok_Semicolon\n               or else Token = Tok_EOF\n             then\n-               Restore_Scan_State (Scan_State); -- to where we were!\n+               Restore_Scan_State (Scan_State); -- to where we were\n                return;\n             end if;\n \n-            Scan; -- continue search!\n+            Scan; -- continue search\n \n             if Token = Tok_Loop or else Token = Tok_Then then\n                Scan; -- past loop or then (message already generated)\n@@ -677,11 +677,11 @@ package body Tchk is\n               or else Token = Tok_Semicolon\n               or else Token = Tok_EOF\n             then\n-               Restore_Scan_State (Scan_State); -- to where we were!\n+               Restore_Scan_State (Scan_State); -- to where we were\n                return;\n             end if;\n \n-            Scan; -- continue search!\n+            Scan; -- continue search\n \n             if Token = Tok_Return then\n                Scan; -- past RETURN\n@@ -784,7 +784,7 @@ package body Tchk is\n                return;\n             end if;\n \n-            Scan; -- continue search!\n+            Scan; -- continue search\n \n             if Token = Tok_Then then\n                Scan; -- past THEN\n@@ -818,7 +818,7 @@ package body Tchk is\n                return;\n             end if;\n \n-            Scan; -- continue search!\n+            Scan; -- continue search\n \n             if Token = Tok_Use then\n                Scan; -- past use"}, {"sha": "ff75cf1c49cef136fcb6413783643a4b4be0a553", "filename": "gcc/ada/par-util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar-util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-util.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -97,7 +97,7 @@ package body Util is\n \n       --  Never consider something a misspelling if either the actual or\n       --  expected string is less than 3 characters (before this check we\n-      --  used to consider i to be a misspelled if in some cases!)\n+      --  used to consider i to be a misspelled if in some cases).\n \n       if SL < 3 or else Name_Len < 3 then\n          return False;\n@@ -268,7 +268,7 @@ package body Util is\n       Paren_Count : Nat;\n \n    begin\n-      --  First check, if a comma is present, then a comma is present!\n+      --  First check, if a comma is present, then a comma is present\n \n       if Token = Tok_Comma then\n          T_Comma;\n@@ -318,7 +318,7 @@ package body Util is\n \n          --  If that test didn't work, loop ahead looking for a comma or\n          --  semicolon at the same parenthesis level. Always remember that\n-         --  we can't go badly wrong in an error situation like this!\n+         --  we can't go badly wrong in an error situation like this.\n \n          Paren_Count := 0;\n "}, {"sha": "93f5bb537bd7e9a1fa03b36814a0f2d5c43a81f1", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -589,11 +589,11 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n \n    --  Quite a bit of work, but really helpful in the case where it helps, and\n    --  the need for this is based on actual experience with tracking down this\n-   --  kind of error (the eye often easily mistakes semicolon for colon!)\n+   --  kind of error (the eye often easily mistakes semicolon for colon).\n \n    --  Note: we actually have enough information to patch up the tree, but\n-   --  this may not be worth the effort! Also we could deal with the same\n-   --  situation for EXIT with a label, but for now don't bother with that!\n+   --  this may not be worth the effort. Also we could deal with the same\n+   --  situation for EXIT with a label, but for now don't bother with that.\n \n    ---------------------------------\n    -- Parsing Routines by Chapter --"}, {"sha": "6a0a830fe1038569dd4949ce0a566ac7cb5571a8", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -229,7 +229,7 @@ package body Prj is\n                   --  Make sure that we don't have a config file for this\n                   --  project, in case there are several mains. In this case,\n                   --  we will recreate another config file: we cannot reuse the\n-                  --  one that we just deleted!\n+                  --  one that we just deleted.\n \n                   Proj.Project.Config_Checked   := False;\n                   Proj.Project.Config_File_Name := No_Path;"}, {"sha": "19b63397d0dff561398554f391388dc32e68e7ef", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -929,7 +929,7 @@ package body Repinfo is\n \n             else\n                --  For the packed case, we don't know the bit positions if we\n-               --  don't know the starting position!\n+               --  don't know the starting position.\n \n                if Is_Packed (Ent) then\n                   Write_Line (\"?? range  ? .. ??;\");"}, {"sha": "2c74afbe85e5c4ed09a97c373da75ddb05c09680", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -710,7 +710,7 @@ package body Rtsfind is\n       --  of diagnostics, since we will take care of it here.\n \n       --  We save style checking switches and turn off style checking for\n-      --  loading the unit, since we don't want any style checking!\n+      --  loading the unit, since we don't want any style checking.\n \n       declare\n          Save_Style_Check : constant Boolean := Style_Check;\n@@ -1088,7 +1088,7 @@ package body Rtsfind is\n       --  declaration and otherwise do a regular find.\n \n       --  Not pleasant, but these kinds of annoying recursion when\n-      --  writing an Ada compiler in Ada have to be broken somewhere!\n+      --  writing an Ada compiler in Ada have to be broken somewhere.\n \n       if Present (Main_Unit_Entity)\n         and then Chars (Main_Unit_Entity) = Name_System"}, {"sha": "ce4f75abef5eeacc6b572a9a78844ff39a70b60b", "filename": "gcc/ada/s-arit64.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-arit64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-arit64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-arit64.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -199,7 +199,7 @@ package body System.Arith_64 is\n \n       --  Compute Y * Z. Note that if the result overflows 64 bits unsigned,\n       --  then the rounded result is clearly zero (since the dividend is at\n-      --  most 2**63 - 1, the extra bit of precision is nice here!)\n+      --  most 2**63 - 1, the extra bit of precision is nice here).\n \n       if Yhi /= 0 then\n          if Zhi /= 0 then"}, {"sha": "253870f619b9b3f01c525768ebe84f2f0ce9ac38", "filename": "gcc/ada/s-asthan-vms-alpha.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-alpha.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -399,7 +399,7 @@ package body System.AST_Handling is\n \n          STI.Undefer_Abort (Self_Id);\n \n-         --  We are awake, there is something to do!\n+         --  We are awake, there is something to do\n \n          Lock_AST (Self_Id);\n          Num_Waiting_AST_Servers := Num_Waiting_AST_Servers - 1;"}, {"sha": "0f16fe8e3319713d7564417a70fd2305dcc4115a", "filename": "gcc/ada/s-asthan-vms-ia64.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-asthan-vms-ia64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-asthan-vms-ia64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-ia64.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 1996-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1996-2013, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -404,7 +404,7 @@ package body System.AST_Handling is\n \n          STI.Undefer_Abort (Self_Id);\n \n-         --  We are awake, there is something to do!\n+         --  We are awake, there is something to do\n \n          Lock_AST (Self_Id);\n          Num_Waiting_AST_Servers := Num_Waiting_AST_Servers - 1;"}, {"sha": "d12a9e3cd5fa850fe4b07323fcaf4d56474b99bb", "filename": "gcc/ada/s-bignum.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-bignum.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-bignum.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-bignum.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -364,7 +364,7 @@ package body System.Bignums is\n                   Free_Bignum (XY2);\n \n                   --  Raise storage error if intermediate value is getting too\n-                  --  large, which we arbitrarily define as 200 words for now!\n+                  --  large, which we arbitrarily define as 200 words for now.\n \n                   if XY2S.Len > 200 then\n                      Free_Bignum (XY2S);\n@@ -708,7 +708,7 @@ package body System.Bignums is\n \n       --  If both X and Y are less than 2**63-1, we can use Long_Long_Integer\n       --  arithmetic. Note it is good not to do an accurate range check against\n-      --  Long_Long_Integer since -2**63 / -1 overflows!\n+      --  Long_Long_Integer since -2**63 / -1 overflows.\n \n       elsif (X.Len <= 1 or else (X.Len = 2 and then X.D (1) < 2**31))\n               and then"}, {"sha": "d5526900461c5270adae588849968f789f931906", "filename": "gcc/ada/s-dimmks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-dimmks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-dimmks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-dimmks.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -105,7 +105,7 @@ package System.Dim.Mks is\n \n    --  Turn off the all the dimension warnings for these basic assignments\n    --  since otherwise we would get complaints about assigning dimensionless\n-   --  values to dimensioned subtypes (we can't assign 1.0*m to m!).\n+   --  values to dimensioned subtypes (we can't assign 1.0*m to m).\n \n    pragma Warnings (Off, \"*assumed to be*\");\n "}, {"sha": "f68dc76204f680f41ce00217cae0f76e3a676701", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -342,7 +342,7 @@ package body System.Fat_Gen is\n \n    --  The trick with Machine is to force the compiler to store the result\n    --  in memory so that we do not have extra precision used. The compiler\n-   --  is clever, so we have to outwit its possible optimizations! We do\n+   --  is clever, so we have to outwit its possible optimizations. We do\n    --  this by using an intermediate pragma Volatile location.\n \n    function Machine (X : T) return T is"}, {"sha": "13e78850416aa7628eb92b3e418ad6672705178f", "filename": "gcc/ada/s-fatgen.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-fatgen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-fatgen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,7 +47,7 @@ package System.Fat_Gen is\n    --  actual type used. For functions returning universal integer, there\n    --  is no problem, since the result always is in range of integer. For\n    --  input arguments, the expander has to do some special casing to deal\n-   --  with the (very annoying!) cases of out of range values. If we used\n+   --  with the (very annoying) cases of out of range values. If we used\n    --  Long_Long_Integer to represent universal, then there would be no\n    --  problem, but the resulting inefficiency would be annoying.\n "}, {"sha": "01313a09cff206692725347e7643fc143728d298", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -348,7 +348,7 @@ package body System.File_IO is\n \n          --  Now unlink the external file. Note that we use the full name in\n          --  this unlink, because the working directory may have changed since\n-         --  we did the open, and we want to unlink the right file!\n+         --  we did the open, and we want to unlink the right file.\n \n          if unlink (Filename'Address) = -1 then\n             raise Use_Error with Errno_Message;\n@@ -492,7 +492,7 @@ package body System.File_IO is\n    --  initial call will be made by the caller to first open the file in \"r\"\n    --  mode to be sure that it exists. The real open, in \"w\" mode, will then\n    --  destroy this file. This is peculiar, but that's what Ada semantics\n-   --  require and the ACATS tests insist on!\n+   --  require and the ACATS tests insist on.\n \n    --  If text file translation is required, then either \"b\" or \"t\" is appended\n    --  to the mode, depending on the setting of Text.\n@@ -1238,7 +1238,7 @@ package body System.File_IO is\n \n             --  Note: for a corresponding delete, we will use the full name,\n             --  since by the time of the delete, the current working directory\n-            --  may have changed and we do not want to delete a different file!\n+            --  may have changed and we do not want to delete a different file.\n \n             if VMS_Formstr = null then\n                Stream := fopen (Namestr'Address, Fopstr'Address, Encoding,"}, {"sha": "bd60dc2d70b5d6efe23bc9103f3c3573111f97da", "filename": "gcc/ada/s-imgcha.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-imgcha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-imgcha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgcha.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -134,7 +134,7 @@ package body System.Img_Char is\n \n          --  Special case, res means RESERVED_nnn where nnn is the three digit\n          --  decimal value corresponding to the code position (more efficient\n-         --  to compute than to store!)\n+         --  to compute than to store).\n \n          else\n             declare"}, {"sha": "fcfd107dd0327f6fb2a38bec6f4dcc4e471bbb09", "filename": "gcc/ada/s-imgrea.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-imgrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-imgrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgrea.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -158,7 +158,7 @@ package body System.Img_Real is\n       Field_Max : constant := 255;\n       --  This should be the same value as Ada.[Wide_]Text_IO.Field'Last.\n       --  It is not worth dragging in Ada.Text_IO to pick up this value,\n-      --  since it really should never be necessary to change it!\n+      --  since it really should never be necessary to change it.\n \n       Digs : String (1 .. 2 * Field_Max + 16);\n       --  Array used to hold digits of converted integer value. This is a"}, {"sha": "dc51fa1771679fb4b0cf4f51b3d1a03e4ec2e3b9", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -844,7 +844,7 @@ package body System.OS_Lib is\n                      --  temp file names. Return Invalid_FD. There is almost\n                      --  no chance that this code will be ever be executed,\n                      --  since it would mean that there are one million temp\n-                     --  files in the same directory!\n+                     --  files in the same directory.\n \n                      SSL.Unlock_Task.all;\n                      FD := Invalid_FD;\n@@ -1718,7 +1718,7 @@ package body System.OS_Lib is\n \n                --  If argument is terminated by '\\', then double it. Otherwise\n                --  the ending quote will be taken as-is. This is quite strange\n-               --  spawn behavior from Windows, but this is what we see!\n+               --  spawn behavior from Windows, but this is what we see.\n \n                else\n                   if Res (J) = '\\' then"}, {"sha": "d32bb03f06d1c85573f8eddd724b09d57aae84ec", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2556,7 +2556,7 @@ package body System.Regpat is\n             case Op is\n                when EOP =>\n                   Dump_Indent := Dump_Indent - 1;\n-                  return True;  --  Success !\n+                  return True;  --  Success\n \n                when BRANCH =>\n                   if Program (Next) /= BRANCH then"}, {"sha": "e883721e3096572bd36e9af90c3192a3fef99096", "filename": "gcc/ada/s-secsta.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -161,7 +161,7 @@ package body System.Secondary_Stack is\n    --  Well it is not quite true that we never allocate an object of the\n    --  type. This dummy object is allocated for the purpose of getting the\n    --  offset of the Mem field via the 'Position attribute (such a nuisance\n-   --  that we cannot apply this to a field of a type!)\n+   --  that we cannot apply this to a field of a type).\n \n    type Fixed_Stack_Ptr is access Fixed_Stack_Id;\n    --  Pointer to record used to describe statically allocated sec stack"}, {"sha": "b1c061809392c165ab4d291256cb152373b746c2", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -87,7 +87,7 @@ package System.Standard_Library is\n \n    --  The following record defines the underlying representation of exceptions\n \n-   --  WARNING! Any changes to this may need to be reflected in the following\n+   --  WARNING: Any changes to this may need to be reflected in the following\n    --  locations in the compiler and runtime code:\n \n    --    1. The Internal_Exception routine in s-exctab.adb"}, {"sha": "bce3e3f391a487822b5574d62104d37eb4707935", "filename": "gcc/ada/s-stchop.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-stchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-stchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stchop.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -180,7 +180,7 @@ package body System.Stack_Checking.Operations is\n          raise Standard'Abort_Signal;\n       end if;\n \n-      --  Never trust the cached value, but return local copy!\n+      --  Never trust the cached value, but return local copy\n \n       return My_Stack;\n    end Set_Stack_Info;\n@@ -233,7 +233,7 @@ package body System.Stack_Checking.Operations is\n       declare\n          My_Stack : constant Stack_Access := Set_Stack_Info (Cache'Access);\n          --  At this point Stack.all might already be invalid, so\n-         --  it is essential to use our local copy of Stack!\n+         --  it is essential to use our local copy of Stack.\n \n       begin\n          if (Stack_Grows_Down and then"}, {"sha": "132482b7502dc223136d993b505a91970cdd9ebc", "filename": "gcc/ada/s-stoele.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-stoele.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-stoele.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stoele.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2002-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2002-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -35,7 +35,7 @@\n \n --  Warning: declarations in this package are ambiguous with respect to the\n --  extra declarations that can be introduced into System using Extend_System.\n---  It is a good idea to avoid use clauses for this package!\n+--  It is a good idea to avoid use clauses for this package.\n \n pragma Compiler_Unit;\n "}, {"sha": "1d8797913e8eb2c7a11c3ff8bdd62a2c3b91407b", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2013, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1125,7 +1125,7 @@ package body System.Task_Primitives.Operations is\n    --  on the Real_Time clock. That is technically incorrect, if the Calendar\n    --  clock happens to be reset or adjusted. To solve this defect will require\n    --  modification to the compiler interface, so that it can pass through more\n-   --  information, to tell us here which clock to use!\n+   --  information, to tell us here which clock to use.\n \n    --  cond_timedwait will return if any of the following happens:\n    --  1) some other task did cond_signal on this condition variable"}, {"sha": "6c9ae75e332b50376a132f9f3ad8eec8cd3d7c1e", "filename": "gcc/ada/s-tasdeb-vms.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-tasdeb-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-tasdeb-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb-vms.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 2008-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1248,10 +1248,10 @@ package body System.Tasking.Debug is\n    is\n       Task_Value : Task_Id;\n       Task_Index : constant Integer := Integer (Event_Value) - 1;\n-   begin\n \n+   begin\n       --  At least one event enabled, any and all events will cause a\n-      --  condition to be raised and checked. Major tasking slowdown!\n+      --  condition to be raised and checked. Major tasking slowdown.\n \n       Global_Task_Debug_Event_Set := True;\n       Events_Enabled_Count := Events_Enabled_Count + 1;\n@@ -1284,8 +1284,8 @@ package body System.Tasking.Debug is\n        Event_Entry : out Unsigned_Longword;\n        Status      : out Cond_Value_Type)\n    is\n-      K_SUCCESS        : constant := 1;\n-      K_NO_SUCH_EVENT  : constant := 9;\n+      K_SUCCESS       : constant := 1;\n+      K_NO_SUCH_EVENT : constant := 9;\n \n    begin\n       Trace_Output (\"Looking for Event: \");\n@@ -1313,8 +1313,8 @@ package body System.Tasking.Debug is\n        Event_Entry : out Unsigned_Longword;\n        Status      : out Cond_Value_Type)\n    is\n-      K_SUCCESS        : constant := 1;\n-      K_NO_SUCH_EVENT  : constant := 9;\n+      K_SUCCESS       : constant := 1;\n+      K_NO_SUCH_EVENT : constant := 9;\n \n       Event_Name_Cstr : constant ASCIC := To_AASCIC (Event_Name).all;\n    begin\n@@ -1384,7 +1384,7 @@ package body System.Tasking.Debug is\n                   Task_Image : ASCIC :=\n                    (Entry_Call.Self.Common.Task_Image_Len,\n                     Entry_Call.Self.Common.Task_Image\n-                     (1 .. Entry_Call.Self.Common.Task_Image_Len));\n+                      (1 .. Entry_Call.Self.Common.Task_Image_Len));\n                begin\n                   Print_Routine (Print_FAO, Print_Newline,\n                     To_UL (DoAC (\"              %TASK !UI, type: !AC\")),"}, {"sha": "27bf9398151804f18568090764f972bd45aec95d", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2011, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2013, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -598,7 +598,7 @@ package body System.Tasking.Initialization is\n    -- Undefer_Abort --\n    -------------------\n \n-   --  Precondition : Self does not hold any locks!\n+   --  Precondition : Self does not hold any locks\n \n    --  Undefer_Abort is called on any abort completion point (aka.\n    --  synchronization point). It performs the following actions if they"}, {"sha": "79669584b4c5d7377d7a3b1d3a588f931b121845", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -459,7 +459,7 @@ package body System.Tasking.Stages is\n \n       Vulnerable_Complete_Task (Self_ID);\n \n-      --  All of our dependents have terminated. Never undefer abort again!\n+      --  All of our dependents have terminated, never undefer abort again\n \n    end Complete_Task;\n \n@@ -829,7 +829,7 @@ package body System.Tasking.Stages is\n \n          Initialization.Defer_Abort_Nestable (Self_ID);\n \n-         --  Never undefer again!!!\n+         --  Never undefer again\n       end if;\n \n       --  This code is only executed by the environment task\n@@ -1394,7 +1394,7 @@ package body System.Tasking.Stages is\n    --  unlocking, after which the parent was observed to race ahead, deallocate\n    --  the ATCB, and then reallocate it to another task. The call to\n    --  Undefer_Abort in Task_Unlock by the \"terminated\" task was overwriting\n-   --  the data of the new task that reused the ATCB! To solve this problem, we\n+   --  the data of the new task that reused the ATCB. To solve this problem, we\n    --  introduced the new operation Final_Task_Unlock.\n \n    procedure Terminate_Task (Self_ID : Task_Id) is"}, {"sha": "ecd76821caeaefe4a1f660ec09b3ea92d07d0918", "filename": "gcc/ada/s-valdec.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-valdec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-valdec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valdec.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,7 +40,7 @@ package body System.Val_Dec is\n    --  For decimal types where Size < Integer'Size, it is fine to use\n    --  the floating-point circuit, since it certainly has sufficient\n    --  precision for any reasonable hardware, and we just don't support\n-   --  things on junk hardware!\n+   --  things on junk hardware.\n \n    function Scan_Decimal\n      (Str   : String;"}, {"sha": "6d6b827a79cf0a5ae6467622d96d919e467205e6", "filename": "gcc/ada/s-valuti.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -222,7 +222,7 @@ package body System.Val_Util is\n       P : Natural := Ptr.all;\n \n    begin\n-      --  Deal with case of null string (all blanks!). As per spec, we raise\n+      --  Deal with case of null string (all blanks). As per spec, we raise\n       --  constraint error, with Ptr unchanged, and thus > Max.\n \n       if P > Max then"}, {"sha": "73282796c8e4e05aababa6ad32c923d346eeb52d", "filename": "gcc/ada/s-wchjis.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-wchjis.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-wchjis.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchjis.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -118,7 +118,7 @@ package body System.WCh_JIS is\n \n    begin\n       --  The following is the required algorithm, it's hard to make any\n-      --  more intelligent comments! This was copied from a public domain\n+      --  more intelligent comments. This was copied from a public domain\n       --  C program called etos.c (author unknown).\n \n       JIS1 := Byte (Natural (Wide_Character'Pos (J) / 256));\n@@ -154,7 +154,7 @@ package body System.WCh_JIS is\n \n    begin\n       --  The following is the required algorithm, it's hard to make any\n-      --  more intelligent comments! This was copied from a public domain\n+      --  more intelligent comments. This was copied from a public domain\n       --  C program called stoj.c written by shige@csk.JUNET.\n \n       SJIS1 := Character'Pos (SJ1);"}, {"sha": "895221e88dcf8fa388cb292f630fdc3c3bbc7f99", "filename": "gcc/ada/s-wchwts.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-wchwts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fs-wchwts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchwts.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,7 +86,7 @@ package body System.WCh_WtS is\n      (S  : Wide_String;\n       EM : WC_Encoding_Method) return String\n    is\n-      R  : String (S'First .. S'First + 5 * S'Length); -- worst case length!\n+      R  : String (S'First .. S'First + 5 * S'Length); -- worst case length\n       RP : Natural;\n \n    begin\n@@ -106,7 +106,7 @@ package body System.WCh_WtS is\n      (S  : Wide_Wide_String;\n       EM : WC_Encoding_Method) return String\n    is\n-      R  : String (S'First .. S'First + 7 * S'Length); -- worst case length!\n+      R  : String (S'First .. S'First + 7 * S'Length); -- worst case length\n       RP : Natural;\n \n    begin"}, {"sha": "121ab11a8fdd139702e7c35a55119b31ed1c84eb", "filename": "gcc/ada/scans.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fscans.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fscans.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -51,7 +51,7 @@ package body Scans is\n          --  Set up Token_Type values in Names table entries for reserved\n          --  words. We use the Pos value of the Token_Type value. Note that\n          --  Is_Keyword_Name relies on the fact that Token_Type'Val (0) is not\n-         --  a reserved word!\n+         --  a reserved word.\n \n          Set_Name_Table_Byte (N, Token_Type'Pos (T));\n       end Set_Reserved;"}, {"sha": "f8377f4bb5ce2d50de7bd73db8af118e2ecd249a", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -429,7 +429,7 @@ package body Scng is\n       procedure Error_Illegal_Wide_Character;\n       --  Give illegal wide character message. On return, Scan_Ptr is bumped\n       --  past the illegal character, which may still leave us pointing to\n-      --  junk, not much we can do if the escape sequence is messed up!\n+      --  junk, not much we can do if the escape sequence is messed up.\n \n       procedure Error_No_Double_Underline;\n       --  Signal error of two underline or punctuation characters in a row.\n@@ -2511,7 +2511,7 @@ package body Scng is\n \n             --  Left bracket not followed by a quote terminates an identifier.\n             --  This is an error, but we don't want to give a junk error msg\n-            --  about wide characters in this case!\n+            --  about wide characters in this case.\n \n             elsif Source (Scan_Ptr) = '['\n               and then Source (Scan_Ptr + 1) /= '\"'"}, {"sha": "18365fc781c5b09374653098d51e1703c7ab0b9d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -761,7 +761,7 @@ package body Sem_Aggr is\n    begin\n       --  All the components of List are matched against Component and a count\n       --  is maintained of possible misspellings. When at the end of the the\n-      --  analysis there are one or two (not more!) possible misspellings,\n+      --  analysis there are one or two (not more) possible misspellings,\n       --  these misspellings will be suggested as possible correction.\n \n       Component_Elmt := First_Elmt (Elements);"}, {"sha": "b69c1b241a7dd5d112a724db79f44eeede25e701", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6183,7 +6183,7 @@ package body Sem_Attr is\n \n          --  Note, we need a range check in general, but we wait for the\n          --  Resolve call to do this, since we want to let Eval_Attribute\n-         --  have a chance to find an static illegality first!\n+         --  have a chance to find an static illegality first.\n       end Val;\n \n       -----------\n@@ -6726,7 +6726,7 @@ package body Sem_Attr is\n \n          --  Note that the whole point of the E_String_Literal_Subtype is to\n          --  avoid this construction of bounds, but the cases in which we\n-         --  have to materialize them are rare enough that we don't worry!\n+         --  have to materialize them are rare enough that we don't worry.\n \n          --  The low bound is simply the low bound of the base type. The\n          --  high bound is computed from the length of the string and this\n@@ -6776,7 +6776,7 @@ package body Sem_Attr is\n             end loop;\n \n             --  If no index type, get out (some other error occurred, and\n-            --  we don't have enough information to complete the job!)\n+            --  we don't have enough information to complete the job).\n \n             if No (Indx) then\n                Lo_Bound := Error;\n@@ -9075,7 +9075,7 @@ package body Sem_Attr is\n \n                         if J > 255 then\n \n-                           --  No need to compute this more than once!\n+                           --  No need to compute this more than once\n \n                            exit;\n \n@@ -10444,7 +10444,7 @@ package body Sem_Attr is\n          -----------------\n \n          --  Prefix must not be resolved in this case, since it is not a\n-         --  real entity reference. No action of any kind is require!\n+         --  real entity reference. No action of any kind is require.\n \n          when Attribute_UET_Address =>\n             return;\n@@ -10533,7 +10533,7 @@ package body Sem_Attr is\n \n             --  Eval_Attribute may replace the node with a raise CE, or\n             --  fold it to a constant. Obviously we only apply a scalar\n-            --  range check if this did not happen!\n+            --  range check if this did not happen.\n \n             if Nkind (N) = N_Attribute_Reference\n               and then Attribute_Name (N) = Name_Val"}, {"sha": "9aa7f4cac4ff8d97168ab47370beaf06768ef91a", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -977,7 +977,7 @@ package body Sem_Aux is\n       --  Otherwise we will look around to see if there is some other reason\n       --  for it to be limited, except that if an error was posted on the\n       --  entity, then just assume it is non-limited, because it can cause\n-      --  trouble to recurse into a murky erroneous entity!\n+      --  trouble to recurse into a murky erroneous entity.\n \n       elsif Error_Posted (Ent) then\n          return False;"}, {"sha": "47736565dd52d8b9a2623a22b37bf8e3c32f77c6", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1066,7 +1066,7 @@ package body Sem_Cat is\n       --  Note that the 10.2.1(9) restrictions are not relevant to us anyway.\n       --  We have to enforce them for RM compatibility, but we have no trouble\n       --  accepting these objects and doing the right thing. Note that there is\n-      --  no requirement that Preelaborate not actually generate any code!\n+      --  no requirement that Preelaborate not actually generate any code.\n \n       if In_Preelaborated_Unit\n         and then not Debug_Flag_PP"}, {"sha": "eac99c3ac8da44646207345ad542dec1129c06b2", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1171,7 +1171,7 @@ package body Sem_Ch10 is\n                Set_Elaboration_Entity_Required (Spec_Id, False);\n \n             --  Case of elaboration entity is required for access before\n-            --  elaboration checking (so certainly we must build it!)\n+            --  elaboration checking (so certainly we must build it).\n \n             else\n                Set_Elaboration_Entity_Required (Spec_Id, True);"}, {"sha": "4ddfdc56220a0def6860a17803727f79789be740", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -98,7 +98,7 @@ package body Sem_Ch12 is\n    --  tree and the copy, in order to recognize non-local references within\n    --  the generic, and propagate them to each instance (recall that name\n    --  resolution is done on the generic declaration: generics are not really\n-   --  macros!). This is summarized in the following diagram:\n+   --  macros). This is summarized in the following diagram:\n \n    --              .-----------.               .----------.\n    --              |  semantic |<--------------|  generic |\n@@ -6773,7 +6773,7 @@ package body Sem_Ch12 is\n       --  If the node is a compilation unit, it is the subunit of a stub, which\n       --  has been loaded already (see code below). In this case, the library\n       --  unit field of N points to the parent unit (which is a compilation\n-      --  unit) and need not (and cannot!) be copied.\n+      --  unit) and need not (and cannot) be copied.\n \n       --  When the proper body of the stub is analyzed, the library_unit link\n       --  is used to establish the proper context (see sem_ch10)."}, {"sha": "6540bbf0400d59f88492cf1ff89a19aaf1e0ac51", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -4804,7 +4804,7 @@ package body Sem_Ch13 is\n          begin\n             if Is_Task_Type (U_Ent) then\n \n-               --  Check obsolescent (but never obsolescent if from aspect!)\n+               --  Check obsolescent (but never obsolescent if from aspect)\n \n                if not From_Aspect_Specification (N) then\n                   Check_Restriction (No_Obsolescent_Features, N);\n@@ -5392,7 +5392,7 @@ package body Sem_Ch13 is\n          end;\n       end if;\n \n-      --  We repeat the too late test in case it froze itself!\n+      --  We repeat the too late test in case it froze itself\n \n       if Rep_Item_Too_Late (Enumtype, N) then\n          null;\n@@ -6795,7 +6795,7 @@ package body Sem_Ch13 is\n \n                --  Build the body, we declare the boolean expression before\n                --  doing the return, because we are not really confident of\n-               --  what happens if a return appears within a return!\n+               --  what happens if a return appears within a return.\n \n                BTemp :=\n                  Make_Defining_Identifier (Loc,\n@@ -9602,10 +9602,10 @@ package body Sem_Ch13 is\n                --  on the modified variant part, since its only effect would be\n                --  to compute the Others_Discrete_Choices node laboriously, and\n                --  of course we already know the list of choices corresponding\n-               --  to the others choice (it's the list we're replacing!)\n+               --  to the others choice (it's the list we're replacing).\n \n                --  We only want to do this if the expander is active, since\n-               --  we do not want to clobber the ASIS tree!\n+               --  we do not want to clobber the ASIS tree.\n \n                if Expander_Active then\n                   declare\n@@ -11226,7 +11226,7 @@ package body Sem_Ch13 is\n \n       --  If we are dealing with private types, then do the check on their\n       --  fully declared counterparts if the full declarations have been\n-      --  encountered (they don't have to be visible, but they must exist!)\n+      --  encountered (they don't have to be visible, but they must exist).\n \n       Source := Ancestor_Subtype (Etype (First_Formal (Act_Unit)));\n "}, {"sha": "edf106ad3ffaf6d14a190edb851611498805367a", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -306,7 +306,7 @@ package Sem_Ch13 is\n    --  in these two expressions are the same, by seeing if the two expressions\n    --  are fully conformant, and if not, issue appropriate error messages.\n \n-   --  Quite an awkward approach, but this is an awkard requirement!\n+   --  Quite an awkward approach, but this is an awkard requirement\n \n    procedure Analyze_Aspects_At_Freeze_Point (E : Entity_Id);\n    --  Analyze all the delayed aspects for entity E at freezing point. This"}, {"sha": "817ccb58fbad48a526bcd98ddc4e67a879a3b917", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -3877,7 +3877,7 @@ package body Sem_Ch3 is\n \n          --  If not library level entity, then indicate we don't know max\n          --  tasks and also check task hierarchy restriction and blocking\n-         --  operation (since starting a task is definitely blocking!)\n+         --  operation (since starting a task is definitely blocking).\n \n          else\n             Check_Restriction (Max_Tasks, N);\n@@ -4742,7 +4742,7 @@ package body Sem_Ch3 is\n       --  record.\n \n       elsif Ekind (Scope (Id)) /= E_Protected_Type\n-        and then Present (Scope (Scope (Id))) -- error defense!\n+        and then Present (Scope (Scope (Id))) -- error defense\n         and then Ekind (Scope (Scope (Id))) /= E_Protected_Type\n       then\n          Conditional_Delay (Id, T);\n@@ -9145,8 +9145,8 @@ package body Sem_Ch3 is\n       --  be unanalyzed at this point? and if it is, what business do we\n       --  have messing around with it? and why is the base type of the\n       --  parent type the right type for the resolution. It probably is\n-      --  not! It is OK for the new bound we are creating, but not for\n-      --  the old one??? Still if it never happens, no problem!\n+      --  not. It is OK for the new bound we are creating, but not for\n+      --  the old one??? Still if it never happens, no problem.\n \n       Analyze_And_Resolve (Bound, Base_Type (Par_T));\n \n@@ -10680,7 +10680,7 @@ package body Sem_Ch3 is\n       Set_Is_Itype         (Full);\n \n       --  A subtype of a private-type-without-discriminants, whose full-view\n-      --  has discriminants with default expressions, is not constrained!\n+      --  has discriminants with default expressions, is not constrained.\n \n       if not Has_Discriminants (Priv) then\n          Set_Is_Constrained (Full, Is_Constrained (Full_Base));\n@@ -12066,7 +12066,7 @@ package body Sem_Ch3 is\n       procedure Fixup_Bad_Constraint;\n       --  This is called after finding a bad constraint, and after having\n       --  posted an appropriate error message. The mission is to leave the\n-      --  entity T in as reasonable state as possible!\n+      --  entity T in as reasonable state as possible.\n \n       --------------------------\n       -- Fixup_Bad_Constraint --\n@@ -12241,7 +12241,7 @@ package body Sem_Ch3 is\n \n          --  Check that digits value is in range. Obviously we can do this\n          --  at compile time, but it is strictly a runtime check, and of\n-         --  course there is an ACVC test that checks this!\n+         --  course there is an ACVC test that checks this.\n \n          if Digits_Value (Def_Id) > Digits_Value (T) then\n             Error_Msg_Uint_1 := Digits_Value (T);\n@@ -12468,7 +12468,7 @@ package body Sem_Ch3 is\n \n          --  Check that delta value is in range. Obviously we can do this\n          --  at compile time, but it is strictly a runtime check, and of\n-         --  course there is an ACVC test that checks this!\n+         --  course there is an ACVC test that checks this.\n \n          if Delta_Value (Def_Id) < Delta_Value (T) then\n             Error_Msg_N (\"??delta value is too small\", D);\n@@ -12844,7 +12844,7 @@ package body Sem_Ch3 is\n          --  Set the parent so we have a proper link for freezing etc. This is\n          --  not a real parent pointer, since of course our parent does not own\n          --  up to us and reference us, we are an illegitimate child of the\n-         --  original parent!\n+         --  original parent.\n \n          Set_Parent (New_Compon, Parent (Old_Compon));\n \n@@ -17345,7 +17345,7 @@ package body Sem_Ch3 is\n \n    begin\n       --  If the mod expression is (exactly) 2 * literal, where literal is\n-      --  64 or less,then almost certainly the * was meant to be **. Warn!\n+      --  64 or less,then almost certainly the * was meant to be **. Warn.\n \n       if Warn_On_Suspicious_Modulus_Value\n         and then Nkind (Mod_Expr) = N_Op_Multiply\n@@ -17391,7 +17391,7 @@ package body Sem_Ch3 is\n \n       --  Properly analyze the literals for the range. We do this manually\n       --  because we can't go calling Resolve, since we are resolving these\n-      --  bounds with the type, and this type is certainly not complete yet!\n+      --  bounds with the type, and this type is certainly not complete yet.\n \n       Set_Etype (Low_Bound  (Scalar_Range (T)), T);\n       Set_Etype (High_Bound (Scalar_Range (T)), T);"}, {"sha": "86c492566c18de54b14b65c0e2e0ac615959d6f1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -589,8 +589,8 @@ package body Sem_Ch4 is\n                                N_Index_Or_Discriminant_Constraint\n                   then\n                      Error_Msg_N -- CODEFIX\n-                       (\"if qualified expression was meant, \" &\n-                           \"use apostrophe!\", Constraint (E));\n+                       (\"if qualified expression was meant, \"\n+                        & \"use apostrophe!\", Constraint (E));\n                   end if;\n \n                   E := New_Occurrence_Of (Def_Id, Loc);\n@@ -1247,33 +1247,33 @@ package body Sem_Ch4 is\n \n                   if Is_Signed_Integer_Type (Typ) then\n                      Error_Msg_N\n-                       (\"possible missing instantiation of \" &\n-                          \"'Text_'I'O.'Integer_'I'O!\", Nam);\n+                       (\"possible missing instantiation of \"\n+                        & \"'Text_'I'O.'Integer_'I'O!\", Nam);\n \n                   elsif Is_Modular_Integer_Type (Typ) then\n                      Error_Msg_N\n-                       (\"possible missing instantiation of \" &\n-                          \"'Text_'I'O.'Modular_'I'O!\", Nam);\n+                       (\"possible missing instantiation of \"\n+                        & \"'Text_'I'O.'Modular_'I'O!\", Nam);\n \n                   elsif Is_Floating_Point_Type (Typ) then\n                      Error_Msg_N\n-                       (\"possible missing instantiation of \" &\n-                          \"'Text_'I'O.'Float_'I'O!\", Nam);\n+                       (\"possible missing instantiation of \"\n+                        & \"'Text_'I'O.'Float_'I'O!\", Nam);\n \n                   elsif Is_Ordinary_Fixed_Point_Type (Typ) then\n                      Error_Msg_N\n-                       (\"possible missing instantiation of \" &\n-                          \"'Text_'I'O.'Fixed_'I'O!\", Nam);\n+                       (\"possible missing instantiation of \"\n+                        & \"'Text_'I'O.'Fixed_'I'O!\", Nam);\n \n                   elsif Is_Decimal_Fixed_Point_Type (Typ) then\n                      Error_Msg_N\n-                       (\"possible missing instantiation of \" &\n-                          \"'Text_'I'O.'Decimal_'I'O!\", Nam);\n+                       (\"possible missing instantiation of \"\n+                        & \"'Text_'I'O.'Decimal_'I'O!\", Nam);\n \n                   elsif Is_Enumeration_Type (Typ) then\n                      Error_Msg_N\n-                       (\"possible missing instantiation of \" &\n-                          \"'Text_'I'O.'Enumeration_'I'O!\", Nam);\n+                       (\"possible missing instantiation of \"\n+                        & \"'Text_'I'O.'Enumeration_'I'O!\", Nam);\n                   end if;\n                end;\n             end if;\n@@ -3273,9 +3273,9 @@ package body Sem_Ch4 is\n                                   Defining_Identifier\n                                     (Associated_Node_For_Itype (Nam));\n                            begin\n-                              Error_Msg_NE (\n-                                \"\\\\  =='> in call to dereference of &#!\",\n-                                Actual, Access_To_Subprogram_Typ);\n+                              Error_Msg_NE\n+                                (\"\\\\  =='> in call to dereference of &#!\",\n+                                 Actual, Access_To_Subprogram_Typ);\n                            end;\n \n                         else\n@@ -5347,7 +5347,7 @@ package body Sem_Ch4 is\n    begin\n       --  All the components of the prefix of selector Sel are matched against\n       --  Sel and a count is maintained of possible misspellings. When at\n-      --  the end of the analysis there are one or two (not more!) possible\n+      --  the end of the analysis there are one or two (not more) possible\n       --  misspellings, these misspellings will be suggested as possible\n       --  correction.\n "}, {"sha": "a7cf878b33fed9a95c0c3db9d7491904ef506ca2", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -180,7 +180,7 @@ package body Sem_Ch5 is\n             end if;\n \n          else\n-            --  If we fall through, we have no special message to issue!\n+            --  If we fall through, we have no special message to issue\n \n             Error_Msg_N (\"left hand side of assignment must be a variable\", N);\n          end if;\n@@ -2865,7 +2865,7 @@ package body Sem_Ch5 is\n    ----------------------------\n \n    --  Note: the semantics of the null statement is implemented by a single\n-   --  null statement, too bad everything isn't as simple as this!\n+   --  null statement, too bad everything isn't as simple as this.\n \n    procedure Analyze_Null_Statement (N : Node_Id) is\n       pragma Warnings (Off, N);\n@@ -2885,7 +2885,7 @@ package body Sem_Ch5 is\n       --  The labels declared in the statement list are reachable from\n       --  statements in the list. We do this as a prepass so that any goto\n       --  statement will be properly flagged if its target is not reachable.\n-      --  This is not required, but is nice behavior!\n+      --  This is not required, but is nice behavior.\n \n       S := First (L);\n       while Present (S) loop\n@@ -2989,7 +2989,7 @@ package body Sem_Ch5 is\n             then\n                --  Special very annoying exception. If we have a return that\n                --  follows a raise, then we allow it without a warning, since\n-               --  the Ada RM annoyingly requires a useless return here!\n+               --  the Ada RM annoyingly requires a useless return here.\n \n                if Nkind (Original_Node (N)) /= N_Raise_Statement\n                  or else Nkind (Nxt) /= N_Simple_Return_Statement"}, {"sha": "a6054ab86dbafc218a203046b3741d68a6b09054", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -3362,7 +3362,7 @@ package body Sem_Ch6 is\n \n       --  Here the purpose of X is simply to satisfy the annoying requirement\n       --  in Ada that there be at least one return, and we certainly do not\n-      --  want to go posting warnings on X that it is not initialized! On\n+      --  want to go posting warnings on X that it is not initialized. On\n       --  the other hand, if X is entirely unreferenced that should still\n       --  get a warning.\n \n@@ -4541,7 +4541,7 @@ package body Sem_Ch6 is\n \n             --  Emit a warning if this is a call to a runtime subprogram\n             --  which is located inside a generic. Previously this call\n-            --  was silently skipped!\n+            --  was silently skipped.\n \n             if Is_Generic_Instance (Subp) then\n                declare\n@@ -5284,7 +5284,7 @@ package body Sem_Ch6 is\n          --  Compiling with optimizations enabled\n \n          else\n-            --  Procedures are never frontend inlined in this case!\n+            --  Procedures are never frontend inlined in this case\n \n             if Ekind (Subp) /= E_Function then\n                return False;\n@@ -5671,7 +5671,7 @@ package body Sem_Ch6 is\n          end;\n       end if;\n \n-      --  Build the body to inline only if really needed!\n+      --  Build the body to inline only if really needed\n \n       if Check_Body_To_Inline (N, Spec_Id)\n         and then Serious_Errors_Detected = 0\n@@ -5881,7 +5881,7 @@ package body Sem_Ch6 is\n       --  Note: we use the entity information, rather than going directly\n       --  to the specification in the tree. This is not only simpler, but\n       --  absolutely necessary for some cases of conformance tests between\n-      --  operators, where the declaration tree simply does not exist!\n+      --  operators, where the declaration tree simply does not exist.\n \n       Old_Formal := First_Formal (Old_Id);\n       New_Formal := First_Formal (New_Id);\n@@ -7230,7 +7230,7 @@ package body Sem_Ch6 is\n                --  Note: if both ECA and DCA are missing the return, then we\n                --  post only one message, should be enough to fix the bugs.\n                --  If not we will get a message next time on the DCA when the\n-               --  ECA is fixed!\n+               --  ECA is fixed.\n \n                elsif No (Statements (DCA)) then\n                   Last_Stm := DCA;\n@@ -8662,7 +8662,7 @@ package body Sem_Ch6 is\n          end if;\n \n          --  Compare two lists, skipping rewrite insertions (we want to compare\n-         --  the original trees, not the expanded versions!)\n+         --  the original trees, not the expanded versions).\n \n          loop\n             if Is_Rewrite_Insertion (N1) then\n@@ -8718,7 +8718,7 @@ package body Sem_Ch6 is\n    begin\n       --  Non-conformant if paren count does not match. Note: if some idiot\n       --  complains that we don't do this right for more than 3 levels of\n-      --  parentheses, they will be treated with the respect they deserve!\n+      --  parentheses, they will be treated with the respect they deserve.\n \n       if Paren_Count (E1) /= Paren_Count (E2) then\n          return False;\n@@ -11394,7 +11394,7 @@ package body Sem_Ch6 is\n             AS_Needed := False;\n \n          --  If we have unknown discriminants, then we do not need an actual\n-         --  subtype, or more accurately we cannot figure it out! Note that\n+         --  subtype, or more accurately we cannot figure it out. Note that\n          --  all class-wide types have unknown discriminants.\n \n          elsif Has_Unknown_Discriminants (T) then"}, {"sha": "8a77e4861d62826d9b500f30c5756aec6daed068", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -259,7 +259,7 @@ package body Sem_Ch8 is\n    --  of use clauses consists in setting this flag on all visible entities\n    --  defined in the corresponding package. On exit from the scope of the use\n    --  clause, the corresponding flag must be reset. However, a package may\n-   --  appear in several nested use clauses (pathological but legal, alas!)\n+   --  appear in several nested use clauses (pathological but legal, alas)\n    --  which forces us to use a slightly more involved scheme:\n \n    --    a) The defining occurrence for a package holds a flag -In_Use- to\n@@ -1197,7 +1197,7 @@ package body Sem_Ch8 is\n \n       --  Initialize the object size and alignment. Note that we used to call\n       --  Init_Size_Align here, but that's wrong for objects which have only\n-      --  an Esize, not an RM_Size field!\n+      --  an Esize, not an RM_Size field.\n \n       Init_Object_Size_Align (Id);\n \n@@ -3333,7 +3333,7 @@ package body Sem_Ch8 is\n       --  This procedure is called in the context of subprogram renaming, and\n       --  thus the attribute must be one that is a subprogram. All of those\n       --  have at least one formal parameter, with the exceptions of AST_Entry\n-      --  (which is a real oddity, it is odd that this can be renamed at all!)\n+      --  (which is a real oddity, it is odd that this can be renamed at all)\n       --  and the GNAT attribute 'Img, which GNAT treats as renameable.\n \n       if not Is_Non_Empty_List (Parameter_Specifications (Spec)) then\n@@ -4785,7 +4785,7 @@ package body Sem_Ch8 is\n       --  If no entries on homonym chain that were potentially visible,\n       --  and no entities reasonably considered as non-visible, then\n       --  we have a plain undefined reference, with no additional\n-      --  explanation required!\n+      --  explanation required.\n \n       if not Nvis_Entity then\n          Undefined (Nvis => False);\n@@ -5511,7 +5511,7 @@ package body Sem_Ch8 is\n \n                --  If this is a selection from a dummy package, then suppress\n                --  the error message, of course the entity is missing if the\n-               --  package is missing!\n+               --  package is missing.\n \n                elsif Sloc (Error_Msg_Node_2) = No_Location then\n                   null;"}, {"sha": "53aefc9ecbfec4b3d222735f7ef21b9932cb3561", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1118,11 +1118,11 @@ package body Sem_Disp is\n \n                               if Has_Dispatch_Table (Tagged_Type) then\n                                  Error_Msg_N\n-                                   (\"overriding of& is too late for building\" &\n-                                    \" static dispatch tables!\", Subp);\n+                                   (\"overriding of& is too late for building \"\n+                                    & \" static dispatch tables!\", Subp);\n                                  Error_Msg_N\n-                                   (\"\\spec should appear immediately after\" &\n-                                    \" the type!\", Subp);\n+                                   (\"\\spec should appear immediately after \"\n+                                    & \"the type!\", Subp);\n                               end if;\n \n                            --  No code required to register primitives in VM\n@@ -1576,7 +1576,7 @@ package body Sem_Disp is\n          if Derives_From (Node (Op1)) then\n             if No (Prev) then\n \n-               --  Avoid adding it to the list of primitives if already there!\n+               --  Avoid adding it to the list of primitives if already there\n \n                if Node (Op2) /= Subp then\n                   Prepend_Elmt (Subp, New_Prim);\n@@ -2250,7 +2250,7 @@ package body Sem_Disp is\n \n    begin\n       --  Diagnose failure to match No_Return in parent (Ada-2005, AI-414, but\n-      --  we do it unconditionally in Ada 95 now, since this is our pragma!)\n+      --  we do it unconditionally in Ada 95 now, since this is our pragma).\n \n       if No_Return (Prev_Op) and then not No_Return (New_Op) then\n          Error_Msg_N (\"procedure & must have No_Return pragma\", New_Op);"}, {"sha": "70fc33f01cd20f747dda25c81fc2e4ca7ae79980", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -976,7 +976,7 @@ package body Sem_Elab is\n                --  elaboration Boolean for the unit containing the entity.\n \n                --  Note that for this case, we do check the real unit (the one\n-               --  from following renamings, since that is the issue!)\n+               --  from following renamings, since that is the issue).\n \n                --  Could this possibly miss a useless but required PE???\n \n@@ -2043,7 +2043,7 @@ package body Sem_Elab is\n          --  we go in unconditionally. This is not so terrible, it means the\n          --  error backtrace is not quite complete, and we are too eager to\n          --  scan bodies of tasks that are unused, but this is hardly very\n-         --  significant!\n+         --  significant.\n \n          elsif Nkind (N) = N_Subprogram_Body\n            and then Comes_From_Source (N)"}, {"sha": "c8a07a97f0e15627efb7eac29c5cb89a5fcc1194", "filename": "gcc/ada/sem_elim.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_elim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_elim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elim.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -408,7 +408,7 @@ package body Sem_Elim is\n             end if;\n \n             --  If given entity is a library level subprogram and pragma had a\n-            --  single parameter, a match!\n+            --  single parameter, a match.\n \n             if Is_Compilation_Unit (E)\n               and then Is_Subprogram (E)"}, {"sha": "4d6902179879e9332736935544898724e47968af", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -758,7 +758,7 @@ package body Sem_Eval is\n       end if;\n \n       --  If either operand could raise constraint error, then we cannot\n-      --  know the result at compile time (since CE may be raised!)\n+      --  know the result at compile time (since CE may be raised).\n \n       if not (Cannot_Raise_Constraint_Error (L)\n                 and then\n@@ -1707,7 +1707,7 @@ package body Sem_Eval is\n    -- Eval_Character_Literal --\n    ----------------------------\n \n-   --  Nothing to be done!\n+   --  Nothing to be done\n \n    procedure Eval_Character_Literal (N : Node_Id) is\n       pragma Warnings (Off, N);\n@@ -2791,7 +2791,7 @@ package body Sem_Eval is\n       --  will be false because the lengths of one or more index subtypes are\n       --  compile time known and different, then we can replace the entire\n       --  result by False. We only do this for one dimensional arrays, because\n-      --  the case of multi-dimensional arrays is rare and too much trouble! If\n+      --  the case of multi-dimensional arrays is rare and too much trouble. If\n       --  one of the operands is an illegal aggregate, its type might still be\n       --  an arbitrary composite type, so nothing to do.\n \n@@ -3425,7 +3425,7 @@ package body Sem_Eval is\n             --  string literal is not marked as static (happens in some cases\n             --  of folding strings known at compile time, but not static).\n             --  Furthermore in such cases, we reword the message, since there\n-            --  is no string literal in the source program!\n+            --  is no string literal in the source program.\n \n             if Is_Static_Expression (N) then\n                Apply_Compile_Time_Constraint_Error\n@@ -5331,7 +5331,7 @@ package body Sem_Eval is\n          return In_Range;\n \n       --  Never known if not scalar type. Don't know if this can actually\n-      --  happen, but our spec allows it, so we must check!\n+      --  happen, but our spec allows it, so we must check.\n \n       elsif not Is_Scalar_Type (Typ) then\n          return Unknown;"}, {"sha": "a3f578d03450a37ca2b870f8f007c787850f5640", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -330,7 +330,7 @@ package body Sem_Intr is\n \n       --  We always allow intrinsic specifications in language defined units\n       --  and in expanded code. We assume that the GNAT implementors know what\n-      --  they are doing, and do not write or generate junk use of intrinsic!\n+      --  they are doing, and do not write or generate junk use of intrinsic.\n \n       elsif not Comes_From_Source (E)\n         or else not Comes_From_Source (N)"}, {"sha": "3837275990b5d8f097834f8464cf1dc526b61b37", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6053,7 +6053,7 @@ package body Sem_Prag is\n          D := Declaration_Node (E);\n          K := Nkind (D);\n \n-         --  Check duplicate before we chain ourselves!\n+         --  Check duplicate before we chain ourselves\n \n          Check_Duplicate_Pragma (E);\n \n@@ -6458,7 +6458,7 @@ package body Sem_Prag is\n             --  for an overridden dispatching operation. Technically this is\n             --  an amendment and should only be done in Ada 2005 mode. However,\n             --  this is clearly a mistake, since the problem that is addressed\n-            --  by this AI is that there is a clear gap in the RM!\n+            --  by this AI is that there is a clear gap in the RM.\n \n             if Is_Dispatching_Operation (E)\n               and then Present (Overridden_Operation (E))\n@@ -6490,7 +6490,7 @@ package body Sem_Prag is\n                   --  Note: make this unconditional so that if there is more\n                   --  than one call to which the pragma applies, we get a\n                   --  message for each call. Also don't use Error_Pragma,\n-                  --  so that we get multiple messages!\n+                  --  so that we get multiple messages.\n \n                   Error_Msg_N\n                     (\"dispatching subprogram# cannot use Stdcall convention!\",\n@@ -11486,7 +11486,7 @@ package body Sem_Prag is\n \n             --  If a giant value is given, Int'Last will do well enough.\n             --  If sometime someone complains that a record larger than\n-            --  two gigabytes is not copied, we will worry about it then!\n+            --  two gigabytes is not copied, we will worry about it then.\n \n             else\n                Default_C_Record_Mechanism := Mechanism_Type'Last;\n@@ -14513,7 +14513,7 @@ package body Sem_Prag is\n             D := Declaration_Node (E);\n             K := Nkind (D);\n \n-            --  Check duplicate before we chain ourselves!\n+            --  Check duplicate before we chain ourselves\n \n             Check_Duplicate_Pragma (E);\n \n@@ -14573,7 +14573,7 @@ package body Sem_Prag is\n \n             E := Entity (E_Id);\n \n-            --  Check duplicate before we chain ourselves!\n+            --  Check duplicate before we chain ourselves\n \n             Check_Duplicate_Pragma (E);\n \n@@ -17891,7 +17891,7 @@ package body Sem_Prag is\n             else\n                --  Check overlapping in the priority ranges specified in other\n                --  Priority_Specific_Dispatching pragmas within the same\n-               --  partition. We can only check those we know about!\n+               --  partition. We can only check those we know about.\n \n                for J in\n                   Specific_Dispatching.First .. Specific_Dispatching.Last\n@@ -25088,7 +25088,7 @@ package body Sem_Prag is\n                  Expression => Make_Identifier (Sloc (N), Name_All_Checks)))));\n       end if;\n \n-      --  Nothing else to do at the current time!\n+      --  Nothing else to do at the current time\n \n    end Process_Compilation_Unit_Pragmas;\n "}, {"sha": "be05a51ef9e6ace1df8f44156a40df6642486633", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2489,7 +2489,7 @@ package body Sem_Res is\n                      Name (N), Entity (Name (N)));\n \n                --  Otherwise give general message (not clear what cases this\n-               --  covers, but no harm in providing for them!)\n+               --  covers, but no harm in providing for them).\n \n                else\n                   Error_Msg_N (\"expect procedure name in procedure call\", N);\n@@ -3236,7 +3236,7 @@ package body Sem_Res is\n          else\n             --  Note that we do a full New_Copy_Tree, so that any associated\n             --  Itypes are properly copied. This may not be needed any more,\n-            --  but it does no harm as a safety measure! Defaults of a generic\n+            --  but it does no harm as a safety measure. Defaults of a generic\n             --  formal may be out of bounds of the corresponding actual (see\n             --  cc1311b) and an additional check may be required.\n \n@@ -3951,7 +3951,7 @@ package body Sem_Res is\n                --  Note: call Warn_On_Useless_Assignment before doing the check\n                --  below for Is_OK_Variable_For_Out_Formal so that the setting\n                --  of Referenced_As_LHS/Referenced_As_Out_Formal properly\n-               --  reflects the last assignment, not this one!\n+               --  reflects the last assignment, not this one.\n \n                if Ekind (F) = E_Out_Parameter then\n                   if Warn_On_Modified_As_Out_Parameter (F)\n@@ -9669,7 +9669,7 @@ package body Sem_Res is\n                   --  very few places that we place the flag in the middle of\n                   --  a token, right under the offending wide character. Not\n                   --  quite clear if this is right wrt wide character encoding\n-                  --  sequences, but it's only an error message!\n+                  --  sequences, but it's only an error message.\n \n                   Error_Msg\n                     (\"literal out of range of type Standard.Character\",\n@@ -11267,7 +11267,7 @@ package body Sem_Res is\n \n       --  Deal with conversion of integer type to address if the pragma\n       --  Allow_Integer_Address is in effect. We convert the conversion to\n-      --  an unchecked conversion in this case and we are all done!\n+      --  an unchecked conversion in this case and we are all done.\n \n       if Address_Integer_Convert_OK (Opnd_Type, Target_Type) then\n          Rewrite (N, Unchecked_Convert_To (Target_Type, Expression (N)));"}, {"sha": "86789ce20f4e4d8217bc88accbe333d03ef6eada", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1255,7 +1255,7 @@ package body Sem_Type is\n       then\n          return True;\n \n-      --  Otherwise, types are not compatible!\n+      --  Otherwise, types are not compatible\n \n       else\n          return False;"}, {"sha": "f5a13cda27c1baf79dac6520091d7a66813718fb", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -5314,13 +5314,13 @@ package body Sem_Util is\n \n             --  If entity is in standard, then we are in trouble, because it\n             --  means that we have a library package with a duplicated name.\n-            --  That's hard to recover from, so abort!\n+            --  That's hard to recover from, so abort.\n \n             if S = Standard_Standard then\n                raise Unrecoverable_Error;\n \n             --  Otherwise we continue with the declaration. Having two\n-            --  identical declarations should not cause us too much trouble!\n+            --  identical declarations should not cause us too much trouble.\n \n             else\n                null;\n@@ -9624,7 +9624,7 @@ package body Sem_Util is\n \n          --  An interesting case, if we have a constrained type one of whose\n          --  bounds is known to be null, then there are no elements to be\n-         --  initialized, so all the elements are initialized!\n+         --  initialized, so all the elements are initialized.\n \n          if Is_Constrained (Typ) then\n             declare\n@@ -9977,7 +9977,7 @@ package body Sem_Util is\n          --  If P is an LHS, then N is also effectively an LHS, but there\n          --  is an important exception. If N is of an access type, then\n          --  what we really have is N.all.Q (or N.all(Q .. R)). In either\n-         --  case this makes N.all a left hand side but not N itself!\n+         --  case this makes N.all a left hand side but not N itself.\n \n          --  Here follows a worrisome kludge. If Etype (N) is not set, which\n          --  for sure happens in the call from Find_Direct_Name, that means we\n@@ -13318,7 +13318,7 @@ package body Sem_Util is\n       --  need Report to be True, and also we do not report errors caused\n       --  by calls to init procs that occur within other init procs. Such\n       --  errors must always be cascaded errors, since if all the types are\n-      --  declared correctly, the compiler will certainly build decent calls!\n+      --  declared correctly, the compiler will certainly build decent calls.\n \n       -----------\n       -- Chain --"}, {"sha": "62423ea1a8c93692e333f9a87dd4a558997682f9", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -307,7 +307,7 @@ package body Sem_Warn is\n                return;\n \n             --  Forget it if function name is suspicious. A strange test\n-            --  but warning generation is in the heuristics business!\n+            --  but warning generation is in the heuristics business.\n \n             elsif Is_Suspicious_Function_Name (Entity (Name (N))) then\n                return;\n@@ -495,7 +495,7 @@ package body Sem_Warn is\n                      --  going on (perhaps a node with no parent that should\n                      --  have one but does not?) As always, for a warning we\n                      --  prefer to just abandon the warning than get into the\n-                     --  business of complaining about the tree structure here!\n+                     --  business of complaining about the tree structure here.\n \n                      if No (P)\n                        or else Nkind (P) = N_Procedure_Call_Statement\n@@ -1144,7 +1144,7 @@ package body Sem_Warn is\n                   --  No warning if fully initialized type, except that for\n                   --  this purpose we do not consider access types to qualify\n                   --  as fully initialized types (relying on an access type\n-                  --  variable being null when it is never set is a bit odd!)\n+                  --  variable being null when it is never set is a bit odd).\n \n                   --  Also we generate warning for an out parameter that is\n                   --  never referenced, since again it seems odd to rely on\n@@ -1507,7 +1507,7 @@ package body Sem_Warn is\n                and then Ekind (E1) /= E_Class_Wide_Type\n \n                --  Objects other than parameters of task types are allowed to\n-               --  be non-referenced, since they start up tasks!\n+               --  be non-referenced, since they start up tasks.\n \n                and then ((Ekind (E1) /= E_Variable\n                            and then Ekind (E1) /= E_Constant\n@@ -1768,7 +1768,7 @@ package body Sem_Warn is\n                   --  allow the reference to appear in a loop, block, or\n                   --  package spec that is nested within the declaring scope.\n                   --  As always, it is possible to construct cases where the\n-                  --  warning is wrong, that is why it is a warning!\n+                  --  warning is wrong, that is why it is a warning.\n \n                   Potential_Unset_Reference : declare\n                      SR : Entity_Id;\n@@ -2341,7 +2341,7 @@ package body Sem_Warn is\n                   end if;\n \n                --  If main unit is a renaming of this unit, then we consider\n-               --  the with to be OK (obviously it is needed in this case!)\n+               --  the with to be OK (obviously it is needed in this case).\n                --  This may be transitive: the unit in the with_clause may\n                --  itself be a renaming, in which case both it and the main\n                --  unit rename the same ultimate package.\n@@ -3004,7 +3004,7 @@ package body Sem_Warn is\n             E      : Node_Id renames Wentry.E;\n \n          begin\n-            --  Turn off Warnings_Off, or we won't get the warning!\n+            --  Turn off Warnings_Off, or we won't get the warning\n \n             Set_Warnings_Off (E, False);\n \n@@ -3632,7 +3632,7 @@ package body Sem_Warn is\n          --  Nothing to do if subscript does not come from source (we don't\n          --  want to give garbage warnings on compiler expanded code, e.g. the\n          --  loops generated for slice assignments. Such junk warnings would\n-         --  be placed on source constructs with no subscript in sight!)\n+         --  be placed on source constructs with no subscript in sight).\n \n          if not Comes_From_Source (Original_Node (X)) then\n             return;\n@@ -3730,7 +3730,7 @@ package body Sem_Warn is\n                      end if;\n \n                      --  If we have a 'Range reference, then this is a case\n-                     --  where we cannot easily give a replacement. Don't try!\n+                     --  where we cannot easily give a replacement. Don't try.\n \n                      if Tref (Sref .. Sref + 4) = \"range\"\n                        and then Tref (Sref - 1) < 'A'"}, {"sha": "a4a811d6bdb2e9756c861d6b40025a1e2357b0f5", "filename": "gcc/ada/set_targ.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fset_targ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fset_targ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fset_targ.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -607,7 +607,7 @@ begin\n \n          Buffer : String (1 .. 2000);\n          Buflen : Natural;\n-         --  File information and length (2000 easily enough!)\n+         --  File information and length (2000 easily enough)\n \n          Nam_Buf : String (1 .. 40);\n          Nam_Len : Natural;"}, {"sha": "d46f3150c9f9480556abf426a142a821bcfee5e5", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -1491,7 +1491,7 @@ package Sinfo is\n    --    that the reference occurs within a discriminant check. The\n    --    significance is that optimizations based on assuming that the\n    --    discriminant check has a correct value cannot be performed in this\n-   --    case (or the discriminant check may be optimized away!)\n+   --    case (or the discriminant check may be optimized away).\n \n    --  Is_Machine_Number (Flag11-Sem)\n    --    This flag is set in an N_Real_Literal node to indicate that the value\n@@ -2655,7 +2655,7 @@ package Sinfo is\n       --  appears directly in the tree as an attribute reference.\n \n       --  Note: the field name for a reference to a range is Range_Expression\n-      --  rather than Range, because range is a reserved keyword in Ada!\n+      --  rather than Range, because range is a reserved keyword in Ada.\n \n       --  Note: the reason that this node has expression fields is that a\n       --  range can appear as an operand of a membership test. The Etype\n@@ -4942,7 +4942,7 @@ package Sinfo is\n       -------------------------\n \n       --  This is an Ada 2012 extension, we put it here for now, to be labeled\n-      --  and put in its proper section when we know exactly where that is!\n+      --  and put in its proper section when we know exactly where that is.\n \n       --  EXPRESSION_FUNCTION ::=\n       --    FUNCTION SPECIFICATION IS (EXPRESSION)\n@@ -4965,7 +4965,7 @@ package Sinfo is\n       --  that it semantically resembles an expression, e.g. overloading is\n       --  allowed and a type is concocted for semantic processing purposes.\n       --  Certain of these fields, such as Parens are not relevant, but it\n-      --  is easier to just supply all of them together!\n+      --  is easier to just supply all of them together.\n \n       --  N_Procedure_Call_Statement\n       --  Sloc points to first token of name or prefix"}, {"sha": "06c501bef2549688129b6c435dae1e81d91107e2", "filename": "gcc/ada/sinput-c.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsinput-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsinput-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput-c.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -50,7 +50,7 @@ package body Sinput.C is\n       --  indicates failure to open the specified source file.\n \n       Len : Integer;\n-      --  Length of file. Assume no more than 2 gigabytes of source!\n+      --  Length of file (assume no more than 2 gigabytes of source)\n \n       Actual_Len : Integer;\n \n@@ -147,7 +147,7 @@ package body Sinput.C is\n       end;\n \n       --  Read is complete, close the file and we are done (no need to test\n-      --  status from close, since we have successfully read the file!)\n+      --  status from close, since we have successfully read the file).\n \n       Close (Source_File_FD);\n "}, {"sha": "ecbf42cb0995855fc1cc4d0943d1d85fe0084e99", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -52,7 +52,7 @@ package Snames is\n    --  cause a duplicate, then list it only once in this table, and adjust the\n    --  definition of the functions for testing for pragma names and attribute\n    --  names, and returning their ID values. Of course everything is simpler if\n-   --  no such duplications occur!\n+   --  no such duplications occur.\n \n    --  First we have the one character names used to optimize the lookup\n    --  process for one character identifiers (to avoid the hashing in this"}, {"sha": "1f88158ea643dbf056524a067d1eb52ebeb86745", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -2009,7 +2009,7 @@ package body Sprint is\n                Sprint_Node (Condition);\n                Write_Str_With_Col_Check (\" then \");\n \n-               --  Defense against junk here!\n+               --  Defense against junk here\n \n                if Present (Then_Expr) then\n                   Sprint_Node (Then_Expr);\n@@ -4007,7 +4007,7 @@ package body Sprint is\n               and then Defining_Entity (P) = Typ\n             then\n                --  We must set Itype_Printed true before the recursive call to\n-               --  print the node, otherwise we get an infinite recursion!\n+               --  print the node, otherwise we get an infinite recursion.\n \n                Set_Itype_Printed (Typ, True);\n "}, {"sha": "db43c59742dcf4d7e7f58c24e46c958ddfc3d229", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -153,7 +153,7 @@ package Stand is\n       S_RS,             -- 16#1E#\n       S_US,             -- 16#1F#\n \n-      --  Here are the ones for Colonel Whitaker's O26 keypunch!\n+      --  Here are the ones for Colonel Whitaker's O26 keypunch\n \n       S_Exclam,         -- 16#21#\n       S_Quotation,      -- 16#22#"}, {"sha": "0b7f94751507e01d899ed7f804fe98c68618c6ea", "filename": "gcc/ada/system-vms-ia64.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsystem-vms-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsystem-vms-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms-ia64.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -249,7 +249,7 @@ private\n    ADA_GNAT : constant Boolean := True;\n    pragma Export_Object (ADA_GNAT, \"ADA$GNAT\");\n    --  Ubiquitous global symbol identifying a GNAT compiled image to VMS Debug.\n-   --  Do not remove!\n+   --  Do not remove.\n \n    pragma Ident (\"GNAT\"); --  Gnat_Static_Version_String\n    --  Default ident for all VMS images."}, {"sha": "cc03c165968af6a99a8de29c05626e00054d7711", "filename": "gcc/ada/system-vms_64.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsystem-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsystem-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem-vms_64.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                (OpenVMS 64bit GCC_ZCX DEC Threads Version)               --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -144,6 +144,7 @@ private\n    Machine_Overflows         : constant Boolean := False;\n    Machine_Rounds            : constant Boolean := True;\n    OpenVMS                   : constant Boolean := True;\n+   VAX_Float                 : constant Boolean := False;\n    Preallocated_Stacks       : constant Boolean := False;\n    Signed_Zeros              : constant Boolean := True;\n    Stack_Check_Default       : constant Boolean := True;\n@@ -248,7 +249,7 @@ private\n    ADA_GNAT : constant Boolean := True;\n    pragma Export_Object (ADA_GNAT, \"ADA$GNAT\");\n    --  Ubiquitous global symbol identifying a GNAT compiled image to VMS Debug.\n-   --  Do not remove!\n+   --  Do not remove.\n \n    pragma Ident (\"GNAT\"); --  Gnat_Static_Version_String\n    --  Default ident for all VMS images."}, {"sha": "7f6f13b1a1e1c6fa59b0d0db48d884604345969c", "filename": "gcc/ada/system.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsystem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fsystem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsystem.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -7,7 +7,7 @@\n --                                 S p e c                                  --\n --                            (Compiler Version)                            --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -163,7 +163,7 @@ private\n    Use_Ada_Main_Program_Name : constant Boolean := False;\n    ZCX_By_Default            : constant Boolean := False;\n \n-   --  Obsolete entries, to be removed eventually (bootstrap issues!)\n+   --  Obsolete entries, to be removed eventually (bootstrap issues)\n \n    Front_End_ZCX_Support     : constant Boolean := False;\n    High_Integrity_Mode       : constant Boolean := False;"}, {"sha": "0bfc6e3dab3468d997416b8c0eada4af4011f1f8", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -51,7 +51,7 @@ package body Treepr is\n    use Atree.Unchecked_Access;\n    --  This module uses the unchecked access functions in package Atree\n    --  since it does an untyped traversal of the tree (we do not want to\n-   --  count on the structure of the tree being correct in this routine!)\n+   --  count on the structure of the tree being correct in this routine).\n \n    ----------------------------------\n    -- Approach Used for Tree Print --\n@@ -100,7 +100,7 @@ package body Treepr is\n    --  set proper node numbers in the hash table, and during the printing\n    --  phase to make sure that a given node is not printed more than once.\n    --  (nodes are printed in order during the printing phase, that's the\n-   --  point of numbering them in the first place!)\n+   --  point of numbering them in the first place).\n \n    Printing_Descendants : Boolean;\n    --  True if descendants are being printed, False if not. In the false case,\n@@ -1935,7 +1935,7 @@ package body Treepr is\n \n                --  If we successfully fall through all the above tests (which\n                --  execute a return if the node is not to be visited), we can\n-               --  go ahead and visit the node!\n+               --  go ahead and visit the node.\n \n                if No_Indent then\n                   Visit_Node (Nod, Prefix_Str, Prefix_Char);"}, {"sha": "58b343860f7ead8bc4c00d217e5ab194d349fb39", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -43,7 +43,7 @@\n --  Note: the declarations in this package reflect an expectation that the host\n --  machine has an efficient integer base type with a range at least 32 bits\n --  2s-complement. If there are any machines for which this is not a correct\n---  assumption, a significant number of changes will be required!\n+--  assumption, a significant number of changes will be required.\n \n with System;\n with Unchecked_Conversion;"}, {"sha": "f418b56ce9e030625dd7bb983fc73176d9dd3177", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1517,7 +1517,7 @@ package body Uintp is\n    --  possible, substituting Int arithmetic instead. See Knuth volume II,\n    --  Algorithm L (page 329).\n \n-   --  We use the same notation as Knuth (U_Hat standing for the obvious!)\n+   --  We use the same notation as Knuth (U_Hat standing for the obvious)\n \n    function UI_GCD (Uin, Vin : Uint) return Uint is\n       U, V : Uint;"}, {"sha": "e0a1e724db549eb64d534593ededf24a6e2f8c3b", "filename": "gcc/ada/uname.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Funame.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Funame.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Funame.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -241,7 +241,7 @@ package body Uname is\n \n                   --  Note: it is of course an error to have a defining\n                   --  operator symbol at this point, but this is not where\n-                  --  the error is signalled, so we handle it nicely here!\n+                  --  the error is signalled, so we handle it nicely here.\n \n                   Add_Name (Chars (Node));\n "}, {"sha": "83bdff6cd5d5aa99fc17ac3f3b6b83bbb86dd5f3", "filename": "gcc/ada/urealp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Furealp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Furealp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Furealp.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -38,7 +38,7 @@ package body Urealp is\n \n    Ureal_First_Entry : constant Ureal := Ureal'Succ (No_Ureal);\n    --  First subscript allocated in Ureal table (note that we can't just\n-   --  add 1 to No_Ureal, since \"+\" means something different for Ureals!\n+   --  add 1 to No_Ureal, since \"+\" means something different for Ureals).\n \n    type Ureal_Entry is record\n       Num  : Uint;"}, {"sha": "af8fd7793d85a9106c63b24b69f3260a1f17dbf5", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -122,8 +122,7 @@ begin\n \n    --  Individual lines for switches. Write_Switch_Char outputs fourteen\n    --  characters, so the remaining message is allowed to be a maximum\n-   --  of 65 characters to be comfortable on an 80 character device.\n-   --  If the Write_Str fits on one line, it is short enough!\n+   --  of 65 characters to be comfortable in an 80 character window.\n \n    --  Line for -gnata switch\n "}, {"sha": "b65ebc6acd6fa4252ba023a867c056f8ac5c185e", "filename": "gcc/ada/vxaddr2line.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fvxaddr2line.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90bd866a9726aa68ea89f83e84376d7098b0b2d/gcc%2Fada%2Fvxaddr2line.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvxaddr2line.adb?ref=a90bd866a9726aa68ea89f83e84376d7098b0b2d", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2002-2011, AdaCore                     --\n+--                     Copyright (C) 2002-2013, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -425,7 +425,7 @@ begin\n       Usage;\n    end if;\n \n-   --  ??? HARD LIMIT! There should be at most 501 arguments\n+   --  Enforce HARD LIMIT There should be at most 501 arguments. Why 501???\n \n    if Argument_Count > 501 then\n       Error (\"Too many backtrace frames\");"}]}