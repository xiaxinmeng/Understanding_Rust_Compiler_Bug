{"sha": "c5bc3df6db8b8b829899eac59223491d80ced9e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzViYzNkZjZkYjhiOGI4Mjk4OTllYWM1OTIyMzQ5MWQ4MGNlZDllNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-08-24T10:47:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-08-24T10:47:06Z"}, "message": "* Makefile.in (CFLAGS-collect2.o, CFLAGS-c-family/c-opts.o)\n\t(CFLAGS-c-family/c-pch.o, CFLAGS-prefix.o, CFLAGS-version.o)\n\t(CFLAGS-lto-compress.o, CFLAGS-toplev.o, CFLAGS-intl.o)\n\t(CFLAGS-cppbuiltin.o, CFLAGS-cppdefault.o): New.\n\t(collect2.o, c-family/c-cppbuiltin.o, c-family/c-opts.o)\n\t(c-family/c-pch.o, prefix.o, version.o, lto-compress.o, toplev.o)\n\t(intl.o, cppbuiltin.o, cppdefault.o): Remove explicit compilation\n\trules.\n\t(lto-wrapper$(exeext)): Use $(LINKER) not $(COMPILER).\n\nada:\n\t* gcc-interface/Make-lang.in (CFLAGS-ada/tracebak.o)\n\t(CFLAGS-ada/targext.o, CFLAGS-ada/cio.o, CFLAGS-ada/init.o)\n\t(CFLAGS-ada/initialize.o, CFLAGS-ada/raise.o): New.\n\t(ada/tracebak.o, ada/targext.o, ada/cio.o, ada/init.o)\n\t(ada/initialize.o, ada/raise.o): Remove explicit compilation rules.\n\nfortran:\n\t* Make-lang.in (fortran/cpp.o): Remove explicit compilation rule.\n\ngo:\n\t* Make-lang.in (CFLAGS-go/go-lang.o): New.\n\t(go/go-lang.o): Remove explicit compilation rule.\n\njava:\n\t* Make-lang.in (CFLAGS-java/jcf-io.o, CFLAGS-java/jcf-path.o):\n\tNew.\n\t(java/jcf-io.o, java/jcf-path.o): Remove explicit compilation\n\trules.\n\nFrom-SVN: r178030", "tree": {"sha": "972f62dc6c1c92832772760508122d315ba9c91f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972f62dc6c1c92832772760508122d315ba9c91f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5bc3df6db8b8b829899eac59223491d80ced9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bc3df6db8b8b829899eac59223491d80ced9e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5bc3df6db8b8b829899eac59223491d80ced9e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5bc3df6db8b8b829899eac59223491d80ced9e5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "295409e1ad57cb8739c7d9f76159ee81b8ea7501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295409e1ad57cb8739c7d9f76159ee81b8ea7501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/295409e1ad57cb8739c7d9f76159ee81b8ea7501"}], "stats": {"total": 118, "additions": 63, "deletions": 55}, "files": [{"sha": "07fca00723b0acbc2e22091a213c33dc10fde47e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -1,3 +1,15 @@\n+2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (CFLAGS-collect2.o, CFLAGS-c-family/c-opts.o)\n+\t(CFLAGS-c-family/c-pch.o, CFLAGS-prefix.o, CFLAGS-version.o)\n+\t(CFLAGS-lto-compress.o, CFLAGS-toplev.o, CFLAGS-intl.o)\n+\t(CFLAGS-cppbuiltin.o, CFLAGS-cppdefault.o): New.\n+\t(collect2.o, c-family/c-cppbuiltin.o, c-family/c-opts.o)\n+\t(c-family/c-pch.o, prefix.o, version.o, lto-compress.o, toplev.o)\n+\t(intl.o, cppbuiltin.o, cppdefault.o): Remove explicit compilation\n+\trules.\n+\t(lto-wrapper$(exeext)): Use $(LINKER) not $(COMPILER).\n+\n 2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (ALL_CXXFLAGS): Include $(CFLAGS-$@)."}, {"sha": "8679e7b961e8b9da45a9281f9823cbc9c917384a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -2052,12 +2052,11 @@ collect2$(exeext): $(COLLECT2_OBJS) $(LIBDEPS)\n \t\t$(COLLECT2_OBJS) $(LIBS) $(COLLECT2_LIBS)\n \tmv -f T$@ $@\n \n+CFLAGS-collect2.o += -DTARGET_MACHINE=\\\"$(target_noncanonical)\\\" \\\n+\t@TARGET_SYSTEM_ROOT_DEFINE@\n collect2.o : collect2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h \\\n \t$(OBSTACK_H) $(DEMANGLE_H) collect2.h collect2-aix.h version.h \\\n \t$(DIAGNOSTIC_H)\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS)  \\\n-\t-DTARGET_MACHINE=\\\"$(target_noncanonical)\\\" \\\n-\t-c $(srcdir)/collect2.c $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n collect2-aix.o : collect2-aix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     collect2-aix.h\n@@ -2066,7 +2065,7 @@ tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h\n     $(OBSTACK_H) collect2.h intl.h $(DIAGNOSTIC_CORE_H)\n \n lto-wrapper$(exeext): lto-wrapper.o $(LIBDEPS)\n-\t+$(COMPILER) $(ALL_COMPILERFLAGS) $(LDFLAGS) -o T$@ lto-wrapper.o $(LIBS)\n+\t+$(LINKER) $(ALL_COMPILERFLAGS) $(LDFLAGS) -o T$@ lto-wrapper.o $(LIBS)\n \tmv -f T$@ $@\n \n lto-wrapper.o: lto-wrapper.c $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h \\\n@@ -2088,8 +2087,6 @@ c-family/c-cppbuiltin.o : c-family/c-cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(TM_H) $(TREE_H) version.h $(C_COMMON_H) $(C_PRAGMA_H) \\\n \t$(FLAGS_H) output.h $(TREE_H) $(TARGET_H) $(COMMON_TARGET_H) \\\n \t$(TM_P_H) debug.h $(CPP_ID_DATA_H) cppbuiltin.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t\t$< $(OUTPUT_OPTION)\n \n c-family/c-dump.o : c-family/c-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(TREE_H) $(TREE_DUMP_H)\n@@ -2113,20 +2110,18 @@ c-family/c-lex.o : c-family/c-lex.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n c-family/c-omp.o : c-family/c-omp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TREE_H) $(C_COMMON_H) $(GIMPLE_H) langhooks.h\n \n+CFLAGS-c-family/c-opts.o += @TARGET_SYSTEM_ROOT_DEFINE@\n c-family/c-opts.o : c-family/c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n         $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) toplev.h langhooks.h \\\n         $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H) $(C_TARGET_H) \\\n         $(OPTS_H) $(OPTIONS_H) $(MKDEPS_H) incpath.h cppdefault.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n \n+CFLAGS-c-family/c-pch.o += -DHOST_MACHINE=\\\"$(host)\\\" \\\n+\t-DTARGET_MACHINE=\\\"$(target)\\\"\n c-family/c-pch.o : c-family/c-pch.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(CPPLIB_H) $(TREE_H) $(C_COMMON_H) output.h $(C_PRAGMA_H) \\\n \t$(GGC_H) debug.h langhooks.h $(FLAGS_H) hosthooks.h version.h \\\n \t$(TARGET_H) $(OPTS_H) $(TIMEVAR_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t  -DHOST_MACHINE=\\\"$(host)\\\" -DTARGET_MACHINE=\\\"$(target)\\\" \\\n-\t  $< $(OUTPUT_OPTION)\n \n c-family/c-ppoutput.o : c-family/c-ppoutput.c $(CONFIG_H) $(SYSTEM_H) \\\n \tcoretypes.h $(C_COMMON_H) $(TREE_H) $(CPPLIB_H) $(CPP_INTERNAL_H) \\\n@@ -2169,11 +2164,9 @@ incpath.o: incpath.c incpath.h $(CONFIG_H) $(SYSTEM_H) $(CPPLIB_H) \\\n \t\tintl.h prefix.h coretypes.h $(TM_H) cppdefault.h $(TARGET_H) \\\n \t\t$(MACHMODE_H)\n \n+CFLAGS-prefix.o += -DPREFIX=\\\"$(prefix)\\\" -DBASEVER=$(BASEVER_s)\n prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h prefix.h \\\n \t$(COMMON_TARGET_H) Makefile $(BASEVER)\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t-DPREFIX=\\\"$(prefix)\\\" -DBASEVER=$(BASEVER_s) \\\n-\t  -c $(srcdir)/prefix.c $(OUTPUT_OPTION)\n \n # Language-independent files.\n \n@@ -2251,12 +2244,11 @@ options-save.o: options-save.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TARGET_H) $\n \n dumpvers: dumpvers.c\n \n-version.o: version.c version.h $(REVISION) $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t-DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n+CFLAGS-version.o += -DBASEVER=$(BASEVER_s) -DDATESTAMP=$(DATESTAMP_s) \\\n \t-DREVISION=$(REVISION_s) \\\n \t-DDEVPHASE=$(DEVPHASE_s) -DPKGVERSION=$(PKGVERSION_s) \\\n-\t-DBUGURL=$(BUGURL_s) -c $(srcdir)/version.c $(OUTPUT_OPTION)\n+\t-DBUGURL=$(BUGURL_s)\n+version.o: version.c version.h $(REVISION) $(DATESTAMP) $(BASEVER) $(DEVPHASE)\n \n gtype-desc.o: gtype-desc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \t$(HASHTAB_H) $(SPLAY_TREE_H) $(OBSTACK_H) $(BITMAP_H) \\\n@@ -2292,10 +2284,10 @@ double-int.o: double-int.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \ttoplev.h $(TREE_H)\n \n # lto-compress.o needs $(ZLIBINC) added to the include flags.\n+CFLAGS-lto-compress.o += $(ZLIBINC)\n lto-compress.o: lto-compress.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TREE_H) langhooks.h $(LTO_STREAMER_H) $(LTO_SECTION_H) \\\n \tlto-compress.h $(DIAGNOSTIC_CORE_H) $(DIAGNOSTIC_CORE_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(ZLIBINC) $< $(OUTPUT_OPTION)\n data-streamer-in.o: data-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n     $(DATA_STREAMER_H) $(DIAGNOSTIC_H)\n data-streamer-out.o: data-streamer-out.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n@@ -2836,6 +2828,7 @@ s-bversion: BASE-VER\n \n input.o : input.c $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h $(INPUT_H)\n \n+CFLAGS-toplev.o += -DTARGET_NAME=\\\"$(target_noncanonical)\\\"\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    version.h $(RTL_H) $(FUNCTION_H) $(FLAGS_H) xcoffout.h $(INPUT_H) \\\n    $(INSN_ATTR_H) output.h $(DIAGNOSTIC_H) debug.h insn-config.h intl.h \\\n@@ -2847,9 +2840,6 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(OPTS_H) params.def tree-mudflap.h $(TREE_PASS_H) $(GIMPLE_H) \\\n    tree-ssa-alias.h $(PLUGIN_H) realmpfr.h tree-diagnostic.h \\\n    tree-pretty-print.h opts-diagnostic.h $(COMMON_TARGET_H)\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t  -DTARGET_NAME=\\\"$(target_noncanonical)\\\" \\\n-\t  -c $(srcdir)/toplev.c $(OUTPUT_OPTION)\n \n hwint.o : hwint.c $(CONFIG_H) $(SYSTEM_H) $(DIAGNOSTIC_CORE_H)\n \n@@ -4054,10 +4044,8 @@ gengtype-lex.c : gengtype-lex.l\n \n #\f\n # Remake internationalization support.\n+CFLAGS-intl.o += -DLOCALEDIR=\\\"$(localedir)\\\"\n intl.o: intl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h Makefile\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t  -DLOCALEDIR=\\\"$(localedir)\\\" \\\n-\t  -c $(srcdir)/intl.c $(OUTPUT_OPTION)\n \n #\f\n # Remake cpp.\n@@ -4075,17 +4063,13 @@ PREPROCESSOR_DEFINES = \\\n   -DSTANDARD_EXEC_PREFIX=\\\"$(libdir)/gcc/\\\" \\\n   @TARGET_SYSTEM_ROOT_DEFINE@\n \n+CFLAGS-cppbuiltin.o += $(PREPROCESSOR_DEFINES) -DBASEVER=$(BASEVER_s)\n cppbuiltin.o: cppbuiltin.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \tcppbuiltin.h Makefile\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t  $(PREPROCESSOR_DEFINES) -DBASEVER=$(BASEVER_s) \\\n-\t  -c $(srcdir)/cppbuiltin.c $(OUTPUT_OPTION)\n \n+CFLAGS-cppdefault.o += $(PREPROCESSOR_DEFINES)\n cppdefault.o: cppdefault.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n \tcppdefault.h Makefile\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t  $(PREPROCESSOR_DEFINES) \\\n-\t  -c $(srcdir)/cppdefault.c $(OUTPUT_OPTION)\n \n # Note for the stamp targets, we run the program `true' instead of\n # having an empty command (nothing following the semicolon)."}, {"sha": "3554868480c73a445173c3b48798a22b91e20cd8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -1,3 +1,11 @@\n+2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc-interface/Make-lang.in (CFLAGS-ada/tracebak.o)\n+\t(CFLAGS-ada/targext.o, CFLAGS-ada/cio.o, CFLAGS-ada/init.o)\n+\t(CFLAGS-ada/initialize.o, CFLAGS-ada/raise.o): New.\n+\t(ada/tracebak.o, ada/targext.o, ada/cio.o, ada/init.o)\n+\t(ada/initialize.o, ada/raise.o): Remove explicit compilation rules.\n+\n 2011-08-22  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* gcc-interface/Makefile.in (PICFLAG_FOR_TARGET): New."}, {"sha": "65ee531793d840456f251360469233cfa0ea407d", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -1213,9 +1213,8 @@ ada/a-tags.o  : ada/a-tags.adb ada/a-tags.ads\n \t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n \t  $< $(OUTPUT_OPTION)\n \n+CFLAGS-ada/tracebak.o += $(ADA_CFLAGS) -fno-omit-frame-pointer\n ada/tracebak.o : ada/tracebak.c $(CONFIG_H) $(SYSTEM_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) $(ALL_CPPFLAGS) \\\n-\t      $(INCLUDES) -fno-omit-frame-pointer $< $(OUTPUT_OPTION)\n \n # dependencies for windows specific tool (mdll)\n \n@@ -1236,25 +1235,20 @@ ada/exit.o     : ada/exit.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h\n ada/final.o    : ada/final.c $(CONFIG_H) $(SYSTEM_H) ada/raise.h\n ada/link.o     : ada/link.c\n \n+CFLAGS-ada/targext.o += $(ADA_CFLAGS)\n ada/targext.o : ada/targext.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n+CFLAGS-ada/cio.o += $(ADA_CFLAGS)\n ada/cio.o : ada/cio.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n+CFLAGS-ada/init.o += $(ADA_CFLAGS)\n ada/init.o : ada/init.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h ada/raise.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n+CFLAGS-ada/initialize.o += $(ADA_CFLAGS)\n ada/initialize.o : ada/initialize.c\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n+CFLAGS-ada/raise.o += $(ADA_CFLAGS)\n ada/raise.o : ada/raise.c $(CONFIG_H) $(SYSTEM_H) ada/adaint.h ada/raise.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ADA_CFLAGS) \\\n-\t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n ada/cuintp.o : ada/gcc-interface/cuintp.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) ada/gcc-interface/ada.h ada/types.h ada/uintp.h \\"}, {"sha": "7e8d1af01027438262dc6223d5b8051fc38ab321", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -1,3 +1,7 @@\n+2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (fortran/cpp.o): Remove explicit compilation rule.\n+\n 2011-08-23  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31600"}, {"sha": "08164587d0b5be3a148f8e48ab98de6dbd7a1d10", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -367,5 +367,3 @@ fortran/resolve.o: fortran/dependency.h fortran/data.h fortran/target-memory.h\n fortran/data.o: fortran/data.h\n fortran/options.o: $(PARAMS_H) $(TARGET_H) fortran/cpp.h\n fortran/cpp.o: fortran/cpp.c incpath.h incpath.o cppbuiltin.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t\t$< $(OUTPUT_OPTION)"}, {"sha": "16b24acd281daf65699bb8dcb0af7d76efe51b09", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -1,3 +1,8 @@\n+2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (CFLAGS-go/go-lang.o): New.\n+\t(go/go-lang.o): Remove explicit compilation rule.\n+\n 2011-08-08  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Make-lang.in (gccgo$(exeext)): Add $(EXTRA_GCC_LIBS)."}, {"sha": "fc436126cab1edc43ef8294113e60502733e02c7", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -229,15 +229,13 @@ go/go-backend.o: go/go-backend.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(TM_H) $(RTL_H) $(TREE_H) $(TM_P_H) output.h $(TARGET_H) \\\n \t$(COMMON_TARGET_H)\n \n+CFLAGS-go/go-lang.o += -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n+\t-DDEFAULT_TARGET_MACHINE=\\\"$(target_noncanonical)\\\"\n go/go-lang.o: go/go-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \t\t$(TREE_H) $(GIMPLE_H) $(GGC_H) $(TOPLEV_H) debug.h options.h \\\n \t\t$(FLAGS_H) convert.h $(DIAGNOSTIC_H) langhooks.h \\\n \t\t$(LANGHOOKS_DEF_H) $(EXCEPT_H) $(TARGET_H) $(GO_C_H) \\\n \t\tgt-go-go-lang.h gtype-go.h $(COMMON_TARGET_H)\n-\t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n-\t  -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n-\t  -DDEFAULT_TARGET_MACHINE=\\\"$(target_noncanonical)\\\" \\\n-\t  -c $< $(OUTPUT_OPTION)\n \n GOINCLUDES = -I $(srcdir)/go -I $(srcdir)/go/gofrontend\n "}, {"sha": "5f14cd8787f00f12ca4013ce720521daae3317f6", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -1,3 +1,10 @@\n+2011-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Make-lang.in (CFLAGS-java/jcf-io.o, CFLAGS-java/jcf-path.o):\n+\tNew.\n+\t(java/jcf-io.o, java/jcf-path.o): Remove explicit compilation\n+\trules.\n+\n 2011-08-18  Peter Collingbourne  <peter@pcc.me.uk>\n \n \t* expr.c (expand_invoke) Use the type of the method rewrite"}, {"sha": "1d9fd2b2988644440b02c5aec71885b8b62f08c1", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5bc3df6db8b8b829899eac59223491d80ced9e5/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=c5bc3df6db8b8b829899eac59223491d80ced9e5", "patch": "@@ -324,18 +324,16 @@ java/java-gimplify.o: java/java-gimplify.c $(CONFIG_H) $(SYSTEM_H) \\\n   coretypes.h $(JAVA_TREE_H) $(GIMPLE_H)\n \n # jcf-io.o needs $(ZLIBINC) added to cflags.\n+CFLAGS-java/jcf-io.o += $(ZLIBINC)\n java/jcf-io.o: java/jcf-io.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   $(JAVA_TREE_H) java/zipfile.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t\t$(ZLIBINC) $(srcdir)/java/jcf-io.c $(OUTPUT_OPTION)\n \n # jcf-path.o needs a -D.\n+CFLAGS-java/jcf-path.o += \\\n+\t-DLIBGCJ_ZIP_FILE='\"$(datadir)/java/libgcj-$(version).jar\"' \\\n+\t-DDEFAULT_TARGET_VERSION=\\\"$(version)\\\"\n java/jcf-path.o: java/jcf-path.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n   java/jcf.h\n-\t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -DLIBGCJ_ZIP_FILE='\"$(datadir)/java/libgcj-$(version).jar\"' \\\n-\t  -DDEFAULT_TARGET_VERSION=\\\"$(version)\\\" \\\n-\t  $(srcdir)/java/jcf-path.c $(OUTPUT_OPTION)\n \n TEXI_JAVA_FILES = java/gcj.texi $(gcc_docdir)/include/fdl.texi\t\t\\\n \t $(gcc_docdir)/include/gpl_v3.texi $(gcc_docdir)/include/gcc-common.texi   \\"}]}