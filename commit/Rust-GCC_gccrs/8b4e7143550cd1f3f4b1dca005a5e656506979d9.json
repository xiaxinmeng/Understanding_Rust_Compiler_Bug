{"sha": "8b4e7143550cd1f3f4b1dca005a5e656506979d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0ZTcxNDM1NTBjZDFmM2Y0YjFkY2EwMDVhNWU2NTY1MDY5NzlkOQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2019-05-28T13:37:15Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2019-05-28T13:37:15Z"}, "message": "Remove obsolete comment about use_thunk\n\n\t* config/alpha/alpha.c [TARGET_ABI_OSF] (alpha_output_mi_thunk_osf):\n\tRemove obsolete use_thunk reference.\n\t* config/i386/i386.c (x86_output_mi_thunk): Likewise.\n\t* config/ia64/ia64.c (ia64_output_mi_thunk): Likewise.\n\t* config/nios2/nios2.c (nios2_asm_output_mi_thunk): Likewise.\n\t* config/or1k/or1k.c (or1k_output_mi_thunk): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_output_mi_thunk): Likewise.\n\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n\t* config/sparc/sparc.c (sparc_output_mi_thunk): Likewise.\n\t* config/tilegx/tilegx.c (tilegx_output_mi_thunk): Likewise.\n\t* config/tilepro/tilepro.c (tilepro_asm_output_mi_thunk): Likewise.\n\nFrom-SVN: r271703", "tree": {"sha": "d024c8f03079531b6b0b67659376f2a0514c37a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d024c8f03079531b6b0b67659376f2a0514c37a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b4e7143550cd1f3f4b1dca005a5e656506979d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4e7143550cd1f3f4b1dca005a5e656506979d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b4e7143550cd1f3f4b1dca005a5e656506979d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b4e7143550cd1f3f4b1dca005a5e656506979d9/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7daef9aceb80787d9fd64b4e110b175b4d9e5a9e"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "8065ee2675e9ba97a6c9cc1e94438f4f80c93e29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -1,3 +1,17 @@\n+2019-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/alpha/alpha.c [TARGET_ABI_OSF] (alpha_output_mi_thunk_osf):\n+\tRemove obsolete use_thunk reference.\n+\t* config/i386/i386.c (x86_output_mi_thunk): Likewise.\n+\t* config/ia64/ia64.c (ia64_output_mi_thunk): Likewise.\n+\t* config/nios2/nios2.c (nios2_asm_output_mi_thunk): Likewise.\n+\t* config/or1k/or1k.c (or1k_output_mi_thunk): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_output_mi_thunk): Likewise.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n+\t* config/sparc/sparc.c (sparc_output_mi_thunk): Likewise.\n+\t* config/tilegx/tilegx.c (tilegx_output_mi_thunk): Likewise.\n+\t* config/tilepro/tilepro.c (tilepro_asm_output_mi_thunk): Likewise.\n+\n 2019-05-28  Nathan Sidwell  <nathan@acm.org>\n \n \t* tree.h (IDENTIFIER_ANON_P): New."}, {"sha": "2e1de397e937c6cea73ab2ba7bea0868b0a5d1cf", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -8514,8 +8514,7 @@ alpha_output_mi_thunk_osf (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     instruction scheduling worth while.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);"}, {"sha": "2eddea56b2e9e6470e75dd6dff6e2966078e8434", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -19972,8 +19972,7 @@ x86_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n     }\n   emit_barrier ();\n \n-  /* Emit just enough of rest_of_compilation to get the insns emitted.\n-     Note that use_thunk calls assemble_start_function et al.  */\n+  /* Emit just enough of rest_of_compilation to get the insns emitted.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);"}, {"sha": "a2a6c5cffa18dd112c1fcd25dbcd7940da3e3855", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -11033,8 +11033,7 @@ ia64_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     instruction scheduling worth while.  */\n \n   emit_all_insn_group_barriers (NULL);\n   insn = get_insns ();"}, {"sha": "250c6ac4b08c96b645accbc205b8f4a7903734de", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -4519,8 +4519,7 @@ nios2_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     instruction scheduling worth while.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);"}, {"sha": "54c9e804ea5ae6f4c9346d1af59e42f618bd1b2b", "filename": "gcc/config/or1k/or1k.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2For1k%2For1k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2For1k%2For1k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -2112,8 +2112,7 @@ or1k_output_mi_thunk (FILE *file, tree thunk_fndecl,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     instruction scheduling worth while.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);"}, {"sha": "5e861f21bb06382d66f48fa0e461b1eb3c0813e0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -29296,8 +29296,7 @@ rs6000_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     instruction scheduling worth while.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);"}, {"sha": "07d5b3c1df5814a57e217279013b6c9a47b03d8d", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -10940,8 +10940,7 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   emit_barrier ();\n \n   /* Run just enough of rest_of_compilation to do scheduling and get\n-     the insns emitted.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     the insns emitted.  */\n \n   insns = get_insns ();\n "}, {"sha": "6d52f83d91c2ac44337bb0c6a9ebc57957ed7578", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -12462,8 +12462,7 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.  */\n+     instruction scheduling worth while.  */\n   insn = get_insns ();\n   shorten_branches (insn);\n   assemble_start_function (thunk_fndecl, fnname);"}, {"sha": "6da91390b18164900bc5deb4f1befbf87c6e5d2a", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -4993,8 +4993,7 @@ tilegx_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.\n+     instruction scheduling worth while.\n \n      We don't currently bundle, but the instruciton sequence is all\n      serial except for the tail call, so we're only wasting one cycle."}, {"sha": "f86461f07d46b362b595eac473b4f62d5b1c07db", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b4e7143550cd1f3f4b1dca005a5e656506979d9/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=8b4e7143550cd1f3f4b1dca005a5e656506979d9", "patch": "@@ -4416,8 +4416,7 @@ tilepro_asm_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \n   /* Run just enough of rest_of_compilation to get the insns emitted.\n      There's not really enough bulk here to make other passes such as\n-     instruction scheduling worth while.  Note that use_thunk calls\n-     assemble_start_function and assemble_end_function.\n+     instruction scheduling worth while.\n \n      We don't currently bundle, but the instruciton sequence is all\n      serial except for the tail call, so we're only wasting one cycle."}]}