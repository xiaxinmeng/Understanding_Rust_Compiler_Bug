{"sha": "8fef6f720a5a0a056abfa986ba870bb406ab4716", "node_id": "C_kwDOANBUbNoAKDhmZWY2ZjcyMGE1YTBhMDU2YWJmYTk4NmJhODcwYmI0MDZhYjQ3MTY", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-11-21T18:29:27Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-11-21T18:29:27Z"}, "message": "Fortran: fix lookup for gfortran builtin math intrinsics used by DEC extensions\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/99061\n\t* trans-intrinsic.c (gfc_lookup_intrinsic): Helper function for\n\tlooking up gfortran builtin intrinsics.\n\t(gfc_conv_intrinsic_atrigd): Use it.\n\t(gfc_conv_intrinsic_cotan): Likewise.\n\t(gfc_conv_intrinsic_cotand): Likewise.\n\t(gfc_conv_intrinsic_atan2d): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/99061\n\t* gfortran.dg/dec_math_5.f90: New test.\n\nCo-authored-by: Steven G. Kargl <kargl@gcc.gnu.org>", "tree": {"sha": "d4ac577e2ce92a1a238752618b821568c0fbb4d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ac577e2ce92a1a238752618b821568c0fbb4d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fef6f720a5a0a056abfa986ba870bb406ab4716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fef6f720a5a0a056abfa986ba870bb406ab4716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fef6f720a5a0a056abfa986ba870bb406ab4716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fef6f720a5a0a056abfa986ba870bb406ab4716/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f5afb626381d19bfced30bc19cf3b03867fa6f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f5afb626381d19bfced30bc19cf3b03867fa6f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f5afb626381d19bfced30bc19cf3b03867fa6f5"}], "stats": {"total": 170, "additions": 139, "deletions": 31}, "files": [{"sha": "909821d3284ede69cb1b429301c624715029aa98", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fef6f720a5a0a056abfa986ba870bb406ab4716/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fef6f720a5a0a056abfa986ba870bb406ab4716/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8fef6f720a5a0a056abfa986ba870bb406ab4716", "patch": "@@ -4555,6 +4555,18 @@ rad2deg (int kind)\n }\n \n \n+static gfc_intrinsic_map_t *\n+gfc_lookup_intrinsic (gfc_isym_id id)\n+{\n+  gfc_intrinsic_map_t *m = gfc_intrinsic_map;\n+  for (; m->id != GFC_ISYM_NONE || m->double_built_in != END_BUILTINS; m++)\n+    if (id == m->id)\n+      break;\n+  gcc_assert (id == m->id);\n+  return m;\n+}\n+\n+\n /* ACOSD(x) is translated into ACOS(x) * 180 / pi.\n    ASIND(x) is translated into ASIN(x) * 180 / pi.\n    ATAND(x) is translated into ATAN(x) * 180 / pi.  */\n@@ -4565,20 +4577,27 @@ gfc_conv_intrinsic_atrigd (gfc_se * se, gfc_expr * expr, gfc_isym_id id)\n   tree arg;\n   tree atrigd;\n   tree type;\n+  gfc_intrinsic_map_t *m;\n \n   type = gfc_typenode_for_spec (&expr->ts);\n \n   gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n \n-  if (id == GFC_ISYM_ACOSD)\n-    atrigd = gfc_builtin_decl_for_float_kind (BUILT_IN_ACOS, expr->ts.kind);\n-  else if (id == GFC_ISYM_ASIND)\n-    atrigd = gfc_builtin_decl_for_float_kind (BUILT_IN_ASIN, expr->ts.kind);\n-  else if (id == GFC_ISYM_ATAND)\n-    atrigd = gfc_builtin_decl_for_float_kind (BUILT_IN_ATAN, expr->ts.kind);\n-  else\n-    gcc_unreachable ();\n-\n+  switch (id)\n+    {\n+    case GFC_ISYM_ACOSD:\n+      m = gfc_lookup_intrinsic (GFC_ISYM_ACOS);\n+      break;\n+    case GFC_ISYM_ASIND:\n+      m = gfc_lookup_intrinsic (GFC_ISYM_ASIN);\n+      break;\n+    case GFC_ISYM_ATAND:\n+      m = gfc_lookup_intrinsic (GFC_ISYM_ATAN);\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  atrigd = gfc_get_intrinsic_lib_fndecl (m, expr);\n   atrigd = build_call_expr_loc (input_location, atrigd, 1, arg);\n \n   se->expr = fold_build2_loc (input_location, MULT_EXPR, type, atrigd,\n@@ -4614,13 +4633,9 @@ gfc_conv_intrinsic_cotan (gfc_se *se, gfc_expr *expr)\n       mpfr_clear (pio2);\n \n       /* Find tan builtin function.  */\n-      m = gfc_intrinsic_map;\n-      for (; m->id != GFC_ISYM_NONE || m->double_built_in != END_BUILTINS; m++)\n-\tif (GFC_ISYM_TAN == m->id)\n-\t  break;\n-\n-      tmp = fold_build2_loc (input_location, PLUS_EXPR, type, arg, tmp);\n+      m = gfc_lookup_intrinsic (GFC_ISYM_TAN);\n       tan = gfc_get_intrinsic_lib_fndecl (m, expr);\n+      tmp = fold_build2_loc (input_location, PLUS_EXPR, type, arg, tmp);\n       tan = build_call_expr_loc (input_location, tan, 1, tmp);\n       se->expr = fold_build1_loc (input_location, NEGATE_EXPR, type, tan);\n     }\n@@ -4630,20 +4645,12 @@ gfc_conv_intrinsic_cotan (gfc_se *se, gfc_expr *expr)\n       tree cos;\n \n       /* Find cos builtin function.  */\n-      m = gfc_intrinsic_map;\n-      for (; m->id != GFC_ISYM_NONE || m->double_built_in != END_BUILTINS; m++)\n-\tif (GFC_ISYM_COS == m->id)\n-\t  break;\n-\n+      m = gfc_lookup_intrinsic (GFC_ISYM_COS);\n       cos = gfc_get_intrinsic_lib_fndecl (m, expr);\n       cos = build_call_expr_loc (input_location, cos, 1, arg);\n \n       /* Find sin builtin function.  */\n-      m = gfc_intrinsic_map;\n-      for (; m->id != GFC_ISYM_NONE || m->double_built_in != END_BUILTINS; m++)\n-\tif (GFC_ISYM_SIN == m->id)\n-\t  break;\n-\n+      m = gfc_lookup_intrinsic (GFC_ISYM_SIN);\n       sin = gfc_get_intrinsic_lib_fndecl (m, expr);\n       sin = build_call_expr_loc (input_location, sin, 1, arg);\n \n@@ -4675,11 +4682,7 @@ gfc_conv_intrinsic_cotand (gfc_se *se, gfc_expr *expr)\n   mpfr_clear (ninety);\n \n   /* Find tand.  */\n-  gfc_intrinsic_map_t *m = gfc_intrinsic_map;\n-  for (; m->id != GFC_ISYM_NONE || m->double_built_in != END_BUILTINS; m++)\n-    if (GFC_ISYM_TAND == m->id)\n-      break;\n-\n+  gfc_intrinsic_map_t *m = gfc_lookup_intrinsic (GFC_ISYM_TAND);\n   tree tand = gfc_get_intrinsic_lib_fndecl (m, expr);\n   tand = build_call_expr_loc (input_location, tand, 1, arg);\n \n@@ -4699,7 +4702,8 @@ gfc_conv_intrinsic_atan2d (gfc_se *se, gfc_expr *expr)\n   gfc_conv_intrinsic_function_args (se, expr, args, 2);\n   type = TREE_TYPE (args[0]);\n \n-  atan2d = gfc_builtin_decl_for_float_kind (BUILT_IN_ATAN2, expr->ts.kind);\n+  gfc_intrinsic_map_t *m = gfc_lookup_intrinsic (GFC_ISYM_ATAN2);\n+  atan2d = gfc_get_intrinsic_lib_fndecl (m, expr);\n   atan2d = build_call_expr_loc (input_location, atan2d, 2, args[0], args[1]);\n \n   se->expr = fold_build2_loc (input_location, MULT_EXPR, type, atan2d,"}, {"sha": "dee2de4e06ba1de03a0eee47678f64db6887f7c9", "filename": "gcc/testsuite/gfortran.dg/dec_math_5.f90", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fef6f720a5a0a056abfa986ba870bb406ab4716/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_math_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fef6f720a5a0a056abfa986ba870bb406ab4716/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_math_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_math_5.f90?ref=8fef6f720a5a0a056abfa986ba870bb406ab4716", "patch": "@@ -0,0 +1,104 @@\n+! { dg-do run }\n+! { dg-additional-options \"-std=gnu\" }\n+! { dg-require-effective-target fortran_real_10 }\n+! { dg-require-effective-target fortran_real_16 }\n+\n+program p\n+  implicit none\n+  integer, parameter :: ep = selected_real_kind (17) ! real(10)\n+  real(4)  :: a1, e1 = 1.e-5\n+  real(8)  :: b1, e2 = 1.e-14\n+  real(ep) :: c1, e3 = 1.e-17\n+  real(16) :: d1, e4 = 1.e-30\n+\n+  a1 = 1; a1 = atand(a1)\n+  b1 = 1; b1 = atand(b1)\n+  c1 = 1; c1 = atand(c1)\n+  d1 = 1; d1 = atand(d1)\n+! print '(4(F15.11))', a1, b1, c1, d1\n+  if (abs(a1 - 45) > e1) stop 1\n+  if (abs(b1 - 45) > e2) stop 2\n+  if (abs(c1 - 45) > e3) stop 3\n+  if (abs(d1 - 45) > e4) stop 4\n+\n+  a1 = 0.5; a1 = asind(a1)\n+  b1 = 0.5; b1 = asind(b1)\n+  c1 = 0.5; c1 = asind(c1)\n+  d1 = 0.5; d1 = asind(d1)\n+  if (abs(a1 - 30) > e1) stop 5\n+  if (abs(b1 - 30) > e2) stop 6\n+  if (abs(c1 - 30) > e3) stop 7\n+  if (abs(d1 - 30) > e4) stop 8\n+\n+  a1 = 0.5; a1 = acosd(a1)\n+  b1 = 0.5; b1 = acosd(b1)\n+  c1 = 0.5; c1 = acosd(c1)\n+  d1 = 0.5; d1 = acosd(d1)\n+  if (abs(a1 - 60) > e1) stop 9\n+  if (abs(b1 - 60) > e2) stop 10\n+  if (abs(c1 - 60) > e3) stop 11\n+  if (abs(d1 - 60) > e4) stop 12\n+\n+  a1 = 45; a1 = tand(a1)\n+  b1 = 45; b1 = tand(b1)\n+  c1 = 45; c1 = tand(c1)\n+  d1 = 45; d1 = tand(d1)\n+  if (abs(a1 - 1) > e1) stop 13\n+  if (abs(b1 - 1) > e2) stop 14\n+  if (abs(c1 - 1) > e3) stop 15\n+  if (abs(d1 - 1) > e4) stop 16\n+\n+  a1 = 60; a1 = tand(a1)\n+  b1 = 60; b1 = tand(b1)\n+  c1 = 60; c1 = tand(c1)\n+  d1 = 60; d1 = tand(d1)\n+  if (abs(a1 - sqrt (3._4) ) > e1) stop 17\n+  if (abs(b1 - sqrt (3._8) ) > e2) stop 18\n+  if (abs(c1 - sqrt (3._ep)) > e3) stop 19\n+  if (abs(d1 - sqrt (3._16)) > e4) stop 20\n+\n+  a1 = 45; a1 = cotand(a1)\n+  b1 = 45; b1 = cotand(b1)\n+  c1 = 45; c1 = cotand(c1)\n+  d1 = 45; d1 = cotand(d1)\n+  if (abs(a1 - 1) > e1) stop 21\n+  if (abs(b1 - 1) > e2) stop 22\n+  if (abs(c1 - 1) > e3) stop 23\n+  if (abs(d1 - 1) > e4) stop 24\n+\n+  a1 = 30; a1 = cotand(a1)\n+  b1 = 30; b1 = cotand(b1)\n+  c1 = 30; c1 = cotand(c1)\n+  d1 = 30; d1 = cotand(d1)\n+  if (abs(a1 - sqrt (3._4) ) > e1) stop 25\n+  if (abs(b1 - sqrt (3._8) ) > e2) stop 26\n+  if (abs(c1 - sqrt (3._ep)) > e3) stop 27\n+  if (abs(d1 - sqrt (3._16)) > e4) stop 28\n+\n+  a1 = 1; a1 = atan2d(a1, a1)\n+  b1 = 1; b1 = atan2d(b1, b1)\n+  c1 = 1; c1 = atan2d(c1, c1)\n+  d1 = 1; d1 = atan2d(d1, d1)\n+  if (abs(a1 - 45) > e1) stop 29\n+  if (abs(b1 - 45) > e2) stop 30\n+  if (abs(c1 - 45) > e3) stop 31\n+  if (abs(d1 - 45) > e4) stop 32\n+\n+  a1 = 30; a1 = sind(a1)\n+  b1 = 30; b1 = sind(b1)\n+  c1 = 30; c1 = sind(c1)\n+  d1 = 30; d1 = sind(d1)\n+  if (abs(a1 - 0.5) > e1) stop 33\n+  if (abs(b1 - 0.5) > e2) stop 34\n+  if (abs(c1 - 0.5) > e3) stop 35\n+  if (abs(d1 - 0.5) > e4) stop 36\n+\n+  a1 = 60; a1 = cosd(a1)\n+  b1 = 60; b1 = cosd(b1)\n+  c1 = 60; c1 = cosd(c1)\n+  d1 = 60; d1 = cosd(d1)\n+  if (abs(a1 - 0.5) > e1) stop 37\n+  if (abs(b1 - 0.5) > e2) stop 38\n+  if (abs(c1 - 0.5) > e3) stop 39\n+  if (abs(d1 - 0.5) > e4) stop 40\n+end program p"}]}