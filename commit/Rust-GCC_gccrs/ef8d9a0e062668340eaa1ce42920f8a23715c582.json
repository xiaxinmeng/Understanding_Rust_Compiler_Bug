{"sha": "ef8d9a0e062668340eaa1ce42920f8a23715c582", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4ZDlhMGUwNjI2NjgzNDBlYWExY2U0MjkyMGY4YTIzNzE1YzU4Mg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2009-07-21T00:43:42Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2009-07-21T00:43:42Z"}, "message": "pa.c (compute_zdepwi_operands): Limit deposit length to 32 - lsb.\n\n\t* pa.c (compute_zdepwi_operands): Limit deposit length to 32 - lsb.\n\tCast \"1\" to unsigned HOST_WIDE_INT.\n\t(compute_zdepdi_operands): Limit maximum length to 64 bits.  Limit\n\tdeposit length to the maximum length - lsb.  Extend length if\n\tHOST_BITS_PER_WIDE_INT is 32.\n\nFrom-SVN: r149843", "tree": {"sha": "c14e6e1a363eb5cec5e321cfd384c13b4541b149", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c14e6e1a363eb5cec5e321cfd384c13b4541b149"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8d9a0e062668340eaa1ce42920f8a23715c582", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d9a0e062668340eaa1ce42920f8a23715c582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8d9a0e062668340eaa1ce42920f8a23715c582", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8d9a0e062668340eaa1ce42920f8a23715c582/comments", "author": null, "committer": null, "parents": [{"sha": "7e4bc1f8ca845c57aa04b62cc18a9a5bc5d1506e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4bc1f8ca845c57aa04b62cc18a9a5bc5d1506e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4bc1f8ca845c57aa04b62cc18a9a5bc5d1506e"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "c348015c9d462e4bf0e5a9227dfda2f52123cd67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d9a0e062668340eaa1ce42920f8a23715c582/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d9a0e062668340eaa1ce42920f8a23715c582/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef8d9a0e062668340eaa1ce42920f8a23715c582", "patch": "@@ -1,3 +1,11 @@\n+2009-07-20  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (compute_zdepwi_operands): Limit deposit length to 32 - lsb.\n+\tCast \"1\" to unsigned HOST_WIDE_INT.\n+\t(compute_zdepdi_operands): Limit maximum length to 64 bits.  Limit\n+\tdeposit length to the maximum length - lsb.  Extend length if\n+\tHOST_BITS_PER_WIDE_INT is 32.\n+\n 2009-07-20  Olatunji Ruwase <tjruwase@google.com>\n \n \t* cgraph.h (constant_pool_htab): New function."}, {"sha": "8e8db865e2b2996db3c946ea1e788cf4b980cf0e", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8d9a0e062668340eaa1ce42920f8a23715c582/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8d9a0e062668340eaa1ce42920f8a23715c582/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ef8d9a0e062668340eaa1ce42920f8a23715c582", "patch": "@@ -2213,9 +2213,9 @@ compute_zdepwi_operands (unsigned HOST_WIDE_INT imm, unsigned *op)\n   else\n     {\n       /* Find the width of the bitstring in IMM.  */\n-      for (len = 5; len < 32; len++)\n+      for (len = 5; len < 32 - lsb; len++)\n \t{\n-\t  if ((imm & (1 << len)) == 0)\n+\t  if ((imm & ((unsigned HOST_WIDE_INT) 1 << len)) == 0)\n \t    break;\n \t}\n \n@@ -2234,10 +2234,12 @@ compute_zdepwi_operands (unsigned HOST_WIDE_INT imm, unsigned *op)\n void\n compute_zdepdi_operands (unsigned HOST_WIDE_INT imm, unsigned *op)\n {\n-  HOST_WIDE_INT lsb, len;\n+  int lsb, len, maxlen;\n+\n+  maxlen = MIN (HOST_BITS_PER_WIDE_INT, 64);\n \n   /* Find the least significant set bit in IMM.  */\n-  for (lsb = 0; lsb < HOST_BITS_PER_WIDE_INT; lsb++)\n+  for (lsb = 0; lsb < maxlen; lsb++)\n     {\n       if ((imm & 1) != 0)\n         break;\n@@ -2246,17 +2248,20 @@ compute_zdepdi_operands (unsigned HOST_WIDE_INT imm, unsigned *op)\n \n   /* Choose variants based on *sign* of the 5-bit field.  */\n   if ((imm & 0x10) == 0)\n-    len = ((lsb <= HOST_BITS_PER_WIDE_INT - 4)\n-\t   ? 4 : HOST_BITS_PER_WIDE_INT - lsb);\n+    len = (lsb <= maxlen - 4) ? 4 : maxlen - lsb;\n   else\n     {\n       /* Find the width of the bitstring in IMM.  */\n-      for (len = 5; len < HOST_BITS_PER_WIDE_INT; len++)\n+      for (len = 5; len < maxlen - lsb; len++)\n \t{\n \t  if ((imm & ((unsigned HOST_WIDE_INT) 1 << len)) == 0)\n \t    break;\n \t}\n \n+      /* Extend length if host is narrow and IMM is negative.  */\n+      if (HOST_BITS_PER_WIDE_INT == 32 && len == maxlen - lsb)\n+\tlen += 32;\n+\n       /* Sign extend IMM as a 5-bit value.  */\n       imm = (imm & 0xf) - 0x10;\n     }"}]}