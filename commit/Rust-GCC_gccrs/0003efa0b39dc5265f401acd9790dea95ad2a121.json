{"sha": "0003efa0b39dc5265f401acd9790dea95ad2a121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwM2VmYTBiMzlkYzUyNjVmNDAxYWNkOTc5MGRlYTk1YWQyYTEyMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-04-02T21:16:38Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-04-02T21:16:38Z"}, "message": "PrintStream.java (out): Removed field.\n\n\t* java/io/PrintStream.java (out): Removed field.  Fixes PR\n\tjava/2449.\n\t(write): Call flush, not out.flush, per spec.\n\t(close): Flush output stream, per spec.  Handle\n\tInterruptedIOException.\n\t(checkError): Likewise.\n\t(flush, print, write): Handle InterruptedIOException per spec.\n\t(PrintStream): Don't create BufferedOutputStream.\n\t(work_bytes): New field.\n\t(writeChars): Use work_bytes.  Don't assume `out' is a\n\tBufferedOutputStream.\n\nFrom-SVN: r41014", "tree": {"sha": "bf769c583541d60b569591ac4c42a27a164413a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf769c583541d60b569591ac4c42a27a164413a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0003efa0b39dc5265f401acd9790dea95ad2a121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0003efa0b39dc5265f401acd9790dea95ad2a121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0003efa0b39dc5265f401acd9790dea95ad2a121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0003efa0b39dc5265f401acd9790dea95ad2a121/comments", "author": null, "committer": null, "parents": [{"sha": "5f82d4f21cac3bbef5b486a04cf4e5966f98ee75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f82d4f21cac3bbef5b486a04cf4e5966f98ee75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f82d4f21cac3bbef5b486a04cf4e5966f98ee75"}], "stats": {"total": 88, "additions": 51, "deletions": 37}, "files": [{"sha": "2bc5aa8229899c361dea052c28b943c4851951fc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003efa0b39dc5265f401acd9790dea95ad2a121/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003efa0b39dc5265f401acd9790dea95ad2a121/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0003efa0b39dc5265f401acd9790dea95ad2a121", "patch": "@@ -1,3 +1,17 @@\n+2001-04-02  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/PrintStream.java (out): Removed field.  Fixes PR\n+\tjava/2449.\n+\t(write): Call flush, not out.flush, per spec.\n+\t(close): Flush output stream, per spec.  Handle\n+\tInterruptedIOException.\n+\t(checkError): Likewise.\n+\t(flush, print, write): Handle InterruptedIOException per spec.\n+\t(PrintStream): Don't create BufferedOutputStream.\n+\t(work_bytes): New field.\n+\t(writeChars): Use work_bytes.  Don't assume `out' is a\n+\tBufferedOutputStream.\n+\n 2001-04-02  Torsten Rueger  <torsten.rueger@firsthop.com>\n \n \t* java/text/MessageFormat.java (setLocale): Added missing `else'."}, {"sha": "621778da9d56df100756dfcb8f778f61b7f48aa3", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0003efa0b39dc5265f401acd9790dea95ad2a121/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0003efa0b39dc5265f401acd9790dea95ad2a121/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=0003efa0b39dc5265f401acd9790dea95ad2a121", "patch": "@@ -1,6 +1,6 @@\n // PrintStream.java - Print string representations\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -18,7 +18,7 @@\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n- * Status:  Not finished.\n+ * Status:  Believed complete and correct to 1.3\n  */\n \n public class PrintStream extends FilterOutputStream\n@@ -29,15 +29,21 @@ public class PrintStream extends FilterOutputStream\n \n   public boolean checkError ()\n   {\n+    flush();\n     return error;\n   }\n \n   public void close ()\n   {\n     try\n       {\n+\tflush();\n \tout.close();\n       }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n     catch (IOException e)\n       {\n \tsetError ();\n@@ -50,6 +56,10 @@ public void flush ()\n       {\n \tout.flush();\n       }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n     catch (IOException e)\n       {\n \tsetError ();\n@@ -66,6 +76,10 @@ private synchronized void print (String str, boolean println)\n \tif (auto_flush)\n \t  flush();\n       }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n     catch (IOException e)\n       {\n \tsetError ();\n@@ -83,32 +97,26 @@ private synchronized void print (char[] chars, int pos, int len,\n \tif (auto_flush)\n \t  flush();\n       }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n+      }\n     catch (IOException e)\n       {\n \tsetError ();\n       }\n   }\n \n-  /** Writes characters through to the inferior BufferedOutputStream. */\n   private void writeChars(char[] buf, int offset, int count)\n     throws IOException\n   {\n     while (count > 0)\n       {\n-\t// We must flush if out.count == out.buf.length.\n-\t// It is probably a good idea to flush if out.buf is almost full.\n-\t// This test is an approximation for \"almost full\".\n-\tif (out.count + count >= out.buf.length)\n-\t  {\n-\t    out.flush();\n-\t    if (out.count != 0)\n-\t      throw new IOException(\"unable to flush output byte buffer\");\n-\t  }\n-\tconverter.setOutput(out.buf, out.count);\n+\tconverter.setOutput(work_bytes, 0);\n \tint converted = converter.write(buf, offset, count);\n \toffset += converted;\n \tcount -= converted;\n-\tout.count = converter.count;\n+\tout.write(work_bytes, 0, converter.count);\n       }\n   }\n \n@@ -117,20 +125,11 @@ private void writeChars(String str, int offset, int count)\n   {\n     while (count > 0)\n       {\n-\t// We must flush if out.count == out.buf.length.\n-\t// It is probably a good idea to flush if out.buf is almost full.\n-\t// This test is an approximation for \"almost full\".\n-\tif (out.count + count >= out.buf.length)\n-\t  {\n-\t    out.flush();\n-\t    if (out.count != 0)\n-\t      throw new IOException(\"unable to flush output byte buffer\");\n-\t  }\n-\tconverter.setOutput(out.buf, out.count);\n+\tconverter.setOutput(work_bytes, 0);\n \tint converted = converter.write(str, offset, count, work);\n \toffset += converted;\n \tcount -= converted;\n-\tout.count = converter.count;\n+\tout.write(work_bytes, 0, converter.count);\n       }\n   }\n \n@@ -239,15 +238,6 @@ public PrintStream (OutputStream out)\n   public PrintStream (OutputStream out, boolean af)\n   {\n     super(out);\n-    if (out instanceof BufferedOutputStream)\n-      this.out = (BufferedOutputStream) out;\n-    else\n-      {\n-        this.out = new BufferedOutputStream(out, 250);\n-\t/* PrintStream redefines \"out\". Explicitly reset FilterOutputStream's\n-\t * \"out\" so that they're referring to the same thing. */\n-\tsuper.out = this.out;    \n-      }\n     converter = UnicodeToBytes.getDefaultEncoder();\n     error = false;\n     auto_flush = af;\n@@ -264,7 +254,11 @@ public void write (int oneByte)\n       {\n \tout.write(oneByte);\n \tif (auto_flush && oneByte == '\\n')\n-\t  out.flush();\n+\t  flush();\n+      }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n       }\n     catch (IOException e)\n       {\n@@ -278,18 +272,24 @@ public void write (byte[] buffer, int offset, int count)\n       {\n \tout.write(buffer, offset, count);\n \tif (auto_flush)\n-\t  out.flush();\n+\t  flush();\n+      }\n+    catch (InterruptedIOException iioe)\n+      {\n+\tThread.currentThread().interrupt();\n       }\n     catch (IOException e)\n       {\n \tsetError ();\n       }\n   }\n \n-  BufferedOutputStream out;\n   UnicodeToBytes converter;\n \n+  // Work buffer of characters for converter.\n   char[] work = new char[100];\n+  // Work buffer of bytes where we temporarily keep converter output.\n+  byte[] work_bytes = new byte[100];\n \n   // True if error occurred.\n   private boolean error;"}]}