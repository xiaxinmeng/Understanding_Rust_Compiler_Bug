{"sha": "c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlNWRlMWIxYWYxYjMzYWNiYmU1YTIyNzFmZjM3NDA1ZDFkMTdiNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-21T08:06:06Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-21T08:06:06Z"}, "message": "re PR target/54236 ([SH] Improve addc and subc insn utilization)\n\ngcc/\n        PR target/54236\n        * config/sh/sh.md (*addc_r_1): Rename to addc_t_r.  Remove empty\n        constraints.\n        (*addc_r_t): Add new insn_and_split.\n\ngcc/testsuite/\n        PR target/54236\n        * gcc.target/sh/pr54236-3.c: New.\n\nFrom-SVN: r210682", "tree": {"sha": "dd5b8b640423eb178d547c1a5e4da925bd8c59a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd5b8b640423eb178d547c1a5e4da925bd8c59a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/comments", "author": null, "committer": null, "parents": [{"sha": "decaaec8116ffefcc2a260185c133333834eb083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/decaaec8116ffefcc2a260185c133333834eb083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/decaaec8116ffefcc2a260185c133333834eb083"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "e2e3dd379acd9ecff5008f6d4f4e65fee0cf913c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "patch": "@@ -1,3 +1,10 @@\n+2014-05-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54236\n+\t* config/sh/sh.md (*addc_r_1): Rename to addc_t_r.  Remove empty\n+\tconstraints.\n+\t(*addc_r_t): Add new insn_and_split.\n+\n 2014-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/61252"}, {"sha": "d998af96ec831ddaf89a59d79de93707e1ba4b74", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "patch": "@@ -1830,6 +1830,8 @@\n ;; We allow a reg or 0 for one of the operands in order to be able to\n ;; do 'reg + T' sequences.  Reload will load the constant 0 into the reg\n ;; as needed.\n+;; FIXME: The load of constant 0 should be split out before reload, or else\n+;; it will be difficult to hoist or combine the constant load.\n (define_insn \"*addc\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"arith_reg_operand\" \"%0\")\n@@ -1898,10 +1900,10 @@\n ;; can be scheduled much better since the load of the constant can be\n ;; done earlier, before any comparison insns that store the result in\n ;; the T bit.\n-(define_insn_and_split \"*addc_r_1\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"t_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"arith_reg_operand\" \"\")))\n+(define_insn_and_split \"*addc_t_r\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(plus:SI (match_operand:SI 1 \"t_reg_operand\")\n+\t\t (match_operand:SI 2 \"arith_reg_operand\")))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_SH1\"\n   \"#\"\n@@ -1911,6 +1913,19 @@\n \t\t\t    (match_dup 1)))\n \t      (clobber (reg:SI T_REG))])])\n \n+(define_insn_and_split \"*addc_r_t\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\")\n+\t(plus:SI (match_operand:SI 1 \"arith_reg_operand\")\n+\t\t (match_operand:SI 2 \"t_reg_operand\")))\n+   (clobber (reg:SI T_REG))]\n+  \"TARGET_SH1\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (plus:SI (plus:SI (match_dup 1) (const_int 0))\n+\t\t\t    (match_dup 2)))\n+\t      (clobber (reg:SI T_REG))])])\n+\n ;; Use shlr-addc to do 'reg + (reg & 1)'.\n (define_insn_and_split \"*addc_r_lsb\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\")"}, {"sha": "802f6545c7412a7fa6d97ea1fe6820c1453f09f1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "patch": "@@ -1,3 +1,8 @@\n+2014-05-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54236\n+\t* gcc.target/sh/pr54236-3.c: New.\n+\n 2014-05-21  Igor Zamyatin  <igor.zamyatin@intel.com>\n \n \tPR c++/60189"}, {"sha": "fc0d111a9e9dba79ec23c7a4c0a35bc7a51baaf7", "filename": "gcc/testsuite/gcc.target/sh/pr54236-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54236-3.c?ref=c4e5de1b1af1b33acbbe5a2271ff37405d1d17b5", "patch": "@@ -0,0 +1,31 @@\n+/* Tests to check the utilization of the addc and subc instructions.\n+   If everything works as expected we won't see any movt instructions in\n+   these cases.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n+/* { dg-final { scan-assembler-times \"addc\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subc\" 1 } } */\n+/* { dg-final { scan-assembler-not \"movt\" } } */\n+\n+int\n+test_000 (int* x, unsigned int c)\n+{\n+  /* 1x addc  */\n+  int s = 0;\n+  unsigned int i;\n+  for (i = 0; i < c; ++i)\n+    s += ! (x[i] & 0x3000);\n+  return s;\n+}\n+\n+int\n+test_001 (int* x, unsigned int c)\n+{\n+  /* 1x subc  */\n+  int s = 0;\n+  unsigned int i;\n+  for (i = 0; i < c; ++i)\n+    s -= ! (x[i] & 0x3000);\n+  return s;\n+}"}]}