{"sha": "a1340af76f9d389c82a39326c619c859f634aa04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEzNDBhZjc2ZjlkMzg5YzgyYTM5MzI2YzYxOWM4NTlmNjM0YWEwNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2005-09-01T07:06:05Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2005-09-01T07:06:05Z"}, "message": "libstdc++.exp (check_v3_target_cxa_atexit): New.\n\n\n2005-09-01  Benjamin Kosnik  <bkoz@redhat.com>\n\n        * testsuite/lib/libstdc++.exp (check_v3_target_cxa_atexit): New.\n        * testsuite/lib/dg-options.exp (dg-require-cxa-atexit): New.\n        * testsuite/ext/mt_allocator/deallocate_local-6.cc: New.\n        * testsuite/ext/mt_allocator/deallocate_local-8.cc: New.\n        * testsuite/ext/mt_allocator/deallocate_local_thread-5.cc: New.\n        * testsuite/ext/mt_allocator/deallocate_local_thread-7.cc: New.\n        * docs/html/ext/mt_allocator.html: Add link to examples.\n        * testsuite/testsuite_allocator.h: Tweak.\n        * testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_local-2.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Same.\n        * testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n        * testsuite/ext/new_allocator/deallocate_global.cc: Same.\n        * testsuite/ext/new_allocator/deallocate_local.cc: Same.\n\nFrom-SVN: r103721", "tree": {"sha": "5268bad02ef10c7acf67c6ce814a3ab31fc5ef53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5268bad02ef10c7acf67c6ce814a3ab31fc5ef53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1340af76f9d389c82a39326c619c859f634aa04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1340af76f9d389c82a39326c619c859f634aa04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1340af76f9d389c82a39326c619c859f634aa04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1340af76f9d389c82a39326c619c859f634aa04/comments", "author": null, "committer": null, "parents": [{"sha": "95c37cdb41412007974489bb5910372ee4186ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c37cdb41412007974489bb5910372ee4186ee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c37cdb41412007974489bb5910372ee4186ee9"}], "stats": {"total": 698, "additions": 553, "deletions": 145}, "files": [{"sha": "f5f792298c66e864d6fadda4ceae5d6093271154", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,3 +1,24 @@\n+2005-09-01  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+        * testsuite/lib/libstdc++.exp (check_v3_target_cxa_atexit): New.\n+        * testsuite/lib/dg-options.exp (dg-require-cxa-atexit): New.\n+        * testsuite/ext/mt_allocator/deallocate_local-6.cc: New.\n+        * testsuite/ext/mt_allocator/deallocate_local-8.cc: New.\n+        * testsuite/ext/mt_allocator/deallocate_local_thread-5.cc: New.\n+        * testsuite/ext/mt_allocator/deallocate_local_thread-7.cc: New.\n+        * docs/html/ext/mt_allocator.html: Add link to examples.\n+        * testsuite/testsuite_allocator.h: Tweak.\n+        * testsuite/ext/mt_allocator/deallocate_global-2.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_global-4.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_global_thread-1.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_global_thread-3.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_local-2.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_local-4.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_local_thread-1.cc: Same.\n+        * testsuite/ext/mt_allocator/deallocate_local_thread-3.cc: Same.\n+        * testsuite/ext/new_allocator/deallocate_global.cc: Same.\n+        * testsuite/ext/new_allocator/deallocate_local.cc: Same.\n+\n 2005-08-31  Paolo Carlini  <pcarlini@suse.de>\n \t    Kaspar Fischer <fischerk@inf.ethz.ch> \n "}, {"sha": "e91760e8b4863af042742f61607b226794268772", "filename": "libstdc++-v3/docs/html/ext/mt_allocator.html", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -40,8 +40,8 @@ <h3 class=\"left\">\n allocator\"] is a fixed size (power of two) allocator that was\n initially developed specifically to suit the needs of multi threaded\n applications [hereinafter referred to as an MT application]. Over time\n-the allocator has evolved and been improved in many ways, one of the\n-being that it now also does a good job in single threaded applications\n+the allocator has evolved and been improved in many ways, in\n+particular it now also does a good job in single threaded applications\n [hereinafter referred to as a ST application]. (Note: In this\n document, when referring to single threaded applications this also\n includes applications that are compiled with gcc without thread\n@@ -67,13 +67,14 @@ <h3 class=\"left\">\n </p>\n \n <p>The datum describing pools characteristics is \n-<pre>\n-  template&lt;bool _Thread&gt;\n-    class __pool\n-</pre>\n+ <pre>\n+   template&lt;bool _Thread&gt;\n+     class __pool\n+ </pre>\n This class is parametrized on thread support, and is explicitly\n specialized for both multiple threads (with <code>bool==true</code>)\n-and single threads (via <code>bool==false</code>.)\n+and single threads (via <code>bool==false</code>.) It is possible to\n+use a custom pool datum instead of the default class that is provided.\n </p>\n \n <p> There are two distinct policy classes, each of which can be used\n@@ -280,9 +281,10 @@ <h3 class=\"left\">\n valgrind or purify may notice leaks: sorry about this\n inconvenience. Operating systems will reclaim allocated memory at\n program termination anyway. If sidestepping this kind of noise is\n-desired, there are two options: use an allocator, like\n-<code>new_allocator</code> that releases memory while debugging, or\n-use GLIBCXX_FORCE_NEW to bypass the allocator's internal pools.</p>\n+desired, there are three options: use an allocator, like\n+<code>new_allocator</code> that releases memory while debugging, use\n+GLIBCXX_FORCE_NEW to bypass the allocator's internal pools, or use a\n+custom pool datum that releases resources on destruction.</p>\n \n <p>On systems with the function <code>__cxa_atexit</code>, the\n allocator can be forced to free all memory allocated before program\n@@ -297,7 +299,10 @@ <h3 class=\"left\">\n that uses it is fully constructed. For most (but not all) STL\n containers, this works, as an instance of the allocator is constructed\n as part of a container's constructor. However, this assumption is\n-implementation-specific, and subject to change.\n+implementation-specific, and subject to change. For an example of a\n+pool that frees memory, see the following\n+    <a href=\"http://gcc.gnu.org/cgi-bin/cvsweb.cgi/gcc/libstdc%2b%2b-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc\"> \n+    example.</a>\n </p>\n \n <h3 class=\"left\">"}, {"sha": "f04307d4f57b8cf20f3c556081f46b972fa892f2", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-2.cc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-2.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,24 +23,24 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n  \n-// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -59,11 +59,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef std::string value_type;\n@@ -74,7 +69,6 @@ typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::char_traits<value_type> traits_type;\n typedef std::list<value_type, allocator_type> list_type;\n \n-// Second.\n list_type l;\n \n int main()"}, {"sha": "c586903783e4f1ac68bdfaa46943cdcfb795f6e7", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global-4.cc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global-4.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,24 +23,24 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n  \n-// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -59,11 +59,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef std::string value_t;\n@@ -74,7 +69,6 @@ typedef __gnu_cxx::__mt_alloc<value_t, policy_type> allocator_type;\n typedef std::char_traits<value_t> traits_type;\n typedef std::list<value_t, allocator_type> list_type;\n \n-// Second.\n list_type l;\n \n int main()"}, {"sha": "aee49f822c473aa91218879ab2413320a8b23e78", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-1.cc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-1.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,24 +23,24 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n  \n-// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -59,11 +59,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef std::string value_type;\n@@ -74,7 +69,6 @@ typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::char_traits<value_type> traits_type;\n typedef std::list<value_type, allocator_type> list_type;\n \n-// Second.\n list_type l;\n \n int main()"}, {"sha": "0f3174c71e0a0c53ef030b1a9e2330df51afbb47", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_global_thread-3.cc", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_global_thread-3.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,24 +23,24 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n  \n-// First.\n static count_check check;\n \n void* operator new(size_t size) throw(std::bad_alloc)\n@@ -59,11 +59,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef std::string value_type;\n@@ -74,7 +69,6 @@ typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n typedef std::char_traits<value_type> traits_type;\n typedef std::list<value_type, allocator_type> list_type;\n \n-// Second.\n list_type l;\n \n int main()"}, {"sha": "40b30e3b442b9ddc3f2374b31629c40d8d1f9cdf", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-2.cc", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-2.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,19 +22,20 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n@@ -57,11 +58,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef char value_type;\n@@ -73,10 +69,7 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-  {\n-    string_type s;\n-    s += \"bayou bend\";\n-  }\n+  string_type s;\n+  s += \"bayou bend\";\n   return 0;\n }"}, {"sha": "ef124bf687fbbbf3bf185cf54d6324f701de1cdb", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-4.cc", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-4.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,19 +22,20 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n       }\n   }\n };\n@@ -57,11 +58,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef char value_type;\n@@ -74,10 +70,7 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-  {\n-    string_type s;\n-    s += \"bayou bend\";\n-  }\n+  string_type s;\n+  s += \"bayou bend\";\n   return 0;\n }"}, {"sha": "66ad3063cce91e8ee35f5adfc5ab28cca86979a0", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-6.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-6.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -0,0 +1,86 @@\n+// { dg-require-cxa-atexit \"\" }\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <string>\n+#include <stdexcept>\n+#include <ext/mt_allocator.h>\n+\n+static size_t count;\n+\n+struct count_check\n+{\n+  count_check() { }\n+  ~count_check()\n+  {\n+    // NB: Using a pool that attempts to clean up resource use.\n+    if (count != 0)\n+      {\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n+\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n+      }\n+  }\n+};\n+ \n+static count_check check;\n+\n+void* operator new(size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  count++;\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p == NULL)\n+    return;\n+  count--;\n+}\n+\n+template<bool _Thread>\n+  struct cleanup_pool : public __gnu_cxx::__pool<false>\n+  {\n+    cleanup_pool() : __gnu_cxx::__pool<false>() { }\n+\n+    cleanup_pool(const __gnu_cxx::__pool_base::_Tune& t) \n+    : __gnu_cxx::__pool<false>(t) { }\n+\n+    ~cleanup_pool() throw() { this->_M_destroy(); }\n+  };\n+\n+\n+typedef char value_type;\n+typedef std::char_traits<value_type> traits_type;\n+typedef __gnu_cxx::__common_pool_policy<cleanup_pool, false> policy_type;\n+typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n+\n+int main()\n+{\n+  string_type s;\n+  s += \"bayou bend\";\n+  return 0;\n+}"}, {"sha": "49b6fdcbdd591d223ea3c0ce59f0eb3abb2ee08e", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local-8.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local-8.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -0,0 +1,87 @@\n+// { dg-require-cxa-atexit \"\" }\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <string>\n+#include <stdexcept>\n+#include <ext/mt_allocator.h>\n+\n+static size_t count;\n+\n+struct count_check\n+{\n+  count_check() { }\n+  ~count_check()\n+  {\n+    // NB: Using a pool that attempts to clean up resource use.\n+    if (count != 0)\n+      {\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n+\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n+      }\n+  }\n+};\n+ \n+static count_check check;\n+\n+void* operator new(size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  count++;\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p == NULL)\n+    return;\n+  count--;\n+}\n+\n+template<bool _Thread>\n+  struct cleanup_pool : public __gnu_cxx::__pool<false>\n+  {\n+    cleanup_pool() : __gnu_cxx::__pool<false>() { }\n+\n+    cleanup_pool(const __gnu_cxx::__pool_base::_Tune& t) \n+    : __gnu_cxx::__pool<false>(t) { }\n+\n+    ~cleanup_pool() throw() { this->_M_destroy(); }\n+  };\n+\n+typedef char value_type;\n+typedef std::char_traits<value_type> traits_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__per_type_pool_policy;\n+typedef __per_type_pool_policy<value_type, cleanup_pool, false> policy_type;\n+typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n+\n+int main()\n+{\n+  string_type s;\n+  s += \"bayou bend\";\n+  return 0;\n+}"}, {"sha": "445bf1901ee151d53de395d594042b569060da35", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-1.cc", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-1.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,19 +22,20 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n@@ -57,11 +58,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef char value_type;\n@@ -73,10 +69,7 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-  {\n-    string_type s;\n-    s += \"bayou bend\";\n-  }\n+  string_type s;\n+  s += \"bayou bend\";\n   return 0;\n }"}, {"sha": "3d923d6146b0b02cb6e27cda93b77d0f8fa4f0f7", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-3.cc", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-3.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,19 +22,20 @@\n #include <string>\n #include <stdexcept>\n #include <ext/mt_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n+    // NB: __mt_allocator doesn't clean itself up. Thus, this will not\n+    // be zero.\n     if (count != 0)\n       {\n-\t// NB: __mt_allocator doesn't clean itself up. Thus, this will\n-\t// not be zero.\n+\t//throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n       }\n   }\n };\n@@ -57,11 +58,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef char value_type;\n@@ -74,10 +70,7 @@ typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-  {\n-    string_type s;\n-    s += \"bayou bend\";\n-  }\n+  string_type s;\n+  s += \"bayou bend\";\n   return 0;\n }"}, {"sha": "244bae02fa017b194bf43e399b11db206bd53f25", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-5.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-5.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -0,0 +1,86 @@\n+// { dg-require-cxa-atexit \"\" }\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <string>\n+#include <stdexcept>\n+#include <ext/mt_allocator.h>\n+\n+static size_t count;\n+\n+struct count_check\n+{\n+  count_check() { }\n+  ~count_check()\n+  {\n+    // NB: Using a pool that attempts to clean up resource use.\n+    if (count != 0)\n+      {\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n+\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n+      }\n+  }\n+};\n+ \n+static count_check check;\n+\n+void* operator new(size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  count++;\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p == NULL)\n+    return;\n+  count--;\n+}\n+\n+template<bool _Thread>\n+  struct cleanup_pool : public __gnu_cxx::__pool<true>\n+  {\n+    cleanup_pool() : __gnu_cxx::__pool<true>() { }\n+\n+    cleanup_pool(const __gnu_cxx::__pool_base::_Tune& t) \n+    : __gnu_cxx::__pool<true>(t) { }\n+\n+    ~cleanup_pool() throw() { this->_M_destroy(); }\n+  };\n+\n+\n+typedef char value_type;\n+typedef std::char_traits<value_type> traits_type;\n+typedef __gnu_cxx::__common_pool_policy<cleanup_pool, true> policy_type;\n+typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n+\n+int main()\n+{\n+  string_type s;\n+  s += \"bayou bend\";\n+  return 0;\n+}"}, {"sha": "55ff20aa78ffc26fc4ee7dfcb22ab10445696899", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/deallocate_local_thread-7.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fdeallocate_local_thread-7.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -0,0 +1,87 @@\n+// { dg-require-cxa-atexit \"\" }\n+\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <string>\n+#include <stdexcept>\n+#include <ext/mt_allocator.h>\n+\n+static size_t count;\n+\n+struct count_check\n+{\n+  count_check() { }\n+  ~count_check()\n+  {\n+    // NB: Using a pool that attempts to clean up resource use.\n+    if (count != 0)\n+      {\n+\tprintf(\"allocation/deallocation count is %zu \\n\", count);\n+\tthrow std::runtime_error(\"allocation/deallocation count isn't zero\");\n+      }\n+  }\n+};\n+ \n+static count_check check;\n+\n+void* operator new(size_t size) throw(std::bad_alloc)\n+{\n+  printf(\"operator new is called \\n\");\n+  void* p = malloc(size);\n+  if (p == NULL)\n+    throw std::bad_alloc();\n+  count++;\n+  return p;\n+}\n+ \n+void operator delete(void* p) throw()\n+{\n+  printf(\"operator delete is called \\n\");\n+  if (p == NULL)\n+    return;\n+  count--;\n+}\n+\n+template<bool _Thread>\n+  struct cleanup_pool : public __gnu_cxx::__pool<true>\n+  {\n+    cleanup_pool() : __gnu_cxx::__pool<true>() { }\n+\n+    cleanup_pool(const __gnu_cxx::__pool_base::_Tune& t) \n+    : __gnu_cxx::__pool<true>(t) { }\n+\n+    ~cleanup_pool() throw() { this->_M_destroy(); }\n+  };\n+\n+typedef char value_type;\n+typedef std::char_traits<value_type> traits_type;\n+using __gnu_cxx::__pool;\n+using __gnu_cxx::__per_type_pool_policy;\n+typedef __per_type_pool_policy<value_type, cleanup_pool, true> policy_type;\n+typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n+typedef std::basic_string<value_type, traits_type, allocator_type> string_type;\n+\n+int main()\n+{\n+  string_type s;\n+  s += \"bayou bend\";\n+  return 0;\n+}"}, {"sha": "170737db3f4fa2fdfbe9cca50b531748d0300ba4", "filename": "libstdc++-v3/testsuite/ext/new_allocator/deallocate_global.cc", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_global.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_global.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_global.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,17 +22,16 @@\n #include <string>\n #include <stdexcept>\n #include <ext/new_allocator.h>\n-#include <testsuite_hooks.h>\n \n static size_t count;\n \n struct count_check\n {\n-  count_check() {}\n+  count_check() { }\n   ~count_check()\n   {\n     if (count != 0)\n-      throw std::runtime_error(\"count isn't zero\");\n+      throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n   }\n };\n  \n@@ -54,11 +53,6 @@ void operator delete(void* p) throw()\n   if (p == NULL)\n     return;\n   count--;\n-  if (count == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", count);\n-  free(p);\n }\n \n typedef char char_t;"}, {"sha": "6512f2e8ed11ebd67bd6ede11ff25db301d87eb1", "filename": "libstdc++-v3/testsuite/ext/new_allocator/deallocate_local.cc", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_local.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_local.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fdeallocate_local.cc?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -1,5 +1,5 @@\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,18 +20,30 @@\n // 20.4.1.1 allocator members\n \n #include <string>\n+#include <stdexcept>\n #include <ext/new_allocator.h>\n-#include <testsuite_hooks.h>\n \n-static size_t alloc_cnt;\n+static size_t count;\n+\n+struct count_check\n+{\n+  count_check() { }\n+  ~count_check()\n+  {\n+    if (count != 0)\n+      throw std::runtime_error(\"allocation/deallocation count isn't zero\");\n+  }\n+};\n  \n+static count_check check;\n+\n void* operator new(size_t size) throw(std::bad_alloc)\n {\n   printf(\"operator new is called \\n\");\n   void* p = malloc(size);\n   if (p == NULL)\n     throw std::bad_alloc();\n-  alloc_cnt++;\n+  count++;\n   return p;\n }\n  \n@@ -40,12 +52,7 @@ void operator delete(void* p) throw()\n   printf(\"operator delete is called \\n\");\n   if (p == NULL)\n     return;\n-  alloc_cnt--;\n-  if (alloc_cnt == 0)\n-    printf(\"All memory released \\n\");\n-  else\n-    printf(\"%u allocations to be released \\n\", alloc_cnt);\n-  free(p);\n+  count--;\n }\n \n typedef char char_t;\n@@ -55,11 +62,7 @@ typedef std::basic_string<char_t, traits_t, allocator_t> string_t;\n \n int main()\n {\n-  bool test __attribute__((unused)) = true;\n-  {\n-    string_t s;\n-    s += \"bayou bend\";\n-  }\n-  VERIFY( alloc_cnt == 0 );\n+  string_t s;\n+  s += \"bayou bend\";\n   return 0;\n }"}, {"sha": "05d2ff38ba2a6537aa8859804ddf3bf53c36ce3c", "filename": "libstdc++-v3/testsuite/lib/dg-options.exp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Fdg-options.exp?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -35,3 +35,12 @@ proc dg-require-namedlocale { args } {\n     }\n     return\n }\n+\n+proc dg-require-cxa-atexit { args } {\n+    if { ![ check_v3_target_cxa_atexit ] } {\n+\tupvar dg-do-what dg-do-what\n+\tset dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n+\treturn\n+    }\n+    return\n+}"}, {"sha": "b757b5835b87674eaca8b0c0a4a7599fac504910", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -454,3 +454,86 @@ proc check_v3_target_namedlocale { } {\n     }\n     return $et_namedlocale_saved\n }\n+\n+proc check_v3_target_cxa_atexit { } {\n+    global et_cxa_atexit\n+    global et_cxa_atexit_target_name\n+    global tool\t\n+\n+    if { ![info exists et_cxa_atexit_target_name] } {\n+\tset et_cxa_atexit_target_name \"\"\n+    }\n+\n+    # If the target has changed since we set the cached value, clear it.\n+    set current_target [current_target_name]\n+    if { $current_target != $et_cxa_atexit_target_name } {\n+\tverbose \"check_v3_target_cxa_atexit: `$et_cxa_atexit_target_name'\" 2\n+\tset et_cxa_atexit_target_name $current_target\n+\tif [info exists et_cxa_atexit] {\n+\t    verbose \"check_v3_target_cxa_atexit: removing cached result\" 2\n+\t    unset et_cxa_atexit\n+\t}\n+    }\n+\n+    if [info exists et_cxa_atexit] {\n+\tverbose \"check_v3_target_cxa_atexit: using cached result\" 2\n+    } else {\n+\tset et_cxa_atexit 0\n+\n+\t# Set up, compile, and execute a C++ test program that tries to use\n+\t# all the required named locales.\n+\tset src cxaatexit[pid].cc\n+\tset exe cxaatexit[pid].x\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include <stdlib.h>\"\n+\tputs $f \"static unsigned int count;\"\n+\tputs $f \"struct X\"\n+\tputs $f \"{\"\n+\tputs $f \"X() { count = 1; }\"\n+\tputs $f \"~X()\"\n+\tputs $f \"{\"\n+\tputs $f \"  if (count != 3)\"\n+\tputs $f \"    exit(1);\"\n+\tputs $f \"  count = 4;\"\n+        puts $f \"}\"\n+        puts $f \"};\"\n+\tputs $f \"void f()\"\n+\tputs $f \"{\"\n+\tputs $f \"static X x;\"\n+        puts $f \"}\"\n+\tputs $f \"struct Y\"\n+\tputs $f \"{\"\n+\tputs $f \"Y() { f(); count = 2; }\"\n+\tputs $f \"~Y()\"\n+\tputs $f \"{\"\n+\tputs $f \"if (count != 2)\"\n+\tputs $f \"  exit(1);\"\n+\tputs $f \"count = 3;\"\n+        puts $f \"}\"\n+        puts $f \"};\"\n+\tputs $f \"Y y;\"\n+\tputs $f \"int main()\"\n+\tputs $f \"{ return 0; }\"\n+\tclose $f\n+\n+\tset lines [v3_target_compile $src $exe executable \"\"]\n+\tfile delete $src\n+\n+\tif [string match \"\" $lines] {\n+\t    # No error message, compilation succeeded.\n+\t    set result [${tool}_load \"./$exe\" \"\" \"\"]\n+\t    set status [lindex $result 0]\n+\t    remote_file build delete $exe\n+\n+\t    verbose \"check_v3_target_cxa_atexit: status is <$status>\" 2\n+\n+\t    if { $status == \"pass\" } {\n+\t\tset et_cxa_atexit 1\n+\t    }\n+\t} else {\n+\t    verbose \"check_v3_target_cxa_atexit: compilation failed\" 2\n+\t}\n+    }\n+    return $et_cxa_atexit\n+}"}, {"sha": "f71a07927dab1084d4cd7bbd4cb90cec234ea580", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1340af76f9d389c82a39326c619c859f634aa04/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=a1340af76f9d389c82a39326c619c859f634aa04", "patch": "@@ -229,7 +229,6 @@ namespace __gnu_test\n \t}\n       throw;\n     }\n-\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H"}]}