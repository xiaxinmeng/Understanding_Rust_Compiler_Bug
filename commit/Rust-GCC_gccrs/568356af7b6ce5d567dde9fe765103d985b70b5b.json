{"sha": "568356af7b6ce5d567dde9fe765103d985b70b5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4MzU2YWY3YjZjZTVkNTY3ZGRlOWZlNzY1MTAzZDk4NWI3MGI1Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-17T21:43:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-04-17T21:43:26Z"}, "message": "(reg_last_set_label, reg_last_set_table_tick, label_tick): Use int,\n\nnot short, for counting labels.\n(combine_instructions): Allocate these vars as arrays of ints.\n\nFrom-SVN: r4175", "tree": {"sha": "8d115203cda95f373db00d0416e48da0dba926ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d115203cda95f373db00d0416e48da0dba926ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/568356af7b6ce5d567dde9fe765103d985b70b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568356af7b6ce5d567dde9fe765103d985b70b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568356af7b6ce5d567dde9fe765103d985b70b5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568356af7b6ce5d567dde9fe765103d985b70b5b/comments", "author": null, "committer": null, "parents": [{"sha": "6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac271be95e98d64ccbf78095cfb3e309fcce7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac271be95e98d64ccbf78095cfb3e309fcce7c6"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "80eeee033f8ea2c97848deb10835d6145467dd18", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/568356af7b6ce5d567dde9fe765103d985b70b5b/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/568356af7b6ce5d567dde9fe765103d985b70b5b/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=568356af7b6ce5d567dde9fe765103d985b70b5b", "patch": "@@ -237,12 +237,12 @@ static rtx *reg_last_set_value;\n /* Record the value of label_tick when the value for register n is placed in\n    reg_last_set_value[n].  */\n \n-static short *reg_last_set_label;\n+static int *reg_last_set_label;\n \n /* Record the value of label_tick when an expression involving register n\n    is placed in reg_last_set_value. */\n \n-static short *reg_last_set_table_tick;\n+static int *reg_last_set_table_tick;\n \n /* Set non-zero if references to register n in expressions should not be\n    used.  */\n@@ -251,7 +251,7 @@ static char *reg_last_set_invalid;\n \n /* Incremented for each label. */\n \n-static short label_tick;\n+static int label_tick;\n \n /* Some registers that are set more than once and used in more than one\n    basic block are nevertheless always set in similar ways.  For example,\n@@ -424,8 +424,8 @@ combine_instructions (f, nregs)\n   reg_last_death = (rtx *) alloca (nregs * sizeof (rtx));\n   reg_last_set = (rtx *) alloca (nregs * sizeof (rtx));\n   reg_last_set_value = (rtx *) alloca (nregs * sizeof (rtx));\n-  reg_last_set_table_tick = (short *) alloca (nregs * sizeof (short));\n-  reg_last_set_label = (short *) alloca (nregs * sizeof (short));\n+  reg_last_set_table_tick = (int *) alloca (nregs * sizeof (int));\n+  reg_last_set_label = (int *) alloca (nregs * sizeof (int));\n   reg_last_set_invalid = (char *) alloca (nregs * sizeof (char));\n   reg_last_set_mode\n     = (enum machine_mode *) alloca (nregs * sizeof (enum machine_mode));\n@@ -441,8 +441,8 @@ combine_instructions (f, nregs)\n   bzero (reg_last_death, nregs * sizeof (rtx));\n   bzero (reg_last_set, nregs * sizeof (rtx));\n   bzero (reg_last_set_value, nregs * sizeof (rtx));\n-  bzero (reg_last_set_table_tick, nregs * sizeof (short));\n-  bzero (reg_last_set_label, nregs * sizeof (short));\n+  bzero (reg_last_set_table_tick, nregs * sizeof (int));\n+  bzero (reg_last_set_label, nregs * sizeof (int));\n   bzero (reg_last_set_invalid, nregs * sizeof (char));\n   bzero (reg_last_set_mode, nregs * sizeof (enum machine_mode));\n   bzero (reg_last_set_nonzero_bits, nregs * sizeof (HOST_WIDE_INT));\n@@ -508,8 +508,8 @@ combine_instructions (f, nregs)\n   bzero (reg_last_death, nregs * sizeof (rtx));\n   bzero (reg_last_set, nregs * sizeof (rtx));\n   bzero (reg_last_set_value, nregs * sizeof (rtx));\n-  bzero (reg_last_set_table_tick, nregs * sizeof (short));\n-  bzero (reg_last_set_label, nregs * sizeof (short));\n+  bzero (reg_last_set_table_tick, nregs * sizeof (int));\n+  bzero (reg_last_set_label, nregs * sizeof (int));\n   bzero (reg_last_set_invalid, nregs * sizeof (char));\n \n   setup_incoming_promotions ();"}]}