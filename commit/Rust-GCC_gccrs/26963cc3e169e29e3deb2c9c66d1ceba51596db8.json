{"sha": "26963cc3e169e29e3deb2c9c66d1ceba51596db8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5NjNjYzNlMTY5ZTI5ZTNkZWIyYzljNjZkMWNlYmE1MTU5NmRiOA==", "commit": {"author": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "1998-05-27T23:00:37Z"}, "committer": {"name": "Robert Lipe", "email": "robertl@gcc.gnu.org", "date": "1998-05-27T23:00:37Z"}, "message": "Addition of a whole slew of \"eb\" test cases generated from the egcs-bugs mailing lists.\n\nAddition of a whole slew of \"eb\" test cases generated from the egcs-bugs\nmailing lists.     See g++.robertl/README\n\nFrom-SVN: r20107", "tree": {"sha": "571db4ad79180858b47e7ce99ff6d3797f40496a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/571db4ad79180858b47e7ce99ff6d3797f40496a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26963cc3e169e29e3deb2c9c66d1ceba51596db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26963cc3e169e29e3deb2c9c66d1ceba51596db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26963cc3e169e29e3deb2c9c66d1ceba51596db8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26963cc3e169e29e3deb2c9c66d1ceba51596db8/comments", "author": null, "committer": null, "parents": [{"sha": "5bc80b30dfb404c576343eac379e72425bb58267", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bc80b30dfb404c576343eac379e72425bb58267", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bc80b30dfb404c576343eac379e72425bb58267"}], "stats": {"total": 8365, "additions": 8365, "deletions": 0}, "files": [{"sha": "07bd8dcbb480e5feff335816fe250d7dfd941e3f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/980310-1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-1.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,43 @@\n+// Special g++ Options: -g\n+// Internal compiler error on egcs 1.0.1 i586-pc-linux-gnulibc1. \n+// From: Max Lawson <mlawson@drfmc.ceng.cea.fr>\n+// Message-Id: <9803091022.AA07520@drfmc.ceng.cea.fr>\n+\n+\n+typedef unsigned int size_t;\n+\n+struct dummy { };\n+\n+struct arrrrrgh { };\n+\n+template<class Par,class Rand = arrrrrgh>\n+struct whyyyyyyy { };\t \n+\n+template<class T, class S =dummy> \n+struct grrrrrrrr { };         \n+\n+template<class Par, class Par2 =Par, class Rand =arrrrrgh>\n+class no_future\n+{\n+public:\n+   \n+  template<class S>\n+  no_future(const grrrrrrrr<whyyyyyyy<Par,Rand>*,S>& man )  { }\n+\n+  ~no_future( ) { }\n+\n+private:\n+\n+  no_future(const no_future&);\n+  no_future& operator=(const no_future&);\n+};\t \n+\n+int main( )\n+{\n+  grrrrrrrr<whyyyyyyy<double>*> man;\n+\n+  no_future<double> here(man);\n+\n+  return 0;\n+}\n+"}, {"sha": "62c152f37a5b195ec20d0dd0d05f16aa848eeba7", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/980310-2.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-2.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,33 @@\n+// float mismatch.  Abors on i586-pc-linux-gnulibc1 with egcs 1.0.1\n+// Should run smoothly. Aborts on i586-pc-linux-gnulibc1\n+// From: Max Lawson <mlawson@drfmc.ceng.cea.fr>\n+// Message-Id: <9803091022.AA07520@drfmc.ceng.cea.fr>\n+\n+#include <cstdlib>\n+\n+void f(double j, double& v)\n+{\n+  size_t sz = size_t(2*j+1);\n+  double norm_ = j*(j+1);\n+  double m = j;\n+  int sign_ = -1;\n+  for (size_t c=1;c<=sz;++c)\n+    for (size_t r=1;r<=sz;++r)\n+      if (r+sign_*1 == c)\n+        {\n+          double val = (norm_-m*(m+sign_));\n+          for (size_t k=1;k<2;++k) \n+            val *= (norm_ - (m+sign_*k)*(m+sign_*(k+1)));\n+          v = val;\n+        }\n+}\n+\n+int main()\n+{\n+  double v;\n+  f(1,v);\n+  if (v != 4) abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "a8c2e1988a9c34df7e727d74c316827dfd00345c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/980310-3.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2F980310-3.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,42 @@\n+// Bug: Segfaults on egcs 1.0.1 i586-pc-linux-glibc1\n+// From: Max Lawson <mlawson@drfmc.ceng.cea.fr>\n+// Message-Id: <9803091022.AA07520@drfmc.ceng.cea.fr>\n+\n+class S0\n+{\n+public:\n+\n+  S0() { };\n+\n+  virtual ~S0() { }\n+};\n+\n+\n+\n+struct S { };\n+class S1 : public S, public S0\n+{ \n+public:\n+\n+  S1() { }\n+};\n+\n+\n+void test_ptr(void *ctxt)\n+{\n+  S0 *ctxt1 = static_cast<S0*>(ctxt);\n+\n+  S1* ctxt2 = dynamic_cast<S1*>(ctxt1);\n+}\n+\n+\n+int main()\n+{\n+  S1 *ctxt = new S1();\n+\n+  test_ptr(ctxt);\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "7da5d7562ee225d0e9353e0876a31a8a8948439a", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb10.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb10.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,30 @@\n+// Build don't link:\n+template <int object_size>\n+class _fixed_size_allocator\n+{\n+  private:\n+\n+    struct      something { };\n+    static something *  asdf;\n+\n+  public:\n+\n+    static void         delete_object ();\n+};\n+\n+\n+template <class T>\n+class object_allocator\n+{\n+  private:\n+\n+    typedef     _fixed_size_allocator<sizeof (T)>               allocator;\n+\n+  public:\n+\n+    static void         deallocate (T * p)\n+    {\n+        allocator::delete_object (reinterpret_cast<void *> (p));\n+    }\n+};\n+"}, {"sha": "fdf73969230e983ed9e6df47e1867ed3cc542111", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb100.C", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb100.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb100.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb100.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,173 @@\n+// Special g++ Options: -Wall\n+\n+#include <list>\n+\n+template < class N, class A >\n+class Base\n+{\n+public:\n+    class NN : public N\n+    {\n+        friend Base<N,A>;\n+        friend ostream& operator<<(ostream &os, const NN& n)\n+        {\n+            n.print(os);\n+            return os;\n+        }\n+    public:\n+        void print(ostream &os) const\n+        {\n+            os << \"Base<N,A>::print()\" << endl;\n+            N::print(os);\n+        }\n+    };\n+\n+    typedef NN*                        NNPtr;\n+    typedef list<NNPtr>                NList;\n+    typedef NList::iterator            n_list_iter;\n+\n+    class n_iter : public n_list_iter \n+    {\n+        friend bool operator<(n_iter a, n_iter b)\n+        {\n+            return (a->ind() < b->ind());\n+        }\n+        friend bool operator>(n_iter a, n_iter b)\n+        {\n+            return (a->ind() > b->ind());\n+        }\n+\n+    public:\n+        n_iter() {}\n+        n_iter(n_list_iter i) : n_list_iter(i) {}\n+        \n+        NN& operator*()\n+            { return *n_list_iter::operator*();};\n+        NN* operator->() \n+            { return n_list_iter::operator*(); }\n+    };\n+private:\n+    NList    ns;\n+    n_iter new_n_aux(NN* nd)\n+    {\n+        ns.push_back(nd);\n+        n_iter  nodi = --ns.end();\n+        return (nodi);\n+    }\n+public:\n+    n_iter new_n()\n+    {\n+        return new_n_aux(new NN());\n+    }\n+    void del_n(n_iter itr) \n+    {\n+        NN* n = itr.operator->();\n+        ns.erase(itr);\n+        delete n;\n+    }\n+    n_iter           beg_n()          {   return (ns.begin()); }\n+    n_iter           end_n()          {   return (ns.end());   }\n+};\n+\n+template <class XN, class XA>\n+class YN : public XN\n+{\n+public:    \n+    YN() {};\n+    void print(ostream& os) const\n+    {\n+        os << \"YN<XN,XA>::print() \" << endl;\n+        XN::print(os);\n+    }\n+    friend ostream& operator<< (ostream& os, const YN& wn)\n+    {\n+        wn.print(os);\n+        return os;\n+    }\n+};\n+\n+template <class XN, class XA>\n+class YA : public XA\n+{\n+public:    \n+    YA() {};\n+    void print(ostream &os) const\n+    {\n+        os << \"YA<XN,XA>::print() \" << endl;\n+        XA::print(os);\n+    }\n+    \n+    friend ostream& operator<<(ostream& os, const YA &wa)\n+    {\n+        wa.print(os);\n+        return os;\n+    }\n+};\n+\n+\n+template<class XN, class XA>\n+class XBase : public Base< YN<XN, XA>, YA<XN, XA> >\n+{\n+public:\n+    typedef     Base< YN<XN,XA>, YA<XN,XA> >    Net;\n+    typedef     Net::n_iter          n_iter;\n+    XBase() {};\n+};\n+\n+\n+class MyClass\n+{\n+public:\n+  struct ZN\n+  {\n+    void print(ostream &os) const\n+      {\n+        os << \"MyClass::ZN::print()\" << endl;\n+      }\n+    inline friend ostream& operator<<(ostream& os, const MyClass::ZN& nd)\n+      {\n+        nd.print(os);\n+        return os;\n+      }\n+  };\n+  struct ZA\n+  {\n+    void print(ostream& os) const\n+      {\n+        os << \"MyClass::ZA::print()\" << endl;\n+      }\n+    inline friend ostream& operator<<(ostream& os, const MyClass::ZA& ar)\n+      {\n+        ar.print(os);\n+        return os;\n+      }\n+  };\n+\n+  typedef XBase<ZN,ZA>                    MyXBase;\n+  typedef MyXBase::n_iter                 my_n_iter;\n+  MyXBase                                 xbase;\n+};\n+\n+main ()\n+{\n+  MyClass mine;\n+  MyClass::my_n_iter  n1, n2, n3, n4;\n+\n+  n1 = mine.xbase.new_n();\n+  n2 = mine.xbase.new_n();\n+  n3 = mine.xbase.new_n();\n+  n4 = mine.xbase.new_n();\n+  \n+  cout << *n1 << endl;\n+  cout << *n2 << endl;\n+  cout << *n3 << endl;\n+  cout << *n4 << endl;\n+  \n+  mine.xbase.del_n(n1);\n+  mine.xbase.del_n(n2);\n+  mine.xbase.del_n(n3);\n+  mine.xbase.del_n(n4);\n+}\n+\n+\n+"}, {"sha": "9d37141f0f8c0201887c58d4dd8632d8e663c407", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb101.C", "status": "added", "additions": 3937, "deletions": 0, "changes": 3937, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb101.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8"}, {"sha": "9bbd47fdb331b0e9ad5c37ca655fc8fb3b2d92a1", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb102.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb102.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb102.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb102.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,34 @@\n+// Error: intenral compiler error on 1998/05/28 snapshot.\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+void evilRises (void **ptr)\n+{\n+    int *pi;\n+\n+    pi = new int;\n+\n+    *pi = 0;\n+\n+    *ptr = (void *)pi;\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+#ifdef WORKAROUND\n+    union foo\n+#else\n+    union\n+#endif\n+    {\n+        int a;\n+        int b;\n+        int c;\n+    } *fred, barney;\n+\n+    evilRises((void **)&fred);\n+\n+    barney = *fred;\n+\n+    return EXIT_SUCCESS;\n+}"}, {"sha": "5bd796a420d02decb59192d271889fd86e4c4947", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb103.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:  \n+// Error: Internal compiler error in 2.7.2 & EGCS 1.0.0\n+\n+template <int nlimb, int i>\n+inline unsigned f (unsigned* ptr);\n+template <int nlimb>\n+inline unsigned f<nlimb,nlimb> (unsigned* ptr)\n+{\n+  return 1;\n+}\n+"}, {"sha": "10c5945bb1540c6bc7a5cc84d16b17963464d10d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb104.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb104.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb104.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb104.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,29 @@\n+#include <string.h>\n+\n+class SomeClass_t {\n+public:\n+    SomeClass_t () : x (11) {}\n+protected:\n+  float x;\n+};\n+\n+class DynamicOnly_t {\n+public:\n+  static DynamicOnly_t* create (const char* name = \"UNDEF\",\n+                                const SomeClass_t& somec = *(new SomeClass_t\n+())) {\n+    return new DynamicOnly_t (name, somec);\n+  }\n+  DynamicOnly_t (const char* name, const SomeClass_t& somec) :\n+    m_somec (somec) {\n+    strncpy (m_Name, name, sizeof (m_Name));\n+  }\n+private:\n+  SomeClass_t m_somec;\n+  char m_Name[255];\n+};\n+\n+int main (int argc, char* argv[]) {\n+  DynamicOnly_t* ptr = DynamicOnly_t::create ();\n+  return 0;\n+}"}, {"sha": "f431fba88d8ad6943e434fe50a10bbc8933f0ae3", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb105.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb105.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb105.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb105.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link: \n+template< class T >\n+void    sort( T* t, int n )\n+        {\n+            struct\n+/*line5*/   {\n+                int     operator()(T i, T j)\n+                        {\n+                            return (i < j) ? -1 : ((j < i) ? 1 : 0) ;\n+                        }\n+            } c ;\n+            sort(t, n, c, 0) ;\n+        }"}, {"sha": "64408de63fdbe3bfde8c4e3a92c648e42cb43fec", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb106.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb106.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb106.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb106.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,36 @@\n+// Special g++ Options: -O2 -fPIC \n+// Build don't link: \n+struct T\n+{\n+\tchar*\tf1;\n+\tint\tf2;\n+};\n+\n+void f(T*);\n+int g();\n+\n+extern char a1[];\n+\n+inline int m(int a, int b) {return b < a ? 2 : 1;}\n+\n+void\n+h()\n+{\n+\tT\ta[10];\n+\tint\ti(0);\n+\n+\tbool\tc;\n+\tif (c)\n+\t{\t\t \n+\t\ta[i++].f1 = \"asf\";\n+\t\tf(a);\n+\t\ti = 0;\n+\t}\n+\n+\ta[i].f1 = &a1[1];\n+\ta[i].f2 = m(1, g());\n+\ti++;\n+\n+\ta[i].f1 = \"zxv\";\n+\ta[i].f2 = 0;\n+}"}, {"sha": "8d0f3cbe5b18bfec605b583eb221864bf443069c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb107.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb107.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb107.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb107.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link: \n+template <class T>\n+struct X\n+{\n+    virtual void f(int) const;\n+};\n+\n+template <class T>\n+struct Y: public X<T>\n+{\n+    virtual void f(int) const;\n+};\n+\n+template <class T>\n+void Y<T>::f(int) const\n+{\n+}\n+\n+template <>\n+void Y<bool>::f(int) const;"}, {"sha": "3bf71b06deec3da80a4f5b5f6040ab45bf322ca4", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb108.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb108.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link: \n+class X\n+{\n+  public:\n+    virtual void f() const = 0;\n+};\n+\n+template <class T>\n+class Y: public X\n+{\n+  public:\n+    virtual void f() const;\n+};\n+\n+template <class T>\n+void Y<T>::f() const\n+{\n+}\n+\n+template <>\n+void Y<bool>::f() const;"}, {"sha": "88bab1e49441d6a995c992a92d8f83b8ae12ab38", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb109.C", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb109.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb109.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb109.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,71 @@\n+#include<map>\n+#include<iostream.h>\n+#include<vector>\n+#include<string>\n+\n+// empty parameter class with a minimal set of operations\n+// if there are no weights for edges necessary\n+struct Empty\n+{\n+  public:\n+    Empty(int=0) {}\n+    bool operator<(const Empty&) const { return true;}\n+};\n+inline ostream& operator<<(ostream& os, const Empty&) { return os;}\n+inline istream& operator>>(istream& is, Empty& ) { return is;}\n+\n+\n+template<class VertexType, class EdgeType>\n+class Graph\n+{\n+  public:\n+    // public type interface\n+    typedef map<int, EdgeType > Successor;\n+    typedef pair<VertexType, Successor> vertex;\n+    typedef vector<vertex> GraphType;\n+    typedef typename GraphType::iterator iterator;\n+    typedef typename GraphType::const_iterator const_iterator;\n+\n+  // a lot of stuff deleted ....\n+\n+  private:\n+    bool directed;\n+    GraphType C;          // container\n+    ostream* pOut;\n+};      // class Graph\n+\n+// all graph-methods delet\n+template<class VertexType, class EdgeType>\n+ostream& operator<<(ostream& os, Graph<VertexType,EdgeType>& G)\n+{\n+    // display of vertices with successors\n+    for(int i = 0; i < G.size(); ++i)\n+    {\n+        os << G[i].first << \" <\";\n+\n+        // The compiler does not like this line!!!!!!\n+        typename Graph<VertexType, EdgeType>::Successor::iterator\n+                   startN = G[i].second.begin(),\n+                   endN   = G[i].second.end();\n+\n+        while(startN != endN)\n+        {\n+            os << G[(*startN).first].first << ' ' // vertex\n+               << (*startN).second << ' ';        // edge value\n+            ++startN;\n+        }\n+        os << \">\\n\";\n+    }\n+    return os;\n+}\n+\n+int main()\n+{\n+    // no edge weighting, therefore type Empty:\n+    Graph<string, Empty> V(true);        // directed\n+    // ReadGraph(V, \"gra1.dat\");\n+\n+    // display of vertices with successors\n+    cout << V;\n+\n+}"}, {"sha": "553d4e2ff21db3a3402d26e146fc249634f89c76", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb11.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb11.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,32 @@\n+// Build don't link:\n+\n+#define NO_META_MAX\n+#ifndef NO_META_MAX\n+template<int N1, int N2>\n+struct meta_max {\n+    enum { max = (N1 > N2) ? N1 : N2 };\n+};\n+#endif\n+\n+struct X {\n+    enum {\n+       a = 0,\n+       n = 0\n+    };\n+};\n+\n+template<class T1, class T2>\n+struct Y {\n+\n+    enum {\n+       a = T1::a + T2::a,\n+\n+       // NB: if the next line is changed to\n+       // n = (T1::n > T2::n) ? T1::n : T2::n\n+       // the problem goes away.\n+\n+       n = meta_max<T1::n,T2::n>::max\n+    };\n+};\n+\n+int z = Y<X,X>::a;"}, {"sha": "54a1c8bbb861e53053136bf129d5d136ec358b5a", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb110.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb110.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb110.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb110.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link: \n+class X\n+{\n+  public:\n+    virtual void f() const = 0;\n+};\n+\n+template <class T>\n+class Y: public X\n+{\n+  public:\n+    virtual void f() const;\n+};\n+\n+template <class T>\n+void Y<T>::f() const\n+{\n+}\n+\n+template <>\n+void Y<bool>::f() const;\n+\n+template <>\n+void Y<bool>::f() const\n+{\n+}"}, {"sha": "8afc921e10970b6bc8a240ecaeb0fe289b0e5c19", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb111.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb111.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb111.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb111.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,6 @@\n+  int main() {\n+      for(int i=1; i < 9; i++);\n+      for(int i=1; i < 9; i++);\n+\n+      return 0;\n+      }"}, {"sha": "3233287ff100a4360a35b4f3937b6284f19f64f7", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb112.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb112.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb112.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb112.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link: \n+template <class STRUCT, class MEMBER> inline STRUCT *\n+setback(MEMBER *bp, MEMBER STRUCT::*offset)\n+{\n+        // The implementation of this function may be platform dependend\n+        if(!bp) return 0; // NULL pointers remain NULL\n+        union { int i; MEMBER STRUCT::*of; } u; // Switch types. Casting won't\n++work.\n+        u.of = offset;\n+        return (STRUCT *) ((int) bp - u.i);\n+}\n+"}, {"sha": "f3c28b9ac6551f1a3e2c8a46518e61197425dc9d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb113.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb113.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb113.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb113.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+#include <iostream.h>\n+\n+class X : public std::streambuf\n+{\n+} ;"}, {"sha": "020b88bb7756948bbac9eec606e4373779a9efde", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb114.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb114.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb114.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb114.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,29 @@\n+#include <string.h>\n+\n+class SomeClass_t {\n+public:\n+  SomeClass_t () : x (11) {}\n+protected:\n+  float x;\n+};\n+\n+class DynamicOnly_t {\n+public:\n+  static DynamicOnly_t* create (const char* name = \"UNDEF\",\n+                                const SomeClass_t& somec = *(new SomeClass_t\n+())) {\n+    return new DynamicOnly_t (name, somec);\n+  }\n+  DynamicOnly_t (const char* name, const SomeClass_t& somec) :\n+    m_somec (somec) {\n+    strncpy (m_Name, name, sizeof (m_Name));\n+  }\n+private:\n+  SomeClass_t m_somec;\n+  char m_Name[255];\n+};\n+\n+int main (int argc, char* argv[]) {\n+  DynamicOnly_t* ptr = DynamicOnly_t::create (); //*\n+  return 0;\n+}"}, {"sha": "30eab786f34a8b1fa2581a5274ead13d4d15ca56", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb115.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb115.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb115.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb115.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,9 @@\n+// Special g++ Options: -O\n+\n+#include <iostream.h>\n+#include <typeinfo>\n+\n+int main() {\n+  int *i1, *i2;\n+  cerr << (typeid(i1)==typeid(i2)) << endl;\n+}"}, {"sha": "63f5e79c062003696c70b6c5f70fd7f9d45255a1", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb116.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb116.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb116.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb116.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,23 @@\n+template <class INT>\n+class b\n+{\n+private:\n+  char a(int x)\n+  {\n+    union {\n+      int i;\n+      char c;\n+    } val;\n+    val.i = x;\n+    return val.c;\n+  };\n+\n+public:\n+  b()  {\n+  }\n+};\n+\n+int main() {\n+  b<int> n;\n+  return 0;\n+}"}, {"sha": "492abb8bb386662203fb1a1b8ab22ba2deb016ae", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb117.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb117.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb117.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb117.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,26 @@\n+#include <stdio.h>\n+#include <assert.h>\n+\n+struct F {\n+  int i;\n+};\n+\n+F f;\n+\n+int main( int, char** ) {\n+\n+  int F:: *of;\n+  int *i = (int *) &of;\n+  of = &F::i;\n+\n+  F *b = ((F*) ((int) &f.i - *i));\n+  F *a = &f;\n+\n+\n+  printf(\"%d\\n\", a-b);\n+  printf(\"%d\\n\", b-a);\n+\n+  assert( (a-b) == -(b-a) );    // will fail with egcs-1.0\n+\n+  return 0;\n+}"}, {"sha": "01fb4a3d078a5aa3b2502d9683354bbdf4e1f168", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb118.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb118.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,34 @@\n+#include <iostream.h>\n+#include <typeinfo>\n+\n+template <typename T>\n+class A {\n+public:\n+  void test ();\n+};\n+\n+template <typename T>\n+void\n+A<T>::test(){\n+  cerr << \"test for \" << typeid(*this).name() << endl;\n+}\n+// Specialization declaration\n+void\n+A<double>::test();\n+\n+// Specialization definition\n+void\n+A<double>::test(){  // ============= LINE 21 ==================\n+  cerr << \"specialization for \" << typeid(*this).name() << endl;\n+}\n+\n+\n+int\n+main(){\n+  A<int> ai;\n+  A<double> ad;\n+  ai.test();\n+  ad.test();\n+  return 0;\n+}\n+"}, {"sha": "8a25dab08415ea7aad7b84c5d5c199135d88d228", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb119.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb119.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb119.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb119.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,10 @@\n+template<bool B>\n+void f()\n+{\n+}\n+\n+int main()\n+{\n+   f<bool>();\n+}\n+"}, {"sha": "5c948f11b589259d86fef14a57aece51100a9daf", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb12.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb12.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,32 @@\n+// Build don't link: \n+// Error: Internal Compiler Error in 2.7.2. & egcs 1.0.0\n+\n+#ifndef NO_META_MAX\n+template<int N1, int N2>\n+struct meta_max {\n+    enum { max = (N1 > N2) ? N1 : N2 };\n+};\n+#endif\n+\n+struct X {\n+    enum {\n+       a = 0,\n+       n = 0\n+    };\n+};\n+\n+template<class T1, class T2>\n+struct Y {\n+\n+    enum {\n+       a = T1::a + T2::a,\n+\n+       // NB: if the next line is changed to\n+       // n = (T1::n > T2::n) ? T1::n : T2::n\n+       // the problem goes away.\n+\n+       n = meta_max<T1::n,T2::n>::max\n+    };\n+};\n+\n+int z = Y<X,X>::a;"}, {"sha": "b94820cdfecf04ffa754dbcad5cf73b670396cf2", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb120.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb120.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb120.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb120.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,22 @@\n+template<double functionToIntegrate(double)>\n+double integrate(double a, double b, int numSamplePoints)\n+{\n+  //    PRECONDITION(numSamplePoints > 1);\n+    double delta = (b-a) / (numSamplePoints-1);\n+    double sum = 0.;\n+    for (int i=0; i < numSamplePoints; ++i)\n+        sum += functionToIntegrate(a + i*delta);\n+    return sum * (b-a) / numSamplePoints;\n+}\n+\n+inline double myFunction(double x)\n+{\n+    return 1 / (1 + x);\n+}\n+\n+// Example use\n+int main() {\n+double z = integrate<myFunction>(0.0, 1.0, 50);\n+\treturn 0 ;\n+}\n+"}, {"sha": "1f003f3598e573a406acf90041ed9add796714f6", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb121.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb121.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb121.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb121.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,22 @@\n+// Compiles.   Shouldn't.\n+class A {\n+private:\n+  int i1_;\n+public:\n+  void f(int const i1 = 1);\n+};\n+\n+void\n+A::f(int const i1 = 1) // !!! SHOULD TRIGGER AN ERROR !!!\n+{\n+  i1_ = i1;\n+}\n+\n+int\n+main()\n+{\n+  A a;\n+  a.f();\n+  return 0;\n+}\n+"}, {"sha": "edb6b3264f76c572e887c290ec216f19c9694c82", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb122.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb122.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb122.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb122.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+template<class foo>\n+class bar {\n+public:\n+  void baz() { (({ while( foo::baz() );})); }\n+};\n+template<class foo>\n+void baz() { (({ while( foo::baz() );})); }"}, {"sha": "b4c595efc904cdb95212c8a5b89c832817d1c3a3", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb123.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb123.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb123.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb123.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,10 @@\n+// Special g++ OPtions: -O2 -W   \n+// Build don't link: \n+#include \"stdio.h\"\n+\n+void writeNote() throw( int )\n+{\n+    printf( \"hello world\\n\" );\n+    try { }\n+    catch( int ){ throw; }\n+}"}, {"sha": "7fbb311699f3d77e826ffd70a3566518cc2b9314", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb124.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb124.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb124.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb124.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+#include <stdexcept>\n+#if WORK_AROUND\n+typedef std::runtime_error std_runtime_error;\n+class X : public std_runtime_error {};\n+#else\n+class X : public std::runtime_error {};\n+#endif"}, {"sha": "165dc77439d72cb9bac65cfdce189f218ad20cd3", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb125.C", "status": "added", "additions": 1259, "deletions": 0, "changes": 1259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb125.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,1259 @@\n+\n+\n+#pragma interface\n+\n+\n+\n+extern \"C\" {\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+typedef          int   _G_int8_t __attribute__((__mode__(__QI__)));\n+typedef unsigned int  _G_uint8_t __attribute__((__mode__(__QI__)));\n+typedef          int  _G_int16_t __attribute__((__mode__(__HI__)));\n+typedef unsigned int _G_uint16_t __attribute__((__mode__(__HI__)));\n+typedef          int  _G_int32_t __attribute__((__mode__(__SI__)));\n+typedef unsigned int _G_uint32_t __attribute__((__mode__(__SI__)));\n+typedef          int  _G_int64_t __attribute__((__mode__(__DI__)));\n+typedef unsigned int _G_uint64_t __attribute__((__mode__(__DI__)));\n+__extension__ typedef long long _G_llong;\n+__extension__ typedef unsigned long long _G_ullong;\n+\n+\n+\n+\n+\n+\n+\n+typedef long _G_clock_t;\n+typedef short _G_dev_t;\n+typedef long _G_fpos_t;\n+typedef unsigned short _G_gid_t;\n+typedef unsigned long _G_ino_t;\n+typedef unsigned short _G_mode_t;\n+typedef short _G_nlink_t;\n+typedef long _G_off_t;\n+typedef short _G_pid_t;\n+\n+\n+\n+typedef int _G_ptrdiff_t;\n+typedef long _G_sigset_t;\n+\n+\n+\n+typedef unsigned int _G_size_t;\n+typedef long _G_time_t;\n+typedef unsigned short _G_uid_t;\n+typedef long int _G_wchar_t;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+typedef int _G_ssize_t;\n+typedef unsigned int _G_wint_t;\n+typedef char * _G_va_list;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+ \n+\n+\n+ \n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+ \n+\n+ \n+\n+\n+\n+ \n+\n+ \n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+struct _IO_jump_t;  struct _IO_FILE;\n+\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+    typedef void _IO_lock_t;\n+\n+\n+\n+\n+\n+ \n+\n+struct _IO_marker {\n+  struct _IO_marker *_next;\n+  struct _IO_FILE *_sbuf;\n+   \n+\n+   \n+  int _pos;\n+\n+};\n+\n+struct _IO_FILE {\n+  int _flags;\t\t \n+\n+\n+   \n+   \n+  char* _IO_read_ptr;\t \n+  char* _IO_read_end;\t \n+  char* _IO_read_base;\t \n+  char* _IO_write_base;\t \n+  char* _IO_write_ptr;\t \n+  char* _IO_write_end;\t \n+  char* _IO_buf_base;\t \n+  char* _IO_buf_end;\t \n+   \n+  char *_IO_save_base;  \n+  char *_IO_backup_base;   \n+  char *_IO_save_end;  \n+\n+  struct _IO_marker *_markers;\n+\n+  struct _IO_FILE *_chain;\n+\n+  int _fileno;\n+  int _blksize;\n+  _G_off_t  _offset;\n+\n+\n+   \n+  unsigned short _cur_column;\n+  char _unused;\n+  char _shortbuf[1];\n+\n+   \n+\n+\n+\n+\n+};\n+\n+\n+\n+\n+\n+struct _IO_FILE_plus;\n+extern struct _IO_FILE_plus _IO_stdin_, _IO_stdout_, _IO_stderr_;\n+\n+\n+\n+\n+\n+ \n+typedef struct\n+{\n+  _G_ssize_t  (*read)  (struct _IO_FILE *, void *, _G_ssize_t )  ;\n+  _G_ssize_t  (*write)  (struct _IO_FILE *, const void *, _G_ssize_t )  ;\n+  _G_fpos_t  (*seek)  (struct _IO_FILE *, _G_off_t , int)  ;\n+  int (*close)  (struct _IO_FILE *)  ;\n+} _IO_cookie_io_functions_t;\n+\n+ \n+struct _IO_cookie_file\n+{\n+  struct _IO_FILE file;\n+  const void *vtable;\n+  void *cookie;\n+  _IO_cookie_io_functions_t io_functions;\n+};\n+\n+\n+\n+extern \"C\" {\n+\n+\n+extern int __underflow  (_IO_FILE *)  ;\n+extern int __uflow  (_IO_FILE *)  ;\n+extern int __overflow  (_IO_FILE *, int)  ;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+extern int _IO_getc  (_IO_FILE *__fp)  ;\n+extern int _IO_putc  (int __c, _IO_FILE *__fp)  ;\n+extern int _IO_feof  (_IO_FILE *__fp)  ;\n+extern int _IO_ferror  (_IO_FILE *__fp)  ;\n+\n+extern int _IO_peekc_locked  (_IO_FILE *__fp)  ;\n+\n+ \n+\n+\n+\n+extern void _IO_flockfile  (_IO_FILE *)  ;\n+extern void _IO_funlockfile  (_IO_FILE *)  ;\n+extern int _IO_ftrylockfile  (_IO_FILE *)  ;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+extern int _IO_vfscanf  (_IO_FILE *, const char *, _G_va_list , int *)  ;\n+extern int _IO_vfprintf  (_IO_FILE *, const char *, _G_va_list )  ;\n+extern _G_ssize_t  _IO_padn  (_IO_FILE *, int, _G_ssize_t )  ;\n+extern _G_size_t  _IO_sgetn  (_IO_FILE *, void *, _G_size_t )  ;\n+\n+extern _G_fpos_t  _IO_seekoff  (_IO_FILE *, _G_off_t , int, int)  ;\n+extern _G_fpos_t  _IO_seekpos  (_IO_FILE *, _G_fpos_t , int)  ;\n+\n+extern void _IO_free_backup_area  (_IO_FILE *)  ;\n+\n+\n+}\n+\n+\n+\n+\n+}\n+ \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+extern \"C++\" {\n+class istream;  \n+class ostream; class streambuf;\n+\n+ \n+\n+\n+\n+typedef _G_off_t  streamoff;\n+typedef _G_fpos_t  streampos;\n+typedef _G_ssize_t  streamsize;\n+\n+typedef unsigned long __fmtflags;\n+typedef unsigned char __iostate;\n+\n+struct _ios_fields\n+{  \n+    streambuf *_strbuf;\n+    ostream* _tie;\n+    int _width;\n+    __fmtflags _flags;\n+    short  _fill;\n+    __iostate _state;\n+    __iostate _exceptions;\n+    int _precision;\n+\n+    void *_arrays;  \n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+class ios : public _ios_fields {\n+  ios& operator=(ios&);   \n+  ios (const ios&);  \n+  public:\n+    typedef __fmtflags fmtflags;\n+    typedef int iostate;\n+    typedef int openmode;\n+    typedef int streamsize;\n+    enum io_state {\n+\tgoodbit = 0 ,\n+\teofbit = 1 ,\n+\tfailbit = 2 ,\n+\tbadbit = 4  };\n+    enum open_mode {\n+\tin = 1 ,\n+\tout = 2 ,\n+\tate = 4 ,\n+\tapp = 8 ,\n+\ttrunc = 16 ,\n+\tnocreate = 32 ,\n+\tnoreplace = 64 ,\n+\tbin = 128 ,  \n+\tbinary = 128  };\n+    enum seek_dir { beg, cur, end};\n+    typedef enum seek_dir seekdir;\n+     \n+    enum { skipws= 01 ,\n+\t   left= 02 , right= 04 , internal= 010 ,\n+\t   dec= 020 , oct= 040 , hex= 0100 ,\n+\t   showbase= 0200 , showpoint= 0400 ,\n+\t   uppercase= 01000 , showpos= 02000 ,\n+\t   scientific= 04000 , fixed= 010000 ,\n+\t   unitbuf= 020000 , stdio= 040000 \n+\n+\n+\n+\t   };\n+    enum {  \n+\tbasefield=dec+oct+hex,\n+\tfloatfield = scientific+fixed,\n+\tadjustfield = left+right+internal\n+    };\n+\n+\n+\n+    ostream* tie() const { return _tie; }\n+    ostream* tie(ostream* val) { ostream* save=_tie; _tie=val; return save; }\n+\n+     \n+    short  fill() const { return (short )_fill; }\n+    short  fill(short  newf)\n+\t{short  oldf = (short )_fill; _fill = (char)newf; return oldf;}\n+    fmtflags flags() const { return _flags; }\n+    fmtflags flags(fmtflags new_val) {\n+\tfmtflags old_val = _flags; _flags = new_val; return old_val; }\n+    int precision() const { return _precision; }\n+    int precision(int newp) {\n+\tunsigned short oldp = _precision; _precision = (unsigned short)newp;\n+\treturn oldp; }\n+    fmtflags setf(fmtflags val) {\n+\tfmtflags oldbits = _flags;\n+\t_flags |= val; return oldbits; }\n+    fmtflags setf(fmtflags val, fmtflags mask) {\n+\tfmtflags oldbits = _flags;\n+\t_flags = (_flags & ~mask) | (val & mask); return oldbits; }\n+    fmtflags unsetf(fmtflags mask) {\n+\tfmtflags oldbits = _flags;\n+\t_flags &= ~mask; return oldbits; }\n+    int width() const { return _width; }\n+    int width(int val) { int save = _width; _width = val; return save; }\n+\n+\n+\n+\n+    void _throw_failure() const { }\n+\n+    void clear(iostate state = 0) {\n+\t_state = _strbuf ? state : state|badbit;\n+\tif (_state & _exceptions) _throw_failure(); }\n+    void set(iostate flag) { _state |= flag;\n+\tif (_state & _exceptions) _throw_failure(); }\n+    void setstate(iostate flag) { _state |= flag;  \n+\tif (_state & _exceptions) _throw_failure(); }\n+    int good() const { return _state == 0; }\n+    int eof() const { return _state & ios::eofbit; }\n+    int fail() const { return _state & (ios::badbit|ios::failbit); }\n+    int bad() const { return _state & ios::badbit; }\n+    iostate rdstate() const { return _state; }\n+    operator void*() const { return fail() ? (void*)0 : (void*)(-1); }\n+    int operator!() const { return fail(); }\n+    iostate exceptions() const { return _exceptions; }\n+    void exceptions(iostate enable) {\n+\t_exceptions = enable;\n+\tif (_state & _exceptions) _throw_failure(); }\n+\n+    streambuf* rdbuf() const { return _strbuf; }\n+    streambuf* rdbuf(streambuf *_s) {\n+      streambuf *_old = _strbuf; _strbuf = _s; clear (); return _old; }\n+\n+    static int sync_with_stdio(int on);\n+    static void sync_with_stdio() { sync_with_stdio(1); }\n+    static fmtflags bitalloc();\n+    static int xalloc();\n+    void*& pword(int);\n+    void* pword(int) const;\n+    long& iword(int);\n+    long iword(int) const;\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+     \n+    class Init {\n+    public:\n+      Init () { }\n+    };\n+\n+  protected:\n+    inline ios(streambuf* sb = 0, ostream* tie_to = 0);\n+    inline virtual ~ios();\n+    inline void init(streambuf* sb, ostream* tie = 0);\n+};\n+\n+\n+\n+\n+typedef ios::seek_dir _seek_dir;\n+\n+\n+ \n+ \n+ \n+ \n+ \n+\n+ \n+ \n+class streammarker : private _IO_marker {\n+    friend class streambuf;\n+    void set_offset(int offset) { _pos = offset; }\n+  public:\n+    streammarker(streambuf *sb);\n+    ~streammarker();\n+    int saving() { return  1; }\n+    int delta(streammarker&);\n+    int delta();\n+};\n+\n+struct streambuf : public _IO_FILE {  \n+    friend class ios;\n+    friend class istream;\n+    friend class ostream;\n+    friend class streammarker;\n+    const void *&_vtable() { return *(const void**)((_IO_FILE*)this + 1); }\n+  protected:\n+    static streambuf* _list_all;  \n+    _IO_FILE*& xchain() { return _chain; }\n+    void _un_link();\n+    void _link_in();\n+    char* gptr() const\n+      { return _flags  & 0x100  ? _IO_save_base : _IO_read_ptr; }\n+    char* pptr() const { return _IO_write_ptr; }\n+    char* egptr() const\n+      { return _flags  & 0x100  ? _IO_save_end : _IO_read_end; }\n+    char* epptr() const { return _IO_write_end; }\n+    char* pbase() const { return _IO_write_base; }\n+    char* eback() const\n+      { return _flags  & 0x100  ? _IO_save_base : _IO_read_base;}\n+    char* base() const { return _IO_buf_base; }\n+    char* ebuf() const { return _IO_buf_end; }\n+    int blen() const { return _IO_buf_end - _IO_buf_base; }\n+    void xput_char(char c) { *_IO_write_ptr++ = c; }\n+    int xflags() { return _flags ; }\n+    int xflags(int f) {int fl = _flags ; _flags  = f; return fl;}\n+    void xsetflags(int f) { _flags  |= f; }\n+    void xsetflags(int f, int mask)\n+      { _flags  = (_flags  & ~mask) | (f & mask); }\n+    void gbump(int n)\n+      { _flags  & 0x100  ? (_IO_save_base+=n):(_IO_read_ptr+=n);}\n+    void pbump(int n) { _IO_write_ptr += n; }\n+    void setb(char* b, char* eb, int a=0);\n+    void setp(char* p, char* ep)\n+      { _IO_write_base=_IO_write_ptr=p; _IO_write_end=ep; }\n+    void setg(char* eb, char* g, char *eg) {\n+      if (_flags  & 0x100 ) _IO_free_backup_area(this); \n+      _IO_read_base = eb; _IO_read_ptr = g; _IO_read_end = eg; }\n+    char *shortbuf() { return _shortbuf; }\n+\n+    int in_backup() { return _flags & 0x100 ; }\n+     \n+    char *Gbase() { return in_backup() ? _IO_save_base : _IO_read_base; }\n+     \n+    char *eGptr() { return in_backup() ? _IO_save_end : _IO_read_end; }\n+     \n+    char *Bbase() { return in_backup() ? _IO_read_base : _IO_save_base; }\n+    char *Bptr() { return _IO_backup_base; }\n+     \n+    char *eBptr() { return in_backup() ? _IO_read_end : _IO_save_end; }\n+    char *Nbase() { return _IO_save_base; }\n+    char *eNptr() { return _IO_save_end; }\n+    int have_backup() { return _IO_save_base != __null ; }\n+    int have_markers() { return _markers != __null ; }\n+    void free_backup_area();\n+    void unsave_markers();  \n+    int put_mode() { return _flags & 0x800 ; }\n+    int switch_to_get_mode();\n+    \n+    streambuf(int flags=0);\n+  public:\n+    static int flush_all();\n+    static void flush_all_linebuffered();  \n+    virtual ~streambuf();\n+    virtual int overflow(int c = (-1) );  \n+    virtual int underflow();  \n+    virtual int uflow();  \n+    virtual int pbackfail(int c);\n+ \n+    virtual streamsize xsputn(const char* s, streamsize n);\n+    virtual streamsize xsgetn(char* s, streamsize n);\n+    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);\n+    virtual streampos seekpos(streampos pos, int mode = ios::in|ios::out);\n+\n+    streampos pubseekoff(streamoff o, _seek_dir d, int mode=ios::in|ios::out)\n+      { return _IO_seekoff (this, o, d, mode); }\n+    streampos pubseekpos(streampos pos, int mode = ios::in|ios::out)\n+      { return _IO_seekpos (this, pos, mode); }\n+    streampos sseekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);\n+    streampos sseekpos(streampos pos, int mode = ios::in|ios::out);\n+    virtual streambuf* setbuf(char* p, int len);\n+    virtual int sync();\n+    virtual int doallocate();\n+\n+    int seekmark(streammarker& mark, int delta = 0);\n+    int sputbackc(char c);\n+    int sungetc();\n+    int unbuffered() { return _flags & 2  ? 1 : 0; }\n+    int linebuffered() { return _flags & 0x200  ? 1 : 0; }\n+    void unbuffered(int i)\n+\t{ if (i) _flags |= 2 ; else _flags &= ~2 ; }\n+    void linebuffered(int i)\n+\t{ if (i) _flags |= 0x200 ; else _flags &= ~0x200 ; }\n+    int allocate() {  \n+\tif (base() || unbuffered()) return 0;\n+\telse return doallocate(); }\n+     \n+    void allocbuf() { if (base() == __null ) doallocbuf(); }\n+    void doallocbuf();\n+    int in_avail() { return _IO_read_end - _IO_read_ptr; }\n+    int out_waiting() { return _IO_write_ptr - _IO_write_base; }\n+    streamsize sputn(const char* s, streamsize n) { return xsputn(s, n); }\n+    streamsize padn(char pad, streamsize n) { return _IO_padn(this, pad, n); }\n+    streamsize sgetn(char* s, streamsize n) { return _IO_sgetn(this, s, n); }\n+    int ignore(int);\n+    int get_column();\n+    int set_column(int);\n+    long sgetline(char* buf, _G_size_t  n, char delim, int putback_delim);\n+    int sputc(int c) { return _IO_putc(c, this); }\n+    int sbumpc() { return _IO_getc(this); }\n+    int sgetc() { return ((  this  )->_IO_read_ptr >= (  this  )->_IO_read_end && __underflow (  this  ) == (-1)  ? (-1)  : *(unsigned char *) (  this  )->_IO_read_ptr)  ; }\n+    int snextc() {\n+\tif (_IO_read_ptr >= _IO_read_end && __underflow(this) == (-1) )\n+\t  return (-1) ;\n+\telse return _IO_read_ptr++, sgetc(); }\n+    void stossc() { if (_IO_read_ptr < _IO_read_end) _IO_read_ptr++; }\n+    int vscan(char const *fmt0, _G_va_list  ap, ios* stream = __null );\n+    int scan(char const *fmt0 ...);\n+    int vform(char const *fmt0, _G_va_list  ap);\n+    int form(char const *fmt0 ...);\n+\n+\n+\n+\n+    virtual streamsize sys_read(char* buf, streamsize size);\n+    virtual streamsize sys_write(const char*, streamsize);\n+    virtual streampos sys_seek(streamoff, _seek_dir);\n+    virtual int sys_close();\n+    virtual int sys_stat(void*);  \n+};\n+\n+ \n+ \n+\n+class filebuf : public streambuf {\n+  protected:\n+    void init();\n+  public:\n+    static const int openprot;  \n+    filebuf();\n+    filebuf(int fd);\n+    filebuf(int fd, char* p, int len);\n+\n+\n+\n+    ~filebuf();\n+    filebuf* attach(int fd);\n+    filebuf* open(const char *filename, const char *mode);\n+    filebuf* open(const char *filename, ios::openmode mode, int prot = 0664);\n+    virtual int underflow();\n+    virtual int overflow(int c = (-1) );\n+    int is_open() const { return _fileno >= 0; }\n+    int fd() const { return is_open() ? _fileno : (-1) ; }\n+    filebuf* close();\n+    virtual int doallocate();\n+    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);\n+    virtual streambuf* setbuf(char* p, int len);\n+    streamsize xsputn(const char* s, streamsize n);\n+    streamsize xsgetn(char* s, streamsize n);\n+    virtual int sync();\n+  protected:  \n+ \n+    int is_reading() { return eback() != egptr(); }\n+    char* cur_ptr() { return is_reading() ?  gptr() : pptr(); }\n+     \n+    char* file_ptr() { return eGptr(); }\n+     \n+    virtual streamsize sys_read(char* buf, streamsize size);\n+    virtual streampos sys_seek(streamoff, _seek_dir);\n+    virtual streamsize sys_write(const char*, streamsize);\n+    virtual int sys_stat(void*);  \n+    virtual int sys_close();\n+\n+\n+\n+\n+};\n+\n+inline void ios::init(streambuf* sb, ostream* tie_to) {\n+\t\t_state = sb ? ios::goodbit : ios::badbit; _exceptions=0;\n+\t\t_strbuf=sb; _tie = tie_to; _width=0; _fill=' ';\n+\n+\t\t_flags=ios::skipws|ios::dec;\n+\n+\n+\n+\t\t_precision=6; _arrays = 0; }\n+\n+inline ios::ios(streambuf* sb, ostream* tie_to) { init(sb, tie_to); }\n+\n+inline ios::~ios() {\n+\n+\n+\n+    if (_arrays) delete [] _arrays;\n+}\n+}  \n+\n+\n+\n+extern \"C++\" {\n+class istream; class ostream;\n+typedef ios& (*__manip)(ios&);\n+typedef istream& (*__imanip)(istream&);\n+typedef ostream& (*__omanip)(ostream&);\n+\n+extern istream& ws(istream& ins);\n+extern ostream& flush(ostream& outs);\n+extern ostream& endl(ostream& outs);\n+extern ostream& ends(ostream& outs);\n+\n+class ostream : virtual public ios\n+{\n+     \n+    void do_osfx();\n+  public:\n+    ostream() { }\n+    ostream(streambuf* sb, ostream* tied= __null );\n+    int opfx() {\n+\tif (!good()) return 0;\n+\telse { if (_tie) _tie->flush();  ; return 1;} }\n+    void osfx() {  ;\n+\t\t  if (flags() & (ios::unitbuf|ios::stdio))\n+\t\t      do_osfx(); }\n+    ostream& flush();\n+    ostream& put(char c) { _strbuf->sputc(c); return *this; }\n+\n+\n+\n+\n+\n+    ostream& write(const char *s, streamsize n);\n+    ostream& write(const unsigned char *s, streamsize n)\n+      { return write((const char*)s, n);}\n+    ostream& write(const signed char *s, streamsize n)\n+      { return write((const char*)s, n);}\n+    ostream& write(const void *s, streamsize n)\n+      { return write((const char*)s, n);}\n+    ostream& seekp(streampos);\n+    ostream& seekp(streamoff, _seek_dir);\n+    streampos tellp();\n+    ostream& form(const char *format ...);\n+    ostream& vform(const char *format, _G_va_list  args);\n+\n+    ostream& operator<<(char c);\n+    ostream& operator<<(unsigned char c) { return (*this) << (char)c; }\n+    ostream& operator<<(signed char c) { return (*this) << (char)c; }\n+    ostream& operator<<(const char *s);\n+    ostream& operator<<(const unsigned char *s)\n+\t{ return (*this) << (const char*)s; }\n+    ostream& operator<<(const signed char *s)\n+\t{ return (*this) << (const char*)s; }\n+    ostream& operator<<(const void *p);\n+    ostream& operator<<(int n);\n+    ostream& operator<<(unsigned int n);\n+    ostream& operator<<(long n);\n+    ostream& operator<<(unsigned long n);\n+\n+    __extension__ ostream& operator<<(long long n);\n+    __extension__ ostream& operator<<(unsigned long long n);\n+\n+    ostream& operator<<(short n) {return operator<<((int)n);}\n+    ostream& operator<<(unsigned short n) {return operator<<((unsigned int)n);}\n+\n+    ostream& operator<<(bool b) { return operator<<((int)b); }\n+\n+    ostream& operator<<(double n);\n+    ostream& operator<<(float n) { return operator<<((double)n); }\n+\n+\n+\n+    ostream& operator<<(long double n) { return operator<<((double)n); }\n+\n+    ostream& operator<<(__omanip func) { return (*func)(*this); }\n+    ostream& operator<<(__manip func) {(*func)(*this); return *this;}\n+    ostream& operator<<(streambuf*);\n+\n+\n+\n+};\n+\n+class istream : virtual public ios\n+{\n+     \n+protected:\n+    _G_size_t  _gcount;\n+\n+    int _skip_ws();\n+  public:\n+    istream(): _gcount (0) { }\n+    istream(streambuf* sb, ostream*tied= __null );\n+    istream& get(char* ptr, int len, char delim = '\\n');\n+    istream& get(unsigned char* ptr, int len, char delim = '\\n')\n+\t{ return get((char*)ptr, len, delim); }\n+    istream& get(char& c);\n+    istream& get(unsigned char& c) { return get((char&)c); }\n+    istream& getline(char* ptr, int len, char delim = '\\n');\n+    istream& getline(unsigned char* ptr, int len, char delim = '\\n')\n+\t{ return getline((char*)ptr, len, delim); }\n+    istream& get(signed char& c)  { return get((char&)c); }\n+    istream& get(signed char* ptr, int len, char delim = '\\n')\n+\t{ return get((char*)ptr, len, delim); }\n+    istream& getline(signed char* ptr, int len, char delim = '\\n')\n+\t{ return getline((char*)ptr, len, delim); }\n+    istream& read(char *ptr, streamsize n);\n+    istream& read(unsigned char *ptr, streamsize n)\n+      { return read((char*)ptr, n); }\n+    istream& read(signed char *ptr, streamsize n)\n+      { return read((char*)ptr, n); }\n+    istream& read(void *ptr, streamsize n)\n+      { return read((char*)ptr, n); }\n+    istream& get(streambuf& sb, char delim = '\\n');\n+    istream& gets(char **s, char delim = '\\n');\n+    int ipfx(int need = 0) {\n+\tif (!good()) { set(ios::failbit); return 0; }\n+\telse {\n+\t   ;\n+\t  if (_tie && (need == 0 || rdbuf()->in_avail() < need)) _tie->flush();\n+\t  if (!need && (flags() & ios::skipws)) return _skip_ws();\n+\t  else return 1;\n+\t}\n+    }\n+    int ipfx0() {  \n+\tif (!good()) { set(ios::failbit); return 0; }\n+\telse {\n+\t   ;\n+\t  if (_tie) _tie->flush();\n+\t  if (flags() & ios::skipws) return _skip_ws();\n+\t  else return 1;\n+\t}\n+    }\n+    int ipfx1() {  \n+\tif (!good()) { set(ios::failbit); return 0; }\n+\telse {\n+\t   ;\n+\t  if (_tie && rdbuf()->in_avail() == 0) _tie->flush();\n+\t  return 1;\n+\t}\n+    }\n+    void isfx() {  ; }\n+    int get() { if (!ipfx1()) return (-1) ;\n+\t\telse { int ch = _strbuf->sbumpc();\n+\t\t       if (ch == (-1) ) set(ios::eofbit);\n+\t\t       return ch;\n+\t\t     } }\n+    int peek();\n+    _G_size_t  gcount() { return _gcount; }\n+    istream& ignore(int n=1, int delim = (-1) );\n+    int sync ();\n+    istream& seekg(streampos);\n+    istream& seekg(streamoff, _seek_dir);\n+    streampos tellg();\n+    istream& putback(char ch) {\n+\tif (good() && _strbuf->sputbackc(ch) == (-1) ) clear(ios::badbit);\n+\treturn *this;}\n+    istream& unget() {\n+\tif (good() && _strbuf->sungetc() == (-1) ) clear(ios::badbit);\n+\treturn *this;}\n+    istream& scan(const char *format ...);\n+    istream& vscan(const char *format, _G_va_list  args);\n+\n+\n+\n+\n+\n+\n+    istream& operator>>(char*);\n+    istream& operator>>(unsigned char* p) { return operator>>((char*)p); }\n+    istream& operator>>(signed char*p) { return operator>>((char*)p); }\n+    istream& operator>>(char& c);\n+    istream& operator>>(unsigned char& c) {return operator>>((char&)c);}\n+    istream& operator>>(signed char& c) {return operator>>((char&)c);}\n+    istream& operator>>(int&);\n+    istream& operator>>(long&);\n+\n+    __extension__ istream& operator>>(long long&);\n+    __extension__ istream& operator>>(unsigned long long&);\n+\n+    istream& operator>>(short&);\n+    istream& operator>>(unsigned int&);\n+    istream& operator>>(unsigned long&);\n+    istream& operator>>(unsigned short&);\n+\n+    istream& operator>>(bool&);\n+\n+    istream& operator>>(float&);\n+    istream& operator>>(double&);\n+    istream& operator>>(long double&);\n+    istream& operator>>( __manip func) {(*func)(*this); return *this;}\n+    istream& operator>>(__imanip func) { return (*func)(*this); }\n+    istream& operator>>(streambuf*);\n+};\n+\n+class iostream : public istream, public ostream\n+{\n+  public:\n+    iostream() { }\n+    iostream(streambuf* sb, ostream*tied= __null );\n+};\n+\n+class _IO_istream_withassign : public istream {\n+public:\n+  _IO_istream_withassign& operator=(istream&);\n+  _IO_istream_withassign& operator=(_IO_istream_withassign& rhs)\n+    { return operator= (static_cast<istream&> (rhs)); }\n+};\n+\n+class _IO_ostream_withassign : public ostream {\n+public:\n+  _IO_ostream_withassign& operator=(ostream&);\n+  _IO_ostream_withassign& operator=(_IO_ostream_withassign& rhs)\n+    { return operator= (static_cast<ostream&> (rhs)); }\n+};\n+\n+extern _IO_istream_withassign cin;\n+ \n+extern _IO_ostream_withassign cout, cerr;\n+\n+extern _IO_ostream_withassign clog\n+\n+\n+\n+;\n+\n+extern istream& lock(istream& ins);\n+extern istream& unlock(istream& ins);\n+extern ostream& lock(ostream& outs);\n+extern ostream& unlock(ostream& outs);\n+\n+struct Iostream_init { } ;   \n+\n+inline ios& dec(ios& i)\n+{ i.setf(ios::dec, ios::dec|ios::hex|ios::oct); return i; }\n+inline ios& hex(ios& i)\n+{ i.setf(ios::hex, ios::dec|ios::hex|ios::oct); return i; }\n+inline ios& oct(ios& i)\n+{ i.setf(ios::oct, ios::dec|ios::hex|ios::oct); return i; }\n+}  \n+\n+\n+\n+\n+struct test_box\n+    {\n+    void print(void) {cout << \"this is a test\" << endl;}\n+    };\n+\n+void test<class BOX> (test_box *);\n+\n+class test_square\n+    {\n+    friend void test<class BOX> (test_box *);\n+    }\n+\n+\n+\n+template <class BOX> void test(BOX *the_box)\n+    {\n+    the_box->print();\n+    };\n+\n+template void test<> (test_box *);\n+"}, {"sha": "8c634e872019cff97283eb8201f1461ba3910a12", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb126.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb126.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb126.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb126.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,29 @@\n+#include <string.h>\n+\n+class SomeClass_t {\n+public:\n+  SomeClass_t () : x (11) {}\n+protected:\n+  float x;\n+};\n+\n+class DynamicOnly_t {\n+public:\n+  static DynamicOnly_t* create (const char* name = \"UNDEF\",\n+                                const SomeClass_t& somec = *(new SomeClass_t\n+())) {\n+    return new DynamicOnly_t (name, somec);\n+  }\n+  DynamicOnly_t (const char* name, const SomeClass_t& somec) :\n+    m_somec (somec) {\n+    strncpy (m_Name, name, sizeof (m_Name));\n+  }\n+private:\n+  SomeClass_t m_somec;\n+  char m_Name[255];\n+};\n+\n+int main (int argc, char* argv[]) {\n+  DynamicOnly_t* ptr = DynamicOnly_t::create ();\n+  return 0;\n+}"}, {"sha": "b3f36dd02eafb63e76b28fdd6056f672ee4bc71f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb127.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb127.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb127.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb127.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,57 @@\n+#include <vector>\n+#include<string>\n+\n+using namespace std;\n+\n+class ODEsolver\n+{\n+    private:\n+        void eulerODE(vector<double>& y, double& t, double& dt);\n+        void midpointODE(vector<double>& y, double& t, double& dt);\n+\n+    protected:\n+        void (ODEsolver::*useMethod)(vector<double>&, double&, double&);\n+        void init();\n+\n+    public:\n+        ODEsolver();\n+        void timeloop(vector<double>& y, double ts, double te, double dt);\n+};\n+\n+\n+ODEsolver::ODEsolver()\n+{\n+  init();\n+}\n+\n+\n+void ODEsolver::eulerODE(vector<double>& y, double& t, double& dt)\n+{\n+  y[0] = dt * 2.;\n+}\n+\n+void ODEsolver::midpointODE(vector<double>& y, double& t, double& dt)\n+{\n+  y[0] = dt * 3.;\n+}\n+\n+\n+\n+void ODEsolver::init()\n+{\n+  ODEsolver::useMethod = ODEsolver::midpointODE;\n+}\n+\n+void ODEsolver::timeloop(vector<double>& y, double ts, double te, double dt)\n+{\n+  (ODEsolver::useMethod)(y,ts,dt);\n+}\n+\n+int main (int nargs, char** args)\n+{\n+  ODEsolver solver;\n+  vector<double> y(2);  double t_start=5.;  double t_end=7.;  double dt=2.;\n+  solver.timeloop(y,t_start,t_end,dt);\n+  cout << y[0] << endl;\n+  return(0);\n+}"}, {"sha": "f0e48484302b59488c676f75b49eb6c6b08cd90d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb13.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb13.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+template<class T>\n+class Array {\n+public:\n+    typedef T T_numtype;\n+};\n+\n+template<class T_array>\n+void f(T_array, typename T_array::T_numtype)\n+{\n+}\n+\n+void g()\n+{\n+    f(Array<float>(), float());\n+}"}, {"sha": "de00e7baa6be5813401b1ee8f82cf91d1895797a", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb14.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb14.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,36 @@\n+template<int N>\n+struct I {\n+};\n+\n+template<class T>\n+struct A {\n+\n+  int r;\n+\n+  template<class T1, class T2>\n+  void operator()(T1, T2)\n+  { r = 0; }\n+\n+  template<int N1, int N2>\n+  void operator()(I<N1>, I<N2>)\n+  { r = 1; }\n+};\n+\n+int main()\n+{\n+    A<float> x;\n+    I<0> a;\n+    I<1> b;\n+\n+    x(a,b);\n+    if (x.r != 1)\n+        abort();\n+\n+    x(float(), double());\n+    if (x.r != 0)\n+        abort();\n+\n+    return 0;\n+}\n+\n+"}, {"sha": "ef1576428e8b7970ec0ea16a1bf3e19b87887191", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb15.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb15.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link:\n+#include<iostream.h>\n+\n+struct A {\n+  A() {\n+    cerr<<\"A constructing\\n\";\n+    throw 1;\n+  }\n+  void *operator new(unsigned sz) {\n+    cerr<<\"A allocated\\n\";\n+    return ::operator new(sz);\n+  }\n+  void operator delete (void *p) {\n+    cerr<<\"A deleted\\n\";\n+    ::operator delete (p);\n+  }\n+};\n+\n+int main() {\n+  try {\n+     new A();\n+  } catch (...) {\n+  }\n+}"}, {"sha": "5dc259d28221d3048ad5cff0d4a57874fa02fa26", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb16.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb16.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+template<class T>\n+struct A {\n+    typedef T T1;\n+};\n+\n+template<class T>\n+struct B : T::T1 {           // insert `typename' before T::T1\n+};\n+\n+struct C { };\n+\n+B<A<C> > z;\n+"}, {"sha": "86b542492b7fbf7e9395fbad16768f198ca8ffe6", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb17.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb17.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,54 @@\n+#include <stdio.h>\n+\n+class A {\n+public:\n+    virtual void print();\n+    virtual A * clone();\n+};\n+\n+class B : virtual public A {\n+public:\n+    void print();\n+    B * clone();\n+};\n+\n+void A::print()\n+{\n+    printf(\"A\\n\");\n+}\n+\n+void B::print()\n+{\n+    printf(\"B\\n\");\n+}\n+\n+\n+A * A::clone()\n+{\n+    return this;\n+}\n+\n+B * B::clone()\n+{\n+    return this;\n+}\n+\n+\n+int main()\n+{\n+    A * a = new B;\n+    B * b = dynamic_cast<B *>(a);\n+\n+    printf(\"%p\\n\",b);                // (*2*)\n+    b->print();\n+\n+    a = b;\n+    printf(\"%p\\n\",a);\n+    a->print();\n+\n+    a = a->clone();\n+    printf(\"%p\\n\",a);\n+    a->print();                      // (*1*)\n+\n+    return 0;\n+}"}, {"sha": "acd336d403780993a1ae49686b435b0359da7e67", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb18.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb18.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link:\n+class C { };\n+\n+void foo()\n+{\n+    C c;\n+    void * v = static_cast<void *>(c);\n+}"}, {"sha": "a5ddd36c7bdbce8ddc7122ce02e06b817968534b", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb19.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb19.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+\n+#define CRASH 1\n+#ifdef CRASH\n+#define VIRTUAL virtual\n+#else\n+#define VIRTUAL\n+#endif\n+\n+class A {};\n+class B : public VIRTUAL A {};\n+template <class Imp> class C : public /*virtual*/ Imp {};\n+// define CRASH and uncomment here    ^^^^^^^^^^^\n+// and the crash goes away!!!!\n+\n+template class C<B>;"}, {"sha": "a4b8e20c9ee94a8dd88df30c2f2e85deaf45faa3", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb2.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb2.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link: \n+typedef unsigned int size_t;\n+inline void *operator new(size_t, void *place) throw() { return place; }\n+\n+struct A\n+{\n+    A();\n+    ~A();\n+};\n+\n+void testfunc( void )\n+{\n+   A*    mybuf;\n+   A        v[1];\n+\n+   new (mybuf) A();\n+}"}, {"sha": "08c76d0f97e3ba2eceffd0c4734329fedd865d78", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb20.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb20.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,33 @@\n+// Error: ICE on 2.7.2.3 and EGCS 1.0.0.\n+// Build don't link:\n+\n+template<int N1, int N2>\n+struct meta_max {\n+    enum { max = (N1 > N2) ? N1 : N2 };\n+};\n+\n+struct X {\n+    enum {\n+       a = 0,\n+       n = 0\n+    };\n+};\n+\n+template<class T1, class T2, class T3>\n+struct Y {\n+\n+    enum {\n+       a = T1::a + T2::a + T3::a,\n+       n = meta_max<meta_max<T1::n,T2::n>::max, T3::n>::max\n+    };\n+};\n+\n+template<class T>\n+struct Z {\n+    enum {\n+       a = T::a,\n+       n = T::n\n+    };\n+};\n+\n+Z<Y<X,X,X> > z;"}, {"sha": "b3468d9e82f94f9120fbb82a6ee0c69eb6a9d4d6", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb21.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb21.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,22 @@\n+#include <vector>\n+\n+#include <strstream.h>\n+\n+/*----------------------------------------*/\n+\n+struct connection_t {\n+  connection_t() {}\n+};\n+\n+vector<connection_t> connections;\n+\n+/*----------------------------------------*/\n+\n+int\n+main() {\n+  ostrstream str;\n+\n+  connections.insert(connections.end(), connection_t());\n+\n+  return 0;\n+}"}, {"sha": "b2d6ab6413910ae918a2dd866f8447bea46d7d62", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb22.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb22.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,24 @@\n+// Build don't link:  \n+// XFAIL, doesn't.\n+\n+class MyInt\n+{\n+public:\n+        MyInt(int = 0) {}\n+        operator int() const {return 2;}\n+};\n+\n+bool operator==(const MyInt& a, const int& b)\n+{\n+        return (int)a == b;\n+}\n+\n+bool operator==(const MyInt& a, const MyInt& b)\n+{\n+        return (int)a == (int)b;\n+}\n+\n+bool f()\n+{\n+        return 3 == MyInt();\n+}"}, {"sha": "8a0602a82353df2d89e60f013d1b16c22dd27f05", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb23.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb23.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,20 @@\n+// Build don't link:\n+class foo {\n+protected:\n+  void __duplicate ();\n+\n+};\n+\n+class bar : public virtual foo  {\n+protected:\n+    void __duplicate() {\n+       foo::__duplicate ();\n+    }\n+};\n+\n+class oops : public virtual bar {\n+protected:\n+    void __duplicate() {\n+       foo::__duplicate ();\n+    }\n+};"}, {"sha": "b1f01043817236485fee1745276473e9c567bf11", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb24.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb24.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+#include <iostream.h>\n+\n+template < class T >\n+class X\n+{\n+  protected:\n+\n+    union {\n+        int     x;\n+        double  y;\n+    };\n+};\n+\n+template < class T >\n+class Y : public X<T>\n+{\n+  public:\n+\n+    using X<T>::x;\n+\n+    void        f () { cout << x << endl; }\n+};"}, {"sha": "f764a051f55c4065e8785ca6c80fdb606c047f23", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb25.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb25.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,9 @@\n+#include <stack>\n+#include <vector>\n+\n+\n+int main()\n+{\n+  priority_queue< int, vector<int>, greater<int> > pq;\n+  return 0;\n+}"}, {"sha": "38d51bcef3b432b41b79f53451706fff472f42fd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb26.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb26.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,23 @@\n+//\n+// egcs-2.90.06\n+// cannot declare friend of enclosing class using its scope, works fine\n+// without scope or for definition of foo::bar::f\n+//\n+\n+class foo\n+{\n+  public:\n+   static int f();\n+   class bar {\n+     friend int foo::f();\n+//     friend int f();\n+     static int x;\n+     public:\n+     static int f() {return foo::f();};\n+   };\n+};\n+\n+int foo::f() {\n+   return bar::x;\n+}\n+"}, {"sha": "3b0ffd6afb33cf12571b0fd5a8da38119bb1798b", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb27.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb27.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,42 @@\n+/* bug.cc */\n+/* simple program to demonstrate the bug with named return values in gcc\n+*/\n+/* (w) 4.9.97 by Kurt Garloff <K.Garloff@ping.de> */\n+\n+#include <iostream.h>\n+\n+// A simple numerical class\n+template <class T>\n+class test\n+{\n+   T elem;\n+ public:\n+   test ()  { elem = 0; };\n+   test (const T& a)  { elem = a; };\n+   test<T>& operator += (const test<T>& a)  { elem += a.elem; return *this; };\n+   friend test<T> operator + (const test<T>&, const test<T>&);\n+   friend ostream& operator << (ostream& os, const test<T>& a)\n+     { return os << a.elem; };\n+};\n+\n+#ifndef NOBUG\n+// named return value version\n+template <class T>\n+test<T> operator + (const test<T>& a, const test<T>& b) return c(a);\n+{ c += b; };\n+\n+#else\n+// equiv. version without named ret val\n+template <class T>\n+test<T> operator + (const test<T>& a, const test<T>& b)\n+{ test<T> c(a); c += b; return c; };\n+\n+#endif\n+\n+int main()\n+{\n+   test<int> x, y;\n+   x += 5; cout << x << endl;\n+   y = x + 2; cout << y << endl;\n+}\n+"}, {"sha": "1e1aed14657e556865feb159c2921900e38a5d33", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb28.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb28.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+#include <vector.h>\n+enum s { S };\n+class a\n+{\n+        vector<s> vs;\n+        friend class b;\n+};\n+class b\n+{\n+        vector<a> va;\n+        operator vector< vector<s> >()\n+        {\n+                vector< vector<s> > vvs(va.size());\n+                return vvs;\n+        }\n+};"}, {"sha": "17b11ea93db10f0b8b9fc8c140e4e3b94cae278a", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb29.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb29.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,15 @@\n+#include <vector.h>\n+enum s { S };\n+class a\n+{\n+        vector<s> vs;\n+        friend class b;\n+};\n+class b\n+{\n+        vector<a> va;\n+        operator vector< vector<s> >()\n+        {\n+                return vector< vector<s> >(va.size());\n+        }\n+};"}, {"sha": "d257043e46affbd0e4301ec5257a541f20c740f2", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb3.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb3.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,11 @@\n+// Build don't link:\n+#include <complex.h>\n+template<class T>\n+class Vec {\n+public:\n+    Vec() { data = new T; }\n+    Vec<T> split() { Vec<T> tmp; operator=(tmp); return tmp; }\n+    void operator=(const Vec<T> &v) { data = new T; }\n+    T *data;\n+};\n+template class Vec<complex<double> >;"}, {"sha": "c116ab4cd4dbf37138baeeb0653a28ef2bce2187", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb30.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb30.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb30.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb30.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+#include <fstream.h>\n+\n+class bifstream : public ifstream {\n+public:\n+    bifstream();\n+//     ~bifstream();\n+};\n+\n+void load_bin()\n+{\n+    bifstream InFile;\n+\n+    if (!InFile)\n+        return;\n+}"}, {"sha": "1a18af5b4c8588ced704433c976338d5d61e4730", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb31.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb31.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+#include<iostream.h>\n+\n+int main() {\n+  try {\n+    throw 1;\n+  } catch(...) {\n+   try {\n+     throw;\n+   } catch(int) {\n+   }\n+   try {\n+     throw;\n+   } catch(int) {\n+   }\n+  }\n+  return 0;\n+}"}, {"sha": "b5bc839d2b2678cbce17e842436ab0678f0a0f46", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb32.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb32.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,12 @@\n+// Build don't link:\n+class A {\n+public:\n+    void malloc(unsigned int);\n+};\n+\n+void A::malloc(unsigned int) {}\n+\n+int foo() {\n+    A a;\n+    a.malloc(3);    // <-- line 10\n+}"}, {"sha": "3797ab3740f317631e6f836e5c3a0635c687cccd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb33.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb33.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,11 @@\n+#include <fstream.h>\n+#include <stdio.h>\n+\n+int\n+main()\n+{\n+    printf(\"If you see this, you don't have a problem!\\n\");\n+#ifdef EXPOSE_BUG\n+    ifstream a;\n+#endif\n+}"}, {"sha": "08167b5d981b200a5f4f7747252fb8c76311889c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb34.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb34.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link:\n+class Base {\n+public:\n+  class Bar { public: virtual ~Bar() {}; };\n+};\n+\n+class Derived : public Base {\n+public:\n+  class Bar : public Base::Bar {};\n+};\n+\n+template <class T>\n+class XYZ : public T::Bar {\n+};\n+\n+void test() {\n+  XYZ<Base> b;\n+  XYZ<Derived> d;\n+}"}, {"sha": "e28fb4925f6e9da7ce5e5f66601e1d11bbe28b3d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb35.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb35.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,38 @@\n+// Build don't link:\n+\n+class string\n+{\n+public:\n+    string();\n+    string(const string& x);\n+    string(const char* t);\n+\n+    ~string();\n+};\n+\n+void set_status(string message);\n+\n+class StatusDelay {\n+private:\n+    string cause;\n+\n+public:\n+    StatusDelay(const string& c)\n+        : cause(c)\n+    {\n+        set_status(cause);\n+    }\n+\n+    ~StatusDelay()\n+    {\n+        set_status(cause);\n+    }\n+};\n+\n+static char delay_message[] = \"Filtering files\";\n+\n+static void searchRemote()\n+{\n+    StatusDelay delay(delay_message);\n+    return;\n+}"}, {"sha": "07fc4c52663aad0461ed934e28f8a7f886ff4158", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb36.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb36.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,15 @@\n+  #include <vector>\n+\n+  template <typename T=float> class foo {\n+  public:\n+    foo();\n+    foo(vector<int> v);\n+  private:\n+    vector<int> v;\n+    T t;\n+  };\n+\n+  template <typename T=float> foo<T>::foo()               :v(),   t() {}\n+  template <typename T=float> foo<T>::foo(vector<int> v_) :v(v_), t() {}\n+\n+  foo<float> a;"}, {"sha": "be4b57d8751ff98e40e71eaf50044195cbd17647", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb37.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb37.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,26 @@\n+// Build don't link: \n+template<class T>\n+struct A {\n+    typedef T T1;\n+};\n+\n+template<class T>\n+struct B {\n+    typedef T T2;\n+};\n+\n+template<class T>\n+struct C {\n+};\n+\n+template<class E>\n+C<typename E::T2::T1>\n+foo (E)\n+{\n+    return C<typename E::T2::T1>();\n+}\n+\n+void test()\n+{\n+    foo(B<A<int> >());\n+}"}, {"sha": "9a75405d1294cf480e3b6d862443b6759e46a0ba", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb38.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb38.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,37 @@\n+// Build don't link: \n+class string\n+{\n+public:\n+    string();\n+    string(const string& x);\n+    string(const char* t);\n+\n+    ~string();\n+};\n+\n+void set_status(string message);\n+\n+class StatusDelay {\n+private:\n+    string cause;\n+\n+public:\n+    StatusDelay(const string& c)\n+        : cause(c)\n+    {\n+        set_status(cause);\n+    }\n+\n+    ~StatusDelay()\n+    {\n+        set_status(cause);\n+    }\n+};\n+\n+static char delay_message[] = \"Filtering files\";\n+\n+static void searchRemote()\n+{\n+    StatusDelay delay(delay_message);\n+    return;\n+}"}, {"sha": "feefca77ad938a0d04772f54214aca620d62293b", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb39.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb39.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link: \n+#include <ctype.h>\n+#include <iostream.h>\n+// #include <streambuf.h>\n+#include <libio.h>\n+#include <strstream.h>\n+\n+extern bool foo2 (ostream &out, istream &in);\n+\n+bool\n+foo1 (ostream &out, const char *in)\n+{\n+  strstreambuf sb (in, (int) strlen (in));\n+  istream fmt (&sb);\n+  return foo2 (out, fmt);\n+}"}, {"sha": "152f963209f690b35c767538cc92f0da510999cd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb4.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,48 @@\n+// Error: Internal Compiler Error in GCC 2.7.2 and EGCS 1998/05/28 snapshot.\n+\n+#include <iostream.h>\n+\n+class some_base\n+        {\n+public:\n+        class base_func_args;\n+        virtual void func(base_func_args &) = 0;\n+        };\n+\n+class some_base::base_func_args\n+        {\n+public:\n+        int i;\n+        };\n+\n+class some_derived : public some_base\n+        {\n+public:\n+        class derived_func_args;\n+        void func(derived_func_args &);\n+        };\n+\n+\n+class derived_func_args : public some_base::base_func_args\n+        {\n+public:\n+        float f;\n+        };\n+\n+class some_derived::func(derived_func_args &a)\n+        {\n+        cout << a.i << ' ' << a.f << endl;\n+        }\n+\n+int\n+main()\n+        {\n+        some_derived d;\n+        some_derived::derived_func_args dfa;\n+        some_base *b = &d;\n+\n+        dfa.i = 10;\n+        dfa.f = 20;\n+        b->func(dfs);\n+        return 0;\n+        }"}, {"sha": "2529fef9dd57d446e5f43d2697eb0be1c8467840", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb40.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb40.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+#include <complex>\n+\n+void foo() {\n+    complex<double> x(0, 0);\n+    complex<double> y = 1.0 + x;   // OK\n+    complex<double> z = 1 + x;     // line 6: <<<< 1 doesn't match double\n+}"}, {"sha": "3c97e01844e3ef99e7330d94e50a2bf5452ff370", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb41.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb41.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,13 @@\n+#include <iostream.h>\n+#include <iterator.h>\n+#include <string>\n+\n+ostream_iterator<string> oo(cout);\n+\n+int main()\n+{\n+    *oo = \"Hello, \";\n+    ++oo;\n+    *oo = \"world!\\n\";\n+}\n+"}, {"sha": "0602d16c7876111b3486f5651299352ffc32f294", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb42.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb42.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb42.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb42.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,23 @@\n+#define TEMPLATE 1\n+#include <vector.h>\n+#include <algo.h>\n+\n+template <class T> class Expr\n+{\n+public :\n+Expr(){};\n+Expr(const T&){};\n+};\n+\n+#ifdef TEMPLATE\n+template <class T >\n+inline bool compare(const Expr<T> a, const Expr<T> b){ return true; };\n+#else\n+inline bool compare(const Expr<int> a, const Expr<int> b){ return true; };\n+#endif\n+\n+void main()\n+{\n+vector<int>     a(3);\n+sort( a.begin(), a.end(), compare );\n+}"}, {"sha": "deba6cbe14b5e507497e24c419e1e4dc15c1d798", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb43.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb43.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,48 @@\n+#include <vector.h>\n+#include <algo.h>\n+\n+template <class T> class Expr \n+{\n+public :\n+Expr(){};\n+Expr(const T&){};\n+};\n+\n+#ifdef TEMPLATE\n+template <class T >\n+inline bool compare(const Expr<T> a, const Expr<T> b){ return true; };\n+#else\n+inline bool compare(const Expr<int> a, const Expr<int> b){ return true; };\n+#endif\n+\n+void main()\n+{\n+  vector<int>\ta(3);\n+#if TEMPLATE == 1\n+  sort( a.begin(), a.end(),\n+\tstatic_cast<bool (*)(const Expr<int>,const Expr<int>)>(compare) );\n+#elif TEMPLATE == 2\n+  sort( a.begin(), a.end(), compare<int> );\n+#elif TEMPLATE == 3\n+  sort<vector<int>::iterator,\n+       pointer_to_binary_function<const Expr<int>, const Expr<int>, bool> >\n+    ( a.begin(), a.end(), compare );\n+#elif TEMPLATE == 4\n+  sort( a.begin(), a.end(),\n+\tptr_fun<const Expr<int>, const Expr<int>, bool> (compare) );\n+#elif TEMPLATE == 5\n+  sort( a.begin(), a.end(),\n+\tptr_fun(compare<int>) );\n+#elif TEMPLATE == 6\n+  sort( a.begin(), a.end(),\n+\tpointer_to_binary_function<const Expr<int>, const Expr<int>, bool>(compare) );\n+#elif TEMPLATE == 7\n+  sort( a.begin(), a.end(),\n+\tpointer_to_binary_function<const Expr<int>, const Expr<int>, bool>(compare<int>) );\n+#elif TEMPLATE == 8\n+  sort( a.begin(), a.end(),\n+\tpointer_to_binary_function<const Expr<int>, const Expr<int>, bool>(compare<>) );\n+#else\n+  sort( a.begin(), a.end(), compare );\n+#endif\n+}"}, {"sha": "8a60df42abd8199df2be6e86f45ea73bea015042", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb44.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb44.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,24 @@\n+// spurious 'const' in error.\n+\n+#include <stdio.h>\n+#include <iostream.h>\n+\n+template <class T>\n+class Vector\n+{\n+  friend ostream& operator<< (ostream& out, const Vector<T> & vec);\n+};\n+\n+template <class T>\n+ostream& operator<< (ostream& out,  const Vector<T> & vec)\n+{}\n+\n+template class Vector<char>;\n+template ostream& operator<< (ostream& out,  const Vector<char> &);\n+\n+main()\n+{\n+  Vector<char> vc;\n+  ostream out;\n+  out << vc;\n+}"}, {"sha": "9e2642c2a426a2fa79c463cf441db269b12b4eee", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb45.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb45.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,6 @@\n+// Build don't link: \n+class A {};\n+class B : public virtual A {};\n+template <class Imp> class C : public Imp {};\n+\n+template class C<B>;"}, {"sha": "4b40322805dc15f9afd9d321a8cbd5b866a10683", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb46.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb46.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,26 @@\n+#include <iostream.h>\n+\n+class A1 {\n+ public:\n+        virtual void foo() {friend class B;};\n+};\n+\n+class A2 : public virtual A1 {friend class B;};\n+\n+class A3 : public virtual A1, private A2 {friend class B;};\n+\n+class B\n+{\n+ public:\n+        B(A1* a) : itsA(dynamic_cast<A2*>(a)) {};\n+        A2* itsA;\n+};\n+\n+int main()\n+{\n+        A1* a=new A3;\n+        B b(a);\n+\n+        if (b.itsA) cout << \"cast ok\" << endl; else cout << \"cast failed\" << endl;\n+        return 0;\n+}"}, {"sha": "d615d1c76a5d2a78ea79ce439754924dd958529d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb47.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb47.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,42 @@\n+/*\n+ *  Test program to isolate internal compiler error.\n+ */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+#include <assert.h>\n+#include <iostream.h>\n+#include <fstream.h>\n+#include <ctype.h>\n+\n+#include <vector.h>\n+\n+class MESSAGE {\n+public:\n+  int MessNum;\n+  int Size;\n+\n+  // constructors\n+  MESSAGE(int MN, int Sz);\n+\n+  MESSAGE();\n+\n+};\n+\n+//  Make a message if message rule is triggered by event.\n+//  Returns either a MESSAGE * (if successful) or NULL (if not).\n+MESSAGE *MakMessage(int ev, int sz);\n+\n+int main(int argc, char **argv) {\n+  vector<MESSAGE &> Messages;\n+  vector<MESSAGE &>::iterator itMess;\n+\n+  int MN, SZ;\n+\n+  MN=SZ=1;\n+\n+  MESSAGE *Messg=MakMessage(MN,SZ);\n+  if (Messg) Messages.push_back(*Messg);\n+}\n+\n+"}, {"sha": "1d10bed5c037b07d29c5e168e0978271976e646b", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb48.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb48.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link: \n+char *t1 (const char *s)\n+{\n+  return const_cast<char *>(s);\n+}\n+\n+char *&t1 (const char *&s)\n+{\n+  return const_cast<char *&>(s);\n+}"}, {"sha": "3d39b43d325aafab343dfebaf17347fad6ec4f28", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb49.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb49.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,48 @@\n+// Build don't link:  \n+\n+// Here we declare ::S\n+typedef struct s1 *S;\n+\n+struct s1\n+{\n+  int s;\n+};\n+\n+struct A\n+{\n+  // Here we declare A::S\n+  typedef struct s1 *S;\n+};\n+\n+template<class T, class U> class XX;\n+\n+template<class T, class U>\n+class X\n+{\n+public:\n+  static T *do_something ();\n+  friend class T;\n+  friend class XX<T, U>;\n+};\n+\n+struct N\n+{\n+  // Here we declare N::S\n+  class S\n+  {\n+  };\n+\n+  // Should use N::S and A::S.\n+  typedef X<S, A::S> X_S;\n+\n+  void bug ();\n+};\n+\n+void\n+N::bug ()\n+{\n+  // X_S is template class X<N::S, A::S>\n+  // `s' is N::S.\n+  S *s = X_S::do_something ();\n+}\n+"}, {"sha": "6609be8c0ddd1317847ce800eb05be4f9e66c695", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb5.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,13 @@\n+// Build don't link:\n+enum { a, b };\n+\n+class Bug {\n+  int pri:8;\n+  int flags:24;\n+public:\n+  void bug() {\n+    flags |= a;   // this does not work\n+  }\n+};\n+\n+void dummy(Bug x) { x.bug(); }"}, {"sha": "c6eb4aa3216802e69dcc7f6f805e9d428468b181", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb50.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb50.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+struct foo { };\n+int f(int a, int b)\n+{\n+        if (b == 0)\n+                throw foo();\n+        return a / b;\n+}\n+int main()\n+{\n+        try {\n+                f(0, 0);\n+                return 0;\n+        } catch (foo x) {\n+                return 1;\n+        }\n+}"}, {"sha": "0357f92ba666149ed6e936591677a0bc6369a26a", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb51.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb51.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,36 @@\n+// Build don't link: \n+typedef unsigned long   Xv_opaque;\n+\n+class DynaString\n+{\n+public:\n+    DynaString();\n+    DynaString( const DynaString& dynaStr );\n+    DynaString( const long n );\n+    ~DynaString();\n+\n+    int operator ==( const char* const string ) const;\n+};\n+\n+class DDE_Defaults\n+{\n+public:\n+        DynaString      GetHost();\n+        DynaString      GetService();\n+        DynaString      GetDatabase();\n+};\n+\n+extern DDE_Defaults* ddeDefaults;\n+\n+void\n+f()\n+{\n+        DynaString tempHost, tempService, tempDatabase;\n+        if(     (tempHost = ddeDefaults->GetHost()) == 0\n+                || (tempService = ddeDefaults->GetService()) == 0\n+                || (tempDatabase = ddeDefaults->GetDatabase()) == 0\n+        )\n+        {\n+        }\n+}\n+"}, {"sha": "50b45169ab8c42022102f3f85980f1d2a6e4d019", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb52.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb52.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,37 @@\n+// Build don't link: \n+class base {\n+protected:\n+    virtual void f();\n+};\n+\n+class d1 : public virtual base {\n+protected:\n+    void f();\n+};\n+\n+void d1::f()\n+{\n+    base::f();\n+}\n+\n+class dd1 : public virtual d1 {\n+protected:\n+     void f();\n+};\n+\n+void dd1::f()\n+{\n+    d1::f();\n+    base::f();\n+}\n+\n+class d1_and_base : public virtual d1, public virtual base {\n+protected:\n+     void f();\n+};\n+\n+void d1_and_base::f()\n+{\n+    d1::f();\n+    base::f();\n+}"}, {"sha": "328fee9387a687296f96039525bc6f49e510063f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb53.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb53.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb53.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb53.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+#include <list>\n+\n+main()\n+{\n+        list<int&> kill_the_compiler_now(1);\n+}\n+"}, {"sha": "dfcf3a9e927deacd06e5b38ffdeef243baca7a49", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb54.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb54.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb54.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb54.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+#include <iomanip.h>\n+\n+int main()\n+{\n+\tcout << setbase(3) << endl;\n+\texit (0);\n+}"}, {"sha": "56b7e43626f87f37af26694e3fe2e80f7f0074cb", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb55.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb55.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,9 @@\n+// Build don't link: \n+#include <strstream.h>\n+\n+void\n+t( char* buf )\n+{\n+        istrstream str = buf;\n+}\n+"}, {"sha": "3d260c380ffe4e3da763dd62f2e7b28a1c4b673d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb56.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb56.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,9 @@\n+\n+// Error: Internal compiler error on 1998/05/28 snapshot.\n+\n+        class foo {\n+                typedef int sometype;\n+        };\n+\n+        struct die : public foo::sometype {\n+        };"}, {"sha": "5f7de55559d23827707c47fac7b200d488a0141c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb57.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb57.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+#include <exception>\n+//using namespace std;\n+class A {\n+    class B : public std::exception {}\n+    ;\n+};"}, {"sha": "05b2f720958690ef63a6b6e7e3f4f5700fca746c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb58.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb58.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,11 @@\n+class A {\n+public:\n+        A(int i) {}\n+private:\n+        A( const A & ) {}\n+};\n+\n+main()\n+{\n+    A *list = new A[10](4);\n+}"}, {"sha": "4bc50b12e2a251871759bd5d995a5c0ce8696730", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb59.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb59.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,28 @@\n+#define INC_FUNCTIONAL  1\n+#define USE_STATIC_CAST 1\n+\n+#include <vector>\n+#include <numeric>\n+#ifdef INC_FUNCTIONAL\n+#include <functional>\n+#endif\n+\n+template<class R> int p( int val, R& r )\n+{\n+   return val + r;\n+}\n+\n+template<class R> void f( vector<R>& v )\n+{\n+#ifdef USE_STATIC_CAST\n+   accumulate( v.begin(), v.end(), 0, static_cast<int (*)(int, R&)>(p) );\n+#else\n+   accumulate( v.begin(), v.end(), 0, p<R> );\n+#endif\n+}\n+\n+main()\n+{\n+   vector<int> r;\n+   f( r );\n+}"}, {"sha": "157bf472f1af745df2c4f6d5a38cfcaee3a17584", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb6.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,14 @@\n+// Build don't link:\n+class A {\n+public:\n+  A() { t=0; }\n+  double t;\n+};\n+template <class T>\n+class B {\n+public:\n+  void f1() { new T; f2(); }\n+  void f2() { new T; }\n+};\n+template class B<A>;\n+"}, {"sha": "e036d903fead359253afe275706dc4d8817b0f20", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb60.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb60.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+#include <string>\n+\n+class t {\n+public:\n+       t(const string& s) : s_(s) {}\n+       string s_;\n+       static t* t_;\n+};\n+\n+t* t::t_;\n+\n+t* makeT()\n+{\n+       return new t(\"test\");\n+       return t::t_ ? t::t_ :\n+        t::t_ = new t(\"test\");\n+}"}, {"sha": "370273ae26d7ee4904f41615f912faa3b031c4bd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb61.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb61.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link: \n+void\n+action0(float& arg1)\n+{\n+  long cn0 = 1;\n+\n+  arg1 = cn0;\n+}"}, {"sha": "3c1008c7cf8d2e12ac3ea6b5406e18a68c6473d2", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb62.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb62.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb62.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb62.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,6 @@\n+#include <vector>\n+\n+void f(void)\n+{\n+  vector<int> l(5, 0);\n+}"}, {"sha": "79b153eb9bd9e26628d46d1e8702015775a9fcda", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb63.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb63.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,13 @@\n+#include <stdio.h>\n+\n+class A {\n+public:\n+        A(bool b) { abort(); }\n+        A(int a, bool b) { printf(\"cool\\n\"); }\n+};\n+\n+main() {\n+        A* a;\n+\ta = new A[2] = { A(1,false), A(1,false) } ;\n+        a = new A[2](1,false);\n+}"}, {"sha": "da043af5191bb53aba553f03341379311fd16c78", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb64.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb64.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link: \n+template <class A>\n+class B:public A {\n+  B(){}\n+};\n+\n+template <class A>\n+class C:public B<A> {\n+  C(){}\n+};\n+\n+/*\n+g++  bugsol.C\n+bugsol.C:9: Internal compiler error.\n+bugsol.C:9: Please submit a full bug report to `egcs-bugs@cygnus.com'.\n+\n+g++ -v\n+Reading specs from\n+/home/pierre/local/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.90.16/specs\n+gcc version egcs-2.90.16 971105 (gcc2-970802 experimental)\n+\n+egcc compiled with gcc version 2.7.2.1 on debian 1.3.1\n+\n+*/\n+"}, {"sha": "94be7ecbdb7ce4d608f6decce8150102bd2b6d6f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb65.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb65.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb65.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb65.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,22 @@\n+#include <iterator>\n+\n+template<size_t n, size_t i> struct PartialDotProduct {\n+    template<class T>\n+    static T Expand(T* a, T* b) { return T(); }\n+};\n+\n+const int N = 10;\n+\n+template<class In1, class In2>\n+typename iterator_traits<In1>::value_type\n+dot(In1 f1, In2 f2)\n+{\n+    return PartialDotProduct<N, 0>::Expand(f1, f2);     // line 14\n+}\n+\n+int main()\n+{\n+    double a[N], b[N];\n+\n+    double s = dot(&a[0], &b[0]);\n+}"}, {"sha": "e9a303afdf684aba6e0aa1375d6141da0f41f7ab", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb66.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb66.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb66.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb66.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,22 @@\n+#include <assert.h>\n+#include <iostream.h>\n+\n+int bar ()\n+{\n+  throw 100;\n+}\n+\n+main ()\n+{\n+  int i = 0;\n+  try\n+    {\n+      i = bar ();\n+    }\n+  catch (...)\n+    {\n+    }\n+\n+//  cout << \"i = \" << i << endl;\n+  assert (i == 0) ; \n+}"}, {"sha": "f73ece9f0164b499e84db8bba412c3caaf7d6b66", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb67.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb67.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,15 @@\n+// Build don't link: \n+/* \n+The 971114 \"gcc/cp/parse.y\" doesn't properly identify non-aggregate\n+types used as base classes.\n+\n+First, the rule:\n+\n+        base_class: base_class_access_list see_typename base_class.1\n+\n+uses \"IS_AGGR_TYPE\" instead of \"is_aggr_type\" to check \"base_class.1\",\n+so no error is reported for code like:\n+\n+*/\n+        typedef int an_int;\n+        class bar : public an_int {};"}, {"sha": "ebbc33b71526410b1bc5ba539f47aa29f6af4220", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb68.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb68.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb68.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb68.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+\n+// Error: Internal Compiler Error.\n+\n+        class foo {\n+                typedef int an_int;\n+        };\n+        class bar : foo::an_int {};  // causes internal compiler error"}, {"sha": "bd413ddacf5df240cc0c5b6527e04d9d713dde41", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb69.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb69.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,9 @@\n+        #include <iostream.h>\n+        struct foo {\n+                foo(int x) { cerr << \"foo's int constructor (\" << x << \")\\n\"; };\n+        };\n+        struct bar : foo {\n+                typedef int an_int;\n+                bar() : bar::an_int(3) {};  // will call foo::foo(3)\n+        };\n+        main() { bar b; }"}, {"sha": "fc43aab4179486a88e7027e13ebd1ad4eb819a86", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb7.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+// Build don't link:\n+#include <vector>\n+\n+class T\n+{\n+  public:\n+  T();\n+\n+};\n+\n+vector <T> tp;\n+\n+void f()\n+{\n+      tp.insert(tp.begin(), 10 , T());\n+}"}, {"sha": "346eda2c91c808cb7e17ebefffddcf01055d9a2c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb70.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb70.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link:  \n+\n+class X {\n+public:\n+  inline operator bool() const { return true; }\n+};\n+\n+class Y : public X {\n+private:\n+  inline operator void*() const { return 0; }\n+};\n+\n+\n+void f(Y const& y) {\n+  if( bool(y) ) {\n+  }\n+}"}, {"sha": "5e4dacba518fd58d5a03e98438421b249b27e83d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb71.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb71.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,37 @@\n+// Build don't link: \n+typedef unsigned int size_t;\n+\n+class   A {\n+\n+public:\n+  void          operator delete(void*, size_t);\n+  void*         operator new(size_t);\n+};\n+\n+class   B   : public A  {\n+friend class   D;\n+\n+  B();\n+  unsigned      counter;\n+};\n+\n+class   D {\n+\n+  int                   ins( B*&);\n+};\n+\n+int\n+D::ins( B*& tempN)\n+{\n+  unsigned i;\n+\n+  if (i == 10) {\n+  }\n+  else {\n+  }\n+\n+  tempN = new B();\n+  tempN->counter = 20;\n+\n+  return 0;\n+}"}, {"sha": "fbdf507955463f39f695f9f29677e3dc11ced406", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb72.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb72.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,16 @@\n+#include <vector>\n+\n+template <class T>\n+class TPROGRAM\n+    {\n+    typedef vector< T > ITEMS;\n+\n+    class const_iterator\n+        {\n+        /*typename*/ ITEMS::const_iterator i;\n+\n+        const_iterator(const /*typename*/ ITEMS::const_iterator i2) {\n+            i=i2;\n+            }\n+        };\n+    };"}, {"sha": "b5aae397a8af3b1e73fdeb2320f2c1886af08542", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb73.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb73.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb73.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb73.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,14 @@\n+// Special g++ Options: -O -Wall\n+// Depeletes VM.\n+\n+#include <iostream.h>\n+#include <list>\n+#include <algorithm>\n+using namespace std;\n+\n+int main()\n+{\n+    int daten [16] = { 1, 4, 4, 6, 1, 2, 2, 3, 6, 6, 6, 5, 7, 5, 4, 4};\n+    list<int> menge;\n+    copy (daten, daten+16, back_inserter(menge));\n+}"}, {"sha": "1ec7da6cc719dad14c768e829df631727051abac", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb74.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb74.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb74.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb74.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,33 @@\n+// Build don't link: \n+class base {\n+public:\n+        virtual ~base();\n+};\n+\n+\n+class foo : public base {\n+\n+public :\n+\n+     foo (char *cs);\n+\n+     virtual void op (unsigned char dummy = false);\n+     unsigned char m_dummy;\n+};\n+\n+\n+void foo :: op ( unsigned char dummy)\n+\n+{\n+    bool bar;\n+\n+    if (dummy) {\n+        foo IT_tempPhase( 0 );\n+        return;\n+    }\n+\n+    if ((m_dummy || bar)) {\n+\n+    }\n+\n+}"}, {"sha": "41ad816bddd2bff2ca99331e3991b847a9222523", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb75.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb75.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link: \n+int*& foo (int const *& x)\n+{\n+  return const_cast<int*&> (x);\n+}\n+\n+/*\n+If the references in this example are changed to pointers (change\n+all `&''s to `*'), no warnings result.\n+\n+I think this is incorrect according to CD2 5.2.11, para 4:\n+\n+4 An  lvalue of type T1 can be explicitly converted to an lvalue of type\n+  T2 using the cast const_cast<T2&> (where T1 and T2 are  object  types)\n+  if  a pointer to T1 can be explicitly converted to the type pointer to\n+  T2 using a const_cast.  The result of a reference const_cast refers to\n+  the original object.\n+\n+*/"}, {"sha": "c32b10411eac62387819d639c3b00d3b20e98ac9", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb76.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb76.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb76.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb76.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,19 @@\n+// from include/g++/stl_relops.h\n+template <class T>\n+inline bool operator!=(const T& x, const T& y) {\n+  return !(x == y);\n+}\n+\n+enum T {\n+  V1,\n+};\n+\n+struct X {\n+  T      t : 31;\n+};\n+\n+void\n+f(X& v) {\n+  if( v.t != V1 ) {\n+  }\n+}"}, {"sha": "206b27dbf22f96c127dc68d774bcd86b4863b647", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb77.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb77.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb77.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb77.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,30 @@\n+#include <stream.h>\n+#include <strstream.h>\n+\n+int\n+main(int, char* [])\n+{\n+  strstream s;\n+\n+  s << \"line 1\\nline 2\\n\\nline 4\";\n+  s << ends;\n+\n+  int nLine = 0;\n+\n+  while( true ) {\n+    char* line = 0;\n+    s.gets(&line);\n+\n+    if( ! line ) {\n+      break;\n+    }\n+\n+    ++nLine;\n+    cout << nLine << \": \" << line << endl;\n+\n+    if( nLine > 10 ) {  // stop infinite loop\n+      break;\n+    }\n+  }\n+  return 0;\n+}"}, {"sha": "3221d86c4aa17987a7e5033b103b828ebbbb4311", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb78.C", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb78.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb78.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb78.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,135 @@\n+// Special g++ Options: -W -Wall -O\n+\n+//This is the source code from FAQ-259, found in chapter 20 of \"C++ FAQs.\"\n+//Copyright (C) 1994, Addison-Wesley Publishers, Inc.; All rights reserved.\n+//\n+//The book, \"C++ FAQs\" is by Marshall P. Cline and Greg A. Lomow,\n+//Copyright (C) 1994, Addison-Wesley Publishers, Inc.; All rights reserved.\n+//\n+//This code is presented for its instructional value.  It has been tested with\n+//care, but it is not guaranteed for any particular purpose.  Neither the\n+//publisher nor the authors offer any warranties or representations, nor do\n+//they accept any liabilities with respect to this code.\n+\n+#include <string.h>\n+#include <iostream.h>\n+\n+class BadIndex { };\n+\n+class String {\n+public:\n+\n+  String()\n+    : len_(0), data_(new char[1])\n+    { data_[0] = '\\0'; }\n+\n+  String(const char* s)\n+    : len_(strlen(s)), data_(new char[len_ + 1])\n+    { memcpy(data_, s, len_ + 1); }\n+\n+ ~String()\n+    { delete [] data_; }\n+\n+  String(const String& s)\n+    : len_(s.len_), data_(new char[s.len_ + 1])\n+    { memcpy(data_, s.data_, len_ + 1); }\n+\n+  String& operator= (const String& s)\n+    {\n+      if (len_ != s.len_) { //makes self-assignment harmless\n+        char* newData = new char[s.len_ + 1];\n+        delete [] data_;\n+        data_ = newData;\n+        len_ = s.len_;\n+      }\n+      memcpy(data_, s.data_, len_ + 1);\n+      return *this;\n+    }\n+\n+  unsigned len() const\n+    { return len_; }\n+\n+  char& operator[] (unsigned i)\n+    { indexTest(i); return data_[i]; }\n+  char  operator[] (unsigned i) const\n+    { indexTest(i); return data_[i]; }\n+\n+  friend ostream& operator<< (ostream& o, const String& s)\n+    { return o.write(s.data_, s.len_); }\n+\n+  friend int operator== (const String& a, const String& b)\n+    { return a.len_ == b.len_ &&\n+             memcmp(a.data_, b.data_, a.len_) == 0; }\n+  friend int operator!= (const String& a, const String& b)\n+    { return ! (a == b); }\n+\n+private:\n+  void indexTest(unsigned i) const\n+    { if (i >= len_) throw BadIndex(); }\n+  unsigned len_;  //ORDER DEPENDENCY; see FAQ-190\n+  char* data_;    //ORDER DEPENDENCY; see FAQ-190\n+};\n+\n+class AccessViolation { };\n+class BadFileName     { };\n+\n+class File {\n+public:\n+  File(const String& filename)\n+    throw(AccessViolation, BadFileName)\n+    {\n+      cout << \"Open \" << filename << \"\\n\";\n+      if (filename == \"badAccess.txt\")\n+        throw AccessViolation();\n+      if (filename == \"badName.txt\")\n+        throw BadFileName();\n+    }\n+};\n+\n+class UserClass {\n+public:\n+  void f(const String& filename) throw(BadFileName);\n+};\n+\n+void\n+UserClass::f(const String& filename) throw(BadFileName)\n+{\n+  try {\n+    File f(filename);\n+  }\n+  catch (const AccessViolation& e) {\n+    cout << \"  FULLY recover from access-violation\\n\";\n+  }\n+  catch (const BadFileName& e) {\n+    cout << \"  PARTIALLY recover from bad-file-name\\n\";\n+    throw;\n+  }\n+}\n+\n+void\n+tryIt(const String& filename)\n+{\n+  try {\n+    UserClass u;\n+    u.f(filename);\n+    cout << \"  OK\\n\";\n+  }\n+  catch (const BadFileName& e) {\n+    cout << \"  Finish recovering from bad-file-name\\n\";\n+  }\n+}\n+\n+main()\n+{\n+  tryIt(\"goodFile.txt\");\n+  tryIt(\"badAccess.txt\");\n+  tryIt(\"badName.txt\");\n+}\n+\n+// g++ -O -o warn warn.C -W -Wall\n+// warn.C: In method `void UserClass::f(const class String &)':\n+// warn.C:96: warning: unused variable `class File f'\n+// warn.C:101: warning: `struct cp_eh_info * __exception_info' might \n+// be used uninitialized in this function\n+\n+"}, {"sha": "599d0421c5b45c324b49d6dda5b7367b477de262", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb79.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb79.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb79.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb79.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,23 @@\n+// Makes bogus x86 assembly code.\n+#include <iostream.h>\n+\n+template<class T>\n+T max(T a, T b)\n+{\n+  return (a > b) ? a : b;\n+}\n+\n+// Prototypes (enable one or the other)\n+double max<>(double, double);\n+// int max(int, int);\n+\n+int main()\n+{\n+  int i = 123;\n+  double d = 1234.5678;\n+\n+  cout.precision(12);\n+  cout << max(d, i) << endl;  // #1\n+  cout << max(i, d) << endl;  // #2\n+  return 0;\n+}"}, {"sha": "c7619b3fa8d317768aab3f710d6672106db48946", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb8.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb8.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,13 @@\n+\n+class foo {\n+public:\n+  operator <<(const void *);\n+  operator <<(char *);\n+};\n+\n+void main()\n+{\n+  foo f;\n+  f << (void*)0;\n+}\n+"}, {"sha": "71614236558eb4f52b9199a73a5d77d21dfc2a3f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb80.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb80.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb80.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb80.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link: \n+#include <exception>\n+\n+class A {\n+    class B : public std::exception {}\n+    ;\n+};"}, {"sha": "919fd58b0fe64224ee78b5bf626a4c75926cc1d6", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb81.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb81.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb81.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb81.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,42 @@\n+// Build don't link: \n+class   x\n+{\n+public:\n+        x   (int init_buffer_size=0);\n+        ~x   ();\n+};\n+\n+\n+\n+class   xSequence\n+{\n+public:\n+        xSequence   ();\n+        ~xSequence   ();\n+        x   Get(int index)const;\n+};\n+\n+\n+\n+class   foo\n+{\n+public:\n+        bool bar(const x   & name, x    & value);\n+\n+};\n+\n+\n+\n+bool foo::bar(const x  & name, x    & value)\n+{\n+        bool result = false;\n+\n+        xSequence    seq;\n+        x    v1, v2;\n+        if(result ? bar(seq.Get(1),v2) : bar(seq.Get(2),v2))\n+\n+                ;\n+\n+        return result;\n+}\n+"}, {"sha": "3c85dc3b7e977f22073cc246b41c83863c48c41f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb82.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb82.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb82.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb82.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+\n+template <int n1>\n+double val <int> ()\n+{\n+   return (double) n1;\n+};\n+\n+int main ()\n+{\n+   printf (\"%d\\n\", val<(int)3> ());\n+}"}, {"sha": "b16c834b391b0acb0b072139ab2e80d0dc66609c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb83.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb83.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb83.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb83.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,15 @@\n+// Special g++ Options: -fprofile-arcs -ftest-coverage\n+void\n+swap(int& x, int& y) throw()\n+{\n+  int tmp = x;\n+  x = y;\n+  y = tmp;\n+}\n+\n+main()\n+{\n+  int i = 5;\n+  int j = 7;\n+  swap(i, j);\n+}"}, {"sha": "dce51d86d52b53a91a2ce8cf0637bca98f45bba8", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb84.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb84.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb84.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb84.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+// Error: Internal Compiler error on GCC 2.7.2.3 & EGCS 1998/05/23 snapshot.\n+\n+class A {\n+public:\n+        enum { ONE, TWO, THREE };\n+};\n+\n+template <const unsigned c1,const unsigned c2,const unsigned c3>\n+void f() {\n+\n+}\n+\n+int\n+main()\n+{\n+        f<A::ONE,A::TWO,A::THREE>();\n+}"}, {"sha": "3e55fb74415fe5fa4ce8ec49ef352f53576eb9f8", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb85.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb85.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb85.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb85.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,12 @@\n+// This SHOULDn't compile, becuase 'foo' is never a valid asm.\n+\n+template <const unsigned c>\n+void f() {\n+        asm(\"foo\");\n+}\n+\n+int\n+main()\n+{\n+        f<1>();\n+}"}, {"sha": "463d2d1cb6084b0d78adcd242ad9e748d1dcb39f", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb86.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb86.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb86.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb86.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,5 @@\n+// Build don't link: \n+template <class T>\n+class Q {\n+    friend void foo<T> ();\n+};"}, {"sha": "5147e8cc2521456d75f9c33394bd53c9d3dc5c81", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb87.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb87.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb87.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb87.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,6 @@\n+template <unsigned X, class T> struct Foo {\n+  friend void operator<<(int, Foo const &) {}\n+};\n+template <unsigned X> class Bar : public Foo<X,int> {};\n+inline Bar<0> bar(int,int,int) { return Bar<3>(); }\n+"}, {"sha": "ba2a0812d6a8bd6456b5eff1e7d827185975dbaa", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb88.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb88.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb88.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb88.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,7 @@\n+#include <stddef.h>\n+int main()\n+{\n+  throw(NULL);\n+}\n+// The code works as expected, when NULL is cast to void* explicitly [\n+// throw((void*)NULL); ]."}, {"sha": "71995bf1ac3bc96968551a6e1b4b70333f265c55", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb89.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb89.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb89.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb89.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,10 @@\n+#include <vector>\n+\n+int\n+main()\n+{\n+    int i;\n+    vector<int&> v;\n+    v.push_back(i);\n+    return 0;\n+}"}, {"sha": "cec700220cbd48c50999d82e6064feef8db43c32", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb9.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb9.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,21 @@\n+// Build don't link:\n+template <class Key>\n+class d0om_Hashmap\n+{\n+public:\n+  typedef int value_type;\n+\n+  class iterator\n+  {\n+  public:\n+    value_type* operator-> () const;\n+  };\n+\n+};\n+\n+\n+template <class Key>\n+d0om_Hashmap<Key>::value_type* d0om_Hashmap<Key>::iterator::operator-> () const\n+{\n+  return 0;\n+}"}, {"sha": "2a43645d01781375ebc2f5ebb1e2134b92999f21", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb90.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb90.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb90.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb90.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,22 @@\n+// Special g++ Options: -O2\n+// Build don't link: \n+\n+#ifdef HIDE_BUG\n+#define realloc Realloc\n+#endif\n+\n+class TmpRgn {\n+public:\n+     void\n+   realloc();\n+};\n+\n+class TmpActor {\n+    TmpRgn      tmpRgn;\n+\n+public:\n+      void\n+      realloc() {\n+          tmpRgn.realloc();\n+      }\n+};"}, {"sha": "c2abeb11152039f229f9b6f6fff78fc3f32c5507", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb91.C", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb91.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb91.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb91.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,83 @@\n+#include <sys/types.h>\n+#include <algorithm>\n+typedef short int16_t;\n+typedef unsigned short u_int16_t;\n+\n+template <class INT>\n+class other_endian\n+{\n+private:\n+   \n+  INT value;\n+\n+   \n+  u_int16_t change_endian(u_int16_t x)\n+  {\n+    union {\n+      u_int16_t i;\n+      u_int8_t c[2];\n+    } val;\n+    val.i = x;\n+    swap(val.c[0], val.c[1]);\n+    return val.i;\n+  };\n+\n+  int16_t change_endian(int16_t x)\n+  {\n+    union {\n+      int16_t i;\n+      int8_t c[2];\n+    } val;\n+    val.i = x;\n+    swap(val.c[0], val.c[1]);\n+    return val.i;\n+  };\n+public:\n+  other_endian(const INT i = 0)\n+  {\n+    value = change_endian(i);\n+  }\n+\n+  operator INT()\n+  {\n+    return change_endian(value);\n+  }\n+};\n+\n+template <class INT>\n+class same_endian\n+{\n+  INT value;\n+\n+public:\n+  same_endian(const INT i = 0)\n+  {\n+    value = i;\n+  }\n+\n+  operator INT()\n+  {\n+    return value;\n+  }\n+};\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+int main() {\n+  other_endian <u_int16_t> little_endian_16_bit_int;\n+  return 0;\n+}"}, {"sha": "c08ec42735180cecccd82575be32f78407bdce5b", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb92.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb92.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb92.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb92.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1 @@\n+template<int N> f<0>(){}"}, {"sha": "e05177b66907c447629ff1397fd7112960373b1d", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb93.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb93.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb93.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb93.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,30 @@\n+// Error: Internal compiler error on egcs 1998/05/28 snapshot.\n+\n+const double M_PI=3.14159265358979323846;\n+\n+template<int N,int I,int J,int K>\n+inline double SineSeries()\n+{\n+  const double x=I*2*M_PI/N;\n+  const bool go=K+1!=J;\n+  return 1.0-x*x/(2*K+2)/(2*K+3)*SineSeries<N*go,I*go,J*go,(K+1)*go>();\n+}\n+\n+template<>\n+inline double SineSeries<0,0,0,0>()\n+{\n+  return 1.0;\n+}\n+\n+template<int N,int I>\n+inline double Sine()\n+{\n+  const double x=(I*2*M_PI/N);\n+  return x * SineSeries<N,I,10,0>();\n+}\n+\n+int main()\n+{\n+  double f=Sine<32,5>()\n+  return 0;\n+}"}, {"sha": "a40eafb3719f959f7c38316a1d48ac37e6a8dd34", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb94.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb94.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb94.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb94.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,15 @@\n+\n+\n+class baseClass\n+{\n+private:\n+static int variable;\n+};\n+\n+class myClass : public baseClass\n+{\n+private:\n+static int variable;                    // this is intentionally duplicated\n+};\n+\n+myClass::variable = 0;"}, {"sha": "0d8e405c80a6b0e951c7d242e14225f0b83c22ec", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb95.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb95.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb95.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb95.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+struct A {};\n+\n+template <class T>\n+void operator+ (A &i, T &b) {}\n+\n+template<class T>\n+void func (A &a, T &b) {}\n+\n+int main()\n+{\n+  A a;\n+\n+#if STRANGE\n+  func(a, \"egcs\");\n+#endif\n+  a+\"egcs\";\n+}"}, {"sha": "840b2d877e6d3c8d2cc8cff8feda01cf0bca3525", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb96.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb96.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb96.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb96.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,14 @@\n+class foo\n+{\n+  public:\n+   static int f();\n+\n+   class bar {\n+     friend int foo::f();\n+   };\n+};\n+\n+int main()\n+{\n+   return 0;\n+}"}, {"sha": "e05cc415b665d2f0162bd4b0f541d1f7d06aff25", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb97.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb97.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb97.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb97.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,24 @@\n+// Creates bad assembly on sparc and x86\n+template<unsigned long SIZE>\n+struct Array { };\n+\n+template<unsigned long SIZE>\n+Array<SIZE> test_ok(const Array<SIZE>& a) {\n+    Array<SIZE> result;\n+    return(result);\n+}\n+\n+template<unsigned long SIZE>\n+Array<SIZE + 1> test_error(const Array<SIZE>& a) {\n+    Array<SIZE + 1> result;\n+    return(result);\n+}\n+\n+int main(int argc, char* argv[]) {\n+    Array<2> a;\n+\n+    test_ok(a);\n+    test_error(a); // <<< MARKED LINE!\n+\n+    return(0);\n+}"}, {"sha": "2e868240985405ccc6228840ed93289244647b8b", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb98.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb98.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,17 @@\n+// Error:    Internal compiler error in egcs 1998/05/28 snapshot.\n+\n+\n+    template<class T, unsigned int Length>\n+    inline\n+    unsigned int\n+    extent(T (&x)[Length])\n+    {\n+            return Length;\n+    }\n+\n+    extern int b[];\n+\n+    void f()\n+    {\n+            extent(b);\n+    }"}, {"sha": "a5f862429e278012aa943e1312831a695fded363", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb99.C", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb99.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb99.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb99.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,134 @@\n+ \n+ \n+ \n+ \n+ \n+ \n+\n+ \n+ \n+ \n+ \n+\n+\n+\n+\n+ \n+\n+class ref_counted\n+{\n+ \n+protected:\n+        ref_counted( void ) : _count( 0 ) {}\n+\n+public:\n+ \n+        unsigned int add_ref( void ) { return ++_count; }\n+        unsigned int release( void ) { return --_count; }\n+        unsigned int count( void ) const { return _count; }\n+\n+ \n+protected:\n+        unsigned int _count;\n+};\n+\n+\n+ \n+\n+\n+template < class T >\n+class ref_ptr\n+{\n+ \n+public:\n+        ref_ptr( T* ptr = 0 ) : _ptr( ptr )\n+        {\n+                add_ref();\n+        }\n+\n+        ref_ptr( const ref_ptr & rptr ) : _ptr( rptr.get() )\n+        {\n+                add_ref();\n+        }\n+\n+        ~ref_ptr( void ) { release(); }\n+\n+ \n+        T* get( void ) const { return _ptr; }\n+        T* operator->( void ) const { return get(); }\n+        T& operator*( void ) const { return *get(); }\n+\n+        bool operator!( void ) const { return get() == 0; }\n+        bool operator==( const ref_ptr & rptr ) const { return *get() == *rptr;\n+}\n+        bool operator<( const ref_ptr & rptr ) const { return *get() < *rptr; }\n+\n+\n+        bool operator==( T* ptr ) const { return *get() == *ptr; }\n+        bool operator<( T* ptr ) const { return *get() < *ptr; }\n+\n+        const ref_ptr & operator=( const ref_ptr & rptr )\n+        {\n+                release();\n+                _ptr = rptr.get();\n+                add_ref();\n+\n+                return *this;\n+        }\n+\n+       T* operator=( T* ptr )    \n+       {\n+         release();\n+         _ptr = ptr;\n+         add_ref();\n+\n+         return _ptr;\n+       }\n+\n+protected:\n+        void add_ref( void )\n+        {\n+                if( _ptr )\n+                        _ptr->add_ref();\n+        }\n+\n+        void release( void )\n+        {\n+                if( _ptr && 0 == _ptr->release() )\n+                {\n+                        delete _ptr;\n+                        _ptr = 0;\n+                }\n+        }\n+\n+ \n+protected:\n+        T *     _ptr;\n+};\n+\n+\n+template< class T >\n+bool operator==( T* ptr, const ref_ptr< T > & rptr )\n+{\n+        return *ptr == *rptr;\n+}\n+\n+template< class T >\n+bool operator<( T* ptr, const ref_ptr< T > & rptr )\n+{\n+        return *ptr < *rptr;\n+}\n+\n+\n+\n+class Baz : public ref_counted {\n+  int dummy;\n+};\n+\n+\n+class Bar;\n+\n+void main() {\n+  ref_ptr<Baz> foo;\n+  static_cast<Bar *> (foo)->DoSomething;\n+}"}, {"sha": "4bd49bfbb489b97b391862641ffc72afca7dc2c4", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/float1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Ffloat1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Ffloat1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Ffloat1.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,30 @@\n+// test fails on egcs 1.0.1 on x86.\n+#include <cstdlib>\n+\n+void f(double j, double& v)\n+{\n+  size_t sz = size_t(2*j+1);\n+  double norm_ = j*(j+1);\n+  double m = j;\n+  int sign_ = -1;\n+  for (size_t c=1;c<=sz;++c)\n+    for (size_t r=1;r<=sz;++r)\n+      if (r+sign_*1 == c)\n+        {\n+          double val = (norm_-m*(m+sign_));\n+          for (size_t k=1;k<2;++k)\n+            val *= (norm_ - (m+sign_*k)*(m+sign_*(k+1)));\n+          v = val;\n+        }\n+}\n+\n+int main()\n+{\n+  double v;\n+  f(1,v);\n+  if (v != 4) abort();\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "155dc0b14196f02fba284a032d72f1c0e7aaa91e", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/rtti5.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Frtti5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26963cc3e169e29e3deb2c9c66d1ceba51596db8/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Frtti5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Frtti5.C?ref=26963cc3e169e29e3deb2c9c66d1ceba51596db8", "patch": "@@ -0,0 +1,37 @@\n+class S0\n+{\n+public:\n+\n+  S0() { };\n+\n+  virtual ~S0() { }\n+};\n+\n+\n+\n+struct S { };\n+class S1 : public S, public S0\n+{\n+public:\n+\n+  S1() { }\n+};\n+\n+\n+void test_ptr(void *ctxt)\n+{\n+  S0 *ctxt1 = static_cast<S0*>(ctxt);\n+\n+  S1* ctxt2 = dynamic_cast<S1*>(ctxt1);\n+}\n+\n+\n+\n+int main()\n+{\n+  S1 *ctxt = new S1();\n+\n+  test_ptr(ctxt);\n+\n+  return 0;\n+}"}]}