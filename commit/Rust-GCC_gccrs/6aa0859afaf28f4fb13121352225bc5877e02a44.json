{"sha": "6aa0859afaf28f4fb13121352225bc5877e02a44", "node_id": "C_kwDOANBUbNoAKDZhYTA4NTlhZmFmMjhmNGZiMTMxMjEzNTIyMjViYzU4NzdlMDJhNDQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-05T15:16:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-05T15:31:04Z"}, "message": "libstdc++: Fix overconstrained std::string constructor [PR103919]\n\nThe C++17 basic_string(const T&, size_t, size_t) constructor is\noverconstrained, so it can't be used for a NTBS and a temporary string\ngets constructed (potentially allocating memory). There is no\ncorresponding constructor taking an NTBS, so no need to disambiguate\nfrom it. Accepting an NTBS avoids the temporary (and potential\nallocation) and is what the standard requires.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/103919\n\t* include/bits/basic_string.h (basic_string(const T&, size_t, size_t)):\n\tRelax constraints on string_view parameter.\n\t* include/bits/cow_string.h (basic_string(const T&, size_t, size_t)):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/cons/char/103919.cc: New test.", "tree": {"sha": "a601c01e4b0752a19f48161cfd77a92870934e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a601c01e4b0752a19f48161cfd77a92870934e64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6aa0859afaf28f4fb13121352225bc5877e02a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa0859afaf28f4fb13121352225bc5877e02a44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6aa0859afaf28f4fb13121352225bc5877e02a44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6aa0859afaf28f4fb13121352225bc5877e02a44/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3633cc54284450433b81f0340483e15df1a49a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3633cc54284450433b81f0340483e15df1a49a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3633cc54284450433b81f0340483e15df1a49a3c"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "a91ba5114b16dc63916590431587effa07fc47d1", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa0859afaf28f4fb13121352225bc5877e02a44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa0859afaf28f4fb13121352225bc5877e02a44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6aa0859afaf28f4fb13121352225bc5877e02a44", "patch": "@@ -766,7 +766,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __n   The number of characters to copy from __t.\n        *  @param  __a   Allocator to use.\n        */\n-      template<typename _Tp, typename = _If_sv<_Tp, void>>\n+      template<typename _Tp,\n+\t       typename = enable_if_t<is_convertible_v<const _Tp&, __sv_type>>>\n \t_GLIBCXX20_CONSTEXPR\n \tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n \t\t     const _Alloc& __a = _Alloc())"}, {"sha": "84aab2f33c635e41d74367eda0922295c17b1db4", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa0859afaf28f4fb13121352225bc5877e02a44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa0859afaf28f4fb13121352225bc5877e02a44/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=6aa0859afaf28f4fb13121352225bc5877e02a44", "patch": "@@ -690,7 +690,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __n   The number of characters to copy from __t.\n        *  @param  __a   Allocator to use.\n        */\n-      template<typename _Tp, typename = _If_sv<_Tp, void>>\n+      template<typename _Tp,\n+\t       typename = enable_if_t<is_convertible_v<const _Tp&, __sv_type>>>\n \tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n \t\t     const _Alloc& __a = _Alloc())\n \t: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }"}, {"sha": "94400e319ff3a7084c43db8fd4b8ddb7c3a77f2a", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/103919.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6aa0859afaf28f4fb13121352225bc5877e02a44/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F103919.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6aa0859afaf28f4fb13121352225bc5877e02a44/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F103919.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F103919.cc?ref=6aa0859afaf28f4fb13121352225bc5877e02a44", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do run { target c++17 } }\n+\n+#include <string>\n+#include <new>\n+#include <cstdlib>\n+#include <cstring>\n+#include <testsuite_hooks.h>\n+\n+std::size_t counter = 0;\n+\n+void* operator new(std::size_t n)\n+{\n+  counter += n;\n+  return std::malloc(n);\n+}\n+\n+void operator delete(void* p)\n+{\n+  std::free(p);\n+}\n+\n+void operator delete(void* p, std::size_t)\n+{\n+  std::free(p);\n+}\n+\n+int main()\n+{\n+  const char* str = \"A string that is considerably longer than the SSO buffer\";\n+\n+  // PR libstdc++/103919\n+  // basic_string(const T&, size_t, size_t) constructor is overconstrained\n+  counter = 0;\n+  std::string s(str, 2, 6);\n+  VERIFY( s == \"string\" );\n+#if _GLIBCXX_USE_CXX11_ABI\n+  // The string fits in the SSO buffer, so nothing is allocated.\n+  VERIFY( counter == 0 );\n+#else\n+  // The COW string allocates a string rep and 7 chars.\n+  VERIFY( counter < std::strlen(str) );\n+#endif\n+}"}]}