{"sha": "c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmNDU1NjBjNzg1NjEzOTExOGY3MWRkMzFkMWJjMmYzZWI3Yjk4Yw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-10-11T18:58:55Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-10-11T18:58:55Z"}, "message": "[C++ PATCH] parser simplification\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-10/msg00689.html\n\tcp/\n\t* parser.c (cp_parser_translation_unit): Return void.  Don't fail\n\tat first extra }, simplify logic.\n\t(c_parse_file): Call finish_translation_unit here.\n\n\ttestsuite/\n\t* g++.dg/parse/close-brace.C: New.\n\t* g++.dg/cpp0x/noexcept16.C: Avoid warning.\n\t* g++.old-deja/g++.other/crash32.C: Add another error\n\nFrom-SVN: r265055", "tree": {"sha": "8b9de7ab9434ac9fc55a38ffa02b3b4d41424bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b9de7ab9434ac9fc55a38ffa02b3b4d41424bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13c4e4031a391afb6368d7072217acde07607ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c4e4031a391afb6368d7072217acde07607ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c4e4031a391afb6368d7072217acde07607ff7"}], "stats": {"total": 110, "additions": 58, "deletions": 52}, "files": [{"sha": "da443d9be407d0d06afc871ac48a5346a2cb5272", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "patch": "@@ -1,3 +1,9 @@\n+2018-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.c (cp_parser_translation_unit): Return void.  Don't fail\n+\tat first extra }, simplify logic.\n+\t(c_parse_file): Call finish_translation_unit here.\n+\n 2018-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/87582"}, {"sha": "76ff83616b0395cf600a5bb2f0c87ffd9323ca59", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 36, "deletions": 49, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "patch": "@@ -2015,8 +2015,7 @@ static cp_expr cp_parser_userdef_numeric_literal\n \n /* Basic concepts [gram.basic]  */\n \n-static bool cp_parser_translation_unit\n-  (cp_parser *);\n+static void cp_parser_translation_unit (cp_parser *);\n \n /* Expressions [gram.expr]  */\n \n@@ -4585,66 +4584,52 @@ cp_parser_userdef_string_literal (tree literal)\n /* Parse a translation-unit.\n \n    translation-unit:\n-     declaration-seq [opt]\n-\n-   Returns TRUE if all went well.  */\n+     declaration-seq [opt]  */\n \n-static bool\n+static void\n cp_parser_translation_unit (cp_parser* parser)\n {\n-  /* The address of the first non-permanent object on the declarator\n-     obstack.  */\n-  static void *declarator_obstack_base;\n-\n-  bool success;\n+  gcc_checking_assert (!cp_error_declarator);\n+  \n+  /* Create the declarator obstack.  */\n+  gcc_obstack_init (&declarator_obstack);\n+  /* Create the error declarator.  */\n+  cp_error_declarator = make_declarator (cdk_error);\n+  /* Create the empty parameter list.  */\n+  no_parameters = make_parameter_declarator (NULL, NULL, NULL_TREE,\n+\t\t\t\t\t     UNKNOWN_LOCATION);\n+  /* Remember where the base of the declarator obstack lies.  */\n+  void *declarator_obstack_base = obstack_next_free (&declarator_obstack);\n \n-  /* Create the declarator obstack, if necessary.  */\n-  if (!cp_error_declarator)\n+  for (;;)\n     {\n-      gcc_obstack_init (&declarator_obstack);\n-      /* Create the error declarator.  */\n-      cp_error_declarator = make_declarator (cdk_error);\n-      /* Create the empty parameter list.  */\n-      no_parameters = make_parameter_declarator (NULL, NULL, NULL_TREE,\n-\t\t\t\t\t\t UNKNOWN_LOCATION);\n-      /* Remember where the base of the declarator obstack lies.  */\n-      declarator_obstack_base = obstack_next_free (&declarator_obstack);\n+      cp_parser_declaration_seq_opt (parser);\n+      gcc_assert (!cp_parser_parsing_tentatively (parser));\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_EOF))\n+\tbreak;\n+      /* Must have been an extra close-brace.  */\n+      cp_parser_error (parser, \"expected declaration\");\n+      cp_lexer_consume_token (parser->lexer);\n+      /* If the next token is now a `;', consume it.  */\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+\tcp_lexer_consume_token (parser->lexer);\n     }\n \n-  cp_parser_declaration_seq_opt (parser);\n-\n-  /* If there are no tokens left then all went well.  */\n-  if (cp_lexer_next_token_is (parser->lexer, CPP_EOF))\n-    {\n-      /* Get rid of the token array; we don't need it any more.  */\n-      cp_lexer_destroy (parser->lexer);\n-      parser->lexer = NULL;\n-\n-      /* This file might have been a context that's implicitly extern\n-\t \"C\".  If so, pop the lang context.  (Only relevant for PCH.) */\n-      if (parser->implicit_extern_c)\n-\t{\n-\t  pop_lang_context ();\n-\t  parser->implicit_extern_c = false;\n-\t}\n-\n-      /* Finish up.  */\n-      finish_translation_unit ();\n-\n-      success = true;\n-    }\n-  else\n+  /* Get rid of the token array; we don't need it any more.  */\n+  cp_lexer_destroy (parser->lexer);\n+  parser->lexer = NULL;\n+  \n+  /* This file might have been a context that's implicitly extern\n+     \"C\".  If so, pop the lang context.  (Only relevant for PCH.) */\n+  if (parser->implicit_extern_c)\n     {\n-      cp_parser_error (parser, \"expected declaration\");\n-      success = false;\n+      pop_lang_context ();\n+      parser->implicit_extern_c = false;\n     }\n \n   /* Make sure the declarator obstack was fully cleaned up.  */\n   gcc_assert (obstack_next_free (&declarator_obstack)\n \t      == declarator_obstack_base);\n-\n-  /* All went well.  */\n-  return success;\n }\n \n /* Return the appropriate tsubst flags for parsing, possibly in N3276\n@@ -39130,6 +39115,8 @@ c_parse_file (void)\n \t\t\t\t? dk_no_deferred : dk_no_check);\n   cp_parser_translation_unit (the_parser);\n   the_parser = NULL;\n+\n+  finish_translation_unit ();\n }\n \n /* Create an identifier for a generic parameter type (a synthesized"}, {"sha": "df8f70c671e62689d080e51fd9720263dfd8114b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "patch": "@@ -1,3 +1,9 @@\n+2018-10-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/parse/close-brace.C: New.\n+\t* g++.dg/cpp0x/noexcept16.C: Avoid warning.\n+\t* g++.old-deja/g++.other/crash32.C: Add another error\n+\n 2018-10-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85070"}, {"sha": "873d9b2c48ee8edc9130cdaebcba3810cc2ff8b9", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept16.C?ref=c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "patch": "@@ -124,7 +124,7 @@ swap(_Tp&, _Tp&)\n   ;\n typedef lexertl::basic_state_machine<char32_t> lexstate;\n lexstate m_state_machine;\n-GenerateLexer()\n+void GenerateLexer()\n {\n   m_state_machine.minimise();\n }"}, {"sha": "3dde6b34a09fdc2e2059df8a1ef142113d911a88", "filename": "gcc/testsuite/g++.dg/parse/close-brace.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fclose-brace.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fclose-brace.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fclose-brace.C?ref=c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "patch": "@@ -0,0 +1,5 @@\n+// We used to stop parsing at the first top-level '}' !\n+\n+} // { dg-error \"expected declaration\" }\n+\n+float int c; // { dg-error \"two or more data types\" }"}, {"sha": "d0b68db744ab699543ae980c335746a97209f14c", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash32.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f45560c7856139118f71dd31d1bc2f3eb7b98c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash32.C?ref=c7f45560c7856139118f71dd31d1bc2f3eb7b98c", "patch": "@@ -5,7 +5,9 @@ struct foo\n {\n   enum e\n   {\n-    not\t\t\t\t// { dg-error \"\" } \n+    not\t\t\t\t// { dg-error \"\" }\n+    // We think the next close-brace closes the definition of struct\n+    // foo, not enum e.  Things go downhill from there\n   }; // { dg-bogus \"\" } \n   ~foo(); // { dg-bogus \"\" \"\" { xfail *-*-* } } \n   void x (foo *&a, bool b = (unsigned char)0);\n@@ -24,6 +26,6 @@ namespace N\n   typedef baz<bar> c;\n }\n \n-{\n+{ // { dg-error \"expected\" }\n   int a;\n };"}]}