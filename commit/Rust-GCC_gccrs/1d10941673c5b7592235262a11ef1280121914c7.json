{"sha": "1d10941673c5b7592235262a11ef1280121914c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQxMDk0MTY3M2M1Yjc1OTIyMzUyNjJhMTFlZjEyODAxMjE5MTRjNw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@twcny.rr.com", "date": "2003-08-25T21:54:14Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-08-25T21:54:14Z"}, "message": "inclhack.def (svr4_sighandler_type): New fix, ported from fixinc.svr4.\n\n\t* fixinc/inclhack.def (svr4_sighandler_type): New fix, ported\n\tfrom fixinc.svr4.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/sys/signal.h: Regenerate.\n\nFrom-SVN: r70786", "tree": {"sha": "a7bd019838ab732239e4df3abcb53fb2bd6cadc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7bd019838ab732239e4df3abcb53fb2bd6cadc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d10941673c5b7592235262a11ef1280121914c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10941673c5b7592235262a11ef1280121914c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d10941673c5b7592235262a11ef1280121914c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d10941673c5b7592235262a11ef1280121914c7/comments", "author": null, "committer": null, "parents": [{"sha": "dc5c3188aa4570a39f45540a5e2c823aebb38ff3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5c3188aa4570a39f45540a5e2c823aebb38ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5c3188aa4570a39f45540a5e2c823aebb38ff3"}], "stats": {"total": 81, "additions": 76, "deletions": 5}, "files": [{"sha": "a30a9eceeea885968b87526cee6a631eabe7caa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10941673c5b7592235262a11ef1280121914c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10941673c5b7592235262a11ef1280121914c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d10941673c5b7592235262a11ef1280121914c7", "patch": "@@ -1,3 +1,10 @@\n+2003-08-25  Nathanael Nerode  <neroden@twcny.rr.com>\n+\n+\t* fixinc/inclhack.def (svr4_sighandler_type): New fix, ported\n+\tfrom fixinc.svr4.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/sys/signal.h: Regenerate.\n+\n 2003-08-25  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* combine.c (simplify_comparison): Re-enable widening of comparisons"}, {"sha": "c8ac74a7920a79968cc28bbad8ebbc8088d3bb7e", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10941673c5b7592235262a11ef1280121914c7/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10941673c5b7592235262a11ef1280121914c7/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=1d10941673c5b7592235262a11ef1280121914c7", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Sunday August 17, 2003 at 01:31:26 AM EDT\n+ * It has been AutoGen-ed  Sunday August 24, 2003 at 03:26:44 PM EDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Sun Aug 17 01:31:26 EDT 2003\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Sun Aug 24 15:26:44 EDT 2003\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 157 fixup descriptions.\n+ * This file contains 158 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4980,6 +4980,41 @@ static const char* apzSvr4_ProfilPatch[] = {\n     \"profil(unsigned short *, size_t, int, unsigned int)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Svr4_Sighandler_Type fix\n+ */\n+tSCC zSvr4_Sighandler_TypeName[] =\n+     \"svr4_sighandler_type\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSvr4_Sighandler_TypeList[] =\n+  \"|sys/signal.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSvr4_Sighandler_TypeMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSvr4_Sighandler_TypeSelect0[] =\n+       \"void *\\\\(\\\\*\\\\)\\\\(\\\\)\";\n+\n+#define    SVR4_SIGHANDLER_TYPE_TEST_CT  1\n+static tTestDesc aSvr4_Sighandler_TypeTests[] = {\n+  { TT_EGREP,    zSvr4_Sighandler_TypeSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Svr4_Sighandler_Type\n+ */\n+static const char* apzSvr4_Sighandler_TypePatch[] = {\n+    \"format\",\n+    \"void (*)(int)\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Svr4_Undeclared_Getrnge fix\n@@ -6236,9 +6271,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          177\n+#define REGEX_COUNT          178\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            157\n+#define FIX_COUNT            158\n \n /*\n  *  Enumerate the fixes\n@@ -6368,6 +6403,7 @@ typedef enum {\n     SVR4_GETCWD_FIXIDX,\n     SVR4_KRNL_FIXIDX,\n     SVR4_PROFIL_FIXIDX,\n+    SVR4_SIGHANDLER_TYPE_FIXIDX,\n     SVR4_UNDECLARED_GETRNGE_FIXIDX,\n     SYSV68_STRING_FIXIDX,\n     SYSZ_STDLIB_FOR_SUN_FIXIDX,\n@@ -7024,6 +7060,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SVR4_PROFIL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSvr4_ProfilTests,   apzSvr4_ProfilPatch, 0 },\n \n+  {  zSvr4_Sighandler_TypeName,    zSvr4_Sighandler_TypeList,\n+     apzSvr4_Sighandler_TypeMachs,\n+     SVR4_SIGHANDLER_TYPE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSvr4_Sighandler_TypeTests,   apzSvr4_Sighandler_TypePatch, 0 },\n+\n   {  zSvr4_Undeclared_GetrngeName,    zSvr4_Undeclared_GetrngeList,\n      apzSvr4_Undeclared_GetrngeMachs,\n      SVR4_UNDECLARED_GETRNGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "4eade8cb3fd79bc9078dee688eb981c66cb4cb33", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10941673c5b7592235262a11ef1280121914c7/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10941673c5b7592235262a11ef1280121914c7/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=1d10941673c5b7592235262a11ef1280121914c7", "patch": "@@ -2978,6 +2978,22 @@ fix = {\n };\n #endif\n \n+\n+/*\n+ * Correct types for signal handler constants like SIG_DFL; they might be\n+ * void (*) (), and should be void (*) (int).  C++ doesn't like the\n+ * old style.\n+ */\n+fix = {\n+    hackname = svr4_sighandler_type;\n+    files = sys/signal.h;\n+    select = 'void *\\(\\*\\)\\(\\)';\n+    c_fix = format;\n+    c_fix_arg = \"void (*)(int)\";\n+    test_text = \"#define SIG_DFL (void(*)())0\\n\"\n+                \"#define SIG_IGN (void (*)())0\\n\";\n+};\n+\n /*\n  *  Put storage class at start of decl, to avoid warning.\n  */"}, {"sha": "7a9ecb113cde3d12acf82dcfb36af018448d6510", "filename": "gcc/fixinc/tests/base/sys/signal.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d10941673c5b7592235262a11ef1280121914c7/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d10941673c5b7592235262a11ef1280121914c7/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Fsys%2Fsignal.h?ref=1d10941673c5b7592235262a11ef1280121914c7", "patch": "@@ -21,3 +21,10 @@ void\t(*signal(...))(...);\n void\t(*signal())();\n #endif\n #endif  /* SUN_SIGNAL_CHECK */\n+\n+\n+#if defined( SVR4_SIGHANDLER_TYPE_CHECK )\n+#define SIG_DFL (void (*)(int))0\n+#define SIG_IGN (void (*)(int))0\n+\n+#endif  /* SVR4_SIGHANDLER_TYPE_CHECK */"}]}