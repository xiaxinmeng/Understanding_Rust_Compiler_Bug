{"sha": "f10960558540636800cf5d3d6355969621fbc17e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwOTYwNTU4NTQwNjM2ODAwY2Y1ZDNkNjM1NTk2OTYyMWZiYzE3ZQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-14T21:25:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-01-14T21:28:38Z"}, "message": "Add GCC_EXTRA_DIAGNOSTIC_OUTPUT environment variable for fix-it hints\n\nGCC has had the ability to emit fix-it hints in machine-readable form\nsince GCC 7 via -fdiagnostics-parseable-fixits and\n-fdiagnostics-generate-patch.\n\nThe former emits additional specially-formatted lines to stderr; the\noption and its format were directly taken from a pre-existing option\nin clang.\n\nIdeally this could be used by IDEs so that the user can select specific\nfix-it hints and have the IDE apply them to the user's source code\n(perhaps turning them into clickable elements, perhaps with an\n\"Apply All\" option, etc).  Eclipse CDT has supported this option in\nthis way for a few years:\n  https://bugs.eclipse.org/bugs/show_bug.cgi?id=497670\n\nAs a user of Emacs I would like Emacs to support such a feature.\nhttps://debbugs.gnu.org/cgi/bugreport.cgi?bug=25987 tracks supporting\nGCC fix-it output in Emacs.  The discussion there identifies two issues\nwith the existing option:\n\n(a) columns in the output are specified as byte-offsets within the\nline (for exact compatibility with the option in clang), whereas emacs\nwould prefer to consume them as what GCC 11 calls \"display columns\".\nhttps://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-column-unit\n\n(b) injecting a command-line option into the build is a fiddly manual\nstep, varying between build systems.  It's far easier for the\nuser if Emacs simply sets an environment variable when compiling,\nGCC uses this to enable the option if it recognizes the value, and\nthe emacs compilation buffer decodes the additional lines of output\nand adds appropriate widgets.  In some ways it is a workaround for\nnot having a language server.  Doing it this way means that for the\nvarious combinations of older and newer GCC and older and newer Emacs\nthat a sufficiently modern combination of both can automatically\nsupport the rich fix-it UI, whereas other combinations will either\nnot provide the envvar, or silently ignore it, gracefully doing\nnothing extra.\n\nHence this patch adds a new GCC_EXTRA_DIAGNOSTIC_OUTPUT environment\nvariable to GCC which enables output of machine-parseable fix-it hints.\n\nGCC_EXTRA_DIAGNOSTIC_OUTPUT=fixits-v1 is equivalent to the existing\n-fdiagnostics-parseable-fixits option.\n\nGCC_EXTRA_DIAGNOSTIC_OUTPUT=fixits-v2 is the same, but changes the\ncolumn output mode to \"display columns\" rather than bytes, as\nrequired by Emacs.\n\nThe discussion in that Emacs bug has some concerns about the encoding\nof these lines, and, indeed, the encoding of GCC's stderr in general:\ncurrently we emit a mixture of bytes and UTF-8; I believe we emit\nfilenames as bytes, diagnostic messages as UTF-8, and quote source code\nin the original encoding (PR other/93067 covers converting it to UTF-8 on\noutput).  This patch prints octal-escaped bytes for bytes within\nfilenames and replacement text that aren't printable (as per\n-fdiagnostics-parseable-fixits).\n\ngcc/ChangeLog:\n\t* diagnostic.c (diagnostic_initialize): Eliminate\n\tparseable_fixits_p in favor of initializing extra_output_kind from\n\tGCC_EXTRA_DIAGNOSTIC_OUTPUT.\n\t(convert_column_unit): New function, split out from...\n\t(diagnostic_converted_column): ...this.\n\t(print_parseable_fixits): Add \"column_unit\" and \"tabstop\" params.\n\tUse them to call convert_column_unit on the column values.\n\t(diagnostic_report_diagnostic): Eliminate conditional on\n\tparseable_fixits_p in favor of a switch statement on\n\textra_output_kind, passing the appropriate values to the new\n\tparams of print_parseable_fixits.\n\t(selftest::test_print_parseable_fixits_none): Update for new\n\tparams of print_parseable_fixits.\n\t(selftest::test_print_parseable_fixits_insert): Likewise.\n\t(selftest::test_print_parseable_fixits_remove): Likewise.\n\t(selftest::test_print_parseable_fixits_replace): Likewise.\n\t(selftest::test_print_parseable_fixits_bytes_vs_display_columns):\n\tNew.\n\t(selftest::diagnostic_c_tests): Call it.\n\t* diagnostic.h (enum diagnostics_extra_output_kind): New.\n\t(diagnostic_context::parseable_fixits_p): Delete field in favor\n\tof...\n\t(diagnostic_context::extra_output_kind): ...this new field.\n\t* doc/invoke.texi (Environment Variables): Add\n\tGCC_EXTRA_DIAGNOSTIC_OUTPUT.\n\t* opts.c (common_handle_option): Update handling of\n\tOPT_fdiagnostics_parseable_fixits for change to diagnostic_context\n\tfields.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c:\n\tNew file.\n\t* gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c:\n\tNew file.\n\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add them.", "tree": {"sha": "c61fc5a250896931c162ac0466c461e8eac8084c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c61fc5a250896931c162ac0466c461e8eac8084c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10960558540636800cf5d3d6355969621fbc17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10960558540636800cf5d3d6355969621fbc17e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10960558540636800cf5d3d6355969621fbc17e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10960558540636800cf5d3d6355969621fbc17e/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59832db9a711591bcee0746ae33ccf5eb4978121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59832db9a711591bcee0746ae33ccf5eb4978121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59832db9a711591bcee0746ae33ccf5eb4978121"}], "stats": {"total": 328, "additions": 299, "deletions": 29}, "files": [{"sha": "7d65ac7379f45f7a2148074bd4d5f1bd7112263c", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 113, "deletions": 25, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -219,7 +219,14 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   context->show_line_numbers_p = false;\n   context->min_margin_width = 0;\n   context->show_ruler_p = false;\n-  context->parseable_fixits_p = false;\n+  if (const char *var = getenv (\"GCC_EXTRA_DIAGNOSTIC_OUTPUT\"))\n+    {\n+      if (!strcmp (var, \"fixits-v1\"))\n+\tcontext->extra_output_kind = EXTRA_DIAGNOSTIC_OUTPUT_fixits_v1;\n+      else if (!strcmp (var, \"fixits-v2\"))\n+\tcontext->extra_output_kind = EXTRA_DIAGNOSTIC_OUTPUT_fixits_v2;\n+      /* Silently ignore unrecognized values.  */\n+    }\n   context->column_unit = DIAGNOSTICS_COLUMN_UNIT_DISPLAY;\n   context->column_origin = 1;\n   context->tabstop = 8;\n@@ -358,29 +365,40 @@ diagnostic_get_color_for_kind (diagnostic_t kind)\n }\n \n /* Given an expanded_location, convert the column (which is in 1-based bytes)\n-   to the requested units and origin.  Return -1 if the column is\n-   invalid (<= 0).  */\n-int\n-diagnostic_converted_column (diagnostic_context *context, expanded_location s)\n+   to the requested units, without converting the origin.\n+   Return -1 if the column is invalid (<= 0).  */\n+\n+static int\n+convert_column_unit (enum diagnostics_column_unit column_unit,\n+\t\t     int tabstop,\n+\t\t     expanded_location s)\n {\n   if (s.column <= 0)\n     return -1;\n \n-  int one_based_col;\n-  switch (context->column_unit)\n+  switch (column_unit)\n     {\n+    default:\n+      gcc_unreachable ();\n+\n     case DIAGNOSTICS_COLUMN_UNIT_DISPLAY:\n-      one_based_col = location_compute_display_column (s, context->tabstop);\n-      break;\n+      return location_compute_display_column (s, tabstop);\n \n     case DIAGNOSTICS_COLUMN_UNIT_BYTE:\n-      one_based_col = s.column;\n-      break;\n-\n-    default:\n-      gcc_unreachable ();\n+      return s.column;\n     }\n+}\n \n+/* Given an expanded_location, convert the column (which is in 1-based bytes)\n+   to the requested units and origin.  Return -1 if the column is\n+   invalid (<= 0).  */\n+int\n+diagnostic_converted_column (diagnostic_context *context, expanded_location s)\n+{\n+  int one_based_col\n+    = convert_column_unit (context->column_unit, context->tabstop, s);\n+  if (one_based_col <= 0)\n+    return -1;\n   return one_based_col + (context->column_origin - 1);\n }\n \n@@ -931,11 +949,16 @@ print_escaped_string (pretty_printer *pp, const char *text)\n   pp_character (pp, '\"');\n }\n \n-/* Implementation of -fdiagnostics-parseable-fixits.  Print a\n-   machine-parseable version of all fixits in RICHLOC to PP.  */\n+/* Implementation of -fdiagnostics-parseable-fixits and\n+   GCC_EXTRA_DIAGNOSTIC_OUTPUT.\n+   Print a machine-parseable version of all fixits in RICHLOC to PP,\n+   using COLUMN_UNIT to express columns.\n+   Use TABSTOP when handling DIAGNOSTICS_COLUMN_UNIT_DISPLAY.  */\n \n static void\n-print_parseable_fixits (pretty_printer *pp, rich_location *richloc)\n+print_parseable_fixits (pretty_printer *pp, rich_location *richloc,\n+\t\t\tenum diagnostics_column_unit column_unit,\n+\t\t\tint tabstop)\n {\n   gcc_assert (pp);\n   gcc_assert (richloc);\n@@ -953,9 +976,13 @@ print_parseable_fixits (pretty_printer *pp, rich_location *richloc)\n       /* For compatibility with clang, print as a half-open range.  */\n       location_t next_loc = hint->get_next_loc ();\n       expanded_location next_exploc = expand_location (next_loc);\n+      int start_col\n+\t= convert_column_unit (column_unit, tabstop, start_exploc);\n+      int next_col\n+\t= convert_column_unit (column_unit, tabstop, next_exploc);\n       pp_printf (pp, \":{%i:%i-%i:%i}:\",\n-\t\t start_exploc.line, start_exploc.column,\n-\t\t next_exploc.line, next_exploc.column);\n+\t\t start_exploc.line, start_col,\n+\t\t next_exploc.line, next_col);\n       print_escaped_string (pp, hint->get_string ());\n       pp_newline (pp);\n     }\n@@ -1221,10 +1248,22 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n   if (context->show_option_requested)\n     print_option_information (context, diagnostic, orig_diag_kind);\n   (*diagnostic_finalizer (context)) (context, diagnostic, orig_diag_kind);\n-  if (context->parseable_fixits_p)\n+  switch (context->extra_output_kind)\n     {\n-      print_parseable_fixits (context->printer, diagnostic->richloc);\n+    default:\n+      break;\n+    case EXTRA_DIAGNOSTIC_OUTPUT_fixits_v1:\n+      print_parseable_fixits (context->printer, diagnostic->richloc,\n+\t\t\t      DIAGNOSTICS_COLUMN_UNIT_BYTE,\n+\t\t\t      context->tabstop);\n+      pp_flush (context->printer);\n+      break;\n+    case EXTRA_DIAGNOSTIC_OUTPUT_fixits_v2:\n+      print_parseable_fixits (context->printer, diagnostic->richloc,\n+\t\t\t      DIAGNOSTICS_COLUMN_UNIT_DISPLAY,\n+\t\t\t      context->tabstop);\n       pp_flush (context->printer);\n+      break;\n     }\n   diagnostic_action_after_output (context, diagnostic->kind);\n   diagnostic->x_data = NULL;\n@@ -2023,7 +2062,7 @@ test_print_parseable_fixits_none ()\n   pretty_printer pp;\n   rich_location richloc (line_table, UNKNOWN_LOCATION);\n \n-  print_parseable_fixits (&pp, &richloc);\n+  print_parseable_fixits (&pp, &richloc, DIAGNOSTICS_COLUMN_UNIT_BYTE, 8);\n   ASSERT_STREQ (\"\", pp_formatted_text (&pp));\n }\n \n@@ -2042,7 +2081,7 @@ test_print_parseable_fixits_insert ()\n   location_t where = linemap_position_for_column (line_table, 10);\n   richloc.add_fixit_insert_before (where, \"added content\");\n \n-  print_parseable_fixits (&pp, &richloc);\n+  print_parseable_fixits (&pp, &richloc, DIAGNOSTICS_COLUMN_UNIT_BYTE, 8);\n   ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:10}:\\\"added content\\\"\\n\",\n \t\tpp_formatted_text (&pp));\n }\n@@ -2064,7 +2103,7 @@ test_print_parseable_fixits_remove ()\n   where.m_finish = linemap_position_for_column (line_table, 20);\n   richloc.add_fixit_remove (where);\n \n-  print_parseable_fixits (&pp, &richloc);\n+  print_parseable_fixits (&pp, &richloc, DIAGNOSTICS_COLUMN_UNIT_BYTE, 8);\n   ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:21}:\\\"\\\"\\n\",\n \t\tpp_formatted_text (&pp));\n }\n@@ -2086,11 +2125,59 @@ test_print_parseable_fixits_replace ()\n   where.m_finish = linemap_position_for_column (line_table, 20);\n   richloc.add_fixit_replace (where, \"replacement\");\n \n-  print_parseable_fixits (&pp, &richloc);\n+  print_parseable_fixits (&pp, &richloc, DIAGNOSTICS_COLUMN_UNIT_BYTE, 8);\n   ASSERT_STREQ (\"fix-it:\\\"test.c\\\":{5:10-5:21}:\\\"replacement\\\"\\n\",\n \t\tpp_formatted_text (&pp));\n }\n \n+/* Verify that print_parseable_fixits correctly handles\n+   DIAGNOSTICS_COLUMN_UNIT_BYTE vs DIAGNOSTICS_COLUMN_UNIT_COLUMN.  */\n+\n+static void\n+test_print_parseable_fixits_bytes_vs_display_columns ()\n+{\n+  line_table_test ltt;\n+  rich_location richloc (line_table, UNKNOWN_LOCATION);\n+\n+  /* 1-based byte offsets:     12345677778888999900001234567.  */\n+  const char *const content = \"smile \\xf0\\x9f\\x98\\x82 colour\\n\";\n+  /* 1-based display cols:     123456[......7-8.....]9012345.  */\n+  const int tabstop = 8;\n+\n+  temp_source_file tmp (SELFTEST_LOCATION, \".c\", content);\n+  const char *const fname = tmp.get_filename ();\n+\n+  linemap_add (line_table, LC_ENTER, false, fname, 0);\n+  linemap_line_start (line_table, 1, 100);\n+  linemap_add (line_table, LC_LEAVE, false, NULL, 0);\n+  source_range where;\n+  where.m_start = linemap_position_for_column (line_table, 12);\n+  where.m_finish = linemap_position_for_column (line_table, 17);\n+  richloc.add_fixit_replace (where, \"color\");\n+\n+  const int buf_len = strlen (fname) + 100;\n+  char *const expected = XNEWVEC (char, buf_len);\n+\n+  {\n+    pretty_printer pp;\n+    print_parseable_fixits (&pp, &richloc, DIAGNOSTICS_COLUMN_UNIT_BYTE,\n+\t\t\t    tabstop);\n+    snprintf (expected, buf_len,\n+\t      \"fix-it:\\\"%s\\\":{1:12-1:18}:\\\"color\\\"\\n\", fname);\n+    ASSERT_STREQ (expected, pp_formatted_text (&pp));\n+  }\n+  {\n+    pretty_printer pp;\n+    print_parseable_fixits (&pp, &richloc, DIAGNOSTICS_COLUMN_UNIT_DISPLAY,\n+\t\t\t    tabstop);\n+    snprintf (expected, buf_len,\n+\t      \"fix-it:\\\"%s\\\":{1:10-1:16}:\\\"color\\\"\\n\", fname);\n+    ASSERT_STREQ (expected, pp_formatted_text (&pp));\n+  }\n+\n+  XDELETEVEC (expected);\n+}\n+\n /* Verify that\n      diagnostic_get_location_text (..., SHOW_COLUMN)\n    generates EXPECTED_LOC_TEXT, given FILENAME, LINE, COLUMN, with\n@@ -2213,6 +2300,7 @@ diagnostic_c_tests ()\n   test_print_parseable_fixits_insert ();\n   test_print_parseable_fixits_remove ();\n   test_print_parseable_fixits_replace ();\n+  test_print_parseable_fixits_bytes_vs_display_columns ();\n   test_diagnostic_get_location_text ();\n   test_num_digits ();\n "}, {"sha": "9a6eefcf918e2bb250910a2603ac6c1be9f3019b", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -66,6 +66,22 @@ enum diagnostic_path_format\n   DPF_INLINE_EVENTS\n };\n \n+/* An enum for capturing values of GCC_EXTRA_DIAGNOSTIC_OUTPUT,\n+   and for -fdiagnostics-parseable-fixits.  */\n+\n+enum diagnostics_extra_output_kind\n+{\n+  /* No extra output, or an unrecognized value.  */\n+  EXTRA_DIAGNOSTIC_OUTPUT_none,\n+\n+  /* Emit fix-it hints using the \"fixits-v1\" format, equivalent to\n+     -fdiagnostics-parseable-fixits.  */\n+  EXTRA_DIAGNOSTIC_OUTPUT_fixits_v1,\n+\n+  /* Emit fix-it hints using the \"fixits-v2\" format.  */\n+  EXTRA_DIAGNOSTIC_OUTPUT_fixits_v2\n+};\n+\n /* A diagnostic is described by the MESSAGE to send, the FILE and LINE of\n    its context and its KIND (ice, error, warning, note, ...)  See complete\n    list in diagnostic.def.  */\n@@ -290,9 +306,10 @@ struct diagnostic_context\n      source output.  */\n   bool show_ruler_p;\n \n-  /* If true, print fixits in machine-parseable form after the\n-     rest of the diagnostic.  */\n-  bool parseable_fixits_p;\n+  /* Used to specify additional diagnostic output to be emitted after the\n+     rest of the diagnostic.  This is for implementing\n+     -fdiagnostics-parseable-fixits and GCC_EXTRA_DIAGNOSTIC_OUTPUT.  */\n+  enum diagnostics_extra_output_kind extra_output_kind;\n \n   /* What units to use when outputting the column number.  */\n   enum diagnostics_column_unit column_unit;"}, {"sha": "8f100911048986dcba6fe9cedf70c9511c0aa58f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -32711,6 +32711,25 @@ Recognize EUCJP characters.\n If @env{LANG} is not defined, or if it has some other value, then the\n compiler uses @code{mblen} and @code{mbtowc} as defined by the default locale to\n recognize and translate multibyte characters.\n+\n+@item GCC_EXTRA_DIAGNOSTIC_OUTPUT\n+If @env{GCC_EXTRA_DIAGNOSTIC_OUTPUT} is set to one of the following values,\n+then additional text will be emitted to stderr when fix-it hints are\n+emitted.  @option{-fdiagnostics-parseable-fixits} and\n+@option{-fno-diagnostics-parseable-fixits} take precedence over this\n+environment variable.\n+\n+@table @samp\n+@item fixits-v1\n+Emit parseable fix-it hints, equivalent to\n+@option{-fdiagnostics-parseable-fixits}.  In particular, columns are\n+expressed as a count of bytes, starting at byte 1 for the initial column.\n+\n+@item fixits-v2\n+As @code{fixits-v1}, but columns are expressed as display columns,\n+as per @option{-fdiagnostics-column-unit=display}.\n+@end table\n+\n @end table\n \n @noindent"}, {"sha": "389797d29bdc652366b06ff014c0f054acd6dea0", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -2522,7 +2522,9 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdiagnostics_parseable_fixits:\n-      dc->parseable_fixits_p = value;\n+      dc->extra_output_kind = (value\n+\t\t\t       ? EXTRA_DIAGNOSTIC_OUTPUT_fixits_v1\n+\t\t\t       : EXTRA_DIAGNOSTIC_OUTPUT_none);\n       break;\n \n     case OPT_fdiagnostics_column_unit_:"}, {"sha": "8f6f7162f76bca058d60a512c41ecea83ffa0ac0", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-set-compiler-env-var GCC_EXTRA_DIAGNOSTIC_OUTPUT \"fixits-v1\" }\n+/* This is a collection of unittests for diagnostic_show_locus;\n+   see the overview in diagnostic_plugin_test_show_locus.c.\n+\n+   In particular, note the discussion of why we need a very long line here:\n+01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n+   and that we can't use macros in this file.  */\n+\n+/* Unit test for rendering of insertion fixit hints\n+   (example taken from PR 62316).  */\n+\n+void test_fixit_insert (void)\n+{\n+#if 0\n+   int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{17:20-17:20\\\\}:.*\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{17:24-17:24\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"remove\" fixit hints.  */\n+\n+void test_fixit_remove (void)\n+{\n+#if 0\n+  int a;; /* { dg-warning \"example of a removal hint\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{28:9-28:10\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"replace\" fixit hints.  */\n+\n+void test_fixit_replace (void)\n+{\n+#if 0\n+  gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{38:3-38:21\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of fix-it hints that add new lines.  */\n+\n+void test_fixit_insert_newline (void)\n+{\n+#if 0\n+  switch (op)\n+    {\n+    case 'a':\n+      x = a;\n+    case 'b': /* { dg-warning \"newline insertion\" } */\n+      x = b;\n+    }\n+/* { dg-regexp \"fix-it:.*\\\\{52:1-52:1\\\\}:.*\\\\n\" } */\n+#endif\n+}\n+\n+/* Unit test for mutually-exclusive suggestions.  */\n+\n+void test_mutually_exclusive_suggestions (void)\n+{\n+#if 0\n+  original; /* { dg-warning \"warning 1\" } */\n+/* { dg-warning \"warning 2\" \"\" { target *-*-* } .-1 } */\n+/* We should print the mutually-incompatible fix-it hints within\n+   -fdiagnostics-parseable-fixits; verify that they are printed.  */\n+/* { dg-regexp \"fix-it:.*\\\\{64:3-64:11}:.*\\\\n\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{64:3-64:11}:.*\\\\n\" } */\n+#endif\n+}"}, {"sha": "d5ebd93869c1fb4631bab88666475c629a5dffdc", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-set-compiler-env-var GCC_EXTRA_DIAGNOSTIC_OUTPUT \"fixits-v2\" }\n+/* This is a collection of unittests for diagnostic_show_locus;\n+   see the overview in diagnostic_plugin_test_show_locus.c.\n+\n+   In particular, note the discussion of why we need a very long line here:\n+01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n+   and that we can't use macros in this file.  */\n+\n+/* Unit test for rendering of insertion fixit hints\n+   (example taken from PR 62316).  */\n+\n+void test_fixit_insert (void)\n+{\n+#if 0\n+   int a[2][2] = { 0, 1 , 2, 3 }; /* { dg-warning \"insertion hints\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{17:20-17:20\\\\}:.*\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{17:24-17:24\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"remove\" fixit hints.  */\n+\n+void test_fixit_remove (void)\n+{\n+#if 0\n+  int a;; /* { dg-warning \"example of a removal hint\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{28:9-28:10\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of \"replace\" fixit hints.  */\n+\n+void test_fixit_replace (void)\n+{\n+#if 0\n+  gtk_widget_showall (dlg); /* { dg-warning \"example of a replacement hint\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{38:3-38:21\\\\}:.*\" } */\n+#endif\n+}\n+\n+/* Unit test for rendering of fix-it hints that add new lines.  */\n+\n+void test_fixit_insert_newline (void)\n+{\n+#if 0\n+  switch (op)\n+    {\n+    case 'a':\n+      x = a;\n+    case 'b': /* { dg-warning \"newline insertion\" } */\n+      x = b;\n+    }\n+/* { dg-regexp \"fix-it:.*\\\\{52:1-52:1\\\\}:.*\\\\n\" } */\n+#endif\n+}\n+\n+/* Unit test for mutually-exclusive suggestions.  */\n+\n+void test_mutually_exclusive_suggestions (void)\n+{\n+#if 0\n+  original; /* { dg-warning \"warning 1\" } */\n+/* { dg-warning \"warning 2\" \"\" { target *-*-* } .-1 } */\n+/* We should print the mutually-incompatible fix-it hints within\n+   -fdiagnostics-parseable-fixits; verify that they are printed.  */\n+/* { dg-regexp \"fix-it:.*\\\\{64:3-64:11}:.*\\\\n\" } */\n+/* { dg-regexp \"fix-it:.*\\\\{64:3-64:11}:.*\\\\n\" } */\n+#endif\n+}"}, {"sha": "66a437d18d3d6e519634de57df9a51ecf7035066", "filename": "gcc/testsuite/gcc.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10960558540636800cf5d3d6355969621fbc17e/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fplugin.exp?ref=f10960558540636800cf5d3d6355969621fbc17e", "patch": "@@ -79,6 +79,8 @@ set plugin_test_list [list \\\n \t  diagnostic-test-show-locus-bw-line-numbers-2.c \\\n \t  diagnostic-test-show-locus-color-line-numbers.c \\\n \t  diagnostic-test-show-locus-parseable-fixits.c \\\n+\t  diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c \\\n+\t  diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v2.c \\\n \t  diagnostic-test-show-locus-generate-patch.c }\\\n     { diagnostic_plugin_test_tree_expression_range.c \\\n \t  diagnostic-test-expressions-1.c } \\"}]}