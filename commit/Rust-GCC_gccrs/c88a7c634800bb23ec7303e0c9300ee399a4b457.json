{"sha": "c88a7c634800bb23ec7303e0c9300ee399a4b457", "node_id": "C_kwDOANBUbNoAKGM4OGE3YzYzNDgwMGJiMjNlYzczMDNlMGM5MzAwZWUzOTlhNGI0NTc", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-02T00:17:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-03-02T00:17:28Z"}, "message": "Daily bump.", "tree": {"sha": "e48b2ac8c5a95cba9db0a48a6bc1f470379911fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e48b2ac8c5a95cba9db0a48a6bc1f470379911fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c88a7c634800bb23ec7303e0c9300ee399a4b457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88a7c634800bb23ec7303e0c9300ee399a4b457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c88a7c634800bb23ec7303e0c9300ee399a4b457", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c88a7c634800bb23ec7303e0c9300ee399a4b457/comments", "author": null, "committer": null, "parents": [{"sha": "de81e06273c613d7e06cbe2c8d9e72826c638056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de81e06273c613d7e06cbe2c8d9e72826c638056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de81e06273c613d7e06cbe2c8d9e72826c638056"}], "stats": {"total": 213, "additions": 212, "deletions": 1}, "files": [{"sha": "70e5e4bd114dd66e826f1669e4881bea02241da2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,57 @@\n+2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/108545\n+\t* gimplify.cc (struct tree_operand_hash_no_se): New.\n+\t(omp_index_mapping_groups_1, omp_index_mapping_groups,\n+\tomp_reindex_mapping_groups, omp_mapped_by_containing_struct,\n+\tomp_tsort_mapping_groups_1, omp_tsort_mapping_groups,\n+\toacc_resolve_clause_dependencies, omp_build_struct_sibling_lists,\n+\tgimplify_scan_omp_clauses): Use tree_operand_hash_no_se instead\n+\tof tree_operand_hash.\n+\n+2023-03-01  LIU Hao  <lh_mouse@126.com>\n+\n+\tPR pch/14940\n+\t* config/i386/host-mingw32.cc (mingw32_gt_pch_get_address):\n+\tRemove the size limit `pch_VA_max_size`\n+\n+2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/108546\n+\t* omp-low.cc (lower_omp_target): Remove optional handling\n+\ton the receiver side, i.e. inside target (data), for\n+\tuse_device_ptr.\n+\n+2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/108967\n+\t* cfgexpand.cc (expand_debug_expr): Handle WIDEN_{PLUS,MINUS}_EXPR\n+\tand VEC_WIDEN_{PLUS,MINUS}_{HI,LO}_EXPR.\n+\n+2023-03-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108970\n+\t* tree-vect-loop-manip.cc (slpeel_can_duplicate_loop_p):\n+\tCheck we can copy the BBs.\n+\t(slpeel_tree_duplicate_loop_to_edge_cfg): Avoid redundant\n+\tcheck.\n+\t(vect_do_peeling): Streamline error handling.\n+\n+2023-03-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108950\n+\t* tree-vect-patterns.cc (vect_recog_widen_sum_pattern):\n+\tCheck oprnd0 is defined in the loop.\n+\t* tree-vect-loop.cc (vectorizable_reduction): Record all\n+\toperands vector types, compute that of invariants and\n+\tproperly update their SLP nodes.\n+\n+2023-03-01  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/108240\n+\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Allow\n+\timplicit powerpc64 setting to be unset if 64 bit is enabled implicitly.\n+\n 2023-02-28  Qing Zhao  <qing.zhao@oracle.com>\n \n \tPR middle-end/107411"}, {"sha": "0ee1d562349890f088832913af6cc811ecbd01c1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1 +1 @@\n-20230301\n+20230302"}, {"sha": "74a1ac32d22743b0fd2f51b0fa00a28a4c831879", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,24 @@\n+2023-03-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107565\n+\t* region-model.cc (region_model::on_call_pre): Flatten logic by\n+\treturning early.  Consolidate logic for detecting const and pure\n+\tfunctions.  When considering whether an unhandled built-in\n+\tfunction has side-effects, consider all kinds of builtin, rather\n+\tthan just BUILT_IN_NORMAL, and don't require\n+\tgimple_builtin_call_types_compatible_p.\n+\n+2023-03-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108935\n+\t* infinite-recursion.cc (contains_unknown_p): New.\n+\t(sufficiently_different_region_binding_p): New function, splitting\n+\tout inner loop from...\n+\t(sufficiently_different_p): ...here.  Extend detection of unknown\n+\tsvalues to also include svalues that contain unknown.  Treat\n+\tchanges in frames below the entry to the recursion as being\n+\tsufficiently different to reject being an infinite recursion.\n+\n 2023-02-21  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108830"}, {"sha": "e2f818c1a83cbaafc71e78212e2a3b3d7b32d4bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,42 @@\n+2023-03-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107574\n+\t* constexpr.cc (cxx_eval_constant_expression): Emit an error when\n+\ta PTRMEM_CST cannot be evaluated.\n+\n+2023-03-01  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.cc (tsubst_scope): Define.\n+\t(tsubst_decl) <case USING_DECL>: Call tsubst_scope instead of\n+\tcalling tsubst_scope with tf_qualifying_scope set.\n+\t(tsubst_qualified_id): Call tsubst_scope instead of\n+\tcalling tsubst with tf_qualifying_scope set.\n+\t(tsubst_copy): Immediately delegate to tsubst for all TYPE_P\n+\ttrees.  Remove tf_qualifying_scope manipulation.\n+\t<case SCOPE_REF>: Call tsubst_scope instead of calling\n+\ttsubst with tf_qualifying_scope set.\n+\n+2023-03-01  Patrick Palka  <ppalka@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108219\n+\tPR c++/108218\n+\t* constexpr.cc (fold_to_constant): Define.\n+\t(maybe_constant_value): Move up early exit test for unevaluated\n+\toperands.  Try reducing an unevaluated operand to a constant via\n+\tfold_to_constant.\n+\t(fold_non_dependent_expr_template): Add early exit test for\n+\tCONSTANT_CLASS_P nodes.  Try reducing an unevaluated operand\n+\tto a constant via fold_to_constant.\n+\t* cp-tree.h (fold_to_constant): Declare.\n+\n+2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108606\n+\t* constexpr.cc (potential_constant_expression_1) <case DECL_EXPR>:\n+\tOnly recurse on DECL_INITIAL (tmp) if tmp is a VAR_DECL, otherwise\n+\tjust return true.\n+\n 2023-02-28  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/108848"}, {"sha": "f8a8a7fe887765ed0e372e9128681c54430f0c5b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,9 @@\n+2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/108546\n+\t* trans-openmp.cc (gfc_trans_omp_clauses): Fix mapping of\n+\ttype(C_ptr) variables.\n+\n 2023-02-27  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/108937"}, {"sha": "1c801bd8d8d297a0b2d5c2cc8869cc1c3b37d334", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,10 @@\n+2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/108910\n+\t* lto-common.cc (lto_fixup_prevailing_type): Don't add t to\n+\tTYPE_POINTER_TO or TYPE_REFERENCE_TO chain if it has\n+\tTYPE_ATTRIBUTES or is TYPE_REF_IS_RVALUE.\n+\n 2023-01-13  Richard Biener  <rguenther@suse.de>\n \n \t* lto-lang.cc (lto_type_for_mode): Sync with"}, {"sha": "af0e76a402293af1ea8adf3cff93ad8576c5b668", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,70 @@\n+2023-03-01  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107574\n+\t* g++.dg/cpp0x/ptrmem-cst1.C: New test.\n+\n+2023-03-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107565\n+\t* gcc.dg/analyzer/builtins-pr107565.c: New test.\n+\t* gcc.dg/analyzer/pr99716-1.c (test_2): Mark the leak as xfailing.\n+\n+2023-03-01  Patrick Palka  <ppalka@redhat.com>\n+\t    Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/108219\n+\tPR c++/108218\n+\t* g++.dg/cpp0x/new6.C: New test.\n+\t* g++.dg/cpp2a/concepts-new1.C: New test.\n+\n+2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/108545\n+\t* c-c++-common/gomp/map-8.c: New test.\n+\t* gfortran.dg/gomp/map-9.f90: New test.\n+\n+2023-03-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108935\n+\t* gcc.dg/analyzer/infinite-recursion-pr108935-1.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-pr108935-1a.c: New test.\n+\t* gcc.dg/analyzer/infinite-recursion-pr108935-2.c: New test.\n+\n+2023-03-01  Jonathan Yong  <10walls@gmail.com>\n+\n+\t* gcc.target/i386/harden-sls-6.c: Fix warning on LLP64\n+\ttargets.\n+\n+2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/108894\n+\t* c-c++-common/ubsan/bounds-16.c: New test.\n+\n+2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/108967\n+\t* g++.dg/debug/pr108967.C: New test.\n+\n+2023-03-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/108606\n+\t* g++.dg/cpp1y/pr108606.C: New test.\n+\n+2023-03-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108970\n+\t* gcc.dg/pr108970.c: New testcase.\n+\n+2023-03-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108950\n+\t* gcc.dg/vect/pr108950.c: New testcase.\n+\n+2023-03-01  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.dg/analyzer/fd-access-mode-target-headers.c: Skip for\n+\tnewlib targets too.\n+\n 2023-02-28  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/108848"}, {"sha": "0333fd38104445fb2bf50663559ca1acab784d1e", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,9 @@\n+2023-03-01  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/108546\n+\t* testsuite/libgomp.fortran/is_device_ptr-3.f90: New test.\n+\t* testsuite/libgomp.fortran/use_device_ptr-optional-4.f90: New test.\n+\n 2023-02-22  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/libgomp.fortran/alloc-10.f90: Use"}, {"sha": "d7c386683a097e5ece40cc4eeedc06111b9770e8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c88a7c634800bb23ec7303e0c9300ee399a4b457/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c88a7c634800bb23ec7303e0c9300ee399a4b457/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c88a7c634800bb23ec7303e0c9300ee399a4b457", "patch": "@@ -1,3 +1,14 @@\n+2023-03-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/cow_string.h: Fix typo in comment.\n+\n+2023-03-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++20/tzdb.cc (chrono::tzdb::current_zone()) Use \"UTC\" if\n+\tcurrent time zone cannot be determined.\n+\t* testsuite/std/time/tzdb/1.cc: Remove conditions based on\n+\tHAVE_TZDB macro and test all members unconditionally.\n+\n 2023-02-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/108952"}]}