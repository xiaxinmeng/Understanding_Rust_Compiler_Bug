{"sha": "b6b18271072de794c8995aad95e835c76cafd5ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiMTgyNzEwNzJkZTc5NGM4OTk1YWFkOTVlODM1Yzc2Y2FmZDVhZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-11-13T22:58:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-11-13T22:58:00Z"}, "message": "Remove redundant loop in unsynchronized_pool_resource code\n\n\t* src/c++17/memory_resource.cc (bitset::find_first_unset()): Remove\n\tunused function.\n\t(bitset::get_first_unset()): Remove loop, if there's are unset bits\n\tthen _M_next_word refers to the first one and there's no need to loop.\n\t(_Pool::_Pool(size_t, size_t), _Pool::block_size()): Remove dead code.\n\nFrom-SVN: r266090", "tree": {"sha": "05956beb2b776aba14557e318a30e561eb2967df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05956beb2b776aba14557e318a30e561eb2967df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b18271072de794c8995aad95e835c76cafd5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b18271072de794c8995aad95e835c76cafd5ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b18271072de794c8995aad95e835c76cafd5ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b18271072de794c8995aad95e835c76cafd5ae/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2e005857e52ded5338e1179c0bb0fe3375cea71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2e005857e52ded5338e1179c0bb0fe3375cea71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2e005857e52ded5338e1179c0bb0fe3375cea71"}], "stats": {"total": 42, "additions": 16, "deletions": 26}, "files": [{"sha": "af68533baa2f2a5c40c3f2215724d81dc174b2f5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b18271072de794c8995aad95e835c76cafd5ae/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b18271072de794c8995aad95e835c76cafd5ae/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b6b18271072de794c8995aad95e835c76cafd5ae", "patch": "@@ -1,5 +1,11 @@\n 2018-11-13  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/c++17/memory_resource.cc (bitset::find_first_unset()): Remove\n+\tunused function.\n+\t(bitset::get_first_unset()): Remove loop, if there's are unset bits\n+\tthen _M_next_word refers to the first one and there's no need to loop.\n+\t(_Pool::_Pool(size_t, size_t), _Pool::block_size()): Remove dead code.\n+\n \t* src/c++17/memory_resource.cc (munge_options): Round up value of\n \tlargest_required_pool_block to multiple of smallest pool size. Round\n \texcessively large values down to largest pool size."}, {"sha": "b553606f55286bd73fc59afc839c78f192b7eaa5", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b18271072de794c8995aad95e835c76cafd5ae/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b18271072de794c8995aad95e835c76cafd5ae/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=b6b18271072de794c8995aad95e835c76cafd5ae", "patch": "@@ -280,7 +280,7 @@ namespace pmr\n     // Number of blocks\n     size_t size() const noexcept { return _M_size; }\n \n-    // Number of unset bits\n+    // Number of free blocks (unset bits)\n     size_t free() const noexcept\n     {\n       size_t n = 0;\n@@ -289,7 +289,7 @@ namespace pmr\n       return n;\n     }\n \n-    // True if all bits are set\n+    // True if there are no free blocks (all bits are set)\n     bool full() const noexcept\n     {\n       if (_M_next_word >= nwords())\n@@ -303,7 +303,7 @@ namespace pmr\n       return false;\n     }\n \n-    // True if size() != 0 and no bits are set.\n+    // True if size() != 0 and all blocks are free (no bits are set).\n     bool empty() const noexcept\n     {\n       if (nwords() == 0)\n@@ -333,29 +333,19 @@ namespace pmr\n       return _M_words[wd] & bit;\n     }\n \n-    size_type find_first_unset() const noexcept\n-    {\n-      for (size_type i = _M_next_word; i < nwords(); ++i)\n-\t{\n-\t  const size_type n = std::__countr_one(_M_words[i]);\n-\t  if (n < bits_per_word)\n-\t    return (i * bits_per_word) + n;\n-\t}\n-      return size_type(-1);\n-    }\n-\n     size_type get_first_unset() noexcept\n     {\n-      for (size_type i = _M_next_word; i < nwords(); ++i)\n+      if (_M_next_word < nwords())\n \t{\n-\t  const size_type n = std::__countr_one(_M_words[i]);\n+\t  const size_type n = std::__countr_one(_M_words[_M_next_word]);\n \t  if (n < bits_per_word)\n \t    {\n \t      const word bit = word(1) << n;\n-\t      _M_words[i] |= bit;\n-\t      if (i == _M_next_word)\n+\t      _M_words[_M_next_word] |= bit;\n+\t      const size_t res = (_M_next_word * bits_per_word) + n;\n+\t      if (n == (bits_per_word - 1))\n \t\tupdate_next_word();\n-\t      return (i * bits_per_word) + n;\n+\t      return res;\n \t    }\n \t}\n       return size_type(-1);\n@@ -605,9 +595,7 @@ namespace pmr\n     : _M_chunks(),\n       _M_block_sz(__block_size),\n       _M_blocks_per_chunk(__blocks_per_chunk)\n-    {\n-      __glibcxx_assert(block_size() == __block_size);\n-    }\n+    { }\n \n     // Must call release(r) before destruction!\n     ~_Pool() { __glibcxx_assert(_M_chunks.empty()); }\n@@ -617,11 +605,7 @@ namespace pmr\n \n     // Size of blocks in this pool\n     size_t block_size() const noexcept\n-#if POW2_BLKSZ\n-    { return _S_min_block << _M_blksize_mul; }\n-#else\n     { return _M_block_sz; }\n-#endif\n \n     // Allocate a block if the pool is not full, otherwise return null.\n     void* try_allocate() noexcept"}]}