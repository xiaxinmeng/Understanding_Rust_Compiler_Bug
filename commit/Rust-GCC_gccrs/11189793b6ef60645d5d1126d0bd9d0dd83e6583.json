{"sha": "11189793b6ef60645d5d1126d0bd9d0dd83e6583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTExODk3OTNiNmVmNjA2NDVkNWQxMTI2ZDBiZDlkMGRkODNlNjU4Mw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@st.com", "date": "2019-09-10T07:43:37Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2019-09-10T07:43:37Z"}, "message": "[ARM/FDPIC v6 05/24] [ARM] FDPIC: Fix __do_global_dtors_aux and frame_dummy generation\n\nIn FDPIC, we need to make sure __do_global_dtors_aux and frame_dummy\nare referenced by their address, not by pointers to the function\ndescriptors.\n\n2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\n\tlibgcc/\n\t* libgcc/crtstuff.c: Add support for FDPIC.\n\n\nCo-Authored-By: Micka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n\nFrom-SVN: r275567", "tree": {"sha": "47a986c1c0d6df624cd7646fffe016b335a2f0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47a986c1c0d6df624cd7646fffe016b335a2f0cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11189793b6ef60645d5d1126d0bd9d0dd83e6583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11189793b6ef60645d5d1126d0bd9d0dd83e6583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11189793b6ef60645d5d1126d0bd9d0dd83e6583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11189793b6ef60645d5d1126d0bd9d0dd83e6583/comments", "author": null, "committer": null, "parents": [{"sha": "8b63716e87e138e7e2a01309367da9c720e07949", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b63716e87e138e7e2a01309367da9c720e07949", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b63716e87e138e7e2a01309367da9c720e07949"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "bb411298aa317f193e151458c79fbf3995fcb80d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11189793b6ef60645d5d1126d0bd9d0dd83e6583/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11189793b6ef60645d5d1126d0bd9d0dd83e6583/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=11189793b6ef60645d5d1126d0bd9d0dd83e6583", "patch": "@@ -1,6 +1,11 @@\n 2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n+\tMicka\u00ebl Gu\u00ean\u00e9 <mickael.guene@st.com>\n \n-        * config.host: Handle *-*-uclinuxfdpiceabi.\n+\t* libgcc/crtstuff.c: Add support for FDPIC.\n+\n+2019-09-10  Christophe Lyon  <christophe.lyon@st.com>\n+\n+\t* config.host: Handle *-*-uclinuxfdpiceabi.\n \n 2019-09-09  Jose E. Marchesi  <jose.marchesi@oracle.com>\n "}, {"sha": "c93e1cbcaca7e1d2404ca2f4a30bceda134b665d", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11189793b6ef60645d5d1126d0bd9d0dd83e6583/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11189793b6ef60645d5d1126d0bd9d0dd83e6583/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=11189793b6ef60645d5d1126d0bd9d0dd83e6583", "patch": "@@ -429,9 +429,17 @@ __do_global_dtors_aux (void)\n #ifdef FINI_SECTION_ASM_OP\n CRT_CALL_STATIC_FUNCTION (FINI_SECTION_ASM_OP, __do_global_dtors_aux)\n #elif defined (FINI_ARRAY_SECTION_ASM_OP)\n+#if defined(__FDPIC__)\n+__asm__(\"\\t.equ\\t__do_global_dtors_aux_alias, __do_global_dtors_aux\\n\");\n+extern char __do_global_dtors_aux_alias;\n+static void *__do_global_dtors_aux_fini_array_entry[]\n+__attribute__ ((__used__, section(\".fini_array\"), aligned(sizeof(void *))))\n+     = { &__do_global_dtors_aux_alias };\n+#else /* defined(__FDPIC__) */\n static func_ptr __do_global_dtors_aux_fini_array_entry[]\n   __attribute__ ((__used__, section(\".fini_array\"),\n \t\t  aligned(__alignof__(func_ptr)))) = { __do_global_dtors_aux };\n+#endif /* defined(__FDPIC__) */\n #else /* !FINI_SECTION_ASM_OP && !FINI_ARRAY_SECTION_ASM_OP */\n static void __attribute__((used))\n __do_global_dtors_aux_1 (void)\n@@ -473,9 +481,17 @@ frame_dummy (void)\n #ifdef __LIBGCC_INIT_SECTION_ASM_OP__\n CRT_CALL_STATIC_FUNCTION (__LIBGCC_INIT_SECTION_ASM_OP__, frame_dummy)\n #else /* defined(__LIBGCC_INIT_SECTION_ASM_OP__) */\n+#if defined(__FDPIC__)\n+__asm__(\"\\t.equ\\t__frame_dummy_alias, frame_dummy\\n\");\n+extern char __frame_dummy_alias;\n+static void *__frame_dummy_init_array_entry[]\n+__attribute__ ((__used__, section(\".init_array\"), aligned(sizeof(void *))))\n+     = { &__frame_dummy_alias };\n+#else /* defined(__FDPIC__) */\n static func_ptr __frame_dummy_init_array_entry[]\n   __attribute__ ((__used__, section(\".init_array\"),\n \t\t  aligned(__alignof__(func_ptr)))) = { frame_dummy };\n+#endif /* defined(__FDPIC__) */\n #endif /* !defined(__LIBGCC_INIT_SECTION_ASM_OP__) */\n #endif /* USE_EH_FRAME_REGISTRY || USE_TM_CLONE_REGISTRY */\n "}]}