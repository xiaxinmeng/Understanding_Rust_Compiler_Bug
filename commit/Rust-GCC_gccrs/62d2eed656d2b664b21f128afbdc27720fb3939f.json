{"sha": "62d2eed656d2b664b21f128afbdc27720fb3939f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJkMmVlZDY1NmQyYjY2NGIyMWYxMjhhZmJkYzI3NzIwZmIzOTM5Zg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-01-02T00:14:24Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-01-02T00:14:24Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (rmi_java_source_files): Added RMIClassLoaderSpi.\n\t* java/awt/AlphaComposite.java, java/awt/BasicStroke.java,\n\tjava/awt/BufferCapabilities.java, java/awt/Button.java,\n\tjava/awt/CheckboxMenuItem.java, java/awt/Choice.java,\n\tjava/awt/Container.java, java/awt/Cursor.java,\n\tjava/awt/EventQueue.java, java/awt/FileDialog.java,\n\tjava/awt/Graphics2D.java, java/awt/Label.java, java/awt/Menu.java,\n\tjava/awt/MenuBar.java, java/awt/MenuComponent.java,\n\tjava/awt/PopupMenu.java, java/awt/ScrollPane.java,\n\tjava/awt/Scrollbar.java, java/awt/TextArea.java,\n\tjava/awt/TextField.java, java/awt/color/CMMException.java,\n\tjava/awt/color/ColorSpace.java, java/awt/color/ICC_Profile.java,\n\tjava/awt/color/ProfileDataException.java,\n\tjava/awt/datatransfer/Clipboard.java,\n\tjava/awt/datatransfer/DataFlavor.java,\n\tjava/awt/datatransfer/FlavorMap.java,\n\tjava/awt/datatransfer/SystemFlavorMap.java,\n\tjava/awt/dnd/DragGestureEvent.java,\n\tjava/awt/dnd/DragGestureRecognizer.java,\n\tjava/awt/dnd/DragSource.java, java/awt/dnd/DropTarget.java,\n\tjava/awt/event/WindowEvent.java, java/awt/geom/PathIterator.java,\n\tjava/awt/im/InputMethodHighlight.java,\n\tjava/io/PipedOutputStream.java, java/io/PipedWriter.java,\n\tjava/rmi/server/RMIClassLoader.java: Merged from Classpath.\n\n\t* gnu/awt/j2d/Graphics2DImpl.java (drawImage): Changed type of\n\t`op' to BufferedImageOp.\n\nFrom-SVN: r60768", "tree": {"sha": "16e5e7e16e0e667ba0696007d49bc3344f03cb6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16e5e7e16e0e667ba0696007d49bc3344f03cb6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62d2eed656d2b664b21f128afbdc27720fb3939f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d2eed656d2b664b21f128afbdc27720fb3939f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62d2eed656d2b664b21f128afbdc27720fb3939f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62d2eed656d2b664b21f128afbdc27720fb3939f/comments", "author": null, "committer": null, "parents": [{"sha": "3c32ae1c35f838a0d4ef571656b5427ade5c861d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c32ae1c35f838a0d4ef571656b5427ade5c861d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c32ae1c35f838a0d4ef571656b5427ade5c861d"}], "stats": {"total": 1336, "additions": 914, "deletions": 422}, "files": [{"sha": "1d3d4bd603043926088c01c212e3ffd9c9e7653e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -1,3 +1,34 @@\n+2003-01-01  Tom Tromey  <tromey@redhat.com>\n+\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (rmi_java_source_files): Added RMIClassLoaderSpi.\n+\t* java/awt/AlphaComposite.java, java/awt/BasicStroke.java,\n+\tjava/awt/BufferCapabilities.java, java/awt/Button.java,\n+\tjava/awt/CheckboxMenuItem.java, java/awt/Choice.java,\n+\tjava/awt/Container.java, java/awt/Cursor.java,\n+\tjava/awt/EventQueue.java, java/awt/FileDialog.java,\n+\tjava/awt/Graphics2D.java, java/awt/Label.java, java/awt/Menu.java,\n+\tjava/awt/MenuBar.java, java/awt/MenuComponent.java,\n+\tjava/awt/PopupMenu.java, java/awt/ScrollPane.java,\n+\tjava/awt/Scrollbar.java, java/awt/TextArea.java,\n+\tjava/awt/TextField.java, java/awt/color/CMMException.java,\n+\tjava/awt/color/ColorSpace.java, java/awt/color/ICC_Profile.java,\n+\tjava/awt/color/ProfileDataException.java,\n+\tjava/awt/datatransfer/Clipboard.java,\n+\tjava/awt/datatransfer/DataFlavor.java,\n+\tjava/awt/datatransfer/FlavorMap.java,\n+\tjava/awt/datatransfer/SystemFlavorMap.java,\n+\tjava/awt/dnd/DragGestureEvent.java,\n+\tjava/awt/dnd/DragGestureRecognizer.java,\n+\tjava/awt/dnd/DragSource.java, java/awt/dnd/DropTarget.java,\n+\tjava/awt/event/WindowEvent.java, java/awt/geom/PathIterator.java,\n+\tjava/awt/im/InputMethodHighlight.java,\n+\tjava/io/PipedOutputStream.java, java/io/PipedWriter.java,\n+\tjava/rmi/server/RMIClassLoader.java: Merged from Classpath.\n+\n+\t* gnu/awt/j2d/Graphics2DImpl.java (drawImage): Changed type of\n+\t`op' to BufferedImageOp.\n+\n 2002-12-31  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/7416:"}, {"sha": "e9f52f94cd7eb00f72bef65c74d195b39e0b59eb", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -1336,6 +1336,7 @@ java/rmi/server/LogStream.java \\\n java/rmi/server/ObjID.java \\\n java/rmi/server/Operation.java \\\n java/rmi/server/RMIClassLoader.java \\\n+java/rmi/server/RMIClassLoaderSpi.java \\\n java/rmi/server/RMIClientSocketFactory.java \\\n java/rmi/server/RMIFailureHandler.java \\\n java/rmi/server/RMIServerSocketFactory.java \\"}, {"sha": "595c24fbfe7daa25cf48a389d2a3cc5bcccb2e73", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -1096,6 +1096,7 @@ java/rmi/server/LogStream.java \\\n java/rmi/server/ObjID.java \\\n java/rmi/server/Operation.java \\\n java/rmi/server/RMIClassLoader.java \\\n+java/rmi/server/RMIClassLoaderSpi.java \\\n java/rmi/server/RMIClientSocketFactory.java \\\n java/rmi/server/RMIFailureHandler.java \\\n java/rmi/server/RMIServerSocketFactory.java \\\n@@ -3164,6 +3165,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/rmi/server/LoaderHandler.P .deps/java/rmi/server/LogStream.P \\\n .deps/java/rmi/server/ObjID.P .deps/java/rmi/server/Operation.P \\\n .deps/java/rmi/server/RMIClassLoader.P \\\n+.deps/java/rmi/server/RMIClassLoaderSpi.P \\\n .deps/java/rmi/server/RMIClientSocketFactory.P \\\n .deps/java/rmi/server/RMIFailureHandler.P \\\n .deps/java/rmi/server/RMIServerSocketFactory.P \\"}, {"sha": "5af41bfc9cb4c8b26b2c623d31c1216362facf55", "filename": "libjava/gnu/awt/j2d/Graphics2DImpl.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fgnu%2Fawt%2Fj2d%2FGraphics2DImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fgnu%2Fawt%2Fj2d%2FGraphics2DImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fj2d%2FGraphics2DImpl.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* Copyright (C) 2000, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -24,6 +24,7 @@\n import java.awt.geom.AffineTransform;\n import java.awt.image.ImageObserver;\n import java.awt.image.BufferedImage;\n+import java.awt.image.BufferedImageOp;\n import java.awt.image.RenderedImage;\n import java.awt.image.renderable.RenderableImage;\n import java.text.AttributedCharacterIterator;\n@@ -459,7 +460,7 @@ public void clip(Shape shape)\n     throw new UnsupportedOperationException(msg);\n   }\n   \n-  public void drawImage(BufferedImage image, BufferedImage op, int x, int y)\n+  public void drawImage(BufferedImage image, BufferedImageOp op, int x, int y)\n   {\n     throw new UnsupportedOperationException(\"not implemented yet\");  \n   }"}, {"sha": "f0795a9601074ed7c576a8f59e510af1c47b184b", "filename": "libjava/java/awt/AlphaComposite.java", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FAlphaComposite.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FAlphaComposite.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FAlphaComposite.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -64,6 +64,7 @@ protected boolean removeEldestEntry(Map.Entry eldest)\n       return size() > MAX_CACHE_SIZE;\n     }\n   };\n+\n   public static final int CLEAR = 1;\n   public static final int SRC = 2;\n   public static final int DST = 9;\n@@ -88,17 +89,40 @@ protected boolean removeEldestEntry(Map.Entry eldest)\n   public static final AlphaComposite SrcAtop = getInstance(SRC_ATOP);\n   public static final AlphaComposite DstAtop = getInstance(DST_ATOP);\n   public static final AlphaComposite Xor = getInstance(XOR);\n+  \n   private final int rule;\n   private final float alpha;\n   private AlphaComposite(int rule, float alpha)\n   {\n     this.rule = rule;\n     this.alpha = alpha;\n   }\n+\n+  /**\n+   * Creates an AlphaComposite object with the specified rule.\n+   *\n+   * @param rule The compositing rule.\n+   *\n+   * @exception IllegalArgumentException If rule is not one of the following:\n+   * CLEAR, SRC, DST, SRC_OVER, DST_OVER, SRC_IN, DST_IN, SRC_OUT, DST_OUT,\n+   * SRC_ATOP, DST_ATOP, or XOR.\n+   */\n   public static AlphaComposite getInstance(int rule)\n   {\n     return getInstance(rule, 1);\n   }\n+  \n+  /**\n+   * Creates an AlphaComposite object with the specified rule and the constant\n+   * alpha to multiply with the alpha of the source. The source is multiplied\n+   * with the specified alpha before being composited with the destination.\n+   *\n+   * @param rule The compositing rule.\n+   *\n+   * @exception IllegalArgumentException If rule is not one of the following:\n+   * CLEAR, SRC, DST, SRC_OVER, DST_OVER, SRC_IN, DST_IN, SRC_OUT, DST_OUT,\n+   * SRC_ATOP, DST_ATOP, or XOR.\n+   */\n   public static AlphaComposite getInstance(int rule, float alpha)\n   {\n     if (rule < CLEAR || rule > XOR || ! (alpha >= 0 && alpha <= 1))"}, {"sha": "3d0a2e7450627c4c168524a5f76f72096aa911b4", "filename": "libjava/java/awt/BasicStroke.java", "status": "modified", "additions": 55, "deletions": 3, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FBasicStroke.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FBasicStroke.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FBasicStroke.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -1,5 +1,5 @@\n /* BasicStroke.java -- \n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -59,12 +59,31 @@ public class BasicStroke implements Stroke\n   private final float[] dash;\n   private final float phase;\n \n+  /**\n+   * Creates a basic stroke.\n+   *\n+   * @param width May not be negative .\n+   * @param cap May be either CAP_BUTT, CAP_ROUND or CAP_SQUARE.\n+   * @param join May be either JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER.\n+   * @param miterlimit the limit to trim the miter join. The miterlimit must be\n+   * greater than or equal to 1.0f.\n+   * @param dash The array representing the dashing pattern.\n+   * @param dash_phase is negative and dash is not null.\n+   *\n+   * @exception IllegalArgumentException If one input parameter doesn't meet\n+   * its needs.\n+   */\n   public BasicStroke(float width, int cap, int join, float miterlimit,\n                      float[] dash, float dashPhase)\n   {\n-    if (width < 0 || miterlimit < 1 || cap < CAP_BUTT || cap > CAP_SQUARE\n-        || join < JOIN_MITER || join > JOIN_BEVEL)\n+    if (width < 0 ||\n+        miterlimit < 1.0f ||\n+        cap < CAP_BUTT ||\n+        cap > CAP_SQUARE ||\n+        join < JOIN_MITER ||\n+        join > JOIN_BEVEL)\n       throw new IllegalArgumentException();\n+\n     this.width = width;\n     this.cap = cap;\n     this.join = join;\n@@ -73,21 +92,54 @@ public BasicStroke(float width, int cap, int join, float miterlimit,\n     phase = dashPhase;\n   }\n \n+  /**\n+   * Creates a basic stroke.\n+   *\n+   * @param width The width of the BasicStroke. May not be negative .\n+   * @param cap May be either CAP_BUTT, CAP_ROUND or CAP_SQUARE.\n+   * @param join May be either JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER.\n+   * @param miterlimit the limit to trim the miter join. The miterlimit must be\n+   * greater than or equal to 1.0f.\n+   * \n+   * @exception IllegalArgumentException If one input parameter doesn't meet\n+   * its needs.\n+   */\n   public BasicStroke(float width, int cap, int join, float miterlimit)\n   {\n     this(width, cap, join, miterlimit, null, 0);\n   }\n \n+  /**\n+   * Creates a basic stroke.\n+   *\n+   * @param width The width of the BasicStroke. May not be nehative.\n+   * @param cap May be either CAP_BUTT, CAP_ROUND or CAP_SQUARE.\n+   * @param join May be either JOIN_ROUND, JOIN_BEVEL, or JOIN_MITER.\n+   * \n+   * @exception IllegalArgumentException If one input parameter doesn't meet\n+   * its needs.\n+   * @exception IllegalArgumentException FIXME\n+   */\n   public BasicStroke(float width, int cap, int join)\n   {\n     this(width, cap, join, 10, null, 0);\n   }\n \n+  /**\n+   * Creates a basic stroke.\n+   *\n+   * @param width The width of the BasicStroke.\n+   * \n+   * @exception IllegalArgumentException If width is negative.\n+   */\n   public BasicStroke(float width)\n   {\n     this(width, CAP_SQUARE, JOIN_MITER, 10, null, 0);\n   }\n \n+  /**\n+   * Creates a basic stroke.\n+   */\n   public BasicStroke()\n   {\n     this(1, CAP_SQUARE, JOIN_MITER, 10, null, 0);"}, {"sha": "871529e6e939c60546fe9ff9c8a1d1c5a35882d2", "filename": "libjava/java/awt/BufferCapabilities.java", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FBufferCapabilities.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FBufferCapabilities.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FBufferCapabilities.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -67,6 +67,11 @@ private FlipContents(int value)\n   private final ImageCapabilities back;\n   private final FlipContents flip;\n \n+  /**\n+   * Creates a buffer capabilities object.\n+   *\n+   * @exception IllegalArgumentException If frontCaps or backCaps are null.\n+   */\n   public BufferCapabilities(ImageCapabilities front, ImageCapabilities back,\n                             FlipContents flip)\n   {"}, {"sha": "989fbc951730756be5ad9cfa5228150002129e2b", "filename": "libjava/java/awt/Button.java", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FButton.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -90,6 +90,9 @@ public class Button extends Component implements java.io.Serializable\n \n /**\n   * Initializes a new instance of <code>Button</code> with no label.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true\n   */\n public\n Button()\n@@ -104,12 +107,18 @@ public class Button extends Component implements java.io.Serializable\n   * label.  The action command name is also initialized to this value.\n   *\n   * @param label The label to display on the button.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true\n   */\n public\n Button(String label)\n {\n   this.label = label;\n   actionCommand = label;\n+\n+  if (GraphicsEnvironment.isHeadless ())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/\n@@ -211,6 +220,10 @@ public synchronized ActionListener[] getActionListeners()\n /** Returns all registered EventListers of the given listenerType. \n  * listenerType must be a subclass of EventListener, or a \n  * ClassClassException is thrown.\n+ *\n+ * @exception ClassCastException If listenerType doesn't specify a class or\n+ * interface that implements @see java.util.EventListener.\n+ *\n  * @since 1.3 \n  */\n   public EventListener[] getListeners(Class listenerType)"}, {"sha": "88218397c3c613dd18b8e0931d4d9d2020545372", "filename": "libjava/java/awt/CheckboxMenuItem.java", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxMenuItem.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -84,6 +84,9 @@ public class CheckboxMenuItem extends MenuItem implements ItemSelectable,\n /**\n   * Initializes a new instance of <code>CheckboxMenuItem</code> with no\n   * label and an initial state of off.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true.\n   */\n public\n CheckboxMenuItem()\n@@ -98,6 +101,9 @@ public class CheckboxMenuItem extends MenuItem implements ItemSelectable,\n   * specified label and an initial state of off.\n   *\n   * @param label The label of the menu item.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true.\n   */\n public\n CheckboxMenuItem(String label)\n@@ -114,12 +120,18 @@ public class CheckboxMenuItem extends MenuItem implements ItemSelectable,\n   * @param label The label of the menu item.\n   * @param state The initial state of the menu item, where <code>true</code>\n   * is on, and <code>false</code> is off.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true.\n   */\n public\n CheckboxMenuItem(String label, boolean state)\n {\n   super(label);\n   this.state = state;\n+\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "4c7b505535cafd088df72e3a050d229e96ab4afd", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -85,13 +85,17 @@ public class Choice extends Component implements ItemSelectable, Serializable\n  * Constructors\n  */\n \n-/**\n-  * Initializes a new instance of <code>Choice</code>.\n-  */\n-public\n-Choice()\n-{\n-}\n+  /**\n+   * Initializes a new instance of <code>Choice</code>.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+   * returns true\n+   */\n+  public Choice()\n+  {\n+    if (GraphicsEnvironment.isHeadless())\n+      throw new HeadlessException ();\n+  }\n \n /*************************************************************************/\n \n@@ -146,12 +150,16 @@ public class Choice extends Component implements ItemSelectable, Serializable\n   * Adds the specified item to this choice box.\n   *\n   * @param item The item to add.\n+  *\n+  * @exception NullPointerException If the item's value is null\n+  *\n+  * @since 1.1\n   */\n public synchronized void\n add(String item)\n {\n   if (item == null)\n-    throw new IllegalArgumentException (\"item must be non-null\");\n+    throw new NullPointerException (\"item must be non-null\");\n \n   pItems.addElement(item);\n \n@@ -171,7 +179,12 @@ public class Choice extends Component implements ItemSelectable, Serializable\n /**\n   * Adds the specified item to this choice box.\n   *\n+  * This method is oboslete since Java 2 platform 1.1. Please use @see add\n+  * instead.\n+  *\n   * @param item The item to add.\n+  *\n+  * @exception NullPointerException If the item's value is equal to null\n   */\n public synchronized void\n addItem(String item)\n@@ -189,10 +202,15 @@ public class Choice extends Component implements ItemSelectable, Serializable\n  *\n  * @param item The item to add.\n  * @param index The index at which the item should be inserted.\n+ *\n+ * @exception IllegalArgumentException If index is less than 0\n  */\n public synchronized void\n insert(String item, int index)\n {\n+  if (index < 0)\n+    throw new IllegalArgumentException (\"index may not be less then 0\");\n+\n   if (index > getItemCount ())\n     index = getItemCount ();\n "}, {"sha": "9494d8c56aca74df7f4bd24cfb952d6f69a76c59", "filename": "libjava/java/awt/Container.java", "status": "modified", "additions": 288, "deletions": 223, "changes": 511, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FContainer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FContainer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FContainer.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -59,7 +59,9 @@\n  *\n  * @author original author unknown\n  * @author Eric Blake <ebb9@email.byu.edu>\n+ *\n  * @since 1.0\n+ *\n  * @status still missing 1.4 support\n  */\n public class Container extends Component\n@@ -78,7 +80,9 @@ public class Container extends Component\n \n   Dimension maxSize;\n \n-  /** @since 1.4 */\n+  /**\n+   * @since 1.4\n+   */\n   boolean focusCycleRoot;\n \n   int containerSerializedDataVersion;\n@@ -107,6 +111,7 @@ public int getComponentCount()\n    * Returns the number of components in this container.\n    *\n    * @return The number of components in this container.\n+   *\n    * @deprecated use {@link #getComponentCount()} instead\n    */\n   public int countComponents()\n@@ -118,16 +123,19 @@ public int countComponents()\n    * Returns the component at the specified index.\n    *\n    * @param index The index of the component to retrieve.\n+   *\n    * @return The requested component.\n+   *\n    * @throws ArrayIndexOutOfBoundsException If the specified index is invalid\n    */\n   public Component getComponent(int n)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tif (n < 0 || n >= ncomponents)\n-\t  throw new ArrayIndexOutOfBoundsException(\"no such component\");\n-\treturn component[n];\n+        if (n < 0 || n >= ncomponents)\n+          throw new ArrayIndexOutOfBoundsException(\"no such component\");\n+\n+        return component[n];\n       }\n   }\n \n@@ -140,10 +148,12 @@ public Component[] getComponents()\n   {\n     synchronized (getTreeLock ())\n       {\n-\tComponent[] result = new Component[ncomponents];\n-\tif (ncomponents > 0)\n-\t  System.arraycopy(component, 0, result, 0, ncomponents);\n-\treturn result;\n+        Component[] result = new Component[ncomponents];\n+\n+        if (ncomponents > 0)\n+          System.arraycopy(component, 0, result, 0, ncomponents);\n+\n+        return result;\n       }\n   }\n \n@@ -157,6 +167,7 @@ public Insets getInsets()\n   {\n     if (peer == null)\n       return new Insets(0, 0, 0, 0);\n+    \n     return ((ContainerPeer) peer).getInsets();\n   }\n \n@@ -177,6 +188,7 @@ public Insets insets()\n    * component list.\n    *\n    * @param component The component to add to the container.\n+   *\n    * @return The same component that was added.\n    */\n   public Component add(Component comp)\n@@ -190,7 +202,7 @@ public Component add(Component comp)\n    * component list.  This method should not be used. Instead, use\n    * <code>add(Component, Object</code>.\n    *\n-   * @param name FIXME\n+   * @param name The name of the component to be added.\n    * @param component The component to be added.\n    *\n    * @return The same component that was added.\n@@ -268,69 +280,70 @@ protected void addImpl(Component comp, Object constraints, int index)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tif (index > ncomponents\n-\t    || (index < 0 && index != -1)\n-\t    || comp instanceof Window\n-\t    || (comp instanceof Container\n-\t\t&& ((Container) comp).isAncestorOf(this)))\n-\t  throw new IllegalArgumentException();\n-\n-\t// Reparent component, and make sure component is instantiated if\n-\t// we are.\n-\tif (comp.parent != null)\n-\t  comp.parent.remove(comp);\n-\tcomp.parent = this;\n-\tif (peer != null)\n-\t  {\n-\t    comp.addNotify();\n-\n-\t    if (comp.isLightweight())\n-\t      enableEvents(comp.eventMask);\n-\t  }\n+        if (index > ncomponents\n+            || (index < 0 && index != -1)\n+            || comp instanceof Window\n+            || (comp instanceof Container\n+                && ((Container) comp).isAncestorOf(this)))\n+          throw new IllegalArgumentException();\n+\n+        // Reparent component, and make sure component is instantiated if\n+        // we are.\n+        if (comp.parent != null)\n+          comp.parent.remove(comp);\n+        comp.parent = this;\n+        if (peer != null)\n+          {\n+            comp.addNotify();\n \n-\tinvalidate();\n+            if (comp.isLightweight())\n+              enableEvents(comp.eventMask);\n+          }\n \n-\tif (component == null)\n-\t  component = new Component[4]; // FIXME, better initial size?\n+        invalidate();\n \n-\t// This isn't the most efficient implementation.  We could do less\n-\t// copying when growing the array.  It probably doesn't matter.\n-\tif (ncomponents >= component.length)\n-\t  {\n-\t    int nl = component.length * 2;\n-\t    Component[] c = new Component[nl];\n-\t    System.arraycopy(component, 0, c, 0, ncomponents);\n-\t    component = c;\n-\t  }\n-\tif (index == -1)\n-\t  component[ncomponents++] = comp;\n-\telse\n-\t  {\n-\t    System.arraycopy(component, index, component, index + 1,\n-\t\t\t     ncomponents - index);\n-\t    component[index] = comp;\n-\t    ++ncomponents;\n-\t  }\n+        if (component == null)\n+          component = new Component[4]; // FIXME, better initial size?\n \n-\t// Notify the layout manager.\n-\tif (layoutMgr != null)\n-\t  {\n-\t    if (layoutMgr instanceof LayoutManager2)\n-\t      {\n-\t\tLayoutManager2 lm2 = (LayoutManager2) layoutMgr;\n-\t\tlm2.addLayoutComponent(comp, constraints);\n-\t      }\n-\t    else if (constraints instanceof String)\n-\t      layoutMgr.addLayoutComponent((String) constraints, comp);\n-\t    else\n-\t      layoutMgr.addLayoutComponent(null, comp);\n-\t  }\n+        // This isn't the most efficient implementation.  We could do less\n+        // copying when growing the array.  It probably doesn't matter.\n+        if (ncomponents >= component.length)\n+          {\n+            int nl = component.length * 2;\n+            Component[] c = new Component[nl];\n+            System.arraycopy(component, 0, c, 0, ncomponents);\n+            component = c;\n+          }\n+  \n+        if (index == -1)\n+          component[ncomponents++] = comp;\n+        else\n+          {\n+            System.arraycopy(component, index, component, index + 1,\n+                             ncomponents - index);\n+            component[index] = comp;\n+            ++ncomponents;\n+          }\n \n-\t// Post event to notify of adding the container.\n-\tContainerEvent ce = new ContainerEvent(this,\n-\t\t\t\t\t       ContainerEvent.COMPONENT_ADDED,\n-\t\t\t\t\t       comp);\n-\tgetToolkit().getSystemEventQueue().postEvent(ce);\n+        // Notify the layout manager.\n+        if (layoutMgr != null)\n+          {\n+            if (layoutMgr instanceof LayoutManager2)\n+              {\n+                LayoutManager2 lm2 = (LayoutManager2) layoutMgr;\n+                lm2.addLayoutComponent(comp, constraints);\n+              }\n+            else if (constraints instanceof String)\n+              layoutMgr.addLayoutComponent((String) constraints, comp);\n+            else\n+              layoutMgr.addLayoutComponent(null, comp);\n+          }\n+\n+        // Post event to notify of adding the container.\n+        ContainerEvent ce = new ContainerEvent(this,\n+                                               ContainerEvent.COMPONENT_ADDED,\n+                                               comp);\n+        getToolkit().getSystemEventQueue().postEvent(ce);\n       }\n   }\n \n@@ -343,24 +356,24 @@ public void remove(int index)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tComponent r = component[index];\n+        Component r = component[index];\n \n-\tr.removeNotify();\n+        r.removeNotify();\n \n-\tSystem.arraycopy(component, index + 1, component, index,\n-\t\t\t ncomponents - index - 1);\n-\tcomponent[--ncomponents] = null;\n+        System.arraycopy(component, index + 1, component, index,\n+                         ncomponents - index - 1);\n+        component[--ncomponents] = null;\n \n-\tinvalidate();\n+        invalidate();\n \n-\tif (layoutMgr != null)\n-\t  layoutMgr.removeLayoutComponent(r);\n+        if (layoutMgr != null)\n+          layoutMgr.removeLayoutComponent(r);\n \n-\t// Post event to notify of adding the container.\n-\tContainerEvent ce = new ContainerEvent(this,\n-\t\t\t\t\t       ContainerEvent.COMPONENT_REMOVED,\n-\t\t\t\t\t       r);\n-\tgetToolkit().getSystemEventQueue().postEvent(ce);\n+        // Post event to notify of adding the container.\n+        ContainerEvent ce = new ContainerEvent(this,\n+                                               ContainerEvent.COMPONENT_REMOVED,\n+                                               r);\n+        getToolkit().getSystemEventQueue().postEvent(ce);\n       }\n   }\n \n@@ -373,14 +386,14 @@ public void remove(Component comp)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  {\n-\t    if (component[i] == comp)\n-\t      {\n-\t\tremove(i);\n-\t\tbreak;\n-\t      }\n-\t  }\n+        for (int i = 0; i < ncomponents; ++i)\n+          {\n+            if (component[i] == comp)\n+              {\n+                remove(i);\n+                break;\n+              }\n+          }\n       }\n   }\n \n@@ -391,8 +404,8 @@ public void removeAll()\n   {\n     synchronized (getTreeLock ())\n       {\n-\twhile (ncomponents > 0)\n-\t  remove(0);\n+        while (ncomponents > 0)\n+          remove(0);\n       }\n   }\n \n@@ -525,6 +538,7 @@ public Dimension getPreferredSize()\n    * Returns the preferred size of this container.\n    *\n    * @return The preferred size of this container.\n+   *\n    * @deprecated use {@link #getPreferredSize()} instead\n    */\n   public Dimension preferredSize()\n@@ -549,6 +563,7 @@ public Dimension getMinimumSize()\n    * Returns the minimum size of this container.\n    *\n    * @return The minimum size of this container.\n+   *\n    * @deprecated use {@link #getMinimumSize()} instead\n    */\n   public Dimension minimumSize()\n@@ -709,6 +724,10 @@ public synchronized ContainerListener[] getContainerListeners()\n   }\n \n   /**\n+   * Returns an array of all the objects currently registered as FooListeners\n+   * upon this Container. FooListeners are registered using the addFooListener\n+   * method.\n+   *\n    * @since 1.3\n    */\n   public EventListener[] getListeners(Class listenerType)\n@@ -760,6 +779,7 @@ protected void processContainerEvent(ContainerEvent e)\n    * AWT 1.0 event processor.\n    *\n    * @param event The event that occurred.\n+   *\n    * @deprecated use {@link #dispatchEvent(AWTEvent)} instead\n    */\n   public void deliverEvent(Event e)\n@@ -784,20 +804,20 @@ public Component getComponentAt(int x, int y)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tif (! contains(x, y))\n-\t  return null;\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  {\n-\t    // Ignore invisible children...\n-\t    if (!component[i].isVisible())\n-\t      continue;\n-\n-\t    int x2 = x - component[i].x;\n-\t    int y2 = y - component[i].y;\n-\t    if (component[i].contains(x2, y2))\n-\t      return component[i];\n-\t  }\n-\treturn this;\n+        if (! contains(x, y))\n+          return null;\n+        for (int i = 0; i < ncomponents; ++i)\n+          {\n+            // Ignore invisible children...\n+            if (!component[i].isVisible())\n+              continue;\n+\n+            int x2 = x - component[i].x;\n+            int y2 = y - component[i].y;\n+            if (component[i].contains(x2, y2))\n+              return component[i];\n+          }\n+        return this;\n       }\n   }\n \n@@ -813,6 +833,7 @@ public Component getComponentAt(int x, int y)\n    *\n    * @return The component containing the specified point, or <code>null</code>\n    * if there is no such point.\n+   *\n    * @deprecated use {@link #getComponentAt(int, int)} instead\n    */\n   public Component locate(int x, int y)\n@@ -841,31 +862,31 @@ public Component findComponentAt(int x, int y)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tif (! contains(x, y))\n-\t  return null;\n-\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  {\n-\t    // Ignore invisible children...\n-\t    if (!component[i].isVisible())\n-\t      continue;\n-\n-\t    int x2 = x - component[i].x;\n-\t    int y2 = y - component[i].y;\n-\t    // We don't do the contains() check right away because\n-\t    // findComponentAt would redundantly do it first thing.\n-\t    if (component[i] instanceof Container)\n-\t      {\n-\t\tContainer k = (Container) component[i];\n-\t\tComponent r = k.findComponentAt(x2, y2);\n-\t\tif (r != null)\n-\t\t  return r;\n-\t      }\n-\t    else if (component[i].contains(x2, y2))\n-\t      return component[i];\n-\t  }\n+        if (! contains(x, y))\n+          return null;\n \n-\treturn this;\n+        for (int i = 0; i < ncomponents; ++i)\n+          {\n+            // Ignore invisible children...\n+            if (!component[i].isVisible())\n+              continue;\n+\n+            int x2 = x - component[i].x;\n+            int y2 = y - component[i].y;\n+            // We don't do the contains() check right away because\n+            // findComponentAt would redundantly do it first thing.\n+            if (component[i] instanceof Container)\n+              {\n+                Container k = (Container) component[i];\n+                Component r = k.findComponentAt(x2, y2);\n+                if (r != null)\n+                  return r;\n+              }\n+            else if (component[i].contains(x2, y2))\n+              return component[i];\n+          }\n+\n+        return this;\n       }\n   }\n \n@@ -894,9 +915,9 @@ public void removeNotify()\n   {\n     synchronized (getTreeLock ())\n       {\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  component[i].removeNotify();\n-\tsuper.removeNotify();\n+        for (int i = 0; i < ncomponents; ++i)\n+          component[i].removeNotify();\n+        super.removeNotify();\n       }\n   }\n \n@@ -913,14 +934,14 @@ public boolean isAncestorOf(Component comp)\n   {\n     synchronized (getTreeLock ())\n       {\n-\twhile (true)\n-\t  {\n-\t    if (comp == null)\n-\t      return false;\n-\t    if (comp == this)\n-\t      return true;\n-\t    comp = comp.getParent();\n-\t  }\n+        while (true)\n+          {\n+            if (comp == null)\n+              return false;\n+            if (comp == this)\n+              return true;\n+            comp = comp.getParent();\n+          }\n       }\n   }\n \n@@ -950,9 +971,9 @@ public void list(PrintStream out, int indent)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tsuper.list(out, indent);\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  component[i].list(out, indent + 2);\n+        super.list(out, indent);\n+        for (int i = 0; i < ncomponents; ++i)\n+          component[i].list(out, indent + 2);\n       }\n   }\n \n@@ -967,62 +988,93 @@ public void list(PrintWriter out, int indent)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tsuper.list(out, indent);\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  component[i].list(out, indent + 2);\n+        super.list(out, indent);\n+        for (int i = 0; i < ncomponents; ++i)\n+          component[i].list(out, indent + 2);\n       }\n   }\n \n   public void setFocusTraversalKeys(int id, Set keys)\n   {\n+    if (id != KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS)\n+      throw new IllegalArgumentException ();\n   }\n+  \n   public Set getFocusTraversalKeys(int id)\n   {\n+    if (id != KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS)\n+      throw new IllegalArgumentException ();\n+\n     return null;\n   }\n+  \n   public boolean areFocusTraversalKeysSet(int id)\n   {\n+    if (id != KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS &&\n+        id != KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS)\n+      throw new IllegalArgumentException ();\n+\n     return false;\n   }\n+  \n   public boolean isFocusCycleRoot(Container c)\n   {\n     return false;\n   }\n+  \n   public void transferFocusBackward()\n   {\n   }\n+  \n   public void setFocusTraversalPolicy(FocusTraversalPolicy policy)\n   {\n   }\n+  \n   public FocusTraversalPolicy getFocusTraversalPolicy()\n   {\n     return null;\n   }\n+  \n   public boolean isFocusTraversalPolicySet()\n   {\n     return false;\n   }\n+  \n   public void setFocusCycleRoot(boolean focusCycleRoot)\n   {\n   }\n+  \n   public boolean isFocusCycleRoot()\n   {\n     return false;\n   }\n+  \n   public void transferFocusDownCycle()\n   {\n   }\n+  \n   public void applyComponentOrientation(ComponentOrientation o)\n   {\n+    if (orientation == null)\n+      throw new NullPointerException ();\n   }\n+  \n   public void addPropertyChangeListener(PropertyChangeListener l)\n   {\n   }\n+  \n   public void addPropertyChangeListener(String name, PropertyChangeListener l)\n   {\n   }\n \n-\f\n   // Hidden helper methods.\n \n   /**\n@@ -1044,14 +1096,14 @@ private void visitChildren(Graphics gfx, GfxVisitor visitor,\n   {\n     synchronized (getTreeLock ())\n       {\n-\tfor (int i = 0; i < ncomponents; ++i)\n-\t  {\n-\t    Component comp = component[i];\n-\t    boolean applicable = comp.isVisible()\n-\t      && (comp.isLightweight() || !lightweightOnly);\n-\n-\t    if (applicable)\n-\t      visitChild(gfx, visitor, comp);\n+        for (int i = 0; i < ncomponents; ++i)\n+          {\n+            Component comp = component[i];\n+            boolean applicable = comp.isVisible()\n+              && (comp.isLightweight() || !lightweightOnly);\n+\n+            if (applicable)\n+              visitChild(gfx, visitor, comp);\n \t  }\n       }\n   }\n@@ -1100,67 +1152,66 @@ Component findNextFocusComponent(Component child)\n   {\n     synchronized (getTreeLock ())\n       {\n-\tint start, end;\n-\tif (child != null)\n-\t  {\n-\t    for (start = 0; start < ncomponents; ++start)\n-\t      {\n-\t\tif (component[start] == child)\n-\t\t  break;\n-\t      }\n-\t    end = start;\n-\t    // This special case lets us be sure to terminate.\n-\t    if (end == 0)\n-\t      end = ncomponents;\n-\t    ++start;\n-\t  }\n-\telse\n-\t  {\n-\t    start = 0;\n-\t    end = ncomponents;\n-\t  }\n+        int start, end;\n+        if (child != null)\n+          {\n+            for (start = 0; start < ncomponents; ++start)\n+              {\n+                if (component[start] == child)\n+                  break;\n+              }\n+            end = start;\n+            // This special case lets us be sure to terminate.\n+            if (end == 0)\n+              end = ncomponents;\n+            ++start;\n+          }\n+        else\n+          {\n+            start = 0;\n+            end = ncomponents;\n+          }\n \n-\tfor (int j = start; j != end; ++j)\n-\t  {\n-\t    if (j >= ncomponents)\n-\t      {\n-\t\t// The JCL says that we should wrap here.  However, that\n-\t\t// seems wrong.  To me it seems that focus order should be\n-\t\t// global within in given window.  So instead if we reach\n-\t\t// the end we try to look in our parent, if we have one.\n-\t\tif (parent != null)\n-\t\t  return parent.findNextFocusComponent(this);\n-\t\tj -= ncomponents;\n-\t      }\n-\t    if (component[j] instanceof Container)\n-\t      {\n-\t\tComponent c = component[j];\n-\t\tc = c.findNextFocusComponent(null);\n-\t\tif (c != null)\n-\t\t  return c;\n-\t      }\n-\t    else if (component[j].isFocusTraversable())\n-\t      return component[j];\n-\t  }\n+        for (int j = start; j != end; ++j)\n+          {\n+            if (j >= ncomponents)\n+              {\n+                // The JCL says that we should wrap here.  However, that\n+                // seems wrong.  To me it seems that focus order should be\n+                // global within in given window.  So instead if we reach\n+                // the end we try to look in our parent, if we have one.\n+                if (parent != null)\n+                  return parent.findNextFocusComponent(this);\n+                j -= ncomponents;\n+              }\n+            if (component[j] instanceof Container)\n+              {\n+                Component c = component[j];\n+                c = c.findNextFocusComponent(null);\n+                if (c != null)\n+                  return c;\n+              }\n+            else if (component[j].isFocusTraversable())\n+              return component[j];\n+          }\n \n-\treturn null;\n+        return null;\n       }\n   }\n \n   private void addNotifyContainerChildren()\n   {\n     synchronized (getTreeLock ())\n       {\n-\tfor (int i = ncomponents;  --i >= 0; )\n-\t  {\n-\t    component[i].addNotify();\n-\t    if (component[i].isLightweight())\n-\t      enableEvents(component[i].eventMask);\n-\t  }\n+        for (int i = ncomponents;  --i >= 0; )\n+          {\n+            component[i].addNotify();\n+            if (component[i].isLightweight())\n+              enableEvents(component[i].eventMask);\n+          }\n       }\n   }\n \n-\f\n   // Nested classes.\n \n   /* The following classes are used in concert with the\n@@ -1200,6 +1251,7 @@ static class GfxPrintAllVisitor extends GfxVisitor\n    * This class provides accessibility support for subclasses of container.\n    *\n    * @author Eric Blake <ebb9@email.byu.edu>\n+   *\n    * @since 1.3\n    */\n   protected class AccessibleAWTContainer extends AccessibleAWTComponent\n@@ -1234,14 +1286,14 @@ protected AccessibleAWTContainer()\n     public int getAccessibleChildrenCount()\n     {\n       synchronized (getTreeLock ())\n-\t{\n-\t  int count = 0;\n-\t  int i = component == null ? 0 : component.length;\n-\t  while (--i >= 0)\n-\t    if (component[i] instanceof Accessible)\n-\t      count++;\n-\t  return count;\n-\t}\n+        {\n+          int count = 0;\n+          int i = component == null ? 0 : component.length;\n+          while (--i >= 0)\n+            if (component[i] instanceof Accessible)\n+              count++;\n+          return count;\n+        }\n     }\n \n     /**\n@@ -1253,25 +1305,27 @@ public int getAccessibleChildrenCount()\n     public Accessible getAccessibleChild(int i)\n     {\n       synchronized (getTreeLock ())\n-\t{\n-\t  if (component == null)\n-\t    return null;\n-\t  int index = -1;\n-\t  while (i >= 0 && ++index < component.length)\n-\t    if (component[index] instanceof Accessible)\n-\t      i--;\n-\t  if (i < 0)\n-\t    return (Accessible) component[index];\n-\t  return null;\n-\t}\n+        {\n+          if (component == null)\n+            return null;\n+          int index = -1;\n+          while (i >= 0 && ++index < component.length)\n+            if (component[index] instanceof Accessible)\n+              i--;\n+          if (i < 0)\n+            return (Accessible) component[index];\n+          return null;\n+        }\n     }\n \n     /**\n      * Return the accessible child located at point (in the parent's\n      * coordinates), if one exists.\n      *\n      * @param p the point to look at\n+     *\n      * @return an accessible object at that point, or null\n+     *\n      * @throws NullPointerException if p is null\n      */\n     public Accessible getAccessibleAt(Point p)\n@@ -1286,6 +1340,7 @@ public Accessible getAccessibleAt(Point p)\n      * when children are added or removed from the enclosing accessible object.\n      *\n      * @author Eric Blake <ebb9@email.byu.edu>\n+     *\n      * @since 1.3\n      */\n     protected class AccessibleContainerHandler implements ContainerListener\n@@ -1324,7 +1379,6 @@ public void componentRemoved(ContainerEvent e)\n   } // class AccessibleAWTPanel\n } // class Container\n \n-\f\n /**\n  * Undocumented helper class.\n  * STUBBED\n@@ -1339,39 +1393,50 @@ class LightweightDispatcher implements Serializable, AWTEventListener\n   private transient boolean isMouseInNativeContainer;\n   private Cursor nativeCursor;\n   private long eventMask;\n+  \n   LightweightDispatcher(Container c)\n   {\n   }\n+\n   void dispose()\n   {\n   }\n+\n   void enableEvents(long l)\n   {\n   }\n+\n   boolean dispatchEvent(AWTEvent e)\n   {\n     return true;\n   }\n+\n   boolean isMouseGrab(MouseEvent e)\n   {\n     return true;\n   }\n+\n   boolean processMouseEvent(MouseEvent e)\n   {\n     return true;\n   }\n+\n   void trackMouseEnterExit(Component c, MouseEvent e)\n   {\n   }\n+\n   void startListeningForOtherDrags()\n   {\n   }\n+\n   void stopListeningForOtherDrags()\n   {\n   }\n+\n   public void eventDispatched(AWTEvent e)\n   {\n   }\n+\n   void retargetMouseEvent(Component c, int i, MouseEvent e)\n   {\n   }"}, {"sha": "8652a1e5ebe0b0eddf21927d114b9bf4fad8498c", "filename": "libjava/java/awt/Cursor.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FCursor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FCursor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCursor.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -133,11 +133,14 @@ public class Cursor implements java.io.Serializable\n    * type.\n    *\n    * @param type The cursor type.\n+   *\n+   * @exception IllegalArgumentException If the specified cursor type is invalid\n    */\n   public Cursor(int type)\n   {\n     if (type < 0 || type >= PREDEFINED_COUNT)\n       throw new IllegalArgumentException (\"invalid cursor \" + type);\n+\n     this.type = type;\n     // FIXME: lookup and set name?\n   }\n@@ -171,9 +174,20 @@ public static Cursor getPredefinedCursor(int type)\n     return predefined[type];\n   }\n \n+  /**\n+   * Retrieves the system specific custom Cursor named Cursor names are,\n+   * for example: \"Invalid.16x16\".\n+   *\n+   * @exception AWTException\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+   * returns true.\n+   */\n   public static Cursor getSystemCustomCursor(String name)\n                                       throws AWTException\n   {\n+    if (GraphicsEnvironment.isHeadless())\n+      throw new HeadlessException ();\n+\n     // FIXME\n     return null;\n   }"}, {"sha": "6b64fb7ee3b950c56d1ee14828d55e52f5ff6107", "filename": "libjava/java/awt/EventQueue.java", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FEventQueue.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FEventQueue.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FEventQueue.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -151,6 +151,8 @@ public synchronized AWTEvent peekEvent(int id)\n    * Posts a new event to the queue.\n    *\n    * @param event The event to post to the queue.\n+   *\n+   * @exception NullPointerException If event is null.\n    */\n   public synchronized void postEvent(AWTEvent evt)\n   {\n@@ -209,7 +211,19 @@ public synchronized void postEvent(AWTEvent evt)\n     notify();\n   }\n \n-  /** @since JDK1.2 */\n+  /**\n+   * Causes runnable to have its run method called in the dispatch thread of the\n+   * EventQueue. This will happen after all pending events are processed. The\n+   * call blocks until this has happened. This method will throw an Error if\n+   * called from the event dispatcher thread.\n+   *\n+   * @exception InterruptedException If another thread has interrupted\n+   * this thread.\n+   * @exception InvocationTargetException If an exception is thrown when running\n+   * runnable.\n+   *\n+   * @since 1.2\n+   */\n   public static void invokeAndWait(Runnable runnable)\n     throws InterruptedException, InvocationTargetException\n   {\n@@ -254,6 +268,8 @@ public static boolean isDispatchThread()\n     * All pending events are transferred to the new queue. Calls to postEvent,\n     * getNextEvent, and peekEvent are forwarded to the pushed queue until it\n     * is removed with a pop().\n+    *\n+    * @exception NullPointerException if newEventQueue is null.\n     */\n   public synchronized void push(EventQueue newEventQueue)\n   {\n@@ -271,7 +287,11 @@ public synchronized void push(EventQueue newEventQueue)\n   }\n \n   /** Transfer any pending events from this queue back to the parent queue that\n-    * was previously push()ed. Event dispatch from this queue is suspended. */\n+    * was previously push()ed. Event dispatch from this queue is suspended.\n+    *\n+    * @exception EmptyStackException If no previous push was made on this\n+    * EventQueue.\n+    */\n   protected void pop() throws EmptyStackException\n   {\n     if (prev == null)\n@@ -297,6 +317,12 @@ protected void pop() throws EmptyStackException\n       }\n   }\n \n+  /**\n+   * Dispatches an event. The manner in which the event is dispatched depends\n+   * upon the type of the event and the type of the event's source object.\n+   *\n+   * @exception NullPointerException If event is null.\n+   */\n   protected void dispatchEvent(AWTEvent evt)\n   {\n     if (evt instanceof ActiveEvent)"}, {"sha": "764424c82c339ea875612ba27732942251ee71e0", "filename": "libjava/java/awt/FileDialog.java", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FFileDialog.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FFileDialog.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFileDialog.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -142,16 +142,15 @@ public class FileDialog extends Dialog implements java.io.Serializable\n   * @param title The title for this dialog.\n   * @param mode The mode of the dialog, either <code>LOAD</code> or\n   * <code>SAVE</code>.\n+  *\n+  * @exception IllegalArgumentException If an illegal file dialog mode\n+  * is supplied.\n   */\n public\n FileDialog(Frame parent, String title, int mode)\n {\n   super(parent, title, true);\n-\n-  if ((mode != LOAD) && (mode != SAVE))\n-    throw new IllegalArgumentException(\"Bad mode: \" + mode);\n-\n-  this.mode = mode;\n+  setMode (mode);\n }\n \n /*************************************************************************/\n@@ -180,6 +179,9 @@ public class FileDialog extends Dialog implements java.io.Serializable\n   * peer is created.\n   *\n   * @param mode The new mode of this file dialog.\n+  *\n+  * @exception IllegalArgumentException If an illegal file dialog mode\n+  * is supplied.\n   */\n public void\n setMode(int mode)"}, {"sha": "ed80936bfcbf4534a224055ec566b5a7b7e0844a", "filename": "libjava/java/awt/Graphics2D.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGraphics2D.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -38,6 +38,7 @@\n \n import java.awt.geom.AffineTransform;\n import java.awt.image.BufferedImage;\n+import java.awt.image.BufferedImageOp;\n import java.awt.image.RenderedImage;\n import java.awt.image.ImageObserver;\n import java.awt.image.renderable.RenderableImage;\n@@ -74,7 +75,7 @@ public abstract boolean drawImage(Image image, AffineTransform xform,\n \t\t\t\t    ImageObserver obs);\n \n   public abstract void drawImage(BufferedImage image,\n-\t\t\t\t BufferedImage op,\n+\t\t\t\t BufferedImageOp op,\n \t\t\t\t int x,\n \t\t\t\t int y);\n "}, {"sha": "b029b2a3cd5a773c3bdb79aab100da5d53de658c", "filename": "libjava/java/awt/Label.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FLabel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FLabel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FLabel.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -99,6 +99,8 @@ public class Label extends Component implements java.io.Serializable\n \n /**\n   * Initializes a new instance of <code>Label</code> with no text.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n Label()\n@@ -113,6 +115,8 @@ public class Label extends Component implements java.io.Serializable\n   * text that is aligned to the left.\n   *\n   * @param text The text of the label.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n Label(String text)\n@@ -130,12 +134,17 @@ public class Label extends Component implements java.io.Serializable\n   * @param alignment The desired alignment for the text in this label,\n   * which must be one of <code>LEFT</code>, <code>CENTER</code>, or\n   * <code>RIGHT</code>.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n Label(String text, int alignment)\n {\n   setAlignment (alignment);\n   setText (text);\n+\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "326101b76e56601cbd2c849ebac92a0d6ea50a5c", "filename": "libjava/java/awt/Menu.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenu.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -95,6 +95,8 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n /**\n   * Initializes a new instance of <code>Menu</code> with no label and that\n   * is not a tearoff;\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n Menu()\n@@ -108,6 +110,8 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n   * that has the specified label.\n   *\n   * @param label The menu label.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n Menu(String label)\n@@ -124,6 +128,8 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n   * @param label The label for this menu\n   * @param isTearOff <code>true</code> if this menu is a tear off menu,\n   * <code>false</code> otherwise.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n Menu(String label, boolean isTearOff)\n@@ -134,6 +140,9 @@ public class Menu extends MenuItem implements MenuContainer, Serializable\n \n   if (label.equals(\"Help\"))\n     isHelpMenu = true;\n+\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "b9ddef9aa1b0653be2be2f29523eb60a358e631e", "filename": "libjava/java/awt/MenuBar.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FMenuBar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FMenuBar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuBar.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -86,10 +86,14 @@ public class MenuBar extends MenuComponent\n \n /**\n   * Initializes a new instance of <code>MenuBar</code>.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n MenuBar()\n {\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "548aa77937a1383e83823d399559152df5389a71", "filename": "libjava/java/awt/MenuComponent.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FMenuComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FMenuComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuComponent.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -92,10 +92,14 @@ public abstract class MenuComponent implements java.io.Serializable\n \n /**\n   * Default constructor for subclasses.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n protected\n MenuComponent()\n {\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "d0f1980472b8ed55949df1dd260591ba0111bbc8", "filename": "libjava/java/awt/PopupMenu.java", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FPopupMenu.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FPopupMenu.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FPopupMenu.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -65,6 +65,9 @@ public class PopupMenu extends Menu implements java.io.Serializable\n \n /**\n   * Initializes a new instance of <code>PopupMenu</code>.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true.\n   */\n public\n PopupMenu()\n@@ -78,11 +81,17 @@ public class PopupMenu extends Menu implements java.io.Serializable\n   * label.\n   *\n   * @param label The label for this popup menu.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless()\n+  * returns true.\n   */\n public\n PopupMenu(String label)\n {\n   super(label);\n+\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "0c9354b28870acd2ee5b884d519eecfc36404a7f", "filename": "libjava/java/awt/ScrollPane.java", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FScrollPane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FScrollPane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollPane.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -113,6 +113,8 @@ public class ScrollPane extends Container implements java.io.Serializable\n /**\n   * Initializes a new instance of <code>ScrollPane</code> with a default\n   * scrollbar policy of <code>SCROLLBARS_AS_NEEDED</code>.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n ScrollPane()\n@@ -128,10 +130,15 @@ public class ScrollPane extends Container implements java.io.Serializable\n   *\n   * @param scrollbarDisplayPolicy When to display scrollbars, which must\n   * be one of the constants defined in this class.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n   */\n public\n ScrollPane(int scrollbarDisplayPolicy)\n {\n+  if (GraphicsEnvironment.isHeadless ())\n+    throw new HeadlessException ();\n+\n   this.scrollbarDisplayPolicy = scrollbarDisplayPolicy;\n \n   if (scrollbarDisplayPolicy != SCROLLBARS_ALWAYS"}, {"sha": "db4a3fcd2dcddca925f4cea81d2ad5510234f1f8", "filename": "libjava/java/awt/Scrollbar.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FScrollbar.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FScrollbar.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FScrollbar.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -1,5 +1,5 @@\n /* Scrollbar.java -- AWT Scrollbar widget\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,7 +40,6 @@\n \n import java.awt.peer.ScrollbarPeer;\n import java.awt.peer.ComponentPeer;\n-\n import java.awt.event.AdjustmentListener;\n import java.awt.event.AdjustmentEvent;\n \n@@ -126,7 +125,9 @@ public class Scrollbar extends Component implements Adjustable,\n \n /**\n   * Initializes a new instance of <code>Scrollbar</code> with a\n-  * veritical orientation and default values for all other parameters.\n+  * vertical orientation and default values for all other parameters.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n Scrollbar()\n@@ -145,6 +146,7 @@ public class Scrollbar extends Component implements Adjustable,\n   *\n   * @param orientation The orientation of this scrollbar.\n   *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   * @exception IllegalArgumentException If the orientation value is not valid.\n   */\n public\n@@ -168,12 +170,16 @@ public class Scrollbar extends Component implements Adjustable,\n   * @param minimum The minimum value of the scrollbar.\n   * @param maximum The maximum value of the scrollbar.\n   *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   * @exception IllegalArgumentException If the orientation value is not valid.\n   */\n public \n Scrollbar(int orientation, int value, int visibleAmount, int minimum, \n           int maximum) throws IllegalArgumentException\n {\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n+\n   if ((orientation != HORIZONTAL) && (orientation != VERTICAL))\n     throw new IllegalArgumentException(\"Bad orientation value: \"\n \t\t\t\t       + orientation);"}, {"sha": "f164add49a1eec490163aaed7bf66a8a4e19ae40", "filename": "libjava/java/awt/TextArea.java", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FTextArea.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FTextArea.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextArea.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -109,6 +109,8 @@ public class TextArea extends TextComponent implements java.io.Serializable\n   * Initialize a new instance of <code>TextArea</code> that is empty\n   * and is one row and one column.  Both horizontal and vertical\n   * scrollbars will be used.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextArea()\n@@ -124,6 +126,8 @@ public class TextArea extends TextComponent implements java.io.Serializable\n   * scrollbars will be used.\n   *\n   * @param text The text to display in this text area.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextArea(String text)\n@@ -140,6 +144,8 @@ public class TextArea extends TextComponent implements java.io.Serializable\n   *\n   * @param rows The number of rows in this text area.\n   * @param columns The number of columns in this text area.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextArea(int rows, int columns)\n@@ -156,6 +162,8 @@ public class TextArea extends TextComponent implements java.io.Serializable\n   * @param text The text to display in this text area.\n   * @param rows The number of rows in this text area.\n   * @param columns The number of columns in this text area.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextArea(String text, int rows, int columns)\n@@ -174,12 +182,17 @@ public class TextArea extends TextComponent implements java.io.Serializable\n   * @param rows The number of rows in this text area.\n   * @param columns The number of columns in this text area.\n   * @param scrollbarVisibility Which scrollbars to display.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextArea(String text, int rows, int columns, int scrollbarVisibility)\n {\n   super(text);\n \n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n+\n   if ((rows < 1) || (columns < 0))\n     throw new IllegalArgumentException(\"Bad row or column value\");\n "}, {"sha": "0106d77e3ad75cb8bb0c1bd169b972c8df90fd4c", "filename": "libjava/java/awt/TextField.java", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FTextField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2FTextField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextField.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -84,9 +84,11 @@ public class TextField extends TextComponent implements java.io.Serializable\n  * Constructors\n  */\n \n-/*\n+/**\n  * Initializes a new instance of <code>TextField</code> that is empty\n  * and has one column.\n+ *\n+ * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n  */\n public\n TextField()\n@@ -102,6 +104,8 @@ public class TextField extends TextComponent implements java.io.Serializable\n   * length of the text string.\n   *\n   * @param text The text to display in the field.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextField(String text)\n@@ -116,6 +120,8 @@ public class TextField extends TextComponent implements java.io.Serializable\n   * and has the specified number of columns.\n   *\n   * @param columns The number of columns in the text field.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextField(int columns)\n@@ -131,12 +137,17 @@ public class TextField extends TextComponent implements java.io.Serializable\n   *\n   * @param text The text to display in the field.\n   * @param columns The number of columns in the field.\n+  *\n+  * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true,\n   */\n public\n TextField(String text, int columns)\n {\n   super(text);\n   this.columns = columns;\n+\n+  if (GraphicsEnvironment.isHeadless())\n+    throw new HeadlessException ();\n }\n \n /*************************************************************************/"}, {"sha": "a0948ef27eba093da7c2e9bb3a5ed3105e5dc361", "filename": "libjava/java/awt/color/CMMException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FCMMException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FCMMException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FCMMException.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -44,7 +44,7 @@\n   * @author Eric Blake <ebb9@email.byu.edu>\n   * @status updated to 1.4\n   */\n-public class CMMException extends Exception\n+public class CMMException extends RuntimeException\n {\n   /**\n    * Compatible with JDK 1.2+."}, {"sha": "9be70cb38a9650d2be68d5f9b21837c25205302d", "filename": "libjava/java/awt/color/ColorSpace.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FColorSpace.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FColorSpace.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FColorSpace.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -46,7 +46,7 @@\n  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n  * @since 1.2\n  */\n-public abstract class ColorSpace\n+public abstract class ColorSpace implements Serializable\n {\n   /**\n    * Compatible with JDK 1.2+."}, {"sha": "eb534ebffca0aa9e41b0a937568e2126adb54f70", "filename": "libjava/java/awt/color/ICC_Profile.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FICC_Profile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FICC_Profile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FICC_Profile.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -245,7 +245,7 @@ public void write(String filename) throws IOException\n     write(new FileOutputStream(filename));\n   }\n \n-  public void write(OutputStream out)\n+  public void write(OutputStream out) throws IOException\n   {\n     throw new Error(\"not implemented\");\n   }"}, {"sha": "89f47a207e1ee0a883fabfa1d9f9562f130caf25", "filename": "libjava/java/awt/color/ProfileDataException.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FProfileDataException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fcolor%2FProfileDataException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fcolor%2FProfileDataException.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -45,7 +45,7 @@\n   * @author Eric Blake <ebb9@email.byu.edu>\n   * @status updated to 1.4\n   */\n-public class ProfileDataException extends Exception\n+public class ProfileDataException extends RuntimeException\n {\n   /**\n    * Compatible with JDK 1.2+."}, {"sha": "93bba7c1a3da1b56e6b9fcb62d862942e75b99ef", "filename": "libjava/java/awt/datatransfer/Clipboard.java", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboard.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboard.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboard.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -103,6 +103,8 @@\n   * Returns the contents of the clipboard.\n   *\n   * @param requestor The object requesting the contents.\n+  *\n+  * @exception IllegalStateException If the clipboard is currently unavailable\n   */\n public synchronized Transferable\n getContents(Object requestor)\n@@ -120,6 +122,8 @@\n   *\n   * @param contents The new clipboard contents.\n   * @param owner The new clipboard owner\n+  *\n+  * @exception IllegalStateException If the clipboard is currently unavailable\n   */\n public synchronized void\n setContents(Transferable contents, ClipboardOwner owner)"}, {"sha": "e1500a7926cc4646c943b03798c26791a4d772ed", "filename": "libjava/java/awt/datatransfer/DataFlavor.java", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FDataFlavor.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -281,6 +281,7 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   *\n   * @exception IllegalArgumentException If the representation class\n   * specified cannot be loaded.\n+  * @exception ClassNotFoundException If the class is not loaded.\n   */\n public\n DataFlavor(String mimeType, String humanPresentableName, \n@@ -504,6 +505,8 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   *\n   * @return <code>true</code> if the MIME type is equal to this object's\n   * MIME type, <code>false</code> otherwise.\n+  *\n+  * @exception NullPointerException If mimeType is null.\n   */\n public final boolean\n isMimeTypeEqual(String mimeType)\n@@ -652,6 +655,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   * Returns a copy of this object.\n   *\n   * @return A copy of this object.\n+  *\n+  * @exception CloneNotSupportedException If the object's class does not support\n+  * the Cloneable interface. Subclasses that override the clone method can also\n+  * throw this exception to indicate that an instance cannot be cloned.\n   */\n public Object\n clone()\n@@ -813,6 +820,8 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   * Serialize this class.\n   *\n   * @param stream The <code>ObjectOutput</code> stream to serialize to.\n+  *\n+  * @exception IOException If an error occurs.\n   */\n public void\n writeExternal(ObjectOutput stream) throws IOException\n@@ -826,6 +835,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   * De-serialize this class.\n   *\n   * @param stream The <code>ObjectInput</code> stream to deserialize from.\n+  *\n+  * @exception IOException If an error ocurs.\n+  * @exception ClassNotFoundException If the class for an object being restored\n+  * cannot be found.\n   */\n public void\n readExternal(ObjectInput stream) throws IOException, ClassNotFoundException\n@@ -950,6 +963,10 @@ public class DataFlavor implements java.io.Externalizable, Cloneable\n   *\n   * @param transferable The <code>Transferable</code> for which a text\n   *                     <code>Reader</code> is requested.\n+  *\n+  * @exception IllegalArgumentException If the representation class is not one\n+  * of the seven listed above or the Transferable has null data.\n+  * @exception NullPointerException If the Transferable is null.\n   * @exception UnsupportedFlavorException when the transferable doesn't\n   * support this <code>DataFlavor</code>. Or if the representable class\n   * isn't a (subclass of) <code>Reader</code>, <code>String</code>,"}, {"sha": "a392615063159ae4af27097988837038239d59cd", "filename": "libjava/java/awt/datatransfer/FlavorMap.java", "status": "modified", "additions": 29, "deletions": 36, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FFlavorMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FFlavorMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FFlavorMap.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -41,42 +41,35 @@\n import java.util.Map;\n \n /**\n-  * This interface maps between native platform type names and DataFlavors.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This interface maps between native platform type names and DataFlavors.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public interface FlavorMap\n {\n+  /**\n+   * Maps the specified <code>DataFlavor</code> objects to the native\n+   * data type name.  The returned <code>Map</code> has keys that are\n+   * the data flavors and values that are strings.  The returned map\n+   * may be modified.  This can be useful for implementing nested mappings.\n+   *\n+   * @param flavors An array of data flavors to map\n+   *                or null for all data flavors.\n+   *\n+   * @return A <code>Map</code> of native data types.\n+   */\n+  public abstract Map getNativesForFlavors (DataFlavor[] flavors);\n \n-/**\n-  * Maps the specified <code>DataFlavor</code> objects to the native\n-  * data type name.  The returned <code>Map</code> has keys that are\n-  * the data flavors and values that are strings.  The returned map\n-  * may be modified.  This can be useful for implementing nested mappings.\n-  *\n-  * @param flavors An array of data flavors to map\n-  *                or null for all data flavors.\n-  *\n-  * @return A <code>Map</code> of native data types.\n-  */\n-public abstract Map\n-getNativesForFlavors(DataFlavor[] flavors);\n-\n-/*************************************************************************/\n-\n-/**\n-  * Maps the specified native type names to <code>DataFlavor</code>'s.\n-  * The returned <code>Map</code> has keys that are strings and values\n-  * that are <code>DataFlavor</code>'s.  The returned map may be\n-  * modified.  This can be useful for implementing nested mappings.\n-  *\n-  * @param natives An array of native types to map\n-  *                or null for all native types.\n-  *\n-  * @return A <code>Map</code> of data flavors.\n-  */\n-public abstract Map\n-getFlavorsForNatives(String[] natives);\n-\n-} // interface FlavorMap\n-\n+  /**\n+   * Maps the specified native type names to <code>DataFlavor</code>'s.\n+   * The returned <code>Map</code> has keys that are strings and values\n+   * that are <code>DataFlavor</code>'s.  The returned map may be\n+   * modified.  This can be useful for implementing nested mappings.\n+   *\n+   * @param natives An array of native types to map\n+   *                or null for all native types.\n+   *\n+   * @return A <code>Map</code> of data flavors.\n+   */\n+  public abstract Map getFlavorsForNatives (String[] natives);\n+}"}, {"sha": "7d914120e8f3112e7b9c2d5ee6320a57d53b3427", "filename": "libjava/java/awt/datatransfer/SystemFlavorMap.java", "status": "modified", "additions": 115, "deletions": 126, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FSystemFlavorMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdatatransfer%2FSystemFlavorMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FSystemFlavorMap.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -40,141 +40,130 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.List;\n \n /**\n   * This class maps between native platform type names and DataFlavors.\n   *\n   * XXX - The current implementation does no mapping at all.\n   *\n   * @author Mark Wielaard (mark@klomp.org)\n-  */\n-public final class SystemFlavorMap implements FlavorMap\n-{\n-\n-/**\n-  * The default (instance) flavor map.\n-  */\n-private static FlavorMap defaultFlavorMap;\n-\n-/**\n-  * Private constructor.\n-  */\n-private SystemFlavorMap()\n-{\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Maps the specified <code>DataFlavor</code> objects to the native\n-  * data type name.  The returned <code>Map</code> has keys that are\n-  * the data flavors and values that are strings.  The returned map\n-  * may be modified.  This can be useful for implementing nested mappings.\n-  *\n-  * @param flavors An array of data flavors to map\n-  *                or null for all data flavors.\n   *\n-  * @return A <code>Map</code> of native data types to data flavors.\n-  */\n-public Map\n-getNativesForFlavors(DataFlavor[] flavors)\n-{\n-  return(new HashMap());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Maps the specified native type names to <code>DataFlavor</code>'s.\n-  * The returned <code>Map</code> has keys that are strings and values\n-  * that are <code>DataFlavor</code>'s.  The returned map may be\n-  * modified.  This can be useful for implementing nested mappings.\n-  *\n-  * @param natives An array of native types to map\n-  *                or null for all native types.\n-  *\n-  * @return A <code>Map</code> of data flavors to native type names.\n-  */\n-public Map\n-getFlavorsForNatives(String[] natives)\n-{\n-  return(new HashMap());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the default (instance) (System)FlavorMap.\n-  */\n-public static FlavorMap\n-getDefaultFlavorMap()\n-{\n-  if (defaultFlavorMap == null)\n-    defaultFlavorMap = new SystemFlavorMap();\n-\n-  return(defaultFlavorMap);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the native type name for the given java mime type.\n-  */\n-public static String\n-encodeJavaMIMEType(String mime)\n-{\n-  return null;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the native type name for the given data flavor.\n-  */\n-public static String\n-encodeDataFlavor(DataFlavor df)\n-{\n-  return null;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns true if the native type name can be represented as\n-  * a java mime type.\n-  */\n-public static boolean\n-isJavaMIMEType(String name)\n-{\n-  return(false);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the java mime type for the given the native type name.\n+  * @since 1.2\n   */\n-public static String\n-decodeJavaMIMEType(String name)\n+public final class SystemFlavorMap implements FlavorMap, FlavorTable\n {\n-  return null;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the data flavor given the native type name\n-  * or null when no such data flavor exists.\n-  */\n-public static DataFlavor\n-decodeDataFlavor(String name) throws ClassNotFoundException\n-{\n-  String javaMIMEType = decodeJavaMIMEType(name);\n-  if (javaMIMEType != null)\n-    return(new DataFlavor(javaMIMEType));\n-  else\n-    return(null);\n-}\n+  /**\n+   * The default (instance) flavor map.\n+   */\n+  private static FlavorMap defaultFlavorMap;\n+\n+  /**\n+   * Private constructor.\n+   */\n+  private SystemFlavorMap ()\n+  {\n+  }\n+\n+  /**\n+   * Maps the specified <code>DataFlavor</code> objects to the native\n+   * data type name.  The returned <code>Map</code> has keys that are\n+   * the data flavors and values that are strings.  The returned map\n+   * may be modified.  This can be useful for implementing nested mappings.\n+   *\n+   * @param flavors An array of data flavors to map\n+   *                or null for all data flavors.\n+   *\n+   * @return A <code>Map</code> of native data types to data flavors.\n+   */\n+  public Map getNativesForFlavors (DataFlavor[] flavors)\n+  {\n+    return new HashMap();\n+  }\n+\n+  /**\n+   * Maps the specified native type names to <code>DataFlavor</code>'s.\n+   * The returned <code>Map</code> has keys that are strings and values\n+   * that are <code>DataFlavor</code>'s.  The returned map may be\n+   * modified.  This can be useful for implementing nested mappings.\n+   *\n+   * @param natives An array of native types to map\n+   *                or null for all native types.\n+   *\n+   * @return A <code>Map</code> of data flavors to native type names.\n+   */\n+  public Map getFlavorsForNatives (String[] natives)\n+  { \n+    return new HashMap();\n+  }\n+\n+  /**\n+   * Returns the default (instance) (System)FlavorMap.\n+   */\n+  public static FlavorMap getDefaultFlavorMap ()\n+  {\n+    if (defaultFlavorMap == null)\n+      defaultFlavorMap = new SystemFlavorMap ();\n+\n+    return defaultFlavorMap;\n+  }\n+\n+  /**\n+   * Returns the native type name for the given java mime type.\n+   */\n+  public static String encodeJavaMIMEType (String mime)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the native type name for the given data flavor.\n+   */\n+  public static String encodeDataFlavor (DataFlavor df)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns true if the native type name can be represented as\n+   * a java mime type.\n+   */\n+  public static boolean isJavaMIMEType (String name)\n+  {\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the java mime type for the given the native type name.\n+   */\n+  public static String decodeJavaMIMEType (String name)\n+  {\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the data flavor given the native type name\n+   * or null when no such data flavor exists.\n+   */\n+  public static DataFlavor decodeDataFlavor (String name)\n+    throws ClassNotFoundException\n+  {\n+    String javaMIMEType = decodeJavaMIMEType (name);\n+    \n+    if (javaMIMEType != null)\n+      return new DataFlavor (javaMIMEType);\n+    else\n+      return null;\n+  }\n+\n+  public List getFlavorsForNative (String nat)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n+\n+  public List getNativesForFlavor (DataFlavor flav)\n+  {\n+    throw new Error (\"Not implemented\");\n+  }\n \n } // class SystemFlavorMap\n-"}, {"sha": "3d268820ba715c9584a5f2f1685ff6186bb6d254", "filename": "libjava/java/awt/dnd/DragGestureEvent.java", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDragGestureEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDragGestureEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragGestureEvent.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -113,15 +113,42 @@ public InputEvent getTriggerEvent()\n   {\n     return null;\n   }\n+\n+  /**\n+   * Starts the drag given the initial Cursor to display, the Transferable\n+   * object, and the DragSourceListener to use.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(Cursor dragCursor, Transferable trans)\n   {\n     startDrag(dragCursor, null, null, trans, null);\n   }\n+\n+  /**\n+   * Starts the drag given the initial Cursor to display, the Transferable\n+   * object, and the DragSourceListener to use.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(Cursor dragCursor, Transferable trans,\n                         DragSourceListener l)\n   {\n     startDrag(dragCursor, null, null, trans, l);\n   }\n+\n+  /**\n+   * Starts the drag given the initial Cursor to display, the Transferable\n+   * object, and the DragSourceListener to use.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(Cursor dragCursor, Image dragImage, Point imageOffset,\n                         Transferable trans, DragSourceListener l)\n   {"}, {"sha": "cd204b6fe93c1619dc9902f201587022d266dffe", "filename": "libjava/java/awt/dnd/DragGestureRecognizer.java", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDragGestureRecognizer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDragGestureRecognizer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragGestureRecognizer.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -130,6 +130,12 @@ public void resetRecognizer()\n     throw new Error(\"not implemented\");\n   }\n \n+  /**\n+   * Register a new DragGestureListener.\n+   *\n+   * @exception TooManyListenersException If a DragGestureListener has already\n+   * been added.\n+   */\n   public void addDragGestureListener(DragGestureListener dgl)\n     throws TooManyListenersException\n   {"}, {"sha": "740235ac83c07233f7effa03ee6e67e3b31c5dee", "filename": "libjava/java/awt/dnd/DragSource.java", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDragSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDragSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDragSource.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -40,6 +40,8 @@\n \n import java.awt.Component;\n import java.awt.Cursor;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.HeadlessException;\n import java.awt.Image;\n import java.awt.Point;\n import java.awt.datatransfer.FlavorMap;\n@@ -62,10 +64,20 @@ public class DragSource implements Serializable\n   public static final Cursor DefaultMoveNoDrop = null;\n   public static final Cursor DefaultLinkNoDrop = null;\n \n+  /**\n+   * Initializes the drag source.\n+   *\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   */\n   public DragSource()\n   {\n+    if (GraphicsEnvironment.isHeadless())\n+      throw new HeadlessException ();\n   }\n \n+  /**\n+   * @exception HeadlessException If GraphicsEnvironment.isHeadless() is true.\n+   */\n   public static DragSource getDefaultDragSource()\n   {\n     return null;\n@@ -76,33 +88,67 @@ public static boolean isDragImageSupported()\n     return false;\n   }\n \n+  /**\n+   * Start a drag, given the DragGestureEvent that initiated the drag.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(DragGestureEvent trigger, Cursor dragCursor,\n                         Image dragImage, Point imageOffset,\n                         Transferable trans, DragSourceListener dsl,\n                         FlavorMap map)\n   {\n   }\n \n+  /**\n+   * Start a drag, given the DragGestureEvent that initiated the drag.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(DragGestureEvent trigger, Cursor dragCursor,\n                         Transferable trans, DragSourceListener dsl,\n                         FlavorMap map)\n   {\n     startDrag(trigger, dragCursor, null, null, trans, dsl, map);\n   }\n \n+  /**\n+   * Start a drag, given the DragGestureEvent that initiated the drag.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(DragGestureEvent trigger, Cursor dragCursor,\n                         Image dragImage, Point imageOffset,\n                         Transferable trans, DragSourceListener dsl)\n   {\n     startDrag(trigger, dragCursor, dragImage, imageOffset, trans, dsl, null);\n   }\n \n+  /**\n+   * Start a drag, given the DragGestureEvent that initiated the drag.\n+   *\n+   * @exception InvalidDnDOperationException If the Drag and Drop system is\n+   * unable to initiate a drag operation, or if the user attempts to start\n+   * a drag while an existing drag operation is still executing.\n+   */\n   public void startDrag(DragGestureEvent trigger, Cursor dragCursor,\n                         Transferable trans, DragSourceListener dsl)\n   {\n     startDrag(trigger, dragCursor, null, null, trans, dsl, null);\n   }\n \n+  /**\n+   * Creates the DragSourceContext to handle this drag.\n+   *\n+   * @exception IllegalArgumentException FIXME\n+   * @exception NullPointerException If dscp, dgl, dragImage or t is null.\n+   */\n   protected DragSourceContext\n     createDragSourceContext(DragSourceContextPeer peer, DragGestureEvent dge,\n                             Cursor cursor, Image image, Point offset,"}, {"sha": "53c09178d32e69e67c3890917d0ea70ce057fcf7", "filename": "libjava/java/awt/dnd/DropTarget.java", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FDropTarget.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -42,10 +42,13 @@\n import java.awt.datatransfer.FlavorMap;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n+import java.io.Serializable;\n+import java.util.EventListener;\n import java.util.TooManyListenersException;\n \n /** STUB CLASS ONLY */\n public class DropTarget\n+  implements DropTargetListener, EventListener, Serializable\n {\n   protected static class DropTargetAutoScroller\n     implements ActionListener\n@@ -67,6 +70,9 @@ public void actionPerformed (ActionEvent e)\n     }\n   }\n   \n+  // FIXME: check the correctness of default value.\n+  private boolean isActive = false;\n+    \n   /**\n    * FIXME\n    *\n@@ -133,11 +139,12 @@ public int getDefaultActions ()\n \n   public void setActive(boolean isActive)\n   {\n+    this.isActive = isActive;\n   }\n \n   public boolean isActive()\n   {\n-    return false;\n+    return this.isActive;\n   }\n \n   /**"}, {"sha": "6e40d5165b8c2e1411da942eab3bd2f8fa505c67", "filename": "libjava/java/awt/event/WindowEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FWindowEvent.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -109,7 +109,7 @@ public class WindowEvent extends ComponentEvent\n   public static final int WINDOW_STATE_CHANGED = 209;\n \n   /** This is the last id in the range of event ids used by this class. */\n-  public static final int WINDOW_LAST = 207;\n+  public static final int WINDOW_LAST = 209;\n \n   /**\n    * The other Window involved in a focus or activation change. For"}, {"sha": "c23eb351306d4e039d2ecef501999b13ad65e272", "filename": "libjava/java/awt/geom/PathIterator.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FPathIterator.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -84,7 +84,7 @@\n    * (P1), and final interpolated control point (P2):\n    * <pre>\n    *  P(t) = B(2,0)*CP + B(2,1)*P1 + B(2,2)*P2\n-   *    0 <= t <= 1\n+   *    0 &lt;= t &lt;= 1\n    *  B(n,m) = mth coefficient of nth degree Bernstein polynomial\n    *         = C(n,m) * t^(m) * (1 - t)^(n-m)\n    *  C(n,m) = Combinations of n things, taken m at a time\n@@ -100,7 +100,7 @@\n    * (P2), and final interpolated control point (P3):\n    * <pre>\n    *  P(t) = B(3,0)*CP + B(3,1)*P1 + B(3,2)*P2 + B(3,3)*P3\n-   *    0 <= t <= 1\n+   *    0 &lt;= t &lt;= 1\n    *  B(n,m) = mth coefficient of nth degree Bernstein polynomial\n    *         = C(n,m) * t^(m) * (1 - t)^(n-m)\n    *  C(n,m) = Combinations of n things, taken m at a time"}, {"sha": "2946d259b917b05159a951efd8352b9d67cad30d", "filename": "libjava/java/awt/im/InputMethodHighlight.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fim%2FInputMethodHighlight.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fawt%2Fim%2FInputMethodHighlight.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fim%2FInputMethodHighlight.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -178,7 +178,7 @@ public int getVariation()\n    * @return the style map\n    * @since 1.3\n    */\n-  public Map getSytle()\n+  public Map getStyle()\n   {\n     return style;\n   }"}, {"sha": "68b656b1925d59fb1765d6841ce5967e7bff7f8d", "filename": "libjava/java/io/PipedOutputStream.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fio%2FPipedOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fio%2FPipedOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedOutputStream.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -97,7 +97,7 @@ public PipedOutputStream(PipedInputStream sink) throws IOException\n     */\n   public void connect(PipedInputStream sink) throws IOException\n   {\n-    if (sink != null)\n+    if (this.sink != null || sink.source != null)\n       throw new IOException (\"Already connected\");\n     sink.connect(this);\n   }"}, {"sha": "0ab3c0b8e1218a4a893c414f1630faefb75b9db3", "filename": "libjava/java/io/PipedWriter.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fio%2FPipedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Fio%2FPipedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedWriter.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -100,7 +100,7 @@ public PipedWriter(PipedReader sink) throws IOException\n     */\n   public void connect(PipedReader sink) throws IOException\n   {\n-    if (sink != null)\n+    if (this.sink != null || sink.source != null)\n       throw new IOException (\"Already connected\");\n     sink.connect(this);\n   }"}, {"sha": "057ca0fd402dab748027a1c1b164928955516b3b", "filename": "libjava/java/rmi/server/RMIClassLoader.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoader.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -172,7 +172,7 @@ public static Class loadClass(String codebases, String name)\n \t  }\n       }\n \n-    return loader != null ? loader.loadClass(name) : Class.forName(name);\n+    return loader.loadClass(name);\n   }\n   \n   public static String getClassAnnotation(Class cl)"}, {"sha": "2dbb3849c272d364f20d76e4b1c0763d059754e1", "filename": "libjava/java/rmi/server/RMIClassLoaderSpi.java", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoaderSpi.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62d2eed656d2b664b21f128afbdc27720fb3939f/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoaderSpi.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRMIClassLoaderSpi.java?ref=62d2eed656d2b664b21f128afbdc27720fb3939f", "patch": "@@ -0,0 +1,64 @@\n+/* RMIClassLoaderSpi.java\n+  Copyright (c) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.rmi.server;\n+\n+import java.net.MalformedURLException;\n+\n+/**\n+ * @author Michael Koch\n+ * @since 1.4\n+ */\n+public abstract class RMIClassLoaderSpi\n+{\n+  public RMIClassLoaderSpi()\n+  {\n+  }\n+\n+  public abstract Class loadClass (String codeBase, String name,\n+                                   ClassLoader defaultLoader)\n+    throws MalformedURLException, ClassNotFoundException;\n+\n+  public abstract Class loadProxyClass (String codeBase, String[] interfaces,\n+                                        ClassLoader defaultLoader)\n+    throws MalformedURLException, ClassNotFoundException;\n+\n+  public abstract ClassLoader getClassLoader (String codebase)\n+    throws MalformedURLException;\n+\n+  public abstract String getClassAnnotation (Class cl);\n+}"}]}