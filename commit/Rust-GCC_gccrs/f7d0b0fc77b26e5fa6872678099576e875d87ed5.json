{"sha": "f7d0b0fc77b26e5fa6872678099576e875d87ed5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkMGIwZmM3N2IyNmU1ZmE2ODcyNjc4MDk5NTc2ZTg3NWQ4N2VkNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:24:32Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:24:32Z"}, "message": "rtl.h (find_all_hard_regs): Declare.\n\ngcc/\n\t* rtl.h (find_all_hard_regs): Declare.\n\t* rtlanal.c (find_all_hard_regs): New function.\n\t(record_hard_reg_uses_1): Delete.\n\t(record_hard_reg_uses): Use find_all_hard_regs.\n\nFrom-SVN: r214656", "tree": {"sha": "555e45a78d43f197773ed4453483ae4c68e82730", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/555e45a78d43f197773ed4453483ae4c68e82730"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7d0b0fc77b26e5fa6872678099576e875d87ed5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d0b0fc77b26e5fa6872678099576e875d87ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d0b0fc77b26e5fa6872678099576e875d87ed5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d0b0fc77b26e5fa6872678099576e875d87ed5/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2b7026c2e31369f7b1d63f4ba3b71cefed64268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2b7026c2e31369f7b1d63f4ba3b71cefed64268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2b7026c2e31369f7b1d63f4ba3b71cefed64268"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "e77f39b93b129919da98a0e1055e843378cfc777", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d0b0fc77b26e5fa6872678099576e875d87ed5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d0b0fc77b26e5fa6872678099576e875d87ed5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7d0b0fc77b26e5fa6872678099576e875d87ed5", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* rtl.h (find_all_hard_regs): Declare.\n+\t* rtlanal.c (find_all_hard_regs): New function.\n+\t(record_hard_reg_uses_1): Delete.\n+\t(record_hard_reg_uses): Use find_all_hard_regs.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtl.h (replace_label_data): Delete."}, {"sha": "087706054c2f6e36615565409b54cd9ba7979d3f", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d0b0fc77b26e5fa6872678099576e875d87ed5/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d0b0fc77b26e5fa6872678099576e875d87ed5/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f7d0b0fc77b26e5fa6872678099576e875d87ed5", "patch": "@@ -2757,6 +2757,7 @@ extern const_rtx set_of (const_rtx, const_rtx);\n extern void record_hard_reg_sets (rtx, const_rtx, void *);\n extern void record_hard_reg_uses (rtx *, void *);\n #ifdef HARD_CONST\n+extern void find_all_hard_regs (const_rtx, HARD_REG_SET *);\n extern void find_all_hard_reg_sets (const_rtx, HARD_REG_SET *, bool);\n #endif\n extern void note_stores (const_rtx, void (*) (rtx, const_rtx, void *), void *);"}, {"sha": "86491669c3803ba82a0cdd640ba743ccc2c055f1", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7d0b0fc77b26e5fa6872678099576e875d87ed5/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7d0b0fc77b26e5fa6872678099576e875d87ed5/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=f7d0b0fc77b26e5fa6872678099576e875d87ed5", "patch": "@@ -1122,6 +1122,19 @@ set_of (const_rtx pat, const_rtx insn)\n   return data.found;\n }\n \n+/* Add all hard register in X to *PSET.  */\n+void\n+find_all_hard_regs (const_rtx x, HARD_REG_SET *pset)\n+{\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, x, NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      if (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER)\n+\tadd_to_hard_reg_set (pset, GET_MODE (x), REGNO (x));\n+    }\n+}\n+\n /* This function, called through note_stores, collects sets and\n    clobbers of hard registers in a HARD_REG_SET, which is pointed to\n    by DATA.  */\n@@ -1155,27 +1168,11 @@ find_all_hard_reg_sets (const_rtx insn, HARD_REG_SET *pset, bool implicit)\n       record_hard_reg_sets (XEXP (link, 0), NULL, pset);\n }\n \n-/* A for_each_rtx subroutine of record_hard_reg_uses.  */\n-static int\n-record_hard_reg_uses_1 (rtx *px, void *data)\n-{\n-  rtx x = *px;\n-  HARD_REG_SET *pused = (HARD_REG_SET *)data;\n-\n-  if (REG_P (x) && REGNO (x) < FIRST_PSEUDO_REGISTER)\n-    {\n-      int nregs = hard_regno_nregs[REGNO (x)][GET_MODE (x)];\n-      while (nregs-- > 0)\n-\tSET_HARD_REG_BIT (*pused, REGNO (x) + nregs);\n-    }\n-  return 0;\n-}\n-\n /* Like record_hard_reg_sets, but called through note_uses.  */\n void\n record_hard_reg_uses (rtx *px, void *data)\n {\n-  for_each_rtx (px, record_hard_reg_uses_1, data);\n+  find_all_hard_regs (*px, (HARD_REG_SET *) data);\n }\n \f\n /* Given an INSN, return a SET expression if this insn has only a single SET."}]}