{"sha": "fddc7f0080f1f056c4d145451608ebd3e807422a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRkYzdmMDA4MGYxZjA1NmM0ZDE0NTQ1MTYwOGViZDNlODA3NDIyYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-25T11:31:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-25T14:01:17Z"}, "message": "middle-end/97579 - lower VECTOR_BOOLEAN_TYPE_P VEC_COND_EXPRs\n\nThis makes sure to lower VECTOR_BOOLEAN_TYPE_P typed non-vector\nmode VEC_COND_EXPRs so we don't try to use vcond to expand those.\nThat's required for x86 and gcn integer mode boolean vectors.\n\n2020-11-25  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/97579\n\t* gimple-isel.cc (gimple_expand_vec_cond_expr): Lower\n\tVECTOR_BOOLEAN_TYPE_P, non-vector mode VEC_COND_EXPRs.\n\n\t* gcc.dg/pr97579.c: New testcase.", "tree": {"sha": "ec1d66cbd69f5cdf2be7469896ab06dc6206e76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec1d66cbd69f5cdf2be7469896ab06dc6206e76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fddc7f0080f1f056c4d145451608ebd3e807422a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddc7f0080f1f056c4d145451608ebd3e807422a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fddc7f0080f1f056c4d145451608ebd3e807422a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fddc7f0080f1f056c4d145451608ebd3e807422a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52ce50d6c59c31454eacf47d6ac70eb3262d08d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ce50d6c59c31454eacf47d6ac70eb3262d08d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ce50d6c59c31454eacf47d6ac70eb3262d08d2"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "83281c0cbf9c8724118af8d8071be317e45fec8e", "filename": "gcc/gimple-isel.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fddc7f0080f1f056c4d145451608ebd3e807422a/gcc%2Fgimple-isel.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fddc7f0080f1f056c4d145451608ebd3e807422a/gcc%2Fgimple-isel.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-isel.cc?ref=fddc7f0080f1f056c4d145451608ebd3e807422a", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-dce.h\"\n #include \"memmodel.h\"\n #include \"optabs.h\"\n+#include \"gimple-fold.h\"\n \n /* Expand all ARRAY_REF(VIEW_CONVERT_EXPR) gimple assignments into calls to\n    internal function based on vector type of selected expansion.\n@@ -134,6 +135,25 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n   lhs = gimple_assign_lhs (stmt);\n   machine_mode mode = TYPE_MODE (TREE_TYPE (lhs));\n \n+  /* Lower mask typed, non-vector mode VEC_COND_EXPRs to bitwise operations.\n+     Those can end up generated by folding and at least for integer mode masks\n+     we cannot expect vcond expanders to exist.  We lower a ? b : c\n+     to (b & a) | (c & ~a).  */\n+  if (!VECTOR_MODE_P (mode))\n+    {\n+      gcc_assert (VECTOR_BOOLEAN_TYPE_P (TREE_TYPE (lhs))\n+\t\t  && types_compatible_p (TREE_TYPE (op0), TREE_TYPE (op1)));\n+      gimple_seq stmts = NULL;\n+      tree type = TREE_TYPE (lhs);\n+      location_t loc = gimple_location (stmt);\n+      tree tem0 = gimple_build (&stmts, loc, BIT_AND_EXPR, type, op1, op0);\n+      tree tem1 = gimple_build (&stmts, loc, BIT_NOT_EXPR, type, op0);\n+      tree tem2 = gimple_build (&stmts, loc, BIT_AND_EXPR, type, op2, tem1);\n+      tree tem3 = gimple_build (&stmts, loc, BIT_IOR_EXPR, type, tem0, tem2);\n+      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+      return gimple_build_assign (lhs, tem3);\n+    }\n+\n   gcc_assert (!COMPARISON_CLASS_P (op0));\n   if (TREE_CODE (op0) == SSA_NAME)\n     {\n@@ -198,7 +218,6 @@ gimple_expand_vec_cond_expr (gimple_stmt_iterator *gsi,\n   cmp_op_mode = TYPE_MODE (TREE_TYPE (op0a));\n   unsignedp = TYPE_UNSIGNED (TREE_TYPE (op0a));\n \n-\n   gcc_assert (known_eq (GET_MODE_NUNITS (mode),\n \t\t\tGET_MODE_NUNITS (cmp_op_mode)));\n \n@@ -246,7 +265,6 @@ gimple_expand_vec_exprs (void)\n \t{\n \t  gimple *g = gimple_expand_vec_cond_expr (&gsi,\n \t\t\t\t\t\t   &vec_cond_ssa_name_uses);\n-\n \t  if (g != NULL)\n \t    {\n \t      tree lhs = gimple_assign_lhs (gsi_stmt (gsi));"}, {"sha": "5cd5427a528c4dea5583ea872969405fed541d2a", "filename": "gcc/testsuite/gcc.dg/pr97579.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fddc7f0080f1f056c4d145451608ebd3e807422a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97579.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fddc7f0080f1f056c4d145451608ebd3e807422a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97579.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97579.c?ref=fddc7f0080f1f056c4d145451608ebd3e807422a", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 --param=max-unswitch-insns=1024\" } */\n+/* { dg-additional-options \"-mavx512vl\" { target x86_64-*-* i?86-*-* } } */\n+\n+int bad_odd_rows_0_0, rows_bad_row1, rows_bad_group_okay, calc_rows_row2;\n+\n+int\n+rows_bad() {\n+  int i, in_zeroes;\n+  char block;\n+  i = 0;\n+  for (; i < 5; i++)\n+    if (rows_bad_row1 & i)\n+      in_zeroes = 0;\n+    else {\n+      if (!in_zeroes)\n+        in_zeroes = 1;\n+      if (block & 1)\n+        rows_bad_group_okay = 1;\n+    }\n+  if (in_zeroes)\n+    return rows_bad_group_okay;\n+}\n+\n+void\n+calc_rows() {\n+  for (; calc_rows_row2; calc_rows_row2++) {\n+    rows_bad();\n+    bad_odd_rows_0_0 = rows_bad();\n+  }\n+}"}]}