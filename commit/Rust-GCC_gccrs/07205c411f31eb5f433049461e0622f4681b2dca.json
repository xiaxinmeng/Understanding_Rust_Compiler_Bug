{"sha": "07205c411f31eb5f433049461e0622f4681b2dca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcyMDVjNDExZjMxZWI1ZjQzMzA0OTQ2MWUwNjIyZjQ2ODFiMmRjYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-06-01T08:20:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-06-01T08:20:08Z"}, "message": "re PR ipa/85960 (-fipa-pta and ifunc are incompatible)\n\n2018-06-01  Richard Biener  <rguenther@suse.de>\n\n\tPR ipa/85960\n\t* tree-ssa-structalias.c (get_function_part_constraint):\n\tHandle NULL fi->decl.\n\t(find_func_aliases_for_call): Properly handle indirect\n\tfi from direct call.\n\t(find_func_clobbers): Likewise.\n\t(ipa_pta_execute): Likewise.\n\t(create_variable_info_for): For functions that are ifunc_resolver\n\tresolve to a varinfo that contains the result of the resolver\n\tcall.\n\t(associate_varinfo_to_alias): Do not treat ifunc resolvers as\n\taliases.\n\n\t* gcc.dg/ipa/ipa-pta-19.c: New testcase.\n\nFrom-SVN: r261056", "tree": {"sha": "51ae135e51d581c61a17e43bc72335528fd014a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51ae135e51d581c61a17e43bc72335528fd014a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07205c411f31eb5f433049461e0622f4681b2dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07205c411f31eb5f433049461e0622f4681b2dca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07205c411f31eb5f433049461e0622f4681b2dca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07205c411f31eb5f433049461e0622f4681b2dca/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eeb59c16f849534b6cf03566151225c7b7fb92cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb59c16f849534b6cf03566151225c7b7fb92cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb59c16f849534b6cf03566151225c7b7fb92cd"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "7adafede7ec77c82a18f592371595a0390a975a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07205c411f31eb5f433049461e0622f4681b2dca", "patch": "@@ -1,3 +1,18 @@\n+2018-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/85960\n+\t* tree-ssa-structalias.c (get_function_part_constraint):\n+\tHandle NULL fi->decl.\n+\t(find_func_aliases_for_call): Properly handle indirect\n+\tfi from direct call.\n+\t(find_func_clobbers): Likewise.\n+\t(ipa_pta_execute): Likewise.\n+\t(create_variable_info_for): For functions that are ifunc_resolver\n+\tresolve to a varinfo that contains the result of the resolver\n+\tcall.\n+\t(associate_varinfo_to_alias): Do not treat ifunc resolvers as\n+\taliases.\n+\n 2018-05-31  Michael Collison  <michael.collison@arm.com>\n \n \t* config/aarch64/aarch64.md:"}, {"sha": "cec80a5d238744fb72cc184095151614ec7db422", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07205c411f31eb5f433049461e0622f4681b2dca", "patch": "@@ -1,3 +1,8 @@\n+2018-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR ipa/85960\n+\t* gcc.dg/ipa/ipa-pta-19.c: New testcase.\n+\n 2018-05-31  Qing Zhao <qing.zhao@oracle.com>\n \n \tPR middle-end/78809"}, {"sha": "ae47cb053b2d9c594323d8f1c785e985a588ef47", "filename": "gcc/testsuite/gcc.dg/ipa/ipa-pta-19.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fipa-pta-19.c?ref=07205c411f31eb5f433049461e0622f4681b2dca", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-require-ifunc \"\" } */\n+/* { dg-options \"-O2 -fipa-pta\" } */\n+\n+#include <stdlib.h>\n+#include <stdbool.h>\n+\n+#define hot __attribute__((hot))\n+\n+static hot void multiver_default(unsigned int in, bool *ret)\n+{\n+\tif ( in & 1 ) {\n+\t\t*ret = false;\n+\t}else{\n+\t\t*ret = true;\n+\t}\n+}\n+\n+static void (*resolve_multiver(void))(unsigned int in, bool *out)\n+{\n+\treturn &multiver_default;\n+}\n+\n+__attribute__ ((ifunc(\"resolve_multiver\")))\n+static void multiver_test(unsigned int val, bool *ret);\n+\n+static hot bool do_test(unsigned int val)\n+{\n+\tbool ret = false;\n+\n+\tmultiver_test(val, &ret);\n+\n+\treturn (ret == !(val & 0x1));\n+}\n+\n+volatile unsigned int x = 2;\n+int main()\n+{\n+  int i;\n+  for(i = 1; i < x; i++) {\n+      unsigned int val = x;\n+      if ( !do_test(val) )\n+\tabort ();\n+  }\n+  return 0;\n+}"}, {"sha": "73e500bb616ca7d9de7b9d316023ee37d6ddcc23", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07205c411f31eb5f433049461e0622f4681b2dca/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=07205c411f31eb5f433049461e0622f4681b2dca", "patch": "@@ -3903,7 +3903,7 @@ get_function_part_constraint (varinfo_t fi, unsigned part)\n       c.offset = 0;\n       c.type = SCALAR;\n     }\n-  else if (TREE_CODE (fi->decl) == FUNCTION_DECL)\n+  else if (fi->decl && TREE_CODE (fi->decl) == FUNCTION_DECL)\n     {\n       varinfo_t ai = first_vi_for_offset (fi, part);\n       if (ai)\n@@ -4735,7 +4735,7 @@ find_func_aliases_for_call (struct function *fn, gcall *t)\n \n   fi = get_fi_for_callee (t);\n   if (!in_ipa_mode\n-      || (fndecl && !fi->is_fn_info))\n+      || (fi->decl && fndecl && !fi->is_fn_info))\n     {\n       auto_vec<ce_s, 16> rhsc;\n       int flags = gimple_call_flags (t);\n@@ -5352,7 +5352,7 @@ find_func_clobbers (struct function *fn, gimple *origt)\n \n       /* For callees without function info (that's external functions),\n \t ESCAPED is clobbered and used.  */\n-      if (gimple_call_fndecl (t)\n+      if (cfi->decl\n \t  && !cfi->is_fn_info)\n \t{\n \t  varinfo_t vi;\n@@ -6115,6 +6115,27 @@ create_variable_info_for_1 (tree decl, const char *name, bool add_id,\n static unsigned int\n create_variable_info_for (tree decl, const char *name, bool add_id)\n {\n+  /* First see if we are dealing with an ifunc resolver call and\n+     assiociate that with a call to the resolver function result.  */\n+  cgraph_node *node;\n+  if (in_ipa_mode\n+      && TREE_CODE (decl) == FUNCTION_DECL\n+      && (node = cgraph_node::get (decl))->ifunc_resolver)\n+    {\n+      varinfo_t fi = get_vi_for_tree (node->get_alias_target ()->decl);\n+      constraint_expr rhs\n+\t= get_function_part_constraint (fi, fi_result);\n+      fi = new_var_info (NULL_TREE, \"ifuncres\", true);\n+      fi->is_reg_var = true;\n+      constraint_expr lhs;\n+      lhs.type = SCALAR;\n+      lhs.var = fi->id;\n+      lhs.offset = 0;\n+      process_constraint (new_constraint (lhs, rhs));\n+      insert_vi_for_tree (decl, fi);\n+      return fi->id;\n+    }\n+\n   varinfo_t vi = create_variable_info_for_1 (decl, name, add_id, false, NULL);\n   unsigned int id = vi->id;\n \n@@ -7715,7 +7736,8 @@ associate_varinfo_to_alias (struct cgraph_node *node, void *data)\n   if ((node->alias\n        || (node->thunk.thunk_p\n \t   && ! node->global.inlined_to))\n-      && node->analyzed)\n+      && node->analyzed\n+      && !node->ifunc_resolver)\n     insert_vi_for_tree (node->decl, (varinfo_t)data);\n   return false;\n }\n@@ -8087,7 +8109,7 @@ ipa_pta_execute (void)\n \t\t         (node->decl, first_vi_for_offset (fi, fi_uses));\n \t\t}\n \t      /* Handle direct calls to external functions.  */\n-\t      else if (decl)\n+\t      else if (decl && (!fi || fi->decl))\n \t\t{\n \t\t  pt = gimple_call_use_set (stmt);\n \t\t  if (gimple_call_flags (stmt) & ECF_CONST)\n@@ -8132,8 +8154,7 @@ ipa_pta_execute (void)\n \t\t    }\n \t\t}\n \t      /* Handle indirect calls.  */\n-\t      else if (!decl\n-\t\t       && (fi = get_fi_for_callee (stmt)))\n+\t      else if ((fi = get_fi_for_callee (stmt)))\n \t\t{\n \t\t  /* We need to accumulate all clobbers/uses of all possible\n \t\t     callees.  */\n@@ -8189,6 +8210,8 @@ ipa_pta_execute (void)\n \t\t\t}\n \t\t    }\n \t\t}\n+\t      else\n+\t\tgcc_unreachable ();\n \t    }\n \t}\n "}]}