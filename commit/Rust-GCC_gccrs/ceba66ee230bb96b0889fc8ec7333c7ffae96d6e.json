{"sha": "ceba66ee230bb96b0889fc8ec7333c7ffae96d6e", "node_id": "C_kwDOANBUbNoAKGNlYmE2NmVlMjMwYmI5NmIwODg5ZmM4ZWM3MzMzYzdmZmFlOTZkNmU", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-17T22:03:08Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-11-18T17:02:06Z"}, "message": "Fix PR middle-end/107705: ICE after reclaration error\n\nThe problem here is after we created a call expression\nin the C front-end, we replace the decl type with\nan error mark node. We then end up calling\naggregate_value_p with the call expression\nwith the decl with the error mark as the type\nand we ICE.\n\nThe fix is to check the function type\nafter we process the call expression inside\naggregate_value_p to get it.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\tPR middle-end/107705\n\t* function.cc (aggregate_value_p): Return 0 if\n\tthe function type was an error operand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/redecl-22.c: New test.", "tree": {"sha": "d9f7a19aa200879a242e3909c99f060ce7567bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f7a19aa200879a242e3909c99f060ce7567bf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0c9d9e706adaeea0d96152daade0a6819a8715", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0c9d9e706adaeea0d96152daade0a6819a8715", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0c9d9e706adaeea0d96152daade0a6819a8715"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "9c8773bbc5903225167f6a36f0a2660d89a5f192", "filename": "gcc/function.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e/gcc%2Ffunction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e/gcc%2Ffunction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.cc?ref=ceba66ee230bb96b0889fc8ec7333c7ffae96d6e", "patch": "@@ -2090,6 +2090,9 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n   if (VOID_TYPE_P (type))\n     return 0;\n \n+  if (error_operand_p (fntype))\n+    return 0;\n+\n   /* If a record should be passed the same as its first (and only) member\n      don't pass it as an aggregate.  */\n   if (TREE_CODE (type) == RECORD_TYPE && TYPE_TRANSPARENT_AGGR (type))"}, {"sha": "7758570fabe8c1e11dccbbe45b7c10f4052c8cb1", "filename": "gcc/testsuite/gcc.dg/redecl-22.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceba66ee230bb96b0889fc8ec7333c7ffae96d6e/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-22.c?ref=ceba66ee230bb96b0889fc8ec7333c7ffae96d6e", "patch": "@@ -0,0 +1,9 @@\n+/* We used to ICE in the gimplifier, PR 107705 */\n+/* { dg-do compile } */\n+/* { dg-options \"-w\" } */\n+int f (void)\n+{\n+  int (*p) (void) = 0; // { dg-note \"\" }\n+  return p ();\n+  int p = 1; // { dg-error \"\" }\n+}"}]}