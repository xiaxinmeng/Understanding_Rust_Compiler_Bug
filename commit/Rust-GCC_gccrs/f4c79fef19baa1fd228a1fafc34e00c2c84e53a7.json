{"sha": "f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRjNzlmZWYxOWJhYTFmZDIyOGExZmFmYzM0ZTAwYzJjODRlNTNhNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@haight.redhat.com", "date": "2000-12-05T22:03:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-05T22:03:19Z"}, "message": "acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Check for lldiv_t.\n\n\n2000-12-05  Benjamin Kosnik  <bkoz@haight.redhat.com>\n\n\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Check for\n\tlldiv_t. Allow the use of os-specific defines while checking for\n\tlong-long functions by the inclusion of os_defines.h.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Add comments.\n\t* configure: Regenerate.\n\t* acconfig.h: Add _GLIBCPP_HAVE_LLDIV_T.\n\t* config.h.in: Regenerate.\n\t* config/os/gnu-linux/bits/os_defines.h: Fix typos and\n\tduplications in comments.\n\nFrom-SVN: r38051", "tree": {"sha": "4759977a5940d27af5299321d58b338adb9eb2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4759977a5940d27af5299321d58b338adb9eb2b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/comments", "author": null, "committer": null, "parents": [{"sha": "06a3a6db4927eae52a4d3641a0ac551f13303f40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06a3a6db4927eae52a4d3641a0ac551f13303f40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06a3a6db4927eae52a4d3641a0ac551f13303f40"}], "stats": {"total": 2255, "additions": 1142, "deletions": 1113}, "files": [{"sha": "920ec08821f0059627f899a8846eec63bf356166", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -1,3 +1,16 @@\n+2000-12-05  Benjamin Kosnik  <bkoz@haight.redhat.com>\n+\n+\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_LONG): Check for\n+\tlldiv_t. Allow the use of os-specific defines while checking for\n+\tlong-long functions by the inclusion of os_defines.h.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Add comments.\n+\t* configure: Regenerate.\n+\t* acconfig.h: Add _GLIBCPP_HAVE_LLDIV_T.\n+\t* config.h.in: Regenerate.\n+\t* config/os/gnu-linux/bits/os_defines.h: Fix typos and\n+\tduplications in comments.\n+\n 2000-12-05  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/os/freebsd/bits/ctype_base.h: Update comments about other"}, {"sha": "d073a73c20fb761c9ba96277ff361e2dde4620d6", "filename": "libstdc++-v3/acconfig.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facconfig.h?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -12,6 +12,9 @@\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n \n+// Define if lldiv_t exists in stdlib.h.\n+#undef _GLIBCPP_HAVE_LLDIV_T\n+\n // Define if the host has a type mbstate_t defined in\n // wchar.h, as required by 21.1.3.1. Some systems, namely\n // hppa-hp-hpux10.20 do not meet this requirement, and must be worked"}, {"sha": "e658f571742abbbd7a57afa639dc5026ceeefe6f", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -276,7 +276,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   AC_REQUIRE([AC_PROG_LD])\n \n   # Set --gc-sections.\n-  if test \"$ac_cv_prog_gnu_ld\" = \"broken\"; then\n+  if test \"$ac_cv_prog_gnu_ld\" = \"notbroken\"; then\n     # GNU ld it is!  Joy and bunny rabbits!\n \n     # All these tests are for C++; save the language and the compiler flags.\n@@ -1440,21 +1440,44 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+ \n+  # Allow use of os-dependent settings, so that macros that turn on\n+  # C99 capabilities can be defined and used in a consistent way.\n+  OS_INC_PATH=${srcdir}/$os_include_dir\n+  ac_test_CFLAGS=\"${CFLAGS+set}\"\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-I$OS_INC_PATH\"\n \n-  # Check for the existance of functions used if long long is enabled.\n+  # Check for the existence of functions used if long long is enabled.\n   AC_CHECK_FUNC(strtoll,,ac_strtoll=no)\n   AC_CHECK_FUNC(strtoull,,ac_strtoull=no)\n \n+  # Check for lldiv_t, et. al.\n+  AC_MSG_CHECKING([for lldiv_t declaration])\n+  AC_CACHE_VAL(glibcpp_lldiv_t_use, [\n+  AC_TRY_COMPILE([#include <bits/os_defines.h>\n+\t\t  #include <stdlib.h>], \n+                   [ lldiv_t mydivt;], \n+                   [glibcpp_lldiv_t_use=yes], [glibcpp_lldiv_t_use=no])\n+  ])\n+  AC_MSG_RESULT($glibcpp_lldiv_t_use)\n+  if test x$glibcpp_lldiv_t_use = x\"yes\"; then\n+    AC_DEFINE(_GLIBCPP_HAVE_LLDIV_T)\n+  fi\n+\n   AC_MSG_CHECKING([for enabled long long])\n   if test x\"$ac_strtoll\" = xno || test x\"$ac_strtoull\" = xno; then \n     enable_long_long=no; \n   fi; \n   AC_MSG_RESULT($enable_long_long)\n \n-  dnl Option parsed, now set things appropriately\n+  # Option parsed, now set things appropriately\n   if test x\"$enable_long_long\" = xyes; then\n     AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n   fi\n+\t\n+  # Reset CFLAGS\n+  CFLAGS=\"$ac_save_CFLAGS\"\n ])\n \n "}, {"sha": "52467ca25115fc766ffc6c8b7be61a7aaf284418", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 28, "deletions": 21, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -288,7 +288,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n   AC_REQUIRE([AC_PROG_LD])\n \n   # Set --gc-sections.\n-  if test \"$ac_cv_prog_gnu_ld\" = \"broken\"; then\n+  if test \"$ac_cv_prog_gnu_ld\" = \"notbroken\"; then\n     # GNU ld it is!  Joy and bunny rabbits!\n \n     # All these tests are for C++; save the language and the compiler flags.\n@@ -829,7 +829,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n     ctype_bsd=yes, ctype_bsd=no)\n     AC_MSG_RESULT($ctype_bsd)\n     if test $ctype_bsd = \"yes\"; then\n-      ctype_include_dir=\"config/os/freebsd\"\n+      ctype_include_dir=\"config/os/bsd\"\n       ctype_default=no\n     fi\n     fi\n@@ -845,23 +845,7 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n     ctype_freebsd34=yes, ctype_freebsd34=no)\n     AC_MSG_RESULT($ctype_freebsd34)\n     if test $ctype_freebsd34 = \"yes\"; then\n-      ctype_include_dir=\"config/os/freebsd\"\n-      ctype_default=no\n-    fi\n-    fi\n-\n-    dnl Test for <ctype> functionality -- NetBSD\n-    if test $ctype_default = \"yes\"; then\n-    AC_MSG_CHECKING([<ctype> for NetBSD])\n-    AC_TRY_COMPILE([#include <ctype.h>],\n-    [int\n-    foo (int a)\n-    { return _S + _C + _U + _L \\\n-      + _N + _P + _X + _tolower_tab_[a] + _toupper_tab_[a];}], \\\n-    ctype_netbsd=yes, ctype_netbsd=no)\n-    AC_MSG_RESULT($ctype_netbsd)\n-    if test $ctype_netbsd = \"yes\"; then\n-      ctype_include_dir=\"config/os/netbsd\"\n+      ctype_include_dir=\"config/os/bsd\"\n       ctype_default=no\n     fi\n     fi\n@@ -1468,21 +1452,44 @@ AC_DEFUN(GLIBCPP_ENABLE_LONG_LONG, [dnl\n    *)   AC_MSG_ERROR([Unknown argument to enable/disable long long]) ;;\n    esac],\n   enable_long_long=GLIBCPP_ENABLE_LONG_LONG_DEFAULT)dnl\n+ \n+  # Allow use of os-dependent settings, so that macros that turn on\n+  # C99 capabilities can be defined and used in a consistent way.\n+  OS_INC_PATH=${srcdir}/$os_include_dir\n+  ac_test_CFLAGS=\"${CFLAGS+set}\"\n+  ac_save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-I$OS_INC_PATH\"\n \n-  # Check for the existance of functions used if long long is enabled.\n+  # Check for the existence of functions used if long long is enabled.\n   AC_CHECK_FUNC(strtoll,,ac_strtoll=no)\n   AC_CHECK_FUNC(strtoull,,ac_strtoull=no)\n \n+  # Check for lldiv_t, et. al.\n+  AC_MSG_CHECKING([for lldiv_t declaration])\n+  AC_CACHE_VAL(glibcpp_lldiv_t_use, [\n+  AC_TRY_COMPILE([#include <bits/os_defines.h>\n+\t\t  #include <stdlib.h>], \n+                   [ lldiv_t mydivt;], \n+                   [glibcpp_lldiv_t_use=yes], [glibcpp_lldiv_t_use=no])\n+  ])\n+  AC_MSG_RESULT($glibcpp_lldiv_t_use)\n+  if test x$glibcpp_lldiv_t_use = x\"yes\"; then\n+    AC_DEFINE(_GLIBCPP_HAVE_LLDIV_T)\n+  fi\n+\n   AC_MSG_CHECKING([for enabled long long])\n   if test x\"$ac_strtoll\" = xno || test x\"$ac_strtoull\" = xno; then \n     enable_long_long=no; \n   fi; \n   AC_MSG_RESULT($enable_long_long)\n \n-  dnl Option parsed, now set things appropriately\n+  # Option parsed, now set things appropriately\n   if test x\"$enable_long_long\" = xyes; then\n     AC_DEFINE(_GLIBCPP_USE_LONG_LONG)\n   fi\n+\t\n+  # Reset CFLAGS\n+  CFLAGS=\"$ac_save_CFLAGS\"\n ])\n \n "}, {"sha": "2f796109ca8861b5bf150946035acee5ac6df7d6", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -12,6 +12,9 @@\n // Include support for shadow headers, ie --enable-cshadow-headers.\n #undef _GLIBCPP_USE_SHADOW_HEADERS\n \n+// Define if lldiv_t exists in stdlib.h.\n+#undef _GLIBCPP_HAVE_LLDIV_T\n+\n // Define if the host has a type mbstate_t defined in\n // wchar.h, as required by 21.1.3.1. Some systems, namely\n // hppa-hp-hpux10.20 do not meet this requirement, and must be worked\n@@ -282,24 +285,6 @@\n /* Define if you have the atanl function.  */\n #undef HAVE_ATANL\n \n-/* Define if you have the c_log function.  */\n-#undef HAVE_C_LOG\n-\n-/* Define if you have the c_logf function.  */\n-#undef HAVE_C_LOGF\n-\n-/* Define if you have the c_logl function.  */\n-#undef HAVE_C_LOGL\n-\n-/* Define if you have the carg function.  */\n-#undef HAVE_CARG\n-\n-/* Define if you have the cargf function.  */\n-#undef HAVE_CARGF\n-\n-/* Define if you have the cargl function.  */\n-#undef HAVE_CARGL\n-\n /* Define if you have the ccos function.  */\n #undef HAVE_CCOS\n \n@@ -333,12 +318,6 @@\n /* Define if you have the cexpl function.  */\n #undef HAVE_CEXPL\n \n-/* Define if you have the clog10 function.  */\n-#undef HAVE_CLOG10\n-\n-/* Define if you have the clog10f function.  */\n-#undef HAVE_CLOG10F\n-\n /* Define if you have the clog10l function.  */\n #undef HAVE_CLOG10L\n \n@@ -363,12 +342,6 @@\n /* Define if you have the cosl function.  */\n #undef HAVE_COSL\n \n-/* Define if you have the cpow function.  */\n-#undef HAVE_CPOW\n-\n-/* Define if you have the cpowf function.  */\n-#undef HAVE_CPOWF\n-\n /* Define if you have the cpowl function.  */\n #undef HAVE_CPOWL\n "}, {"sha": "80c66185ae3edb9281bd1274c8b40f74ef0bbc65", "filename": "libstdc++-v3/config/os/gnu-linux/bits/os_defines.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fgnu-linux%2Fbits%2Fos_defines.h?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -31,10 +31,10 @@\n #ifndef _GLIBCPP_OS_DEFINES\n #  define _GLIBCPP_OS_DEFINES\n \n-// By enabling this, all GNU extensions are enabled.\n+// By defining this, all GNU extensions are enabled.\n #define _GNU_SOURCE 1\n \n-// By enabling this, all ISO C99 functionality is enabled.\n+// By defining this, all ISO C99 functionality is enabled.\n #define _ISOC99_SOURCE 1\n \n // This keeps isanum, et al from being propagated as macros."}, {"sha": "6b4f4893775807abbf92c863d9f69f1034544dbd", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1064, "deletions": 1051, "changes": 2115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7"}, {"sha": "1326b6cc1c7324d2a7e48d8aae503f2dc1029d48", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4c79fef19baa1fd228a1fafc34e00c2c84e53a7/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=f4c79fef19baa1fd228a1fafc34e00c2c84e53a7", "patch": "@@ -15,7 +15,10 @@ AC_ARG_WITH(target-subdir,\n AC_ARG_WITH(cross-host,\n [  --with-cross-host=HOST  configuring with a cross compiler])\n \n+# Runs configure.host and configure.target. Have to run this before\n+# the GLIBCPP_ENABLE_* macros below.\n GLIBCPP_CONFIGURE(.)\n+\n AC_LIBTOOL_DLOPEN\n AM_PROG_LIBTOOL\n AC_SUBST(enable_shared)\n@@ -279,9 +282,3 @@ if test ! -f stamp-sanity-warned; then\n   echo \"before proceeding with ${_cv_gnu_make_command}.\"\n   echo \"\"\n fi\n-\n-\n-\n-\n-\n-"}]}