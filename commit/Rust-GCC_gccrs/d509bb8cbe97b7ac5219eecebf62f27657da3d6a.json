{"sha": "d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwOWJiOGNiZTk3YjdhYzUyMTllZWNlYmY2MmYyNzY1N2RhM2Q2YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-05-15T13:46:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-05-15T13:46:29Z"}, "message": "call.c (perform_overload_resolution, [...]): Use OVL_P; remove redundant TEMPLATE_DECL checks.\n\n2019-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* call.c (perform_overload_resolution, build_new_method_call_1):\n\tUse OVL_P; remove redundant TEMPLATE_DECL checks.\n\t* decl.c (grokfndecl): Likewise.\n\t* mangle.c (write_expression): Likewise.\n\t* parser.c (cp_parser_template_id): Likewise.\n\t* pt.c (resolve_overloaded_unification, type_dependent_expression_p):\n\tLikewise.\n\t* search.c (build_baselink): Likewise.\n\t* tree.c (is_overloaded_fn, dependent_name, maybe_get_fns): Likewise.\n\nFrom-SVN: r271211", "tree": {"sha": "6975921c524cf588fe37a23689801d1c1ac46206", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6975921c524cf588fe37a23689801d1c1ac46206"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/comments", "author": null, "committer": null, "parents": [{"sha": "86e3947eea1619c83ac45c77ba4b3156d729c81f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e3947eea1619c83ac45c77ba4b3156d729c81f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e3947eea1619c83ac45c77ba4b3156d729c81f"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "5888ce6b82cec6f890e388614767843b7b65dd37", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -1,3 +1,15 @@\n+2019-05-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* call.c (perform_overload_resolution, build_new_method_call_1):\n+\tUse OVL_P; remove redundant TEMPLATE_DECL checks.\n+\t* decl.c (grokfndecl): Likewise.\n+\t* mangle.c (write_expression): Likewise.\n+\t* parser.c (cp_parser_template_id): Likewise.\n+\t* pt.c (resolve_overloaded_unification, type_dependent_expression_p):\n+\tLikewise.\n+\t* search.c (build_baselink): Likewise.\n+\t* tree.c (is_overloaded_fn, dependent_name, maybe_get_fns): Likewise.\n+\n 2019-05-14  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR preprocessor/90382"}, {"sha": "0a5147a1a2f4eef574fc90e98d34c4f9ede32cc7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -4383,10 +4383,7 @@ perform_overload_resolution (tree fn,\n   *any_viable_p = true;\n \n   /* Check FN.  */\n-  gcc_assert (TREE_CODE (fn) == FUNCTION_DECL\n-\t      || TREE_CODE (fn) == TEMPLATE_DECL\n-\t      || TREE_CODE (fn) == OVERLOAD\n-\t      || TREE_CODE (fn) == TEMPLATE_ID_EXPR);\n+  gcc_assert (OVL_P (fn) || TREE_CODE (fn) == TEMPLATE_ID_EXPR);\n \n   if (TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n     {\n@@ -9605,9 +9602,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n       fns = TREE_OPERAND (fns, 0);\n       template_only = 1;\n     }\n-  gcc_assert (TREE_CODE (fns) == FUNCTION_DECL\n-\t      || TREE_CODE (fns) == TEMPLATE_DECL\n-\t      || TREE_CODE (fns) == OVERLOAD);\n+  gcc_assert (OVL_P (fns));\n   fn = OVL_FIRST (fns);\n   name = DECL_NAME (fn);\n "}, {"sha": "6918c3bb79deeebd2142dee0a987d331e6bc04b3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -8918,9 +8918,7 @@ grokfndecl (tree ctype,\n \t     the information in the TEMPLATE_ID_EXPR.  */\n \t  SET_DECL_IMPLICIT_INSTANTIATION (decl);\n \n-\t  gcc_assert (identifier_p (fns)\n-\t\t      || TREE_CODE (fns) == OVERLOAD\n-\t\t      || TREE_CODE (fns) == FUNCTION_DECL);\n+\t  gcc_assert (identifier_p (fns) || OVL_P (fns));\n \t  DECL_TEMPLATE_INFO (decl) = build_template_info (fns, args);\n \n \t  for (t = TYPE_ARG_TYPES (TREE_TYPE (decl)); t; t = TREE_CHAIN (t))"}, {"sha": "acb81d16b5359cdbe7e20a2c2977b33a93cf75ec", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -3278,8 +3278,7 @@ write_expression (tree expr)\n \n \t    /* Mangle a dependent name as the name, not whatever happens to\n \t       be the first function in the overload set.  */\n-\t    if ((TREE_CODE (fn) == FUNCTION_DECL\n-\t\t || TREE_CODE (fn) == OVERLOAD)\n+\t    if (OVL_P (fn)\n \t\t&& type_dependent_expression_p_push (expr))\n \t      fn = OVL_NAME (fn);\n "}, {"sha": "ab3e672d3286e25d3d7ef12adb6fd9c8dd4eaea6", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -16479,10 +16479,7 @@ cp_parser_template_id (cp_parser *parser,\n     {\n       /* If it's not a class-template or a template-template, it should be\n \t a function-template.  */\n-      gcc_assert ((DECL_FUNCTION_TEMPLATE_P (templ)\n-\t\t   || TREE_CODE (templ) == OVERLOAD\n-\t\t   || TREE_CODE (templ) == FUNCTION_DECL\n-\t\t   || BASELINK_P (templ)));\n+      gcc_assert (OVL_P (templ) || BASELINK_P (templ));\n \n       template_id = lookup_template_function (templ, arguments);\n       if (TREE_CODE (template_id) == TEMPLATE_ID_EXPR)"}, {"sha": "edb0701760a9977ff76849429151905e92723cd7", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -21193,8 +21193,7 @@ resolve_overloaded_unification (tree tparms,\n       if (good != 1)\n \tgood = ok;\n     }\n-  else if (TREE_CODE (arg) != OVERLOAD\n-\t   && TREE_CODE (arg) != FUNCTION_DECL)\n+  else if (!OVL_P (arg))\n     /* If ARG is, for example, \"(0, &f)\" then its type will be unknown\n        -- but the deduction does not succeed because the expression is\n        not just the function on its own.  */\n@@ -25950,8 +25949,7 @@ type_dependent_expression_p (tree expression)\n \t    return true;\n \t}\n \n-      gcc_assert (TREE_CODE (expression) == OVERLOAD\n-\t\t  || TREE_CODE (expression) == FUNCTION_DECL);\n+      gcc_assert (OVL_P (expression));\n \n       for (lkp_iterator iter (expression); iter; ++iter)\n \tif (type_dependent_expression_p (*iter))"}, {"sha": "dac08d44d764c01d5d582a815884fc8f36e9d554", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -1058,10 +1058,7 @@ build_baselink (tree binfo, tree access_binfo, tree functions, tree optype)\n {\n   tree baselink;\n \n-  gcc_assert (TREE_CODE (functions) == FUNCTION_DECL\n-\t      || TREE_CODE (functions) == TEMPLATE_DECL\n-\t      || TREE_CODE (functions) == TEMPLATE_ID_EXPR\n-\t      || TREE_CODE (functions) == OVERLOAD);\n+  gcc_assert (OVL_P (functions) || TREE_CODE (functions) == TEMPLATE_ID_EXPR);\n   gcc_assert (!optype || TYPE_P (optype));\n   gcc_assert (TREE_TYPE (functions));\n "}, {"sha": "14d6aff1ccf6ca9bb2c91e842ce5963be80f0f55", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d509bb8cbe97b7ac5219eecebf62f27657da3d6a/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d509bb8cbe97b7ac5219eecebf62f27657da3d6a", "patch": "@@ -2381,8 +2381,7 @@ is_overloaded_fn (tree x)\n       || (TREE_CODE (x) == OVERLOAD && !OVL_SINGLE_P (x)))\n     return 2;\n \n-  return (TREE_CODE (x) == FUNCTION_DECL\n-\t  || TREE_CODE (x) == OVERLOAD);\n+  return OVL_P (x);\n }\n \n /* X is the CALL_EXPR_FN of a CALL_EXPR.  If X represents a dependent name\n@@ -2396,7 +2395,7 @@ dependent_name (tree x)\n     return x;\n   if (TREE_CODE (x) == TEMPLATE_ID_EXPR)\n     x = TREE_OPERAND (x, 0);\n-  if (TREE_CODE (x) == OVERLOAD || TREE_CODE (x) == FUNCTION_DECL)\n+  if (OVL_P (x))\n     return OVL_NAME (x);\n   return NULL_TREE;\n }\n@@ -2428,8 +2427,7 @@ maybe_get_fns (tree from)\n   if (TREE_CODE (from) == TEMPLATE_ID_EXPR)\n     from = TREE_OPERAND (from, 0);\n \n-  if (TREE_CODE (from) == OVERLOAD\n-      || TREE_CODE (from) == FUNCTION_DECL)\n+  if (OVL_P (from))\n     return from;\n \n   return NULL;"}]}