{"sha": "672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyYzc2N2JmNmRmYmViYzIyMDYyNDAzZTllOGNmYzBmNmUyOTBhYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-04-10T14:37:09Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-04-10T14:37:09Z"}, "message": "Show pertinent parameter (PR c++/85110)\n\ngcc/cp/ChangeLog:\n\tPR c++/85110\n\t* call.c (get_fndecl_argument_location): Make non-static.\n\t* cp-tree.h (get_fndecl_argument_location): New decl.\n\t* typeck.c (convert_for_assignment): When complaining due to\n\tconversions for an argument, show the location of the parameter\n\twithin the decl.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/85110\n\t* g++.dg/cpp1z/direct-enum-init1.C: Update for the cases\n\twhere we now show the pertinent parameter.\n\t* g++.dg/diagnostic/aka2.C: Likewise.\n\t* g++.dg/diagnostic/param-type-mismatch-2.C: Likewise.\n\nFrom-SVN: r259282", "tree": {"sha": "bfe80d22f2084a40849834bf9d7f8b4f2c99b8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfe80d22f2084a40849834bf9d7f8b4f2c99b8ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f302518627efd04b04a0da3269541fdfa2d7388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f302518627efd04b04a0da3269541fdfa2d7388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f302518627efd04b04a0da3269541fdfa2d7388"}], "stats": {"total": 66, "additions": 52, "deletions": 14}, "files": [{"sha": "b6e7ee481cd564fed3121079e64aa87226e65504", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -1,3 +1,12 @@\n+2018-04-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* call.c (get_fndecl_argument_location): Make non-static.\n+\t* cp-tree.h (get_fndecl_argument_location): New decl.\n+\t* typeck.c (convert_for_assignment): When complaining due to\n+\tconversions for an argument, show the location of the parameter\n+\twithin the decl.\n+\n 2018-04-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85312 - P0962 cleanup"}, {"sha": "9ecb91dc1b59fc6fbcbbce631400224eb240ce9d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -6595,7 +6595,7 @@ maybe_print_user_conv_context (conversion *convs)\n    ARGNUM is zero based, -1 indicates the `this' argument of a method.\n    Return the location of the FNDECL itself if there are problems.  */\n \n-static location_t\n+location_t\n get_fndecl_argument_location (tree fndecl, int argnum)\n {\n   int i;"}, {"sha": "7d3e017453584a47fdde886d93a714cd02b65a3a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -5995,6 +5995,8 @@ extern bool can_convert_arg\t\t\t(tree, tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n extern bool can_convert_arg_bad\t\t\t(tree, tree, tree, int,\n \t\t\t\t\t\t tsubst_flags_t);\n+extern location_t get_fndecl_argument_location  (tree, int);\n+\n \n /* A class for recording information about access failures (e.g. private\n    fields), so that we can potentially supply a fix-it hint about"}, {"sha": "b449b1f7f53998bcf5ad866e6d1d9f84f8f9a4e1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -8785,9 +8785,13 @@ convert_for_assignment (tree type, tree rhs,\n \t\t\t\t\t\t   parmnum, complain, flags);\n \t\t}\n \t      else if (fndecl)\n-\t\terror_at (EXPR_LOC_OR_LOC (rhs, input_location),\n-\t\t\t  \"cannot convert %qH to %qI for argument %qP to %qD\",\n-\t\t\t  rhstype, type, parmnum, fndecl);\n+\t\t{\n+\t\t  error_at (EXPR_LOC_OR_LOC (rhs, input_location),\n+\t\t\t    \"cannot convert %qH to %qI\",\n+\t\t\t    rhstype, type);\n+\t\t  inform (get_fndecl_argument_location (fndecl, parmnum),\n+\t\t\t  \"  initializing argument %P of %qD\", parmnum, fndecl);\n+\t\t}\n \t      else\n \t\tswitch (errtype)\n \t\t  {"}, {"sha": "7bd4b1d4fb41802cb1e178563a4a9b157994b212", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -1,3 +1,11 @@\n+2018-04-10  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* g++.dg/cpp1z/direct-enum-init1.C: Update for the cases\n+\twhere we now show the pertinent parameter.\n+\t* g++.dg/diagnostic/aka2.C: Likewise.\n+\t* g++.dg/diagnostic/param-type-mismatch-2.C: Likewise.\n+\n 2018-04-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/85313"}, {"sha": "fa2934e23719f2da6d77b3aa9fe6b3051a0f043a", "filename": "gcc/testsuite/g++.dg/cpp1z/direct-enum-init1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdirect-enum-init1.C?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -40,7 +40,7 @@ foo ()\n   D *d7 = new D { 9 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target c++14_down } }\n   E *e5 = new E { -4 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n \t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n-  bar ({ 10 });\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' for argument\" }\n+  bar ({ 10 });\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E'\" }\n   bar (E { 9 });\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   V v1 = { { 11 } };\t// { dg-error \"braces around scalar initializer for type 'E'\" }\n   V v2 = { E { 12 } };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n@@ -106,7 +106,7 @@ foo2 ()\n   D *d7 = new D { 9 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target c++14_down } }\n   E *e5 = new E { -4 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n \t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n-  bar ({ 10 });\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' for argument\" }\n+  bar ({ 10 });\t\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E'\" }\n   bar (E { 9 });\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   V v1 = { { 11 } };\t// { dg-error \"braces around scalar initializer for type 'E'\" }\n   V v2 = { E { 12 } };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n@@ -174,7 +174,7 @@ foo3 ()\n   K *d7 = new K { 9 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'D' in initialization\" \"\" { target c++14_down } }\n   L *e5 = new L { -4 };\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' in initialization\" \"\" { target c++14_down } }\n \t\t\t// { dg-error \"narrowing conversion of '-4' from 'int' to 'unsigned char' inside\" \"\" { target c++17 } .-1 }\n-  bar3 ({ 10 });\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E' for argument\" }\n+  bar3 ({ 10 });\t// { dg-error \"cannot convert \\[^\\n\\r]* to 'E'\" }\n   bar3 (E { 9 });\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }\n   M v1 = { { 11 } };\t// { dg-error \"braces around scalar initializer for type 'E'\" }\n   M v2 = { L { 12 } };\t// { dg-error \"cannot convert 'int' to 'E' in initialization\" \"\" { target c++14_down } }"}, {"sha": "d7a3b3522cdff21d7f11bee1dd1d9ccd77242fb9", "filename": "gcc/testsuite/g++.dg/diagnostic/aka2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Faka2.C?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -11,7 +11,7 @@ int foo(t1 *);\n void test_1 () {\n   t2 pos;\n \n-  foo (&pos); // { dg-error \"cannot convert 't2\\\\*' {aka 's2\\\\*'} to 't1\\\\*' {aka 's1\\\\*'} for argument '1' to 'int foo\\\\(t1\\\\*\\\\)'\" }\n+  foo (&pos); // { dg-error \"cannot convert 't2\\\\*' {aka 's2\\\\*'} to 't1\\\\*' {aka 's1\\\\*'}\" }\n }\n \n /* Exercise %T.  */"}, {"sha": "c3b6f003b3e0c3a3d94f983cabf63616fb64cafd", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch-2.C", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672c767bf6dfbebc22062403e9e8cfc0f6e290ac/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C?ref=672c767bf6dfbebc22062403e9e8cfc0f6e290ac", "patch": "@@ -4,44 +4,59 @@\n \n /* decl, with argname.  */\n \n-extern int callee_1 (int one, const char **two, float three);\n+extern int callee_1 (int one, const char **two, float three); // { dg-line callee_1 }\n \n int test_1 (int first, const char *second, float third)\n {\n-  return callee_1 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*' for argument '2' to 'int callee_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" }\n+  return callee_1 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*'\" }\n   /* { dg-begin-multiline-output \"\" }\n    return callee_1 (first, second, third);\n                            ^~~~~~\n      { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_1 (int one, const char **two, float three);\n+                               ~~~~~~~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* decl, without argname.  */\n \n-extern int callee_2 (int, const char **, float);\n+extern int callee_2 (int, const char **, float); // { dg-line callee_2 }\n \n int test_2 (int first, const char *second, float third)\n {\n-  return callee_2 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*' for argument '2' to 'int callee_2\\\\(int, const char\\\\*\\\\*, float\\\\)'\" }\n+  return callee_2 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*'\" }\n   /* { dg-begin-multiline-output \"\" }\n    return callee_2 (first, second, third);\n                            ^~~~~~\n      { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_2\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_2 }\n+  /* { dg-begin-multiline-output \"\" }\n+ extern int callee_2 (int, const char **, float);\n+                           ^~~~~~~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* defn, with argname.  */\n \n-static int callee_3 (int one, const char **two, float three)\n+static int callee_3 (int one, const char **two, float three) // { dg-line callee_3 }\n {\n   return callee_2 (one, two, three);\n }\n \n int test_3 (int first, const char *second, float third)\n {\n-  return callee_3 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*' for argument '2' to 'int callee_3\\\\(int, const char\\\\*\\\\*, float\\\\)'\" }\n+  return callee_3 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*'\" }\n   /* { dg-begin-multiline-output \"\" }\n    return callee_3 (first, second, third);\n                            ^~~~~~\n      { dg-end-multiline-output \"\" } */\n+  // { dg-message \"initializing argument 2 of 'int callee_3\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } callee_3 }\n+  /* { dg-begin-multiline-output \"\" }\n+ static int callee_3 (int one, const char **two, float three)\n+                               ~~~~~~~~~~~~~^~~\n+     { dg-end-multiline-output \"\" } */\n }\n \n /* static member, with argname.  */"}]}