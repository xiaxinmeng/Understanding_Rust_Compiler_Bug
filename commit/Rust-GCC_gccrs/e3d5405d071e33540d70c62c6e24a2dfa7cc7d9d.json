{"sha": "e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkNTQwNWQwNzFlMzM1NDBkNzBjNjJjNmUyNGEyZGZhN2NjN2Q5ZA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2009-09-24T20:44:55Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2009-09-24T20:44:55Z"}, "message": "re PR middle-end/41435 (GCC doesn't fold complex int division)\n\n\tPR middle-end/41435\n\t* fold-const.c (const_binop): Handle complex int division.\n\t* tree-complex.c (expand_complex_div_straight,\n\texpand_complex_div_wide): Update comments.\n\t\ntestsuite:\n\t* gcc.dg/torture/builtin-math-7.c: Test complex int division at\n\tcompile-time.\n\nFrom-SVN: r152145", "tree": {"sha": "942e85ee11d063e393b8d23171086e6c6108a90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/942e85ee11d063e393b8d23171086e6c6108a90e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/comments", "author": null, "committer": null, "parents": [{"sha": "18b802688624127aa26b3d75dd0ce41e06cbeee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b802688624127aa26b3d75dd0ce41e06cbeee9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b802688624127aa26b3d75dd0ce41e06cbeee9"}], "stats": {"total": 97, "additions": 90, "deletions": 7}, "files": [{"sha": "22ab827ed42f703ff92b6c77e5ac63481614c923", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "patch": "@@ -1,3 +1,10 @@\n+2009-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/41435\n+\t* fold-const.c (const_binop): Handle complex int division.\n+\t* tree-complex.c (expand_complex_div_straight,\n+\texpand_complex_div_wide): Update comments.\n+\n 2009-09-24  DJ Delorie  <dj@redhat.com>\n \n \tPR target/41456"}, {"sha": "d754bee25817da8aa925a6ba25ec3abe800c4d73", "filename": "gcc/fold-const.c", "status": "modified", "additions": 68, "deletions": 3, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "patch": "@@ -1995,9 +1995,22 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t    return do_mpc_arg2 (arg1, arg2, type,\n                                 /* do_nonfinite= */ folding_initializer,\n \t\t\t\tmpc_div);\n+\t  /* Fallthru ... */\n #endif\n \n+\tcase TRUNC_DIV_EXPR:\n+\tcase CEIL_DIV_EXPR:\n+\tcase FLOOR_DIV_EXPR:\n+\tcase ROUND_DIV_EXPR:\n+\t  if (flag_complex_method == 0)\n \t  {\n+\t    /* Keep this algorithm in sync with\n+\t       tree-complex.c:expand_complex_div_straight().\n+\n+\t       Expand complex division to scalars, straightforward algorithm.\n+\t       a / b = ((ar*br + ai*bi)/t) + i((ai*br - ar*bi)/t)\n+\t       t = br*br + bi*bi\n+\t    */\n \t    tree magsquared\n \t      = const_binop (PLUS_EXPR,\n \t\t\t     const_binop (MULT_EXPR, r2, r2, notrunc),\n@@ -2014,12 +2027,64 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t\t\t     const_binop (MULT_EXPR, r1, i2, notrunc),\n \t\t\t     notrunc);\n \n-\t    if (INTEGRAL_TYPE_P (TREE_TYPE (r1)))\n-\t      code = TRUNC_DIV_EXPR;\n-\n \t    real = const_binop (code, t1, magsquared, notrunc);\n \t    imag = const_binop (code, t2, magsquared, notrunc);\n \t  }\n+\t  else\n+\t  {\n+\t    /* Keep this algorithm in sync with\n+               tree-complex.c:expand_complex_div_wide().\n+\n+\t       Expand complex division to scalars, modified algorithm to minimize\n+\t       overflow with wide input ranges.  */\n+\t    tree inner_type = TREE_TYPE (type);\n+\t    tree absr2 = fold_build1 (ABS_EXPR, inner_type, r2);\n+\t    tree absi2 = fold_build1 (ABS_EXPR, inner_type, i2);\n+\t    tree compare = fold_build2 (LT_EXPR, boolean_type_node, absr2, absi2);\n+\t    if (integer_nonzerop (compare))\n+\t      {\n+\t\t/* In the TRUE branch, we compute\n+\t\t   ratio = br/bi;\n+\t\t   div = (br * ratio) + bi;\n+\t\t   tr = (ar * ratio) + ai;\n+\t\t   ti = (ai * ratio) - ar;\n+\t\t   tr = tr / div;\n+\t\t   ti = ti / div;  */\n+\t\ttree ratio = fold_build2 (code, inner_type, r2, i2);\n+\t\ttree div = fold_build2 (PLUS_EXPR, inner_type, i2,\n+\t\t\t\t\tfold_build2 (MULT_EXPR, inner_type,\n+\t\t\t\t\t\t     r2, ratio));\n+\t\treal = fold_build2 (MULT_EXPR, inner_type, r1, ratio);\n+\t\treal = fold_build2 (PLUS_EXPR, inner_type, real, i1);\n+\t\treal = fold_build2 (code, inner_type, real, div);\n+\n+\t\timag = fold_build2 (MULT_EXPR, inner_type, i1, ratio);\n+\t\timag = fold_build2 (MINUS_EXPR, inner_type, imag, r1);\n+\t\timag = fold_build2 (code, inner_type, imag, div);\n+\t      }\n+\t    else\n+\t      {\n+\t\t/* In the FALSE branch, we compute\n+\t\t   ratio = d/c;\n+\t\t   divisor = (d * ratio) + c;\n+\t\t   tr = (b * ratio) + a;\n+\t\t   ti = b - (a * ratio);\n+\t\t   tr = tr / div;\n+\t\t   ti = ti / div;  */\n+\t\ttree ratio = fold_build2 (code, inner_type, i2, r2);\n+\t\ttree div = fold_build2 (PLUS_EXPR, inner_type, r2,\n+                                        fold_build2 (MULT_EXPR, inner_type,\n+                                                     i2, ratio));\n+\n+\t\treal = fold_build2 (MULT_EXPR, inner_type, i1, ratio);\n+\t\treal = fold_build2 (PLUS_EXPR, inner_type, real, r1);\n+\t\treal = fold_build2 (code, inner_type, real, div);\n+\n+\t\timag = fold_build2 (MULT_EXPR, inner_type, r1, ratio);\n+\t\timag = fold_build2 (MINUS_EXPR, inner_type, i1, imag);\n+\t\timag = fold_build2 (code, inner_type, imag, div);\n+\t      }\n+\t  }\n \t  break;\n \n \tdefault:"}, {"sha": "2511b4e4544fc91c050d410c8852740d174db1ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "patch": "@@ -1,3 +1,8 @@\n+2009-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-math-7.c: Test complex int division at\n+\tcompile-time.\n+\n 2009-09-24  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* lib/scanasm.exp (make_pattern_printable): New function."}, {"sha": "86fd2622ccf66a05ff9920ce338dfb4910cff5e5", "filename": "gcc/testsuite/gcc.dg/torture/builtin-math-7.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-math-7.c?ref=e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "patch": "@@ -62,12 +62,14 @@ int main()\n   TESTIT (double, 3.+4.i, *, 2, 6+8i);\n   TESTIT (double, 3.+4.i, /, 2, 1.5+2i);\n   TESTIT (int, 3+4i, *, 2, 6+8i);\n-  RUNTIME_TESTIT (int, 3+4i, /, 2, 1+2i);\n+  TESTIT (int, 3+4i, /, 2, 1+2i);\n \n   TESTIT (double, 3.+4.i, *, 2+5i, -14+23i);\n   TESTIT (double, 3.+4.i, /, 5i, .8-.6i);\n   TESTIT (int, 3+4i, *, 2+5i, -14+23i);\n-  RUNTIME_TESTIT (int, 30+40i, /, 5i, 8-6i);\n+  TESTIT (int, 30+40i, /, 5i, 8-6i);\n+  TESTIT (int, 14+6i, /, 7+3i, 2);\n+  TESTIT (int, 8+24i, /, 4+12i, 2);\n \n   /* Test that we don't overflow.  */\n   TESTIT (double,"}, {"sha": "199f1dcf54c972aef88b57c622b819314ea1fa46", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=e3d5405d071e33540d70c62c6e24a2dfa7cc7d9d", "patch": "@@ -1065,7 +1065,9 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree inner_type,\n   update_complex_assignment (gsi, rr, ri);\n }\n \n-/* Expand complex division to scalars, straightforward algorithm.\n+/* Keep this algorithm in sync with fold-const.c:const_binop().\n+   \n+   Expand complex division to scalars, straightforward algorithm.\n \ta / b = ((ar*br + ai*bi)/t) + i((ai*br - ar*bi)/t)\n \t    t = br*br + bi*bi\n */\n@@ -1094,7 +1096,9 @@ expand_complex_div_straight (gimple_stmt_iterator *gsi, tree inner_type,\n   update_complex_assignment (gsi, rr, ri);\n }\n \n-/* Expand complex division to scalars, modified algorithm to minimize\n+/* Keep this algorithm in sync with fold-const.c:const_binop().\n+\n+   Expand complex division to scalars, modified algorithm to minimize\n    overflow with wide input ranges.  */\n \n static void"}]}