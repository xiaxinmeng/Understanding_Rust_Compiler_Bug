{"sha": "31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFlMmI1YTNkOGM1Mzk4NzhmMjkzZmUzMGYxZjdiZTdkMmFkYjA4NA==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-02-02T17:12:56Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-02-02T17:12:56Z"}, "message": "Improve TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS target hook.\n\nImprove TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS target hook.  It turns out there\nis another case where the register allocator uses the union of register classes\nwithout checking that the cost of the resulting register class is lower than\nboth (see https://gcc.gnu.org/ml/gcc-patches/2015-12/msg01765.html ).  This\nhappens when the cost of the best and alternative class are both lower than the\nmemory cost.  In this case we typically end up with ALL_REGS as the allocno\nclass, which almost invariably results in bad allocations with many redundant\nint<->FP moves (which are expensive on various cores).  AArch64 is affected by\nthis significantly due to supporting many scalar integer operations in SIMD.\n\nCurrently the TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS hook forces the class to\nGENERAL_REGS if the allocno class is ALL_REGS and the register has an integer\nmode.  This is bad if the best class happens to be FP_REGS.  To handle this\ncase as well, an extra argument is needed in the hook to pass the best class.\nIf the allocno class is ALL_REGS, but the best class isn't, we use the best\nclass instead (rather than using the mode to force to GENERAL_REGS or FP_REGS).\n\nPreviously this might happen:\n\nr79: preferred FP_REGS, alternative GENERAL_REGS, allocno GENERAL_REGS\n     a1 (r79,l0) best GENERAL_REGS, allocno GENERAL_REGS\n\na1(r79,l0) costs: CALLER_SAVE_REGS:5000,5000 GENERAL_REGS:5000,5000\n                  FP_LO_REGS:0,0 FP_REGS:0,0 ALL_REGS:10000,10000 MEM:9000,9000\n\nThe proposed allocno is ALL_REGS (despite having the highest cost!) and is then\nforced by the hook to GENERAL_REGS because r79 has integer mode.  However\nFP_REGS has the lowest cost.  After this patch the choice is as follows:\n\nr79: preferred FP_REGS, alternative GENERAL_REGS, allocno FP_REGS\n     a1 (r79,l0) best FP_REGS, allocno FP_REGS\n\nAs a result it is now no longer a requirement to use register move costs that \nare larger than the memory move cost.  So it will be feasible to use realistic\ncosts for both without a huge penalty.\n\n\n2016-02-02  Wilco Dijkstra  <wdijkstr@arm.com>\n\n    gcc/\n        * ira-costs.c (find_costs_and_classes): Add extra argument.\n        * target.def (ira_change_pseudo_allocno_class): Add parameter.\n        * targhooks.h (ira_change_pseudo_allocno_class): Likewise.\n        * targhooks.c (ira_change_pseudo_allocno_class): Likewise.\n        * config/aarch64/aarch64.c (aarch64_ira_change_pseudo_allocno_class)\n        Add best_class parameter, and return it if not ALL_REGS.\n        * config/mips/mips.c (mips_ira_change_pseudo_allocno_class):\n        Add parameter.\n        * doc/tm.texi (TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS):\n        Update target hook.\n\nFrom-SVN: r233084", "tree": {"sha": "ff24c4ceef40ca59bd3f62cb0dcfd1e0de259c03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff24c4ceef40ca59bd3f62cb0dcfd1e0de259c03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/comments", "author": null, "committer": null, "parents": [{"sha": "c64f7d37140e0769cbb8725da800119d7c6a6fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64f7d37140e0769cbb8725da800119d7c6a6fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64f7d37140e0769cbb8725da800119d7c6a6fd2"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "0e72ed1d0585b622213574ff83e02a1878e75d18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -1,3 +1,16 @@\n+2016-02-02  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* ira-costs.c (find_costs_and_classes): Add extra argument.\n+\t* target.def (ira_change_pseudo_allocno_class): Add parameter.\n+\t* targhooks.h (ira_change_pseudo_allocno_class): Likewise.\n+\t* targhooks.c (ira_change_pseudo_allocno_class): Likewise.\n+\t* config/aarch64/aarch64.c (aarch64_ira_change_pseudo_allocno_class)\n+\tAdd best_class parameter, and return it if not ALL_REGS.\n+\t* config/mips/mips.c (mips_ira_change_pseudo_allocno_class):\n+\tAdd parameter.\n+\t* doc/tm.texi (TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS):\n+\tUpdate target hook.\n+\n 2016-02-02  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "3ff12ff093d517e32376c24ac0ca2894a73629f8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -726,18 +726,31 @@ aarch64_err_no_fpadvsimd (machine_mode mode, const char *msg)\n \n /* Implement TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS.\n    The register allocator chooses ALL_REGS if FP_REGS and GENERAL_REGS have\n-   the same cost even if ALL_REGS has a much larger cost.  This results in bad\n-   allocations and spilling.  To avoid this we force the class to GENERAL_REGS\n-   if the mode is integer.  */\n+   the same cost even if ALL_REGS has a much larger cost.  ALL_REGS is also\n+   used if the cost of both FP_REGS and GENERAL_REGS is lower than the memory\n+   cost (in this case the best class is the lowest cost one).  Using ALL_REGS\n+   irrespectively of its cost results in bad allocations with many redundant\n+   int<->FP moves which are expensive on various cores.\n+   To avoid this we don't allow ALL_REGS as the allocno class, but force a\n+   decision between FP_REGS and GENERAL_REGS.  We use the allocno class if it\n+   isn't ALL_REGS.  Similarly, use the best class if it isn't ALL_REGS.\n+   Otherwise set the allocno class depending on the mode.\n+   The result of this is that it is no longer inefficient to have a higher\n+   memory move cost than the register move cost.\n+*/\n \n static reg_class_t\n-aarch64_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class)\n+aarch64_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class,\n+\t\t\t\t\t reg_class_t best_class)\n {\n   enum machine_mode mode;\n \n   if (allocno_class != ALL_REGS)\n     return allocno_class;\n \n+  if (best_class != ALL_REGS)\n+    return best_class;\n+\n   mode = PSEUDO_REGNO_MODE (regno);\n   return FLOAT_MODE_P (mode) || VECTOR_MODE_P (mode) ? FP_REGS : GENERAL_REGS;\n }"}, {"sha": "697abc2b7743b2e710b73447f03589607dbdbfdc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -19916,7 +19916,8 @@ mips_lra_p (void)\n /* Implement TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS.  */\n \n static reg_class_t\n-mips_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class)\n+mips_ira_change_pseudo_allocno_class (int regno, reg_class_t allocno_class,\n+\t\t\t\t      reg_class_t best_class ATTRIBUTE_UNUSED)\n {\n   /* LRA will allocate an FPR for an integer mode pseudo instead of spilling\n      to memory if an FPR is present in the allocno class.  It is rare that"}, {"sha": "faf8bcb122bc4e750fa7fb87e2cb3fc4d321f159", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -2853,9 +2853,9 @@ value that the middle-end intended.\n \n @end defmac\n \n-@deftypefn {Target Hook} reg_class_t TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS (int, @var{reg_class_t})\n+@deftypefn {Target Hook} reg_class_t TARGET_IRA_CHANGE_PSEUDO_ALLOCNO_CLASS (int, @var{reg_class_t}, @var{reg_class_t})\n A target hook which can change allocno class for given pseudo from\n-  allocno class calculated by IRA.\n+  allocno and best class calculated by IRA.\n   \n   The default version of this target hook always returns given class.\n @end deftypefn"}, {"sha": "f3d31e178afd09887f13164eff53100e4a99c656", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -1858,7 +1858,7 @@ find_costs_and_classes (FILE *dump_file)\n \t    }\n \t  if ((new_class\n \t       = (reg_class) (targetm.ira_change_pseudo_allocno_class\n-\t\t\t      (i, regno_aclass[i]))) != regno_aclass[i])\n+\t\t\t      (i, regno_aclass[i], best))) != regno_aclass[i])\n \t    {\n \t      regno_aclass[i] = new_class;\n \t      if (hard_reg_set_subset_p (reg_class_contents[new_class],"}, {"sha": "f139ef9212973f33d4c53f35ea6786d8b164af7b", "filename": "gcc/target.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -4874,10 +4874,10 @@ This is currently used only by the C and C++ front ends.\",\n DEFHOOK\n (ira_change_pseudo_allocno_class,\n  \"A target hook which can change allocno class for given pseudo from\\n\\\n-  allocno class calculated by IRA.\\n\\\n+  allocno and best class calculated by IRA.\\n\\\n   \\n\\\n   The default version of this target hook always returns given class.\",\n- reg_class_t, (int, reg_class_t),\n+ reg_class_t, (int, reg_class_t, reg_class_t),\n  default_ira_change_pseudo_allocno_class)\n \n /* Return true if we use LRA instead of reload.  */"}, {"sha": "fa6a43d5b615bb1df948192dd949b013a050c09a", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -899,7 +899,8 @@ default_branch_target_register_class (void)\n \n reg_class_t\n default_ira_change_pseudo_allocno_class (int regno ATTRIBUTE_UNUSED,\n-\t\t\t\t\t reg_class_t cl)\n+\t\t\t\t\t reg_class_t cl,\n+\t\t\t\t\t reg_class_t best_cl ATTRIBUTE_UNUSED)\n {\n   return cl;\n }"}, {"sha": "7687c39b53b5e31e3e57e8927c09441e926d81da", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31e2b5a3d8c539878f293fe30f1f7be7d2adb084/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=31e2b5a3d8c539878f293fe30f1f7be7d2adb084", "patch": "@@ -148,7 +148,8 @@ extern rtx default_static_chain (const_tree, bool);\n extern void default_trampoline_init (rtx, tree, rtx);\n extern int default_return_pops_args (tree, tree, int);\n extern reg_class_t default_branch_target_register_class (void);\n-extern reg_class_t default_ira_change_pseudo_allocno_class (int, reg_class_t);\n+extern reg_class_t default_ira_change_pseudo_allocno_class (int, reg_class_t,\n+\t\t\t\t\t\t\t    reg_class_t);\n extern bool default_lra_p (void);\n extern int default_register_priority (int);\n extern bool default_register_usage_leveling_p (void);"}]}