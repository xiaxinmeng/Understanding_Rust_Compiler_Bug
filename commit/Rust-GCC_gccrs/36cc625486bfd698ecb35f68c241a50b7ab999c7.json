{"sha": "36cc625486bfd698ecb35f68c241a50b7ab999c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjYzYyNTQ4NmJmZDY5OGVjYjM1ZjY4YzI0MWE1MGI3YWI5OTljNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-11-02T20:00:19Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-11-02T20:00:19Z"}, "message": "arc.c (arc600_corereg_hazard_1): Delete.\n\ngcc/\n\t* config/arc/arc.c (arc600_corereg_hazard_1): Delete.\n\t(arc600_corereg_hazard): Use FOR_EACH_SUBRTX.\n\nFrom-SVN: r217018", "tree": {"sha": "81e043b8b55043dec19a9f083ffaa5198d145dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e043b8b55043dec19a9f083ffaa5198d145dd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36cc625486bfd698ecb35f68c241a50b7ab999c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36cc625486bfd698ecb35f68c241a50b7ab999c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36cc625486bfd698ecb35f68c241a50b7ab999c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36cc625486bfd698ecb35f68c241a50b7ab999c7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "752ae22f507c89267df61846d3ed15cb1f6c7c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752ae22f507c89267df61846d3ed15cb1f6c7c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752ae22f507c89267df61846d3ed15cb1f6c7c47"}], "stats": {"total": 64, "additions": 30, "deletions": 34}, "files": [{"sha": "1d00f012e99e801a446483a0a1b730a66c3070d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36cc625486bfd698ecb35f68c241a50b7ab999c7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36cc625486bfd698ecb35f68c241a50b7ab999c7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36cc625486bfd698ecb35f68c241a50b7ab999c7", "patch": "@@ -1,3 +1,8 @@\n+2014-11-02  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/arc/arc.c (arc600_corereg_hazard_1): Delete.\n+\t(arc600_corereg_hazard): Use FOR_EACH_SUBRTX.\n+\n 2014-11-02  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/arc/arc.c (arc_rewrite_small_data_p): Constify argument."}, {"sha": "ba0670dd8f477c775a7d7c3b165dd1f0b411f13b", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 25, "deletions": 34, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36cc625486bfd698ecb35f68c241a50b7ab999c7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36cc625486bfd698ecb35f68c241a50b7ab999c7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=36cc625486bfd698ecb35f68c241a50b7ab999c7", "patch": "@@ -7716,38 +7716,6 @@ disi_highpart (rtx in)\n   return simplify_gen_subreg (SImode, in, DImode, TARGET_BIG_ENDIAN ? 0 : 4);\n }\n \n-/* Called by arc600_corereg_hazard via for_each_rtx.\n-   If a hazard is found, return a conservative estimate of the required\n-   length adjustment to accomodate a nop.  */\n-\n-static int\n-arc600_corereg_hazard_1 (rtx *xp, void *data)\n-{\n-  rtx x = *xp;\n-  rtx dest;\n-  rtx pat = (rtx) data;\n-\n-  switch (GET_CODE (x))\n-    {\n-    case SET: case POST_INC: case POST_DEC: case PRE_INC: case PRE_DEC:\n-      break;\n-    default:\n-    /* This is also fine for PRE/POST_MODIFY, because they contain a SET.  */\n-      return 0;\n-    }\n-  dest = XEXP (x, 0);\n-  /* Check if this sets a an extension register.  N.B. we use 61 for the\n-     condition codes, which is definitely not an extension register.  */\n-  if (REG_P (dest) && REGNO (dest) >= 32 && REGNO (dest) < 61\n-      /* Check if the same register is used by the PAT.  */\n-      && (refers_to_regno_p\n-\t   (REGNO (dest),\n-\t   REGNO (dest) + (GET_MODE_SIZE (GET_MODE (dest)) + 3) / 4U, pat, 0)))\n-    return 4;\n-\n-  return 0;\n-}\n-\n /* Return length adjustment for INSN.\n    For ARC600:\n    A write to a core reg greater or equal to 32 must not be immediately\n@@ -7779,8 +7747,31 @@ arc600_corereg_hazard (rtx_insn *pred, rtx_insn *succ)\n       || recog_memoized (pred) == CODE_FOR_umul64_600\n       || recog_memoized (pred) == CODE_FOR_umac64_600)\n     return 0;\n-  return for_each_rtx (&PATTERN (pred), arc600_corereg_hazard_1,\n-\t\t       PATTERN (succ));\n+  subrtx_iterator::array_type array;\n+  FOR_EACH_SUBRTX (iter, array, PATTERN (pred), NONCONST)\n+    {\n+      const_rtx x = *iter;\n+      switch (GET_CODE (x))\n+\t{\n+\tcase SET: case POST_INC: case POST_DEC: case PRE_INC: case PRE_DEC:\n+\t  break;\n+\tdefault:\n+\t  /* This is also fine for PRE/POST_MODIFY, because they\n+\t     contain a SET.  */\n+\t  continue;\n+\t}\n+      rtx dest = XEXP (x, 0);\n+      /* Check if this sets a an extension register.  N.B. we use 61 for the\n+\t condition codes, which is definitely not an extension register.  */\n+      if (REG_P (dest) && REGNO (dest) >= 32 && REGNO (dest) < 61\n+\t  /* Check if the same register is used by the PAT.  */\n+\t  && (refers_to_regno_p\n+\t      (REGNO (dest),\n+\t       REGNO (dest) + (GET_MODE_SIZE (GET_MODE (dest)) + 3) / 4U,\n+\t       PATTERN (succ), 0)))\n+\treturn 4;\n+    }\n+  return 0;\n }\n \n /* For ARC600:"}]}