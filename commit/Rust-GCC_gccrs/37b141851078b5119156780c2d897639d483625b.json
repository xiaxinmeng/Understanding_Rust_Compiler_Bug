{"sha": "37b141851078b5119156780c2d897639d483625b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMTQxODUxMDc4YjUxMTkxNTY3ODBjMmQ4OTc2MzlkNDgzNjI1Yg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-09T08:19:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-09T08:19:05Z"}, "message": "re PR target/78007 (Important loop from 482.sphinx3  is not vectorized)\n\n2016-11-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78007\n\t* tree-vect-stmts.c (vectorizable_bswap): New function.\n\t(vectorizable_call): Call vectorizable_bswap for\n\tBUILT_IN_BSWAP{16,32,64} if arguments are not promoted.\n\n\t* gcc.dg/vect/vect-bswap32.c: Adjust.\n\t* gcc.dg/vect/vect-bswap64.c: Likewise.\n\nFrom-SVN: r241992", "tree": {"sha": "8c86fe39b152e2019d30e175460e35da8ced0a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c86fe39b152e2019d30e175460e35da8ced0a77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b141851078b5119156780c2d897639d483625b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b141851078b5119156780c2d897639d483625b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b141851078b5119156780c2d897639d483625b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b141851078b5119156780c2d897639d483625b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b3fa6a166eb8027b6e77343a347929767da329d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3fa6a166eb8027b6e77343a347929767da329d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3fa6a166eb8027b6e77343a347929767da329d"}], "stats": {"total": 137, "additions": 133, "deletions": 4}, "files": [{"sha": "4b15823670a5fbdf42c3bbd2691866aa0e5bf5b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b141851078b5119156780c2d897639d483625b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b141851078b5119156780c2d897639d483625b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b141851078b5119156780c2d897639d483625b", "patch": "@@ -1,3 +1,10 @@\n+2016-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78007\n+\t* tree-vect-stmts.c (vectorizable_bswap): New function.\n+\t(vectorizable_call): Call vectorizable_bswap for\n+\tBUILT_IN_BSWAP{16,32,64} if arguments are not promoted.\n+\n 2016-11-09  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_compute_data_ref_alignment):"}, {"sha": "888e9e2f6c07704268fcc646cf5ec1e72716d66f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b141851078b5119156780c2d897639d483625b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b141851078b5119156780c2d897639d483625b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37b141851078b5119156780c2d897639d483625b", "patch": "@@ -1,3 +1,9 @@\n+2016-11-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78007\n+\t* gcc.dg/vect/vect-bswap32.c: Adjust.\n+\t* gcc.dg/vect/vect-bswap64.c: Likewise.\n+\n 2016-11-09  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* gcc.dg/ipa/vrp7.c: New test."}, {"sha": "7f3a915ee97f5730131cbb095343ddda5a38b2d5", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b141851078b5119156780c2d897639d483625b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b141851078b5119156780c2d897639d483625b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap32.c?ref=37b141851078b5119156780c2d897639d483625b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target vect_bswap } */\n+/* { dg-additional-options \"-msse4\" { target sse4_runtime } } */\n \n #include \"tree-vect.h\"\n \n@@ -42,4 +42,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_bswap || sse4_runtime } } } } */"}, {"sha": "b9e421d1de4efe419fa2f5a705e0eb08de01b047", "filename": "gcc/testsuite/gcc.dg/vect/vect-bswap64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b141851078b5119156780c2d897639d483625b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b141851078b5119156780c2d897639d483625b/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-bswap64.c?ref=37b141851078b5119156780c2d897639d483625b", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-require-effective-target vect_bswap } */\n+/* { dg-additional-options \"-msse4\" { target sse4_runtime } } */\n \n #include \"tree-vect.h\"\n \n@@ -42,4 +42,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_bswap || sse4_runtime } } } } */"}, {"sha": "b0b131d9245d9bdbb4527560f372179a8355e9f8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b141851078b5119156780c2d897639d483625b/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b141851078b5119156780c2d897639d483625b/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=37b141851078b5119156780c2d897639d483625b", "patch": "@@ -2432,6 +2432,116 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* Check and perform vectorization of BUILT_IN_BSWAP{16,32,64}.  */\n+\n+static bool\n+vectorizable_bswap (gimple *stmt, gimple_stmt_iterator *gsi,\n+\t\t    gimple **vec_stmt, slp_tree slp_node,\n+\t\t    tree vectype_in, enum vect_def_type *dt)\n+{\n+  tree op, vectype;\n+  stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n+  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n+  unsigned ncopies, nunits;\n+\n+  op = gimple_call_arg (stmt, 0);\n+  vectype = STMT_VINFO_VECTYPE (stmt_info);\n+  nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+\n+  /* Multiple types in SLP are handled by creating the appropriate number of\n+     vectorized stmts for each SLP node.  Hence, NCOPIES is always 1 in\n+     case of SLP.  */\n+  if (slp_node)\n+    ncopies = 1;\n+  else\n+    ncopies = LOOP_VINFO_VECT_FACTOR (loop_vinfo) / nunits;\n+\n+  gcc_assert (ncopies >= 1);\n+\n+  tree char_vectype = get_same_sized_vectype (char_type_node, vectype_in);\n+  if (! char_vectype)\n+    return false;\n+\n+  unsigned char *elts\n+    = XALLOCAVEC (unsigned char, TYPE_VECTOR_SUBPARTS (char_vectype));\n+  unsigned char *elt = elts;\n+  unsigned word_bytes = TYPE_VECTOR_SUBPARTS (char_vectype) / nunits;\n+  for (unsigned i = 0; i < nunits; ++i)\n+    for (unsigned j = 0; j < word_bytes; ++j)\n+      *elt++ = (i + 1) * word_bytes - j - 1;\n+\n+  if (! can_vec_perm_p (TYPE_MODE (char_vectype), false, elts))\n+    return false;\n+\n+  if (! vec_stmt)\n+    {\n+      STMT_VINFO_TYPE (stmt_info) = call_vec_info_type;\n+      if (dump_enabled_p ())\n+        dump_printf_loc (MSG_NOTE, vect_location, \"=== vectorizable_bswap ===\"\n+                         \"\\n\");\n+      if (! PURE_SLP_STMT (stmt_info))\n+\t{\n+\t  add_stmt_cost (stmt_info->vinfo->target_cost_data,\n+\t\t\t 1, vector_stmt, stmt_info, 0, vect_prologue);\n+\t  add_stmt_cost (stmt_info->vinfo->target_cost_data,\n+\t\t\t ncopies, vec_perm, stmt_info, 0, vect_body);\n+\t}\n+      return true;\n+    }\n+\n+  tree *telts = XALLOCAVEC (tree, TYPE_VECTOR_SUBPARTS (char_vectype));\n+  for (unsigned i = 0; i < TYPE_VECTOR_SUBPARTS (char_vectype); ++i)\n+    telts[i] = build_int_cst (char_type_node, elts[i]);\n+  tree bswap_vconst = build_vector (char_vectype, telts);\n+\n+  /* Transform.  */\n+  vec<tree> vec_oprnds = vNULL;\n+  gimple *new_stmt = NULL;\n+  stmt_vec_info prev_stmt_info = NULL;\n+  for (unsigned j = 0; j < ncopies; j++)\n+    {\n+      /* Handle uses.  */\n+      if (j == 0)\n+        vect_get_vec_defs (op, NULL, stmt, &vec_oprnds, NULL, slp_node, -1);\n+      else\n+        vect_get_vec_defs_for_stmt_copy (dt, &vec_oprnds, NULL);\n+\n+      /* Arguments are ready. create the new vector stmt.  */\n+      unsigned i;\n+      tree vop;\n+      FOR_EACH_VEC_ELT (vec_oprnds, i, vop)\n+       {\n+\t tree tem = make_ssa_name (char_vectype);\n+\t new_stmt = gimple_build_assign (tem, build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t      char_vectype, vop));\n+\t vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t tree tem2 = make_ssa_name (char_vectype);\n+\t new_stmt = gimple_build_assign (tem2, VEC_PERM_EXPR,\n+\t\t\t\t\t tem, tem, bswap_vconst);\n+\t vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+\t tem = make_ssa_name (vectype);\n+\t new_stmt = gimple_build_assign (tem, build1 (VIEW_CONVERT_EXPR,\n+\t\t\t\t\t\t      vectype, tem2));\n+\t vect_finish_stmt_generation (stmt, new_stmt, gsi);\n+         if (slp_node)\n+           SLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n+       }\n+\n+      if (slp_node)\n+        continue;\n+\n+      if (j == 0)\n+        STMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt;\n+      else\n+        STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt;\n+\n+      prev_stmt_info = vinfo_for_stmt (new_stmt);\n+    }\n+\n+  vec_oprnds.release ();\n+  return true;\n+}\n+\n /* Return true if vector types VECTYPE_IN and VECTYPE_OUT have\n    integer elements and if we can narrow VECTYPE_IN to VECTYPE_OUT\n    in a single step.  On success, store the binary pack code in\n@@ -2658,6 +2768,12 @@ vectorizable_call (gimple *gs, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t     { 0, 1, 2, ... vf - 1 } vector.  */\n \t  gcc_assert (nargs == 0);\n \t}\n+      else if (modifier == NONE\n+\t       && (gimple_call_builtin_p (stmt, BUILT_IN_BSWAP16)\n+\t\t   || gimple_call_builtin_p (stmt, BUILT_IN_BSWAP32)\n+\t\t   || gimple_call_builtin_p (stmt, BUILT_IN_BSWAP64)))\n+\treturn vectorizable_bswap (stmt, gsi, vec_stmt, slp_node,\n+\t\t\t\t   vectype_in, dt);\n       else\n \t{\n \t  if (dump_enabled_p ())"}]}