{"sha": "b40e941b534f01ff9e0428e54f0ea993be033420", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQwZTk0MWI1MzRmMDFmZjllMDQyOGU1NGYwZWE5OTNiZTAzMzQyMA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2017-07-31T15:42:01Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2017-07-31T15:42:01Z"}, "message": "rs6000-c: Add support for built-in functions vector signed char vec_xl_be (signed long...\n\ngcc/ChangeLog:\n\n2017-07-31  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/rs6000-c: Add support for built-in functions\n\tvector signed char vec_xl_be (signed long long, signed char *);\n\tvector unsigned char vec_xl_be (signed long long, unsigned char *);\n\tvector signed int vec_xl_be (signed long long, signed int *);\n\tvector unsigned int vec_xl_be (signed long long, unsigned int *);\n\tvector signed long long vec_xl_be (signed long long, signed long long *);\n\tvector unsigned long long vec_xl_be (signed long long, unsigned long long *);\n\tvector signed short vec_xl_be (signed long long, signed short *);\n\tvector unsigned short vec_xl_be (signed long long, unsigned short *);\n\tvector double vec_xl_be (signed long long, double *);\n\tvector float vec_xl_be (signed long long, float *);\n\t* config/rs6000/altivec.h (vec_xl_be): Add #define.\n\t* config/rs6000/rs6000-builtin.def (XL_BE_V16QI, XL_BE_V8HI, XL_BE_V4SI,\n\tXL_BE_V2DI, XL_BE_V4SF, XL_BE_V2DF, XL_BE): Add definitions for the builtins.\n\t* config/rs6000/rs6000.c (altivec_expand_xl_be_builtin): Add function.\n\t(altivec_expand_builtin): Add switch statement to call altivec_expand_xl_be\n\tfor each builtin.\n\t(altivec_init_builtins): Add def_builtin for _builtin_vsx_le_be_v8hi,\n\t__builtin_vsx_le_be_v4si, __builtin_vsx_le_be_v2di, __builtin_vsx_le_be_v4sf,\n\t__builtin_vsx_le_be_v2df, __builtin_vsx_le_be_v16qi.\n\t* doc/extend.texi: Update the built-in documentation file for the\n\tnew built-in functions.\n\ngcc/testsuite/ChangeLog:\n\n2017-07-31  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/builtins-4-runnable.c: Add test cases for the\n\tnew builtins.\n\nFrom-SVN: r250746", "tree": {"sha": "d1795a6f388a107c0fd44c032da924ca239a2c2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1795a6f388a107c0fd44c032da924ca239a2c2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b40e941b534f01ff9e0428e54f0ea993be033420", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40e941b534f01ff9e0428e54f0ea993be033420", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b40e941b534f01ff9e0428e54f0ea993be033420", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b40e941b534f01ff9e0428e54f0ea993be033420/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "67779f742232506430930101187fddb47e564e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67779f742232506430930101187fddb47e564e5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67779f742232506430930101187fddb47e564e5c"}], "stats": {"total": 505, "additions": 505, "deletions": 0}, "files": [{"sha": "da723040f2c9dc773de692dd00da943558a2e172", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -1,3 +1,28 @@\n+2017-07-31  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c: Add support for built-in functions\n+\tvector signed char vec_xl_be (signed long long, signed char *);\n+\tvector unsigned char vec_xl_be (signed long long, unsigned char *);\n+\tvector signed int vec_xl_be (signed long long, signed int *);\n+\tvector unsigned int vec_xl_be (signed long long, unsigned int *);\n+\tvector signed long long vec_xl_be (signed long long, signed long long *);\n+\tvector unsigned long long vec_xl_be (signed long long, unsigned long long *);\n+\tvector signed short vec_xl_be (signed long long, signed short *);\n+\tvector unsigned short vec_xl_be (signed long long, unsigned short *);\n+\tvector double vec_xl_be (signed long long, double *);\n+\tvector float vec_xl_be (signed long long, float *);\n+\t* config/rs6000/altivec.h (vec_xl_be): Add #define.\n+\t* config/rs6000/rs6000-builtin.def (XL_BE_V16QI, XL_BE_V8HI, XL_BE_V4SI,\n+\tXL_BE_V2DI, XL_BE_V4SF, XL_BE_V2DF, XL_BE): Add definitions for the builtins.\n+\t* config/rs6000/rs6000.c (altivec_expand_xl_be_builtin): Add function.\n+\t(altivec_expand_builtin): Add switch statement to call altivec_expand_xl_be\n+\tfor each builtin.\n+\t(altivec_init_builtins): Add def_builtin for _builtin_vsx_le_be_v8hi,\n+\t__builtin_vsx_le_be_v4si, __builtin_vsx_le_be_v2di, __builtin_vsx_le_be_v4sf,\n+\t__builtin_vsx_le_be_v2df, __builtin_vsx_le_be_v16qi.\n+\t* doc/extend.texi: Update the built-in documentation file for the\n+\tnew built-in functions.\n+\n 2017-07-31  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/25967"}, {"sha": "c8e508cf0a0fa35175bf6161523ed417844431e5", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -355,6 +355,7 @@\n #define vec_vsx_ld __builtin_vec_vsx_ld\n #define vec_vsx_st __builtin_vec_vsx_st\n #define vec_xl __builtin_vec_vsx_ld\n+#define vec_xl_be __builtin_vec_xl_be\n #define vec_xst __builtin_vec_vsx_st\n \n /* Note, xxsldi and xxpermdi were added as __builtin_vsx_<xxx> functions"}, {"sha": "850164a09879de9ce91860f9d3385f9693e5d957", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -1735,6 +1735,14 @@ BU_VSX_X (LXVW4X_V4SF,\t      \"lxvw4x_v4sf\",\tMEM)\n BU_VSX_X (LXVW4X_V4SI,        \"lxvw4x_v4si\",\tMEM)\n BU_VSX_X (LXVW4X_V8HI,        \"lxvw4x_v8hi\",\tMEM)\n BU_VSX_X (LXVW4X_V16QI,\t      \"lxvw4x_v16qi\",\tMEM)\n+\n+BU_VSX_X (XL_BE_V16QI, \"xl_be_v16qi\", MEM)\n+BU_VSX_X (XL_BE_V8HI, \"xl_be_v8hi\", MEM)\n+BU_VSX_X (XL_BE_V4SI, \"xl_be_v4si\", MEM)\n+BU_VSX_X (XL_BE_V2DI, \"xl_be_v2di\", MEM)\n+BU_VSX_X (XL_BE_V4SF, \"xl_be_v4sf\", MEM)\n+BU_VSX_X (XL_BE_V2DF, \"xl_be_v2df\", MEM)\n+\n BU_VSX_X (STXSDX,\t      \"stxsdx\",\t\tMEM)\n BU_VSX_X (STXVD2X_V1TI,\t      \"stxvd2x_v1ti\",\tMEM)\n BU_VSX_X (STXVD2X_V2DF,\t      \"stxvd2x_v2df\",\tMEM)\n@@ -1835,6 +1843,7 @@ BU_VSX_OVERLOAD_1 (VUNSIGNEDO,  \"vunsignedo\")\n BU_VSX_OVERLOAD_X (LD,\t     \"ld\")\n BU_VSX_OVERLOAD_X (ST,\t     \"st\")\n BU_VSX_OVERLOAD_X (XL,\t     \"xl\")\n+BU_VSX_OVERLOAD_X (XL_BE,    \"xl_be\")\n BU_VSX_OVERLOAD_X (XST,\t     \"xst\")\n \f\n /* 2 argument CMPB instructions added in ISA 2.05. */"}, {"sha": "7ffb3fd15b1e670082b29a65bc3b9472b1449b15", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -3077,6 +3077,26 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     ~RS6000_BTI_unsigned_V16QI, 0 },\n   { VSX_BUILTIN_VEC_XL, VSX_BUILTIN_LD_ELEMREV_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTQI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V16QI,\n+    RS6000_BTI_V16QI, RS6000_BTI_INTSI, ~RS6000_BTI_INTQI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V8HI,\n+    RS6000_BTI_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_INTHI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTHI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V4SI,\n+    RS6000_BTI_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_INTSI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI, ~RS6000_BTI_UINTSI, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V2DI,\n+    RS6000_BTI_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V2DI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI, ~RS6000_BTI_unsigned_long_long, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V4SF,\n+    RS6000_BTI_V4SF, RS6000_BTI_INTSI, ~RS6000_BTI_float, 0 },\n+  { VSX_BUILTIN_VEC_XL_BE, VSX_BUILTIN_XL_BE_V2DF,\n+    RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_double, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,\n     RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_XOR, ALTIVEC_BUILTIN_VXOR,"}, {"sha": "c40b11f62777b5aaf1d03ba73e8f363513b82912", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -14451,6 +14451,58 @@ altivec_expand_lv_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n   return target;\n }\n \n+static rtx\n+altivec_expand_xl_be_builtin (enum insn_code icode, tree exp, rtx target, bool blk)\n+{\n+  rtx pat, addr;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  machine_mode tmode = insn_data[icode].operand[0].mode;\n+  machine_mode mode0 = Pmode;\n+  machine_mode mode1 = Pmode;\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+\t  target = gen_reg_rtx (tmode);\n+\n+  op1 = copy_to_mode_reg (mode1, op1);\n+\n+  if (op0 == const0_rtx)\n+    addr = gen_rtx_MEM (blk ? BLKmode : tmode, op1);\n+  else\n+    {\n+      op0 = copy_to_mode_reg (mode0, op0);\n+      addr = gen_rtx_MEM (blk ? BLKmode : tmode,\n+                          gen_rtx_PLUS (Pmode, op1, op0));\n+    }\n+\n+  pat = GEN_FCN (icode) (target, addr);\n+  if (!pat)\n+    return 0;\n+\n+  emit_insn (pat);\n+  /*  Reverse element order of elements if in LE mode */\n+  if (!VECTOR_ELT_ORDER_BIG)\n+    {\n+      rtx sel = swap_selector_for_mode (tmode);\n+      rtx vperm = gen_rtx_UNSPEC (tmode, gen_rtvec (3, target, target, sel),\n+\t\t\t\t  UNSPEC_VPERM);\n+      emit_insn (gen_rtx_SET (target, vperm));\n+    }\n+  return target;\n+}\n+\n static rtx\n paired_expand_stv_builtin (enum insn_code icode, tree exp)\n {\n@@ -15843,6 +15895,50 @@ altivec_expand_builtin (tree exp, rtx target, bool *expandedp)\n       /* Fall through.  */\n     }\n \n+  /* XL_BE  We initialized them to always load in big endian order.  */\n+  switch (fcode)\n+    {\n+    case VSX_BUILTIN_XL_BE_V2DI:\n+      {\n+        enum insn_code code = CODE_FOR_vsx_load_v2di;\n+        return altivec_expand_xl_be_builtin (code, exp, target, false);\n+      }\n+      break;\n+    case VSX_BUILTIN_XL_BE_V4SI:\n+      {\n+        enum insn_code code = CODE_FOR_vsx_load_v4si;\n+        return altivec_expand_xl_be_builtin (code, exp, target, false);\n+      }\n+      break;\n+    case VSX_BUILTIN_XL_BE_V8HI:\n+      {\n+        enum insn_code code = CODE_FOR_vsx_load_v8hi;\n+        return altivec_expand_xl_be_builtin (code, exp, target, false);\n+      }\n+      break;\n+    case VSX_BUILTIN_XL_BE_V16QI:\n+      {\n+        enum insn_code code = CODE_FOR_vsx_load_v16qi;\n+        return altivec_expand_xl_be_builtin (code, exp, target, false);\n+       }\n+      break;\n+    case VSX_BUILTIN_XL_BE_V2DF:\n+      {\n+        enum insn_code code = CODE_FOR_vsx_load_v2df;\n+        return altivec_expand_xl_be_builtin (code, exp, target, false);\n+      }\n+      break;\n+    case VSX_BUILTIN_XL_BE_V4SF:\n+      {\n+        enum insn_code code = CODE_FOR_vsx_load_v4sf;\n+        return altivec_expand_xl_be_builtin (code, exp, target, false);\n+      }\n+      break;\n+    default:\n+      break;\n+      /* Fall through.  */\n+    }\n+\n   *expandedp = false;\n   return NULL_RTX;\n }\n@@ -17303,6 +17399,19 @@ altivec_init_builtins (void)\n   def_builtin (\"__builtin_vsx_st_elemrev_v4si\", void_ftype_v4si_long_pvoid,\n \t       VSX_BUILTIN_ST_ELEMREV_V4SI);\n \n+  def_builtin (\"__builtin_vsx_le_be_v8hi\", v8hi_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_XL_BE_V8HI);\n+  def_builtin (\"__builtin_vsx_le_be_v4si\", v4si_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_XL_BE_V4SI);\n+  def_builtin (\"__builtin_vsx_le_be_v2di\", v2di_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_XL_BE_V2DI);\n+  def_builtin (\"__builtin_vsx_le_be_v4sf\", v4sf_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_XL_BE_V4SF);\n+  def_builtin (\"__builtin_vsx_le_be_v2df\", v2df_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_XL_BE_V2DF);\n+  def_builtin (\"__builtin_vsx_le_be_v16qi\", v16qi_ftype_long_pcvoid,\n+\t\t   VSX_BUILTIN_XL_BE_V16QI);\n+\n   if (TARGET_P9_VECTOR)\n     {\n       def_builtin (\"__builtin_vsx_ld_elemrev_v8hi\", v8hi_ftype_long_pcvoid,\n@@ -17332,6 +17441,8 @@ altivec_init_builtins (void)\n \t       VSX_BUILTIN_VEC_ST);\n   def_builtin (\"__builtin_vec_xl\", opaque_ftype_long_pcvoid,\n \t       VSX_BUILTIN_VEC_XL);\n+  def_builtin (\"__builtin_vec_xl_be\", opaque_ftype_long_pcvoid,\n+\t       VSX_BUILTIN_VEC_XL_BE);\n   def_builtin (\"__builtin_vec_xst\", void_ftype_opaque_long_pvoid,\n \t       VSX_BUILTIN_VEC_XST);\n "}, {"sha": "b253cccfa62ab588363768bb809c78908f22f64f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -15494,6 +15494,19 @@ signed int vec_cnttz_lsbb (vector unsigned char);\n \n vector unsigned short vec_pack_to_short_fp32 (vector float, vector float);\n \n+vector signed char vec_xl_be (signed long long, signed char *);\n+vector unsigned char vec_xl_be (signed long long, unsigned char *);\n+vector signed int vec_xl_be (signed long long, signed int *);\n+vector unsigned int vec_xl_be (signed long long, unsigned int *);\n+vector signed __int128 vec_xl_be (signed long long, signed __int128 *);\n+vector unsigned __int128 vec_xl_be (signed long long, unsigned __int128 *);\n+vector signed long long vec_xl_be (signed long long, signed long long *);\n+vector unsigned long long vec_xl_be (signed long long, unsigned long long *);\n+vector signed short vec_xl_be (signed long long, signed short *);\n+vector unsigned short vec_xl_be (signed long long, unsigned short *);\n+vector double vec_xl_be (signed long long, double *);\n+vector float vec_xl_be (signed long long, float *);\n+\n vector signed char vec_xl_len (signed char *addr, size_t len);\n vector unsigned char vec_xl_len (unsigned char *addr, size_t len);\n vector signed int vec_xl_len (signed int *addr, size_t len);"}, {"sha": "1e922943ad9fdd3db24a3efd431607072986ea87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -1,3 +1,8 @@\n+2017-07-31  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-4-runnable.c: Add test cases for the\n+\tnew builtins.\n+\n 2017-07-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/pr79793-1.c: Compile with -mtune=generic."}, {"sha": "24d1e2299e6dde1232e7972e1883e7ed4e315bfb", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-4-runnable.c", "status": "added", "additions": 321, "deletions": 0, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-4-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b40e941b534f01ff9e0428e54f0ea993be033420/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-4-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-4-runnable.c?ref=b40e941b534f01ff9e0428e54f0ea993be033420", "patch": "@@ -0,0 +1,321 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target powerpc_vsx_hw } */\n+/* { dg-options \"-maltivec -mvsx\" } */  \n+\n+#include <inttypes.h>\n+#include <altivec.h> // vector\n+#include <stdio.h>\n+\n+void abort (void);\n+\n+int main() {\n+  int i;\n+  signed char data_c[100];\n+  unsigned char data_uc[100];\n+\n+  signed short int data_ssi[100];\n+  unsigned short int data_usi[100];\n+\n+  signed int data_si[100];\n+  unsigned int data_ui[100];\n+\n+  signed long long data_sll[100];\n+  unsigned long long data_ull[100];\n+\n+  float data_f[100];\n+  double data_d[100];\n+   \n+  signed long long disp;\n+   \n+  vector signed char vec_c_expected1, vec_c_expected2, vec_c_result1, vec_c_result2;\n+  vector unsigned char vec_uc_expected1, vec_uc_expected2,\n+    vec_uc_result1, vec_uc_result2;\n+  vector signed short int vec_ssi_expected1, vec_ssi_expected2,\n+    vec_ssi_result1, vec_ssi_result2;\n+  vector unsigned short int  vec_usi_expected1, vec_usi_expected2,\n+    vec_usi_result1, vec_usi_result2;\n+  vector signed int vec_si_expected1, vec_si_expected2, vec_si_result1,\n+    vec_si_result2;\n+  vector unsigned int vec_ui_expected1, vec_ui_expected2, vec_ui_result1,\n+    vec_ui_result2;\n+  vector signed long long vec_sll_expected1, vec_sll_expected2,\n+    vec_sll_result1, vec_sll_result2;\n+  vector unsigned long long vec_ull_expected1, vec_ull_expected2,\n+    vec_ull_result1, vec_ull_result2;\n+  vector float vec_f_expected1, vec_f_expected2, vec_f_result1, vec_f_result2;\n+  vector double vec_d_expected1, vec_d_expected2, vec_d_result1, vec_d_result2;\n+  char buf[20];\n+  signed long long zero = (signed long long) 0;\n+  \n+  for (i = 0; i < 100; i++)\n+    {\n+      data_c[i] = i;\n+      data_uc[i] = i+1;\n+      data_ssi[i] = i+10;\n+      data_usi[i] = i+11;\n+      data_si[i] = i+100;\n+      data_ui[i] = i+101;\n+      data_sll[i] = i+1000;\n+      data_ull[i] = i+1001;\n+      data_f[i] = i+100000.0;\n+      data_d[i] = i+1000000.0;\n+    }\n+  \n+  disp = 0;\n+#ifdef __BIG_ENDIAN__\n+  printf(\"BIG ENDIAN\\n\");\n+  vec_c_expected1 = (vector signed char){0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t\t 8, 9, 10, 11, 12, 13, 14, 15};\n+#else\n+  printf(\"LITTLE ENDIAN\\n\");\n+  vec_c_expected1 = (vector signed char){15, 14, 13, 12, 11, 10, 9, 8,\n+\t\t\t\t\t 7, 6, 5, 4, 3, 2, 1, 0};\n+#endif\n+  vec_c_result1 = vec_xl_be (0, data_c);\n+\n+  disp = 1;\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_c_expected2 = (vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t 9, 10, 11, 12, 13, 14, 15, 16};\n+#else\n+  vec_c_expected2 = (vector signed char){16, 15, 14, 13, 12, 11, 10, 9,\n+\t\t\t\t\t 8, 7, 6, 5, 4, 3, 2, 1};\n+#endif\n+\n+  vec_c_result2 = vec_xl_be (disp, data_c);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_uc_expected1 = (vector unsigned char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t    9, 10, 11, 12, 13, 14, 15, 16};\n+#else\n+  vec_uc_expected1 = (vector unsigned char){16, 15, 14, 13, 12, 11, 10, 9,\n+\t\t\t\t\t 8, 7, 6, 5, 4, 3, 2, 1};\n+#endif\n+\n+  vec_uc_result1 = vec_xl_be (0, data_uc);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_uc_expected2 = (vector unsigned char){2, 3, 4, 5, 6, 7, 8, 9,\n+\t\t\t\t\t    10, 11, 12, 13, 14, 15, 16, 17};\n+#else\n+  vec_uc_expected2 = (vector unsigned char){17, 16, 15, 14, 13, 12, 11, 10,\n+\t\t\t\t\t    9, 8, 7, 6, 5, 4, 3, 2};\n+#endif\n+\n+  vec_uc_result2 = vec_xl_be (disp, data_uc);\n+\n+  for (i = 0; i < 16; i++)\n+    {\n+      if (vec_c_result1[i] != vec_c_expected1[i])\n+        abort ();\n+\n+      if (vec_c_result2[i] != vec_c_expected2[i])\n+        abort ();\n+\n+      if (vec_uc_result1[i] != vec_uc_expected1[i])\n+        abort ();\n+\n+      if (vec_uc_result2[i] != vec_uc_expected2[i])\n+        abort ();\n+    }\n+\n+  vec_ssi_result1 = vec_xl_be (zero, data_ssi);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_ssi_expected1 = (vector signed short){10, 11, 12, 13, 14, 15, 16, 17};\n+#else\n+  vec_ssi_expected1 = (vector signed short){17, 16, 15, 14, 13, 12, 11, 10};\n+#endif\n+\n+  disp = 2;\n+  vec_ssi_result2 = vec_xl_be (disp, data_ssi);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_ssi_expected2 = (vector signed short){11, 12, 13, 14, 15, 16, 17, 18};\n+#else\n+  vec_ssi_expected2 = (vector signed short){18, 17, 16, 15, 14, 13, 12, 11};\n+#endif\n+\n+  vec_usi_result1 = vec_xl_be (zero, data_usi);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_usi_expected1 = (vector unsigned short){11, 12, 13, 14, 15, 16, 17, 18};\n+#else\n+  vec_usi_expected1 = (vector unsigned short){18, 17, 16, 15, 14, 13, 12, 11};\n+#endif\n+   \n+  disp = 2;\n+  vec_usi_result2 = vec_xl_be (disp, data_usi);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_usi_expected2 = (vector unsigned short){12, 13, 14, 15, 16, 17, 18, 19};\n+#else\n+  vec_usi_expected2 = (vector unsigned short){19, 18, 17, 16, 15, 14, 13, 12};\n+#endif\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      if (vec_ssi_result1[i] != vec_ssi_expected1[i])\n+        abort ();\n+\n+      if (vec_ssi_result2[i] != vec_ssi_expected2[i])\n+        abort ();\n+\n+      if (vec_usi_result1[i] != vec_usi_expected1[i])\n+        abort ();\n+\n+      if (vec_usi_result2[i] != vec_usi_expected2[i])\n+        abort ();\n+    }\n+\n+  vec_si_result1 = vec_xl_be (zero, data_si);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_si_expected1 = (vector int){100, 101, 102, 103};\n+#else\n+  vec_si_expected1 = (vector int){103, 102, 101, 100};\n+#endif\n+\n+  disp = 4;\n+  vec_si_result2 = vec_xl_be (disp, data_si);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_si_expected2 = (vector int){101, 102, 103, 104};\n+#else\n+  vec_si_expected2 = (vector int){104, 103, 102, 101};\n+#endif\n+\n+  vec_ui_result1 = vec_xl_be (zero, data_ui);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_ui_expected1 = (vector unsigned int){101, 102, 103, 104};\n+#else\n+  vec_ui_expected1 = (vector unsigned int){104, 103, 102, 101};\n+#endif\n+\n+  disp = 4;\n+  vec_ui_result2 = vec_xl_be (disp, data_ui);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_ui_expected2 = (vector unsigned int){102, 103, 104, 105};\n+#else\n+  vec_ui_expected2 = (vector unsigned int){105, 104, 103, 102};\n+#endif\n+\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_si_result1[i] != vec_si_expected1[i])\n+        abort ();\n+\n+      if (vec_si_result2[i] != vec_si_expected2[i])\n+        abort ();\n+\n+      if (vec_ui_result1[i] != vec_ui_expected1[i])\n+        abort ();\n+\n+      if (vec_ui_result2[i] != vec_ui_expected2[i])\n+        abort ();\n+    }\n+\n+  vec_sll_result1 = vec_xl_be (zero, data_sll);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_sll_expected1 = (vector signed long long){1000, 1001};\n+#else\n+  vec_sll_expected1 = (vector signed long long){1001, 1000};\n+#endif\n+\n+  disp = 8;\n+  vec_sll_result2 = vec_xl_be (disp, data_sll);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_sll_expected2 = (vector signed long long){1001, 1002};\n+#else\n+  vec_sll_expected2 = (vector signed long long){1002, 1001};\n+#endif\n+\n+  vec_ull_result1 = vec_xl_be (zero, data_ull);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_ull_expected1 = (vector unsigned long long){1001, 1002};\n+#else\n+  vec_ull_expected1 = (vector unsigned long long){1002, 1001};\n+#endif\n+\n+  disp = 8;\n+  vec_ull_result2 = vec_xl_be (disp, data_ull);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_ull_expected2 = (vector unsigned long long){1002, 1003};\n+#else\n+  vec_ull_expected2 = (vector unsigned long long){1003, 1002};\n+#endif\n+\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_sll_result1[i] != vec_sll_expected1[i])\n+        abort ();\n+\n+      if (vec_sll_result2[i] != vec_sll_expected2[i])\n+\tabort ();\n+\n+      if (vec_ull_result1[i] != vec_ull_expected1[i])\n+        abort ();\n+\n+      if (vec_ull_result2[i] != vec_ull_expected2[i])\n+        abort ();\n+    }\n+\n+  vec_f_result1 = vec_xl_be (zero, data_f);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_f_expected1 = (vector float){100000.0, 100001.0, 100002.0, 100003.0};\n+#else\n+  vec_f_expected1 = (vector float){100003.0, 100002.0, 100001.0, 100000.0};\n+#endif\n+\n+  disp = 4;\n+  vec_f_result2 = vec_xl_be (disp, data_f);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_f_expected2 = (vector float){100001.0, 100002.0, 100003.0, 100004.0};\n+#else\n+  vec_f_expected2 = (vector float){100004.0, 100003.0, 100002.0, 100001.0};\n+#endif\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      if (vec_f_result1[i] != vec_f_expected1[i])\n+        abort ();\n+      if (vec_f_result2[i] != vec_f_expected2[i])\n+        abort ();\n+    }\n+\n+  vec_d_result1 = vec_xl_be (zero, data_d);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_d_expected1 = (vector double){1000000.0, 1000001.0};\n+#else\n+  vec_d_expected1 = (vector double){1000001.0, 1000000.0};\n+#endif\n+\n+  disp = 8;\n+  vec_d_result2 = vec_xl_be (disp, data_d);\n+\n+#ifdef __BIG_ENDIAN__\n+  vec_d_expected2 = (vector double){1000001.0, 1000002.0};\n+#else\n+  vec_d_expected2 = (vector double){1000002.0, 1000001.0};\n+#endif\n+\n+  for (i = 0; i < 2; i++)\n+    {\n+      if (vec_d_result1[i] != vec_d_expected1[i])\n+        abort ();\n+      if (vec_d_result2[i] != vec_d_expected2[i])\n+        abort ();\n+    }\n+}"}]}