{"sha": "76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZmNzIyZjQ1MjA4NTM4NjM3ZThkM2MzZDVlYTA3MTdiM2JjZGY4Yg==", "commit": {"author": {"name": "Matthew Gretton-Dann", "email": "matthew.gretton-dann@arm.com", "date": "2012-07-05T09:07:00Z"}, "committer": {"name": "Matthew Gretton-Dann", "email": "mgretton@gcc.gnu.org", "date": "2012-07-05T09:07:00Z"}, "message": "iterators.md (SDF): New mode iterator.\n\n\t* gcc/config/arm/iterators.md (SDF): New mode iterator.\n\t(V_if_elem): Add support for SF and DF modes.\n\t(V_reg): Likewise.\n\t(F_constraint): New mode iterator attribute.\n\t(F_fma_type): Likewise.\n\tconfig/arm/vfp.md (fma<SDF:mode>4): New pattern.\n\t(*fmsub<SDF:mode>4): Likewise.\n\t(*fmnsub<SDF:mode>4): Likewise.\n\t(*fmnadd<SDF:mode>4): Likewise.\n\t* gcc/testsuite/gcc.target/arm/fma-sp.c: New testcase.\n\t* gcc/testsuite/gcc.target/arm/fma.c: Likewise.\n\t* gcc/testsuite/gcc.target/arm/fma.h: Likewise.\n\nFrom-SVN: r189283", "tree": {"sha": "298c739f6cfbbc7b572a60db39a1a030bb380ab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/298c739f6cfbbc7b572a60db39a1a030bb380ab7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/comments", "author": {"login": "matt-gretton-dann", "id": 53790742, "node_id": "MDQ6VXNlcjUzNzkwNzQy", "avatar_url": "https://avatars.githubusercontent.com/u/53790742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matt-gretton-dann", "html_url": "https://github.com/matt-gretton-dann", "followers_url": "https://api.github.com/users/matt-gretton-dann/followers", "following_url": "https://api.github.com/users/matt-gretton-dann/following{/other_user}", "gists_url": "https://api.github.com/users/matt-gretton-dann/gists{/gist_id}", "starred_url": "https://api.github.com/users/matt-gretton-dann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matt-gretton-dann/subscriptions", "organizations_url": "https://api.github.com/users/matt-gretton-dann/orgs", "repos_url": "https://api.github.com/users/matt-gretton-dann/repos", "events_url": "https://api.github.com/users/matt-gretton-dann/events{/privacy}", "received_events_url": "https://api.github.com/users/matt-gretton-dann/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b68f9ee5a9569a22522ab0b82d603e2ceacb35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b68f9ee5a9569a22522ab0b82d603e2ceacb35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b68f9ee5a9569a22522ab0b82d603e2ceacb35d"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "2a891e3c34c7feaf58d46cb8049bdc63e57567c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "patch": "@@ -1,3 +1,15 @@\n+2012-07-05  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+\t* config/arm/iterators.md (SDF): New mode iterator.\n+\t(V_if_elem): Add support for SF and DF modes.\n+\t(V_reg): Likewise.\n+\t(F_constraint): New mode iterator attribute.\n+\t(F_fma_type): Likewise.\n+\tconfig/arm/vfp.md (fma<SDF:mode>4): New pattern.\n+\t(*fmsub<SDF:mode>4): Likewise.\n+\t(*fmnsub<SDF:mode>4): Likewise.\n+\t(*fmnadd<SDF:mode>4): Likewise.\n+\n 2012-07-04  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* expmed.c (expand_mult): Initialize coeff and is_neg."}, {"sha": "def8d9f9692648cb50aef502919875aaa4cebedf", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "patch": "@@ -42,6 +42,9 @@\n ;; A list of the 32bit and 64bit integer modes\n (define_mode_iterator SIDI [SI DI])\n \n+;; A list of modes which the VFP unit can handle\n+(define_mode_iterator SDF [(SF \"TARGET_VFP\") (DF \"TARGET_VFP_DOUBLE\")])\n+\n ;; Integer element sizes implemented by IWMMXT.\n (define_mode_iterator VMMX [V2SI V4HI V8QI])\n \n@@ -245,7 +248,8 @@\n                          (V4HI \"P\") (V8HI  \"q\")\n                          (V2SI \"P\") (V4SI  \"q\")\n                          (V2SF \"P\") (V4SF  \"q\")\n-                         (DI   \"P\") (V2DI  \"q\")])\n+                         (DI   \"P\") (V2DI  \"q\")\n+                         (SF   \"\")  (DF    \"P\")])\n \n ;; Wider modes with the same number of elements.\n (define_mode_attr V_widen [(V8QI \"V8HI\") (V4HI \"V4SI\") (V2SI \"V2DI\")])\n@@ -303,7 +307,8 @@\n                  (V4HI \"i16\") (V8HI  \"i16\")\n                              (V2SI \"i32\") (V4SI  \"i32\")\n                              (DI   \"i64\") (V2DI  \"i64\")\n-                 (V2SF \"f32\") (V4SF  \"f32\")])\n+                 (V2SF \"f32\") (V4SF  \"f32\")\n+                 (SF \"f32\") (DF \"f64\")])\n \n ;; Same, but for operations which work on signed values.\n (define_mode_attr V_s_elem [(V8QI \"s8\")  (V16QI \"s8\")\n@@ -423,6 +428,10 @@\n ;; Mode attribute for vshll.\n (define_mode_attr V_innermode [(V8QI \"QI\") (V4HI \"HI\") (V2SI \"SI\")])\n \n+;; Mode attributes used for fused-multiply-accumulate VFP support\n+(define_mode_attr F_constraint [(SF \"t\") (DF \"w\")])\n+(define_mode_attr F_fma_type [(SF \"fmacs\") (DF \"fmacd\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Code attributes\n ;;----------------------------------------------------------------------------"}, {"sha": "3d18ecbc3379c472877e2874e3dc6a00122acab5", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "patch": "@@ -890,6 +890,54 @@\n    (set_attr \"type\" \"fmacd\")]\n )\n \n+;; Fused-multiply-accumulate\n+\n+(define_insn \"fma<SDF:mode>4\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+        (fma:SDF (match_operand:SDF 1 \"register_operand\" \"<F_constraint>\")\n+\t\t (match_operand:SDF 2 \"register_operand\" \"<F_constraint>\")\n+\t\t (match_operand:SDF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n+  \"vfma%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"<F_fma_type>\")]\n+)\n+\n+(define_insn \"*fmsub<SDF:mode>4\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+\t(fma:SDF (neg:SDF (match_operand:SDF 1 \"register_operand\"\n+\t\t\t\t\t     \"<F_constraint>\"))\n+\t\t (match_operand:SDF 2 \"register_operand\" \"<F_constraint>\")\n+\t\t (match_operand:SDF 3 \"register_operand\" \"0\")))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n+  \"vfms%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"<F_fma_type>\")]\n+)\n+\n+(define_insn \"*fnmsub<SDF:mode>4\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+\t(fma:SDF (match_operand:SDF 1 \"register_operand\" \"<F_constraint>\")\n+\t\t (match_operand:SDF 2 \"register_operand\" \"<F_constraint>\")\n+\t\t (neg:SDF (match_operand:SDF 3 \"register_operand\" \"0\"))))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n+  \"vfnms%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"<F_fma_type>\")]\n+)\n+\n+(define_insn \"*fnmadd<SDF:mode>4\"\n+  [(set (match_operand:SDF 0 \"register_operand\" \"=<F_constraint>\")\n+\t(fma:SDF (neg:SDF (match_operand:SDF 1 \"register_operand\"\n+\t\t\t\t\t       \"<F_constraint>\"))\n+\t\t (match_operand:SDF 2 \"register_operand\" \"<F_constraint>\")\n+\t\t (neg:SDF (match_operand:SDF 3 \"register_operand\" \"0\"))))]\n+  \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_FMA\"\n+  \"vfnma%?.<V_if_elem>\\\\t%<V_reg>0, %<V_reg>1, %<V_reg>2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"<F_fma_type>\")]\n+)\n+\n \n ;; Conversion routines\n "}, {"sha": "1b8856438efd267a8c6c7f5d452353d0f00c5ed7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76f722f45208538637e8d3c3d5ea0717b3bcdf8b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76f722f45208538637e8d3c3d5ea0717b3bcdf8b", "patch": "@@ -1,3 +1,9 @@\n+2012-07-05  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+\t* gcc.target/arm/fma-sp.c: New testcase.\n+\t* gcc.target/arm/fma.c: Likewise.\n+\t* gcc.target/arm/fma.h: Likewise.\n+\n 2012-07-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53848"}]}