{"sha": "f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0MjZkMWU5YjQyMDhlYmJkZDljZGM0YzYxM2Y3ZmRhOWJjOThlZA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-02-01T11:45:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-01T11:45:10Z"}, "message": "decl.c (init_decl_processing): Use set_sizetype.\n\n        * decl.c (init_decl_processing): Use set_sizetype.\n        * decl2.c (sizetype): Don't declare.\n        * typeck.c (c_sizeof): Convert result of *_DIV_EXPR to sizetype.\n        (c_sizeof_nowarn, build_binary_op_nodefault): Likewise.\n        (build_component_addr, unary_complex_lvalue): Likewise.\n        * rtti.c (expand_class_desc): Likewise.\n        * class.c (get_vfield_offset): Likewise.\n\nFrom-SVN: r17576", "tree": {"sha": "4a2c748f8f09ae64207cec384fbc31b6e7cf20a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a2c748f8f09ae64207cec384fbc31b6e7cf20a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/comments", "author": null, "committer": null, "parents": [{"sha": "c8bec8c8be93e4002280fe8ee9f7c3c067cd83ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8bec8c8be93e4002280fe8ee9f7c3c067cd83ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8bec8c8be93e4002280fe8ee9f7c3c067cd83ea"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "4bd271f71342dc8ca3cb88e5e36f661623d1c1a0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -1,3 +1,13 @@\n+Sun Feb  1 12:45:34 1998 J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* decl.c (init_decl_processing): Use set_sizetype.\n+\t* decl2.c (sizetype): Don't declare.\n+\t* typeck.c (c_sizeof): Convert result of *_DIV_EXPR to sizetype.\n+\t(c_sizeof_nowarn, build_binary_op_nodefault): Likewise.\n+\t(build_component_addr, unary_complex_lvalue): Likewise.\n+\t* rtti.c (expand_class_desc): Likewise.\n+\t* class.c (get_vfield_offset): Likewise.\n+\n Thu Jan 29 10:39:30 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* pt.c (convert_nontype_argument): Move check for is_overloaded_fn"}, {"sha": "c1afde4d9cc608a780f4a3941744d4f3aec1ecb7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -606,11 +606,12 @@ tree\n get_vfield_offset (binfo)\n      tree binfo;\n {\n-  return size_binop (PLUS_EXPR,\n-\t\t     size_binop (FLOOR_DIV_EXPR,\n-\t\t\t\t DECL_FIELD_BITPOS (CLASSTYPE_VFIELD (BINFO_TYPE (binfo))),\n-\t\t\t\t size_int (BITS_PER_UNIT)),\n-\t\t     BINFO_OFFSET (binfo));\n+  tree tmp\n+    = size_binop (FLOOR_DIV_EXPR,\n+\t\t  DECL_FIELD_BITPOS (CLASSTYPE_VFIELD (BINFO_TYPE (binfo))),\n+\t\t  size_int (BITS_PER_UNIT));\n+  tmp = convert (sizetype, tmp);\n+  return size_binop (PLUS_EXPR, tmp, BINFO_OFFSET (binfo));\n }\n \n /* Get the offset to the start of the original binfo that we derived"}, {"sha": "c939b42d965dd7161877d4cff97e35e31beb28fc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -4998,23 +4998,13 @@ init_decl_processing ()\n \n   /* `unsigned long' is the standard type for sizeof.\n      Note that stddef.h uses `unsigned long',\n-     and this must agree, even of long and int are the same size.  */\n-  sizetype\n-    = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (SIZE_TYPE)));\n+     and this must agree, even if long and int are the same size.  */\n+  set_sizetype\n+    (TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (SIZE_TYPE))));\n \n   ptrdiff_type_node\n     = TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (PTRDIFF_TYPE)));\n \n-  TREE_TYPE (TYPE_SIZE (integer_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (char_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (unsigned_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (long_unsigned_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (long_integer_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (long_long_integer_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (long_long_unsigned_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (short_integer_type_node)) = sizetype;\n-  TREE_TYPE (TYPE_SIZE (short_unsigned_type_node)) = sizetype;\n-\n   /* Define both `signed char' and `unsigned char'.  */\n   signed_char_type_node = make_signed_type (CHAR_TYPE_SIZE);\n   record_builtin_type (RID_MAX, \"signed char\", signed_char_type_node);"}, {"sha": "4290f71b696cb364ada684d4300cf38c4f0451e3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -2370,8 +2370,6 @@ finish_builtin_type (type, name, fields, len, align_type)\n    `operator new' and `operator delete' correspond to\n    what compiler will be expecting.  */\n \n-extern tree sizetype;\n-\n tree\n coerce_new_type (type)\n      tree type;"}, {"sha": "5f2e32965c355ae0c41527079bb1fff9ff956c1a", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -3502,7 +3502,7 @@ static const short yycheck[] = {     4,\n     76,    77,    78,    79,    80,    81,    82,    83,    84,    85\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/lib/bison.simple\"\n+#line 3 \"/usr/share/bison.simple\"\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -3695,7 +3695,7 @@ __yy_memcpy (char *to, char *from, int count)\n #endif\n #endif\n \f\n-#line 196 \"/usr/lib/bison.simple\"\n+#line 196 \"/usr/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -8456,7 +8456,7 @@ case 842:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 498 \"/usr/lib/bison.simple\"\n+#line 498 \"/usr/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;"}, {"sha": "b4e79593e65c39fab1756f40ff046a9dac4885ea", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -785,6 +785,7 @@ expand_class_desc (tdecl, type)\n \t  field = lookup_field (type, get_identifier (name), 0, 0);\n \t  offset = size_binop (FLOOR_DIV_EXPR, \n \t\tDECL_FIELD_BITPOS (field), size_int (BITS_PER_UNIT));\n+\t  offset = convert (sizetype, offset);\n \t}\n       else\n \toffset = BINFO_OFFSET (binfo);"}, {"sha": "76302a8c634ae91f2bbe61629b03c6c21a12fc6f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f5426d1e9b4208ebbdd9cdc4c613f7fda9bc98ed", "patch": "@@ -1403,6 +1403,7 @@ c_sizeof (type)\n   /* Convert in case a char is more than one unit.  */\n   t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type), \n \t\t  size_int (TYPE_PRECISION (char_type_node)));\n+  t = convert (sizetype, t);\n   /* size_binop does not put the constant in range, so do it now.  */\n   if (TREE_CODE (t) == INTEGER_CST && force_fit_type (t, 0))\n     TREE_CONSTANT_OVERFLOW (t) = TREE_OVERFLOW (t) = 1;\n@@ -1460,6 +1461,7 @@ c_sizeof_nowarn (type)\n   /* Convert in case a char is more than one unit.  */\n   t = size_binop (CEIL_DIV_EXPR, TYPE_SIZE (type), \n \t\t  size_int (TYPE_PRECISION (char_type_node)));\n+  t = convert (sizetype, t);\n   force_fit_type (t, 0);\n   return t;\n }\n@@ -3537,6 +3539,7 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n \t      delta21 = CLASSTYPE_VFIELD (TYPE_METHOD_BASETYPE (TREE_TYPE (type1)));\n \t      delta21 = DECL_FIELD_BITPOS (delta21);\n \t      delta21 = size_binop (FLOOR_DIV_EXPR, delta21, size_int (BITS_PER_UNIT));\n+\t      delta21 = convert (sizetype, delta21);\n \t    }\n \t  else\n \t    index1 = integer_neg_one_node;\n@@ -4092,6 +4095,7 @@ build_component_addr (arg, argtype, msg)\n       tree offset = size_binop (EASY_DIV_EXPR, DECL_FIELD_BITPOS (field),\n \t\t\t\tsize_int (BITS_PER_UNIT));\n       int flag = TREE_CONSTANT (rval);\n+      offset = convert (sizetype, offset);\n       rval = fold (build (PLUS_EXPR, argtype,\n \t\t\t  rval, cp_convert (argtype, offset)));\n       TREE_CONSTANT (rval) = flag;\n@@ -4746,9 +4750,10 @@ unary_complex_lvalue (code, arg)\n \n \t  /* Add in the offset to the field.  */\n \t  offset = size_binop (PLUS_EXPR, offset,\n-\t\t\t       size_binop (EASY_DIV_EXPR,\n-\t\t\t\t\t   DECL_FIELD_BITPOS (t),\n-\t\t\t\t\t   size_int (BITS_PER_UNIT)));\n+\t\t\t       convert (sizetype,\n+\t\t\t\t\tsize_binop (EASY_DIV_EXPR,\n+\t\t\t\t\t\t    DECL_FIELD_BITPOS (t),\n+\t\t\t\t\t\t    size_int (BITS_PER_UNIT))));\n \n \t  /* We offset all pointer to data members by 1 so that we can\n \t     distinguish between a null pointer to data member and the first"}]}