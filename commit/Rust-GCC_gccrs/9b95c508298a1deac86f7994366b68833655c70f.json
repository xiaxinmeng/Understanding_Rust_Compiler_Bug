{"sha": "9b95c508298a1deac86f7994366b68833655c70f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI5NWM1MDgyOThhMWRlYWM4NmY3OTk0MzY2YjY4ODMzNjU1YzcwZg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-14T14:36:44Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-14T14:36:44Z"}, "message": "Allow GCC to decide and perofmr inline optimizations\n\nThe GCC wrapper here was forked from the go front-end and by default all\nfunctions are marked as DECL_UNINLINABLE such that the stack frame info\nis preserved for panic recovery. This is not the case for Rust and by\ndefault allows for inline optimizations here.\n\nThis patch changes the flag to be that if you wish to ensure a function\nis uninlineable you msut specify that specific flag for that function and\nby default GCC what optimisations to perform.", "tree": {"sha": "c2c1ce6197d89beb2eda7a8def421611cf79a639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c1ce6197d89beb2eda7a8def421611cf79a639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b95c508298a1deac86f7994366b68833655c70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b95c508298a1deac86f7994366b68833655c70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b95c508298a1deac86f7994366b68833655c70f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b95c508298a1deac86f7994366b68833655c70f/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c644ee4c4351e3590f5396e94ec24ad7b828a954", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c644ee4c4351e3590f5396e94ec24ad7b828a954", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c644ee4c4351e3590f5396e94ec24ad7b828a954"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "a4de0a32bc917f8c73cc4529841378b0f5a45e92", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95c508298a1deac86f7994366b68833655c70f/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95c508298a1deac86f7994366b68833655c70f/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=9b95c508298a1deac86f7994366b68833655c70f", "patch": "@@ -830,10 +830,9 @@ class Backend\n   // the definition will be in another compilation unit.\n   static const unsigned int function_is_declaration = 1 << 1;\n \n-  // Set if the function can be inlined.  This is normally set, but is\n-  // false for functions that may not be inlined because they call\n+  // Set if the function should never be inlined because they call\n   // recover and must be visible for correct panic recovery.\n-  static const unsigned int function_is_inlinable = 1 << 2;\n+  static const unsigned int function_is_uninlinable = 1 << 2;\n \n   // Set if the function does not return.  This is set for the\n   // implementation of panic."}, {"sha": "efc78238578b204d0913683b573afd3ea1ef25c2", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b95c508298a1deac86f7994366b68833655c70f/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b95c508298a1deac86f7994366b68833655c70f/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=9b95c508298a1deac86f7994366b68833655c70f", "patch": "@@ -3370,7 +3370,7 @@ Gcc_backend::function (Btype *fntype, const std::string &name,\n       DECL_CONTEXT (resdecl) = decl;\n       DECL_RESULT (decl) = resdecl;\n     }\n-  if ((flags & function_is_inlinable) == 0)\n+  if ((flags & function_is_uninlinable) != 0)\n     DECL_UNINLINABLE (decl) = 1;\n   if ((flags & function_does_not_return) != 0)\n     TREE_THIS_VOLATILE (decl) = 1;"}]}