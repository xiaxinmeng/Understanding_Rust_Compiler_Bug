{"sha": "e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRhNGViZDMxNjBlN2I2YzJjMTFmNmNlYzhmZjExYjJlODZhNDhkMQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-05T21:03:18Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-05-05T21:03:18Z"}, "message": "In DejaGnu directives, simplify 'target { *-*-* }' to 'target *-*-*'\n\nNo change in behavior.", "tree": {"sha": "45874f9b4c3c0cbddcb320624480d3e6d6cb307e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45874f9b4c3c0cbddcb320624480d3e6d6cb307e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96ab2e1a9539d1bb6a807774b9afe061de68fc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96ab2e1a9539d1bb6a807774b9afe061de68fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96ab2e1a9539d1bb6a807774b9afe061de68fc4"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "76e082a6d578862a6afe97a5b4e3583b87c4a8b4", "filename": "gcc/testsuite/rust.test/xfail_compile/array_empty_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farray_empty_list.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farray_empty_list.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farray_empty_list.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let arr = [];\n-    // { dg-error \"type annotations needed\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"type annotations needed\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "9c788dbb98f775c142072c3ad5f4cba823abc5be", "filename": "gcc/testsuite/rust.test/xfail_compile/arrays2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Farrays2.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let array: [i32; 5] = [1, 2, 3];\n-    // { dg-error \"expected ..i32:5.. got ..i32:3..\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"expected ..i32:5.. got ..i32:3..\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "74f2809744c4f120dd8c7a95d51f1fb9b3fc801f", "filename": "gcc/testsuite/rust.test/xfail_compile/break1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     let a;\n     a = 1;\n     break a; // { dg-error \"cannot `break` outside of a loop\" }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "185f898515c2f93c72ddf4e03388230d3e47dfc4", "filename": "gcc/testsuite/rust.test/xfail_compile/break2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fbreak2.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     while b > 10 {\n         if (b == 2) {\n             break b;  // { dg-error \"can only break with a value inside `loop`\"\n-            // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-1 }\n+            // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         }\n         c = a + b;\n         a = b;"}, {"sha": "7d8e083c9f315f937542bb6d053144b9af5e6727", "filename": "gcc/testsuite/rust.test/xfail_compile/continue1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fcontinue1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fcontinue1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fcontinue1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -4,7 +4,7 @@ fn main() {\n \n     let _fib = {\n         continue; // { dg-error \"cannot `continue` outside of a loop\" }\n-        // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-1 }\n+        // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-1 }\n         123\n     };\n }"}, {"sha": "1dbe95731e1d7ef1763dc6fef9a0d5fb34bb31ae", "filename": "gcc/testsuite/rust.test/xfail_compile/deadcode_err1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fdeadcode_err1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -3,7 +3,7 @@ fn foo() -> i32 {\n \n     let mut a = 1; // { dg-warning \"unreachable statement\" }\n     a = 1.1; // { dg-warning \"unreachable statement\" }\n-    // { dg-error \"expected .<integer>. got .<float>.\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"expected .<integer>. got .<float>.\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {"}, {"sha": "79454202aadf85fd9db5588626979349583794ea", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args2.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -2,5 +2,5 @@ struct Foo<A>(A);\n \n fn main() {\n     let a: Foo = Foo::<i32>(123);\n-    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "ba07239207a6adfd10a6b8134e1f6973f8552f62", "filename": "gcc/testsuite/rust.test/xfail_compile/expected_type_args3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fexpected_type_args3.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,7 +1,7 @@\n struct Foo<A>(A);\n \n impl Foo {\n-    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"generic item takes at least 1 type arguments but 0 were supplied\" \"\" { target *-*-* } .-1 }\n     fn test() -> i32 {\n         123\n     }"}, {"sha": "240ea97916f70a9e12a7ad972afde34ff2e4bf04", "filename": "gcc/testsuite/rust.test/xfail_compile/func2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ffunc2.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -5,6 +5,6 @@ fn test(a: i32, b: i32) -> i32 {\n \n fn main() {\n     let a = test(1); // { dg-error \"unexpected number of arguments 1 expected 2\"\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target { *-*-* } } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-2 }\n+    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "1b04f7d039aceccdbb9c3da74d6186cab933664f", "filename": "gcc/testsuite/rust.test/xfail_compile/generic-default1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgeneric-default1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgeneric-default1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgeneric-default1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-error \"unresolved type\" \"\" { target { *-*-* } } 0 }\n+// { dg-error \"unresolved type\" \"\" { target *-*-* } 0 }\n \n struct Foo<A = i321>(A);\n // { dg-error \"failed to resolve TypePath: i321\" \"\" { target *-*-* } .-1 }"}, {"sha": "de1bbf5dafb12a27c178ad7077418aa9dfc7e972", "filename": "gcc/testsuite/rust.test/xfail_compile/generics1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-error \"expected .i32. got .i8.\" \"\" { target { *-*-* } } 0 }\n+// { dg-error \"expected .i32. got .i8.\" \"\" { target *-*-* } 0 }\n \n struct GenericStruct<T>(T, usize);\n "}, {"sha": "4d3b9e1777c1ea3c2ffb077d6bfce9243f4ee7c9", "filename": "gcc/testsuite/rust.test/xfail_compile/generics11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics11.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -8,5 +8,5 @@ impl<T> Foo<T> {\n \n fn main() {\n     let a = Foo::test();\n-    // { dg-error \"type annotations needed\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"type annotations needed\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "5812b1330388420fb5855addca4c2441c394006b", "filename": "gcc/testsuite/rust.test/xfail_compile/generics2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics2.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-error \"expected .i32. got .i8.\" \"\" { target { *-*-* } } 0 }\n+// { dg-error \"expected .i32. got .i8.\" \"\" { target *-*-* } 0 }\n \n struct GenericStruct<T>(T, usize);\n "}, {"sha": "2d4210588fb50dbaf35c9b85ca41c2c0d0b9f360", "filename": "gcc/testsuite/rust.test/xfail_compile/generics3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics3.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-error \"expected .i32. got .i8.\" \"\" { target { *-*-* } } 0 }\n+// { dg-error \"expected .i32. got .i8.\" \"\" { target *-*-* } 0 }\n struct GenericStruct<T>(T, usize);\n \n fn main() {"}, {"sha": "e70afa8158d7e4c1e60106e34a3201beec26e0d1", "filename": "gcc/testsuite/rust.test/xfail_compile/generics5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics5.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,6 +1,6 @@\n // Current errors are too noisy to match specific ones.\n-// { dg-error \"failed to resolve TypePath: T\" \"\" { target { *-*-* } } 0 }\n-// { dg-error \"unresolved type\" \"\" { target { *-*-* } } 0 }\n+// { dg-error \"failed to resolve TypePath: T\" \"\" { target *-*-* } 0 }\n+// { dg-error \"unresolved type\" \"\" { target *-*-* } 0 }\n \n struct GenericStruct<T>(T, usize);\n "}, {"sha": "3c5a24486bae79ab5aec8ae833f06ee6adf370f9", "filename": "gcc/testsuite/rust.test/xfail_compile/generics9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fgenerics9.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,6 +1,6 @@\n // { dg-excess-errors \"Noisy error and debug\" }\n struct Foo<A, B = (A, B)>(A, B);\n-// { dg-error \"failed to resolve TypePath: B\" \"\" { target { *-*-* } } .-1 }\n+// { dg-error \"failed to resolve TypePath: B\" \"\" { target *-*-* } .-1 }\n \n fn main() {\n     let a: Foo<bool>;"}, {"sha": "00bf393dbb9759208cc3236579bdcb1fcf17a0e5", "filename": "gcc/testsuite/rust.test/xfail_compile/missing_return1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fmissing_return1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fmissing_return1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fmissing_return1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,4 +1,4 @@\n-// { dg-error \"expected .* got .*\" \"\" { target { *-*-* } } 0 }\n+// { dg-error \"expected .* got .*\" \"\" { target *-*-* } 0 }\n fn test1() -> i32 {}\n \n fn main() {"}, {"sha": "0554f29b2ca5a9a837b85ac43ded5d077edfef21", "filename": "gcc/testsuite/rust.test/xfail_compile/struct_init1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstruct_init1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstruct_init1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Fstruct_init1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -5,5 +5,5 @@ struct Foo {\n \n fn main() {\n     let a = Foo { 0: 10.0, 1: 20.0 }; // { dg-error \"failed to resolve type for field\" }\n-    // { dg-error \"unknown field\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"unknown field\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "87e4c3b3d98944a571bcba45b3c100e3c42e6582", "filename": "gcc/testsuite/rust.test/xfail_compile/tuple_struct1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple_struct1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple_struct1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple_struct1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -5,6 +5,6 @@ struct Foo {\n \n fn main() {\n     let a = Foo(1, 2); // { dg-error \"expected function, tuple struct or tuple variant, found struct `Foo`\" }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target { *-*-* } } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-2 }\n+    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "dba0511a3bde5c059d3dee8f7cd9712c426aa350", "filename": "gcc/testsuite/rust.test/xfail_compile/tuple_struct2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple_struct2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple_struct2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftuple_struct2.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -2,6 +2,6 @@ struct Bar(i32, i32, bool);\n \n fn main() {\n     let a = Bar(1, 2); // { dg-error \"unexpected number of arguments 2 expected 3\" }\n-    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target { *-*-* } } .-1 }\n-    // { dg-error \"failed to type resolve expression\" \"\" { target { *-*-* } } .-2 }\n+    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "4cd045cbbed93a432979e1fcddd813a2d0b12ab5", "filename": "gcc/testsuite/rust.test/xfail_compile/type-bindings1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Ftype-bindings1.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -4,5 +4,5 @@ struct Foo<A, B>(A, B);\n fn main() {\n     let a;\n     a = Foo::<A = i32, B = f32>(123f32);\n-    // { dg-error \"associated type bindings are not allowed here\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"associated type bindings are not allowed here\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "c4aaa10146f2a0e239cef21f1d1b4a98e5e9f411", "filename": "gcc/testsuite/rust.test/xfail_compile/unconstrained_type_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funconstrained_type_param.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funconstrained_type_param.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funconstrained_type_param.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,7 +1,7 @@\n struct Foo<T>(T, bool);\n \n impl<X, Y> Foo<X> {\n-    // { dg-error \"unconstrained type parameter\" \"\" { target { *-*-* } } .-1 }\n+    // { dg-error \"unconstrained type parameter\" \"\" { target *-*-* } .-1 }\n     fn test() -> Y {\n         123\n     }"}, {"sha": "619b7b7024d6aa8ca763593e562062eaa0135653", "filename": "gcc/testsuite/rust.test/xfail_compile/unterminated_c_comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funterminated_c_comment.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funterminated_c_comment.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fxfail_compile%2Funterminated_c_comment.rs?ref=e4a4ebd3160e7b6c2c11f6cec8ff11b2e86a48d1", "patch": "@@ -1,2 +1,2 @@\n-// { dg-error \"unexpected EOF while looking for end of comment\" \"\" { target { *-*-* } } .+1 }\n+// { dg-error \"unexpected EOF while looking for end of comment\" \"\" { target *-*-* } .+1 }\n /* This  comment needs closure :) !"}]}