{"sha": "3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I5Y2ViNGI0ZmQ2NTdmYWYwMzFjYzVmYzQ3YWNjNGVjYWUwYWQ4OA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2013-05-30T20:30:38Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2013-05-30T20:30:38Z"}, "message": "target.def (register_usage_leveling_p): New hook.\n\n2013-05-30  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* target.def (register_usage_leveling_p): New hook.\n\t* targhooks.c (default_register_usage_leveling_p): New.\n\t* targhooks.h (default_register_usage_leveling_p): New prototype.\n\t* lra-assigns.c (register_usage_leveling_p): Use the hook.\n\t* doc/tm.texi.in (TARGET_REGISTER_USAGE_LEVELING_P): New hook.\n\t* doc/tm.texi: Update.\n\t* config/i386/i386.c (TARGET_REGISTER_USAGE_LEVELING_P): Define.\n\nFrom-SVN: r199459", "tree": {"sha": "16088611f26652c55d7f6a9b476049876bd2cdc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16088611f26652c55d7f6a9b476049876bd2cdc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc059bdd149ced1b66f912c54c8f435379abb4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc059bdd149ced1b66f912c54c8f435379abb4ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc059bdd149ced1b66f912c54c8f435379abb4ad"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "ddd2a30fbf6adb17526867719c2148050e7abed0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -1,3 +1,13 @@\n+2013-05-30  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* target.def (register_usage_leveling_p): New hook.\n+\t* targhooks.c (default_register_usage_leveling_p): New.\n+\t* targhooks.h (default_register_usage_leveling_p): New prototype.\n+\t* lra-assigns.c (register_usage_leveling_p): Use the hook.\n+\t* doc/tm.texi.in (TARGET_REGISTER_USAGE_LEVELING_P): New hook.\n+\t* doc/tm.texi: Update.\n+\t* config/i386/i386.c (TARGET_REGISTER_USAGE_LEVELING_P): Define.\n+\n 2013-05-30  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64.md (insv<mode>): New define_expand."}, {"sha": "e8f47c9d417dbbd6d55cbeb7c7548f8324f4c2fd", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -42812,6 +42812,9 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_REGISTER_PRIORITY\n #define TARGET_REGISTER_PRIORITY ix86_register_priority\n \n+#undef TARGET_REGISTER_USAGE_LEVELING_P\n+#define TARGET_REGISTER_USAGE_LEVELING_P hook_bool_void_true\n+\n #undef TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P ix86_legitimate_constant_p\n "}, {"sha": "f8404814c965bb72d18c7a1a057432e350358a82", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -2898,6 +2898,10 @@ A target hook which returns true if we use LRA instead of reload pass.  It means\n A target hook which returns the register priority number to which the  register @var{hard_regno} belongs to.  The bigger the number, the  more preferable the hard register usage (when all other conditions are  the same).  This hook can be used to prefer some hard register over  others in LRA.  For example, some x86-64 register usage needs  additional prefix which makes instructions longer.  The hook can  return lower priority number for such registers make them less favorable  and as result making the generated code smaller.    The default version of this target hook returns always zero.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_REGISTER_USAGE_LEVELING_P (void)\n+A target hook which returns true if we need register usage leveling.  That means if a few hard registers are equally good for the  assignment, we choose the least used hard register.  The register  usage leveling may be profitable for some targets.  Don't use the  usage leveling for targets with conditional execution or targets  with big register files as it hurts if-conversion and cross-jumping  optimizations.    The default version of this target hook returns always false.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_DIFFERENT_ADDR_DISPLACEMENT_P (void)\n A target hook which returns true if an address with the same structure  can have different maximal legitimate displacement.  For example, the  displacement can depend on memory mode or on operand combinations in  the insn.    The default version of this target hook returns always false.\n @end deftypefn"}, {"sha": "b08dece763aca1b0de075b6dbf2f9ba1cf857915", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -2870,6 +2870,8 @@ as below:\n \n @hook TARGET_REGISTER_PRIORITY\n \n+@hook TARGET_REGISTER_USAGE_LEVELING_P\n+\n @hook TARGET_DIFFERENT_ADDR_DISPLACEMENT_P\n \n @hook TARGET_SPILL_CLASS"}, {"sha": "9719f0dc9e70fa3a58fa58305d891c7027c2b21a", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -603,11 +603,7 @@ find_hard_regno_for (int regno, int *cost, int try_only_hard_regno)\n \t  if (best_hard_regno < 0 || hard_regno_costs[hard_regno] < best_cost\n \t      || (hard_regno_costs[hard_regno] == best_cost\n \t\t  && (priority > best_priority\n-\t\t      /* Hard register usage leveling actually results\n-\t\t\t in bigger code for targets with conditional\n-\t\t\t execution like ARM because it reduces chance\n-\t\t\t of if-conversion after LRA.  */\n-\t\t      || (! targetm.have_conditional_execution ()\n+\t\t      || (targetm.register_usage_leveling_p ()\n \t\t\t  && priority == best_priority\n \t\t\t  && best_usage > lra_hard_reg_usage[hard_regno]))))\n \t    {"}, {"sha": "3ba3e0a24541e598a4f6812478052540b80860ee", "filename": "gcc/target.def", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -2444,6 +2444,21 @@ DEFHOOK\n  int, (int),\n  default_register_priority)\n \n+/* Return true if we need register usage leveling.  */\n+DEFHOOK\n+(register_usage_leveling_p,\n+ \"A target hook which returns true if we need register usage leveling.\\\n+  That means if a few hard registers are equally good for the\\\n+  assignment, we choose the least used hard register.  The register\\\n+  usage leveling may be profitable for some targets.  Don't use the\\\n+  usage leveling for targets with conditional execution or targets\\\n+  with big register files as it hurts if-conversion and cross-jumping\\\n+  optimizations.\\\n+  \\\n+  The default version of this target hook returns always false.\",\n+ bool, (void),\n+ default_register_usage_leveling_p)\n+\n /* Return true if maximal address displacement can be different.  */\n DEFHOOK\n (different_addr_displacement_p,"}, {"sha": "d3a3f5fdd425da66ea9efe11f2bd6238194a6153", "filename": "gcc/targhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -858,6 +858,12 @@ default_register_priority (int hard_regno ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n+extern bool\n+default_register_usage_leveling_p (void)\n+{\n+  return false;\n+}\n+\n extern bool\n default_different_addr_displacement_p (void)\n {"}, {"sha": "2da6fb80631eb77dd9db8769cbf9355cb8405ba5", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=3b9ceb4b4fd657faf031cc5fc47acc4ecae0ad88", "patch": "@@ -135,6 +135,7 @@ extern int default_return_pops_args (tree, tree, int);\n extern reg_class_t default_branch_target_register_class (void);\n extern bool default_lra_p (void);\n extern int default_register_priority (int);\n+extern bool default_register_usage_leveling_p (void);\n extern bool default_different_addr_displacement_p (void);\n extern reg_class_t default_secondary_reload (bool, rtx, reg_class_t,\n \t\t\t\t\t     enum machine_mode,"}]}