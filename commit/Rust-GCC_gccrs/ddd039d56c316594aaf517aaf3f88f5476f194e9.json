{"sha": "ddd039d56c316594aaf517aaf3f88f5476f194e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRkMDM5ZDU2YzMxNjU5NGFhZjUxN2FhZjNmODhmNTQ3NmYxOTRlOQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-09-18T15:32:43Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2006-09-18T15:32:43Z"}, "message": "re PR c++/29087 (More than 35000 switch cases crash cc1plus)\n\n        PR c++/29087\n        * parser.c (cp_parser_labeled_statement): Return nothing.  Do\n        not take in_statement_expr and in_compound as arguments.  Rename\n        to cp_parser_label_for_labeled_statement.  Parse only the label,\n        not the statement.\n        (cp_parser_statement): Parse the statement of a labeled-statement\n        from here, using tail recursion.\n\nFrom-SVN: r117026", "tree": {"sha": "b078e073a156ddbebc4d47dac5106373b2fd6ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b078e073a156ddbebc4d47dac5106373b2fd6ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddd039d56c316594aaf517aaf3f88f5476f194e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd039d56c316594aaf517aaf3f88f5476f194e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd039d56c316594aaf517aaf3f88f5476f194e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd039d56c316594aaf517aaf3f88f5476f194e9/comments", "author": null, "committer": null, "parents": [{"sha": "cbe5ba46e06140450d8cea2e2f61e394cdb14187", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbe5ba46e06140450d8cea2e2f61e394cdb14187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbe5ba46e06140450d8cea2e2f61e394cdb14187"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "a5d403a600f3d684c3f99237166c341149122594", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd039d56c316594aaf517aaf3f88f5476f194e9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd039d56c316594aaf517aaf3f88f5476f194e9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ddd039d56c316594aaf517aaf3f88f5476f194e9", "patch": "@@ -1,3 +1,13 @@\n+2006-09-18  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR c++/29087\n+\t* parser.c (cp_parser_labeled_statement): Return nothing.  Do\n+\tnot take in_statement_expr and in_compound as arguments.  Rename\n+\tto cp_parser_label_for_labeled_statement.  Parse only the label,\n+\tnot the statement.\n+\t(cp_parser_statement): Parse the statement of a labeled-statement\n+\tfrom here, using tail recursion.\n+\n 2006-09-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR C++/29002"}, {"sha": "d0205208eb33b54408abc8c870887b004971b72d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 28, "deletions": 33, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddd039d56c316594aaf517aaf3f88f5476f194e9/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddd039d56c316594aaf517aaf3f88f5476f194e9/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ddd039d56c316594aaf517aaf3f88f5476f194e9", "patch": "@@ -1451,8 +1451,8 @@ static tree cp_parser_builtin_offsetof\n \n static void cp_parser_statement\n   (cp_parser *, tree, bool);\n-static tree cp_parser_labeled_statement\n-  (cp_parser *, tree, bool);\n+static void cp_parser_label_for_labeled_statement\n+  (cp_parser *);\n static tree cp_parser_expression_statement\n   (cp_parser *, tree);\n static tree cp_parser_compound_statement\n@@ -6117,9 +6117,11 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t{\n \tcase RID_CASE:\n \tcase RID_DEFAULT:\n-\t  statement = cp_parser_labeled_statement (parser, in_statement_expr,\n-\t\t\t\t\t\t   in_compound);\n-\t  break;\n+\t  /* Looks like a labeled-statement with a case label.\n+\t     Parse the label, and then use tail recursion to parse\n+\t     the statement.  */\n+\t  cp_parser_label_for_labeled_statement (parser);\n+\t  goto restart;\n \n \tcase RID_IF:\n \tcase RID_SWITCH:\n@@ -6164,8 +6166,13 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n \t labeled-statement.  */\n       token = cp_lexer_peek_nth_token (parser->lexer, 2);\n       if (token->type == CPP_COLON)\n-\tstatement = cp_parser_labeled_statement (parser, in_statement_expr,\n-\t\t\t\t\t\t in_compound);\n+\t{\n+\t  /* Looks like a labeled-statement with an ordinary label.\n+\t     Parse the label, and then use tail recursion to parse\n+\t     the statement.  */\n+\t  cp_parser_label_for_labeled_statement (parser);\n+\t  goto restart;\n+\t}\n     }\n   /* Anything that starts with a `{' must be a compound-statement.  */\n   else if (token->type == CPP_OPEN_BRACE)\n@@ -6215,38 +6222,31 @@ cp_parser_statement (cp_parser* parser, tree in_statement_expr,\n     SET_EXPR_LOCATION (statement, statement_location);\n }\n \n-/* Parse a labeled-statement.\n+/* Parse the label for a labeled-statement, i.e.\n \n-   labeled-statement:\n-     identifier : statement\n-     case constant-expression : statement\n-     default : statement\n+   identifier :\n+   case constant-expression :\n+   default :\n \n    GNU Extension:\n+   case constant-expression ... constant-expression : statement\n \n-   labeled-statement:\n-     case constant-expression ... constant-expression : statement\n-\n-   Returns the new CASE_LABEL_EXPR, for a `case' or `default' label.\n-   For an ordinary label, returns a LABEL_EXPR.\n-\n-   IN_COMPOUND is as for cp_parser_statement: true when we're nested\n-   inside a compound.  */\n+   When a label is parsed without errors, the label is added to the\n+   parse tree by the finish_* functions, so this function doesn't\n+   have to return the label.  */\n \n-static tree\n-cp_parser_labeled_statement (cp_parser* parser, tree in_statement_expr,\n-\t\t\t     bool in_compound)\n+static void\n+cp_parser_label_for_labeled_statement (cp_parser* parser)\n {\n   cp_token *token;\n-  tree statement = error_mark_node;\n \n   /* The next token should be an identifier.  */\n   token = cp_lexer_peek_token (parser->lexer);\n   if (token->type != CPP_NAME\n       && token->type != CPP_KEYWORD)\n     {\n       cp_parser_error (parser, \"expected labeled-statement\");\n-      return error_mark_node;\n+      return;\n     }\n \n   switch (token->keyword)\n@@ -6279,7 +6279,7 @@ cp_parser_labeled_statement (cp_parser* parser, tree in_statement_expr,\n \t  expr_hi = NULL_TREE;\n \n \tif (parser->in_switch_statement_p)\n-\t  statement = finish_case_label (expr, expr_hi);\n+\t  finish_case_label (expr, expr_hi);\n \telse\n \t  error (\"case label %qE not within a switch statement\", expr);\n       }\n@@ -6290,24 +6290,19 @@ cp_parser_labeled_statement (cp_parser* parser, tree in_statement_expr,\n       cp_lexer_consume_token (parser->lexer);\n \n       if (parser->in_switch_statement_p)\n-\tstatement = finish_case_label (NULL_TREE, NULL_TREE);\n+\tfinish_case_label (NULL_TREE, NULL_TREE);\n       else\n \terror (\"case label not within a switch statement\");\n       break;\n \n     default:\n       /* Anything else must be an ordinary label.  */\n-      statement = finish_label_stmt (cp_parser_identifier (parser));\n+      finish_label_stmt (cp_parser_identifier (parser));\n       break;\n     }\n \n   /* Require the `:' token.  */\n   cp_parser_require (parser, CPP_COLON, \"`:'\");\n-  /* Parse the labeled statement.  */\n-  cp_parser_statement (parser, in_statement_expr, in_compound);\n-\n-  /* Return the label, in the case of a `case' or `default' label.  */\n-  return statement;\n }\n \n /* Parse an expression-statement."}]}