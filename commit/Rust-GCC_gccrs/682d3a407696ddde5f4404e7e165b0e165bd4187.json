{"sha": "682d3a407696ddde5f4404e7e165b0e165bd4187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgyZDNhNDA3Njk2ZGRkZTVmNDQwNGU3ZTE2NWIwZTE2NWJkNDE4Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-07T20:48:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-07T20:48:35Z"}, "message": "re PR target/82855 (AVX512: replace OP+movemask with OP_mask+ktest)\n\n\tPR target/82855\n\t* config/i386/i386.c (ix86_swap_binary_operands_p): Treat\n\tRTX_COMM_COMPARE as commutative as well.\n\t(ix86_binary_operator_ok): Formatting fix.\n\t* config/i386/sse.md (*mul<mode>3<mask_name><round_name>,\n\t*<code><mode>3<mask_name><round_saeonly_name>,\n\t*<code><mode>3<mask_name>, *<code>tf3, *mul<mode>3<mask_name>,\n\t*<s>mul<mode>3_highpart<mask_name>,\n\t*vec_widen_umult_even_v16si<mask_name>,\n\t*vec_widen_umult_even_v8si<mask_name>,\n\t*vec_widen_umult_even_v4si<mask_name>,\n\t*vec_widen_smult_even_v16si<mask_name>,\n\t*vec_widen_smult_even_v8si<mask_name>, *sse4_1_mulv2siv2di3<mask_name>,\n\t*avx2_pmaddwd, *sse2_pmaddwd, *<sse4_1_avx2>_mul<mode>3<mask_name>,\n\t*avx2_<code><mode>3, *avx512f_<code><mode>3<mask_name>,\n\t*sse4_1_<code><mode>3<mask_name>, *<code>v8hi3,\n\t*sse4_1_<code><mode>3<mask_name>, *<code>v16qi3, *avx2_eq<mode>3,\n\t<avx512>_eq<mode>3<mask_scalar_merge_name>_1, *sse4_1_eqv2di3,\n\t*sse2_eq<mode>3, <mask_codefor><code><mode>3<mask_name>,\n\t*<code><mode>3, *<sse2_avx2>_uavg<mode>3<mask_name>,\n\t*<ssse3_avx2>_pmulhrsw<mode>3<mask_name>, *ssse3_pmulhrswv4hi3): Use\n\t!(MEM_P (operands[1]) && MEM_P (operands[2])) condition instead of\n\tix86_binary_operator_ok.  Formatting fixes.\n\t(*<plusminus_insn><mode>3<mask_name><round_name>,\n\t*<plusminus_insn><mode>3, *<plusminus_insn><mode>3_m): Formatting\n\tfixes.\n\nFrom-SVN: r254509", "tree": {"sha": "eefa05d9b188144c74649e4a174f0460eab7b4e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eefa05d9b188144c74649e4a174f0460eab7b4e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/682d3a407696ddde5f4404e7e165b0e165bd4187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682d3a407696ddde5f4404e7e165b0e165bd4187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682d3a407696ddde5f4404e7e165b0e165bd4187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682d3a407696ddde5f4404e7e165b0e165bd4187/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b15ef5d3f8a611af67254cdfaf126412872ca95c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15ef5d3f8a611af67254cdfaf126412872ca95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15ef5d3f8a611af67254cdfaf126412872ca95c"}], "stats": {"total": 117, "additions": 73, "deletions": 44}, "files": [{"sha": "e387ee2cbaa885842ff73f41e2f4ce788b614c98", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d3a407696ddde5f4404e7e165b0e165bd4187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d3a407696ddde5f4404e7e165b0e165bd4187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=682d3a407696ddde5f4404e7e165b0e165bd4187", "patch": "@@ -1,3 +1,32 @@\n+2017-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/82855\n+\t* config/i386/i386.c (ix86_swap_binary_operands_p): Treat\n+\tRTX_COMM_COMPARE as commutative as well.\n+\t(ix86_binary_operator_ok): Formatting fix.\n+\t* config/i386/sse.md (*mul<mode>3<mask_name><round_name>,\n+\t*<code><mode>3<mask_name><round_saeonly_name>,\n+\t*<code><mode>3<mask_name>, *<code>tf3, *mul<mode>3<mask_name>,\n+\t*<s>mul<mode>3_highpart<mask_name>,\n+\t*vec_widen_umult_even_v16si<mask_name>,\n+\t*vec_widen_umult_even_v8si<mask_name>,\n+\t*vec_widen_umult_even_v4si<mask_name>,\n+\t*vec_widen_smult_even_v16si<mask_name>,\n+\t*vec_widen_smult_even_v8si<mask_name>, *sse4_1_mulv2siv2di3<mask_name>,\n+\t*avx2_pmaddwd, *sse2_pmaddwd, *<sse4_1_avx2>_mul<mode>3<mask_name>,\n+\t*avx2_<code><mode>3, *avx512f_<code><mode>3<mask_name>,\n+\t*sse4_1_<code><mode>3<mask_name>, *<code>v8hi3,\n+\t*sse4_1_<code><mode>3<mask_name>, *<code>v16qi3, *avx2_eq<mode>3,\n+\t<avx512>_eq<mode>3<mask_scalar_merge_name>_1, *sse4_1_eqv2di3,\n+\t*sse2_eq<mode>3, <mask_codefor><code><mode>3<mask_name>,\n+\t*<code><mode>3, *<sse2_avx2>_uavg<mode>3<mask_name>,\n+\t*<ssse3_avx2>_pmulhrsw<mode>3<mask_name>, *ssse3_pmulhrswv4hi3): Use\n+\t!(MEM_P (operands[1]) && MEM_P (operands[2])) condition instead of\n+\tix86_binary_operator_ok.  Formatting fixes.\n+\t(*<plusminus_insn><mode>3<mask_name><round_name>,\n+\t*<plusminus_insn><mode>3, *<plusminus_insn><mode>3_m): Formatting\n+\tfixes.\n+\n 2017-11-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (GPR2): New mode_iterator."}, {"sha": "769f1898b220e24d28f8e3de885ec6b585d79d6f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d3a407696ddde5f4404e7e165b0e165bd4187/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d3a407696ddde5f4404e7e165b0e165bd4187/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=682d3a407696ddde5f4404e7e165b0e165bd4187", "patch": "@@ -19778,7 +19778,8 @@ ix86_swap_binary_operands_p (enum rtx_code code, machine_mode mode,\n   rtx src2 = operands[2];\n \n   /* If the operation is not commutative, we can't do anything.  */\n-  if (GET_RTX_CLASS (code) != RTX_COMM_ARITH)\n+  if (GET_RTX_CLASS (code) != RTX_COMM_ARITH\n+      && GET_RTX_CLASS (code) != RTX_COMM_COMPARE)\n     return false;\n \n   /* Highest priority is that src1 should match dst.  */\n@@ -20009,7 +20010,7 @@ ix86_binary_operator_ok (enum rtx_code code, machine_mode mode,\n \n   /* If the destination is memory, we must have a matching source operand.  */\n   if (MEM_P (dst) && !rtx_equal_p (dst, src1))\n-      return false;\n+    return false;\n \n   /* Source 1 cannot be a constant.  */\n   if (CONSTANT_P (src1))"}, {"sha": "200aad65e24fc5a2b94a69ff84a2008d22d7e330", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 41, "deletions": 42, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682d3a407696ddde5f4404e7e165b0e165bd4187/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682d3a407696ddde5f4404e7e165b0e165bd4187/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=682d3a407696ddde5f4404e7e165b0e165bd4187", "patch": "@@ -1602,7 +1602,8 @@\n \t(plusminus:VF\n \t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"<comm>0,v\")\n \t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands) && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n+   && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    <plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n    v<plusminus_mnemonic><ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n@@ -1641,7 +1642,9 @@\n \t(mult:VF\n \t  (match_operand:VF 1 \"<round_nimm_predicate>\" \"%0,v\")\n \t  (match_operand:VF 2 \"<round_nimm_predicate>\" \"xBm,<round_constraint>\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n+  \"TARGET_SSE\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n+   && <mask_mode512bit_condition> && <round_mode512bit_condition>\"\n   \"@\n    mul<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vmul<ssemodesuffix>\\t{<round_mask_op3>%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2<round_mask_op3>}\"\n@@ -1953,7 +1956,8 @@\n \t(smaxmin:VF\n \t  (match_operand:VF 1 \"<round_saeonly_nimm_predicate>\" \"%0,v\")\n \t  (match_operand:VF 2 \"<round_saeonly_nimm_predicate>\" \"xBm,<round_saeonly_constraint>\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\n+  \"TARGET_SSE\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n    && <mask_mode512bit_condition> && <round_saeonly_mode512bit_condition>\"\n   \"@\n    <maxmin_float><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -3197,7 +3201,7 @@\n \t  (match_operand:VF_128_256 1 \"vector_operand\" \"%0,x,v,v\")\n \t  (match_operand:VF_128_256 2 \"vector_operand\" \"xBm,xm,vm,vm\")))]\n   \"TARGET_SSE && <mask_avx512vl_condition>\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   static char buf[128];\n   const char *ops;\n@@ -3261,7 +3265,7 @@\n \t(any_logic:VF_512\n \t  (match_operand:VF_512 1 \"nonimmediate_operand\" \"%v\")\n \t  (match_operand:VF_512 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   static char buf[128];\n   const char *ops;\n@@ -3515,8 +3519,7 @@\n \t(any_logic:TF\n \t  (match_operand:TF 1 \"vector_operand\" \"%0,x,v,v\")\n \t  (match_operand:TF 2 \"vector_operand\" \"xBm,xm,vm,v\")))]\n-  \"TARGET_SSE\n-   && ix86_binary_operator_ok (<CODE>, TFmode, operands)\"\n+  \"TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   static char buf[128];\n   const char *ops;\n@@ -9988,8 +9991,7 @@\n \t(plusminus:VI_AVX2\n \t  (match_operand:VI_AVX2 1 \"vector_operand\" \"<comm>0,v\")\n \t  (match_operand:VI_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n-  \"TARGET_SSE2\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<plusminus_mnemonic><ssemodesuffix>\\t{%2, %0|%0, %2}\n    vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -10007,8 +10009,7 @@\n \t    (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\"))\n \t  (match_operand:VI48_AVX512VL 3 \"vector_move_operand\" \"0C\")\n \t  (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")))]\n-  \"TARGET_AVX512F\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_AVX512F && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"vp<plusminus_mnemonic><ssemodesuffix>\\t{%2, %1, %0%{%4%}%N3|%0%{%4%}%N3, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix\" \"evex\")\n@@ -10073,8 +10074,7 @@\n   [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n \t(mult:VI2_AVX2 (match_operand:VI2_AVX2 1 \"vector_operand\" \"%0,v\")\n \t\t       (match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,vm\")))]\n-  \"TARGET_SSE2\n-   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n+  \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n    && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    pmullw\\t{%2, %0|%0, %2}\n@@ -10109,8 +10109,7 @@\n \t      (any_extend:<ssedoublemode>\n \t\t(match_operand:VI2_AVX2 2 \"vector_operand\" \"xBm,vm\")))\n \t    (const_int 16))))]\n-  \"TARGET_SSE2\n-   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\n+  \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n    && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n    pmulh<u>w\\t{%2, %0|%0, %2}\n@@ -10158,7 +10157,7 @@\n                          (const_int 4) (const_int 6)\n                          (const_int 8) (const_int 10)\n                          (const_int 12) (const_int 14)])))))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (MULT, V16SImode, operands)\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpmuludq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -10195,7 +10194,7 @@\n \t      (parallel [(const_int 0) (const_int 2)\n \t\t\t (const_int 4) (const_int 6)])))))]\n   \"TARGET_AVX2 && <mask_avx512vl_condition>\n-   && ix86_binary_operator_ok (MULT, V8SImode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpmuludq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix\" \"maybe_evex\")\n@@ -10227,7 +10226,7 @@\n \t      (match_operand:V4SI 2 \"vector_operand\" \"xBm,vm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE2 && <mask_avx512vl_condition>\n-   && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pmuludq\\t{%2, %0|%0, %2}\n    vpmuludq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -10274,7 +10273,7 @@\n                          (const_int 4) (const_int 6)\n                          (const_int 8) (const_int 10)\n                          (const_int 12) (const_int 14)])))))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (MULT, V16SImode, operands)\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpmuldq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -10310,8 +10309,7 @@\n \t      (match_operand:V8SI 2 \"nonimmediate_operand\" \"vm\")\n \t      (parallel [(const_int 0) (const_int 2)\n \t\t\t (const_int 4) (const_int 6)])))))]\n-  \"TARGET_AVX2\n-   && ix86_binary_operator_ok (MULT, V8SImode, operands)\"\n+  \"TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpmuldq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -10344,7 +10342,7 @@\n \t      (match_operand:V4SI 2 \"vector_operand\" \"YrBm,*xBm,vm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n-   && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pmuldq\\t{%2, %0|%0, %2}\n    pmuldq\\t{%2, %0|%0, %2}\n@@ -10433,7 +10431,7 @@\n \t\t\t   (const_int 5) (const_int 7)\n \t\t\t   (const_int 9) (const_int 11)\n \t\t\t   (const_int 13) (const_int 15)]))))))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (MULT, V16HImode, operands)\"\n+  \"TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpmaddwd\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"isa\" \"*,avx512bw\")\n@@ -10489,7 +10487,7 @@\n \t      (vec_select:V4HI (match_dup 2)\n \t\t(parallel [(const_int 1) (const_int 3)\n \t\t\t   (const_int 5) (const_int 7)]))))))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (MULT, V8HImode, operands)\"\n+  \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pmaddwd\\t{%2, %0|%0, %2}\n    vpmaddwd\\t{%2, %1, %0|%0, %1, %2}\n@@ -10539,7 +10537,8 @@\n \t(mult:VI4_AVX512F\n \t  (match_operand:VI4_AVX512F 1 \"vector_operand\" \"%0,0,v\")\n \t  (match_operand:VI4_AVX512F 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n-  \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition>\"\n+  \"TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\n+   && <mask_mode512bit_condition>\"\n   \"@\n    pmulld\\t{%2, %0|%0, %2}\n    pmulld\\t{%2, %0|%0, %2}\n@@ -10857,7 +10856,7 @@\n \t(maxmin:VI124_256\n \t  (match_operand:VI124_256 1 \"nonimmediate_operand\" \"%v\")\n \t  (match_operand:VI124_256 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -10880,7 +10879,7 @@\n \t(maxmin:VI48_AVX512VL\n \t  (match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\" \"%v\")\n \t  (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"sseiadd\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -10986,7 +10985,7 @@\n \t  (match_operand:VI14_128 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n    p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -11002,7 +11001,7 @@\n \t(smaxmin:V8HI\n \t  (match_operand:V8HI 1 \"vector_operand\" \"%0,x,v\")\n \t  (match_operand:V8HI 2 \"vector_operand\" \"xBm,xm,vm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V8HImode, operands)\"\n+  \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    p<maxmin_int>w\\t{%2, %0|%0, %2}\n    vp<maxmin_int>w\\t{%2, %1, %0|%0, %1, %2}\n@@ -11071,7 +11070,7 @@\n \t  (match_operand:VI24_128 2 \"vector_operand\" \"YrBm,*xBm,vm\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n    p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n@@ -11087,7 +11086,7 @@\n \t(umaxmin:V16QI\n \t  (match_operand:V16QI 1 \"vector_operand\" \"%0,x,v\")\n \t  (match_operand:V16QI 2 \"vector_operand\" \"xBm,xm,vm\")))]\n-  \"TARGET_SSE2 && ix86_binary_operator_ok (<CODE>, V16QImode, operands)\"\n+  \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    p<maxmin_int>b\\t{%2, %0|%0, %2}\n    vp<maxmin_int>b\\t{%2, %1, %0|%0, %1, %2}\n@@ -11118,7 +11117,7 @@\n \t(eq:VI_256\n \t  (match_operand:VI_256 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:VI_256 2 \"nonimmediate_operand\" \"xm\")))]\n-  \"TARGET_AVX2 && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+  \"TARGET_AVX2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpcmpeq<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -11149,7 +11148,7 @@\n \t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"%v\")\n \t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_MASKED_EQ))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpcmpeq<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -11162,7 +11161,7 @@\n \t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"%v\")\n \t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n \t  UNSPEC_MASKED_EQ))]\n-  \"TARGET_AVX512F && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+  \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"vpcmpeq<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n   [(set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_extra\" \"1\")\n@@ -11174,7 +11173,7 @@\n \t(eq:V2DI\n \t  (match_operand:V2DI 1 \"vector_operand\" \"%0,0,x\")\n \t  (match_operand:V2DI 2 \"vector_operand\" \"YrBm,*xBm,xm\")))]\n-  \"TARGET_SSE4_1 && ix86_binary_operator_ok (EQ, V2DImode, operands)\"\n+  \"TARGET_SSE4_1 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pcmpeqq\\t{%2, %0|%0, %2}\n    pcmpeqq\\t{%2, %0|%0, %2}\n@@ -11191,7 +11190,7 @@\n \t  (match_operand:VI124_128 1 \"vector_operand\" \"%0,x\")\n \t  (match_operand:VI124_128 2 \"vector_operand\" \"xBm,xm\")))]\n   \"TARGET_SSE2 && !TARGET_XOP\n-   && ix86_binary_operator_ok (EQ, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pcmpeq<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vpcmpeq<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -11656,7 +11655,7 @@\n \t  (match_operand:VI48_AVX_AVX512F 1 \"vector_operand\" \"%0,x,v\")\n \t  (match_operand:VI48_AVX_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")))]\n   \"TARGET_SSE && <mask_mode512bit_condition>\n-   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   static char buf[64];\n   const char *ops;\n@@ -11753,10 +11752,10 @@\n \n (define_insn \"*<code><mode>3\"\n   [(set (match_operand:VI12_AVX_AVX512F 0 \"register_operand\" \"=x,x,v\")\n-\t(any_logic: VI12_AVX_AVX512F\n+\t(any_logic:VI12_AVX_AVX512F\n \t  (match_operand:VI12_AVX_AVX512F 1 \"vector_operand\" \"%0,x,v\")\n \t  (match_operand:VI12_AVX_AVX512F 2 \"vector_operand\" \"xBm,xm,vm\")))]\n-  \"TARGET_SSE && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"TARGET_SSE && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n {\n   static char buf[64];\n   const char *ops;\n@@ -14067,7 +14066,7 @@\n \t      (match_operand:VI12_AVX2 <mask_expand_op3> \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSE2 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n-   && ix86_binary_operator_ok (PLUS, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pavg<ssemodesuffix>\\t{%2, %0|%0, %2}\n    vpavg<ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -14741,7 +14740,7 @@\n \t      (match_operand:VI2_AVX2 3 \"const1_operand\"))\n \t    (const_int 1))))]\n   \"TARGET_SSSE3 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\n-   && ix86_binary_operator_ok (MULT, <MODE>mode, operands)\"\n+   && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    pmulhrsw\\t{%2, %0|%0, %2}\n    vpmulhrsw\\t{%2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2}\n@@ -14767,7 +14766,7 @@\n \t\t(const_int 14))\n \t      (match_operand:V4HI 3 \"const1_operand\"))\n \t    (const_int 1))))]\n-  \"TARGET_SSSE3 && ix86_binary_operator_ok (MULT, V4HImode, operands)\"\n+  \"TARGET_SSSE3 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"pmulhrsw\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")"}]}