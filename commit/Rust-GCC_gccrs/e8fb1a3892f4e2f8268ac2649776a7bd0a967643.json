{"sha": "e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmYjFhMzg5MmY0ZTJmODI2OGFjMjY0OTc3NmE3YmQwYTk2NzY0Mw==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-05-08T13:45:20Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-05-12T11:54:16Z"}, "message": "MSP430: Define ASM_OUTPUT_ALIGNED_DECL_LOCAL\n\ngcc/ChangeLog:\n\n2020-05-12  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430-protos.h (msp430_output_aligned_decl_common):\n\tUpdate prototype to include \"local\" argument.\n\t* config/msp430/msp430.c (msp430_output_aligned_decl_common): Add\n\t\"local\" argument.  Handle local common decls.\n\t* config/msp430/msp430.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Adjust\n\tmsp430_output_aligned_decl_common call with 0 for \"local\" argument.\n\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Define.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-12  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* gcc.c-torture/execute/noinit-attribute.c: Skip for msp430\n\tin the large memory model.", "tree": {"sha": "7306c846aa2caa3596b210957704db3c370714ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7306c846aa2caa3596b210957704db3c370714ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89aa37dc3c71666d0ff05e96ea84e195d049a226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89aa37dc3c71666d0ff05e96ea84e195d049a226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89aa37dc3c71666d0ff05e96ea84e195d049a226"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "e2b01aaae27b7ab7b5ce68a530c23f77a560e5e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "patch": "@@ -1,3 +1,13 @@\n+2020-05-12  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430-protos.h (msp430_output_aligned_decl_common):\n+\tUpdate prototype to include \"local\" argument.\n+\t* config/msp430/msp430.c (msp430_output_aligned_decl_common): Add\n+\t\"local\" argument.  Handle local common decls.\n+\t* config/msp430/msp430.h (ASM_OUTPUT_ALIGNED_DECL_COMMON): Adjust\n+\tmsp430_output_aligned_decl_common call with 0 for \"local\" argument.\n+\t(ASM_OUTPUT_ALIGNED_DECL_LOCAL): Define.\n+\n 2020-05-12  Richard Biener  <rguenther@suse.de>\n \n \t* cfghooks.c (split_edge): Preserve EDGE_DFS_BACK if set."}, {"sha": "29ce9babc4a41b4c9df609737cb58937ffcfa323", "filename": "gcc/config/msp430/msp430-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h?ref=e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "patch": "@@ -39,7 +39,8 @@ bool    msp430_is_interrupt_func (void);\n const char * msp430x_logical_shift_right (rtx);\n const char * msp430_mcu_name (void);\n void    msp430_output_aligned_decl_common (FILE *, const tree, const char *,\n-\t\t\t\t\t   unsigned HOST_WIDE_INT, unsigned);\n+\t\t\t\t\t   unsigned HOST_WIDE_INT, unsigned,\n+\t\t\t\t\t   int);\n void\tmsp430_output_labelref (FILE *, const char *);\n void\tmsp430_register_pragmas (void);\n rtx\tmsp430_return_addr_rtx (int);"}, {"sha": "6bb1714f4658d2dbff5830b8fa830e26b8b88a7f", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "patch": "@@ -2019,13 +2019,15 @@ msp430_unique_section (tree decl, int reloc)\n \n /* Emit a declaration of a common symbol.\n    If a data region is in use then put the symbol into the\n-   equivalent .bss section instead.  */\n+   equivalent .bss section instead.\n+   If LOCAL is 1, then DECL is for a local common variable.  */\n void\n msp430_output_aligned_decl_common (FILE *\t\t  stream,\n \t\t\t\t   const tree\t\t  decl,\n \t\t\t\t   const char *\t\t  name,\n \t\t\t\t   unsigned HOST_WIDE_INT size,\n-\t\t\t\t   unsigned int\t\t  align)\n+\t\t\t\t   unsigned int\t\t  align,\n+\t\t\t\t   int local)\n {\n   /* Only emit a common symbol if the variable does not have a specific section\n      assigned.  */\n@@ -2039,6 +2041,12 @@ msp430_output_aligned_decl_common (FILE *\t\t  stream,\n       && !has_attr (ATTR_PERSIST, decl)\n       && !has_attr (ATTR_NOINIT, decl))\n     {\n+      if (local)\n+\t{\n+\t  fprintf (stream, LOCAL_ASM_OP);\n+\t  assemble_name (stream, name);\n+\t  fprintf (stream, \"\\n\");\n+\t}\n       fprintf (stream, COMMON_ASM_OP);\n       assemble_name (stream, name);\n       fprintf (stream, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n@@ -2069,8 +2077,11 @@ msp430_output_aligned_decl_common (FILE *\t\t  stream,\n \n       switch_to_section (sec);\n       ASM_OUTPUT_ALIGN (stream, floor_log2 (align / BITS_PER_UNIT));\n-      targetm.asm_out.globalize_label (stream, name);\n-      ASM_WEAKEN_LABEL (stream, name);\n+      if (!local)\n+\t{\n+\t  targetm.asm_out.globalize_label (stream, name);\n+\t  ASM_WEAKEN_LABEL (stream, name);\n+\t}\n       ASM_OUTPUT_LABEL (stream, name);\n       ASM_OUTPUT_SKIP (stream, size ? size : 1);\n     }"}, {"sha": "f198981ad9e4540014f3b7985022fb3f9b7c5626", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "patch": "@@ -517,7 +517,13 @@ void msp430_register_pre_includes (const char *sysroot ATTRIBUTE_UNUSED,\n #undef  USE_SELECT_SECTION_FOR_FUNCTIONS\n #define USE_SELECT_SECTION_FOR_FUNCTIONS 1\n \n+#undef ASM_OUTPUT_ALIGNED_DECL_COMMON\n #define ASM_OUTPUT_ALIGNED_DECL_COMMON(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n-  msp430_output_aligned_decl_common ((FILE), (DECL), (NAME), (SIZE), (ALIGN))\n+  msp430_output_aligned_decl_common ((FILE), (DECL), (NAME), (SIZE), (ALIGN), 0)\n+\n+#undef  ASM_OUTPUT_ALIGNED_DECL_LOCAL\n+#define ASM_OUTPUT_ALIGNED_DECL_LOCAL(FILE, DECL, NAME, SIZE, ALIGN)\t\\\n+  msp430_output_aligned_decl_common ((FILE), (DECL), (NAME), (SIZE), (ALIGN), 1)\n+\n \n #define SYMBOL_FLAG_LOW_MEM (SYMBOL_FLAG_MACH_DEP << 0)"}, {"sha": "b83e0ee45a56f77e486ee53a986c216db9ce4906", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "patch": "@@ -1,3 +1,8 @@\n+2020-05-12  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.c-torture/execute/noinit-attribute.c: Skip for msp430\n+\tin the large memory model.\n+\n 2020-05-12  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* gcc.target/msp430/region-attribute-misuse.c: Allow a .bss section to"}, {"sha": "20a2a452e79f16454a0e4019df2f84cb3290a89d", "filename": "gcc/testsuite/gcc.c-torture/execute/noinit-attribute.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnoinit-attribute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fb1a3892f4e2f8268ac2649776a7bd0a967643/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnoinit-attribute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnoinit-attribute.c?ref=e8fb1a3892f4e2f8268ac2649776a7bd0a967643", "patch": "@@ -1,8 +1,12 @@\n /* { dg-do run } */\n /* { dg-require-effective-target noinit } */\n /* { dg-options \"-O2\" } */\n+/* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */\n \n-/* This test checks that noinit data is handled correctly.  */\n+/* This test checks that noinit data is handled correctly.\n+   If data LMA != VMA (e.g. for simulating the copy of data from ROM to RAM),\n+   then var_init will always be re-initialized to 2 and this test will loop\n+   forever.  */\n \n extern void _start (void) __attribute__ ((noreturn));\n extern void abort (void) __attribute__ ((noreturn));"}]}