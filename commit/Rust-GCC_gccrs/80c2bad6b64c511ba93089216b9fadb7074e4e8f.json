{"sha": "80c2bad6b64c511ba93089216b9fadb7074e4e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBjMmJhZDZiNjRjNTExYmE5MzA4OTIxNmI5ZmFkYjcwNzRlNGU4Zg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-12-31T03:18:49Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-12-31T03:18:49Z"}, "message": "gimple-fold.c (get_range_strlen): Minor logic cleanup.\n\n\t* gimple-fold.c (get_range_strlen): Minor logic cleanup.  Add comments\n\ton code's intent.\n\nCo-Authored-By: Jeff Law <law@redhat.com>\n\nFrom-SVN: r267483", "tree": {"sha": "eb814871f9b884368f98bab9758c7641296c936d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb814871f9b884368f98bab9758c7641296c936d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80c2bad6b64c511ba93089216b9fadb7074e4e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c2bad6b64c511ba93089216b9fadb7074e4e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80c2bad6b64c511ba93089216b9fadb7074e4e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80c2bad6b64c511ba93089216b9fadb7074e4e8f/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "598f7235fb4e9d6c201999d66f1db2b247d74de3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598f7235fb4e9d6c201999d66f1db2b247d74de3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598f7235fb4e9d6c201999d66f1db2b247d74de3"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "54585381cbe4e0611a31baa4f52182774a897120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c2bad6b64c511ba93089216b9fadb7074e4e8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c2bad6b64c511ba93089216b9fadb7074e4e8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80c2bad6b64c511ba93089216b9fadb7074e4e8f", "patch": "@@ -1,6 +1,9 @@\n 2018-12-30  Martin Sebor  <msebor@redhat.com>\n \t    Jeff Law  <law@redhat.com>\n \n+\t* gimple-fold.c (get_range_strlen): Minor logic cleanup.  Add comments\n+\ton code's intent.\n+\n \t* gimple-fold.c (strlen_range_kind): New enum.\n \t(get_range_strlen): Update signature to use strlen_range_kind\n \tinstead of type+fuzzy."}, {"sha": "fb43552bc3523ca4f2f61b41f99fb77c8bab6192", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80c2bad6b64c511ba93089216b9fadb7074e4e8f/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80c2bad6b64c511ba93089216b9fadb7074e4e8f/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=80c2bad6b64c511ba93089216b9fadb7074e4e8f", "patch": "@@ -1548,10 +1548,17 @@ get_range_strlen (tree arg, tree length[2], bitmap *visited,\n \t      if (!get_range_strlen (ops[i], length, visited, rkind,\n \t\t\t\t     flexp, eltsize, nonstr))\n \t\t{\n-\t\t  if (rkind == SRK_LENRANGE_2)\n-\t\t    *maxlen = build_all_ones_cst (size_type_node);\n-\t\t  else\n+\t\t  if (rkind != SRK_LENRANGE_2)\n \t\t    return false;\n+\t\t  /* Set the upper bound to the maximum to prevent\n+\t\t     it from being adjusted in the next iteration but\n+\t\t     leave MINLEN and the more conservative MAXBOUND\n+\t\t     determined so far alone (or leave them null if\n+\t\t     they haven't been set yet).  That the MINLEN is\n+\t\t     in fact zero can be determined from MAXLEN being\n+\t\t     unbounded but the discovered minimum is used for\n+\t\t     diagnostics.  */\n+\t\t  *maxlen = build_all_ones_cst (size_type_node);\n \t\t}\n \t    return true;\n \t  }\n@@ -1576,10 +1583,17 @@ get_range_strlen (tree arg, tree length[2], bitmap *visited,\n \t    if (!get_range_strlen (arg, length, visited, rkind, flexp,\n \t\t\t\t   eltsize, nonstr))\n \t      {\n-\t\tif (rkind == SRK_LENRANGE_2)\n-\t\t  *maxlen = build_all_ones_cst (size_type_node);\n-\t\telse\n+\t\tif (rkind != SRK_LENRANGE_2)\n \t\t  return false;\n+\t\t/* Set the upper bound to the maximum to prevent\n+\t\t   it from being adjusted in the next iteration but\n+\t\t   leave MINLEN and the more conservative MAXBOUND\n+\t\t   determined so far alone (or leave them null if\n+\t\t   they haven't been set yet).  That the MINLEN is\n+\t\t   in fact zero can be determined from MAXLEN being\n+\t\t   unbounded but the discovered minimum is used for\n+\t\t   diagnostics.  */\n+\t\t*maxlen = build_all_ones_cst (size_type_node);\n \t      }\n           }\n         return true;"}]}