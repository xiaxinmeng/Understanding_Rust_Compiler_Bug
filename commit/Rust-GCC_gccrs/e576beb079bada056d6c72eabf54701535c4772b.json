{"sha": "e576beb079bada056d6c72eabf54701535c4772b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3NmJlYjA3OWJhZGEwNTZkNmM3MmVhYmY1NDcwMTUzNWM0NzcyYg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-03-15T22:03:37Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-03-15T22:03:37Z"}, "message": "cppfiles.c (open_include_file): New function.\n\n\t* cppfiles.c (open_include_file): New function.\n\t(find_include_file, cpp_read_file): Use it.\n\nFrom-SVN: r32568", "tree": {"sha": "22bb40e4e927cc0a66b7d99d38172818823e8835", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22bb40e4e927cc0a66b7d99d38172818823e8835"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e576beb079bada056d6c72eabf54701535c4772b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e576beb079bada056d6c72eabf54701535c4772b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e576beb079bada056d6c72eabf54701535c4772b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e576beb079bada056d6c72eabf54701535c4772b/comments", "author": null, "committer": null, "parents": [{"sha": "878885b41142dd76e858b1f705bd31f357a5acc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878885b41142dd76e858b1f705bd31f357a5acc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878885b41142dd76e858b1f705bd31f357a5acc5"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "93753571d6ffe2c005bb621f8632ad0bf3f704c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e576beb079bada056d6c72eabf54701535c4772b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e576beb079bada056d6c72eabf54701535c4772b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e576beb079bada056d6c72eabf54701535c4772b", "patch": "@@ -1,3 +1,8 @@\n+2000-03-15  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cppfiles.c (open_include_file): New function.\n+\t(find_include_file, cpp_read_file): Use it.\n+\n 2000-03-15  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* cpphash.c (dump_hash_helper): Take the slot, not the element."}, {"sha": "bc137a93708fd360031b6551e0a66b7cdfd0a538", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e576beb079bada056d6c72eabf54701535c4772b/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e576beb079bada056d6c72eabf54701535c4772b/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=e576beb079bada056d6c72eabf54701535c4772b", "patch": "@@ -48,7 +48,7 @@ static int find_include_file\tPARAMS ((cpp_reader *, const char *,\n \t\t\t\t\tstruct file_name_list *,\n \t\t\t\t\tIHASH **, int *));\n static int read_include_file\tPARAMS ((cpp_reader *, int, IHASH *));\n-\n+static inline int open_include_file PARAMS ((cpp_reader *, const char *));\n \n #if 0\n static void hack_vms_include_specification PARAMS ((char *));\n@@ -61,13 +61,6 @@ static void hack_vms_include_specification PARAMS ((char *));\n #define INCLUDE_LEN_FUDGE 0\n #endif\n \n-/* Open files in nonblocking mode, so we don't get stuck if someone\n-   clever has asked cpp to process /dev/rmt0.  read_include_file\n-   will check that we have a real file to work with.  Also take care\n-   not to acquire a controlling terminal by mistake (this can't happen\n-   on sane systems, but paranoia is a virtue).  */\n-#define OMODES O_RDONLY|O_NONBLOCK|O_NOCTTY\n-\n /* Calculate hash of an IHASH entry.  */\n static unsigned int\n hash_IHASH (x)\n@@ -182,6 +175,29 @@ file_cleanup (pbuf, pfile)\n   return 0;\n }\n \n+/* Centralize calls to open(2) here.  This provides a hook for future\n+   changes which might, e.g. look for and open a precompiled version\n+   of the header.  It also means all the magic currently associated\n+   with calling open is in one place, and if we ever need more, it'll\n+   be in one place too.\n+\n+   Open files in nonblocking mode, so we don't get stuck if someone\n+   clever has asked cpp to process /dev/rmt0.  read_include_file\n+   will check that we have a real file to work with.  Also take care\n+   not to acquire a controlling terminal by mistake (this can't happen\n+   on sane systems, but paranoia is a virtue).\n+\n+   Use the three-argument form of open even though we aren't\n+   specifying O_CREAT, to defend against broken system headers.  */\n+\n+static inline int\n+open_include_file (pfile, filename)\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n+     const char *filename;\n+{\n+  return open (filename, O_RDONLY|O_NONBLOCK|O_NOCTTY, 0666);\n+}\n+\n /* Search for include file FNAME in the include chain starting at\n    SEARCH_START.  Return -2 if this file doesn't need to be included\n    (because it was included already and it's marked idempotent),\n@@ -216,13 +232,13 @@ find_include_file (pfile, fname, search_start, ihash, before)\n \n       *before = 1;\n       *ihash = ih;\n-      return open (ih->name, OMODES);\n+      return open_include_file (pfile, ih->name);\n     }\n \n   if (path == ABSOLUTE_PATH)\n     {\n       name = (char *) fname;\n-      f = open (name, OMODES);\n+      f = open_include_file (pfile, name);\n     }\n   else\n     {\n@@ -238,7 +254,7 @@ find_include_file (pfile, fname, search_start, ihash, before)\n \t  if (CPP_OPTIONS (pfile)->remap)\n \t    name = remap_filename (pfile, name, path);\n \n-\t  f = open (name, OMODES);\n+\t  f = open_include_file (pfile, name);\n #ifdef EACCES\n \t  if (f == -1 && errno == EACCES)\n \t    {\n@@ -629,7 +645,7 @@ cpp_read_file (pfile, fname)\n   if (*fname == '\\0')\n     f = 0;\n   else\n-    f = open (fname, OMODES);\n+    f = open_include_file (pfile, fname);\n \n   return read_include_file (pfile, f, ih);\n }\n@@ -1193,7 +1209,7 @@ hack_vms_include_specification (fullname)\n \n   if (check_filename_before_returning)\n     {\n-      f = open (fullname, OMODES);\n+      f = open (fullname, O_RDONLY|O_NONBLOCK);\n       if (f >= 0)\n \t{\n \t  /* The file name is OK as it is, so return it as is.  */"}]}