{"sha": "e5df270eeccbc5892b7f40769e7725b13a36f7df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVkZjI3MGVlY2NiYzU4OTJiN2Y0MDc2OWU3NzI1YjEzYTM2ZjdkZg==", "commit": {"author": {"name": "Alexander Monakov", "email": "amonakov@ispras.ru", "date": "2017-07-25T10:53:58Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2017-07-25T10:53:58Z"}, "message": "domwalk: optimize basic block sorting\n\n\t* domwalk.c (cmp_bb_postorder): Simplify.\n\t(sort_bbs_postorder): New function.  Use it...\n\t(dom_walker::walk): ...here to optimize common cases.\n\nFrom-SVN: r250502", "tree": {"sha": "aaa2c656639ce03992bb20aee6dcd728ed3b4154", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaa2c656639ce03992bb20aee6dcd728ed3b4154"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5df270eeccbc5892b7f40769e7725b13a36f7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5df270eeccbc5892b7f40769e7725b13a36f7df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5df270eeccbc5892b7f40769e7725b13a36f7df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5df270eeccbc5892b7f40769e7725b13a36f7df/comments", "author": {"login": "amonakov", "id": 1997391, "node_id": "MDQ6VXNlcjE5OTczOTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1997391?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amonakov", "html_url": "https://github.com/amonakov", "followers_url": "https://api.github.com/users/amonakov/followers", "following_url": "https://api.github.com/users/amonakov/following{/other_user}", "gists_url": "https://api.github.com/users/amonakov/gists{/gist_id}", "starred_url": "https://api.github.com/users/amonakov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amonakov/subscriptions", "organizations_url": "https://api.github.com/users/amonakov/orgs", "repos_url": "https://api.github.com/users/amonakov/repos", "events_url": "https://api.github.com/users/amonakov/events{/privacy}", "received_events_url": "https://api.github.com/users/amonakov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4287b4e84c4af7a331d1b0a390ab3d97f37120c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4287b4e84c4af7a331d1b0a390ab3d97f37120c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4287b4e84c4af7a331d1b0a390ab3d97f37120c2"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "42697c510a9d1ca911f180d953e2c78f24d6e320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df270eeccbc5892b7f40769e7725b13a36f7df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df270eeccbc5892b7f40769e7725b13a36f7df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5df270eeccbc5892b7f40769e7725b13a36f7df", "patch": "@@ -1,3 +1,9 @@\n+2017-07-25  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\t* domwalk.c (cmp_bb_postorder): Simplify.\n+\t(sort_bbs_postorder): New function.  Use it...\n+\t(dom_walker::walk): ...here to optimize common cases.\n+\n 2017-07-25  Martin Liska  <mliska@suse.cz>\n \n \tPR ipa/81520"}, {"sha": "ff6604e5686bdb37b91cbd5cf6dbc6b1e5c225dd", "filename": "gcc/domwalk.c", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5df270eeccbc5892b7f40769e7725b13a36f7df/gcc%2Fdomwalk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5df270eeccbc5892b7f40769e7725b13a36f7df/gcc%2Fdomwalk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdomwalk.c?ref=e5df270eeccbc5892b7f40769e7725b13a36f7df", "patch": "@@ -128,19 +128,45 @@ along with GCC; see the file COPYING3.  If not see\n     which is currently an abstraction over walking tree statements.  Thus\n     the dominator walker is currently only useful for trees.  */\n \n+/* Reverse postorder index of each basic block.  */\n static int *bb_postorder;\n \n static int\n cmp_bb_postorder (const void *a, const void *b)\n {\n-  basic_block bb1 = *(basic_block *)const_cast<void *>(a);\n-  basic_block bb2 = *(basic_block *)const_cast<void *>(b);\n-  if (bb1->index == bb2->index)\n-    return 0;\n+  basic_block bb1 = *(const basic_block *)(a);\n+  basic_block bb2 = *(const basic_block *)(b);\n   /* Place higher completion number first (pop off lower number first).  */\n-  if (bb_postorder[bb1->index] > bb_postorder[bb2->index])\n-    return -1;\n-  return 1;\n+  return bb_postorder[bb2->index] - bb_postorder[bb1->index];\n+}\n+\n+/* Permute array BBS of N basic blocks in postorder,\n+   i.e. by descending number in BB_POSTORDER array.  */\n+\n+static void\n+sort_bbs_postorder (basic_block *bbs, int n)\n+{\n+  if (__builtin_expect (n == 2, true))\n+    {\n+      basic_block bb0 = bbs[0], bb1 = bbs[1];\n+      if (bb_postorder[bb0->index] < bb_postorder[bb1->index])\n+\tbbs[0] = bb1, bbs[1] = bb0;\n+    }\n+  else if (__builtin_expect (n == 3, true))\n+    {\n+      basic_block bb0 = bbs[0], bb1 = bbs[1], bb2 = bbs[2];\n+      if (bb_postorder[bb0->index] < bb_postorder[bb1->index])\n+\tstd::swap (bb0, bb1);\n+      if (bb_postorder[bb1->index] < bb_postorder[bb2->index])\n+\t{\n+\t  std::swap (bb1, bb2);\n+\t  if (bb_postorder[bb0->index] < bb_postorder[bb1->index])\n+\t    std::swap (bb0, bb1);\n+\t}\n+      bbs[0] = bb0, bbs[1] = bb1, bbs[2] = bb2;\n+    }\n+  else\n+    qsort (bbs, n, sizeof *bbs, cmp_bb_postorder);\n }\n \n /* Constructor for a dom walker.\n@@ -284,16 +310,8 @@ dom_walker::walk (basic_block bb)\n \t  for (dest = first_dom_son (m_dom_direction, bb);\n \t       dest; dest = next_dom_son (m_dom_direction, dest))\n \t    worklist[sp++] = dest;\n-\t  if (m_dom_direction == CDI_DOMINATORS)\n-\t    switch (sp - saved_sp)\n-\t      {\n-\t      case 0:\n-\t      case 1:\n-\t\tbreak;\n-\t      default:\n-\t\tqsort (&worklist[saved_sp], sp - saved_sp,\n-\t\t       sizeof (basic_block), cmp_bb_postorder);\n-\t      }\n+\t  if (sp - saved_sp > 1 && m_dom_direction == CDI_DOMINATORS)\n+\t    sort_bbs_postorder (&worklist[saved_sp], sp - saved_sp);\n \t}\n       /* NULL is used to mark pop operations in the recursion stack.  */\n       while (sp > 0 && !worklist[sp - 1])"}]}