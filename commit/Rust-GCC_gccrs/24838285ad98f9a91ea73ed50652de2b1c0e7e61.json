{"sha": "24838285ad98f9a91ea73ed50652de2b1c0e7e61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4MzgyODVhZDk4ZjlhOTFlYTczZWQ1MDY1MmRlMmIxYzBlN2U2MQ==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-19T08:56:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-19T08:56:45Z"}, "message": "Merge #637\n\n637: Add support for const bool and const float r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000143.html\r\n\r\n> Handle BOOL and FLOAT in ConstFoldExpr::visit (HIR::LiteralExpr) to\r\n> make it possible to create const bool, f32 and f64 constants. Add a\r\n> new testcase \"primconsts.rs\". Not yet handled are const char and &str\r\n> types.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "4170aece28531c74eeaff13c2005c62e3c633059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4170aece28531c74eeaff13c2005c62e3c633059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24838285ad98f9a91ea73ed50652de2b1c0e7e61", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhHhzNCRBK7hj4Ov3rIwAA4zUIAEi69RMVcfjAaFA50iIsQsec\nJCRDz3NTQbWQCkSwPLH12rYMEXpCLpwAUl/nsZhq79pomxxijgJ1H5AkVoEZaJAx\n290jRXb8gf3YEf9g1A0NrXWGSHD0Pn4IqM4GZ6DKn1Nrs+ISYc00mKoIOgurccJe\nW49T19u3thBf6iVNsxiCG1LLmyMyjo05yaZQpgPquLn2zWbw3B+sijp9YBlivNQ+\n3Ds5ttNe9gZwdQsJXhO0Mc4iCfjIcX5UW2e+v+YE/UDe9iyswu8i7Au3IQsh/jJq\nT03AP2lG/rSVbRbNnJq4JHODvRuFWP1qLIlxIhDleGzbz1FgBvAZhV8essCZg6I=\n=dVzA\n-----END PGP SIGNATURE-----\n", "payload": "tree 4170aece28531c74eeaff13c2005c62e3c633059\nparent 3a944e1b7a49dae8c0970f9a491121ab84ff2e0b\nparent bb52e25b2d420325ca885c36a00e064e93a23ef4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629363405 +0000\ncommitter GitHub <noreply@github.com> 1629363405 +0000\n\nMerge #637\n\n637: Add support for const bool and const float r=philberty a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000143.html\r\n\r\n> Handle BOOL and FLOAT in ConstFoldExpr::visit (HIR::LiteralExpr) to\r\n> make it possible to create const bool, f32 and f64 constants. Add a\r\n> new testcase \"primconsts.rs\". Not yet handled are const char and &str\r\n> types.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24838285ad98f9a91ea73ed50652de2b1c0e7e61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24838285ad98f9a91ea73ed50652de2b1c0e7e61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24838285ad98f9a91ea73ed50652de2b1c0e7e61/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a944e1b7a49dae8c0970f9a491121ab84ff2e0b"}, {"sha": "bb52e25b2d420325ca885c36a00e064e93a23ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb52e25b2d420325ca885c36a00e064e93a23ef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb52e25b2d420325ca885c36a00e064e93a23ef4"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "8efbb183403898cce386f69b0cbbc63083850e75", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24838285ad98f9a91ea73ed50652de2b1c0e7e61/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24838285ad98f9a91ea73ed50652de2b1c0e7e61/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=24838285ad98f9a91ea73ed50652de2b1c0e7e61", "patch": "@@ -315,6 +315,36 @@ class ConstFoldExpr : public ConstFoldBase\n \t}\n \treturn;\n \n+\tcase HIR::Literal::BOOL: {\n+\t  bool bval = literal_value->as_string ().compare (\"true\") == 0;\n+\t  folded = ctx->get_backend ()->boolean_constant_expression (bval);\n+\t}\n+\treturn;\n+\n+\tcase HIR::Literal::FLOAT: {\n+\t  mpfr_t fval;\n+\t  if (mpfr_init_set_str (fval, literal_value->as_string ().c_str (), 10,\n+\t\t\t\t MPFR_RNDN)\n+\t      != 0)\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"bad floating-point number in literal\");\n+\t      return;\n+\t    }\n+\n+\t  TyTy::BaseType *tyty = nullptr;\n+\t  if (!tyctx->lookup_type (expr.get_mappings ().get_hirid (), &tyty))\n+\t    {\n+\t      rust_fatal_error (expr.get_locus (),\n+\t\t\t\t\"did not resolve type for this literal expr\");\n+\t      return;\n+\t    }\n+\n+\t  Btype *type = ConstFoldType::fold (tyty, ctx->get_backend ());\n+\t  folded = ctx->get_backend ()->float_constant_expression (type, fval);\n+\t}\n+\treturn;\n+\n \t/* handle other literals */\n \n       default:"}, {"sha": "bcf9456d059a6e9a8b32e8c239d63811e5afff64", "filename": "gcc/testsuite/rust/compile/torture/primconsts.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24838285ad98f9a91ea73ed50652de2b1c0e7e61/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprimconsts.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24838285ad98f9a91ea73ed50652de2b1c0e7e61/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprimconsts.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fprimconsts.rs?ref=24838285ad98f9a91ea73ed50652de2b1c0e7e61", "patch": "@@ -0,0 +1,72 @@\n+const TRUE: bool = true;\n+const FALSE: bool = !TRUE;\n+\n+const U8ZERO: u8 = 0;\n+const U8ONE: u8 = U8ZERO + 1;\n+const U16ZERO: u16 = 0;\n+const U16ONE: u16 = U16ZERO + 1;\n+const U32ZERO: u32 = 0;\n+const U32ONE: u32 = U32ZERO + 1;\n+const U64ZERO: u64 = 0;\n+const U64ONE: u64 = U64ZERO + 1;\n+const U128ZERO: u128 = 0;\n+const U128ONE: u128 = U128ZERO + 1;\n+\n+const I8ZERO: i8 = 0;\n+const I8ONE: i8 = I8ZERO + 1;\n+const I16ZERO: i16 = 0;\n+const I16ONE: i16 = I16ZERO + 1;\n+const I32ZERO: i32 = 0;\n+const I32ONE: i32 = I32ZERO + 1;\n+const I64ZERO: i64 = 0;\n+const I64ONE: i64 = I64ZERO + 1;\n+const I128ZERO: i128 = 0;\n+const I128ONE: i128 = I128ZERO + 1;\n+\n+const F32ZERO: f32 = 0.0;\n+const F32ONE: f32 = F32ZERO + 1.0;\n+const F64ZERO: f64 = 0.0;\n+const F64ONE: f64 = F64ZERO + 1.0;\n+\n+const USIZEZERO: usize = 0;\n+const USIZEONE: usize = USIZEZERO + 1;\n+const ISIZEZERO: isize = 0;\n+const ISIZEONE: isize = ISIZEZERO + 1;\n+\n+/* Not yet supported \n+const CHARPI: char = '\\u{03C0}';\n+const STRHELLO: &str = \"Hello World!\";\n+*/\n+\n+extern \"C\" { fn abort (); }\n+\n+pub fn main ()\n+{\n+  if TRUE == FALSE { unsafe { abort (); } }\n+  if U8ZERO > U8ONE { unsafe { abort (); } }\n+  if U16ZERO > U16ONE { unsafe { abort (); } }\n+  if U32ZERO > U32ONE { unsafe { abort (); } }\n+  if U64ZERO > U64ONE { unsafe { abort (); } }\n+  if U128ZERO > U128ONE { unsafe { abort (); } }\n+\n+  if I8ONE <= I8ZERO { unsafe { abort (); } }\n+  if I16ONE <= I16ZERO { unsafe { abort (); } }\n+  if I32ONE <= I32ZERO { unsafe { abort (); } }\n+  if I64ONE <= I64ZERO { unsafe { abort (); } }\n+  if I128ONE <= I128ZERO { unsafe { abort (); } }\n+\n+  if F32ZERO + F32ONE != F32ONE { unsafe { abort (); } }\n+  if F64ZERO + F64ONE != F64ONE { unsafe { abort (); } }\n+\n+  if USIZEZERO + USIZEONE - USIZEONE + USIZEZERO != USIZEZERO\n+    {\n+      unsafe { abort (); }\n+    }\n+  if ISIZEZERO + ISIZEONE - ISIZEONE + ISIZEZERO != ISIZEZERO\n+    {\n+      unsafe { abort (); }\n+    }\n+\n+ // if CHARPI != '\\u{03c0}'  { unsafe { abort (); } }\n+ // if STRHELLO != \"Hello World!\" { unsafe { abort (); } }\n+}"}]}