{"sha": "cda94cbba16f7754f7ce2e74a74af71f83722ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RhOTRjYmJhMTZmNzc1NGY3Y2UyZTc0YTc0YWY3MWY4MzcyMmZmMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-11T02:44:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-11T02:44:48Z"}, "message": "cfgrtl.c (delete_insn): Assert insn hasn't been deleted yet.\n\n        * cfgrtl.c (delete_insn): Assert insn hasn't been deleted yet.\n        * reload1.c (delete_output_reload): Zap spill_reg_store.  Take\n        care not to delete instructions twice.\n\nFrom-SVN: r48760", "tree": {"sha": "f7c9728bcc565ebdd46024fca3365fe55340efa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c9728bcc565ebdd46024fca3365fe55340efa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda94cbba16f7754f7ce2e74a74af71f83722ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda94cbba16f7754f7ce2e74a74af71f83722ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda94cbba16f7754f7ce2e74a74af71f83722ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda94cbba16f7754f7ce2e74a74af71f83722ff2/comments", "author": null, "committer": null, "parents": [{"sha": "df2c9a4453dca26d8a5980326657c06634b2ce21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2c9a4453dca26d8a5980326657c06634b2ce21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2c9a4453dca26d8a5980326657c06634b2ce21"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "5c67d6dc58d2c5c279a3c49bc630acff45ee99c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda94cbba16f7754f7ce2e74a74af71f83722ff2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda94cbba16f7754f7ce2e74a74af71f83722ff2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cda94cbba16f7754f7ce2e74a74af71f83722ff2", "patch": "@@ -1,3 +1,9 @@\n+2002-01-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* cfgrtl.c (delete_insn): Assert insn hasn't been deleted yet.\n+\t* reload1.c (delete_output_reload): Zap spill_reg_store.  Take\n+\tcare not to delete instructions twice.\n+\n 2002-01-10  Zack Weinberg  <zack@codesourcery.com>\n \n \t* toplev.c: Don't declare environ (it's not used anywhere).\n@@ -154,7 +160,7 @@ Thu Jan 10 22:35:54 CET 2002  Jan Hubicka  <jh@suse.cz>\n Thu Jan 10 17:19:12 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgcleanup.c (try_forward_edges): Properly initialize nthreaded_edges;\n-        update edge probabilities to match.\n+\tupdate edge probabilities to match.\n \n 2002-01-10  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n@@ -187,7 +193,7 @@ Thu Jan 10 11:19:18 CET 2002  Jan Hubicka  <jh@suse.cz>\n 2002-01-20  Graham Stott  <grahams@redhat.com>\n \n \t* dwarf2out.c (indirect_string_alloc, output_indirect_string):\n-        Move prototype into DWARF2_DEBUGGING_INFO conditional block.\n+\tMove prototype into DWARF2_DEBUGGING_INFO conditional block.\n \n 2002-01-10  Richard Henderson  <rth@redhat.com>\n \n@@ -287,8 +293,8 @@ Thu Jan 10 11:19:18 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n 2002-01-09  Herman A.J. ten Brugge  <Haj.Ten.Brugge@net.HCC.nl>\n \n-        * real.c (c4xtoe, toc4x): Do some special conversion on long doubles\n-        for the c4x target. Also improve layout.\n+\t* real.c (c4xtoe, toc4x): Do some special conversion on long doubles\n+\tfor the c4x target. Also improve layout.\n \n 2002-01-09  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "f3187989add003d3b3a4be0d488924f7a6ebdc59", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda94cbba16f7754f7ce2e74a74af71f83722ff2/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda94cbba16f7754f7ce2e74a74af71f83722ff2/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=cda94cbba16f7754f7ce2e74a74af71f83722ff2", "patch": "@@ -135,6 +135,9 @@ delete_insn (insn)\n \n   if (really_delete)\n     {\n+      /* If this insn has already been deleted, something is very wrong.  */\n+      if (INSN_DELETED_P (insn))\n+\tabort ();\n       remove_insn (insn);\n       INSN_DELETED_P (insn) = 1;\n     }"}, {"sha": "22d3b3d0d9ab8455750a404050b8398fa1c37d8d", "filename": "gcc/reload1.c", "status": "modified", "additions": 28, "deletions": 24, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda94cbba16f7754f7ce2e74a74af71f83722ff2/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda94cbba16f7754f7ce2e74a74af71f83722ff2/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=cda94cbba16f7754f7ce2e74a74af71f83722ff2", "patch": "@@ -7537,9 +7537,8 @@ gen_reload (out, in, opnum, type)\n   return last ? NEXT_INSN (last) : get_insns ();\n }\n \f\n-/* Delete a previously made output-reload\n-   whose result we now believe is not needed.\n-   First we double-check.\n+/* Delete a previously made output-reload whose result we now believe\n+   is not needed.  First we double-check.\n \n    INSN is the insn now being processed.\n    LAST_RELOAD_REG is the hard register number for which we want to delete\n@@ -7633,15 +7632,21 @@ delete_output_reload (insn, j, last_reload_reg)\n \t}\n     }\n \n+  /* We will be deleting the insn.  Remove the spill reg information.  */\n+  for (k = HARD_REGNO_NREGS (last_reload_reg, GET_MODE (reg)); k-- > 0; )\n+    {\n+      spill_reg_store[last_reload_reg + k] = 0;\n+      spill_reg_stored_to[last_reload_reg + k] = 0;\n+    }\n+\n   /* The caller has already checked that REG dies or is set in INSN.\n-     It has also checked that we are optimizing, and thus some inaccurancies\n-     in the debugging information are acceptable.\n-     So we could just delete output_reload_insn.\n-     But in some cases we can improve the debugging information without\n-     sacrificing optimization - maybe even improving the code:\n-     See if the pseudo reg has been completely replaced\n-     with reload regs.  If so, delete the store insn\n-     and forget we had a stack slot for the pseudo.  */\n+     It has also checked that we are optimizing, and thus some\n+     inaccurancies in the debugging information are acceptable.\n+     So we could just delete output_reload_insn.  But in some cases\n+     we can improve the debugging information without sacrificing\n+     optimization - maybe even improving the code: See if the pseudo\n+     reg has been completely replaced with reload regs.  If so, delete\n+     the store insn and forget we had a stack slot for the pseudo.  */\n   if (rld[j].out != rld[j].in\n       && REG_N_DEATHS (REGNO (reg)) == 1\n       && REG_N_SETS (REGNO (reg)) == 1\n@@ -7650,11 +7655,10 @@ delete_output_reload (insn, j, last_reload_reg)\n     {\n       rtx i2;\n \n-      /* We know that it was used only between here\n-\t and the beginning of the current basic block.\n-\t (We also know that the last use before INSN was\n-\t the output reload we are thinking of deleting, but never mind that.)\n-\t Search that range; see if any ref remains.  */\n+      /* We know that it was used only between here and the beginning of\n+\t the current basic block.  (We also know that the last use before\n+\t INSN was the output reload we are thinking of deleting, but never\n+\t mind that.)  Search that range; see if any ref remains.  */\n       for (i2 = PREV_INSN (insn); i2; i2 = PREV_INSN (i2))\n \t{\n \t  rtx set = single_set (i2);\n@@ -7677,31 +7681,31 @@ delete_output_reload (insn, j, last_reload_reg)\n \t    }\n \t}\n \n-      /* Delete the now-dead stores into this pseudo.  */\n+      /* Delete the now-dead stores into this pseudo.  Note that this\n+\t loop also takes care of deleting output_reload_insn.  */\n       for (i2 = PREV_INSN (insn); i2; i2 = PREV_INSN (i2))\n \t{\n \t  rtx set = single_set (i2);\n \n \t  if (set != 0 && SET_DEST (set) == reg)\n \t    {\n \t      delete_address_reloads (i2, insn);\n-\t      /* This might be a basic block head,\n-\t\t thus don't use delete_insn.  */\n \t      delete_insn (i2);\n \t    }\n \t  if (GET_CODE (i2) == CODE_LABEL\n \t      || GET_CODE (i2) == JUMP_INSN)\n \t    break;\n \t}\n \n-      /* For the debugging info,\n-\t say the pseudo lives in this reload reg.  */\n+      /* For the debugging info, say the pseudo lives in this reload reg.  */\n       reg_renumber[REGNO (reg)] = REGNO (rld[j].reg_rtx);\n       alter_reg (REGNO (reg), -1);\n     }\n-  delete_address_reloads (output_reload_insn, insn);\n-  delete_insn (output_reload_insn);\n-\n+  else\n+    {\n+      delete_address_reloads (output_reload_insn, insn);\n+      delete_insn (output_reload_insn);\n+    }\n }\n \n /* We are going to delete DEAD_INSN.  Recursively delete loads of"}]}