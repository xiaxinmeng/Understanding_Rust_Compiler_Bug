{"sha": "ebce9df70bb27efd69c41b13b069f4d146b0238d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJjZTlkZjcwYmIyN2VmZDY5YzQxYjEzYjA2OWY0ZDE0NmIwMjM4ZA==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-11-19T08:36:57Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-11-19T08:36:57Z"}, "message": "gensupport.c (old_preds): Rename to std_preds, add special field.\n\n2005-11-19  Paolo Bonzini  <bonzini@gcc.gnu.org>\n\n\t* gensupport.c (old_preds): Rename to std_preds, add special field.\n\t(struct old_pred_table): Rename to struct std_pred_table, add special\n\tfield.\n\t(NUM_KNOWN_OLD_PREDS): Rename to NUM_KNOWN_STD_PREDS.\n\t(NUM_OLD_SPECIAL_MODE_PREDS): Remove.\n\t(init_predicate_table): Adjust, and set along the way whether a\n\tpredicate is special.\n\nFrom-SVN: r107215", "tree": {"sha": "25db1ca1ca1d99a74b5fd0ff8562585381e47269", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25db1ca1ca1d99a74b5fd0ff8562585381e47269"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebce9df70bb27efd69c41b13b069f4d146b0238d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebce9df70bb27efd69c41b13b069f4d146b0238d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebce9df70bb27efd69c41b13b069f4d146b0238d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebce9df70bb27efd69c41b13b069f4d146b0238d/comments", "author": null, "committer": null, "parents": [{"sha": "8273ee9f137b960eefe25b8c7aed5b29a74506de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8273ee9f137b960eefe25b8c7aed5b29a74506de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8273ee9f137b960eefe25b8c7aed5b29a74506de"}], "stats": {"total": 93, "additions": 42, "deletions": 51}, "files": [{"sha": "8f1604fae20de749f291a0167d6614a3fc174bb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebce9df70bb27efd69c41b13b069f4d146b0238d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebce9df70bb27efd69c41b13b069f4d146b0238d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebce9df70bb27efd69c41b13b069f4d146b0238d", "patch": "@@ -1,3 +1,13 @@\n+2005-11-19  Paolo Bonzini  <bonzini@gcc.gnu.org>\n+\n+\t* gensupport.c (old_preds): Rename to std_preds, add special field.\n+\t(struct old_pred_table): Rename to struct std_pred_table, add special\n+\tfield.\n+\t(NUM_KNOWN_OLD_PREDS): Rename to NUM_KNOWN_STD_PREDS.\n+\t(NUM_OLD_SPECIAL_MODE_PREDS): Remove.\n+\t(init_predicate_table): Adjust, and set along the way whether a\n+\tpredicate is special.\n+\n 2005-11-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* BASE-VER: Change to 4.2.0."}, {"sha": "c5062343d28a78c47aff3d6063c7b4d96d76ea25", "filename": "gcc/gensupport.c", "status": "modified", "additions": 32, "deletions": 51, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebce9df70bb27efd69c41b13b069f4d146b0238d/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebce9df70bb27efd69c41b13b069f4d146b0238d/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=ebce9df70bb27efd69c41b13b069f4d146b0238d", "patch": "@@ -1220,46 +1220,38 @@ add_predicate (struct pred_data *pred)\n /* This array gives the initial content of the predicate table.  It\n    has entries for all predicates defined in recog.c.  */\n \n-struct old_pred_table\n+struct std_pred_table\n {\n   const char *name;\n+  bool special;\n   RTX_CODE codes[NUM_RTX_CODE];\n };\n \n-static const struct old_pred_table old_preds[] = {\n-  {\"general_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t       LABEL_REF, SUBREG, REG, MEM }},\n-  {\"address_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t       LABEL_REF, SUBREG, REG, MEM,\n-\t\t       PLUS, MINUS, MULT}},\n-  {\"register_operand\", {SUBREG, REG}},\n-  {\"pmode_register_operand\", {SUBREG, REG}},\n-  {\"scratch_operand\", {SCRATCH, REG}},\n-  {\"immediate_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t LABEL_REF}},\n-  {\"const_int_operand\", {CONST_INT}},\n-  {\"const_double_operand\", {CONST_INT, CONST_DOUBLE}},\n-  {\"nonimmediate_operand\", {SUBREG, REG, MEM}},\n-  {\"nonmemory_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n-\t\t\t LABEL_REF, SUBREG, REG}},\n-  {\"push_operand\", {MEM}},\n-  {\"pop_operand\", {MEM}},\n-  {\"memory_operand\", {SUBREG, MEM}},\n-  {\"indirect_operand\", {SUBREG, MEM}},\n-  {\"comparison_operator\", {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU, GTU,\n-\t\t\t   UNORDERED, ORDERED, UNEQ, UNGE, UNGT, UNLE,\n-\t\t\t   UNLT, LTGT}}\n+static const struct std_pred_table std_preds[] = {\n+  {\"general_operand\", false, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n+\t\t\t      LABEL_REF, SUBREG, REG, MEM }},\n+  {\"address_operand\", true, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n+\t\t\t     LABEL_REF, SUBREG, REG, MEM,\n+\t\t\t     PLUS, MINUS, MULT}},\n+  {\"register_operand\", false, {SUBREG, REG}},\n+  {\"pmode_register_operand\", true, {SUBREG, REG}},\n+  {\"scratch_operand\", false, {SCRATCH, REG}},\n+  {\"immediate_operand\", false, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n+\t\t\t\tLABEL_REF}},\n+  {\"const_int_operand\", false, {CONST_INT}},\n+  {\"const_double_operand\", false, {CONST_INT, CONST_DOUBLE}},\n+  {\"nonimmediate_operand\", false, {SUBREG, REG, MEM}},\n+  {\"nonmemory_operand\", false, {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\n+\t\t\t false, LABEL_REF, SUBREG, REG}},\n+  {\"push_operand\", false, {MEM}},\n+  {\"pop_operand\", false, {MEM}},\n+  {\"memory_operand\", false, {SUBREG, MEM}},\n+  {\"indirect_operand\", false, {SUBREG, MEM}},\n+  {\"comparison_operator\", false, {EQ, NE, LE, LT, GE, GT, LEU, LTU, GEU, GTU,\n+\t\t\t\t  UNORDERED, ORDERED, UNEQ, UNGE, UNGT, UNLE,\n+\t\t\t\t  UNLT, LTGT}}\n };\n-#define NUM_KNOWN_OLD_PREDS ARRAY_SIZE (old_preds)\n-\n-/* This table gives the set of special predicates.  It has entries for\n-   all special predicates defined in recog.c.  */\n-static const char *const old_special_pred_table[] = {\n-  \"address_operand\",\n-  \"pmode_register_operand\",\n-};\n-\n-#define NUM_OLD_SPECIAL_MODE_PREDS ARRAY_SIZE (old_special_pred_table)\n+#define NUM_KNOWN_STD_PREDS ARRAY_SIZE (std_preds)\n \n /* Initialize the table of predicate definitions, starting with\n    the information we have on generic predicates.  */\n@@ -1274,14 +1266,15 @@ init_predicate_table (void)\n \t\t\t\t       eq_struct_pred_data, 0,\n \t\t\t\t       xcalloc, free);\n \n-  for (i = 0; i < NUM_KNOWN_OLD_PREDS; i++)\n+  for (i = 0; i < NUM_KNOWN_STD_PREDS; i++)\n     {\n       pred = xcalloc (sizeof (struct pred_data), 1);\n-      pred->name = old_preds[i].name;\n+      pred->name = std_preds[i].name;\n+      pred->special = std_preds[i].special;\n \n-      for (j = 0; old_preds[i].codes[j] != 0; j++)\n+      for (j = 0; std_preds[i].codes[j] != 0; j++)\n \t{\n-\t  enum rtx_code code = old_preds[i].codes[j];\n+\t  enum rtx_code code = std_preds[i].codes[j];\n \n \t  pred->codes[code] = true;\n \t  if (GET_RTX_CLASS (code) != RTX_CONST_OBJ)\n@@ -1295,20 +1288,8 @@ init_predicate_table (void)\n \t    pred->allows_non_lvalue = true;\n \t}\n       if (j == 1)\n-\tpred->singleton = old_preds[i].codes[0];\n+\tpred->singleton = std_preds[i].codes[0];\n       \n       add_predicate (pred);\n     }\n-\n-  for (i = 0; i < NUM_OLD_SPECIAL_MODE_PREDS; i++)\n-    {\n-      pred = lookup_predicate (old_special_pred_table[i]);\n-      if (!pred)\n-\t{\n-\t  error (\"old-style special predicate list refers \"\n-\t\t \"to unknown predicate '%s'\", old_special_pred_table[i]);\n-\t  continue;\n-\t}\n-      pred->special = true;\n-    }\n }"}]}