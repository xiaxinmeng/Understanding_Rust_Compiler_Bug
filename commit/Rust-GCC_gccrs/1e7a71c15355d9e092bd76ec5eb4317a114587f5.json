{"sha": "1e7a71c15355d9e092bd76ec5eb4317a114587f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU3YTcxYzE1MzU1ZDllMDkyYmQ3NmVjNWViNDMxN2ExMTQ1ODdmNQ==", "commit": {"author": {"name": "Clinton Popetz", "email": "cpopetz@cygnus.com", "date": "2000-01-11T17:42:30Z"}, "committer": {"name": "Clinton Popetz", "email": "cpopetz@gcc.gnu.org", "date": "2000-01-11T17:42:30Z"}, "message": "mips.c (mips_va_arg): For EABI...\n\n        * config/mips/mips.c (mips_va_arg): For EABI, emit the queued\n        integer vararg POSTINCREMENT before the destination of the jump\n        for the hard fp case.\n        (function_arg_pass_by_reference): Pass a copy of CUM to\n\tFUNCTION_ARG.\n\n        * config/mips/mips.h (GO_IF_LEGITIMATE_ADDRESS): Move check\n        for CONSTANT_ADDRESS_P above while loop for subreg.\n\nFrom-SVN: r31328", "tree": {"sha": "82f6fde4d86a674d0307f4f0debe1749ea5b8a35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82f6fde4d86a674d0307f4f0debe1749ea5b8a35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e7a71c15355d9e092bd76ec5eb4317a114587f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7a71c15355d9e092bd76ec5eb4317a114587f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e7a71c15355d9e092bd76ec5eb4317a114587f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e7a71c15355d9e092bd76ec5eb4317a114587f5/comments", "author": null, "committer": null, "parents": [{"sha": "a249decd13d6d5a45ffa364bbfc766b03d83f96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a249decd13d6d5a45ffa364bbfc766b03d83f96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a249decd13d6d5a45ffa364bbfc766b03d83f96f"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "eb6600a610c0d60ef61fad4cd225faea6b53f6bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a71c15355d9e092bd76ec5eb4317a114587f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a71c15355d9e092bd76ec5eb4317a114587f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e7a71c15355d9e092bd76ec5eb4317a114587f5", "patch": "@@ -1,3 +1,14 @@\n+2000-01-11  Clinton Popetz  <cpopetz@cygnus.com>\n+\n+        * config/mips/mips.c (mips_va_arg): For EABI, emit the queued\n+        integer vararg POSTINCREMENT before the destination of the jump\n+        for the hard fp case. \n+        (function_arg_pass_by_reference): Pass a copy of CUM to \n+\tFUNCTION_ARG.\n+        \n+        * config/mips/mips.h (GO_IF_LEGITIMATE_ADDRESS): Move check\n+        for CONSTANT_ADDRESS_P above while loop for subreg.\n+\n 2000-01-11  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* flow.c (propagate_block): When a prologue/epilogue insn"}, {"sha": "67859dff1353d4ec90acb3419dfe3e6a3d072b08", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a71c15355d9e092bd76ec5eb4317a114587f5/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a71c15355d9e092bd76ec5eb4317a114587f5/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=1e7a71c15355d9e092bd76ec5eb4317a114587f5", "patch": "@@ -4226,6 +4226,9 @@ mips_va_arg (valist, type)\n       if (r != addr_rtx)\n \temit_move_insn (addr_rtx, r);\n \n+      /* Ensure that the above POSTINCREMENT is emitted before lab_over */\n+      emit_queue();\n+\n       if (lab_over)\n \temit_label (lab_over);\n \n@@ -7449,9 +7452,16 @@ function_arg_pass_by_reference (cum, mode, type, named)\n      to prevent it, or add code to function.c to properly handle the case.  */\n   /* ??? cum can be NULL when called from mips_va_arg.  The problem handled\n      here hopefully is not relevant to mips_va_arg.  */\n-  if (cum && FUNCTION_ARG (*cum, mode, type, named) != 0\n-      && MUST_PASS_IN_STACK (mode, type))\n-    return 1;\n+  if (cum && MUST_PASS_IN_STACK (mode, type))\n+     {\n+        /* Don't pass the actual CUM to FUNCTION_ARG, because we would \n+           get double copies of any offsets generated for small structs \n+           passed in registers. */\n+        CUMULATIVE_ARGS temp = *cum;\n+        if (FUNCTION_ARG (temp, mode, type, named) != 0)\n+           return 1;\n+     }\n+\n \n   /* Otherwise, we only do this if EABI is selected.  */\n   if (mips_abi != ABI_EABI)"}, {"sha": "1690dfcffc5ab50fca752d12bbd219c3726dca54", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e7a71c15355d9e092bd76ec5eb4317a114587f5/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e7a71c15355d9e092bd76ec5eb4317a114587f5/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=1e7a71c15355d9e092bd76ec5eb4317a114587f5", "patch": "@@ -2804,6 +2804,13 @@ typedef struct mips_args {\n       GO_DEBUG_RTX (xinsn);\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n+  /* Check for constant before stripping off SUBREG, so that we don't\t\\\n+     accept (subreg (const_int)) which will fail to reload. */   \t\\\n+  if (CONSTANT_ADDRESS_P (xinsn)\t\t\t\t\t\\\n+      && ! (mips_split_addresses && mips_check_split (xinsn, MODE))\t\\\n+      && (! TARGET_MIPS16 || mips16_constant (xinsn, MODE, 1, 0)))\t\\\n+    goto ADDR;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n   while (GET_CODE (xinsn) == SUBREG)\t\t\t\t\t\\\n     xinsn = SUBREG_REG (xinsn);\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -2812,11 +2819,6 @@ typedef struct mips_args {\n   if (GET_CODE (xinsn) == REG && REG_MODE_OK_FOR_BASE_P (xinsn, MODE))\t\\\n     goto ADDR;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (CONSTANT_ADDRESS_P (xinsn)\t\t\t\t\t\\\n-      && ! (mips_split_addresses && mips_check_split (xinsn, MODE))\t\\\n-      && (! TARGET_MIPS16 || mips16_constant (xinsn, MODE, 1, 0)))\t\\\n-    goto ADDR;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   if (GET_CODE (xinsn) == LO_SUM && mips_split_addresses)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       register rtx xlow0 = XEXP (xinsn, 0);\t\t\t\t\\"}]}