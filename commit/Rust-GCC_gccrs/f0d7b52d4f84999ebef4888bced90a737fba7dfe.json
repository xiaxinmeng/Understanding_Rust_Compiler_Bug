{"sha": "f0d7b52d4f84999ebef4888bced90a737fba7dfe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjBkN2I1MmQ0Zjg0OTk5ZWJlZjQ4ODhiY2VkOTBhNzM3ZmJhN2RmZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2017-03-24T12:57:14Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2017-03-24T12:57:14Z"}, "message": "Adjust c-c++-common/Wimplicit-fallthrough-7.c etc. line numbers\n\n\t* c-c++-common/Wimplicit-fallthrough-7.c: Adjust dg-warning\n\tetc. line numbers.\n\t* gcc.dg/Walloca-1.c: Likewise.\n\t* gcc.dg/Walloca-2.c: Likewise.\n\t* gcc.dg/Wvla-larger-than-2.c: Likewise.\n\nFrom-SVN: r246440", "tree": {"sha": "1f1cac59aee84c17bcae12d45d602e70858029e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f1cac59aee84c17bcae12d45d602e70858029e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f0d7b52d4f84999ebef4888bced90a737fba7dfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d7b52d4f84999ebef4888bced90a737fba7dfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d7b52d4f84999ebef4888bced90a737fba7dfe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d7b52d4f84999ebef4888bced90a737fba7dfe/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "635684c4cf2c3672017cda0df400213b0ca2d10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635684c4cf2c3672017cda0df400213b0ca2d10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635684c4cf2c3672017cda0df400213b0ca2d10b"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "5ab5619e8e125fbe832849c34e3cbf56e6faae78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f0d7b52d4f84999ebef4888bced90a737fba7dfe", "patch": "@@ -1,3 +1,11 @@\n+2017-03-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* c-c++-common/Wimplicit-fallthrough-7.c: Adjust dg-warning\n+\tetc. line numbers.\n+\t* gcc.dg/Walloca-1.c: Likewise.\n+\t* gcc.dg/Walloca-2.c: Likewise.\n+\t* gcc.dg/Wvla-larger-than-2.c: Likewise.\n+\n 2017-03-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/80158"}, {"sha": "e03b09b3e5d4f06c6902c035f3f016eba34eafc7", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-7.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-7.c?ref=f0d7b52d4f84999ebef4888bced90a737fba7dfe", "patch": "@@ -21,8 +21,8 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      { /* { dg-warning \"statement may fall through\" \"\" { target c } 23 } */\n-\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 24 } */\n+      { /* { dg-warning \"statement may fall through\" \"\" { target c } 24 } */\n+\tint a[i]; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 25 } */\n       }\n     case 2:\n       bar (99);\n@@ -31,8 +31,8 @@ f (int i)\n   switch (i)\n     {\n     case 1:\n-      for (int j = 0; j < 10; j++) /* { dg-warning \"statement may fall through\" \"\" { target c } 33 } */\n-\tmap[j] = j; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 34 } */\n+      for (int j = 0; j < 10; j++) /* { dg-warning \"statement may fall through\" \"\" { target c } 34 } */\n+\tmap[j] = j; /* { dg-warning \"statement may fall through\" \"\" { target c++ } 35 } */\n     case 2:\n       bar (99);\n     }"}, {"sha": "fa19124605499b23478d1989e00d6d25fbb5d2ce", "filename": "gcc/testsuite/gcc.dg/Walloca-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-1.c?ref=f0d7b52d4f84999ebef4888bced90a737fba7dfe", "patch": "@@ -25,7 +25,7 @@ void foo1 (size_t len, size_t len2, size_t len3)\n   useit (s);\t\t\t// OK, constant argument to alloca\n \n   s = alloca (num);\t\t// { dg-warning \"large due to conversion\" \"\" { target lp64 } }\n-  // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } 26 }\n+  // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } 27 }\n   useit (s);\n \n   s = alloca (30000);\t\t/* { dg-warning \"is too large\" } */"}, {"sha": "81d923c1e50a4430384658ab4189051b56f3a0fd", "filename": "gcc/testsuite/gcc.dg/Walloca-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWalloca-2.c?ref=f0d7b52d4f84999ebef4888bced90a737fba7dfe", "patch": "@@ -37,8 +37,8 @@ g3 (int n)\n   if (n > 0 && n < 3000)\n     {\n       p = __builtin_alloca (n); // { dg-warning \"'alloca' may be too large\" \"\" { target lp64} }\n-      // { dg-message \"note:.*argument may be as large as 2999\" \"note\" { target lp64 } 38 }\n-      // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } 38 }\n+      // { dg-message \"note:.*argument may be as large as 2999\" \"note\" { target lp64 } 39 }\n+      // { dg-warning \"unbounded use of 'alloca'\" \"\" { target { ! lp64 } } 39 }\n     }\n   else\n     p = __builtin_malloc (n);"}, {"sha": "68de771cbbd0c5c3826566a8594925fb0e760ff6", "filename": "gcc/testsuite/gcc.dg/Wvla-larger-than-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f0d7b52d4f84999ebef4888bced90a737fba7dfe/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-larger-than-2.c?ref=f0d7b52d4f84999ebef4888bced90a737fba7dfe", "patch": "@@ -24,7 +24,7 @@ f2 (__SIZE_TYPE__ a)\n     {\n       // 11 * 4 bytes = 44: Not OK.\n       uint32_t x[a]; // { dg-warning \"array may be too large\" }\n-      // { dg-message \"note:.*argument may be as large as 44\" \"note\" { target *-*-* } 25 }\n+      // { dg-message \"note:.*argument may be as large as 44\" \"note\" { target *-*-* } 26 }\n       f0 (x);\n     }\n }"}]}