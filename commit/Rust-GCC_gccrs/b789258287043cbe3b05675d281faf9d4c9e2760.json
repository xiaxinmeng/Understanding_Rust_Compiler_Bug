{"sha": "b789258287043cbe3b05675d281faf9d4c9e2760", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc4OTI1ODI4NzA0M2NiZTNiMDU2NzVkMjgxZmFmOWQ0YzllMjc2MA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jblomqvi@cc.hut.fi", "date": "2004-10-31T01:24:29Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-10-31T01:24:29Z"}, "message": "re PR fortran/17590 (Standard conformance should take intrinsics into account.)\n\n2004-10-31  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n\n\tPR fortran/17590\n\t* gfortran.h: Change GFC_STD_* flags to more appropriate\n\tones. (struct gfc_intrinsic_isym): Add field for standard. (struct\n\tgfc_option_t): Add field for warning about use of nonstandard\n\tintrinsics.\n\t* intrinsic.c (add_sym): Add parameter for standard version, check\n\tthis against current standard.\n\t(add_sym_0): Pass standard parameter to add_sym.\n\t(add_sym_1, add_sym_0s, add_sym_1s, add_sym_1m, add_sym_2): Ditto.\n\t(add_sym_2s, add_sym_3, add_sym_3ml, add_sym_3red, add_sym_3s): Ditto.\n\t(add_sym_4, add_sym_4s, add_sym_5, add_sym_5s): Ditto.\n\t(make_generic): Add parameter for standard, check this\n\tagainst currently selected standard.\n\t(add_functions, add_subroutines): Add parameter to tell which\n\tstandard an intrinsic belongs to.\n\t(check_intrinsic_standard): New function.\n\t(gfc_intrinsic_func_interface): Add call to check_intrinsic_standard.\n\t(gfc_intrinsic_sub_interface): Ditto.\n\t* lang.opt: Add Wnonstd-intrinsics option.\n\t* options.c (gfc_init_options): Change to use new GFC_STD_* flags,\n\tinit new warning.\n\t(set_Wall): Add warning about nonstd intrinsics.\n\t(gfc_handle_option): Change to use new GFC_STD_* flags,\n\thandle new warning.\n\t* invoke.texi: Update manual to include -Wnonstd-intrinsics.\n\nFrom-SVN: r89907", "tree": {"sha": "b5b041323c25b727232c8af83c61b4df9b68a294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5b041323c25b727232c8af83c61b4df9b68a294"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b789258287043cbe3b05675d281faf9d4c9e2760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b789258287043cbe3b05675d281faf9d4c9e2760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b789258287043cbe3b05675d281faf9d4c9e2760", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b789258287043cbe3b05675d281faf9d4c9e2760/comments", "author": null, "committer": null, "parents": [{"sha": "13747d3edad2812390d0f46c0ede0a7aa03442f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13747d3edad2812390d0f46c0ede0a7aa03442f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13747d3edad2812390d0f46c0ede0a7aa03442f4"}], "stats": {"total": 884, "additions": 492, "deletions": 392}, "files": [{"sha": "a05908095959e13e899eae6899cf484c2088353d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b789258287043cbe3b05675d281faf9d4c9e2760", "patch": "@@ -1,3 +1,31 @@\n+2004-10-31  Janne Blomqvist  <jblomqvi@cc.hut.fi>\n+\n+\tPR fortran/17590\n+\t* gfortran.h: Change GFC_STD_* flags to more appropriate\n+\tones. (struct gfc_intrinsic_isym): Add field for standard. (struct\n+\tgfc_option_t): Add field for warning about use of nonstandard\n+\tintrinsics.\n+\t* intrinsic.c (add_sym): Add parameter for standard version, check\n+\tthis against current standard.\n+\t(add_sym_0): Pass standard parameter to add_sym.\n+\t(add_sym_1, add_sym_0s, add_sym_1s, add_sym_1m, add_sym_2): Ditto.\n+\t(add_sym_2s, add_sym_3, add_sym_3ml, add_sym_3red, add_sym_3s): Ditto.\n+\t(add_sym_4, add_sym_4s, add_sym_5, add_sym_5s): Ditto.\n+\t(make_generic): Add parameter for standard, check this\n+\tagainst currently selected standard.\n+\t(add_functions, add_subroutines): Add parameter to tell which\n+\tstandard an intrinsic belongs to.\n+\t(check_intrinsic_standard): New function.\n+\t(gfc_intrinsic_func_interface): Add call to check_intrinsic_standard.\n+\t(gfc_intrinsic_sub_interface): Ditto.\n+\t* lang.opt: Add Wnonstd-intrinsics option.\n+\t* options.c (gfc_init_options): Change to use new GFC_STD_* flags,\n+\tinit new warning.\n+\t(set_Wall): Add warning about nonstd intrinsics.\n+\t(gfc_handle_option): Change to use new GFC_STD_* flags,\n+\thandle new warning.\n+\t* invoke.texi: Update manual to include -Wnonstd-intrinsics.\n+\n 2004-10-30  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* f95-lang.c (lang_tree_node): Add chain_next to be the TREE_CHAIN."}, {"sha": "5020a1f930d751ebfae81dbbf7553356142a9f5c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=b789258287043cbe3b05675d281faf9d4c9e2760", "patch": "@@ -97,12 +97,13 @@ mstring;\n \n \n /* Flags to specify which standardi/extension contains a feature.  */\n-#define GFC_STD_GNU\t\t(1<<5)\t/* GNU Fortran extension.  */\n-#define GFC_STD_F2003\t\t(1<<4)\t/* New in F2003.  */\n-#define GFC_STD_F2003_DEL\t(1<<3)\t/* Deleted in F2003.  */\n-#define GFC_STD_F2003_OBS\t(1<<2)\t/* Obsoleted in F2003.  */\n-#define GFC_STD_F95_DEL\t\t(1<<1)\t/* Deleted in F95.  */\n-#define GFC_STD_F95_OBS\t\t(1<<0)\t/* Obsoleted in F95.  */\n+#define GFC_STD_GNU                (1<<5)    /* GNU Fortran extension.  */\n+#define GFC_STD_F2003             (1<<4)    /* New in F2003.  */\n+/* Note that no features were obsoleted nor deleted in F2003. */\n+#define GFC_STD_F95                 (1<<3)    /* New in F95. */\n+#define GFC_STD_F95_DEL         (1<<2)    /* Deleted in F95.  */\n+#define GFC_STD_F95_OBS        (1<<1)    /* Obsoleted in F95.  */\n+#define GFC_STD_F77                 (1<<0)    /* Up to and including F77. */\n \n /*************************** Enums *****************************/\n \n@@ -1004,7 +1005,7 @@ typedef struct gfc_intrinsic_sym\n   char name[GFC_MAX_SYMBOL_LEN + 1], lib_name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_intrinsic_arg *formal;\n   gfc_typespec ts;\n-  int elemental, pure, generic, specific, actual_ok;\n+  int elemental, pure, generic, specific, actual_ok, standard;\n \n   gfc_simplify_f simplify;\n   gfc_check_f check;\n@@ -1403,6 +1404,7 @@ typedef struct\n   int d8;\n   int warn_std;\n   int allow_std;\n+  int warn_nonstd_intrinsics;\n }\n gfc_option_t;\n "}, {"sha": "1c1698fdd2e38b8708a9ec98695abc628c16ad85", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 425, "deletions": 373, "changes": 798, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=b789258287043cbe3b05675d281faf9d4c9e2760", "patch": "@@ -196,6 +196,7 @@ do_check (gfc_intrinsic_sym * specific, gfc_actual_arglist * arg)\n       int        If the function can be used as an actual argument\n       bt         return type of function\n       int        kind of return type of function\n+      int        Fortran standard version\n       check      pointer to check function\n       simplify   pointer to simplification function\n       resolve    pointer to resolution function\n@@ -213,13 +214,18 @@ do_check (gfc_intrinsic_sym * specific, gfc_actual_arglist * arg)\n \n static void\n add_sym (const char *name, int elemental, int actual_ok ATTRIBUTE_UNUSED,\n-\t bt type, int kind, gfc_check_f check, gfc_simplify_f simplify,\n-\t gfc_resolve_f resolve, ...)\n+\t bt type, int kind, int standard, gfc_check_f check,\n+\t gfc_simplify_f simplify, gfc_resolve_f resolve, ...)\n {\n \n   int optional, first_flag;\n   va_list argp;\n \n+  /* First check that the intrinsic belongs to the selected standard.\n+     If not, don't add it to the symbol list. */\n+  if (!(gfc_option.allow_std & standard))\n+    return;\n+\n   switch (sizing)\n     {\n     case SZ_SUBS:\n@@ -239,6 +245,7 @@ add_sym (const char *name, int elemental, int actual_ok ATTRIBUTE_UNUSED,\n       next_sym->elemental = elemental;\n       next_sym->ts.type = type;\n       next_sym->ts.kind = kind;\n+      next_sym->standard = standard;\n       next_sym->simplify = simplify;\n       next_sym->check = check;\n       next_sym->resolve = resolve;\n@@ -291,7 +298,7 @@ add_sym (const char *name, int elemental, int actual_ok ATTRIBUTE_UNUSED,\n \n \n static void add_sym_0 (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t       int kind, int standard,\n \t\t       try (*check)(void),\n \t\t       gfc_expr *(*simplify)(void),\n \t\t       void (*resolve)(gfc_expr *)\n@@ -304,13 +311,13 @@ static void add_sym_0 (const char *name, int elemental, int actual_ok, bt type,\n   sf.f0 = simplify;\n   rf.f0 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   (void*)0);\n }\n \n \n static void add_sym_1 (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *),\n@@ -324,14 +331,14 @@ static void add_sym_1 (const char *name, int elemental, int actual_ok, bt type,\n   sf.f1 = simplify;\n   rf.f1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   (void*)0);\n }\n \n \n static void\n-add_sym_0s (const char * name, int actual_ok,\n+add_sym_0s (const char * name, int actual_ok, int standard,\n \t    void (*resolve)(gfc_code *))\n {\n   gfc_check_f cf;\n@@ -342,13 +349,13 @@ add_sym_0s (const char * name, int actual_ok,\n   sf.f1 = NULL;\n   rf.s1 = resolve;\n \n-  add_sym (name, 1, actual_ok, BT_UNKNOWN, 0, cf, sf, rf,\n+  add_sym (name, 1, actual_ok, BT_UNKNOWN, 0, standard, cf, sf, rf,\n \t   (void*)0);\n }\n \n \n static void add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n-\t\t\tint kind,\n+\t\t\tint kind, int standard,\n \t\t\ttry (*check)(gfc_expr *),\n \t\t\tgfc_expr *(*simplify)(gfc_expr *),\n \t\t\tvoid (*resolve)(gfc_code *),\n@@ -362,14 +369,14 @@ static void add_sym_1s (const char *name, int elemental, int actual_ok, bt type,\n   sf.f1 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   (void*)0);\n }\n \n \n static void add_sym_1m (const char *name, int elemental, int actual_ok, bt type,\n-\t\t\tint kind,\n+\t\t\tint kind, int standard,\n \t\t\ttry (*check)(gfc_actual_arglist *),\n \t\t\tgfc_expr *(*simplify)(gfc_expr *),\n \t\t\tvoid (*resolve)(gfc_expr *,gfc_actual_arglist *),\n@@ -384,15 +391,15 @@ static void add_sym_1m (const char *name, int elemental, int actual_ok, bt type,\n   sf.f1 = simplify;\n   rf.f1m = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   (void*)0);\n }\n \n \n static void add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -407,7 +414,7 @@ static void add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n   sf.f2 = simplify;\n   rf.f2 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   (void*)0);\n@@ -418,7 +425,7 @@ static void add_sym_2 (const char *name, int elemental, int actual_ok, bt type,\n    of intrinsic names. */\n \n static void add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t\tint kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_code *),\n@@ -433,15 +440,15 @@ static void add_sym_2s (const char *name, int elemental, int actual_ok, bt type,\n   sf.f2 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   (void*)0);\n }\n \n \n static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -457,7 +464,7 @@ static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n   sf.f3 = simplify;\n   rf.f3 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -468,7 +475,7 @@ static void add_sym_3 (const char *name, int elemental, int actual_ok, bt type,\n    might have to be reordered.  */\n \n static void add_sym_3ml (const char *name, int elemental, \n-\t\t\t int actual_ok, bt type, int kind,\n+\t\t\t int actual_ok, bt type, int kind, int standard,\n \t\t\t try (*check)(gfc_actual_arglist *),\n \t\t\t gfc_expr*(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t\t void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -484,7 +491,7 @@ static void add_sym_3ml (const char *name, int elemental,\n   sf.f3 = simplify;\n   rf.f3 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -495,7 +502,7 @@ static void add_sym_3ml (const char *name, int elemental,\n    their argument also might have to be reordered.  */\n \n static void add_sym_3red (const char *name, int elemental, \n-                          int actual_ok, bt type, int kind,\n+                          int actual_ok, bt type, int kind, int standard,\n                           try (*check)(gfc_actual_arglist *),\n                           gfc_expr*(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n                           void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -511,7 +518,7 @@ static void add_sym_3red (const char *name, int elemental,\n   sf.f3 = simplify;\n   rf.f3 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -522,7 +529,7 @@ static void add_sym_3red (const char *name, int elemental,\n    of intrinsic names. */\n \n static void add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t\tint kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_code *),\n@@ -538,7 +545,7 @@ static void add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n   sf.f3 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -547,7 +554,7 @@ static void add_sym_3s (const char *name, int elemental, int actual_ok, bt type,\n \n \n static void add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n-\t\t       int kind,\n+\t\t       int kind, int standard,\n \t\t       try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n \t\t       void (*resolve)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n@@ -564,7 +571,7 @@ static void add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n   sf.f4 = simplify;\n   rf.f4 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -574,7 +581,7 @@ static void add_sym_4 (const char *name, int elemental, int actual_ok, bt type,\n \n \n static void add_sym_4s (const char *name, int elemental, int actual_ok,\n-    bt type, int kind,\n+\t\t\tbt type, int kind, int standard,\n     try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n     gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n     void (*resolve)(gfc_code *),\n@@ -591,7 +598,7 @@ static void add_sym_4s (const char *name, int elemental, int actual_ok,\n   sf.f4 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -602,7 +609,8 @@ static void add_sym_4s (const char *name, int elemental, int actual_ok,\n \n static void add_sym_5s  \n (\n- const char *name, int elemental, int actual_ok, bt type, int kind,\n+ const char *name, int elemental, int actual_ok, \n+ bt type, int kind, int standard,\n  try (*check)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n  gfc_expr *(*simplify)(gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *,gfc_expr *),\n  void (*resolve)(gfc_code *),\n@@ -620,7 +628,7 @@ static void add_sym_5s\n   sf.f5 = simplify;\n   rf.s1 = resolve;\n \n-  add_sym (name, elemental, actual_ok, type, kind, cf, sf, rf,\n+  add_sym (name, elemental, actual_ok, type, kind, standard, cf, sf, rf,\n \t   a1, type1, kind1, optional1,\n \t   a2, type2, kind2, optional2,\n \t   a3, type3, kind3, optional3,\n@@ -719,10 +727,13 @@ gfc_intrinsic_name (const char *name, int subroutine_flag)\n    functions associated with that generic.  */\n \n static void\n-make_generic (const char *name, gfc_generic_isym_id generic_id)\n+make_generic (const char *name, gfc_generic_isym_id generic_id, int standard)\n {\n   gfc_intrinsic_sym *g;\n \n+  if (!(gfc_option.allow_std & standard))\n+    return;\n+\n   if (sizing != SZ_NOTHING)\n     return;\n \n@@ -813,794 +824,810 @@ add_functions (void)\n   dz = gfc_default_complex_kind;\n   ii = gfc_index_integer_kind;\n \n-  add_sym_1 (\"abs\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"abs\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_abs, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"iabs\", 1, 1, BT_INTEGER, di,\n+  add_sym_1 (\"iabs\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_INTEGER, di, 0);\n \n-  add_sym_1 (\"dabs\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dabs\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs, a, BT_REAL, dd, 0);\n \n-  add_sym_1 (\"cabs\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"cabs\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_abs, gfc_resolve_abs,\n \t     a, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"zabs\", 1, 1, BT_REAL, dd, NULL, gfc_simplify_abs, gfc_resolve_abs, a, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"zabs\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n+\t     NULL, gfc_simplify_abs, gfc_resolve_abs, \n+\t     a, BT_COMPLEX, dd, 0);\n \n   make_alias (\"cdabs\");\n \n-  make_generic (\"abs\", GFC_ISYM_ABS);\n+  make_generic (\"abs\", GFC_ISYM_ABS, GFC_STD_F77);\n \n-  add_sym_1 (\"achar\", 1, 1, BT_CHARACTER, dc,\n+  add_sym_1 (\"achar\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_achar, NULL, i, BT_INTEGER, di, 0);\n \n-  make_generic (\"achar\", GFC_ISYM_ACHAR);\n+  make_generic (\"achar\", GFC_ISYM_ACHAR, GFC_STD_F95);\n \n-  add_sym_1 (\"acos\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"acos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dacos\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dacos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_acos, gfc_resolve_acos,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"acos\", GFC_ISYM_ACOS);\n+  make_generic (\"acos\", GFC_ISYM_ACOS, GFC_STD_F77);\n \n-  add_sym_1 (\"adjustl\", 1, 1, BT_CHARACTER, dc,\n+  add_sym_1 (\"adjustl\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustl, NULL, stg, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"adjustl\", GFC_ISYM_ADJUSTL);\n+  make_generic (\"adjustl\", GFC_ISYM_ADJUSTL, GFC_STD_F95);\n \n-  add_sym_1 (\"adjustr\", 1, 1, BT_CHARACTER, dc,\n+  add_sym_1 (\"adjustr\", 1, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     NULL, gfc_simplify_adjustr, NULL, stg, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"adjustr\", GFC_ISYM_ADJUSTR);\n+  make_generic (\"adjustr\", GFC_ISYM_ADJUSTR, GFC_STD_F95);\n \n-  add_sym_1 (\"aimag\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"aimag\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_aimag, gfc_resolve_aimag,\n \t     z, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"dimag\", 1, 1, BT_REAL, dd, NULL, gfc_simplify_aimag, gfc_resolve_aimag, z, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"dimag\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n+\t     NULL, gfc_simplify_aimag, gfc_resolve_aimag, \n+\t     z, BT_COMPLEX, dd, 0);\n \n-  make_generic (\"aimag\", GFC_ISYM_AIMAG);\n+  make_generic (\"aimag\", GFC_ISYM_AIMAG, GFC_STD_F77);\n \n-  add_sym_2 (\"aint\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"aint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_xkind, gfc_simplify_aint, gfc_resolve_aint,\n \t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  add_sym_1 (\"dint\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dint\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dint, gfc_resolve_dint,\n \t     a, BT_REAL, dd, 0);\n \n-  make_generic (\"aint\", GFC_ISYM_AINT);\n+  make_generic (\"aint\", GFC_ISYM_AINT, GFC_STD_F77);\n \n-  add_sym_2 (\"all\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2 (\"all\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_all,\n \t     msk, BT_LOGICAL, dl, 0, dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"all\", GFC_ISYM_ALL);\n+  make_generic (\"all\", GFC_ISYM_ALL, GFC_STD_F95);\n \n-  add_sym_1 (\"allocated\", 0, 1, BT_LOGICAL, dl,\n+  add_sym_1 (\"allocated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_allocated, NULL, NULL, ar, BT_UNKNOWN, 0, 0);\n \n-  make_generic (\"allocated\", GFC_ISYM_ALLOCATED);\n+  make_generic (\"allocated\", GFC_ISYM_ALLOCATED, GFC_STD_F95);\n \n-  add_sym_2 (\"anint\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"anint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_xkind, gfc_simplify_anint, gfc_resolve_anint,\n \t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  add_sym_1 (\"dnint\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dnint\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dnint, gfc_resolve_dnint,\n \t     a, BT_REAL, dd, 0);\n \n-  make_generic (\"anint\", GFC_ISYM_ANINT);\n+  make_generic (\"anint\", GFC_ISYM_ANINT, GFC_STD_F77);\n \n-  add_sym_2 (\"any\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2 (\"any\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_all_any, NULL, gfc_resolve_any,\n \t     msk, BT_LOGICAL, dl, 0, dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"any\", GFC_ISYM_ANY);\n+  make_generic (\"any\", GFC_ISYM_ANY, GFC_STD_F95);\n \n-  add_sym_1 (\"asin\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"asin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dasin\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dasin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_asin, gfc_resolve_asin,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"asin\", GFC_ISYM_ASIN);\n+  make_generic (\"asin\", GFC_ISYM_ASIN, GFC_STD_F77);\n \n-  add_sym_2 (\"associated\", 0, 1, BT_LOGICAL, dl,\n+  add_sym_2 (\"associated\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_associated, NULL, NULL,\n \t     pt, BT_UNKNOWN, 0, 0, tg, BT_UNKNOWN, 0, 1);\n \n-  make_generic (\"associated\", GFC_ISYM_ASSOCIATED);\n+  make_generic (\"associated\", GFC_ISYM_ASSOCIATED, GFC_STD_F95);\n \n-  add_sym_1 (\"atan\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"atan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"datan\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"datan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan, gfc_resolve_atan,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"atan\", GFC_ISYM_ATAN);\n+  make_generic (\"atan\", GFC_ISYM_ATAN, GFC_STD_F77);\n \n-  add_sym_2 (\"atan2\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"atan2\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_atan2, gfc_simplify_atan2, gfc_resolve_atan2,\n \t     y, BT_REAL, dr, 0, x, BT_REAL, dr, 0);\n \n-  add_sym_2 (\"datan2\", 1, 1, BT_REAL, dd,\n+  add_sym_2 (\"datan2\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_atan2, gfc_resolve_atan2,\n \t     y, BT_REAL, dd, 0, x, BT_REAL, dd, 0);\n \n-  make_generic (\"atan2\", GFC_ISYM_ATAN2);\n+  make_generic (\"atan2\", GFC_ISYM_ATAN2, GFC_STD_F77);\n \n   /* Bessel and Neumann functions for G77 compatibility.  */\n \n-  add_sym_1 (\"besj0\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"besj0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dbesj0\", 1, 0, BT_REAL, dd,\n+  add_sym_1 (\"dbesj0\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"besj0\", GFC_ISYM_J0);\n+  make_generic (\"besj0\", GFC_ISYM_J0, GFC_STD_GNU);\n \n-  add_sym_1 (\"besj1\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"besj1\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, 1);\n \n-  add_sym_1 (\"dbesj1\", 1, 0, BT_REAL, dd,\n+  add_sym_1 (\"dbesj1\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, 1);\n \n-  make_generic (\"besj1\", GFC_ISYM_J1);\n+  make_generic (\"besj1\", GFC_ISYM_J1, GFC_STD_GNU);\n \n-  add_sym_2 (\"besjn\", 1, 0, BT_REAL, dr,\n+  add_sym_2 (\"besjn\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n          x, BT_REAL, dr, 1);\n \n-  add_sym_2 (\"dbesjn\", 1, 0, BT_REAL, dd,\n+  add_sym_2 (\"dbesjn\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n          x, BT_REAL, dd, 1);\n \n-  make_generic (\"besjn\", GFC_ISYM_JN);\n+  make_generic (\"besjn\", GFC_ISYM_JN, GFC_STD_GNU);\n \n-  add_sym_1 (\"besy0\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"besy0\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dbesy0\", 1, 0, BT_REAL, dd,\n+  add_sym_1 (\"dbesy0\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"besy0\", GFC_ISYM_Y0);\n+  make_generic (\"besy0\", GFC_ISYM_Y0, GFC_STD_GNU);\n \n-  add_sym_1 (\"besy1\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"besy1\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, 1);\n \n-  add_sym_1 (\"dbesy1\", 1, 0, BT_REAL, dd,\n+  add_sym_1 (\"dbesy1\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, 1);\n \n-  make_generic (\"besy1\", GFC_ISYM_Y1);\n+  make_generic (\"besy1\", GFC_ISYM_Y1, GFC_STD_GNU);\n \n-  add_sym_2 (\"besyn\", 1, 0, BT_REAL, dr,\n+  add_sym_2 (\"besyn\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n          x, BT_REAL, dr, 1);\n \n-  add_sym_2 (\"dbesyn\", 1, 0, BT_REAL, dd,\n+  add_sym_2 (\"dbesyn\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_besn, NULL, gfc_resolve_besn, n, BT_INTEGER, di, 1,\n          x, BT_REAL, dd, 1);\n \n-  make_generic (\"besyn\", GFC_ISYM_YN);\n+  make_generic (\"besyn\", GFC_ISYM_YN, GFC_STD_GNU);\n \n-  add_sym_1 (\"bit_size\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"bit_size\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_bit_size, NULL,\n \t     i, BT_INTEGER, di, 0);\n \n-  make_generic (\"bit_size\", GFC_ISYM_NONE);\n+  make_generic (\"bit_size\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"btest\", 1, 1, BT_LOGICAL, dl,\n+  add_sym_2 (\"btest\", 1, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_btest, gfc_simplify_btest, gfc_resolve_btest,\n \t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0);\n \n-  make_generic (\"btest\", GFC_ISYM_BTEST);\n+  make_generic (\"btest\", GFC_ISYM_BTEST, GFC_STD_F95);\n \n-  add_sym_2 (\"ceiling\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ceiling\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_ceiling, gfc_resolve_ceiling,\n \t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  make_generic (\"ceiling\", GFC_ISYM_CEILING);\n+  make_generic (\"ceiling\", GFC_ISYM_CEILING, GFC_STD_F95);\n \n-  add_sym_2 (\"char\", 1, 0, BT_CHARACTER, dc,\n+  add_sym_2 (\"char\", 1, 0, BT_CHARACTER, dc, GFC_STD_F77,\n \t     gfc_check_char, gfc_simplify_char, gfc_resolve_char,\n \t     i, BT_INTEGER, di, 0, kind, BT_INTEGER, di, 1);\n \n-  make_generic (\"char\", GFC_ISYM_CHAR);\n+  make_generic (\"char\", GFC_ISYM_CHAR, GFC_STD_F77);\n \n-  add_sym_3 (\"cmplx\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_3 (\"cmplx\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     gfc_check_cmplx, gfc_simplify_cmplx, gfc_resolve_cmplx,\n \t     x, BT_UNKNOWN, dr, 0, y, BT_UNKNOWN, dr, 1,\n \t     kind, BT_INTEGER, di, 1);\n \n-  make_generic (\"cmplx\", GFC_ISYM_CMPLX);\n+  make_generic (\"cmplx\", GFC_ISYM_CMPLX, GFC_STD_F77);\n \n   /* Making dcmplx a specific of cmplx causes cmplx to return a double\n      complex instead of the default complex.  */\n \n-  add_sym_2 (\"dcmplx\", 1, 1, BT_COMPLEX, dd,\n+  add_sym_2 (\"dcmplx\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n \t     gfc_check_dcmplx, gfc_simplify_dcmplx, gfc_resolve_dcmplx,\n-\t     x, BT_REAL, dd, 0, y, BT_REAL, dd, 1);\t/* Extension */\n+\t     x, BT_REAL, dd, 0, y, BT_REAL, dd, 1);\n \n-  make_generic (\"dcmplx\", GFC_ISYM_CMPLX);\n+  make_generic (\"dcmplx\", GFC_ISYM_CMPLX, GFC_STD_GNU);\n \n-  add_sym_1 (\"conjg\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_1 (\"conjg\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_conjg, gfc_resolve_conjg,\n \t     z, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"dconjg\", 1, 1, BT_COMPLEX, dd, NULL, gfc_simplify_conjg, gfc_resolve_conjg, z, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"dconjg\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_conjg, gfc_resolve_conjg, \n+\t     z, BT_COMPLEX, dd, 0);\n \n-  make_generic (\"conjg\", GFC_ISYM_CONJG);\n+  make_generic (\"conjg\", GFC_ISYM_CONJG, GFC_STD_F77);\n \n-  add_sym_1 (\"cos\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"cos\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos, x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dcos\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dcos\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos, x, BT_REAL, dd, 0);\n \n-  add_sym_1 (\"ccos\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_1 (\"ccos\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_cos, gfc_resolve_cos,\n \t     x, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"zcos\", 1, 1, BT_COMPLEX, dd, NULL, gfc_simplify_cos, gfc_resolve_cos, x, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"zcos\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_cos, gfc_resolve_cos, \n+\t     x, BT_COMPLEX, dd, 0);\n \n   make_alias (\"cdcos\");\n \n-  make_generic (\"cos\", GFC_ISYM_COS);\n+  make_generic (\"cos\", GFC_ISYM_COS, GFC_STD_F77);\n \n-  add_sym_1 (\"cosh\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"cosh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dcosh\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dcosh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_cosh, gfc_resolve_cosh,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"cosh\", GFC_ISYM_COSH);\n+  make_generic (\"cosh\", GFC_ISYM_COSH, GFC_STD_F77);\n \n-  add_sym_2 (\"count\", 0, 1, BT_INTEGER, di,\n+  add_sym_2 (\"count\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_count, NULL, gfc_resolve_count,\n \t     msk, BT_LOGICAL, dl, 0, dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"count\", GFC_ISYM_COUNT);\n+  make_generic (\"count\", GFC_ISYM_COUNT, GFC_STD_F95);\n \n-  add_sym_3 (\"cshift\", 0, 1, BT_REAL, dr,\n+  add_sym_3 (\"cshift\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_cshift, NULL, gfc_resolve_cshift,\n \t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, di, 0,\n \t     dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"cshift\", GFC_ISYM_CSHIFT);\n+  make_generic (\"cshift\", GFC_ISYM_CSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"dble\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dble\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_dble, gfc_simplify_dble, gfc_resolve_dble,\n \t     a, BT_REAL, dr, 0);\n \n   make_alias (\"dfloat\");\n \n-  make_generic (\"dble\", GFC_ISYM_DBLE);\n+  make_generic (\"dble\", GFC_ISYM_DBLE, GFC_STD_F77);\n \n-  add_sym_1 (\"digits\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"digits\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_digits, gfc_simplify_digits, NULL,\n \t     x, BT_UNKNOWN, dr, 0);\n \n-  make_generic (\"digits\", GFC_ISYM_NONE);\n+  make_generic (\"digits\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"dim\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"dim\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_UNKNOWN, dr, 0, y, BT_UNKNOWN, dr, 0);\n \n-  add_sym_2 (\"idim\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"idim\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_INTEGER, di, 0, y, BT_INTEGER, di, 0);\n \n-  add_sym_2 (\"ddim\", 1, 1, BT_REAL, dd,\n+  add_sym_2 (\"ddim\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dim, gfc_resolve_dim,\n \t     x, BT_REAL, dd, 0, y, BT_REAL, dd, 0);\n \n-  make_generic (\"dim\", GFC_ISYM_DIM);\n+  make_generic (\"dim\", GFC_ISYM_DIM, GFC_STD_F77);\n \n-  add_sym_2 (\"dot_product\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2 (\"dot_product\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_dot_product, NULL, gfc_resolve_dot_product,\n \t     va, BT_REAL, dr, 0, vb, BT_REAL, dr, 0);\n \n-  make_generic (\"dot_product\", GFC_ISYM_DOT_PRODUCT);\n+  make_generic (\"dot_product\", GFC_ISYM_DOT_PRODUCT, GFC_STD_F95);\n \n-  add_sym_2 (\"dprod\", 1, 1, BT_REAL, dd,\n+  add_sym_2 (\"dprod\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_dprod, gfc_resolve_dprod,\n \t     x, BT_REAL, dr, 0, y, BT_REAL, dr, 0);\n \n-  make_generic (\"dprod\", GFC_ISYM_DPROD);\n+  make_generic (\"dprod\", GFC_ISYM_DPROD, GFC_STD_F77);\n \n-  add_sym_1 (\"dreal\", 1, 0, BT_REAL, dd, NULL, NULL, NULL, a, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"dreal\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n+\t     NULL, NULL, NULL, a, BT_COMPLEX, dd, 0);\n \n-  make_generic (\"dreal\", GFC_ISYM_REAL);\n+  make_generic (\"dreal\", GFC_ISYM_REAL, GFC_STD_GNU);\n \n-  add_sym_4 (\"eoshift\", 0, 1, BT_REAL, dr,\n+  add_sym_4 (\"eoshift\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_eoshift, NULL, gfc_resolve_eoshift,\n \t     ar, BT_REAL, dr, 0, sh, BT_INTEGER, ii, 0,\n \t     bd, BT_REAL, dr, 1, dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"eoshift\", GFC_ISYM_EOSHIFT);\n+  make_generic (\"eoshift\", GFC_ISYM_EOSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"epsilon\", 0, 1, BT_REAL, dr,\n+  add_sym_1 (\"epsilon\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_epsilon, NULL,\n \t     x, BT_REAL, dr, 0);\n \n-  make_generic (\"epsilon\", GFC_ISYM_NONE);\n+  make_generic (\"epsilon\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* G77 compatibility for the ERF() and ERFC() functions.  */\n-  add_sym_1 (\"erf\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"erf\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"derf\", 1, 0, BT_REAL, dd,\n+  add_sym_1 (\"derf\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"erf\", GFC_ISYM_ERF);\n+  make_generic (\"erf\", GFC_ISYM_ERF, GFC_STD_GNU);\n \n-  add_sym_1 (\"erfc\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"erfc\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"derfc\", 1, 0, BT_REAL, dd,\n+  add_sym_1 (\"derfc\", 1, 0, BT_REAL, dd, GFC_STD_GNU,\n \t     gfc_check_g77_math1, NULL, gfc_resolve_g77_math1,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"erfc\", GFC_ISYM_ERFC);\n+  make_generic (\"erfc\", GFC_ISYM_ERFC, GFC_STD_GNU);\n \n   /* G77 compatibility */\n-  add_sym_1 (\"etime\", 0, 1, BT_REAL, 4,\n+  add_sym_1 (\"etime\", 0, 1, BT_REAL, 4,  GFC_STD_GNU,\n \t     gfc_check_etime, NULL, NULL,\n \t     x, BT_REAL, 4, 0);\n \n   make_alias (\"dtime\");\n \n-  make_generic (\"etime\", GFC_ISYM_ETIME);\n+  make_generic (\"etime\", GFC_ISYM_ETIME, GFC_STD_GNU);\n \n \n-  add_sym_1 (\"exp\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"exp\", 1, 1, BT_REAL, dr,  GFC_STD_F77,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp, x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dexp\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dexp\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp, x, BT_REAL, dd, 0);\n \n-  add_sym_1 (\"cexp\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_1 (\"cexp\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_exp, gfc_resolve_exp,\n \t     x, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"zexp\", 1, 1, BT_COMPLEX, dd, NULL, gfc_simplify_exp, gfc_resolve_exp, x, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"zexp\", 1, 1, BT_COMPLEX, dd,  GFC_STD_GNU,\n+\t     NULL, gfc_simplify_exp, gfc_resolve_exp, \n+\t     x, BT_COMPLEX, dd, 0);\n \n   make_alias (\"cdexp\");\n \n-  make_generic (\"exp\", GFC_ISYM_EXP);\n+  make_generic (\"exp\", GFC_ISYM_EXP, GFC_STD_F77);\n \n-  add_sym_1 (\"exponent\", 1, 1, BT_INTEGER, di,\n+  add_sym_1 (\"exponent\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_exponent, gfc_resolve_exponent,\n \t     x, BT_REAL, dr, 0);\n \n-  make_generic (\"exponent\", GFC_ISYM_EXPONENT);\n+  make_generic (\"exponent\", GFC_ISYM_EXPONENT, GFC_STD_F95);\n \n-  add_sym_2 (\"floor\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"floor\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_a_ikind, gfc_simplify_floor, gfc_resolve_floor,\n \t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  make_generic (\"floor\", GFC_ISYM_FLOOR);\n+  make_generic (\"floor\", GFC_ISYM_FLOOR, GFC_STD_F95);\n \n-  add_sym_1 (\"fraction\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"fraction\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_fraction, gfc_resolve_fraction,\n \t     x, BT_REAL, dr, 0);\n \n-  make_generic (\"fraction\", GFC_ISYM_FRACTION);\n+  make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n   /* Unix IDs (g77 compatibility)  */\n-  add_sym_1 (\"getcwd\", 0, 1, BT_INTEGER, di, NULL, NULL, gfc_resolve_getcwd,\n+  add_sym_1 (\"getcwd\", 0, 1, BT_INTEGER, di,  GFC_STD_GNU,\n+\t     NULL, NULL, gfc_resolve_getcwd,\n \t     c, BT_CHARACTER, dc, 0);\n-  make_generic (\"getcwd\", GFC_ISYM_GETCWD);\n+  make_generic (\"getcwd\", GFC_ISYM_GETCWD, GFC_STD_GNU);\n \n-  add_sym_0 (\"getgid\", 1, 0, BT_INTEGER, di, NULL, NULL, gfc_resolve_getgid);\n-  make_generic (\"getgid\", GFC_ISYM_GETGID);\n+  add_sym_0 (\"getgid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU,\n+\t     NULL, NULL, gfc_resolve_getgid);\n+  make_generic (\"getgid\", GFC_ISYM_GETGID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getpid\", 1, 0, BT_INTEGER, di, NULL, NULL, gfc_resolve_getpid);\n-  make_generic (\"getpid\", GFC_ISYM_GETPID);\n+  add_sym_0 (\"getpid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n+\t     NULL, NULL, gfc_resolve_getpid);\n+  make_generic (\"getpid\", GFC_ISYM_GETPID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getuid\", 1, 0, BT_INTEGER, di, NULL, NULL, gfc_resolve_getuid);\n-  make_generic (\"getuid\", GFC_ISYM_GETUID);\n+  add_sym_0 (\"getuid\", 1, 0, BT_INTEGER, di, GFC_STD_GNU, \n+\t     NULL, NULL, gfc_resolve_getuid);\n+  make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n \n-  add_sym_1 (\"huge\", 0, 1, BT_REAL, dr,\n+  add_sym_1 (\"huge\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_huge, gfc_simplify_huge, NULL,\n \t     x, BT_UNKNOWN, dr, 0);\n \n-  make_generic (\"huge\", GFC_ISYM_NONE);\n+  make_generic (\"huge\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_1 (\"iachar\", 1, 1, BT_INTEGER, di,\n+  add_sym_1 (\"iachar\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     NULL, gfc_simplify_iachar, NULL, c, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"iachar\", GFC_ISYM_IACHAR);\n+  make_generic (\"iachar\", GFC_ISYM_IACHAR, GFC_STD_F95);\n \n-  add_sym_2 (\"iand\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"iand\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_iand, gfc_simplify_iand, gfc_resolve_iand,\n \t     i, BT_INTEGER, di, 0, j, BT_INTEGER, di, 0);\n \n-  make_generic (\"iand\", GFC_ISYM_IAND);\n+  make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n-  add_sym_0 (\"iargc\", 1, 1, BT_INTEGER, di, NULL, NULL, NULL);\t/* Extension, takes no arguments */\n-  make_generic (\"iargc\", GFC_ISYM_IARGC);\n+  add_sym_0 (\"iargc\", 1, 1, BT_INTEGER, di,  GFC_STD_GNU,NULL, NULL, NULL);\n+  make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n \n-  add_sym_0 (\"command_argument_count\", 1, 1, BT_INTEGER, di, NULL, NULL, NULL);\n-  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT);\n+  add_sym_0 (\"command_argument_count\", 1, 1, BT_INTEGER, di, GFC_STD_F2003, NULL, NULL, NULL);\n+  make_generic (\"command_argument_count\", GFC_ISYM_COMMAND_ARGUMENT_COUNT, GFC_STD_F2003);\n \n-  add_sym_2 (\"ibclr\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ibclr\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibclr, gfc_simplify_ibclr, gfc_resolve_ibclr,\n \t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0);\n \n-  make_generic (\"ibclr\", GFC_ISYM_IBCLR);\n+  make_generic (\"ibclr\", GFC_ISYM_IBCLR, GFC_STD_F95);\n \n-  add_sym_3 (\"ibits\", 1, 1, BT_INTEGER, di,\n+  add_sym_3 (\"ibits\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibits, gfc_simplify_ibits, gfc_resolve_ibits,\n \t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0,\n \t     ln, BT_INTEGER, di, 0);\n \n-  make_generic (\"ibits\", GFC_ISYM_IBITS);\n+  make_generic (\"ibits\", GFC_ISYM_IBITS, GFC_STD_F95);\n \n-  add_sym_2 (\"ibset\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ibset\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ibset, gfc_simplify_ibset, gfc_resolve_ibset,\n \t     i, BT_INTEGER, di, 0, pos, BT_INTEGER, di, 0);\n \n-  make_generic (\"ibset\", GFC_ISYM_IBSET);\n+  make_generic (\"ibset\", GFC_ISYM_IBSET, GFC_STD_F95);\n \n-  add_sym_1 (\"ichar\", 1, 0, BT_INTEGER, di,\n+  add_sym_1 (\"ichar\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_ichar, gfc_resolve_ichar,\n \t     c, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"ichar\", GFC_ISYM_ICHAR);\n+  make_generic (\"ichar\", GFC_ISYM_ICHAR, GFC_STD_F77);\n \n-  add_sym_2 (\"ieor\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ieor\", 1, 1, BT_INTEGER, di, GFC_STD_GNU,\n \t     gfc_check_ieor, gfc_simplify_ieor, gfc_resolve_ieor,\n \t     i, BT_INTEGER, di, 0, j, BT_INTEGER, di, 0);\n \n-  make_generic (\"ieor\", GFC_ISYM_IEOR);\n+  make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_GNU);\n \n-  add_sym_3 (\"index\", 1, 1, BT_INTEGER, di,\n+  add_sym_3 (\"index\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_index, gfc_simplify_index, NULL,\n \t     stg, BT_CHARACTER, dc, 0, ssg, BT_CHARACTER, dc, 0,\n \t     bck, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"index\", GFC_ISYM_INDEX);\n+  make_generic (\"index\", GFC_ISYM_INDEX, GFC_STD_F77);\n \n-  add_sym_2 (\"int\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"int\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_int, gfc_simplify_int, gfc_resolve_int,\n \t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  add_sym_1 (\"ifix\", 1, 0, BT_INTEGER, di,\n+  add_sym_1 (\"ifix\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_ifix, NULL, a, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"idint\", 1, 0, BT_INTEGER, di,\n+  add_sym_1 (\"idint\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_idint, NULL, a, BT_REAL, dd, 0);\n \n-  make_generic (\"int\", GFC_ISYM_INT);\n+  make_generic (\"int\", GFC_ISYM_INT, GFC_STD_F77);\n \n-  add_sym_2 (\"ior\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ior\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ior, gfc_simplify_ior, gfc_resolve_ior,\n \t     i, BT_INTEGER, di, 0, j, BT_INTEGER, di, 0);\n \n-  make_generic (\"ior\", GFC_ISYM_IOR);\n+  make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"irand\", 0, 1, BT_INTEGER, 4,\n+  add_sym_1 (\"irand\", 0, 1, BT_INTEGER, 4, GFC_STD_GNU,\n              gfc_check_irand, NULL, NULL,\n              i, BT_INTEGER, 4, 1);\n \n-  make_generic (\"irand\", GFC_ISYM_IRAND);\n+  make_generic (\"irand\", GFC_ISYM_IRAND, GFC_STD_GNU);\n \n-  add_sym_2 (\"ishft\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ishft\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishft, gfc_simplify_ishft, gfc_resolve_ishft,\n \t     i, BT_INTEGER, di, 0, sh, BT_INTEGER, di, 0);\n \n-  make_generic (\"ishft\", GFC_ISYM_ISHFT);\n+  make_generic (\"ishft\", GFC_ISYM_ISHFT, GFC_STD_F95);\n \n-  add_sym_3 (\"ishftc\", 1, 1, BT_INTEGER, di,\n+  add_sym_3 (\"ishftc\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ishftc, gfc_simplify_ishftc, gfc_resolve_ishftc,\n \t     i, BT_INTEGER, di, 0, sh, BT_INTEGER, di, 0,\n \t     sz, BT_INTEGER, di, 1);\n \n-  make_generic (\"ishftc\", GFC_ISYM_ISHFTC);\n+  make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n-  add_sym_1 (\"kind\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"kind\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_kind, gfc_simplify_kind, NULL, x, BT_REAL, dr, 0);\n \n-  make_generic (\"kind\", GFC_ISYM_NONE);\n+  make_generic (\"kind\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"lbound\", 0, 1, BT_INTEGER, di,\n+  add_sym_2 (\"lbound\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_lbound, gfc_simplify_lbound, gfc_resolve_lbound,\n \t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, di, 1);\n \n-  make_generic (\"lbound\", GFC_ISYM_LBOUND);\n+  make_generic (\"lbound\", GFC_ISYM_LBOUND, GFC_STD_F95);\n \n-  add_sym_1 (\"len\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"len\", 0, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_len, gfc_resolve_len,\n \t     stg, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"len\", GFC_ISYM_LEN);\n+  make_generic (\"len\", GFC_ISYM_LEN, GFC_STD_F77);\n \n-  add_sym_1 (\"len_trim\", 1, 1, BT_INTEGER, di,\n+  add_sym_1 (\"len_trim\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     NULL, gfc_simplify_len_trim, gfc_resolve_len_trim,\n \t     stg, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"len_trim\", GFC_ISYM_LEN_TRIM);\n+  make_generic (\"len_trim\", GFC_ISYM_LEN_TRIM, GFC_STD_F95);\n \n-  add_sym_2 (\"lge\", 1, 0, BT_LOGICAL, dl,\n+  add_sym_2 (\"lge\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lge, NULL,\n \t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"lge\", GFC_ISYM_LGE);\n+  make_generic (\"lge\", GFC_ISYM_LGE, GFC_STD_F77);\n \n-  add_sym_2 (\"lgt\", 1, 0, BT_LOGICAL, dl,\n+  add_sym_2 (\"lgt\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lgt, NULL,\n \t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"lgt\", GFC_ISYM_LGT);\n+  make_generic (\"lgt\", GFC_ISYM_LGT, GFC_STD_F77);\n \n-  add_sym_2 (\"lle\", 1, 0, BT_LOGICAL, dl,\n+  add_sym_2 (\"lle\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_lle, NULL,\n \t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"lle\", GFC_ISYM_LLE);\n+  make_generic (\"lle\", GFC_ISYM_LLE, GFC_STD_F77);\n \n-  add_sym_2 (\"llt\", 1, 0, BT_LOGICAL, dl,\n+  add_sym_2 (\"llt\", 1, 0, BT_LOGICAL, dl, GFC_STD_F77,\n \t     NULL, gfc_simplify_llt, NULL,\n \t     sta, BT_CHARACTER, dc, 0, stb, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"llt\", GFC_ISYM_LLT);\n+  make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n-  add_sym_1 (\"log\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"log\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"alog\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"alog\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dlog\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dlog\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_REAL, dd, 0);\n \n-  add_sym_1 (\"clog\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_1 (\"clog\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_log, gfc_resolve_log,\n \t     x, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"zlog\", 1, 1, BT_COMPLEX, dd, NULL, gfc_simplify_log, gfc_resolve_log, x, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"zlog\", 1, 1, BT_COMPLEX, dd,  GFC_STD_GNU,\n+\t     NULL, gfc_simplify_log, gfc_resolve_log, x, BT_COMPLEX, dd, 0);\n \n   make_alias (\"cdlog\");\n \n-  make_generic (\"log\", GFC_ISYM_LOG);\n+  make_generic (\"log\", GFC_ISYM_LOG, GFC_STD_F77);\n \n-  add_sym_1 (\"log10\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"log10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"alog10\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"alog10\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dlog10\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dlog10\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_log10, gfc_resolve_log10,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"log10\", GFC_ISYM_LOG10);\n+  make_generic (\"log10\", GFC_ISYM_LOG10, GFC_STD_F77);\n \n-  add_sym_2 (\"logical\", 0, 1, BT_LOGICAL, dl,\n+  add_sym_2 (\"logical\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_logical, gfc_simplify_logical, gfc_resolve_logical,\n \t     l, BT_LOGICAL, dl, 0, kind, BT_INTEGER, di, 1);\n \n-  make_generic (\"logical\", GFC_ISYM_LOGICAL);\n+  make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n-  add_sym_2 (\"matmul\", 0, 1, BT_REAL, dr,\n+  add_sym_2 (\"matmul\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_matmul, NULL, gfc_resolve_matmul,\n \t     ma, BT_REAL, dr, 0, mb, BT_REAL, dr, 0);\n \n-  make_generic (\"matmul\", GFC_ISYM_MATMUL);\n+  make_generic (\"matmul\", GFC_ISYM_MATMUL, GFC_STD_F95);\n \n   /* Note: amax0 is equivalent to real(max), max1 is equivalent to\n      int(max).  The max function must take at least two arguments.  */\n \n-  add_sym_1m (\"max\", 1, 0, BT_UNKNOWN, 0,\n+  add_sym_1m (\"max\", 1, 0, BT_UNKNOWN, 0, GFC_STD_F77,\n \t     gfc_check_min_max, gfc_simplify_max, gfc_resolve_max,\n \t     a1, BT_UNKNOWN, dr, 0, a2, BT_UNKNOWN, dr, 0);\n \n-  add_sym_1m (\"max0\", 1, 0, BT_INTEGER, di,\n+  add_sym_1m (\"max0\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_min_max_integer, gfc_simplify_max, NULL,\n \t     a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n \n-  add_sym_1m (\"amax0\", 1, 0, BT_REAL, dr,\n+  add_sym_1m (\"amax0\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_min_max_integer, gfc_simplify_max, NULL,\n \t     a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n \n-  add_sym_1m (\"amax1\", 1, 0, BT_REAL, dr,\n+  add_sym_1m (\"amax1\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_min_max_real, gfc_simplify_max, NULL,\n \t     a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n \n-  add_sym_1m (\"max1\", 1, 0, BT_INTEGER, di,\n+  add_sym_1m (\"max1\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_min_max_real, gfc_simplify_max, NULL,\n \t     a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n \n-  add_sym_1m (\"dmax1\", 1, 0, BT_REAL, dd,\n+  add_sym_1m (\"dmax1\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n \t     gfc_check_min_max_double, gfc_simplify_max, NULL,\n \t     a1, BT_REAL, dd, 0, a2, BT_REAL, dd, 0);\n \n-  make_generic (\"max\", GFC_ISYM_MAX);\n+  make_generic (\"max\", GFC_ISYM_MAX, GFC_STD_F77);\n \n-  add_sym_1 (\"maxexponent\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"maxexponent\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_maxexponent, NULL,\n \t     x, BT_UNKNOWN, dr, 0);\n \n-  make_generic (\"maxexponent\", GFC_ISYM_NONE);\n+  make_generic (\"maxexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3ml (\"maxloc\", 0, 1, BT_INTEGER, di,\n+  add_sym_3ml (\"maxloc\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_maxloc,\n \t       ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n \t       msk, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"maxloc\", GFC_ISYM_MAXLOC);\n+  make_generic (\"maxloc\", GFC_ISYM_MAXLOC, GFC_STD_F95);\n \n-  add_sym_3red (\"maxval\", 0, 1, BT_REAL, dr,\n+  add_sym_3red (\"maxval\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_maxval,\n                 ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n                 msk, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"maxval\", GFC_ISYM_MAXVAL);\n+  make_generic (\"maxval\", GFC_ISYM_MAXVAL, GFC_STD_F95);\n \n-  add_sym_3 (\"merge\", 1, 1, BT_REAL, dr,\n+  add_sym_3 (\"merge\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_merge, NULL, gfc_resolve_merge,\n \t     ts, BT_REAL, dr, 0, fs, BT_REAL, dr, 0,\n \t     msk, BT_LOGICAL, dl, 0);\n \n-  make_generic (\"merge\", GFC_ISYM_MERGE);\n+  make_generic (\"merge\", GFC_ISYM_MERGE, GFC_STD_F95);\n \n   /* Note: amin0 is equivalent to real(min), min1 is equivalent to int(min).  */\n \n-  add_sym_1m (\"min\", 1, 0, BT_UNKNOWN, 0,\n+  add_sym_1m (\"min\", 1, 0, BT_UNKNOWN, 0, GFC_STD_F77,\n \t      gfc_check_min_max, gfc_simplify_min, gfc_resolve_min,\n \t      a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n \n-  add_sym_1m (\"min0\", 1, 0, BT_INTEGER, di,\n+  add_sym_1m (\"min0\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t      gfc_check_min_max_integer, gfc_simplify_min, NULL,\n \t      a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n \n-  add_sym_1m (\"amin0\", 1, 0, BT_REAL, dr,\n+  add_sym_1m (\"amin0\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t      gfc_check_min_max_integer, gfc_simplify_min, NULL,\n \t      a1, BT_INTEGER, di, 0, a2, BT_INTEGER, di, 0);\n \n-  add_sym_1m (\"amin1\", 1, 0, BT_REAL, dr,\n+  add_sym_1m (\"amin1\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t      gfc_check_min_max_real, gfc_simplify_min, NULL,\n \t      a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n \n-  add_sym_1m (\"min1\", 1, 0, BT_INTEGER, di,\n+  add_sym_1m (\"min1\", 1, 0, BT_INTEGER, di, GFC_STD_F77,\n \t      gfc_check_min_max_real, gfc_simplify_min, NULL,\n \t      a1, BT_REAL, dr, 0, a2, BT_REAL, dr, 0);\n \n-  add_sym_1m (\"dmin1\", 1, 0, BT_REAL, dd,\n+  add_sym_1m (\"dmin1\", 1, 0, BT_REAL, dd, GFC_STD_F77,\n \t      gfc_check_min_max_double, gfc_simplify_min, NULL,\n \t      a1, BT_REAL, dd, 0, a2, BT_REAL, dd, 0);\n \n-  make_generic (\"min\", GFC_ISYM_MIN);\n+  make_generic (\"min\", GFC_ISYM_MIN, GFC_STD_F77);\n \n-  add_sym_1 (\"minexponent\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"minexponent\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_minexponent, NULL,\n \t     x, BT_UNKNOWN, dr, 0);\n \n-  make_generic (\"minexponent\", GFC_ISYM_NONE);\n+  make_generic (\"minexponent\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3ml (\"minloc\", 0, 1, BT_INTEGER, di,\n+  add_sym_3ml (\"minloc\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t       gfc_check_minloc_maxloc, NULL, gfc_resolve_minloc,\n \t       ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n \t       msk, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"minloc\", GFC_ISYM_MINLOC);\n+  make_generic (\"minloc\", GFC_ISYM_MINLOC, GFC_STD_F95);\n \n-  add_sym_3red (\"minval\", 0, 1, BT_REAL, dr,\n+  add_sym_3red (\"minval\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_minval_maxval, NULL, gfc_resolve_minval,\n                 ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n                 msk, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"minval\", GFC_ISYM_MINVAL);\n+  make_generic (\"minval\", GFC_ISYM_MINVAL, GFC_STD_F95);\n \n-  add_sym_2 (\"mod\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"mod\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_a_p, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_INTEGER, di, 0, p, BT_INTEGER, di, 0);\n \n-  add_sym_2 (\"amod\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"amod\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_REAL, dr, 0, p, BT_REAL, dr, 0);\n \n-  add_sym_2 (\"dmod\", 1, 1, BT_REAL, dd,\n+  add_sym_2 (\"dmod\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_mod, gfc_resolve_mod,\n \t     a, BT_REAL, dd, 0, p, BT_REAL, dd, 0);\n \n-  make_generic (\"mod\", GFC_ISYM_MOD);\n+  make_generic (\"mod\", GFC_ISYM_MOD, GFC_STD_F77);\n \n-  add_sym_2 (\"modulo\", 1, 1, BT_REAL, di,\n+  add_sym_2 (\"modulo\", 1, 1, BT_REAL, di, GFC_STD_F95,\n \t     gfc_check_a_p, gfc_simplify_modulo, gfc_resolve_modulo,\n \t     a, BT_REAL, di, 0, p, BT_REAL, di, 0);\n \n-  make_generic (\"modulo\", GFC_ISYM_MODULO);\n+  make_generic (\"modulo\", GFC_ISYM_MODULO, GFC_STD_F95);\n \n-  add_sym_2 (\"nearest\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"nearest\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_nearest, gfc_simplify_nearest, gfc_resolve_nearest,\n \t     x, BT_REAL, dr, 0, s, BT_REAL, dr, 0);\n \n-  make_generic (\"nearest\", GFC_ISYM_NEAREST);\n+  make_generic (\"nearest\", GFC_ISYM_NEAREST, GFC_STD_F95);\n \n-  add_sym_2 (\"nint\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"nint\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_a_ikind, gfc_simplify_nint, gfc_resolve_nint,\n \t     a, BT_REAL, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  add_sym_1 (\"idnint\", 1, 1, BT_INTEGER, di,\n+  add_sym_1 (\"idnint\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     gfc_check_idnint, gfc_simplify_idnint, gfc_resolve_idnint,\n \t     a, BT_REAL, dd, 0);\n \n-  make_generic (\"nint\", GFC_ISYM_NINT);\n+  make_generic (\"nint\", GFC_ISYM_NINT, GFC_STD_F77);\n \n-  add_sym_1 (\"not\", 1, 1, BT_INTEGER, di,\n+  add_sym_1 (\"not\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_i, gfc_simplify_not, gfc_resolve_not,\n \t     i, BT_INTEGER, di, 0);\n \n-  make_generic (\"not\", GFC_ISYM_NOT);\n+  make_generic (\"not\", GFC_ISYM_NOT, GFC_STD_F95);\n \n-  add_sym_1 (\"null\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"null\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_null, gfc_simplify_null, NULL,\n \t     mo, BT_INTEGER, di, 1);\n \n-  make_generic (\"null\", GFC_ISYM_NONE);\n+  make_generic (\"null\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3 (\"pack\", 0, 1, BT_REAL, dr,\n+  add_sym_3 (\"pack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_pack, NULL, gfc_resolve_pack,\n \t     ar, BT_REAL, dr, 0, msk, BT_LOGICAL, dl, 0,\n \t     v, BT_REAL, dr, 1);\n \n-  make_generic (\"pack\", GFC_ISYM_PACK);\n+  make_generic (\"pack\", GFC_ISYM_PACK, GFC_STD_F95);\n \n-  add_sym_1 (\"precision\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"precision\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_precision, gfc_simplify_precision, NULL,\n \t     x, BT_UNKNOWN, 0, 0);\n \n-  make_generic (\"precision\", GFC_ISYM_NONE);\n+  make_generic (\"precision\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_1 (\"present\", 0, 1, BT_LOGICAL, dl,\n+  add_sym_1 (\"present\", 0, 1, BT_LOGICAL, dl, GFC_STD_F95,\n \t     gfc_check_present, NULL, NULL, a, BT_REAL, dr, 0);\n \n-  make_generic (\"present\", GFC_ISYM_PRESENT);\n+  make_generic (\"present\", GFC_ISYM_PRESENT, GFC_STD_F95);\n \n-  add_sym_3red (\"product\", 0, 1, BT_REAL, dr,\n+  add_sym_3red (\"product\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_product,\n                 ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n                 msk, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"product\", GFC_ISYM_PRODUCT);\n+  make_generic (\"product\", GFC_ISYM_PRODUCT, GFC_STD_F95);\n \n-  add_sym_1 (\"radix\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"radix\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_radix, gfc_simplify_radix, NULL,\n \t     x, BT_UNKNOWN, 0, 0);\n \n-  make_generic (\"radix\", GFC_ISYM_NONE);\n+  make_generic (\"radix\", GFC_ISYM_NONE, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"rand\", 0, 1, BT_REAL, 4,\n+  add_sym_1 (\"rand\", 0, 1, BT_REAL, 4, GFC_STD_GNU,\n              gfc_check_rand, NULL, NULL,\n              i, BT_INTEGER, 4, 1);\n \n@@ -1609,237 +1636,239 @@ add_functions (void)\n      PRNG.  */\n   make_alias (\"ran\");\n \n-  make_generic (\"rand\", GFC_ISYM_RAND);\n+  make_generic (\"rand\", GFC_ISYM_RAND, GFC_STD_GNU);\n \n-  add_sym_1 (\"range\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"range\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_range, gfc_simplify_range, NULL,\n \t     x, BT_REAL, dr, 0);\n \n-  make_generic (\"range\", GFC_ISYM_NONE);\n+  make_generic (\"range\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_2 (\"real\", 1, 0, BT_REAL, dr,\n+  add_sym_2 (\"real\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_real, gfc_simplify_real, gfc_resolve_real,\n \t     a, BT_UNKNOWN, dr, 0, kind, BT_INTEGER, di, 1);\n \n-  add_sym_1 (\"float\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"float\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_float, NULL, a, BT_INTEGER, di, 0);\n \n-  add_sym_1 (\"sngl\", 1, 0, BT_REAL, dr,\n+  add_sym_1 (\"sngl\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sngl, NULL, a, BT_REAL, dd, 0);\n \n-  make_generic (\"real\", GFC_ISYM_REAL);\n+  make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n \n-  add_sym_2 (\"repeat\", 0, 1, BT_CHARACTER, dc,\n+  add_sym_2 (\"repeat\", 0, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_repeat, gfc_simplify_repeat, gfc_resolve_repeat,\n \t     stg, BT_CHARACTER, dc, 0, n, BT_INTEGER, di, 0);\n \n-  make_generic (\"repeat\", GFC_ISYM_REPEAT);\n+  make_generic (\"repeat\", GFC_ISYM_REPEAT, GFC_STD_F95);\n \n-  add_sym_4 (\"reshape\", 0, 1, BT_REAL, dr,\n+  add_sym_4 (\"reshape\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_reshape, gfc_simplify_reshape, gfc_resolve_reshape,\n \t     src, BT_REAL, dr, 0, shp, BT_INTEGER, ii, 0,\n \t     pad, BT_REAL, dr, 1, ord, BT_INTEGER, ii, 1);\n \n-  make_generic (\"reshape\", GFC_ISYM_RESHAPE);\n+  make_generic (\"reshape\", GFC_ISYM_RESHAPE, GFC_STD_F95);\n \n-  add_sym_1 (\"rrspacing\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"rrspacing\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_rrspacing, gfc_resolve_rrspacing,\n \t     x, BT_REAL, dr, 0);\n \n-  make_generic (\"rrspacing\", GFC_ISYM_RRSPACING);\n+  make_generic (\"rrspacing\", GFC_ISYM_RRSPACING, GFC_STD_F95);\n \n-  add_sym_2 (\"scale\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"scale\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_scale, gfc_simplify_scale, gfc_resolve_scale,\n \t     x, BT_REAL, dr, 0, i, BT_INTEGER, di, 0);\n \n-  make_generic (\"scale\", GFC_ISYM_SCALE);\n+  make_generic (\"scale\", GFC_ISYM_SCALE, GFC_STD_F95);\n \n-  add_sym_3 (\"scan\", 1, 1, BT_INTEGER, di,\n+  add_sym_3 (\"scan\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_scan, gfc_simplify_scan, gfc_resolve_scan,\n \t     stg, BT_CHARACTER, dc, 0, set, BT_CHARACTER, dc, 0,\n \t     bck, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"scan\", GFC_ISYM_SCAN);\n+  make_generic (\"scan\", GFC_ISYM_SCAN, GFC_STD_F95);\n \n   /* Added for G77 compatibility garbage. */\n-  add_sym_0 (\"second\", 0, 1, BT_REAL, 4, NULL, NULL, NULL);\n+  add_sym_0 (\"second\", 0, 1, BT_REAL, 4,  GFC_STD_GNU,NULL, NULL, NULL);\n \n-  make_generic (\"second\", GFC_ISYM_SECOND);\n+  make_generic (\"second\", GFC_ISYM_SECOND, GFC_STD_GNU);\n \n-  add_sym_1 (\"selected_int_kind\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"selected_int_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n \t     NULL, gfc_simplify_selected_int_kind, NULL,\n \t     r, BT_INTEGER, di, 0);\n \n-  make_generic (\"selected_int_kind\", GFC_ISYM_SI_KIND);\n+  make_generic (\"selected_int_kind\", GFC_ISYM_SI_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"selected_real_kind\", 0, 1, BT_INTEGER, di,\n+  add_sym_2 (\"selected_real_kind\", 0, 1, BT_INTEGER, di,  GFC_STD_F95,\n \t     gfc_check_selected_real_kind, gfc_simplify_selected_real_kind,\n \t     NULL, p, BT_INTEGER, di, 1, r, BT_INTEGER, di, 1);\n \n-  make_generic (\"selected_real_kind\", GFC_ISYM_SR_KIND);\n+  make_generic (\"selected_real_kind\", GFC_ISYM_SR_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"set_exponent\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"set_exponent\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_set_exponent, gfc_simplify_set_exponent,\n \t     gfc_resolve_set_exponent,\n \t     x, BT_REAL, dr, 0, i, BT_INTEGER, di, 0);\n \n-  make_generic (\"set_exponent\", GFC_ISYM_SET_EXPONENT);\n+  make_generic (\"set_exponent\", GFC_ISYM_SET_EXPONENT, GFC_STD_F95);\n \n-  add_sym_1 (\"shape\", 0, 1, BT_INTEGER, di,\n+  add_sym_1 (\"shape\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_shape, gfc_simplify_shape, gfc_resolve_shape,\n \t     src, BT_REAL, dr, 0);\n \n-  make_generic (\"shape\", GFC_ISYM_SHAPE);\n+  make_generic (\"shape\", GFC_ISYM_SHAPE, GFC_STD_F95);\n \n-  add_sym_2 (\"sign\", 1, 1, BT_REAL, dr,\n+  add_sym_2 (\"sign\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     gfc_check_sign, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_REAL, dr, 0, b, BT_REAL, dr, 0);\n \n-  add_sym_2 (\"isign\", 1, 1, BT_INTEGER, di,\n+  add_sym_2 (\"isign\", 1, 1, BT_INTEGER, di, GFC_STD_F77,\n \t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_INTEGER, di, 0, b, BT_INTEGER, di, 0);\n \n-  add_sym_2 (\"dsign\", 1, 1, BT_REAL, dd,\n+  add_sym_2 (\"dsign\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sign, gfc_resolve_sign,\n \t     a, BT_REAL, dd, 0, b, BT_REAL, dd, 0);\n \n-  make_generic (\"sign\", GFC_ISYM_SIGN);\n+  make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n-  add_sym_1 (\"sin\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"sin\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dsin\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dsin\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_REAL, dd, 0);\n \n-  add_sym_1 (\"csin\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_1 (\"csin\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_sin, gfc_resolve_sin,\n \t   x, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"zsin\", 1, 1, BT_COMPLEX, dd, NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"zsin\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_sin, gfc_resolve_sin, x, BT_COMPLEX, dd, 0);\n \n   make_alias (\"cdsin\");\n \n-  make_generic (\"sin\", GFC_ISYM_SIN);\n+  make_generic (\"sin\", GFC_ISYM_SIN, GFC_STD_F77);\n \n-  add_sym_1 (\"sinh\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"sinh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dsinh\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dsinh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sinh, gfc_resolve_sinh,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"sinh\", GFC_ISYM_SINH);\n+  make_generic (\"sinh\", GFC_ISYM_SINH, GFC_STD_F77);\n \n-  add_sym_2 (\"size\", 0, 1, BT_INTEGER, di,\n+  add_sym_2 (\"size\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_size, gfc_simplify_size, NULL,\n \t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"size\", GFC_ISYM_SIZE);\n+  make_generic (\"size\", GFC_ISYM_SIZE, GFC_STD_F95);\n \n-  add_sym_1 (\"spacing\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"spacing\", 1, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_spacing, gfc_resolve_spacing,\n \t     x, BT_REAL, dr, 0);\n \n-  make_generic (\"spacing\", GFC_ISYM_SPACING);\n+  make_generic (\"spacing\", GFC_ISYM_SPACING, GFC_STD_F95);\n \n-  add_sym_3 (\"spread\", 0, 1, BT_REAL, dr,\n+  add_sym_3 (\"spread\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_spread, NULL, gfc_resolve_spread,\n \t     src, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 0,\n \t     n, BT_INTEGER, di, 0);\n \n-  make_generic (\"spread\", GFC_ISYM_SPREAD);\n+  make_generic (\"spread\", GFC_ISYM_SPREAD, GFC_STD_F95);\n \n-  add_sym_1 (\"sqrt\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"sqrt\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dsqrt\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dsqrt\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_REAL, dd, 0);\n \n-  add_sym_1 (\"csqrt\", 1, 1, BT_COMPLEX, dz,\n+  add_sym_1 (\"csqrt\", 1, 1, BT_COMPLEX, dz, GFC_STD_F77,\n \t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt,\n \t     x, BT_COMPLEX, dz, 0);\n \n-  add_sym_1 (\"zsqrt\", 1, 1, BT_COMPLEX, dd, NULL, gfc_simplify_sqrt, gfc_resolve_sqrt, x, BT_COMPLEX, dd, 0);\t/* Extension */\n+  add_sym_1 (\"zsqrt\", 1, 1, BT_COMPLEX, dd, GFC_STD_GNU,\n+\t     NULL, gfc_simplify_sqrt, gfc_resolve_sqrt, x, BT_COMPLEX, dd, 0);\n \n   make_alias (\"cdsqrt\");\n \n-  make_generic (\"sqrt\", GFC_ISYM_SQRT);\n+  make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n-  add_sym_3red (\"sum\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_3red (\"sum\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n                 gfc_check_product_sum, NULL, gfc_resolve_sum,\n                 ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1,\n                 msk, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"sum\", GFC_ISYM_SUM);\n+  make_generic (\"sum\", GFC_ISYM_SUM, GFC_STD_F95);\n \n-  add_sym_1 (\"system\", 1, 1, BT_INTEGER, di, NULL, NULL, NULL,\n+  add_sym_1 (\"system\", 1, 1, BT_INTEGER, di, GFC_STD_GNU, NULL, NULL, NULL,\n \t     c, BT_CHARACTER, dc, 0);\n-  make_generic (\"system\", GFC_ISYM_SYSTEM);\n+  make_generic (\"system\", GFC_ISYM_SYSTEM, GFC_STD_GNU);\n \n-  add_sym_1 (\"tan\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"tan\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_tan, gfc_resolve_tan, x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dtan\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dtan\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_tan, gfc_resolve_tan, x, BT_REAL, dd, 0);\n \n-  make_generic (\"tan\", GFC_ISYM_TAN);\n+  make_generic (\"tan\", GFC_ISYM_TAN, GFC_STD_F77);\n \n-  add_sym_1 (\"tanh\", 1, 1, BT_REAL, dr,\n+  add_sym_1 (\"tanh\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dr, 0);\n \n-  add_sym_1 (\"dtanh\", 1, 1, BT_REAL, dd,\n+  add_sym_1 (\"dtanh\", 1, 1, BT_REAL, dd, GFC_STD_F77,\n \t     NULL, gfc_simplify_tanh, gfc_resolve_tanh,\n \t     x, BT_REAL, dd, 0);\n \n-  make_generic (\"tanh\", GFC_ISYM_TANH);\n+  make_generic (\"tanh\", GFC_ISYM_TANH, GFC_STD_F77);\n \n-  add_sym_1 (\"tiny\", 0, 1, BT_REAL, dr,\n+  add_sym_1 (\"tiny\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_x, gfc_simplify_tiny, NULL, x, BT_REAL, dr, 0);\n \n-  make_generic (\"tiny\", GFC_ISYM_NONE);\n+  make_generic (\"tiny\", GFC_ISYM_NONE, GFC_STD_F95);\n \n-  add_sym_3 (\"transfer\", 0, 1, BT_REAL, dr,\n+  add_sym_3 (\"transfer\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transfer, NULL, gfc_resolve_transfer,\n \t     src, BT_REAL, dr, 0, mo, BT_REAL, dr, 0,\n \t     sz, BT_INTEGER, di, 1);\n \n-  make_generic (\"transfer\", GFC_ISYM_TRANSFER);\n+  make_generic (\"transfer\", GFC_ISYM_TRANSFER, GFC_STD_F95);\n \n-  add_sym_1 (\"transpose\", 0, 1, BT_REAL, dr,\n+  add_sym_1 (\"transpose\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_transpose, NULL, gfc_resolve_transpose,\n \t     m, BT_REAL, dr, 0);\n \n-  make_generic (\"transpose\", GFC_ISYM_TRANSPOSE);\n+  make_generic (\"transpose\", GFC_ISYM_TRANSPOSE, GFC_STD_F95);\n \n-  add_sym_1 (\"trim\", 0, 1, BT_CHARACTER, dc,\n+  add_sym_1 (\"trim\", 0, 1, BT_CHARACTER, dc, GFC_STD_F95,\n \t     gfc_check_trim, gfc_simplify_trim, gfc_resolve_trim,\n \t     stg, BT_CHARACTER, dc, 0);\n \n-  make_generic (\"trim\", GFC_ISYM_TRIM);\n+  make_generic (\"trim\", GFC_ISYM_TRIM, GFC_STD_F95);\n \n-  add_sym_2 (\"ubound\", 0, 1, BT_INTEGER, di,\n+  add_sym_2 (\"ubound\", 0, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_ubound, gfc_simplify_ubound, gfc_resolve_ubound,\n \t     ar, BT_REAL, dr, 0, dm, BT_INTEGER, ii, 1);\n \n-  make_generic (\"ubound\", GFC_ISYM_UBOUND);\n+  make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n-  add_sym_3 (\"unpack\", 0, 1, BT_REAL, dr,\n+  add_sym_3 (\"unpack\", 0, 1, BT_REAL, dr, GFC_STD_F95,\n \t     gfc_check_unpack, NULL, gfc_resolve_unpack,\n \t     v, BT_REAL, dr, 0, msk, BT_LOGICAL, dl, 0,\n \t     f, BT_REAL, dr, 0);\n \n-  make_generic (\"unpack\", GFC_ISYM_UNPACK);\n+  make_generic (\"unpack\", GFC_ISYM_UNPACK, GFC_STD_F95);\n \n-  add_sym_3 (\"verify\", 1, 1, BT_INTEGER, di,\n+  add_sym_3 (\"verify\", 1, 1, BT_INTEGER, di, GFC_STD_F95,\n \t     gfc_check_verify, gfc_simplify_verify, gfc_resolve_verify,\n \t     stg, BT_CHARACTER, dc, 0, set, BT_CHARACTER, dc, 0,\n \t     bck, BT_LOGICAL, dl, 1);\n \n-  make_generic (\"verify\", GFC_ISYM_VERIFY);\n+  make_generic (\"verify\", GFC_ISYM_VERIFY, GFC_STD_F95);\n \n \n }\n@@ -1868,55 +1897,55 @@ add_subroutines (void)\n   dc = gfc_default_character_kind;\n   dl = gfc_default_logical_kind;\n \n-  add_sym_0s (\"abort\", 1, NULL);\n+  add_sym_0s (\"abort\", 1, GFC_STD_GNU, NULL);\n \n-  add_sym_1s (\"cpu_time\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_1s (\"cpu_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_cpu_time, NULL, gfc_resolve_cpu_time,\n \t      tm, BT_REAL, dr, 0);\n \n   /* More G77 compatibility garbage. */\n-  add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_1s (\"second\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n \t      tm, BT_REAL, dr, 0);\n \n-  add_sym_4s (\"date_and_time\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_4s (\"date_and_time\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_date_and_time, NULL, NULL,\n \t      dt, BT_CHARACTER, dc, 1, tm, BT_CHARACTER, dc, 1,\n \t      zn, BT_CHARACTER, dc, 1, vl, BT_INTEGER, di, 1);\n \n   /* More G77 compatibility garbage. */\n-  add_sym_2s (\"etime\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2s (\"etime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n \n-  add_sym_2s (\"dtime\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2s (\"dtime\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t     gfc_check_etime_sub, NULL, gfc_resolve_etime_sub,\n \t     vl, BT_REAL, 4, 0, tm, BT_REAL, 4, 0);\n \n-  add_sym_2s (\"getcwd\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2s (\"getcwd\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n           gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n \t      c, BT_CHARACTER, dc, 0,\n \t      st, BT_INTEGER, di, 1);\n \n-  add_sym_2s (\"getenv\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2s (\"getenv\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, NULL,\n \t      name, BT_CHARACTER, dc, 0,\n \t      val, BT_CHARACTER, dc, 0);\n \n-  add_sym_2s (\"getarg\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2s (\"getarg\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_getarg,\n \t      c, BT_INTEGER, di, 0, vl, BT_CHARACTER, dc, 0);\n \n \n   /* F2003 commandline routines.  */\n \n-  add_sym_3s (\"get_command\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_3s (\"get_command\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command,\n \t      com, BT_CHARACTER, dc, 1,\n \t      length, BT_INTEGER, di, 1,\n \t      st, BT_INTEGER, di, 1);\n \n-  add_sym_4s (\"get_command_argument\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_4s (\"get_command_argument\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_command_argument,\n \t      num, BT_INTEGER, di, 0,\n \t      val, BT_CHARACTER, dc, 1,\n@@ -1926,7 +1955,7 @@ add_subroutines (void)\n \n   /* F2003 subroutine to get environment variables. */\n \n-  add_sym_5s (\"get_environment_variable\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_5s (\"get_environment_variable\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t     NULL, NULL, gfc_resolve_get_environment_variable,\n \t     name, BT_CHARACTER, dc, 0,\n \t     val, BT_CHARACTER, dc, 1,\n@@ -1935,32 +1964,32 @@ add_subroutines (void)\n \t     trim_name, BT_LOGICAL, dl, 1);\n \n \n-  add_sym_5s (\"mvbits\", 1, 1, BT_UNKNOWN, 0,\n+  add_sym_5s (\"mvbits\", 1, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_mvbits, gfc_simplify_mvbits, gfc_resolve_mvbits,\n \t      f, BT_INTEGER, di, 0, fp, BT_INTEGER, di, 0,\n \t      ln, BT_INTEGER, di, 0, t, BT_INTEGER, di, 0,\n \t      tp, BT_INTEGER, di, 0);\n \n-  add_sym_1s (\"random_number\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_1s (\"random_number\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t      gfc_check_random_number, NULL, gfc_resolve_random_number,\n \t      h, BT_REAL, dr, 0);\n \n-  add_sym_3s (\"random_seed\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_3s (\"random_seed\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_random_seed, NULL, NULL,\n \t     sz, BT_INTEGER, di, 1, pt, BT_INTEGER, di, 1,\n \t     gt, BT_INTEGER, di, 1);\n \n   /* More G77 compatibility garbage. */\n-  add_sym_1s (\"srand\", 0, 1, BT_UNKNOWN, di,\n+  add_sym_1s (\"srand\", 0, 1, BT_UNKNOWN, di, GFC_STD_GNU,\n              gfc_check_srand, NULL, gfc_resolve_srand,\n              c, BT_INTEGER, 4, 0);\n \n-  add_sym_2s (\"system\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_2s (\"system\", 0, 1, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      NULL, NULL, gfc_resolve_system_sub,\n \t      c, BT_CHARACTER, dc, 0,\n \t      st, BT_INTEGER, di, 1);\n \n-  add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0,\n+  add_sym_3s (\"system_clock\", 0, 1, BT_UNKNOWN, 0, GFC_STD_F95,\n \t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t     c, BT_INTEGER, di, 1, cr, BT_INTEGER, di, 1,\n \t     cm, BT_INTEGER, di, 1);\n@@ -2637,6 +2666,25 @@ gfc_init_expr_extensions (gfc_intrinsic_sym *isym)\n }\n \n \n+/* Check whether an intrinsic belongs to whatever standard the user\n+   has chosen.  */\n+\n+static void\n+check_intrinsic_standard (const char *name, int standard)\n+{\n+  int name_len;\n+  char msgstr[name_len + 53];\n+\n+  if (!gfc_option.warn_nonstd_intrinsics)\n+    return;\n+\n+  name_len = strlen (name);\n+  strncpy (msgstr, name, name_len + 1);\n+  strncat (msgstr, \" intrinsic is not included in the selected standard.\", 53);\n+  gfc_notify_std (standard, msgstr);\n+}\n+\n+\n /* See if a function call corresponds to an intrinsic function call.\n    We return:\n \n@@ -2746,6 +2794,8 @@ gfc_intrinsic_func_interface (gfc_expr * expr, int error_flag)\n \t}\n     }\n \n+  check_intrinsic_standard (name, isym->standard);\n+\n   return MATCH_YES;\n }\n \n@@ -2801,6 +2851,8 @@ gfc_intrinsic_sub_interface (gfc_code * c, int error_flag)\n       return MATCH_ERROR;\n     }\n \n+  check_intrinsic_standard (name, isym->standard);\n+\n   return MATCH_YES;\n \n fail:"}, {"sha": "2f1824d6dc742a12b789783e865c516c12d8c1d2", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=b789258287043cbe3b05675d281faf9d4c9e2760", "patch": "@@ -126,8 +126,8 @@ by type.  Explanations are in the following sections.\n @gccoptlist{\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n -w  -Wall  -Waliasing  -Wconversion @gol\n--Wimplicit-interface  -Wsurprising  -Wunderflow -Wunused-labels @gol\n--Wline-truncation @gol\n+-Wimplicit-interface  -Wnonstd-intrinsics  -Wsurprising  -Wunderflow @gol\n+-Wunused-labels -Wline-truncation @gol\n -Werror  -W}\n \n @item Debugging Options\n@@ -321,7 +321,8 @@ Inhibit all warning messages.\n Enables commonly used warning options that which pertain to usage that\n we recommend avoiding and that we believe is easy to avoid.\n This currently includes @option{-Wunused-labels}, @option{-Waliasing},\n-@option{-Wsurprising} and @option{-Wline-truncation}.\n+@option{-Wsurprising}, @option{-Wnonstd-intrinsic} and\n+@option{-Wline-truncation}.\n \n \n @cindex -Waliasing option\n@@ -352,6 +353,13 @@ Note this only checks that an explicit interface is present.  It does not\n check that the declared interfaces are consistent across program units.\n \n \n+@cindex -Wnonstd-intrinsic option\n+@cindex options, -Wnonstd-intrinsic\n+@item -Wnonstd-intrinsic\n+Warn if the user tries to use an intrinsic that does not belong to the \n+standard the user has chosen via the -std option.\n+\n+\n @cindex -Wsurprising\n @cindex options, -Wsurprising\n @item -Wsurprising"}, {"sha": "976a2b436d246ffce5073bd0ac53634928473dcc", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=b789258287043cbe3b05675d281faf9d4c9e2760", "patch": "@@ -53,6 +53,10 @@ Wline-truncation\n F95\n Warn about truncated source lines\n \n+Wnonstd-intrinsics\n+F95\n+Warn about usage of non-standard intrinsics\n+\n Wsurprising\n F95\n Warn about \\\"suspicious\\\" constructs"}, {"sha": "d1c6841f9f516ffacc38e8964d1d66e15b0d6295", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b789258287043cbe3b05675d281faf9d4c9e2760/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=b789258287043cbe3b05675d281faf9d4c9e2760", "patch": "@@ -78,10 +78,12 @@ gfc_init_options (unsigned int argc ATTRIBUTE_UNUSED,\n   flag_argument_noalias = 2;\n \n   gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL\n-    | GFC_STD_F2003_OBS | GFC_STD_F2003_DEL | GFC_STD_F2003 | GFC_STD_GNU;\n+    | GFC_STD_F2003 | GFC_STD_F95 | GFC_STD_F77 | GFC_STD_GNU;\n   gfc_option.warn_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL\n     | GFC_STD_F2003;\n \n+  gfc_option.warn_nonstd_intrinsics = 0;\n+\n   return CL_F95;\n }\n \n@@ -131,6 +133,7 @@ set_Wall (void)\n   gfc_option.warn_underflow = 1;\n   gfc_option.warn_surprising = 1;\n   gfc_option.warn_unused_labels = 1;\n+  gfc_option.warn_nonstd_intrinsics = 1;\n \n   set_Wunused (1);\n   warn_return_type = 1;\n@@ -309,24 +312,27 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       break;\n     \n     case OPT_std_f95:\n-      gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F2003_OBS\n-\t| GFC_STD_F2003_DEL;\n+      gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F95 | GFC_STD_F77;\n       gfc_option.warn_std = GFC_STD_F95_OBS;\n       gfc_option.max_identifier_length = 31;\n       break;\n \n     case OPT_std_f2003:\n-      gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F2003_OBS\n-\t| GFC_STD_F2003;\n-      gfc_option.warn_std = GFC_STD_F95_OBS | GFC_STD_F2003_OBS;\n+      gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F77 \n+\t| GFC_STD_F2003 | GFC_STD_F95;\n+      gfc_option.warn_std = GFC_STD_F95_OBS;\n       gfc_option.max_identifier_length = 63;\n       break;\n \n     case OPT_std_gnu:\n       gfc_option.allow_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL\n-\t| GFC_STD_F2003_OBS | GFC_STD_F2003_DEL | GFC_STD_F2003 | GFC_STD_GNU;\n-      gfc_option.warn_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL\n-\t| GFC_STD_F2003_OBS | GFC_STD_F2003_DEL;\n+\t| GFC_STD_F77 | GFC_STD_F95 | GFC_STD_F2003\n+\t| GFC_STD_GNU;\n+      gfc_option.warn_std = GFC_STD_F95_OBS | GFC_STD_F95_DEL;\n+      break;\n+\n+    case OPT_Wnonstd_intrinsics:\n+      gfc_option.warn_nonstd_intrinsics = 1;\n       break;\n     }\n "}]}