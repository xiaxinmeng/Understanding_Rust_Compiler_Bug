{"sha": "82e0c914997afeaa6be4e3d9c42446b505c7043b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlMGM5MTQ5OTdhZmVhYTZiZTRlM2Q5YzQyNDQ2YjUwNWM3MDQzYg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-09T19:03:19Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-09T19:03:19Z"}, "message": "Fix bogus ChangeLog entry from r218521\n\nIn r218521 I erroneously added the entries meant for gcc/jit/ChangeLog\nto gcc/ChangeLog instead.\n\nMove them to the correct ChangeLog file.\n\nSorry for the noise.\n\nFrom-SVN: r218529", "tree": {"sha": "9b8bae9433d1a245038c23b59168c7bfe1e7ee17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b8bae9433d1a245038c23b59168c7bfe1e7ee17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82e0c914997afeaa6be4e3d9c42446b505c7043b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e0c914997afeaa6be4e3d9c42446b505c7043b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82e0c914997afeaa6be4e3d9c42446b505c7043b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82e0c914997afeaa6be4e3d9c42446b505c7043b/comments", "author": null, "committer": null, "parents": [{"sha": "38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38771e4e1fdacfbdac5a14e50fcc0538577b1bdb"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "7002a151e0bc1fcf65dacefdeed764e7df8ef402", "filename": "gcc/ChangeLog", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e0c914997afeaa6be4e3d9c42446b505c7043b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e0c914997afeaa6be4e3d9c42446b505c7043b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82e0c914997afeaa6be4e3d9c42446b505c7043b", "patch": "@@ -17,48 +17,6 @@\n \t(thunderx_tunings): Add AARCH64_FUSE_CMP_BRANCH to fuseable_ops.\n \t(aarch_macro_fusion_pair_p): Handle AARCH64_FUSE_CMP_BRANCH.\n \n-2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n-\n-\tPR jit/64166\n-\t* docs/topics/contexts.rst (Debugging): Add description of\n-\tgcc_jit_context_enable_dump.\n-\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n-\t* jit-playback.c: Include context.h.\n-\t(class auto_argvec): New class.\n-\t(auto_argvec::~auto_argvec): New function.\n-\t(gcc::jit::playback::context::compile): Convert fake_args to be\n-\tan auto_argvec, so that it can contain dynamically-allocated\n-\tstrings.   Construct a vec of all requested dumps, and pass it to\n-\tmake_fake_args.  Extract requested dumps between the calls to\n-\ttoplev::main and toplev::finalize.\n-\t(gcc::jit::playback::context::make_fake_args): Convert param\n-\t\"argvec\" to be a vec <char *>, and gain a \"requested_dumps\"\n-\tparam.  Convert to dynamically-allocated arg strings by converting\n-\tADD_ARG to take a copy of the arg, and add ADD_ARG_TAKE_OWNERSHIP\n-\tfor args that are already a copy.  Add args for all requested dumps.\n-\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n-\tfunction.\n-\t(gcc::jit::playback::context::read_dump_file): New function.\n-\t* jit-playback.h (gcc::jit::playback::context::make_fake_args):\n-\tConvert param \"argvec\" to be a vec <char *>, and gain a\n-\t\"requested_dumps\" param.\n-\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n-\tfunction.\n-\t(gcc::jit::playback::context::read_dump_file): New function.\n-\t* jit-recording.c (gcc::jit::recording::context::enable_dump): New\n-\tfunction.\n-\t(gcc::jit::recording::context::get_all_requested_dumps): New\n-\tfunction.\n-\t* jit-recording.h (gcc::jit::recording::requested_dump): New\n-\tstruct.\n-\t(gcc::jit::recording::context::enable_dump): New function.\n-\t(gcc::jit::recording::context::get_all_requested_dumps): New\n-\tfunction.\n-\t(gcc::jit::recording::context::m_requested_dumps): New field.\n-\t* libgccjit.c (gcc_jit_context_enable_dump): New API entrypoint.\n-\t* libgccjit.h (gcc_jit_context_enable_dump): New API entrypoint.\n-\t* libgccjit.map (gcc_jit_context_enable_dump): New API entrypoint.\n-\n 2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64166"}, {"sha": "d69571d5342d248a6220bb1319a7fd4dcba56833", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82e0c914997afeaa6be4e3d9c42446b505c7043b/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82e0c914997afeaa6be4e3d9c42446b505c7043b/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=82e0c914997afeaa6be4e3d9c42446b505c7043b", "patch": "@@ -25,6 +25,48 @@\n \t* jit-playback.h (gcc::jit::playback::context::dlopen_built_dso):\n \tNew function.\n \n+2014-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64166\n+\t* docs/topics/contexts.rst (Debugging): Add description of\n+\tgcc_jit_context_enable_dump.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-playback.c: Include context.h.\n+\t(class auto_argvec): New class.\n+\t(auto_argvec::~auto_argvec): New function.\n+\t(gcc::jit::playback::context::compile): Convert fake_args to be\n+\tan auto_argvec, so that it can contain dynamically-allocated\n+\tstrings.   Construct a vec of all requested dumps, and pass it to\n+\tmake_fake_args.  Extract requested dumps between the calls to\n+\ttoplev::main and toplev::finalize.\n+\t(gcc::jit::playback::context::make_fake_args): Convert param\n+\t\"argvec\" to be a vec <char *>, and gain a \"requested_dumps\"\n+\tparam.  Convert to dynamically-allocated arg strings by converting\n+\tADD_ARG to take a copy of the arg, and add ADD_ARG_TAKE_OWNERSHIP\n+\tfor args that are already a copy.  Add args for all requested dumps.\n+\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n+\tfunction.\n+\t(gcc::jit::playback::context::read_dump_file): New function.\n+\t* jit-playback.h (gcc::jit::playback::context::make_fake_args):\n+\tConvert param \"argvec\" to be a vec <char *>, and gain a\n+\t\"requested_dumps\" param.\n+\t(gcc::jit::playback::context::extract_any_requested_dumps): New\n+\tfunction.\n+\t(gcc::jit::playback::context::read_dump_file): New function.\n+\t* jit-recording.c (gcc::jit::recording::context::enable_dump): New\n+\tfunction.\n+\t(gcc::jit::recording::context::get_all_requested_dumps): New\n+\tfunction.\n+\t* jit-recording.h (gcc::jit::recording::requested_dump): New\n+\tstruct.\n+\t(gcc::jit::recording::context::enable_dump): New function.\n+\t(gcc::jit::recording::context::get_all_requested_dumps): New\n+\tfunction.\n+\t(gcc::jit::recording::context::m_requested_dumps): New field.\n+\t* libgccjit.c (gcc_jit_context_enable_dump): New API entrypoint.\n+\t* libgccjit.h (gcc_jit_context_enable_dump): New API entrypoint.\n+\t* libgccjit.map (gcc_jit_context_enable_dump): New API entrypoint.\n+\n 2014-12-08  David Malcolm  <dmalcolm@redhat.com>\n \n \t* libgccjit++.h: Indent the forward declarations of the classes to"}]}