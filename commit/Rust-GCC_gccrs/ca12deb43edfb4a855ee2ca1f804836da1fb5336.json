{"sha": "ca12deb43edfb4a855ee2ca1f804836da1fb5336", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExMmRlYjQzZWRmYjRhODU1ZWUyY2ExZjgwNDgzNmRhMWZiNTMzNg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2005-07-07T14:34:53Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2005-07-07T14:34:53Z"}, "message": "re PR java/21045 (Anonymous inner class constructor's exceptions can't be caught or thrown)\n\n2005-07-07  Bryce McKinlay  <mckinlay@redhat.com>\n\n        PR java/21045\n\t* parse.y (add_exception_to_throws): New function.\n\t(purge_unchecked_exceptions): Removed.\n\t(get_constructor_super): Renamed from verify_constructor_super. Now\n\treturns the super constructor after verification.\n\t(java_complete_expand_method): Don't use purge_unchecked_exceptions\n\tor save/restore the exception list.\n\t(check_thrown_exceptions): Add uncaught exceptions in anonymous\n\tclass initializers and constructors to the throws clause of the\n\tmethod.\n\n2005-07-07  Bryce McKinlay  <mckinlay@redhat.com>\n\n        * testsuite/libjava.compile/PR21045.java: New test.\n        * testsuite/libjava.jacks/jacks.xfail: Remove 15.9.5.1-exception-1,\n        15.9.5.1-exception-3, 8.3.2-abrupt-6, 8.3.2-abrupt-7.\n\nFrom-SVN: r101713", "tree": {"sha": "1c18a770e3b496c37eb199d56bcba0fed43cf098", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c18a770e3b496c37eb199d56bcba0fed43cf098"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca12deb43edfb4a855ee2ca1f804836da1fb5336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca12deb43edfb4a855ee2ca1f804836da1fb5336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca12deb43edfb4a855ee2ca1f804836da1fb5336", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca12deb43edfb4a855ee2ca1f804836da1fb5336/comments", "author": null, "committer": null, "parents": [{"sha": "b52110d478b71ec2e1f099b3c1b539228a9bdaea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52110d478b71ec2e1f099b3c1b539228a9bdaea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52110d478b71ec2e1f099b3c1b539228a9bdaea"}], "stats": {"total": 143, "additions": 93, "deletions": 50}, "files": [{"sha": "88284867b6536810a5bf4e74aed01b7031475062", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca12deb43edfb4a855ee2ca1f804836da1fb5336/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca12deb43edfb4a855ee2ca1f804836da1fb5336/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ca12deb43edfb4a855ee2ca1f804836da1fb5336", "patch": "@@ -1,3 +1,15 @@\n+2005-07-07  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+        PR java/21045\n+\t* parse.y (add_exception_to_throws): New function.\n+\t(purge_unchecked_exceptions): Removed.\n+\t(get_constructor_super): Renamed from verify_constructor_super. Now\n+\treturns the super constructor after verification.\n+\t(java_complete_expand_method): Don't use purge_unchecked_exceptions\n+\tor save/restore the exception list.\n+\t(check_thrown_exceptions): Add uncaught exceptions in anonymous\n+\tclass initializers and constructors to the throws clause of the method.\t\n+\n 2005-07-05  Bryce McKinlay  <mckinlay@redhat.com>\n \n         PR java/19674"}, {"sha": "9a094e5d61b46bd50b6ab80dd4e015a66c2bf075", "filename": "gcc/java/parse.y", "status": "modified", "additions": 64, "deletions": 46, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca12deb43edfb4a855ee2ca1f804836da1fb5336/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca12deb43edfb4a855ee2ca1f804836da1fb5336/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ca12deb43edfb4a855ee2ca1f804836da1fb5336", "patch": "@@ -233,13 +233,13 @@ static tree build_try_finally_statement (int, tree, tree);\n static tree patch_try_statement (tree);\n static tree patch_synchronized_statement (tree, tree);\n static tree patch_throw_statement (tree, tree);\n+static void add_exception_to_throws (tree, tree);\n #ifdef USE_MAPPED_LOCATION\n static void check_thrown_exceptions (source_location, tree, tree);\n #else\n static void check_thrown_exceptions (int, tree, tree);\n #endif\n static int check_thrown_exceptions_do (tree);\n-static void purge_unchecked_exceptions (tree);\n static bool ctors_unchecked_throws_clause_p (tree);\n static void check_concrete_throws_clauses (tree, tree, tree, tree);\n static void check_throws_clauses (tree, tree, tree);\n@@ -256,7 +256,7 @@ static tree build_instinit_invocation (tree);\n static void fix_constructors (tree);\n static tree build_alias_initializer_parameter_list (int, tree, tree, int *);\n static tree craft_constructor (tree, tree);\n-static int verify_constructor_super (tree);\n+static tree get_constructor_super (tree);\n static tree create_artificial_method (tree, int, tree, tree, tree);\n static void start_artificial_method_body (tree);\n static void end_artificial_method_body (tree);\n@@ -2082,7 +2082,7 @@ anonymous_class_creation:\n \t\t     must be generated following the hints provided by\n \t\t     the `new' expression. Whether a super constructor\n \t\t     of that nature exists or not is to be verified\n-\t\t     later on in verify_constructor_super.\n+\t\t     later on in get_constructor_super.\n \n \t\t     It's during the expansion of a `new' statement\n \t\t     referring to an anonymous class that a ctor will\n@@ -8161,11 +8161,6 @@ java_complete_expand_method (tree mdecl)\n   current_this = (!METHOD_STATIC (mdecl) ?\n \t\t  BLOCK_EXPR_DECLS (DECL_FUNCTION_BODY (mdecl)) : NULL_TREE);\n \n-  /* Purge the `throws' list of unchecked exceptions (we save a copy\n-     of the list and re-install it later.) */\n-  exception_copy = copy_list (DECL_FUNCTION_THROWS (mdecl));\n-  purge_unchecked_exceptions (mdecl);\n-\n   /* Install exceptions thrown with `throws' */\n   PUSH_EXCEPTIONS (DECL_FUNCTION_THROWS (mdecl));\n \n@@ -8223,9 +8218,6 @@ java_complete_expand_method (tree mdecl)\n   POP_EXCEPTIONS();\n   if (currently_caught_type_list)\n     abort ();\n-\n-  /* Restore the copy of the list of exceptions. */\n-  DECL_FUNCTION_THROWS (mdecl) = exception_copy;\n }\n \n /* For with each class for which there's code to generate. */\n@@ -9038,7 +9030,8 @@ fix_constructors (tree mdecl)\n       /* It is an error for the compiler to generate a default\n \t constructor if the superclass doesn't have a constructor that\n \t takes no argument, or the same args for an anonymous class */\n-      if (verify_constructor_super (mdecl))\n+      tree sdecl = get_constructor_super (mdecl);\n+      if (sdecl == NULL_TREE)\n \t{\n \t  tree sclass_decl = TYPE_NAME (CLASSTYPE_SUPER (class_type));\n \t  tree save = DECL_NAME (mdecl);\n@@ -9051,6 +9044,13 @@ fix_constructors (tree mdecl)\n \t  DECL_NAME (mdecl) = save;\n \t}\n \n+      if (ANONYMOUS_CLASS_P (class_type))\n+\t{\n+\t  /* Copy throws clause from the super constructor.  */\n+\t  tree throws = DECL_FUNCTION_THROWS (sdecl);\n+\t  DECL_FUNCTION_THROWS (mdecl) = copy_list (throws);\n+\t}\n+\n       /* The constructor body must be crafted by hand. It's the\n \t constructor we defined when we realize we didn't have the\n \t CLASSNAME() constructor */\n@@ -9135,19 +9135,18 @@ fix_constructors (tree mdecl)\n }\n \n /* Browse constructors in the super class, searching for a constructor\n-   that doesn't take any argument. Return 0 if one is found, 1\n-   otherwise.  If the current class is an anonymous inner class, look\n-   for something that has the same signature. */\n-\n-static int\n-verify_constructor_super (tree mdecl)\n+   that doesn't take any argument. Return the constructor if one is found, \n+   NULL_TREE otherwise.  If the current class is an anonymous inner class, \n+   look for something that has the same signature. */\n+static tree\n+get_constructor_super (tree mdecl)\n {\n   tree class = CLASSTYPE_SUPER (current_class);\n   int super_inner = PURE_INNER_CLASS_TYPE_P (class);\n   tree sdecl;\n \n   if (!class)\n-    return 0;\n+    return NULL_TREE;\n \n   if (ANONYMOUS_CLASS_P (current_class))\n     {\n@@ -9171,7 +9170,7 @@ verify_constructor_super (tree mdecl)\n \t\tbreak;\n \n \t    if (arg_type == end_params_node && m_arg_type == end_params_node)\n-\t      return 0;\n+\t      return sdecl;\n \t  }\n     }\n   else\n@@ -9182,10 +9181,10 @@ verify_constructor_super (tree mdecl)\n \t  if (super_inner)\n \t    arg = TREE_CHAIN (arg);\n \t  if (DECL_CONSTRUCTOR_P (sdecl) && arg == end_params_node)\n-\t    return 0;\n+\t    return sdecl;\n \t}\n     }\n-  return 1;\n+  return NULL_TREE;\n }\n \n /* Generate code for all context remembered for code generation.  */\n@@ -15911,6 +15910,34 @@ patch_throw_statement (tree node, tree wfl_op1)\n   return node;\n }\n \n+/* Add EXCEPTION to the throws clause of MDECL.  If MDECL already throws\n+   a super-class of EXCEPTION, keep the superclass instead.  If MDECL already\n+   throws a sub-class of EXCEPTION, replace the sub-class with EXCEPTION.  */\n+static void\n+add_exception_to_throws (tree mdecl, tree exception)\n+{\n+  tree mthrows;\n+  \n+  /* Ignore unchecked exceptions. */\n+  if (IS_UNCHECKED_EXCEPTION_P (exception))\n+    return;\n+\n+  for (mthrows = DECL_FUNCTION_THROWS (mdecl);\n+       mthrows; mthrows = TREE_CHAIN (mthrows))\n+    {\n+      if (inherits_from_p (exception, TREE_VALUE (mthrows)))\n+        return;\n+      if (inherits_from_p (TREE_VALUE (mthrows), exception))\n+        {\n+\t  TREE_VALUE (mthrows) = exception;\n+\t  return;\n+\t}\n+    }\n+  \n+  mthrows = DECL_FUNCTION_THROWS (mdecl);\n+  DECL_FUNCTION_THROWS (mdecl) = build_tree_list (mthrows, exception);\n+}\n+\n /* Check that exception said to be thrown by method DECL can be\n    effectively caught from where DECL is invoked.  THIS_EXPR is the\n    expression that computes `this' for the method call.  */\n@@ -15950,10 +15977,21 @@ check_thrown_exceptions (\n #else\n \tEXPR_WFL_LINECOL (wfl_operator) = location;\n #endif\n-\tif (DECL_FINIT_P (current_function_decl))\n-\t  parse_error_context\n-            (wfl_operator, \"Exception %qs can't be thrown in initializer\",\n-\t     lang_printable_name (TREE_VALUE (throws), 0));\n+\tif (ANONYMOUS_CLASS_P (DECL_CONTEXT (current_function_decl))\n+\t    && (DECL_FINIT_P (current_function_decl)\n+\t        || DECL_INIT_P (current_function_decl)\n+\t\t|| DECL_CONSTRUCTOR_P (current_function_decl)))\n+\t  {\n+\t    /* Add \"throws\" to the initializer's exception list */\n+\t    tree exception = TREE_VALUE (throws);\n+\t    add_exception_to_throws (current_function_decl, exception);\t  \n+\t  }\n+\telse if (DECL_FINIT_P (current_function_decl))\n+\t  {\n+\t    parse_error_context\n+              (wfl_operator, \"Exception %qs can't be thrown in initializer\",\n+\t       lang_printable_name (TREE_VALUE (throws), 0));\n+\t  }\n \telse\n \t  {\n \t    parse_error_context\n@@ -15990,26 +16028,6 @@ check_thrown_exceptions_do (tree exception)\n   return 0;\n }\n \n-static void\n-purge_unchecked_exceptions (tree mdecl)\n-{\n-  tree throws = DECL_FUNCTION_THROWS (mdecl);\n-  tree new = NULL_TREE;\n-\n-  while (throws)\n-    {\n-      tree next = TREE_CHAIN (throws);\n-      if (!IS_UNCHECKED_EXCEPTION_P (TREE_VALUE (throws)))\n-\t{\n-\t  TREE_CHAIN (throws) = new;\n-\t  new = throws;\n-\t}\n-      throws = next;\n-    }\n-  /* List is inverted here, but it doesn't matter */\n-  DECL_FUNCTION_THROWS (mdecl) = new;\n-}\n-\n /* This function goes over all of CLASS_TYPE ctors and checks whether\n    each of them features at least one unchecked exception in its\n    `throws' clause. If it's the case, it returns `true', `false'"}, {"sha": "e0825bbc4ea78902105c081579d49d69b666f60f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca12deb43edfb4a855ee2ca1f804836da1fb5336/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca12deb43edfb4a855ee2ca1f804836da1fb5336/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ca12deb43edfb4a855ee2ca1f804836da1fb5336", "patch": "@@ -1,3 +1,9 @@\n+2005-07-07  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* testsuite/libjava.compile/PR21045.java: New test.\n+\t* testsuite/libjava.jacks/jacks.xfail: Remove 15.9.5.1-exception-1,\n+\t15.9.5.1-exception-3, 8.3.2-abrupt-6, 8.3.2-abrupt-7.\n+\n 2005-07-06  Tom Tromey  <tromey@redhat.com>\n \n \t* java/io/InputStreamReader.java (refill): Handle no-progress"}, {"sha": "3d34ee1f304a039ea2f7170ea215823c835868ba", "filename": "libjava/testsuite/libjava.compile/PR21045.java", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca12deb43edfb4a855ee2ca1f804836da1fb5336/libjava%2Ftestsuite%2Flibjava.compile%2FPR21045.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca12deb43edfb4a855ee2ca1f804836da1fb5336/libjava%2Ftestsuite%2Flibjava.compile%2FPR21045.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2FPR21045.java?ref=ca12deb43edfb4a855ee2ca1f804836da1fb5336", "patch": "@@ -0,0 +1,11 @@\n+public class PR21045\n+{\n+\tclass InnerBase {\n+\t\tInnerBase() throws Exception, NullPointerException {}\n+\t}\n+\tvoid method() {\n+\t\ttry {\n+\t\t\tInnerBase obj = new InnerBase() {};\n+\t\t} catch (Exception e) {}\n+\t}\n+}"}, {"sha": "68af018a5f483b57a449ddbe1362e15193fe3e26", "filename": "libjava/testsuite/libjava.jacks/jacks.xfail", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca12deb43edfb4a855ee2ca1f804836da1fb5336/libjava%2Ftestsuite%2Flibjava.jacks%2Fjacks.xfail", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca12deb43edfb4a855ee2ca1f804836da1fb5336/libjava%2Ftestsuite%2Flibjava.jacks%2Fjacks.xfail", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jacks%2Fjacks.xfail?ref=ca12deb43edfb4a855ee2ca1f804836da1fb5336", "patch": "@@ -347,8 +347,6 @@\n 15.9.4-runtime-creation-1\n 15.9.4-runtime-creation-2\n 15.9.4-runtime-creation-5\n-15.9.5.1-exception-1\n-15.9.5.1-exception-3\n 15.9.5.1-exception-4\n 15.9.5.1-superconstructor-7\n 15.9.5.1-superconstructor-8\n@@ -563,8 +561,6 @@\n 8.3.1.2-final-29\n 8.3.2-abrupt-3\n 8.3.2-abrupt-5\n-8.3.2-abrupt-6\n-8.3.2-abrupt-7\n 8.3.2.2-super-2\n 8.3.2.3-illegal-forward-instance-1\n 8.3.2.3-illegal-forward-instance-2"}]}