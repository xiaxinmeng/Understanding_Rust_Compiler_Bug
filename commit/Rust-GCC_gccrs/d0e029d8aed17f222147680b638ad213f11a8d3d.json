{"sha": "d0e029d8aed17f222147680b638ad213f11a8d3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBlMDI5ZDhhZWQxN2YyMjIxNDc2ODBiNjM4YWQyMTNmMTFhOGQzZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-25T07:00:34Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-25T07:00:34Z"}, "message": "PlainDatagramSocketImpl.java: Partly merged with classpath, this mainly adds documentation.\n\n2003-06-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/PlainDatagramSocketImpl.java:\n\tPartly merged with classpath, this mainly adds documentation.\n\nFrom-SVN: r68468", "tree": {"sha": "b1cc04d5b128feff3730fbf1c683f67dedd249b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1cc04d5b128feff3730fbf1c683f67dedd249b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0e029d8aed17f222147680b638ad213f11a8d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e029d8aed17f222147680b638ad213f11a8d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0e029d8aed17f222147680b638ad213f11a8d3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0e029d8aed17f222147680b638ad213f11a8d3d/comments", "author": null, "committer": null, "parents": [{"sha": "3cc9a95d27f700508a686b8414dcffff9b4d75e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc9a95d27f700508a686b8414dcffff9b4d75e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc9a95d27f700508a686b8414dcffff9b4d75e9"}], "stats": {"total": 140, "additions": 132, "deletions": 8}, "files": [{"sha": "01188835bd450802069bec6de599aaddf6dbe0c4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e029d8aed17f222147680b638ad213f11a8d3d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e029d8aed17f222147680b638ad213f11a8d3d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d0e029d8aed17f222147680b638ad213f11a8d3d", "patch": "@@ -1,3 +1,8 @@\n+2003-06-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/PlainDatagramSocketImpl.java:\n+\tPartly merged with classpath, this mainly adds documentation.\n+\n 2003-06-25  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/ObjectInputStream.java"}, {"sha": "83fdb633d9927d26ffc77242aa1a8a0884f8ff5e", "filename": "libjava/java/net/PlainDatagramSocketImpl.java", "status": "modified", "additions": 127, "deletions": 8, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0e029d8aed17f222147680b638ad213f11a8d3d/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0e029d8aed17f222147680b638ad213f11a8d3d/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FPlainDatagramSocketImpl.java?ref=d0e029d8aed17f222147680b638ad213f11a8d3d", "patch": "@@ -39,6 +39,7 @@\n package java.net;\n \n import java.io.IOException;\n+import gnu.classpath.Configuration;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n@@ -47,11 +48,24 @@\n  */\n \n /**\n+ * This is the default socket implementation for datagram sockets.\n+ * It makes native calls to C routines that implement BSD style\n+ * SOCK_DGRAM sockets in the AF_INET family.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date May 3, 1999.\n  */\n class PlainDatagramSocketImpl extends DatagramSocketImpl\n {\n+  // Static initializer to load native library\n+  static\n+  {\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      {\n+        System.loadLibrary(\"javanet\");\n+      }\n+  }\n+  \n   // These fields are mirrored for use in native code to avoid cpp conflicts\n   // when the #defines in system header files are the same as the public fields.\n   static final int _Jv_TCP_NODELAY_ = SocketOptions.TCP_NODELAY,\n@@ -69,6 +83,9 @@ class PlainDatagramSocketImpl extends DatagramSocketImpl\n                    _Jv_SO_RCVBUF_ = SocketOptions.SO_RCVBUF,\n                    _Jv_SO_KEEPALIVE_ = SocketOptions.SO_KEEPALIVE;\n \n+  /**\n+   * This is the actual underlying file descriptor\n+   */\n   int fnum = -1;\n \n   // FIXME: Is this necessary?  Could it help w/ DatagramSocket.getLocalAddress?\n@@ -80,50 +97,152 @@ class PlainDatagramSocketImpl extends DatagramSocketImpl\n   // 'timeout' is set/read by setOption/getOption.\n   int timeout = 0;\n \n-  // FIXME: Probably should have bind (and create?) calls from DatagramSocket\n-  // constuctor.  If so, then same change should be made to the corresponding\n-  // Socket (non-datagram) classes.  This allows the implementation more\n-  // complete control over how the socket is set up and used (e.g. connect,\n-  // setting options, etc.).\n+  /**\n+   * Default do nothing constructor\n+   */\n   public PlainDatagramSocketImpl()\n   {\n   }\n \n+  /**\n+   * Binds this socket to a particular port and interface\n+   *\n+   * @param port The port to bind to\n+   * @param addr The address to bind to\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   protected native void bind(int lport, InetAddress laddr)\n \tthrows SocketException;\n+\n   protected native void connect (InetAddress i, int port)\n \tthrows SocketException;\n+  \n   protected native void disconnect ();\n+  \n+  /**\n+   * Creates a new datagram socket\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   protected native void create() throws SocketException;\n+  \n   protected native int peek(InetAddress i) throws IOException;\n+  \n   protected native int peekData (DatagramPacket dp) throws IOException;\n+\n+  /**\n+   * Sets the Time to Live value for the socket\n+   *\n+   * @param ttl The new TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected native void setTimeToLive(int ttl) throws IOException;\n+\n+  /**\n+   * Gets the Time to Live value for the socket\n+   *\n+   * @return The TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected native int getTimeToLive() throws IOException;\n+\n+  /**\n+   * Sends a packet of data to a remote host\n+   *\n+   * @param packet The packet to send\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected native void send(DatagramPacket p) throws IOException;\n+\n+  /**\n+   * Receives a UDP packet from the network\n+   *\n+   * @param packet The packet to fill in with the data received\n+   *\n+   * @exception IOException IOException If an error occurs\n+   */\n   protected native void receive(DatagramPacket p) throws IOException;\n+\n+  /**\n+   * Sets the value of an option on the socket\n+   *\n+   * @param option_id The identifier of the option to set\n+   * @param val The value of the option to set\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   public native void setOption(int optID, Object value) throws SocketException;\n+\n+  /**\n+   * Retrieves the value of an option on the socket\n+   *\n+   * @param option_id The identifier of the option to retrieve\n+   *\n+   * @return The value of the option\n+   *\n+   * @exception SocketException If an error occurs\n+   */\n   public native Object getOption(int optID) throws SocketException;\n+  \n   private native void mcastGrp(InetAddress inetaddr, NetworkInterface netIf,\n \t\t               boolean join) throws IOException;\n+\n+  /**\n+   * Closes the socket\n+   */\n   protected native void close();\n \n-  // Deprecated in JDK 1.2.\n+  /**\n+   * Gets the Time to Live value for the socket\n+   *\n+   * @return The TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   *\n+   * @deprecated 1.2\n+   */\n   protected byte getTTL() throws IOException\n   {\n     return (byte) getTimeToLive();\n   }\n \n-  // Deprecated in JDK 1.2.\n+  /**\n+   * Sets the Time to Live value for the socket\n+   *\n+   * @param ttl The new TTL value\n+   *\n+   * @exception IOException If an error occurs\n+   *\n+   * @deprecated 1.2\n+   */\n   protected void setTTL(byte ttl) throws IOException\n   {\n     setTimeToLive(((int) ttl) & 0xFF);\n   }\n \n+  /**\n+   * Joins a multicast group\n+   *\n+   * @param addr The group to join\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected void join(InetAddress inetaddr) throws IOException\n   {\n     mcastGrp(inetaddr, null, true);\n   }\n \n+  /**\n+   * Leaves a multicast group\n+   *\n+   * @param addr The group to leave\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected void leave(InetAddress inetaddr) throws IOException\n   {\n     mcastGrp(inetaddr, null, false);"}]}