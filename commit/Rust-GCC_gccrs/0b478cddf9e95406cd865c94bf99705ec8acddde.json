{"sha": "0b478cddf9e95406cd865c94bf99705ec8acddde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0NzhjZGRmOWU5NTQwNmNkODY1Yzk0YmY5OTcwNWVjOGFjZGRkZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:03:19Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:03:19Z"}, "message": "[arm] Add alternative canonicalizations for subtract-with-carry + shift\n\nThis patch adds a couple of alternative canonicalizations to allow\ncombine to match a subtract-with-carry operation when one of the operands\nis shifted first.  The most common case of this is when combining a\nsign-extend of one operand with a long-long value during subtraction.\nThe RSC variant is only enabled for Arm, the SBC variant for any 32-bit\ncompilation.\n\n\t* config/arm/arm.md (subsi3_carryin_shift_alt): New pattern.\n\t(rsbsi3_carryin_shift_alt): Likewise.\n\nFrom-SVN: r277176", "tree": {"sha": "e4aea46ee82842c8dc421bca46b1c22e20ade936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4aea46ee82842c8dc421bca46b1c22e20ade936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b478cddf9e95406cd865c94bf99705ec8acddde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b478cddf9e95406cd865c94bf99705ec8acddde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b478cddf9e95406cd865c94bf99705ec8acddde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b478cddf9e95406cd865c94bf99705ec8acddde/comments", "author": null, "committer": null, "parents": [{"sha": "f6ff841bc8dd87ce364deb217dc6d1ec5dc31de8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6ff841bc8dd87ce364deb217dc6d1ec5dc31de8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6ff841bc8dd87ce364deb217dc6d1ec5dc31de8"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "393fcbdcfff74f70a76346d9ce4dc9a2d87b1ba4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b478cddf9e95406cd865c94bf99705ec8acddde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b478cddf9e95406cd865c94bf99705ec8acddde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b478cddf9e95406cd865c94bf99705ec8acddde", "patch": "@@ -1,3 +1,8 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (subsi3_carryin_shift_alt): New pattern.\n+\t(rsbsi3_carryin_shift_alt): Likewise.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.md (negscc_borrow): New pattern."}, {"sha": "613f50ae5f05283cbf01ad6ab635b5e950c8afcd", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b478cddf9e95406cd865c94bf99705ec8acddde/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b478cddf9e95406cd865c94bf99705ec8acddde/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=0b478cddf9e95406cd865c94bf99705ec8acddde", "patch": "@@ -1048,6 +1048,23 @@\n \t\t\t\t    (const_string \"alu_shift_reg\")))]\n )\n \n+(define_insn \"*subsi3_carryin_shift_alt\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(minus:SI (minus:SI\n+\t\t   (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t   (match_operand:SI 5 \"arm_borrow_operation\" \"\"))\n+\t\t  (match_operator:SI 2 \"shift_operator\"\n+\t\t   [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n+  \"TARGET_32BIT\"\n+  \"sbc%?\\\\t%0, %1, %3%S2\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n+\t\t\t\t    (const_string \"alu_shift_imm\")\n+\t\t\t\t    (const_string \"alu_shift_reg\")))]\n+)\n+\n (define_insn \"*rsbsi3_carryin_shift\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(minus:SI (minus:SI\n@@ -1065,6 +1082,23 @@\n \t\t      (const_string \"alu_shift_reg\")))]\n )\n \n+(define_insn \"*rsbsi3_carryin_shift_alt\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(minus:SI (minus:SI\n+\t\t   (match_operator:SI 2 \"shift_operator\"\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])\n+\t\t    (match_operand:SI 5 \"arm_borrow_operation\" \"\"))\n+\t\t  (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+  \"TARGET_ARM\"\n+  \"rsc%?\\\\t%0, %1, %3%S2\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"predicable\" \"yes\")\n+   (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n+\t\t      (const_string \"alu_shift_imm\")\n+\t\t      (const_string \"alu_shift_reg\")))]\n+)\n+\n ; transform ((x << y) - 1) to ~(~(x-1) << y)  Where X is a constant.\n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")"}]}