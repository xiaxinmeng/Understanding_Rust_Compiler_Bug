{"sha": "f10e695fc508c472c77e968e644f710806f82f54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwZTY5NWZjNTA4YzQ3MmM3N2U5NjhlNjQ0ZjcxMDgwNmY4MmY1NA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-10T14:38:10Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-10T18:10:57Z"}, "message": "Return expressions can be empty which us unit-type\n\nThe parser has the same bug as in #225 for break expressions. This\ntidies up the type resolver and GENERIC translation to handle the\ncase where there is no return expression as well.\n\nFixes #226", "tree": {"sha": "1628784a0b83981ea01f024e5989832edf447a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1628784a0b83981ea01f024e5989832edf447a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10e695fc508c472c77e968e644f710806f82f54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10e695fc508c472c77e968e644f710806f82f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10e695fc508c472c77e968e644f710806f82f54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10e695fc508c472c77e968e644f710806f82f54/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae273ffac99cb75d832a11a83fd63291bb74cbdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae273ffac99cb75d832a11a83fd63291bb74cbdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae273ffac99cb75d832a11a83fd63291bb74cbdc"}], "stats": {"total": 40, "additions": 33, "deletions": 7}, "files": [{"sha": "0c8d25a1a9990a6422245272ef6a03b613042562", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=f10e695fc508c472c77e968e644f710806f82f54", "patch": "@@ -84,14 +84,18 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ReturnExpr &expr)\n   {\n-    Bexpression *compiled_expr\n-      = CompileExpr::Compile (expr.return_expr.get (), ctx);\n-    rust_assert (compiled_expr != nullptr);\n-\n     auto fncontext = ctx->peek_fn ();\n \n     std::vector<Bexpression *> retstmts;\n-    retstmts.push_back (compiled_expr);\n+    if (expr.has_return_expr ())\n+      {\n+\tBexpression *compiled_expr\n+\t  = CompileExpr::Compile (expr.return_expr.get (), ctx);\n+\trust_assert (compiled_expr != nullptr);\n+\n+\tretstmts.push_back (compiled_expr);\n+      }\n+\n     auto s = ctx->get_backend ()->return_statement (fncontext.fndecl, retstmts,\n \t\t\t\t\t\t    expr.get_locus ());\n     ctx->add_statement (s);"}, {"sha": "fcb3d181ccc6ae1c941f3ef8cb6f799961b5b563", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=f10e695fc508c472c77e968e644f710806f82f54", "patch": "@@ -7400,8 +7400,10 @@ Parser<ManagedTokenSource>::parse_return_expr (\n     }\n \n   // parse expression to return, if it exists\n-  std::unique_ptr<AST::Expr> returned_expr = parse_expr ();\n-  // FIXME: ensure this doesn't ruin the middle of any expressions or anything\n+  ParseRestrictions restrictions;\n+  restrictions.expr_can_be_null = true;\n+  std::unique_ptr<AST::Expr> returned_expr\n+    = parse_expr (std::vector<AST::Attribute> (), restrictions);\n \n   return std::unique_ptr<AST::ReturnExpr> (\n     new AST::ReturnExpr (locus, std::move (returned_expr),"}, {"sha": "c8493f08a262068615c3835eddf7a67896d51af2", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=f10e695fc508c472c77e968e644f710806f82f54", "patch": "@@ -137,6 +137,12 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::ReturnExpr &expr)\n   {\n+    if (!expr.has_return_expr ())\n+      {\n+\tinfered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\treturn;\n+      }\n+\n     auto fn_return_tyty = context->peek_return_type ();\n     rust_assert (fn_return_tyty != nullptr);\n "}, {"sha": "76fadfb4337d250f81834576c2bbda330fa5f1e4", "filename": "gcc/testsuite/rust.test/compilable/loop3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10e695fc508c472c77e968e644f710806f82f54/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Floop3.rs?ref=f10e695fc508c472c77e968e644f710806f82f54", "patch": "@@ -0,0 +1,14 @@\n+fn main() {\n+    let mut a = 1;\n+    let mut b = 1;\n+\n+    // first number in Fibonacci sequence over 10:\n+    loop {\n+        if b > 10 {\n+            return;\n+        }\n+        let c = a + b;\n+        a = b;\n+        b = c;\n+    }\n+}"}]}