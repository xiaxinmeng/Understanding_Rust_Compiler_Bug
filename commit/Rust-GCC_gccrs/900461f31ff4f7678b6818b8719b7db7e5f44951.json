{"sha": "900461f31ff4f7678b6818b8719b7db7e5f44951", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwNDYxZjMxZmY0Zjc2NzhiNjgxOGI4NzE5YjdkYjdlNWY0NDk1MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-10-12T07:10:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-10-12T07:10:22Z"}, "message": "re PR tree-optimization/33645 (undefined static variable in vortex for -fno-unit-at-a-time)\n\n\tPR tree-optimization/33645\n\t* tree-ssa-live.c (mark_all_vars_used): Add data argument,\n\tpass it to walk_tree.\n\t(mark_all_vars_used_1): Pass data through to mark_all_vars_used.\n\tWhen calling set_is_used on a VAR_DECL, if data is not NULL and\n\tits DECL_UID is in the bitmap, call mark_all_vars_used on its\n\tDECL_INITIAL after clearing the bit in bitmap.\n\t(remove_unused_locals): Adjust mark_all_vars_used callers.\n\tInstead of removing unused global vars from unexpanded_var_list\n\timmediately record them in bitmap, call mark_all_vars_used on\n\tall used global vars from unexpanded_var_list and only purge\n\tglobal vars that weren't found used even during that step.\n\n\t* gcc.dg/pr33645-1.c: New test.\n\t* gcc.dg/pr33645-2.c: New test.\n\t* gcc.dg/pr33645-3.c: New test.\n\nFrom-SVN: r129254", "tree": {"sha": "474026ffd420a838b23e399107df7fd8abcaea1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474026ffd420a838b23e399107df7fd8abcaea1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/900461f31ff4f7678b6818b8719b7db7e5f44951", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900461f31ff4f7678b6818b8719b7db7e5f44951", "html_url": "https://github.com/Rust-GCC/gccrs/commit/900461f31ff4f7678b6818b8719b7db7e5f44951", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/900461f31ff4f7678b6818b8719b7db7e5f44951/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d3585eb17d987e33bfb59568f5bc37809c614f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d3585eb17d987e33bfb59568f5bc37809c614f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d3585eb17d987e33bfb59568f5bc37809c614f6"}], "stats": {"total": 151, "additions": 137, "deletions": 14}, "files": [{"sha": "c1f44631d6845e6a7989a116571b736760e55055", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=900461f31ff4f7678b6818b8719b7db7e5f44951", "patch": "@@ -1,3 +1,18 @@\n+2007-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/33645\n+\t* tree-ssa-live.c (mark_all_vars_used): Add data argument,\n+\tpass it to walk_tree.\n+\t(mark_all_vars_used_1): Pass data through to mark_all_vars_used.\n+\tWhen calling set_is_used on a VAR_DECL, if data is not NULL and\n+\tits DECL_UID is in the bitmap, call mark_all_vars_used on its\n+\tDECL_INITIAL after clearing the bit in bitmap.\n+\t(remove_unused_locals): Adjust mark_all_vars_used callers.\n+\tInstead of removing unused global vars from unexpanded_var_list\n+\timmediately record them in bitmap, call mark_all_vars_used on\n+\tall used global vars from unexpanded_var_list and only purge\n+\tglobal vars that weren't found used even during that step.\n+ \n 2007-10-11  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gthr-posix.h (__gthread_active_init): Create detached instead of"}, {"sha": "79626fc11720de8ae03c1e2efd08e58537631dee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=900461f31ff4f7678b6818b8719b7db7e5f44951", "patch": "@@ -1,5 +1,10 @@\n 2007-10-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/33645\n+\t* gcc.dg/pr33645-1.c: New test.\n+\t* gcc.dg/pr33645-2.c: New test.\n+\t* gcc.dg/pr33645-3.c: New test.\n+ \n \tPR c++/32121\n \t* g++.dg/ext/label4.C: Adjust error regexp.\n \t* g++.dg/ext/label6.C: Adjust error regexp."}, {"sha": "1ec8a2ff8721c05e89f4e2e2b12e82c0e8008f51", "filename": "gcc/testsuite/gcc.dg/pr33645-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-1.c?ref=900461f31ff4f7678b6818b8719b7db7e5f44951", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/33645 */\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -fno-unit-at-a-time\" } */\n+\n+__attribute__((noinline)) int\n+bar (int *x)\n+{\n+  return *x++;\n+}\n+\n+int\n+main ()\n+{\n+  static int var1_s;\n+  static int *var1_t = &var1_s;\n+\n+  return bar (var1_t) != 0;\n+}"}, {"sha": "3c4bcb060e562dc7259358195fc71efd0dffe31a", "filename": "gcc/testsuite/gcc.dg/pr33645-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-2.c?ref=900461f31ff4f7678b6818b8719b7db7e5f44951", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/33645 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funit-at-a-time\" } */\n+\n+__attribute__((noinline)) int\n+bar (int *x)\n+{\n+  return *x++;\n+}\n+\n+int\n+main ()\n+{\n+  static int var1_s;\n+  static int *var1_t = &var1_s;\n+\n+  return bar (var1_t) != 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"var1_t\" } } */"}, {"sha": "28b933c412c19e24048c906a48d5b31f3da7ccd9", "filename": "gcc/testsuite/gcc.dg/pr33645-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr33645-3.c?ref=900461f31ff4f7678b6818b8719b7db7e5f44951", "patch": "@@ -0,0 +1,20 @@\n+/* PR tree-optimization/33645 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-unit-at-a-time\" } */\n+\n+__attribute__((noinline)) int\n+bar (int *x)\n+{\n+  return *x++;\n+}\n+\n+int\n+main ()\n+{\n+  static int var1_s;\n+  static int *const var1_t = &var1_s;\n+\n+  return bar (var1_t) != 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"var1_t\" } } */"}, {"sha": "f12de815a39d7abb1e2d8d839962d8c589528670", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 59, "deletions": 14, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/900461f31ff4f7678b6818b8719b7db7e5f44951/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=900461f31ff4f7678b6818b8719b7db7e5f44951", "patch": "@@ -397,13 +397,13 @@ change_partition_var (var_map map, tree var, int part)\n }\n \n \n-static inline void mark_all_vars_used (tree *);\n+static inline void mark_all_vars_used (tree *, void *data);\n \n /* Helper function for mark_all_vars_used, called via walk_tree.  */\n \n static tree\n mark_all_vars_used_1 (tree *tp, int *walk_subtrees,\n-\t\t      void *data ATTRIBUTE_UNUSED)\n+\t\t      void *data)\n {\n   tree t = *tp;\n   enum tree_code_class c = TREE_CODE_CLASS (TREE_CODE (t));\n@@ -420,17 +420,24 @@ mark_all_vars_used_1 (tree *tp, int *walk_subtrees,\n      fields that do not contain vars.  */\n   if (TREE_CODE (t) == TARGET_MEM_REF)\n     {\n-      mark_all_vars_used (&TMR_SYMBOL (t));\n-      mark_all_vars_used (&TMR_BASE (t));\n-      mark_all_vars_used (&TMR_INDEX (t));\n+      mark_all_vars_used (&TMR_SYMBOL (t), data);\n+      mark_all_vars_used (&TMR_BASE (t), data);\n+      mark_all_vars_used (&TMR_INDEX (t), data);\n       *walk_subtrees = 0;\n       return NULL;\n     }\n \n   /* Only need to mark VAR_DECLS; parameters and return results are not\n      eliminated as unused.  */\n   if (TREE_CODE (t) == VAR_DECL)\n-    set_is_used (t);\n+    {\n+      if (data != NULL && bitmap_bit_p ((bitmap) data, DECL_UID (t)))\n+\t{\n+\t  bitmap_clear_bit ((bitmap) data, DECL_UID (t));\n+\t  mark_all_vars_used (&DECL_INITIAL (t), data);\n+\t}\n+      set_is_used (t);\n+    }\n \n   if (IS_TYPE_OR_DECL_P (t))\n     *walk_subtrees = 0;\n@@ -547,9 +554,9 @@ remove_unused_scope_block_p (tree scope)\n    eliminated during the tree->rtl conversion process.  */\n \n static inline void\n-mark_all_vars_used (tree *expr_p)\n+mark_all_vars_used (tree *expr_p, void *data)\n {\n-  walk_tree (expr_p, mark_all_vars_used_1, NULL, NULL);\n+  walk_tree (expr_p, mark_all_vars_used_1, data, NULL);\n }\n \n \n@@ -562,6 +569,7 @@ remove_unused_locals (void)\n   tree t, *cell;\n   referenced_var_iterator rvi;\n   var_ann_t ann;\n+  bitmap global_unused_vars = NULL;\n \n   mark_scope_block_unused (DECL_INITIAL (current_function_decl));\n   /* Assume all locals are unused.  */\n@@ -576,7 +584,7 @@ remove_unused_locals (void)\n \n       /* Walk the statements.  */\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\tmark_all_vars_used (bsi_stmt_ptr (bsi));\n+\tmark_all_vars_used (bsi_stmt_ptr (bsi), NULL);\n \n       for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n         {\n@@ -588,17 +596,17 @@ remove_unused_locals (void)\n \t    continue;\n \n           def = PHI_RESULT (phi);\n-          mark_all_vars_used (&def);\n+\t  mark_all_vars_used (&def, NULL);\n \n           FOR_EACH_PHI_ARG (arg_p, phi, i, SSA_OP_ALL_USES)\n             {\n \t      tree arg = USE_FROM_PTR (arg_p);\n-\t      mark_all_vars_used (&arg);\n+\t      mark_all_vars_used (&arg, NULL);\n             }\n         }\n     }\n \n-  /* Remove unmarked vars and clear used flag.  */\n+  /* Remove unmarked local vars from unexpanded_var_list.  */\n   for (cell = &cfun->unexpanded_var_list; *cell; )\n     {\n       tree var = TREE_VALUE (*cell);\n@@ -607,12 +615,49 @@ remove_unused_locals (void)\n \t  && (!(ann = var_ann (var))\n \t      || !ann->used))\n \t{\n-\t  *cell = TREE_CHAIN (*cell);\n-\t  continue;\n+\t  if (is_global_var (var))\n+\t    {\n+\t      if (global_unused_vars == NULL)\n+\t\tglobal_unused_vars = BITMAP_ALLOC (NULL);\n+\t      bitmap_set_bit (global_unused_vars, DECL_UID (var));\n+\t    }\n+\t  else\n+\t    {\n+\t      *cell = TREE_CHAIN (*cell);\n+\t      continue;\n+\t    }\n \t}\n       cell = &TREE_CHAIN (*cell);\n     }\n \n+  /* Remove unmarked global vars from unexpanded_var_list.  */\n+  if (global_unused_vars != NULL)\n+    {\n+      for (t = cfun->unexpanded_var_list; t; t = TREE_CHAIN (t))\n+\t{\n+\t  tree var = TREE_VALUE (t);\n+\n+\t  if (TREE_CODE (var) == VAR_DECL\n+\t      && is_global_var (var)\n+\t      && (ann = var_ann (var)) != NULL\n+\t      && ann->used)\n+\t    mark_all_vars_used (&DECL_INITIAL (var), global_unused_vars);\n+\t}\n+\n+      for (cell = &cfun->unexpanded_var_list; *cell; )\n+\t{\n+\t  tree var = TREE_VALUE (*cell);\n+\n+\t  if (TREE_CODE (var) == VAR_DECL\n+\t      && is_global_var (var)\n+\t      && bitmap_bit_p (global_unused_vars, DECL_UID (var)))\n+\t    *cell = TREE_CHAIN (*cell);\n+\t  else\n+\t    cell = &TREE_CHAIN (*cell);\n+\t}\n+      BITMAP_FREE (global_unused_vars);\n+    }\n+\n   /* Remove unused variables from REFERENCED_VARs.  As a special\n      exception keep the variables that are believed to be aliased.\n      Those can't be easily removed from the alias sets and operand"}]}