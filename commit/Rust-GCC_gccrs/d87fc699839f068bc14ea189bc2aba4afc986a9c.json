{"sha": "d87fc699839f068bc14ea189bc2aba4afc986a9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg3ZmM2OTk4MzlmMDY4YmMxNGVhMTg5YmMyYWJhNGFmYzk4NmE5Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-09-22T19:43:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-09-22T19:43:02Z"}, "message": "charset.c (conversion): Rename to ...\n\n\n\t* charset.c (conversion): Rename to ...\n\t(cpp_conversion): ... this one; update.\n\t* files.c (file_hash_entry): Rename to ...\n\t(cpp_file_hash_entry): ... this one ; update.\n\nFrom-SVN: r215482", "tree": {"sha": "4074fda1286150a47a6347d1bca396e0db171454", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4074fda1286150a47a6347d1bca396e0db171454"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d87fc699839f068bc14ea189bc2aba4afc986a9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87fc699839f068bc14ea189bc2aba4afc986a9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d87fc699839f068bc14ea189bc2aba4afc986a9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d87fc699839f068bc14ea189bc2aba4afc986a9c/comments", "author": null, "committer": null, "parents": [{"sha": "46842bfe9c5fb7f609917cad8d3ec8cc5ff30bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46842bfe9c5fb7f609917cad8d3ec8cc5ff30bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46842bfe9c5fb7f609917cad8d3ec8cc5ff30bea"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "a1c117a02bf4bd7e89529cb3f2362c0cc28b5f67", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87fc699839f068bc14ea189bc2aba4afc986a9c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87fc699839f068bc14ea189bc2aba4afc986a9c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d87fc699839f068bc14ea189bc2aba4afc986a9c", "patch": "@@ -1,3 +1,10 @@\n+2014-09-17  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* charset.c (conversion): Rename to ...\n+\t(cpp_conversion): ... this one; update.\n+\t* files.c (file_hash_entry): Rename to ...\n+\t(cpp_file_hash_entry): ... this one ; update.\n+\n 2014-09-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61854"}, {"sha": "b766eec8b220e7506af67aeb3bc8265d26e7f526", "filename": "libcpp/charset.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87fc699839f068bc14ea189bc2aba4afc986a9c/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87fc699839f068bc14ea189bc2aba4afc986a9c/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=d87fc699839f068bc14ea189bc2aba4afc986a9c", "patch": "@@ -608,13 +608,13 @@ convert_using_iconv (iconv_t cd, const uchar *from, size_t flen,\n #define APPLY_CONVERSION(CONVERTER, FROM, FLEN, TO) \\\n    CONVERTER.func (CONVERTER.cd, FROM, FLEN, TO)\n \n-struct conversion\n+struct cpp_conversion\n {\n   const char *pair;\n   convert_f func;\n   iconv_t fake_cd;\n };\n-static const struct conversion conversion_tab[] = {\n+static const struct cpp_conversion conversion_tab[] = {\n   { \"UTF-8/UTF-32LE\", convert_utf8_utf32, (iconv_t)0 },\n   { \"UTF-8/UTF-32BE\", convert_utf8_utf32, (iconv_t)1 },\n   { \"UTF-8/UTF-16LE\", convert_utf8_utf16, (iconv_t)0 },"}, {"sha": "a442783f1d1902edf1be16ea39fb2c74853b2b53", "filename": "libcpp/files.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d87fc699839f068bc14ea189bc2aba4afc986a9c/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d87fc699839f068bc14ea189bc2aba4afc986a9c/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=d87fc699839f068bc14ea189bc2aba4afc986a9c", "patch": "@@ -50,7 +50,7 @@ along with this program; see the file COPYING3.  If not see\n \n /* This structure represents a file searched for by CPP, whether it\n    exists or not.  An instance may be pointed to by more than one\n-   file_hash_entry; at present no reference count is kept.  */\n+   cpp_file_hash_entry; at present no reference count is kept.  */\n struct _cpp_file\n {\n   /* Filename as given to #include or command line switch.  */\n@@ -140,9 +140,9 @@ struct _cpp_file\n    have to do more work re-preprocessing the file, and/or comparing\n    its contents against earlier once-only files.\n */\n-struct file_hash_entry\n+struct cpp_file_hash_entry\n {\n-  struct file_hash_entry *next;\n+  struct cpp_file_hash_entry *next;\n   cpp_dir *start_dir;\n   source_location location;\n   union\n@@ -152,10 +152,10 @@ struct file_hash_entry\n   } u;\n };\n \n-/* Number of entries to put in a file_hash_entry pool.  */\n+/* Number of entries to put in a cpp_file_hash_entry pool.  */\n #define FILE_HASH_POOL_SIZE 127\n \n-/* A file hash entry pool.  We allocate file_hash_entry object from\n+/* A file hash entry pool.  We allocate cpp_file_hash_entry object from\n    one of these.  */\n struct file_hash_entry_pool\n {\n@@ -164,7 +164,7 @@ struct file_hash_entry_pool\n   /* Next pool in the chain; used when freeing.  */\n   struct file_hash_entry_pool *next;\n   /* The memory pool.  */\n-  struct file_hash_entry pool[FILE_HASH_POOL_SIZE];\n+  struct cpp_file_hash_entry pool[FILE_HASH_POOL_SIZE];\n };\n \n static bool open_file (_cpp_file *file);\n@@ -179,13 +179,13 @@ static struct cpp_dir *search_path_head (cpp_reader *, const char *fname,\n \t\t\t\t int angle_brackets, enum include_type);\n static const char *dir_name_of_file (_cpp_file *file);\n static void open_file_failed (cpp_reader *pfile, _cpp_file *file, int);\n-static struct file_hash_entry *search_cache (struct file_hash_entry *head,\n+static struct cpp_file_hash_entry *search_cache (struct cpp_file_hash_entry *head,\n \t\t\t\t\t     const cpp_dir *start_dir);\n static _cpp_file *make_cpp_file (cpp_reader *, cpp_dir *, const char *fname);\n static void destroy_cpp_file (_cpp_file *);\n static cpp_dir *make_cpp_dir (cpp_reader *, const char *dir_name, int sysp);\n static void allocate_file_hash_entries (cpp_reader *pfile);\n-static struct file_hash_entry *new_file_hash_entry (cpp_reader *pfile);\n+static struct cpp_file_hash_entry *new_file_hash_entry (cpp_reader *pfile);\n static int report_missing_guard (void **slot, void *b);\n static hashval_t file_hash_hash (const void *p);\n static int file_hash_eq (const void *p, const void *q);\n@@ -498,7 +498,7 @@ _cpp_file *\n _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \t\tbool fake, int angle_brackets, bool implicit_preinclude)\n {\n-  struct file_hash_entry *entry;\n+  struct cpp_file_hash_entry *entry;\n   void **hash_slot;\n   _cpp_file *file;\n   bool invalid_pch = false;\n@@ -515,7 +515,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \t\t\t\thtab_hash_string (fname), INSERT);\n \n   /* First check the cache before we resort to memory allocation.  */\n-  entry = search_cache ((struct file_hash_entry *) *hash_slot, start_dir);\n+  entry = search_cache ((struct cpp_file_hash_entry *) *hash_slot, start_dir);\n   if (entry)\n     return entry->u.file;\n \n@@ -588,7 +588,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n       else\n \tcontinue;\n \n-      entry = search_cache ((struct file_hash_entry *) *hash_slot, file->dir);\n+      entry = search_cache ((struct cpp_file_hash_entry *) *hash_slot, file->dir);\n       if (entry)\n \t{\n \t  found_in_cache = file->dir;\n@@ -612,7 +612,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n \n   /* Store this new result in the hash table.  */\n   entry = new_file_hash_entry (pfile);\n-  entry->next = (struct file_hash_entry *) *hash_slot;\n+  entry->next = (struct cpp_file_hash_entry *) *hash_slot;\n   entry->start_dir = start_dir;\n   entry->location = pfile->line_table->highest_location;\n   entry->u.file = file;\n@@ -625,7 +625,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n       && found_in_cache != pfile->bracket_include)\n     {\n       entry = new_file_hash_entry (pfile);\n-      entry->next = (struct file_hash_entry *) *hash_slot;\n+      entry->next = (struct cpp_file_hash_entry *) *hash_slot;\n       entry->start_dir = pfile->bracket_include;\n       entry->location = pfile->line_table->highest_location;\n       entry->u.file = file;\n@@ -636,7 +636,7 @@ _cpp_find_file (cpp_reader *pfile, const char *fname, cpp_dir *start_dir,\n       && found_in_cache != pfile->quote_include)\n     {\n       entry = new_file_hash_entry (pfile);\n-      entry->next = (struct file_hash_entry *) *hash_slot;\n+      entry->next = (struct cpp_file_hash_entry *) *hash_slot;\n       entry->start_dir = pfile->quote_include;\n       entry->location = pfile->line_table->highest_location;\n       entry->u.file = file;\n@@ -1058,8 +1058,8 @@ open_file_failed (cpp_reader *pfile, _cpp_file *file, int angle_brackets)\n \n /* Search in the chain beginning at HEAD for a file whose search path\n    started at START_DIR != NULL.  */\n-static struct file_hash_entry *\n-search_cache (struct file_hash_entry *head, const cpp_dir *start_dir)\n+static struct cpp_file_hash_entry *\n+search_cache (struct cpp_file_hash_entry *head, const cpp_dir *start_dir)\n {\n   while (head && head->start_dir != start_dir)\n     head = head->next;\n@@ -1114,10 +1114,10 @@ destroy_all_cpp_files (cpp_reader *pfile)\n static cpp_dir *\n make_cpp_dir (cpp_reader *pfile, const char *dir_name, int sysp)\n {\n-  struct file_hash_entry *entry, **hash_slot;\n+  struct cpp_file_hash_entry *entry, **hash_slot;\n   cpp_dir *dir;\n \n-  hash_slot = (struct file_hash_entry **)\n+  hash_slot = (struct cpp_file_hash_entry **)\n     htab_find_slot_with_hash (pfile->dir_hash, dir_name,\n \t\t\t      htab_hash_string (dir_name),\n \t\t\t      INSERT);\n@@ -1156,7 +1156,7 @@ allocate_file_hash_entries (cpp_reader *pfile)\n }\n \n /* Return a new file hash entry.  */\n-static struct file_hash_entry *\n+static struct cpp_file_hash_entry *\n new_file_hash_entry (cpp_reader *pfile)\n {\n   unsigned int idx;\n@@ -1186,9 +1186,9 @@ free_file_hash_entries (cpp_reader *pfile)\n bool\n cpp_included (cpp_reader *pfile, const char *fname)\n {\n-  struct file_hash_entry *entry;\n+  struct cpp_file_hash_entry *entry;\n \n-  entry = (struct file_hash_entry *)\n+  entry = (struct cpp_file_hash_entry *)\n      htab_find_with_hash (pfile->file_hash, fname, htab_hash_string (fname));\n \n   while (entry && (entry->start_dir == NULL || entry->u.file->err_no))\n@@ -1204,9 +1204,9 @@ bool\n cpp_included_before (cpp_reader *pfile, const char *fname,\n \t\t     source_location location)\n {\n-  struct file_hash_entry *entry;\n+  struct cpp_file_hash_entry *entry;\n \n-  entry = (struct file_hash_entry *)\n+  entry = (struct cpp_file_hash_entry *)\n      htab_find_with_hash (pfile->file_hash, fname, htab_hash_string (fname));\n \n   while (entry && (entry->start_dir == NULL || entry->u.file->err_no\n@@ -1221,7 +1221,7 @@ cpp_included_before (cpp_reader *pfile, const char *fname,\n static hashval_t\n file_hash_hash (const void *p)\n {\n-  struct file_hash_entry *entry = (struct file_hash_entry *) p;\n+  struct cpp_file_hash_entry *entry = (struct cpp_file_hash_entry *) p;\n   const char *hname;\n   if (entry->start_dir)\n     hname = entry->u.file->name;\n@@ -1235,7 +1235,7 @@ file_hash_hash (const void *p)\n static int\n file_hash_eq (const void *p, const void *q)\n {\n-  struct file_hash_entry *entry = (struct file_hash_entry *) p;\n+  struct cpp_file_hash_entry *entry = (struct cpp_file_hash_entry *) p;\n   const char *fname = (const char *) q;\n   const char *hname;\n \n@@ -1339,7 +1339,7 @@ struct report_missing_guard_data\n static int\n report_missing_guard (void **slot, void *d)\n {\n-  struct file_hash_entry *entry = (struct file_hash_entry *) *slot;\n+  struct cpp_file_hash_entry *entry = (struct cpp_file_hash_entry *) *slot;\n   struct report_missing_guard_data *data\n     = (struct report_missing_guard_data *) d;\n "}]}