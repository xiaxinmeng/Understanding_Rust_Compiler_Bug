{"sha": "9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYzODU4OWZhZmY1YjVlYzMzYWZiYTBiNWE0NTYwYTNmMGI1YWFhNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2017-12-02T00:38:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-12-02T00:38:54Z"}, "message": "compiler: avoid GCC middle-end control warnings\n    \n    GCC has started emitting \"control reaches end of non-void function\"\n    warnings. Avoid them for Go by 1) marking the builtin function panic\n    and the compiler-generated function __go_runtime_error as not\n    returning and 2) adding a default case to the switch used for select\n    statements that simply calls __builtin_unreachable.\n    \n    Fixes golang/go#22767\n    \n    Reviewed-on: https://go-review.googlesource.com/80416\n\n\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define\n\t__builtin_unreachable.\n\t(Gcc_backend::function): Add does_not_return parameter.\n\nFrom-SVN: r255346", "tree": {"sha": "8d0aee02a39a2db4df11c4755923b7677cdae58a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d0aee02a39a2db4df11c4755923b7677cdae58a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7d5f241f08bfbe5c888b24b380220851816387e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7d5f241f08bfbe5c888b24b380220851816387e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7d5f241f08bfbe5c888b24b380220851816387e"}], "stats": {"total": 58, "additions": 45, "deletions": 13}, "files": [{"sha": "03100610d71937385570d9463fb5510b94c46e1b", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -1,3 +1,9 @@\n+2017-12-01  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-gcc.cc (Gcc_backend::Gcc_backend): Define\n+\t__builtin_unreachable.\n+\t(Gcc_backend::function): Add does_not_return parameter.\n+\n 2017-12-01  Than McIntosh  <thanm@google.com>\n \n \t* go-c.h (go_create_gogo_args): Add nil_check_size_threshold"}, {"sha": "730e2da24edc02501940ed0f8fb39d2f6ef89b1d", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -486,7 +486,8 @@ class Gcc_backend : public Backend\n   Bfunction*\n   function(Btype* fntype, const std::string& name, const std::string& asm_name,\n            bool is_visible, bool is_declaration, bool is_inlinable,\n-           bool disable_split_stack, bool in_unique_section, Location);\n+           bool disable_split_stack, bool does_not_return,\n+\t   bool in_unique_section, Location);\n \n   Bstatement*\n   function_defer_statement(Bfunction* function, Bexpression* undefer,\n@@ -760,6 +761,12 @@ Gcc_backend::Gcc_backend()\n \t\t\t\t\t\t\tconst_ptr_type_node,\n \t\t\t\t\t\t\tNULL_TREE),\n \t\t       false, false);\n+\n+  // The compiler uses __builtin_unreachable for cases that can not\n+  // occur.\n+  this->define_builtin(BUILT_IN_UNREACHABLE, \"__builtin_unreachable\", NULL,\n+\t\t       build_function_type(void_type_node, void_list_node),\n+\t\t       true, true);\n }\n \n // Get an unnamed integer type.\n@@ -3012,8 +3019,8 @@ Bfunction*\n Gcc_backend::function(Btype* fntype, const std::string& name,\n                       const std::string& asm_name, bool is_visible,\n                       bool is_declaration, bool is_inlinable,\n-                      bool disable_split_stack, bool in_unique_section,\n-                      Location location)\n+                      bool disable_split_stack, bool does_not_return,\n+\t\t      bool in_unique_section, Location location)\n {\n   tree functype = fntype->get_tree();\n   if (functype != error_mark_node)\n@@ -3049,6 +3056,8 @@ Gcc_backend::function(Btype* fntype, const std::string& name,\n       tree attr = get_identifier (\"no_split_stack\");\n       DECL_ATTRIBUTES(decl) = tree_cons(attr, NULL_TREE, NULL_TREE);\n     }\n+  if (does_not_return)\n+    TREE_THIS_VOLATILE(decl) = 1;\n   if (in_unique_section)\n     resolve_unique_section(decl, 0, 1);\n "}, {"sha": "61f941599741828a053446913a30781b501212ef", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -1,4 +1,4 @@\n-8cd42a3e9e0e618bb09e67be73f7d2f2477a0faa\n+1949a203fca0c8bde6f2690ebc36427c5e3953c7\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "601e7c95b3ae4588da6ff00eb008ebf28c419cc7", "filename": "gcc/go/gofrontend/backend.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -711,12 +711,15 @@ class Backend\n   // IS_INLINABLE is true if the function can be inlined.\n   // DISABLE_SPLIT_STACK is true if this function may not split the stack; this\n   // is used for the implementation of recover.\n+  // DOES_NOT_RETURN is true for a function that does not return; this is used\n+  // for the implementation of panic.\n   // IN_UNIQUE_SECTION is true if this function should be put into a unique\n   // location if possible; this is used for field tracking.\n   virtual Bfunction*\n   function(Btype* fntype, const std::string& name, const std::string& asm_name,\n            bool is_visible, bool is_declaration, bool is_inlinable,\n-           bool disable_split_stack, bool in_unique_section, Location) = 0;\n+           bool disable_split_stack, bool does_not_return,\n+\t   bool in_unique_section, Location) = 0;\n \n   // Create a statement that runs all deferred calls for FUNCTION.  This should\n   // be a statement that looks like this in C++:"}, {"sha": "b1c780794c905162e2badc5e60a8c8e07e8a8125", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -711,7 +711,7 @@ Gogo::init_imports(std::vector<Bstatement*>& init_stmts, Bfunction *bfunction)\n \n       Bfunction* pfunc = this->backend()->function(fntype, user_name, init_name,\n                                                    true, true, true, false,\n-                                                   false, unknown_loc);\n+                                                   false, false, unknown_loc);\n       Bexpression* pfunc_code =\n           this->backend()->function_code_expression(pfunc, unknown_loc);\n       Bexpression* pfunc_call =\n@@ -5435,8 +5435,8 @@ Function::get_or_make_decl(Gogo* gogo, Named_object* no)\n       this->fndecl_ =\n           gogo->backend()->function(functype, no->get_id(gogo), asm_name,\n                                     is_visible, false, is_inlinable,\n-                                    disable_split_stack, in_unique_section,\n-\t\t\t\t    this->location());\n+                                    disable_split_stack, false,\n+\t\t\t\t    in_unique_section, this->location());\n     }\n   return this->fndecl_;\n }\n@@ -5448,6 +5448,8 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n {\n   if (this->fndecl_ == NULL)\n     {\n+      bool does_not_return = false;\n+\n       // Let Go code use an asm declaration to pick up a builtin\n       // function.\n       if (!this->asm_name_.empty())\n@@ -5459,6 +5461,10 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n \t      this->fndecl_ = builtin_decl;\n \t      return this->fndecl_;\n \t    }\n+\n+\t  if (this->asm_name_ == \"runtime.gopanic\"\n+\t      || this->asm_name_ == \"__go_runtime_error\")\n+\t    does_not_return = true;\n \t}\n \n       std::string asm_name;\n@@ -5475,8 +5481,8 @@ Function_declaration::get_or_make_decl(Gogo* gogo, Named_object* no)\n       Btype* functype = this->fntype_->get_backend_fntype(gogo);\n       this->fndecl_ =\n           gogo->backend()->function(functype, no->get_id(gogo), asm_name,\n-                                    true, true, true, false, false,\n-                                    this->location());\n+                                    true, true, true, false, does_not_return,\n+\t\t\t\t    false, this->location());\n     }\n \n   return this->fndecl_;"}, {"sha": "ef148eec9b08b90038917f357db715b59728a4c3", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -363,6 +363,9 @@ DEF_GO_RUNTIME(PRINTNL, \"runtime.printnl\", P0(), R0())\n DEF_GO_RUNTIME(FIELDTRACK, \"__go_fieldtrack\", P1(POINTER), R0())\n \n \n+// Unreachable code.\n+DEF_GO_RUNTIME(UNREACHABLE, \"__builtin_unreachable\", P0(), R0())\n+\n // Remove helper macros.\n #undef ABFT6\n #undef ABFT2"}, {"sha": "93718ff8c2af8dbeafd48f126197ea3369871053", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9638589faff5b5ec33afba0b5a4560a3f0b5aaa6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=9638589faff5b5ec33afba0b5a4560a3f0b5aaa6", "patch": "@@ -4866,8 +4866,8 @@ Select_clauses::get_backend(Translate_context* context,\n \t\t\t    Location location)\n {\n   size_t count = this->clauses_.size();\n-  std::vector<std::vector<Bexpression*> > cases(count);\n-  std::vector<Bstatement*> clauses(count);\n+  std::vector<std::vector<Bexpression*> > cases(count + 1);\n+  std::vector<Bstatement*> clauses(count + 1);\n \n   Type* int_type = Type::lookup_integer_type(\"int\");\n \n@@ -4905,10 +4905,15 @@ Select_clauses::get_backend(Translate_context* context,\n       return context->backend()->expression_statement(bfunction, bcall);\n     }\n \n+  Bfunction* bfunction = context->function()->func_value()->get_decl();\n+\n+  Expression* crash = Runtime::make_call(Runtime::UNREACHABLE, location, 0);\n+  Bexpression* bcrash = crash->get_backend(context);\n+  clauses[count] = context->backend()->expression_statement(bfunction, bcrash);\n+\n   std::vector<Bstatement*> statements;\n   statements.reserve(2);\n \n-  Bfunction* bfunction = context->function()->func_value()->get_decl();\n   Bstatement* switch_stmt = context->backend()->switch_statement(bfunction,\n \t\t\t\t\t\t\t\t bcall,\n \t\t\t\t\t\t\t\t cases,"}]}