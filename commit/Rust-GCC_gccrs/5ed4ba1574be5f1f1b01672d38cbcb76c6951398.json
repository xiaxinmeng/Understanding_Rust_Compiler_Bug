{"sha": "5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkNGJhMTU3NGJlNWYxZjFiMDE2NzJkMzhjYmNiNzZjNjk1MTM5OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:23:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:23:06Z"}, "message": "[multiple changes]\n\n2016-06-16  Justin Squirek  <squirek@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Object_Declaration): Add a missing check\n\tfor optimized aggregate arrays with qualified expressions.\n\t* exp_aggr.adb (Expand_Array_Aggregate): Fix block and\n\tconditional statement in charge of deciding whether to perform\n\tin-place expansion. Specifically, use Parent_Node to jump over\n\tthe qualified expression to the object declaration node. Also,\n\ta check has been inserted to skip the optimization if SPARK 2005\n\tis being used in strict adherence to RM 4.3(5).\n\n2016-06-16  Tristan Gingold  <gingold@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma): Simplify code\n\tfor Pragma_Priority.\n\nFrom-SVN: r237514", "tree": {"sha": "0f9afaa75aed3105925ee623852cc97bf9217723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f9afaa75aed3105925ee623852cc97bf9217723"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/comments", "author": null, "committer": null, "parents": [{"sha": "c577adb24fdab2a324a9c60d612c00c8d03a30e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c577adb24fdab2a324a9c60d612c00c8d03a30e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c577adb24fdab2a324a9c60d612c00c8d03a30e4"}], "stats": {"total": 72, "additions": 44, "deletions": 28}, "files": [{"sha": "dc34b75a7e469868c604c13080211cf693a0a3ba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "patch": "@@ -1,3 +1,19 @@\n+2016-06-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Add a missing check\n+\tfor optimized aggregate arrays with qualified expressions.\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Fix block and\n+\tconditional statement in charge of deciding whether to perform\n+\tin-place expansion. Specifically, use Parent_Node to jump over\n+\tthe qualified expression to the object declaration node. Also,\n+\ta check has been inserted to skip the optimization if SPARK 2005\n+\tis being used in strict adherence to RM 4.3(5).\n+\n+2016-06-16  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Simplify code\n+\tfor Pragma_Priority.\n+\n 2016-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_util.ads (Indexed_Component_Bit_Offset): Declare."}, {"sha": "c75cafc778a196bfcb0995ec24849c2ccb2c1470", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "patch": "@@ -5433,8 +5433,8 @@ package body Exp_Aggr is\n \n       --  STEP 3\n \n-      --  Delay expansion for nested aggregates: it will be taken care of\n-      --  when the parent aggregate is expanded.\n+      --  Delay expansion for nested aggregates: it will be taken care of when\n+      --  the parent aggregate is expanded.\n \n       Parent_Node := Parent (N);\n       Parent_Kind := Nkind (Parent_Node);\n@@ -5524,14 +5524,18 @@ package body Exp_Aggr is\n          and then Parent_Kind = N_Object_Declaration\n          and then not\n            Must_Slide (Etype (Defining_Identifier (Parent_Node)), Typ)\n-         and then N = Expression (Parent_Node)\n-         and then not Is_Bit_Packed_Array (Typ)\n+         and then Present (Expression (Parent_Node))\n          and then not Has_Controlled_Component (Typ)\n+         and then not Is_Bit_Packed_Array (Typ)\n+\n+         --  ??? the test for SPARK 05 needs documentation\n+\n+         and then not Restriction_Check_Required (SPARK_05)\n       then\n          In_Place_Assign_OK_For_Declaration := True;\n-         Tmp := Defining_Identifier (Parent (N));\n-         Set_No_Initialization (Parent (N));\n-         Set_Expression (Parent (N), Empty);\n+         Tmp := Defining_Identifier (Parent_Node);\n+         Set_No_Initialization (Parent_Node);\n+         Set_Expression (Parent_Node, Empty);\n \n          --  Set kind and type of the entity, for use in the analysis\n          --  of the subsequent assignments. If the nominal type is not\n@@ -5544,10 +5548,10 @@ package body Exp_Aggr is\n          if not Is_Constrained (Typ) then\n             Build_Constrained_Type (Positional => False);\n \n-         elsif Is_Entity_Name (Object_Definition (Parent (N)))\n-           and then Is_Constrained (Entity (Object_Definition (Parent (N))))\n+         elsif Is_Entity_Name (Object_Definition (Parent_Node))\n+           and then Is_Constrained (Entity (Object_Definition (Parent_Node)))\n          then\n-            Set_Etype (Tmp, Entity (Object_Definition (Parent (N))));\n+            Set_Etype (Tmp, Entity (Object_Definition (Parent_Node)));\n \n          else\n             Set_Size_Known_At_Compile_Time (Typ, False);"}, {"sha": "22b4721d552f4d4c5b50c94c51c854b822ce18ca", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "patch": "@@ -3471,7 +3471,7 @@ package body Sem_Ch3 is\n \n          --  In case of aggregates we must also take care of the correct\n          --  initialization of nested aggregates bug this is done at the\n-         --  point of the analysis of the aggregate (see sem_aggr.adb).\n+         --  point of the analysis of the aggregate (see sem_aggr.adb) ???\n \n          if Present (Expression (N))\n            and then Nkind (Expression (N)) = N_Aggregate\n@@ -4038,7 +4038,10 @@ package body Sem_Ch3 is\n \n       elsif Is_Array_Type (T)\n         and then No_Initialization (N)\n-        and then Nkind (Original_Node (E)) = N_Aggregate\n+        and then (Nkind (Original_Node (E)) = N_Aggregate\n+                   or else (Nkind (Original_Node (E)) = N_Qualified_Expression\n+                             and then Nkind (Original_Node (Expression\n+                                        (Original_Node (E)))) = N_Aggregate))\n       then\n          if not Is_Entity_Name (Object_Definition (N)) then\n             Act_T := Etype (E);"}, {"sha": "86086a7fa6fcb043e476db767dfd2aa801d99fbc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed4ba1574be5f1f1b01672d38cbcb76c6951398/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5ed4ba1574be5f1f1b01672d38cbcb76c6951398", "patch": "@@ -18903,22 +18903,15 @@ package body Sem_Prag is\n                --  where we ignore the value if out of range.\n \n                else\n-                  declare\n-                     Val : constant Uint := Expr_Value (Arg);\n-                  begin\n-                     if not Relaxed_RM_Semantics\n-                       and then\n-                         (Val < 0\n-                           or else Val > Expr_Value (Expression\n-                                           (Parent (RTE (RE_Max_Priority)))))\n-                     then\n-                        Error_Pragma_Arg\n-                          (\"main subprogram priority is out of range\", Arg1);\n-                     else\n-                        Set_Main_Priority\n-                          (Current_Sem_Unit, UI_To_Int (Expr_Value (Arg)));\n-                     end if;\n-                  end;\n+                  if not Relaxed_RM_Semantics\n+                    and then not Is_In_Range (Arg, RTE (RE_Priority))\n+                  then\n+                     Error_Pragma_Arg\n+                       (\"main subprogram priority is out of range\", Arg1);\n+                  else\n+                     Set_Main_Priority\n+                       (Current_Sem_Unit, UI_To_Int (Expr_Value (Arg)));\n+                  end if;\n                end if;\n \n                --  Load an arbitrary entity from System.Tasking.Stages or"}]}