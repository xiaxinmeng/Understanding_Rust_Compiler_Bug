{"sha": "c8b2454e9c112835bc9637fe9667d4a736da5087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiMjQ1NGU5YzExMjgzNWJjOTYzN2ZlOTY2N2Q0YTczNmRhNTA4Nw==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-23T16:45:18Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-23T16:45:18Z"}, "message": "[AArch64] Prologue and epilogue test cases.\n\nFrom-SVN: r212959", "tree": {"sha": "1f7b426ef2b79fcf0e7c3809fc88a068d1a5da7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f7b426ef2b79fcf0e7c3809fc88a068d1a5da7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b2454e9c112835bc9637fe9667d4a736da5087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b2454e9c112835bc9637fe9667d4a736da5087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b2454e9c112835bc9637fe9667d4a736da5087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b2454e9c112835bc9637fe9667d4a736da5087/comments", "author": null, "committer": null, "parents": [{"sha": "159313d9b196502f062bb15192127a26a351f90c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159313d9b196502f062bb15192127a26a351f90c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159313d9b196502f062bb15192127a26a351f90c"}], "stats": {"total": 338, "additions": 338, "deletions": 0}, "files": [{"sha": "c3e9c5c343ca628dfcc09d27a084956ad2418fda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -1,3 +1,22 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/test_frame_common.h: New file.\n+\t* gcc.target/aarch64/test_frame_1.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_2.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_3.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_4.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_5.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_6.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_7.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_8.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_9.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_10.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_11.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_12.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_13.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_14.c: Likewise.\n+\t* gcc.target/aarch64/test_frame_15.c: Likewise.\n+\n 2014-07-23  Marek Polacek  <polacek@redhat.com>\n \n \t* c-c++-common/ubsan/bounds-2.c (fn4): Adjust to check the array size"}, {"sha": "feea7a2f275d35ea613a20bdfe2f8bb01fc6e18a", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_1.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,14 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * withoug outgoing.\n+     * total frame size <= 256.\n+     * number of callee-save reg == 1.\n+     * optimized code should use \"str !\" for stack adjustment.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test1, 200, )\n+t_frame_run (test1)"}, {"sha": "2892c5fbc2e34fe200bf945c8d3f4fd24015c9b9", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_10.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_10.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,16 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * with outgoing.\n+     * total frame size > 512.\n+       area except outgoing <= 512\n+     * number of callee-saved reg >= 2.\n+     * Split stack adjustment into two subtractions.\n+       the first subtractions could be optimized into \"stp !\".  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test10, 480, \"x19\", 24, a[8], a[9], a[10])\n+t_frame_run (test10)"}, {"sha": "8b860dd31efc8dca1eb8043ab05143afe854384d", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_11.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_11.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,16 @@\n+/* Verify:\n+     * without outgoing.\n+     * total frame size <= 512.\n+     * number of callee-save reg >= 2.\n+     * optimized code should use \"stp !\" for stack adjustment.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test11, 400, )\n+t_frame_run (test11)\n+\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "36495277dde99bf49f72fa4dc55d56b6cdf18c69", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_12.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_12.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,15 @@\n+/* Verify:\n+     * with outgoing.\n+     * total frame size <= 512.\n+     * number of callee-save reg >= 2.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test12, 400, , 8, a[8])\n+t_frame_run (test12)\n+\n+/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "25df08b47d5f1c2672a5db93e5677a4ca3ba5b14", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_13.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,18 @@\n+/* Verify:\n+     * without outgoing.\n+     * total frame size > 512.\n+     * number of callee-save reg >= 2.\n+     * split the stack adjustment into two substractions,\n+       the second could be optimized into \"stp !\".  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test13, 700, )\n+t_frame_run (test13)\n+\n+/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "78818dec32af95c43b610cab1832ea29041c3b36", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_14.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_14.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,12 @@\n+/* Verify:\n+     * with outgoing.\n+     * total frame size > 512.\n+     * number of callee-save reg >= 2.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test14, 700, , 8, a[8])\n+t_frame_run (test14)"}, {"sha": "7ab1f20578513eb566d2c6fa2ddf7e6787792fd4", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_15.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_15.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,19 @@\n+/* Verify:\n+     * with outgoing.\n+     * total frame size > 512.\n+       area except outgoing <= 512\n+     * number of callee-save reg >= 2.\n+     * split the stack adjustment into two substractions,\n+       the first could be optimized into \"stp !\".  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 --save-temps\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test15, 480, , 8, a[8])\n+t_frame_run (test15)\n+\n+/* { dg-final { scan-assembler-times \"sub\\tsp, sp, #\\[0-9\\]+\" 1 } } */\n+/* { dg-final { scan-assembler-times \"stp\\tx29, x30, \\\\\\[sp, -\\[0-9\\]+\\\\\\]!\" 3 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "aa15dae8a5225cc7b326ddd2a564e4c9fb3fd49b", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_2.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,14 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * without outgoing.\n+     * total frame size <= 256.\n+     * number of callee-save regs >= 2.\n+     * optimized code should use \"stp !\" for stack adjustment.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test2, 200, \"x19\")\n+t_frame_run (test2)"}, {"sha": "f90ea4a1ae880c69d88cf8b38558312510e66c63", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_3.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,14 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * without outgoing.\n+     * total frame size <= 512 but > 256.\n+     * number of callee-save reg == 1.\n+     * we can't use \"str !\" to optimize stack adjustment.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test3, 400, )\n+t_frame_run (test3)"}, {"sha": "c45e7402cbe92c4fb0462371f400cc4790f6acfa", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_4.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,14 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * without outgoing.\n+     * total frame size <= 512 but > 256.\n+     * number of callee-save reg >= 2.\n+     * we can use \"stp !\" to optimize stack adjustment.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test4, 400, \"x19\")\n+t_frame_run (test4)"}, {"sha": "0624b5b747339b851daff5d265701c241e5c1231", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_5.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,13 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * with outgoing.\n+     * total frame size <= 512.\n+     * one subtraction of the whole frame size.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test5, 300, \"x19\", 8, a[8])\n+t_frame_run (test5)"}, {"sha": "54f646b3a7a7c239840c9d97b04381e0037a88fa", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_6.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_6.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,15 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * without outgoing.\n+     * total frame size > 512.\n+     * number of callee-saved reg == 1.\n+     * split stack adjustment into two subtractions.\n+       the second subtraction should use \"str !\".  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test6, 700, )\n+t_frame_run (test6)"}, {"sha": "aa97bc0bf57d750cc1f89f6a6f11b8bdc2416252", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_7.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_7.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,15 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * without outgoing.\n+     * total frame size > 512.\n+     * number of callee-saved reg == 2.\n+     * split stack adjustment into two subtractions.\n+       the second subtraction should use \"stp !\".  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern (test7, 700, \"x19\")\n+t_frame_run (test7)"}, {"sha": "f75f08021cfeaf143894c52c2a83257b11783e26", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_8.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,13 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * with outgoing.\n+     * total frame size bigger than 512.\n+     * number of callee-saved reg == 1.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test8, 700, , 8, a[8])\n+t_frame_run (test8)"}, {"sha": "0dffbf8ad1706d224b933a9a849f3136797e97a3", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_9.c?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,17 @@\n+/* Verify:\n+     * -fomit-frame-pointer.\n+     * with outgoing.\n+     * total frame size > 512.\n+       area except outgoing <= 512\n+     * number of callee-saved reg = 1.\n+     * Split stack adjustment into two subtractions.\n+       the first subtractions couldn't be optimized\n+       into \"str !\" as it's > 256.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+#include \"test_frame_common.h\"\n+\n+t_frame_pattern_outgoing (test9, 480, , 24, a[8], a[9], a[10])\n+t_frame_run (test9)"}, {"sha": "d7fed250ca8f5ceda85cb7e04af344e56c121b4a", "filename": "gcc/testsuite/gcc.target/aarch64/test_frame_common.h", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b2454e9c112835bc9637fe9667d4a736da5087/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftest_frame_common.h?ref=c8b2454e9c112835bc9637fe9667d4a736da5087", "patch": "@@ -0,0 +1,94 @@\n+extern void abort ();\n+\n+#define CVT(v) ((unsigned char)(v))\n+\n+static void __attribute__((noinline))\n+check_args_8 (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7,\n+\t      int a8)\n+{\n+  if (a0 != 0\n+      || a1 != 1\n+      || a2 != 2\n+      || a3 != 3\n+      || a4 != 4\n+      || a5 != 5\n+      || a6 != 6\n+      || a7 != 7\n+      || a8 != 8)\n+    abort ();\n+}\n+\n+static void __attribute__((noinline))\n+check_args_24 (int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7,\n+\t       int a8, int a9, int a10)\n+{\n+  if (a0 != 0\n+      || a1 != 1\n+      || a2 != 2\n+      || a3 != 3\n+      || a4 != 4\n+      || a5 != 5\n+      || a6 != 6\n+      || a7 != 7\n+      || a8 != 8\n+      || a9 != 9\n+      || a10 != 10)\n+    abort ();\n+}\n+\n+void __attribute__ ((noinline))\n+initialize_array (unsigned char *a, int len)\n+{\n+  int i;\n+\n+  for (i = 0; i < (len / 2); i++)\n+    {\n+      a[i] = i;\n+      a[len - i - 1] = i;\n+    }\n+\n+  return;\n+}\n+\n+#define t_frame_pattern(name, local_size, callee_saved)\\\n+int \\\n+name (void)\\\n+{\\\n+  unsigned char a[local_size];\\\n+  initialize_array (a, local_size); \\\n+  __asm__ (\"\":::callee_saved); \\\n+  if (a[0] != a[local_size - 1] \\\n+      || a[0] != 0) \\\n+    return 0; \\\n+  if (a[local_size / 2 - 1] != a[local_size / 2] \\\n+      || a[local_size / 2 - 1] != CVT (local_size / 2 - 1)) \\\n+    return 0; \\\n+  return 1; \\\n+}\n+\n+#define t_frame_pattern_outgoing(name, local_size, callee_saved, out_going_num, ...)\\\n+int \\\n+name (void)\\\n+{\\\n+  unsigned char a[local_size];\\\n+  initialize_array (a, local_size); \\\n+  __asm__ (\"\":::callee_saved); \\\n+  if (a[0] != a[local_size - 1] \\\n+      || a[0] != 0) \\\n+    return 0; \\\n+  if (a[local_size / 2 - 1] != a[local_size / 2] \\\n+      || a[local_size / 2 - 1] != CVT (local_size / 2 - 1)) \\\n+    return 0; \\\n+  check_args_ ## out_going_num (a[0], a[1], a[2], a[3], a[4], a[5], a[6],\\\n+\t\t\t\ta[7], __VA_ARGS__); \\\n+  return 1; \\\n+}\n+\n+#define t_frame_run(name) \\\n+int \\\n+main (int argc, char **argv) \\\n+{\\\n+  if (!name ())\\\n+    abort ();\\\n+  return 0;\\\n+}"}]}