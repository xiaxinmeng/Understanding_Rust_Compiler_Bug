{"sha": "328477f6ee82d27fa6bb09617644d409be300688", "node_id": "C_kwDOANBUbNoAKDMyODQ3N2Y2ZWU4MmQyN2ZhNmJiMDk2MTc2NDRkNDA5YmUzMDA2ODg", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-16T23:27:52Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2023-03-17T04:50:17Z"}, "message": "d: Merge upstream dmd, druntime 5f7552bb28, phobos 67a47cf39.\n\nD front-end changes:\n\n\t- Import dmd v2.103.0-rc.1.\n\nD runtime changes:\n\n\t- Import druntime v2.103.0-rc.1.\n\nPhobos changes:\n\n\t- Import phobos v2.103.0-rc.1.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 5f7552bb28.\n\t* dmd/VERSION: Bump version to v2.103.0-rc.1.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 5f7552bb28.\n\t* src/MERGE: Merge upstream phobos 67a47cf39.", "tree": {"sha": "bf7535cd852137abe6fae271f9de566fde26e284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf7535cd852137abe6fae271f9de566fde26e284"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/328477f6ee82d27fa6bb09617644d409be300688", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328477f6ee82d27fa6bb09617644d409be300688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/328477f6ee82d27fa6bb09617644d409be300688", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/328477f6ee82d27fa6bb09617644d409be300688/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ffbc74c8c202a16a5e987134f03c2359c531f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffbc74c8c202a16a5e987134f03c2359c531f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffbc74c8c202a16a5e987134f03c2359c531f0e"}], "stats": {"total": 346, "additions": 295, "deletions": 51}, "files": [{"sha": "986925e8bdc5f07454d8c8ad81861e1212d54fca", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1,4 +1,4 @@\n-4ca4140e584c055a8a9bc727e56a97ebcecd61e0\n+5f7552bb2829b75d5e36cc767a476e1ab35147b7\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "da496a2ceeb77daecf0af7295d0090b8a6121a96", "filename": "gcc/d/dmd/VERSION", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2FVERSION", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2FVERSION", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FVERSION?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1 +1 @@\n-v2.103.0-beta.1\n+v2.103.0-rc.1"}, {"sha": "e6ef704be8688e7d65e015af73431bfc7d92c42c", "filename": "gcc/d/dmd/dinterpret.d", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Fdinterpret.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Fdinterpret.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -2036,7 +2036,7 @@ public:\n         }\n         auto er = interpret(e.e1, istate, CTFEGoal.LValue);\n         if (auto ve = er.isVarExp())\n-            if (ve.var == istate.fd.vthis)\n+            if (istate && ve.var == istate.fd.vthis)\n                 er = interpret(er, istate);\n \n         if (exceptionOrCant(er))\n@@ -2117,6 +2117,16 @@ public:\n                     return CTFEExp.cantexp;\n                 assert(e.type);\n \n+                // There's a terrible hack in `dmd.dsymbolsem` that special case\n+                // a struct with all zeros to an `ExpInitializer(BlitExp(IntegerExp(0)))`\n+                // There's matching code for it in e2ir (toElem's visitAssignExp),\n+                // so we need the same hack here.\n+                // This does not trigger for global as they get a normal initializer.\n+                if (auto ts = e.type.isTypeStruct())\n+                    if (auto ae = e.isBlitExp())\n+                        if (ae.e2.op == EXP.int64)\n+                            e = ts.defaultInitLiteral(loc);\n+\n                 if (e.op == EXP.construct || e.op == EXP.blit)\n                 {\n                     AssignExp ae = cast(AssignExp)e;"}, {"sha": "e7ce93ee067cc3fd351d120282ae43cfb20ee27a", "filename": "gcc/d/dmd/dsymbol.d", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Fdsymbol.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Fdsymbol.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbol.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -2162,10 +2162,23 @@ extern (C++) final class ArrayScopeSymbol : ScopeDsymbol\n                  * or a variable (in which case an expression is created in\n                  * toir.c).\n                  */\n-                auto e = new VoidInitializer(Loc.initial);\n-                e.type = Type.tsize_t;\n-                v = new VarDeclaration(loc, Type.tsize_t, Id.dollar, e);\n-                v.storage_class |= STC.temp | STC.ctfe; // it's never a true static variable\n+\n+                // https://issues.dlang.org/show_bug.cgi?id=16213\n+                // For static arrays $ is known at compile time,\n+                // so declare it as a manifest constant.\n+                auto tsa = ce.type ? ce.type.isTypeSArray() : null;\n+                if (tsa)\n+                {\n+                    auto e = new ExpInitializer(loc, tsa.dim);\n+                    v = new VarDeclaration(loc, tsa.dim.type, Id.dollar, e, STC.manifest);\n+                }\n+                else\n+                {\n+                    auto e = new VoidInitializer(Loc.initial);\n+                    e.type = Type.tsize_t;\n+                    v = new VarDeclaration(loc, Type.tsize_t, Id.dollar, e);\n+                    v.storage_class |= STC.temp | STC.ctfe; // it's never a true static variable\n+                }\n             }\n             *pvar = v;\n         }"}, {"sha": "632ea11cdc0686b0d2e3bdb50be24ef90ab0da58", "filename": "gcc/d/dmd/expressionsem.d", "status": "modified", "additions": 98, "deletions": 4, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1155,6 +1155,69 @@ L1:\n     return e1;\n }\n \n+/*\n+ * Check whether `outerFunc` and `calledFunc` have the same `this`.\n+ * If `calledFunc` is the member of a base class of the class that contains\n+ * `outerFunc` we consider that they have the same this.\n+ *\n+ * This function is used to test whether `this` needs to be prepended to\n+ * a function call or function symbol. For example:\n+ *\n+ * struct X\n+ * {\n+ *    void gun() {}\n+ * }\n+ * struct A\n+ * {\n+ *      void fun() {}\n+ *      void sun()\n+ *      {\n+ *          fun();\n+ *          X.gun();  // error\n+ *      }\n+ * }\n+ *\n+ * When `fun` is called, `outerfunc` = `sun` and `calledFunc = `fun`.\n+ * `sun` is a member of `A` and `fun` is also a member of `A`, therefore\n+ * `this` can be prepended to `fun`. When `gun` is called (it will result\n+ * in an error, but that is not relevant here), which is a member of `X`,\n+ * no `this` is needed because the outer function does not have the same\n+ * `this` as `gun`.\n+ *\n+ * Returns:\n+ *  `true` if outerFunc and calledFunc may use the same `this` pointer.\n+ * `false` otherwise.\n+ */\n+private bool haveSameThis(FuncDeclaration outerFunc, FuncDeclaration calledFunc)\n+{\n+    auto thisAd = outerFunc.isMemberLocal();\n+    if (!thisAd)\n+        return false;\n+\n+    auto requiredAd = calledFunc.isMemberLocal();\n+    if (!requiredAd)\n+        return false;\n+\n+    if (thisAd == requiredAd)\n+        return true;\n+\n+    // outerfunc is the member of a base class that contains calledFunc,\n+    // then we consider that they have the same this.\n+    auto cd = requiredAd.isClassDeclaration();\n+    if (!cd)\n+        return false;\n+\n+    if (cd.isBaseOf2(thisAd.isClassDeclaration()))\n+        return true;\n+\n+    // if outerfunc is the member of a nested aggregate, then let\n+    // getRightThis take care of this.\n+    if (thisAd.isNested())\n+        return true;\n+\n+    return false;\n+}\n+\n /***************************************\n  * Pull out any properties.\n  */\n@@ -5209,7 +5272,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 if (exp.f.checkNestedReference(sc, exp.loc))\n                     return setError();\n \n-                if (hasThis(sc))\n+                auto memberFunc = hasThis(sc);\n+                if (memberFunc && haveSameThis(memberFunc, exp.f))\n                 {\n                     // Supply an implicit 'this', as in\n                     //    this.ident\n@@ -6892,8 +6956,6 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n         AggregateDeclaration ad = f.isMemberLocal();\n         if (f.needThis())\n             e.e1 = getRightThis(e.loc, sc, ad, e.e1, f);\n-        if (e.e1.op == EXP.error)\n-            return setError();\n \n         if (f.type.ty == Tfunction)\n         {\n@@ -7207,7 +7269,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 }\n                 if (f.needThis())\n                 {\n-                    if (hasThis(sc))\n+                    auto memberFunc = hasThis(sc);\n+                    if (memberFunc && haveSameThis(memberFunc, f))\n                     {\n                         /* Should probably supply 'this' after overload resolution,\n                          * not before.\n@@ -7309,6 +7372,14 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             goto case Terror;\n         }\n \n+        if (sc.flags & SCOPE.Cfile && exp.type && exp.type.toBasetype().ty == Tvoid)\n+        {\n+            // https://issues.dlang.org/show_bug.cgi?id=23752\n+            // `&*((void*)(0))` is allowed in C\n+            result = exp;\n+            return;\n+        }\n+\n         if (exp.checkValue())\n             return setError();\n \n@@ -12311,6 +12382,29 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n \n         Type t1 = exp.e1.type;\n         Type t2 = exp.e2.type;\n+\n+        // https://issues.dlang.org/show_bug.cgi?id=23767\n+        // `cast(void*) 0` should be treated as `null` so the ternary expression\n+        // gets the pointer type of the other branch\n+        if (sc.flags & SCOPE.Cfile)\n+        {\n+            static void rewriteCNull(ref Expression e, ref Type t)\n+            {\n+                if (!t.isTypePointer())\n+                    return;\n+                if (auto ie = e.optimize(WANTvalue).isIntegerExp())\n+                {\n+                    if (ie.getInteger() == 0)\n+                    {\n+                        e = new NullExp(e.loc, Type.tnull);\n+                        t = Type.tnull;\n+                    }\n+                }\n+            }\n+            rewriteCNull(exp.e1, t1);\n+            rewriteCNull(exp.e2, t2);\n+        }\n+\n         if (t1.ty == Tnoreturn)\n         {\n             exp.type = t2;"}, {"sha": "c668199e5f73a53a05625126e077fa8301fa4a85", "filename": "gcc/d/dmd/typesem.d", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Ftypesem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Ftypesem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypesem.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -4176,6 +4176,7 @@ Expression dotExp(Type mt, Scope* sc, Expression e, Identifier ident, int flag)\n             }\n             if (v.type.ty == Terror)\n             {\n+                e.error(\"type of variable `%s` has errors\", v.toPrettyChars);\n                 return ErrorExp.get();\n             }\n "}, {"sha": "38a39b4610871018c4154cfa4503c248c39c96e3", "filename": "gcc/d/dmd/typinf.d", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Ftypinf.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Fd%2Fdmd%2Ftypinf.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftypinf.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -34,8 +34,9 @@ import core.stdc.stdio;\n  *      loc   = the location for reporting line numbers in errors\n  *      torig = the type to generate the `TypeInfo` object for\n  *      sc    = the scope\n+ *      genObjCode = if true, object code will be generated for the obtained TypeInfo\n  */\n-extern (C++) void genTypeInfo(Expression e, const ref Loc loc, Type torig, Scope* sc)\n+extern (C++) void genTypeInfo(Expression e, const ref Loc loc, Type torig, Scope* sc, bool genObjCode = true)\n {\n     // printf(\"genTypeInfo() %s\\n\", torig.toChars());\n \n@@ -80,7 +81,7 @@ extern (C++) void genTypeInfo(Expression e, const ref Loc loc, Type torig, Scope\n \n         // generate a COMDAT for other TypeInfos not available as builtins in\n         // druntime\n-        if (!isUnqualifiedClassInfo && !builtinTypeInfo(t))\n+        if (!isUnqualifiedClassInfo && !builtinTypeInfo(t) && genObjCode)\n         {\n             if (sc) // if in semantic() pass\n             {"}, {"sha": "ccf77c6c948ef8c55da5b955510548baed02cf17", "filename": "gcc/testsuite/gdc.test/compilable/test16213.d", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16213.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16213.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest16213.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -0,0 +1,8 @@\n+// https://issues.dlang.org/show_bug.cgi?id=16213\n+\n+enum Id(size_t i) = i;\n+void main()\n+{\n+    int[5] y;\n+    y[ Id!($) - 1 ] = 3;\n+}"}, {"sha": "a04ade12476cafaf196d4779a0b3937acdfafe1a", "filename": "gcc/testsuite/gdc.test/compilable/test17351.d", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17351.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17351.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17351.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1,3 +1,4 @@\n+// PERMUTE_ARGS: -preview=in\n bool fun(S)(ref S[3] a) { assert(a == [42, 84, 169]); return true; }\n bool fun2(S)(ref S a) { return true; }\n void main()\n@@ -14,4 +15,12 @@ void test2()\n {\n     static immutable int[2] P = [ 0, 1 ];\n     static assert(f2(P) == 1);\n+    immutable BigInt a, b;\n+    static assert(glob1.twice == b.twice);\n+    static assert(a.twice == b.twice);\n }\n+\n+struct BigInt { int[64] big; }\n+BigInt twice (in BigInt v) @safe pure nothrow @nogc { return v; }\n+\n+immutable BigInt glob1 = BigInt.init;"}, {"sha": "a32a317c08ec8dbf64fab0f4acc2a113818f01ad", "filename": "gcc/testsuite/gdc.test/compilable/test19295.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19295.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19295.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest19295.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -0,0 +1,10 @@\n+struct S1(T...) {\n+    auto fun() {\n+        static assert(__traits(compiles, &T[0]));\n+    }\n+}\n+\n+struct S2 {\n+    void gun() {}\n+    S1!gun overloaded;\n+}"}, {"sha": "3adc062823654fc56cde8045bec09f173b520cf4", "filename": "gcc/testsuite/gdc.test/compilable/testcorrectthis.d", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestcorrectthis.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestcorrectthis.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestcorrectthis.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -0,0 +1,37 @@\n+// https://issues.dlang.org/show_bug.cgi?id=10886\n+\n+struct A\n+{\n+    @property int foo() { return 0; }\n+    int bar() { return 0; }\n+}\n+\n+struct B\n+{\n+    void bar()\n+    {\n+        alias f = typeof(A.foo);  // NG\n+        alias b = typeof(A.bar);  // ok\n+    }\n+}\n+\n+// https://issues.dlang.org/show_bug.cgi?id=21288\n+\n+struct XA\n+{\n+    int p;\n+}\n+\n+struct XB\n+{\n+    XA a() { return XA.init; }\n+    alias a this;\n+}\n+\n+struct XC\n+{\n+    void foo()\n+    {\n+        static assert(XB.p.stringof == \"p\"); // Error: this for s needs to be type B not type C\n+    }\n+}"}, {"sha": "fbca6ecd7975c19670048b522268a0f297ca4655", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail23760.d", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23760.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23760.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail23760.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -0,0 +1,27 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23760\n+\n+/*\n+TEST_OUTPUT:\n+---\n+fail_compilation/fail23760.d(16): Error: type of variable `fail23760.A.state` has errors\n+fail_compilation/fail23760.d(16): Error: `(A).state` cannot be resolved\n+fail_compilation/fail23760.d(21): Error: template instance `fail23760.JavaBridge!(A)` error instantiating\n+fail_compilation/fail23760.d(24):        instantiated from here: `JavaClass!(A)`\n+---\n+*/\n+\n+class JavaBridge(Class)\n+{\n+    static if(is(typeof(__traits(getMember, Class, \"state\")))) {}\n+    alias T = __traits(getOverloads, Class, \"state\");\n+}\n+\n+class JavaClass(CRTP)\n+{\n+    JavaBridge!(CRTP) _javaDBridge;\n+}\n+\n+class A : JavaClass!A\n+{\n+    State* state;\n+}"}, {"sha": "1386bd664a3555aec8b7919b847707c446fe376d", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail61.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail61.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail61.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail61.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -4,7 +4,7 @@ TEST_OUTPUT:\n fail_compilation/fail61.d(22): Error: no property `B` for type `fail61.A.B`\n fail_compilation/fail61.d(23): Error: no property `B` for type `fail61.A.B`\n fail_compilation/fail61.d(32): Error: no property `A2` for type `fail61.B2`\n-fail_compilation/fail61.d(41): Error: `this` for `foo` needs to be type `B3` not type `fail61.C3`\n+fail_compilation/fail61.d(41): Error: need `this` for `foo` of type `void()`\n ---\n */\n "}, {"sha": "e67fabce91d5f53e975206212b1604ae4f4b361d", "filename": "gcc/testsuite/gdc.test/fail_compilation/fail_circular.d", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_circular.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_circular.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Ffail_circular.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -110,12 +110,15 @@ struct S6\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/fail_circular.d(123): Error: circular reference to variable `fail_circular.C.a1`\n-fail_compilation/fail_circular.d(125): Error: circular reference to variable `fail_circular.C.b1`\n-fail_compilation/fail_circular.d(127): Error: circular reference to variable `fail_circular.C.c1`\n-fail_compilation/fail_circular.d(130): Error: circular reference to variable `fail_circular.C.a1a`\n-fail_compilation/fail_circular.d(133): Error: circular reference to variable `fail_circular.C.b1a`\n-fail_compilation/fail_circular.d(136): Error: circular reference to variable `fail_circular.C.c1a`\n+fail_compilation/fail_circular.d(126): Error: circular reference to variable `fail_circular.C.a1`\n+fail_compilation/fail_circular.d(128): Error: circular reference to variable `fail_circular.C.b1`\n+fail_compilation/fail_circular.d(130): Error: circular reference to variable `fail_circular.C.c1`\n+fail_compilation/fail_circular.d(133): Error: circular reference to variable `fail_circular.C.a1a`\n+fail_compilation/fail_circular.d(132): Error: type of variable `fail_circular.C.a1b` has errors\n+fail_compilation/fail_circular.d(136): Error: circular reference to variable `fail_circular.C.b1a`\n+fail_compilation/fail_circular.d(135): Error: type of variable `fail_circular.C.b1b` has errors\n+fail_compilation/fail_circular.d(139): Error: circular reference to variable `fail_circular.C.c1a`\n+fail_compilation/fail_circular.d(138): Error: type of variable `fail_circular.C.c1b` has errors\n ---\n */\n class C"}, {"sha": "a92f5f8384c5e8be46cb40e7c1604276cdbad2a4", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice19295.d", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffbc74c8c202a16a5e987134f03c2359c531f0e/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice19295.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffbc74c8c202a16a5e987134f03c2359c531f0e/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice19295.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice19295.d?ref=7ffbc74c8c202a16a5e987134f03c2359c531f0e", "patch": "@@ -1,18 +0,0 @@\n-/*\n-TEST_OUTPUT:\n----\n-fail_compilation/ice19295.d(11): Error: `this` for `gun` needs to be type `S2` not type `S1!(gun)`\n-fail_compilation/ice19295.d(11):        while evaluating `pragma(msg, &gun)`\n-fail_compilation/ice19295.d(17): Error: template instance `ice19295.S1!(gun)` error instantiating\n----\n-*/\n-struct S1(T...) {\n-    auto fun() {\n-        pragma(msg, &T[0]);\n-    }\n-}\n-\n-struct S2 {\n-    void gun() {}\n-    S1!gun overloaded;\n-}"}, {"sha": "7adc11607db3f56ab961e415acedda9d252a9387", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice23781.d", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23781.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23781.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice23781.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -0,0 +1,10 @@\n+/**\n+TEST_OUTPUT:\n+---\n+fail_compilation/ice23781.d(10): Error: variable `b` cannot be read at compile time\n+---\n+**/\n+struct Bar { int i; }\n+ref const(Bar) func1 (const return ref Bar b) { return b; }\n+immutable E1 = Bar();\n+enum E2 = &E1.func1();"}, {"sha": "5b2a8b12031f15415a9f118c509c2aa90db3999a", "filename": "gcc/testsuite/gdc.test/fail_compilation/ice9439.d", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice9439.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice9439.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Ffail_compilation%2Fice9439.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1,8 +1,8 @@\n /*\n TEST_OUTPUT:\n ---\n-fail_compilation/ice9439.d(12): Error: `this` for `foo` needs to be type `Derived` not type `ice9439.Base`\n-fail_compilation/ice9439.d(12):        while evaluating: `static assert((__error).foo())`\n+fail_compilation/ice9439.d(12): Error: need `this` for `foo` of type `int()`\n+fail_compilation/ice9439.d(12):        while evaluating: `static assert(foo())`\n fail_compilation/ice9439.d(19): Error: template instance `ice9439.Base.boo!(foo)` error instantiating\n ---\n */"}, {"sha": "986925e8bdc5f07454d8c8ad81861e1212d54fca", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1,4 +1,4 @@\n-4ca4140e584c055a8a9bc727e56a97ebcecd61e0\n+5f7552bb2829b75d5e36cc767a476e1ab35147b7\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "e72db81b71098c97d736f33931e5ad09b56b0025", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -1,4 +1,4 @@\n-454dff14dcbd005f9550302c5836ef8e06ab663a\n+67a47cf39d52b3cb3ae4117c0237415e03737f8a\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "8290479248d233e0a3e2000c67f73f00067eed87", "filename": "libphobos/src/std/math/exponential.d", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Fsrc%2Fstd%2Fmath%2Fexponential.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Fsrc%2Fstd%2Fmath%2Fexponential.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fmath%2Fexponential.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -3033,13 +3033,13 @@ private\n                 4.5270000862445199635215E-5,\n             ];\n             static immutable double[7] logp1Q = [\n-                1.0000000000000000000000E0,\n                 6.0118660497603843919306E1,\n                 2.1642788614495947685003E2,\n                 3.0909872225312059774938E2,\n                 2.2176239823732856465394E2,\n                 8.3047565967967209469434E1,\n                 1.5062909083469192043167E1,\n+                1.0000000000000000000000E0,\n             ];\n \n             static immutable double[7] log10P = [\n@@ -3101,13 +3101,13 @@ private\n                  4.5270000862E-5,\n             ];\n             static immutable float[7] logp1Q = [\n-                1.00000000000E0,\n                 6.01186604976E1,\n                 2.16427886144E2,\n                 3.09098722253E2,\n                 2.21762398237E2,\n                 8.30475659679E1,\n                 1.50629090834E1,\n+                1.00000000000E0,\n             ];\n \n             // log2 and log10 uses the same coefficients as log.\n@@ -3323,7 +3323,7 @@ private T logImpl(T, bool LOG1P = false)(T x) @safe pure nothrow @nogc\n     }\n     static foreach (F; AliasSeq!(float, double, real))\n     {{\n-        F[2][24] vals = [\n+        scope F[2][] vals = [\n             [F(1), F(0x0p+0)], [F(2), F(0x1.62e42fefa39ef358p-1)],\n             [F(4), F(0x1.62e42fefa39ef358p+0)], [F(8), F(0x1.0a2b23f3bab73682p+1)],\n             [F(16), F(0x1.62e42fefa39ef358p+1)], [F(32), F(0x1.bb9d3beb8c86b02ep+1)],\n@@ -3335,6 +3335,9 @@ private T logImpl(T, bool LOG1P = false)(T x) @safe pure nothrow @nogc\n             [F(17), F(0x1.6aa6bc1fa7f79cfp+1)], [F(31), F(0x1.b78ce48912b59f12p+1)],\n             [F(33), F(0x1.bf8d8f4d5b8d1038p+1)], [F(63), F(0x1.09291e8e3181b20ep+2)],\n             [F(65), F(0x1.0b292939429755ap+2)], [F(-0), -F.infinity], [F(0), -F.infinity],\n+            [F(0.1), F(-0x1.26bb1bbb5551582ep+1)], [F(0.25), F(-0x1.62e42fefa39ef358p+0)],\n+            [F(0.75), F(-0x1.269621134db92784p-2)], [F(0.875), F(-0x1.1178e8227e47bde4p-3)],\n+            [F(10), F(0x1.26bb1bbb5551582ep+1)], [F(100), F(0x1.26bb1bbb5551582ep+2)],\n             [F(10000), F(0x1.26bb1bbb5551582ep+3)],\n         ];\n         testLog(vals);\n@@ -3572,7 +3575,7 @@ Ldone:\n     }\n     static foreach (F; AliasSeq!(float, double, real))\n     {{\n-        F[2][24] vals = [\n+        scope F[2][] vals = [\n             [F(1), F(0x0p+0)], [F(2), F(0x1.34413509f79fef32p-2)],\n             [F(4), F(0x1.34413509f79fef32p-1)], [F(8), F(0x1.ce61cf8ef36fe6cap-1)],\n             [F(16), F(0x1.34413509f79fef32p+0)], [F(32), F(0x1.8151824c7587eafep+0)],\n@@ -3584,7 +3587,9 @@ Ldone:\n             [F(17), F(0x1.3afeb354b7d9731ap+0)], [F(31), F(0x1.7dc9e145867e62eap+0)],\n             [F(33), F(0x1.84bd545e4baeddp+0)], [F(63), F(0x1.cca1950e4511e192p+0)],\n             [F(65), F(0x1.d01b16f9433cf7b8p+0)], [F(-0), -F.infinity], [F(0), -F.infinity],\n-            [F(10000), F(0x1p+2)],\n+            [F(0.1), F(-0x1p+0)], [F(0.25), F(-0x1.34413509f79fef32p-1)],\n+            [F(0.75), F(-0x1.ffbfc2bbc7803758p-4)], [F(0.875), F(-0x1.db11ed766abf432ep-5)],\n+            [F(10), F(0x1p+0)], [F(100), F(0x1p+1)], [F(10000), F(0x1p+2)],\n         ];\n         testLog10(vals);\n     }}\n@@ -3758,7 +3763,7 @@ private T log1pImpl(T)(T x) @safe pure nothrow @nogc\n     }\n     static foreach (F; AliasSeq!(float, double, real))\n     {{\n-        F[2][24] vals = [\n+        scope F[2][] vals = [\n             [F(1), F(0x1.62e42fefa39ef358p-1)], [F(2), F(0x1.193ea7aad030a976p+0)],\n             [F(4), F(0x1.9c041f7ed8d336bp+0)], [F(8), F(0x1.193ea7aad030a976p+1)],\n             [F(16), F(0x1.6aa6bc1fa7f79cfp+1)], [F(32), F(0x1.bf8d8f4d5b8d1038p+1)],\n@@ -3770,6 +3775,9 @@ private T log1pImpl(T)(T x) @safe pure nothrow @nogc\n             [F(17), F(0x1.71f7b3a6b918664cp+1)], [F(31), F(0x1.bb9d3beb8c86b02ep+1)],\n             [F(33), F(0x1.c35fc81b90df59c6p+1)], [F(63), F(0x1.0a2b23f3bab73682p+2)],\n             [F(65), F(0x1.0c234da4a23a6686p+2)], [F(-0), F(-0x0p+0)], [F(0), F(0x0p+0)],\n+            [F(0.1), F(0x1.8663f793c46c69cp-4)], [F(0.25), F(0x1.c8ff7c79a9a21ac4p-3)],\n+            [F(0.75), F(0x1.1e85f5e7040d03ep-1)], [F(0.875), F(0x1.41d8fe84672ae646p-1)],\n+            [F(10), F(0x1.32ee3b77f374bb7cp+1)], [F(100), F(0x1.275e2271bba30be4p+2)],\n             [F(10000), F(0x1.26bbed6fbd84182ep+3)],\n         ];\n         testLog1p(vals);\n@@ -3981,7 +3989,7 @@ Ldone:\n     }\n     static foreach (F; AliasSeq!(float, double, real))\n     {{\n-        F[2][24] vals = [\n+        scope F[2][] vals = [\n             [F(1), F(0x0p+0)], [F(2), F(0x1p+0)],\n             [F(4), F(0x1p+1)], [F(8), F(0x1.8p+1)],\n             [F(16), F(0x1p+2)], [F(32), F(0x1.4p+2)],\n@@ -3993,6 +4001,9 @@ Ldone:\n             [F(17), F(0x1.0598fdbeb244c5ap+2)], [F(31), F(0x1.3d118d66c4d4e554p+2)],\n             [F(33), F(0x1.42d75a6eb1dfb0e6p+2)], [F(63), F(0x1.7e8bc1179e0caa9cp+2)],\n             [F(65), F(0x1.816e79685c2d2298p+2)], [F(-0), -F.infinity], [F(0), -F.infinity],\n+            [F(0.1), F(-0x1.a934f0979a3715fcp+1)], [F(0.25), F(-0x1p+1)],\n+            [F(0.75), F(-0x1.a8ff971810a5e182p-2)], [F(0.875), F(-0x1.8a8980abfbd32668p-3)],\n+            [F(10), F(0x1.a934f0979a3715fcp+1)], [F(100), F(0x1.a934f0979a3715fcp+2)],\n             [F(10000), F(0x1.a934f0979a3715fcp+3)],\n         ];\n         testLog2(vals);\n@@ -4178,7 +4189,7 @@ private T logbImpl(T)(T x) @trusted pure nothrow @nogc\n     }\n     static foreach (F; AliasSeq!(float, double, real))\n     {{\n-        F[2][24] vals = [\n+        scope F[2][] vals = [\n             [F(1), F(0x0p+0)], [F(2), F(0x1p+0)],\n             [F(4), F(0x1p+1)], [F(8), F(0x1.8p+1)],\n             [F(16), F(0x1p+2)], [F(32), F(0x1.4p+2)],\n@@ -4190,6 +4201,9 @@ private T logbImpl(T)(T x) @trusted pure nothrow @nogc\n             [F(17), F(0x1p+2)], [F(31), F(0x1p+2)],\n             [F(33), F(0x1.4p+2)], [F(63), F(0x1.4p+2)],\n             [F(65), F(0x1.8p+2)], [F(-0), -F.infinity], [F(0), -F.infinity],\n+            [F(0.1), F(-0x1p+2)], [F(0.25), F(-0x1p+1)],\n+            [F(0.75), F(-0x1p+0)], [F(0.875), F(-0x1p+0)],\n+            [F(10), F(0x1.8p+1)], [F(100), F(0x1.8p+2)],\n             [F(10000), F(0x1.ap+3)],\n         ];\n         testLogb(vals);"}, {"sha": "f4d011bbad96ab3cac846d44c868885748bec398", "filename": "libphobos/src/std/traits.d", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Fsrc%2Fstd%2Ftraits.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/328477f6ee82d27fa6bb09617644d409be300688/libphobos%2Fsrc%2Fstd%2Ftraits.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Ftraits.d?ref=328477f6ee82d27fa6bb09617644d409be300688", "patch": "@@ -8812,6 +8812,30 @@ template getSymbolsByUDA(alias symbol, alias attribute)\n     static assert(is(getSymbolsByUDA!(X, X) == AliasSeq!()));\n }\n \n+// https://issues.dlang.org/show_bug.cgi?id=23776\n+@safe pure nothrow @nogc unittest\n+{\n+    struct T\n+    {\n+        struct Tag {}\n+        @Tag struct MyStructA {}\n+        @Tag struct MyStructB {}\n+        @Tag struct MyStructC {}\n+    }\n+    alias tcomponents = getSymbolsByUDA!(T, T.Tag);\n+    static assert(tcomponents.length > 0);\n+\n+    struct X\n+    {\n+        struct Tag {}\n+        @Tag enum MyEnumA;\n+        @Tag enum MyEnumB;\n+        @Tag enum MyEnumC;\n+    }\n+    alias xcomponents = getSymbolsByUDA!(X, X.Tag);\n+    static assert(xcomponents.length > 0);\n+}\n+\n // getSymbolsByUDA produces wrong result if one of the symbols having the UDA is a function\n // https://issues.dlang.org/show_bug.cgi?id=18624\n @safe unittest\n@@ -8866,7 +8890,8 @@ private template getSymbolsByUDAImpl(alias symbol, alias attribute, names...)\n             alias member = __traits(getMember, symbol, names[0]);\n \n             // Filtering not compiled members such as alias of basic types.\n-            static if (isAliasSeq!member || isType!member)\n+            static if (isAliasSeq!member ||\n+                       (isType!member && !isAggregateType!member && !is(member == enum)))\n             {\n                 alias getSymbolsByUDAImpl = tail;\n             }"}]}