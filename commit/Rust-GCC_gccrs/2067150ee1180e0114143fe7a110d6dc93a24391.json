{"sha": "2067150ee1180e0114143fe7a110d6dc93a24391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2NzE1MGVlMTE4MGUwMTE0MTQzZmU3YTExMGQ2ZGM5M2EyNDM5MQ==", "commit": {"author": {"name": "Sven de Marothy", "email": "sven@physto.se", "date": "2006-09-22T13:04:22Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2006-09-22T13:04:22Z"}, "message": "[multiple changes]\n\n2006-08-02  Sven de Marothy  <sven@physto.se>\n\n\t* gnu/java/awt/peer/gtk/GtkChoicePeer.java\n\t(remove): Force event on removing item 0 when it's selected.\n\t(handleEvent): Always call Choice.selected().\n\t* java/awt/Choice.java:\n\t(remove): Simplify and correct.\n\n2006-07-30  Sven de Marothy  <sven@physto.se>\n\n\t* java/awt/Choice.java:\n\t(accessibleAction): Call select() directly.\n\t(add, insert, remove): Reimplement.\n\t(dispatchEventImpl): Always call super.\n\t(processItemEvent): Does not set the index.\n\t* include/gnu_java_awt_peer_gtk_GtkChoicePeer.h\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n\t(append): removed.\n\t(nativeAdd): Name changed to add.\n\t(selection_changed_cb): Simplify callback.\n\t* gnu/java/awt/peer/gtk/GtkChoicePeer.java\n\t(selected): New field.\n\t(add): Replaced with native impl.\n\t(handleEvent): New method.\n\nFrom-SVN: r117142", "tree": {"sha": "e4a1056aef0703c9aee430e1a56b785c152028e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4a1056aef0703c9aee430e1a56b785c152028e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2067150ee1180e0114143fe7a110d6dc93a24391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2067150ee1180e0114143fe7a110d6dc93a24391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2067150ee1180e0114143fe7a110d6dc93a24391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2067150ee1180e0114143fe7a110d6dc93a24391/comments", "author": null, "committer": null, "parents": [{"sha": "36b241938732dfdb21df0b707805420df4d88d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b241938732dfdb21df0b707805420df4d88d1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b241938732dfdb21df0b707805420df4d88d1a"}], "stats": {"total": 917, "additions": 406, "deletions": 511}, "files": [{"sha": "13eda590a7f0460af9ec77e1ccd05a7f96165f38", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=2067150ee1180e0114143fe7a110d6dc93a24391", "patch": "@@ -1,3 +1,28 @@\n+2006-08-02  Sven de Marothy  <sven@physto.se>\n+\n+\t* gnu/java/awt/peer/gtk/GtkChoicePeer.java\n+\t(remove): Force event on removing item 0 when it's selected.\n+\t(handleEvent): Always call Choice.selected().\n+\t* java/awt/Choice.java:\n+\t(remove): Simplify and correct.\n+\n+2006-07-30  Sven de Marothy  <sven@physto.se>\n+\n+\t* java/awt/Choice.java:\n+\t(accessibleAction): Call select() directly.\n+\t(add, insert, remove): Reimplement.\n+\t(dispatchEventImpl): Always call super.\n+\t(processItemEvent): Does not set the index.\n+\t* include/gnu_java_awt_peer_gtk_GtkChoicePeer.h\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c\n+\t(append): removed.\n+\t(nativeAdd): Name changed to add.\n+\t(selection_changed_cb): Simplify callback.\n+\t* gnu/java/awt/peer/gtk/GtkChoicePeer.java\n+\t(selected): New field.\n+\t(add): Replaced with native impl.\n+\t(handleEvent): New method.\n+\n 2006-07-06  Paul Eggert  <eggert@cs.ucla.edu>\n \n \tPort to hosts whose 'sort' and 'tail' implementations"}, {"sha": "f00461f3fc858c43de03afe6ff5305af9db9fad6", "filename": "libjava/classpath/gnu/java/awt/peer/gtk/GtkChoicePeer.java", "status": "modified", "additions": 53, "deletions": 46, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java?ref=2067150ee1180e0114143fe7a110d6dc93a24391", "patch": "@@ -39,44 +39,49 @@\n package gnu.java.awt.peer.gtk;\n \n import java.awt.Choice;\n+import java.awt.AWTEvent;\n import java.awt.event.ItemEvent;\n import java.awt.peer.ChoicePeer;\n \n public class GtkChoicePeer extends GtkComponentPeer\n   implements ChoicePeer\n {\n+  private int selected;\n+  \n   public GtkChoicePeer (Choice c)\n   {\n     super (c);\n \n     int count = c.getItemCount ();\n     if (count > 0)\n       {\n-\tString items[] = new String[count];\n \tfor (int i = 0; i < count; i++)\n-\t  items[i] = c.getItem (i);\n-\t  \n-\tappend (items);\n-      }\n+\t  add( c.getItem(i), i );\n \n-    int selected = c.getSelectedIndex();\n-    if (selected >= 0)\n-      select(selected);\n+\tselected = c.getSelectedIndex();\n+\tif( selected >= 0 )\n+\t  select( selected );\n+      }\n+    else\n+      selected = -1;\n   }\n \n   native void create ();\n \n-  native void append (String items[]);\n   native int nativeGetSelected ();\n-  native void nativeAdd (String item, int index);\n-  native void nativeRemove (int index);\n-  native void nativeRemoveAll ();\n \n   native void connectSignals ();\n \n   native void selectNative (int position);\n+\n   native void selectNativeUnlocked (int position);\n \n+  public native void add (String item, int index);\n+\n+  native void nativeRemove(int index);\n+\n+  native void nativeRemoveAll();\n+\n   public void select (int position)\n   {\n     if (Thread.currentThread() == GtkToolkit.mainThread)\n@@ -85,42 +90,18 @@ public void select (int position)\n       selectNative (position);\n   }\n \n-  public void add (String item, int index)\n+  public void remove( int index )\n   {\n-    int before = nativeGetSelected();\n-    \n-    nativeAdd (item, index);\n-    \n-    /* Generate an ItemEvent if we added the first one or\n-       if we inserted at or before the currently selected item. */\n-    if ((before < 0) || (before >= index))\n-      {\n-        // Must set our state before notifying listeners\n-\t((Choice) awtComponent).select (((Choice) awtComponent).getItem (0));\n-        postItemEvent (((Choice) awtComponent).getItem (0), ItemEvent.SELECTED);\n-      }\n+    // Ensure the triggering of an event when removing item zero if zero is the\n+    // selected item, even though the selected index doesn't change.\n+    if( index == 0 && selected == 0 )\n+      selected = -1; \n+    nativeRemove( index );\n   }\n \n-  public void remove (int index)\n-  {\n-    int before = nativeGetSelected();\n-    int after;\n-    \n-    nativeRemove (index);\n-    after = nativeGetSelected();\n-    \n-    /* Generate an ItemEvent if we are removing the currently selected item\n-       and there are at least one item left. */\n-    if ((before == index) && (after >= 0))\n-      {\n-        // Must set our state before notifying listeners\n-\t((Choice) awtComponent).select (((Choice) awtComponent).getItem (0));\n-        postItemEvent (((Choice) awtComponent).getItem (0), ItemEvent.SELECTED);\n-      }\n-  }\n-\n-  public void removeAll ()\n+  public void removeAll()\n   {\n+    selected = -1; // we do not want to trigger a select event here.\n     nativeRemoveAll();\n   }\n   \n@@ -129,8 +110,34 @@ public void addItem (String item, int position)\n     add (item, position);\n   }\n \n-  protected void postChoiceItemEvent (String label, int stateChange)\n+  /**\n+   * Callback from the native side on an item-select event, \n+   * which posts an event. The event is only posted if it represents an actual\n+   * change. Selected is set to the peer's state initially, so that the\n+   * first call to select(int) from the constructor will not trigger an event.\n+   * (it should not)\n+   */\n+  protected void postChoiceItemEvent ( int index )\n+  {\n+    if( selected != index )\n+      {\n+\tselected = index;\n+\tpostItemEvent (((Choice) awtComponent).getItem( selected ), \n+\t\t       ItemEvent.SELECTED);\n+      }\n+  }\n+\n+  /**\n+   * Catches the event and calls Choice.select() if the component state\n+   * needs updating.\n+   */\n+  public void handleEvent (AWTEvent event)\n   {\n-    postItemEvent (label, stateChange);\n+    super.handleEvent( event );\n+    if( event instanceof ItemEvent )\n+      if( ((ItemEvent)event).getItemSelectable() == awtComponent &&\n+\t  ((ItemEvent)event).getStateChange() == ItemEvent.SELECTED )\n+\t((Choice)awtComponent).select( selected );\n   }\n }\n+"}, {"sha": "5450434d8804292340930d88601ed322a11855bc", "filename": "libjava/classpath/include/gnu_java_awt_peer_gtk_GtkChoicePeer.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Finclude%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.h?ref=2067150ee1180e0114143fe7a110d6dc93a24391", "patch": "@@ -11,9 +11,8 @@ extern \"C\"\n #endif\n \n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_create (JNIEnv *env, jobject);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append (JNIEnv *env, jobject, jobjectArray);\n JNIEXPORT jint JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeGetSelected (JNIEnv *env, jobject);\n-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeAdd (JNIEnv *env, jobject, jstring, jint);\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add (JNIEnv *env, jobject, jstring, jint);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemove (JNIEnv *env, jobject, jint);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemoveAll (JNIEnv *env, jobject);\n JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkChoicePeer_connectSignals (JNIEnv *env, jobject);"}, {"sha": "104e30a7e82231440bbd4507e991943d72a60c09", "filename": "libjava/classpath/java/awt/Choice.java", "status": "modified", "additions": 315, "deletions": 405, "changes": 720, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjava%2Fawt%2FChoice.java?ref=2067150ee1180e0114143fe7a110d6dc93a24391", "patch": "@@ -1,5 +1,5 @@\n /* Choice.java -- Java choice button widget.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2004, 2006 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -51,56 +51,47 @@\n import javax.accessibility.AccessibleRole;\n \n /**\n-  * This class implements a drop down choice list.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This class implements a drop down choice list.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public class Choice extends Component\n   implements ItemSelectable, Serializable, Accessible\n {\n+  /**\n+   * The number used to generate the name returned by getName.\n+   */\n+  private static transient long next_choice_number;\n \n-/*\n- * Static Variables\n- */\n-\n-/**\n- * The number used to generate the name returned by getName.\n- */\n-private static transient long next_choice_number;\n-\n-// Serialization constant\n-private static final long serialVersionUID = -4075310674757313071L;\n-\n-/*************************************************************************/\n+  // Serialization constant\n+  private static final long serialVersionUID = -4075310674757313071L;\n \n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * @serial A list of items for the choice box, which can be <code>null</code>.\n-  * This is package-private to avoid an accessor method.\n-  */\n-Vector pItems = new Vector();\n+  /**\n+   * @serial A list of items for the choice box, which can be <code>null</code>.\n+   * This is package-private to avoid an accessor method.\n+   */\n+  Vector pItems = new Vector();\n \n-/**\n-  * @serial The index of the selected item in the choice box.\n-  */\n-private int selectedIndex = -1;\n+  /**\n+   * @serial The index of the selected item in the choice box.\n+   */\n+  private int selectedIndex = -1;\n \n-// Listener chain\n-private ItemListener item_listeners;\n+  /**\n+   * ItemListener chain\n+   */\n+  private ItemListener item_listeners;\n \n-/**\n- * This class provides accessibility support for the\n- * combo box.\n- *\n- * @author Jerry Quinn  (jlquinn@optonline.net)\n- * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n- */\n+  /**\n+   * This class provides accessibility support for the\n+   * combo box.\n+   *\n+   * @author Jerry Quinn  (jlquinn@optonline.net)\n+   * @author Andrew John Hughes (gnu_andrew@member.fsf.org)\n+   */\n   protected class AccessibleAWTChoice\n-  extends AccessibleAWTComponent\n-  implements AccessibleAction\n+    extends AccessibleAWTComponent\n+    implements AccessibleAction\n   {\n \n     /**\n@@ -186,19 +177,12 @@ public boolean doAccessibleAction(int i)\n       if (i < 0 || i >= pItems.size())\n \treturn false;\n \t    \n-      Choice.this.processItemEvent(new ItemEvent(Choice.this,\n-\t\t\t\t\t\t ItemEvent.ITEM_STATE_CHANGED,\n-\t\t\t\t\t\t this, ItemEvent.SELECTED));\n+      Choice.this.select( i );\n+\n       return true;\n     }\n   }\n \n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n   /**\n    * Initializes a new instance of <code>Choice</code>.\n    *\n@@ -211,397 +195,323 @@ public Choice()\n       throw new HeadlessException ();\n   }\n \n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * Returns the number of items in the list.\n-  *\n-  * @return The number of items in the list.\n-  */\n-public int\n-getItemCount()\n-{\n-  return countItems ();\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the number of items in the list.\n-  *\n-  * @return The number of items in the list.\n-  *\n-  * @deprecated This method is deprecated in favor of <code>getItemCount</code>.\n-  */\n-public int\n-countItems()\n-{\n-  return(pItems.size());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the item at the specified index in the list.\n-  *\n-  * @param index The index into the list to return the item from.\n-  *\n-  * @exception ArrayIndexOutOfBoundsException If the index is invalid.\n-  */\n-public String\n-getItem(int index)\n-{\n-  return((String)pItems.elementAt(index));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Adds the specified item to this choice box.\n-  *\n-  * @param item The item to add.\n-  *\n-  * @exception NullPointerException If the item's value is null\n-  *\n-  * @since 1.1\n-  */\n-public synchronized void\n-add(String item)\n-{\n-  if (item == null)\n-    throw new NullPointerException (\"item must be non-null\");\n-\n-  pItems.addElement(item);\n-\n-  int i = pItems.size () - 1;\n-  if (peer != null)\n-    {\n-      ChoicePeer cp = (ChoicePeer) peer;\n-      cp.add (item, i);\n-    }\n-  else if (selectedIndex == -1) \n-    select(0);\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Returns the number of items in the list.\n+   *\n+   * @return The number of items in the list.\n+   */\n+  public int getItemCount()\n+  {\n+    return countItems ();\n+  }\n \n-/**\n-  * Adds the specified item to this choice box.\n-  *\n-  * This method is oboslete since Java 2 platform 1.1. Please use @see add\n-  * instead.\n-  *\n-  * @param item The item to add.\n-  *\n-  * @exception NullPointerException If the item's value is equal to null\n-  */\n-public synchronized void\n-addItem(String item)\n-{\n-  add(item);\n-}\n+  /**\n+   * Returns the number of items in the list.\n+   *\n+   * @return The number of items in the list.\n+   *\n+   * @deprecated This method is deprecated in favor of <code>getItemCount</code>.\n+   */\n+  public int countItems()\n+  {\n+    return pItems.size();\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the item at the specified index in the list.\n+   *\n+   * @param index The index into the list to return the item from.\n+   *\n+   * @exception ArrayIndexOutOfBoundsException If the index is invalid.\n+   */\n+  public String getItem(int index)\n+  {\n+    return (String)pItems.elementAt(index);\n+  }\n \n-/** Inserts an item into this Choice.  Existing items are shifted\n- * upwards.  If the new item is the only item, then it is selected.\n- * If the currently selected item is shifted, then the first item is\n- * selected.  If the currently selected item is not shifted, then it\n- * remains selected.\n- *\n- * @param item The item to add.\n- * @param index The index at which the item should be inserted.\n- *\n- * @exception IllegalArgumentException If index is less than 0\n- */\n-public synchronized void\n-insert(String item, int index)\n-{\n-  if (index < 0)\n-    throw new IllegalArgumentException (\"index may not be less then 0\");\n+  /**\n+   * Adds the specified item to this choice box.\n+   *\n+   * @param item The item to add.\n+   *\n+   * @exception NullPointerException If the item's value is null\n+   *\n+   * @since 1.1\n+   */\n+  public synchronized void add(String item)\n+  {\n+    if (item == null)\n+      throw new NullPointerException (\"item must be non-null\");\n \n-  if (index > getItemCount ())\n-    index = getItemCount ();\n+    pItems.addElement(item);\n \n-  pItems.insertElementAt(item, index);\n+    if (peer != null)\n+      ((ChoicePeer) peer).add(item, getItemCount() - 1);\n \n-  if (peer != null)\n-    {\n-      ChoicePeer cp = (ChoicePeer) peer;\n-      cp.add (item, index);\n-    }\n-  else if (selectedIndex == -1 || selectedIndex >= index)\n-    select(0);\n-}\n+    if (selectedIndex == -1) \n+      select( 0 );\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Adds the specified item to this choice box.\n+   *\n+   * This method is oboslete since Java 2 platform 1.1. Please use @see add\n+   * instead.\n+   *\n+   * @param item The item to add.\n+   *\n+   * @exception NullPointerException If the item's value is equal to null\n+   */\n+  public synchronized void addItem(String item)\n+  {\n+    add(item);\n+  }\n \n-/**\n-  * Removes the specified item from the choice box.\n-  *\n-  * @param item The item to remove.\n-  *\n-  * @exception IllegalArgumentException If the specified item doesn't exist.\n-  */\n-public synchronized void\n-remove(String item)\n-{\n-  int index = pItems.indexOf(item);\n-  if (index == -1)\n-    throw new IllegalArgumentException (\"item \\\"\"\n-\t\t\t\t\t+ item + \"\\\" not found in Choice\");\n-  remove(index);\n-}\n+  /** Inserts an item into this Choice.  Existing items are shifted\n+   * upwards.  If the new item is the only item, then it is selected.\n+   * If the currently selected item is shifted, then the first item is\n+   * selected.  If the currently selected item is not shifted, then it\n+   * remains selected.\n+   *\n+   * @param item The item to add.\n+   * @param index The index at which the item should be inserted.\n+   *\n+   * @exception IllegalArgumentException If index is less than 0\n+   */\n+  public synchronized void insert(String item, int index)\n+  {\n+    if (index < 0)\n+      throw new IllegalArgumentException (\"index may not be less then 0\");\n \n-/*************************************************************************/\n+    if (index > getItemCount ())\n+      index = getItemCount ();\n \n-/**\n-  * Removes the item at the specified index from the choice box.\n-  *\n-  * @param index The index of the item to remove.\n-  *\n-  * @exception IndexOutOfBoundsException If the index is not valid.\n-  */\n-public synchronized void\n-remove(int index)\n-{\n-  if ((index < 0) || (index > getItemCount()))\n-    throw new IllegalArgumentException(\"Bad index: \" + index);\n+    pItems.insertElementAt(item, index);\n \n-  pItems.removeElementAt(index);\n+    if (peer != null)\n+      ((ChoicePeer) peer).add (item, index);\n \n-  if (peer != null)\n-    {\n-      ChoicePeer cp = (ChoicePeer) peer;\n-      cp.remove (index);\n-    }\n-  else\n-    {\n-      if (getItemCount() == 0)\n-\tselectedIndex = -1;\n-      else if (index == selectedIndex)\n-\tselect(0);\n-    }\n+    if (selectedIndex == -1 || selectedIndex >= index)\n+      select(0);\n+  }\n \n-  if (selectedIndex > index)\n-    --selectedIndex;\n-}\n+  /**\n+   * Removes the specified item from the choice box.\n+   *\n+   * @param item The item to remove.\n+   *\n+   * @exception IllegalArgumentException If the specified item doesn't exist.\n+   */\n+  public synchronized void remove(String item)\n+  {\n+    int index = pItems.indexOf(item);\n+    if (index == -1)\n+      throw new IllegalArgumentException (\"item \\\"\"\n+\t\t\t\t\t  + item + \"\\\" not found in Choice\");\n+    remove(index);\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Removes the item at the specified index from the choice box.\n+   *\n+   * @param index The index of the item to remove.\n+   *\n+   * @exception IndexOutOfBoundsException If the index is not valid.\n+   */\n+  public synchronized void remove(int index)\n+  {\n+    if ((index < 0) || (index > getItemCount()))\n+      throw new IllegalArgumentException(\"Bad index: \" + index);\n+\n+    pItems.removeElementAt(index);\n+\n+    if (peer != null)\n+      ((ChoicePeer) peer).remove( index );\n+\n+    if( getItemCount() == 0 )\n+      selectedIndex = -1;\n+    else \n+      {\n+       if( selectedIndex > index )\n+         selectedIndex--;\n+       else if( selectedIndex == index )\n+         selectedIndex = 0;\n+\n+       if( peer != null )\n+         ((ChoicePeer)peer).select( selectedIndex );\n+       }\n+  }\n \n-/**\n-  * Removes all of the objects from this choice box.\n-  */\n-public synchronized void\n-removeAll()\n-{\n-  if (getItemCount() <= 0)\n-    return;\n+  /**\n+   * Removes all of the objects from this choice box.\n+   */\n+  public synchronized void removeAll()\n+  {\n+    if (getItemCount() <= 0)\n+      return;\n   \n-  pItems.removeAllElements ();\n+    pItems.removeAllElements ();\n \n-  if (peer != null)\n-    {\n-      ChoicePeer cp = (ChoicePeer) peer;\n-      cp.removeAll ();\n-    }\n-\n-  selectedIndex = -1;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the currently selected item, or null if no item is\n-  * selected.\n-  *\n-  * @return The currently selected item.\n-  */\n-public synchronized String\n-getSelectedItem()\n-{\n-  return (selectedIndex == -1\n-\t  ? null\n-\t  : ((String)pItems.elementAt(selectedIndex)));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns an array with one row containing the selected item.\n-  *\n-  * @return An array containing the selected item.\n-  */\n-public synchronized Object[]\n-getSelectedObjects()\n-{\n-  if (selectedIndex == -1)\n-    return null;\n-\n-  Object[] objs = new Object[1];\n-  objs[0] = pItems.elementAt(selectedIndex);\n+    if (peer != null)\n+      {\n+\tChoicePeer cp = (ChoicePeer) peer;\n+\tcp.removeAll ();\n+      }\n \n-  return(objs);\n-}\n+    selectedIndex = -1;\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the currently selected item, or null if no item is\n+   * selected.\n+   *\n+   * @return The currently selected item.\n+   */\n+  public synchronized String getSelectedItem()\n+  {\n+    return (selectedIndex == -1\n+\t    ? null\n+\t    : ((String)pItems.elementAt(selectedIndex)));\n+  }\n \n-/**\n-  * Returns the index of the selected item.\n-  *\n-  * @return The index of the selected item.\n-  */\n-public int\n-getSelectedIndex()\n-{\n-  return(selectedIndex);\n-}\n+  /**\n+   * Returns an array with one row containing the selected item.\n+   *\n+   * @return An array containing the selected item.\n+   */\n+  public synchronized Object[] getSelectedObjects()\n+  {\n+    if (selectedIndex == -1)\n+      return null;\n \n-/*************************************************************************/\n+    Object[] objs = new Object[1];\n+    objs[0] = pItems.elementAt(selectedIndex);\n \n-/**\n-  * Forces the item at the specified index to be selected.\n-  *\n-  * @param index The index of the row to make selected.\n-  *\n-  * @exception IllegalArgumentException If the specified index is invalid.\n-  */\n-public synchronized void\n-select(int index)\n-{\n-  if ((index < 0) || (index >= getItemCount()))\n-    throw new IllegalArgumentException(\"Bad index: \" + index);\n-\n-  if (pItems.size() > 0) {\n-      selectedIndex = index;\n-      ChoicePeer cp = (ChoicePeer) peer;\n-      if (cp != null) {\n-          cp.select(index);\n-      }\n+    return objs;\n   }\n-}\n \n-/*************************************************************************/\n+  /**\n+   * Returns the index of the selected item.\n+   *\n+   * @return The index of the selected item.\n+   */\n+  public int getSelectedIndex()\n+  {\n+    return selectedIndex;\n+  }\n \n-/**\n-  * Forces the named item to be selected.\n-  *\n-  * @param item The item to be selected.\n-  *\n-  * @exception IllegalArgumentException If the specified item does not exist.\n-  */\n-public synchronized void\n-select(String item)\n-{\n-  int index = pItems.indexOf(item);\n-  if (index >= 0)\n-    select(index);\n-}\n+  /**\n+   * Forces the item at the specified index to be selected.\n+   *\n+   * @param index The index of the row to make selected.\n+   *\n+   * @exception IllegalArgumentException If the specified index is invalid.\n+   */\n+  public synchronized void select(int index)\n+  {\n+    if ((index < 0) || (index >= getItemCount()))\n+      throw new IllegalArgumentException(\"Bad index: \" + index);\n \n-/*************************************************************************/\n+    if( selectedIndex == index ) \n+      return;\n \n-/**\n-  * Creates the native peer for this object.\n-  */\n-public void\n-addNotify()\n-{\n-  if (peer == null)\n-    peer = getToolkit ().createChoice (this);\n-  super.addNotify ();\n-}\n+    selectedIndex = index;\n+    if( peer != null ) \n+      ((ChoicePeer)peer).select( index );\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Forces the named item to be selected.\n+   *\n+   * @param item The item to be selected.\n+   *\n+   * @exception IllegalArgumentException If the specified item does not exist.\n+   */\n+  public synchronized void select(String item)\n+  {\n+    int index = pItems.indexOf(item);\n+    if( index >= 0 )\n+      select( index );\n+  }\n \n-/**\n-  * Adds the specified listener to the list of registered listeners for\n-  * this object.\n-  *\n-  * @param listener The listener to add.\n-  */\n-public synchronized void\n-addItemListener(ItemListener listener)\n-{\n-  item_listeners = AWTEventMulticaster.add(item_listeners, listener);\n-}\n+  /**\n+   * Creates the native peer for this object.\n+   */\n+  public void addNotify()\n+  {\n+    if (peer == null)\n+      peer = getToolkit ().createChoice (this);\n+    super.addNotify ();\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Adds the specified listener to the list of registered listeners for\n+   * this object.\n+   *\n+   * @param listener The listener to add.\n+   */\n+  public synchronized void addItemListener(ItemListener listener)\n+  {\n+    item_listeners = AWTEventMulticaster.add(item_listeners, listener);\n+  }\n \n-/**\n-  * Removes the specified listener from the list of registered listeners for\n-  * this object.\n-  *\n-  * @param listener The listener to remove.\n-  */\n-public synchronized void\n-removeItemListener(ItemListener listener)\n-{\n-  item_listeners = AWTEventMulticaster.remove(item_listeners, listener);\n-}\n+  /**\n+   * Removes the specified listener from the list of registered listeners for\n+   * this object.\n+   *\n+   * @param listener The listener to remove.\n+   */\n+  public synchronized void removeItemListener(ItemListener listener)\n+  {\n+    item_listeners = AWTEventMulticaster.remove(item_listeners, listener);\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Processes this event by invoking <code>processItemEvent()</code> if the\n+   * event is an instance of <code>ItemEvent</code>, otherwise the event\n+   * is passed to the superclass.\n+   *\n+   * @param event The event to process.\n+   */\n+  protected void processEvent(AWTEvent event)\n+  {\n+    if (event instanceof ItemEvent)\n+      processItemEvent((ItemEvent)event);\n+    else\n+      super.processEvent(event);\n+  }\n \n-/**\n-  * Processes this event by invoking <code>processItemEvent()</code> if the\n-  * event is an instance of <code>ItemEvent</code>, otherwise the event\n-  * is passed to the superclass.\n-  *\n-  * @param event The event to process.\n-  */\n-protected void\n-processEvent(AWTEvent event)\n-{\n-  if (event instanceof ItemEvent)\n-    processItemEvent((ItemEvent)event);\n-  else\n-    super.processEvent(event);\n-}\n-\n-void \n-dispatchEventImpl(AWTEvent e)\n-{\n-  if (e.id <= ItemEvent.ITEM_LAST\n-      && e.id >= ItemEvent.ITEM_FIRST\n-      && (item_listeners != null || (eventMask & AWTEvent.ITEM_EVENT_MASK) != 0))\n-    processEvent(e);\n-  else\n+  void dispatchEventImpl(AWTEvent e)\n+  {\n     super.dispatchEventImpl(e);\n-}\n \n-/*************************************************************************/\n-\n-/**\n-  * Processes item event by dispatching to any registered listeners.\n-  *\n-  * @param event The event to process.\n-  */\n-protected void\n-processItemEvent(ItemEvent event)\n-{\n-  int index = pItems.indexOf((String) event.getItem());\n-  // Don't call back into the peers when selecting index here\n-  if (event.getStateChange() == ItemEvent.SELECTED)\n-    this.selectedIndex = index;\n-  if (item_listeners != null)\n-    item_listeners.itemStateChanged(event);\n-}\n+    if( e.id <= ItemEvent.ITEM_LAST && e.id >= ItemEvent.ITEM_FIRST && \n+\t( item_listeners != null || \n+\t  ( eventMask & AWTEvent.ITEM_EVENT_MASK ) != 0 ) )\n+      processEvent(e);\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Processes item event by dispatching to any registered listeners.\n+   *\n+   * @param event The event to process.\n+   */\n+  protected void processItemEvent(ItemEvent event)\n+  {\n+    int index = pItems.indexOf((String) event.getItem());\n+    if (item_listeners != null)\n+      item_listeners.itemStateChanged(event);\n+  }\n \n-/**\n-  * Returns a debugging string for this object.\n-  *\n-  * @return A debugging string for this object.\n-  */\n-protected String\n-paramString()\n-{\n-  return (\"selectedIndex=\" + selectedIndex + \",\" + super.paramString());\n-}\n+  /**\n+   * Returns a debugging string for this object.\n+   *\n+   * @return A debugging string for this object.\n+   */\n+  protected String paramString()\n+  {\n+    return \"selectedIndex=\" + selectedIndex + \",\" + super.paramString();\n+  }\n \n   /**\n    * Returns an array of all the objects currently registered as FooListeners"}, {"sha": "ac4df69f45761174fc5c7a6bf09e27ab3c5d573c", "filename": "libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c", "status": "modified", "additions": 12, "deletions": 58, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Fnative%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2067150ee1180e0114143fe7a110d6dc93a24391/libjava%2Fclasspath%2Fnative%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fnative%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c?ref=2067150ee1180e0114143fe7a110d6dc93a24391", "patch": "@@ -1,5 +1,5 @@\n /* gtkchoicepeer.c -- Native implementation of GtkChoicePeer\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2006 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -52,7 +52,7 @@ cp_gtk_choice_init_jni (void)\n \n   postChoiceItemEventID = (*cp_gtk_gdk_env())->GetMethodID (cp_gtk_gdk_env(), gtkchoicepeer,\n                                                \"postChoiceItemEvent\",\n-                                               \"(Ljava/lang/String;I)V\");\n+                                               \"(I)V\");\n }\n \n static void selection_changed_cb (GtkComboBox *combobox, jobject peer);\n@@ -106,39 +106,7 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_connectSignals\n }\n \n JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append \n-  (JNIEnv *env, jobject obj, jobjectArray items)\n-{\n-  gpointer ptr;\n-  jsize count, i;\n-  GtkWidget *bin;\n-\n-  gdk_threads_enter ();\n-\n-  ptr = NSA_GET_PTR (env, obj);\n-  bin = choice_get_widget (GTK_WIDGET (ptr));\n-  \n-  count = (*env)->GetArrayLength (env, items);\n-\n-  for (i = 0; i < count; i++) \n-    {\n-      jobject item;\n-      const char *label;\n-\n-      item = (*env)->GetObjectArrayElement (env, items, i);\n-      label = (*env)->GetStringUTFChars (env, item, NULL);\n-\n-      gtk_combo_box_append_text (GTK_COMBO_BOX (bin), label);\n-\n-      (*env)->ReleaseStringUTFChars (env, item, label);\n-      (*env)->DeleteLocalRef(env, item);\n-    }\n-\n-  gdk_threads_leave ();\n-}\n-\n-JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeAdd \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add \n   (JNIEnv *env, jobject obj, jstring item, jint index)\n {\n   void *ptr;\n@@ -170,14 +138,16 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemove\n \n   ptr = NSA_GET_PTR (env, obj);\n   bin = choice_get_widget (GTK_WIDGET (ptr));\n-  \n+\n+  /* First, unselect everything, to avoid problems when removing items. */\n+  gtk_combo_box_set_active (GTK_COMBO_BOX (bin), -1);\n   gtk_combo_box_remove_text (GTK_COMBO_BOX (bin), index);\n \n   gdk_threads_leave ();\n }\n \n-JNIEXPORT void JNICALL \n-Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemoveAll \n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeRemoveAll\n   (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n@@ -224,8 +194,7 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_selectNativeUnlocked\n   \n   ptr = NSA_GET_PTR (env, obj);\n   bin = choice_get_widget (GTK_WIDGET (ptr));\n-  \n-  gtk_combo_box_set_active (GTK_COMBO_BOX (bin), index);\n+  gtk_combo_box_set_active (GTK_COMBO_BOX (bin), (gint)index);\n }\n \n JNIEXPORT jint JNICALL \n@@ -251,26 +220,11 @@ Java_gnu_java_awt_peer_gtk_GtkChoicePeer_nativeGetSelected\n static void\n selection_changed_cb (GtkComboBox *combobox, jobject peer)\n {\n-  jstring label;\n-  GtkTreeModel *model;\n-  GtkTreeIter iter;\n-  gchar *selected;\n-  gint index;\n-\n-  index = gtk_combo_box_get_active(combobox);\n+  gint index = gtk_combo_box_get_active(combobox);\n \n   if (index >= 0)\n-    {\n-      model = gtk_combo_box_get_model (combobox);\n-      gtk_combo_box_get_active_iter (combobox, &iter);\n-      gtk_tree_model_get (model, &iter, 0, &selected, -1);\n-      label = (*cp_gtk_gdk_env())->NewStringUTF (cp_gtk_gdk_env(), selected);\n-\n-      (*cp_gtk_gdk_env())->CallVoidMethod (cp_gtk_gdk_env(), peer,\n-                                    postChoiceItemEventID,\n-                                    label,\n-                                    (jint) AWT_ITEM_SELECTED);\n-    }\n+    (*cp_gtk_gdk_env())->CallVoidMethod (cp_gtk_gdk_env(), peer,\n+\t\t\t\t\t postChoiceItemEventID, (jint)index );\n }\n \n static GtkWidget *"}]}