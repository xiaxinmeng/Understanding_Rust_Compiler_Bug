{"sha": "81544c237851a542046fa06f437f77b30562d2da", "node_id": "C_kwDOANBUbNoAKDgxNTQ0YzIzNzg1MWE1NDIwNDZmYTA2ZjQzN2Y3N2IzMDU2MmQyZGE", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-04-11T10:18:54Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-04-21T09:31:24Z"}, "message": "libproc_macro: Add ident implementation\n\nAdd implementation and representation for ident cpp structure as well as\na high level wrapper interface.\n\nChangeLog:\n\n\t* libgrust/libproc_macro/Makefile.am: Add ident to source list.\n\t* libgrust/libproc_macro/Makefile.in: Regenerate.\n\t* libgrust/libproc_macro/ident.cc: New file.\n\t* libgrust/libproc_macro/ident.h: New file.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "3c8d182510eccb2c3eddc4871047a835d48b05c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c8d182510eccb2c3eddc4871047a835d48b05c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81544c237851a542046fa06f437f77b30562d2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81544c237851a542046fa06f437f77b30562d2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81544c237851a542046fa06f437f77b30562d2da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81544c237851a542046fa06f437f77b30562d2da/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2078d8dd839007c5b4a51639069541269ee2b290", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2078d8dd839007c5b4a51639069541269ee2b290", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2078d8dd839007c5b4a51639069541269ee2b290"}], "stats": {"total": 114, "additions": 113, "deletions": 1}, "files": [{"sha": "7c9d9e6ae02ee450c04745c283bee17f94494150", "filename": "libgrust/libproc_macro/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.am?ref=81544c237851a542046fa06f437f77b30562d2da", "patch": "@@ -52,6 +52,7 @@ toolexeclib_LTLIBRARIES = libproc_macro.la\n \n libproc_macro_la_SOURCES = \\\n \tproc_macro.cc \\\n+\tident.cc \\\n \tliteral.cc\n \n include_HEADERS = \\"}, {"sha": "f9e3bfb9c23e372b44f7e063c5d92a8b9c82f3aa", "filename": "libgrust/libproc_macro/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2FMakefile.in?ref=81544c237851a542046fa06f437f77b30562d2da", "patch": "@@ -138,7 +138,7 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(includedir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n libproc_macro_la_LIBADD =\n-am_libproc_macro_la_OBJECTS = proc_macro.lo literal.lo\n+am_libproc_macro_la_OBJECTS = proc_macro.lo ident.lo literal.lo\n libproc_macro_la_OBJECTS = $(am_libproc_macro_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -386,6 +386,7 @@ AM_MAKEFLAGS = \\\n toolexeclib_LTLIBRARIES = libproc_macro.la\n libproc_macro_la_SOURCES = \\\n \tproc_macro.cc \\\n+\tident.cc \\\n \tliteral.cc\n \n include_HEADERS = \\\n@@ -469,6 +470,7 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ident.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/literal.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc_macro.Plo@am__quote@\n "}, {"sha": "6ea70dc0823fb44c32fd5d39106920fb0f5435f8", "filename": "libgrust/libproc_macro/ident.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2Fident.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2Fident.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fident.cc?ref=81544c237851a542046fa06f437f77b30562d2da", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2023 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU Proc Macro Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+#include \"ident.h\"\n+\n+#include <cstring>\n+\n+extern \"C\" {\n+Ident\n+Ident__new (unsigned char *str, std::uint64_t len)\n+{\n+  unsigned char *val = new unsigned char[len];\n+  std::memcpy (val, str, len);\n+  return {false, val, len};\n+}\n+\n+Ident\n+Ident__new_raw (unsigned char *str, std::uint64_t len)\n+{\n+  unsigned char *val = new unsigned char[len];\n+  std::memcpy (val, str, len);\n+  return {true, val, len};\n+}\n+\n+void\n+Ident__drop (Ident *ident)\n+{\n+  delete[] ident->val;\n+}\n+\n+Ident\n+Ident__clone (const Ident *ident)\n+{\n+  unsigned char *val = new unsigned char[ident->len];\n+  std::memcpy (val, ident->val, ident->len);\n+  return {ident->is_raw, val, ident->len};\n+}\n+}"}, {"sha": "0a4b4f88bad9bee610ddc41d5e790548a61c074e", "filename": "libgrust/libproc_macro/ident.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2Fident.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81544c237851a542046fa06f437f77b30562d2da/libgrust%2Flibproc_macro%2Fident.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgrust%2Flibproc_macro%2Fident.h?ref=81544c237851a542046fa06f437f77b30562d2da", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2023 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU Proc Macro Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef IDENT_H\n+#define IDENT_H\n+\n+#include <cstdint>\n+#include <string>\n+\n+struct Ident\n+{\n+  bool is_raw;\n+  // TODO: Adapt this to UTF-8\n+  unsigned char *val;\n+  // Length in bytes\n+  std::uint64_t len;\n+};\n+\n+extern \"C\" {\n+\n+Ident\n+Ident__new (unsigned char *str, std::uint64_t len);\n+\n+Ident\n+Ident__new_raw (unsigned char *str, std::uint64_t len);\n+\n+void\n+Ident__drop (Ident *ident);\n+\n+Ident\n+Ident__clone (const Ident *ident);\n+}\n+\n+#endif /* ! IDENT_H */"}]}