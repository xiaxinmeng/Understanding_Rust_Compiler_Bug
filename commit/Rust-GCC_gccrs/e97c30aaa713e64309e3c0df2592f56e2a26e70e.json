{"sha": "e97c30aaa713e64309e3c0df2592f56e2a26e70e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3YzMwYWFhNzEzZTY0MzA5ZTNjMGRmMjU5MmY1NmUyYTI2ZTcwZQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@TechFak.Uni-Bielefeld.DE", "date": "2003-10-22T11:34:08Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2003-10-22T11:34:08Z"}, "message": "tracebak.c (MAX): Avoid redefinition warning.\n\n\t* tracebak.c (MAX): Avoid redefinition warning.\n\n\t* init.c [sgi] (__gnat_error_handler): Remove i, unused.\n\tChange msg to const char *.\n\t(__gnat_install_handler): Remove ss, unused.\n\t[sun && __SVR4 && !__vxworks] (__gnat_error_handler): Change msg\n\tto const char *.\n\t* cstreams.c (__gnat_full_name): Declare p only when used.\n\t(__gnat_full_name) [sgi] Return buffer.\n\nFrom-SVN: r72794", "tree": {"sha": "15356489fa1f74b9b8263ca9e7e94c4357f48b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15356489fa1f74b9b8263ca9e7e94c4357f48b28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e97c30aaa713e64309e3c0df2592f56e2a26e70e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97c30aaa713e64309e3c0df2592f56e2a26e70e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97c30aaa713e64309e3c0df2592f56e2a26e70e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97c30aaa713e64309e3c0df2592f56e2a26e70e/comments", "author": null, "committer": null, "parents": [{"sha": "907393db60581bbcfd8a1601027f0761245340c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907393db60581bbcfd8a1601027f0761245340c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907393db60581bbcfd8a1601027f0761245340c2"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "cbb215eb9e9aecf048ed920d0c066ce5c3627af9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e97c30aaa713e64309e3c0df2592f56e2a26e70e", "patch": "@@ -1,3 +1,15 @@\n+2003-10-22  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* tracebak.c (MAX): Avoid redefinition warning.\n+\n+\t* init.c [sgi] (__gnat_error_handler): Remove i, unused.\n+\tChange msg to const char *.\n+\t(__gnat_install_handler): Remove ss, unused.\n+\t[sun && __SVR4 && !__vxworks] (__gnat_error_handler): Change msg\n+\tto const char *.\n+\t* cstreams.c (__gnat_full_name): Declare p only when used.\n+\t(__gnat_full_name) [sgi] Return buffer.\n+\n 2003-10-22  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* mingw32.h: New file."}, {"sha": "755b6b57ea22826d53c317fe6e102faaa660d86b", "filename": "gcc/ada/cstreams.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2Fcstreams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2Fcstreams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstreams.c?ref=e97c30aaa713e64309e3c0df2592f56e2a26e70e", "patch": "@@ -162,9 +162,9 @@ __gnat_full_name (nam, buffer)\n      char *nam;\n      char *buffer;\n {\n+#if defined(__EMX__) || defined (__MINGW32__)\n   char *p;\n \n-#if defined(__EMX__) || defined (__MINGW32__)\n   /* If this is a device file return it as is; under Windows NT and\n      OS/2 a device file end with \":\".  */\n   if (nam[strlen (nam) - 1] == ':')\n@@ -189,6 +189,7 @@ __gnat_full_name (nam, buffer)\n      getcwd approach instead. */\n   realpath (nam, buffer);\n \n+  return buffer;\n #elif defined (VMS)\n   strncpy (buffer, __gnat_to_canonical_file_spec (nam), __gnat_max_path_len);\n \n@@ -209,6 +210,8 @@ __gnat_full_name (nam, buffer)\n   return buffer;\n \n #else\n+  char *p;\n+\n   if (nam[0] != '/')\n     {\n       p = getcwd (buffer, __gnat_max_path_len);"}, {"sha": "6995b8c7ca3d90e3b919dc0f29fbfb6c27f86f60", "filename": "gcc/ada/init.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=e97c30aaa713e64309e3c0df2592f56e2a26e70e", "patch": "@@ -1062,9 +1062,7 @@ __gnat_error_handler (sig, code, sc)\n {\n   struct Machine_State  *mstate;\n   struct Exception_Data *exception;\n-  char *msg;\n-\n-  int i;\n+  const char *msg;\n \n   switch (sig)\n     {\n@@ -1142,7 +1140,6 @@ __gnat_error_handler (sig, code, sc)\n void\n __gnat_install_handler ()\n {\n-  stack_t ss;\n   struct sigaction act;\n \n   /* Setup signal handler to map synchronous signals to appropriate\n@@ -1194,7 +1191,7 @@ __gnat_error_handler (sig, sip)\n {\n   struct Exception_Data *exception;\n   static int recurse = 0;\n-  char *msg;\n+  const char *msg;\n \n   /* If this was an explicit signal from a \"kill\", just resignal it.  */\n   if (SI_FROMUSER (sip))"}, {"sha": "5c9b9f690b44a7ef073be236b93ca56e404411d7", "filename": "gcc/ada/tracebak.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2Ftracebak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e97c30aaa713e64309e3c0df2592f56e2a26e70e/gcc%2Fada%2Ftracebak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftracebak.c?ref=e97c30aaa713e64309e3c0df2592f56e2a26e70e", "patch": "@@ -327,7 +327,9 @@ extern unsigned int _image_base__;\n #define VALID_STACK_FRAME(ptr) 1\n #endif\n \n+#ifndef MAX\n #define MAX(x,y) ((x) > (y) ? (x) : (y))\n+#endif\n \n /* Define a dummy function to call if FORCE_CALL is defined.  Don't\n    define it otherwise, as this could lead to \"defined but not used\""}]}