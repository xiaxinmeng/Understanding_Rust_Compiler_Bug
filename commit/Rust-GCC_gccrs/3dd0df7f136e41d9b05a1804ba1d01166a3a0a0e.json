{"sha": "3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RkMGRmN2YxMzZlNDFkOWIwNWExODA0YmExZDAxMTY2YTNhMGEwZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-01-18T02:48:17Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-01-18T02:48:17Z"}, "message": "i386.c (COSTS_N_BYTES): New macro.\n\n\n\t* config/i386/i386.c (COSTS_N_BYTES): New macro.\n\t(size_cost): Encode costs in bytes so that a reg-reg addition is\n\tequivalent to COSTS_N_INSNS(1).\n\t(override_options): Use the size_cost.branch_cost as the default\n\tix86_branch_cost when optimizing for size.\n\nFrom-SVN: r109867", "tree": {"sha": "1c0dbff3441372f8842a70d08c047e023d3cd63b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c0dbff3441372f8842a70d08c047e023d3cd63b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e/comments", "author": null, "committer": null, "parents": [{"sha": "c637eb15a2b0df85f831b3a38dd20e189533684d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c637eb15a2b0df85f831b3a38dd20e189533684d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c637eb15a2b0df85f831b3a38dd20e189533684d"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "562486cc3f2e292f4bbaafec5b0c036e660d319a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e", "patch": "@@ -1,3 +1,11 @@\n+2006-01-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.c (COSTS_N_BYTES): New macro.\n+\t(size_cost): Encode costs in bytes so that a reg-reg addition is\n+\tequivalent to COSTS_N_INSNS(1).\n+\t(override_options): Use the size_cost.branch_cost as the default\n+\tix86_branch_cost when optimizing for size.\n+\n 2006-01-18  Ben Elliston  <bje@au.ibm.com>\t\n \n \t* Makefile.in (D32PBIT_FUNCS): New."}, {"sha": "f4838de8d4b2755c7c3cefe03915ad279e742654", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3dd0df7f136e41d9b05a1804ba1d01166a3a0a0e", "patch": "@@ -63,25 +63,28 @@ Boston, MA 02110-1301, USA.  */\n    : 4)\n \n /* Processor costs (relative to an add) */\n+/* We assume COSTS_N_INSNS is defined as (N)*4 and an addition is 2 bytes.  */\n+#define COSTS_N_BYTES(N) ((N) * 2)\n+\n static const\n struct processor_costs size_cost = {\t/* costs for tunning for size */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of an add instruction */\n-  COSTS_N_INSNS (3),\t\t\t/* cost of a lea instruction */\n-  COSTS_N_INSNS (2),\t\t\t/* variable shift costs */\n-  COSTS_N_INSNS (3),\t\t\t/* constant shift costs */\n-  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n-   COSTS_N_INSNS (3),\t\t\t/*                               HI */\n-   COSTS_N_INSNS (3),\t\t\t/*                               SI */\n-   COSTS_N_INSNS (3),\t\t\t/*                               DI */\n-   COSTS_N_INSNS (5)},\t\t\t/*                               other */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of an add instruction */\n+  COSTS_N_BYTES (3),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_BYTES (2),\t\t\t/* variable shift costs */\n+  COSTS_N_BYTES (3),\t\t\t/* constant shift costs */\n+  {COSTS_N_BYTES (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_BYTES (3),\t\t\t/*                               HI */\n+   COSTS_N_BYTES (3),\t\t\t/*                               SI */\n+   COSTS_N_BYTES (3),\t\t\t/*                               DI */\n+   COSTS_N_BYTES (5)},\t\t\t/*                            other */\n   0,\t\t\t\t\t/* cost of multiply per each bit set */\n-  {COSTS_N_INSNS (3),\t\t\t/* cost of a divide/mod for QI */\n-   COSTS_N_INSNS (3),\t\t\t/*                          HI */\n-   COSTS_N_INSNS (3),\t\t\t/*                          SI */\n-   COSTS_N_INSNS (3),\t\t\t/*                          DI */\n-   COSTS_N_INSNS (5)},\t\t\t/*                          other */\n-  COSTS_N_INSNS (3),\t\t\t/* cost of movsx */\n-  COSTS_N_INSNS (3),\t\t\t/* cost of movzx */\n+  {COSTS_N_BYTES (3),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_BYTES (3),\t\t\t/*                          HI */\n+   COSTS_N_BYTES (3),\t\t\t/*                          SI */\n+   COSTS_N_BYTES (3),\t\t\t/*                          DI */\n+   COSTS_N_BYTES (5)},\t\t\t/*                       other */\n+  COSTS_N_BYTES (3),\t\t\t/* cost of movsx */\n+  COSTS_N_BYTES (3),\t\t\t/* cost of movzx */\n   0,\t\t\t\t\t/* \"large\" insn */\n   2,\t\t\t\t\t/* MOVE_RATIO */\n   2,\t\t\t\t\t/* cost for loading QImode using movzbl */\n@@ -106,13 +109,13 @@ struct processor_costs size_cost = {\t/* costs for tunning for size */\n   3,\t\t\t\t\t/* MMX or SSE register to integer */\n   0,\t\t\t\t\t/* size of prefetch block */\n   0,\t\t\t\t\t/* number of parallel prefetches */\n-  1,\t\t\t\t\t/* Branch cost */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FADD and FSUB insns.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FMUL instruction.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FDIV instruction.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FABS instruction.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FCHS instruction.  */\n-  COSTS_N_INSNS (2),\t\t\t/* cost of FSQRT instruction.  */\n+  2,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_BYTES (2),\t\t\t/* cost of FSQRT instruction.  */\n };\n \n /* Processor costs (relative to an add) */\n@@ -1601,7 +1604,7 @@ override_options (void)\n     }\n \n   /* Validate -mbranch-cost= value, or provide default.  */\n-  ix86_branch_cost = processor_target_table[ix86_tune].cost->branch_cost;\n+  ix86_branch_cost = ix86_cost->branch_cost;\n   if (ix86_branch_cost_string)\n     {\n       i = atoi (ix86_branch_cost_string);"}]}