{"sha": "2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzZGJlYmY2Y2FlNjdlZTcwYWMwZTI5MDQyMWEyNjgxZTA0MWEzZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2010-02-28T17:07:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2010-02-28T17:07:54Z"}, "message": "re PR c++/42748 (warnings about 'mangling of 'va_list' has changed in GCC 4.4' not suppressed in sytem headers)\n\n2010-02-27  Mark Mitchell  <mark@codesourcery.com>\n\n\tPR c++/42748\n\t* cp-tree.h (push_tinst_level): Declare.\n\t(pop_tinst_level): Likewise.\n\t* pt.c (push_tinst_level): Give it external linkage.\n\t(pop_tinst_level): Likewise.\n\t* mangle.c (mangle_decl_string): Set the source location to that\n\tof the decl while mangling.\n\n2010-02-27  Mark Mitchell  <mark@codesourcery.com>\n\n\tPR c++/42748\n\t* g++.dg/abi/mangle11.C: Adjust mangling warning locations.\n\t* g++.dg/abi/mangle12.C: Likewise.\n\t* g++.dg/abi/mangle20-2.C: Likewise.\n\t* g++.dg/abi/mangle17.C: Likewise.\n\t* g++.dg/template/cond2.C: Likewise.\n\t* g++.dg/template/pr35240.C: Likewise.\n\nFrom-SVN: r157124", "tree": {"sha": "f2b4f7ef00102ad7b366dd23023b43367f88b2df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b4f7ef00102ad7b366dd23023b43367f88b2df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/comments", "author": null, "committer": null, "parents": [{"sha": "dfd65514fec4a88783219dca811b2db1adce5f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfd65514fec4a88783219dca811b2db1adce5f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfd65514fec4a88783219dca811b2db1adce5f69"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "5c2725f499210e46a6745e4a3b45d0fb907b2811", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -1,3 +1,13 @@\n+2010-02-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/42748\n+\t* cp-tree.h (push_tinst_level): Declare.\n+\t(pop_tinst_level): Likewise.\n+\t* pt.c (push_tinst_level): Give it external linkage.\n+\t(pop_tinst_level): Likewise.\n+\t* mangle.c (mangle_decl_string): Set the source location to that\n+\tof the decl while mangling.\n+\n 2010-02-27  Simon Martin  <simartin@users.sourceforge.net>\n \n \tPR c++/42054"}, {"sha": "4e1815f90fb5df12da6ef61e1b918fdd38a8bde6", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -4965,6 +4965,8 @@ extern void make_args_non_dependent\t\t(VEC(tree,gc) *);\n extern bool reregister_specialization\t\t(tree, tree, tree);\n extern tree fold_non_dependent_expr\t\t(tree);\n extern bool explicit_class_specialization_p     (tree);\n+extern int push_tinst_level                     (tree);\n+extern void pop_tinst_level                     (void);\n extern struct tinst_level *outermost_tinst_level(void);\n extern bool parameter_of_template_p\t\t(tree, tree);\n extern void init_template_processing\t\t(void);"}, {"sha": "6196ae2edf6b682a6828c097af41c2407ffc3ace", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -3008,6 +3008,22 @@ static tree\n mangle_decl_string (const tree decl)\n {\n   tree result;\n+  location_t saved_loc = input_location;\n+  tree saved_fn = NULL_TREE;\n+  bool template_p = false;\n+\n+  if (DECL_LANG_SPECIFIC (decl) && DECL_USE_TEMPLATE (decl))\n+    {\n+      struct tinst_level *tl = current_instantiation ();\n+      if (!tl || tl->decl != decl)\n+\t{\n+\t  template_p = true;\n+\t  saved_fn = current_function_decl;\n+\t  push_tinst_level (decl);\n+\t  current_function_decl = NULL_TREE;\n+\t}\n+    }\n+  input_location = DECL_SOURCE_LOCATION (decl);\n \n   start_mangling (decl);\n \n@@ -3020,6 +3036,14 @@ mangle_decl_string (const tree decl)\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_decl_string = '%s'\\n\\n\",\n \t     IDENTIFIER_POINTER (result));\n+\n+  if (template_p)\n+    {\n+      pop_tinst_level ();\n+      current_function_decl = saved_fn;\n+    }\n+  input_location = saved_loc;\n+\n   return result;\n }\n "}, {"sha": "ef765738f7490994bacb9fe33a57eba949224144", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -119,8 +119,6 @@ static int try_one_overload (tree, tree, tree, tree, tree,\n \t\t\t     unification_kind_t, int, bool);\n static int unify (tree, tree, tree, tree, int);\n static void add_pending_template (tree);\n-static int push_tinst_level (tree);\n-static void pop_tinst_level (void);\n static tree reopen_tinst_level (struct tinst_level *);\n static tree tsubst_initializer_list (tree, tree);\n static tree get_class_bindings (tree, tree, tree);\n@@ -7013,7 +7011,7 @@ static int last_template_error_tick;\n /* We're starting to instantiate D; record the template instantiation context\n    for diagnostics and to restore it later.  */\n \n-static int\n+int\n push_tinst_level (tree d)\n {\n   struct tinst_level *new_level;\n@@ -7056,7 +7054,7 @@ push_tinst_level (tree d)\n /* We're done instantiating this template; return to the instantiation\n    context.  */\n \n-static void\n+void\n pop_tinst_level (void)\n {\n   /* Restore the filename and line number stashed away when we started"}, {"sha": "d6d79c4a214496781940b2475d55a253216f7718", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -1,3 +1,13 @@\n+2010-02-27  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/42748\n+\t* g++.dg/abi/mangle11.C: Adjust mangling warning locations.\n+\t* g++.dg/abi/mangle12.C: Likewise.\n+\t* g++.dg/abi/mangle20-2.C: Likewise.\n+\t* g++.dg/abi/mangle17.C: Likewise.\n+\t* g++.dg/template/cond2.C: Likewise.\n+\t* g++.dg/template/pr35240.C: Likewise.\n+\n 2010-02-27  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43186"}, {"sha": "3152c256f1c7388ec67041b41b9849da76b69408", "filename": "gcc/testsuite/g++.dg/abi/mangle11.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle11.C?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -1,10 +1,10 @@\n // { dg-options \"-Wabi -fabi-version=1\" }\n \n template <typename Q>\n-void f (typename Q::X) {}\n+void f (typename Q::X) {} // { dg-warning \"mangle\" }\n \n struct S {\n   typedef int X;\n };\n \n-template void f<S> (int); // { dg-warning \"mangle\" }\n+template void f<S> (int); // { dg-message \"instantiated\" }"}, {"sha": "3910cfc93ebf2155768b7d09972b318de1cdb9d3", "filename": "gcc/testsuite/g++.dg/abi/mangle12.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle12.C?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -1,11 +1,11 @@\n // { dg-options \"-Wabi -fabi-version=1\" }\n \n template <template <typename> class Q>\n-void f (typename Q<int>::X) {}\n+void f (typename Q<int>::X) {} // { dg-warning \"mangle\" }\n \n template <typename Q>\n struct S {\n   typedef int X;\n };\n \n-template void f<S> (int);  // { dg-warning \"mangle\" }\n+template void f<S> (int);  // { dg-message \"instantiated\" }"}, {"sha": "57f1a045c826128d29077ac744222b8baacd7df3", "filename": "gcc/testsuite/g++.dg/abi/mangle17.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle17.C?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -4,8 +4,8 @@ enum E { e = 3 };\n \n template <int I> struct S {};\n \n-template <int I> void f (S<I + e + int (3.7)>) {}\n-template void f<7>(S<7 + e + int (3.7)>); // { dg-warning \"mangle\" }\n+template <int I> void f (S<I + e + int (3.7)>) {} // { dg-warning \"mangle\" }\n+template void f<7>(S<7 + e + int (3.7)>); // { dg-message \"instantiated\" }\n \n-template <int I> void g (S<I + e + int (3.7)>) {}\n-template void g<7>(S<7 + e + int (3.7)>); // { dg-warning \"mangle\" }\n+template <int I> void g (S<I + e + int (3.7)>) {} // { dg-warning \"mangle\" }\n+template void g<7>(S<7 + e + int (3.7)>); // { dg-message \"instantiated\" }"}, {"sha": "b244e2e794e09d9569e1a3ac66c04f1f9083a25d", "filename": "gcc/testsuite/g++.dg/abi/mangle20-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle20-2.C?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -7,10 +7,10 @@\n // PR 9043\n // mangled array types in templates\n \n-template <int I> void f(int (*)[2]) {}\n+template <int I> void f(int (*)[2]) {} // { dg-warning \"mangled name\" }\n template <int I> void g(int (*)[I+2]) {}\n \n-template void f<1>(int (*)[2]);  // { dg-warning \"mangled name\" }\n+template void f<1>(int (*)[2]);  // { dg-message \"instantiated\" }\n //  { dg-final { scan-assembler \"\\n_?_Z1fILi1EEvPALi2E_i\\[: \\t\\n\\]\" } }\n template void g<1>(int (*)[3]);\n //  { dg-final { scan-assembler \"\\n_?_Z1gILi1EEvPAplT_Li2E_i\\[: \\t\\n\\]\" } }"}, {"sha": "cf8df8cd9a7e8a1099dc7d6d64e294a6cf7d2837", "filename": "gcc/testsuite/g++.dg/template/cond2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcond2.C?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -3,8 +3,8 @@\n \n template<int X> class c;\n \n-template<int X, int Y> int test(c<X ? : Y>&);\n+template<int X, int Y> int test(c<X ? : Y>&); // { dg-error \"omitted\" }\n \n void test(c<2>*c2) {\n-\ttest<0, 2>(*c2); // { dg-error \"omitted\" }\n+\ttest<0, 2>(*c2); // { dg-message \"instantiated\" }\t\n }"}, {"sha": "47455b6583b00b97247184b96dc49e7013c4e463", "filename": "gcc/testsuite/g++.dg/template/pr35240.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3dbebf6cae67ee70ac0e290421a2681e041a3d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr35240.C?ref=2a3dbebf6cae67ee70ac0e290421a2681e041a3d", "patch": "@@ -4,9 +4,9 @@\n \n template<int> struct A {};\n \n-template<int N> A<sizeof(new int[N][N])> foo();\n+template<int N> A<sizeof(new int[N][N])> foo(); // { dg-message \"unimplemented\" }\n \n void bar()\n {\n-  foo<1>(); // { dg-message \"unimplemented\" }\n+  foo<1>(); // { dg-message \"instantiated\" }\n }"}]}