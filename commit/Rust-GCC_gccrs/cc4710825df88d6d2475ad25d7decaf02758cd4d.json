{"sha": "cc4710825df88d6d2475ad25d7decaf02758cd4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M0NzEwODI1ZGY4OGQ2ZDI0NzVhZDI1ZDdkZWNhZjAyNzU4Y2Q0ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-21T13:33:38Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-21T13:33:38Z"}, "message": "(make_extraction): Make test whether to use AND or\n{SIGN,ZERO}_EXTRACT depend on UNSIGNEDP.\n\nFrom-SVN: r2202", "tree": {"sha": "927d5f8252f40f6844854624b26eca27cffec5c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/927d5f8252f40f6844854624b26eca27cffec5c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc4710825df88d6d2475ad25d7decaf02758cd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4710825df88d6d2475ad25d7decaf02758cd4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc4710825df88d6d2475ad25d7decaf02758cd4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc4710825df88d6d2475ad25d7decaf02758cd4d/comments", "author": null, "committer": null, "parents": [{"sha": "e404a39a9c7a3867132194bc09c37fa94cf80f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e404a39a9c7a3867132194bc09c37fa94cf80f86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e404a39a9c7a3867132194bc09c37fa94cf80f86"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "05c7c94aa1d0669ec805a230b55bd39a741e0346", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc4710825df88d6d2475ad25d7decaf02758cd4d/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc4710825df88d6d2475ad25d7decaf02758cd4d/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=cc4710825df88d6d2475ad25d7decaf02758cd4d", "patch": "@@ -4631,10 +4631,10 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \t\t\t\t mode, new));\n     }\n \n-  /* Unless this isin a COMPARE or we have a funny memory reference,\n-     don't do anything with field extracts starting at the low-order\n-     bit since they are simple AND operations.  */\n-  if (pos == 0 && ! in_dest && ! in_compare && ! spans_byte)\n+  /* Unless this is a COMPARE or we have a funny memory reference,\n+     don't do anything with zero-extending field extracts starting at\n+     the low-order bit since they are simple AND operations.  */\n+  if (pos == 0 && ! in_dest && ! in_compare && ! spans_byte && unsignedp)\n     return 0;\n \n   /* Get the mode to use should INNER be a MEM, the mode for the position,"}]}