{"sha": "a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYwZDk4ODkwYmJhNTg2NDljMjZjMmZjMGM2ZjI4Y2Q2MDczYWFhZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-11T15:52:40Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-11T18:37:09Z"}, "message": "analyzer: fix ICE due to missing state_change purging (PR 93374)\n\nPR analyzer/93374 reports an ICE within state_change::validate due to an\nm_new_sid in a recorded state-change being out of range of the svalues\nof the region_model of the new state.\n\nDuring get_or_create_node we attempt to merge the new state with the\nstate of each of the existing enodes at the program point (in the\nabsence of sm-state differences), simplifying the state at each\nattempt, and potentially reusing a node if we get a match.\n\nThis state-merging invalidates any svalue_ids within any state_change\nobject.\n\nThe root cause is that, although the code was purging any such\nsvalue_ids for the case where no match was found during merging, it was\nfailing to purge them for the case where a matching enode *was* found\nfor the merged state, leading to an invalid state_change along the\nexploded_edge to the reused enode.\n\nThis patch moves the invalidation code to cover both cases, fixing the\nICE.  It also extends state_change validation so that states are also\nchecked.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93374\n\t* engine.cc (exploded_edge::exploded_edge): Add ext_state param\n\tand pass it to change.validate.\n\t(exploded_graph::get_or_create_node): Move purging of change\n\tsvalues to also cover the case of reusing an existing enode.\n\t(exploded_graph::add_edge): Pass m_ext_state to exploded_edge's\n\tctor.\n\t* exploded-graph.h (exploded_edge::exploded_edge): Add ext_state\n\tparam.\n\t* program-state.cc (state_change::sm_change::validate): Likewise.\n\tAssert that m_sm_idx is sane.  Use ext_state to validate\n\tm_old_state and m_new_state.\n\t(state_change::validate): Add ext_state param and pass it to\n\tthe sm_change validate calls.\n\t* program-state.h (state_change::sm_change::validate): Add\n\text_state param.\n\t(state_change::validate): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93374\n\t* gcc.dg/analyzer/torture/pr93374.c: New test.", "tree": {"sha": "4190ab686737a81d48cae59ee72740f5d0abcffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4190ab686737a81d48cae59ee72740f5d0abcffa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0e4929b0461226722d6d08b1fdc2852b9100b75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4929b0461226722d6d08b1fdc2852b9100b75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e4929b0461226722d6d08b1fdc2852b9100b75"}], "stats": {"total": 67, "additions": 52, "deletions": 15}, "files": [{"sha": "0313e437f34c161e188506d15cf5e1082e0e3c47", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -1,3 +1,23 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93374\n+\t* engine.cc (exploded_edge::exploded_edge): Add ext_state param\n+\tand pass it to change.validate.\n+\t(exploded_graph::get_or_create_node): Move purging of change\n+\tsvalues to also cover the case of reusing an existing enode.\n+\t(exploded_graph::add_edge): Pass m_ext_state to exploded_edge's\n+\tctor.\n+\t* exploded-graph.h (exploded_edge::exploded_edge): Add ext_state\n+\tparam.\n+\t* program-state.cc (state_change::sm_change::validate): Likewise.\n+\tAssert that m_sm_idx is sane.  Use ext_state to validate\n+\tm_old_state and m_new_state.\n+\t(state_change::validate): Add ext_state param and pass it to\n+\tthe sm_change validate calls.\n+\t* program-state.h (state_change::sm_change::validate): Add\n+\text_state param.\n+\t(state_change::validate): Likewise.\n+\n 2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93669"}, {"sha": "4d329e2b6af59be05d04d69152a5aaf24a60bd51", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -1398,13 +1398,14 @@ rewind_info_t::add_events_to_path (checker_path *emission_path,\n /* exploded_edge's ctor.  */\n \n exploded_edge::exploded_edge (exploded_node *src, exploded_node *dest,\n+\t\t\t      const extrinsic_state &ext_state,\n \t\t\t      const superedge *sedge,\n \t\t\t      const state_change &change,\n \t\t\t      custom_info_t *custom_info)\n : dedge<eg_traits> (src, dest), m_sedge (sedge), m_change (change),\n   m_custom_info (custom_info)\n {\n-  change.validate (dest->get_state ());\n+  change.validate (dest->get_state (), ext_state);\n }\n \n /* exploded_edge's dtor.  */\n@@ -1898,8 +1899,14 @@ exploded_graph::get_or_create_node (const program_point &point,\n \t\tlogger->log (\"merging new state with that of EN: %i\",\n \t\t\t     existing_enode->m_index);\n \n-\t      /* Try again for a cache hit.  */\n+\t      /* Try again for a cache hit.\n+\t\t Whether we get one or not, merged_state's value_ids have no\n+\t\t relationship to those of the input state, and thus to those\n+\t\t of CHANGE, so we must purge any svalue_ids from *CHANGE.  */\n \t      ps.set_state (merged_state);\n+\t      if (change)\n+\t\tchange->on_svalue_purge (svalue_id::from_int (0));\n+\n \t      if (exploded_node **slot = m_point_and_state_to_node.get (&ps))\n \t\t{\n \t\t  /* An exploded_node for PS already exists.  */\n@@ -1910,13 +1917,6 @@ exploded_graph::get_or_create_node (const program_point &point,\n \t\t  per_cs_stats->m_node_reuse_after_merge_count++;\n \t\t  return *slot;\n \t\t}\n-\n-\t      /* Otherwise, continue, using the merged state in \"ps\".\n-\t\t Given that merged_state's svalue_ids have no relationship\n-\t\t to those of the input state, and thus to those of CHANGE,\n-\t\t purge any svalue_ids from *CHANGE.  */\n-\t      if (change)\n-\t\tchange->on_svalue_purge (svalue_id::from_int (0));\n \t    }\n \t  else\n \t    if (logger)\n@@ -1986,7 +1986,8 @@ exploded_graph::add_edge (exploded_node *src, exploded_node *dest,\n \t\t\t  const state_change &change,\n \t\t\t  exploded_edge::custom_info_t *custom_info)\n {\n-  exploded_edge *e = new exploded_edge (src, dest, sedge, change, custom_info);\n+  exploded_edge *e = new exploded_edge (src, dest, m_ext_state,\n+\t\t\t\t\tsedge, change, custom_info);\n   digraph<eg_traits>::add_edge (e);\n   return e;\n }"}, {"sha": "5d69bffddddde3083cbae64d560eeb402b2a36bd", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -306,6 +306,7 @@ class exploded_edge : public dedge<eg_traits>\n   };\n \n   exploded_edge (exploded_node *src, exploded_node *dest,\n+\t\t const extrinsic_state &ext_state,\n \t\t const superedge *sedge,\n \t\t const state_change &change,\n \t\t custom_info_t *custom_info);"}, {"sha": "82b921eb969d6d6c3cad9ceff474dea9ca685573", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -1083,8 +1083,13 @@ state_change::sm_change::on_svalue_purge (svalue_id first_unused_sid)\n /* Assert that this object is sane.  */\n \n void\n-state_change::sm_change::validate (const program_state &new_state) const\n+state_change::sm_change::validate (const program_state &new_state,\n+\t\t\t\t   const extrinsic_state &ext_state) const\n {\n+  gcc_assert ((unsigned)m_sm_idx < ext_state.get_num_checkers ());\n+  const state_machine &sm = ext_state.get_sm (m_sm_idx);\n+  sm.validate (m_old_state);\n+  sm.validate (m_new_state);\n   m_new_sid.validate (*new_state.m_region_model);\n }\n \n@@ -1191,7 +1196,8 @@ state_change::on_svalue_purge (svalue_id first_unused_sid)\n /* Assert that this object is sane.  */\n \n void\n-state_change::validate (const program_state &new_state) const\n+state_change::validate (const program_state &new_state,\n+\t\t\tconst extrinsic_state &ext_state) const\n {\n   /* Skip this in a release build.  */\n #if !CHECKING_P\n@@ -1200,7 +1206,7 @@ state_change::validate (const program_state &new_state) const\n   unsigned i;\n   sm_change *change;\n   FOR_EACH_VEC_ELT (m_sm_changes, i, change)\n-    change->validate (new_state);\n+    change->validate (new_state, ext_state);\n }\n \n #if CHECKING_P"}, {"sha": "a4608c7498d09cc7230bb53d1a2b4f78c8f3ea07", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -343,7 +343,8 @@ class state_change\n     void remap_svalue_ids (const svalue_id_map &map);\n     int on_svalue_purge (svalue_id first_unused_sid);\n \n-    void validate (const program_state &new_state) const;\n+    void validate (const program_state &new_state,\n+\t\t   const extrinsic_state &ext_state) const;\n \n     int m_sm_idx;\n     svalue_id m_new_sid;\n@@ -367,7 +368,8 @@ class state_change\n   void remap_svalue_ids (const svalue_id_map &map);\n   int on_svalue_purge (svalue_id first_unused_sid);\n \n-  void validate (const program_state &new_state) const;\n+  void validate (const program_state &new_state,\n+\t\t const extrinsic_state &ext_state) const;\n \n  private:\n   auto_vec<sm_change> m_sm_changes;"}, {"sha": "4f591539a9529a2047421a7e46b6281011e38e9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -1,3 +1,8 @@\n+2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93374\n+\t* gcc.dg/analyzer/torture/pr93374.c: New test.\n+\n 2020-02-11  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93669"}, {"sha": "a7adecdc872556baef6b305c722a8c7a75346493", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93374.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93374.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60d98890bba58649c26c2fc0c6f28cd6073aaaf/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93374.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93374.c?ref=a60d98890bba58649c26c2fc0c6f28cd6073aaaf", "patch": "@@ -0,0 +1,2 @@\n+#include <stdlib.h>\n+#include \"../../../gcc.c-torture/execute/pr27073.c\""}]}