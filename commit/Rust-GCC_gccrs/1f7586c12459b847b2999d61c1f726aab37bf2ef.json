{"sha": "1f7586c12459b847b2999d61c1f726aab37bf2ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY3NTg2YzEyNDU5Yjg0N2IyOTk5ZDYxYzFmNzI2YWFiMzdiZjJlZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-10T08:30:25Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-02-10T08:30:25Z"}, "message": "(duplicate_decls): Silently accept harmless mismatch\nin type of 1st arg of builtin function.\n\nFrom-SVN: r3455", "tree": {"sha": "b0a99e0400a89ecc64537df7cea7f9431ca9e87b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a99e0400a89ecc64537df7cea7f9431ca9e87b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f7586c12459b847b2999d61c1f726aab37bf2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7586c12459b847b2999d61c1f726aab37bf2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f7586c12459b847b2999d61c1f726aab37bf2ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f7586c12459b847b2999d61c1f726aab37bf2ef/comments", "author": null, "committer": null, "parents": [{"sha": "c0ce409adaecd6b37185996701358be3380a8c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ce409adaecd6b37185996701358be3380a8c35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ce409adaecd6b37185996701358be3380a8c35"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "de680e03c6464e86adfbfff03823b2b46040cafa", "filename": "gcc/c-decl.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f7586c12459b847b2999d61c1f726aab37bf2ef/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f7586c12459b847b2999d61c1f726aab37bf2ef/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1f7586c12459b847b2999d61c1f726aab37bf2ef", "patch": "@@ -1313,6 +1313,28 @@ duplicate_decls (newdecl, olddecl)\n \t\t= build_function_type (newreturntype,\n \t\t\t\t       TYPE_ARG_TYPES (TREE_TYPE (olddecl)));\n \t      \n+              types_match = comptypes (TREE_TYPE (newdecl), newtype);\n+\t      if (types_match)\n+\t\tTREE_TYPE (olddecl) = newtype;\n+\t    }\n+\t  /* Accept harmless mismatch in first argument type also.\n+\t     This is for ffs.  */\n+\t  if (TYPE_ARG_TYPES (TREE_TYPE (newdecl)) != 0\n+\t      && TYPE_ARG_TYPES (TREE_TYPE (olddecl)) != 0\n+\t      && TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (newdecl))) != 0\n+\t      && TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (olddecl))) != 0\n+\t      && (TYPE_MODE (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (newdecl))))\n+\t\t  ==\n+\t\t  TYPE_MODE (TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (olddecl))))))\n+\t    {\n+\t      /* Function types may be shared, so we can't just modify\n+\t\t the return type of olddecl's function type.  */\n+\t      tree newtype\n+\t\t= build_function_type (TREE_TYPE (TREE_TYPE (olddecl)),\n+\t\t\t\t       tree_cons (NULL_TREE, \n+\t\t\t\t\t\t  TREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (newdecl))),\n+\t\t\t\t\t\t  TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (olddecl)))));\n+\t      \n               types_match = comptypes (TREE_TYPE (newdecl), newtype);\n \t      if (types_match)\n \t\tTREE_TYPE (olddecl) = newtype;"}]}