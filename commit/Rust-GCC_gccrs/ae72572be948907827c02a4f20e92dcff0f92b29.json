{"sha": "ae72572be948907827c02a4f20e92dcff0f92b29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU3MjU3MmJlOTQ4OTA3ODI3YzAyYTRmMjBlOTJkY2ZmMGY5MmIyOQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-01-13T04:27:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-01-13T04:27:18Z"}, "message": "locale_facets.tcc (money_put::do_put(string): Correct output iterator value.\n\n\n2002-01-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.tcc (money_put::do_put(string):\n\tCorrect output iterator value.\n\t* testsuite/22_locale/money_put_members_char.cc (test03): Add.\n\t* testsuite/22_locale/money_put_members_wchar_t.cc: Same.\n\nFrom-SVN: r48809", "tree": {"sha": "95a3390381843eee93ddc7a3e11b31bcb09fdf90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95a3390381843eee93ddc7a3e11b31bcb09fdf90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae72572be948907827c02a4f20e92dcff0f92b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae72572be948907827c02a4f20e92dcff0f92b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae72572be948907827c02a4f20e92dcff0f92b29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae72572be948907827c02a4f20e92dcff0f92b29/comments", "author": null, "committer": null, "parents": [{"sha": "38b29e64779c48969dc39d3832e2f3335f10d344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38b29e64779c48969dc39d3832e2f3335f10d344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38b29e64779c48969dc39d3832e2f3335f10d344"}], "stats": {"total": 106, "additions": 100, "deletions": 6}, "files": [{"sha": "56cbc2c61878901d5a795ee1937c0f6392795f49", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae72572be948907827c02a4f20e92dcff0f92b29", "patch": "@@ -1,3 +1,10 @@\n+2002-01-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.tcc (money_put::do_put(string):\n+\tCorrect output iterator value.\n+\t* testsuite/22_locale/money_put_members_char.cc (test03): Add.\n+\t* testsuite/22_locale/money_put_members_wchar_t.cc: Same.\n+\t\n 2002-01-11  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* include/Makefile.am, include/Makefile.in (stamp-std):  Fix typo from"}, {"sha": "396f4236c4c600da49363e8a74f08e478cdb9d3a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=ae72572be948907827c02a4f20e92dcff0f92b29", "patch": "@@ -1415,8 +1415,8 @@ namespace std\n \t    }\n \n \t  // Write resulting, fully-formatted string to output iterator.\n-\t  for (size_type __j = 0; __j < __len; ++__j)\n-\t    __s = __res[__j];\n+\t  for (size_type __j = 0; __j < __len; ++__j, ++__s)\n+\t    *__s = __res[__j];\n \t}\n       __io.width(0);\n       return __s; "}, {"sha": "5e30ac75b99c74cd1cc998af59638d8fd10fa280", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=ae72572be948907827c02a4f20e92dcff0f92b29", "patch": "@@ -255,7 +255,7 @@ void test03()\n   bool test = true;\n \n   // Check money_get works with other iterators besides streambuf\n-  // output iterators.\n+  // input iterators.\n   typedef string::const_iterator iter_type;\n   typedef money_get<char, iter_type> mon_get_type;\n   const ios_base::iostate goodbit = ios_base::goodbit;"}, {"sha": "3c318cec211b3338dcfb6c849e13ac070bf32b9a", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=ae72572be948907827c02a4f20e92dcff0f92b29", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -161,7 +161,7 @@ void test01()\n   VERIFY( result11 == \"-,01****************\");\n }\n \n-// test double/string versions\n+// test double version\n void test02()\n {\n   using namespace std;\n@@ -241,9 +241,53 @@ void test02()\n   VERIFY( result4 != result2 );\n }\n \n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef string::iterator iter_type;\n+  typedef money_put<char, iter_type> mon_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  // woman, art, thief (stole the blues)\n+  const string str(\"1943 Janis Joplin\");\n+  const long double ld = 1943;\n+  const string x(str.size(), 'x'); // have to have allocated string!\n+  string res;\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new mon_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_put_type& mp = use_facet<mon_put_type>(oss.getloc());\n+\n+  // 01 string\n+  res = x;\n+  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n+  string sanity1(res.begin(), ret1);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == \"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity1 == \"1943\" );\n+\n+  // 02 long double\n+  res = x;\n+  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n+  string sanity2(res.begin(), ret2);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == \"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity2 == \"1943\" );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }\n+"}, {"sha": "36dde8ceef45ac38ddd9fb837fb22f5821c6baec", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae72572be948907827c02a4f20e92dcff0f92b29/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=ae72572be948907827c02a4f20e92dcff0f92b29", "patch": "@@ -1,6 +1,6 @@\n // 2001-09-09 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001-2002 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -240,13 +240,56 @@ void test02()\n   VERIFY( result3 != result1 );\n   VERIFY( result4 != result2 );\n }\n+\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::iterator iter_type;\n+  typedef money_put<wchar_t, iter_type> mon_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  // woman, art, thief (stole the blues)\n+  const wstring str(L\"1943 Janis Joplin\");\n+  const long double ld = 1943;\n+  const wstring x(str.size(), 'x'); // have to have allocated string!\n+  wstring res;\n+\n+  wostringstream oss; \n+  oss.imbue(locale(loc_c, new mon_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_put_type& mp = use_facet<mon_put_type>(oss.getloc());\n+\n+  // 01 string\n+  res = x;\n+  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n+  wstring sanity1(res.begin(), ret1);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity1 == L\"1943\" );\n+\n+  // 02 long double\n+  res = x;\n+  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n+  wstring sanity2(res.begin(), ret2);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity2 == L\"1943\" );\n+}\n #endif\n \n int main()\n {\n #ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n   test02();\n+  test03();\n #endif\n   return 0;\n }"}]}