{"sha": "ff35822bcaee33bd891e85d24997df36b79b8b9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzNTgyMmJjYWVlMzNiZDg5MWU4NWQyNDk5N2RmMzZiNzliOGI5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2009-06-03T17:28:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2009-06-03T17:28:00Z"}, "message": "rs6000.c (rs6000_emit_stack_reset): Return generated insn if it is changing sp.\n\n\t* config/rs6000/rs6000.c (rs6000_emit_stack_reset): Return generated\n\tinsn if it is changing sp.  Use gen_add3_insn instead of\n\tconditionally gen_addsi3 and gen_adddi3.\n\t(offset_below_red_zone_p): New static inline function.\n\t(rs6000_emit_epilogue): Emit needed epilogue unwind info.\n\tUse gen_add3_insn instead of conditionally gen_addsi3 and gen_adddi3.\n\t* config/rs6000/ppc-asm.h: Include auto-host.h.\n\t(CFI_STARTPROC, CFI_ENDPROC, CFI_DEF_CFA_REGISTER, CFI_OFFSET,\n\tCFI_RESTORE): Define.\n\t* config/rs6000/crtresxgpr.asm: Add unwind info.\n\t* config/rs6000/crtresxfpr.asm: Likewise.\n\t* config/rs6000/crtresgpr.asm: Likewise.\n\t* config/rs6000/crtresfpr.asm: Likewise.\n\t* config/rs6000/crtsavgpr.asm: Likewise.\n\t* config/rs6000/crtsavfpr.asm: Likewise.\n\nFrom-SVN: r148138", "tree": {"sha": "e049f32c032a09bc09477d8ce5d2be25b8f3551d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e049f32c032a09bc09477d8ce5d2be25b8f3551d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff35822bcaee33bd891e85d24997df36b79b8b9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35822bcaee33bd891e85d24997df36b79b8b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff35822bcaee33bd891e85d24997df36b79b8b9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff35822bcaee33bd891e85d24997df36b79b8b9e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "679f33542d44db0fa075109810ee8f73becb3a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679f33542d44db0fa075109810ee8f73becb3a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679f33542d44db0fa075109810ee8f73becb3a58"}], "stats": {"total": 352, "additions": 287, "deletions": 65}, "files": [{"sha": "e28fd41818e12195de5088be4394913e7beb0269", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -1,5 +1,21 @@\n 2009-06-03  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/rs6000/rs6000.c (rs6000_emit_stack_reset): Return generated\n+\tinsn if it is changing sp.  Use gen_add3_insn instead of\n+\tconditionally gen_addsi3 and gen_adddi3.\n+\t(offset_below_red_zone_p): New static inline function.\n+\t(rs6000_emit_epilogue): Emit needed epilogue unwind info.\n+\tUse gen_add3_insn instead of conditionally gen_addsi3 and gen_adddi3.\n+\t* config/rs6000/ppc-asm.h: Include auto-host.h.\n+\t(CFI_STARTPROC, CFI_ENDPROC, CFI_DEF_CFA_REGISTER, CFI_OFFSET,\n+\tCFI_RESTORE): Define.\n+\t* config/rs6000/crtresxgpr.asm: Add unwind info.\n+\t* config/rs6000/crtresxfpr.asm: Likewise.\n+\t* config/rs6000/crtresgpr.asm: Likewise.\n+\t* config/rs6000/crtresfpr.asm: Likewise.\n+\t* config/rs6000/crtsavgpr.asm: Likewise.\n+\t* config/rs6000/crtsavfpr.asm: Likewise.\n+\n \t* dwarf2out.c (output_cfi_directive): Pass 1 instead of\n \t0 to second argument of DWARF2_FRAME_REG_OUT macros.\n "}, {"sha": "9fb228cf4581dc0e04f3e6b3708c98e1cf56ee2d", "filename": "gcc/config/rs6000/crtresfpr.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresfpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresfpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresfpr.asm?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -38,6 +38,7 @@\n /* Called with r11 pointing to the stack header word of the caller of the */\n /* function, just beyond the end of the floating point save area.  */\n \n+CFI_STARTPROC\n HIDDEN_FUNC(_restfpr_14)\tlfd\t14,-144(11)\t/* restore fp registers */\n HIDDEN_FUNC(_restfpr_15)\tlfd\t15,-136(11)\n HIDDEN_FUNC(_restfpr_16)\tlfd\t16,-128(11)\n@@ -75,5 +76,6 @@ FUNC_END(_restfpr_17)\n FUNC_END(_restfpr_16)\n FUNC_END(_restfpr_15)\n FUNC_END(_restfpr_14)\n+CFI_ENDPROC\n \n #endif"}, {"sha": "9f9cec9f9cae4e911797330dbff897e1ca8e49d3", "filename": "gcc/config/rs6000/crtresgpr.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresgpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresgpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresgpr.asm?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -38,6 +38,7 @@\n /* Called with r11 pointing to the stack header word of the caller of the */\n /* function, just beyond the end of the integer restore area.  */\n \n+CFI_STARTPROC\n HIDDEN_FUNC(_restgpr_14)\tlwz\t14,-72(11)\t/* restore gp registers */\n HIDDEN_FUNC(_restgpr_15)\tlwz\t15,-68(11)\n HIDDEN_FUNC(_restgpr_16)\tlwz\t16,-64(11)\n@@ -75,5 +76,6 @@ FUNC_END(_restgpr_17)\n FUNC_END(_restgpr_16)\n FUNC_END(_restgpr_15)\n FUNC_END(_restgpr_14)\n+CFI_ENDPROC\n \n #endif"}, {"sha": "633f2db61f07b5b9a2f09c31c750af94e5a56fc9", "filename": "gcc/config/rs6000/crtresxfpr.asm", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresxfpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresxfpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresxfpr.asm?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -40,27 +40,68 @@\n /* In addition to restoring the fp registers, it will return to the caller's */\n /* caller */\n \n+CFI_STARTPROC\n+CFI_DEF_CFA_REGISTER (11)\n+CFI_OFFSET (65, 4)\n+CFI_OFFSET (46, -144)\n+CFI_OFFSET (47, -136)\n+CFI_OFFSET (48, -128)\n+CFI_OFFSET (49, -120)\n+CFI_OFFSET (50, -112)\n+CFI_OFFSET (51, -104)\n+CFI_OFFSET (52, -96)\n+CFI_OFFSET (53, -88)\n+CFI_OFFSET (54, -80)\n+CFI_OFFSET (55, -72)\n+CFI_OFFSET (56, -64)\n+CFI_OFFSET (57, -56)\n+CFI_OFFSET (58, -48)\n+CFI_OFFSET (59, -40)\n+CFI_OFFSET (60, -32)\n+CFI_OFFSET (61, -24)\n+CFI_OFFSET (62, -16)\n+CFI_OFFSET (63, -8)\n HIDDEN_FUNC(_restfpr_14_x)\tlfd\t14,-144(11)\t/* restore fp registers */\n+CFI_RESTORE (46)\n HIDDEN_FUNC(_restfpr_15_x)\tlfd\t15,-136(11)\n+CFI_RESTORE (47)\n HIDDEN_FUNC(_restfpr_16_x)\tlfd\t16,-128(11)\n+CFI_RESTORE (48)\n HIDDEN_FUNC(_restfpr_17_x)\tlfd\t17,-120(11)\n+CFI_RESTORE (49)\n HIDDEN_FUNC(_restfpr_18_x)\tlfd\t18,-112(11)\n+CFI_RESTORE (50)\n HIDDEN_FUNC(_restfpr_19_x)\tlfd\t19,-104(11)\n+CFI_RESTORE (51)\n HIDDEN_FUNC(_restfpr_20_x)\tlfd\t20,-96(11)\n+CFI_RESTORE (52)\n HIDDEN_FUNC(_restfpr_21_x)\tlfd\t21,-88(11)\n+CFI_RESTORE (53)\n HIDDEN_FUNC(_restfpr_22_x)\tlfd\t22,-80(11)\n+CFI_RESTORE (54)\n HIDDEN_FUNC(_restfpr_23_x)\tlfd\t23,-72(11)\n+CFI_RESTORE (55)\n HIDDEN_FUNC(_restfpr_24_x)\tlfd\t24,-64(11)\n+CFI_RESTORE (56)\n HIDDEN_FUNC(_restfpr_25_x)\tlfd\t25,-56(11)\n+CFI_RESTORE (57)\n HIDDEN_FUNC(_restfpr_26_x)\tlfd\t26,-48(11)\n+CFI_RESTORE (58)\n HIDDEN_FUNC(_restfpr_27_x)\tlfd\t27,-40(11)\n+CFI_RESTORE (59)\n HIDDEN_FUNC(_restfpr_28_x)\tlfd\t28,-32(11)\n+CFI_RESTORE (60)\n HIDDEN_FUNC(_restfpr_29_x)\tlfd\t29,-24(11)\n+CFI_RESTORE (61)\n HIDDEN_FUNC(_restfpr_30_x)\tlfd\t30,-16(11)\n+CFI_RESTORE (62)\n HIDDEN_FUNC(_restfpr_31_x)\tlwz\t0,4(11)\n \t\t\t\tlfd\t31,-8(11)\n+CFI_RESTORE (63)\n \t\t\t\tmtlr\t0\n+CFI_RESTORE (65)\n \t\t\t\tmr\t1,11\n+CFI_DEF_CFA_REGISTER (1)\n \t\t\t\tblr\n FUNC_END(_restfpr_31_x)\n FUNC_END(_restfpr_30_x)\n@@ -80,5 +121,6 @@ FUNC_END(_restfpr_17_x)\n FUNC_END(_restfpr_16_x)\n FUNC_END(_restfpr_15_x)\n FUNC_END(_restfpr_14_x)\n+CFI_ENDPROC\n \n #endif"}, {"sha": "451b2b69d1efbd8b8c190dbaebd1f5e3dec19ee2", "filename": "gcc/config/rs6000/crtresxgpr.asm", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresxgpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtresxgpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtresxgpr.asm?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -38,27 +38,68 @@\n /* Called with r11 pointing to the stack header word of the caller of the */\n /* function, just beyond the end of the integer restore area.  */\n \n+CFI_STARTPROC\n+CFI_DEF_CFA_REGISTER (11)\n+CFI_OFFSET (65, 4)\n+CFI_OFFSET (14, -72)\n+CFI_OFFSET (15, -68)\n+CFI_OFFSET (16, -64)\n+CFI_OFFSET (17, -60)\n+CFI_OFFSET (18, -56)\n+CFI_OFFSET (19, -52)\n+CFI_OFFSET (20, -48)\n+CFI_OFFSET (21, -44)\n+CFI_OFFSET (22, -40)\n+CFI_OFFSET (23, -36)\n+CFI_OFFSET (24, -32)\n+CFI_OFFSET (25, -28)\n+CFI_OFFSET (26, -24)\n+CFI_OFFSET (27, -20)\n+CFI_OFFSET (28, -16)\n+CFI_OFFSET (29, -12)\n+CFI_OFFSET (30, -8)\n+CFI_OFFSET (31, -4)\n HIDDEN_FUNC(_restgpr_14_x)\tlwz\t14,-72(11)\t/* restore gp registers */\n+CFI_RESTORE (14)\n HIDDEN_FUNC(_restgpr_15_x)\tlwz\t15,-68(11)\n+CFI_RESTORE (15)\n HIDDEN_FUNC(_restgpr_16_x)\tlwz\t16,-64(11)\n+CFI_RESTORE (16)\n HIDDEN_FUNC(_restgpr_17_x)\tlwz\t17,-60(11)\n+CFI_RESTORE (17)\n HIDDEN_FUNC(_restgpr_18_x)\tlwz\t18,-56(11)\n+CFI_RESTORE (18)\n HIDDEN_FUNC(_restgpr_19_x)\tlwz\t19,-52(11)\n+CFI_RESTORE (19)\n HIDDEN_FUNC(_restgpr_20_x)\tlwz\t20,-48(11)\n+CFI_RESTORE (20)\n HIDDEN_FUNC(_restgpr_21_x)\tlwz\t21,-44(11)\n+CFI_RESTORE (21)\n HIDDEN_FUNC(_restgpr_22_x)\tlwz\t22,-40(11)\n+CFI_RESTORE (22)\n HIDDEN_FUNC(_restgpr_23_x)\tlwz\t23,-36(11)\n+CFI_RESTORE (23)\n HIDDEN_FUNC(_restgpr_24_x)\tlwz\t24,-32(11)\n+CFI_RESTORE (24)\n HIDDEN_FUNC(_restgpr_25_x)\tlwz\t25,-28(11)\n+CFI_RESTORE (25)\n HIDDEN_FUNC(_restgpr_26_x)\tlwz\t26,-24(11)\n+CFI_RESTORE (26)\n HIDDEN_FUNC(_restgpr_27_x)\tlwz\t27,-20(11)\n+CFI_RESTORE (27)\n HIDDEN_FUNC(_restgpr_28_x)\tlwz\t28,-16(11)\n+CFI_RESTORE (28)\n HIDDEN_FUNC(_restgpr_29_x)\tlwz\t29,-12(11)\n+CFI_RESTORE (29)\n HIDDEN_FUNC(_restgpr_30_x)\tlwz\t30,-8(11)\n+CFI_RESTORE (30)\n HIDDEN_FUNC(_restgpr_31_x)\tlwz\t0,4(11)\n \t\t\t\tlwz\t31,-4(11)\n+CFI_RESTORE (31)\n \t\t\t\tmtlr\t0\n+CFI_RESTORE (65)\n \t\t\t\tmr\t1,11\n+CFI_DEF_CFA_REGISTER (1)\n \t\t\t\tblr\n FUNC_END(_restgpr_31_x)\n FUNC_END(_restgpr_30_x)\n@@ -78,5 +119,6 @@ FUNC_END(_restgpr_17_x)\n FUNC_END(_restgpr_16_x)\n FUNC_END(_restgpr_15_x)\n FUNC_END(_restgpr_14_x)\n+CFI_ENDPROC\n \n #endif"}, {"sha": "3cdb25033cae4a711bfdc74cdd4e6d33635527ce", "filename": "gcc/config/rs6000/crtsavfpr.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtsavfpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtsavfpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtsavfpr.asm?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -38,6 +38,7 @@\n /* Called with r11 pointing to the stack header word of the caller of the */\n /* function, just beyond the end of the floating point save area.  */\n \n+CFI_STARTPROC\n HIDDEN_FUNC(_savefpr_14)\tstfd\t14,-144(11)\t/* save fp registers */\n HIDDEN_FUNC(_savefpr_15)\tstfd\t15,-136(11)\n HIDDEN_FUNC(_savefpr_16)\tstfd\t16,-128(11)\n@@ -75,5 +76,6 @@ FUNC_END(_savefpr_17)\n FUNC_END(_savefpr_16)\n FUNC_END(_savefpr_15)\n FUNC_END(_savefpr_14)\n+CFI_ENDPROC\n \n #endif"}, {"sha": "6d473963bad7be4deccbf9d3771918bc149e6c4c", "filename": "gcc/config/rs6000/crtsavgpr.asm", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtsavgpr.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fcrtsavgpr.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fcrtsavgpr.asm?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -38,6 +38,7 @@\n /* Called with r11 pointing to the stack header word of the caller of the */\n /* function, just beyond the end of the integer save area.  */\n \n+CFI_STARTPROC\n HIDDEN_FUNC(_savegpr_14)\tstw\t14,-72(11)\t/* save gp registers */\n HIDDEN_FUNC(_savegpr_15)\tstw\t15,-68(11)\n HIDDEN_FUNC(_savegpr_16)\tstw\t16,-64(11)\n@@ -75,5 +76,6 @@ FUNC_END(_savegpr_17)\n FUNC_END(_savegpr_16)\n FUNC_END(_savegpr_15)\n FUNC_END(_savegpr_14)\n+CFI_ENDPROC\n \n #endif"}, {"sha": "575187c32653a2e75c959b20b8bc4c415f183303", "filename": "gcc/config/rs6000/ppc-asm.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fppc-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Fppc-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppc-asm.h?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -1,6 +1,6 @@\n /* PowerPC asm definitions for GNU C.\n \n-Copyright (C) 2002, 2003, 2008 Free Software Foundation, Inc.\n+Copyright (C) 2002, 2003, 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -196,6 +196,23 @@ GLUE(.L,name): \\\n \t.size FUNC_NAME(name),GLUE(.L,name)-FUNC_NAME(name)\n #endif\n \n+/* For HAVE_GAS_CFI_DIRECTIVE.  */\n+#include \"auto-host.h\"\n+\n+#ifdef HAVE_GAS_CFI_DIRECTIVE\n+# define CFI_STARTPROC\t\t\t.cfi_startproc\n+# define CFI_ENDPROC\t\t\t.cfi_endproc\n+# define CFI_OFFSET(reg, off)\t\t.cfi_offset reg, off\n+# define CFI_DEF_CFA_REGISTER(reg)\t.cfi_def_cfa_register reg\n+# define CFI_RESTORE(reg)\t\t.cfi_restore reg\n+#else\n+# define CFI_STARTPROC\n+# define CFI_ENDPROC\n+# define CFI_OFFSET(reg, off)\n+# define CFI_DEF_CFA_REGISTER(reg)\n+# define CFI_RESTORE(reg)\n+#endif\n+\n #if defined __linux__ && !defined __powerpc64__\n \t.section .note.GNU-stack\n \t.previous"}, {"sha": "579d22485abecb5cd7ad2e6738349e0bd39faa8e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 161, "deletions": 64, "changes": 225, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff35822bcaee33bd891e85d24997df36b79b8b9e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ff35822bcaee33bd891e85d24997df36b79b8b9e", "patch": "@@ -778,7 +778,7 @@ static const char *rs6000_mangle_type (const_tree);\n extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static rtx rs6000_savres_routine_sym (rs6000_stack_t *, bool, bool, bool);\n-static void rs6000_emit_stack_reset (rs6000_stack_t *, rtx, rtx, int, bool);\n+static rtx rs6000_emit_stack_reset (rs6000_stack_t *, rtx, rtx, int, bool);\n static rtx rs6000_make_savres_rtx (rs6000_stack_t *, rtx, int,\n \t\t\t\t   enum machine_mode, bool, bool, bool);\n static bool rs6000_reg_live_or_pic_offset_p (int);\n@@ -15892,7 +15892,7 @@ rs6000_savres_routine_sym (rs6000_stack_t *info, bool savep, bool gpr, bool exit\n    stack pointer, but move the base of the frame into r11 for use by\n    out-of-line register restore routines.  */\n \n-static void\n+static rtx\n rs6000_emit_stack_reset (rs6000_stack_t *info,\n \t\t\t rtx sp_reg_rtx, rtx frame_reg_rtx,\n \t\t\t int sp_offset, bool savres)\n@@ -15908,10 +15908,10 @@ rs6000_emit_stack_reset (rs6000_stack_t *info,\n   if (frame_reg_rtx != sp_reg_rtx)\n     {\n       if (sp_offset != 0)\n-\temit_insn (gen_addsi3 (sp_reg_rtx, frame_reg_rtx,\n-\t\t\t       GEN_INT (sp_offset)));\n+\treturn emit_insn (gen_addsi3 (sp_reg_rtx, frame_reg_rtx,\n+\t\t\t\t      GEN_INT (sp_offset)));\n       else if (!savres)\n-\temit_move_insn (sp_reg_rtx, frame_reg_rtx);\n+\treturn emit_move_insn (sp_reg_rtx, frame_reg_rtx);\n     }\n   else if (sp_offset != 0)\n     {\n@@ -15923,12 +15923,12 @@ rs6000_emit_stack_reset (rs6000_stack_t *info,\n \t\t      ? gen_rtx_REG (Pmode, 11)\n \t\t      : sp_reg_rtx);\n \n-      emit_insn (TARGET_32BIT\n-\t\t ? gen_addsi3 (dest_reg, sp_reg_rtx,\n-\t\t\t       GEN_INT (sp_offset))\n-\t\t : gen_adddi3 (dest_reg, sp_reg_rtx,\n-\t\t\t       GEN_INT (sp_offset)));\n+      rtx insn = emit_insn (gen_add3_insn (dest_reg, sp_reg_rtx,\n+\t\t\t\t\t   GEN_INT (sp_offset)));\n+      if (!savres)\n+\treturn insn;\n     }\n+  return NULL_RTX;\n }\n \n /* Construct a parallel rtx describing the effect of a call to an\n@@ -16838,12 +16838,19 @@ rs6000_restore_saved_cr (rtx reg, int using_mfcr_multiple)\n \t}\n }\n \n-/* Emit function epilogue as insns.\n+/* Return true if OFFSET from stack pointer can be clobbered by signals.\n+   V.4 doesn't have any stack cushion, AIX ABIs have 220 or 288 bytes\n+   below stack pointer not cloberred by signals.  */\n+\n+static inline bool\n+offset_below_red_zone_p (HOST_WIDE_INT offset)\n+{\n+  return offset < (DEFAULT_ABI == ABI_V4\n+\t\t   ? 0\n+\t\t   : TARGET_32BIT ? -220 : -288);\n+}\n \n-   At present, dwarf2out_frame_debug_expr doesn't understand\n-   register restores, so we don't bother setting RTX_FRAME_RELATED_P\n-   anywhere in the epilogue.  Most of the insns below would in any case\n-   need special notes to explain where r11 is in relation to the stack.  */\n+/* Emit function epilogue as insns.  */\n \n void\n rs6000_emit_epilogue (int sibcall)\n@@ -16859,6 +16866,8 @@ rs6000_emit_epilogue (int sibcall)\n   int sp_offset = 0;\n   rtx sp_reg_rtx = gen_rtx_REG (Pmode, 1);\n   rtx frame_reg_rtx = sp_reg_rtx;\n+  rtx cfa_restores = NULL_RTX;\n+  rtx insn;\n   enum machine_mode reg_mode = Pmode;\n   int reg_size = TARGET_32BIT ? 4 : 8;\n   int i;\n@@ -16999,7 +17008,7 @@ rs6000_emit_epilogue (int sibcall)\n       && info->altivec_size != 0\n       && (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n \t  || (DEFAULT_ABI != ABI_V4\n-\t      && info->altivec_save_offset < (TARGET_32BIT ? -220 : -288))))\n+\t      && offset_below_red_zone_p (info->altivec_save_offset))))\n     {\n       int i;\n \n@@ -17016,7 +17025,7 @@ rs6000_emit_epilogue (int sibcall)\n       for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n \tif (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n \t  {\n-\t    rtx addr, areg, mem;\n+\t    rtx addr, areg, mem, reg;\n \n \t    areg = gen_rtx_REG (Pmode, 0);\n \t    emit_move_insn\n@@ -17028,7 +17037,13 @@ rs6000_emit_epilogue (int sibcall)\n \t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, areg);\n \t    mem = gen_frame_mem (V4SImode, addr);\n \n-\t    emit_move_insn (gen_rtx_REG (V4SImode, i), mem);\n+\t    reg = gen_rtx_REG (V4SImode, i);\n+\t    emit_move_insn (reg, mem);\n+\t    if (offset_below_red_zone_p (info->altivec_save_offset\n+\t\t\t\t\t + (i - info->first_altivec_reg_save)\n+\t\t\t\t\t   * 16))\n+\t      cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg,\n+\t\t\t\t\t     cfa_restores);\n \t  }\n     }\n \n@@ -17038,7 +17053,7 @@ rs6000_emit_epilogue (int sibcall)\n       && info->vrsave_mask != 0\n       && (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n \t  || (DEFAULT_ABI != ABI_V4\n-\t      && info->vrsave_save_offset < (TARGET_32BIT ? -220 : -288))))\n+\t      && offset_below_red_zone_p (info->vrsave_save_offset))))\n     {\n       rtx addr, mem, reg;\n \n@@ -17064,6 +17079,7 @@ rs6000_emit_epilogue (int sibcall)\n       emit_insn (generate_set_vrsave (reg, info, 1));\n     }\n \n+  insn = NULL_RTX;\n   /* If we have a large stack frame, restore the old stack pointer\n      using the backchain.  */\n   if (use_backchain_to_restore_sp)\n@@ -17075,8 +17091,8 @@ rs6000_emit_epilogue (int sibcall)\n \t  if (DEFAULT_ABI == ABI_V4)\n \t    frame_reg_rtx = gen_rtx_REG (Pmode, 11);\n \n-\t  emit_move_insn (frame_reg_rtx,\n-\t\t\t  gen_rtx_MEM (Pmode, sp_reg_rtx));\n+\t  insn = emit_move_insn (frame_reg_rtx,\n+\t\t\t\t gen_rtx_MEM (Pmode, sp_reg_rtx));\n \t  sp_offset = 0;\n \t}\n       else if (ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n@@ -17085,7 +17101,7 @@ rs6000_emit_epilogue (int sibcall)\n \t;\n       else\n \t{\n-\t  emit_move_insn (sp_reg_rtx, frame_reg_rtx);\n+\t  insn = emit_move_insn (sp_reg_rtx, frame_reg_rtx);\n \t  frame_reg_rtx = sp_reg_rtx;\n \t}\n     }\n@@ -17097,38 +17113,42 @@ rs6000_emit_epilogue (int sibcall)\n       if (DEFAULT_ABI == ABI_V4)\n \tframe_reg_rtx = gen_rtx_REG (Pmode, 11);\n \n-      emit_insn (TARGET_32BIT\n-\t\t ? gen_addsi3 (frame_reg_rtx, hard_frame_pointer_rtx,\n-\t\t\t       GEN_INT (info->total_size))\n-\t\t : gen_adddi3 (frame_reg_rtx, hard_frame_pointer_rtx,\n-\t\t\t       GEN_INT (info->total_size)));\n+      insn = emit_insn (gen_add3_insn (frame_reg_rtx, hard_frame_pointer_rtx,\n+\t\t\t\t       GEN_INT (info->total_size)));\n       sp_offset = 0;\n     }\n   else if (info->push_p\n \t   && DEFAULT_ABI != ABI_V4\n \t   && !crtl->calls_eh_return)\n     {\n-      emit_insn (TARGET_32BIT\n-\t\t ? gen_addsi3 (sp_reg_rtx, sp_reg_rtx,\n-\t\t\t       GEN_INT (info->total_size))\n-\t\t : gen_adddi3 (sp_reg_rtx, sp_reg_rtx,\n-\t\t\t       GEN_INT (info->total_size)));\n+      insn = emit_insn (gen_add3_insn (sp_reg_rtx, sp_reg_rtx,\n+\t\t\t\t       GEN_INT (info->total_size)));\n       sp_offset = 0;\n     }\n+  if (insn && frame_reg_rtx == sp_reg_rtx)\n+    {\n+      if (cfa_restores)\n+\t{\n+\t  REG_NOTES (insn) = cfa_restores;\n+\t  cfa_restores = NULL_RTX;\n+\t}\n+      add_reg_note (insn, REG_CFA_DEF_CFA, sp_reg_rtx);\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+    }\n \n   /* Restore AltiVec registers if we have not done so already.  */\n   if (!ALWAYS_RESTORE_ALTIVEC_BEFORE_POP\n       && TARGET_ALTIVEC_ABI\n       && info->altivec_size != 0\n       && (DEFAULT_ABI == ABI_V4\n-\t  || info->altivec_save_offset >= (TARGET_32BIT ? -220 : -288)))\n+\t  || !offset_below_red_zone_p (info->altivec_save_offset)))\n     {\n       int i;\n \n       for (i = info->first_altivec_reg_save; i <= LAST_ALTIVEC_REGNO; ++i)\n \tif (info->vrsave_mask & ALTIVEC_REG_BIT (i))\n \t  {\n-\t    rtx addr, areg, mem;\n+\t    rtx addr, areg, mem, reg;\n \n \t    areg = gen_rtx_REG (Pmode, 0);\n \t    emit_move_insn\n@@ -17140,7 +17160,11 @@ rs6000_emit_epilogue (int sibcall)\n \t    addr = gen_rtx_PLUS (Pmode, frame_reg_rtx, areg);\n \t    mem = gen_frame_mem (V4SImode, addr);\n \n-\t    emit_move_insn (gen_rtx_REG (V4SImode, i), mem);\n+\t    reg = gen_rtx_REG (V4SImode, i);\n+\t    emit_move_insn (reg, mem);\n+\t    if (DEFAULT_ABI == ABI_V4)\n+\t      cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg,\n+\t\t\t\t\t     cfa_restores);\n \t  }\n     }\n \n@@ -17150,7 +17174,7 @@ rs6000_emit_epilogue (int sibcall)\n       && TARGET_ALTIVEC_VRSAVE\n       && info->vrsave_mask != 0\n       && (DEFAULT_ABI == ABI_V4\n-\t  || info->vrsave_save_offset >= (TARGET_32BIT ? -220 : -288)))\n+\t  || !offset_below_red_zone_p (info->vrsave_save_offset)))\n     {\n       rtx addr, mem, reg;\n \n@@ -17183,7 +17207,8 @@ rs6000_emit_epilogue (int sibcall)\n       emit_move_insn (gen_rtx_REG (SImode, 12), mem);\n     }\n \n-  /* Set LR here to try to overlap restores below.  */\n+  /* Set LR here to try to overlap restores below.  LR is always saved\n+     above incoming stack, so it never needs REG_CFA_RESTORE.  */\n   if (restore_lr)\n     emit_move_insn (gen_rtx_REG (Pmode, LR_REGNO),\n \t\t    gen_rtx_REG (Pmode, 0));\n@@ -17265,7 +17290,7 @@ rs6000_emit_epilogue (int sibcall)\n \t  for (i = 0; i < 32 - info->first_gp_reg_save; i++)\n \t    if (rs6000_reg_live_or_pic_offset_p (info->first_gp_reg_save + i))\n \t      {\n-\t\trtx offset, addr, mem;\n+\t\trtx offset, addr, mem, reg;\n \n \t\t/* We're doing all this to ensure that the immediate offset\n \t\t   fits into the immediate field of 'evldd'.  */\n@@ -17274,9 +17299,24 @@ rs6000_emit_epilogue (int sibcall)\n \t\toffset = GEN_INT (spe_offset + reg_size * i);\n \t\taddr = gen_rtx_PLUS (Pmode, frame_reg_rtx, offset);\n \t\tmem = gen_rtx_MEM (V2SImode, addr);\n+\t\treg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n \n-\t\temit_move_insn (gen_rtx_REG (reg_mode, info->first_gp_reg_save + i),\n-\t\t\t\tmem);\n+\t\tinsn = emit_move_insn (reg, mem);\n+\t\tif (DEFAULT_ABI == ABI_V4)\n+\t\t  {\n+\t\t    if (frame_pointer_needed\n+\t\t\t&& info->first_gp_reg_save + i\n+\t\t\t   == HARD_FRAME_POINTER_REGNUM)\n+\t\t      {\n+\t\t\tadd_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\t\t      plus_constant (frame_reg_rtx,\n+\t\t\t\t\t\t     sp_offset));\n+\t\t\tRTX_FRAME_RELATED_P (insn) = 1;\n+\t\t      }\n+\n+\t\t    cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg,\n+\t\t\t\t\t\t   cfa_restores);\n+\t\t  }\n \t      }\n \t}\n       else\n@@ -17288,7 +17328,6 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t\t\t/*savep=*/false, /*gpr=*/true,\n \t\t\t\t\t/*exitp=*/true);\n \t  emit_jump_insn (par);\n-\n \t  /* We don't want anybody else emitting things after we jumped\n \t     back.  */\n \t  return;\n@@ -17317,17 +17356,38 @@ rs6000_emit_epilogue (int sibcall)\n       if (can_use_exit)\n \t{\n \t  if (info->cr_save_p)\n-\t    rs6000_restore_saved_cr (gen_rtx_REG (SImode, 12),\n-\t\t\t\t     using_mtcr_multiple);\n+\t    {\n+\t      rs6000_restore_saved_cr (gen_rtx_REG (SImode, 12),\n+\t\t\t\t       using_mtcr_multiple);\n+\t      if (DEFAULT_ABI == ABI_V4)\n+\t\tcfa_restores\n+\t\t  = alloc_reg_note (REG_CFA_RESTORE,\n+\t\t\t\t    gen_rtx_REG (SImode, CR2_REGNO),\n+\t\t\t\t    cfa_restores);\n+\t    }\n \n \t  emit_jump_insn (par);\n \n \t  /* We don't want anybody else emitting things after we jumped\n \t     back.  */\n \t  return;\n \t}\n-      else\n-\temit_insn (par);\n+\n+      insn = emit_insn (par);\n+      if (DEFAULT_ABI == ABI_V4)\n+\t{\n+\t  if (frame_pointer_needed)\n+\t    {\n+\t      add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\t    plus_constant (frame_reg_rtx, sp_offset));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t    }\n+\n+\t  for (i = info->first_gp_reg_save; i < 32; i++)\n+\t    cfa_restores\n+\t      = alloc_reg_note (REG_CFA_RESTORE,\n+\t\t\t\tgen_rtx_REG (reg_mode, i), cfa_restores);\n+\t}\n     }\n   else if (using_load_multiple)\n     {\n@@ -17340,13 +17400,20 @@ rs6000_emit_epilogue (int sibcall)\n \t\t\t\t\t    + sp_offset\n \t\t\t\t\t    + reg_size * i));\n \t  rtx mem = gen_frame_mem (reg_mode, addr);\n+\t  rtx reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n \n-\t  RTVEC_ELT (p, i) =\n-\t    gen_rtx_SET (VOIDmode,\n-\t\t\t gen_rtx_REG (reg_mode, info->first_gp_reg_save + i),\n-\t\t\t mem);\n+\t  RTVEC_ELT (p, i) = gen_rtx_SET (VOIDmode, reg, mem);\n+\t  if (DEFAULT_ABI == ABI_V4)\n+\t    cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg,\n+\t\t\t\t\t   cfa_restores);\n+\t}\n+      insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n+      if (DEFAULT_ABI == ABI_V4 && frame_pointer_needed)\n+\t{\n+\t  add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\tplus_constant (frame_reg_rtx, sp_offset));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n-      emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n     }\n   else\n     {\n@@ -17358,9 +17425,23 @@ rs6000_emit_epilogue (int sibcall)\n                                               + sp_offset\n                                               + reg_size * i));\n             rtx mem = gen_frame_mem (reg_mode, addr);\n+\t    rtx reg = gen_rtx_REG (reg_mode, info->first_gp_reg_save + i);\n \n-            emit_move_insn (gen_rtx_REG (reg_mode,\n-                                         info->first_gp_reg_save + i), mem);\n+\t    insn = emit_move_insn (reg, mem);\n+\t    if (DEFAULT_ABI == ABI_V4)\n+\t      {\n+\t        if (frame_pointer_needed\n+\t\t    && info->first_gp_reg_save + i\n+\t\t       == HARD_FRAME_POINTER_REGNUM)\n+\t\t  {\n+\t\t    add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\t\t\t  plus_constant (frame_reg_rtx, sp_offset));\n+\t\t    RTX_FRAME_RELATED_P (insn) = 1;\n+\t\t  }\n+\n+\t\tcfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg,\n+\t\t\t\t\t       cfa_restores);\n+\t      }\n           }\n     }\n \n@@ -17370,36 +17451,52 @@ rs6000_emit_epilogue (int sibcall)\n       if ((df_regs_ever_live_p (info->first_fp_reg_save+i)\n \t   && ! call_used_regs[info->first_fp_reg_save+i]))\n \t{\n-\t  rtx addr, mem;\n+\t  rtx addr, mem, reg;\n \t  addr = gen_rtx_PLUS (Pmode, frame_reg_rtx,\n \t\t\t       GEN_INT (info->fp_save_offset\n \t\t\t\t\t+ sp_offset\n \t\t\t\t\t+ 8 * i));\n \t  mem = gen_frame_mem (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n \t\t\t\t ? DFmode : SFmode), addr);\n+\t  reg = gen_rtx_REG (((TARGET_HARD_FLOAT && TARGET_DOUBLE_FLOAT)\n+\t\t\t       ? DFmode : SFmode),\n+\t\t\t     info->first_fp_reg_save + i);\n \n- \t  emit_move_insn (gen_rtx_REG (((TARGET_HARD_FLOAT \n-\t\t\t\t\t && TARGET_DOUBLE_FLOAT)\n-\t\t\t\t        ? DFmode : SFmode),\n-\t\t\t\t       info->first_fp_reg_save + i),\n-\t\t\t  mem);\n+ \t  emit_move_insn (reg, mem);\n+\t  if (DEFAULT_ABI == ABI_V4)\n+\t    cfa_restores = alloc_reg_note (REG_CFA_RESTORE, reg,\n+\t\t\t\t\t   cfa_restores);\n \t}\n \n   /* If we saved cr, restore it here.  Just those that were used.  */\n   if (info->cr_save_p)\n-    rs6000_restore_saved_cr (gen_rtx_REG (SImode, 12), using_mtcr_multiple);\n+    {\n+      rs6000_restore_saved_cr (gen_rtx_REG (SImode, 12), using_mtcr_multiple);\n+      if (DEFAULT_ABI == ABI_V4)\n+\tcfa_restores\n+\t  = alloc_reg_note (REG_CFA_RESTORE, gen_rtx_REG (SImode, CR2_REGNO),\n+\t\t\t    cfa_restores);\n+    }\n \n   /* If this is V.4, unwind the stack pointer after all of the loads\n      have been done.  */\n-  rs6000_emit_stack_reset (info, sp_reg_rtx, frame_reg_rtx,\n-\t\t\t   sp_offset, !restoring_FPRs_inline);\n+  insn = rs6000_emit_stack_reset (info, sp_reg_rtx, frame_reg_rtx,\n+\t\t\t\t  sp_offset, !restoring_FPRs_inline);\n+  if (insn)\n+    {\n+      if (cfa_restores)\n+\t{\n+\t  REG_NOTES (insn) = cfa_restores;\n+\t  cfa_restores = NULL_RTX;\n+\t}\n+      add_reg_note (insn, REG_CFA_DEF_CFA, sp_reg_rtx);\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+    }\n \n   if (crtl->calls_eh_return)\n     {\n       rtx sa = EH_RETURN_STACKADJ_RTX;\n-      emit_insn (TARGET_32BIT\n-\t\t ? gen_addsi3 (sp_reg_rtx, sp_reg_rtx, sa)\n-\t\t : gen_adddi3 (sp_reg_rtx, sp_reg_rtx, sa));\n+      emit_insn (gen_add3_insn (sp_reg_rtx, sp_reg_rtx, sa));\n     }\n \n   if (!sibcall)"}]}