{"sha": "64c18e57103be5270d79ed9ce0be72a57a7e5944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjMThlNTcxMDNiZTUyNzBkNzllZDljZTBiZTcyYTU3YTdlNTk0NA==", "commit": {"author": {"name": "Dave Fluri", "email": "dave.fluri@onlink.net", "date": "2003-07-21T15:08:55Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "2003-07-21T15:08:55Z"}, "message": "* doc/extend.texi: Fixes to spelling, grammar, and diction.\n\nFrom-SVN: r69633", "tree": {"sha": "28841aaf8ca0aafb16090844c9c5cbdcc5167415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28841aaf8ca0aafb16090844c9c5cbdcc5167415"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c18e57103be5270d79ed9ce0be72a57a7e5944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c18e57103be5270d79ed9ce0be72a57a7e5944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c18e57103be5270d79ed9ce0be72a57a7e5944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c18e57103be5270d79ed9ce0be72a57a7e5944/comments", "author": null, "committer": null, "parents": [{"sha": "c7b613166381bf95372e480e85befb6ae9f5b453", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b613166381bf95372e480e85befb6ae9f5b453", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b613166381bf95372e480e85befb6ae9f5b453"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "b120c1501eb79800962a76dedf075f854d1f5baa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c18e57103be5270d79ed9ce0be72a57a7e5944/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c18e57103be5270d79ed9ce0be72a57a7e5944/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64c18e57103be5270d79ed9ce0be72a57a7e5944", "patch": "@@ -1,3 +1,7 @@\n+2003-07-21  Dave Fluri  <dave.fluri@onlink.net>\n+\n+\t* doc/extend.texi: Fixes to spelling, grammar, and diction.\n+\n 2003-07-21  Ben Elliston  <bje@wasabisystems.com>\n \n \t* doc/invoke.texi (Optimize Options): Replace \"it's\" with \"its\"."}, {"sha": "4bf39cac01ff8b3c006294ce01512a0856833cee", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c18e57103be5270d79ed9ce0be72a57a7e5944/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c18e57103be5270d79ed9ce0be72a57a7e5944/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=64c18e57103be5270d79ed9ce0be72a57a7e5944", "patch": "@@ -2312,7 +2312,7 @@ and linker.\n @cindex @code{malloc} attribute\n The @code{malloc} attribute is used to tell the compiler that a function\n may be treated as if it were the malloc function.  The compiler assumes\n-that calls to malloc result in a pointers that cannot alias anything.\n+that calls to malloc result in pointers that cannot alias anything.\n This will often improve optimization.\n \n @item alias (\"@var{target}\")\n@@ -2364,7 +2364,7 @@ by another module.\n Internal visibility is like hidden visibility, but with additional\n processor specific semantics.  Unless otherwise specified by the psABI,\n gcc defines internal visibility to mean that the function is @emph{never}\n-called from another module.  Note that hidden symbols, while then cannot\n+called from another module.  Note that hidden symbols, while they cannot\n be referenced directly by other modules, can be referenced indirectly via\n function pointers.  By indicating that a symbol cannot be called from\n outside the module, gcc may for instance omit the load of a PIC register\n@@ -2423,12 +2423,12 @@ attribute causes the compiler not to do this.  These attributes override\n both the @option{-mlongcall} switch and the @code{#pragma longcall}\n setting.\n \n-@xref{RS/6000 and PowerPC Options}, for more information on when long\n-calls are and are not necessary.\n+@xref{RS/6000 and PowerPC Options}, for more information on whether long\n+calls are necessary.\n \n @item long_call/short_call\n @cindex indirect calls on ARM\n-This attribute allows to specify how to call a particular function on\n+This attribute specifies how a particular function is called on\n ARM@.  Both attributes override the @option{-mlong-calls} (@pxref{ARM Options})\n command line switch and @code{#pragma long_calls} settings.  The\n @code{long_call} attribute causes the compiler to always call the\n@@ -2458,9 +2458,9 @@ interrupt handler when this attribute is present.\n Note, interrupt handlers for the H8/300, H8/300H and SH processors can\n be specified via the @code{interrupt_handler} attribute.\n \n-Note, on the AVR interrupts will be enabled inside the function.\n+Note, on the AVR, interrupts will be enabled inside the function.\n \n-Note, for the ARM you can specify the kind of interrupt to be handled by\n+Note, for the ARM, you can specify the kind of interrupt to be handled by\n adding an optional parameter to the interrupt attribute like this:\n \n @smallexample\n@@ -2515,20 +2515,20 @@ slightly under 32kbytes of data.\n @item signal\n @cindex signal handler functions on the AVR processors\n Use this attribute on the AVR to indicate that the specified\n-function is an signal handler.  The compiler will generate function\n-entry and exit sequences suitable for use in an signal handler when this\n-attribute is present.  Interrupts will be disabled inside function.\n+function is a signal handler.  The compiler will generate function\n+entry and exit sequences suitable for use in a signal handler when this\n+attribute is present.  Interrupts will be disabled inside the function.\n \n @item naked\n @cindex function without a prologue/epilogue code\n Use this attribute on the ARM, AVR, C4x and IP2K ports to indicate that the\n-specified function do not need prologue/epilogue sequences generated by\n+specified function does not need prologue/epilogue sequences generated by\n the compiler.  It is up to the programmer to provide these sequences.\n \n @item model (@var{model-name})\n @cindex function addressability on the M32R/D\n Use this attribute on the M32R/D to set the addressability of an object,\n-and the code generated for a function.\n+and of the code generated for a function.\n The identifier @var{model-name} is one of @code{small}, @code{medium},\n or @code{large}, representing each of the code models.\n \n@@ -3001,7 +3001,7 @@ This is true on many RISC machines.  On more traditional machine\n designs, @code{__alignof__ (double)} is 4 or even 2.\n \n Some machines never actually require alignment; they allow reference to any\n-data type even at an odd addresses.  For these machines, @code{__alignof__}\n+data type even at an odd address.  For these machines, @code{__alignof__}\n reports the @emph{recommended} alignment of a type.\n \n If the operand of @code{__alignof__} is an lvalue rather than a type,\n@@ -3138,7 +3138,7 @@ variables that are expected to be removed in a future version of a\n program.  The warning also includes the location of the declaration\n of the deprecated variable, to enable users to easily find further\n information about why the variable is deprecated, or what they should\n-do instead.  Note that the warnings only occurs for uses:\n+do instead.  Note that the warning only occurs for uses:\n \n @smallexample\n extern int old_var __attribute__ ((deprecated));\n@@ -3474,7 +3474,7 @@ alignment.  See your linker documentation for further information.\n \n @item packed\n This attribute, attached to an @code{enum}, @code{struct}, or\n-@code{union} type definition, specified that the minimum required memory\n+@code{union} type definition, specifies that the minimum required memory\n be used to represent the type.\n \n @opindex fshort-enums\n@@ -3503,7 +3503,7 @@ the referenced type must be respected, just as with normal pointer\n conversions.\n \n Second, the argument is passed to the function using the calling\n-conventions of first member of the transparent union, not the calling\n+conventions of the first member of the transparent union, not the calling\n conventions of the union itself.  All members of the union must have the\n same machine representation; this is necessary for this argument passing\n to work properly.\n@@ -3735,8 +3735,9 @@ The definition in the header file will cause most calls to the function\n to be inlined.  If any uses of the function remain, they will refer to\n the single copy in the library.\n \n-For future compatibility with when GCC implements ISO C99 semantics for\n-inline functions, it is best to use @code{static inline} only.  (The\n+Since GCC eventually will implement ISO C99 semantics for\n+inline functions, it is best to use @code{static inline} only\n+to guarentee compatibility.  (The\n existing semantics will remain available when @option{-std=gnu89} is\n specified, but eventually the default will be @option{-std=gnu99} and\n that will implement the C99 semantics, though it does not do so yet.)\n@@ -3808,7 +3809,7 @@ asm (\"fsinx %[angle],%[output]\"\n @noindent\n Note that the symbolic operand names have no relation whatsoever to\n other C identifiers.  You may use any name you like, even those of\n-existing C symbols, but must ensure that no two operands within the same\n+existing C symbols, but you must ensure that no two operands within the same\n assembler construct use the same symbolic name.\n \n Output operand expressions must be lvalues; the compiler can check this."}]}