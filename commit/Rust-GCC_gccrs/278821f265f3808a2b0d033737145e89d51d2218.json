{"sha": "278821f265f3808a2b0d033737145e89d51d2218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc4ODIxZjI2NWYzODA4YTJiMGQwMzM3MzcxNDVlODlkNTFkMjIxOA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-06-20T08:51:34Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-06-20T08:51:34Z"}, "message": "[AArch64] Fix some saturating math NEON intrinsics types.\n\n[gcc/]\n\t* config/aarch64/iterators.md (VCOND): Handle SI and HI modes.\n\tUpdate comments.\n\t(VCONQ): Make comment more helpful.\n\t(VCON): Delete.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_sqdmulh_lane<mode>):\n\tUse VCOND for operands 2.  Update lane checking and flipping logic.\n\t(aarch64_sqrdmulh_lane<mode>): Likewise.\n\t(aarch64_sq<r>dmulh_lane<mode>_internal): Likewise.\n\t(aarch64_sqdmull2<mode>): Remove VCON, use VQ_HSI mode iterator.\n\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal, VD_HSI): Change mode\n\tattribute of operand 3 to VCOND.\n\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal, SD_HSI): Likewise.\n\t(aarch64_sqdml<SBINQOPS:as>l2_lane<mode>_internal): Likewise.\n\t(aarch64_sqdmull_lane<mode>_internal, VD_HSI): Likewise.\n\t(aarch64_sqdmull_lane<mode>_internal, SD_HSI): Likewise.\n\t(aarch64_sqdmull2_lane<mode>_internal): Likewise.\n\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal, VD_HSI: New\n\tdefine_insn.\n\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal, SD_HSI): Likewise.\n\t(aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>_internal): Likewise.\n\t(aarch64_sqdmull_laneq<mode>_internal, VD_HSI): Likewise.\n\t(aarch64_sqdmull_laneq<mode>_internal, SD_HSI): Likewise.\n\t(aarch64_sqdmull2_laneq<mode>_internal): Likewise.\n\t(aarch64_sqdmlal_lane<mode>): Change mode attribute of penultimate\n\toperand to VCOND.  Update lane flipping and bounds checking logic.\n\t(aarch64_sqdmlal2_lane<mode>): Likewise.\n\t(aarch64_sqdmlsl_lane<mode>): Likewise.\n\t(aarch64_sqdmull_lane<mode>): Likewise.\n\t(aarch64_sqdmull2_lane<mode>): Likewise.\n\t(aarch64_sqdmlal_laneq<mode>):\n\tReplace VCON usage with VCONQ.\n\tEmit aarch64_sqdmlal_laneq<mode>_internal insn.\n\t(aarch64_sqdmlal2_laneq<mode>): Emit\n\taarch64_sqdmlal2_laneq<mode>_internal insn.\n\tReplace VCON with VCONQ.\n\t(aarch64_sqdmlsl2_lane<mode>): Replace VCON with VCONQ.\n\t(aarch64_sqdmlsl2_laneq<mode>): Likewise.\n\t(aarch64_sqdmull_laneq<mode>): Emit\n\taarch64_sqdmull_laneq<mode>_internal insn.\n\tReplace VCON with VCONQ.\n\t(aarch64_sqdmull2_laneq<mode>): Emit\n\taarch64_sqdmull2_laneq<mode>_internal insn.\n\t(aarch64_sqdmlsl_laneq<mode>): Replace VCON usage with VCONQ.\n\t* config/aarch64/arm_neon.h (vqdmlal_high_lane_s16): Change type\n\tof 3rd argument to int16x4_t.\n\t(vqdmlalh_lane_s16): Likewise.\n\t(vqdmlslh_lane_s16): Likewise.\n\t(vqdmull_high_lane_s16): Likewise.\n\t(vqdmullh_lane_s16): Change type of 2nd argument to int16x4_t.\n\t(vqdmlal_lane_s16): Don't create temporary int16x8_t value.\n\t(vqdmlsl_lane_s16): Likewise.\n\t(vqdmull_lane_s16): Don't create temporary int16x8_t value.\n\t(vqdmlal_high_lane_s32): Change type 3rd argument to int32x2_t.\n\t(vqdmlals_lane_s32): Likewise.\n\t(vqdmlsls_lane_s32): Likewise.\n\t(vqdmull_high_lane_s32): Change type 2nd argument to int32x2_t.\n\t(vqdmulls_lane_s32): Likewise.\n\t(vqdmlal_lane_s32): Don't create temporary int32x4_t value.\n\t(vqdmlsl_lane_s32): Likewise.\n\t(vqdmull_lane_s32): Don't create temporary int32x4_t value.\n\t(vqdmulhh_lane_s16): Change type of second argument to int16x4_t.\n\t(vqrdmulhh_lane_s16): Likewise.\n\t(vqdmlsl_high_lane_s16): Likewise.\n\t(vqdmulhs_lane_s32): Change type of second argument to int32x2_t.\n\t(vqdmlsl_high_lane_s32): Likewise.\n\t(vqrdmulhs_lane_s32): Likewise.\n\n[gcc/testsuite]\n\t* gcc.target/aarch64/simd/vqdmulhh_lane_s16.c: New test.\n\t* gcc.target/aarch64/simd/vqdmulhs_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhs_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_high_lane_s16.c: New test.\n\t* gcc.target/aarch64/simd/vqdmlal_high_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_high_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_high_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlal_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlalh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlals_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_high_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_high_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_high_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_high_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsl_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlslh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmlsls_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulh_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulh_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhq_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulhq_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_high_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_high_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_high_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_high_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmull_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmullh_lane_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqdmulls_lane_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulh_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulh_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhq_laneq_s16.c: Likewise.\n\t* gcc.target/aarch64/simd/vqrdmulhq_laneq_s32.c: Likewise.\n\t* gcc.target/aarch64/vector_intrinsics.c: Simplify arm_neon.h include.\n\t(test_vqdmlal_high_lane_s16): Fix parameter type.\n\t(test_vqdmlal_high_lane_s32): Likewise.\n\t(test_vqdmull_high_lane_s16): Likewise.\n\t(test_vqdmull_high_lane_s32): Likewise.\n\t(test_vqdmlsl_high_lane_s32): Likewise.\n\t(test_vqdmlsl_high_lane_s16): Likewise.\n\t* gcc.target/aarch64/scalar_intrinsics.c (test_vqdmlalh_lane_s16):\n\tFix argument type.\n\t(test_vqdmlals_lane_s32): Likewise.\n\t(test_vqdmlslh_lane_s16): Likewise.\n\t(test_vqdmlsls_lane_s32): Likewise.\n\t(test_vqdmulhh_lane_s16): Likewise.\n\t(test_vqdmulhs_lane_s32): Likewise.\n\t(test_vqdmullh_lane_s16): Likewise.\n\t(test_vqdmulls_lane_s32): Likewise.\n\t(test_vqrdmulhh_lane_s16): Likewise.\n\t(test_vqrdmulhs_lane_s32): Likewise.\n\nFrom-SVN: r211842", "tree": {"sha": "46e4e001b5845692f5b2fc5a0a7f8befe5d6ebf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46e4e001b5845692f5b2fc5a0a7f8befe5d6ebf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/278821f265f3808a2b0d033737145e89d51d2218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278821f265f3808a2b0d033737145e89d51d2218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/278821f265f3808a2b0d033737145e89d51d2218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/278821f265f3808a2b0d033737145e89d51d2218/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6621ab6860fb6a52bdfc23029770fa5e73fb4c9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6621ab6860fb6a52bdfc23029770fa5e73fb4c9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6621ab6860fb6a52bdfc23029770fa5e73fb4c9a"}], "stats": {"total": 1182, "additions": 1066, "deletions": 116}, "files": [{"sha": "7387708ebf4b7b40e6cd1d1d0451ac113c39f91f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -1,3 +1,73 @@\n+2014-06-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/iterators.md (VCOND): Handle SI and HI modes.\n+\tUpdate comments.\n+\t(VCONQ): Make comment more helpful.\n+\t(VCON): Delete.\n+\t* config/aarch64/aarch64-simd.md\n+\t(aarch64_sqdmulh_lane<mode>):\n+\tUse VCOND for operands 2.  Update lane checking and flipping logic.\n+\t(aarch64_sqrdmulh_lane<mode>): Likewise.\n+\t(aarch64_sq<r>dmulh_lane<mode>_internal): Likewise.\n+\t(aarch64_sqdmull2<mode>): Remove VCON, use VQ_HSI mode iterator.\n+\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal, VD_HSI): Change mode\n+\tattribute of operand 3 to VCOND.\n+\t(aarch64_sqdml<SBINQOPS:as>l_lane<mode>_internal, SD_HSI): Likewise.\n+\t(aarch64_sqdml<SBINQOPS:as>l2_lane<mode>_internal): Likewise.\n+\t(aarch64_sqdmull_lane<mode>_internal, VD_HSI): Likewise.\n+\t(aarch64_sqdmull_lane<mode>_internal, SD_HSI): Likewise.\n+\t(aarch64_sqdmull2_lane<mode>_internal): Likewise.\n+\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal, VD_HSI: New\n+\tdefine_insn.\n+\t(aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal, SD_HSI): Likewise.\n+\t(aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>_internal): Likewise.\n+\t(aarch64_sqdmull_laneq<mode>_internal, VD_HSI): Likewise.\n+\t(aarch64_sqdmull_laneq<mode>_internal, SD_HSI): Likewise.\n+\t(aarch64_sqdmull2_laneq<mode>_internal): Likewise.\n+\t(aarch64_sqdmlal_lane<mode>): Change mode attribute of penultimate\n+\toperand to VCOND.  Update lane flipping and bounds checking logic.\n+\t(aarch64_sqdmlal2_lane<mode>): Likewise.\n+\t(aarch64_sqdmlsl_lane<mode>): Likewise.\n+\t(aarch64_sqdmull_lane<mode>): Likewise.\n+\t(aarch64_sqdmull2_lane<mode>): Likewise.\n+\t(aarch64_sqdmlal_laneq<mode>):\n+\tReplace VCON usage with VCONQ.\n+\tEmit aarch64_sqdmlal_laneq<mode>_internal insn.\n+\t(aarch64_sqdmlal2_laneq<mode>): Emit\n+\taarch64_sqdmlal2_laneq<mode>_internal insn.\n+\tReplace VCON with VCONQ.\n+\t(aarch64_sqdmlsl2_lane<mode>): Replace VCON with VCONQ.\n+\t(aarch64_sqdmlsl2_laneq<mode>): Likewise.\n+\t(aarch64_sqdmull_laneq<mode>): Emit\n+\taarch64_sqdmull_laneq<mode>_internal insn.\n+\tReplace VCON with VCONQ.\n+\t(aarch64_sqdmull2_laneq<mode>): Emit\n+\taarch64_sqdmull2_laneq<mode>_internal insn.\n+\t(aarch64_sqdmlsl_laneq<mode>): Replace VCON usage with VCONQ.\n+\t* config/aarch64/arm_neon.h (vqdmlal_high_lane_s16): Change type\n+\tof 3rd argument to int16x4_t.\n+\t(vqdmlalh_lane_s16): Likewise.\n+\t(vqdmlslh_lane_s16): Likewise.\n+\t(vqdmull_high_lane_s16): Likewise.\n+\t(vqdmullh_lane_s16): Change type of 2nd argument to int16x4_t.\n+\t(vqdmlal_lane_s16): Don't create temporary int16x8_t value.\n+\t(vqdmlsl_lane_s16): Likewise.\n+\t(vqdmull_lane_s16): Don't create temporary int16x8_t value.\n+\t(vqdmlal_high_lane_s32): Change type 3rd argument to int32x2_t.\n+\t(vqdmlals_lane_s32): Likewise.\n+\t(vqdmlsls_lane_s32): Likewise.\n+\t(vqdmull_high_lane_s32): Change type 2nd argument to int32x2_t.\n+\t(vqdmulls_lane_s32): Likewise.\n+\t(vqdmlal_lane_s32): Don't create temporary int32x4_t value.\n+\t(vqdmlsl_lane_s32): Likewise.\n+\t(vqdmull_lane_s32): Don't create temporary int32x4_t value.\n+\t(vqdmulhh_lane_s16): Change type of second argument to int16x4_t.\n+\t(vqrdmulhh_lane_s16): Likewise.\n+\t(vqdmlsl_high_lane_s16): Likewise.\n+\t(vqdmulhs_lane_s32): Change type of second argument to int32x2_t.\n+\t(vqdmlsl_high_lane_s32): Likewise.\n+\t(vqrdmulhs_lane_s32): Likewise.\n+\n 2014-06-20  Tom de Vries  <tom@codesourcery.com>\n \n \t* final.c (collect_fn_hard_reg_usage): Add separate IOR_HARD_REG_SET for"}, {"sha": "7fd70941269d78eb88c817aedc1913144d7571e9", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 193, "deletions": 56, "changes": 249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -2752,12 +2752,12 @@\n (define_expand \"aarch64_sqdmulh_lane<mode>\"\n   [(match_operand:SD_HSI 0 \"register_operand\" \"\")\n    (match_operand:SD_HSI 1 \"register_operand\" \"\")\n-   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n+   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n   {\n-    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n     emit_insn (gen_aarch64_sqdmulh_lane<mode>_internal (operands[0],\n                                                         operands[1],\n                                                         operands[2],\n@@ -2769,12 +2769,12 @@\n (define_expand \"aarch64_sqrdmulh_lane<mode>\"\n   [(match_operand:SD_HSI 0 \"register_operand\" \"\")\n    (match_operand:SD_HSI 1 \"register_operand\" \"\")\n-   (match_operand:<VCONQ> 2 \"register_operand\" \"\")\n+   (match_operand:<VCOND> 2 \"register_operand\" \"\")\n    (match_operand:SI 3 \"immediate_operand\" \"\")]\n   \"TARGET_SIMD\"\n   {\n-    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n-    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+    aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n     emit_insn (gen_aarch64_sqrdmulh_lane<mode>_internal (operands[0],\n                                                          operands[1],\n                                                          operands[2],\n@@ -2788,12 +2788,12 @@\n         (unspec:SD_HSI\n \t  [(match_operand:SD_HSI 1 \"register_operand\" \"w\")\n            (vec_select:<VEL>\n-             (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n+             (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n              (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))]\n \t VQDMULH))]\n   \"TARGET_SIMD\"\n   \"*\n-   operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+   operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n    return \\\"sq<r>dmulh\\\\t%<v>0, %<v>1, %2.<v>[%3]\\\";\"\n   [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar<q>\")]\n )\n@@ -2829,7 +2829,31 @@\n \t      (sign_extend:<VWIDE>\n \t\t(vec_duplicate:VD_HSI\n \t\t  (vec_select:<VEL>\n-\t\t    (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+\t\t    (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+              ))\n+\t    (const_int 1))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n+    return\n+      \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (SBINQOPS:<VWIDE>\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+\t\t(match_operand:VD_HSI 2 \"register_operand\" \"w\"))\n+\t      (sign_extend:<VWIDE>\n+\t\t(vec_duplicate:VD_HSI\n+\t\t  (vec_select:<VEL>\n+\t\t    (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t    (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n               ))\n \t    (const_int 1))))]\n@@ -2852,7 +2876,30 @@\n \t\t(match_operand:SD_HSI 2 \"register_operand\" \"w\"))\n \t      (sign_extend:<VWIDE>\n \t\t(vec_select:<VEL>\n-\t\t  (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+\t\t  (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t  (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n+              )\n+\t    (const_int 1))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n+    return\n+      \"sqdml<SBINQOPS:as>l\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (SBINQOPS:<VWIDE>\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+\t  (ss_ashift:<VWIDE>\n+\t    (mult:<VWIDE>\n+\t      (sign_extend:<VWIDE>\n+\t\t(match_operand:SD_HSI 2 \"register_operand\" \"w\"))\n+\t      (sign_extend:<VWIDE>\n+\t\t(vec_select:<VEL>\n+\t\t  (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t  (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])))\n               )\n \t    (const_int 1))))]\n@@ -2869,12 +2916,12 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n    (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode) / 2);\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n@@ -2885,13 +2932,13 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n    (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlal_lane<mode>_internal (operands[0], operands[1],\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+  emit_insn (gen_aarch64_sqdmlal_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n   DONE;\n@@ -2901,12 +2948,12 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n    (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode) / 2);\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[4])));\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n@@ -2917,13 +2964,13 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n    (match_operand:VSD_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCON>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlsl_lane<mode>_internal (operands[0], operands[1],\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+  emit_insn (gen_aarch64_sqdmlsl_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3],\n \t\t\t\t\t\t      operands[4]));\n   DONE;\n@@ -3011,7 +3058,33 @@\n \t\t(sign_extend:<VWIDE>\n                   (vec_duplicate:<VHALF>\n \t\t    (vec_select:<VEL>\n-\t\t      (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+\t\t      (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n+\t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n+\t\t    ))))\n+\t      (const_int 1))))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n+    return\n+     \"sqdml<SBINQOPS:as>l2\\\\t%<vw2>0<Vmwtype>, %<v>2<Vmtype>, %3.<Vetype>[%4]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mla_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdml<SBINQOPS:as>l2_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (SBINQOPS:<VWIDE>\n+\t  (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+\t  (ss_ashift:<VWIDE>\n+\t      (mult:<VWIDE>\n+\t\t(sign_extend:<VWIDE>\n+                  (vec_select:<VHALF>\n+                    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n+                    (match_operand:VQ_HSI 5 \"vect_par_cnst_hi_half\" \"\")))\n+\t\t(sign_extend:<VWIDE>\n+                  (vec_duplicate:<VHALF>\n+\t\t    (vec_select:<VEL>\n+\t\t      (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n \t\t      (parallel [(match_operand:SI 4 \"immediate_operand\" \"i\")])\n \t\t    ))))\n \t      (const_int 1))))]\n@@ -3028,13 +3101,13 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode) / 2);\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3045,14 +3118,14 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlal2_lane<mode>_internal (operands[0], operands[1],\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+  emit_insn (gen_aarch64_sqdmlal2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n   DONE;\n@@ -3062,13 +3135,13 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCOND> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode) / 2);\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCOND>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[4])));\n   emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n@@ -3079,14 +3152,14 @@\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:<VWIDE> 1 \"register_operand\" \"w\")\n    (match_operand:VQ_HSI 2 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 3 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCONQ> 3 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 4 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<MODE>mode));\n-  operands[4] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[4])));\n-  emit_insn (gen_aarch64_sqdmlsl2_lane<mode>_internal (operands[0], operands[1],\n+  aarch64_simd_lane_bounds (operands[4], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  operands[4] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[4])));\n+  emit_insn (gen_aarch64_sqdmlsl2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       operands[4], p));\n   DONE;\n@@ -3166,7 +3239,28 @@\n \t       (sign_extend:<VWIDE>\n                  (vec_duplicate:VD_HSI\n                    (vec_select:<VEL>\n-\t\t     (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+\t\t     (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n+\t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n+\t       ))\n+\t     (const_int 1)))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n+    return \"sqdmull\\\\t%<vw2>0<Vmwtype>, %<v>1<Vmtype>, %2.<Vetype>[%3]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmull_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_ashift:<VWIDE>\n+\t     (mult:<VWIDE>\n+\t       (sign_extend:<VWIDE>\n+\t\t (match_operand:VD_HSI 1 \"register_operand\" \"w\"))\n+\t       (sign_extend:<VWIDE>\n+                 (vec_duplicate:VD_HSI\n+                   (vec_select:<VEL>\n+\t\t     (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n \t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n \t       ))\n \t     (const_int 1)))]\n@@ -3186,7 +3280,27 @@\n \t\t (match_operand:SD_HSI 1 \"register_operand\" \"w\"))\n \t       (sign_extend:<VWIDE>\n                  (vec_select:<VEL>\n-\t\t   (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+\t\t   (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n+\t\t   (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))\n+\t       ))\n+\t     (const_int 1)))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n+    return \"sqdmull\\\\t%<vw2>0<Vmwtype>, %<v>1<Vmtype>, %2.<Vetype>[%3]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmull_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_ashift:<VWIDE>\n+\t     (mult:<VWIDE>\n+\t       (sign_extend:<VWIDE>\n+\t\t (match_operand:SD_HSI 1 \"register_operand\" \"w\"))\n+\t       (sign_extend:<VWIDE>\n+                 (vec_select:<VEL>\n+\t\t   (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n \t\t   (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")]))\n \t       ))\n \t     (const_int 1)))]\n@@ -3201,12 +3315,12 @@\n (define_expand \"aarch64_sqdmull_lane<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:VSD_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCON>mode) / 2);\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCON>mode, INTVAL (operands[3])));\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t      operands[2], operands[3]));\n   DONE;\n@@ -3215,13 +3329,13 @@\n (define_expand \"aarch64_sqdmull_laneq<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:VD_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCON>mode));\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n   operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n-  emit_insn (gen_aarch64_sqdmull_lane<mode>_internal\n+  emit_insn (gen_aarch64_sqdmull_laneq<mode>_internal\n \t       (operands[0], operands[1], operands[2], operands[3]));\n   DONE;\n })\n@@ -3270,7 +3384,7 @@\n (define_expand \"aarch64_sqdmull2<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 2 \"register_operand\" \"w\")]\n+   (match_operand:VQ_HSI 2 \"register_operand\" \"w\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n@@ -3292,7 +3406,30 @@\n \t       (sign_extend:<VWIDE>\n                  (vec_duplicate:<VHALF>\n                    (vec_select:<VEL>\n-\t\t     (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+\t\t     (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n+\t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n+\t       ))\n+\t     (const_int 1)))]\n+  \"TARGET_SIMD\"\n+  {\n+    operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n+    return \"sqdmull2\\\\t%<vw2>0<Vmwtype>, %<v>1<Vmtype>, %2.<Vetype>[%3]\";\n+  }\n+  [(set_attr \"type\" \"neon_sat_mul_<Vetype>_scalar_long\")]\n+)\n+\n+(define_insn \"aarch64_sqdmull2_laneq<mode>_internal\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (ss_ashift:<VWIDE>\n+\t     (mult:<VWIDE>\n+\t       (sign_extend:<VWIDE>\n+\t\t (vec_select:<VHALF>\n+                   (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+                   (match_operand:VQ_HSI 4 \"vect_par_cnst_hi_half\" \"\")))\n+\t       (sign_extend:<VWIDE>\n+                 (vec_duplicate:<VHALF>\n+                   (vec_select:<VEL>\n+\t\t     (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n \t\t     (parallel [(match_operand:SI 3 \"immediate_operand\" \"i\")])))\n \t       ))\n \t     (const_int 1)))]\n@@ -3307,13 +3444,13 @@\n (define_expand \"aarch64_sqdmull2_lane<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCOND> 2 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode) / 2);\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCOND>mode));\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCOND>mode, INTVAL (operands[3])));\n   emit_insn (gen_aarch64_sqdmull2_lane<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));\n@@ -3323,14 +3460,14 @@\n (define_expand \"aarch64_sqdmull2_laneq<mode>\"\n   [(match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n-   (match_operand:<VCON> 2 \"register_operand\" \"<vwx>\")\n+   (match_operand:<VCONQ> 2 \"register_operand\" \"<vwx>\")\n    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_SIMD\"\n {\n   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, true);\n-  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n-  operands[3] = GEN_INT (ENDIAN_LANE_N (<MODE>mode, INTVAL (operands[3])));\n-  emit_insn (gen_aarch64_sqdmull2_lane<mode>_internal (operands[0], operands[1],\n+  aarch64_simd_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<VCONQ>mode));\n+  operands[3] = GEN_INT (ENDIAN_LANE_N (<VCONQ>mode, INTVAL (operands[3])));\n+  emit_insn (gen_aarch64_sqdmull2_laneq<mode>_internal (operands[0], operands[1],\n \t\t\t\t\t\t       operands[2], operands[3],\n \t\t\t\t\t\t       p));\n   DONE;"}, {"sha": "3ed8a9851b5a29dd81199e456a15420cfe3e4392", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 22, "deletions": 28, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -19219,7 +19219,7 @@ vqdmlal_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vqdmlal_high_lane_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c,\n+vqdmlal_high_lane_s16 (int32x4_t __a, int16x8_t __b, int16x4_t __c,\n \t\t       int const __d)\n {\n   return __builtin_aarch64_sqdmlal2_lanev8hi (__a, __b, __c, __d);\n@@ -19241,8 +19241,7 @@ vqdmlal_high_n_s16 (int32x4_t __a, int16x8_t __b, int16_t __c)\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqdmlal_lane_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c, int const __d)\n {\n-  int16x8_t __tmp = vcombine_s16 (__c, vcreate_s16 (__AARCH64_INT64_C (0)));\n-  return __builtin_aarch64_sqdmlal_lanev4hi (__a, __b, __tmp, __d);\n+  return __builtin_aarch64_sqdmlal_lanev4hi (__a, __b, __c, __d);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -19270,7 +19269,7 @@ vqdmlal_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vqdmlal_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c,\n+vqdmlal_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x2_t __c,\n \t\t       int const __d)\n {\n   return __builtin_aarch64_sqdmlal2_lanev4si (__a, __b, __c, __d);\n@@ -19292,8 +19291,7 @@ vqdmlal_high_n_s32 (int64x2_t __a, int32x4_t __b, int32_t __c)\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vqdmlal_lane_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c, int const __d)\n {\n-  int32x4_t __tmp = vcombine_s32 (__c, vcreate_s32 (__AARCH64_INT64_C (0)));\n-  return __builtin_aarch64_sqdmlal_lanev2si (__a, __b, __tmp, __d);\n+  return __builtin_aarch64_sqdmlal_lanev2si (__a, __b, __c, __d);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -19315,7 +19313,7 @@ vqdmlalh_s16 (int32x1_t __a, int16x1_t __b, int16x1_t __c)\n }\n \n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmlalh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x8_t __c, const int __d)\n+vqdmlalh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x4_t __c, const int __d)\n {\n   return __builtin_aarch64_sqdmlal_lanehi (__a, __b, __c, __d);\n }\n@@ -19327,7 +19325,7 @@ vqdmlals_s32 (int64x1_t __a, int32x1_t __b, int32x1_t __c)\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vqdmlals_lane_s32 (int64x1_t __a, int32x1_t __b, int32x4_t __c, const int __d)\n+vqdmlals_lane_s32 (int64x1_t __a, int32x1_t __b, int32x2_t __c, const int __d)\n {\n   return __builtin_aarch64_sqdmlal_lanesi (__a, __b, __c, __d);\n }\n@@ -19347,7 +19345,7 @@ vqdmlsl_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vqdmlsl_high_lane_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c,\n+vqdmlsl_high_lane_s16 (int32x4_t __a, int16x8_t __b, int16x4_t __c,\n \t\t       int const __d)\n {\n   return __builtin_aarch64_sqdmlsl2_lanev8hi (__a, __b, __c, __d);\n@@ -19369,8 +19367,7 @@ vqdmlsl_high_n_s16 (int32x4_t __a, int16x8_t __b, int16_t __c)\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqdmlsl_lane_s16 (int32x4_t __a, int16x4_t __b, int16x4_t __c, int const __d)\n {\n-  int16x8_t __tmp = vcombine_s16 (__c, vcreate_s16 (__AARCH64_INT64_C (0)));\n-  return __builtin_aarch64_sqdmlsl_lanev4hi (__a, __b, __tmp, __d);\n+  return __builtin_aarch64_sqdmlsl_lanev4hi (__a, __b, __c, __d);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -19398,7 +19395,7 @@ vqdmlsl_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vqdmlsl_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c,\n+vqdmlsl_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x2_t __c,\n \t\t       int const __d)\n {\n   return __builtin_aarch64_sqdmlsl2_lanev4si (__a, __b, __c, __d);\n@@ -19420,8 +19417,7 @@ vqdmlsl_high_n_s32 (int64x2_t __a, int32x4_t __b, int32_t __c)\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vqdmlsl_lane_s32 (int64x2_t __a, int32x2_t __b, int32x2_t __c, int const __d)\n {\n-  int32x4_t __tmp = vcombine_s32 (__c, vcreate_s32 (__AARCH64_INT64_C (0)));\n-  return __builtin_aarch64_sqdmlsl_lanev2si (__a, __b, __tmp, __d);\n+  return __builtin_aarch64_sqdmlsl_lanev2si (__a, __b, __c, __d);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -19443,7 +19439,7 @@ vqdmlslh_s16 (int32x1_t __a, int16x1_t __b, int16x1_t __c)\n }\n \n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmlslh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x8_t __c, const int __d)\n+vqdmlslh_lane_s16 (int32x1_t __a, int16x1_t __b, int16x4_t __c, const int __d)\n {\n   return __builtin_aarch64_sqdmlsl_lanehi (__a, __b, __c, __d);\n }\n@@ -19455,7 +19451,7 @@ vqdmlsls_s32 (int64x1_t __a, int32x1_t __b, int32x1_t __c)\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vqdmlsls_lane_s32 (int64x1_t __a, int32x1_t __b, int32x4_t __c, const int __d)\n+vqdmlsls_lane_s32 (int64x1_t __a, int32x1_t __b, int32x2_t __c, const int __d)\n {\n   return __builtin_aarch64_sqdmlsl_lanesi (__a, __b, __c, __d);\n }\n@@ -19493,7 +19489,7 @@ vqdmulhh_s16 (int16x1_t __a, int16x1_t __b)\n }\n \n __extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqdmulhh_lane_s16 (int16x1_t __a, int16x8_t __b, const int __c)\n+vqdmulhh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmulh_lanehi (__a, __b, __c);\n }\n@@ -19505,7 +19501,7 @@ vqdmulhs_s32 (int32x1_t __a, int32x1_t __b)\n }\n \n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmulhs_lane_s32 (int32x1_t __a, int32x4_t __b, const int __c)\n+vqdmulhs_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmulh_lanesi (__a, __b, __c);\n }\n@@ -19525,7 +19521,7 @@ vqdmull_high_s16 (int16x8_t __a, int16x8_t __b)\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vqdmull_high_lane_s16 (int16x8_t __a, int16x8_t __b, int const __c)\n+vqdmull_high_lane_s16 (int16x8_t __a, int16x4_t __b, int const __c)\n {\n   return __builtin_aarch64_sqdmull2_lanev8hi (__a, __b,__c);\n }\n@@ -19545,8 +19541,7 @@ vqdmull_high_n_s16 (int16x8_t __a, int16_t __b)\n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vqdmull_lane_s16 (int16x4_t __a, int16x4_t __b, int const __c)\n {\n-  int16x8_t __tmp = vcombine_s16 (__b, vcreate_s16 (__AARCH64_INT64_C (0)));\n-  return __builtin_aarch64_sqdmull_lanev4hi (__a, __tmp, __c);\n+  return __builtin_aarch64_sqdmull_lanev4hi (__a, __b, __c);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n@@ -19574,7 +19569,7 @@ vqdmull_high_s32 (int32x4_t __a, int32x4_t __b)\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n-vqdmull_high_lane_s32 (int32x4_t __a, int32x4_t __b, int const __c)\n+vqdmull_high_lane_s32 (int32x4_t __a, int32x2_t __b, int const __c)\n {\n   return __builtin_aarch64_sqdmull2_lanev4si (__a, __b, __c);\n }\n@@ -19594,8 +19589,7 @@ vqdmull_high_n_s32 (int32x4_t __a, int32_t __b)\n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vqdmull_lane_s32 (int32x2_t __a, int32x2_t __b, int const __c)\n {\n-  int32x4_t __tmp = vcombine_s32 (__b, vcreate_s32 (__AARCH64_INT64_C (0)));\n-  return __builtin_aarch64_sqdmull_lanev2si (__a, __tmp, __c);\n+  return __builtin_aarch64_sqdmull_lanev2si (__a, __b, __c);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n@@ -19617,7 +19611,7 @@ vqdmullh_s16 (int16x1_t __a, int16x1_t __b)\n }\n \n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqdmullh_lane_s16 (int16x1_t __a, int16x8_t __b, const int __c)\n+vqdmullh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmull_lanehi (__a, __b, __c);\n }\n@@ -19629,7 +19623,7 @@ vqdmulls_s32 (int32x1_t __a, int32x1_t __b)\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n-vqdmulls_lane_s32 (int32x1_t __a, int32x4_t __b, const int __c)\n+vqdmulls_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n {\n   return __builtin_aarch64_sqdmull_lanesi (__a, __b, __c);\n }\n@@ -19811,7 +19805,7 @@ vqrdmulhh_s16 (int16x1_t __a, int16x1_t __b)\n }\n \n __extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n-vqrdmulhh_lane_s16 (int16x1_t __a, int16x8_t __b, const int __c)\n+vqrdmulhh_lane_s16 (int16x1_t __a, int16x4_t __b, const int __c)\n {\n   return __builtin_aarch64_sqrdmulh_lanehi (__a, __b, __c);\n }\n@@ -19823,7 +19817,7 @@ vqrdmulhs_s32 (int32x1_t __a, int32x1_t __b)\n }\n \n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n-vqrdmulhs_lane_s32 (int32x1_t __a, int32x4_t __b, const int __c)\n+vqrdmulhs_lane_s32 (int32x1_t __a, int32x2_t __b, const int __c)\n {\n   return __builtin_aarch64_sqrdmulh_lanesi (__a, __b, __c);\n }"}, {"sha": "5c304bff23901e027d815bcfed6f867fc011681c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -410,14 +410,15 @@\n \t\t\t(SI   \"SI\") (HI   \"HI\")\n \t\t\t(QI   \"QI\")])\n \n-;; Define container mode for lane selection.\n-(define_mode_attr VCOND [(V4HI \"V4HI\") (V8HI \"V4HI\")\n+;; 64-bit container modes the inner or scalar source mode.\n+(define_mode_attr VCOND [(HI \"V4HI\") (SI \"V2SI\")\n+\t\t\t (V4HI \"V4HI\") (V8HI \"V4HI\")\n \t\t\t (V2SI \"V2SI\") (V4SI \"V2SI\")\n \t\t\t (DI   \"DI\") (V2DI \"DI\")\n \t\t\t (V2SF \"V2SF\") (V4SF \"V2SF\")\n \t\t\t (V2DF \"DF\")])\n \n-;; Define container mode for lane selection.\n+;; 128-bit container modes the inner or scalar source mode.\n (define_mode_attr VCONQ [(V8QI \"V16QI\") (V16QI \"V16QI\")\n \t\t\t (V4HI \"V8HI\") (V8HI \"V8HI\")\n \t\t\t (V2SI \"V4SI\") (V4SI \"V4SI\")\n@@ -426,15 +427,6 @@\n \t\t\t (V2DF \"V2DF\") (SI   \"V4SI\")\n \t\t\t (HI   \"V8HI\") (QI   \"V16QI\")])\n \n-;; Define container mode for lane selection.\n-(define_mode_attr VCON [(V8QI \"V16QI\") (V16QI \"V16QI\")\n-\t\t\t(V4HI \"V8HI\") (V8HI \"V8HI\")\n-\t\t\t(V2SI \"V4SI\") (V4SI \"V4SI\")\n-\t\t\t(DI   \"V2DI\") (V2DI \"V2DI\")\n-\t\t\t(V2SF \"V4SF\") (V4SF \"V4SF\")\n-\t\t\t(V2DF \"V2DF\") (SI   \"V4SI\")\n-\t\t\t(HI   \"V8HI\") (QI   \"V16QI\")])\n-\n ;; Half modes of all vector modes.\n (define_mode_attr VHALF [(V8QI \"V4QI\")  (V16QI \"V8QI\")\n \t\t\t (V4HI \"V2HI\")  (V8HI  \"V4HI\")"}, {"sha": "b64b33c5b78f37279a3a3479a544fc951df06fce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -1,3 +1,65 @@\n+2014-06-16  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/simd/vqdmulhh_lane_s16.c: New test.\n+\t* gcc.target/aarch64/simd/vqdmulhs_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhs_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_high_lane_s16.c: New test.\n+\t* gcc.target/aarch64/simd/vqdmlal_high_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_high_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_high_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlal_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlalh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlals_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_high_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_high_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_high_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_high_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsl_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlslh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmlsls_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulh_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulh_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhq_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulhq_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_high_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_high_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_high_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_high_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmull_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmullh_lane_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqdmulls_lane_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulh_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulh_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhq_laneq_s16.c: Likewise.\n+\t* gcc.target/aarch64/simd/vqrdmulhq_laneq_s32.c: Likewise.\n+\t* gcc.target/aarch64/vector_intrinsics.c: Simplify arm_neon.h include.\n+\t(test_vqdmlal_high_lane_s16): Fix parameter type.\n+\t(test_vqdmlal_high_lane_s32): Likewise.\n+\t(test_vqdmull_high_lane_s16): Likewise.\n+\t(test_vqdmull_high_lane_s32): Likewise.\n+\t(test_vqdmlsl_high_lane_s32): Likewise.\n+\t(test_vqdmlsl_high_lane_s16): Likewise.\n+\t* gcc.target/aarch64/scalar_intrinsics.c (test_vqdmlalh_lane_s16):\n+\tFix argument type.\n+\t(test_vqdmlals_lane_s32): Likewise.\n+\t(test_vqdmlslh_lane_s16): Likewise.\n+\t(test_vqdmlsls_lane_s32): Likewise.\n+\t(test_vqdmulhh_lane_s16): Likewise.\n+\t(test_vqdmulhs_lane_s32): Likewise.\n+\t(test_vqdmullh_lane_s16): Likewise.\n+\t(test_vqdmulls_lane_s32): Likewise.\n+\t(test_vqrdmulhh_lane_s16): Likewise.\n+\t(test_vqrdmulhs_lane_s32): Likewise.\n+\n 2014-06-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR testsuite/61567"}, {"sha": "782f6d194ca8fb2f750e6e75b9a82f022a0e2e6a", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -387,7 +387,7 @@ test_vqdmlalh_s16 (int32x1_t a, int16x1_t b, int16x1_t c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n int32x1_t\n-test_vqdmlalh_lane_s16 (int32x1_t a, int16x1_t b, int16x8_t c)\n+test_vqdmlalh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n {\n   return vqdmlalh_lane_s16 (a, b, c, 3);\n }\n@@ -403,7 +403,7 @@ test_vqdmlals_s32 (int64x1_t a, int32x1_t b, int32x1_t c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n int64x1_t\n-test_vqdmlals_lane_s32 (int64x1_t a, int32x1_t b, int32x4_t c)\n+test_vqdmlals_lane_s32 (int64x1_t a, int32x1_t b, int32x2_t c)\n {\n   return vqdmlals_lane_s32 (a, b, c, 1);\n }\n@@ -419,7 +419,7 @@ test_vqdmlslh_s16 (int32x1_t a, int16x1_t b, int16x1_t c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n int32x1_t\n-test_vqdmlslh_lane_s16 (int32x1_t a, int16x1_t b, int16x8_t c)\n+test_vqdmlslh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n {\n   return vqdmlslh_lane_s16 (a, b, c, 3);\n }\n@@ -435,7 +435,7 @@ test_vqdmlsls_s32 (int64x1_t a, int32x1_t b, int32x1_t c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n int64x1_t\n-test_vqdmlsls_lane_s32 (int64x1_t a, int32x1_t b, int32x4_t c)\n+test_vqdmlsls_lane_s32 (int64x1_t a, int32x1_t b, int32x2_t c)\n {\n   return vqdmlsls_lane_s32 (a, b, c, 1);\n }\n@@ -451,7 +451,7 @@ test_vqdmulhh_s16 (int16x1_t a, int16x1_t b)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n int16x1_t\n-test_vqdmulhh_lane_s16 (int16x1_t a, int16x8_t b)\n+test_vqdmulhh_lane_s16 (int16x1_t a, int16x4_t b)\n {\n   return vqdmulhh_lane_s16 (a, b, 3);\n }\n@@ -467,9 +467,9 @@ test_vqdmulhs_s32 (int32x1_t a, int32x1_t b)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n int32x1_t\n-test_vqdmulhs_lane_s32 (int32x1_t a, int32x4_t b)\n+test_vqdmulhs_lane_s32 (int32x1_t a, int32x2_t b)\n {\n-  return vqdmulhs_lane_s32 (a, b, 3);\n+  return vqdmulhs_lane_s32 (a, b, 1);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\ts\\[0-9\\]+, h\\[0-9\\]+, h\\[0-9\\]+\" 1 } } */\n@@ -483,7 +483,7 @@ test_vqdmullh_s16 (int16x1_t a, int16x1_t b)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\ts\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n int32x1_t\n-test_vqdmullh_lane_s16 (int16x1_t a, int16x8_t b)\n+test_vqdmullh_lane_s16 (int16x1_t a, int16x4_t b)\n {\n   return vqdmullh_lane_s16 (a, b, 3);\n }\n@@ -499,7 +499,7 @@ test_vqdmulls_s32 (int32x1_t a, int32x1_t b)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmull\\\\td\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n int64x1_t\n-test_vqdmulls_lane_s32 (int32x1_t a, int32x4_t b)\n+test_vqdmulls_lane_s32 (int32x1_t a, int32x2_t b)\n {\n   return vqdmulls_lane_s32 (a, b, 1);\n }\n@@ -515,9 +515,9 @@ test_vqrdmulhh_s16 (int16x1_t a, int16x1_t b)\n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\th\\[0-9\\]+, h\\[0-9\\]+, v\" 1 } } */\n \n int16x1_t\n-test_vqrdmulhh_lane_s16 (int16x1_t a, int16x8_t b)\n+test_vqrdmulhh_lane_s16 (int16x1_t a, int16x4_t b)\n {\n-  return vqrdmulhh_lane_s16 (a, b, 6);\n+  return vqrdmulhh_lane_s16 (a, b, 3);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, s\\[0-9\\]+\" 1 } } */\n@@ -531,9 +531,9 @@ test_vqrdmulhs_s32 (int32x1_t a, int32x1_t b)\n /* { dg-final { scan-assembler-times \"\\\\tsqrdmulh\\\\ts\\[0-9\\]+, s\\[0-9\\]+, v\" 1 } } */\n \n int32x1_t\n-test_vqrdmulhs_lane_s32 (int32x1_t a, int32x4_t b)\n+test_vqrdmulhs_lane_s32 (int32x1_t a, int32x2_t b)\n {\n-  return vqrdmulhs_lane_s32 (a, b, 2);\n+  return vqrdmulhs_lane_s32 (a, b, 1);\n }\n \n /* { dg-final { scan-assembler-times \"\\\\tsuqadd\\\\tb\\[0-9\\]+\" 1 } } */"}, {"sha": "1388c3b613d68162dc6ff81b91db380767ecda97", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_high_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t c)\n+{\n+  return vqdmlal_high_lane_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f90387dba890c98b5426e4ee7c05cdb210b934d5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_high_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlal_high_lane_s32 (int64x2_t a, int32x4_t b, int32x2_t c)\n+{\n+  return vqdmlal_high_lane_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5399ce985385f7a7589fc7c70f79f5c087914f5e", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_high_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlal_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vqdmlal_high_laneq_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e4b55582eabe7d2313b556491b0e575a5879402d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_high_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_high_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_high_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlal_high_laneq_s32 (int64x2_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vqdmlal_high_laneq_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7e60c8220786b7042471e715abe5ba1690eb8325", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlal_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t c)\n+{\n+  return vqdmlal_lane_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c0f508dc954351653c151c0aa7328e9d815b535c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlal_lane_s32 (int64x2_t a, int32x2_t b, int32x2_t c)\n+{\n+  return vqdmlal_lane_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9bf13043513fe88ad9ad8a1cedca52d8e928f387", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlal_laneq_s16 (int32x4_t a, int16x4_t b, int16x8_t c)\n+{\n+  return vqdmlal_laneq_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5fd9c56dc8940089279e8cd0e672c45c4ce058c7", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlal_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlal_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlal_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlal_laneq_s32 (int64x2_t a, int32x2_t b, int32x4_t c)\n+{\n+  return vqdmlal_laneq_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "83f5af5960ffc2a2994d04062452bf62ad6bf92c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlalh_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlalh_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlalh_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x1_t\n+t_vqdmlalh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n+{\n+  return vqdmlalh_lane_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "ef94e95d97142ad450824d39c74bad15b555fe31", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlals_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlals_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlals_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x1_t\n+t_vqdmlals_lane_s32 (int64x1_t a, int32x1_t b, int32x2_t c)\n+{\n+  return vqdmlals_lane_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlal\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "276a1a2a93dfe213d9448a98c19881111c833d25", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_high_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlsl_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t c)\n+{\n+  return vqdmlsl_high_lane_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "2ae58ef0bc40fb22a61f7efe2eafaa2426e07111", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_high_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlsl_high_lane_s32 (int64x2_t a, int32x4_t b, int32x2_t c)\n+{\n+  return vqdmlsl_high_lane_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1db5db4c96285c5dd0565a9e6c2817802160e6c8", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_high_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlsl_high_laneq_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+{\n+  return vqdmlsl_high_laneq_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3a72a7bca9d65785e28a7ca2414c70b7a9ab61c0", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_high_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_high_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_high_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlsl_high_laneq_s32 (int64x2_t a, int32x4_t b, int32x4_t c)\n+{\n+  return vqdmlsl_high_laneq_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0535378e46af0ce92bcc7853adaf829bb91c293c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmlsl_lane_s16 (int32x4_t a, int16x4_t b, int16x4_t c)\n+{\n+  return vqdmlsl_lane_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b52e51e1a6f1dab43914c2aca5d70b05e3387d27", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlsl_lane_s32 (int64x2_t a, int32x2_t b, int32x2_t c)\n+{\n+  return vqdmlsl_lane_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7009a35f2c3a161e5daac26effaf85db2e49e03a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsl_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsl_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsl_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmlsl_lane_s32 (int64x2_t a, int32x2_t b, int32x4_t c)\n+{\n+  return vqdmlsl_laneq_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "056dfbb11f01eef3d0b820735253059db86727f4", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlslh_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlslh_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlslh_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x1_t\n+t_vqdmlslh_lane_s16 (int32x1_t a, int16x1_t b, int16x4_t c)\n+{\n+  return vqdmlslh_lane_s16 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9e351bc360fd578475480e79078153d3fb69b058", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmlsls_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmlsls_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmlsls_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x1_t\n+t_vqdmlsls_lane_s32 (int64x1_t a, int32x1_t b, int32x2_t c)\n+{\n+  return vqdmlsls_lane_s32 (a, b, c, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmlsl\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d3c699bd3377d4ef44ed645c2eeb897c0c9fbbc1", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulh_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmulh_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int16x4_t\n+t_vqdmulh_laneq_s16 (int16x4_t a, int16x8_t b)\n+{\n+  return vqdmulh_laneq_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c6202ce19b70c90def6fde162699ea97abc9d713", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulh_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulh_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmulh_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x2_t\n+t_vqdmulh_laneq_s32 (int32x2_t a, int32x4_t b)\n+{\n+  return vqdmulh_laneq_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7635851006078a94d228197ec95d250406885d36", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhh_lane_s16.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhh_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,36 @@\n+/* Test the vqdmulhh_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include <stdio.h>\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int16_t arg1;\n+  int16x4_t arg2;\n+  int16_t result;\n+  int16_t actual;\n+  int16_t expected;\n+\n+  arg1 = -32768;\n+  arg2 = vcreate_s16 (0x0000ffff2489e398ULL);\n+  actual = vqdmulhh_lane_s16 (arg1, arg2, 2);\n+  expected = 1;\n+\n+  if (expected != actual)\n+    {\n+      fprintf (stderr, \"Expected: %xd, got %xd\\n\", expected, actual);\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[2\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "809c85a7756f39c5c065f4a40fb76a67123d43ab", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhq_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmulhq_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int16x8_t\n+t_vqdmulhq_laneq_s16 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmulhq_laneq_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d375fe818e6cf46bf7a4d25f05226f6f1631e4fa", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhq_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhq_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmulhq_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmulhq_laneq_s32 (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmulhq_laneq_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "9c27f5f3a717c3efe1d83a72f097345072333f5d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulhs_lane_s32.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulhs_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,34 @@\n+/* Test the vqdmulhs_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include <stdio.h>\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int32_t arg1;\n+  int32x2_t arg2;\n+  int32_t result;\n+  int32_t actual;\n+  int32_t expected;\n+\n+  arg1 = 57336;\n+  arg2 = vcreate_s32 (0x55897fff7fff0000ULL);\n+  actual = vqdmulhs_lane_s32 (arg1, arg2, 0);\n+  expected = 57334;\n+\n+  if (expected != actual)\n+    {\n+      fprintf (stderr, \"Expected: %xd, got %xd\\n\", expected, actual);\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+/* { dg-final { scan-assembler-times \"sqdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0af320e2c6e6f4e3e33914e84934753477c966db", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_high_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmull_high_lane_s16 (int16x8_t a, int16x4_t b)\n+{\n+  return vqdmull_high_lane_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "583e8a172104a0879336ba5e5b4b87dfcbc2a14a", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_high_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmull_high_lane_s32 (int32x4_t a, int32x2_t b)\n+{\n+  return vqdmull_high_lane_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "dcfd14c7142524efe8a5d7d0d6150ad34d9feb4c", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_high_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmull_high_laneq_s16 (int16x8_t a, int16x8_t b)\n+{\n+  return vqdmull_high_laneq_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3e8b652d90cbb1ced5f16bfa56b45d3584f22415", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_high_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_high_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_high_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmull_high_laneq_s32 (int32x4_t a, int32x4_t b)\n+{\n+  return vqdmull_high_laneq_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull2\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "695d4e3fbc4a94740c0030f96d56ec26ab868fcd", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmull_lane_s16 (int16x4_t a, int16x4_t b)\n+{\n+  return vqdmull_lane_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e6a02b573ab1083a40522d117f60fdeb32407cc5", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmull_lane_s32 (int32x2_t a, int32x2_t b)\n+{\n+  return vqdmull_lane_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "ba761b23121e5bce46c91141f3553f0c20e4f659", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqdmull_laneq_s16 (int16x4_t a, int16x8_t b)\n+{\n+  return vqdmull_laneq_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "82b8e19ed7f102ba6e77bf655676cce3ffbd12ed", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmull_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmull_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmull_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x2_t\n+t_vqdmull_laneq_s32 (int32x2_t a, int32x4_t b)\n+{\n+  return vqdmull_laneq_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[dD\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "fd271e0b3a804c61da32a03f085ee16cec118847", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmullh_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmullh_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmullh_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x1_t\n+t_vqdmullh_lane_s16 (int16x1_t a, int16x4_t b)\n+{\n+  return vqdmullh_lane_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "1103333753756a9600da432712bc6f7c4d06f069", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqdmulls_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqdmulls_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqdmulls_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int64x1_t\n+t_vqdmulls_lane_s32 (int32x1_t a, int32x2_t b)\n+{\n+  return vqdmulls_lane_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqdmull\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0313f1c07d41bf62b59571c9464f471c486d98da", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulh_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqrdmulh_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int16x4_t\n+t_vqrdmulh_laneq_s16 (int16x4_t a, int16x8_t b)\n+{\n+  return vqrdmulh_laneq_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "a9124ee108d3a930706c446b78ef633cd9054d62", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulh_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulh_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqrdmulh_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x2_t\n+t_vqrdmulh_laneq_s32 (int32x2_t a, int32x4_t b)\n+{\n+  return vqrdmulh_laneq_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.2\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "f21863ab4681b13800732cd8f8f62cac6c735e8f", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhh_lane_s16.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhh_lane_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,35 @@\n+/* Test the vqrdmulhh_lane_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include <stdio.h>\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int16_t arg1;\n+  int16x4_t arg2;\n+  int16_t result;\n+  int16_t actual;\n+  int16_t expected;\n+\n+  arg1 = -32768;\n+  arg2 = vcreate_s16 (0xd78e000005d78000ULL);\n+  actual = vqrdmulhh_lane_s16 (arg1, arg2, 3);\n+  expected = 10354;\n+\n+  if (expected != actual)\n+    {\n+      fprintf (stderr, \"Expected: %xd, got %xd\\n\", expected, actual);\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[hH\\]\\[0-9\\]+, ?\\[hH\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[3\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "488e694ab4e15665a60e9a18b7bf85eae94d23ab", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhq_laneq_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s16.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqrdmulhq_laneq_s16 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int16x8_t\n+t_vqrdmulhq_laneq_s16 (int16x8_t a, int16x8_t b)\n+{\n+  return vqrdmulhq_laneq_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.8\\[hH\\], ?\\[vV\\]\\[0-9\\]+\\.\\[hH\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "42519f615819db5f630c9b14ea33046c858daaeb", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhq_laneq_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhq_laneq_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,15 @@\n+/* Test the vqrdmulhq_laneq_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+\n+int32x4_t\n+t_vqrdmulhq_laneq_s32 (int32x4_t a, int32x4_t b)\n+{\n+  return vqrdmulhq_laneq_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.4\\[sS\\], ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[0\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "83d2ba28e25e08ab598a10cc8a5b3c9c0c368f6d", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vqrdmulhs_lane_s32.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvqrdmulhs_lane_s32.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -0,0 +1,35 @@\n+/* Test the vqrdmulhs_lane_s32 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3 -fno-inline\" } */\n+\n+#include \"arm_neon.h\"\n+#include <stdio.h>\n+\n+extern void abort (void);\n+\n+int\n+main (void)\n+{\n+  int32_t arg1;\n+  int32x2_t arg2;\n+  int32_t result;\n+  int32_t actual;\n+  int32_t expected;\n+\n+  arg1 = -2099281921;\n+  arg2 = vcreate_s32 (0x000080007fff0000ULL);\n+  actual = vqrdmulhs_lane_s32 (arg1, arg2, 1);\n+  expected = -32033;\n+\n+  if (expected != actual)\n+    {\n+      fprintf (stderr, \"Expected: %xd, got %xd\\n\", expected, actual);\n+      abort ();\n+    }\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sqrdmulh\\[ \\t\\]+\\[sS\\]\\[0-9\\]+, ?\\[sS\\]\\[0-9\\]+, ?\\[vV\\]\\[0-9\\]+\\.\\[sS\\]\\\\\\[1\\\\\\]\\n\" 1 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "52b0496c8dbf18d283559a6989e74d9df0ba8f21", "filename": "gcc/testsuite/gcc.target/aarch64/vector_intrinsics.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/278821f265f3808a2b0d033737145e89d51d2218/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_intrinsics.c?ref=278821f265f3808a2b0d033737145e89d51d2218", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2\" } */\n \n-#include \"../../../config/aarch64/arm_neon.h\"\n+#include \"arm_neon.h\"\n \n \n /* { dg-final { scan-assembler-times \"\\\\tfmax\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\].2s, v\\[0-9\\].2s\" 1 } } */\n@@ -305,7 +305,7 @@ test_vqdmlal_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\" 3 } } */\n \n int32x4_t\n-test_vqdmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+test_vqdmlal_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t c)\n {\n   return vqdmlal_high_lane_s16 (a, b, c, 3);\n }\n@@ -361,7 +361,7 @@ test_vqdmlal_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlal2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\" 3 } } */\n \n int64x2_t\n-test_vqdmlal_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+test_vqdmlal_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x2_t __c)\n {\n   return vqdmlal_high_lane_s32 (__a, __b, __c, 1);\n }\n@@ -417,7 +417,7 @@ test_vqdmlsl_high_s16 (int32x4_t __a, int16x8_t __b, int16x8_t __c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\" 3 } } */\n \n int32x4_t\n-test_vqdmlsl_high_lane_s16 (int32x4_t a, int16x8_t b, int16x8_t c)\n+test_vqdmlsl_high_lane_s16 (int32x4_t a, int16x8_t b, int16x4_t c)\n {\n   return vqdmlsl_high_lane_s16 (a, b, c, 3);\n }\n@@ -473,7 +473,7 @@ test_vqdmlsl_high_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmlsl2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\" 3 } } */\n \n int64x2_t\n-test_vqdmlsl_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x4_t __c)\n+test_vqdmlsl_high_lane_s32 (int64x2_t __a, int32x4_t __b, int32x2_t __c)\n {\n   return vqdmlsl_high_lane_s32 (__a, __b, __c, 1);\n }\n@@ -529,7 +529,7 @@ test_vqdmull_high_s16 (int16x8_t __a, int16x8_t __b)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmull2\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.8h, v\\[0-9\\]+\\.h\" 3 } } */\n \n int32x4_t\n-test_vqdmull_high_lane_s16 (int16x8_t a, int16x8_t b)\n+test_vqdmull_high_lane_s16 (int16x8_t a, int16x4_t b)\n {\n   return vqdmull_high_lane_s16 (a, b, 3);\n }\n@@ -585,7 +585,7 @@ test_vqdmull_high_s32 (int32x4_t __a, int32x4_t __b)\n /* { dg-final { scan-assembler-times \"\\\\tsqdmull2\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.s\" 3 } } */\n \n int64x2_t\n-test_vqdmull_high_lane_s32 (int32x4_t __a, int32x4_t __b)\n+test_vqdmull_high_lane_s32 (int32x4_t __a, int32x2_t __b)\n {\n   return vqdmull_high_lane_s32 (__a, __b, 1);\n }"}]}