{"sha": "adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjZDhmNzc3ZWZlNzEzNWNkZjJlMmI1YWJlOWEyMGY5OThmNzRiZg==", "commit": {"author": {"name": "Marek Michalkiewicz", "email": "marekm@linux.org.pl", "date": "2000-10-01T14:59:35Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2000-10-01T14:59:35Z"}, "message": "avr.c (ashlhi3_out, [...]): Optimize more cases with known shift count.\n\n\t* config/avr/avr.c (ashlhi3_out, ashlsi3_out, ashrhi3_out,\n\tashrsi3_out, lshrhi3_out, lshrsi3_out): Optimize more cases\n\twith known shift count.\n\t* config/avr/avr.md (ashlsi3, ashrsi3, lshrsi3):\n\tNew alternative for shift count 2 with no scratch register.\n\t(ashlhi3, ashlsi3): Change \"cc\" attribute from \"clobber\" to\n\t\"set_n\" for shift counts 1 and 2.\n\nFrom-SVN: r36685", "tree": {"sha": "8c695a7c168d8eb986d8ef74735bcd0f123f22ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c695a7c168d8eb986d8ef74735bcd0f123f22ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/comments", "author": null, "committer": null, "parents": [{"sha": "e1defe102cd13aaa6ee36ffa99605dadbb653b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1defe102cd13aaa6ee36ffa99605dadbb653b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1defe102cd13aaa6ee36ffa99605dadbb653b05"}], "stats": {"total": 394, "additions": 348, "deletions": 46}, "files": [{"sha": "848e7da4b82422db87c643e520ed4bf5a4dc9c23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "patch": "@@ -1,3 +1,13 @@\n+2000-09-30  Marek Michalkiewicz  <marekm@linux.org.pl>\n+\n+\t* config/avr/avr.c (ashlhi3_out, ashlsi3_out, ashrhi3_out,\n+\tashrsi3_out, lshrhi3_out, lshrsi3_out): Optimize more cases\n+\twith known shift count.\n+\t* config/avr/avr.md (ashlsi3, ashrsi3, lshrsi3):\n+\tNew alternative for shift count 2 with no scratch register.\n+\t(ashlhi3, ashlsi3): Change \"cc\" attribute from \"clobber\" to\n+\t\"set_n\" for shift counts 1 and 2.\n+\n 2000-09-30  Geoff Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/rs6000.md (movsi_to_cr): Remove the USE.  Calculate"}, {"sha": "7382d1852440e74bb2c35e2ebc4fbf1fcdbaeae6", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 311, "deletions": 19, "changes": 330, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "patch": "@@ -2870,8 +2870,6 @@ ashlhi3_out (insn, operands, len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n-\tdefault: len = t; break;\n-\t  \n \tcase 1:\n \t  *len = 2;\n \t  return (AS1 (lsl,%A0) CR_TAB\n@@ -2881,16 +2879,103 @@ ashlhi3_out (insn, operands, len)\n \t  *len = 4;\n \t  return (AS1 (lsl,%A0) CR_TAB\n \t\t  AS1 (rol,%B0) CR_TAB\n-\t\t  AS1 (lsl,%0)  CR_TAB\n+\t\t  AS1 (lsl,%A0) CR_TAB\n \t\t  AS1 (rol,%B0));\n \n+\tcase 7:\n+\t  *len = 5;\n+\t  return (AS1 (lsr,%B0)     CR_TAB\n+\t\t  AS2 (mov,%B0,%A0) CR_TAB\n+\t\t  AS1 (clr,%A0)     CR_TAB\n+\t\t  AS1 (ror,%B0)     CR_TAB\n+\t\t  AS1 (ror,%A0));\n+\n \tcase 8:\n \t  if (true_regnum (operands[0]) + 1 == true_regnum (operands[1]))\n \t    return *len = 1, AS1 (clr,%A0);\n \t  else\n \t    return *len = 2, (AS2 (mov,%B0,%A1) CR_TAB\n \t\t\t      AS1 (clr,%A0));\n+\n+\tcase 9:\n+\t  *len = 3;\n+\t  return (AS2 (mov,%B0,%A0) CR_TAB\n+\t\t  AS1 (clr,%A0)     CR_TAB\n+\t\t  AS1 (lsl,%B0));\n+\n+\tcase 10:\n+\t  *len = 4;\n+\t  return (AS2 (mov,%B0,%A0) CR_TAB\n+\t\t  AS1 (clr,%A0)     CR_TAB\n+\t\t  AS1 (lsl,%B0)     CR_TAB\n+\t\t  AS1 (lsl,%B0));\n+\n+\tcase 11:\n+\t  *len = 5;\n+\t  return (AS2 (mov,%B0,%A0) CR_TAB\n+\t\t  AS1 (clr,%A0)     CR_TAB\n+\t\t  AS1 (lsl,%B0)     CR_TAB\n+\t\t  AS1 (lsl,%B0)     CR_TAB\n+\t\t  AS1 (lsl,%B0));\n+\n+\tcase 12:\n+\t  if (test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 4;\n+\t      return (AS2 (mov,%B0,%A0) CR_TAB\n+\t\t      AS1 (clr,%A0)     CR_TAB\n+\t\t      AS1 (swap,%B0)    CR_TAB\n+\t\t      AS2 (andi,%B0,0xf0));\n+\t    }\n+\t  /* %3 is a scratch register from class LD_REGS */\n+\t  *len = 5;\n+\t  return (AS2 (mov,%B0,%A0) CR_TAB\n+\t\t  AS1 (clr,%A0)     CR_TAB\n+\t\t  AS1 (swap,%B0)    CR_TAB\n+\t\t  AS2 (ldi,%3,0xf0) CR_TAB\n+\t\t  AS2 (and,%B0,%3));\n+\n+\tcase 13:\n+\t  if (test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (mov,%B0,%A0) CR_TAB\n+\t\t      AS1 (clr,%A0)     CR_TAB\n+\t\t      AS1 (swap,%B0)    CR_TAB\n+\t\t      AS1 (lsl,%B0)     CR_TAB\n+\t\t      AS2 (andi,%B0,0xe0));\n+\t    }\n+\t  if (AVR_ENHANCED)\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x20) CR_TAB\n+\t\t      AS2 (mul,%A0,%3)  CR_TAB\n+\t\t      AS2 (mov,%B0,r0)  CR_TAB\n+\t\t      AS1 (clr,%A0)     CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n+\tcase 14:\n+\t  if (AVR_ENHANCED)\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x40) CR_TAB\n+\t\t      AS2 (mul,%A0,%3)  CR_TAB\n+\t\t      AS2 (mov,%B0,r0)  CR_TAB\n+\t\t      AS1 (clr,%A0)     CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n+\tcase 15:\n+\t  *len = 4;\n+\t  return (AS1 (clr,%B0) CR_TAB\n+\t\t  AS1 (lsr,%A0) CR_TAB\n+\t\t  AS1 (ror,%B0) CR_TAB\n+\t\t  AS1 (clr,%A0));\n \t}\n+      len = t;\n     }\n   if (len)\n     *len = 4;\n@@ -2919,15 +3004,25 @@ ashlsi3_out (insn, operands, len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n-\tdefault: len = t; break;\n-\t  \n \tcase 1:\n \t  *len = 4;\n \t  return (AS1 (lsl,%A0) CR_TAB\n \t\t  AS1 (rol,%B0) CR_TAB\n \t\t  AS1 (rol,%C0) CR_TAB\n \t\t  AS1 (rol,%D0));\n \n+\tcase 2:\n+\t  /* Loop is one word smaller, but slower and needs a register.  */\n+\t  *len = 8;\n+\t  return (AS1 (lsl,%A0) CR_TAB\n+\t\t  AS1 (rol,%B0) CR_TAB\n+\t\t  AS1 (rol,%C0) CR_TAB\n+\t\t  AS1 (rol,%D0) CR_TAB\n+\t\t  AS1 (lsl,%A0) CR_TAB\n+\t\t  AS1 (rol,%B0) CR_TAB\n+\t\t  AS1 (rol,%C0) CR_TAB\n+\t\t  AS1 (rol,%D0));\n+\n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n@@ -2994,7 +3089,17 @@ ashlsi3_out (insn, operands, len)\n \t\t      AS1 (clr,%B0)      CR_TAB\n \t\t      AS1 (clr,%A0));\n \t    }\n+\n+\tcase 31:\n+\t  *len = 6;\n+\t  return (AS1 (clr,%D0) CR_TAB\n+\t\t  AS1 (lsr,%A0) CR_TAB\n+\t\t  AS1 (ror,%D0) CR_TAB\n+\t\t  AS1 (clr,%C0) CR_TAB\n+\t\t  AS1 (clr,%B0) CR_TAB\n+\t\t  AS1 (clr,%A0));\n \t}\n+      len = t;\n     }\n   if (len)\n     *len = 6;\n@@ -3096,8 +3201,6 @@ ashrhi3_out (insn, operands, len)\n \n       switch (INTVAL (operands[2]))\n \t{\n-\tdefault: len = t; break;\n-\t  \n \tcase 1:\n \t  *len=2;\n \t  return (AS1 (asr,%B0) CR_TAB\n@@ -3110,6 +3213,13 @@ ashrhi3_out (insn, operands, len)\n \t\t  AS1 (asr,%B0)  CR_TAB\n \t\t  AS1 (ror,%A0));\n \n+\tcase 7:\n+\t  *len = 4;\n+\t  return (AS1 (lsl,%A0)     CR_TAB\n+\t\t  AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (rol,%A0)     CR_TAB\n+\t\t  AS2 (sbc,%B0,%B0));\n+\n \tcase 8:\n \t  if (true_regnum (operands[0]) != true_regnum (operands[1]) + 1)\n \t    return *len = 4, (AS2 (mov,%A0,%B1) CR_TAB\n@@ -3121,11 +3231,71 @@ ashrhi3_out (insn, operands, len)\n \t\t\t      AS2 (sbrc,%A0,7)  CR_TAB\n \t\t\t      AS1 (dec,%B0));\n \n+\tcase 9:\n+\t  *len = 4;\n+\t  return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (lsl,%B0)      CR_TAB\n+\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n+\t\t  AS1 (asr,%A0));\n+\n+\tcase 10:\n+\t  *len = 5;\n+\t  return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (lsl,%B0)     CR_TAB\n+\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n+\t\t  AS1 (asr,%A0)     CR_TAB\n+\t\t  AS1 (asr,%A0));\n+\n+\tcase 11:\n+\t  if (AVR_ENHANCED && test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x20) CR_TAB\n+\t\t      AS2 (muls,%B0,%3) CR_TAB\n+\t\t      AS2 (mov,%A0,r1)  CR_TAB\n+\t\t      AS2 (sbc,%B0,%B0) CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n+\tcase 12:\n+\t  if (AVR_ENHANCED && test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x10) CR_TAB\n+\t\t      AS2 (muls,%B0,%3) CR_TAB\n+\t\t      AS2 (mov,%A0,r1)  CR_TAB\n+\t\t      AS2 (sbc,%B0,%B0) CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n+\tcase 13:\n+\t  if (AVR_ENHANCED && test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x08) CR_TAB\n+\t\t      AS2 (muls,%B0,%3) CR_TAB\n+\t\t      AS2 (mov,%A0,r1)  CR_TAB\n+\t\t      AS2 (sbc,%B0,%B0) CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n+\tcase 14:\n+\t  *len = 5;\n+\t  return (AS1 (lsl,%B0)     CR_TAB\n+\t\t  AS2 (sbc,%A0,%A0) CR_TAB\n+\t\t  AS1 (lsl,%B0)     CR_TAB\n+\t\t  AS2 (mov,%B0,%A0) CR_TAB\n+\t\t  AS1 (rol,%A0));\n+\n \tcase 15:\n \t  return *len = 3, (AS1 (lsl,%B0)     CR_TAB\n \t\t\t    AS2 (sbc,%A0,%A0) CR_TAB\n \t\t\t    AS2 (mov,%B0,%A0));\n \t}\n+      len = t;\n     }\n   if (len)\n     *len = 4;\n@@ -3154,15 +3324,25 @@ ashrsi3_out (insn, operands, len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n-\tdefault: len = t; break;\n-\n \tcase 1:\n \t  *len=4;\n \t  return (AS1 (asr,%D0)  CR_TAB\n \t\t  AS1 (ror,%C0)  CR_TAB\n \t\t  AS1 (ror,%B0)  CR_TAB\n \t\t  AS1 (ror,%A0));\n \n+\tcase 2:\n+\t  /* Loop is one word smaller, but slower and needs a register.  */\n+\t  *len = 8;\n+\t  return (AS1 (asr,%D0) CR_TAB\n+\t\t  AS1 (ror,%C0) CR_TAB\n+\t\t  AS1 (ror,%B0) CR_TAB\n+\t\t  AS1 (ror,%A0) CR_TAB\n+\t\t  AS1 (asr,%D0) CR_TAB\n+\t\t  AS1 (ror,%C0) CR_TAB\n+\t\t  AS1 (ror,%B0) CR_TAB\n+\t\t  AS1 (ror,%A0));\n+\n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n@@ -3240,7 +3420,21 @@ ashrsi3_out (insn, operands, len)\n \t\t\t      AS1 (com,%D0)     CR_TAB\n \t\t\t      AS2 (mov,%B0,%D0) CR_TAB\n \t\t\t      AS2 (mov,%C0,%D0));\n+\n+\tcase 31:\n+\t  if (AVR_ENHANCED)\n+\t    return *len = 4, (AS1 (lsl,%D0)     CR_TAB\n+\t\t\t      AS2 (sbc,%A0,%A0) CR_TAB\n+\t\t\t      AS2 (mov,%B0,%A0) CR_TAB\n+\t\t\t      AS2 (movw,%C0,%A0));\n+\t  else\n+\t    return *len = 5, (AS1 (lsl,%D0)     CR_TAB\n+\t\t\t      AS2 (sbc,%A0,%A0) CR_TAB\n+\t\t\t      AS2 (mov,%B0,%A0) CR_TAB\n+\t\t\t      AS2 (mov,%C0,%A0) CR_TAB\n+\t\t\t      AS2 (mov,%D0,%A0));\n \t}\n+      len = t;\n     }\n   if (len)\n     *len = 6;\n@@ -3367,8 +3561,6 @@ lshrhi3_out (insn, operands, len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n-\tdefault: len = t; break;\n-\t  \n \tcase 1:\n \t  *len = 2;\n \t  return (AS1 (lsr,%B0) CR_TAB\n@@ -3380,21 +3572,101 @@ lshrhi3_out (insn, operands, len)\n \t\t  AS1 (ror,%A0)  CR_TAB\n \t\t  AS1 (lsr,%B0)  CR_TAB\n \t\t  AS1 (ror,%A0));\n-\t  \n+\n+\tcase 7:\n+\t  *len = 5;\n+\t  return (AS1 (lsl,%A0)     CR_TAB\n+\t\t  AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (rol,%A0)     CR_TAB\n+\t\t  AS2 (sbc,%B0,%B0) CR_TAB\n+\t\t  AS1 (neg,%B0));\n+\n \tcase 8:\n \t  if (true_regnum (operands[0]) != true_regnum (operands[1]) + 1)\n \t    return *len = 2, (AS2 (mov,%A0,%B1) CR_TAB\n \t\t\t      AS1 (clr,%B0));\n \t  else\n \t    return *len = 1, AS1 (clr,%B0);\n-\t  \n+\n+\tcase 9:\n+\t  *len = 3;\n+\t  return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (clr,%B0)     CR_TAB\n+\t\t  AS1 (lsr,%A0));\n+\n+\tcase 10:\n+\t  *len = 4;\n+\t  return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (clr,%B0)     CR_TAB\n+\t\t  AS1 (lsr,%A0)     CR_TAB\n+\t\t  AS1 (lsr,%A0));\n+\n+\tcase 11:\n+\t  *len = 5;\n+\t  return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (clr,%B0)     CR_TAB\n+\t\t  AS1 (lsr,%A0)     CR_TAB\n+\t\t  AS1 (lsr,%A0)     CR_TAB\n+\t\t  AS1 (lsr,%A0));\n+\n+\tcase 12:\n+\t  if (test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 4;\n+\t      return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t      AS1 (clr,%B0)     CR_TAB\n+\t\t      AS1 (swap,%A0)    CR_TAB\n+\t\t      AS2 (andi,%A0,0x0f));\n+\t    }\n+\t  /* %3 is a scratch register from class LD_REGS */\n+\t  *len = 5;\n+\t  return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t  AS1 (clr,%B0)     CR_TAB\n+\t\t  AS1 (swap,%A0)    CR_TAB\n+\t\t  AS2 (ldi,%3,0x0f) CR_TAB\n+\t\t  AS2 (and,%A0,%3));\n+\n+\tcase 13:\n+\t  if (test_hard_reg_class (LD_REGS, operands[0]))\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (mov,%A0,%B0) CR_TAB\n+\t\t      AS1 (clr,%B0)     CR_TAB\n+\t\t      AS1 (swap,%A0)    CR_TAB\n+\t\t      AS1 (lsr,%A0)     CR_TAB\n+\t\t      AS2 (andi,%A0,0x07));\n+\t    }\n+\t  if (AVR_ENHANCED)\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x08) CR_TAB\n+\t\t      AS2 (mul,%B0,%3)  CR_TAB\n+\t\t      AS2 (mov,%A0,r1)  CR_TAB\n+\t\t      AS1 (clr,%B0)     CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n+\tcase 14:\n+\t  if (AVR_ENHANCED)\n+\t    {\n+\t      *len = 5;\n+\t      return (AS2 (ldi,%3,0x04) CR_TAB\n+\t\t      AS2 (mul,%B0,%3)  CR_TAB\n+\t\t      AS2 (mov,%A0,r1)  CR_TAB\n+\t\t      AS1 (clr,%B0)     CR_TAB\n+\t\t      AS1 (clr,__zero_reg__));\n+\t    }\n+\t  break;\n+\n \tcase 15:\n \t  *len = 4;\n \t  return (AS1 (lsl,%B0)     CR_TAB\n \t\t  AS2 (sbc,%A0,%A0) CR_TAB\n \t\t  AS1 (neg,%A0)     CR_TAB\n \t\t  AS1 (clr,%B0));\n \t}\n+      len = t;\n     }\n   if (len)\n     *len = 4;\n@@ -3422,15 +3694,25 @@ lshrsi3_out (insn, operands, len)\n       \n       switch (INTVAL (operands[2]))\n \t{\n-\tdefault: len = t; break;\n-\t  \n \tcase 1:\n \t  *len = 4;\n-\t  return (AS1 (lsr,%D0)  CR_TAB\n+\t  return (AS1 (lsr,%D0) CR_TAB\n \t\t  AS1 (ror,%C0) CR_TAB\n \t\t  AS1 (ror,%B0) CR_TAB\n \t\t  AS1 (ror,%A0));\n-\t  \n+\n+\tcase 2:\n+\t  /* Loop is one word smaller, but slower and needs a register.  */\n+\t  *len = 8;\n+\t  return (AS1 (lsr,%D0) CR_TAB\n+\t\t  AS1 (ror,%C0) CR_TAB\n+\t\t  AS1 (ror,%B0) CR_TAB\n+\t\t  AS1 (ror,%A0) CR_TAB\n+\t\t  AS1 (lsr,%D0) CR_TAB\n+\t\t  AS1 (ror,%C0) CR_TAB\n+\t\t  AS1 (ror,%B0) CR_TAB\n+\t\t  AS1 (ror,%A0));\n+\n \tcase 8:\n \t  {\n \t    int reg0 = true_regnum (operands[0]);\n@@ -3487,7 +3769,17 @@ lshrsi3_out (insn, operands, len)\n \t    return *len = 3, (AS1 (clr,%B0)     CR_TAB\n \t\t\t      AS1 (clr,%C0)     CR_TAB\n \t\t\t      AS1 (clr,%D0));\n+\n+\tcase 31:\n+\t  *len = 6;\n+\t  return (AS1 (clr,%A0)    CR_TAB\n+\t\t  AS2 (sbrc,%D0,7) CR_TAB\n+\t\t  AS1 (inc,%A0)    CR_TAB\n+\t\t  AS1 (clr,%B0)    CR_TAB\n+\t\t  AS1 (clr,%C0)    CR_TAB\n+\t\t  AS1 (clr,%D0));\n \t}\n+      len = t;\n     }\n   if (len)\n     *len = 6;\n@@ -4546,8 +4838,8 @@ avr_hard_regno_mode_ok (regno, mode)\n {\n   if (mode == QImode)\n     return 1;\n-  if (regno < 24 && !AVR_ENHANCED)\n-    return 1;\n+  /*  if (regno < 24 && !AVR_ENHANCED)\n+      return 1;*/\n   return !(regno & 1);\n }\n "}, {"sha": "772a124b5e4a5b8c628e9510379ac20a379d20d2", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adcd8f777efe7135cdf2e2b5abe9a20f998f74bf/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=adcd8f777efe7135cdf2e2b5abe9a20f998f74bf", "patch": "@@ -893,19 +893,19 @@\n \t\t   (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,i,Qm\")))\n    (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n-  \"* return ashlhi3_out (insn,operands, NULL);\"\n+  \"* return ashlhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"7,2,4,2,5,8\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n+   (set_attr \"cc\" \"clobber,set_n,clobber,set_n,clobber,clobber\")])\n \n (define_insn \"ashlsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"           \"=r,r,r,r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0\")\n-\t\t   (match_operand:QI 2 \"general_operand\"  \"r,P,O,i,Qm\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,X,&d,X\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"           \"=r,r,r,r,r,r\")\n+\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0,0\")\n+\t\t   (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,i,Qm\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n-  \"* return ashlsi3_out (insn,operands, NULL);\"\n-  [(set_attr \"length\" \"9,4,4,7,10\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber\")])\n+  \"* return ashlsi3_out (insn, operands, NULL);\"\n+  [(set_attr \"length\" \"9,4,4,8,7,10\")\n+   (set_attr \"cc\" \"clobber,set_n,clobber,set_n,clobber,clobber\")])\n \n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n ;; arithmetic shift right\n@@ -925,19 +925,19 @@\n \t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,K,O,i,Qm\")))\n    (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n-  \"* return ashrhi3_out (insn,operands, NULL);\"\n+  \"* return ashrhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"7,2,4,2,5,8\")\n    (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,i,Qm\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,X,&d,X\"))]\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r,r\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,i,Qm\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n-  \"* return ashrsi3_out (insn,operands, NULL);\"\n-  [(set_attr \"length\" \"9,4,6,7,10\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber\")])\n+  \"* return ashrsi3_out (insn, operands, NULL);\"\n+  [(set_attr \"length\" \"9,4,6,8,7,10\")\n+   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n \n ;; >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >> >>\n ;; logical shift right\n@@ -947,7 +947,7 @@\n \t(lshiftrt:QI (match_operand:QI 1 \"register_operand\" \"0,0,0,0\")\n \t\t     (match_operand:QI 2 \"general_operand\" \"r,n,n,Qm\")))]\n   \"\"\n-  \"* return lshrqi3_out (insn,operands, NULL);\"\n+  \"* return lshrqi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"6,4,6,7\")\n    (set_attr \"cc\" \"clobber,set_czn,set_czn,clobber\")])\n \n@@ -957,19 +957,19 @@\n \t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,K,O,i,Qm\")))\n    (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n   \"\"\n-  \"* return lshrhi3_out (insn,operands, NULL);\"\n+  \"* return lshrhi3_out (insn, operands, NULL);\"\n   [(set_attr \"length\" \"7,2,4,2,5,8\")\n    (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n \n (define_insn \"lshrsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0\")\n-\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,i,Qm\")))\n-   (clobber (match_scratch:QI 3 \"=X,X,X,&d,X\"))]\n-  \"\"\n-  \"* return lshrsi3_out (insn,operands, NULL);\"\n-  [(set_attr \"length\" \"9,4,4,7,10\")\n-   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber\")])\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r,r,r,r,r,r\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"0,0,r,0,0,0\")\n+\t\t     (match_operand:QI 2 \"general_operand\"  \"r,P,O,K,i,Qm\")))\n+   (clobber (match_scratch:QI 3 \"=X,X,X,X,&d,X\"))]\n+  \"\"\n+  \"* return lshrsi3_out (insn, operands, NULL);\"\n+  [(set_attr \"length\" \"9,4,4,8,7,10\")\n+   (set_attr \"cc\" \"clobber,clobber,clobber,clobber,clobber,clobber\")])\n \n ;; abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x) abs(x)\n ;; abs"}]}