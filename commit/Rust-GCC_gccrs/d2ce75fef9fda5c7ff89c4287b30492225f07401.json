{"sha": "d2ce75fef9fda5c7ff89c4287b30492225f07401", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjZTc1ZmVmOWZkYTVjN2ZmODljNDI4N2IzMDQ5MjIyNWYwNzQwMQ==", "commit": {"author": {"name": "Andre Simoes Dias Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:26:03Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2020-04-07T14:44:51Z"}, "message": "arm: MVE Fix immediate constraints on some vector instructions\n\nHi,\n\nThis patch fixes the immediate checks on vcvt and vqshr(u)n[bt] instructions.\nIt also removes the 'arm_mve_immediate_check' as the check was wrong and the\nerror message is not much better than the constraint one, which albeit isn't\ngreat either.\n\ngcc/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.c (arm_mve_immediate_check): Removed.\n\t* config/arm/mve.md (MVE_pred2, MVE_constraint2): Added FP types.\n\t(mve_vcvtq_n_to_f_*, mve_vcvtq_n_from_f_*, mve_vqshrnbq_n_*,\n\t mve_vqshrntq_n_*, mve_vqshrunbq_n_s*, mve_vqshruntq_n_s*,\n\t mve_vcvtq_m_n_from_f_*, mve_vcvtq_m_n_to_f_*, mve_vqshrnbq_m_n_*,\n\t mve_vqrshruntq_m_n_s*, mve_vqshrunbq_m_n_s*,\n\t mve_vqshruntq_m_n_s*): Fixed immediate constraints.\n\ngcc/testsuite/ChangeLog:\n2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/mve_immediates_1_n.c: New test.", "tree": {"sha": "240eb7106eeaedb24012148ac6a89ae4aeb5d506", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/240eb7106eeaedb24012148ac6a89ae4aeb5d506"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2ce75fef9fda5c7ff89c4287b30492225f07401", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ce75fef9fda5c7ff89c4287b30492225f07401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2ce75fef9fda5c7ff89c4287b30492225f07401", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2ce75fef9fda5c7ff89c4287b30492225f07401/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "094bc16bb4181a02177e1e14187b4c1c48bef0d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094bc16bb4181a02177e1e14187b4c1c48bef0d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094bc16bb4181a02177e1e14187b4c1c48bef0d5"}], "stats": {"total": 135, "additions": 94, "deletions": 41}, "files": [{"sha": "b9ee1817e006705717ade42cd36f761225d39fb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2ce75fef9fda5c7ff89c4287b30492225f07401", "patch": "@@ -1,3 +1,13 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.c (arm_mve_immediate_check): Removed.\n+\t* config/arm/mve.md (MVE_pred2, MVE_constraint2): Added FP types.\n+\t(mve_vcvtq_n_to_f_*, mve_vcvtq_n_from_f_*, mve_vqshrnbq_n_*,\n+\t mve_vqshrntq_n_*, mve_vqshrunbq_n_s*, mve_vqshruntq_n_s*,\n+\t mve_vcvtq_m_n_from_f_*, mve_vcvtq_m_n_to_f_*, mve_vqshrnbq_m_n_*,\n+\t mve_vqrshruntq_m_n_s*, mve_vqshrunbq_m_n_s*,\n+\t mve_vqshruntq_m_n_s*): Fixed immediate constraints.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.d (ashldi3): Don't use lsll for constant 32-bit shifts."}, {"sha": "cd0a49cdb63690d794981a73e1e7e0d47f6d1987", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d2ce75fef9fda5c7ff89c4287b30492225f07401", "patch": "@@ -32693,31 +32693,6 @@ arm_simd_check_vect_par_cnst_half_p (rtx op, machine_mode mode,\n   return true;\n }\n \n-/* To check op's immediate values matches the mode of the defined insn.  */\n-bool\n-arm_mve_immediate_check (rtx op, machine_mode mode, bool val)\n-{\n-  if (val)\n-    {\n-      if (((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 7)\n-\t   && (mode == E_V16QImode))\n-\t  || ((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 15)\n-\t   && (mode == E_V8HImode))\n-\t  || ((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 31)\n-\t   && (mode == E_V4SImode)))\n-\treturn true;\n-    }\n-  else\n-    {\n-      if (((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 7)\n-\t   && (mode == E_V8HImode))\n-\t  || ((GET_CODE (op) == CONST_INT) && (INTVAL (op) <= 15)\n-\t   && (mode == E_V4SImode)))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /* Can output mi_thunk for all cases except for non-zero vcall_offset\n    in Thumb1.  */\n static bool"}, {"sha": "3c75f9ebc70d5765a59934b944955c757b6b2195", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=d2ce75fef9fda5c7ff89c4287b30492225f07401", "patch": "@@ -401,8 +401,10 @@\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n \t\t\t(VCTP32Q_M \"32\") (VCTP64Q_M \"64\")])\n (define_mode_attr MVE_pred2 [(V16QI \"mve_imm_8\") (V8HI \"mve_imm_16\")\n-\t\t\t     (V4SI \"mve_imm_32\")])\n-(define_mode_attr MVE_constraint2 [(V16QI \"Rb\") (V8HI \"Rd\") (V4SI \"Rf\")])\n+\t\t\t     (V4SI \"mve_imm_32\")\n+\t\t\t     (V8HF \"mve_imm_16\") (V4SF \"mve_imm_32\")])\n+(define_mode_attr MVE_constraint2 [(V16QI \"Rb\") (V8HI \"Rd\") (V4SI \"Rf\")\n+\t\t\t\t    (V8HF \"Rd\") (V4SF \"Rf\")])\n (define_mode_attr MVE_LANES [(V16QI \"16\") (V8HI \"8\") (V4SI \"4\")])\n (define_mode_attr MVE_constraint [ (V16QI \"Ra\") (V8HI \"Rc\") (V4SI \"Re\")])\n (define_mode_attr MVE_pred [ (V16QI \"mve_imm_7\") (V8HI \"mve_imm_15\")\n@@ -1330,7 +1332,7 @@\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_0 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 2 \"mve_imm_16\" \"Rd\")]\n+\t\t       (match_operand:SI 2 \"<MVE_pred2>\" \"<MVE_constraint2>\")]\n \t VCVTQ_N_TO_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -1389,7 +1391,7 @@\n   [\n    (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 2 \"mve_imm_16\" \"Rd\")]\n+\t\t       (match_operand:SI 2 \"<MVE_pred2>\" \"<MVE_constraint2>\")]\n \t VCVTQ_N_FROM_F))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n@@ -5484,7 +5486,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"<MVE_pred1>\" \"<MVE_constraint1>\")]\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")]\n \t VQSHRNBQ_N))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -5500,7 +5502,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")]\n \t VQSHRNTQ_N))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -5516,7 +5518,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")]\n \t VQSHRUNBQ_N_S))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -5532,7 +5534,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")]\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")]\n \t VQSHRUNTQ_N_S))\n   ]\n   \"TARGET_HAVE_MVE\"\n@@ -5868,7 +5870,7 @@\n    (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_5 [(match_operand:MVE_5 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_16\" \"Rd\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred2>\" \"<MVE_constraint2>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VCVTQ_M_N_FROM_F))\n   ]\n@@ -6030,7 +6032,7 @@\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n \t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:<MVE_CNVT> 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_16\" \"Rd\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred2>\" \"<MVE_constraint2>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VCVTQ_M_N_TO_F))\n   ]\n@@ -7134,11 +7136,11 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"<MVE_pred1>\" \"<MVE_constraint1>\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VQSHRNBQ_M_N))\n   ]\n-  \"TARGET_HAVE_MVE && arm_mve_immediate_check (operands[3], <MODE>mode, 0)\"\n+  \"TARGET_HAVE_MVE\"\n   \"vpst\\n\\tvqshrnbt.<supf>%#<V_sz_elem>\\t%q0, %q2, %3\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n@@ -7151,7 +7153,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VQSHRNTQ_M_N))\n   ]\n@@ -7440,7 +7442,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VQRSHRUNTQ_M_N_S))\n   ]\n@@ -7457,7 +7459,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VQSHRUNBQ_M_N_S))\n   ]\n@@ -7474,7 +7476,7 @@\n    (set (match_operand:<V_narrow_pack> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_narrow_pack> [(match_operand:<V_narrow_pack> 1 \"s_register_operand\" \"0\")\n \t\t       (match_operand:MVE_5 2 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:SI 3 \"mve_imm_8\" \"Rb\")\n+\t\t       (match_operand:SI 3 \"<MVE_pred3>\" \"<MVE_constraint3>\")\n \t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n \t VQSHRUNTQ_M_N_S))\n   ]"}, {"sha": "6b44c3484477fec0749ff64ecd2e2fb64617fa65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2ce75fef9fda5c7ff89c4287b30492225f07401", "patch": "@@ -1,3 +1,7 @@\n+2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_immediates_1_n.c: New test.\n+\n 2020-04-07  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/mve_load_from_array.c: New test."}, {"sha": "9ec6f98c881c90ef1b297cdbd00ca80208d8df0f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/mve_immediates_1_n.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_immediates_1_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2ce75fef9fda5c7ff89c4287b30492225f07401/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_immediates_1_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fmve_immediates_1_n.c?ref=d2ce75fef9fda5c7ff89c4287b30492225f07401", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t u8;\n+int8x16_t s8;\n+uint16x8_t u16;\n+int16x8_t s16;\n+uint32x4_t u32;\n+int32x4_t s32;\n+float16x8_t f16;\n+float32x4_t f32;\n+\n+#define MACRO_VCVT_NAME(__to1,__from1) \\\n+  vcvtq_n_##__to1 ## _ ##__from1\n+\n+#define MACRO_VCVT_NAME_P(__to1,__from1) \\\n+  vcvtq_m_n_##__to1 ## _ ##__from1\n+\n+#define VCVT_TEST(to,from,val) \\\n+  to = MACRO_VCVT_NAME(to,from) (from, val); \\\n+  to = MACRO_VCVT_NAME_P(to,from) (to, from, val, p);\n+\n+#define VQSHRN_TEST(to,from,val) \\\n+  to = vqshrnbq (to, from, val); \\\n+  to = vqshrntq (to, from, val); \\\n+  to = vqshrnbq_m (to, from, val, p); \\\n+  to = vqshrntq_m (to, from, val, p); \\\n+\n+#define VQSHRUN_TEST(to,from,val) \\\n+  to = vqshrunbq (to, from, val); \\\n+  to = vqshruntq (to, from, val); \\\n+  to = vqshrunbq_m (to, from, val, p); \\\n+  to = vqshruntq_m (to, from, val, p); \\\n+\n+void test (mve_pred16_t p)\n+{\n+  VCVT_TEST(f16,s16,16)\n+  VCVT_TEST(f16,u16,16)\n+  VCVT_TEST(f32,s32,32)\n+  VCVT_TEST(f32,u32,32)\n+  VCVT_TEST(u16,f16,16)\n+  VCVT_TEST(s16,f16,16)\n+  VCVT_TEST(u32,f32,32)\n+  VCVT_TEST(s32,f32,32)\n+  VCVT_TEST(f16,s16,1)\n+  VCVT_TEST(f16,u16,1)\n+  VCVT_TEST(f32,s32,1)\n+  VCVT_TEST(f32,u32,1)\n+  VCVT_TEST(u16,f16,1)\n+  VCVT_TEST(s16,f16,1)\n+  VCVT_TEST(u32,f32,1)\n+  VCVT_TEST(s32,f32,1)\n+  VQSHRN_TEST(u8, u16, 8)\n+  VQSHRN_TEST(s8, s16, 8)\n+  VQSHRN_TEST(u16, u32, 16)\n+  VQSHRN_TEST(s16, s32, 16)\n+  VQSHRUN_TEST(u8, s16, 8)\n+  VQSHRUN_TEST(u16, s32, 16)\n+}"}]}