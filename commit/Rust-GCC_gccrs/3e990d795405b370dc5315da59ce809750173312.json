{"sha": "3e990d795405b370dc5315da59ce809750173312", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5OTBkNzk1NDA1YjM3MGRjNTMxNWRhNTljZTgwOTc1MDE3MzMxMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-30T20:44:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-31T00:12:11Z"}, "message": "analyzer: avoid using <string.h> in malloc-1.c\n\nThis test assumes that memset and strlen have been marked with\n__attribute__((nonnull)), which isn't necessarily the case for an\narbitrary <string.h>.  This likely explains these failures:\n  FAIL: gcc.dg/analyzer/malloc-1.c  (test for warnings, line 417)\n  FAIL: gcc.dg/analyzer/malloc-1.c  (test for warnings, line 418)\n  FAIL: gcc.dg/analyzer/malloc-1.c  (test for warnings, line 425)\n  FAIL: gcc.dg/analyzer/malloc-1.c  (test for warnings, line 429)\nseen in https://gcc.gnu.org/ml/gcc-testresults/2020-01/msg01608.html\non x86_64-apple-darwin18.\n\nFix it by using the __builtin_ forms.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/analyzer/malloc-1.c: Remove include of <string.h>.\n\tUse __builtin_ forms of memset and strlen throughout.", "tree": {"sha": "587108294b39b729115d3bfcc05ec0e8c98e28cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/587108294b39b729115d3bfcc05ec0e8c98e28cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e990d795405b370dc5315da59ce809750173312", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e990d795405b370dc5315da59ce809750173312", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e990d795405b370dc5315da59ce809750173312", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e990d795405b370dc5315da59ce809750173312/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e34ad101a4338eab41e38e624f2c7178d0b83d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e34ad101a4338eab41e38e624f2c7178d0b83d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e34ad101a4338eab41e38e624f2c7178d0b83d24"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "e4e612ada921d2174d9dbaa938735d2472ceddcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e990d795405b370dc5315da59ce809750173312/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e990d795405b370dc5315da59ce809750173312/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e990d795405b370dc5315da59ce809750173312", "patch": "@@ -1,3 +1,8 @@\n+2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/malloc-1.c: Remove include of <string.h>.\n+\tUse __builtin_ forms of memset and strlen throughout.\n+\n 2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/conditionals-2.c: Move to..."}, {"sha": "c13170560afc83ff9433b7696cfd7df60b1f62b5", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-1.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e990d795405b370dc5315da59ce809750173312/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e990d795405b370dc5315da59ce809750173312/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c?ref=3e990d795405b370dc5315da59ce809750173312", "patch": "@@ -1,6 +1,5 @@\n #include <alloca.h>\n #include <stdlib.h>\n-#include <string.h>\n \n extern int foo (void);\n extern int bar (void);\n@@ -71,7 +70,7 @@ void test_7 (void)\n   void *ptr = malloc(4096);\n   if (!ptr)\n     return;\n-  memset(ptr, 0, 4096);\n+  __builtin_memset(ptr, 0, 4096);\n   free(ptr);\n }\n \n@@ -80,7 +79,7 @@ void *test_8 (void)\n   void *ptr = malloc(4096);\n   if (!ptr)\n     return NULL;\n-  memset(ptr, 0, 4096);\n+  __builtin_memset(ptr, 0, 4096);\n   return ptr;\n   /* This needs phi nodes to affect equivalence classes, or we get a false report\n      of a leak.  */\n@@ -398,7 +397,7 @@ int test_35 (void)\n   void *ptr = malloc(4096);\n   if (!ptr)\n     return -1;\n-  memset(ptr, 0, 4096);\n+  __builtin_memset(ptr, 0, 4096);\n   free(ptr);\n   return 0;\n }\n@@ -408,14 +407,14 @@ void test_36 (void)\n   void *ptr = malloc(4096);\n   if (!ptr)\n     return;\n-  memset(ptr, 0, 4096);\n+  __builtin_memset(ptr, 0, 4096);\n   free(ptr);\n }\n \n void *test_37a (void)\n {\n   void *ptr = malloc(4096); /* { dg-message \"this call could return NULL\" } */\n-  memset(ptr, 0, 4096); /* { dg-warning \"use of possibly-NULL 'ptr' where non-null expected\" } */\n+  __builtin_memset(ptr, 0, 4096); /* { dg-warning \"use of possibly-NULL 'ptr' where non-null expected\" } */\n   return ptr;\n }\n \n@@ -424,9 +423,9 @@ int test_37b (void)\n   void *p = malloc(4096);\n   void *q = malloc(4096); /* { dg-message \"this call could return NULL\" } */\n   if (p) {\n-    memset(p, 0, 4096); /* Not a bug: checked */\n+    __builtin_memset(p, 0, 4096); /* Not a bug: checked */\n   } else {\n-    memset(q, 0, 4096); /* { dg-warning \"use of possibly-NULL 'q' where non-null expected\" } */\n+    __builtin_memset(q, 0, 4096); /* { dg-warning \"use of possibly-NULL 'q' where non-null expected\" } */\n   }\n   free(p);\n   free(q);\n@@ -579,7 +578,7 @@ int test_47 (void)\n     int retval = maybe_alloc (&p); /* this might write to \"p\".  */\n     if (retval)\n       return (retval);\n-    p_size = strlen(p); /* { dg-bogus \"non-null expected\" } */\n+    p_size = __builtin_strlen(p); /* { dg-bogus \"non-null expected\" } */\n     free (p);\n   }\n   return p_size;"}]}