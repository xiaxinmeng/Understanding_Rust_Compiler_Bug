{"sha": "38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlNjBjNTU0ZDY1MGQyYzFmZGVmZWEyYmE0ZjcwZWJmMWQzMTI5OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-27T20:30:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-27T20:30:51Z"}, "message": "Introduce rtx_expr_list subclass of rtx_def\n\ngcc/\n2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n\n\t* coretypes.h (class rtx_expr_list): Add forward declaration.\n\t* emit-rtl.c (gen_rtx_EXPR_LIST): New.\n\t* gengenrtl.c (special_rtx): Add EXPR_LIST.\n\t* rtl.h (class rtx_expr_list): New subclass of rtx_def, adding\n\tinvariant: GET_CODE (X) == EXPR_LIST.\n\t(is_a_helper <rtx_expr_list *>::test): New.\n\t(rtx_expr_list::next): New.\n\t(rtx_expr_list::element): New.\n\t(gen_rtx_EXPR_LIST): New.\n\nFrom-SVN: r214601", "tree": {"sha": "11494656a8b241d4f92fd8d40071e2c4c83d9ade", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11494656a8b241d4f92fd8d40071e2c4c83d9ade"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30db48d9d22e04e7270ba5b204fa74f4c8f9f5e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30db48d9d22e04e7270ba5b204fa74f4c8f9f5e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30db48d9d22e04e7270ba5b204fa74f4c8f9f5e3"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "dbdae273604c896d4518da500f4819e9654b56e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "patch": "@@ -1,3 +1,15 @@\n+2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coretypes.h (class rtx_expr_list): Add forward declaration.\n+\t* emit-rtl.c (gen_rtx_EXPR_LIST): New.\n+\t* gengenrtl.c (special_rtx): Add EXPR_LIST.\n+\t* rtl.h (class rtx_expr_list): New subclass of rtx_def, adding\n+\tinvariant: GET_CODE (X) == EXPR_LIST.\n+\t(is_a_helper <rtx_expr_list *>::test): New.\n+\t(rtx_expr_list::next): New.\n+\t(rtx_expr_list::element): New.\n+\t(gen_rtx_EXPR_LIST): New.\n+\n 2014-08-27  David Malcolm  <dmalcolm@redhat.com>\n \n \t* varasm.c (mark_constants): Convert a GET_CODE check into a"}, {"sha": "9951f101654280dfc3a0c59c91c1a3a2e2481773", "filename": "gcc/coretypes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "patch": "@@ -60,6 +60,7 @@ typedef const struct rtx_def *const_rtx;\n    hierarchy, along with the relevant invariant.\n    Where possible, keep this list in the same order as in rtl.def.  */\n class rtx_def;\n+  class rtx_expr_list;           /* GET_CODE (X) == EXPR_LIST */\n   class rtx_insn_list;           /* GET_CODE (X) == INSN_LIST */\n   class rtx_sequence;            /* GET_CODE (X) == SEQUENCE */\n   class rtx_insn;"}, {"sha": "f5ec8b4493b5b7519f479812adc88abaee15989e", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "patch": "@@ -409,6 +409,13 @@ gen_raw_REG (enum machine_mode mode, int regno)\n    functions do the raw handling.  If you add to this list, modify\n    special_rtx in gengenrtl.c as well.  */\n \n+rtx_expr_list *\n+gen_rtx_EXPR_LIST (enum machine_mode mode, rtx expr, rtx expr_list)\n+{\n+  return as_a <rtx_expr_list *> (gen_rtx_fmt_ee (EXPR_LIST, mode, expr,\n+\t\t\t\t\t\t expr_list));\n+}\n+\n rtx_insn_list *\n gen_rtx_INSN_LIST (enum machine_mode mode, rtx insn, rtx insn_list)\n {"}, {"sha": "885dd200c274d476f0d3f2cc58dc5ac8c35555f7", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "patch": "@@ -123,7 +123,8 @@ special_format (const char *fmt)\n static int\n special_rtx (int idx)\n {\n-  return (strcmp (defs[idx].enumname, \"INSN_LIST\") == 0\n+  return (strcmp (defs[idx].enumname, \"EXPR_LIST\") == 0\n+\t  || strcmp (defs[idx].enumname, \"INSN_LIST\") == 0\n \t  || strcmp (defs[idx].enumname, \"CONST_INT\") == 0\n \t  || strcmp (defs[idx].enumname, \"REG\") == 0\n \t  || strcmp (defs[idx].enumname, \"SUBREG\") == 0"}, {"sha": "4f8533de71f1becfb0d72302338346596f9d7cd7", "filename": "gcc/rtl.h", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e60c554d650d2c1fdefea2ba4f70ebf1d31298/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=38e60c554d650d2c1fdefea2ba4f70ebf1d31298", "patch": "@@ -402,6 +402,28 @@ struct GTY((desc(\"0\"), tag(\"0\"),\n   } GTY ((special (\"rtx_def\"), desc (\"GET_CODE (&%0)\"))) u;\n };\n \n+/* A node for constructing singly-linked lists of rtx.  */\n+\n+class GTY(()) rtx_expr_list : public rtx_def\n+{\n+  /* No extra fields, but adds invariant: (GET_CODE (X) == EXPR_LIST).  */\n+\n+public:\n+  /* Get next in list.  */\n+  rtx_expr_list *next () const;\n+\n+  /* Get at the underlying rtx.  */\n+  rtx element () const;\n+};\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_expr_list *>::test (rtx rt)\n+{\n+  return rt->code == EXPR_LIST;\n+}\n+\n class GTY(()) rtx_insn_list : public rtx_def\n {\n   /* No extra fields, but adds invariant: (GET_CODE (X) == INSN_LIST).\n@@ -1233,6 +1255,19 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n #define XC2EXP(RTX, N, C1, C2)      (RTL_CHECKC2 (RTX, N, C1, C2).rt_rtx)\n \f\n \n+/* Methods of rtx_expr_list.  */\n+\n+inline rtx_expr_list *rtx_expr_list::next () const\n+{\n+  rtx tmp = XEXP (this, 1);\n+  return safe_as_a <rtx_expr_list *> (tmp);\n+}\n+\n+inline rtx rtx_expr_list::element () const\n+{\n+  return XEXP (this, 0);\n+}\n+\n /* Methods of rtx_insn_list.  */\n \n inline rtx_insn_list *rtx_insn_list::next () const\n@@ -3048,6 +3083,7 @@ get_mem_attrs (const_rtx x)\n    generation functions included above do the raw handling.  If you\n    add to this list, modify special_rtx in gengenrtl.c as well.  */\n \n+extern rtx_expr_list *gen_rtx_EXPR_LIST (enum machine_mode, rtx, rtx);\n extern rtx_insn_list *gen_rtx_INSN_LIST (enum machine_mode, rtx, rtx);\n extern rtx gen_rtx_CONST_INT (enum machine_mode, HOST_WIDE_INT);\n extern rtx gen_rtx_CONST_VECTOR (enum machine_mode, rtvec);"}]}