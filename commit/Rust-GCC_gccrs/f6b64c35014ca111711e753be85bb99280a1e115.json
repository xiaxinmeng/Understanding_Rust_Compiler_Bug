{"sha": "f6b64c35014ca111711e753be85bb99280a1e115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiNjRjMzUwMTRjYTExMTcxMWU3NTNiZTg1YmI5OTI4MGExZTExNQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-04-19T13:39:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-04-19T13:39:16Z"}, "message": "re PR tree-optimization/56982 (Bad optimization with setjmp())\n\n2013-04-19  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/56982\n\t* builtins.def (BUILT_IN_LONGJMP): longjmp is not a leaf\n\tfunction.\n\t* gimplify.c (gimplify_call_expr): Notice special calls.\n\t(gimplify_modify_expr): Likewise.\n\t* tree-cfg.c (make_abnormal_goto_edges): Handle setjmp-like\n\tabnormal control flow receivers.\n\t(call_can_make_abnormal_goto): Handle cfun->calls_setjmp\n\tin the same way as cfun->has_nonlocal_labels.\n\t(gimple_purge_dead_abnormal_call_edges): Likewise.\n\t(stmt_starts_bb_p): Make setjmp-like abnormal control flow\n\treceivers start a basic-block.\n\n\t* gcc.c-torture/execute/pr56982.c: New testcase.\n\nFrom-SVN: r198096", "tree": {"sha": "cfb5aede3dc10b27de8a955ca7bcb7bff5699aa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfb5aede3dc10b27de8a955ca7bcb7bff5699aa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6b64c35014ca111711e753be85bb99280a1e115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b64c35014ca111711e753be85bb99280a1e115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6b64c35014ca111711e753be85bb99280a1e115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6b64c35014ca111711e753be85bb99280a1e115/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01d8bf070a2ca6a10c66a81f1b5e1c00856b5bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d8bf070a2ca6a10c66a81f1b5e1c00856b5bc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d8bf070a2ca6a10c66a81f1b5e1c00856b5bc4"}], "stats": {"total": 118, "additions": 100, "deletions": 18}, "files": [{"sha": "e2aca327abe279226251ed71c4eef2d4f40dd9bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6b64c35014ca111711e753be85bb99280a1e115", "patch": "@@ -1,3 +1,18 @@\n+2013-04-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56982\n+\t* builtins.def (BUILT_IN_LONGJMP): longjmp is not a leaf\n+\tfunction.\n+\t* gimplify.c (gimplify_call_expr): Notice special calls.\n+\t(gimplify_modify_expr): Likewise.\n+\t* tree-cfg.c (make_abnormal_goto_edges): Handle setjmp-like\n+\tabnormal control flow receivers.\n+\t(call_can_make_abnormal_goto): Handle cfun->calls_setjmp\n+\tin the same way as cfun->has_nonlocal_labels.\n+\t(gimple_purge_dead_abnormal_call_edges): Likewise.\n+\t(stmt_starts_bb_p): Make setjmp-like abnormal control flow\n+\treceivers start a basic-block.\n+\n 2013-04-19  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (struct _slp_instance): Move load_permutation"}, {"sha": "b26eb247491863145bd5efd1961d9e60fadb9992", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=f6b64c35014ca111711e753be85bb99280a1e115", "patch": "@@ -715,7 +715,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_ISLESSGREATER, \"islessgreater\", BT_FN_INT_VAR,\n DEF_GCC_BUILTIN        (BUILT_IN_ISUNORDERED, \"isunordered\", BT_FN_INT_VAR, ATTR_CONST_NOTHROW_TYPEGENERIC_LEAF)\n DEF_LIB_BUILTIN        (BUILT_IN_LABS, \"labs\", BT_FN_LONG_LONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_LLABS, \"llabs\", BT_FN_LONGLONG_LONGLONG, ATTR_CONST_NOTHROW_LEAF_LIST)\n-DEF_GCC_BUILTIN        (BUILT_IN_LONGJMP, \"longjmp\", BT_FN_VOID_PTR_INT, ATTR_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN        (BUILT_IN_LONGJMP, \"longjmp\", BT_FN_VOID_PTR_INT, ATTR_NORETURN_NOTHROW_LIST)\n /* [trans-mem]: Adjust BUILT_IN_TM_MALLOC if BUILT_IN_MALLOC is changed.  */\n DEF_LIB_BUILTIN        (BUILT_IN_MALLOC, \"malloc\", BT_FN_PTR_SIZE, ATTR_MALLOC_NOTHROW_LEAF_LIST)\n DEF_GCC_BUILTIN        (BUILT_IN_NEXT_ARG, \"next_arg\", BT_FN_PTR_VAR, ATTR_LEAF_LIST)"}, {"sha": "3a90588424c99e70c9f1624ce3a33c4b0999535b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=f6b64c35014ca111711e753be85bb99280a1e115", "patch": "@@ -2729,6 +2729,7 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n       gimple_stmt_iterator gsi;\n       call = gimple_build_call_from_tree (*expr_p);\n       gimple_call_set_fntype (call, TREE_TYPE (fnptrtype));\n+      notice_special_calls (call);\n       gimplify_seq_add_stmt (pre_p, call);\n       gsi = gsi_last (*pre_p);\n       fold_stmt (&gsi);\n@@ -4968,6 +4969,7 @@ gimplify_modify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n       STRIP_USELESS_TYPE_CONVERSION (CALL_EXPR_FN (*from_p));\n       assign = gimple_build_call_from_tree (*from_p);\n       gimple_call_set_fntype (assign, TREE_TYPE (fnptrtype));\n+      notice_special_calls (assign);\n       if (!gimple_call_noreturn_p (assign))\n \tgimple_call_set_lhs (assign, *to_p);\n     }"}, {"sha": "a31889a3b29054d675b06b1575f78793994d287b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6b64c35014ca111711e753be85bb99280a1e115", "patch": "@@ -1,3 +1,8 @@\n+2013-04-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/56982\n+\t* gcc.c-torture/execute/pr56982.c: New testcase.\n+\n 2013-04-19  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/56718"}, {"sha": "371a91c7f86665b44fcb5ffac83aee482286f813", "filename": "gcc/testsuite/gcc.c-torture/execute/pr56982.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56982.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56982.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56982.c?ref=f6b64c35014ca111711e753be85bb99280a1e115", "patch": "@@ -0,0 +1,43 @@\n+#include <stdlib.h>\n+#include <setjmp.h>\n+\n+static sigjmp_buf env;\n+void *stderr;\n+void baz (void)\n+{\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+\n+static inline int g(int x)\n+{\n+    if (x)\n+    {\n+        baz();\n+        return 0;\n+    }\n+    else\n+    {\n+        baz();\n+        return 1;\n+    }\n+}\n+\n+int f(int *e)\n+{\n+    if (*e)\n+      return 1;\n+\n+    int x = setjmp(env);\n+    int n = g(x);\n+    if (n == 0)\n+      exit(0);\n+    if (x)\n+      abort();\n+    longjmp(env, 42);\n+}\n+\n+int main(int argc, char** argv)\n+{\n+    int v = 0;\n+    return f(&v);\n+}"}, {"sha": "05bac430f50ccff4bfd48a2cc37409e07aafec4f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6b64c35014ca111711e753be85bb99280a1e115/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=f6b64c35014ca111711e753be85bb99280a1e115", "patch": "@@ -967,25 +967,35 @@ make_abnormal_goto_edges (basic_block bb, bool for_call)\n   gimple_stmt_iterator gsi;\n \n   FOR_EACH_BB (target_bb)\n-    for (gsi = gsi_start_bb (target_bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-      {\n-\tgimple label_stmt = gsi_stmt (gsi);\n-\ttree target;\n+    {\n+      for (gsi = gsi_start_bb (target_bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+\t{\n+\t  gimple label_stmt = gsi_stmt (gsi);\n+\t  tree target;\n \n-\tif (gimple_code (label_stmt) != GIMPLE_LABEL)\n-\t  break;\n+\t  if (gimple_code (label_stmt) != GIMPLE_LABEL)\n+\t    break;\n \n-\ttarget = gimple_label_label (label_stmt);\n+\t  target = gimple_label_label (label_stmt);\n \n-\t/* Make an edge to every label block that has been marked as a\n-\t   potential target for a computed goto or a non-local goto.  */\n-\tif ((FORCED_LABEL (target) && !for_call)\n-\t    || (DECL_NONLOCAL (target) && for_call))\n-\t  {\n+\t  /* Make an edge to every label block that has been marked as a\n+\t     potential target for a computed goto or a non-local goto.  */\n+\t  if ((FORCED_LABEL (target) && !for_call)\n+\t      || (DECL_NONLOCAL (target) && for_call))\n+\t    {\n+\t      make_edge (bb, target_bb, EDGE_ABNORMAL);\n+\t      break;\n+\t    }\n+\t}\n+      if (!gsi_end_p (gsi))\n+\t{\n+\t  /* Make an edge to every setjmp-like call.  */\n+\t  gimple call_stmt = gsi_stmt (gsi);\n+\t  if (is_gimple_call (call_stmt)\n+\t      && (gimple_call_flags (call_stmt) & ECF_RETURNS_TWICE))\n \t    make_edge (bb, target_bb, EDGE_ABNORMAL);\n-\t    break;\n-\t  }\n-      }\n+\t}\n+    }\n }\n \n /* Create edges for a goto statement at block BB.  */\n@@ -2147,7 +2157,8 @@ call_can_make_abnormal_goto (gimple t)\n {\n   /* If the function has no non-local labels, then a call cannot make an\n      abnormal transfer of control.  */\n-  if (!cfun->has_nonlocal_label)\n+  if (!cfun->has_nonlocal_label\n+      && !cfun->calls_setjmp)\n    return false;\n \n   /* Likewise if the call has no side effects.  */\n@@ -2302,6 +2313,11 @@ stmt_starts_bb_p (gimple stmt, gimple prev_stmt)\n       else\n \treturn true;\n     }\n+  else if (gimple_code (stmt) == GIMPLE_CALL\n+\t   && gimple_call_flags (stmt) & ECF_RETURNS_TWICE)\n+    /* setjmp acts similar to a nonlocal GOTO target and thus should\n+       start a new block.  */\n+    return true;\n \n   return false;\n }\n@@ -7532,7 +7548,8 @@ gimple_purge_dead_abnormal_call_edges (basic_block bb)\n   edge_iterator ei;\n   gimple stmt = last_stmt (bb);\n \n-  if (!cfun->has_nonlocal_label)\n+  if (!cfun->has_nonlocal_label\n+      && !cfun->calls_setjmp)\n     return false;\n \n   if (stmt && stmt_can_make_abnormal_goto (stmt))"}]}