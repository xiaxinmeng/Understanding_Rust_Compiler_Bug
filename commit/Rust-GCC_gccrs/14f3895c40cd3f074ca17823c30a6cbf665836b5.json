{"sha": "14f3895c40cd3f074ca17823c30a6cbf665836b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRmMzg5NWM0MGNkM2YwNzRjYTE3ODIzYzMwYTZjYmY2NjU4MzZiNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:56:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-27T12:56:41Z"}, "message": "[multiple changes]\n\n2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb: Minor reformatting.\n\n2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_dim.adb (Analyze_Dimension, case N_Identifier): Check\n\tthat identifier has a usable type before analysis, to handle\n\tproperly identifiers introduced after some lexical/syntactic\n\trecovery that created new identifiers.\n\nFrom-SVN: r235498", "tree": {"sha": "14ca68d13149e56cef67404095884a174f896b0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14ca68d13149e56cef67404095884a174f896b0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14f3895c40cd3f074ca17823c30a6cbf665836b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f3895c40cd3f074ca17823c30a6cbf665836b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14f3895c40cd3f074ca17823c30a6cbf665836b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14f3895c40cd3f074ca17823c30a6cbf665836b5/comments", "author": null, "committer": null, "parents": [{"sha": "db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db99c46e1d6d3ae3323d0e5ae1dc739291af7143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db99c46e1d6d3ae3323d0e5ae1dc739291af7143"}], "stats": {"total": 67, "additions": 44, "deletions": 23}, "files": [{"sha": "39ec57e6a953f74613ce3c0eec97f45584737afd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f3895c40cd3f074ca17823c30a6cbf665836b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f3895c40cd3f074ca17823c30a6cbf665836b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=14f3895c40cd3f074ca17823c30a6cbf665836b5", "patch": "@@ -1,3 +1,14 @@\n+2016-04-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb: Minor reformatting.\n+\n+2016-04-27  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_dim.adb (Analyze_Dimension, case N_Identifier): Check\n+\tthat identifier has a usable type before analysis, to handle\n+\tproperly identifiers introduced after some lexical/syntactic\n+\trecovery that created new identifiers.\n+\n 2016-04-27  Bob Duff  <duff@adacore.com>\n \n \t* a-coinve.adb, a-comutr.adb, a-conhel.adb, a-convec.adb,"}, {"sha": "cde4d1a73a8bc310c3f47a58057c0e51d96d6ff8", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f3895c40cd3f074ca17823c30a6cbf665836b5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f3895c40cd3f074ca17823c30a6cbf665836b5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=14f3895c40cd3f074ca17823c30a6cbf665836b5", "patch": "@@ -13033,15 +13033,13 @@ package body Sem_Ch3 is\n       Related_Nod : Node_Id;\n       For_Access  : Boolean := False)\n    is\n-      E     : Entity_Id := Entity (Subtype_Mark (S));\n-      T     : Entity_Id;\n-      C     : Node_Id;\n-      Elist : Elist_Id := New_Elmt_List;\n+      E : Entity_Id := Entity (Subtype_Mark (S));\n+      T : Entity_Id;\n \n       procedure Fixup_Bad_Constraint;\n-      --  This is called after finding a bad constraint, and after having\n-      --  posted an appropriate error message. The mission is to leave the\n-      --  entity T in as reasonable state as possible.\n+      --  Called after finding a bad constraint, and after having posted an\n+      --  appropriate error message. The goal is to leave type Def_Id in as\n+      --  reasonable state as possiblet.\n \n       --------------------------\n       -- Fixup_Bad_Constraint --\n@@ -13065,6 +13063,11 @@ package body Sem_Ch3 is\n          Set_Error_Posted (Def_Id);\n       end Fixup_Bad_Constraint;\n \n+      --  Local variables\n+\n+      C      : Node_Id;\n+      Constr : Elist_Id := New_Elmt_List;\n+\n    --  Start of processing for Constrain_Discriminated_Type\n \n    begin\n@@ -13091,27 +13094,27 @@ package body Sem_Ch3 is\n         and then Present (Full_View (T))\n         and then\n           (Has_Unknown_Discriminants (T)\n-             or else (not Has_Discriminants (T)\n-               and then Has_Discriminants (Full_View (T))\n-               and then Present\n-                 (Discriminant_Default_Value\n-                    (First_Discriminant (Full_View (T))))))\n+            or else\n+              (not Has_Discriminants (T)\n+                and then Has_Discriminants (Full_View (T))\n+                and then Present (Discriminant_Default_Value\n+                           (First_Discriminant (Full_View (T))))))\n       then\n          T := Full_View (T);\n          E := Full_View (E);\n       end if;\n \n-      --  Ada 2005 (AI-412): Constrained incomplete subtypes are illegal.\n-      --  Avoid generating an error for access-to-incomplete subtypes.\n+      --  Ada 2005 (AI-412): Constrained incomplete subtypes are illegal. Avoid\n+      --  generating an error for access-to-incomplete subtypes.\n \n       if Ada_Version >= Ada_2005\n         and then Ekind (T) = E_Incomplete_Type\n         and then Nkind (Parent (S)) = N_Subtype_Declaration\n         and then not Is_Itype (Def_Id)\n       then\n-         --  A little sanity check, emit an error message if the type\n-         --  has discriminants to begin with. Type T may be a regular\n-         --  incomplete type or imported via a limited with clause.\n+         --  A little sanity check, emit an error message if the type has\n+         --  discriminants to begin with. Type T may be a regular incomplete\n+         --  type or imported via a limited with clause.\n \n          if Has_Discriminants (T)\n            or else (From_Limited_With (T)\n@@ -13152,23 +13155,23 @@ package body Sem_Ch3 is\n          return;\n       end if;\n \n-      --  T may be an unconstrained subtype (e.g. a generic actual).\n-      --  Constraint applies to the base type.\n+      --  T may be an unconstrained subtype (e.g. a generic actual). Constraint\n+      --  applies to the base type.\n \n       T := Base_Type (T);\n \n-      Elist := Build_Discriminant_Constraints (T, S);\n+      Constr := Build_Discriminant_Constraints (T, S);\n \n       --  If the list returned was empty we had an error in building the\n       --  discriminant constraint. We have also already signalled an error\n       --  in the incomplete type case\n \n-      if Is_Empty_Elmt_List (Elist) then\n+      if Is_Empty_Elmt_List (Constr) then\n          Fixup_Bad_Constraint;\n          return;\n       end if;\n \n-      Build_Discriminated_Subtype (T, Def_Id, Elist, Related_Nod, For_Access);\n+      Build_Discriminated_Subtype (T, Def_Id, Constr, Related_Nod, For_Access);\n    end Constrain_Discriminated_Type;\n \n    ---------------------------"}, {"sha": "c7282b1f265cd62cbe9c9702fb579a678912026b", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14f3895c40cd3f074ca17823c30a6cbf665836b5/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14f3895c40cd3f074ca17823c30a6cbf665836b5/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=14f3895c40cd3f074ca17823c30a6cbf665836b5", "patch": "@@ -1143,7 +1143,6 @@ package body Sem_Dim is\n               N_Expanded_Name             |\n               N_Explicit_Dereference      |\n               N_Function_Call             |\n-              N_Identifier                |\n               N_Indexed_Component         |\n               N_Qualified_Expression      |\n               N_Selected_Component        |\n@@ -1152,6 +1151,14 @@ package body Sem_Dim is\n               N_Unchecked_Type_Conversion =>\n             Analyze_Dimension_Has_Etype (N);\n \n+         --  In the presence of a repaired syntax error, an identifier\n+         --  may be introduced without a usable type.\n+\n+         when  N_Identifier                =>\n+            if Present (Etype (N)) then\n+               Analyze_Dimension_Has_Etype (N);\n+            end if;\n+\n          when N_Number_Declaration =>\n             Analyze_Dimension_Number_Declaration (N);\n "}]}