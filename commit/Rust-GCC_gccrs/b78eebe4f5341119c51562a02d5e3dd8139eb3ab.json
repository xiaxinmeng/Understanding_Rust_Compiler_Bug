{"sha": "b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc4ZWViZTRmNTM0MTExOWM1MTU2MmEwMmQ1ZTNkZDgxMzllYjNhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-10-14T00:12:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-14T00:12:40Z"}, "message": "re PR libstdc++/50714 (codecvt_byname::codecvt::_M_c_locale_codecvt not initialized by destroyed)\n\n2011-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/50714\n\t* include/bits/codecvt.h (codecvt<>::codecvt(size_t)): Initialize\n\t_M_c_locale_codecvt member.\n\t* testsuite/22_locale/codecvt_byname/50714.cc: New.\n\nFrom-SVN: r179948", "tree": {"sha": "54494d6e41b441194140f185e388540c8b867fe2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54494d6e41b441194140f185e388540c8b867fe2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/comments", "author": null, "committer": null, "parents": [{"sha": "2598165f09a96f60aa53abebf931718a769b7cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2598165f09a96f60aa53abebf931718a769b7cf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2598165f09a96f60aa53abebf931718a769b7cf2"}], "stats": {"total": 105, "additions": 104, "deletions": 1}, "files": [{"sha": "f550f8fe10935c6424c874587e043dc5e13611df", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "patch": "@@ -1,3 +1,10 @@\n+2011-10-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/50714\n+\t* include/bits/codecvt.h (codecvt<>::codecvt(size_t)): Initialize\n+\t_M_c_locale_codecvt member.\n+\t* testsuite/22_locale/codecvt_byname/50714.cc: New.\n+\n 2011-10-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50594"}, {"sha": "f485c170dea175c03fa18520c7a2fa202d1bf84e", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "patch": "@@ -292,7 +292,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit\n       codecvt(size_t __refs = 0)\n-      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }\n+      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),\n+\t_M_c_locale_codecvt(0)\n+      { }\n \n       explicit\n       codecvt(__c_locale __cloc, size_t __refs = 0);"}, {"sha": "6c84be2bd595d73c97fbc6b5a7a229a946d45e2d", "filename": "libstdc++-v3/testsuite/22_locale/codecvt_byname/50714.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F50714.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78eebe4f5341119c51562a02d5e3dd8139eb3ab/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F50714.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt_byname%2F50714.cc?ref=b78eebe4f5341119c51562a02d5e3dd8139eb3ab", "patch": "@@ -0,0 +1,94 @@\n+// { dg-require-namedlocale \"de_DE\" }\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <locale>\n+\n+#define mychar unsigned short\n+\n+namespace std\n+{\n+  template<> codecvt<mychar, char, mbstate_t>::~codecvt()\n+  { }\n+\n+  template<>\n+  codecvt<mychar, char, mbstate_t>::result\n+  codecvt<mychar, char, mbstate_t>::\n+  do_out(state_type&, const intern_type*, const intern_type*,\n+\t const intern_type*&, extern_type*, extern_type*,\n+\t extern_type*&) const\n+  { return codecvt_base::ok; }\n+\n+  template<>\n+  codecvt<mychar, char, mbstate_t>::result\n+  codecvt<mychar, char, mbstate_t>::\n+  do_in(state_type&, const extern_type*, const extern_type*,\n+\tconst extern_type*&, intern_type*, intern_type*,\n+\tintern_type*&) const\n+  { return codecvt_base::ok; }\n+\n+  template<>\n+  codecvt<mychar, char, mbstate_t>::result\n+  codecvt<mychar, char, mbstate_t>::\n+  do_unshift(state_type&, extern_type*, extern_type*,\n+\t     extern_type*&) const\n+  { return noconv; }\n+\n+  template<>\n+  int\n+  codecvt<mychar, char, mbstate_t>::do_encoding() const\n+  { return 0; }\n+\n+  template<>\n+  bool\n+  codecvt<mychar, char, mbstate_t>::do_always_noconv() const\n+  { return false; }\n+\n+  template<>\n+  int\n+  codecvt<mychar, char, mbstate_t>::\n+  do_length(state_type&, const extern_type*, const extern_type*,\n+\t    size_t) const\n+  { return 0; }\n+\n+  template<>\n+  int\n+  codecvt<mychar, char, mbstate_t>::do_max_length() const\n+  { return 4; }\n+}\n+\n+// libstdc++/50714\n+void test01()\n+{\n+  using namespace std;\n+\n+  {\n+    locale loc(locale::classic(),\n+\t       new codecvt<mychar, char, mbstate_t>());\n+  }\n+  {\n+    locale loc2(locale::classic(),\n+\t\tnew codecvt_byname<mychar, char, mbstate_t>(\"de_DE\"));\n+  }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}