{"sha": "27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjczODNkZmM2YzJjOWQwZTJiYjg0MmM4YmY5ZTYyN2JiYWMyMWFmMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-10T13:38:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-02-10T13:38:57Z"}, "message": "(REG_ALLOC_ORDER): Changed back to natural order.\n\n(CONST_DOUBLE_OK_FOR_LETTER_P): Added letter 'G'.\n(EXIT_IGNORE_STACK): Set to 0.\n(REG_OK_FOR_BASE_P, REG_OK_FOR_INDEX_P): Use corresponding REGNO_OK.\n(MOVE_MAX, MOVE_RATIO): Defined.\n\nFrom-SVN: r11197", "tree": {"sha": "b89b522e163fc6068bd387e420fc8d716024e9ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b89b522e163fc6068bd387e420fc8d716024e9ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0/comments", "author": null, "committer": null, "parents": [{"sha": "3269969693ef68682e2b4b3ab4e58bb061a25317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3269969693ef68682e2b4b3ab4e58bb061a25317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3269969693ef68682e2b4b3ab4e58bb061a25317"}], "stats": {"total": 36, "additions": 26, "deletions": 10}, "files": [{"sha": "46c9ebfc600747e8d8d3b4e2181c4ad5b0eb45cd", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 26, "deletions": 10, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=27383dfc6c2c9d0e2bb842c8bf9e627bbac21af0", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1994, 1995 Free Software Foundation, Inc.\n-   Contributed by O.M.Kellogg, DASA (kellogg@space.otn.dasa.de)\n+   Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.\n+   Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n \n@@ -206,8 +206,9 @@ extern char *strdup(), *float_label();\n    registers listed in CALL_USED_REGISTERS, keeping the others\n    available for storage of persistent values.  */\n \n-#define REG_ALLOC_ORDER \\\n+/* #define REG_ALLOC_ORDER \\\n    { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }\n+ */\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n    to hold something of mode MODE.\n@@ -255,8 +256,18 @@ extern char *strdup(), *float_label();\n /* Register in which static-chain is passed to a function. */\n #define STATIC_CHAIN_REGNUM 13\n \n+/* Place in which caller passes the structure value address.\n+   0 means push the value on the stack like an argument. \n+   #define STRUCT_VALUE 0\n+*/\n+\n /* Register in which address to store a structure value\n-   is passed to a function. */\n+   arrives in the function.  \n+   #define STRUCT_VALUE_INCOMING 0\n+*/\n+\n+/* Register in which address to store a structure value\n+   is passed to a function.  */\n #define STRUCT_VALUE_REGNUM 12\n \n /* Define this to be 1 if all structure return values must be in memory. */\n@@ -362,7 +373,9 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n /* Similar, but for floating constants, and defining letter 'G'.\n    Here VALUE is the CONST_DOUBLE rtx itself.  */\n-#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  0\n+#define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n+  ((C) == 'G' ? ((VALUE) == CONST0_RTX (HFmode)         \\\n+                 || (VALUE) == CONST0_RTX (TQFmode)) : 0)\n \n /* Optional extra constraints for this machine.\n \n@@ -599,7 +612,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    functions that have frame pointers.\n    No definition is equivalent to always zero.  */\n \n-#define EXIT_IGNORE_STACK 1\n+#define EXIT_IGNORE_STACK 0\n \n /* This macro generates the assembly code for function exit,\n    on machines that need it.  If FUNCTION_EPILOGUE is not defined\n@@ -732,9 +745,9 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n #ifdef REG_OK_STRICT\n \n /* Nonzero if X is a hard reg that can be used as an index.  */\n-#define REG_OK_FOR_INDEX_P(X) (REGNO (X) >= 12 && REGNO (X) <= 15)\n+#define REG_OK_FOR_INDEX_P(X) REGNO_OK_FOR_INDEX_P(REGNO(X))\n /* Nonzero if X is a hard reg that can be used as a base reg.  */\n-#define REG_OK_FOR_BASE_P(X)  (REGNO (X) > 0 && REGNO (X) <= 15)\n+#define REG_OK_FOR_BASE_P(X)  REGNO_OK_FOR_BASE_P(REGNO(X))\n \n #else\n \n@@ -817,8 +830,11 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n-/* (was: \"1750: not counting the MOV instruction\") */\n-#define MOVE_MAX 16\n+#define MOVE_MAX 65536\n+\n+/* MOVE_RATIO is the number of move instructions that is better than a\n+   block move.  */\n+#define MOVE_RATIO 4\n \n /* Define this if zero-extension is slow (more than one real instruction).  */\n /* #define SLOW_ZERO_EXTEND */"}]}