{"sha": "2720e16b87e0b944e0cbde7531290467367209d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyMGUxNmI4N2UwYjk0NGUwY2JkZTc1MzEyOTA0NjczNjcyMDlkNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-01-26T11:23:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-01-26T11:23:07Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_C99): Fix typo.\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_C99): Fix typo.\n\t* configure: Regenerate.\n\nFrom-SVN: r207116", "tree": {"sha": "d44c5cc8ea838adf6694ba31a3671df88d689bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d44c5cc8ea838adf6694ba31a3671df88d689bef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2720e16b87e0b944e0cbde7531290467367209d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2720e16b87e0b944e0cbde7531290467367209d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2720e16b87e0b944e0cbde7531290467367209d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2720e16b87e0b944e0cbde7531290467367209d4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0bb77039fdbbeece6b6bc7957f9d726c06b986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0bb77039fdbbeece6b6bc7957f9d726c06b986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0bb77039fdbbeece6b6bc7957f9d726c06b986"}], "stats": {"total": 7, "additions": 5, "deletions": 2}, "files": [{"sha": "02f0af9bfc84f6c5a07441afab724cd114d6c4d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2720e16b87e0b944e0cbde7531290467367209d4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2720e16b87e0b944e0cbde7531290467367209d4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2720e16b87e0b944e0cbde7531290467367209d4", "patch": "@@ -9,6 +9,9 @@\n \t* testsuite/23_containers/multiset/modifiers/emplace/1.cc: Likewise.\n \t* testsuite/23_containers/set/modifiers/emplace/1.cc: Likewise.\n \n+\t* acinclude.m4 (GLIBCXX_ENABLE_C99): Fix typo.\n+\t* configure: Regenerate.\n+\n 2014-01-24  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR libstdc++/59531"}, {"sha": "b3ce3dbe3d9b837e75e9e17cc9ce088a1889f82b", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2720e16b87e0b944e0cbde7531290467367209d4/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2720e16b87e0b944e0cbde7531290467367209d4/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=2720e16b87e0b944e0cbde7531290467367209d4", "patch": "@@ -922,7 +922,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n   # undefined and fake C99 facilities - like pre-standard snprintf - may be\n   # spuriously enabled.\n-  # Long term, -std=c++0x could be even better, could manage to explicitely\n+  # Long term, -std=c++0x could be even better, could manage to explicitly\n   # request C99 facilities to the underlying C headers.\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -std=c++98\""}, {"sha": "57e09d811724a27555f3b9f5c3d5e0e1a7d870f3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2720e16b87e0b944e0cbde7531290467367209d4/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2720e16b87e0b944e0cbde7531290467367209d4/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2720e16b87e0b944e0cbde7531290467367209d4", "patch": "@@ -16547,7 +16547,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n   # undefined and fake C99 facilities - like pre-standard snprintf - may be\n   # spuriously enabled.\n-  # Long term, -std=c++0x could be even better, could manage to explicitely\n+  # Long term, -std=c++0x could be even better, could manage to explicitly\n   # request C99 facilities to the underlying C headers.\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS -std=c++98\""}]}