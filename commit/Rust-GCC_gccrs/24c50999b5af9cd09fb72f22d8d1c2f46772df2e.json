{"sha": "24c50999b5af9cd09fb72f22d8d1c2f46772df2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRjNTA5OTliNWFmOWNkMDlmYjcyZjIyZDhkMWMyZjQ2NzcyZGYyZQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-11-06T03:48:54Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-11-06T03:48:54Z"}, "message": "(gen_shl_and): Try to generate shorter constant for and.\n\nFrom-SVN: r13101", "tree": {"sha": "f556ea31bf966ad2a8fe746496ce3f70b7992afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f556ea31bf966ad2a8fe746496ce3f70b7992afd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24c50999b5af9cd09fb72f22d8d1c2f46772df2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c50999b5af9cd09fb72f22d8d1c2f46772df2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24c50999b5af9cd09fb72f22d8d1c2f46772df2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24c50999b5af9cd09fb72f22d8d1c2f46772df2e/comments", "author": null, "committer": null, "parents": [{"sha": "62acf5fda199986b46c9e3c6a510adab77ae8b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62acf5fda199986b46c9e3c6a510adab77ae8b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62acf5fda199986b46c9e3c6a510adab77ae8b49"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "c1bfc0e7476265f05bc8ea6771d35e7a32c8b549", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24c50999b5af9cd09fb72f22d8d1c2f46772df2e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24c50999b5af9cd09fb72f22d8d1c2f46772df2e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=24c50999b5af9cd09fb72f22d8d1c2f46772df2e", "patch": "@@ -1273,6 +1273,11 @@ gen_shl_and (dest, left_rtx, mask_rtx, source)\n       shift_gen_fun = gen_shifty_op;\n     case 2:\n     case 3:\n+      /* If the topmost bit that matters is set, set the topmost bits\n+\t that don't matter.  This way, we might be able to get a shorter\n+\t signed constant.  */\n+      if (mask & ((HOST_WIDE_INT)1 << 31 - total_shift))\n+\tmask |= (HOST_WIDE_INT)~0 << (31 - total_shift);\n       /* Don't expand fine-grained when combining, because that will\n          make the pattern fail.  */\n       if (rtx_equal_function_value_matters"}]}