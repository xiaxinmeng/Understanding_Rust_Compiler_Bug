{"sha": "0d56d3c17b709688ec817372311cde1cc445ae4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1NmQzYzE3YjcwOTY4OGVjODE3MzcyMzExY2RlMWNjNDQ1YWU0Yg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-11-24T12:58:45Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-11-24T12:58:45Z"}, "message": "Dump probability for edges a frequency for BBs\n\n\t* gimple-pretty-print.c (dump_edge_probability): New function.\n\t(dump_gimple_switch): Dump label edge probabilities.\n\t(dump_gimple_cond): Likewise.\n\t(dump_gimple_label): Dump\n\t(dump_gimple_bb_header): Dump basic block frequency.\n\t(pp_cfg_jump): Replace e->dest argument with e.\n\t(dump_implicit_edges): Likewise.\n\t* tree-ssa-loop-ivopts.c (get_scaled_computation_cost_at):\n\tUse gimple_bb (at) instead of at->bb.\n\t* gcc.dg/builtin-unreachable-6.c: Update test to not to scan\n\tparts for frequencies/probabilities.\n\t* gcc.dg/pr34027-1.c: Likewise.\n\t* gcc.dg/strict-overflow-2.c: Likewise.\n\t* gcc.dg/tree-ssa/20040703-1.c: Likewise.\n\t* gcc.dg/tree-ssa/builtin-sprintf-2.c: Likewise.\n\t* gcc.dg/tree-ssa/pr32044.c: Likewise.\n\t* gcc.dg/tree-ssa/vector-3.c: Likewise.\n\t* gcc.dg/tree-ssa/vrp101.c: Likewise.\n\t* gcc.dg/tree-ssa/dump-2.c: New test.\n\nFrom-SVN: r242837", "tree": {"sha": "22dab002d153bc4f818cd59682df2fe75ecfbe79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22dab002d153bc4f818cd59682df2fe75ecfbe79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d56d3c17b709688ec817372311cde1cc445ae4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d56d3c17b709688ec817372311cde1cc445ae4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d56d3c17b709688ec817372311cde1cc445ae4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d56d3c17b709688ec817372311cde1cc445ae4b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8cac4d85875ff23588908341fdd69fb4c39a7210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cac4d85875ff23588908341fdd69fb4c39a7210", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cac4d85875ff23588908341fdd69fb4c39a7210"}], "stats": {"total": 128, "additions": 107, "deletions": 21}, "files": [{"sha": "e11426babcf67e81877909c923dcb0476ed236fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -1,3 +1,15 @@\n+2016-11-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* gimple-pretty-print.c (dump_edge_probability): New function.\n+\t(dump_gimple_switch): Dump label edge probabilities.\n+\t(dump_gimple_cond): Likewise.\n+\t(dump_gimple_label): Dump\n+\t(dump_gimple_bb_header): Dump basic block frequency.\n+\t(pp_cfg_jump): Replace e->dest argument with e.\n+\t(dump_implicit_edges): Likewise.\n+\t* tree-ssa-loop-ivopts.c (get_scaled_computation_cost_at):\n+\tUse gimple_bb (at) instead of at->bb.\n+\n 2016-11-24  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* common.opt (flimit-function-alignment): New."}, {"sha": "b5e866d36fabeb3cd354d9f98f690522f166e833", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -36,6 +36,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dumpfile.h\"\t/* for dump_flags */\n #include \"value-prof.h\"\n #include \"trans-mem.h\"\n+#include \"cfganal.h\"\n \n #define INDENT(SPACE)\t\t\t\t\t\t\t\\\n   do { int i; for (i = 0; i < SPACE; i++) pp_space (buffer); } while (0)\n@@ -71,6 +72,14 @@ debug_gimple_stmt (gimple *gs)\n   print_gimple_stmt (stderr, gs, 0, TDF_VOPS|TDF_MEMSYMS);\n }\n \n+/* Dump E probability to BUFFER.  */\n+\n+static void\n+dump_edge_probability (pretty_printer *buffer, edge e)\n+{\n+  pp_scalar (buffer, \" [%.1f%%]\",\n+\t     e->probability * 100.0 / REG_BR_PROB_BASE);\n+}\n \n /* Print GIMPLE statement G to FILE using SPC indentation spaces and\n    FLAGS as in pp_gimple_stmt_1.  */\n@@ -905,7 +914,20 @@ dump_gimple_switch (pretty_printer *buffer, gswitch *gs, int spc,\n       gcc_checking_assert (case_label != NULL_TREE);\n       dump_generic_node (buffer, case_label, spc, flags, false);\n       pp_space (buffer);\n-      dump_generic_node (buffer, CASE_LABEL (case_label), spc, flags, false);\n+      tree label = CASE_LABEL (case_label);\n+      dump_generic_node (buffer, label, spc, flags, false);\n+\n+      if (cfun && cfun->cfg)\n+\t{\n+\t  basic_block dest = label_to_block (label);\n+\t  if (dest)\n+\t    {\n+\t      edge label_edge = find_edge (gimple_bb (gs), dest);\n+\t      if (label_edge && !(flags & TDF_GIMPLE))\n+\t\tdump_edge_probability (buffer, label_edge);\n+\t    }\n+\t}\n+\n       if (i < gimple_switch_num_labels (gs) - 1)\n \t{\n \t  if (flags & TDF_GIMPLE)\n@@ -943,20 +965,42 @@ dump_gimple_cond (pretty_printer *buffer, gcond *gs, int spc, int flags)\n       dump_generic_node (buffer, gimple_cond_rhs (gs), spc, flags, false);\n       if (!(flags & TDF_RHS_ONLY))\n \t{\n+\t  edge_iterator ei;\n+\t  edge e, true_edge = NULL, false_edge = NULL;\n+\t  basic_block bb = gimple_bb (gs);\n+\n+\t  if (bb)\n+\t    {\n+\t      FOR_EACH_EDGE (e, ei, bb->succs)\n+\t\t{\n+\t\t  if (e->flags & EDGE_TRUE_VALUE)\n+\t\t    true_edge = e;\n+\t\t  else if (e->flags & EDGE_FALSE_VALUE)\n+\t\t    false_edge = e;\n+\t\t}\n+\t    }\n+\n+\t  bool has_edge_info = true_edge != NULL && false_edge != NULL;\n+\n \t  pp_right_paren (buffer);\n \n \t  if (gimple_cond_true_label (gs))\n \t    {\n \t      pp_string (buffer, \" goto \");\n \t      dump_generic_node (buffer, gimple_cond_true_label (gs),\n \t\t\t\t spc, flags, false);\n+\t      if (has_edge_info && !(flags & TDF_GIMPLE))\n+\t\tdump_edge_probability (buffer, true_edge);\n \t      pp_semicolon (buffer);\n \t    }\n \t  if (gimple_cond_false_label (gs))\n \t    {\n \t      pp_string (buffer, \" else goto \");\n \t      dump_generic_node (buffer, gimple_cond_false_label (gs),\n \t\t\t\t spc, flags, false);\n+\t      if (has_edge_info && !(flags & TDF_GIMPLE))\n+\t\tdump_edge_probability (buffer, false_edge);\n+\n \t      pp_semicolon (buffer);\n \t    }\n \t}\n@@ -977,6 +1021,10 @@ dump_gimple_label (pretty_printer *buffer, glabel *gs, int spc, int flags)\n   else\n     {\n       dump_generic_node (buffer, label, spc, flags, false);\n+      basic_block bb = gimple_bb (gs);\n+      if (bb && !(flags & TDF_GIMPLE))\n+\tpp_scalar (buffer, \" [%.1f%%]\",\n+\t\t   bb->frequency * 100.0 / REG_BR_PROB_BASE);\n       pp_colon (buffer);\n     }\n   if (flags & TDF_GIMPLE)\n@@ -2542,7 +2590,8 @@ dump_gimple_bb_header (FILE *outf, basic_block bb, int indent, int flags)\n \t  if (flags & TDF_GIMPLE)\n \t    fprintf (outf, \"%*sbb_%d:\\n\", indent, \"\", bb->index);\n \t  else\n-\t    fprintf (outf, \"%*s<bb %d>:\\n\", indent, \"\", bb->index);\n+\t    fprintf (outf, \"%*s<bb %d> [%.1f%%]:\\n\", indent, \"\", bb->index,\n+\t\t     bb->frequency * 100.0 / REG_BR_PROB_BASE);\n \t}\n     }\n }\n@@ -2588,19 +2637,20 @@ dump_phi_nodes (pretty_printer *buffer, basic_block bb, int indent, int flags)\n    to BUFFER.  */\n \n static void\n-pp_cfg_jump (pretty_printer *buffer, basic_block bb, int flags)\n+pp_cfg_jump (pretty_printer *buffer, edge e, int flags)\n {\n   if (flags & TDF_GIMPLE)\n     {\n       pp_string (buffer, \"goto bb_\");\n-      pp_decimal_int (buffer, bb->index);\n+      pp_decimal_int (buffer, e->dest->index);\n       pp_semicolon (buffer);\n     }\n   else\n     {\n-      gimple *stmt = first_stmt (bb);\n+      gimple *stmt = first_stmt (e->dest);\n+\n       pp_string (buffer, \"goto <bb \");\n-      pp_decimal_int (buffer, bb->index);\n+      pp_decimal_int (buffer, e->dest->index);\n       pp_greater (buffer);\n       if (stmt && gimple_code (stmt) == GIMPLE_LABEL)\n \t{\n@@ -2613,6 +2663,8 @@ pp_cfg_jump (pretty_printer *buffer, basic_block bb, int flags)\n \t}\n       else\n \tpp_semicolon (buffer);\n+\n+      dump_edge_probability (buffer, e);\n     }\n }\n \n@@ -2641,11 +2693,11 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n       extract_true_false_edges_from_block (bb, &true_edge, &false_edge);\n \n       INDENT (indent + 2);\n-      pp_cfg_jump (buffer, true_edge->dest, flags);\n+      pp_cfg_jump (buffer, true_edge, flags);\n       newline_and_indent (buffer, indent);\n       pp_string (buffer, \"else\");\n       newline_and_indent (buffer, indent + 2);\n-      pp_cfg_jump (buffer, false_edge->dest, flags);\n+      pp_cfg_jump (buffer, false_edge, flags);\n       pp_newline (buffer);\n       return;\n     }\n@@ -2662,7 +2714,7 @@ dump_implicit_edges (pretty_printer *buffer, basic_block bb, int indent,\n \t  && e->goto_locus != UNKNOWN_LOCATION)\n \tdump_location (buffer, e->goto_locus);\n \n-      pp_cfg_jump (buffer, e->dest, flags);\n+      pp_cfg_jump (buffer, e, flags);\n       pp_newline (buffer);\n     }\n }"}, {"sha": "fa0c0e2c1f0a5cde25ffb092bee2288e69aa9239", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -1,3 +1,16 @@\n+2016-11-24  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/builtin-unreachable-6.c: Update test to not to scan\n+\tparts for frequencies/probabilities.\n+\t* gcc.dg/pr34027-1.c: Likewise.\n+\t* gcc.dg/strict-overflow-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/20040703-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-2.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr32044.c: Likewise.\n+\t* gcc.dg/tree-ssa/vector-3.c: Likewise.\n+\t* gcc.dg/tree-ssa/vrp101.c: Likewise.\n+\t* gcc.dg/tree-ssa/dump-2.c: New test.\n+\n 2016-11-24  Bernd Schmidt  <bschmidt@redhat.com>\n \n \t* gcc.target/i386/align-limit.c: New test."}, {"sha": "d2596e95c3fc30a506cc09817a51535c7dd87a79", "filename": "gcc/testsuite/gcc.dg/builtin-unreachable-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-unreachable-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-unreachable-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-unreachable-6.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -16,5 +16,5 @@ foo (int b, int c)\n   goto *x;\n }\n \n-/* { dg-final { scan-tree-dump-times \"lab:\" 1 \"fab1\" } } */\n+/* { dg-final { scan-tree-dump-times \"lab \\\\\\[\\[0-9.\\]+%\\\\\\]\" 1 \"fab1\" } } */\n /* { dg-final { scan-tree-dump-times \"__builtin_unreachable\" 1 \"fab1\" } } */"}, {"sha": "0405e357a2f57d17d53fcfb097c38e8bb01a9315", "filename": "gcc/testsuite/gcc.dg/pr34027-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34027-1.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -11,5 +11,5 @@ unsigned long foobar(unsigned long ns)\n /* This test was originally introduced to test that we transform\n    to ns % 10000.  See the discussion of PR 32044 why we do not do\n    that anymore.  */\n-/* { dg-final { scan-tree-dump-times \"%\" 0 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"/\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" % \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" / \" 0 \"optimized\" } } */"}, {"sha": "f23c43aa892791d8104290e7f93db03a912c30c3", "filename": "gcc/testsuite/gcc.dg/strict-overflow-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrict-overflow-2.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -12,4 +12,4 @@ foo (int i)\n   return (i * 100) / 10;\n }\n \n-/* { dg-final { scan-tree-dump-not \"100\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\\\* 100\" \"optimized\" } } */"}, {"sha": "2980047685218042bf0ef72913844df6d5389edf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040703-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040703-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040703-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040703-1.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -9,4 +9,4 @@ float foo(float x)\n }\n \n /* We should *not* fold the arithmetic.  */\n-/* { dg-final { scan-tree-dump-times \"0\\\\.0\" 0 \"dom2\"} } */\n+/* { dg-final { scan-tree-dump-times \"0\\\\.0\\[^%\\]\" 0 \"dom2\"} } */"}, {"sha": "6279956c411fc0e0d3d63eb428a9c2d1950063e7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-2.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -252,5 +252,5 @@ RNG (0,  6,   8, \"%s%ls\", \"1\", L\"2\");\n \n */\n \n-/* { dg-final { scan-tree-dump-times \">:\\n *__builtin_abort\" 114 \"optimized\" { target { ilp32 || lp64 } } } } */\n-/* { dg-final { scan-tree-dump-times \">:\\n *__builtin_abort\" 83 \"optimized\" { target { { ! ilp32 } && { ! lp64 } } } } } */\n+/* { dg-final { scan-tree-dump-times \"> \\\\\\[\\[0-9.\\]+%\\\\\\]:\\n *__builtin_abort\" 114 \"optimized\" { target { ilp32 || lp64 } } } } */\n+/* { dg-final { scan-tree-dump-times \"> \\\\\\[\\[0-9.\\]+%\\\\\\]:\\n *__builtin_abort\" 83 \"optimized\" { target { { ! ilp32 } && { ! lp64 } } } } } */"}, {"sha": "11cde92a7e0f501e3f9b00316853b61ca67907cf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/dump-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdump-2.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+\n+int f(void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"<bb \\[0-9\\]> \\\\\\[100\\\\\\.0%\\\\\\]:\" \"optimized\" } } */"}, {"sha": "8a8977a7a6846ff9bc1c7628042e594518ef1180", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr32044.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32044.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32044.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr32044.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -48,6 +48,6 @@ int baz (int n)\n \n /* There should be no division/modulo in the final dump (division and modulo\n    by 64 are done using bit operations).  */\n-/* { dg-final { scan-tree-dump-times \"/\" 0 \"optimized\" } } */\n-/* { dg-final { scan-tree-dump-times \"%\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" / \" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" % \" 0 \"optimized\" } } */\n "}, {"sha": "589ee7e8616a9bdcd9285f489ecc159f466b1287", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -14,6 +14,6 @@ float f(float b)\n \n /* We should be able to optimize this to just \"return 0.0;\" */\n /* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 0 \"optimized\"} } */\n-/* { dg-final { scan-tree-dump-times \"0\\\\\\.0\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \" 0\\\\\\.0\" 1 \"optimized\"} } */\n \n "}, {"sha": "bf4109f7156c47d9c78e83e93034e910fc45dba2", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp101.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp101.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -10,4 +10,4 @@ int main ()\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"<bb 2>:\\[\\n\\r \\]*return 0;\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \"<bb 2> \\\\\\[\\[0-9.\\]+%\\\\\\]:\\[\\n\\r \\]*return 0;\" \"optimized\" } } */"}, {"sha": "5c667a201a78f6b1e7eaaaef3029b21135bf6ceb", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d56d3c17b709688ec817372311cde1cc445ae4b/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=0d56d3c17b709688ec817372311cde1cc445ae4b", "patch": "@@ -4807,7 +4807,7 @@ get_scaled_computation_cost_at (ivopts_data *data, gimple *at, iv_cand *cand,\n \t\t\t\tcomp_cost cost)\n {\n    int loop_freq = data->current_loop->header->frequency;\n-   int bb_freq = at->bb->frequency;\n+   int bb_freq = gimple_bb (at)->frequency;\n    if (loop_freq != 0)\n      {\n        gcc_assert (cost.scratch <= cost.cost);"}]}