{"sha": "216448c75d059b61f67ecd404aef3b6bfced8f88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2NDQ4Yzc1ZDA1OWI2MWY2N2VjZDQwNGFlZjNiNmJmY2VkOGY4OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-06-08T07:48:16Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-06-08T07:48:16Z"}, "message": "re PR debug/21946 (Invalid DWARF2 debug info emitted)\n\n\tPR debug/21946\n\t* dwarf2out.c (add_loc_descr_op_piece): Move to the\n\tDWARF2_DEBUGGING_INFO section.\n\nFrom-SVN: r100748", "tree": {"sha": "5a6eb531e0f14e7679c0e5e8b837a15d7c62d5cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a6eb531e0f14e7679c0e5e8b837a15d7c62d5cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/216448c75d059b61f67ecd404aef3b6bfced8f88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216448c75d059b61f67ecd404aef3b6bfced8f88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/216448c75d059b61f67ecd404aef3b6bfced8f88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/216448c75d059b61f67ecd404aef3b6bfced8f88/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f3b8452457728e664d41eaaf34e70818bc9f50e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3b8452457728e664d41eaaf34e70818bc9f50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3b8452457728e664d41eaaf34e70818bc9f50e"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "014fa676549e3811a29cfef2585b070a0eea3d06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216448c75d059b61f67ecd404aef3b6bfced8f88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216448c75d059b61f67ecd404aef3b6bfced8f88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=216448c75d059b61f67ecd404aef3b6bfced8f88", "patch": "@@ -1,3 +1,9 @@\n+2005-06-08  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR debug/21946\n+\t* dwarf2out.c (add_loc_descr_op_piece): Move to the\n+\tDWARF2_DEBUGGING_INFO section.\n+\n 2005-06-08  Richard Henderson  <rth@redhat.com>\n \n \tPR target/21721"}, {"sha": "2fe28d5e3fcfb40addd24ceb0c2703e0373d27e3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/216448c75d059b61f67ecd404aef3b6bfced8f88/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/216448c75d059b61f67ecd404aef3b6bfced8f88/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=216448c75d059b61f67ecd404aef3b6bfced8f88", "patch": "@@ -2659,7 +2659,6 @@ static const char *dwarf_stack_op_name (unsigned);\n static dw_loc_descr_ref new_loc_descr (enum dwarf_location_atom,\n \t\t\t\t       unsigned HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n static void add_loc_descr (dw_loc_descr_ref *, dw_loc_descr_ref);\n-static void add_loc_descr_op_piece (dw_loc_descr_ref *, int);\n static unsigned long size_of_loc_descr (dw_loc_descr_ref);\n static unsigned long size_of_locs (dw_loc_descr_ref);\n static void output_loc_operands (dw_loc_descr_ref);\n@@ -2997,7 +2996,6 @@ new_loc_descr (enum dwarf_location_atom op, unsigned HOST_WIDE_INT oprnd1,\n   return descr;\n }\n \n-\n /* Add a location description term to a location description expression.  */\n \n static inline void\n@@ -3012,27 +3010,6 @@ add_loc_descr (dw_loc_descr_ref *list_head, dw_loc_descr_ref descr)\n   *d = descr;\n }\n \n-\n-/* Optionally add a DW_OP_piece term to a location description expression.\n-   DW_OP_piece is only added if the location description expression already\n-   doesn't end with DW_OP_piece.  */\n-\n-static void\n-add_loc_descr_op_piece (dw_loc_descr_ref *list_head, int size)\n-{\n-  dw_loc_descr_ref loc;\n-\n-  if (*list_head != NULL)\n-    {\n-      /* Find the end of the chain.  */\n-      for (loc = *list_head; loc->dw_loc_next != NULL; loc = loc->dw_loc_next)\n-\t;\n-\n-      if (loc->dw_loc_opc != DW_OP_piece)\n-\tloc->dw_loc_next = new_loc_descr (DW_OP_piece, size, 0);\n-    }\n-}\n-\n /* Return the size of a location descriptor.  */\n \n static unsigned long\n@@ -3996,6 +3973,7 @@ static dw_die_ref subrange_type_die (tree, dw_die_ref);\n static dw_die_ref modified_type_die (tree, int, int, dw_die_ref);\n static int type_is_enum (tree);\n static unsigned int dbx_reg_number (rtx);\n+static void add_loc_descr_op_piece (dw_loc_descr_ref *, int);\n static dw_loc_descr_ref reg_loc_descriptor (rtx);\n static dw_loc_descr_ref one_reg_loc_descriptor (unsigned int);\n static dw_loc_descr_ref multiple_reg_loc_descriptor (rtx, rtx);\n@@ -8432,6 +8410,26 @@ dbx_reg_number (rtx rtl)\n   return DBX_REGISTER_NUMBER (regno);\n }\n \n+/* Optionally add a DW_OP_piece term to a location description expression.\n+   DW_OP_piece is only added if the location description expression already\n+   doesn't end with DW_OP_piece.  */\n+\n+static void\n+add_loc_descr_op_piece (dw_loc_descr_ref *list_head, int size)\n+{\n+  dw_loc_descr_ref loc;\n+\n+  if (*list_head != NULL)\n+    {\n+      /* Find the end of the chain.  */\n+      for (loc = *list_head; loc->dw_loc_next != NULL; loc = loc->dw_loc_next)\n+\t;\n+\n+      if (loc->dw_loc_opc != DW_OP_piece)\n+\tloc->dw_loc_next = new_loc_descr (DW_OP_piece, size, 0);\n+    }\n+}\n+\n /* Return a location descriptor that designates a machine register or\n    zero if there is none.  */\n "}]}