{"sha": "a87e0cba839bb4a2daca34896a0760258027b38e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg3ZTBjYmE4MzliYjRhMmRhY2EzNDg5NmEwNzYwMjU4MDI3YjM4ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-04-22T12:21:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-04-22T12:21:31Z"}, "message": "[arm] Add initial support for Arm Cortex-M55\n\nThis patch adds initial -mcpu support for the Arm Cortex-M55 CPU.\nThis CPU is an Armv8.1-M Mainline CPU supporting MVE.\nAn option to disable floating-point (and MVE) is provided with the +nofp.\nFor GCC 11 I'd like to add further fine-grained options to enable integer-only MVE\nbut that needs a bit more elaborate surgery in arm-cpus.in that I don't want to do\nin GCC 10 at this stage.\n\nAs this CPU is not supported in gas and I don't want to couple GCC 10 to the very\nlatest binutils anyway, this CPU emits the cpu string in the assembly file as a build attribute\nrather than a .cpu directive, thus sparing us the need to support .cpu cortex-m55 in gas.\nThe .cpu directive in gas isn't used for anything besides setting the Tag_CPU_name\nbuild attribute anyway (which itself is not used by any tools I'm aware of).\nAll the architecture information used for target detection is already emitted using .arch_extension\ndirectives and similar.\n\nBootstrapped and tested on arm-none-linux-gnueabihf. Also tested on arm-none-eabi.\n\n2020-04-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm.c (arm_file_start): Handle isa_bit_quirk_no_asmcpu.\n\t* config/arm/arm-cpus.in (quirk_no_asmcpu): Define.\n\t(ALL_QUIRKS): Add quirk_no_asmcpu.\n\t(cortex-m55): Define new cpu.\n\t* config/arm/arm-tables.opt: Regenerate.\n\t* config/arm/arm-tune.md: Likewise.\n\t* doc/invoke.texi (Arm Options): Document -mcpu=cortex-m55.", "tree": {"sha": "745ab98b1c3c361d4b15a82a4fc14c2a28e128c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/745ab98b1c3c361d4b15a82a4fc14c2a28e128c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a87e0cba839bb4a2daca34896a0760258027b38e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87e0cba839bb4a2daca34896a0760258027b38e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a87e0cba839bb4a2daca34896a0760258027b38e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a87e0cba839bb4a2daca34896a0760258027b38e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ea769a91dfa9142235c457b9db6ecc4e55072c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea769a91dfa9142235c457b9db6ecc4e55072c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea769a91dfa9142235c457b9db6ecc4e55072c4"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "85f6f4c2c8b3cf89e582e341c7096fabe58df805", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a87e0cba839bb4a2daca34896a0760258027b38e", "patch": "@@ -1,3 +1,15 @@\n+2020-04-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm.c (arm_file_start): Handle isa_bit_quirk_no_asmcpu.\n+\t* config/arm/arm-cpus.in (quirk_no_asmcpu): Define.\n+\t(ALL_QUIRKS): Add quirk_no_asmcpu.\n+\t(cortex-m55): Define new cpu.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Likewise.\n+\t* doc/invoke.texi (Arm Options): Document -mcpu=cortex-m55.\n+\n 2020-04-22  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR tree-optimization/94700"}, {"sha": "64b8ba705070600418a006b6a183447ebbe6719c", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=a87e0cba839bb4a2daca34896a0760258027b38e", "patch": "@@ -190,6 +190,9 @@ define feature quirk_armv6kz\n # Cortex-M3 LDRD quirk.\n define feature quirk_cm3_ldrd\n \n+# Don't use .cpu assembly directive\n+define feature quirk_no_asmcpu\n+\n # (Very) slow multiply operations.  Should probably be a tuning bit.\n define feature smallmul\n \n@@ -311,7 +314,7 @@ define fgroup DOTPROD\tNEON dotprod\n # architectures.\n # xscale isn't really a 'quirk', but it isn't an architecture either and we\n # need to ignore it for matching purposes.\n-define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd xscale\n+define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd xscale quirk_no_asmcpu\n \n # Architecture entries\n # format:\n@@ -1501,6 +1504,16 @@ begin cpu cortex-m35p\n  costs v7m\n end cpu cortex-m35p\n \n+begin cpu cortex-m55\n+ cname cortexm55\n+ tune flags LDSCHED\n+ architecture armv8.1-m.main+mve.fp+fp.dp\n+ isa quirk_no_asmcpu\n+ option nofp remove ALL_FP MVE_FP\n+ costs v7m\n+ vendor 41\n+end cpu cortex-m55\n+\n # V8 R-profile implementations.\n begin cpu cortex-r52\n  cname cortexr52"}, {"sha": "ce356611861173bc0a7b7843862dbe1383360769", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=a87e0cba839bb4a2daca34896a0760258027b38e", "patch": "@@ -258,6 +258,9 @@ Enum(processor_type) String(cortex-m33) Value( TARGET_CPU_cortexm33)\n EnumValue\n Enum(processor_type) String(cortex-m35p) Value( TARGET_CPU_cortexm35p)\n \n+EnumValue\n+Enum(processor_type) String(cortex-m55) Value( TARGET_CPU_cortexm55)\n+\n EnumValue\n Enum(processor_type) String(cortex-r52) Value( TARGET_CPU_cortexr52)\n "}, {"sha": "8ea9435c0c939c61e888b8b6cccb988c8d7029f6", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=a87e0cba839bb4a2daca34896a0760258027b38e", "patch": "@@ -47,5 +47,5 @@\n \tcortexa76,cortexa76ae,cortexa77,\n \tneoversen1,cortexa75cortexa55,cortexa76cortexa55,\n \tcortexm23,cortexm33,cortexm35p,\n-\tcortexr52\"\n+\tcortexm55,cortexr52\"\n \t(const (symbol_ref \"((enum attr_tune) arm_tune)\")))"}, {"sha": "0151bda90d961ae1a001c61cd5e94d6ec67e3aea", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a87e0cba839bb4a2daca34896a0760258027b38e", "patch": "@@ -27889,7 +27889,11 @@ arm_file_start (void)\n \t{\n \t  const char* truncated_name\n \t    = arm_rewrite_selected_cpu (arm_active_target.core_name);\n-\t  asm_fprintf (asm_out_file, \"\\t.cpu %s\\n\", truncated_name);\n+\t  if (bitmap_bit_p (arm_active_target.isa, isa_bit_quirk_no_asmcpu))\n+\t    asm_fprintf (asm_out_file, \"\\t.eabi_attribute 5, \\\"%s\\\"\\n\",\n+\t\t\t truncated_name);\n+\t  else\n+\t    asm_fprintf (asm_out_file, \"\\t.cpu %s\\n\", truncated_name);\n \t}\n \n       if (print_tune_info)"}, {"sha": "e2bc2559218b3e484d5249c3d5b480383dea9037", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a87e0cba839bb4a2daca34896a0760258027b38e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a87e0cba839bb4a2daca34896a0760258027b38e", "patch": "@@ -18773,7 +18773,7 @@ Permissible names are: @samp{arm7tdmi}, @samp{arm7tdmi-s}, @samp{arm710t},\n @samp{cortex-r5}, @samp{cortex-r7}, @samp{cortex-r8}, @samp{cortex-r52},\n @samp{cortex-m0}, @samp{cortex-m0plus}, @samp{cortex-m1}, @samp{cortex-m3},\n @samp{cortex-m4}, @samp{cortex-m7}, @samp{cortex-m23}, @samp{cortex-m33},\n-@samp{cortex-m35p},\n+@samp{cortex-m35p}, @samp{cortex-m55},\n @samp{cortex-m1.small-multiply}, @samp{cortex-m0.small-multiply},\n @samp{cortex-m0plus.small-multiply}, @samp{exynos-m1}, @samp{marvell-pj4},\n @samp{neoverse-n1}, @samp{xscale}, @samp{iwmmxt}, @samp{iwmmxt2},\n@@ -18850,7 +18850,7 @@ Disables the floating-point and SIMD instructions on\n @samp{cortex-a8}, @samp{cortex-a9}, @samp{cortex-a12},\n @samp{cortex-a15}, @samp{cortex-a17}, @samp{cortex-a15.cortex-a7},\n @samp{cortex-a17.cortex-a7}, @samp{cortex-a32}, @samp{cortex-a35},\n-@samp{cortex-a53} and @samp{cortex-a55}.\n+@samp{cortex-a53},@samp{cortex-a55} and @samp{cortex-m55}.\n \n @item +nofp.dp\n Disables the double-precision component of the floating-point instructions"}]}