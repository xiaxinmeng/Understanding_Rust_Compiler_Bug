{"sha": "c8cf50e4c144c343371347b47d08af7638ccadb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjZjUwZTRjMTQ0YzM0MzM3MTM0N2I0N2QwOGFmNzYzOGNjYWRiNw==", "commit": {"author": {"name": "Brooks Moses", "email": "brooks.moses@codesourcery.com", "date": "2006-12-17T02:41:48Z"}, "committer": {"name": "Brooks Moses", "email": "brooks@gcc.gnu.org", "date": "2006-12-17T02:41:48Z"}, "message": "gfortran.texi: Added TeX support for document parts...\n\n* gfortran.texi: Added TeX support for document parts;\nrearranged existing text into \"About GNU Fortran\",\n\"Invoking GNU Fortran\", and \"Language Reference\" parts.\n\nFrom-SVN: r119981", "tree": {"sha": "dcc5235c782b69c0778aa49df12c3704ca51b0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc5235c782b69c0778aa49df12c3704ca51b0b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cf50e4c144c343371347b47d08af7638ccadb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cf50e4c144c343371347b47d08af7638ccadb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cf50e4c144c343371347b47d08af7638ccadb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cf50e4c144c343371347b47d08af7638ccadb7/comments", "author": null, "committer": null, "parents": [{"sha": "04b201a28abc8c3be44f4501366a9018ed2eef0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b201a28abc8c3be44f4501366a9018ed2eef0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b201a28abc8c3be44f4501366a9018ed2eef0a"}], "stats": {"total": 439, "additions": 267, "deletions": 172}, "files": [{"sha": "84279a20c57e13ae35f499304b25743f5a58023f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cf50e4c144c343371347b47d08af7638ccadb7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cf50e4c144c343371347b47d08af7638ccadb7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c8cf50e4c144c343371347b47d08af7638ccadb7", "patch": "@@ -1,3 +1,9 @@\n+2006-12-16  Brooks Moses  <brooks.moses@codesourcery.com>\n+\n+\t* gfortran.texi: Added TeX support for document parts;\n+\trearranged existing text into \"About GNU Fortran\",\n+\t\"Invoking GNU Fortran\", and \"Language Reference\" parts.\n+\n 2006-12-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/30200"}, {"sha": "ff724c008f858fe78b827026de4b7ac7837212cb", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 261, "deletions": 172, "changes": 433, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cf50e4c144c343371347b47d08af7638ccadb7/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cf50e4c144c343371347b47d08af7638ccadb7/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=c8cf50e4c144c343371347b47d08af7638ccadb7", "patch": "@@ -16,6 +16,45 @@\n @syncodeindex pg cp\n @syncodeindex tp cp\n \n+@c TODO: The following \"Part\" definitions are included here temporarily\n+@c until they are incorporated into the official Texinfo distribution.\n+@c They borrow heavily from Texinfo's \\unnchapentry definitions.\n+\n+@tex\n+\\gdef\\part#1#2{%\n+  \\pchapsepmacro\n+  \\gdef\\thischapter{}\n+  \\begingroup\n+    \\vglue\\titlepagetopglue\n+    \\titlefonts \\rm\n+    \\leftline{Part #1:@* #2}\n+    \\vskip4pt \\hrule height 4pt width \\hsize \\vskip4pt\n+  \\endgroup\n+  \\writetocentry{part}{#2}{#1}\n+}\n+\\gdef\\blankpart{%\n+  \\writetocentry{blankpart}{}{}\n+}\n+% Part TOC-entry definition for summary contents.\n+\\gdef\\dosmallpartentry#1#2#3#4{%\n+  \\vskip .5\\baselineskip plus.2\\baselineskip\n+  \\begingroup\n+    \\let\\rm=\\bf \\rm\n+    \\tocentry{Part #2: #1}{\\doshortpageno\\bgroup#4\\egroup}\n+  \\endgroup\n+}\n+\\gdef\\dosmallblankpartentry#1#2#3#4{%\n+  \\vskip .5\\baselineskip plus.2\\baselineskip\n+}\n+% Part TOC-entry definition for regular contents.  This has to be\n+% equated to an existing entry to not cause problems when the PDF\n+% outline is created.\n+\\gdef\\dopartentry#1#2#3#4{%\n+  \\unnchapentry{Part #2: #1}{}{#3}{#4}\n+}\n+\\gdef\\doblankpartentry#1#2#3#4{}\n+@end tex\n+\n @c %**end of header\n \n @c Use with @@smallbook.\n@@ -94,8 +133,22 @@ Boston, MA 02110-1301, USA@*\n @sp 1\n @insertcopying\n @end titlepage\n+\n+@c TODO: The following \"Part\" definitions are included here temporarily\n+@c until they are incorporated into the official Texinfo distribution.\n+\n+@tex\n+\\global\\let\\partentry=\\dosmallpartentry\n+\\global\\let\\blankpartentry=\\dosmallblankpartentry\n+@end tex\n @summarycontents\n+\n+@tex\n+\\global\\let\\partentry=\\dopartentry\n+\\global\\let\\blankpartentry=\\doblankpartentry\n+@end tex\n @contents\n+\n @page\n \n @node Top\n@@ -118,16 +171,23 @@ not accurately reflect the status of the most recent GNU Fortran compiler.\n @comment  better formatting.\n @comment\n @menu\n+Part I: About GNU Fortran\n * Getting Started::      What you should know about GNU Fortran.\n * GNU Fortran and GCC::  You can compile Fortran, C, or other programs.\n * GNU Fortran and G77::  Why we chose to start from scratch.\n-* Invoking GNU Fortran:: Command options supported by @command{gfortran}.\n * Project Status::       Status of GNU Fortran, roadmap, proposed extensions.\n-* Contributing::         How you can help.\n * Standards::\t         Standards supported by GNU Fortran.\n+\n+Part II: Invoking GNU Fortran\n+* Invoking GNU Fortran:: Command options supported by @command{gfortran}.\n * Runtime::              Influencing runtime behavior with environment variables.\n+\n+Part III: Language Reference\n+* Fortran 2003 status::  Fortran 2003 features supported by GNU Fortran.\n * Extensions::           Language extensions implemented by GNU Fortran.\n * Intrinsic Procedures:: Intrinsic procedures supported by GNU Fortran.\n+\n+* Contributing::         How you can help.\n * Copying::              GNU General Public License says\n                          how you can copy and share GNU Fortran.\n * GNU Free Documentation License::\n@@ -137,6 +197,13 @@ not accurately reflect the status of the most recent GNU Fortran compiler.\n @end menu\n \n \n+@c =====================================================================\n+@c PART I: ABOUT GNU FORTRAN\n+@c =====================================================================\n+\n+@tex\n+\\part{I}{About GNU Fortran}\n+@end tex\n \n @c ---------------------------------------------------------------------\n @c Getting Started\n@@ -255,7 +322,6 @@ programs will call it for you.\n @end itemize\n \n \n-\n @c ---------------------------------------------------------------------\n @c GNU Fortran and GCC\n @c ---------------------------------------------------------------------\n@@ -308,7 +374,6 @@ If you build GCC with @command{gfortran}, @command{gcc} will recognize\n command line options.\n \n \n-\n @c ---------------------------------------------------------------------\n @c GNU Fortran and G77\n @c ---------------------------------------------------------------------\n@@ -349,7 +414,6 @@ because it was expected to be easier to maintain code we\n develop ourselves than to do a major overhaul of @command{g77} first,\n and then build a Fortran 95 compiler out of it.\n \n-@include invoke.texi\n \n @c ---------------------------------------------------------------------\n @c Project Status\n@@ -374,14 +438,6 @@ the GCC homepage in March 18, 2000\n (even though Andy had already been working on it for a while,\n of course).\n \n-@menu\n-* Compiler and Library Status::\n-* Proposed Extensions::\n-@end menu\n-\n-@node Compiler and Library Status\n-@section Compiler and Library Status\n-\n The GNU Fortran compiler is able to compile nearly all\n standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs,\n including a number of standard and non-standard extensions, and can be\n@@ -419,98 +475,39 @@ and the performance of compiled code, and extending the compiler to support\n future standards---in particular, Fortran 2003.\n \n \n-@node Proposed Extensions\n-@section Proposed Extensions\n-\n-Here's a list of proposed extensions for the GNU Fortran compiler, in no particular\n-order.  Most of these are necessary to be fully compatible with\n-existing Fortran compilers, but they are not part of the official\n-J3 Fortran 95 standard.\n-\n-@subsection Compiler extensions: \n-@itemize @bullet\n-@item\n-User-specified alignment rules for structures.\n-\n-@item\n-Flag to generate @code{Makefile} info.\n-\n-@item\n-Automatically extend single precision constants to double.\n-\n-@item\n-Compile code that conserves memory by dynamically allocating common and\n-module storage either on stack or heap.\n-\n-@item\n-Compile flag to generate code for array conformance checking (suggest -CC).\n-\n-@item\n-User control of symbol names (underscores, etc).\n-\n-@item\n-Compile setting for maximum size of stack frame size before spilling\n-parts to static or heap.\n-\n-@item\n-Flag to force local variables into static space.\n-\n-@item\n-Flag to force local variables onto stack.\n-\n-@item\n-Flag for maximum errors before ending compile.\n-\n-@item\n-Option to initialize otherwise uninitialized integer and floating\n-point variables.\n-@end itemize\n-\n-\n-@subsection Environment Options\n-@itemize @bullet\n-@item\n-Pluggable library modules for random numbers, linear algebra.\n-LA should use BLAS calling conventions.\n-\n-@item\n-Environment variables controlling actions on arithmetic exceptions like\n-overflow, underflow, precision loss---Generate NaN, abort, default.\n-action.\n-\n-@item\n-Set precision for fp units that support it (i387).\n-\n-@item\n-Variable for setting fp rounding mode.\n-\n-@item\n-Variable to fill uninitialized variables with a user-defined bit\n-pattern.\n+@c ---------------------------------------------------------------------\n+@c Standards\n+@c ---------------------------------------------------------------------\n \n-@item\n-Environment variable controlling filename that is opened for that unit\n-number.\n+@node Standards\n+@chapter Standards\n+@cindex Standards\n \n-@item\n-Environment variable to clear/trash memory being freed.\n+The GNU Fortran compiler implements\n+ISO/IEC 1539:1997 (Fortran 95).  As such, it can also compile essentially all\n+standard-compliant Fortran 90 and Fortran 77 programs.   It also supports\n+the ISO/IEC TR-15581 enhancements to allocatable arrays, and\n+the @uref{http://www.openmp.org/drupal/mp-documents/spec25.pdf,\n+OpenMP Application Program Interface v2.5} specification.\n \n-@item\n-Environment variable to control tracing of allocations and frees.\n+In the future, the GNU Fortran compiler may also support other standard \n+variants of and extensions to the Fortran language.  These include\n+ISO/IEC 1539-1:2004 (Fortran 2003).\n \n-@item\n-Environment variable to display allocated memory at normal program end.\n \n-@item\n-Environment variable for filename for * IO-unit.\n+@c =====================================================================\n+@c PART II: INVOCATION REFERENCE\n+@c =====================================================================\n \n-@item\n-Environment variable for temporary file directory.\n+@tex\n+\\part{II}{Invoking GNU Fortran}\n+@end tex\n \n-@item\n-Environment variable forcing standard output to be line buffered (unix).\n+@c ---------------------------------------------------------------------\n+@c Compiler Options\n+@c ---------------------------------------------------------------------\n \n-@end itemize\n+@include invoke.texi\n \n \n @c ---------------------------------------------------------------------\n@@ -688,6 +685,106 @@ data representation for unformatted files.  @xref{Runtime Options}, for\n setting a default data representation for the whole program.  The\n @code{CONVERT} specifier overrides the @code{-fconvert} compile options.\n \n+\n+@c =====================================================================\n+@c PART III: LANGUAGE REFERENCE\n+@c =====================================================================\n+\n+@tex\n+\\part{III}{Language Reference}\n+@end tex\n+\n+@c ---------------------------------------------------------------------\n+@c Fortran 2003 Status\n+@c ---------------------------------------------------------------------\n+\n+@node Fortran 2003 status\n+@chapter Fortran 2003 Status\n+\n+Although GNU Fortran focuses on implementing the Fortran 95\n+standard for the time being, a few Fortran 2003 features are currently\n+available.\n+\n+@itemize\n+@item \n+Intrinsics @code{command_argument_count}, @code{get_command},\n+@code{get_command_argument}, @code{get_environment_variable}, and\n+@code{move_alloc}.\n+\n+@item \n+@cindex Array constructors\n+@cindex @code{[...]}\n+Array constructors using square brackets. That is, @code{[...]} rather\n+than @code{(/.../)}.\n+\n+@item\n+@cindex @code{FLUSH} statement\n+@code{FLUSH} statement.\n+\n+@item\n+@cindex @code{IOMSG=} specifier\n+@code{IOMSG=} specifier for I/O statements.\n+\n+@item\n+@cindex @code{ENUM} statement\n+@cindex @code{ENUMERATOR} statement\n+@cindex @command{-fshort-enums}\n+Support for the declaration of enumeration constants via the\n+@code{ENUM} and @code{ENUMERATOR} statements.  Interoperability with\n+@command{gcc} is guaranteed also for the case where the\n+@command{-fshort-enums} command line option is given.\n+\n+@item\n+@cindex TR 15581\n+TR 15581:\n+@itemize\n+@item\n+@cindex @code{ALLOCATABLE} dummy arguments\n+@code{ALLOCATABLE} dummy arguments.\n+@item\n+@cindex @code{ALLOCATABLE} function results\n+@code{ALLOCATABLE} function results\n+@item\n+@cindex @code{ALLOCATABLE} components of derived types\n+@code{ALLOCATABLE} components of derived types\n+@end itemize\n+\n+@item\n+@cindex @code{STREAM} I/O\n+@cindex @code{ACCESS='STREAM'} I/O\n+The @code{OPEN} statement supports the @code{ACCESS='STREAM'} specifier,\n+allowing I/O without any record structure.\n+\n+@item\n+Namelist input/output for internal files.\n+\n+@item\n+@cindex @code{PROTECTED}\n+The @code{PROTECTED} statement and attribute.\n+\n+@item\n+@cindex @code{VALUE}\n+The @code{VALUE} statement and attribute.\n+\n+@item\n+@cindex @code{VOLATILE}\n+The @code{VOLATILE} statement and attribute.\n+\n+@item\n+@cindex @code{IMPORT}\n+The @code{IMPORT} statement, allowing to import\n+host-associated derived types.\n+\n+@item\n+@cindex @code{USE, INTRINSIC}\n+@cindex @code{ISO_FORTRAN_ENV}\n+@code{USE} statement with @code{INTRINSIC} and @code{NON_INTRINSIC}\n+attribute; supported intrinsic modules: @code{ISO_FORTRAN_ENV},\n+@code{OMP_LIB} and @code{OMP_LIB_KINDS}.\n+\n+@end itemize\n+\n+\n @c ---------------------------------------------------------------------\n @c Extensions\n @c ---------------------------------------------------------------------\n@@ -1176,15 +1273,22 @@ For details refer to the actual\n OpenMP Application Program Interface v2.5} specification.\n \n @c ---------------------------------------------------------------------\n-@include intrinsic.texi\n+@c Intrinsic Procedures\n @c ---------------------------------------------------------------------\n \n+@include intrinsic.texi\n+\n+\n+@tex\n+\\blankpart\n+@end tex\n+\n @c ---------------------------------------------------------------------\n @c Contributing\n @c ---------------------------------------------------------------------\n \n @node Contributing\n-@chapter Contributing\n+@unnumbered Contributing\n @cindex Contributing\n \n Free software is only possible if people contribute to efforts\n@@ -1206,6 +1310,7 @@ but they are also things doable by someone who is willing and able.\n @menu\n * Contributors::\n * Projects::\n+* Proposed Extensions::\n @end menu\n \n \n@@ -1300,112 +1405,96 @@ please contact a project maintainer.\n @c TODO: email!\n \n \n-@c ---------------------------------------------------------------------\n-@c Standards\n-@c ---------------------------------------------------------------------\n+@node Proposed Extensions\n+@section Proposed Extensions\n \n-@node Standards\n-@chapter Standards\n-@cindex Standards\n+Here's a list of proposed extensions for the GNU Fortran compiler, in no particular\n+order.  Most of these are necessary to be fully compatible with\n+existing Fortran compilers, but they are not part of the official\n+J3 Fortran 95 standard.\n \n-The GNU Fortran compiler implements\n-ISO/IEC 1539:1997 (Fortran 95).  As such, it can also compile essentially all\n-standard-compliant Fortran 90 and Fortran 77 programs.   It also supports\n-the ISO/IEC TR-15581 enhancements to allocatable arrays, and\n-the @uref{http://www.openmp.org/drupal/mp-documents/spec25.pdf,\n-OpenMP Application Program Interface v2.5} specification.\n+@subsection Compiler extensions: \n+@itemize @bullet\n+@item\n+User-specified alignment rules for structures.\n \n-In the future, the GNU Fortran compiler may also support other standard \n-variants of and extensions to the Fortran language.  These include\n-ISO/IEC 1539-1:2004 (Fortran 2003).\n+@item\n+Flag to generate @code{Makefile} info.\n \n-@menu\n-* Fortran 2003 status::\n-@end menu\n+@item\n+Automatically extend single precision constants to double.\n \n-@node Fortran 2003 status\n-@section Fortran 2003 status\n+@item\n+Compile code that conserves memory by dynamically allocating common and\n+module storage either on stack or heap.\n \n-Although GNU Fortran focuses on implementing the Fortran 95\n-standard for the time being, a few Fortran 2003 features are currently\n-available.\n+@item\n+Compile flag to generate code for array conformance checking (suggest -CC).\n \n-@itemize\n-@item \n-Intrinsics @code{command_argument_count}, @code{get_command},\n-@code{get_command_argument}, @code{get_environment_variable}, and\n-@code{move_alloc}.\n+@item\n+User control of symbol names (underscores, etc).\n \n-@item \n-@cindex Array constructors\n-@cindex @code{[...]}\n-Array constructors using square brackets. That is, @code{[...]} rather\n-than @code{(/.../)}.\n+@item\n+Compile setting for maximum size of stack frame size before spilling\n+parts to static or heap.\n \n @item\n-@cindex @code{FLUSH} statement\n-@code{FLUSH} statement.\n+Flag to force local variables into static space.\n \n @item\n-@cindex @code{IOMSG=} specifier\n-@code{IOMSG=} specifier for I/O statements.\n+Flag to force local variables onto stack.\n \n @item\n-@cindex @code{ENUM} statement\n-@cindex @code{ENUMERATOR} statement\n-@cindex @command{-fshort-enums}\n-Support for the declaration of enumeration constants via the\n-@code{ENUM} and @code{ENUMERATOR} statements.  Interoperability with\n-@command{gcc} is guaranteed also for the case where the\n-@command{-fshort-enums} command line option is given.\n+Flag for maximum errors before ending compile.\n \n @item\n-@cindex TR 15581\n-TR 15581:\n-@itemize\n+Option to initialize otherwise uninitialized integer and floating\n+point variables.\n+@end itemize\n+\n+\n+@subsection Environment Options\n+@itemize @bullet\n @item\n-@cindex @code{ALLOCATABLE} dummy arguments\n-@code{ALLOCATABLE} dummy arguments.\n+Pluggable library modules for random numbers, linear algebra.\n+LA should use BLAS calling conventions.\n+\n @item\n-@cindex @code{ALLOCATABLE} function results\n-@code{ALLOCATABLE} function results\n+Environment variables controlling actions on arithmetic exceptions like\n+overflow, underflow, precision loss---Generate NaN, abort, default.\n+action.\n+\n @item\n-@cindex @code{ALLOCATABLE} components of derived types\n-@code{ALLOCATABLE} components of derived types\n-@end itemize\n+Set precision for fp units that support it (i387).\n \n @item\n-@cindex @code{STREAM} I/O\n-@cindex @code{ACCESS='STREAM'} I/O\n-The @code{OPEN} statement supports the @code{ACCESS='STREAM'} specifier,\n-allowing I/O without any record structure.\n+Variable for setting fp rounding mode.\n \n @item\n-Namelist input/output for internal files.\n+Variable to fill uninitialized variables with a user-defined bit\n+pattern.\n \n @item\n-@cindex @code{PROTECTED}\n-The @code{PROTECTED} statement and attribute.\n+Environment variable controlling filename that is opened for that unit\n+number.\n \n @item\n-@cindex @code{VALUE}\n-The @code{VALUE} statement and attribute.\n+Environment variable to clear/trash memory being freed.\n \n @item\n-@cindex @code{VOLATILE}\n-The @code{VOLATILE} statement and attribute.\n+Environment variable to control tracing of allocations and frees.\n \n @item\n-@cindex @code{IMPORT}\n-The @code{IMPORT} statement, allowing to import\n-host-associated derived types.\n+Environment variable to display allocated memory at normal program end.\n \n @item\n-@cindex @code{USE, INTRINSIC}\n-@cindex @code{ISO_FORTRAN_ENV}\n-@code{USE} statement with @code{INTRINSIC} and @code{NON_INTRINSIC}\n-attribute; supported intrinsic modules: @code{ISO_FORTRAN_ENV},\n-@code{OMP_LIB} and @code{OMP_LIB_KINDS}.\n+Environment variable for filename for * IO-unit.\n+\n+@item\n+Environment variable for temporary file directory.\n+\n+@item\n+Environment variable forcing standard output to be line buffered (unix).\n \n @end itemize\n "}]}