{"sha": "603c431f90469eaa5308447b68e63718dfd5ff8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAzYzQzMWY5MDQ2OWVhYTUzMDg0NDdiNjhlNjM3MThkZmQ1ZmY4YQ==", "commit": {"author": {"name": "Tim Shen", "email": "timshen91@gmail.com", "date": "2013-07-21T23:34:02Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2013-07-21T23:34:02Z"}, "message": "Partially implement regex_search.\n\n2013-07-21  Tim Shen  <timshen91@gmail.com>\n\n\tPartially implement regex_search.\n\t* include/bits/regex.h: regex_search.\n\t* include/bits/regex_grep_matcher.h: _M_search_from_first.\n\t* include/bits/regex_grep_matcher.tcc: Implement it.\n\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc: New.\n\nFrom-SVN: r201113", "tree": {"sha": "048f4c3c258490bce321bc913432437d27f68791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/048f4c3c258490bce321bc913432437d27f68791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/603c431f90469eaa5308447b68e63718dfd5ff8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603c431f90469eaa5308447b68e63718dfd5ff8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603c431f90469eaa5308447b68e63718dfd5ff8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603c431f90469eaa5308447b68e63718dfd5ff8a/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3429db0fb07ae6f0fb09f72667f5dc0e818df349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3429db0fb07ae6f0fb09f72667f5dc0e818df349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3429db0fb07ae6f0fb09f72667f5dc0e818df349"}], "stats": {"total": 150, "additions": 137, "deletions": 13}, "files": [{"sha": "6083b5b3f89f8252e52dd4ca16200376c960c37c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=603c431f90469eaa5308447b68e63718dfd5ff8a", "patch": "@@ -1,3 +1,12 @@\n+2013-07-21  Tim Shen  <timshen91@gmail.com>\n+\n+\tPartially implement regex_search.\n+\t* include/bits/regex.h: regex_search.\n+\t* include/bits/regex_grep_matcher.h: _M_search_from_first.\n+\t* include/bits/regex_grep_matcher.tcc: Implement it.\n+\t* testsuite/28_regex/algorithms/regex_search/basic/string_01.cc: New.\n+\n+\n 2013-07-21  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \tPR libstdc++/54352"}, {"sha": "58d4e72be9d312d9d934c76db89369dd8aae5c62", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=603c431f90469eaa5308447b68e63718dfd5ff8a", "patch": "@@ -2185,6 +2185,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __detail::_SpecializedCursor<_Bi_iter> __cs(__s, __e);\n       __detail::_SpecializedResults<_Bi_iter, _Alloc> __r(__sz, __cs, __m);\n       __detail::_Grep_matcher __matcher(__cs, __r, __a, __flags);\n+      __matcher._M_match();\n       return __m[0].matched;\n     }\n \n@@ -2324,11 +2325,38 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   typename _Ch_type, typename _Rx_traits>\n     inline bool\n     regex_search(_Bi_iter __first, _Bi_iter __last,\n-\t\t match_results<_Bi_iter, _Alloc>& __m,\n-\t\t const basic_regex<_Ch_type, _Rx_traits>& __re,\n-\t\t regex_constants::match_flag_type __flags\n-\t\t = regex_constants::match_default)\n-    { return false; }\n+                 match_results<_Bi_iter, _Alloc>& __m,\n+                 const basic_regex<_Ch_type, _Rx_traits>& __re,\n+                 regex_constants::match_flag_type __flags\n+                 = regex_constants::match_default)\n+    {\n+      __detail::_AutomatonPtr __a = __re._M_get_automaton();\n+      __detail::_Automaton::_SizeT __sz = __a->_M_sub_count();\n+      __detail::_SpecializedCursor<_Bi_iter> __cs(__first, __last);\n+      __detail::_SpecializedResults<_Bi_iter, _Alloc> __r(__sz, __cs, __m);\n+      for (auto __cur = __first; __cur != __last; ++__cur) // Any KMP-like algo?\n+        {\n+          __detail::_SpecializedCursor<_Bi_iter> __curs(__cur, __last);\n+          __detail::_Grep_matcher __matcher(__curs, __r, __a, __flags);\n+          __matcher._M_search_from_first();\n+          if (__m[0].matched)\n+            {\n+              __r._M_set_range(__m.size(),\n+                               __detail::_SpecializedCursor<_Bi_iter>\n+                                 {__first, __m[0].first});\n+              __r._M_set_range(__m.size()+1,\n+                               __detail::_SpecializedCursor<_Bi_iter>\n+                                 {__m[0].second, __last});\n+              __r._M_set_matched(__m.size(),\n+                                 __m.prefix().first != __m.prefix().second);\n+              __r._M_set_matched(__m.size()+1,\n+                                 __m.suffix().first != __m.suffix().second);\n+              return true;\n+            }\n+        }\n+      return false;\n+    }\n+\n \n   /**\n    * Searches for a regular expression within a range."}, {"sha": "da9264d5c1726aa6acfb57ab50098586bc4aa2bb", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.h", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.h?ref=603c431f90469eaa5308447b68e63718dfd5ff8a", "patch": "@@ -63,6 +63,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_set_pos(int __i, int __j, const _PatternCursor& __pc);\n \n+      void\n+      _M_set_range(int __i, const _PatternCursor& __pc)\n+      {\n+        typedef const _SpecializedCursor<_FwdIterT>& _CursorT;\n+        _CursorT __c = static_cast<_CursorT>(__pc);\n+        _M_results.at(__i).first = __c._M_begin();\n+        _M_results.at(__i).second = __c._M_end();\n+      }\n+\n       void\n       _M_set_matched(int __i, bool __is_matched)\n       { _M_results.at(__i).matched = __is_matched; }\n@@ -111,9 +120,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n   public:\n     _Grep_matcher(_PatternCursor&                   __p,\n-\t\t  _Results&                         __r,\n-\t\t  const _AutomatonPtr&              __automaton,\n-\t\t  regex_constants::match_flag_type  __flags);\n+                  _Results&                         __r,\n+                  const _AutomatonPtr&              __automaton,\n+                  regex_constants::match_flag_type  __flags)\n+    : _M_nfa(static_pointer_cast<_Nfa>(__automaton)),\n+      _M_pattern(__p), _M_results(__r)\n+    { }\n+\n+    void _M_match();\n+\n+    void _M_search_from_first();\n \n   private:\n     _StateSet"}, {"sha": "2d4a9a60faa35ea2e8e29bce1e2e1d972191ba18", "filename": "libstdc++-v3/include/bits/regex_grep_matcher.tcc", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_grep_matcher.tcc?ref=603c431f90469eaa5308447b68e63718dfd5ff8a", "patch": "@@ -103,11 +103,8 @@ namespace __detail\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  inline _Grep_matcher::\n-  _Grep_matcher(_PatternCursor& __p, _Results& __r,\n-\t\tconst _AutomatonPtr& __nfa,\n-\t\tregex_constants::match_flag_type __flags)\n-  : _M_nfa(static_pointer_cast<_Nfa>(__nfa)), _M_pattern(__p), _M_results(__r)\n+  inline void _Grep_matcher::\n+  _M_match()\n   {\n     __detail::_StateSet __t = this->_M_e_closure(_M_nfa->_M_start());\n     for (; !_M_pattern._M_at_end(); _M_pattern._M_next())\n@@ -117,6 +114,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                               __includes_some(_M_nfa->_M_final_states(), __t));\n   }\n \n+  inline void _Grep_matcher::\n+  _M_search_from_first()\n+  {\n+    __detail::_StateSet __t = this->_M_e_closure(_M_nfa->_M_start());\n+    for (; !_M_pattern._M_at_end(); _M_pattern._M_next())\n+      {\n+        if (__includes_some(_M_nfa->_M_final_states(), __t)) // KISS\n+          {\n+            _M_results._M_set_matched(0, true);\n+            return;\n+          }\n+        __t = this->_M_e_closure(__move(_M_pattern, *_M_nfa, __t));\n+      }\n+    _M_results._M_set_matched(0, false);\n+  }\n+\n   // Creates the e-closure set for the initial state __i.\n   inline _StateSet _Grep_matcher::\n   _M_e_closure(_StateIdT __i)"}, {"sha": "f2a7f2104c1d0c0f3a84b1c2bf59e960da6ef353", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_search/basic/string_01.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/603c431f90469eaa5308447b68e63718dfd5ff8a/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_search%2Fbasic%2Fstring_01.cc?ref=603c431f90469eaa5308447b68e63718dfd5ff8a", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do run { xfail *-*-* } }\n+\n+//\n+// 2013-07-17  Tim Shen <timshen91@gmail.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 28.11.3 regex_search\n+// Tests BRE against a std::string target.\n+\n+#include <regex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::regex  re(\"as(df)\", std::regex::basic);\n+  std::string target(\"xxasdfyy\");\n+  std::smatch m;\n+\n+  VERIFY( std::regex_search(target, m, re) );\n+\n+  VERIFY( m.size()  == re.mark_count()+1 );\n+  VERIFY( m.empty() == false );\n+  VERIFY( m.prefix().matched == (m.prefix().first != m.prefix().second) );\n+  VERIFY( std::string(m.prefix().first, m.prefix().second) == \"xx\" );\n+  VERIFY( m.suffix().matched == (m.suffix().first != m.suffix().second) );\n+  VERIFY( std::string(m.suffix().first, m.suffix().second) == \"yy\" );\n+  VERIFY( m[0].matched == true );\n+  VERIFY( std::string(m[0].first, m[0].second) == \"asdf\" );\n+  VERIFY( m[1].matched == true );\n+  VERIFY( std::string(m[1].first, m[1].second) == \"df\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}]}