{"sha": "1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlZmZkY2UyZGZlNzE4ZTEzMzdkNzVlYjRmMjJjM2MzMDBkZjliYg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-18T15:26:07Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-18T15:26:07Z"}, "message": "LRA: handle memory constraints that accept more than \"m\"\n\nLRA allows address constraints that are more relaxed than \"p\":\n\n  /* Target hooks sometimes don't treat extra-constraint addresses as\n     legitimate address_operands, so handle them specially.  */\n  if (insn_extra_address_constraint (cn)\n      && satisfies_address_constraint_p (&ad, cn))\n    return change_p;\n\nFor SVE it's useful to allow the same thing for memory constraints.\nThe particular use case is LD1RQ, which is an SVE instruction that\naddresses Advanced SIMD vector modes and that accepts some addresses\nthat normal Advanced SIMD moves don't.\n\nNormally we require every memory to satisfy at least \"m\", which is\ndefined to be a memory \"with any kind of address that the machine\nsupports in general\".  However, LD1RQ is very much special-purpose:\nit doesn't really have any relation to normal operations on these\nmodes.  Adding its addressing modes to \"m\" would lead to bad Advanced\nSIMD optimisation decisions in passes like ivopts.  LD1RQ therefore\nhas a memory constraint that accepts things \"m\" doesn't.\n\n2019-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* lra-constraints.c (valid_address_p): Take the operand and a\n\tconstraint as argument.  If the operand is a MEM and the constraint\n\tis a memory constraint, check whether the eliminated form of the\n\tMEM already satisfies the constraint.\n\t(process_address_1): Update calls accordingly.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_f16.c: Remove XFAIL.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_f32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_f64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_s16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_s32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_s64.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_u16.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_u32.c: Likewise.\n\t* gcc.target/aarch64/sve/acle/asm/ld1rq_u64.c: Likewise.\n\nFrom-SVN: r278408", "tree": {"sha": "67c4a13cf8f00f7d9b262068d076e6831a4fa86f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c4a13cf8f00f7d9b262068d076e6831a4fa86f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "828a178c2b9140828241dd99e81e1f70f42de722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828a178c2b9140828241dd99e81e1f70f42de722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828a178c2b9140828241dd99e81e1f70f42de722"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "eac041016acdd6828efbaa975632d9a0bfbccaeb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -1,3 +1,11 @@\n+2019-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* lra-constraints.c (valid_address_p): Take the operand and a\n+\tconstraint as argument.  If the operand is a MEM and the constraint\n+\tis a memory constraint, check whether the eliminated form of the\n+\tMEM already satisfies the constraint.\n+\t(process_address_1): Update calls accordingly.\n+\n 2019-11-18  Tom Tromey  <tromey@adacore.com>\n \n \t* doc/tm.texi: Rebuild."}, {"sha": "39d2d2c54210f0b9b9f88d3ebc838a1379f54ff5", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -388,11 +388,24 @@ address_eliminator::~address_eliminator ()\n     *m_index_loc = m_index_reg;\n }\n \n-/* Return true if the eliminated form of AD is a legitimate target address.  */\n+/* Return true if the eliminated form of AD is a legitimate target address.\n+   If OP is a MEM, AD is the address within OP, otherwise OP should be\n+   ignored.  CONSTRAINT is one constraint that the operand may need\n+   to meet.  */\n static bool\n-valid_address_p (struct address_info *ad)\n+valid_address_p (rtx op, struct address_info *ad,\n+\t\t enum constraint_num constraint)\n {\n   address_eliminator eliminator (ad);\n+\n+  /* Allow a memory OP if it matches CONSTRAINT, even if CONSTRAINT is more\n+     forgiving than \"m\".  */\n+  if (MEM_P (op)\n+      && (insn_extra_memory_constraint (constraint)\n+\t  || insn_extra_special_memory_constraint (constraint))\n+      && constraint_satisfied_p (op, constraint))\n+    return true;\n+\n   return valid_address_p (ad->mode, *ad->outer, ad->as);\n }\n \n@@ -3397,7 +3410,7 @@ process_address_1 (int nop, bool check_only_p,\n \n      All these cases involve a non-autoinc address, so there is no\n      point revalidating other types.  */\n-  if (ad.autoinc_p || valid_address_p (&ad))\n+  if (ad.autoinc_p || valid_address_p (op, &ad, cn))\n     return change_p;\n \n   /* Any index existed before LRA started, so we can assume that the\n@@ -3426,7 +3439,7 @@ process_address_1 (int nop, bool check_only_p,\n \t      if (code >= 0)\n \t\t{\n \t\t  *ad.inner = gen_rtx_LO_SUM (Pmode, new_reg, addr);\n-\t\t  if (! valid_address_p (ad.mode, *ad.outer, ad.as))\n+\t\t  if (!valid_address_p (op, &ad, cn))\n \t\t    {\n \t\t      /* Try to put lo_sum into register.  */\n \t\t      insn = emit_insn (gen_rtx_SET\n@@ -3436,7 +3449,7 @@ process_address_1 (int nop, bool check_only_p,\n \t\t      if (code >= 0)\n \t\t\t{\n \t\t\t  *ad.inner = new_reg;\n-\t\t\t  if (! valid_address_p (ad.mode, *ad.outer, ad.as))\n+\t\t\t  if (!valid_address_p (op, &ad, cn))\n \t\t\t    {\n \t\t\t      *ad.inner = addr;\n \t\t\t      code = -1;\n@@ -3531,7 +3544,7 @@ process_address_1 (int nop, bool check_only_p,\n \t  && CONSTANT_P (XEXP (SET_SRC (set), 1)))\n \t{\n \t  *ad.inner = SET_SRC (set);\n-\t  if (valid_address_p (ad.mode, *ad.outer, ad.as))\n+\t  if (valid_address_p (op, &ad, cn))\n \t    {\n \t      *ad.base_term = XEXP (SET_SRC (set), 0);\n \t      *ad.disp_term = XEXP (SET_SRC (set), 1);"}, {"sha": "163ea21842f43173a73aaa0606a96c1afa633b4b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -1,3 +1,15 @@\n+2019-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_f16.c: Remove XFAIL.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_f32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_f64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_s16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_s32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_s64.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_u16.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_u32.c: Likewise.\n+\t* gcc.target/aarch64/sve/acle/asm/ld1rq_u64.c: Likewise.\n+\n 2019-11-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/92516"}, {"sha": "b98a381fd1b515298a71a7d31641bb1433669141", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_f16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f16.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_f16_base, svfloat16_t, float16_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_f16_index: { xfail *-*-* }\n+** ld1rq_f16_index:\n **\tld1rqh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n **\tret\n */"}, {"sha": "1845aa81d71782746eacfbb00058c3c96410f57b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_f32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f32.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_f32_base, svfloat32_t, float32_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_f32_index: { xfail *-*-* }\n+** ld1rq_f32_index:\n **\tld1rqw\tz0\\.s, p0/z, \\[x0, x1, lsl 2\\]\n **\tret\n */"}, {"sha": "c88f3bd23ae27b15cf9108e237036cfd39ba1bb0", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_f64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_f64.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_f64_base, svfloat64_t, float64_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_f64_index: { xfail *-*-* }\n+** ld1rq_f64_index:\n **\tld1rqd\tz0\\.d, p0/z, \\[x0, x1, lsl 3\\]\n **\tret\n */"}, {"sha": "bfbbff95fbd267eda8ba4e8f7d67a07919c10530", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s16.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_s16_base, svint16_t, int16_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_s16_index: { xfail *-*-* }\n+** ld1rq_s16_index:\n **\tld1rqh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n **\tret\n */"}, {"sha": "d31225c7e7dc1465b18ef6582372a40a9283dd31", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_s32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s32.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_s32_base, svint32_t, int32_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_s32_index: { xfail *-*-* }\n+** ld1rq_s32_index:\n **\tld1rqw\tz0\\.s, p0/z, \\[x0, x1, lsl 2\\]\n **\tret\n */"}, {"sha": "c87486dfd8070062d1c9905ab13ea756290d0c2b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_s64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_s64.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_s64_base, svint64_t, int64_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_s64_index: { xfail *-*-* }\n+** ld1rq_s64_index:\n **\tld1rqd\tz0\\.d, p0/z, \\[x0, x1, lsl 3\\]\n **\tret\n */"}, {"sha": "f7bd44802366cfcd9259419e8bba673fe2d1f138", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u16.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_u16_base, svuint16_t, uint16_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_u16_index: { xfail *-*-* }\n+** ld1rq_u16_index:\n **\tld1rqh\tz0\\.h, p0/z, \\[x0, x1, lsl 1\\]\n **\tret\n */"}, {"sha": "d815c483f94e5d69b2c302f50058d6e399fc2619", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_u32.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u32.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_u32_base, svuint32_t, uint32_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_u32_index: { xfail *-*-* }\n+** ld1rq_u32_index:\n **\tld1rqw\tz0\\.s, p0/z, \\[x0, x1, lsl 2\\]\n **\tret\n */"}, {"sha": "ef7b61aa54ec91128b49d86d8264cd601ff44172", "filename": "gcc/testsuite/gcc.target/aarch64/sve/acle/asm/ld1rq_u64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aeffdce2dfe718e1337d75eb4f22c3c300df9bb/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Facle%2Fasm%2Fld1rq_u64.c?ref=1aeffdce2dfe718e1337d75eb4f22c3c300df9bb", "patch": "@@ -12,7 +12,7 @@ TEST_LOAD (ld1rq_u64_base, svuint64_t, uint64_t,\n \t   z0 = svld1rq (p0, x0))\n \n /*\n-** ld1rq_u64_index: { xfail *-*-* }\n+** ld1rq_u64_index:\n **\tld1rqd\tz0\\.d, p0/z, \\[x0, x1, lsl 3\\]\n **\tret\n */"}]}