{"sha": "ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0YTUwNWZmNTRjODQ4ZmQ0ZDcxYzdkMTIxNDgyYzY1ZTdiNWNlNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-30T20:57:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-30T20:57:21Z"}, "message": "target-insns.def (jump): New targetm instruction pattern.\n\ngcc/\n\t* target-insns.def (jump): New targetm instruction pattern.\n\t* bb-reorder.c (get_uncond_jump_length): Use targetm.gen_jump\n\tinstead of gen_jump.\n\t(fix_up_crossing_landing_pad): Likewise.\n\t(add_labels_and_missing_jumps): Likewise.\n\t(fix_crossing_conditional_branches): Likewise.\n\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise.\n\t(force_nonfallthru_and_redirect): Likewise.\n\t* cse.c (cse_insn): Likewise.\n\t* expmed.c (expand_divmod): Likewise.\n\t* expr.c (store_expr_with_bounds, expand_expr_real_2): Likewise.\n\t* haifa-sched.c (init_before_recovery): Likewise.\n\t(sched_create_recovery_edges): Likewise.\n\t* ifcvt.c (find_cond_trap): Likewise.\n\t* optabs.c (expand_doubleword_shift, expand_doubleword_clz): Likewise.\n\t(expand_float, expand_fix): Likewise.\n\t* stmt.c (emit_jump): Likewise.\n\nFrom-SVN: r225211", "tree": {"sha": "94872a118d6391a231578638be484845e405fcb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94872a118d6391a231578638be484845e405fcb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20fceb31cd7e622b5a4d575249858da92d1fd79b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20fceb31cd7e622b5a4d575249858da92d1fd79b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20fceb31cd7e622b5a4d575249858da92d1fd79b"}], "stats": {"total": 77, "additions": 50, "deletions": 27}, "files": [{"sha": "91e7e4a51af47ecf769afa899e379b666ca1115f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -1,3 +1,23 @@\n+2015-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* target-insns.def (jump): New targetm instruction pattern.\n+\t* bb-reorder.c (get_uncond_jump_length): Use targetm.gen_jump\n+\tinstead of gen_jump.\n+\t(fix_up_crossing_landing_pad): Likewise.\n+\t(add_labels_and_missing_jumps): Likewise.\n+\t(fix_crossing_conditional_branches): Likewise.\n+\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise.\n+\t(force_nonfallthru_and_redirect): Likewise.\n+\t* cse.c (cse_insn): Likewise.\n+\t* expmed.c (expand_divmod): Likewise.\n+\t* expr.c (store_expr_with_bounds, expand_expr_real_2): Likewise.\n+\t* haifa-sched.c (init_before_recovery): Likewise.\n+\t(sched_create_recovery_edges): Likewise.\n+\t* ifcvt.c (find_cond_trap): Likewise.\n+\t* optabs.c (expand_doubleword_shift, expand_doubleword_clz): Likewise.\n+\t(expand_float, expand_fix): Likewise.\n+\t* stmt.c (emit_jump): Likewise.\n+\n 2015-06-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* defaults.h (HAVE_load_multiple, gen_load_multiple)"}, {"sha": "84c915247553c058c9ae19fdaa0a519aca24c3e9", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -1385,7 +1385,7 @@ get_uncond_jump_length (void)\n \n   start_sequence ();\n   rtx_code_label *label = emit_label (gen_label_rtx ());\n-  rtx_insn *jump = emit_jump_insn (gen_jump (label));\n+  rtx_insn *jump = emit_jump_insn (targetm.gen_jump (label));\n   length = get_attr_min_length (jump);\n   end_sequence ();\n \n@@ -1420,7 +1420,7 @@ fix_up_crossing_landing_pad (eh_landing_pad old_lp, basic_block old_bb)\n   post_bb = BLOCK_FOR_INSN (old_lp->landing_pad);\n   post_bb = single_succ (post_bb);\n   rtx_code_label *post_label = block_label (post_bb);\n-  jump = emit_jump_insn (gen_jump (post_label));\n+  jump = emit_jump_insn (targetm.gen_jump (post_label));\n   JUMP_LABEL (jump) = post_label;\n \n   /* Create new basic block to be dest for lp.  */\n@@ -1766,7 +1766,7 @@ add_labels_and_missing_jumps (vec<edge> crossing_edges)\n       /* Make sure there's only one successor.  */\n       gcc_assert (single_succ_p (src));\n \n-      new_jump = emit_jump_insn_after (gen_jump (label), BB_END (src));\n+      new_jump = emit_jump_insn_after (targetm.gen_jump (label), BB_END (src));\n       BB_END (src) = new_jump;\n       JUMP_LABEL (new_jump) = label;\n       LABEL_NUSES (label) += 1;\n@@ -2082,7 +2082,7 @@ fix_crossing_conditional_branches (void)\n \t\t  gcc_assert (GET_CODE (old_label) == LABEL_REF);\n \t\t  old_jump_target = old_jump_insn->jump_target ();\n \t\t  new_jump = as_a <rtx_jump_insn *>\n-\t\t\t\t(emit_jump_insn (gen_jump (old_jump_target)));\n+\t\t    (emit_jump_insn (targetm.gen_jump (old_jump_target)));\n \t\t  new_jump->set_jump_target (old_jump_target);\n \n \t\t  last_bb = EXIT_BLOCK_PTR_FOR_FN (cfun)->prev_bb;"}, {"sha": "4a711b3aa4f715a20356264aeef379c1cedeabe6", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -1117,7 +1117,7 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n       rtx label;\n       rtx_jump_table_data *table;\n \n-      emit_jump_insn_after_noloc (gen_jump (target_label), insn);\n+      emit_jump_insn_after_noloc (targetm.gen_jump (target_label), insn);\n       JUMP_LABEL (BB_END (src)) = target_label;\n       LABEL_NUSES (target_label)++;\n       if (dump_file)\n@@ -1708,7 +1708,8 @@ force_nonfallthru_and_redirect (edge e, basic_block target, rtx jump_label)\n   else\n     {\n       rtx_code_label *label = block_label (target);\n-      emit_jump_insn_after_setloc (gen_jump (label), BB_END (jump_block), loc);\n+      emit_jump_insn_after_setloc (targetm.gen_jump (label),\n+\t\t\t\t   BB_END (jump_block), loc);\n       JUMP_LABEL (BB_END (jump_block)) = label;\n       LABEL_NUSES (label)++;\n     }"}, {"sha": "e01240cd2e6b8ba3e2119195cfb838f4e8006585", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -5483,7 +5483,8 @@ cse_insn (rtx_insn *insn)\n \t      rtx_jump_insn *new_rtx;\n \t      rtx note;\n \n-\t      new_rtx = emit_jump_insn_before (gen_jump (XEXP (src, 0)), insn);\n+\t      rtx_insn *seq = targetm.gen_jump (XEXP (src, 0));\n+\t      new_rtx = emit_jump_insn_before (seq, insn);\n \t      JUMP_LABEL (new_rtx) = XEXP (src, 0);\n \t      LABEL_NUSES (XEXP (src, 0))++;\n "}, {"sha": "69c48a6b8b4a4a8b499594452aca81a0c12b130a", "filename": "gcc/expmed.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -4539,19 +4539,19 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t      quotient, 0, OPTAB_LIB_WIDEN);\n \t  if (tem != quotient)\n \t    emit_move_insn (quotient, tem);\n-\t  emit_jump_insn (gen_jump (label5));\n+\t  emit_jump_insn (targetm.gen_jump (label5));\n \t  emit_barrier ();\n \t  emit_label (label1);\n \t  expand_inc (adjusted_op0, const1_rtx);\n-\t  emit_jump_insn (gen_jump (label4));\n+\t  emit_jump_insn (targetm.gen_jump (label4));\n \t  emit_barrier ();\n \t  emit_label (label2);\n \t  do_cmp_and_jump (adjusted_op0, const0_rtx, GT, compute_mode, label3);\n \t  tem = expand_binop (compute_mode, sdiv_optab, adjusted_op0, op1,\n \t\t\t      quotient, 0, OPTAB_LIB_WIDEN);\n \t  if (tem != quotient)\n \t    emit_move_insn (quotient, tem);\n-\t  emit_jump_insn (gen_jump (label5));\n+\t  emit_jump_insn (targetm.gen_jump (label5));\n \t  emit_barrier ();\n \t  emit_label (label3);\n \t  expand_dec (adjusted_op0, const1_rtx);\n@@ -4645,7 +4645,7 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t      do_cmp_and_jump (adjusted_op0, const0_rtx, NE,\n \t\t\t       compute_mode, label1);\n \t      emit_move_insn  (quotient, const0_rtx);\n-\t      emit_jump_insn (gen_jump (label2));\n+\t      emit_jump_insn (targetm.gen_jump (label2));\n \t      emit_barrier ();\n \t      emit_label (label1);\n \t      expand_dec (adjusted_op0, const1_rtx);\n@@ -4753,11 +4753,11 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t\t  quotient, 0, OPTAB_LIB_WIDEN);\n \t      if (tem != quotient)\n \t\temit_move_insn (quotient, tem);\n-\t      emit_jump_insn (gen_jump (label5));\n+\t      emit_jump_insn (targetm.gen_jump (label5));\n \t      emit_barrier ();\n \t      emit_label (label1);\n \t      expand_dec (adjusted_op0, const1_rtx);\n-\t      emit_jump_insn (gen_jump (label4));\n+\t      emit_jump_insn (targetm.gen_jump (label4));\n \t      emit_barrier ();\n \t      emit_label (label2);\n \t      do_cmp_and_jump (adjusted_op0, const0_rtx, LT,\n@@ -4766,7 +4766,7 @@ expand_divmod (int rem_flag, enum tree_code code, machine_mode mode,\n \t\t\t\t  quotient, 0, OPTAB_LIB_WIDEN);\n \t      if (tem != quotient)\n \t\temit_move_insn (quotient, tem);\n-\t      emit_jump_insn (gen_jump (label5));\n+\t      emit_jump_insn (targetm.gen_jump (label5));\n \t      emit_barrier ();\n \t      emit_label (label3);\n \t      expand_inc (adjusted_op0, const1_rtx);"}, {"sha": "5c0df44248db9032d7371a5e7750b657c60bc89c", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -5268,7 +5268,7 @@ store_expr_with_bounds (tree exp, rtx target, int call_param_p,\n       jumpifnot (TREE_OPERAND (exp, 0), lab1, -1);\n       store_expr_with_bounds (TREE_OPERAND (exp, 1), target, call_param_p,\n \t\t\t      nontemporal, btarget);\n-      emit_jump_insn (gen_jump (lab2));\n+      emit_jump_insn (targetm.gen_jump (lab2));\n       emit_barrier ();\n       emit_label (lab1);\n       store_expr_with_bounds (TREE_OPERAND (exp, 2), target, call_param_p,\n@@ -9200,7 +9200,7 @@ expand_expr_real_2 (sepops ops, rtx target, machine_mode tmode,\n \t\t    modifier == EXPAND_STACK_PARM,\n \t\t    false);\n \n-\temit_jump_insn (gen_jump (lab1));\n+\temit_jump_insn (targetm.gen_jump (lab1));\n \temit_barrier ();\n \temit_label (lab0);\n \tstore_expr (treeop2, temp,"}, {"sha": "e685cc8a1af86fba5f81ed523ca7dd928fb89bfb", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -8120,7 +8120,7 @@ init_before_recovery (basic_block *before_recovery_ptr)\n \t\t\t     EDGE_FALLTHRU);\n \n       rtx_code_label *label = block_label (empty);\n-      rtx_jump_insn *x = emit_jump_insn_after (gen_jump (label),\n+      rtx_jump_insn *x = emit_jump_insn_after (targetm.gen_jump (label),\n \t\t\t\t\t       BB_END (single));\n       JUMP_LABEL (x) = label;\n       LABEL_NUSES (label)++;\n@@ -8198,7 +8198,8 @@ sched_create_recovery_edges (basic_block first_bb, basic_block rec,\n \n   make_edge (first_bb, rec, edge_flags);\n   rtx_code_label *label = block_label (second_bb);\n-  rtx_jump_insn *jump = emit_jump_insn_after (gen_jump (label), BB_END (rec));\n+  rtx_jump_insn *jump = emit_jump_insn_after (targetm.gen_jump (label),\n+\t\t\t\t\t      BB_END (rec));\n   JUMP_LABEL (jump) = label;\n   LABEL_NUSES (label)++;\n "}, {"sha": "6e20557d52b5821317d25a3fdaa933af2e961925", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -3824,10 +3824,9 @@ find_cond_trap (basic_block test_bb, edge then_edge, edge else_edge)\n     single_succ_edge (test_bb)->flags |= EDGE_FALLTHRU;\n   else if (trap_bb == then_bb)\n     {\n-      rtx lab;\n-\n-      lab = JUMP_LABEL (jump);\n-      rtx_jump_insn *newjump = emit_jump_insn_after (gen_jump (lab), jump);\n+      rtx lab = JUMP_LABEL (jump);\n+      rtx_insn *seq = targetm.gen_jump (lab);\n+      rtx_jump_insn *newjump = emit_jump_insn_after (seq, jump);\n       LABEL_NUSES (lab) += 1;\n       JUMP_LABEL (newjump) = lab;\n       emit_barrier_after (newjump);"}, {"sha": "5c761457fe934dcd31a76b6f873ffa39338377b5", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -1110,7 +1110,7 @@ expand_doubleword_shift (machine_mode op1_mode, optab binoptab,\n \t\t\t       unsignedp, methods))\n     return false;\n \n-  emit_jump_insn (gen_jump (done_label));\n+  emit_jump_insn (targetm.gen_jump (done_label));\n   emit_barrier ();\n   emit_label (subword_label);\n \n@@ -2589,7 +2589,7 @@ expand_doubleword_clz (machine_mode mode, rtx op0, rtx target)\n   if (temp != result)\n     convert_move (result, temp, true);\n \n-  emit_jump_insn (gen_jump (after_label));\n+  emit_jump_insn (targetm.gen_jump (after_label));\n   emit_barrier ();\n \n   /* Else clz of the full value is clz of the low word plus the number\n@@ -5088,7 +5088,7 @@ expand_float (rtx to, rtx from, int unsignedp)\n \n \t      /* The sign bit is not set.  Convert as signed.  */\n \t      expand_float (target, from, 0);\n-\t      emit_jump_insn (gen_jump (label));\n+\t      emit_jump_insn (targetm.gen_jump (label));\n \t      emit_barrier ();\n \n \t      /* The sign bit is set.\n@@ -5293,7 +5293,7 @@ expand_fix (rtx to, rtx from, int unsignedp)\n \n \t  /* If not, do the signed \"fix\" and branch around fixup code.  */\n \t  expand_fix (to, from, 0);\n-\t  emit_jump_insn (gen_jump (lab2));\n+\t  emit_jump_insn (targetm.gen_jump (lab2));\n \t  emit_barrier ();\n \n \t  /* Otherwise, subtract 2**(N-1), convert to signed number,"}, {"sha": "426e3056d083f44b1284b8671251819e02b9105d", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -172,7 +172,7 @@ void\n emit_jump (rtx label)\n {\n   do_pending_stack_adjust ();\n-  emit_jump_insn (gen_jump (label));\n+  emit_jump_insn (targetm.gen_jump (label));\n   emit_barrier ();\n }\n \f"}, {"sha": "0d8f5014928e3ddbfdff126fe27c2c71e30a61e1", "filename": "gcc/target-insns.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Ftarget-insns.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4a505ff54c848fd4d71c7d121482c65e7b5ce7/gcc%2Ftarget-insns.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-insns.def?ref=ec4a505ff54c848fd4d71c7d121482c65e7b5ce7", "patch": "@@ -32,6 +32,7 @@\n    Instructions should be documented in md.texi rather than here.  */\n DEF_TARGET_INSN (canonicalize_funcptr_for_compare, (rtx x0, rtx x1))\n DEF_TARGET_INSN (epilogue, (void))\n+DEF_TARGET_INSN (jump, (rtx x0))\n DEF_TARGET_INSN (load_multiple, (rtx x0, rtx x1, rtx x2))\n DEF_TARGET_INSN (mem_signal_fence, (rtx x0))\n DEF_TARGET_INSN (mem_thread_fence, (rtx x0))"}]}