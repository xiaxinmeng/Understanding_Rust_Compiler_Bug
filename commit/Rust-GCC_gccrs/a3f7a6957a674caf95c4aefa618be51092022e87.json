{"sha": "a3f7a6957a674caf95c4aefa618be51092022e87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmN2E2OTU3YTY3NGNhZjk1YzRhZWZhNjE4YmU1MTA5MjAyMmU4Nw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-03T20:38:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-03T20:40:09Z"}, "message": "c++: Exported using decls\n\nWith modules we need to record whethe a (namespace-scope) using decl\nis exporting the named entities.  Record this on the OVERLOAD marking\nthe used decl.\n\n\tgcc/cp/\n\t* cp-tree.h (OVL_EXPORT): New.\n\t(class ovl_iterator): Add get_using, exporting_p.\n\t* tree.c (ovl_insert): Extend using_or_hidden meaning to include\n\tan exported using.", "tree": {"sha": "4c8ad0df074550f848498398af5dccf26d555033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c8ad0df074550f848498398af5dccf26d555033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f7a6957a674caf95c4aefa618be51092022e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f7a6957a674caf95c4aefa618be51092022e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f7a6957a674caf95c4aefa618be51092022e87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f7a6957a674caf95c4aefa618be51092022e87/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7aeb823d9b0dee572015810cdb58103e91758f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7aeb823d9b0dee572015810cdb58103e91758f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7aeb823d9b0dee572015810cdb58103e91758f3"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "081ede24e969c6e4ef4328e3188d3e04533b6118", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f7a6957a674caf95c4aefa618be51092022e87/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f7a6957a674caf95c4aefa618be51092022e87/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a3f7a6957a674caf95c4aefa618be51092022e87", "patch": "@@ -488,10 +488,9 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       CALL_EXPR_ORDERED_ARGS (in CALL_EXPR, AGGR_INIT_EXPR)\n       DECLTYPE_FOR_REF_CAPTURE (in DECLTYPE_TYPE)\n       CONSTRUCTOR_C99_COMPOUND_LITERAL (in CONSTRUCTOR)\n-      DECL_MODULE_EXPORT_P (in _DECL)\n       OVL_NESTED_P (in OVERLOAD)\n       LAMBDA_EXPR_INSTANTIATED (in LAMBDA_EXPR)\n-      Reserved for DECL_MODULE_EXPORT (in DECL_)\n+      DECL_MODULE_EXPORT_P (in _DECL)\n    4: IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n       TREE_HAS_CONSTRUCTOR (in INDIRECT_REF, SAVE_EXPR, CONSTRUCTOR,\n \t  CALL_EXPR, or FIELD_DECL).\n@@ -503,6 +502,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n       FUNCTION_RVALUE_QUALIFIED (in FUNCTION_TYPE, METHOD_TYPE)\n       CALL_EXPR_REVERSE_ARGS (in CALL_EXPR, AGGR_INIT_EXPR)\n       CONSTRUCTOR_PLACEHOLDER_BOUNDARY (in CONSTRUCTOR)\n+      OVL_EXPORT_P (in OVERLOAD)\n    6: TYPE_MARKED_P (in _TYPE)\n       DECL_NONTRIVIALLY_INITIALIZED_P (in VAR_DECL)\n       RANGE_FOR_IVDEP (in RANGE_FOR_STMT)\n@@ -780,6 +780,8 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n #define OVL_NESTED_P(NODE)\tTREE_LANG_FLAG_3 (OVERLOAD_CHECK (NODE))\n /* If set, this overload was constructed during lookup.  */\n #define OVL_LOOKUP_P(NODE)\tTREE_LANG_FLAG_4 (OVERLOAD_CHECK (NODE))\n+/* If set, this OVL_USING_P overload is exported.  */\n+#define OVL_EXPORT_P(NODE)\tTREE_LANG_FLAG_5 (OVERLOAD_CHECK (NODE))\n \n /* The first decl of an overload.  */\n #define OVL_FIRST(NODE)\tovl_first (NODE)\n@@ -839,6 +841,11 @@ class ovl_iterator {\n \n     return fn;\n   }\n+  tree get_using () const\n+  {\n+    gcc_checking_assert (using_p ());\n+    return ovl;\n+  }\n \n  public:\n   /* Whether this overload was introduced by a using decl.  */\n@@ -847,6 +854,12 @@ class ovl_iterator {\n     return (TREE_CODE (ovl) == USING_DECL\n \t    || (TREE_CODE (ovl) == OVERLOAD && OVL_USING_P (ovl)));\n   }\n+  /* Whether this using is being exported.  */\n+  bool exporting_p () const\n+  {\n+    return OVL_EXPORT_P (get_using ());\n+  }\n+  \n   bool hidden_p () const\n   {\n     return TREE_CODE (ovl) == OVERLOAD && OVL_HIDDEN_P (ovl);"}, {"sha": "d9fa505041f5495cd59e28458bb64b16b17bc16c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f7a6957a674caf95c4aefa618be51092022e87/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f7a6957a674caf95c4aefa618be51092022e87/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=a3f7a6957a674caf95c4aefa618be51092022e87", "patch": "@@ -2272,10 +2272,11 @@ ovl_make (tree fn, tree next)\n   return result;\n }\n \n-/* Add FN to the (potentially NULL) overload set OVL.  USING_OR_HIDDEN\n-   is > 0, if FN is via a using declaration.  USING_OR_HIDDEN is < 0,\n-   if FN is hidden.  (A decl cannot be both using and hidden.)  We\n-   keep the hidden decls first, but remaining ones are unordered.  */\n+/* Add FN to the (potentially NULL) overload set OVL.  USING_OR_HIDDEN is >\n+   zero if this is a using-decl.  It is > 1 if we're exporting the\n+   using decl.  USING_OR_HIDDEN is < 0, if FN is hidden.  (A decl\n+   cannot be both using and hidden.)  We keep the hidden decls first,\n+   but remaining ones are unordered.  */\n \n tree\n ovl_insert (tree fn, tree maybe_ovl, int using_or_hidden)\n@@ -2299,7 +2300,11 @@ ovl_insert (tree fn, tree maybe_ovl, int using_or_hidden)\n       if (using_or_hidden < 0)\n \tOVL_HIDDEN_P (maybe_ovl) = true;\n       if (using_or_hidden > 0)\n-\tOVL_DEDUP_P (maybe_ovl) = OVL_USING_P (maybe_ovl) = true;\n+\t{\n+\t  OVL_DEDUP_P (maybe_ovl) = OVL_USING_P (maybe_ovl) = true;\n+\t  if (using_or_hidden > 1)\n+\t    OVL_EXPORT_P (maybe_ovl) = true;\n+\t}\n     }\n   else\n     maybe_ovl = fn;"}]}