{"sha": "72ea2555d7e28eacb2248e803d6a5bd96b523215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJlYTI1NTVkN2UyOGVhY2IyMjQ4ZTgwM2Q2YTViZDk2YjUyMzIxNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-07-18T21:01:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-07-18T21:01:59Z"}, "message": "re PR target/36786 (ICE in extract_insn, at recog.c:1990)\n\n\tPR target/36786\n\t* config/i386/i386.md (x86_64_shift_adj_1): Rename from\n\tx86_64_shift_adj.\n\t(x86_64_shift_adj_2): New expander.\n\t(x86_64_shift_adj_3): Ditto.\n\t* config/i386/i386.c (ix86_split_ashr): Use gen_x86_64_shift_adj_3\n\tto split TImode operands.\n\t(ix86_split_ashl): Use gen_x86_64_shift_adj_2 to split TImode operands.\n\t(ix86_split_lshr): Ditto.\n\t\ntestsuite/ChangeLog:\n\n\tPR target/36786\n\t* gcc.target/i386/pr36786.c: New test.\n\nFrom-SVN: r137967", "tree": {"sha": "a8a0c2387eb83cb793323e9deb36bf624b5da376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8a0c2387eb83cb793323e9deb36bf624b5da376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72ea2555d7e28eacb2248e803d6a5bd96b523215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ea2555d7e28eacb2248e803d6a5bd96b523215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ea2555d7e28eacb2248e803d6a5bd96b523215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ea2555d7e28eacb2248e803d6a5bd96b523215/comments", "author": null, "committer": null, "parents": [{"sha": "6b3a665caf8ddc83110639630d7feb021d58ed63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3a665caf8ddc83110639630d7feb021d58ed63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3a665caf8ddc83110639630d7feb021d58ed63"}], "stats": {"total": 183, "additions": 130, "deletions": 53}, "files": [{"sha": "6c719b0b1bd6b81f15e97dd5593d5a1a458be683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72ea2555d7e28eacb2248e803d6a5bd96b523215", "patch": "@@ -1,3 +1,15 @@\n+2008-07-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36786\n+\t* config/i386/i386.md (x86_64_shift_adj_1): Rename from\n+\tx86_64_shift_adj.\n+\t(x86_64_shift_adj_2): New expander.\n+\t(x86_64_shift_adj_3): Ditto.\n+\t* config/i386/i386.c (ix86_split_ashr): Use gen_x86_64_shift_adj_3\n+\tto split TImode operands.\n+\t(ix86_split_ashl): Use gen_x86_64_shift_adj_2 to split TImode operands.\n+\t(ix86_split_lshr): Ditto.\n+\n 2008-07-18  Kris Van Hees  <kris.van.hees@oracle.com>\n \n \t* c-common.c (c_stddef_cpp_builtins): Define __CHAR16_TYPE__\n@@ -107,8 +119,7 @@\n \t* cfg.c (dump_reg_info): Avoid C++ keywords.\n \t* dwarf2asm.c (dw2_force_const_mem,\n \tdw2_asm_output_encoded_addr_rtx): Likewise.\n-\t* except.c (gen_eh_region, add_action_record, output_ttype):\n-\tLikewise.\n+\t* except.c (gen_eh_region, add_action_record, output_ttype): Likewise.\n \t* expmed.c (expand_shift): Likewise.\n \t* global.c (find_reg): Likewise.\n \t* graph.c (draw_edge): Likewise.\n@@ -209,11 +220,9 @@\n \t* caller-save.c (insert_restore, insert_save, insert_one_insn):\n \tLikewise.\n \t* combine.c (subst, simplify_set, make_extraction,\n-\tmake_compound_operation, known_cond, simplify_shift_const_1):\n-\tLikewise.\n+\tmake_compound_operation, known_cond, simplify_shift_const_1): Likewise.\n \t* cse.c (make_regs_eqv, merge_equiv_classes, validate_canon_reg,\n-\tfold_rtx, equiv_constant, cse_insn, cse_process_notes_1):\n-\tLikewise.\n+\tfold_rtx, equiv_constant, cse_insn, cse_process_notes_1): Likewise.\n \n 2008-07-15  Richard Guenther  <rguenther@suse.de>\n \n@@ -317,8 +326,7 @@\n \n \t* tree-ssa-sccvn.c (pre_info): Remove.\n \t(switch_to_PRE_table): Likewise.\n-\t(free_scc_vn): Do not clear SSA_NAME_VALUE.\n-\tDo not free pre_info.\n+\t(free_scc_vn): Do not clear SSA_NAME_VALUE.  Do not free pre_info.\n \t(set_hashtable_value_ids): Do not create value-ids for the\n \toptimistic tables.\n \t(run_scc_vn): Remove double test.  Remove bogus special-case\n@@ -340,8 +348,7 @@\n \n 2008-07-14  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-pre.c (insert_into_preds_of_block): Do not call\n-\tconvert.\n+\t* tree-ssa-pre.c (insert_into_preds_of_block): Do not call convert.\n \n 2008-07-14  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n@@ -371,8 +378,7 @@\n \n 2008-07-13  Daniel Berlin  <dberlin@dberlin.org>\n \n-\t* tree-ssa-pre.c (fully_constant_expression): Add fold_convert\n-\tcalls.\n+\t* tree-ssa-pre.c (fully_constant_expression): Add fold_convert calls.\n \t(create_expression_by_pieces): Fix typo.\n \t(do_regular_insertion): Use debug counter here too.\n \n@@ -503,8 +509,7 @@\n \n 2008-07-10  Daniel Berlin  <dberlin@dberlin.org>\n \n-\t* tree-ssa-pre.c (create_expression_by_pieces): Add fold_convert\n-\tcalls.\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Add fold_convert calls.\n \t(eliminate): Ditto.\n \t(execute_pre): Call loop_optimizer_finalize in early exit.\n \n@@ -684,16 +689,15 @@\n \n 2008-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n-\t* tree-sra.c (sra_build_assignment): Handle CONVERT_EXPR_P\n-\tdst.\n+\t* tree-sra.c (sra_build_assignment): Handle CONVERT_EXPR_P dst.\n \n 2008-07-05  Daniel Berlin  <dberlin@dberlin.org>\n \t\n \tFix PR tree-optimization/23455\n \tFix PR tree-optimization/35286\n \tFix PR tree-optimization/35287\n \t* Makefile.in (OBJS-common): Remove tree-vn.o.\n-\ttree-vn.o: Remove.\n+\t(tree-vn.o): Remove.\n \t* dbgcnt.def: Add treepre_insert debug counter.\n \t* gcc/tree-flow.h (add_to_value): Updated for other changes.\n \t(debug_value_expressions): Ditto.\n@@ -731,23 +735,19 @@\n \t(value_id_constant_p): Ditto.\n \t(vn_reference_compute_hash): De-staticify.\n \t(copy_reference_ops_from_ref): Don't use get_callee_fndecl.\n-\tDisable some code with a FIXME.\n-\tRemove VALUE_HANDLE use.\n-\t(valueize_refs): Update opcode if it changes from ssa name to\n-\tconstant.\n+\tDisable some code with a FIXME.  Remove VALUE_HANDLE use.\n+\t(valueize_refs): Update opcode if it changes from ssa name to constant.\n \t(vn_reference_lookup_1): Add new argument.\n \t(vn_reference_lookup):  Ditto.\n \t(vn_reference_lookup_pieces): New function.\n-\t(vn_reference_insert): Add return type. Modify to deal with value\n-\tids.\n+\t(vn_reference_insert): Add return type. Modify to deal with value ids.\n \t(vn_reference_insert_pieces):  New function.\n \t(vn_nary_op_compute_hash): De-staticify.\n \t(vn_nary_op_eq): Ditto.\n \t(vn_nary_op_lookup_pieces): New function.\n \t(vn_nary_op_lookup): Add new argument.  \n \t(vn_nary_op_insert_pieces): New function.\n-\t(vn_nary_op_insert): Add return type. Modify to deal with value\n-\tids.\n+\t(vn_nary_op_insert): Add return type. Modify to deal with value ids.\n \t(vn_phi_insert): Ditto.\n \t(visit_unary_op): Update for callee changes.\n \t(visit_binary_op): Ditto.\n@@ -827,17 +827,16 @@\n \n 2008-07-07  Fernando Pereira <fernando@cs.ucla.edu>\n \n-        * tree-ssa-structalias.c (compute_points_to_sets): Add call to\n-        dump_constraint_graph.\n-        (dump_constraint_edge): New function.\n-        (dump_constraint_graph): New function.\n-        (debug_constraint_graph): New function.\n-        (dump_constraint): Removed useless comparison.\n-        * tree-ssa-structalias.h (dump_constraint_edge): Declare.\n-        (dump_constraint_graph): Declare.\n-        (debug_constraint_graph): Declare.\n-        * tree-dump.c (struct dump_option_value_info): Declare\n-        TDF_GRAPH.\n+\t* tree-ssa-structalias.c (compute_points_to_sets): Add call to\n+\tdump_constraint_graph.\n+\t(dump_constraint_edge): New function.\n+\t(dump_constraint_graph): New function.\n+\t(debug_constraint_graph): New function.\n+\t(dump_constraint): Removed useless comparison.\n+\t* tree-ssa-structalias.h (dump_constraint_edge): Declare.\n+\t(dump_constraint_graph): Declare.\n+\t(debug_constraint_graph): Declare.\n+\t* tree-dump.c (struct dump_option_value_info): Declare TDF_GRAPH.\n \n 2008-07-07  Kai Tietz  <kai.tietz@onevision.com>\n \n@@ -902,8 +901,7 @@\n \n 2008-07-07  Daniel Jacobowitz  <dan@codesourcery.com>\n \n-\t* function.c (assign_parm_remove_parallels): Check mode of\n-\tentry_parm.\n+\t* function.c (assign_parm_remove_parallels): Check mode of entry_parm.\n \t(assign_parm_setup_block_p): Also check mode of entry_parm.\n \n 2008-07-07  Richard Guenther  <rguenther@suse.de>\n@@ -1073,14 +1071,13 @@\n \n 2008-07-04  Roger Sayle  <roger@eyesopen.com>\n \n-\t* config/rs6000/host-darwin.c (darwin_rs6000_extra_siganls): Cast\n+\t* config/rs6000/host-darwin.c (darwin_rs6000_extra_signals): Cast\n \tthe \"void*\" result of xmalloc to \"char*\" to fix bootstrap breakage.\n \n 2008-07-04  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/36684\n-\t* config/sh/sh.h (OVERRIDE_OPTIONS): Disable -fschedule-insns\n-\tfor PIC.\n+\t* config/sh/sh.h (OVERRIDE_OPTIONS): Disable -fschedule-insns for PIC.\n \n 2008-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -1125,8 +1122,7 @@\n \tLikewise.\n \t* ggc-common.c (hash_descriptor, eq_descriptor, hash_ptr, eq_ptr,\n \tloc_descriptor, ggc_prune_ptr, ggc_free_overhead,\n-\tfinal_cmp_statistic, cmp_statistic, dump_ggc_loc_statistics):\n-\tLikewise.\n+\tfinal_cmp_statistic, cmp_statistic, dump_ggc_loc_statistics): Likewise.\n \t* varray.c (hash_descriptor, eq_descriptor, varray_descriptor):\n \tLikewise.\n "}, {"sha": "e68f35a24c6231a4cdc9d8fa0790c792f72c4451", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72ea2555d7e28eacb2248e803d6a5bd96b523215", "patch": "@@ -14723,10 +14723,13 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n       ix86_expand_clear (scratch);\n       emit_insn ((mode == DImode\n \t\t  ? gen_x86_shift_adj_1\n-\t\t  : gen_x86_64_shift_adj) (high[0], low[0], operands[2], scratch));\n+\t\t  : gen_x86_64_shift_adj_1) (high[0], low[0], operands[2],\n+\t\t\t\t\t     scratch));\n     }\n   else\n-    emit_insn (gen_x86_shift_adj_2 (high[0], low[0], operands[2]));\n+    emit_insn ((mode == DImode\n+\t\t? gen_x86_shift_adj_2\n+\t\t: gen_x86_64_shift_adj_2) (high[0], low[0], operands[2]));\n }\n \n void\n@@ -14800,11 +14803,13 @@ ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n \t\t\t\t      GEN_INT (single_width - 1)));\n \t  emit_insn ((mode == DImode\n \t\t      ? gen_x86_shift_adj_1\n-\t\t      : gen_x86_64_shift_adj) (low[0], high[0], operands[2],\n-\t\t\t\t\t scratch));\n+\t\t      : gen_x86_64_shift_adj_1) (low[0], high[0], operands[2],\n+\t\t\t\t\t\t scratch));\n \t}\n       else\n-\temit_insn (gen_x86_shift_adj_3 (low[0], high[0], operands[2]));\n+\temit_insn ((mode == DImode\n+\t\t    ? gen_x86_shift_adj_3\n+\t\t    : gen_x86_64_shift_adj_3) (low[0], high[0], operands[2]));\n     }\n }\n \n@@ -14863,11 +14868,13 @@ ix86_split_lshr (rtx *operands, rtx scratch, enum machine_mode mode)\n \t  ix86_expand_clear (scratch);\n \t  emit_insn ((mode == DImode\n \t\t      ? gen_x86_shift_adj_1\n-\t\t      : gen_x86_64_shift_adj) (low[0], high[0], operands[2],\n-\t\t\t\t\t       scratch));\n+\t\t      : gen_x86_64_shift_adj_1) (low[0], high[0], operands[2],\n+\t\t\t\t\t\t scratch));\n \t}\n       else\n-\temit_insn (gen_x86_shift_adj_2 (low[0], high[0], operands[2]));\n+\temit_insn ((mode == DImode\n+\t\t    ? gen_x86_shift_adj_2\n+\t\t    : gen_x86_64_shift_adj_2) (low[0], high[0], operands[2]));\n     }\n }\n "}, {"sha": "e7a9827c5b9723c7c279aa99a7fe0b0d9b8a82d5", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=72ea2555d7e28eacb2248e803d6a5bd96b523215", "patch": "@@ -10917,7 +10917,7 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"vector\")])\n \n-(define_expand \"x86_64_shift_adj\"\n+(define_expand \"x86_64_shift_adj_1\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (and:QI (match_operand:QI 2 \"register_operand\" \"\")\n \t\t\t     (const_int 64))\n@@ -10933,6 +10933,34 @@\n   \"TARGET_64BIT\"\n   \"\")\n \n+(define_expand \"x86_64_shift_adj_2\"\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))\n+   (use (match_operand:QI 2 \"register_operand\" \"\"))]\n+  \"TARGET_64BIT\"\n+{\n+  rtx label = gen_label_rtx ();\n+  rtx tmp;\n+\n+  emit_insn (gen_testqi_ccz_1 (operands[2], GEN_INT (64)));\n+\n+  tmp = gen_rtx_REG (CCZmode, FLAGS_REG);\n+  tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n+\t\t\t      pc_rtx);\n+  tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  JUMP_LABEL (tmp) = label;\n+\n+  emit_move_insn (operands[0], operands[1]);\n+  ix86_expand_clear (operands[1]);\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  DONE;\n+})\n+\n (define_expand \"ashldi3\"\n   [(set (match_operand:DI 0 \"shiftdi_operand\" \"\")\n \t(ashift:DI (match_operand:DI 1 \"ashldi_input_operand\" \"\")\n@@ -11880,7 +11908,35 @@\n   \"\"\n   \"ix86_expand_binary_operator (ASHIFTRT, DImode, operands); DONE;\")\n \n-(define_insn \"*ashrdi3_63_rex64\"\n+(define_expand \"x86_64_shift_adj_3\"\n+  [(use (match_operand:DI 0 \"register_operand\" \"\"))\n+   (use (match_operand:DI 1 \"register_operand\" \"\"))\n+   (use (match_operand:QI 2 \"register_operand\" \"\"))]\n+  \"\"\n+{\n+  rtx label = gen_label_rtx ();\n+  rtx tmp;\n+\n+  emit_insn (gen_testqi_ccz_1 (operands[2], GEN_INT (64)));\n+\n+  tmp = gen_rtx_REG (CCZmode, FLAGS_REG);\n+  tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n+  tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n+\t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n+\t\t\t      pc_rtx);\n+  tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  JUMP_LABEL (tmp) = label;\n+\n+  emit_move_insn (operands[0], operands[1]);\n+  emit_insn (gen_ashrdi3_63_rex64 (operands[1], operands[1], GEN_INT (63)));\n+\n+  emit_label (label);\n+  LABEL_NUSES (label) = 1;\n+\n+  DONE;\n+})\n+\n+(define_insn \"ashrdi3_63_rex64\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=*d,rm\")\n \t(ashiftrt:DI (match_operand:DI 1 \"nonimmediate_operand\" \"*a,0\")\n \t\t     (match_operand:DI 2 \"const_int_operand\" \"i,i\")))"}, {"sha": "464e05743392803ccbd7fdcdc29ada077c5e8274", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72ea2555d7e28eacb2248e803d6a5bd96b523215", "patch": "@@ -1,3 +1,8 @@\n+2008-07-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/36786\n+\t* gcc.target/i386/pr36786.c: New test.\n+\n 2008-07-18  Dodji Seketeli  <dseketel@redhat.com>\n \n \tPR c++/36407"}, {"sha": "692518e1bd1598b77113ae18c5be83e0f6935819", "filename": "gcc/testsuite/gcc.target/i386/pr36786.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36786.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72ea2555d7e28eacb2248e803d6a5bd96b523215/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36786.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr36786.c?ref=72ea2555d7e28eacb2248e803d6a5bd96b523215", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+\n+typedef int DItype __attribute__ ((mode (DI)));\n+typedef unsigned int UDItype __attribute__ ((mode (DI)));\n+typedef int TItype __attribute__ ((mode (TI)));\n+\n+__floattisf (TItype u)\n+{\n+  DItype hi = u >> (8 * 8);\n+  UDItype count, shift;\n+  hi = u >> shift;\n+}"}]}