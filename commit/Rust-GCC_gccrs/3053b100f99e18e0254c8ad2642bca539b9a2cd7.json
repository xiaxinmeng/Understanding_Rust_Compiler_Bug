{"sha": "3053b100f99e18e0254c8ad2642bca539b9a2cd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1M2IxMDBmOTllMThlMDI1NGM4YWQyNjQyYmNhNTM5YjlhMmNkNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-05-14T21:45:59Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-05-14T21:45:59Z"}, "message": "arm.md (all peephole2 patterns): Use predicates that validate register classes as appropriate.\n\n* arm.md (all peephole2 patterns): Use predicates that validate\nregister classes as appropriate.\n\nFrom-SVN: r81860", "tree": {"sha": "37ae522d8ccd42905cf4d85c160502c9ac5d51e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37ae522d8ccd42905cf4d85c160502c9ac5d51e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3053b100f99e18e0254c8ad2642bca539b9a2cd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3053b100f99e18e0254c8ad2642bca539b9a2cd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3053b100f99e18e0254c8ad2642bca539b9a2cd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3053b100f99e18e0254c8ad2642bca539b9a2cd7/comments", "author": null, "committer": null, "parents": [{"sha": "1cd29ad23586b888af0c47d11c33b6f6b50481c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cd29ad23586b888af0c47d11c33b6f6b50481c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cd29ad23586b888af0c47d11c33b6f6b50481c6"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "01e0c660c1539a0209270cc91e278c200976e000", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3053b100f99e18e0254c8ad2642bca539b9a2cd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3053b100f99e18e0254c8ad2642bca539b9a2cd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3053b100f99e18e0254c8ad2642bca539b9a2cd7", "patch": "@@ -1,3 +1,8 @@\n+2004-05-14  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.md (all peephole2 patterns): Use predicates that validate\n+\tregister classes as appropriate.\n+\n 2004-05-14  Steven Bosscher  <stevenb@suse.de>\n \n \tPR opt/14472"}, {"sha": "dadc228b8eceb63dcdf3f274ba2a18010eb47aa1", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3053b100f99e18e0254c8ad2642bca539b9a2cd7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3053b100f99e18e0254c8ad2642bca539b9a2cd7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=3053b100f99e18e0254c8ad2642bca539b9a2cd7", "patch": "@@ -466,8 +466,8 @@\n ; addition.\n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n-   (set (match_operand:SI          0 \"s_register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+   (set (match_operand:SI          0 \"arm_general_register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"arm_general_register_operand\" \"\")\n \t\t (match_operand:SI 2 \"const_int_operand\"  \"\")))]\n   \"TARGET_ARM &&\n    !(const_ok_for_arm (INTVAL (operands[2]))\n@@ -534,15 +534,14 @@\n ;; Reloading and elimination of the frame pointer can\n ;; sometimes cause this optimization to be missed.\n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))\n    (set (match_dup 0)\n-\t(plus:SI (match_dup 0) (match_operand:SI 2 \"register_operand\" \"\")))]\n+\t(plus:SI (match_dup 0) (reg:SI SP_REGNUM)))]\n   \"TARGET_THUMB\n-   && REGNO (operands[2]) == STACK_POINTER_REGNUM \n    && (unsigned HOST_WIDE_INT) (INTVAL (operands[1])) < 1024\n    && (INTVAL (operands[1]) & 3) == 0\"\n-  [(set (match_dup 0) (plus:SI (match_dup 2) (match_dup 1)))]\n+  [(set (match_dup 0) (plus:SI (reg:SI SP_REGNUM) (match_dup 1)))]\n   \"\"\n )\n \n@@ -630,8 +629,8 @@\n ;; similarly for the beq variant using bcc.\n ;; This is a common looping idiom (while (n--))\n (define_peephole2\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n+\t(plus:SI (match_operand:SI 1 \"arm_general_register_operand\" \"\")\n \t\t (const_int -1)))\n    (set (match_operand 2 \"cc_register\" \"\")\n \t(compare (match_dup 0) (const_int -1)))\n@@ -986,9 +985,9 @@\n \n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n-   (set (match_operand:SI           0 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n \t(minus:SI (match_operand:SI 1 \"const_int_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"s_register_operand\" \"\")))]\n+\t\t  (match_operand:SI 2 \"arm_general_register_operand\" \"\")))]\n   \"TARGET_ARM\n    && !const_ok_for_arm (INTVAL (operands[1]))\n    && const_ok_for_arm (~INTVAL (operands[1]))\"\n@@ -2116,8 +2115,8 @@\n \n (define_peephole2\n   [(match_scratch:SI 3 \"r\")\n-   (set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n+\t(ior:SI (match_operand:SI 1 \"arm_general_register_operand\" \"\")\n \t\t(match_operand:SI 2 \"const_int_operand\" \"\")))]\n   \"TARGET_ARM\n    && !const_ok_for_arm (INTVAL (operands[2]))\n@@ -9651,15 +9650,11 @@\n ; This pattern is never tried by combine, so do it as a peephole\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(match_operand:SI 1 \"s_register_operand\" \"\"))\n+  [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n+\t(match_operand:SI 1 \"arm_general_register_operand\" \"\"))\n    (set (reg:CC CC_REGNUM)\n \t(compare:CC (match_dup 1) (const_int 0)))]\n-  \"TARGET_ARM\n-   && (!(TARGET_HARD_FLOAT && TARGET_MAVERICK)\n-       || (!cirrus_fp_register (operands[0], SImode)\n-           && !cirrus_fp_register (operands[1], SImode)))\n-  \"\n+  \"TARGET_ARM\"\n   [(parallel [(set (reg:CC CC_REGNUM) (compare:CC (match_dup 1) (const_int 0)))\n \t      (set (match_dup 0) (match_dup 1))])]\n   \"\""}]}