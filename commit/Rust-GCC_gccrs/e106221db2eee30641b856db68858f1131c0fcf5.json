{"sha": "e106221db2eee30641b856db68858f1131c0fcf5", "node_id": "C_kwDOANBUbNoAKGUxMDYyMjFkYjJlZWUzMDY0MWI4NTZkYjY4ODU4ZjExMzFjMGZjZjU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-11T13:10:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-11-11T13:10:20Z"}, "message": "c++: use auto_vec in cp_parser_template_argument_list\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_template_argument_list): Use auto_vec\n\tinstead of manual memory management.", "tree": {"sha": "2f33aed16c2a30adfc1be5ee74913c48490990fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f33aed16c2a30adfc1be5ee74913c48490990fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e106221db2eee30641b856db68858f1131c0fcf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e106221db2eee30641b856db68858f1131c0fcf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e106221db2eee30641b856db68858f1131c0fcf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e106221db2eee30641b856db68858f1131c0fcf5/comments", "author": null, "committer": null, "parents": [{"sha": "fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4fcb111ad4ef015c1caf7c4b5a60d35b3aa997"}], "stats": {"total": 35, "additions": 8, "deletions": 27}, "files": [{"sha": "adfd3c1378dda3f4ea1762c3c0fe716e9963820e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e106221db2eee30641b856db68858f1131c0fcf5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e106221db2eee30641b856db68858f1131c0fcf5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e106221db2eee30641b856db68858f1131c0fcf5", "patch": "@@ -18558,11 +18558,6 @@ cp_parser_template_name (cp_parser* parser,\n static tree\n cp_parser_template_argument_list (cp_parser* parser)\n {\n-  tree fixed_args[10];\n-  unsigned n_args = 0;\n-  unsigned alloced = 10;\n-  tree *arg_ary = fixed_args;\n-  tree vec;\n   bool saved_in_template_argument_list_p;\n   bool saved_ice_p;\n   bool saved_non_ice_p;\n@@ -18581,16 +18576,15 @@ cp_parser_template_argument_list (cp_parser* parser)\n   parser->non_integral_constant_expression_p = false;\n \n   /* Parse the arguments.  */\n+  auto_vec<tree, 10> args;\n   do\n     {\n-      tree argument;\n-\n-      if (n_args)\n+      if (!args.is_empty ())\n \t/* Consume the comma.  */\n \tcp_lexer_consume_token (parser->lexer);\n \n       /* Parse the template-argument.  */\n-      argument = cp_parser_template_argument (parser);\n+      tree argument = cp_parser_template_argument (parser);\n \n       /* If the next token is an ellipsis, we're expanding a template\n          argument pack. */\n@@ -18610,29 +18604,16 @@ cp_parser_template_argument_list (cp_parser* parser)\n           argument = make_pack_expansion (argument);\n         }\n \n-      if (n_args == alloced)\n-\t{\n-\t  alloced *= 2;\n-\n-\t  if (arg_ary == fixed_args)\n-\t    {\n-\t      arg_ary = XNEWVEC (tree, alloced);\n-\t      memcpy (arg_ary, fixed_args, sizeof (tree) * n_args);\n-\t    }\n-\t  else\n-\t    arg_ary = XRESIZEVEC (tree, arg_ary, alloced);\n-\t}\n-      arg_ary[n_args++] = argument;\n+      args.safe_push (argument);\n     }\n   while (cp_lexer_next_token_is (parser->lexer, CPP_COMMA));\n \n-  vec = make_tree_vec (n_args);\n+  int n_args = args.length ();\n+  tree vec = make_tree_vec (n_args);\n \n-  while (n_args--)\n-    TREE_VEC_ELT (vec, n_args) = arg_ary[n_args];\n+  for (int i = 0; i < n_args; i++)\n+    TREE_VEC_ELT (vec, i) = args[i];\n \n-  if (arg_ary != fixed_args)\n-    free (arg_ary);\n   parser->non_integral_constant_expression_p = saved_non_ice_p;\n   parser->integral_constant_expression_p = saved_ice_p;\n   parser->in_template_argument_list_p = saved_in_template_argument_list_p;"}]}