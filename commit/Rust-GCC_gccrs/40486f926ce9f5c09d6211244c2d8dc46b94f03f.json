{"sha": "40486f926ce9f5c09d6211244c2d8dc46b94f03f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA0ODZmOTI2Y2U5ZjVjMDlkNjIxMTI0NGMyZDhkYzQ2Yjk0ZjAzZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-06-17T11:41:34Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-15T09:39:06Z"}, "message": "[Ada] AI12-0385 Predefined shifts and rotates should be static\n\ngcc/ada/\n\n\t* Makefile.rtl: Add target pair for interfac.ads.\n\t* libgnat/interfac.ads: Add a comment.\n\t* libgnat/interfac__2020.ads: New, used for bootstrap purposes.\n\t* sem_util.adb (Is_Static_Function): Always return False for pre\n\tAda 2020 to e.g. ignore the Static aspect in Interfaces for\n\tAda < 2020.", "tree": {"sha": "3fd37c5ab0fe12c67918b192044194ef75222704", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd37c5ab0fe12c67918b192044194ef75222704"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40486f926ce9f5c09d6211244c2d8dc46b94f03f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40486f926ce9f5c09d6211244c2d8dc46b94f03f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40486f926ce9f5c09d6211244c2d8dc46b94f03f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40486f926ce9f5c09d6211244c2d8dc46b94f03f/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d43123ee06f0cef47ffcacad8f6c9f9d753c1841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d43123ee06f0cef47ffcacad8f6c9f9d753c1841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d43123ee06f0cef47ffcacad8f6c9f9d753c1841"}], "stats": {"total": 216, "additions": 212, "deletions": 4}, "files": [{"sha": "62fbd55d1566f2be59cf99b844f12423ee4d849c", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=40486f926ce9f5c09d6211244c2d8dc46b94f03f", "patch": "@@ -2618,6 +2618,9 @@ ifeq ($(strip $(filter-out linux%,$(target_os))),)\n     g-sercom.adb<libgnat/g-sercom__linux.adb\n endif\n \n+LIBGNAT_TARGET_PAIRS += \\\n+  interfac.ads<libgnat/interfac__2020.ads\n+\n # LIBGNAT_SRCS is the list of all C files (including headers) of the runtime\n # library.  LIBGNAT_OBJS is the list of object files for libgnat.\n # thread.c is special as put into GNATRTL_TASKING_OBJS"}, {"sha": "9e7dfbada8ec901a317c77c8a8630c37256334e6", "filename": "gcc/ada/libgnat/interfac.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2Flibgnat%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2Flibgnat%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Finterfac.ads?ref=40486f926ce9f5c09d6211244c2d8dc46b94f03f", "patch": "@@ -33,6 +33,8 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  This is the compiler version of this unit\n+\n pragma Compiler_Unit_Warning;\n \n package Interfaces is"}, {"sha": "3f85599990f38a9a5b6e44a4e81aacf8f0d3cdce", "filename": "gcc/ada/libgnat/interfac__2020.ads", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2Flibgnat%2Finterfac__2020.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2Flibgnat%2Finterfac__2020.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Finterfac__2020.ads?ref=40486f926ce9f5c09d6211244c2d8dc46b94f03f", "patch": "@@ -0,0 +1,198 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--                           I N T E R F A C E S                            --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2002-2020, Free Software Foundation, Inc.         --\n+--                                                                          --\n+-- This specification is derived from the Ada Reference Manual for use with --\n+-- GNAT. The copyright notice above, and the license provisions that follow --\n+-- apply solely to the implementation dependent sections of this file.      --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This is the runtime version of this unit (not used during GNAT build)\n+\n+package Interfaces is\n+   pragma No_Elaboration_Code_All;\n+   pragma Pure;\n+\n+   --  All identifiers in this unit are implementation defined\n+\n+   pragma Implementation_Defined;\n+\n+   type Integer_8  is range -2 **  7 .. 2 **  7 - 1;\n+   for Integer_8'Size use  8;\n+\n+   type Integer_16 is range -2 ** 15 .. 2 ** 15 - 1;\n+   for Integer_16'Size use 16;\n+\n+   type Integer_32 is range -2 ** 31 .. 2 ** 31 - 1;\n+   for Integer_32'Size use 32;\n+\n+   type Integer_64 is new Long_Long_Integer;\n+   for Integer_64'Size use 64;\n+   --  Note: we use Long_Long_Integer'First instead of -2 ** 63 to allow this\n+   --  unit to compile when using custom target configuration files where the\n+   --  maximum integer is 32 bits. This is useful for static analysis tools\n+   --  such as SPARK or CodePeer. In the normal case Long_Long_Integer is\n+   --  always 64-bits so we get the desired 64-bit type.\n+\n+   type Unsigned_8  is mod 2 ** 8;\n+   for Unsigned_8'Size use  8;\n+\n+   type Unsigned_16 is mod 2 ** 16;\n+   for Unsigned_16'Size use 16;\n+\n+   type Unsigned_24 is mod 2 ** 24;\n+   for Unsigned_24'Size use 24;\n+   --  Declare this type for compatibility with legacy Ada compilers.\n+   --  This is particularly useful in the context of CodePeer analysis.\n+\n+   type Unsigned_32 is mod 2 ** 32;\n+   for Unsigned_32'Size use 32;\n+\n+   type Unsigned_64 is mod 2 ** Long_Long_Integer'Size;\n+   for Unsigned_64'Size use 64;\n+   --  See comment on Integer_64 above\n+\n+   function Shift_Left\n+     (Value  : Unsigned_8;\n+      Amount : Natural) return Unsigned_8\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right\n+     (Value  : Unsigned_8;\n+      Amount : Natural) return Unsigned_8\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right_Arithmetic\n+     (Value  : Unsigned_8;\n+      Amount : Natural) return Unsigned_8\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Left\n+     (Value  : Unsigned_8;\n+      Amount : Natural) return Unsigned_8\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Right\n+     (Value  : Unsigned_8;\n+      Amount : Natural) return Unsigned_8\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Left\n+     (Value  : Unsigned_16;\n+      Amount : Natural) return Unsigned_16\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right\n+     (Value  : Unsigned_16;\n+      Amount : Natural) return Unsigned_16\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right_Arithmetic\n+     (Value  : Unsigned_16;\n+      Amount : Natural) return Unsigned_16\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Left\n+     (Value  : Unsigned_16;\n+      Amount : Natural) return Unsigned_16\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Right\n+     (Value  : Unsigned_16;\n+      Amount : Natural) return Unsigned_16\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Left\n+     (Value  : Unsigned_32;\n+      Amount : Natural) return Unsigned_32\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right\n+     (Value  : Unsigned_32;\n+      Amount : Natural) return Unsigned_32\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right_Arithmetic\n+     (Value  : Unsigned_32;\n+      Amount : Natural) return Unsigned_32\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Left\n+     (Value  : Unsigned_32;\n+      Amount : Natural) return Unsigned_32\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Right\n+     (Value  : Unsigned_32;\n+      Amount : Natural) return Unsigned_32\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Left\n+     (Value  : Unsigned_64;\n+      Amount : Natural) return Unsigned_64\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right\n+     (Value  : Unsigned_64;\n+      Amount : Natural) return Unsigned_64\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Shift_Right_Arithmetic\n+     (Value  : Unsigned_64;\n+      Amount : Natural) return Unsigned_64\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Left\n+     (Value  : Unsigned_64;\n+      Amount : Natural) return Unsigned_64\n+      with Import, Convention => Intrinsic, Static;\n+\n+   function Rotate_Right\n+     (Value  : Unsigned_64;\n+      Amount : Natural) return Unsigned_64\n+      with Import, Convention => Intrinsic, Static;\n+\n+   --  IEEE Floating point types\n+\n+   type IEEE_Float_32 is digits 6;\n+   for IEEE_Float_32'Size use 32;\n+\n+   type IEEE_Float_64 is digits 15;\n+   for IEEE_Float_64'Size use 64;\n+\n+   --  If there is an IEEE extended float available on the machine, we assume\n+   --  that it is available as Long_Long_Float.\n+\n+   --  Note: it is harmless, and explicitly permitted, to include additional\n+   --  types in interfaces, so it is not wrong to have IEEE_Extended_Float\n+   --  defined even if the extended format is not available.\n+\n+   type IEEE_Extended_Float is new Long_Long_Float;\n+\n+end Interfaces;"}, {"sha": "e126b4384c316d5ec031202de6c2f6eca38eee0c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40486f926ce9f5c09d6211244c2d8dc46b94f03f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=40486f926ce9f5c09d6211244c2d8dc46b94f03f", "patch": "@@ -18835,16 +18835,21 @@ package body Sem_Util is\n \n    function Is_Static_Function (Subp : Entity_Id) return Boolean is\n    begin\n-      return Has_Aspect (Subp, Aspect_Static)\n+      --  Always return False for pre Ada 2020 to e.g. ignore the Static\n+      --  aspect in package Interfaces for Ada_Version < 2020 and also\n+      --  for efficiency.\n+\n+      return Ada_Version >= Ada_2020\n+        and then Has_Aspect (Subp, Aspect_Static)\n         and then\n           (No (Find_Value_Of_Aspect (Subp, Aspect_Static))\n             or else Is_True (Static_Boolean\n                                (Find_Value_Of_Aspect (Subp, Aspect_Static))));\n    end Is_Static_Function;\n \n-   ------------------------------\n-   --  Is_Static_Function_Call --\n-   ------------------------------\n+   -----------------------------\n+   -- Is_Static_Function_Call --\n+   -----------------------------\n \n    function Is_Static_Function_Call (Call : Node_Id) return Boolean is\n       function Has_All_Static_Actuals (Call : Node_Id) return Boolean;"}]}