{"sha": "f18eca824c676b77605701ef51abb0bdd21af682", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE4ZWNhODI0YzY3NmI3NzYwNTcwMWVmNTFhYmIwYmRkMjFhZjY4Mg==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-03-24T00:13:33Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-03-24T00:13:33Z"}, "message": "hooks.c (hook_constcharptr_tree_null): New hook.\n\n[gcc/ChangeLog]\n2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n\n        * hooks.c (hook_constcharptr_tree_null): New hook.\n        * hooks.h (hook_constcharptr_tree_null): New prototype.\n        * target-def.h (TARGET_MANGLE_FUNDAMENTAL_TYPE): New target hook.\n        * target.h (mangle_fundamental_type): New target hook.\n        * config/rs6000/rs6000.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Point\n        target hook at rs6000_mangle_fundamental_type.\n        (rs6000_mangle_fundamental_type): New function.\n        * doc/tm.texi (TARGET_MANGLE_FUNDAMENTAL_TYPE): Document.\n\n[gcc/cp/ChangeLog]\n2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n\n        * Make-lang.in (cp/mangle.o): Depend on $(TARGET_H).\n        * mangle.c (write_type): Add call to 'mangle_fundamental_type'\n        target hook.\n\n[gcc/testsuite/ChangeLog]\n2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n\n        * g++.dg/ext/altivec-7.C: New test.\n\nFrom-SVN: r79885", "tree": {"sha": "464ae69af9cebafde05fda4901ca79e0259b4ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/464ae69af9cebafde05fda4901ca79e0259b4ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f18eca824c676b77605701ef51abb0bdd21af682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18eca824c676b77605701ef51abb0bdd21af682", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18eca824c676b77605701ef51abb0bdd21af682", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18eca824c676b77605701ef51abb0bdd21af682/comments", "author": null, "committer": null, "parents": [{"sha": "1b1d85bda3f05c960b5e0d3cdc2676d96a91b80b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1d85bda3f05c960b5e0d3cdc2676d96a91b80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1d85bda3f05c960b5e0d3cdc2676d96a91b80b"}], "stats": {"total": 135, "additions": 133, "deletions": 2}, "files": [{"sha": "e38cf9c0e4a39ffe38ce1286853c95f9e13c3fef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -1,3 +1,14 @@\n+2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* hooks.c (hook_constcharptr_tree_null): New hook.\n+\t* hooks.h (hook_constcharptr_tree_null): New prototype.\n+\t* target-def.h (TARGET_MANGLE_FUNDAMENTAL_TYPE): New target hook.\n+\t* target.h (mangle_fundamental_type): New target hook.\n+\t* config/rs6000/rs6000.c (TARGET_MANGLE_FUNDAMENTAL_TYPE): Point\n+\ttarget hook at rs6000_mangle_fundamental_type.\n+\t(rs6000_mangle_fundamental_type): New function.\n+\t* doc/tm.texi (TARGET_MANGLE_FUNDAMENTAL_TYPE): Document.\n+\n 2004-03-23  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 12267, 12391, 12560, 13129, 14114, 14133"}, {"sha": "09bc1b9606ca71c31e709c3fb0f97ff2a5c003f2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -309,6 +309,7 @@ static void rs6000_assemble_visibility (tree, int);\n static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n+static const char *rs6000_mangle_fundamental_type (tree);\n extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static void rs6000_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -582,6 +583,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n \n+#undef TARGET_MANGLE_FUNDAMENTAL_TYPE\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE rs6000_mangle_fundamental_type\n+\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS rs6000_init_libfuncs\n \n@@ -14903,6 +14907,21 @@ rs6000_handle_altivec_attribute (tree *node, tree name, tree args,\n   return NULL_TREE;\n }\n \n+/* AltiVec defines four built-in scalar types that serve as vector\n+   elements; we must teach the compiler how to mangle them.  */\n+\n+static const char *\n+rs6000_mangle_fundamental_type (tree type)\n+{\n+  if (type == bool_char_type_node) return \"U6__boolc\";\n+  if (type == bool_short_type_node) return \"U6__bools\";\n+  if (type == pixel_type_node) return \"u7__pixel\";\n+  if (type == bool_int_type_node) return \"U6__booli\";\n+\n+  /* For all other types, use normal C++ mangling.  */\n+  return NULL;\n+}\n+\n /* Handle a \"longcall\" or \"shortcall\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "a1a6d6829af2ff9b5dc0f746b0b6e55862b1194f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -1,3 +1,9 @@\n+2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* Make-lang.in (cp/mangle.o): Depend on $(TARGET_H).\n+\t* mangle.c (write_type): Add call to 'mangle_fundamental_type'\n+\ttarget hook.\n+\n 2004-03-23  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 12267, 12391, 12560, 13129, 14114, 14133"}, {"sha": "0f934f225a34707b4bd619c64ffe4aee3022cd6b", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -258,7 +258,8 @@ cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) cp/lex.h except.h toplev.h\n cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) tree-dump.h\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h integrate.h insn-config.h \\\n   input.h $(PARAMS_H) debug.h tree-inline.h\n-cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h real.h gt-cp-mangle.h $(TM_P_H)\n+cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h real.h gt-cp-mangle.h \\\n+  $(TARGET_H) $(TM_P_H)\n \n cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) diagnostic.h gt-cp-parser.h \\\n   output.h"}, {"sha": "d8c615b784878a6409647ab8ff662a6ce59e16bf", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -59,6 +59,7 @@\n #include \"toplev.h\"\n #include \"varray.h\"\n #include \"flags.h\"\n+#include \"target.h\"\n \n /* Debugging support.  */\n \n@@ -1501,12 +1502,24 @@ write_type (tree type)\n \tcase BOOLEAN_TYPE:\n \tcase INTEGER_TYPE:  /* Includes wchar_t.  */\n \tcase REAL_TYPE:\n+\t{\n+\t  /* Handle any target-specific fundamental types.  */\n+\t  const char *target_mangling\n+\t    = targetm.mangle_fundamental_type (type);\n+\n+\t  if (target_mangling)\n+\t    {\n+\t      write_string (target_mangling);\n+\t      return;\n+\t    }\n+\n \t  /* If this is a typedef, TYPE may not be one of\n \t     the standard builtin type nodes, but an alias of one.  Use\n \t     TYPE_MAIN_VARIANT to get to the underlying builtin type.  */\n \t  write_builtin_type (TYPE_MAIN_VARIANT (type));\n \t  ++is_builtin_type;\n \t  break;\n+\t}\n \n \tcase COMPLEX_TYPE:\n \t  write_char ('C');"}, {"sha": "e8b6d9dacfda0bfd0ae1d263ac8ff38b0e650fd9", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -1514,6 +1514,34 @@ precedence for that field, but the alignment of the rest of the structure\n may affect its placement.\n @end deftypefn\n \n+@deftypefn {Target Hook} {const char *} TARGET_MANGLE_FUNDAMENTAL_TYPE (tree @var{type})\n+If your target defines any fundamental types, define this hook to\n+return the appropriate encoding for these types as part of a C++\n+mangled name.  The @var{type} argument is the tree structure\n+representing the type to be mangled.  The hook may be applied to trees\n+which are not target-specific fundamental types; it should return\n+@code{NULL} for all such types, as well as arguments it does not\n+recognize.  If the return value is not @code{NULL}, it must point to\n+a statically-allocated string constant.\n+\n+Target-specific fundamental types might be new fundamental types or\n+qualified versions of ordinary fundamental types.  Encode new\n+fundamental types as @samp{@w{u @var{n} @var{name}}}, where @var{name}\n+is the name used for the type in source code, and @var{n} is the\n+length of @var{name} in decimal.  Encode qualified versions of\n+ordinary types as @samp{@w{U @var{n} @var{name} @var{code}}}, where\n+@var{name} is the name used for the type qualifier in source code,\n+@var{n} is the length of @var{name} as above, and @var{code} is the\n+code used to represent the unqualified version of this type.  (See\n+@code{write_builtin_type} in @file{cp/mangle.c} for the list of\n+codes.)  In both cases the spaces are for clarity; do not include any\n+spaces in your string.\n+\n+The default version of this hook always returns @code{NULL}, which is\n+appropriate for a target that does not define any new fundamental\n+types.\n+@end deftypefn\n+\n @node Type Layout\n @section Layout of Source Language Data Types\n "}, {"sha": "e37d58e97237881f4ad0e54d2f7cd9ed8adf65b0", "filename": "gcc/hooks.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -211,3 +211,10 @@ hook_tree_tree_identity (tree a)\n {\n   return a;\n }\n+\n+/* Generic hook that takes a tree and returns a NULL string.  */\n+const char *\n+hook_constcharptr_tree_null (tree t ATTRIBUTE_UNUSED)\n+{\n+  return NULL;\n+}"}, {"sha": "aab83a8162064043c764db05ea57e57153c8cd48", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -58,5 +58,5 @@ extern rtx hook_rtx_rtx_identity (rtx);\n extern rtx hook_rtx_rtx_null (rtx);\n extern rtx hook_rtx_tree_int_null (tree, int);\n extern tree hook_tree_tree_identity (tree a);\n-\n+extern const char *hook_constcharptr_tree_null (tree);\n #endif"}, {"sha": "62060abebf204b111263e60218fe8dcf382b7e31", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -311,6 +311,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_tree_false\n #define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_tree_false\n #define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false\n+#define TARGET_MANGLE_FUNDAMENTAL_TYPE hook_constcharptr_tree_null\n \n #ifndef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS hook_void_void\n@@ -385,6 +386,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_MS_BITFIELD_LAYOUT_P,\t\t\t\\\n   TARGET_INIT_BUILTINS,\t\t\t\t\\\n   TARGET_EXPAND_BUILTIN,\t\t\t\\\n+  TARGET_MANGLE_FUNDAMENTAL_TYPE,\t\t\\\n   TARGET_INIT_LIBFUNCS,\t\t\t\t\\\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\"}, {"sha": "c122adbcdfaa82ac8ecb1bdff2d24ec173e97197", "filename": "gcc/target.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -314,6 +314,11 @@ struct gcc_target\n   rtx (* expand_builtin) (tree exp, rtx target, rtx subtarget,\n \t\t\t  enum machine_mode mode, int ignore);\n \n+  /* For a vendor-specific fundamental TYPE, return a pointer to\n+     a statically-allocated string containing the C++ mangling for\n+     TYPE.  In all other cases, return NULL.  */\n+  const char * (* mangle_fundamental_type) (tree type);\n+\n   /* Make any adjustments to libfunc names needed for this target.  */\n   void (* init_libfuncs) (void);\n "}, {"sha": "8fcef8326645776710e3e409113aaf26ea262ff5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -1,3 +1,7 @@\n+2004-03-23  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* g++.dg/ext/altivec-7.C: New test.\n+\n 2004-03-23  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR 12267, 12391, 12560, 13129, 14114, 14133"}, {"sha": "b09593e3e492fb31071e7a13e2503599a0bdfee0", "filename": "gcc/testsuite/g++.dg/ext/altivec-7.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f18eca824c676b77605701ef51abb0bdd21af682/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Faltivec-7.C?ref=f18eca824c676b77605701ef51abb0bdd21af682", "patch": "@@ -0,0 +1,35 @@\n+/* Test for AltiVec type overloading and name mangling.  */\n+/* { dg-do compile { target powerpc*-*-* } } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+void foo(vector unsigned char) { }\n+void foo(vector signed char) { }\n+void foo(vector bool     char) { }\n+void foo(vector unsigned short) { }\n+void foo(vector signed short) { }\n+void foo(vector bool short) { }\n+void foo(vector unsigned long) { } /* { dg-warning \"use of .long. in AltiVec types is deprecated. use .int.\" } */\n+void foo(vector signed long) { }   /* { dg-warning \"use of .long. in AltiVec types is deprecated. use .int.\" } */\n+void foo(vector bool long) { }     /* { dg-warning \"use of .long. in AltiVec types is deprecated. use .int.\" } */\n+void foo(vector float) { }\n+void foo(vector pixel) { }\n+void foo(int) { }\n+void foo(unsigned int) { }\n+void foo(float) { }\n+\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectorh\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectora\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectorU6__boolc\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectort\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectors\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectorU6__bools\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectorj\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectori\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectorU6__booli\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectorf\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooU8__vectoru7__pixel\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooi\" } } */\n+/* { dg-final { scan-assembler \"_Z3fooj\" } } */\n+/* { dg-final { scan-assembler \"_Z3foof\" } } */"}]}