{"sha": "2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwMWY0MmY0YmQ3NWNmN2YzZmQwMGVmYzFiNGYwNzE5YmM5YjcyOA==", "commit": {"author": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2018-11-04T11:17:54Z"}, "committer": {"name": "Venkataramanan Kumar", "email": "vekumar@gcc.gnu.org", "date": "2018-11-04T11:17:54Z"}, "message": "Enable support for next generation AMD Zen CPU, via -march=znver2.\n\ngcc/ChangeLog:\n\t* common/config/i386/i386-common.c (processor_alias_table): Add znver2 entry.\n\t* config.gcc (i[34567]86-*-linux* | ...): Add znver2.\n\t(case ${target}): Add znver2.\n\t* config/i386/driver-i386.c: (host_detect_local_cpu): Let\n\t-march=native recognize znver2 processors.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Add znver2.\n\t* config/i386/i386.c (m_znver2): New definition.\n\t(m_ZNVER): New definition.\n\t(m_AMD_MULTIPLE): Includes m_znver2.\n\t(processor_cost_table): Add znver2 entry.\n\t(processor_target_table): Add znver2 entry.\n\t(get_builtin_code_for_version): Set priority for\n\tPROCESSOR_ZNVER2.\n\t(processor_model): Add M_AMDFAM17H_ZNVER2.\n\t(arch_names_table): Ditto.\n\t(ix86_reassociation_width): Include znver2. \n\t* config/i386/i386.h (TARGET_znver2): New definition.\n\t(struct ix86_size_cost): Add TARGET_ZNVER2.\n\t(enum processor_type): Add PROCESSOR_ZNVER2.\n\t* config/i386/i386.md (define_attr \"cpu\"): Add znver2.\n\t* config/i386/x86-tune-costs.h: (processor_costs) Add znver2 costs.\n\t* config/i386/x86-tune-sched.c: (ix86_issue_rate): Add znver2.\n\t(ix86_adjust_cost): Add znver2.\n\t* config/i386/x86-tune.def:  Replace m_ZNVER1 by m_ZNVER\n\t* gcc/doc/extend.texi: Add details about znver2.\n\t* gcc/doc/invoke.texi: Add details about znver2.\n\nlibgcc/ChangeLog\n\t* config/i386/cpuinfo.c: (get_amd_cpu): Add znver2.\n\t* config/i386/cpuinfo.h(processor_subtypes): Ditto.\n\nFrom-SVN: r265775", "tree": {"sha": "e7354ba4bf4373940a376e7c6e02e3e405f17115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7354ba4bf4373940a376e7c6e02e3e405f17115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/comments", "author": null, "committer": null, "parents": [{"sha": "45bf149026361d3103ea9a24ecc46e0d9dcdf750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45bf149026361d3103ea9a24ecc46e0d9dcdf750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45bf149026361d3103ea9a24ecc46e0d9dcdf750"}], "stats": {"total": 262, "additions": 241, "deletions": 21}, "files": [{"sha": "8fa76f4b35343aeec3d005ea7c3753a0e65e6cfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -1,3 +1,33 @@\n+2018-11-04  Venkataramanan Kumar <venkataramanan.kumar@amd.com>\n+\n+\t* common/config/i386/i386-common.c (processor_alias_table): Add\n+\tznver2 entry.\n+\t* config.gcc (i[34567]86-*-linux* | ...): Add znver2.\n+\t(case ${target}): Add znver2.\n+\t* config/i386/driver-i386.c: (host_detect_local_cpu): Let\n+\t-march=native recognize znver2 processors.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Add znver2.\n+\t* config/i386/i386.c (m_znver2): New definition.\n+\t(m_ZNVER): New definition.\n+\t(m_AMD_MULTIPLE): Includes m_znver2.\n+\t(processor_cost_table): Add znver2 entry.\n+\t(processor_target_table): Add znver2 entry.\n+\t(get_builtin_code_for_version): Set priority for\n+\tPROCESSOR_ZNVER2.\n+\t(processor_model): Add M_AMDFAM17H_ZNVER2.\n+\t(arch_names_table): Ditto.\n+\t(ix86_reassociation_width): Include znver2.\n+\t* config/i386/i386.h (TARGET_znver2): New definition.\n+\t(struct ix86_size_cost): Add TARGET_ZNVER2.\n+\t(enum processor_type): Add PROCESSOR_ZNVER2.\n+\t* config/i386/i386.md (define_attr \"cpu\"): Add znver2.\n+\t* config/i386/x86-tune-costs.h: (processor_costs) Add znver2 costs.\n+\t* config/i386/x86-tune-sched.c: (ix86_issue_rate): Add znver2.\n+\t(ix86_adjust_cost): Add znver2.\n+\t* config/i386/x86-tune.def:  Replace m_ZNVER1 by m_ZNVER.\n+\t* gcc/doc/extend.texi: Add details about znver2.\n+\t* gcc/doc/invoke.texi: Add details about znver2.\n+\n 2018-11-03  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR target/87079"}, {"sha": "ff13ea5f69f364c1210badc9452cf4ec44235175", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -1677,6 +1677,16 @@ const pta processor_alias_table[] =\n       | PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n       | PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n       | PTA_SHA | PTA_LZCNT | PTA_POPCNT},\n+  {\"znver2\", PROCESSOR_ZNVER2, CPU_ZNVER1,\n+    PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2 | PTA_SSE3\n+      | PTA_SSE4A | PTA_CX16 | PTA_ABM | PTA_SSSE3 | PTA_SSE4_1\n+      | PTA_SSE4_2 | PTA_AES | PTA_PCLMUL | PTA_AVX | PTA_AVX2\n+      | PTA_BMI | PTA_BMI2 | PTA_F16C | PTA_FMA | PTA_PRFCHW\n+      | PTA_FXSR | PTA_XSAVE | PTA_XSAVEOPT | PTA_FSGSBASE\n+      | PTA_RDRND | PTA_MOVBE | PTA_MWAITX | PTA_ADX | PTA_RDSEED\n+      | PTA_CLZERO | PTA_CLFLUSHOPT | PTA_XSAVEC | PTA_XSAVES\n+      | PTA_SHA | PTA_LZCNT | PTA_POPCNT | PTA_CLWB | PTA_RDPID\n+      | PTA_WBNOINVD},\n   {\"btver1\", PROCESSOR_BTVER1, CPU_GENERIC,\n     PTA_64BIT | PTA_MMX |  PTA_SSE  | PTA_SSE2 | PTA_SSE3\n       | PTA_SSSE3 | PTA_SSE4A |PTA_ABM | PTA_CX16 | PTA_PRFCHW"}, {"sha": "5e5c328ed4cf147ceb30ff469369cae17b8470fc", "filename": "gcc/config.gcc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -664,11 +664,11 @@ pentium4 pentium4m pentiumpro prescott lakemont\"\n # 64-bit x86 processors supported by --with-arch=.  Each processor\n # MUST be separated by exactly one space.\n x86_64_archs=\"amdfam10 athlon64 athlon64-sse3 barcelona bdver1 bdver2 \\\n-bdver3 bdver4 znver1 btver1 btver2 k8 k8-sse3 opteron opteron-sse3 nocona \\\n-core2 corei7 corei7-avx core-avx-i core-avx2 atom slm nehalem westmere \\\n-sandybridge ivybridge haswell broadwell bonnell silvermont knl knm \\\n-skylake-avx512 cannonlake icelake-client icelake-server skylake goldmont \\\n-goldmont-plus tremont x86-64 native\"\n+bdver3 bdver4 znver1 znver2 btver1 btver2 k8 k8-sse3 opteron \\\n+opteron-sse3 nocona core2 corei7 corei7-avx core-avx-i core-avx2 atom \\\n+slm nehalem westmere sandybridge ivybridge haswell broadwell bonnell \\\n+silvermont knl knm skylake-avx512 cannonlake icelake-client icelake-server \\\n+skylake goldmont goldmont-plus tremont x86-64 native\"\n \n # Additional x86 processors supported by --with-cpu=.  Each processor\n # MUST be separated by exactly one space.\n@@ -3337,6 +3337,10 @@ case ${target} in\n \tarch=znver1\n \tcpu=znver1\n \t;;\n+      znver2-*)\n+\tarch=znver2\n+\tcpu=znver2\n+\t;;\n       bdver4-*)\n         arch=bdver4\n         cpu=bdver4\n@@ -3454,6 +3458,10 @@ case ${target} in\n \tarch=znver1\n \tcpu=znver1\n \t;;\n+      znver2-*)\n+\tarch=znver2\n+\tcpu=znver2\n+\t;;\n       bdver4-*)\n         arch=bdver4\n         cpu=bdver4"}, {"sha": "95ba393cee90649808b0cdca1679e1cc2b16799a", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -649,6 +649,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \tprocessor = PROCESSOR_GEODE;\n       else if (has_movbe && family == 22)\n \tprocessor = PROCESSOR_BTVER2;\n+      else if (has_clwb)\n+\tprocessor = PROCESSOR_ZNVER2;\n       else if (has_clzero)\n \tprocessor = PROCESSOR_ZNVER1;\n       else if (has_avx2)\n@@ -1012,6 +1014,9 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n     case PROCESSOR_ZNVER1:\n       cpu = \"znver1\";\n       break;\n+    case PROCESSOR_ZNVER2:\n+      cpu = \"znver2\";\n+      break;\n     case PROCESSOR_BTVER1:\n       cpu = \"btver1\";\n       break;"}, {"sha": "a11be6fb8b6f71a32bbc023259cf9b484c791837", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -124,6 +124,10 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n       def_or_undef (parse_in, \"__znver1\");\n       def_or_undef (parse_in, \"__znver1__\");\n       break;\n+    case PROCESSOR_ZNVER2:\n+      def_or_undef (parse_in, \"__znver2\");\n+      def_or_undef (parse_in, \"__znver2__\");\n+      break;\n     case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__btver1\");\n       def_or_undef (parse_in, \"__btver1__\");\n@@ -288,6 +292,9 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     case PROCESSOR_ZNVER1:\n       def_or_undef (parse_in, \"__tune_znver1__\");\n       break;\n+    case PROCESSOR_ZNVER2:\n+      def_or_undef (parse_in, \"__tune_znver2__\");\n+      break;\n     case PROCESSOR_BTVER1:\n       def_or_undef (parse_in, \"__tune_btver1__\");\n       break;"}, {"sha": "f9ef0b4445bb95cf0d3252bd0adb355f9cb7f587", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -169,12 +169,14 @@ const struct processor_costs *ix86_cost = NULL;\n #define m_BDVER3 (HOST_WIDE_INT_1U<<PROCESSOR_BDVER3)\n #define m_BDVER4 (HOST_WIDE_INT_1U<<PROCESSOR_BDVER4)\n #define m_ZNVER1 (HOST_WIDE_INT_1U<<PROCESSOR_ZNVER1)\n+#define m_ZNVER2 (HOST_WIDE_INT_1U<<PROCESSOR_ZNVER2)\n #define m_BTVER1 (HOST_WIDE_INT_1U<<PROCESSOR_BTVER1)\n #define m_BTVER2 (HOST_WIDE_INT_1U<<PROCESSOR_BTVER2)\n #define m_BDVER\t(m_BDVER1 | m_BDVER2 | m_BDVER3 | m_BDVER4)\n #define m_BTVER (m_BTVER1 | m_BTVER2)\n+#define m_ZNVER\t(m_ZNVER1 | m_ZNVER2)\n #define m_AMD_MULTIPLE (m_ATHLON_K8 | m_AMDFAM10 | m_BDVER | m_BTVER \\\n-\t\t\t| m_ZNVER1)\n+\t\t\t| m_ZNVER)\n \n #define m_GENERIC (HOST_WIDE_INT_1U<<PROCESSOR_GENERIC)\n \n@@ -868,6 +870,7 @@ static const struct processor_costs *processor_cost_table[PROCESSOR_max] =\n   &btver1_cost,\n   &btver2_cost,\n   &znver1_cost,\n+  &znver2_cost\n };\n \f\n static unsigned int\n@@ -31601,6 +31604,10 @@ get_builtin_code_for_version (tree decl, tree *predicate_list)\n \t      arg_str = \"znver1\";\n \t      priority = P_PROC_AVX2;\n \t      break;\n+\t    case PROCESSOR_ZNVER2:\n+\t      arg_str = \"znver2\";\n+\t      priority = P_PROC_AVX2;\n+\t      break;\n \t    }\n \t}\n \n@@ -32276,7 +32283,8 @@ fold_builtin_cpu (tree fndecl, tree *args)\n     M_INTEL_COREI7_SKYLAKE_AVX512,\n     M_INTEL_COREI7_CANNONLAKE,\n     M_INTEL_COREI7_ICELAKE_CLIENT,\n-    M_INTEL_COREI7_ICELAKE_SERVER\n+    M_INTEL_COREI7_ICELAKE_SERVER,\n+    M_AMDFAM17H_ZNVER2\n   };\n \n   static struct _arch_names_table\n@@ -32323,6 +32331,7 @@ fold_builtin_cpu (tree fndecl, tree *args)\n       {\"btver2\", M_AMD_BTVER2},\n       {\"amdfam17h\", M_AMDFAM17H},\n       {\"znver1\", M_AMDFAM17H_ZNVER1},\n+      {\"znver2\", M_AMDFAM17H_ZNVER2},\n     };\n \n   static struct _isa_names_table\n@@ -49200,8 +49209,8 @@ ix86_reassociation_width (unsigned int op, machine_mode mode)\n \n       /* Integer vector instructions execute in FP unit\n \t and can execute 3 additions and one multiplication per cycle.  */\n-      if (ix86_tune == PROCESSOR_ZNVER1 && INTEGRAL_MODE_P (mode)\n-\t  && op != PLUS && op != MINUS)\n+      if ((ix86_tune == PROCESSOR_ZNVER1 || ix86_tune == PROCESSOR_ZNVER2)\n+\t   && INTEGRAL_MODE_P (mode) && op != PLUS && op != MINUS)\n \treturn 1;\n \n       /* Account for targets that splits wide vectors into multiple parts.  */"}, {"sha": "58caab2bb55bdf71edaa42bd56d816507d9a2a52", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -415,6 +415,7 @@ extern const struct processor_costs ix86_size_cost;\n #define TARGET_BTVER1 (ix86_tune == PROCESSOR_BTVER1)\n #define TARGET_BTVER2 (ix86_tune == PROCESSOR_BTVER2)\n #define TARGET_ZNVER1 (ix86_tune == PROCESSOR_ZNVER1)\n+#define TARGET_ZNVER2 (ix86_tune == PROCESSOR_ZNVER2)\n \n /* Feature tests against the various tunings.  */\n enum ix86_tune_indices {\n@@ -2272,6 +2273,7 @@ enum processor_type\n   PROCESSOR_BTVER1,\n   PROCESSOR_BTVER2,\n   PROCESSOR_ZNVER1,\n+  PROCESSOR_ZNVER2,\n   PROCESSOR_max\n };\n "}, {"sha": "8061a2383f97eb0e9e896babd7a7d711179cc85e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -430,7 +430,7 @@\n ;; Processor type.\n (define_attr \"cpu\" \"none,pentium,pentiumpro,geode,k6,athlon,k8,core2,nehalem,\n \t\t    atom,slm,glm,haswell,generic,amdfam10,bdver1,bdver2,bdver3,\n-\t\t    bdver4,btver2,znver1\"\n+\t\t    bdver4,btver2,znver1,znver2\"\n   (const (symbol_ref \"ix86_schedule\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be"}, {"sha": "a47b92ff22ed713602d597fb1b525e8e6c2a9265", "filename": "gcc/config/i386/x86-tune-costs.h", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-costs.h?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -1273,6 +1273,133 @@ struct processor_costs znver1_cost = {\n   \"16\",\t\t\t\t\t/* Func alignment.  */\n };\n \n+/*  ZNVER2 has optimized REP instruction for medium sized blocks, but for\n+    very small blocks it is better to use loop.  For large blocks, libcall\n+    can do nontemporary accesses and beat inline considerably.  */\n+static stringop_algs znver2_memcpy[2] = {\n+  {libcall, {{6, loop, false}, {14, unrolled_loop, false},\n+\t     {-1, rep_prefix_4_byte, false}}},\n+  {libcall, {{16, loop, false}, {8192, rep_prefix_8_byte, false},\n+\t     {-1, libcall, false}}}};\n+static stringop_algs znver2_memset[2] = {\n+  {libcall, {{8, loop, false}, {24, unrolled_loop, false},\n+\t     {2048, rep_prefix_4_byte, false}, {-1, libcall, false}}},\n+  {libcall, {{48, unrolled_loop, false}, {8192, rep_prefix_8_byte, false},\n+\t     {-1, libcall, false}}}};\n+\n+struct processor_costs znver2_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of a lea instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* variable shift costs.  */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs.  */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI.  */\n+   COSTS_N_INSNS (3),\t\t\t/* \t\t\t\t HI.  */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t SI.  */\n+   COSTS_N_INSNS (3),\t\t\t/*\t\t\t\t DI.  */\n+   COSTS_N_INSNS (3)},\t\t\t/*\t\t\tother.  */\n+  0,\t\t\t\t\t/* cost of multiply per each bit\n+\t\t\t\t\t   set.  */\n+   /* Depending on parameters, idiv can get faster on ryzen.  This is upper\n+      bound.  */\n+  {COSTS_N_INSNS (16),\t\t\t/* cost of a divide/mod for QI.  */\n+   COSTS_N_INSNS (22),\t\t\t/* \t\t\t    HI.  */\n+   COSTS_N_INSNS (30),\t\t\t/*\t\t\t    SI.  */\n+   COSTS_N_INSNS (45),\t\t\t/*\t\t\t    DI.  */\n+   COSTS_N_INSNS (45)},\t\t\t/*\t\t\t    other.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx.  */\n+  8,\t\t\t\t\t/* \"large\" insn.  */\n+  9,\t\t\t\t\t/* MOVE_RATIO.  */\n+\n+  /* All move costs are relative to integer->integer move times 2 and thus\n+     they are latency*2.  */\n+\n+  /* reg-reg moves are done by renaming and thus they are even cheaper than\n+     1 cycle.  Because reg-reg move cost is 2 and following tables correspond\n+     to doubles of latencies, we do not model this correctly.  It does not\n+     seem to make practical difference to bump prices up even more.  */\n+  6,\t\t\t\t\t/* cost for loading QImode using\n+\t\t\t\t\t   movzbl.  */\n+  {6, 6, 6},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {8, 8, 8},\t\t\t\t/* cost of storing integer\n+\t\t\t\t\t   registers.  */\n+  2,\t\t\t\t\t/* cost of reg,reg fld/fst.  */\n+  {6, 6, 16},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode.  */\n+  {8, 8, 16},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode.  */\n+  2,\t\t\t\t\t/* cost of moving MMX register.  */\n+  {6, 6},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode.  */\n+  {8, 8},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode.  */\n+  2, 3, 6,\t\t\t\t/* cost of moving XMM,YMM,ZMM\n+\t\t\t\t\t   register.  */\n+  {6, 6, 6, 10, 20},\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n+  {6, 6, 6, 10, 20},\t\t\t/* cost of unaligned loads.  */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in 32,64,128,256 and 512-bit.  */\n+  {8, 8, 8, 8, 16},\t\t\t/* cost of unaligned stores.  */\n+  6, 6,\t\t\t\t\t/* SSE->integer and integer->SSE\n+\t\t\t\t\t   moves.  */\n+  /* VGATHERDPD is 23 uops and throughput is 9, VGATHERDPD is 35 uops,\n+     throughput 12.  Approx 9 uops do not depend on vector size and every load\n+     is 7 uops.  */\n+  18, 8,\t\t\t\t/* Gather load static, per_elt.  */\n+  18, 10,\t\t\t\t/* Gather store static, per_elt.  */\n+  32,\t\t\t\t\t/* size of l1 cache.  */\n+  512,\t\t\t\t\t/* size of l2 cache.  */\n+  64,\t\t\t\t\t/* size of prefetch block.  */\n+  /* New AMD processors never drop prefetches; if they cannot be performed\n+     immediately, they are queued.  We set number of simultaneous prefetches\n+     to a large constant to reflect this (it probably is not a good idea not\n+     to limit number of prefetches at all, as their execution also takes some\n+     time).  */\n+  100,\t\t\t\t\t/* number of parallel prefetches.  */\n+  3,\t\t\t\t\t/* Branch cost.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMUL instruction.  */\n+  /* Latency of fdiv is 8-15.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  /* Latency of fsqrt is 4-10.  */\n+  COSTS_N_INSNS (10),\t\t\t/* cost of FSQRT instruction.  */\n+\n+  COSTS_N_INSNS (1),\t\t\t/* cost of cheap SSE instruction.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of ADDSS/SD SUBSS/SD insns.  */\n+  COSTS_N_INSNS (3),\t\t\t/* cost of MULSS instruction.  */\n+  COSTS_N_INSNS (4),\t\t\t/* cost of MULSD instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMA SS instruction.  */\n+  COSTS_N_INSNS (5),\t\t\t/* cost of FMA SD instruction.  */\n+  COSTS_N_INSNS (10),\t\t\t/* cost of DIVSS instruction.  */\n+  /* 9-13.  */\n+  COSTS_N_INSNS (13),\t\t\t/* cost of DIVSD instruction.  */\n+  COSTS_N_INSNS (10),\t\t\t/* cost of SQRTSS instruction.  */\n+  COSTS_N_INSNS (15),\t\t\t/* cost of SQRTSD instruction.  */\n+  /* Zen can execute 4 integer operations per cycle.  FP operations\n+     take 3 cycles and it can execute 2 integer additions and 2\n+     multiplications thus reassociation may make sense up to with of 6.\n+     SPEC2k6 bencharks suggests\n+     that 4 works better than 6 probably due to register pressure.\n+\n+     Integer vector operations are taken by FP unit and execute 3 vector\n+     plus/minus operations per cycle but only one multiply.  This is adjusted\n+     in ix86_reassociation_width.  */\n+  4, 4, 3, 6,\t\t\t\t/* reassoc int, fp, vec_int, vec_fp.  */\n+  znver2_memcpy,\n+  znver2_memset,\n+  COSTS_N_INSNS (4),\t\t\t/* cond_taken_branch_cost.  */\n+  COSTS_N_INSNS (2),\t\t\t/* cond_not_taken_branch_cost.  */\n+  \"16\",\t\t\t\t\t/* Loop alignment.  */\n+  \"16\",\t\t\t\t\t/* Jump alignment.  */\n+  \"0:0:8\",\t\t\t\t/* Label alignment.  */\n+  \"16\",\t\t\t\t\t/* Func alignment.  */\n+};\n+\n /* skylake_cost should produce code tuned for Skylake familly of CPUs.  */\n static stringop_algs skylake_memcpy[2] =   {\n   {libcall, {{1024, rep_prefix_4_byte, true}, {-1, libcall, false}}},"}, {"sha": "a7fad4a828ce6fac6012ba5b9340eeff0d8b8269", "filename": "gcc/config/i386/x86-tune-sched.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -64,6 +64,7 @@ ix86_issue_rate (void)\n     case PROCESSOR_BDVER3:\n     case PROCESSOR_BDVER4:\n     case PROCESSOR_ZNVER1:\n+    case PROCESSOR_ZNVER2:\n     case PROCESSOR_CORE2:\n     case PROCESSOR_NEHALEM:\n     case PROCESSOR_SANDYBRIDGE:\n@@ -393,6 +394,7 @@ ix86_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n       break;\n \n     case PROCESSOR_ZNVER1:\n+    case PROCESSOR_ZNVER2:\n       /* Stack engine allows to execute push&pop instructions in parall.  */\n       if ((insn_type == TYPE_PUSH || insn_type == TYPE_POP)\n \t  && (dep_insn_type == TYPE_PUSH || dep_insn_type == TYPE_POP))"}, {"sha": "b91dca18af9e5ea68a85184894de1be823f99e0b", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -62,7 +62,7 @@ DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\",\n    that can be partly masked by careful scheduling of moves.  */\n DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_AMDFAM10\n-\t  | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_BDVER | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n    are resolved on SSE register parts instead of whole registers, so we may\n@@ -100,18 +100,20 @@ DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\",\n /* X86_TUNE_FUSE_CMP_AND_BRANCH_32: Fuse compare with a subsequent\n    conditional jump instruction for 32 bit TARGET.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_32, \"fuse_cmp_and_branch_32\",\n-\t  m_CORE_ALL | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  m_CORE_ALL | m_BDVER | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_64: Fuse compare with a subsequent\n    conditional jump instruction for TARGET_64BIT.  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_64, \"fuse_cmp_and_branch_64\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER\n+\t  | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS: Fuse compare with a\n    subsequent conditional jump instruction when the condition jump\n    check sign flag (SF) or overflow flag (OF).  */\n DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS, \"fuse_cmp_and_branch_soflags\",\n-\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_BDVER\n+\t  | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_FUSE_ALU_AND_BRANCH: Fuse alu with a subsequent conditional\n    jump instruction when the alu instruction produces the CCFLAG consumed by\n@@ -280,7 +282,7 @@ DEF_TUNE (X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,\n DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BONNELL | m_SILVERMONT\n \t  | m_KNL | m_KNM | m_INTEL | m_K6_GEODE | m_K8 | m_AMDFAM10 | m_BDVER\n-\t  | m_BTVER | m_ZNVER1 | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n+\t  | m_BTVER | m_ZNVER | m_GOLDMONT | m_GOLDMONT_PLUS | m_TREMONT\n \t  | m_GENERIC)\n \n /* X86_TUNE_USE_CLTD: Controls use of CLTD and CTQO instructions.  */\n@@ -351,19 +353,19 @@ DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\",\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_TREMONT | m_AMDFAM10 | m_BDVER | m_BTVER | m_ZNVER | m_GENERIC)\n \n /* X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL: Use movups for misaligned stores instead\n    of a sequence loading registers by parts.  */\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n \t  m_NEHALEM | m_SANDYBRIDGE | m_CORE_AVX2 | m_SILVERMONT | m_KNL | m_KNM\n \t  | m_INTEL | m_GOLDMONT | m_GOLDMONT_PLUS\n-\t  | m_TREMONT | m_BDVER | m_ZNVER1 | m_GENERIC)\n+\t  | m_TREMONT | m_BDVER | m_ZNVER | m_GENERIC)\n \n /* Use packed single precision instructions where posisble.  I.e. movups instead\n    of movupd.  */\n DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optimal\",\n-\t  m_BDVER | m_ZNVER1)\n+\t  m_BDVER | m_ZNVER)\n \n /* X86_TUNE_SSE_TYPELESS_STORES: Always movaps/movups for 128bit stores.   */\n DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n@@ -372,7 +374,7 @@ DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\",\n /* X86_TUNE_SSE_LOAD0_BY_PXOR: Always use pxor to load0 as opposed to\n    xorps/xorpd and other variants.  */\n DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\",\n-\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_ZNVER1\n+\t  m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_BDVER | m_BTVER | m_ZNVER\n \t  | m_GENERIC)\n \n /* X86_TUNE_INTER_UNIT_MOVES_TO_VEC: Enable moves in from integer\n@@ -419,11 +421,11 @@ DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n \n /* X86_TUNE_USE_GATHER: Use gather instructions.  */\n DEF_TUNE (X86_TUNE_USE_GATHER, \"use_gather\",\n-          ~(m_ZNVER1 | m_GENERIC))\n+\t  ~(m_ZNVER | m_GENERIC))\n \n /* X86_TUNE_AVOID_128FMA_CHAINS: Avoid creating loops with tight 128bit or\n    smaller FMA chain.  */\n-DEF_TUNE (X86_TUNE_AVOID_128FMA_CHAINS, \"avoid_fma_chains\", m_ZNVER1)\n+DEF_TUNE (X86_TUNE_AVOID_128FMA_CHAINS, \"avoid_fma_chains\", m_ZNVER)\n \n /*****************************************************************************/\n /* AVX instruction selection tuning (some of SSE flags affects AVX, too)     */"}, {"sha": "924037ff586b4e2fd3e0bd55e567386d104d4d4c", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -20391,6 +20391,9 @@ AMD Family 17h CPU.\n \n @item znver1\n AMD Family 17h Zen version 1.\n+\n+@item znver2\n+AMD Family 17h Zen version 2.\n @end table\n \n Here is an example:"}, {"sha": "1743c64582e90896dc3841833ed3e0c873f8fd0c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -27267,6 +27267,13 @@ supersets BMI, BMI2, F16C, FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED, MWAITX,\n SHA, CLZERO, AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3,\n SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, and 64-bit\n instruction set extensions.\n+@item znver2\n+AMD Family 17h core based CPUs with x86-64 instruction set support. (This\n+supersets BMI, BMI2, ,CLWB, F16C, FMA, FSGSBASE, AVX, AVX2, ADCX, RDSEED,\n+MWAITX, SHA, CLZERO, AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A,\n+SSSE3, SSE4.1, SSE4.2, ABM, XSAVEC, XSAVES, CLFLUSHOPT, POPCNT, and 64-bit\n+instruction set extensions.)\n+\n \n @item btver1\n CPUs based on AMD Family 14h cores with x86-64 instruction set support.  (This"}, {"sha": "72f24d2dd5cb44dd24b69d6131e5aee6740d2cac", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -1,3 +1,8 @@\n+2018-11-04  Venkataramanan Kumar  <Venkataramanan.kumar@amd.com>\n+\n+\t* config/i386/cpuinfo.c: (get_amd_cpu): Add znver2.\n+\t* config/i386/cpuinfo.h (processor_types): Add znver2.\n+\n 2018-11-01  Paul Koning  <ni1d@arrl.net>\n \n \t* config/pdp11/t-pdp11 (LIB2ADD): Add divmod.c."}, {"sha": "09f4d6f154e26a57e112e6e65c0dfe17d6f7f61d", "filename": "libgcc/config/i386/cpuinfo.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.c?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -108,6 +108,8 @@ get_amd_cpu (unsigned int family, unsigned int model)\n       /* AMD family 17h version 1.  */\n       if (model <= 0x1f)\n \t__cpu_model.__cpu_subtype = AMDFAM17H_ZNVER1;\n+      if (model >= 0x30)\n+\t __cpu_model.__cpu_subtype = AMDFAM17H_ZNVER2;\n       break;\n     default:\n       break;"}, {"sha": "ac9c3486028f65edeba39b11715e171272469106", "filename": "libgcc/config/i386/cpuinfo.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcpuinfo.h?ref=2901f42f4bd75cf7f3fd00efc1b4f0719bc9b728", "patch": "@@ -75,6 +75,7 @@ enum processor_subtypes\n   INTEL_COREI7_CANNONLAKE,\n   INTEL_COREI7_ICELAKE_CLIENT,\n   INTEL_COREI7_ICELAKE_SERVER,\n+  AMDFAM17H_ZNVER2,\n   CPU_SUBTYPE_MAX\n };\n "}]}