{"sha": "725471d2bd30ebeb0274a39833b7e362181bb5c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1NDcxZDJiZDMwZWJlYjAyNzRhMzk4MzNiN2UzNjIxODFiYjVjOA==", "commit": {"author": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1998-08-05T10:20:13Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "1998-08-05T10:20:13Z"}, "message": "Changes to allow bypassing tests for certain machines\n\nFrom-SVN: r21614", "tree": {"sha": "0123ffbaa1f60c982e1717691027ff5c5364b3da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0123ffbaa1f60c982e1717691027ff5c5364b3da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725471d2bd30ebeb0274a39833b7e362181bb5c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725471d2bd30ebeb0274a39833b7e362181bb5c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725471d2bd30ebeb0274a39833b7e362181bb5c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725471d2bd30ebeb0274a39833b7e362181bb5c8/comments", "author": null, "committer": null, "parents": [{"sha": "7c3b5ba53178e1158593c799cc40e75a060ac103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3b5ba53178e1158593c799cc40e75a060ac103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3b5ba53178e1158593c799cc40e75a060ac103"}], "stats": {"total": 584, "additions": 320, "deletions": 264}, "files": [{"sha": "484ab0aa38e040e9a4f8d0f664113a0c01960259", "filename": "contrib/fixinc/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffixinc%2FMakefile?ref=725471d2bd30ebeb0274a39833b7e362181bb5c8", "patch": "@@ -34,7 +34,7 @@ regex.o: regex.c\n \t-$(CC) -g -DSTDC_HEADERS=1 -c regex.c\n \n fixincl.o : fixincl.x fixincl.c\n-\t-$(CC) $(CFLAGS) -o $@ -c fixincl.c\n+\t-$(CC) $(CFLAGS) '-DTARGET_MACHINE=\"$(TARGET)\"' -o $@ -c fixincl.c\n \n server.o : server.c server.h\n \t-$(CC) $(CFLAGS) -o $@ -c server.c\n@@ -71,7 +71,7 @@ install: $(TARGETS)\n \t\techo cp fixincl.sh $(DESTDIR)/fixinc.sh ; \\\n \t\tcp fixincl.sh $(DESTDIR)/fixinc.sh ; \\\n \t\tchmod 555 $(DESTDIR)/fixinc.sh ; \\\n-    \trm -f $(DESTDIR)/fixincl ; \\\n+\trm -f $(DESTDIR)/fixincl ; \\\n \t\techo cp fixincl $(DESTDIR) ; \\\n \t\tcp fixincl $(DESTDIR) ; \\\n \t\tchmod 555 $(DESTDIR)/fixincl ; \\"}, {"sha": "b7372d81da9b6b7dc13094321ca2f0b4e86d75cd", "filename": "contrib/fixinc/fixincl.c", "status": "modified", "additions": 295, "deletions": 257, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffixinc%2Ffixincl.c?ref=725471d2bd30ebeb0274a39833b7e362181bb5c8", "patch": "@@ -73,27 +73,28 @@ struct test_desc\n     regex_t *pTestRegex;\n   };\n \n-typedef enum\n-  {\n-    PATCH_SED, PATCH_SHELL\n-  }\n-tePatch;\n-\n typedef struct patch_desc tPatchDesc;\n \n+#define FD_MACH_ONLY      0x0000\n+#define FD_MACH_IFNOT     0x0001\n+#define FD_SKIP_TEST      0x8000\n+\n typedef struct fix_desc tFixDesc;\n struct fix_desc\n   {\n-    const char *pzFixName;\n-    const char *pzFileList;\n-    regex_t *pListRegex;\n-    int testCt;\n-    tTestDesc *pTestDesc;\n-    const char **papzPatchArgs;\n+    const char*   pzFixName;     /* Name of the fix */\n+    const char*   pzFileList;    /* List of files it applies to */\n+    const char**  papzMachs;     /* List of machine/os-es it applies to */\n+    regex_t*      pListRegex;\n+    int           testCt;\n+    int           fdFlags;\n+    tTestDesc*    pTestDesc;\n+    const char**  papzPatchArgs;\n   };\n \n-char *pzDestDir = (char *) NULL;\n-char *pzSrcDir = (char *) NULL;\n+char *pzDestDir   = (char *) NULL;\n+char *pzSrcDir    = (char *) NULL;\n+char   zMachine[] = TARGET_MACHINE;\n \n pid_t chainHead = (pid_t) - 1;\n \n@@ -127,16 +128,16 @@ main (argc, argv)\n   if (argc != 1)\n     {\n       if (argc != 2)\n-\t{\n-\t  fputs (\"fixincl ERROR:  files specified on command line (not stdin)\\n\",\n-\t\t stderr);\n-\t  exit (EXIT_FAILURE);\n-\t}\n+        {\n+          fputs (\"fixincl ERROR:  files specified on command line (not stdin)\\n\",\n+                 stderr);\n+          exit (EXIT_FAILURE);\n+        }\n \n       if (strcmp (argv[1], \"-v\") == 0)\n-\t{\n-\t  fputs (\"$Id: fixincl.c,v 1.3 1998/06/02 07:00:12 korbb Exp $\\n\", stderr);\n-\t  exit (EXIT_SUCCESS);\n+        {\n+          fputs (\"$Id: fixincl.c,v 1.4 1998/08/05 10:20:11 korbb Exp $\\n\", stderr);\n+          exit (EXIT_SUCCESS);\n         }\n \n       freopen (argv[1], \"r\", stdin);\n@@ -146,15 +147,15 @@ main (argc, argv)\n   if (pzDestDir == (char *) NULL)\n     {\n       fprintf (stderr, \"fixincl ERROR:  %s cannot find destination dir\\n\"\n-\t       \"\\t(`DESTDIR' must be an environment variable)\\n\", *argv);\n+               \"\\t(`DESTDIR' must be an environment variable)\\n\", *argv);\n       exit (EXIT_FAILURE);\n     }\n \n   pzSrcDir = getenv (\"SRCDIR\");\n   if (pzSrcDir == (char *) NULL)\n     {\n       fprintf (stderr, \"fixincl ERROR:  %s cannot find source dir\\n\"\n-\t       \"\\t(`SRCDIR' must be an environment variable)\\n\", *argv);\n+               \"\\t(`SRCDIR' must be an environment variable)\\n\", *argv);\n       exit (EXIT_FAILURE);\n     }\n \n@@ -172,36 +173,36 @@ main (argc, argv)\n        *  parent to skip forward?  Pipes and files behave differently.)\n        */\n       for (fileNameCt = 0, pzBuf = zFileNameBuf;\n-\t   (fileNameCt < 128)\n-\t   && (pzBuf\n-\t       < (zFileNameBuf + sizeof (zFileNameBuf) - MAXPATHLEN));\n-\t)\n-\t{\n-\n-\t  if (fgets (pzBuf, MAXPATHLEN, stdin) == (char *) NULL)\n-\t    break;\n-\t  while (isspace (*pzBuf))\n-\t    pzBuf++;\n-\t  apzNames[fileNameCt++] = pzBuf;\n-\t  pzBuf += strlen (pzBuf);\n-\t  while (isspace (pzBuf[-1]))\n-\t    pzBuf--;\n-\t  *pzBuf++ = '\\0';\n-\t}\n+           (fileNameCt < 128)\n+           && (pzBuf\n+               < (zFileNameBuf + sizeof (zFileNameBuf) - MAXPATHLEN));\n+        )\n+        {\n+\n+          if (fgets (pzBuf, MAXPATHLEN, stdin) == (char *) NULL)\n+            break;\n+          while (isspace (*pzBuf))\n+            pzBuf++;\n+          apzNames[fileNameCt++] = pzBuf;\n+          pzBuf += strlen (pzBuf);\n+          while (isspace (pzBuf[-1]))\n+            pzBuf--;\n+          *pzBuf++ = '\\0';\n+        }\n \n       if (fileNameCt == 0)\n-\treturn EXIT_SUCCESS;\n+        return EXIT_SUCCESS;\n \n       child = fork ();\n       if (child == NULLPROCESS)\n-\tbreak;\n+        break;\n \n       if (child == NOPROCESS)\n-\t{\n-\t  fprintf (stderr, \"Error %d (%s) forking in main\\n\",\n-\t\t   errno, strerror (errno));\n-\t  exit (EXIT_FAILURE);\n-\t}\n+        {\n+          fprintf (stderr, \"Error %d (%s) forking in main\\n\",\n+                   errno, strerror (errno));\n+          exit (EXIT_FAILURE);\n+        }\n \n       waitpid (child, (int *) NULL, 0);\n     }\n@@ -219,21 +220,21 @@ main (argc, argv)\n       char *pzFile = apzNames[loopCt];\n \n       if (access (pzFile, R_OK) != 0)\n-\t{\n-\t  int erno = errno;\n-\t  fprintf (stderr, \"Cannot access %s from %s\\n\\terror %d (%s)\\n\",\n-\t\t   pzFile, getcwd ((char *) NULL, MAXPATHLEN),\n-\t\t   erno, strerror (erno));\n-\t}\n+        {\n+          int erno = errno;\n+          fprintf (stderr, \"Cannot access %s from %s\\n\\terror %d (%s)\\n\",\n+                   pzFile, getcwd ((char *) NULL, MAXPATHLEN),\n+                   erno, strerror (erno));\n+        }\n       else if (pzData = loadFile (pzFile),\n-\t       (pzData != (char *) NULL))\n-\t{\n+               (pzData != (char *) NULL))\n+        {\n \n-\t  if (strstr (pzData, zGnuLib) == (char *) NULL)\n-\t    process (pzData, pzDestDir, pzFile);\n+          if (strstr (pzData, zGnuLib) == (char *) NULL)\n+            process (pzData, pzDestDir, pzFile);\n \n-\t  free ((void *) pzData);\n-\t}\n+          free ((void *) pzData);\n+        }\n     }\n \n   return EXIT_SUCCESS;\n@@ -251,9 +252,9 @@ loadFile (pzFile)\n     struct stat stbf;\n     if (stat (pzFile, &stbf) != 0)\n       {\n-\tfprintf (stderr, \"error %d (%s) stat-ing %s\\n\",\n-\t\t errno, strerror (errno), pzFile);\n-\treturn (char *) NULL;\n+        fprintf (stderr, \"error %d (%s) stat-ing %s\\n\",\n+                 errno, strerror (errno), pzFile);\n+        return (char *) NULL;\n       }\n     fileSize = stbf.st_size;\n   }\n@@ -264,7 +265,7 @@ loadFile (pzFile)\n   if (pzDta == (char *) NULL)\n     {\n       fprintf (stderr, \"error:  could not malloc %d bytes\\n\",\n-\t       fileSize);\n+               fileSize);\n       exit (EXIT_FAILURE);\n     }\n \n@@ -275,33 +276,33 @@ loadFile (pzFile)\n \n     if (fp == (FILE *) NULL)\n       {\n-\tfprintf (stderr, \"error %d (%s) opening %s\\n\", errno,\n-\t\t strerror (errno), pzFile);\n-\tfree ((void *) pzDta);\n-\treturn (char *) NULL;\n+        fprintf (stderr, \"error %d (%s) opening %s\\n\", errno,\n+                 strerror (errno), pzFile);\n+        free ((void *) pzDta);\n+        return (char *) NULL;\n       }\n \n     do\n       {\n-\tsize_t sizeRead = fread ((void *) readPtr, 1, sizeLeft, fp);\n-\n-\tif (sizeRead == 0)\n-\t  {\n-\t    if (feof (fp))\n-\t      break;\n-\n-\t    if (ferror (fp))\n-\t      {\n-\t\tfprintf (stderr, \"error %d (%s) reading %s\\n\", errno,\n-\t\t\t strerror (errno), pzFile);\n-\t\tfree ((void *) pzDta);\n-\t\tfclose (fp);\n-\t\treturn (char *) NULL;\n-\t      }\n-\t  }\n-\n-\treadPtr += sizeRead;\n-\tsizeLeft -= sizeRead;\n+        size_t sizeRead = fread ((void *) readPtr, 1, sizeLeft, fp);\n+\n+        if (sizeRead == 0)\n+          {\n+            if (feof (fp))\n+              break;\n+\n+            if (ferror (fp))\n+              {\n+                fprintf (stderr, \"error %d (%s) reading %s\\n\", errno,\n+                         strerror (errno), pzFile);\n+                free ((void *) pzDta);\n+                fclose (fp);\n+                return (char *) NULL;\n+              }\n+          }\n+\n+        readPtr += sizeRead;\n+        sizeLeft -= sizeRead;\n       }\n     while (sizeLeft != 0);\n \n@@ -316,7 +317,7 @@ void\n runCompiles ()\n {\n   tSCC zBadComp[] = \"fixincl ERROR:  cannot compile %s regex for %s\\n\"\n-  \"\\texpr = `%s'\\n\" \"\\terror %s\\n\";\n+    \"\\texpr = `%s'\\n\" \"\\terror %s\\n\";\n   tFixDesc *pFD = fixDescList;\n   int fixCt = FIX_COUNT;\n   tTestDesc *pTD;\n@@ -328,61 +329,95 @@ runCompiles ()\n   if (pRegex == (regex_t *) NULL)\n     {\n       fprintf (stderr, \"fixincl ERROR:  cannot allocate %d bytes for regex\\n\",\n-\t       REGEX_COUNT * sizeof (regex_t));\n+               REGEX_COUNT * sizeof (regex_t));\n       exit (EXIT_FAILURE);\n     }\n \n   re_set_syntax (RE_SYNTAX_EGREP);\n   pzErr = re_compile_pattern (zInclQuote, strlen (zInclQuote),\n-\t\t\t      &inclQuoteRegex);\n+                              &inclQuoteRegex);\n   if (pzErr != (char *) NULL)\n     {\n       fprintf (stderr, zBadComp, \"quoted include\", \"runCompiles\",\n-\t       zInclQuote, pzErr);\n+               zInclQuote, pzErr);\n       exit (EXIT_FAILURE);\n     }\n \n   /*\n    *  FOR every fixup, ...\n    */\n-  for (;;)\n+  do\n     {\n       pTD = pFD->pTestDesc;\n       tstCt = pFD->testCt;\n \n+      if (pFD->papzMachs != (const char**)NULL) {\n+        const char** papzMachs = pFD->papzMachs;\n+        char*        pz = zFileNameBuf;\n+        char*        pzSep = \"\";\n+        tCC*         pzIfTrue;\n+        tCC*         pzIfFalse;\n+        tSCC         zSkip[] = \"skip\";\n+        tSCC         zRun[]  = \"run\";\n+\n+        sprintf( pz, \"case %s in\\n\", zMachine );\n+        pz += strlen( pz );\n+\n+        if (pFD->fdFlags & FD_MACH_IFNOT) {\n+          pzIfTrue  = zSkip;\n+          pzIfFalse = zRun;\n+        } else {\n+          pzIfTrue  = zRun;\n+          pzIfFalse = zSkip;\n+        }\n+\n+        for (;;) {\n+          const char* pzMach = *(papzMachs++);\n+          if (pzMach == (const char*)NULL)\n+            break;\n+          sprintf( pz, \"%s  %s\", pzSep, pzMach );\n+          pz += strlen( pz );\n+          pzSep = \" | \\\\\\n\";\n+        }\n+        sprintf( pz, \" )\\n    echo %s ;;\\n  * )\\n    echo %s ;;\\nesac\",\n+                 pzIfTrue, pzIfFalse );\n+        pz = runShell( zFileNameBuf );\n+        if (*pz == 's') {\n+          pFD->fdFlags |= FD_SKIP_TEST;\n+          continue;\n+        }\n+      }\n+\n       /*\n        *  FOR every test for the fixup, ...\n        */\n       while (--tstCt >= 0)\n-\t{\n-\t  switch (pTD->type)\n-\t    {\n-\t    case TT_EGREP:\n-\t    case TT_NEGREP:\n-\t      if (--reCt < 0)\n-\t\t{\n-\t\t  fputs (\"out of RE's\\n\", stderr);\n-\t\t  exit (EXIT_FAILURE);\n-\t\t}\n-\n-\t      pTD->pTestRegex = pRegex++;\n-\t      pzErr = re_compile_pattern (pTD->pzTest,\n-\t\t\t\t\t  strlen (pTD->pzTest),\n-\t\t\t\t\t  pTD->pTestRegex);\n-\t      if (pzErr != (char *) NULL)\n-\t\t{\n-\t\t  fprintf (stderr, zBadComp, \"select test\", pFD->pzFixName,\n-\t\t\t   pTD->pzTest, pzErr);\n-\t\t  exit (EXIT_FAILURE);\n-\t\t}\n-\t    }\n-\t  pTD++;\n-\t}\n-\n-      if (--fixCt <= 0)\n-\tbreak;\n-      pFD++;\n+        {\n+          switch (pTD->type)\n+            {\n+            case TT_EGREP:\n+            case TT_NEGREP:\n+              if (--reCt < 0)\n+                {\n+                  fputs (\"out of RE's\\n\", stderr);\n+                  exit (EXIT_FAILURE);\n+                }\n+\n+              pTD->pTestRegex = pRegex++;\n+              pzErr = re_compile_pattern (pTD->pzTest,\n+                                          strlen (pTD->pzTest),\n+                                          pTD->pTestRegex);\n+              if (pzErr != (char *) NULL)\n+                {\n+                  fprintf (stderr, zBadComp, \"select test\", pFD->pzFixName,\n+                           pTD->pzTest, pzErr);\n+                  exit (EXIT_FAILURE);\n+                }\n+            }\n+          pTD++;\n+        }\n     }\n+  while (pFD++, --fixCt > 0);\n }\n \n \n@@ -405,23 +440,23 @@ createFile (pzFile)\n       struct stat stbf;\n \n       while (pzDir != (char *) NULL)\n-\t{\n-\t  *pzDir = NUL;\n-\t  if (stat (fname, &stbf) < 0)\n-\t    {\n-\t      mkdir (fname, S_IFDIR | S_IRWXU | S_IRGRP | S_IXGRP\n-\t\t     | S_IROTH | S_IXOTH);\n-\t    }\n-\n-\t  *pzDir = '/';\n-\t  pzDir = strchr (pzDir + 1, '/');\n-\t}\n+        {\n+          *pzDir = NUL;\n+          if (stat (fname, &stbf) < 0)\n+            {\n+              mkdir (fname, S_IFDIR | S_IRWXU | S_IRGRP | S_IXGRP\n+                     | S_IROTH | S_IXOTH);\n+            }\n+\n+          *pzDir = '/';\n+          pzDir = strchr (pzDir + 1, '/');\n+        }\n       fd = open (fname, O_WRONLY | O_CREAT);\n     }\n   if (fd < 0)\n     {\n       fprintf (stderr, \"Error %d (%s) creating %s\\n\",\n-\t       errno, strerror (errno), fname);\n+               errno, strerror (errno), fname);\n       exit (EXIT_FAILURE);\n     }\n   fprintf (stderr, \"Fixed:  %s\\n\", pzFile);\n@@ -510,7 +545,7 @@ extractQuotedFiles (pzDta, pzFile, pMatch)\n        *  Skip forward to the included file name\n        */\n       while (isspace (*pzInclQuot))\n-\tpzInclQuot++;\n+        pzInclQuot++;\n       while (isspace (*++pzInclQuot));\n       pzInclQuot += sizeof (\"include\") - 1;\n       while (*pzInclQuot++ != '\"');\n@@ -526,15 +561,15 @@ extractQuotedFiles (pzDta, pzFile, pMatch)\n        *  Append to the directory the relative path of the desired file\n        */\n       while (*pzInclQuot != '\"')\n-\tputc (*pzInclQuot++, stdout);\n+        putc (*pzInclQuot++, stdout);\n \n       /*\n        *  Now print the destination directory appended with the relative\n        *  path of the desired file\n        */\n       printf (\"  %s/%s/\", pzDestDir, pzFile);\n       while (*pzDirEnd != '\"')\n-\tputc (*pzDirEnd++, stdout);\n+        putc (*pzDirEnd++, stdout);\n \n       /*\n        *  End of entry\n@@ -545,7 +580,7 @@ extractQuotedFiles (pzDta, pzFile, pMatch)\n        *  Find the next entry\n        */\n       if (regexec (&inclQuoteRegex, pzInclQuot, 1, pMatch, 0) != 0)\n-\tbreak;\n+        break;\n     }\n }\n \n@@ -600,29 +635,32 @@ process (pzDta, pzDir, pzFile)\n       int tstCt;\n       tSuccess egrepRes;\n \n+      if (pFD->fdFlags & FD_SKIP_TEST)\n+        continue;\n+\n       /*\n        *  IF there is a file name restriction,\n        *  THEN ensure the current file name matches one in the pattern\n        */\n       if (pFD->pzFileList != (char *) NULL)\n-\t{\n-\t  const char *pzFil = pzFile;\n-\t  const char *pzScn = pFD->pzFileList;\n-\t  size_t nmLen;\n-\n-\t  while ((pzFil[0] == '.') && (pzFil[1] == '/'))\n-\t    pzFil += 2;\n-\t  nmLen = strlen (pzFil);\n-\n-\t  for (;;)\n-\t    {\n-\t      pzScn = strstr (pzScn + 1, pzFil);\n-\t      if (pzScn == (char *) NULL)\n-\t\tgoto nextFix;\n-\t      if ((pzScn[-1] == '|') && (pzScn[nmLen] == '|'))\n-\t\tbreak;\n-\t    }\n-\t}\n+        {\n+          const char *pzFil = pzFile;\n+          const char *pzScn = pFD->pzFileList;\n+          size_t nmLen;\n+\n+          while ((pzFil[0] == '.') && (pzFil[1] == '/'))\n+            pzFil += 2;\n+          nmLen = strlen (pzFil);\n+\n+          for (;;)\n+            {\n+              pzScn = strstr (pzScn + 1, pzFil);\n+              if (pzScn == (char *) NULL)\n+                goto nextFix;\n+              if ((pzScn[-1] == '|') && (pzScn[nmLen] == '|'))\n+                break;\n+            }\n+        }\n \n       egrepRes = PROBLEM;\n \n@@ -631,86 +669,86 @@ process (pzDta, pzDir, pzFile)\n        *  THEN we always run the fixup\n        */\n       for (pTD = pFD->pTestDesc, tstCt = pFD->testCt;\n-\t   tstCt-- > 0;\n-\t   pTD++)\n-\t{\n-\t  switch (pTD->type)\n-\t    {\n-\t    case TT_TEST:\n-\t      /*\n-\t       *  IF *any* of the shell tests fail,\n-\t       *  THEN do not process the fix.\n-\t       */\n-\t      if (!SUCCESSFUL (testTest (pTD, pzFile)))\n-\t\tgoto nextFix;\n-\t      break;\n-\n-\t    case TT_EGREP:\n-\t      /*\n-\t       *  IF       we have not had a successful egrep test\n-\t       *    *AND*  this test does not pass,\n-\t       *  THEN mark the egrep test as failing.  It starts\n-\t       *       out as a \"PROBLEM\", meaning that if we do not\n-\t       *       encounter any egrep tests, then we will let it pass.\n-\t       */\n-\t      if ((!SUCCESSFUL (egrepRes))\n-\t\t  && (!SUCCESSFUL (egrepTest (pzDta, pTD))))\n-\n-\t\tegrepRes = FAILURE;\n-\n-\t      break;\n-\n-\t    case TT_NEGREP:\n-\t      /*\n-\t       *  IF *any* of the negative egrep tests fail,\n-\t       *  THEN do not process the fix.\n-\t       */\n-\t      if (SUCCESSFUL (egrepTest (pzDta, pTD)))\n-\t\tgoto nextFix;\n-\t      break;\n-\t    }\n-\t}\n+           tstCt-- > 0;\n+           pTD++)\n+        {\n+          switch (pTD->type)\n+            {\n+            case TT_TEST:\n+              /*\n+               *  IF *any* of the shell tests fail,\n+               *  THEN do not process the fix.\n+               */\n+              if (!SUCCESSFUL (testTest (pTD, pzFile)))\n+                goto nextFix;\n+              break;\n+\n+            case TT_EGREP:\n+              /*\n+               *  IF       we have not had a successful egrep test\n+               *    *AND*  this test does not pass,\n+               *  THEN mark the egrep test as failing.  It starts\n+               *       out as a \"PROBLEM\", meaning that if we do not\n+               *       encounter any egrep tests, then we will let it pass.\n+               */\n+              if ((!SUCCESSFUL (egrepRes))\n+                  && (!SUCCESSFUL (egrepTest (pzDta, pTD))))\n+\n+                egrepRes = FAILURE;\n+\n+              break;\n+\n+            case TT_NEGREP:\n+              /*\n+               *  IF *any* of the negative egrep tests fail,\n+               *  THEN do not process the fix.\n+               */\n+              if (SUCCESSFUL (egrepTest (pzDta, pTD)))\n+                goto nextFix;\n+              break;\n+            }\n+        }\n \n       /*\n        *  IF there were no egrep tests *OR* at least one passed, ...\n        */\n       if (!FAILED (egrepRes))\n-\t{\n-\t  fprintf (stderr, \"Applying %-32s to %s\\n\",\n-\t\t   pFD->pzFixName, pzFile);\n-\n-\t  if (fdp.readFd == -1)\n-\t    {\n-\t      fdp.readFd = open (pzFile, O_RDONLY);\n-\t      if (fdp.readFd < 0)\n-\t\t{\n-\t\t  fprintf (stderr, \"Error %d (%s) opening %s\\n\", errno,\n-\t\t\t   strerror (errno), pzFile);\n-\t\t  exit (EXIT_FAILURE);\n-\t\t}\n-\t    }\n-\n-\t  for (;;)\n-\t    {\n-\t      int newFd = chainOpen (fdp.readFd,\n-\t\t\t\t     (tpChar *) pFD->papzPatchArgs,\n-\t\t\t\t     (chainHead == -1)\n-\t\t\t\t     ? &chainHead : (pid_t *) NULL);\n-\t      if (newFd != -1)\n-\t\t{\n-\t\t  fdp.readFd = newFd;\n-\t\t  break;\n-\t\t}\n-\n-\t      fprintf (stderr, \"Error %d (%s) starting filter process \"\n-\t\t       \"for %s\\n\", errno, strerror (errno),\n-\t\t       pFD->pzFixName);\n-\n-\t      if (errno != EAGAIN)\n-\t\texit (EXIT_FAILURE);\n-\t      sleep (1);\n-\t    }\n-\t}\n+        {\n+          fprintf (stderr, \"Applying %-32s to %s\\n\",\n+                   pFD->pzFixName, pzFile);\n+\n+          if (fdp.readFd == -1)\n+            {\n+              fdp.readFd = open (pzFile, O_RDONLY);\n+              if (fdp.readFd < 0)\n+                {\n+                  fprintf (stderr, \"Error %d (%s) opening %s\\n\", errno,\n+                           strerror (errno), pzFile);\n+                  exit (EXIT_FAILURE);\n+                }\n+            }\n+\n+          for (;;)\n+            {\n+              int newFd = chainOpen (fdp.readFd,\n+                                     (tpChar *) pFD->papzPatchArgs,\n+                                     (chainHead == -1)\n+                                     ? &chainHead : (pid_t *) NULL);\n+              if (newFd != -1)\n+                {\n+                  fdp.readFd = newFd;\n+                  break;\n+                }\n+\n+              fprintf (stderr, \"Error %d (%s) starting filter process \"\n+                       \"for %s\\n\", errno, strerror (errno),\n+                       pFD->pzFixName);\n+\n+              if (errno != EAGAIN)\n+                exit (EXIT_FAILURE);\n+              sleep (1);\n+            }\n+        }\n \n     nextFix:;\n     }\n@@ -729,40 +767,40 @@ process (pzDta, pzDir, pzFile)\n \n     for (;;)\n       {\n-\tint ch;\n-\n-\tch = getc (inFp);\n-\tif (ch == EOF)\n-\t  break;\n-\n-\tif (oFp != (FILE *) NULL)\n-\t  putc (ch, oFp);\n-\n-\telse if (ch != *pzCmp)\n-\t  {\n-\t    oFp = createFile (pzFile);\n-\t    if (pzCmp != pzDta)\n-\t      {\n-\t\tchar c = *pzCmp;\n-\t\t*pzCmp = NUL;\n-\t\tfputs (pzDta, oFp);\n-\t\t*pzCmp = c;\n-\t      }\n-\t    putc (ch, oFp);\n-\n-\t  }\n-\telse\n-\t  pzCmp++;\n+        int ch;\n+\n+        ch = getc (inFp);\n+        if (ch == EOF)\n+          break;\n+\n+        if (oFp != (FILE *) NULL)\n+          putc (ch, oFp);\n+\n+        else if (ch != *pzCmp)\n+          {\n+            oFp = createFile (pzFile);\n+            if (pzCmp != pzDta)\n+              {\n+                char c = *pzCmp;\n+                *pzCmp = NUL;\n+                fputs (pzDta, oFp);\n+                *pzCmp = c;\n+              }\n+            putc (ch, oFp);\n+\n+          }\n+        else\n+          pzCmp++;\n       }\n \n     if (oFp != (FILE *) NULL)\n       {\n-\tregmatch_t match;\n+        regmatch_t match;\n \n-\tfchmod (fileno (oFp), S_IRUSR | S_IRGRP | S_IROTH);\n-\tfclose (oFp);\n-\tif (regexec (&inclQuoteRegex, pzDta, 1, &match, 0) == 0)\n-\t  extractQuotedFiles (pzDta, pzFile, &match);\n+        fchmod (fileno (oFp), S_IRUSR | S_IRGRP | S_IROTH);\n+        fclose (oFp);\n+        if (regexec (&inclQuoteRegex, pzDta, 1, &match, 0) == 0)\n+          extractQuotedFiles (pzDta, pzFile, &match);\n       }\n \n     fclose (inFp);"}, {"sha": "04b67ab537729bbe2d4b50f44cd846ff257550ee", "filename": "contrib/fixinc/fixincl.tpl", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffixinc%2Ffixincl.tpl?ref=725471d2bd30ebeb0274a39833b7e362181bb5c8", "patch": "@@ -33,6 +33,20 @@ tSCC z[=hackname _cap=]List[] =[=\n \n   _ELSE =]\n #define z[=hackname _cap=]List (char*)NULL[=\n+  _ENDIF \"files _exist\" =]\n+/*\n+ *  Machine/OS name selection pattern\n+ */[=\n+\n+  _IF mach _exist=]\n+tSCC* apz[=hackname _cap=]Machs[] = {[=\n+    _FOR mach =]\n+        [=mach _str=],[=\n+    /mach=]\n+        (const char*)NULL };[=\n+\n+  _ELSE =]\n+#define apz[=hackname _cap=]Machs (const char**)NULL[=\n   _ENDIF \"files _exist\" =][=\n \n   _IF exesel _exist=]\n@@ -143,9 +157,13 @@ tFixDesc fixDescList[ [=_eval fix _count =] ] = {[=\n \n \n _FOR fix \",\\n\" =]\n-  {  z[=hackname _cap=]Name,    z[=hackname _cap=]List, (regex_t*)NULL,\n-     [=hackname  _up=]_TEST_CT, a[=hackname _cap=]Tests,\n-     apz[=hackname _cap=]Patch }[=\n+  {  z[=hackname _cap=]Name,    z[=hackname _cap=]List,\n+     apz[=hackname _cap=]Machs, (regex_t*)NULL,\n+     [=hackname  _up=]_TEST_CT, [=\n+       _IF not_machine _exist =]FD_MACH_IFNOT[=\n+       _ELSE                  =]FD_MACH_ONLY[=\n+       _ENDIF =],\n+     a[=hackname _cap=]Tests,   apz[=hackname _cap=]Patch }[=\n \n /fix=]\n };"}, {"sha": "0e806feb29f8b7efa36dcc2b4377a8cea8c22769", "filename": "contrib/fixinc/mkfixinc.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2Fmkfixinc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725471d2bd30ebeb0274a39833b7e362181bb5c8/contrib%2Ffixinc%2Fmkfixinc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffixinc%2Fmkfixinc.sh?ref=725471d2bd30ebeb0274a39833b7e362181bb5c8", "patch": "@@ -113,7 +113,7 @@ then\n     exit 0\n fi\n \n-echo $MAKE install DESTDIR=`dirname $dest`\n-$MAKE install DESTDIR=`dirname $dest`\n+echo $MAKE install DESTDIR=`dirname $dest` TARGET=$machine\n+$MAKE install DESTDIR=`dirname $dest` TARGET=$machine\n \n exit 1"}]}