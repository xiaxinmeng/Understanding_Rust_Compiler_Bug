{"sha": "9a55eab313314c6004a3833cd20df6e7f77d59ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE1NWVhYjMxMzMxNGM2MDA0YTM4MzNjZDIwZGY2ZTdmNzdkNTllYQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2004-07-20T19:52:11Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-07-20T19:52:11Z"}, "message": "re PR c++/14607 (Duplicate symbol \"vtable for node\" in files div.o and env.o)\n\n\tPR c++/14607\n\t* config/pa/pa-hpux10.h (SUPPORTS_ONE_ONLY): Define.\n\t(MAKE_DECL_ONE_ONLY): Undefine.\n\t* pa-protos.h (som_text_section_asm_op, one_only_readonly_data_section,\n\treadonly_data, one_only_data_section, forget_section): New prototypes.\n\t* pa.c (pa_init_machine_status, som_text_section_asm_op): New\n\tfunctions.\n\t(pa_select_section): Add one-only (COMDAT) support.\n\t* pa.h (struct machine_function): Define.\n\t* som.h (ASM_OUTPUT_FUNCTION_PREFIX): Delete.\n\t(TEXT_SECTION_ASM_OP): Call som_text_section_asm_op.\n\t(DEFAULT_TEXT_SECTION_ASM_OP, NEW_TEXT_SECTION_ASM_OP,\n\tONE_ONLY_TEXT_SECTION_ASM_OP, ONE_ONLY_READONLY_DATA_SECTION_ASM_OP,\n\tONE_ONLY_DATA_SECTION_ASM_OP): New defines.\n\t(EXTRA_SECTIONS): Add in_one_only_readonly_data and in_one_only_data.\n\t(EXTRA_SECTION_FUNCTIONS): Rework to use individual function macros.\n\t(READONLY_DATA_FUNCTION, ONE_ONLY_READONLY_DATA_SECTION_FUNCTION,\n\tONE_ONLY_DATA_SECTION_FUNCTION, FORGET_SECTION_FUNCTION): New defines\n\tfor EXTRA_SECTION_FUNCTIONS.\n\t* doc/install.texi: Update binutils requirements.\n\nFrom-SVN: r84970", "tree": {"sha": "8b633e8e0a3ee97b566dbc21ed663fcfbc863f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b633e8e0a3ee97b566dbc21ed663fcfbc863f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a55eab313314c6004a3833cd20df6e7f77d59ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a55eab313314c6004a3833cd20df6e7f77d59ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a55eab313314c6004a3833cd20df6e7f77d59ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a55eab313314c6004a3833cd20df6e7f77d59ea/comments", "author": null, "committer": null, "parents": [{"sha": "da7404533a349c82050d029dfd7d24e168e743f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da7404533a349c82050d029dfd7d24e168e743f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da7404533a349c82050d029dfd7d24e168e743f9"}], "stats": {"total": 246, "additions": 206, "deletions": 40}, "files": [{"sha": "20048bdcb43280d5c8fb8901c3dd7be4336dd232", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -1,3 +1,26 @@\n+2004-07-20  John David Anglin  <dava.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR c++/14607\n+\t* config/pa/pa-hpux10.h (SUPPORTS_ONE_ONLY): Define.\n+\t(MAKE_DECL_ONE_ONLY): Undefine.\n+\t* pa-protos.h (som_text_section_asm_op, one_only_readonly_data_section,\n+\treadonly_data, one_only_data_section, forget_section): New prototypes.\n+\t* pa.c (pa_init_machine_status, som_text_section_asm_op): New\n+\tfunctions.\n+\t(pa_select_section): Add one-only (COMDAT) support.\n+\t* pa.h (struct machine_function): Define.\n+\t* som.h (ASM_OUTPUT_FUNCTION_PREFIX): Delete.\n+\t(TEXT_SECTION_ASM_OP): Call som_text_section_asm_op.\n+\t(DEFAULT_TEXT_SECTION_ASM_OP, NEW_TEXT_SECTION_ASM_OP,\n+\tONE_ONLY_TEXT_SECTION_ASM_OP, ONE_ONLY_READONLY_DATA_SECTION_ASM_OP,\n+\tONE_ONLY_DATA_SECTION_ASM_OP): New defines.\n+\t(EXTRA_SECTIONS): Add in_one_only_readonly_data and in_one_only_data.\n+\t(EXTRA_SECTION_FUNCTIONS): Rework to use individual function macros.\n+\t(READONLY_DATA_FUNCTION, ONE_ONLY_READONLY_DATA_SECTION_FUNCTION,\n+\tONE_ONLY_DATA_SECTION_FUNCTION, FORGET_SECTION_FUNCTION): New defines\n+\tfor EXTRA_SECTION_FUNCTIONS.\n+\t* doc/install.texi: Update binutils requirements.\n+\n 2004-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* dbxout.c (dbxout_type): Fix printf format."}, {"sha": "6c4dbf596d51db46a1825f8d289d5c1711d64086", "filename": "gcc/config/pa/pa-hpux10.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -136,3 +136,10 @@ Boston, MA 02111-1307, USA.  */\n    better than the assembler shipped with older versions of hpux.  */\n #undef NEW_HP_ASSEMBLER\n #define NEW_HP_ASSEMBLER 1\n+\n+/* CVS GAS as of 4/28/04 supports a comdat parameter for the .nsubspa\n+   directive.  This provides one only linkage semantics even though we\n+   don't have weak support.  */\n+#undef SUPPORTS_ONE_ONLY\n+#define SUPPORTS_ONE_ONLY (TARGET_GAS)\n+#undef MAKE_DECL_ONE_ONLY"}, {"sha": "7c9350ce0007e0a320c5e45b6bd524721db8ab3f", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -135,6 +135,7 @@ extern int zdepi_cint_p (unsigned HOST_WIDE_INT);\n \n extern void override_options (void);\n extern void output_ascii (FILE *, const char *, int);\n+extern const char * som_text_section_asm_op (void);\n extern HOST_WIDE_INT compute_frame_size (HOST_WIDE_INT, int *);\n extern int and_mask_p (unsigned HOST_WIDE_INT);\n extern int cint_ok_for_move (HOST_WIDE_INT);\n@@ -151,7 +152,6 @@ extern int cmpib_comparison_operator (rtx, enum machine_mode);\n #endif\n \n \n-\n #ifdef TREE_CODE\n extern int reloc_needed (tree);\n #ifdef RTX_CODE\n@@ -164,3 +164,9 @@ extern int function_arg_partial_nregs (CUMULATIVE_ARGS *,\n \t\t\t\t       tree, int);\n extern bool pa_return_in_memory (tree, tree);\n #endif /* TREE_CODE */\n+\n+/* Functions in varasm.c used by pa.c.  */\n+extern void readonly_data (void);\n+extern void one_only_readonly_data_section (void);\n+extern void one_only_data_section (void);\n+extern void forget_section (void);"}, {"sha": "20c0b8305de5895d3fd46b5a60a2d631c105e03a", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 89, "deletions": 2, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -143,6 +143,7 @@ static void pa_hpux_init_libfuncs (void);\n static rtx pa_struct_value_rtx (tree, int);\n static bool pa_pass_by_reference (CUMULATIVE_ARGS *ca, enum machine_mode,\n \t\t\t\t  tree, bool);\n+static struct machine_function * pa_init_machine_status (void);\n \n \n /* Save the operands last given to a compare for use when we\n@@ -464,6 +465,8 @@ override_options (void)\n       targetm.asm_out.unaligned_op.si = NULL;\n       targetm.asm_out.unaligned_op.di = NULL;\n     }\n+\n+  init_machine_status = pa_init_machine_status;\n }\n \n static void\n@@ -475,6 +478,16 @@ pa_init_builtins (void)\n #endif\n }\n \n+/* Function to init struct machine_function.\n+   This will be called, via a pointer variable,\n+   from push_function_context.  */\n+\n+static struct machine_function *\n+pa_init_machine_status (void)\n+{\n+  return ggc_alloc_cleared (sizeof (machine_function));\n+}\n+\n /* If FROM is a probable pointer register, mark TO as a probable\n    pointer register with the same pointer alignment as FROM.  */\n \n@@ -4210,6 +4223,14 @@ pa_output_function_epilogue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \n   fputs (\"\\t.EXIT\\n\\t.PROCEND\\n\", file);\n \n+  if (TARGET_SOM && TARGET_GAS)\n+    {\n+      /* We done with this subspace except possibly for some additional\n+\t debug information.  Forget that we are in this subspace to ensure\n+\t that the next function is output in its own subspace.  */\n+      forget_section ();\n+    }\n+\n   if (INSN_ADDRESSES_SET_P ())\n     {\n       insn = get_last_nonnote_insn ();\n@@ -7995,8 +8016,9 @@ pa_asm_output_mi_thunk (FILE *file, tree thunk_fndecl, HOST_WIDE_INT delta,\n       fprintf (file, \"\\t.align 4\\n\");\n       ASM_OUTPUT_LABEL (file, label);\n       fprintf (file, \"\\t.word P'%s\\n\", fname);\n-      function_section (thunk_fndecl);\n     }\n+  else if (TARGET_SOM && TARGET_GAS)\n+    forget_section ();\n \n   current_thunk_number++;\n   nbytes = ((nbytes + FUNCTION_BOUNDARY / BITS_PER_UNIT - 1)\n@@ -9144,6 +9166,58 @@ cmpib_comparison_operator (rtx op, enum machine_mode mode)\n \t      || GET_CODE (op) == LEU));\n }\n \n+#ifndef ONE_ONLY_TEXT_SECTION_ASM_OP\n+#define ONE_ONLY_TEXT_SECTION_ASM_OP \"\"\n+#endif\n+\n+#ifndef NEW_TEXT_SECTION_ASM_OP\n+#define NEW_TEXT_SECTION_ASM_OP \"\"\n+#endif\n+\n+#ifndef DEFAULT_TEXT_SECTION_ASM_OP\n+#define DEFAULT_TEXT_SECTION_ASM_OP \"\"\n+#endif\n+\n+/* Select and return a TEXT_SECTION_ASM_OP for the current function.\n+\n+   This function is only used with SOM.  Because we don't support\n+   named subspaces, we can only create a new subspace or switch back\n+   into the default text subspace.  */\n+const char *\n+som_text_section_asm_op (void)\n+{\n+  if (TARGET_SOM && TARGET_GAS)\n+    {\n+      if (cfun && !cfun->machine->in_nsubspa)\n+\t{\n+\t  /* We only want to emit a .nsubspa directive once at the\n+\t     start of the function.  */\n+\t  cfun->machine->in_nsubspa = 1;\n+\n+\t  /* Create a new subspace for the text.  This provides\n+\t     better stub placement and one-only functions.  */\n+\t  if (cfun->decl\n+\t      && DECL_ONE_ONLY (cfun->decl)\n+\t      && !DECL_WEAK (cfun->decl))\n+\t    return ONE_ONLY_TEXT_SECTION_ASM_OP;\n+\n+\t  return NEW_TEXT_SECTION_ASM_OP;\n+\t}\n+      else\n+\t{\n+\t  /* There isn't a current function or the body of the current\n+\t     function has been completed.  So, we are changing to the\n+\t     text section to output debugging information.  Do this in\n+\t     the default text section.  We need to forget that we are\n+\t     in the text section so that text_section will call us the\n+\t     next time around.  */\n+\t  forget_section ();\n+\t}\n+    }\n+\n+  return DEFAULT_TEXT_SECTION_ASM_OP;\n+}\n+\n /* On hpux10, the linker will give an error if we have a reference\n    in the read-only data section to a symbol defined in a shared\n    library.  Therefore, expressions that might require a reloc can\n@@ -9160,10 +9234,23 @@ pa_select_section (tree exp, int reloc,\n       && (DECL_INITIAL (exp) == error_mark_node\n           || TREE_CONSTANT (DECL_INITIAL (exp)))\n       && !reloc)\n-    readonly_data_section ();\n+    {\n+      if (TARGET_SOM\n+\t  && DECL_ONE_ONLY (exp)\n+\t  && !DECL_WEAK (exp))\n+\tone_only_readonly_data_section ();\n+      else\n+\treadonly_data_section ();\n+    }\n   else if (TREE_CODE_CLASS (TREE_CODE (exp)) == 'c'\n \t   && !reloc)\n     readonly_data_section ();\n+  else if (TARGET_SOM\n+\t   && TREE_CODE (exp) == VAR_DECL\n+\t   && DECL_ONE_ONLY (exp)\n+\t   && !DECL_WEAK (exp)\n+\t   && DECL_INITIAL (exp))\n+    one_only_data_section ();\n   else\n     data_section ();\n }"}, {"sha": "80f70ded50096013cf7d809e83a36173bbbf8e2d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -430,6 +430,12 @@ do {\t\t\t\t\t\t\t\t\\\n #define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n+typedef struct machine_function GTY(())\n+{\n+  /* Flag indicating that a .NSUBSPA directive has been output for\n+     this function.  */\n+  int in_nsubspa;\n+} machine_function;\n \n /* Define this macro if it is advisable to hold scalars in registers\n    in a wider mode than that declared by the program.  In such cases, "}, {"sha": "d8082d82b9eb83e7b46d73853f65043fb5532220", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 63, "deletions": 32, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for SOM assembler support.\n-   Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -129,19 +129,6 @@ do {\t\t\t\t\t\t\t\t\\\n #endif\n \n \f\n-/* NAME refers to the function's name.  If we are placing each function into\n-   its own section, we need to switch to the section for this function.  Note\n-   that the section name will have a \".\" prefix.  */\n-#define ASM_OUTPUT_FUNCTION_PREFIX(FILE, NAME) \\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    const char *name = (*targetm.strip_name_encoding) (NAME);\t\t\\\n-    if (TARGET_GAS && in_section == in_text) \t\t\t\t\\\n-      fputs (\"\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,CODE_ONLY\\n\", FILE); \\\n-    else if (TARGET_GAS)\t\t\t\t\t\t\\\n-      fprintf (FILE,\t\t\t\t\t\t\t\\\n-\t       \"\\t.SUBSPA .%s\\n\", name);\t\t\t\t\\\n-  }\n-    \n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL) \\\n     do { tree fntype = TREE_TYPE (TREE_TYPE (DECL));\t\t\t\\\n \t tree tree_type = TREE_TYPE (DECL);\t\t\t\t\\\n@@ -219,30 +206,84 @@ do {\t\t\t\t\t\t\t\t\\\n \n #define TARGET_ASM_FILE_START pa_som_file_start\n \n-/* Output before code.  */\n+/* Select and return a TEXT_SECTION_ASM_OP string.  */\n+#define TEXT_SECTION_ASM_OP som_text_section_asm_op ()\n \n-/* Supposedly the assembler rejects the command if there is no tab!  */\n-#define TEXT_SECTION_ASM_OP \"\\t.SPACE $TEXT$\\n\\t.SUBSPA $CODE$\\n\"\n+/* Output before code in the default text section.  */\n+#define DEFAULT_TEXT_SECTION_ASM_OP \"\\t.SPACE $TEXT$\\n\\t.SUBSPA $CODE$\"\n \n-/* Output before read-only data.  */\n+/* Output before text in a new subspace.  This allows the linker to\n+   place stubs between functions.  */\n+#define NEW_TEXT_SECTION_ASM_OP \"\\t.SPACE $TEXT$\\n\\t.NSUBSPA $CODE$\"\n+    \n+/* Output before text in a new one-only subspace.  */\n+#define ONE_ONLY_TEXT_SECTION_ASM_OP \"\\t.SPACE $TEXT$\\n\\\n+\\t.NSUBSPA $CODE$,QUAD=0,ALIGN=8,ACCESS=44,SORT=24,COMDAT\"\n \n-/* Supposedly the assembler rejects the command if there is no tab!  */\n+/* Output before read-only data.  */\n #define READONLY_DATA_ASM_OP \"\\t.SPACE $TEXT$\\n\\t.SUBSPA $LIT$\\n\"\n \n-#define EXTRA_SECTIONS in_readonly_data\n+/* Output before one-only readonly data.  We make readonly data one only\n+   by creating a new $LIT$ subspace in $TEXT$ with the comdat flag.  */\n+#define ONE_ONLY_READONLY_DATA_SECTION_ASM_OP \"\\t.SPACE $TEXT$\\n\\\n+\\t.NSUBSPA $LIT$,QUAD=0,ALIGN=8,ACCESS=0x2c,SORT=16,COMDAT\\n\"\n+\n+/* Output before writable data.  */\n+#define DATA_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $DATA$\\n\"\n+\n+/* Output before one-only data.  We make data one only by creating\n+   a new $DATA$ subspace in $PRIVATE$ with the comdat flag.  */\n+#define ONE_ONLY_DATA_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\\n+\\t.NSUBSPA $DATA$,QUAD=1,ALIGN=8,ACCESS=31,SORT=24,COMDAT\\n\"\n+\n+/* Output before uninitialized data.  */\n+#define BSS_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $BSS$\\n\"\n+\n+#define EXTRA_SECTIONS\t\t\t\t\t\t\t\\\n+  in_readonly_data,\t\t\t\t\t\t\t\\\n+  in_one_only_readonly_data,\t\t\t\t\t\t\\\n+  in_one_only_data\n \n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-extern void readonly_data (void);\t\t\t\t\t\\\n+  READONLY_DATA_FUNCTION\t\t\t\t\t\t\\\n+  ONE_ONLY_READONLY_DATA_SECTION_FUNCTION\t\t\t\t\\\n+  ONE_ONLY_DATA_SECTION_FUNCTION\t\t\t\t\t\\\n+  FORGET_SECTION_FUNCTION\n+\n+#define READONLY_DATA_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n readonly_data (void)\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   if (in_section != in_readonly_data)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       in_section = in_readonly_data;\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", READONLY_DATA_ASM_OP);\t\t\\\n+      fputs (READONLY_DATA_ASM_OP, asm_out_file);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\n+#define ONE_ONLY_READONLY_DATA_SECTION_FUNCTION\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+one_only_readonly_data_section (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  in_section = in_one_only_readonly_data;\t\t\t\t\\\n+  fputs (ONE_ONLY_READONLY_DATA_SECTION_ASM_OP, asm_out_file);\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\n+#define ONE_ONLY_DATA_SECTION_FUNCTION\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+one_only_data_section (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  in_section = in_one_only_data;\t\t\t\t\t\\\n+  fputs (ONE_ONLY_DATA_SECTION_ASM_OP, asm_out_file);\t\t\t\\\n }\n \n+#define FORGET_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+forget_section (void)\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  in_section = no_section;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\n /* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n    which reference data within the $TEXT$ space (for example constant\n    strings in the $LIT$ subspace).\n@@ -255,18 +296,8 @@ readonly_data (void)\t\t\t\t\t\t\t\\\n    $TEXT$ space during PIC generation.  Instead place all constant\n    data into the $PRIVATE$ subspace (this reduces sharing, but it\n    works correctly).  */\n-\n #define READONLY_DATA_SECTION (flag_pic ? data_section : readonly_data)\n \n-/* Output before writable data.  */\n-\n-/* Supposedly the assembler rejects the command if there is no tab!  */\n-#define DATA_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $DATA$\\n\"\n-\n-/* Output before uninitialized data.  */\n-\n-#define BSS_SECTION_ASM_OP \"\\t.SPACE $PRIVATE$\\n\\t.SUBSPA $BSS$\\n\"\n-\n /* We must not have a reference to an external symbol defined in a\n    shared library in a readonly section, else the SOM linker will\n    complain."}, {"sha": "0af4aa73e0fda6f82d28c8c378e9523093f238eb", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a55eab313314c6004a3833cd20df6e7f77d59ea/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=9a55eab313314c6004a3833cd20df6e7f77d59ea", "patch": "@@ -2607,9 +2607,8 @@ longer a multiple of 2 bytes.\n @heading @anchor{hppa*-hp-hpux*}hppa*-hp-hpux*\n Support for HP-UX version 9 and older was discontinued in GCC 3.4.\n \n-We @emph{highly} recommend using gas/binutils 2.8 or newer on all hppa\n-platforms; you may encounter a variety of problems when using the HP\n-assembler.\n+We @emph{highly} recommend using gas/binutils on all hppa platforms;\n+you may encounter a variety of problems when using the HP assembler.\n \n Specifically, @option{-g} does not work on HP-UX (since that system\n uses a peculiar debugging format which GCC does not know about), unless you\n@@ -2664,6 +2663,13 @@ the 3-stage comparison test to fail during a @samp{make bootstrap}.\n You should be able to continue by saying @samp{make all} after getting\n the failure from @samp{make bootstrap}.\n \n+GCC 3.5 requires CVS binutils as of April 28, 2004 or later.  Earlier\n+versions require binutils 2.8 or later.\n+\n+The C++ ABI has changed incompatibly in GCC 3.5.  COMDAT subspaces are\n+used for one-only code and data.  This resolves many of the previous\n+problems in using C++ on this target.  However, the ABI is not compatible\n+with the one implemented under HP-UX 11 using secondary definitions.\n \n @html\n <hr />\n@@ -2732,8 +2738,8 @@ result, it's not possible to switch linkers in the middle of a GCC build.\n This has been been reported to sometimes occur in unified builds of\n binutils and GCC.\n \n-With GCC 3.0 through 3.2, you must use binutils 2.11 or above.  As of\n-GCC 3.3, binutils 2.14 or later is required.\n+GCC 3.0 through 3.2 require binutils 2.11 or above.  GCC 3.3 through\n+GCC 3.5 require binutils 2.14 or later.\n \n Although the HP assembler can be used for an initial build, it shouldn't\n be used with any languages other than C and perhaps Fortran due to its"}]}