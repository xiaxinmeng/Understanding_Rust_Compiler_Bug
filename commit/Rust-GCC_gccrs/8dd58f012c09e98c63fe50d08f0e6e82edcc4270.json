{"sha": "8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRkNThmMDEyYzA5ZTk4YzYzZmU1MGQwOGYwZTZlODJlZGNjNDI3MA==", "commit": {"author": {"name": "David Ung", "email": "davidu@mips.com", "date": "2007-04-16T13:45:24Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-04-16T13:45:24Z"}, "message": "mips.h (PROCESSOR_74KC, [...]): Define.\n\n2007-04-16  David Ung  <davidu@mips.com>\n            Joseph Myers  <joseph@codesourcery.com>\n\n\t* config/mips/mips.h (PROCESSOR_74KC, PROCESSOR_74KF,\n\tPROCESSOR_74KX, TUNE_74K, GENERATE_MADD_MSUB): Define.\n\t* config/mips/mips.c (mips_cpu_info_table, mips_rtx_cost_data):\n\tAdd 74K processor information.\n\t* config/mips/mips.md: Include 74k.md.\n\t(cpu): Add 74kc,74kf,74kx.\n\t(ISA_HAS_MADD_MSUB): Change to GENERATE_MADD_MSUB throughout.\n\t* config/mips/74k.md: New.\n\t* doc/invoke.texi (MIPS Options): Document 74K support.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r123863", "tree": {"sha": "69926fb5c0f1f778adf3c4181d22a2d7f4592f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69926fb5c0f1f778adf3c4181d22a2d7f4592f15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/comments", "author": null, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e055c1cd2818af3d636b0a9736fd873bcbeb56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e055c1cd2818af3d636b0a9736fd873bcbeb56e"}], "stats": {"total": 396, "additions": 392, "deletions": 4}, "files": [{"sha": "d2560018b8e022ea5dcc5bc4111dae4e7070f204", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "patch": "@@ -1,3 +1,16 @@\n+2007-04-16  David Ung  <davidu@mips.com>\n+            Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/mips/mips.h (PROCESSOR_74KC, PROCESSOR_74KF,\n+\tPROCESSOR_74KX, TUNE_74K, GENERATE_MADD_MSUB): Define.\n+\t* config/mips/mips.c (mips_cpu_info_table, mips_rtx_cost_data):\n+\tAdd 74K processor information.\n+\t* config/mips/mips.md: Include 74k.md.\n+\t(cpu): Add 74kc,74kf,74kx.\n+\t(ISA_HAS_MADD_MSUB): Change to GENERATE_MADD_MSUB throughout.\n+\t* config/mips/74k.md: New.\n+\t* doc/invoke.texi (MIPS Options): Document 74K support.\n+\n 2007-04-16  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* tree-vect-analyze.c (vect_analyze_operations): Reorganize calls to"}, {"sha": "833b705bac08a53676b854a60570cca405861b91", "filename": "gcc/config/mips/74k.md", "status": "added", "additions": 323, "deletions": 0, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2F74k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2F74k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F74k.md?ref=8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "patch": "@@ -0,0 +1,323 @@\n+;; DFA-based pipeline description for MIPS32 model 74k.\n+;; Contributed by MIPS Technologies and CodeSourcery.\n+;;\n+;; Reference:\n+;;   \"MIPS32 74K Microarchitecure Specification Rev. 01.02 Jun 15, 2006\"\n+;;   \"MIPS32 74Kf Processor Core Datasheet Jun 2, 2006\"\n+;;\n+;; Copyright (C) 2007 Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 2, or (at your\n+;; option) any later version.\n+\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to the\n+;; Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,\n+;; MA 02110-1301, USA.\n+\n+(define_automaton \"r74k_mdu_pipe, r74k_alu_pipe, r74k_agen_pipe, r74k_fpu\")\n+(define_cpu_unit \"r74k_mul\" \"r74k_mdu_pipe\")\n+(define_cpu_unit \"r74k_alu\" \"r74k_alu_pipe\")\n+(define_cpu_unit \"r74k_agen\" \"r74k_agen_pipe\")\n+(define_cpu_unit \"r74k_fpu_arith\" \"r74k_fpu\")\n+(define_cpu_unit \"r74k_fpu_ldst\" \"r74k_fpu\")\n+\n+;; --------------------------------------------------------------\n+;; Producers\n+;; --------------------------------------------------------------\n+\n+;; Arithmetic: add, addi, addiu, addiupc, addu, and, andi, clo, clz,\n+;;    ext, ins, lui, movn, movz, nor, or, ori, rotr, rotrv, seb, seh, sll,\n+;;    sllv, slt, slti, sltiu, sltu, sra, srav, srl, srlv, sub, subu, wsbh,\n+;;    xor, xori\n+(define_insn_reservation \"r74k_int_arith\" 2\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"arith,const,shift,slt,clz\"))\n+  \"r74k_alu\")\n+\n+(define_insn_reservation \"r74k_int_nop\" 0\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"nop\"))\n+  \"nothing\")\n+\n+(define_insn_reservation \"r74k_int_cmove\" 4\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"condmove\"))\n+  \"r74k_agen*2\")\n+\n+;; MDU: fully pipelined multiplier\n+;; mult, madd, msub - delivers result to hi/lo in 4 cycle (pipelined)\n+(define_insn_reservation \"r74k_int_mult\" 4\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"imul,imadd\"))\n+  \"r74k_alu+r74k_mul\")\n+\n+;; mul - delivers result to general register in 7 cycles\n+(define_insn_reservation \"r74k_int_mul3\" 7\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"imul3\"))\n+  \"r74k_alu+r74k_mul\")\n+\n+;; mfhi, mflo, mflhxu - deliver result to gpr in 7 cycles\n+(define_insn_reservation \"r74k_int_mfhilo\" 7\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"mfhilo\"))\n+  \"r74k_alu+r74k_mul\")\n+\n+;; mthi, mtlo, mtlhx - deliver result to hi/lo, thence madd, handled as bypass\n+(define_insn_reservation \"r74k_int_mthilo\" 7\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"mthilo\"))\n+  \"r74k_alu+r74k_mul\")\n+\n+;; div - default to 50 cycles for 32bit operands.  Faster for 8 bit,\n+;; but is tricky to identify.\n+(define_insn_reservation \"r74k_int_div\" 50\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"idiv\"))\n+  \"r74k_alu+r74k_mul*50\")\n+\n+;; call\n+(define_insn_reservation \"r74k_int_call\" 1\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"call\"))\n+  \"r74k_agen\")\n+\n+;; branch/jump\n+(define_insn_reservation \"r74k_int_jump\" 1\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"branch,jump\"))\n+  \"r74k_agen\")\n+\n+;; loads: lb, lbu, lh, lhu, ll, lw, lwl, lwr, lwpc, lwxs\n+;; prefetch: prefetch, prefetchx\n+(define_insn_reservation \"r74k_int_load\" 3 \n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"load,prefetch,prefetchx\"))\n+  \"r74k_agen\")\n+\n+;; stores\n+(define_insn_reservation \"r74k_int_store\" 1\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (and (eq_attr \"type\" \"store\")\n+            (eq_attr \"mode\" \"!unknown\")))\n+  \"r74k_agen\")\n+\n+\n+;; Unknowns - Currently these include blockage, consttable and alignment\n+;;            rtls.  They do not really affect scheduling latency, (blockage\n+;;            affects scheduling via log links, but not used here).\n+;;\n+(define_insn_reservation \"r74k_unknown\" 1 \n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"unknown\"))\n+  \"r74k_alu\")\n+\n+(define_insn_reservation \"r74k_multi\" 10\n+  (and (eq_attr \"cpu\" \"74kc,74kf,74kx\")\n+       (eq_attr \"type\" \"multi\"))\n+  \"(r74k_alu+r74k_agen)*10\")\n+\n+;; --------------------------------------------------------------\n+;; Bypass to Consumer\n+;; --------------------------------------------------------------\n+\n+;; load->next use :  3 cycles (Default)\n+;; load->load base:  4 cycles\n+;; load->store base: 4 cycles\n+(define_bypass 4 \"r74k_int_load\" \"r74k_int_load\")\n+(define_bypass 4 \"r74k_int_load\" \"r74k_int_store\" \"!store_data_bypass_p\")\n+\n+;; arith->next use :  2 cycles (Default)\n+;; arith->load base:  3 cycles\n+;; arith->store base: 3 cycles\n+(define_bypass 3 \"r74k_int_arith\" \"r74k_int_load\")\n+(define_bypass 3 \"r74k_int_arith\" \"r74k_int_store\" \"!store_data_bypass_p\")\n+\n+;; cmove->next use :  4 cycles (Default)\n+;; cmove->load base:  5 cycles\n+;; cmove->store base: 5 cycles\n+(define_bypass 5 \"r74k_int_cmove\"  \"r74k_int_load\")\n+(define_bypass 5 \"r74k_int_cmove\"  \"r74k_int_store\" \"!store_data_bypass_p\")\n+\n+;; mult/madd->int_mfhilo  : 4 cycles (default)\n+;; mult/madd->mult/madd   : 1 cycles\n+(define_bypass 1 \"r74k_int_mult\" \"r74k_int_mult\")\n+\n+;; --------------------------------------------------------------\n+;; Floating Point Instructions\n+;; --------------------------------------------------------------\n+\n+;; 74Kf has FPU at 1/2 speed of CPU; 74Kx is the name used by GCC for\n+;; a version with 1:1 speed FPU.\n+\n+;; fadd, fabs, fneg, \n+(define_insn_reservation \"r74kx_fadd\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"fadd,fabs,fneg\"))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fadd\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"fadd,fabs,fneg\"))\n+  \"r74k_fpu_arith*2\")\n+\n+;; fmove, fcmove\n+(define_insn_reservation \"r74kx_fmove\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"fmove\"))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fmove\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"fmove\"))\n+  \"r74k_fpu_arith*2\")\n+\n+;; fload\n+(define_insn_reservation \"r74kx_fload\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"r74k_agen+r74k_fpu_ldst\")\n+\n+(define_insn_reservation \"r74kf_fload\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"fpload,fpidxload\"))\n+  \"r74k_agen+(r74k_fpu_ldst*2)\")\n+\n+;; fstore\n+(define_insn_reservation \"r74kx_fstore\" 1\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"fpstore,fpidxstore\"))\n+  \"r74k_agen+r74k_fpu_ldst\")\n+\n+(define_insn_reservation \"r74kf_fstore\" 2\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"fpstore,fpidxstore\"))\n+  \"r74k_agen+(r74k_fpu_ldst*2)\")\n+\n+;; fmul, fmadd\n+(define_insn_reservation \"r74kx_fmul_sf\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fmul_sf\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*2\")\n+\n+(define_insn_reservation \"r74kx_fmul_df\" 5\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*2\")\n+\n+(define_insn_reservation \"r74kf_fmul_df\" 10\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (and (eq_attr \"type\" \"fmul,fmadd\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*4\")\n+\n+;; fdiv, fsqrt\n+(define_insn_reservation \"r74kx_fdiv_sf\" 17\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*14\")\n+\n+(define_insn_reservation \"r74kf_fdiv_sf\" 34\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*28\")\n+\n+(define_insn_reservation \"r74kx_fdiv_df\" 32\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*29\")\n+\n+(define_insn_reservation \"r74kf_fdiv_df\" 64\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (and (eq_attr \"type\" \"fdiv,fsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*58\")\n+\n+;; frsqrt\n+(define_insn_reservation \"r74kx_frsqrt_sf\" 17\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*14\")\n+\n+(define_insn_reservation \"r74kf_frsqrt_sf\" 34\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"SF\")))\n+  \"r74k_fpu_arith*28\")\n+\n+(define_insn_reservation \"r74kx_frsqrt_df\" 36\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*31\")\n+\n+(define_insn_reservation \"r74kf_frsqrt_df\" 72\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (and (eq_attr \"type\" \"frsqrt\")\n+\t    (eq_attr \"mode\" \"DF\")))\n+  \"r74k_fpu_arith*62\")\n+\n+;; fcmp\n+(define_insn_reservation \"r74kx_fcmp\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fcmp\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"fcmp\"))\n+  \"r74k_fpu_arith*2\")\n+\n+;; fcvt\n+(define_insn_reservation \"r74kx_fcvt\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fcvt\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"fcvt\"))\n+  \"r74k_fpu_arith*2\")\n+\n+;; fxfer (MTC1, DMTC1: latency is 4) (MFC1, DMFC1: latency is 1)\n+(define_insn_reservation \"r74kx_fxfer_to_c1\" 4\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"mtc\"))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fxfer_to_c1\" 8\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"mtc\"))\n+  \"r74k_fpu_arith*2\")\n+\n+(define_insn_reservation \"r74kx_fxfer_from_c1\" 1\n+  (and (eq_attr \"cpu\" \"74kx\")\n+       (eq_attr \"type\" \"mfc\"))\n+  \"r74k_fpu_arith\")\n+\n+(define_insn_reservation \"r74kf_fxfer_from_c1\" 2\n+  (and (eq_attr \"cpu\" \"74kf\")\n+       (eq_attr \"type\" \"mfc\"))\n+  \"r74k_fpu_arith*2\")"}, {"sha": "5b3b10de4356ace55cdf2802514d6a63795d0d87", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "patch": "@@ -750,6 +750,9 @@ const struct mips_cpu_info mips_cpu_info_table[] = {\n   { \"34kc\", PROCESSOR_24KC, 33 },  /* 34K with MT/DSP */\n   { \"34kf\", PROCESSOR_24KF, 33 },\n   { \"34kx\", PROCESSOR_24KX, 33 },\n+  { \"74kc\", PROCESSOR_74KC, 33 },\n+  { \"74kf\", PROCESSOR_74KF, 33 },\n+  { \"74kx\", PROCESSOR_74KX, 33 },\n \n   /* MIPS64 */\n   { \"5kc\", PROCESSOR_5KC, 64 },\n@@ -894,6 +897,41 @@ static struct mips_rtx_cost_data const mips_rtx_cost_data[PROCESSOR_MAX] =\n                        1,           /* branch_cost */\n                        4            /* memory_latency */\n     },\n+    { /* 74KC */\n+      SOFT_FP_COSTS,\n+      COSTS_N_INSNS (5),            /* int_mult_si */\n+      COSTS_N_INSNS (5),            /* int_mult_di */\n+      COSTS_N_INSNS (41),           /* int_div_si */\n+      COSTS_N_INSNS (41),           /* int_div_di */\n+                       1,           /* branch_cost */\n+                       4            /* memory_latency */\n+    },\n+    { /* 74KF */\n+      COSTS_N_INSNS (8),            /* fp_add */\n+      COSTS_N_INSNS (8),            /* fp_mult_sf */\n+      COSTS_N_INSNS (10),           /* fp_mult_df */\n+      COSTS_N_INSNS (34),           /* fp_div_sf */\n+      COSTS_N_INSNS (64),           /* fp_div_df */\n+      COSTS_N_INSNS (5),            /* int_mult_si */\n+      COSTS_N_INSNS (5),            /* int_mult_di */\n+      COSTS_N_INSNS (41),           /* int_div_si */\n+      COSTS_N_INSNS (41),           /* int_div_di */\n+                       1,           /* branch_cost */\n+                       4            /* memory_latency */\n+    },\n+    { /* 74KX */\n+      COSTS_N_INSNS (4),            /* fp_add */\n+      COSTS_N_INSNS (4),            /* fp_mult_sf */\n+      COSTS_N_INSNS (5),            /* fp_mult_df */\n+      COSTS_N_INSNS (17),           /* fp_div_sf */\n+      COSTS_N_INSNS (32),           /* fp_div_df */\n+      COSTS_N_INSNS (5),            /* int_mult_si */\n+      COSTS_N_INSNS (5),            /* int_mult_di */\n+      COSTS_N_INSNS (41),           /* int_div_si */\n+      COSTS_N_INSNS (41),           /* int_div_di */\n+                       1,           /* branch_cost */\n+                       4            /* memory_latency */\n+    },\n     { /* M4k */\n       DEFAULT_COSTS\n     },\n@@ -9951,6 +9989,9 @@ mips_issue_rate (void)\n {\n   switch (mips_tune)\n     {\n+    case PROCESSOR_74KC:\n+    case PROCESSOR_74KF:\n+    case PROCESSOR_74KX:\n     case PROCESSOR_R4130:\n     case PROCESSOR_R5400:\n     case PROCESSOR_R5500:"}, {"sha": "f1773bcbaaae80363913ecb3b5f9266542dae5b7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "patch": "@@ -43,6 +43,9 @@ enum processor_type {\n   PROCESSOR_24KC,\n   PROCESSOR_24KF,\n   PROCESSOR_24KX,\n+  PROCESSOR_74KC,\n+  PROCESSOR_74KF,\n+  PROCESSOR_74KX,\n   PROCESSOR_M4K,\n   PROCESSOR_R3900,\n   PROCESSOR_R6000,\n@@ -243,6 +246,9 @@ extern const struct mips_rtx_cost_data *mips_cost;\n #define TUNE_MIPS9000               (mips_tune == PROCESSOR_R9000)\n #define TUNE_SB1                    (mips_tune == PROCESSOR_SB1\t\t\\\n \t\t\t\t     || mips_tune == PROCESSOR_SB1A)\n+#define TUNE_74K                    (mips_tune == PROCESSOR_74KC\t\\\n+\t\t\t\t     || mips_tune == PROCESSOR_74KF\t\\\n+\t\t\t\t     || mips_tune == PROCESSOR_74KX)\n \n /* True if the pre-reload scheduler should try to create chains of\n    multiply-add or multiply-subtract instructions.  For example,\n@@ -639,6 +645,9 @@ extern const struct mips_rtx_cost_data *mips_cost;\n \t\t\t\t  || ISA_MIPS64)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n+/* Integer multiply-accumulate instructions should be generated.  */\n+#define GENERATE_MADD_MSUB      (ISA_HAS_MADD_MSUB && !TUNE_74K)\n+\n /* ISA has floating-point nmadd and nmsub instructions.  */\n #define ISA_HAS_NMADD_NMSUB\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || ISA_MIPS64)\t\t\t\\"}, {"sha": "12415e42f998088bc7d75c0b967f51132a71c0ac", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "patch": "@@ -396,7 +396,7 @@\n ;; Attribute describing the processor.  This attribute must match exactly\n ;; with the processor_type enumeration in mips.h.\n (define_attr \"cpu\"\n-  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf,24kx,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n+  \"r3000,4kc,4kp,5kc,5kf,20kc,24kc,24kf,24kx,74kc,74kf,74kx,m4k,r3900,r6000,r4000,r4100,r4111,r4120,r4130,r4300,r4600,r4650,r5000,r5400,r5500,r7000,r8000,r9000,sb1,sb1a,sr71000\"\n   (const (symbol_ref \"mips_tune\")))\n \n ;; The type of hardware hazard associated with this instruction.\n@@ -633,6 +633,7 @@\n (include \"4k.md\")\n (include \"5k.md\")\n (include \"24k.md\")\n+(include \"74k.md\")\n (include \"3000.md\")\n (include \"4000.md\")\n (include \"4100.md\")\n@@ -1208,13 +1209,13 @@\n    (clobber (match_scratch:SI 5 \"=X,3,l\"))\n    (clobber (match_scratch:SI 6 \"=X,X,&d\"))]\n   \"(TARGET_MIPS3900\n-   || ISA_HAS_MADD_MSUB)\n+   || GENERATE_MADD_MSUB)\n    && !TARGET_MIPS16\"\n {\n   static const char *const madd[] = { \"madd\\t%1,%2\", \"madd\\t%0,%1,%2\" };\n   if (which_alternative == 2)\n     return \"#\";\n-  if (ISA_HAS_MADD_MSUB && which_alternative != 0)\n+  if (GENERATE_MADD_MSUB && which_alternative != 0)\n     return \"#\";\n   return madd[which_alternative];\n }\n@@ -1468,7 +1469,7 @@\n    (clobber (match_scratch:SI 4 \"=h,h,h\"))\n    (clobber (match_scratch:SI 5 \"=X,1,l\"))\n    (clobber (match_scratch:SI 6 \"=X,X,&d\"))]\n-  \"ISA_HAS_MADD_MSUB\"\n+  \"GENERATE_MADD_MSUB\"\n   \"@\n    msub\\t%2,%3\n    #"}, {"sha": "842dcbfcbcee379d4dd81b6b7d7528888def55de", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dd58f012c09e98c63fe50d08f0e6e82edcc4270/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=8dd58f012c09e98c63fe50d08f0e6e82edcc4270", "patch": "@@ -11191,6 +11191,7 @@ The processor names are:\n @samp{24kc}, @samp{24kf}, @samp{24kx},\n @samp{24kec}, @samp{24kef}, @samp{24kex},\n @samp{34kc}, @samp{34kf}, @samp{34kx},\n+@samp{74kc}, @samp{74kf}, @samp{74kx},\n @samp{m4k},\n @samp{orion},\n @samp{r2000}, @samp{r3000}, @samp{r3900}, @samp{r4000}, @samp{r4400},"}]}