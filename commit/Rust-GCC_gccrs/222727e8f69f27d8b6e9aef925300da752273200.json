{"sha": "222727e8f69f27d8b6e9aef925300da752273200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIyNzI3ZThmNjlmMjdkOGI2ZTlhZWY5MjUzMDBkYTc1MjI3MzIwMA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-30T21:10:29Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-01-30T21:10:29Z"}, "message": "of the comparison.\n\n\t(cmpXf insns): Allow 0.0 for either operand of the\n\tcomparison.  Update output template to handle 0.0 as one\n\tof the operands.\n\t(movsi insn, fp->fp case): Update constraints and template to\n\tallow store of zero into an FP register.\n\t(movhi insn, fp->fp case): Likewise.\n\t(movqi insn, fp->fp case): Likewise.\n\t(movdi insn, fp->fp case): Likewise.\n\t(movDF const_double pattern): Do not apply this pattern\n\tif the const_double is zero.\n\t(movdf insn, fp->fp and gr->gr cases): Update constraints\n\tand output template to allow store of zero into a FP or GR.\n\tUpdate condition string to allow zero as operand 1.\n\t(movsf insn, fp->fp and gr->gr cases): Likewise.  Also allow\n\tstore of zero into a memory location.\n\nFrom-SVN: r3393", "tree": {"sha": "ec16e4881fa8286e6b5cc8ccb2d79fcd4e30a73e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec16e4881fa8286e6b5cc8ccb2d79fcd4e30a73e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/222727e8f69f27d8b6e9aef925300da752273200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222727e8f69f27d8b6e9aef925300da752273200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/222727e8f69f27d8b6e9aef925300da752273200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/222727e8f69f27d8b6e9aef925300da752273200/comments", "author": null, "committer": null, "parents": [{"sha": "af69aabbee1afe45343721264beb098511f1b839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af69aabbee1afe45343721264beb098511f1b839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af69aabbee1afe45343721264beb098511f1b839"}], "stats": {"total": 59, "additions": 31, "deletions": 28}, "files": [{"sha": "4d7cc8a132c3a3bf49aee105c0c335a54a3b825e", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/222727e8f69f27d8b6e9aef925300da752273200/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/222727e8f69f27d8b6e9aef925300da752273200/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=222727e8f69f27d8b6e9aef925300da752273200", "patch": "@@ -154,8 +154,8 @@\n \n (define_expand \"cmpsf\"\n   [(set (reg:CCFP 0)\n-\t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t      (match_operand:SF 1 \"register_operand\" \"\")))]\n+\t(compare:CCFP (match_operand:SF 0 \"reg_or_0_operand\" \"\")\n+\t\t      (match_operand:SF 1 \"reg_or_0_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -167,8 +167,8 @@\n \n (define_expand \"cmpdf\"\n   [(set (reg:CCFP 0)\n-      (compare:CCFP (match_operand:DF 0 \"register_operand\" \"\")\n-                    (match_operand:DF 1 \"register_operand\" \"\")))]\n+      (compare:CCFP (match_operand:DF 0 \"reg_or_0_operand\" \"\")\n+                    (match_operand:DF 1 \"reg_or_0_operand\" \"\")))]\n   \"\"\n   \"\n {\n@@ -181,19 +181,19 @@\n (define_insn \"\"\n  [(set (reg:CCFP 0)\n        (match_operator:CCFP 2 \"comparison_operator\"\n-\t\t\t    [(match_operand:SF 0 \"register_operand\" \"fx\")\n-\t\t\t     (match_operand:SF 1 \"register_operand\" \"fx\")]))]\n+\t\t\t    [(match_operand:SF 0 \"reg_or_0_operand\" \"fxG\")\n+\t\t\t     (match_operand:SF 1 \"reg_or_0_operand\" \"fxG\")]))]\n  \"\"\n- \"fcmp,sgl,%Y2 %0,%1\"\n+ \"fcmp,sgl,%Y2 %r0,%r1\"\n  [(set_attr \"type\" \"fpcc\")])\n \n (define_insn \"\"\n  [(set (reg:CCFP 0)\n        (match_operator:CCFP 2 \"comparison_operator\"\n-\t\t\t    [(match_operand:DF 0 \"register_operand\" \"fx\")\n-\t\t\t     (match_operand:DF 1 \"register_operand\" \"fx\")]))]\n+\t\t\t    [(match_operand:DF 0 \"reg_or_0_operand\" \"fxG\")\n+\t\t\t     (match_operand:DF 1 \"reg_or_0_operand\" \"fxG\")]))]\n  \"\"\n- \"fcmp,dbl,%Y2 %0,%1\"\n+ \"fcmp,dbl,%Y2 %r0,%r1\"\n  [(set_attr \"type\" \"fpcc\")])\n \n ;; scc insns.\n@@ -842,7 +842,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!*r,!fx,!fx\")\n-\t(match_operand:SI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fx,!*r,!fx\"))]\n+\t(match_operand:SI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fx,!*r,!fxM\"))]\n   \"register_operand (operands[0], SImode)\n    || reg_or_0_operand (operands[1], SImode)\"\n   \"@\n@@ -855,7 +855,7 @@\n    mtsar %r1\n    fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n    stw %1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n-   fcpy,sgl %1,%0\"\n+   fcpy,sgl %r1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,load,fpload,fpalu\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2,2,1\")])\n \n@@ -1007,7 +1007,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!*r,!fx,!fx\")\n-\t(match_operand:HI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fx,!*r,!fx\"))]\n+\t(match_operand:HI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fx,!*r,!fxM\"))]\n   \"register_operand (operands[0], HImode)\n    || reg_or_0_operand (operands[1], HImode)\"\n   \"@\n@@ -1020,7 +1020,7 @@\n    mtsar %r1\n    fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n    stw %1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n-   fcpy,sgl %1,%0\"\n+   fcpy,sgl %r1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,load,fpload,fpalu\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2,2,1\")])\n \n@@ -1084,7 +1084,7 @@\n \n (define_insn \"\"\n   [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,r,r,Q,*q,!*r,!fx,!fx\")\n-\t(match_operand:QI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fx,!*r,!fx\"))]\n+\t(match_operand:QI 1 \"move_operand\" \"rM,J,N,K,Q,rM,rM,!fx,!*r,!fxM\"))]\n   \"register_operand (operands[0], QImode)\n    || reg_or_0_operand (operands[1], QImode)\"\n   \"@\n@@ -1097,7 +1097,7 @@\n    mtsar %r1\n    fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n    stw %1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n-   fcpy,sgl %1,%0\"\n+   fcpy,sgl %r1,%0\"\n   [(set_attr \"type\" \"move,move,move,move,load,store,move,load,fpload,fpalu\")\n    (set_attr \"length\" \"1,1,1,1,1,1,1,2,2,1\")])\n \n@@ -1182,7 +1182,8 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=?r,r,fx\")\n \t(match_operand:DF 1 \"\" \"?E,G,m\"))]\n-  \"GET_CODE (operands[1]) == CONST_DOUBLE\"\n+  \"GET_CODE (operands[1]) == CONST_DOUBLE\n+   && operands[1] != CONST0_RTX (DFmode)\"\n   \"*\n {\n   switch (which_alternative)\n@@ -1211,13 +1212,14 @@\n (define_insn \"\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=fx,*r,Q,?Q,fx,*&r,?fx,?*r\")\n-\t(match_operand:DF 1 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"fx,*r,fx,*r,Q,Q,*r,fx\"))]\n+\t(match_operand:DF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n+\t\t\t  \"fxG,*rG,fx,*r,Q,Q,*r,fx\"))]\n   \"register_operand (operands[0], DFmode)\n-   || register_operand (operands[1], DFmode)\"\n+   || reg_or_0_operand (operands[1], DFmode)\"\n   \"*\n {\n-  if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n+  if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]) \n+      || operands[1] == CONST0_RTX (DFmode))\n     return output_fp_move_double (operands);\n   return output_move_double (operands);\n }\"\n@@ -1344,12 +1346,13 @@\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=r,Q,&r,&r,fx,fx,*r\")\n \t(match_operand:DI 1 \"general_operand\"\n-\t\t\t  \"r,r,Q,i,*r,fx,fx\"))]\n+\t\t\t  \"rM,r,Q,i,*r,fxM,fx\"))]\n   \"register_operand (operands[0], DImode)\n    || reg_or_0_operand (operands[1], DImode)\"\n   \"*\n {\n-  if (FP_REG_P (operands[0]) || FP_REG_P (operands[1]))\n+  if (FP_REG_P (operands[0]) || FP_REG_P (operands[1])\n+      || (operands[1] == CONST0_RTX (DImode)))\n     return output_fp_move_double (operands);\n   return output_move_double (operands);\n }\"\n@@ -1392,13 +1395,13 @@\n (define_insn \"\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\"\n \t\t\t  \"=fx,r,*r,fx,fx,r,Q,Q\")\n-\t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\"\n-\t\t\t  \"fx,r,!fx,!*r,Q,Q,fx,r\"))]\n+\t(match_operand:SF 1 \"reg_or_0_or_nonsymb_mem_operand\"\n+\t\t\t  \"fxG,rG,!fx,!*r,Q,Q,fx,rG\"))]\n   \"register_operand (operands[0], SFmode)\n-   || register_operand (operands[1], SFmode)\"\n+   || reg_or_0_operand (operands[1], SFmode)\"\n   \"@\n-   fcpy,sgl %1,%0\n-   copy %1,%0\n+   fcpy,sgl %r1,%0\n+   copy %r1,%0\n    fstws %1,-16(0,%%r30)\\;ldw -16(0,%%r30),%0\n    stw %r1,-16(0,%%r30)\\;fldws -16(0,%%r30),%0\n    fldws%F1 %1,%0"}]}