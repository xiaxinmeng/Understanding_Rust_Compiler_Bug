{"sha": "6a82f012c4a1c12468b154c59b817dc2d4d044c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4MmYwMTJjNGExYzEyNDY4YjE1NGM1OWI4MTdkYzJkNGQwNDRjNQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-03-18T16:23:50Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:13:50Z"}, "message": "aarch64: Update attributes of arm_acle.h intrinsics\n\nUpdate the attributes of all intrinsics defined in arm_acle.h to be\nconsistent with the attributes of the intrinsics defined in\narm_neon.h. Specifically, this means updating the attributes from:\n  __extension__ static __inline <type>\n  __attribute__ ((__always_inline__))\nto:\n  __extension__ extern __inline <type>\n  __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n\ngcc/ChangeLog:\n\n2021-03-18  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_acle.h (__attribute__): Make intrinsic\n\tattributes consistent with those defined in arm_neon.h.", "tree": {"sha": "bd7b276467b7b61f7f908d9ba60f2e15f2488f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7b276467b7b61f7f908d9ba60f2e15f2488f53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a82f012c4a1c12468b154c59b817dc2d4d044c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a82f012c4a1c12468b154c59b817dc2d4d044c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a82f012c4a1c12468b154c59b817dc2d4d044c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a82f012c4a1c12468b154c59b817dc2d4d044c5/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67cf12a8171399a9e724a7eb6cc80908ed297eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cf12a8171399a9e724a7eb6cc80908ed297eaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67cf12a8171399a9e724a7eb6cc80908ed297eaa"}], "stats": {"total": 69, "additions": 46, "deletions": 23}, "files": [{"sha": "13f23632474b260122f30a3c566033664b0b5963", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a82f012c4a1c12468b154c59b817dc2d4d044c5/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a82f012c4a1c12468b154c59b817dc2d4d044c5/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=6a82f012c4a1c12468b154c59b817dc2d4d044c5", "patch": "@@ -35,7 +35,8 @@ extern \"C\" {\n \n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.3-a\")\n-__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __jcvt (double __a)\n {\n   return __builtin_aarch64_jcvtzs (__a);\n@@ -45,49 +46,57 @@ __jcvt (double __a)\n \n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.5-a\")\n-__extension__ static __inline float __attribute__ ((__always_inline__))\n+__extension__ extern __inline float\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint32zf (float __a)\n {\n   return __builtin_aarch64_frint32zsf (__a);\n }\n \n-__extension__ static __inline double __attribute__ ((__always_inline__))\n+__extension__ extern __inline double\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint32z (double __a)\n {\n   return __builtin_aarch64_frint32zdf (__a);\n }\n \n-__extension__ static __inline float __attribute__ ((__always_inline__))\n+__extension__ extern __inline float\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint64zf (float __a)\n {\n   return __builtin_aarch64_frint64zsf (__a);\n }\n \n-__extension__ static __inline double __attribute__ ((__always_inline__))\n+__extension__ extern __inline double\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint64z (double __a)\n {\n   return __builtin_aarch64_frint64zdf (__a);\n }\n \n-__extension__ static __inline float __attribute__ ((__always_inline__))\n+__extension__ extern __inline float\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint32xf (float __a)\n {\n   return __builtin_aarch64_frint32xsf (__a);\n }\n \n-__extension__ static __inline double __attribute__ ((__always_inline__))\n+__extension__ extern __inline double\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint32x (double __a)\n {\n   return __builtin_aarch64_frint32xdf (__a);\n }\n \n-__extension__ static __inline float __attribute__ ((__always_inline__))\n+__extension__ extern __inline float\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint64xf (float __a)\n {\n   return __builtin_aarch64_frint64xsf (__a);\n }\n \n-__extension__ static __inline double __attribute__ ((__always_inline__))\n+__extension__ extern __inline double\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rint64x (double __a)\n {\n   return __builtin_aarch64_frint64xdf (__a);\n@@ -100,49 +109,57 @@ __rint64x (double __a)\n \n #pragma GCC target (\"+nothing+crc\")\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32b (uint32_t __a, uint8_t __b)\n {\n   return __builtin_aarch64_crc32b (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32cb (uint32_t __a, uint8_t __b)\n {\n   return __builtin_aarch64_crc32cb (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32ch (uint32_t __a, uint16_t __b)\n {\n   return __builtin_aarch64_crc32ch (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32cw (uint32_t __a, uint32_t __b)\n {\n   return __builtin_aarch64_crc32cw (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32cd (uint32_t __a, uint64_t __b)\n {\n   return __builtin_aarch64_crc32cx (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32h (uint32_t __a, uint16_t __b)\n {\n   return __builtin_aarch64_crc32h (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32w (uint32_t __a, uint32_t __b)\n {\n   return __builtin_aarch64_crc32w (__a, __b);\n }\n \n-__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __crc32d (uint32_t __a, uint64_t __b)\n {\n   return __builtin_aarch64_crc32x (__a, __b);\n@@ -166,25 +183,29 @@ __crc32d (uint32_t __a, uint64_t __b)\n #define _TMFAILURE_INT        0x00800000u\n #define _TMFAILURE_TRIVIAL    0x01000000u\n \n-__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __tstart (void)\n {\n   return __builtin_aarch64_tstart ();\n }\n \n-__extension__ static __inline void __attribute__ ((__always_inline__))\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __tcommit (void)\n {\n   __builtin_aarch64_tcommit ();\n }\n \n-__extension__ static __inline void __attribute__ ((__always_inline__))\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __tcancel (const uint64_t __reason)\n {\n   __builtin_aarch64_tcancel (__reason);\n }\n \n-__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __ttest (void)\n {\n   return __builtin_aarch64_ttest ();\n@@ -195,13 +216,15 @@ __ttest (void)\n \n #pragma GCC push_options\n #pragma GCC target (\"+nothing+rng\")\n-__extension__ static __inline int __attribute__ ((__always_inline__))\n+__extension__ extern __inline int\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rndr (uint64_t *__res)\n {\n   return __builtin_aarch64_rndr (__res);\n }\n \n-__extension__ static __inline int __attribute__ ((__always_inline__))\n+__extension__ extern __inline int\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __rndrrs (uint64_t *__res)\n {\n   return __builtin_aarch64_rndrrs (__res);"}]}