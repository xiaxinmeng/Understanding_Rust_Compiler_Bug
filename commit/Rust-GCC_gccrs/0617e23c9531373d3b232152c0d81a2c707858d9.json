{"sha": "0617e23c9531373d3b232152c0d81a2c707858d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYxN2UyM2M5NTMxMzczZDNiMjMyMTUyYzBkODFhMmM3MDc4NThkOQ==", "commit": {"author": {"name": "Alejandro Martinez", "email": "alejandro.martinezvicente@arm.com", "date": "2019-05-29T14:12:02Z"}, "committer": {"name": "Alejandro Martinez", "email": "alejandro@gcc.gnu.org", "date": "2019-05-29T14:12:02Z"}, "message": "This patch implements the [u]avgM3_floor and [u]avgM3_ceil optabs for SVE2.\n\nFrom-SVN: r271739", "tree": {"sha": "474ae225558a832a916f9157ee792a05831a5f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/474ae225558a832a916f9157ee792a05831a5f22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0617e23c9531373d3b232152c0d81a2c707858d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0617e23c9531373d3b232152c0d81a2c707858d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0617e23c9531373d3b232152c0d81a2c707858d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0617e23c9531373d3b232152c0d81a2c707858d9/comments", "author": null, "committer": null, "parents": [{"sha": "ffeebc4ff1100a14f439314f90651b42e30fb81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffeebc4ff1100a14f439314f90651b42e30fb81a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffeebc4ff1100a14f439314f90651b42e30fb81a"}], "stats": {"total": 228, "additions": 227, "deletions": 1}, "files": [{"sha": "4452293257c5a6a877b8b258760769becd7f9c16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -1,3 +1,13 @@\n+2019-05-29  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c: Added TARGET_SVE2.\n+\t* config/aarch64/aarch64-sve2.md: New file.\n+\t(<u>avg<mode>3_floor): New pattern.\n+\t(<u>avg<mode>3_ceil): Likewise.\n+\t(*<sur>h<addsub><mode>): Likewise.\n+\t* config/aarch64/aarch64.h: Added AARCH64_ISA_SVE2 and TARGET_SVE2.\n+\t* config/aarch64/aarch64.md: Include aarch64-sve2.md.\n+\n 2019-05-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/90543"}, {"sha": "5af65b1d2f344842564b227a12f24ad04edd7271", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -146,6 +146,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n \tbits = 0;\n       builtin_define_with_int_value (\"__ARM_FEATURE_SVE_BITS\", bits);\n     }\n+  aarch64_def_or_undef (TARGET_SVE2, \"__ARM_FEATURE_SVE2\", pfile);\n \n   aarch64_def_or_undef (TARGET_LSE, \"__ARM_FEATURE_ATOMICS\", pfile);\n   aarch64_def_or_undef (TARGET_AES, \"__ARM_FEATURE_AES\", pfile);"}, {"sha": "d0c235b8c8a6e1621073d2a8a653004799462c4c", "filename": "gcc/config/aarch64/aarch64-sve2.md", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve2.md?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -0,0 +1,65 @@\n+;; Machine description for AArch64 SVE2.\n+;; Copyright (C) 2019 Free Software Foundation, Inc.\n+;; Contributed by ARM Ltd.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but\n+;; WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+;; General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Integer average (floor).\n+(define_expand \"<u>avg<mode>3_floor\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n+\t  [(match_dup 3)\n+\t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n+\t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n+\t\t\t HADD)]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+  }\n+)\n+\n+;; Integer average (rounding).\n+(define_expand \"<u>avg<mode>3_ceil\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n+\t  [(match_dup 3)\n+\t   (unspec:SVE_I [(match_operand:SVE_I 1 \"register_operand\")\n+\t\t\t  (match_operand:SVE_I 2 \"register_operand\")]\n+\t\t\t RHADD)]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE2\"\n+  {\n+    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+  }\n+)\n+\n+;; Predicated halving addsub.\n+(define_insn \"*<sur>h<addsub><mode>\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (unspec:SVE_I [(match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n+\t\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w\")]\n+\t\t\t HADDSUB)]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE2\"\n+  \"@\n+   <sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sur>h<addsub>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n\\ No newline at end of file"}, {"sha": "516f63689c4fe17ffcdde57f19dd101b8e34fb71", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -232,6 +232,7 @@ extern unsigned aarch64_architecture_version;\n #define AARCH64_ISA_V8_2\t   (aarch64_isa_flags & AARCH64_FL_V8_2)\n #define AARCH64_ISA_F16\t\t   (aarch64_isa_flags & AARCH64_FL_F16)\n #define AARCH64_ISA_SVE            (aarch64_isa_flags & AARCH64_FL_SVE)\n+#define AARCH64_ISA_SVE2\t   (aarch64_isa_flags & AARCH64_FL_SVE2)\n #define AARCH64_ISA_V8_3\t   (aarch64_isa_flags & AARCH64_FL_V8_3)\n #define AARCH64_ISA_DOTPROD\t   (aarch64_isa_flags & AARCH64_FL_DOTPROD)\n #define AARCH64_ISA_AES\t           (aarch64_isa_flags & AARCH64_FL_AES)\n@@ -277,6 +278,9 @@ extern unsigned aarch64_architecture_version;\n /* SVE instructions, enabled through +sve.  */\n #define TARGET_SVE (AARCH64_ISA_SVE)\n \n+/* SVE2 instructions, enabled through +sve2.  */\n+#define TARGET_SVE2 (AARCH64_ISA_SVE2)\n+\n /* ARMv8.3-A features.  */\n #define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3)\n "}, {"sha": "526c7fb0dabc540065d77d4a7922aeca16a402aa", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -7244,3 +7244,6 @@\n \n ;; SVE.\n (include \"aarch64-sve.md\")\n+\n+;; SVE2.\n+(include \"aarch64-sve2.md\")"}, {"sha": "a2d46357e3995b32fd4c3189a3f67ea11166de56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -1,3 +1,14 @@\n+2019-05-29  Alejandro Martinez  <alejandro.martinezvicente@arm.com>\n+\n+\t* gcc.target/aarch64/sve2/aarch64-sve2.exp: New file, regression driver\n+\tfor AArch64 SVE2.\n+\t* gcc.target/aarch64/sve2/average_1.c: New test.\n+\t* lib/target-supports.exp (check_effective_target_aarch64_sve2): New\n+\thelper.\n+\t(check_effective_target_aarch64_sve1_only): Likewise.\n+\t(check_effective_target_aarch64_sve2_hw): Likewise.\n+\t(check_effective_target_vect_avg_qi): Check for SVE1 only.\n+\n 2019-05-29  Sam Tebbs  <sam.tebbs@arm.com>\n \n \t* gcc.target/aarch64/return_address_sign_b_1.c: New file."}, {"sha": "557de27a81a38de5263bdde424ba298986be0e93", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/aarch64-sve2.exp", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faarch64-sve2.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faarch64-sve2.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faarch64-sve2.exp?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -0,0 +1,52 @@\n+#  Specific regression driver for AArch64 SVE2.\n+#  Copyright (C) 2009-2019 Free Software Foundation, Inc.\n+#  Contributed by ARM Ltd.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an AArch64 target.\n+if {![istarget aarch64*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Force SVE2 if we're not testing it already.\n+if { [check_effective_target_aarch64_sve2] } {\n+    set sve2_flags \"\"\n+} else {\n+    set sve2_flags \"-march=armv8.5-a+sve2\"\n+}\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+    $sve2_flags $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "3c007103380a337efdb980c621e8a0053b1210dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve2/average_1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faverage_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faverage_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve2%2Faverage_1.c?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define AVERAGE(TYPE, BIGGER, RND)\t\t\t\t\t  \\\n+TYPE __attribute__ ((noinline, noclone))\t\t\t\t  \\\n+avg_##TYPE##_##RND (TYPE *restrict x, TYPE *restrict y, TYPE *restrict z, \\\n+\t\t    int n)\t\t\t\t\t\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  for (int i = 0; i < n; i++)\t\t\t\t\t\t  \\\n+    {\t\t\t\t\t\t\t\t\t  \\\n+      z[i] = ((BIGGER)x[i] + y[i] + RND) >> 1;\t\t\t\t  \\\n+    }\t\t\t\t\t\t\t\t\t  \\\n+}\n+\n+AVERAGE (int8_t, int64_t, 0)\n+AVERAGE (int16_t, int64_t, 0)\n+AVERAGE (int32_t, int64_t, 0)\n+AVERAGE (uint8_t, uint64_t, 0)\n+AVERAGE (uint16_t, uint64_t, 0)\n+AVERAGE (uint32_t, uint64_t, 0)\n+AVERAGE (int8_t, int64_t, 1)\n+AVERAGE (int16_t, int64_t, 1)\n+AVERAGE (int32_t, int64_t, 1)\n+AVERAGE (uint8_t, uint64_t, 1)\n+AVERAGE (uint16_t, uint64_t, 1)\n+AVERAGE (uint32_t, uint64_t, 1)\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 12 \"vect\" } } */\n+\n+/* { dg-final { scan-assembler-times {\\tshadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tshadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tshadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuhadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuhadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuhadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tsrhadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsrhadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsrhadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\turhadd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\turhadd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\turhadd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "13c3a6a7157a941de152d6784efc004a3ebdbf03", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0617e23c9531373d3b232152c0d81a2c707858d9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0617e23c9531373d3b232152c0d81a2c707858d9", "patch": "@@ -3306,6 +3306,24 @@ proc check_effective_target_aarch64_sve { } {\n     }]\n }\n \n+# Return 1 if this is an AArch64 target supporting SVE2.\n+proc check_effective_target_aarch64_sve2 { } {\n+    if { ![istarget aarch64*-*-*] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages aarch64_sve2 assembly {\n+\t#if !defined (__ARM_FEATURE_SVE2)\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n+# Return 1 if this is an AArch64 target only supporting SVE (not SVE2).\n+proc check_effective_target_aarch64_sve1_only { } {\n+    return [expr { [check_effective_target_aarch64_sve]\n+\t\t   && ![check_effective_target_aarch64_sve2] }]\n+}\n+\n # Return the size in bits of an SVE vector, or 0 if the size is variable.\n proc aarch64_sve_bits { } {\n     return [check_cached_effective_target aarch64_sve_bits {\n@@ -4326,6 +4344,22 @@ proc check_effective_target_aarch64_sve_hw { } {\n     }]\n }\n \n+# Return true if this is an AArch64 target that can run SVE2 code.\n+\n+proc check_effective_target_aarch64_sve2_hw { } {\n+    if { ![istarget aarch64*-*-*] } {\n+\treturn 0\n+    }\n+    return [check_runtime aarch64_sve2_hw_available {\n+\tint\n+\tmain (void)\n+\t{\n+\t  asm volatile (\"addp z0.b, p0/m, z0.b, z1.b\");\n+\t  return 0;\n+\t}\n+    }]\n+}\n+\n # Return true if this is an AArch64 target that can run SVE code and\n # if its SVE vectors have exactly BITS bits.\n \n@@ -6063,7 +6097,7 @@ proc check_effective_target_vect_usad_char { } {\n \n proc check_effective_target_vect_avg_qi {} {\n     return [expr { [istarget aarch64*-*-*]\n-\t\t   && ![check_effective_target_aarch64_sve] }]\n+\t\t   && ![check_effective_target_aarch64_sve1_only] }]\n }\n \n # Return 1 if the target plus current options supports a vector"}]}