{"sha": "847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3ZWI1NTE2ZmFkNjU4ZGZkZjlkMWQ0YjVlYzJlZWM1ZTYyOGZkZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2008-02-15T22:55:14Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2008-02-15T22:55:14Z"}, "message": "types.h: Move enum parallelism here.\n\n2008-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/parallel/types.h: Move enum parallelism here.  Use\n\ttr1/cstdint's int16_t, uint16_t, int32_t, uint32_t, int64_t,\n\tuint64_t. \n\t* include/parallel/multiseq_selection.h: Adjust for cstdint.\n\t* include/parallel/compatibility.h: Same.\n\t* include/parallel/tags.h: Just compile-time tags.\n\t* include/parallel/base.h: Put namespace bits here.\n\n\t* src/Makefile.am (PARALLEL_FLAGS): Use it.\n\t* src/Makefile.in: Regenerate.\n\n\t* testsuite/25_algorithms/nth_element/1.cc: Add test variable.\n\nFrom-SVN: r132354", "tree": {"sha": "9f3bbe671a305300df03669d118aef62e91ed107", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f3bbe671a305300df03669d118aef62e91ed107"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/comments", "author": null, "committer": null, "parents": [{"sha": "750606c6b235a3d7e1d5fcdfbc5f3f1f68efcefe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750606c6b235a3d7e1d5fcdfbc5f3f1f68efcefe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750606c6b235a3d7e1d5fcdfbc5f3f1f68efcefe"}], "stats": {"total": 378, "additions": 221, "deletions": 157}, "files": [{"sha": "05b5e7d99f4bdd2cb02f5175927400f4daf8b1cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -1,3 +1,18 @@\n+2008-02-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/parallel/types.h: Move enum parallelism here.  Use\n+\ttr1/cstdint's int16_t, uint16_t, int32_t, uint32_t, int64_t,\n+\tuint64_t. \n+\t* include/parallel/multiseq_selection.h: Adjust for cstdint.\n+\t* include/parallel/compatibility.h: Same.\n+\t* include/parallel/tags.h: Just compile-time tags.\n+\t* include/parallel/base.h: Put namespace bits here.\n+\n+\t* src/Makefile.am (PARALLEL_FLAGS): Use it.\n+\t* src/Makefile.in: Regenerate.\n+\n+\t* testsuite/25_algorithms/nth_element/1.cc: Add test variable.\n+\n 2008-02-15  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* testsuite/config/default.exp: Load gcc dejapatches.exp.\n@@ -20,7 +35,7 @@\n 2008-02-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/mainpage.html: Correct links.\n-\t\n+\n 2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/html/*: Populate with regenerated files.\n@@ -30,7 +45,7 @@\n \t* doc/html/*: Remove all but contents of ext/pb_ds.\n \t* doc/html/index.html: New.\n \t* doc/html/README: New.\n-\t\n+\n 2008-02-11  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/doxygen/mainpage.html: Add in corrected links.\n@@ -40,7 +55,7 @@\n \t* doc/xml/spine.xml: Edit file names.\n \t* doc/Makefile.am: Edit xml_sources.\n \t* doc/Makefile.in: Regenerate.\n-\t\n+\n 2008-02-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* configure: Regenerate with documented autoconf and automake\n@@ -134,13 +149,13 @@\n \n \t* doc/doxygen/guide.html: Removed, integrated into other docs.\n \t* doc/doxygen/user.cfg.in: Clean up XML generation.\n-\t* doc/doxygen/run_doxygen: Move to..\t\n+\t* doc/doxygen/run_doxygen: Move to..\n \t* scripts/run_doxygen: ...here.\n-\t\n+\n \t* configure: Regenerate.\n \t* Makefile.in: Regenerate.\n \t* src/Makefile.in: Regenerate.\n-\t* doc/Makefile.in: Regenerate.\t\n+\t* doc/Makefile.in: Regenerate.\n \t* po/Makefile.in: Regenerate.\n \t* libmath/Makefile.in: Regenerate.\n \t* include/Makefile.in: Regenerate.\n@@ -162,7 +177,7 @@\n \t* testsuite/27_io/basic_iostream/cons/2020.cc: Minor tweaks.\n \n 2008-01-31  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n-    \n+\n \t* include/backward/auto_ptr.h: Fix comment typos.\n \t* include/bits/algorithmfwd.h: Likewise.\n \t* include/bits/basic_ios.h: Likewise.\n@@ -309,7 +324,7 @@\n \t* doc/doxygen/run_doxygen: Same, more namespace fixups for man\n \tgeneration.\n \t* doc/doxygen/user.cfg.in: Update for doxygen 1.5.4.\n-\t\n+\n \t* include/tr1_impl/random: Remove maint from doxygen markup.\n \t* include/tr1_impl/functional: Same.\n \t* include/std/tuple: Same.\n@@ -343,7 +358,7 @@\n \t* include/backward/auto_ptr.h: Same.\n \n \t* testsuite/23_containers/vector/requirements/dr438/assign_neg.cc:\n-\tFixups for line number changes.\t\n+\tFixups for line number changes.\n \t* testsuite/23_containers/vector/requirements/dr438/insert_neg.cc: Same.\n \t* testsuite/23_containers/vector/requirements/dr438/\n \tconstructor_1_neg.cc: Same.\n@@ -375,7 +390,7 @@\n \t* testsuite/Makefile.in: Regenerate.\n \n \t* scripts/make_graphs.py: Correct paths for new layout.\n-\t\n+\n 2008-01-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (AC_LC_MESSAGES): Remove serial."}, {"sha": "23ad7d6b43c4fde2349134fda185dc682447bb91", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -44,6 +44,37 @@\n #include <parallel/parallel.h>\n #include <cstdio>\n \n+\n+// Parallel mode namespaces.\n+namespace std \n+{ \n+  namespace __parallel { } \n+}\n+\n+/**\n+ * @namespace __gnu_parallel\n+ * @brief GNU parallel classes for public use.\n+ */\n+namespace __gnu_parallel\n+{\n+  // Import all the parallel versions of components in namespace std.\n+  using namespace std::__parallel;\n+}\n+\n+/**\n+ * @namespace __gnu_sequential\n+ * @brief GNU sequential classes for public use.\n+ */\n+namespace __gnu_sequential \n+{ \n+#ifdef _GLIBCXX_PARALLEL\n+  using namespace std::__norm;\n+#else\n+  using namespace std;\n+#endif   \n+}\n+\n+\n namespace __gnu_parallel\n {\n   // XXX remove std::duplicates from here if possible,\n@@ -357,8 +388,8 @@ template<typename T, typename _DifferenceTp>\n   public:\n     typedef _DifferenceTp difference_type;\n \n-    // Better case down to uint64, than up to _DifferenceTp.\n-    typedef pseudo_sequence_iterator<T, uint64> iterator;\n+    // Better case down to uint64_t, than up to _DifferenceTp.\n+    typedef pseudo_sequence_iterator<T, uint64_t> iterator;\n \n     /** @brief Constructor.\n       *  @param val Element of the sequence.\n@@ -437,8 +468,8 @@ __replacement_assert(const char* __file, int __line,\n #define _GLIBCXX_PARALLEL_ASSERT(_Condition)                            \\\n do \t\t\t\t\t\t\t\t        \\\n   {\t\t\t\t\t\t\t\t\t\\\n-    if (!(_Condition))\t\t\t\t\t\t\\\n-      __gnu_parallel::__replacement_assert(__FILE__, __LINE__,\t\\\n+    if (!(_Condition))\t\t\t\t\t\t   \t\\\n+      __gnu_parallel::__replacement_assert(__FILE__, __LINE__,\t\t\\\n                                   __PRETTY_FUNCTION__, #_Condition);\t\\\n   } while (false)\n "}, {"sha": "849849bbd670b17ddaad2eccf471a3332934ae25", "filename": "libstdc++-v3/include/parallel/compatibility.h", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fcompatibility.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -68,7 +68,7 @@ namespace __gnu_parallel\n {\n #if defined(__ICC)\n   template<typename must_be_int = int>\n-  int32 faa32(int32* x, int32 inc)\n+  int32_t faa32(int32_t* x, int32_t inc)\n   {\n     asm volatile(\"lock xadd %0,%1\"\n \t\t : \"=r\" (inc), \"=m\" (*x)\n@@ -78,7 +78,7 @@ namespace __gnu_parallel\n   }\n #if defined(__x86_64)\n   template<typename must_be_int = int>\n-  int64 faa64(int64* x, int64 inc)\n+  int64_t faa64(int64_t* x, int64_t inc)\n   {\n     asm volatile(\"lock xadd %0,%1\"\n \t\t : \"=r\" (inc), \"=m\" (*x)\n@@ -97,8 +97,8 @@ namespace __gnu_parallel\n    *  @param ptr Pointer to a 32-bit signed integer.\n    *  @param addend Value to add.\n    */\n-  inline int32\n-  fetch_and_add_32(volatile int32* ptr, int32 addend)\n+  inline int32_t\n+  fetch_and_add_32(volatile int32_t* ptr, int32_t addend)\n   {\n #if defined(__ICC)\t//x86 version\n     return _InterlockedExchangeAdd((void*)ptr, addend);\n@@ -110,7 +110,7 @@ namespace __gnu_parallel\n #elif defined(__GNUC__)\n     return __sync_fetch_and_add(ptr, addend);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n-    volatile int32 before, after;\n+    volatile int32_t before, after;\n     do\n       {\n \tbefore = *ptr;\n@@ -120,7 +120,7 @@ namespace __gnu_parallel\n     return before;\n #else\t//fallback, slow\n #pragma message(\"slow fetch_and_add_32\")\n-    int32 res;\n+    int32_t res;\n #pragma omp critical\n     {\n       res = *ptr;\n@@ -136,11 +136,11 @@ namespace __gnu_parallel\n    *  @param ptr Pointer to a 64-bit signed integer.\n    *  @param addend Value to add.\n    */\n-  inline int64\n-  fetch_and_add_64(volatile int64* ptr, int64 addend)\n+  inline int64_t\n+  fetch_and_add_64(volatile int64_t* ptr, int64_t addend)\n   {\n #if defined(__ICC) && defined(__x86_64)\t//x86 version\n-    return faa64<int>((int64*)ptr, addend);\n+    return faa64<int>((int64_t*)ptr, addend);\n #elif defined(__ECC)\t//IA-64 version\n     return _InterlockedExchangeAdd64((void*)ptr, addend);\n #elif defined(__ICL) || defined(_MSC_VER)\n@@ -156,7 +156,7 @@ namespace __gnu_parallel\n   (defined(__i686) || defined(__pentium4) || defined(__athlon))\n     return __sync_fetch_and_add(ptr, addend);\n #elif defined(__SUNPRO_CC) && defined(__sparc)\n-    volatile int64 before, after;\n+    volatile int64_t before, after;\n     do\n       {\n \tbefore = *ptr;\n@@ -170,7 +170,7 @@ namespace __gnu_parallel\n     //#warning \"please compile with -march=i686 or better\"\n #endif\n #pragma message(\"slow fetch_and_add_64\")\n-    int64 res;\n+    int64_t res;\n #pragma omp critical\n     {\n       res = *ptr;\n@@ -190,10 +190,10 @@ namespace __gnu_parallel\n   inline T\n   fetch_and_add(volatile T* ptr, T addend)\n   {\n-    if (sizeof(T) == sizeof(int32))\n-      return (T)fetch_and_add_32((volatile int32*) ptr, (int32)addend);\n-    else if (sizeof(T) == sizeof(int64))\n-      return (T)fetch_and_add_64((volatile int64*) ptr, (int64)addend);\n+    if (sizeof(T) == sizeof(int32_t))\n+      return (T)fetch_and_add_32((volatile int32_t*) ptr, (int32_t)addend);\n+    else if (sizeof(T) == sizeof(int64_t))\n+      return (T)fetch_and_add_64((volatile int64_t*) ptr, (int64_t)addend);\n     else\n       _GLIBCXX_PARALLEL_ASSERT(false);\n   }\n@@ -202,10 +202,10 @@ namespace __gnu_parallel\n #if defined(__ICC)\n \n   template<typename must_be_int = int>\n-  inline int32\n-  cas32(volatile int32* ptr, int32 old, int32 nw)\n+  inline int32_t\n+  cas32(volatile int32_t* ptr, int32_t old, int32_t nw)\n   {\n-    int32 before;\n+    int32_t before;\n     __asm__ __volatile__(\"lock; cmpxchgl %1,%2\"\n \t\t\t : \"=a\"(before)\n \t\t\t : \"q\"(nw), \"m\"(*(volatile long long*)(ptr)), \"0\"(old)\n@@ -215,10 +215,10 @@ namespace __gnu_parallel\n \n #if defined(__x86_64)\n   template<typename must_be_int = int>\n-  inline int64\n-  cas64(volatile int64 *ptr, int64 old, int64 nw)\n+  inline int64_t\n+  cas64(volatile int64_t *ptr, int64_t old, int64_t nw)\n   {\n-    int64 before;\n+    int64_t before;\n     __asm__ __volatile__(\"lock; cmpxchgq %1,%2\"\n \t\t\t : \"=a\"(before)\n \t\t\t : \"q\"(nw), \"m\"(*(volatile long long*)(ptr)), \"0\"(old)\n@@ -238,7 +238,7 @@ namespace __gnu_parallel\n    *  @param replacement Replacement value.\n    */\n   inline bool\n-  compare_and_swap_32(volatile int32* ptr, int32 comparand, int32 replacement)\n+  compare_and_swap_32(volatile int32_t* ptr, int32_t comparand, int32_t replacement)\n   {\n #if defined(__ICC)\t//x86 version\n     return _InterlockedCompareExchange((void*)ptr, replacement,\n@@ -278,7 +278,7 @@ namespace __gnu_parallel\n    *  @param replacement Replacement value.\n    */\n   inline bool\n-  compare_and_swap_64(volatile int64* ptr, int64 comparand, int64 replacement)\n+  compare_and_swap_64(volatile int64_t* ptr, int64_t comparand, int64_t replacement)\n   {\n #if defined(__ICC) && defined(__x86_64)\t//x86 version\n     return cas64<int>(ptr, comparand, replacement) == comparand;\n@@ -332,12 +332,10 @@ namespace __gnu_parallel\n   inline bool\n   compare_and_swap(volatile T* ptr, T comparand, T replacement)\n   {\n-    if (sizeof(T) == sizeof(int32))\n-      return compare_and_swap_32((volatile int32*) ptr,\n-\t\t\t\t (int32)comparand, (int32)replacement);\n-    else if (sizeof(T) == sizeof(int64))\n-      return compare_and_swap_64((volatile int64*) ptr,\n-\t\t\t\t (int64)comparand, (int64)replacement);\n+    if (sizeof(T) == sizeof(int32_t))\n+      return compare_and_swap_32((volatile int32_t*) ptr, (int32_t)comparand, (int32_t)replacement);\n+    else if (sizeof(T) == sizeof(int64_t))\n+      return compare_and_swap_64((volatile int64_t*) ptr, (int64_t)comparand, (int64_t)replacement);\n     else\n       _GLIBCXX_PARALLEL_ASSERT(false);\n   }"}, {"sha": "88d2a509b818d6f1f1c215bc6537264543fe800d", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -67,7 +67,6 @@ namespace __gnu_parallel\n     public:\n       lexicographic(Comparator& _comp) : comp(_comp) { }\n \n-      // XXX const\n       bool\n       operator()(const std::pair<T1, T2>& p1,\n \t\t const std::pair<T1, T2>& p2) const\n@@ -265,7 +264,7 @@ namespace __gnu_parallel\n \t    }\n \t  \n \t  difference_type skew = static_cast<difference_type>\n-\t    (static_cast<uint64>(total) * rank / N - leftsize);\n+\t    (static_cast<uint64_t>(total) * rank / N - leftsize);\n \n \t  if (skew > 0)\n \t    {"}, {"sha": "5eb24625dd2424b8513285d12813d63312a9f7da", "filename": "libstdc++-v3/include/parallel/random_number.h", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_number.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -330,44 +330,44 @@ namespace __gnu_parallel\n     }\n \n \n-  typedef mersenne_twister<uint32,32,351,175,19,0xccab8ee7,11,\n+  typedef mersenne_twister<uint32_t,32,351,175,19,0xccab8ee7,11,\n \t\t\t   7,0x31b6ab00,15,0xffe50000,17, 0xa37d3c92> mt11213b;\n \n   // validation by experiment from mt19937.c\n-  typedef mersenne_twister<uint32,32,624,397,31,0x9908b0df,11,\n+  typedef mersenne_twister<uint32_t,32,624,397,31,0x9908b0df,11,\n \t\t\t   7,0x9d2c5680,15,0xefc60000,18, 3346425566U> mt19937;\n \n   /** @brief Random number generator, based on the Mersenne twister. */\n   class random_number\n   {\n   private:\n     mt19937 mt;\n-    uint64 supremum, RAND_SUP;\n+    uint64_t supremum, RAND_SUP;\n     double supremum_reciprocal, RAND_SUP_REC;\n \n-    uint64 cache;  /* assumed to be twice as long as the usual random number */\n+    uint64_t cache;  /* assumed to be twice as long as the usual random number */\n     int bits_left; /* bit results */\n \n-    static uint32\n-    scale_down(uint64 x,\n+    static uint32_t\n+    scale_down(uint64_t x,\n #if _GLIBCXX_SCALE_DOWN_FPU\n-\t       uint64 /*supremum*/, double supremum_reciprocal)\n+\t       uint64_t /*supremum*/, double supremum_reciprocal)\n #else\n-               uint64 supremum, double /*supremum_reciprocal*/)\n+               uint64_t supremum, double /*supremum_reciprocal*/)\n #endif\n \t{\n #if _GLIBCXX_SCALE_DOWN_FPU\n-\t  return (uint32)(x * supremum_reciprocal);\n+\t  return (uint32_t)(x * supremum_reciprocal);\n #else\n-\t  return static_cast<uint32>(x % supremum);\n+\t  return static_cast<uint32_t>(x % supremum);\n #endif\n \t}\n \n   public:\n     /** @brief Default constructor. Seed with 0. */\n     random_number()\n     : mt(0), supremum(0x100000000ULL),\n-      RAND_SUP(1ULL << (sizeof(uint32) * 8)),\n+      RAND_SUP(1ULL << (sizeof(uint32_t) * 8)),\n       supremum_reciprocal((double)supremum / (double)RAND_SUP),\n       RAND_SUP_REC(1.0 / (double)RAND_SUP),\n       cache(0), bits_left(0) { }\n@@ -376,22 +376,22 @@ namespace __gnu_parallel\n      *  @param seed Random seed.\n      *  @param supremum Generate integer random numbers in the\n      *                  interval @c [0,supremum). */\n-    random_number(uint32 seed, uint64 supremum = 0x100000000ULL)\n+    random_number(uint32_t seed, uint64_t supremum = 0x100000000ULL)\n     : mt(seed), supremum(supremum),\n-      RAND_SUP(1ULL << (sizeof(uint32) * 8)),\n+      RAND_SUP(1ULL << (sizeof(uint32_t) * 8)),\n       supremum_reciprocal((double)supremum / (double)RAND_SUP),\n       RAND_SUP_REC(1.0 / (double)RAND_SUP),\n       cache(0), bits_left(0) { }\n \n     /** @brief Generate unsigned random 32-bit integer. */\n-    uint32\n+    uint32_t\n     operator()()\n     { return scale_down(mt(), supremum, supremum_reciprocal); }\n \n     /** @brief Generate unsigned random 32-bit integer in the\n \tinterval @c [0,local_supremum). */\n-    uint32\n-    operator()(uint64 local_supremum)\n+    uint32_t\n+    operator()(uint64_t local_supremum)\n     {\n       return scale_down(mt(), local_supremum,\n \t\t\t(double)local_supremum * RAND_SUP_REC);\n@@ -400,7 +400,7 @@ namespace __gnu_parallel\n     /** @brief Set the random seed.\n      *  @param seed to set. */\n     void\n-    set_seed(uint32 seed)\n+    set_seed(uint32_t seed)\n     {\n       mt.seed(seed);\n       cache = mt();\n@@ -417,7 +417,7 @@ namespace __gnu_parallel\n \tbits_left -= bits;\n \tif (bits_left < 32)\n \t  {\n-\t    cache |= (((uint64)mt()) << bits_left);\n+\t    cache |= (((uint64_t)mt()) << bits_left);\n \t    bits_left += 32;\n \t  }\n \treturn res;\n@@ -433,7 +433,7 @@ namespace __gnu_parallel\n       bits_left -= bits;\n       if (bits_left < 32)\n \t{\n-\t  cache |= (((uint64)mt()) << bits_left);\n+\t  cache |= (((uint64_t)mt()) << bits_left);\n \t  bits_left += 32;\n \t}\n       return res;"}, {"sha": "2b7178925079c6f8cec54f49f64194295594d1c1", "filename": "libstdc++-v3/include/parallel/random_shuffle.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Frandom_shuffle.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -106,7 +106,7 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n     bin_index bins_end;\n \n     /** @brief Random seed for this thread. */\n-    uint32 seed;\n+    uint32_t seed;\n \n     /** @brief Pointer to global data. */\n     DRandomShufflingGlobalData<RandomAccessIterator>* sd;\n@@ -368,7 +368,7 @@ template<typename RandomAccessIterator, typename RandomNumberGenerator>\n                 for (; j < bin_cursor; ++j)\n                   sd.bin_proc[j] = i;\n                 pus[i].num_threads = num_threads;\n-                pus[i].seed = rng(std::numeric_limits<uint32>::max());\n+                pus[i].seed = rng(std::numeric_limits<uint32_t>::max());\n                 pus[i].sd = &sd;\n               }\n             starts[num_threads] = start;"}, {"sha": "1389aed4b066133066e55ad065cad5b53db4447c", "filename": "libstdc++-v3/include/parallel/tags.h", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftags.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -30,7 +30,7 @@\n \n /**\n  * @file parallel/tags.h\n- * @brief Tags for compile-time options.\n+ * @brief Tags for compile-time selection.\n  *  This file is a GNU parallel extension to the Standard C++ Library.\n  */\n \n@@ -39,59 +39,8 @@\n #ifndef _GLIBCXX_PARALLEL_TAGS_H\n #define _GLIBCXX_PARALLEL_TAGS_H 1\n \n-// Parallel mode namespaces.\n-namespace std \n-{ \n-  namespace __parallel { } \n-}\n-\n-/**\n- * @namespace __gnu_sequential\n- * @brief GNU sequential classes for public use.\n- */\n-namespace __gnu_sequential \n-{ \n-#ifdef _GLIBCXX_PARALLEL\n-  using namespace std::__norm;\n-#else\n-  using namespace std;\n-#endif   \n-}\n-\n-/**\n- * @namespace __gnu_parallel\n- * @brief GNU parallel classes for public use.\n- */\n namespace __gnu_parallel\n {\n-  // Import all the parallel versions of components in namespace std.\n-  using namespace std::__parallel;\n-\n-  enum parallelism\n-    {\n-      /// Not parallel.\n-      sequential,\n-\n-      /// Parallel unbalanced (equal-sized chunks).\n-      parallel_unbalanced,\n-\n-      /// Parallel balanced (work-stealing).\n-      parallel_balanced,\n-\n-      /// Parallel with OpenMP dynamic load-balancing.\n-      parallel_omp_loop,\n-\n-      /// Parallel with OpenMP static load-balancing.\n-      parallel_omp_loop_static,\n-\n-      /// Parallel with OpenMP taskqueue construct.\n-      parallel_taskqueue\n-    };\n-\n-  inline bool \n-  is_parallel(const parallelism __p) { return __p != sequential; }\n-\n-\n   /** @brief Forces sequential execution at compile time. */\n   struct sequential_tag { };\n \n@@ -115,6 +64,7 @@ namespace __gnu_parallel\n   struct omp_loop_static_tag : public parallel_tag { };\n \n \n+  // XXX settings.h Settings::FindDistribution\n   /** @brief Selects the growing block size variant for std::find().\n       @see _GLIBCXX_FIND_GROWING_BLOCKS */\n   struct growing_blocks_tag { };"}, {"sha": "2f0e459540006566d6686a280a2838fdd1561bd2", "filename": "libstdc++-v3/include/parallel/types.h", "status": "modified", "additions": 99, "deletions": 30, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Ftypes.h?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -29,7 +29,7 @@\n // Public License.\n \n /** @file parallel/types.h\n- *  @brief Basic typedefs.\n+ *  @brief Basic types and typedefs.\n  *  This file is a GNU parallel extension to the Standard C++ Library.\n  */\n \n@@ -39,51 +39,120 @@\n #define _GLIBCXX_PARALLEL_TYPES_H 1\n \n #include <cstdlib>\n+#include <tr1/cstdint>\n \n namespace __gnu_parallel\n {\n-  // XXX need to use <cstdint>\n-  /** @brief 8-bit signed integer. */\n-  typedef char int8;\n-\n-  /** @brief 8-bit unsigned integer. */\n-  typedef unsigned char uint8;\n-\n-  /** @brief 16-bit signed integer. */\n-  typedef short int16;\n-\n-  /** @brief 16-bit unsigned integer. */\n-  typedef unsigned short uint16;\n-\n-  /** @brief 32-bit signed integer. */\n-  typedef int int32;\n-\n-  /** @brief 32-bit unsigned integer. */\n-  typedef unsigned int uint32;\n-\n-  /** @brief 64-bit signed integer. */\n-  typedef long long int64;\n-\n-  /** @brief 64-bit unsigned integer. */\n-  typedef unsigned long long uint64;\n+  // Enumerated types.\n+\n+  /// @brief Run-time equivalents for the compile-time tags.\n+  enum parallelism\n+    {\n+      /// Not parallel.\n+      sequential,\n+\n+      /// Parallel unbalanced (equal-sized chunks).\n+      parallel_unbalanced,\n+\n+      /// Parallel balanced (work-stealing).\n+      parallel_balanced,\n+\n+      /// Parallel with OpenMP dynamic load-balancing.\n+      parallel_omp_loop,\n+\n+      /// Parallel with OpenMP static load-balancing.\n+      parallel_omp_loop_static,\n+\n+      /// Parallel with OpenMP taskqueue construct.\n+      parallel_taskqueue\n+    };\n+\n+  inline bool \n+  is_parallel(const parallelism __p) { return __p != sequential; }\n+\n+  /// @brief Sorting algorithms: multi-way mergesort, quicksort,\n+  /// load-balanced quicksort.\n+  enum SortAlgorithm \n+    { \n+      MWMS, \n+      QS, \n+      QS_BALANCED \n+    };\n+\n+  /// @brief Merging algorithms: bubblesort-alike, loser-tree\n+  /// variants, enum sentinel.\n+  enum MultiwayMergeAlgorithm\n+    { \n+      BUBBLE, \n+      LOSER_TREE_EXPLICIT, \n+      LOSER_TREE, \n+      LOSER_TREE_COMBINED, \n+      LOSER_TREE_SENTINEL, \n+      MWM_ALGORITHM_LAST \n+    };\n+  \n+  /// @brief Partial sum algorithms: recursive, linear.\n+  enum PartialSumAlgorithm \n+    { \n+      RECURSIVE, \n+      LINEAR \n+    };\n+\n+  /// @brief Splitting strategies for sorting/merging: sampling, exact.\n+  enum Splitting \n+    { \n+      SAMPLING, \n+      EXACT \n+    };\n+\n+  /// @brief Find distribution strategies: growing blocks, equal-sized\n+  /// blocks, equal splitting.\n+  enum FindDistribution \n+    { \n+      GROWING_BLOCKS, \n+      CONSTANT_SIZE_BLOCKS, \n+      EQUAL_SPLIT \n+    };\n+\n+  /// @brief Strategies for run-time algorithm selection:\n+  /// force_sequential, force_parallel, heuristic.\n+  enum AlgorithmSelection\n+    {\n+      heuristic,\n+      force_sequential,\n+      force_parallel\n+    };\n+\n+\n+  /// Integer Types.\n+  using std::tr1::int16_t;\n+  using std::tr1::uint16_t;\n+\n+  using std::tr1::int32_t;\n+  using std::tr1::uint32_t;\n+\n+  using std::tr1::int64_t;\n+  using std::tr1::uint64_t;\n \n   /**\n    * @brief Unsigned integer to index elements.\n    * The total number of elements for each algorithm must fit into this type.\n    */\n-  typedef uint64 sequence_index_t;\n+  typedef uint64_t sequence_index_t;\n \n   /**\n    * @brief Unsigned integer to index a thread number.\n    * The maximum thread number (for each processor) must fit into this type.\n    */\n-  typedef uint16 thread_index_t;\n+  typedef uint16_t thread_index_t;\n \n+  // XXX atomics interface?\n   /**\n    * @brief Longest compare-and-swappable integer type on this platform.\n    */\n-  typedef int64 lcas_t;\n+  typedef int64_t lcas_t;\n \n+  // XXX numeric_limits::digits?\n   /**\n    * @brief Number of bits of ::lcas_t.\n    */\n@@ -92,7 +161,7 @@ namespace __gnu_parallel\n   /**\n    * @brief ::lcas_t with the right half of bits set to 1.\n    */\n-  static const lcas_t lcas_t_mask = (((lcas_t)1 << (lcas_t_bits / 2)) - 1);\n+  static const lcas_t lcas_t_mask = ((lcas_t(1) << (lcas_t_bits / 2)) - 1);\n }\n \n #endif /* _GLIBCXX_TYPES_H */"}, {"sha": "9bc4b5572147436075c1c849fe4d39bd724ad0b9", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -214,11 +214,12 @@ concept-inst.lo: concept-inst.cc\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n \n-# Use special rules for parallel_list.cc compile.\n+# Use special rules for parallel mode compilation.\n+PARALLEL_FLAGS = -fopenmp -D_GLIBCXX_PARALLEL -I$(glibcxx_builddir)/../libgomp\n parallel_list.lo: parallel_list.cc\n-\t$(LTCXXCOMPILE) -I$(glibcxx_builddir)/../libgomp -c $<\n+\t$(LTCXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n parallel_list.o: parallel_list.cc\n-\t$(CXXCOMPILE) -I$(glibcxx_builddir)/../libgomp -c $<\n+\t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n # Use special rules for the C++0x sources so that the proper flags are passed.\n system_error.lo: system_error.cc"}, {"sha": "71ddb74845252ed81a68c22777e65a821dfc0a7e", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -429,6 +429,9 @@ libstdc___la_LDFLAGS = \\\n # deprecated include files.\n GLIBCXX_INCLUDE_DIR = $(glibcxx_builddir)/include\n \n+# Use special rules for parallel mode compilation.\n+PARALLEL_FLAGS = -fopenmp -D_GLIBCXX_PARALLEL -I$(glibcxx_builddir)/../libgomp\n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after\n@@ -802,12 +805,10 @@ concept-inst.lo: concept-inst.cc\n \t$(LTCXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n concept-inst.o: concept-inst.cc\n \t$(CXXCOMPILE) -D_GLIBCXX_CONCEPT_CHECKS -fimplicit-templates -c $<\n-\n-# Use special rules for parallel_list.cc compile.\n parallel_list.lo: parallel_list.cc\n-\t$(LTCXXCOMPILE) -I$(glibcxx_builddir)/../libgomp -c $<\n+\t$(LTCXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n parallel_list.o: parallel_list.cc\n-\t$(CXXCOMPILE) -I$(glibcxx_builddir)/../libgomp -c $<\n+\t$(CXXCOMPILE) $(PARALLEL_FLAGS) -c $<\n \n # Use special rules for the C++0x sources so that the proper flags are passed.\n system_error.lo: system_error.cc"}, {"sha": "e038459a3df2c292a44b873c337b219462b43303", "filename": "libstdc++-v3/src/parallel_list.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Fsrc%2Fparallel_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Fsrc%2Fparallel_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fparallel_list.cc?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -27,6 +27,4 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#define _GLIBCXX_PARALLEL \n-\n #include \"list.cc\""}, {"sha": "2304d3634b9d538617967b599c646e26b9b953fc", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc?ref=847eb5516fad658dfdf9d1d4b5ec2eec5e628fdd", "patch": "@@ -49,6 +49,7 @@ test2()\n void \n test3()\n {\n+  bool test __attribute__((unused)) = true;\n   int array[] = {6, 5, 4, 3, 2, 1, 0};\n   Container con(array, array + 7);\n   nth_element(con.begin(), con.it(3), con.end());\n@@ -61,6 +62,7 @@ test3()\n void \n test4()\n {\n+  bool test __attribute__((unused)) = true;\n   int array[] = {0, 6, 1, 5, 2, 4, 3};\n   Container con(array,array + 7);\n   nth_element(con.begin(), con.it(3), con.end());"}]}