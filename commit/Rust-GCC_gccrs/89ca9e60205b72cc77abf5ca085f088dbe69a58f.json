{"sha": "89ca9e60205b72cc77abf5ca085f088dbe69a58f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljYTllNjAyMDViNzJjYzc3YWJmNWNhMDg1ZjA4OGRiZTY5YTU4Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-15T20:35:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-15T20:35:57Z"}, "message": "Check errors in binary comparisons and builtin calls.\n\nFrom-SVN: r167872", "tree": {"sha": "65d0047ae1d5a09230038c6dd7d83b9214c9802b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d0047ae1d5a09230038c6dd7d83b9214c9802b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89ca9e60205b72cc77abf5ca085f088dbe69a58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ca9e60205b72cc77abf5ca085f088dbe69a58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ca9e60205b72cc77abf5ca085f088dbe69a58f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ca9e60205b72cc77abf5ca085f088dbe69a58f/comments", "author": null, "committer": null, "parents": [{"sha": "79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cae72e5db5f65ba3dc5ebdb3e8c8063a0c47aa"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "7de4ec93c1de0068c06c95ca94bd7148c19d47d5", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89ca9e60205b72cc77abf5ca085f088dbe69a58f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89ca9e60205b72cc77abf5ca085f088dbe69a58f/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=89ca9e60205b72cc77abf5ca085f088dbe69a58f", "patch": "@@ -6109,6 +6109,9 @@ Expression::comparison_tree(Translate_context* context, Operator op,\n \t}\n     }\n \n+  if (left_tree == error_mark_node || right_tree == error_mark_node)\n+    return error_mark_node;\n+\n   tree ret = fold_build2(code, boolean_type_node, left_tree, right_tree);\n   if (CAN_HAVE_LOCATION_P(ret))\n     SET_EXPR_LOCATION(ret, location);\n@@ -7380,6 +7383,9 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t      gcc_unreachable();\n \t  }\n \n+\tif (val_tree == error_mark_node)\n+\t  return error_mark_node;\n+\n \ttree type_tree = Type::lookup_integer_type(\"int\")->get_tree(gogo);\n \tif (type_tree == TREE_TYPE(val_tree))\n \t  return val_tree;\n@@ -7506,7 +7512,8 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t\t\t\t\t       void_type_node,\n \t\t\t\t\t       TREE_TYPE(arg),\n \t\t\t\t\t       arg);\n-\t\tappend_to_statement_list(call, &stmt_list);\n+\t\tif (call != error_mark_node)\n+\t\t  append_to_statement_list(call, &stmt_list);\n \t      }\n \t  }\n \n@@ -7665,6 +7672,8 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \targ1_tree = save_expr(arg1_tree);\n \ttree arg1_val = at->value_pointer_tree(gogo, arg1_tree);\n \ttree arg1_len = at->length_tree(gogo, arg1_tree);\n+\tif (arg1_val == error_mark_node || arg1_len == error_mark_node)\n+\t  return error_mark_node;\n \n \tType* arg2_type = arg2->type();\n \ttree arg2_val;\n@@ -7682,6 +7691,8 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \t    arg2_val = String_type::bytes_tree(gogo, arg2_tree);\n \t    arg2_len = String_type::length_tree(gogo, arg2_tree);\n \t  }\n+\tif (arg2_val == error_mark_node || arg2_len == error_mark_node)\n+\t  return error_mark_node;\n \n \targ1_len = save_expr(arg1_len);\n \targ2_len = save_expr(arg2_len);\n@@ -7694,6 +7705,8 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \n \tType* element_type = at->element_type();\n \ttree element_type_tree = element_type->get_tree(gogo);\n+\tif (element_type_tree == error_mark_node)\n+\t  return error_mark_node;\n \ttree element_size = TYPE_SIZE_UNIT(element_type_tree);\n \ttree bytecount = fold_convert_loc(location, TREE_TYPE(element_size),\n \t\t\t\t\t  len);"}]}