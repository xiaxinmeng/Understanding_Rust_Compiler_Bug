{"sha": "56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZhNzdlMWU4NGJjOTk3MDQ3Zjg5MjRhZDQ4MDRmZmE0ZThiNjdmNg==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2000-11-12T03:37:33Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-11-12T03:37:33Z"}, "message": "avoid commenting out #endifs\n\nFrom-SVN: r37401", "tree": {"sha": "07712bdd0dec8495966332bbdd1522ee74343bb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07712bdd0dec8495966332bbdd1522ee74343bb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d8523fe5247ceeef73f081cdac9d3709db0d9e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8523fe5247ceeef73f081cdac9d3709db0d9e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8523fe5247ceeef73f081cdac9d3709db0d9e1"}], "stats": {"total": 294, "additions": 8, "deletions": 286}, "files": [{"sha": "d380b7b0fb12e1366af4eb118ff99a3c6d609054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "patch": "@@ -1,3 +1,9 @@\n+2000-11-11  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixinc/inclhack.def (avoid_bool_type): avoid commenting out #endif\n+\t(avoid_wchar_t_type): ditto\n+\t* fixinc/fixinc.irix: obsoleted\n+\n 2000-11-11  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* configure.in: Don't add $outputs to all_lang_makefiles.  Add"}, {"sha": "3eab1a6619edb2b1c7f5a157772c5d889494d340", "filename": "gcc/fixinc/fixinc.irix", "status": "removed", "additions": 0, "deletions": 280, "changes": 280, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d8523fe5247ceeef73f081cdac9d3709db0d9e1/gcc%2Ffixinc%2Ffixinc.irix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d8523fe5247ceeef73f081cdac9d3709db0d9e1/gcc%2Ffixinc%2Ffixinc.irix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixinc.irix?ref=8d8523fe5247ceeef73f081cdac9d3709db0d9e1", "patch": "@@ -1,280 +0,0 @@\n-#! /bin/sh\n-# Install modified versions of certain problematic Irix include files.\n-# If possible, create a wrapper (see fixinc.wrap) instead of copying files.\n-#\n-# Copyright (C) 1997, 1998 Free Software Foundation, Inc.\n-# Contributed by Brendan Kehoe (brendan@cygnus.com).\n-#\n-# This file is part of GNU CC.\n-# \n-# GNU CC is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2, or (at your option)\n-# any later version.\n-# \n-# GNU CC is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with GNU CC; see the file COPYING.  If not, write to\n-# the Free Software Foundation, 59 Temple Place - Suite 330,\n-# Boston, MA 02111-1307, USA.\n-#\n-#\tSee README-fixinc for more information.\n-\n-# Fail if no arg to specify a directory for the output.\n-if [ x$1 = x ]\n-then echo fixincludes: no output directory specified\n-exit 1\n-fi\n-\n-# Directory in which to store the results.\n-LIB=${1?\"fixincludes: output directory not specified\"}\n-\n-# Make sure it exists.\n-if [ ! -d $LIB ]; then\n-  mkdir $LIB || exit 1\n-fi\n-\n-ORIG_DIR=`${PWDCMD-pwd}`\n-\n-# Make LIB absolute if it is relative.\n-# Don't do this if not necessary, since may screw up automounters.\n-case $LIB in\n-/*)\n-\t;;\n-*)\n- \tcd $LIB; LIB=`${PWDCMD-pwd}`\n-\t;;\n-esac\n-\n-echo 'Building fixincludes in ' ${LIB}\n-# Directory containing the original header files.\n-shift\n-if [ $# -eq 0 ] ; then\n-  set /usr/include\n-fi\n-\n-INLIST=\"$@\"\n-\n-for INPUT in ${INLIST} ; do\n-cd ${ORIG_DIR}\n-cd ${INPUT}\n-\n-#\n-# Note: For Irix, we deliberately don't try to create the directory trees,\n-#       since we only modify math.h, limits.h and unistd.h.  If we\n-#\tADD ANY OTHERS, the \"Making directories:\" and symlinks code from\n-#\tfixinc.svr4 may have to go back in.\n-\n-# This math.h fix is copied from fixinc.wrap.  We want to avoid copying\n-# math.h because both math.h and stdlib.h have a declaration for initstate,\n-# and this declaration changed between Irix 6.2 and Irix 6.3.  If we copy this\n-# file, then the same toolchain can't be shared between 6.2 and 6.3+.\n-\n-# Some math.h files define struct exception, which conflicts with\n-# the class exception defined in the C++ file std/stdexcept.h.  We\n-# redefine it to __math_exception.  This is not a great fix, but I\n-# haven't been able to think of anything better.\n-file=math.h\n-if [ -r $INPUT/$file ]; then\n-  echo Checking $INPUT/$file\n-  if grep 'struct exception' $INPUT/$file >/dev/null\n-  then\n-    echo Fixed $file\n-    rm -f $LIB/$file\n-    cat <<'__EOF__' >$LIB/$file\n-#ifndef _MATH_H_WRAPPER\n-#ifdef __cplusplus\n-# define exception __math_exception\n-#endif\n- #include_next <math.h>\n-#ifdef __cplusplus\n-# undef exception\n-#endif\n-#define _MATH_H_WRAPPER\n-#endif /* _MATH_H_WRAPPER */\n-__EOF__\n-    # Define _MATH_H_WRAPPER at the end of the wrapper, not the start,\n-    # so that if #include_next gets another instance of the wrapper,\n-    # this will follow the #include_next chain until we arrive at\n-    # the real <math.h>.\n-    chmod a+r $LIB/$file\n-  fi\n-fi\n-\n-# Avoid the definition of the bool type in curses.h when using\n-# g++, since it's now an official type in the C++ language.\n-\n-# This is also from fixinc.wrap.\n-\n-file=curses.h\n-if [ -r $INPUT/$file ]; then\n-  echo Checking $INPUT/$file\n-  w='[\t ]'\n-  if grep \"typedef$w$w*char$w$w*bool$w*;\" $INPUT/$file >/dev/null\n-  then\n-    echo Fixed $file\n-    rm -f $LIB/$file\n-    cat <<'__EOF__' >$LIB/$file\n-#ifndef _CURSES_H_WRAPPER\n-#ifdef __cplusplus\n-# define bool __curses_bool_t\n-#endif\n- #include_next <curses.h>\n-#ifdef __cplusplus\n-# undef bool\n-#endif\n-#define _CURSES_H_WRAPPER\n-#endif /* _CURSES_H_WRAPPER */\n-__EOF__\n-    # Define _CURSES_H_WRAPPER at the end of the wrapper, not the start,\n-    # so that if #include_next gets another instance of the wrapper,\n-    # this will follow the #include_next chain until we arrive at\n-    # the real <curses.h>.\n-    chmod a+r $LIB/$file\n-  fi\n-fi\n-\n-# In limits.h, put #ifndefs around things that are supposed to be defined\n-# in float.h to avoid redefinition errors if float.h is included first.\n-\n-file=limits.h\n-base=`basename $file`.$$\n-if [ -r ${LIB}/$file ]; then\n-  file_to_fix=${LIB}/$file\n-else\n-  if [ -r ${INPUT}/$file ]; then\n-    file_to_fix=${INPUT}/$file\n-  else\n-    file_to_fix=\"\"\n-  fi\n-fi\n-if [ \\! -z \"$file_to_fix\" ]; then\n-  echo Checking $file_to_fix\n-  sed -e '/[ \t]FLT_MIN[ \t]/i\\\n-#ifndef FLT_MIN\n-'\\\n-      -e '/[ \t]FLT_MIN[ \t]/a\\\n-#endif\n-'\\\n-      -e '/[ \t]FLT_MAX[ \t]/i\\\n-#ifndef FLT_MAX\n-'\\\n-      -e '/[ \t]FLT_MAX[ \t]/a\\\n-#endif\n-'\\\n-      -e '/[ \t]FLT_DIG[ \t]/i\\\n-#ifndef FLT_DIG\n-'\\\n-      -e '/[ \t]FLT_DIG[ \t]/a\\\n-#endif\n-'\\\n-      -e '/[ \t]DBL_MIN[ \t]/i\\\n-#ifndef DBL_MIN\n-'\\\n-      -e '/[ \t]DBL_MIN[ \t]/a\\\n-#endif\n-'\\\n-      -e '/[ \t]DBL_MAX[ \t]/i\\\n-#ifndef DBL_MAX\n-'\\\n-      -e '/[ \t]DBL_MAX[ \t]/a\\\n-#endif\n-'\\\n-      -e '/[ \t]DBL_DIG[ \t]/i\\\n-#ifndef DBL_DIG\n-'\\\n-      -e '/[ \t]DBL_DIG[ \t]/a\\\n-#endif\n-' $file_to_fix > /tmp/$base\n-  if cmp $file_to_fix /tmp/$base >/dev/null 2>&1; then \\\n-    true\n-  else\n-    echo Fixed $file_to_fix\n-    rm -f ${LIB}/$file\n-    cp /tmp/$base ${LIB}/$file\n-    chmod a+r ${LIB}/$file\n-  fi\n-  rm -f /tmp/$base\n-fi\n-\n-# The Irix unistd.h will introduce a call to __vfork in its libc, but the\n-# function is never actually prototyped.\n-file=unistd.h\n-base=`basename $file`.$$\n-if [ -r ${LIB}/$file ]; then\n-  file_to_fix=${LIB}/$file\n-else\n-  if [ -r ${INPUT}/$file ]; then\n-    file_to_fix=${INPUT}/$file\n-  else\n-    file_to_fix=\"\"\n-  fi\n-fi\n-if [ \\! -z \"$file_to_fix\" ]; then\n-  echo Checking $file_to_fix\n-  sed -e '/__vfork/i\\\n-extern pid_t __vfork(void);'\\\n-     $file_to_fix > /tmp/$base\n-  if cmp $file_to_fix /tmp/$base >/dev/null 2>&1; then \\\n-    true\n-  else\n-    echo Fixed $file_to_fix\n-    rm -f ${LIB}/$file\n-    cp /tmp/$base ${LIB}/$file\n-    chmod a+r ${LIB}/$file\n-  fi\n-  rm -f /tmp/$base\n-fi\n-\n-done\n-\n-# Don't use or define the name va_list in stdio.h.\n-# This is for ANSI and also to interoperate properly with gcc's varargs.h.\n-# Arrange for stdio.h to use stdarg.h to define __gnuc_va_list\n-file=stdio.h\n-base=`basename $file`.$$\n-if [ -r ${LIB}/$file ]; then\n-  file_to_fix=${LIB}/$file\n-else\n-  if [ -r ${INPUT}/$file ]; then\n-    file_to_fix=${INPUT}/$file\n-  else\n-    file_to_fix=\"\"\n-  fi\n-fi\n-if [ \\! -z \"$file_to_fix\" ]; then\n-  echo Fixing $file_to_fix\n-  echo \"#define __need___va_list\" > /tmp/$base\n-  echo \"#include <stdarg.h>\" >> /tmp/$base\n-\n-  sed -e 's@ va_list @ __gnuc_va_list @' \\\n-      -e 's@ va_list)@ __gnuc_va_list)@' \\\n-      -e 's@ _BSD_VA_LIST_))@ __gnuc_va_list))@' \\\n-      -e 's@ _VA_LIST_));@ __gnuc_va_list));@' \\\n-      -e 's@ va_list@ __not_va_list__@' \\\n-      -e 's@\\*va_list@*__not_va_list__@' \\\n-      -e 's@ __va_list)@ __gnuc_va_list)@' \\\n-      -e 's@GNUC_VA_LIST@GNUC_Va_LIST@' \\\n-      -e 's@_NEED___VA_LIST@_NEED___Va_LIST@' \\\n-      -e 's@VA_LIST@DUMMY_VA_LIST@' \\\n-      -e 's@_Va_LIST@_VA_LIST@' $file_to_fix >> /tmp/$base\n-  echo Fixed $file_to_fix\n-  rm -f ${LIB}/$file\n-  cp /tmp/$base ${LIB}/$file\n-  chmod a+r ${LIB}/$file\n-  rm -f /tmp/$base\n-fi\n-\n-if [ x${INSTALL_ASSERT_H} != x ]\n-then\n-  cd ${ORIG_DIR}\n-  rm -f include/assert.h\n-  cp ${srcdir}/assert.h include/assert.h || exit 1\n-  chmod a+r include/assert.h\n-fi\n-\n-exit 0"}, {"sha": "92912600b1d30db3ca707578d9797ec6ed797c6a", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "patch": "@@ -1290,7 +1290,6 @@ static const char* apzAvoid_Bool_TypePatch[] = {\n     \"#ifndef __cplusplus\\n\\\n %0\\n\\\n #endif\",\n-    \"^[ \\t]*typedef[ \\t].*[ \\t]bool[ \\t]*;.*\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -1328,7 +1327,6 @@ static const char* apzAvoid_Wchar_T_TypePatch[] = {\n     \"#ifndef __cplusplus\\n\\\n %0\\n\\\n #endif\",\n-    \"^[ \\t]*typedef[ \\t].*[ \\t]wchar_t[ \\t]*;.*\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *"}, {"sha": "73b50fd36a7b7e2ddb38a69ab6b2371f7b40dd11", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56a77e1e84bc997047f8924ad4804ffa4e8b67f6/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=56a77e1e84bc997047f8924ad4804ffa4e8b67f6", "patch": "@@ -764,9 +764,8 @@ fix = {\n \n     c_fix     = format;\n     c_fix_arg = \"#ifndef __cplusplus\\n%0\\n#endif\";\n-    c_fix_arg = \"^[ \\t]*typedef[ \\t].*[ \\t]bool[ \\t]*;.*\";\n \n-    test_text = \"typedef unsigned int\\tbool \\t; /* bool type */\";\n+    test_text = \"typedef unsigned int\\tbool \\t; /* bool\\n type */\";\n };\n \n /*\n@@ -781,9 +780,8 @@ fix = {\n \n     c_fix     = format;\n     c_fix_arg = \"#ifndef __cplusplus\\n%0\\n#endif\";\n-    c_fix_arg = \"^[ \\t]*typedef[ \\t].*[ \\t]wchar_t[ \\t]*;.*\";\n \n-    test_text = \"typedef unsigned short\\twchar_t \\t; /* wchar_t type */\";\n+    test_text = \"typedef unsigned short\\twchar_t \\t; /* wchar_t\\n type */\";\n };\n \n /*"}]}