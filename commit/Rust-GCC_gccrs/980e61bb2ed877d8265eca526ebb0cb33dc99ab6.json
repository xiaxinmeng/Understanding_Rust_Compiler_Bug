{"sha": "980e61bb2ed877d8265eca526ebb0cb33dc99ab6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgwZTYxYmIyZWQ4NzdkODI2NWVjYTUyNmViYjBjYjMzZGM5OWFiNg==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "drow@mvista.com", "date": "2004-01-22T17:00:56Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2004-01-22T17:00:56Z"}, "message": "arm.c: Include \"debug.h\".\n\n\t* config/arm/arm.c: Include \"debug.h\".\n\t(thumb_pushpop): Take two new arguments.  Add some commentary.\n\tOutput frame information when pushing.\n\t(thumb_exit, thumb_unexpanded_epilogue): Update calls to\n\tthumb_pushpop.\n\t(thumb_output_function_prologue): Likewise.  Accumulate a CFA\n\toffset, and pass it to thumb_pushpop.  Output CFI information.\n\t(thumb_expand_prologue): Add some frame-related markers and notes.\n\nFrom-SVN: r76362", "tree": {"sha": "3d159d46e2b87560fc6387b1501d14c5c1f30a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d159d46e2b87560fc6387b1501d14c5c1f30a67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/980e61bb2ed877d8265eca526ebb0cb33dc99ab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980e61bb2ed877d8265eca526ebb0cb33dc99ab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/980e61bb2ed877d8265eca526ebb0cb33dc99ab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/980e61bb2ed877d8265eca526ebb0cb33dc99ab6/comments", "author": null, "committer": null, "parents": [{"sha": "0067d1217b227d7b74117f5a99a1ecbebcc4c731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0067d1217b227d7b74117f5a99a1ecbebcc4c731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0067d1217b227d7b74117f5a99a1ecbebcc4c731"}], "stats": {"total": 137, "additions": 115, "deletions": 22}, "files": [{"sha": "57bb86397e6b1e9e2f6248787899d4fbf3d3a073", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980e61bb2ed877d8265eca526ebb0cb33dc99ab6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980e61bb2ed877d8265eca526ebb0cb33dc99ab6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=980e61bb2ed877d8265eca526ebb0cb33dc99ab6", "patch": "@@ -1,3 +1,14 @@\n+2004-01-22  Daniel Jacobowitz  <drow@mvista.com>\n+\n+\t* config/arm/arm.c: Include \"debug.h\".\n+\t(thumb_pushpop): Take two new arguments.  Add some commentary. \n+\tOutput frame information when pushing.\n+\t(thumb_exit, thumb_unexpanded_epilogue): Update calls to\n+\tthumb_pushpop.\n+\t(thumb_output_function_prologue): Likewise.  Accumulate a CFA\n+\toffset, and pass it to thumb_pushpop.  Output CFI information.\n+\t(thumb_expand_prologue): Add some frame-related markers and notes.\n+\n 2004-01-22  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/s390.c (s390_frame_info): Allow large frame sizes"}, {"sha": "826bbac0fabf8362e1569c70d0f053e80ff4698b", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 104, "deletions": 22, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/980e61bb2ed877d8265eca526ebb0cb33dc99ab6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/980e61bb2ed877d8265eca526ebb0cb33dc99ab6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=980e61bb2ed877d8265eca526ebb0cb33dc99ab6", "patch": "@@ -50,6 +50,7 @@\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"debug.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;\n@@ -85,7 +86,7 @@ static struct machine_function *arm_init_machine_status (void);\n static int number_of_first_bit_set (int);\n static void replace_symbols_in_block (tree, rtx, rtx);\n static void thumb_exit (FILE *, int, rtx);\n-static void thumb_pushpop (FILE *, int, int);\n+static void thumb_pushpop (FILE *, int, int, int *, int);\n static rtx is_jump_table (rtx);\n static HOST_WIDE_INT get_jump_table_size (rtx);\n static Mnode *move_minipool_fix_forward_ref (Mnode *, Mnode *, HOST_WIDE_INT);\n@@ -11562,7 +11563,8 @@ thumb_exit (FILE *f, int reg_containing_return_addr, rtx eh_ofs)\n     }\n \n   /* Pop as many registers as we can.  */\n-  thumb_pushpop (f, regs_available_for_popping, FALSE);\n+  thumb_pushpop (f, regs_available_for_popping, FALSE, NULL,\n+\t\t regs_available_for_popping);\n \n   /* Process the registers we popped.  */\n   if (reg_containing_return_addr == -1)\n@@ -11643,7 +11645,8 @@ thumb_exit (FILE *f, int reg_containing_return_addr, rtx eh_ofs)\n       int  popped_into;\n       int  move_to;\n       \n-      thumb_pushpop (f, regs_available_for_popping, FALSE);\n+      thumb_pushpop (f, regs_available_for_popping, FALSE, NULL,\n+\t\t     regs_available_for_popping);\n \n       /* We have popped either FP or SP.\n \t Move whichever one it is into the correct register.  */\n@@ -11663,7 +11666,8 @@ thumb_exit (FILE *f, int reg_containing_return_addr, rtx eh_ofs)\n     {\n       int  popped_into;\n       \n-      thumb_pushpop (f, regs_available_for_popping, FALSE);\n+      thumb_pushpop (f, regs_available_for_popping, FALSE, NULL,\n+\t\t     regs_available_for_popping);\n \n       popped_into = number_of_first_bit_set (regs_available_for_popping);\n \n@@ -11693,12 +11697,20 @@ thumb_exit (FILE *f, int reg_containing_return_addr, rtx eh_ofs)\n   asm_fprintf (f, \"\\tbx\\t%r\\n\", reg_containing_return_addr);\n }\n \n-/* Emit code to push or pop registers to or from the stack.  */\n+/* Emit code to push or pop registers to or from the stack.  F is the\n+   assembly file.  MASK is the registers to push or pop.  PUSH is\n+   non-zero if we should push, and zero if we should pop.  For debugging\n+   output, if pushing, adjust CFA_OFFSET by the amount of space added\n+   to the stack.  REAL_REGS should have the same number of bits set as\n+   MASK, and will be used instead (in the same order) to describe which\n+   registers were saved - this is used to mark the save slots when we\n+   push high registers after moving them to low registers.  */\n static void\n-thumb_pushpop (FILE *f, int mask, int push)\n+thumb_pushpop (FILE *f, int mask, int push, int *cfa_offset, int real_regs)\n {\n   int regno;\n   int lo_mask = mask & 0xFF;\n+  int pushed_words = 0;\n \n   if (lo_mask == 0 && !push && (mask & (1 << 15)))\n     {\n@@ -11719,6 +11731,8 @@ thumb_pushpop (FILE *f, int mask, int push)\n \t  \n \t  if ((lo_mask & ~1) != 0)\n \t    fprintf (f, \", \");\n+\n+\t  pushed_words++;\n \t}\n     }\n   \n@@ -11729,6 +11743,8 @@ thumb_pushpop (FILE *f, int mask, int push)\n \tfprintf (f, \", \");\n       \n       asm_fprintf (f, \"%r\", LR_REGNUM);\n+\n+      pushed_words++;\n     }\n   else if (!push && (mask & (1 << PC_REGNUM)))\n     {\n@@ -11753,6 +11769,23 @@ thumb_pushpop (FILE *f, int mask, int push)\n     }\n        \n   fprintf (f, \"}\\n\");\n+\n+  if (push && pushed_words && dwarf2out_do_frame ())\n+    {\n+      char *l = dwarf2out_cfi_label ();\n+      int pushed_mask = real_regs;\n+\n+      *cfa_offset += pushed_words * 4;\n+      dwarf2out_def_cfa (l, SP_REGNUM, *cfa_offset);\n+\n+      pushed_words = 0;\n+      pushed_mask = real_regs;\n+      for (regno = 0; regno <= 14; regno++, pushed_mask >>= 1)\n+\t{\n+\t  if (pushed_mask & 1)\n+\t    dwarf2out_reg_save (l, regno, 4 * pushed_words++ - *cfa_offset);\n+\t}\n+    }\n }\n \f\n void\n@@ -11951,7 +11984,7 @@ thumb_unexpanded_epilogue (void)\n \t  mask &= (2 << regno) - 1;\t/* A noop if regno == 8 */\n \n \t  /* Pop the values into the low register(s).  */\n-\t  thumb_pushpop (asm_out_file, mask, 0);\n+\t  thumb_pushpop (asm_out_file, mask, 0, NULL, mask);\n \n \t  /* Move the value(s) into the high registers.  */\n \t  for (regno = 0; regno <= LAST_LO_REGNUM; regno++)\n@@ -11993,7 +12026,8 @@ thumb_unexpanded_epilogue (void)\n \t structure was created which includes an adjusted stack\n \t pointer, so just pop everything.  */\n       if (live_regs_mask)\n-\tthumb_pushpop (asm_out_file, live_regs_mask, FALSE);\n+\tthumb_pushpop (asm_out_file, live_regs_mask, FALSE, NULL,\n+\t\t       live_regs_mask);\n       \n       if (eh_ofs)\n \tthumb_exit (asm_out_file, 2, eh_ofs);\n@@ -12013,11 +12047,13 @@ thumb_unexpanded_epilogue (void)\n       live_regs_mask &= ~(1 << PC_REGNUM);\n       \n       if (live_regs_mask)\n-\tthumb_pushpop (asm_out_file, live_regs_mask, FALSE);\n+\tthumb_pushpop (asm_out_file, live_regs_mask, FALSE, NULL,\n+\t\t       live_regs_mask);\n \n       if (had_to_push_lr)\n \t/* Get the return address into a temporary register.  */\n-\tthumb_pushpop (asm_out_file, 1 << LAST_ARG_REGNUM, 0);\n+\tthumb_pushpop (asm_out_file, 1 << LAST_ARG_REGNUM, 0, NULL,\n+\t\t       1 << LAST_ARG_REGNUM);\n       \n       /* Remove the argument registers that were pushed onto the stack.  */\n       asm_fprintf (asm_out_file, \"\\tadd\\t%r, %r, #%d\\n\",\n@@ -12163,6 +12199,8 @@ thumb_get_frame_size (void)\n void\n thumb_expand_prologue (void)\n {\n+  rtx insn, dwarf;\n+\n   HOST_WIDE_INT amount = (thumb_get_frame_size ()\n \t\t\t  + current_function_outgoing_args_size);\n   unsigned long func_type;\n@@ -12180,15 +12218,21 @@ thumb_expand_prologue (void)\n     }\n \n   if (frame_pointer_needed)\n-    emit_insn (gen_movsi (hard_frame_pointer_rtx, stack_pointer_rtx));\n+    {\n+      insn = emit_insn (gen_movsi (hard_frame_pointer_rtx, stack_pointer_rtx));\n+      RTX_FRAME_RELATED_P (insn) = 1;\n+    }\n \n   if (amount)\n     {\n       amount = ROUND_UP_WORD (amount);\n       \n       if (amount < 512)\n-\temit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t       GEN_INT (- amount)));\n+\t{\n+\t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n+\t\t\t\t\tGEN_INT (- amount)));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n       else\n \t{\n \t  int regno;\n@@ -12228,8 +12272,16 @@ thumb_expand_prologue (void)\n \n \t      /* Decrement the stack.  */\n \t      emit_insn (gen_movsi (reg, GEN_INT (- amount)));\n-\t      emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t     reg));\n+\t      insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t\t    stack_pointer_rtx, reg));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      dwarf = gen_rtx_SET (SImode, stack_pointer_rtx,\n+\t\t\t\t   plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t  GEN_INT (- amount)));\n+\t      RTX_FRAME_RELATED_P (dwarf) = 1;\n+\t      REG_NOTES (insn)\n+\t\t= gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, dwarf,\n+\t\t\t\t     REG_NOTES (insn));\n \n \t      /* Restore the low register's original value.  */\n \t      emit_insn (gen_movsi (reg, spare));\n@@ -12245,8 +12297,17 @@ thumb_expand_prologue (void)\n \t      reg = gen_rtx (REG, SImode, regno);\n \n \t      emit_insn (gen_movsi (reg, GEN_INT (- amount)));\n-\t      emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t     reg));\n+\n+\t      insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t\t    stack_pointer_rtx, reg));\n+\t      RTX_FRAME_RELATED_P (insn) = 1;\n+\t      dwarf = gen_rtx_SET (SImode, stack_pointer_rtx,\n+\t\t\t\t   plus_constant (stack_pointer_rtx,\n+\t\t\t\t\t\t  GEN_INT (- amount)));\n+\t      RTX_FRAME_RELATED_P (dwarf) = 1;\n+\t      REG_NOTES (insn)\n+\t\t= gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, dwarf,\n+\t\t\t\t     REG_NOTES (insn));\n \t    }\n \t}\n     }\n@@ -12307,6 +12368,7 @@ thumb_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n {\n   int live_regs_mask = 0;\n   int high_regs_pushed = 0;\n+  int cfa_offset = 0;\n   int regno;\n \n   if (IS_NAKED (arm_current_func_type ()))\n@@ -12369,6 +12431,16 @@ thumb_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \tasm_fprintf (f, \"\\tsub\\t%r, %r, #%d\\n\", \n \t\t     SP_REGNUM, SP_REGNUM,\n \t\t     current_function_pretend_args_size);\n+\n+      /* We don't need to record the stores for unwinding (would it\n+\t help the debugger any if we did?), but record the change in\n+\t the stack pointer.  */\n+      if (dwarf2out_do_frame ())\n+\t{\n+\t  char *l = dwarf2out_cfi_label ();\n+\t  cfa_offset = cfa_offset + current_function_pretend_args_size;\n+\t  dwarf2out_def_cfa (l, SP_REGNUM, cfa_offset);\n+\t}\n     }\n \n   for (regno = 0; regno <= LAST_LO_REGNUM; regno++)\n@@ -12424,9 +12496,16 @@ thumb_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n       asm_fprintf\n \t(f, \"\\tsub\\t%r, %r, #16\\t%@ Create stack backtrace structure\\n\",\n \t SP_REGNUM, SP_REGNUM);\n-      \n+\n+      if (dwarf2out_do_frame ())\n+\t{\n+\t  char *l = dwarf2out_cfi_label ();\n+\t  cfa_offset = cfa_offset + 16;\n+\t  dwarf2out_def_cfa (l, SP_REGNUM, cfa_offset);\n+\t}\n+\n       if (live_regs_mask)\n-\tthumb_pushpop (f, live_regs_mask, 1);\n+\tthumb_pushpop (f, live_regs_mask, 1, &cfa_offset, live_regs_mask);\n       \n       for (offset = 0, wr = 1 << 15; wr != 0; wr >>= 1)\n \tif (wr & live_regs_mask)\n@@ -12470,7 +12549,7 @@ thumb_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t\t   ARM_HARD_FRAME_POINTER_REGNUM, work_register);\n     }\n   else if (live_regs_mask)\n-    thumb_pushpop (f, live_regs_mask, 1);\n+    thumb_pushpop (f, live_regs_mask, 1, &cfa_offset, live_regs_mask);\n \n   for (regno = 8; regno < 13; regno++)\n     if (THUMB_REG_PUSHED_P (regno))\n@@ -12498,13 +12577,16 @@ thumb_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \n       while (high_regs_pushed > 0)\n \t{\n+\t  int real_regs_mask = 0;\n+\n \t  for (regno = LAST_LO_REGNUM; regno >= 0; regno--)\n \t    {\n \t      if (mask & (1 << regno))\n \t\t{\n \t\t  asm_fprintf (f, \"\\tmov\\t%r, %r\\n\", regno, next_hi_reg);\n \t\t  \n \t\t  high_regs_pushed--;\n+\t\t  real_regs_mask |= (1 << next_hi_reg);\n \t\t  \n \t\t  if (high_regs_pushed)\n \t\t    {\n@@ -12520,8 +12602,8 @@ thumb_output_function_prologue (FILE *f, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n \t\t    }\n \t\t}\n \t    }\n-\t  \n-\t  thumb_pushpop (f, mask, 1);\n+\n+\t  thumb_pushpop (f, mask, 1, &cfa_offset, real_regs_mask);\n \t}\n \n       if (pushable_regs == 0"}]}