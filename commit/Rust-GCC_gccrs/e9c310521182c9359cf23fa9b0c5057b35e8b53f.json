{"sha": "e9c310521182c9359cf23fa9b0c5057b35e8b53f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljMzEwNTIxMTgyYzkzNTljZjIzZmE5YjBjNTA1N2IzNWU4YjUzZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T11:09:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-12T14:30:13Z"}, "message": "libstdc++: Only use dynamic_cast in tests when RTTI is enabled\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc: Use\n\tstatic_cast when RTTI is disabled.\n\t* testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostringstream/rdbuf/char/2832.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_ostringstream/rdbuf/wchar_t/2832.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringstream/str/char/2.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_stringstream/str/wchar_t/2.cc:\n\tLikewise.", "tree": {"sha": "3dc916f89fc7df5e30f2b254deab557694c739fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3dc916f89fc7df5e30f2b254deab557694c739fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9c310521182c9359cf23fa9b0c5057b35e8b53f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c310521182c9359cf23fa9b0c5057b35e8b53f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c310521182c9359cf23fa9b0c5057b35e8b53f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c310521182c9359cf23fa9b0c5057b35e8b53f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14b554c462d5b6450fa24afb7ba55435ebd4b46f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b554c462d5b6450fa24afb7ba55435ebd4b46f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b554c462d5b6450fa24afb7ba55435ebd4b46f"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "87677c50a13dbd88ac07b2b7e6316257dbc0ff66", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc?ref=e9c310521182c9359cf23fa9b0c5057b35e8b53f", "patch": "@@ -22,8 +22,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void \n-redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n+void\n+redirect_buffer(std::ios& stream, std::streambuf* new_buf)\n { stream.rdbuf(new_buf); }\n \n std::streambuf*\n@@ -50,15 +50,19 @@ void test02()\n   redirect_buffer(sstrm1, &sbuf);\n   std::stringbuf* const buf2 = sstrm1.rdbuf();\n   std::streambuf* pbasebuf2 = active_buffer(sstrm1);\n-  VERIFY( buf1 == buf2 ); \n+  VERIFY( buf1 == buf2 );\n   VERIFY( pbasebuf1 != pbasebuf2 );\n   VERIFY( pbasebuf2 == pbasebuf0 );\n \n   // derived rdbuf() returns the original buf, so str() doesn't change.\n   VERIFY( sstrm1.str() != str01 );\n   VERIFY( sstrm1.str() == str00 );\n   // however, casting the active streambuf to a stringbuf shows what's up:\n+#if __cpp_rtti\n   std::stringbuf* psbuf = dynamic_cast<std::stringbuf*>(pbasebuf2);\n+#else\n+  std::stringbuf* psbuf = static_cast<std::stringbuf*>(pbasebuf2);\n+#endif\n   str02 = psbuf->str();\n   VERIFY( str02 == str01 );\n "}, {"sha": "64475b5fc61bb571ab04829c5f8ae03948c49100", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fwchar_t%2F2832.cc?ref=e9c310521182c9359cf23fa9b0c5057b35e8b53f", "patch": "@@ -20,8 +20,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void \n-redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+void\n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf)\n { stream.rdbuf(new_buf); }\n \n std::wstreambuf*\n@@ -48,15 +48,19 @@ void test02()\n   redirect_buffer(sstrm1, &sbuf);\n   std::wstringbuf* const buf2 = sstrm1.rdbuf();\n   std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n-  VERIFY( buf1 == buf2 ); \n+  VERIFY( buf1 == buf2 );\n   VERIFY( pbasebuf1 != pbasebuf2 );\n   VERIFY( pbasebuf2 == pbasebuf0 );\n \n   // derived rdbuf() returns the original buf, so str() doesn't change.\n   VERIFY( sstrm1.str() != str01 );\n   VERIFY( sstrm1.str() == str00 );\n   // however, casting the active streambuf to a stringbuf shows what's up:\n+#if __cpp_rtti\n   std::wstringbuf* psbuf = dynamic_cast<std::wstringbuf*>(pbasebuf2);\n+#else\n+  std::wstringbuf* psbuf = static_cast<std::wstringbuf*>(pbasebuf2);\n+#endif\n   str02 = psbuf->str();\n   VERIFY( str02 == str01 );\n "}, {"sha": "553edd6c2432b19e11181ad6cb5fc0afd1080e07", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/rdbuf/char/2832.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fchar%2F2832.cc?ref=e9c310521182c9359cf23fa9b0c5057b35e8b53f", "patch": "@@ -22,8 +22,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void \n-redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n+void\n+redirect_buffer(std::ios& stream, std::streambuf* new_buf)\n { stream.rdbuf(new_buf); }\n \n std::streambuf*\n@@ -50,15 +50,19 @@ void test02()\n   redirect_buffer(sstrm1, &sbuf);\n   std::stringbuf* const buf2 = sstrm1.rdbuf();\n   std::streambuf* pbasebuf2 = active_buffer(sstrm1);\n-  VERIFY( buf1 == buf2 ); \n+  VERIFY( buf1 == buf2 );\n   VERIFY( pbasebuf1 != pbasebuf2 );\n   VERIFY( pbasebuf2 == pbasebuf0 );\n \n   // derived rdbuf() returns the original buf, so str() doesn't change.\n   VERIFY( sstrm1.str() != str01 );\n   VERIFY( sstrm1.str() == str00 );\n   // however, casting the active streambuf to a stringbuf shows what's up:\n+#if __cpp_rtti\n   std::stringbuf* psbuf = dynamic_cast<std::stringbuf*>(pbasebuf2);\n+#else\n+  std::stringbuf* psbuf = static_cast<std::stringbuf*>(pbasebuf2);\n+#endif\n   str02 = psbuf->str();\n   VERIFY( str02 == str01 );\n "}, {"sha": "3a1b4e5276123f0d6f3d0335397b49522bfbf201", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/rdbuf/wchar_t/2832.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fwchar_t%2F2832.cc?ref=e9c310521182c9359cf23fa9b0c5057b35e8b53f", "patch": "@@ -20,8 +20,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void \n-redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+void\n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf)\n { stream.rdbuf(new_buf); }\n \n std::wstreambuf*\n@@ -48,15 +48,19 @@ void test02()\n   redirect_buffer(sstrm1, &sbuf);\n   std::wstringbuf* const buf2 = sstrm1.rdbuf();\n   std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n-  VERIFY( buf1 == buf2 ); \n+  VERIFY( buf1 == buf2 );\n   VERIFY( pbasebuf1 != pbasebuf2 );\n   VERIFY( pbasebuf2 == pbasebuf0 );\n \n   // derived rdbuf() returns the original buf, so str() doesn't change.\n   VERIFY( sstrm1.str() != str01 );\n   VERIFY( sstrm1.str() == str00 );\n   // however, casting the active streambuf to a stringbuf shows what's up:\n+#if __cpp_rtti\n   std::wstringbuf* psbuf = dynamic_cast<std::wstringbuf*>(pbasebuf2);\n+#else\n+  std::wstringbuf* psbuf = static_cast<std::wstringbuf*>(pbasebuf2);\n+#endif\n   str02 = psbuf->str();\n   VERIFY( str02 == str01 );\n "}, {"sha": "60631df83b5acf3e08aa8d7d60e2a0192eb7e0a4", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/char/2.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fchar%2F2.cc?ref=e9c310521182c9359cf23fa9b0c5057b35e8b53f", "patch": "@@ -22,8 +22,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void \n-redirect_buffer(std::ios& stream, std::streambuf* new_buf) \n+void\n+redirect_buffer(std::ios& stream, std::streambuf* new_buf)\n { stream.rdbuf(new_buf); }\n \n std::streambuf*\n@@ -50,15 +50,19 @@ void test02()\n   redirect_buffer(sstrm1, &sbuf);\n   std::stringbuf* const buf2 = sstrm1.rdbuf();\n   std::streambuf* pbasebuf2 = active_buffer(sstrm1);\n-  VERIFY( buf1 == buf2 ); \n+  VERIFY( buf1 == buf2 );\n   VERIFY( pbasebuf1 != pbasebuf2 );\n   VERIFY( pbasebuf2 == pbasebuf0 );\n \n   // derived rdbuf() returns the original buf, so str() doesn't change.\n   VERIFY( sstrm1.str() != str01 );\n   VERIFY( sstrm1.str() == str00 );\n   // however, casting the active streambuf to a stringbuf shows what's up:\n+#if __cpp_rtti\n   std::stringbuf* psbuf = dynamic_cast<std::stringbuf*>(pbasebuf2);\n+#else\n+  std::stringbuf* psbuf = static_cast<std::stringbuf*>(pbasebuf2);\n+#endif\n   str02 = psbuf->str();\n   VERIFY( str02 == str01 );\n "}, {"sha": "4e008a60e63a0ab84fd36315041f26d3f295cfb6", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/str/wchar_t/2.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c310521182c9359cf23fa9b0c5057b35e8b53f/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fstr%2Fwchar_t%2F2.cc?ref=e9c310521182c9359cf23fa9b0c5057b35e8b53f", "patch": "@@ -20,8 +20,8 @@\n #include <sstream>\n #include <testsuite_hooks.h>\n \n-void \n-redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+void\n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf)\n { stream.rdbuf(new_buf); }\n \n std::wstreambuf*\n@@ -48,15 +48,19 @@ void test02()\n   redirect_buffer(sstrm1, &sbuf);\n   std::wstringbuf* const buf2 = sstrm1.rdbuf();\n   std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n-  VERIFY( buf1 == buf2 ); \n+  VERIFY( buf1 == buf2 );\n   VERIFY( pbasebuf1 != pbasebuf2 );\n   VERIFY( pbasebuf2 == pbasebuf0 );\n \n   // derived rdbuf() returns the original buf, so str() doesn't change.\n   VERIFY( sstrm1.str() != str01 );\n   VERIFY( sstrm1.str() == str00 );\n   // however, casting the active streambuf to a stringbuf shows what's up:\n+#if __cpp_rtti\n   std::wstringbuf* psbuf = dynamic_cast<std::wstringbuf*>(pbasebuf2);\n+#else\n+  std::wstringbuf* psbuf = static_cast<std::wstringbuf*>(pbasebuf2);\n+#endif\n   str02 = psbuf->str();\n   VERIFY( str02 == str01 );\n "}]}