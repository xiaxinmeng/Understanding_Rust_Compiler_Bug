{"sha": "fe19699ae2883b252d30f98481d32dabff00744b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxOTY5OWFlMjg4M2IyNTJkMzBmOTg0ODFkMzJkYWJmZjAwNzQ0Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-05T07:00:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-05T07:00:04Z"}, "message": "sccvn: Fix handling of POINTER_PLUS_EXPR in memset offset [PR93582]\n\n> > where POINTER_PLUS_EXPR last operand has sizetype type, thus unsigned,\n> > and in the testcase gimple_assign_rhs2 (def) is thus 0xf000000000000001ULL\n> > which multiplied by 8 doesn't fit into signed HWI.  If it would be treated\n> > as signed offset instead, it would fit (-0xfffffffffffffffLL, multiplied\n> > by 8 is -0x7ffffffffffffff8LL).  Unfortunately with the poly_int obfuscation\n> > I'm not sure how to convert it from unsigned to signed poly_int.\n>\n> mem_ref_offset provides a boiler-plate for this:\n>\n> poly_offset_int::from (wi::to_poly_wide (TREE_OPERAND (t, 1)), SIGNED);\n\nThanks, that seems to work.\nThe test now works on both big-endian and little-endian.\n\n2020-03-05  Richard Biener  <rguenther@suse.de>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/93582\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Treat POINTER_PLUS_EXPR\n\tlast operand as signed when looking for memset offset.  Formatting\n\tfix.\n\n\t* gcc.dg/tree-ssa/pr93582-11.c: New test.\n\nCo-authored-by: Richard Biener <rguenther@suse.de>", "tree": {"sha": "156e2e7833a639349d5dd27e30c93c0f60b8ab49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/156e2e7833a639349d5dd27e30c93c0f60b8ab49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe19699ae2883b252d30f98481d32dabff00744b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe19699ae2883b252d30f98481d32dabff00744b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe19699ae2883b252d30f98481d32dabff00744b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe19699ae2883b252d30f98481d32dabff00744b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb2409c60aeff498064346f85165531a3bbead14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb2409c60aeff498064346f85165531a3bbead14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb2409c60aeff498064346f85165531a3bbead14"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "897c5986e8d5fe60a434a07f156c01f9025f248f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe19699ae2883b252d30f98481d32dabff00744b", "patch": "@@ -1,3 +1,11 @@\n+2020-03-05  Richard Biener  <rguenther@suse.de>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93582\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Treat POINTER_PLUS_EXPR\n+\tlast operand as signed when looking for memset offset.  Formatting\n+\tfix.\n+\n 2020-03-04  Andrew Pinski  <apinski@marvell.com>\n \n \tPR bootstrap/93962"}, {"sha": "d4e7a3ac690b86cf69c5a682753037a6e1d15d33", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe19699ae2883b252d30f98481d32dabff00744b", "patch": "@@ -1,3 +1,8 @@\n+2020-03-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93582\n+\t* gcc.dg/tree-ssa/pr93582-11.c: New test.\n+\n 2020-03-04  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/90938"}, {"sha": "9ff400eff1df8102c6f2b74ba08f568a325d1f38", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93582-11.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93582-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93582-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93582-11.c?ref=fe19699ae2883b252d30f98481d32dabff00744b", "patch": "@@ -0,0 +1,16 @@\n+/* PR tree-optimization/93582 */\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -fdump-tree-fre1\" } */\n+/* { dg-final { scan-tree-dump \"return 9223372036854775806;\" \"fre1\" } } */\n+\n+union U { struct A { unsigned long long a : 1, b : 62, c : 1; } a; unsigned long long i; };\n+\n+unsigned long long\n+foo (char *p)\n+{\n+  __builtin_memset (p - 0xfffffffffffffffULL, 0, 0xffffffffffffffeULL);\n+  __builtin_memset (p + 1, 0, 0xffffffffffffffeULL);\n+  union U *q = (union U *) (void *) (p - 4);\n+  q->a.b = -1;\n+  return q->i;\n+}"}, {"sha": "b7174cd603ff008ed1c988793d5690b79a9e8c9a", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe19699ae2883b252d30f98481d32dabff00744b/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=fe19699ae2883b252d30f98481d32dabff00744b", "patch": "@@ -2656,7 +2656,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t{\n \t  poly_int64 soff;\n \t  if (TREE_CODE (base) != MEM_REF\n-\t      || !(mem_ref_offset (base) << LOG2_BITS_PER_UNIT).to_shwi (&soff))\n+\t      || !(mem_ref_offset (base)\n+\t\t   << LOG2_BITS_PER_UNIT).to_shwi (&soff))\n \t    return (void *)-1;\n \t  offset += soff;\n \t  offset2 = 0;\n@@ -2666,10 +2667,13 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t      if (is_gimple_assign (def)\n \t\t  && gimple_assign_rhs_code (def) == POINTER_PLUS_EXPR\n \t\t  && gimple_assign_rhs1 (def) == TREE_OPERAND (base, 0)\n-\t\t  && poly_int_tree_p (gimple_assign_rhs2 (def))\n-\t\t  && (wi::to_poly_offset (gimple_assign_rhs2 (def))\n-\t\t      << LOG2_BITS_PER_UNIT).to_shwi (&offset2))\n+\t\t  && poly_int_tree_p (gimple_assign_rhs2 (def)))\n \t\t{\n+\t\t  tree rhs2 = gimple_assign_rhs2 (def);\n+\t\t  if (!(poly_offset_int::from (wi::to_poly_wide (rhs2),\n+\t\t\t\t\t       SIGNED)\n+\t\t\t<< LOG2_BITS_PER_UNIT).to_shwi (&offset2))\n+\t\t    return (void *)-1;\n \t\t  ref2 = gimple_assign_rhs1 (def);\n \t\t  if (TREE_CODE (ref2) == SSA_NAME)\n \t\t    ref2 = SSA_VAL (ref2);"}]}