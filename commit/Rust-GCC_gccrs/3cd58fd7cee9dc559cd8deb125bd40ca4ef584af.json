{"sha": "3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkNThmZDdjZWU5ZGM1NTljZDhkZWIxMjViZDQwY2E0ZWY1ODRhZg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@act-europe.fr", "date": "2003-04-21T22:27:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-04-21T22:27:49Z"}, "message": "fold-const.c (fold, [...]): Restore a number of conversions required for type consistency and previously...\n\n\t* fold-const.c (fold, case PLUS_EXPR and case MULT_EXPR): Restore\n\ta number of conversions required for type consistency and previously\n\tstripped off by STRIP_NOPS.\n\nFrom-SVN: r65913", "tree": {"sha": "8803e48d6a16fc156a2200fed524226c44db7828", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8803e48d6a16fc156a2200fed524226c44db7828"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af/comments", "author": null, "committer": null, "parents": [{"sha": "9e91ce11be56032507e3732201649228937c7f6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e91ce11be56032507e3732201649228937c7f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e91ce11be56032507e3732201649228937c7f6e"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "e206768d61f1245ee1c0ade00b37b1eae949c839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "patch": "@@ -5,6 +5,10 @@\n \n 2003-04-21  Olivier Hainque  <hainque@act-europe.fr>\n \n+\t* fold-const.c (fold, case PLUS_EXPR and case MULT_EXPR): Restore\n+\ta number of conversions required for type consistency and previously\n+\tstripped off by STRIP_NOPS.\n+\n \t* calls.c (expand_call): Prevent sibcall optimization for calls to\n \tnested subprograms.\n "}, {"sha": "146f40f97ac820b0f295b2a71556690673446c1f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd58fd7cee9dc559cd8deb125bd40ca4ef584af/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3cd58fd7cee9dc559cd8deb125bd40ca4ef584af", "patch": "@@ -4182,8 +4182,12 @@ extract_muldiv_1 (t, c, code, wide_type)\n       /* Pass the constant down and see if we can make a simplification.  If\n \t we can, replace this expression with the inner simplification for\n \t possible later conversion to our or some other type.  */\n-      if (0 != (t1 = extract_muldiv (op0, convert (TREE_TYPE (op0), c), code,\n-\t\t\t\t     code == MULT_EXPR ? ctype : NULL_TREE)))\n+      if ((t2 = convert (TREE_TYPE (op0), c)) != 0\n+\t  && TREE_CODE (t2) == INTEGER_CST\n+\t  && ! TREE_CONSTANT_OVERFLOW (t2)\n+\t  && (0 != (t1 = extract_muldiv (op0, t2, code,\n+\t\t\t\t\t code == MULT_EXPR\n+\t\t\t\t\t ? ctype : NULL_TREE))))\n \treturn t1;\n       break;\n \n@@ -5478,13 +5482,17 @@ fold (expr)\n \t      if (TREE_CODE (parg0) == MULT_EXPR\n \t\t  && TREE_CODE (parg1) != MULT_EXPR)\n \t\treturn fold (build (PLUS_EXPR, type,\n-\t\t\t\t    fold (build (PLUS_EXPR, type, parg0, marg)),\n-\t\t\t\t    parg1));\n+\t\t\t\t    fold (build (PLUS_EXPR, type, \n+\t\t\t\t\t\t convert (type, parg0), \n+\t\t\t\t\t\t convert (type, marg))),\n+\t\t\t\t    convert (type, parg1)));\n \t      if (TREE_CODE (parg0) != MULT_EXPR\n \t\t  && TREE_CODE (parg1) == MULT_EXPR)\n \t\treturn fold (build (PLUS_EXPR, type,\n-\t\t\t\t    fold (build (PLUS_EXPR, type, parg1, marg)),\n-\t\t\t\t    parg0));\n+\t\t\t\t    fold (build (PLUS_EXPR, type, \n+\t\t\t\t\t\t convert (type, parg1), \n+\t\t\t\t\t\t convert (type, marg))),\n+\t\t\t\t    convert (type, parg0)));\n \t    }\n \n \t  if (TREE_CODE (arg0) == MULT_EXPR && TREE_CODE (arg1) == MULT_EXPR)\n@@ -5816,7 +5824,8 @@ fold (expr)\n \t\t\t\tTREE_OPERAND (arg0, 1)));\n \n \t  if (TREE_CODE (arg1) == INTEGER_CST\n-\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0), arg1,\n+\t      && 0 != (tem = extract_muldiv (TREE_OPERAND (t, 0),\n+\t\t\t\t\t     convert (type, arg1),\n \t\t\t\t\t     code, NULL_TREE)))\n \t    return convert (type, tem);\n "}]}