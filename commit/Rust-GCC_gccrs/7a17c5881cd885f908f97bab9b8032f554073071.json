{"sha": "7a17c5881cd885f908f97bab9b8032f554073071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExN2M1ODgxY2Q4ODVmOTA4Zjk3YmFiOWI4MDMyZjU1NDA3MzA3MQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-07-19T02:02:32Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-07-19T02:02:32Z"}, "message": "(find_reg): Store divide results in temporary variables.\n\nFrom-SVN: r7778", "tree": {"sha": "23aa2a934548804b727312cac3643340d890b494", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23aa2a934548804b727312cac3643340d890b494"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a17c5881cd885f908f97bab9b8032f554073071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a17c5881cd885f908f97bab9b8032f554073071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a17c5881cd885f908f97bab9b8032f554073071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a17c5881cd885f908f97bab9b8032f554073071/comments", "author": null, "committer": null, "parents": [{"sha": "8c4f5c09f073aa9cf6991212446510634c4fba16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4f5c09f073aa9cf6991212446510634c4fba16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c4f5c09f073aa9cf6991212446510634c4fba16"}], "stats": {"total": 46, "additions": 27, "deletions": 19}, "files": [{"sha": "3f15cbe1302c29a47f68af72ea64e57db1e36d6b", "filename": "gcc/global.c", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a17c5881cd885f908f97bab9b8032f554073071/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a17c5881cd885f908f97bab9b8032f554073071/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=7a17c5881cd885f908f97bab9b8032f554073071", "patch": "@@ -1096,28 +1096,36 @@ find_reg (allocno, losers, alt_regs_p, accept_call_clobbered, retrying)\n \t  if (local_reg_n_refs[regno] != 0\n \t      /* Don't use a reg no good for this pseudo.  */\n \t      && ! TEST_HARD_REG_BIT (used2, regno)\n-\t      && HARD_REGNO_MODE_OK (regno, mode)\n-\t      && (((double) local_reg_n_refs[regno]\n-\t\t   / local_reg_live_length[regno])\n-\t\t  < ((double) allocno_n_refs[allocno]\n-\t\t     / allocno_live_length[allocno])))\n+\t      && HARD_REGNO_MODE_OK (regno, mode))\n \t    {\n-\t      /* Hard reg REGNO was used less in total by local regs\n-\t\t than it would be used by this one allocno!  */\n-\t      int k;\n-\t      for (k = 0; k < max_regno; k++)\n-\t\tif (reg_renumber[k] >= 0)\n-\t\t  {\n-\t\t    int r = reg_renumber[k];\n-\t\t    int endregno\n-\t\t      = r + HARD_REGNO_NREGS (r, PSEUDO_REGNO_MODE (k));\n+\t      /* We explicitly evaluate the divide results into temporary\n+\t\t variables so as to avoid excess precision problems that occur\n+\t\t on a i386-unknown-sysv4.2 (unixware) host.  */\n+\t\t \n+\t      double tmp1 = ((double) local_reg_n_refs[regno]\n+\t\t\t    / local_reg_live_length[regno]);\n+\t      double tmp2 = ((double) allocno_n_refs[allocno]\n+\t\t\t     / allocno_live_length[allocno]);\n+\n+\t      if (tmp1 < tmp2)\n+\t\t{\n+\t\t  /* Hard reg REGNO was used less in total by local regs\n+\t\t     than it would be used by this one allocno!  */\n+\t\t  int k;\n+\t\t  for (k = 0; k < max_regno; k++)\n+\t\t    if (reg_renumber[k] >= 0)\n+\t\t      {\n+\t\t\tint r = reg_renumber[k];\n+\t\t\tint endregno\n+\t\t\t  = r + HARD_REGNO_NREGS (r, PSEUDO_REGNO_MODE (k));\n \n-\t\t    if (regno >= r && regno < endregno)\n-\t\t      reg_renumber[k] = -1;\n-\t\t  }\n+\t\t\tif (regno >= r && regno < endregno)\n+\t\t\t  reg_renumber[k] = -1;\n+\t\t      }\n \n-\t      best_reg = regno;\n-\t      break;\n+\t\t  best_reg = regno;\n+\t\t  break;\n+\t\t}\n \t    }\n \t}\n     }"}]}