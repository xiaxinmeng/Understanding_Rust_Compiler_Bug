{"sha": "bdfb351b028b26de3435371f20cb687732253940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRmYjM1MWIwMjhiMjZkZTM0MzUzNzFmMjBjYjY4NzczMjI1Mzk0MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-03-25T00:09:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-03-25T00:09:36Z"}, "message": "alpha: Unify zero_extend patterns with attribute enabled.\n\nFrom-SVN: r171429", "tree": {"sha": "932086cb04d709b4890bb5f884463c56026ff0fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/932086cb04d709b4890bb5f884463c56026ff0fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdfb351b028b26de3435371f20cb687732253940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfb351b028b26de3435371f20cb687732253940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdfb351b028b26de3435371f20cb687732253940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdfb351b028b26de3435371f20cb687732253940/comments", "author": null, "committer": null, "parents": [{"sha": "6abe71eb3d5ea03e4a6bc56968607e59a5bafbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe71eb3d5ea03e4a6bc56968607e59a5bafbb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abe71eb3d5ea03e4a6bc56968607e59a5bafbb8"}], "stats": {"total": 157, "additions": 57, "deletions": 100}, "files": [{"sha": "6f21284497047c696296dc53fbd10a2b4643ca5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb351b028b26de3435371f20cb687732253940/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb351b028b26de3435371f20cb687732253940/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdfb351b028b26de3435371f20cb687732253940", "patch": "@@ -1,3 +1,12 @@\n+2011-02-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (attribute isa): New.\n+\t(attribute enabled): New.\n+\t(zero_extendqihi2): Merge from *zero_extendqihi2_{bwx,nobwx}.\n+\t(zero_extendqisi2, zero_extendqidi2): Similarly.\n+\t(zero_extendhisi2, zero_extendhidi2): Similarly.\n+\t* config/alpha/predicates.md (reg_or_bwx_memory_operand): New.\n+\n 2011-02-24  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/predicates.md (input_operand): Revert last change;"}, {"sha": "cb3821c92bc002015badab1d374e29645563a737", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 42, "deletions": 100, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb351b028b26de3435371f20cb687732253940/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb351b028b26de3435371f20cb687732253940/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=bdfb351b028b26de3435371f20cb687732253940", "patch": "@@ -177,6 +177,18 @@\n \n (define_attr \"cannot_copy\" \"false,true\"\n   (const_string \"false\"))\n+\n+;; Used to control the \"enabled\" attribute on a per-instruction basis.\n+(define_attr \"isa\" \"base,bwx,max,fix,cix\"\n+  (const_string \"base\"))\n+\n+(define_attr \"enabled\" \"\"\n+  (cond [(eq_attr \"isa\" \"bwx\")\t(symbol_ref \"TARGET_BWX\")\n+\t (eq_attr \"isa\" \"max\")\t(symbol_ref \"TARGET_MAX\")\n+\t (eq_attr \"isa\" \"fix\")\t(symbol_ref \"TARGET_FIX\")\n+\t (eq_attr \"isa\" \"cix\")\t(symbol_ref \"TARGET_CIX\")\n+\t]\n+\t(const_int 1)))\n \f\n ;; Include scheduling descriptions.\n   \n@@ -1092,130 +1104,60 @@\n   operands[4] = GEN_INT (mask2);\n })\n \n-(define_expand \"zero_extendqihi2\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n-  if (! TARGET_BWX)\n-    operands[1] = force_reg (QImode, operands[1]);\n-})\n-\n-(define_insn \"*zero_extendqihi2_bwx\"\n+(define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:HI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_BWX\"\n+\t(zero_extend:HI\n+\t  (match_operand:QI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n+  \"\"\n   \"@\n    and %1,0xff,%0\n    ldbu %0,%1\"\n-  [(set_attr \"type\" \"ilog,ild\")])\n+  [(set_attr \"type\" \"ilog,ild\")\n+   (set_attr \"isa\" \"*,bwx\")])\n \n-(define_insn \"*zero_extendqihi2_nobwx\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"! TARGET_BWX\"\n-  \"and %1,0xff,%0\"\n-  [(set_attr \"type\" \"ilog\")])\n-\n-(define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n-  if (! TARGET_BWX)\n-    operands[1] = force_reg (QImode, operands[1]);\n-})\n-\n-(define_insn \"*zero_extendqisi2_bwx\"\n+(define_insn \"zero_extendqisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_BWX\"\n+\t(zero_extend:SI\n+\t  (match_operand:QI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n+  \"\"\n   \"@\n    and %1,0xff,%0\n    ldbu %0,%1\"\n-  [(set_attr \"type\" \"ilog,ild\")])\n-\n-(define_insn \"*zero_extendqisi2_nobwx\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"! TARGET_BWX\"\n-  \"and %1,0xff,%0\"\n-  [(set_attr \"type\" \"ilog\")])\n-\n-(define_expand \"zero_extendqidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n-  if (! TARGET_BWX)\n-    operands[1] = force_reg (QImode, operands[1]);\n-})\n+  [(set_attr \"type\" \"ilog,ild\")\n+   (set_attr \"isa\" \"*,bwx\")])\n \n-(define_insn \"*zero_extendqidi2_bwx\"\n+(define_insn \"zero_extendqidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_BWX\"\n+\t(zero_extend:DI\n+\t  (match_operand:QI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n+  \"\"\n   \"@\n    and %1,0xff,%0\n    ldbu %0,%1\"\n-  [(set_attr \"type\" \"ilog,ild\")])\n-\n-(define_insn \"*zero_extendqidi2_nobwx\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:QI 1 \"register_operand\" \"r\")))]\n-  \"! TARGET_BWX\"\n-  \"and %1,0xff,%0\"\n-  [(set_attr \"type\" \"ilog\")])\n-\n-(define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n-  if (! TARGET_BWX)\n-    operands[1] = force_reg (HImode, operands[1]);\n-})\n+  [(set_attr \"type\" \"ilog,ild\")\n+   (set_attr \"isa\" \"*,bwx\")])\n \n-(define_insn \"*zero_extendhisi2_bwx\"\n+(define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_BWX\"\n+\t(zero_extend:SI\n+\t  (match_operand:HI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n+  \"\"\n   \"@\n    zapnot %1,3,%0\n    ldwu %0,%1\"\n-  [(set_attr \"type\" \"shift,ild\")])\n-\n-(define_insn \"*zero_extendhisi2_nobwx\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (match_operand:HI 1 \"register_operand\" \"r\")))]\n-  \"! TARGET_BWX\"\n-  \"zapnot %1,3,%0\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_expand \"zero_extendhidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n-  \"\"\n-{\n-  if (! TARGET_BWX)\n-    operands[1] = force_reg (HImode, operands[1]);\n-})\n+  [(set_attr \"type\" \"shift,ild\")\n+   (set_attr \"isa\" \"*,bwx\")])\n \n-(define_insn \"*zero_extendhidi2_bwx\"\n+(define_insn \"zero_extendhidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n-  \"TARGET_BWX\"\n+\t(zero_extend:DI\n+\t  (match_operand:HI 1 \"reg_or_bwx_memory_operand\" \"r,m\")))]\n+  \"\"\n   \"@\n    zapnot %1,3,%0\n    ldwu %0,%1\"\n-  [(set_attr \"type\" \"shift,ild\")])\n-\n-(define_insn \"*zero_extendhidi2_nobwx\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:HI 1 \"register_operand\" \"r\")))]\n-  \"\"\n-  \"zapnot %1,3,%0\"\n-  [(set_attr \"type\" \"shift\")])\n+  [(set_attr \"type\" \"shift,ild\")\n+   (set_attr \"isa\" \"*,bwx\")])\n \n (define_insn \"zero_extendsidi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "e43564dbc343d69e6b11a239349e419301491266", "filename": "gcc/config/alpha/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdfb351b028b26de3435371f20cb687732253940/gcc%2Fconfig%2Falpha%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdfb351b028b26de3435371f20cb687732253940/gcc%2Fconfig%2Falpha%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fpredicates.md?ref=bdfb351b028b26de3435371f20cb687732253940", "patch": "@@ -617,3 +617,9 @@\n     return false;\n   return for_each_rtx (&op, some_small_symbolic_operand_int, NULL);\n })\n+\n+;; Accept a register, or a memory if BWX is enabled.\n+(define_predicate \"reg_or_bwx_memory_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (and (match_test \"TARGET_BWX\")\n+\t    (match_operand 0 \"memory_operand\"))))"}]}