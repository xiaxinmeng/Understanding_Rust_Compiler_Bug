{"sha": "78e1b90d92801fb80eb85237453b108e7c724f35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlMWI5MGQ5MjgwMWZiODBlYjg1MjM3NDUzYjEwOGU3YzcyNGYzNQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2001-05-15T19:27:13Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2001-05-15T19:27:13Z"}, "message": "rs6000.md (movdi splitter): Sign extend more efficiently.\n\n\t* rs6000.md (movdi splitter): Sign extend more efficiently.\n\t* rs6000.c (reg_or_arith_cint_operand): Redefine 64-bit constant\n\tto \"long long\" valid on 32-bit and 64-bit hosts.\n\t(logical_operand): Cast trunc_int_for_mode rturn value.\n\t(rs6000_emit_move): Shift macro to encapsulate variable.\n\t(rs6000_va_start): Use HOST_WIDE_INT_PRINT_DEC.\n\t(rs6000_emit_{prologue,epilogue}): EH regno is unsigned but\n\tplus_constant requires signed argument.\n\nFrom-SVN: r42111", "tree": {"sha": "2d820ca2c3eb6657c73fa691deecc6db6b9f5f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d820ca2c3eb6657c73fa691deecc6db6b9f5f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e1b90d92801fb80eb85237453b108e7c724f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e1b90d92801fb80eb85237453b108e7c724f35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e1b90d92801fb80eb85237453b108e7c724f35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e1b90d92801fb80eb85237453b108e7c724f35/comments", "author": null, "committer": null, "parents": [{"sha": "48187504f8edc2a0db6317e77c180e6f0a57d882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48187504f8edc2a0db6317e77c180e6f0a57d882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48187504f8edc2a0db6317e77c180e6f0a57d882"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "39f6c3dc12f5ff6e385deff2cab844b73967f41a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e1b90d92801fb80eb85237453b108e7c724f35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e1b90d92801fb80eb85237453b108e7c724f35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e1b90d92801fb80eb85237453b108e7c724f35", "patch": "@@ -1,3 +1,14 @@\n+2001-05-15  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* rs6000.md (movdi splitter): Sign extend more efficiently.\n+\t* rs6000.c (reg_or_arith_cint_operand): Redefine 64-bit constant\n+\tto \"long long\" valid on 32-bit and 64-bit hosts.\n+\t(logical_operand): Cast trunc_int_for_mode rturn value.\n+\t(rs6000_emit_move): Shift macro to encapsulate variable.\n+\t(rs6000_va_start): Use HOST_WIDE_INT_PRINT_DEC.\n+\t(rs6000_emit_{prologue,epilogue}): EH regno is unsigned but\n+\tplus_constant requires signed argument.\n+\n 2001-05-15  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* gthr-posix.h: Make additional pthread-* functions weak."}, {"sha": "8d2a799b8e3ea28d6a18aeba04b4480d548852b4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e1b90d92801fb80eb85237453b108e7c724f35/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e1b90d92801fb80eb85237453b108e7c724f35/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=78e1b90d92801fb80eb85237453b108e7c724f35", "patch": "@@ -674,7 +674,7 @@ reg_or_arith_cint_operand (op, mode)\n \t     || (GET_CODE (op) == CONST_INT\n #if HOST_BITS_PER_WIDE_INT != 32\n \t\t && ((unsigned HOST_WIDE_INT) (INTVAL (op) + 0x80000000)\n-\t\t     < 0x100000000u)\n+\t\t     < (unsigned HOST_WIDE_INT) 0x100000000ll)\n #endif\n \t\t ));\n }\n@@ -1023,7 +1023,7 @@ logical_operand (op, mode)\n     return 0;\n \n   /* This must really be SImode, not MODE.  */\n-  if (opl != trunc_int_for_mode (opl, SImode))\n+  if (opl != (unsigned HOST_WIDE_INT) trunc_int_for_mode (opl, SImode))\n     return 0;\n \n   return ((opl & 0xffff) == 0\n@@ -1795,10 +1795,10 @@ rs6000_emit_move (dest, source, mode)\n \t  /* Darwin uses a special PIC legitimizer.  */\n \t  if (DEFAULT_ABI == ABI_DARWIN && flag_pic)\n \t    {\n+#if TARGET_MACHO\n \t      rtx temp_reg = ((reload_in_progress || reload_completed)\n \t\t\t      ? operands[0] : NULL);\n \n-#if TARGET_MACHO\n \t      operands[1] =\n \t\trs6000_machopic_legitimize_pic_address (operands[1], mode,\n \t\t\t\t\t\t\t\t    temp_reg);\n@@ -2451,8 +2451,15 @@ rs6000_va_start (stdarg_p, valist, nextarg)\n   n_fpr = current_function_args_info.fregno - FP_ARG_MIN_REG;\n \n   if (TARGET_DEBUG_ARG)\n-    fprintf (stderr, \"va_start: words = %d, n_gpr = %d, n_fpr = %d\\n\",\n-\t     words, n_gpr, n_fpr);\n+    {\n+      fputs (\"va_start: words = \", stderr);\n+      fprintf (stderr, HOST_WIDE_INT_PRINT_DEC, words);\n+      fputs (\", n_gpr = \", stderr);\n+      fprintf (stderr, HOST_WIDE_INT_PRINT_DEC, n_gpr);\n+      fputs (\", n_fpr = \", stderr);\n+      fprintf (stderr, HOST_WIDE_INT_PRINT_DEC, n_fpr);\n+      putc ('\\n', stderr);\n+    }\n \n   t = build (MODIFY_EXPR, TREE_TYPE (gpr), gpr, build_int_2 (n_gpr, 0));\n   TREE_SIDE_EFFECTS (t) = 1;\n@@ -5866,7 +5873,8 @@ rs6000_emit_prologue ()\n      easiest way to get the frame unwind information emitted.  */\n   if (current_function_calls_eh_return)\n     {\n-      int i, regno;\n+      unsigned int i, regno;\n+\n       for (i = 0; ; ++i)\n \t{\n \t  rtx addr, reg, mem;\n@@ -5877,7 +5885,8 @@ rs6000_emit_prologue ()\n \n \t  reg = gen_rtx_REG (reg_mode, regno);\n \t  addr = plus_constant (frame_reg_rtx,\n-\t\t\t\tinfo->ehrd_offset + sp_offset + reg_size * i);\n+\t\t\t\tinfo->ehrd_offset + sp_offset\n+\t\t\t\t+ reg_size * (int) i);\n \t  mem = gen_rtx_MEM (reg_mode, addr);\n \t  MEM_ALIAS_SET (mem) = rs6000_sr_alias_set;\n \n@@ -6123,7 +6132,8 @@ rs6000_emit_epilogue (sibcall)\n   /* Load exception handler data registers, if needed.  */\n   if (current_function_calls_eh_return)\n     {\n-      int i, regno;\n+      unsigned int i, regno;\n+\n       for (i = 0; ; ++i)\n \t{\n \t  rtx addr, mem;\n@@ -6133,7 +6143,8 @@ rs6000_emit_epilogue (sibcall)\n \t    break;\n \n \t  addr = plus_constant (frame_reg_rtx,\n-\t\t\t\tinfo->ehrd_offset + sp_offset + reg_size * i);\n+\t\t\t\tinfo->ehrd_offset + sp_offset\n+\t\t\t\t+ reg_size * (int) i);\n \t  mem = gen_rtx_MEM (reg_mode, addr);\n \t  MEM_ALIAS_SET (mem) = rs6000_sr_alias_set;\n "}, {"sha": "28ebfb47b38db17de621c6f4e9848bc59a76fb10", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e1b90d92801fb80eb85237453b108e7c724f35/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e1b90d92801fb80eb85237453b108e7c724f35/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=78e1b90d92801fb80eb85237453b108e7c724f35", "patch": "@@ -8132,7 +8132,7 @@\n   \"\n {\n #if HOST_BITS_PER_WIDE_INT != 32\n-  operands[2] = GEN_INT ((INTVAL (operands[1]) << 32) >> 32);\n+  operands[2] = GEN_INT ((INTVAL (operands[1]) ^ 0x80000000) - 0x80000000);\n #endif\n   operands[3] = gen_lowpart_common (SImode, operands[0]);\n }\")"}]}