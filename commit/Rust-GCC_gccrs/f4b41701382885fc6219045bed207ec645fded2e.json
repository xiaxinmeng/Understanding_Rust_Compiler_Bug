{"sha": "f4b41701382885fc6219045bed207ec645fded2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjRiNDE3MDEzODI4ODVmYzYyMTkwNDViZWQyMDdlYzY0NWZkZWQyZQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-30T07:05:14Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-08-31T01:25:57Z"}, "message": "Unify UNSPEC_MASKED_EQ/GT to the form of UNSPEC_PCMP.\n\nCurrently for evex vpcmpeqb instruction, we have two forms of rtl\ntemplate representation, one is (unspec [op1 op2] UNSPEC_MASK_EQ), the\nother is (unspec [op1, op2, const_int 0] UNSPEC_PCMP), which increases\nthe maintenance burden, such as optimization (not: vpcmpeqb)\nto (vpcmpneqb) requires two define_insn_and_split to match the two\nforms respectively, this patch removes UNSPEC_MASK_EQ/GT, unifying\nthem into the form of UNSPEC_PCMP.\n\ngcc/ChangeLog:\n\n\t* config/i386/sse.md (*<avx512>_ucmp<mode>3_1): Change from\n\tdefine_split to define_insn_and_split.\n\t(*avx2_eq<mode>3): Removed.\n\t(<avx512>_eq<mode>3<mask_scalar_merge_name>): Adjust pattern\n\t(<avx512>_eq<mode>3<mask_scalar_merge_name>_1): Rename to ..\n\t(*<avx512>_eq<mode>3<mask_scalar_merge_name>_1): .. this, and\n\tadjust pattern.\n\t(*avx2_gt<mode>3): Removed.\n\t(<avx512>_gt<mode>3<mask_scalar_merge_name>): Change from\n\tdefine_insn to define_expand, and adjust pattern.\n\t(UNSPEC_MASKED_EQ, UNSPEC_MASKED_GT): Removed.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512bw-vpcmpeqb-1.c: Adjust testcase.\n\t* gcc.target/i386/avx512bw-vpcmpeqw-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpcmpgtw-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpeqd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpeqq-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtd-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpcmpgtq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpeqq-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpcmpgtq-1.c: Ditto.\n\t* gcc.target/i386/bitwise_mask_op-1.c: Ditto.\n\t* gcc.target/i386/bitwise_mask_op-2.c: Ditto.", "tree": {"sha": "0bf22121298507b46299531dc265b37a94cb197e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf22121298507b46299531dc265b37a94cb197e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4b41701382885fc6219045bed207ec645fded2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b41701382885fc6219045bed207ec645fded2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b41701382885fc6219045bed207ec645fded2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b41701382885fc6219045bed207ec645fded2e/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e2f030b80cb650708b02086dbd5431cd231495f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e2f030b80cb650708b02086dbd5431cd231495f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e2f030b80cb650708b02086dbd5431cd231495f"}], "stats": {"total": 203, "additions": 78, "deletions": 125}, "files": [{"sha": "5785e73241c47923b0d62301461d381468328cf4", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 70, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -100,8 +100,6 @@\n   UNSPEC_COMPRESS\n   UNSPEC_COMPRESS_STORE\n   UNSPEC_EXPAND\n-  UNSPEC_MASKED_EQ\n-  UNSPEC_MASKED_GT\n \n   ;; Mask operations\n   UNSPEC_MASKOP\n@@ -3426,7 +3424,7 @@\n ;; For signed comparison, handle EQ 0: NEQ 4,\n ;; for unsigned comparison extra handle LE:2, NLE:6, equivalent to EQ and NEQ.\n \n-(define_split\n+(define_insn_and_split \"*<avx512>_ucmp<mode>3_1\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>\n \t  [(us_minus:VI12_AVX512VL\n@@ -3435,9 +3433,11 @@\n \t   (match_operand:VI12_AVX512VL 3 \"const0_operand\")\n \t   (match_operand:SI 4 \"const_0_to_7_operand\")]\n \t  UNSPEC_PCMP_ITER))]\n-  \"TARGET_AVX512BW\n+  \"TARGET_AVX512BW && ix86_pre_reload_split ()\n   && ix86_binary_operator_ok (US_MINUS, <MODE>mode, operands)\n   && (INTVAL (operands[4]) & <pcmp_signed_mask>) == 0\"\n+  \"#\"\n+  \"&& 1\"\n   [(const_int 0)]\n   {\n     /* LE: 2, NLT: 5, NLE: 6, LT: 1  */\n@@ -13801,24 +13801,6 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn_and_split \"*avx2_eq<mode>3\"\n- [(set (match_operand:VI_128_256  0 \"register_operand\")\n-\t(vec_merge:VI_128_256\n-\t  (match_operand:VI_128_256 1 \"vector_all_ones_operand\")\n-\t  (match_operand:VI_128_256 2 \"const0_operand\")\n-\t  (unspec:<avx512fmaskmode>\n-\t    [(match_operand:VI_128_256 3 \"nonimmediate_operand\")\n-\t     (match_operand:VI_128_256 4 \"nonimmediate_operand\")]\n-\t     UNSPEC_MASKED_EQ)))]\n-  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n-  && !(MEM_P (operands[3]) && MEM_P (operands[4]))\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(eq:VI_128_256\n-\t   (match_dup 3)\n-\t   (match_dup 4)))])\n-\n (define_insn_and_split \"*avx2_pcmp<mode>3_1\"\n  [(set (match_operand:VI_128_256  0 \"register_operand\")\n \t(vec_merge:VI_128_256\n@@ -13978,26 +13960,29 @@\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI12_AVX512VL 1 \"nonimmediate_operand\")\n-\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")]\n-\t  UNSPEC_MASKED_EQ))]\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t   (const_int 0)]\n+\t  UNSPEC_PCMP))]\n   \"TARGET_AVX512BW\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n \n (define_expand \"<avx512>_eq<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48_AVX512VL 1 \"nonimmediate_operand\")\n-\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\")]\n-\t  UNSPEC_MASKED_EQ))]\n+\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\")\n+\t   (const_int 0)]\n+\t  UNSPEC_PCMP))]\n   \"TARGET_AVX512F\"\n   \"ix86_fixup_binary_operands_no_copy (EQ, <MODE>mode, operands);\")\n \n-(define_insn \"<avx512>_eq<mode>3<mask_scalar_merge_name>_1\"\n+(define_insn \"*<avx512>_eq<mode>3<mask_scalar_merge_name>_1\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k,k\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI12_AVX512VL 1 \"nonimm_or_0_operand\" \"%v,v\")\n-\t   (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"vm,C\")]\n-\t  UNSPEC_MASKED_EQ))]\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimm_or_0_operand\" \"vm,C\")\n+\t   (const_int 0)]\n+\t  UNSPEC_PCMP))]\n   \"TARGET_AVX512BW && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    vpcmpeq<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\n@@ -14007,12 +13992,13 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx512>_eq<mode>3<mask_scalar_merge_name>_1\"\n+(define_insn \"*<avx512>_eq<mode>3<mask_scalar_merge_name>_1\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k,k\")\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48_AVX512VL 1 \"nonimm_or_0_operand\" \"%v,v\")\n-\t   (match_operand:VI48_AVX512VL 2 \"nonimm_or_0_operand\" \"vm,C\")]\n-\t  UNSPEC_MASKED_EQ))]\n+\t   (match_operand:VI48_AVX512VL 2 \"nonimm_or_0_operand\" \"vm,C\")\n+\t   (const_int 0)]\n+\t  UNSPEC_PCMP))]\n   \"TARGET_AVX512F && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    vpcmpeq<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\n@@ -14082,47 +14068,21 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn_and_split \"*avx2_gt<mode>3\"\n- [(set (match_operand:VI_128_256  0 \"register_operand\")\n-\t(vec_merge:VI_128_256\n-\t  (match_operand:VI_128_256 1 \"vector_all_ones_operand\")\n-\t  (match_operand:VI_128_256 2 \"const0_operand\")\n-\t  (unspec:<avx512fmaskmode>\n-\t    [(match_operand:VI_128_256 3 \"register_operand\")\n-\t     (match_operand:VI_128_256 4 \"nonimmediate_operand\")]\n-\t     UNSPEC_MASKED_GT)))]\n-  \"TARGET_AVX512VL\n-  && ix86_pre_reload_split ()\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (match_dup 0)\n-\t(gt:VI_128_256\n-\t   (match_dup 3)\n-\t   (match_dup 4)))])\n-\n-(define_insn \"<avx512>_gt<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+(define_expand \"<avx512>_gt<mode>3<mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>\n-\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")] UNSPEC_MASKED_GT))]\n-  \"TARGET_AVX512F\"\n-  \"vpcmpgt<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\")\n+\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\")\n+\t   (const_int 6)] UNSPEC_PCMP))]\n+  \"TARGET_AVX512F\")\n \n-(define_insn \"<avx512>_gt<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n+(define_expand \"<avx512>_gt<mode>3<mask_scalar_merge_name>\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>\n-\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")] UNSPEC_MASKED_GT))]\n-  \"TARGET_AVX512BW\"\n-  \"vpcmpgt<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\")\n+\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t   (const_int 6)] UNSPEC_PCMP))]\n+  \"TARGET_AVX512BW\")\n \n (define_insn \"*sse2_gt<mode>3\"\n   [(set (match_operand:VI124_128 0 \"register_operand\" \"=x,x\")"}, {"sha": "11a6007c609ade0a9259ba5ae5a0bae363d0cd33", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpeqb-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqb-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "5cf8198502d2334175b184fd9181cadae4eb3097", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpeqw-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpeqw-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "bc7e8b152ce2478f3e61795d1518cd8dcb57e3ea", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtb-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtb-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtb\\[ \\\\t\\]+|vpcmpb\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "02999e00e361f01a78540804af74692943d755d1", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpcmpgtw-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpcmpgtw-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,11 +1,11 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtw\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtw\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtw\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtw\\[ \\\\t\\]+|vpcmpw\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "33f4e73c8c4791a12299d68f40fa9a36bbb07263", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpeqd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpeqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpeqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpeqd-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "595ba5527036a2a5ba5c2c37bfd61d846c41d0bc", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpeqq-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpeqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpeqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpeqq-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "d038cfbe1f3c1ce1f763c482e25f508e6e1e3b3a", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgtd-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtd-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "ce2e41ad259b4e32699d7983f603af5b8720f569", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpcmpgtq-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpcmpgtq-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtq\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\]\\{%k\\[0-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "4322c5db74983c47921172d06f4f69eb73cdf7e8", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpeqd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpeqd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpeqd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpeqd-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n^k\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "69b200a6be729640bd1e2fb3d6aabdc628d3e227", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpeqq-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpeqq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpeqq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpeqq-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpeqq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpeqq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$0)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "2278a27e2dd511f21273089c52aa6b25aa17cffc", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtd-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtd-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtd\\[ \\\\t\\]+|vpcmpd\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "26cac3a1bad3bb67ec2ba4bf41078e8d5215f57f", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpcmpgtq-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtq-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtq-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpcmpgtq-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512vl -O2\" } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtq\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n-/* { dg-final { scan-assembler-times \"vpcmpgtq\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\](?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"(?:vpcmpgtq\\[ \\\\t\\]+|vpcmpq\\[ \\\\t\\]+\\\\\\$6)\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%k\\[0-7\\]\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n "}, {"sha": "826ed6921d44e5156643c5b42fea7cc8981a5d36", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-1.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-1.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -150,17 +150,13 @@ foo_notq (__m512i a, __m512i b, __m512i c, __m512i d)\n   return _mm512_mask_add_epi8 (c, ~m1, a, d);\n }\n \n-/* { dg-final { scan-assembler-times \"knotq\" \"2\" { target { ! ia32 } } } }  */\n-\n __m512i\n foo_notd (__m512i a, __m512i b, __m512i c, __m512i d)\n {\n   __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n   return _mm512_mask_add_epi16 (c, ~m1, a, d);\n }\n \n-/* { dg-final { scan-assembler-times \"knotd\" \"2\" { target { ! ia32 } } } }  */\n-\n __m512i\n foo_notw (__m512i a, __m512i b, __m512i c, __m512i d)\n {\n@@ -174,5 +170,3 @@ foo_notb (__m512i a, __m512i b, __m512i c, __m512i d)\n   __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n   return _mm512_mask_add_epi64 (c, ~m1, a, d);\n }\n-\n-/* { dg-final { scan-assembler-times \"knotw\" \"4\" } }  */"}, {"sha": "e93269bcd6c75b50d6bd6ded5aaee07edf850f9e", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4b41701382885fc6219045bed207ec645fded2e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-2.c?ref=f4b41701382885fc6219045bed207ec645fded2e", "patch": "@@ -1,7 +1,6 @@\n /* PR target/88808  */\n /* { dg-do compile } */\n /* { dg-options \"-mavx512bw -mavx512dq -O2\" } */\n-/* { dg-final { scan-assembler-times \"knotb\" \"2\" } }  */\n /* { dg-final { scan-assembler-times \"korb\" \"1\" } }  */\n /* { dg-final { scan-assembler-times \"kxorb\" \"1\" } }  */\n #include \"bitwise_mask_op-1.c\""}]}