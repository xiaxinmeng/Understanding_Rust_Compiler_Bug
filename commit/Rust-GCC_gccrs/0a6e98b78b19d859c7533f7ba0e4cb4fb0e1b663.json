{"sha": "0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE2ZTk4Yjc4YjE5ZDg1OWM3NTMzZjdiYTBlNGNiNGZiMGUxYjY2Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-10-30T15:35:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-10-30T15:35:02Z"}, "message": "Remove ios_mode::trunc from basic_ofstream openmode arguments\n\n\t* include/std/fstream (basic_ifstream, basic_ofstream, basic_fstream):\n\tRemove outdated comments about calling c_str() to create a file stream\n\tfrom a std::string.\n\t(basic_ofstream::basic_ofstream, basic_ofstream::open): Remove\n\tredundant ios_mode::trunc bits from default arguments and comments.\n\nFrom-SVN: r254226", "tree": {"sha": "50a908bd0174ba62a1def67560fd6515320d3bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50a908bd0174ba62a1def67560fd6515320d3bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791929c91a53a168bb46e3cd08612eb69d5a6785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791929c91a53a168bb46e3cd08612eb69d5a6785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791929c91a53a168bb46e3cd08612eb69d5a6785"}], "stats": {"total": 51, "additions": 17, "deletions": 34}, "files": [{"sha": "ed4d9560d7b6f46e000c59c17222246c8f815951", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663", "patch": "@@ -1,5 +1,11 @@\n 2017-10-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/fstream (basic_ifstream, basic_ofstream, basic_fstream):\n+\tRemove outdated comments about calling c_str() to create a file stream\n+\tfrom a std::string.\n+\t(basic_ofstream::basic_ofstream, basic_ofstream::open): Remove\n+\tredundant ios_mode::trunc bits from default arguments and comments.\n+\n \t* doc/xml/faq.xml: Adjust \"What is libstdc++?\" answer slightly.\n \n \t* include/bits/hashtable_policy.h: Include <tuple>."}, {"sha": "a3324c004d72f98546f231f90036a3137e694fcb", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=0a6e98b78b19d859c7533f7ba0e4cb4fb0e1b663", "patch": "@@ -506,9 +506,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __mode  Open file in specified mode (see std::ios_base).\n        *\n        *  @c ios_base::in is automatically included in @a __mode.\n-       *\n-       *  Tip:  When using std::string to hold the filename, you must use\n-       *  .c_str() before passing it to this constructor.\n        */\n       explicit\n       basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)\n@@ -622,9 +619,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls @c std::basic_filebuf::open(s,__mode|in).  If that function\n        *  fails, @c failbit is set in the stream's error state.\n-       *\n-       *  Tip:  When using std::string to hold the filename, you must use\n-       *  .c_str() before passing it to this constructor.\n        */\n       void\n       open(const char* __s, ios_base::openmode __mode = ios_base::in)\n@@ -738,15 +732,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __s  Null terminated string specifying the filename.\n        *  @param  __mode  Open file in specified mode (see std::ios_base).\n        *\n-       *  @c ios_base::out | @c ios_base::trunc is automatically included in\n-       *  @a __mode.\n-       *\n-       *  Tip:  When using std::string to hold the filename, you must use\n-       *  .c_str() before passing it to this constructor.\n+       *  @c ios_base::out is automatically included in @a __mode.\n        */\n       explicit\n       basic_ofstream(const char* __s,\n-\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n+\t\t     ios_base::openmode __mode = ios_base::out)\n       : __ostream_type(), _M_filebuf()\n       {\n \tthis->init(&_M_filebuf);\n@@ -759,12 +749,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __s  std::string specifying the filename.\n        *  @param  __mode  Open file in specified mode (see std::ios_base).\n        *\n-       *  @c ios_base::out | @c ios_base::trunc is automatically included in\n-       *  @a __mode.\n+       *  @c ios_base::out is automatically included in @a __mode.\n        */\n       explicit\n       basic_ofstream(const std::string& __s,\n-\t\t     ios_base::openmode __mode = ios_base::out|ios_base::trunc)\n+\t\t     ios_base::openmode __mode = ios_base::out)\n       : __ostream_type(), _M_filebuf()\n       {\n \tthis->init(&_M_filebuf);\n@@ -777,13 +766,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __s  filesystem::path specifying the filename.\n        *  @param  __mode  Open file in specified mode (see std::ios_base).\n        *\n-       *  @c ios_base::out | @c ios_base::trunc is automatically included in\n-       *  @a __mode.\n+       *  @c ios_base::out is automatically included in @a __mode.\n        */\n       template<typename _Path, typename = _Require<\n \t  is_constructible<__filebuf_type, const _Path&, ios_base::openmode>>>\n-\tbasic_ofstream(const _Path& __s, ios_base::openmode __mode\n-\t\t       = ios_base::out|ios_base::trunc)\n+\tbasic_ofstream(const _Path& __s,\n+\t\t       ios_base::openmode __mode = ios_base::out)\n \t: basic_ofstream(__s.c_str(), __mode)\n \t{ }\n #endif // C++17\n@@ -857,15 +845,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __s  The name of the file.\n        *  @param  __mode  The open mode flags.\n        *\n-       *  Calls @c std::basic_filebuf::open(__s,__mode|out|trunc).  If that\n+       *  Calls @c std::basic_filebuf::open(__s,__mode|out).  If that\n        *  function fails, @c failbit is set in the stream's error state.\n-       *\n-       *  Tip:  When using std::string to hold the filename, you must use\n-       *  .c_str() before passing it to this constructor.\n        */\n       void\n-      open(const char* __s,\n-\t   ios_base::openmode __mode = ios_base::out | ios_base::trunc)\n+      open(const char* __s, ios_base::openmode __mode = ios_base::out)\n       {\n \tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n \t  this->setstate(ios_base::failbit);\n@@ -881,12 +865,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __s  The name of the file.\n        *  @param  __mode  The open mode flags.\n        *\n-       *  Calls @c std::basic_filebuf::open(s,mode|out|trunc).  If that\n+       *  Calls @c std::basic_filebuf::open(s,mode|out).  If that\n        *  function fails, @c failbit is set in the stream's error state.\n        */\n       void\n-      open(const std::string& __s,\n-\t   ios_base::openmode __mode = ios_base::out | ios_base::trunc)\n+      open(const std::string& __s, ios_base::openmode __mode = ios_base::out)\n       {\n \tif (!_M_filebuf.open(__s, __mode | ios_base::out))\n \t  this->setstate(ios_base::failbit);\n@@ -978,9 +961,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @brief  Create an input/output file stream.\n        *  @param  __s  Null terminated string specifying the filename.\n        *  @param  __mode  Open file in specified mode (see std::ios_base).\n-       *\n-       *  Tip:  When using std::string to hold the filename, you must use\n-       *  .c_str() before passing it to this constructor.\n        */\n       explicit\n       basic_fstream(const char* __s,\n@@ -1091,9 +1071,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        *  Calls @c std::basic_filebuf::open(__s,__mode).  If that\n        *  function fails, @c failbit is set in the stream's error state.\n-       *\n-       *  Tip:  When using std::string to hold the filename, you must use\n-       *  .c_str() before passing it to this constructor.\n        */\n       void\n       open(const char* __s,"}]}