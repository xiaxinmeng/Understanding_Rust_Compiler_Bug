{"sha": "6bc709c1c5cf974a180d9fe141594aee17285e8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJjNzA5YzFjNWNmOTc0YTE4MGQ5ZmUxNDE1OTRhZWUxNzI4NWU4YQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2004-05-20T02:15:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2004-05-20T02:15:45Z"}, "message": "re PR target/15383 (__float128 function name is used for long double)\n\n2004-05-19  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/15383\n\t* config/ia64/ia64.c (ia64_expand_compare): Don't check\n\tTARGET_HPUX for TFmode compare. Abort if op0 is in TFmode and\n\tcmptf_libfunc isn't set.\n\t(ia64_init_libfuncs): Rename TFmode libfuncs using the HPUX\n\tconventions.\n\t(ia64_sysv4_init_libfuncs): New.\n\n\t* config/ia64/sysv4.h (TARGET_INIT_LIBFUNCS): New. Defined as\n\tia64_sysv4_init_libfuncs.\n\nFrom-SVN: r82047", "tree": {"sha": "d698916d18d581c7b7f69215ae905d5c18fc4d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d698916d18d581c7b7f69215ae905d5c18fc4d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bc709c1c5cf974a180d9fe141594aee17285e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc709c1c5cf974a180d9fe141594aee17285e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bc709c1c5cf974a180d9fe141594aee17285e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bc709c1c5cf974a180d9fe141594aee17285e8a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a43b9dbe90927631557e12f3fdb7babf51bf5116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a43b9dbe90927631557e12f3fdb7babf51bf5116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a43b9dbe90927631557e12f3fdb7babf51bf5116"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "1c9c6ce291349543d0c3e1beb8c5f50cb4e3283e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc709c1c5cf974a180d9fe141594aee17285e8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc709c1c5cf974a180d9fe141594aee17285e8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bc709c1c5cf974a180d9fe141594aee17285e8a", "patch": "@@ -1,3 +1,16 @@\n+2004-05-19  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/15383\n+\t* config/ia64/ia64.c (ia64_expand_compare): Don't check\n+\tTARGET_HPUX for TFmode compare. Abort if op0 is in TFmode and\n+\tcmptf_libfunc isn't set.\n+\t(ia64_init_libfuncs): Rename TFmode libfuncs using the HPUX\n+\tconventions.\n+\t(ia64_sysv4_init_libfuncs): New.\n+\n+\t* config/ia64/sysv4.h (TARGET_INIT_LIBFUNCS): New. Defined as\n+\tia64_sysv4_init_libfuncs.\n+\n 2004-05-20  Falk Hueffner  <falk@debian.org>\n \n \tPR other/15526"}, {"sha": "6e3075de421f5f01f98855c56ae957c2e67c24db", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc709c1c5cf974a180d9fe141594aee17285e8a/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc709c1c5cf974a180d9fe141594aee17285e8a/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6bc709c1c5cf974a180d9fe141594aee17285e8a", "patch": "@@ -265,6 +265,8 @@ static void ia64_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n static void ia64_hpux_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n+static void ia64_sysv4_init_libfuncs (void)\n+     ATTRIBUTE_UNUSED;\n static void ia64_vms_init_libfuncs (void)\n      ATTRIBUTE_UNUSED;\n \n@@ -1671,7 +1673,7 @@ ia64_expand_compare (enum rtx_code code, enum machine_mode mode)\n   /* HPUX TFmode compare requires a library call to _U_Qfcmp, which takes a\n      magic number as its third argument, that indicates what to do.\n      The return value is an integer to be compared against zero.  */\n-  else if (TARGET_HPUX && GET_MODE (op0) == TFmode)\n+  else if (GET_MODE (op0) == TFmode)\n     {\n       enum qfcmp_magic {\n \tQCMP_INV = 1,\t/* Raise FP_INVALID on SNaN as a side effect.  */\n@@ -1682,7 +1684,7 @@ ia64_expand_compare (enum rtx_code code, enum machine_mode mode)\n       } magic;\n       enum rtx_code ncode;\n       rtx ret, insns;\n-      if (GET_MODE (op1) != TFmode)\n+      if (!cmptf_libfunc || GET_MODE (op1) != TFmode)\n \tabort ();\n       switch (code)\n \t{\n@@ -8743,7 +8745,9 @@ ia64_hpux_file_end (void)\n }\n \n /* Set SImode div/mod functions, init_integral_libfuncs only initializes\n-   modes of word_mode and larger.  */\n+   modes of word_mode and larger.  Rename the TFmode libfuncs using the\n+   HPUX conventions. __divtf3 is used for XFmode. We need to keep it for\n+   backward compatibility. */\n \n static void\n ia64_init_libfuncs (void)\n@@ -8752,6 +8756,27 @@ ia64_init_libfuncs (void)\n   set_optab_libfunc (udiv_optab, SImode, \"__udivsi3\");\n   set_optab_libfunc (smod_optab, SImode, \"__modsi3\");\n   set_optab_libfunc (umod_optab, SImode, \"__umodsi3\");\n+\n+  set_optab_libfunc (add_optab, TFmode, \"_U_Qfadd\");\n+  set_optab_libfunc (sub_optab, TFmode, \"_U_Qfsub\");\n+  set_optab_libfunc (smul_optab, TFmode, \"_U_Qfmpy\");\n+  set_optab_libfunc (sdiv_optab, TFmode, \"_U_Qfdiv\");\n+  set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n+\n+  set_conv_libfunc (sext_optab, TFmode, SFmode, \"_U_Qfcnvff_sgl_to_quad\");\n+  set_conv_libfunc (sext_optab, TFmode, DFmode, \"_U_Qfcnvff_dbl_to_quad\");\n+  set_conv_libfunc (sext_optab, TFmode, XFmode, \"_U_Qfcnvff_f80_to_quad\");\n+  set_conv_libfunc (trunc_optab, SFmode, TFmode, \"_U_Qfcnvff_quad_to_sgl\");\n+  set_conv_libfunc (trunc_optab, DFmode, TFmode, \"_U_Qfcnvff_quad_to_dbl\");\n+  set_conv_libfunc (trunc_optab, XFmode, TFmode, \"_U_Qfcnvff_quad_to_f80\");\n+\n+  set_conv_libfunc (sfix_optab, SImode, TFmode, \"_U_Qfcnvfxt_quad_to_sgl\");\n+  set_conv_libfunc (sfix_optab, DImode, TFmode, \"_U_Qfcnvfxt_quad_to_dbl\");\n+  set_conv_libfunc (ufix_optab, SImode, TFmode, \"_U_Qfcnvfxut_quad_to_sgl\");\n+  set_conv_libfunc (ufix_optab, DImode, TFmode, \"_U_Qfcnvfxut_quad_to_dbl\");\n+\n+  set_conv_libfunc (sfloat_optab, TFmode, SImode, \"_U_Qfcnvxf_sgl_to_quad\");\n+  set_conv_libfunc (sfloat_optab, TFmode, DImode, \"_U_Qfcnvxf_dbl_to_quad\");\n }\n \n /* Rename all the TFmode libfuncs using the HPUX conventions.  */\n@@ -8761,14 +8786,9 @@ ia64_hpux_init_libfuncs (void)\n {\n   ia64_init_libfuncs ();\n \n-  set_optab_libfunc (add_optab, TFmode, \"_U_Qfadd\");\n-  set_optab_libfunc (sub_optab, TFmode, \"_U_Qfsub\");\n-  set_optab_libfunc (smul_optab, TFmode, \"_U_Qfmpy\");\n-  set_optab_libfunc (sdiv_optab, TFmode, \"_U_Qfdiv\");\n   set_optab_libfunc (smin_optab, TFmode, \"_U_Qfmin\");\n   set_optab_libfunc (smax_optab, TFmode, \"_U_Qfmax\");\n   set_optab_libfunc (abs_optab, TFmode, \"_U_Qfabs\");\n-  set_optab_libfunc (neg_optab, TFmode, \"_U_Qfneg\");\n \n   /* ia64_expand_compare uses this.  */\n   cmptf_libfunc = init_one_libfunc (\"_U_Qfcmp\");\n@@ -8780,21 +8800,6 @@ ia64_hpux_init_libfuncs (void)\n   set_optab_libfunc (ge_optab, TFmode, 0);\n   set_optab_libfunc (lt_optab, TFmode, 0);\n   set_optab_libfunc (le_optab, TFmode, 0);\n-\n-  set_conv_libfunc (sext_optab,   TFmode, SFmode, \"_U_Qfcnvff_sgl_to_quad\");\n-  set_conv_libfunc (sext_optab,   TFmode, DFmode, \"_U_Qfcnvff_dbl_to_quad\");\n-  set_conv_libfunc (sext_optab,   TFmode, XFmode, \"_U_Qfcnvff_f80_to_quad\");\n-  set_conv_libfunc (trunc_optab,  SFmode, TFmode, \"_U_Qfcnvff_quad_to_sgl\");\n-  set_conv_libfunc (trunc_optab,  DFmode, TFmode, \"_U_Qfcnvff_quad_to_dbl\");\n-  set_conv_libfunc (trunc_optab,  XFmode, TFmode, \"_U_Qfcnvff_quad_to_f80\");\n-\n-  set_conv_libfunc (sfix_optab,   SImode, TFmode, \"_U_Qfcnvfxt_quad_to_sgl\");\n-  set_conv_libfunc (sfix_optab,   DImode, TFmode, \"_U_Qfcnvfxt_quad_to_dbl\");\n-  set_conv_libfunc (ufix_optab,   SImode, TFmode, \"_U_Qfcnvfxut_quad_to_sgl\");\n-  set_conv_libfunc (ufix_optab,   DImode, TFmode, \"_U_Qfcnvfxut_quad_to_dbl\");\n-\n-  set_conv_libfunc (sfloat_optab, TFmode, SImode, \"_U_Qfcnvxf_sgl_to_quad\");\n-  set_conv_libfunc (sfloat_optab, TFmode, DImode, \"_U_Qfcnvxf_dbl_to_quad\");\n }\n \n /* Rename the division and modulus functions in VMS.  */\n@@ -8811,6 +8816,28 @@ ia64_vms_init_libfuncs (void)\n   set_optab_libfunc (umod_optab, SImode, \"OTS$REM_UI\");\n   set_optab_libfunc (umod_optab, DImode, \"OTS$REM_UL\");\n }\n+\n+/* Rename the TFmode libfuncs available from soft-fp in glibc using\n+   the HPUX conventions.  */\n+\n+static void\n+ia64_sysv4_init_libfuncs (void)\n+{\n+  ia64_init_libfuncs ();\n+\n+  /* These functions are not part of the HPUX TFmode interface.  We\n+     use them instead of _U_Qfcmp, which doesn't work the way we\n+     expect.  */\n+  set_optab_libfunc (eq_optab, TFmode, \"_U_Qfeq\");\n+  set_optab_libfunc (ne_optab, TFmode, \"_U_Qfne\");\n+  set_optab_libfunc (gt_optab, TFmode, \"_U_Qfgt\");\n+  set_optab_libfunc (ge_optab, TFmode, \"_U_Qfge\");\n+  set_optab_libfunc (lt_optab, TFmode, \"_U_Qflt\");\n+  set_optab_libfunc (le_optab, TFmode, \"_U_Qfle\");\n+\n+  /* We leave out _U_Qfmin, _U_Qfmax and _U_Qfabs since soft-fp in\n+     glibc doesn't have them.  */\n+}\n \f\n /* Switch to the section to which we should output X.  The only thing\n    special we do here is to honor small data.  */"}, {"sha": "69c2424094884079c3c2e94a235d07bcbd9230e9", "filename": "gcc/config/ia64/sysv4.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bc709c1c5cf974a180d9fe141594aee17285e8a/gcc%2Fconfig%2Fia64%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bc709c1c5cf974a180d9fe141594aee17285e8a/gcc%2Fconfig%2Fia64%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fsysv4.h?ref=6bc709c1c5cf974a180d9fe141594aee17285e8a", "patch": "@@ -1,5 +1,8 @@\n /* Override definitions in elfos.h/svr4.h to be correct for IA64.  */\n \n+#undef TARGET_INIT_LIBFUNCS\n+#define TARGET_INIT_LIBFUNCS ia64_sysv4_init_libfuncs\n+\n /* We want DWARF2 as specified by the IA64 ABI.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG"}]}