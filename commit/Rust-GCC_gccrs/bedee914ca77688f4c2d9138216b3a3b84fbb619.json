{"sha": "bedee914ca77688f4c2d9138216b3a3b84fbb619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkZWU5MTRjYTc3Njg4ZjRjMmQ5MTM4MjE2YjNhM2I4NGZiYjYxOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-05-16T20:09:02Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-05-16T20:09:02Z"}, "message": "re PR fortran/80554 ([f08] variable redefinition in submodule)\n\n2017-05-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/80554\n\t* decl.c (build_sym): In a submodule allow overriding of host\n\tassociated symbols from the ancestor module with a new\n\tdeclaration.\n\n2017-05-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/80554\n\t* gfortran.dg/submodule_29.f08: New test.\n\nFrom-SVN: r248129", "tree": {"sha": "54fdb50929f1ca700c25969ca92f586ec22061bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54fdb50929f1ca700c25969ca92f586ec22061bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bedee914ca77688f4c2d9138216b3a3b84fbb619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedee914ca77688f4c2d9138216b3a3b84fbb619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedee914ca77688f4c2d9138216b3a3b84fbb619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedee914ca77688f4c2d9138216b3a3b84fbb619/comments", "author": null, "committer": null, "parents": [{"sha": "10791753c191d1f9d886e8977ff331b28d48398d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10791753c191d1f9d886e8977ff331b28d48398d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10791753c191d1f9d886e8977ff331b28d48398d"}], "stats": {"total": 96, "additions": 92, "deletions": 4}, "files": [{"sha": "a364e4460f91637388e2c08af215018f84914c94", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bedee914ca77688f4c2d9138216b3a3b84fbb619", "patch": "@@ -1,3 +1,10 @@\n+2017-05-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80554\n+\t* decl.c (build_sym): In a submodule allow overriding of host\n+\tassociated symbols from the ancestor module with a new\n+\tdeclaration.\n+\n 2017-05-15  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/80674\n@@ -18,7 +25,7 @@\n \tend and stride expressions\n \t(gfc_advance_section): Simplify start and end\n \texpressions\n-\t(gfc_get_section_index): Simplify start expression \n+\t(gfc_get_section_index): Simplify start expression\n \n 2017-05-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n@@ -35,7 +42,7 @@\n \tFortran 95 restriction on namelist objects.\n \n 2017-05-11  Nathan Sidwell  <nathan@acm.org>\n-\t\n+\n \t* trans-decl.c: Include dumpfile.h not tree-dump.h,\n \n 2017-05-09  Janus Weil  <janus@gcc.gnu.org>"}, {"sha": "1cbf23819a94fbbc3617603ebc724939b4b473df", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=bedee914ca77688f4c2d9138216b3a3b84fbb619", "patch": "@@ -1383,8 +1383,28 @@ build_sym (const char *name, gfc_charlen *cl, bool cl_deferred,\n   symbol_attribute attr;\n   gfc_symbol *sym;\n   int upper;\n+  gfc_symtree *st;\n \n-  if (gfc_get_symbol (name, NULL, &sym))\n+  /* Symbols in a submodule are host associated from the parent module or\n+     submodules. Therefore, they can be overridden by declarations in the\n+     submodule scope. Deal with this by attaching the existing symbol to\n+     a new symtree and recycling the old symtree with a new symbol...  */\n+  st = gfc_find_symtree (gfc_current_ns->sym_root, name);\n+  if (st != NULL && gfc_state_stack->state == COMP_SUBMODULE\n+      && st->n.sym != NULL\n+      && st->n.sym->attr.host_assoc && st->n.sym->attr.used_in_submodule)\n+    {\n+      gfc_symtree *s = gfc_get_unique_symtree (gfc_current_ns);\n+      s->n.sym = st->n.sym;\n+      sym = gfc_new_symbol (name, gfc_current_ns);\n+\n+\n+      st->n.sym = sym;\n+      sym->refs++;\n+      gfc_set_sym_referenced (sym);\n+    }\n+  /* ...Otherwise generate a new symtree and new symbol.  */\n+  else if (gfc_get_symbol (name, NULL, &sym))\n     return false;\n \n   /* Check if the name has already been defined as a type.  The"}, {"sha": "b8ea07b10f6750dc6e4c8c2767e00b644b0aa5d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bedee914ca77688f4c2d9138216b3a3b84fbb619", "patch": "@@ -1,3 +1,8 @@\n+2017-05-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/80554\n+\t* gfortran.dg/submodule_29.f08: New test.\n+\n 2017-05-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* g++.dg/other/accessor-fixits-1.C: New test case.\n@@ -1279,7 +1284,7 @@\n \t* gcc.dg/tree-ssa/vrp35.c: Disable EVRP.\n \t* gcc.dg/tree-ssa/vrp36.c: Likewise.\n \t* gcc.dg/tree-ssa/pr49039.c: Likewise.\n- \n+\n 2017-04-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/80349"}, {"sha": "98141cc700ce557c24d419c19a94b61ea9d5594f", "filename": "gcc/testsuite/gfortran.dg/submodule_29.f08", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_29.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedee914ca77688f4c2d9138216b3a3b84fbb619/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_29.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsubmodule_29.f08?ref=bedee914ca77688f4c2d9138216b3a3b84fbb619", "patch": "@@ -0,0 +1,56 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR80554 in which it was not recognised that the symbol 'i'\n+! is host associated in the submodule 's' so that the new declaration in the\n+! submodule was rejected.\n+!\n+! Contributed by Tamas Bela Feher  <tamas.bela.feher@ipp.mpg.de>\n+!\n+module M\n+  implicit none\n+  integer :: i = 0\n+  character (100) :: buffer\n+  interface\n+    module subroutine write_i()\n+    end subroutine\n+  end interface\n+  interface\n+    module subroutine write_i_2()\n+    end subroutine\n+  end interface\n+contains\n+  subroutine foo\n+    integer :: i\n+  end\n+end module\n+\n+submodule (M) S\n+    integer :: i = 137\n+  contains\n+    module subroutine write_i()\n+       write (buffer,*) i\n+    end subroutine\n+end submodule\n+\n+submodule (M:S) S2\n+    integer :: i = 1037\n+  contains\n+    module subroutine write_i_2()\n+       write (buffer,*) i\n+    end subroutine\n+end submodule\n+\n+program test_submod_variable\n+  use M\n+  implicit none\n+  integer :: j\n+  i = 42\n+  call write_i\n+  read (buffer, *) j\n+  if (i .ne. 42) call abort\n+  if (j .ne. 137) call abort\n+  call write_i_2\n+  read (buffer, *) j\n+  if (i .ne. 42) call abort\n+  if (j .ne. 1037) call abort\n+end program"}]}