{"sha": "efe040bf219da9f0aa2298c19909e392c784b3d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlMDQwYmYyMTlkYTlmMGFhMjI5OGMxOTkwOWUzOTJjNzg0YjNkMw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-10-10T09:02:13Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-10-10T09:02:13Z"}, "message": "tree-loop-distribution.c (generate_loops_for_partition): Remove inner loop's exit stmt by making it always exit the loop...\n\n\t* tree-loop-distribution.c (generate_loops_for_partition): Remove\n\tinner loop's exit stmt by making it always exit the loop, otherwise\n\twe would generate an infinite empty loop.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/ldist-27.c: New test.\n\nFrom-SVN: r253580", "tree": {"sha": "5c6a56e26a252305e9ecc5ca13b46e9a1ac73b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c6a56e26a252305e9ecc5ca13b46e9a1ac73b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe040bf219da9f0aa2298c19909e392c784b3d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe040bf219da9f0aa2298c19909e392c784b3d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe040bf219da9f0aa2298c19909e392c784b3d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe040bf219da9f0aa2298c19909e392c784b3d3/comments", "author": null, "committer": null, "parents": [{"sha": "166b87998a85c8c7d6db923bc7c8370af3665381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/166b87998a85c8c7d6db923bc7c8370af3665381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/166b87998a85c8c7d6db923bc7c8370af3665381"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "01482824f71e9a8c96bb42b02970c140039bb576", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efe040bf219da9f0aa2298c19909e392c784b3d3", "patch": "@@ -1,3 +1,9 @@\n+2017-10-10  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-loop-distribution.c (generate_loops_for_partition): Remove\n+\tinner loop's exit stmt by making it always exit the loop, otherwise\n+\twe would generate an infinite empty loop.\n+\n 2017-10-10  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-vect-loop-manip.c (slpeel_tree_duplicate_loop_to_edge_cfg): Skip"}, {"sha": "33a5cf553022045a743e1caf06eb21e26c0069e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efe040bf219da9f0aa2298c19909e392c784b3d3", "patch": "@@ -1,3 +1,7 @@\n+2017-10-10  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* gcc.dg/tree-ssa/ldist-27.c: New test.\n+\n 2017-10-09  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/amo1.c: New test."}, {"sha": "3580c65f09ba0d140ceac1e54b1e9a495a343520", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-27.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-27.c?ref=efe040bf219da9f0aa2298c19909e392c784b3d3", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -ftree-loop-distribute-patterns -fdump-tree-ldist-details\" } */\n+\n+#define M (300)\n+#define N (200)\n+\n+struct st\n+{\n+  double a[M];\n+  double b[M];\n+  double c[M][N];\n+};\n+\n+int __attribute__ ((noinline)) foo (struct st *s)\n+{\n+  int i, j;\n+  for (i = 0; i != M;)\n+    {\n+      s->a[i] = 0.0;\n+      s->b[i] = 1.0;\n+      for (j = 0; 1; ++j)\n+\t{\n+\t  if (j == N) goto L2;\n+\t  s->c[i][j] = 0.0;\n+\t}\n+L2:\n+      ++i;\n+    }\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  struct st s;\n+  return foo (&s);\n+}\n+\n+/* { dg-final { scan-tree-dump \"distributed: split to \" \"ldist\" } } */"}, {"sha": "999b32ef06cd856b8db4f9385920b230bec7f7b1", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe040bf219da9f0aa2298c19909e392c784b3d3/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=efe040bf219da9f0aa2298c19909e392c784b3d3", "patch": "@@ -830,6 +830,10 @@ generate_loops_for_partition (struct loop *loop, partition *partition,\n   for (i = 0; i < loop->num_nodes; i++)\n     {\n       basic_block bb = bbs[i];\n+      edge inner_exit = NULL;\n+\n+      if (loop != bb->loop_father)\n+\tinner_exit = single_exit (bb->loop_father);\n \n       for (gphi_iterator bsi = gsi_start_phis (bb); !gsi_end_p (bsi);)\n \t{\n@@ -848,11 +852,17 @@ generate_loops_for_partition (struct loop *loop, partition *partition,\n \t      && !is_gimple_debug (stmt)\n \t      && !bitmap_bit_p (partition->stmts, gimple_uid (stmt)))\n \t    {\n-\t      /* Choose an arbitrary path through the empty CFG part\n-\t\t that this unnecessary control stmt controls.  */\n+\t      /* In distribution of loop nest, if bb is inner loop's exit_bb,\n+\t\t we choose its exit edge/path in order to avoid generating\n+\t\t infinite loop.  For all other cases, we choose an arbitrary\n+\t\t path through the empty CFG part that this unnecessary\n+\t\t control stmt controls.  */\n \t      if (gcond *cond_stmt = dyn_cast <gcond *> (stmt))\n \t\t{\n-\t\t  gimple_cond_make_false (cond_stmt);\n+\t\t  if (inner_exit && inner_exit->flags & EDGE_TRUE_VALUE)\n+\t\t    gimple_cond_make_true (cond_stmt);\n+\t\t  else\n+\t\t    gimple_cond_make_false (cond_stmt);\n \t\t  update_stmt (stmt);\n \t\t}\n \t      else if (gimple_code (stmt) == GIMPLE_SWITCH)"}]}