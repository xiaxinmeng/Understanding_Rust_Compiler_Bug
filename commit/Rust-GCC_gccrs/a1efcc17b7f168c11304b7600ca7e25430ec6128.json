{"sha": "a1efcc17b7f168c11304b7600ca7e25430ec6128", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlZmNjMTdiN2YxNjhjMTEzMDRiNzYwMGNhN2UyNTQzMGVjNjEyOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:41:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:41:35Z"}, "message": "[multiple changes]\n\n2014-01-20  Fedor Rybin  <frybin@adacore.com>\n\n\t* gnat_ugn.texi: Documenting --passed-tests option for gnattest.\n\n2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Default_Initialization): New routine.\n\t* sem_util.ads: Add new type Default_Initialization_Kind.\n\t(Default_Initialization): New routine.\n\n2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Mode): Correct all error\n\tmessage logic dealing with in/in out parameters that may appear\n\tas inputs or have a self reference.\n\nFrom-SVN: r206830", "tree": {"sha": "cde7609cb96eab796255cba11993b39eeb7b01e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cde7609cb96eab796255cba11993b39eeb7b01e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1efcc17b7f168c11304b7600ca7e25430ec6128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1efcc17b7f168c11304b7600ca7e25430ec6128", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1efcc17b7f168c11304b7600ca7e25430ec6128", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1efcc17b7f168c11304b7600ca7e25430ec6128/comments", "author": null, "committer": null, "parents": [{"sha": "6fd0a72a5381ec3ec3cf0974adc17e70c7a57f78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd0a72a5381ec3ec3cf0974adc17e70c7a57f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd0a72a5381ec3ec3cf0974adc17e70c7a57f78"}], "stats": {"total": 215, "additions": 211, "deletions": 4}, "files": [{"sha": "82a8ddc320e67921346b6c4c4f219578aec0a0e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1efcc17b7f168c11304b7600ca7e25430ec6128", "patch": "@@ -1,3 +1,19 @@\n+2014-01-20  Fedor Rybin  <frybin@adacore.com>\n+\n+\t* gnat_ugn.texi: Documenting --passed-tests option for gnattest.\n+\n+2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Default_Initialization): New routine.\n+\t* sem_util.ads: Add new type Default_Initialization_Kind.\n+\t(Default_Initialization): New routine.\n+\n+2014-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Mode): Correct all error\n+\tmessage logic dealing with in/in out parameters that may appear\n+\tas inputs or have a self reference.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch9.adb, checks.adb, exp_intr.adb: Minor reformatting."}, {"sha": "c17ca38184ca232495a455d928bd5c254ec2c9f5", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=a1efcc17b7f168c11304b7600ca7e25430ec6128", "patch": "@@ -19496,6 +19496,12 @@ to check substitutability.\n Specifies the default behavior of generated skeletons. @var{val} can be either\n \"fail\" or \"pass\", \"fail\" being the default.\n \n+@item --passed-tests=@var{val}\n+@cindex @option{--skeleton-default} (@command{gnattest})\n+Specifies whether or not passed tests should be shown. @var{val} can be either\n+\"show\" or \"hide\", \"show\" being the default.\n+\n+\n @item --tests-root=@var{dirname}\n @cindex @option{--tests-root} (@command{gnattest})\n The directory hierarchy of tested sources is recreated in the @var{dirname}"}, {"sha": "ad5e00494e4f198f1c63a17440eedf298c6fd001", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a1efcc17b7f168c11304b7600ca7e25430ec6128", "patch": "@@ -964,9 +964,12 @@ package body Sem_Prag is\n             --  or tags can be read. In general, states and variables are\n             --  considered to have mode IN OUT unless they are classified by\n             --  pragma [Refined_]Global. In that case, the item must appear in\n-            --  an input global list.\n+            --  an input global list. OUT parameters of enclosing subprograms\n+            --  behave as read-write variables in which case do not emit an\n+            --  error.\n \n             if (Ekind (Item_Id) = E_Out_Parameter\n+                 and then Scope (Item_Id) = Spec_Id\n                  and then not Is_Unconstrained_Or_Tagged_Item (Item_Id))\n               or else\n                 (Global_Seen and then not Appears_In (Subp_Inputs, Item_Id))\n@@ -999,18 +1002,34 @@ package body Sem_Prag is\n             --  type acts as an input because the discriminants, array bounds\n             --  or the tag may be read. Note that the presence of [Refined_]\n             --  Global is not significant here because the item is a parameter.\n+            --  This rule applies only to the formals of the related subprogram\n+            --  as OUT parameters of enclosing subprograms behave as read-write\n+            --  variables and their types do not matter.\n \n             elsif Ekind (Item_Id) = E_Out_Parameter\n+              and then Scope (Item_Id) = Spec_Id\n               and then Is_Unconstrained_Or_Tagged_Item (Item_Id)\n             then\n                null;\n \n             --  The remaining cases are IN, IN OUT, and OUT parameters. To\n             --  qualify as self-referential item, the parameter must be of\n-            --  mode IN OUT.\n+            --  mode IN OUT or be an IN OUT or OUT parameter of an enclosing\n+            --  subprogram.\n \n-            elsif Ekind (Item_Id) /= E_In_Out_Parameter then\n-               Error_Msg_NE (\"item & must have mode `IN OUT`\", Item, Item_Id);\n+            elsif Scope (Item_Id) = Spec_Id then\n+               if Ekind (Item_Id) /= E_In_Out_Parameter then\n+                  Error_Msg_NE\n+                    (\"item & must have mode `IN OUT`\", Item, Item_Id);\n+               end if;\n+\n+            --  Enclosing subprogram parameter\n+\n+            elsif not Ekind_In (Item_Id, E_In_Out_Parameter,\n+                                         E_Out_Parameter)\n+            then\n+               Error_Msg_NE\n+                 (\"item & must have mode `IN OUT` or `OUT`\", Item, Item_Id);\n             end if;\n \n          --  Output"}, {"sha": "e6468548b7318b167cc0ef6babb87b8fae5aa53f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a1efcc17b7f168c11304b7600ca7e25430ec6128", "patch": "@@ -3863,6 +3863,138 @@ package body Sem_Util is\n       end if;\n    end Deepest_Type_Access_Level;\n \n+   ----------------------------\n+   -- Default_Initialization --\n+   ----------------------------\n+\n+   function Default_Initialization\n+     (Typ : Entity_Id) return Default_Initialization_Kind\n+   is\n+      Comp : Entity_Id;\n+      Init : Default_Initialization_Kind;\n+\n+      FDI : Boolean := False;\n+      NDI : Boolean := False;\n+      --  Two flags used to designate whether a record type has at least one\n+      --  fully default initialized component and/or one not fully default\n+      --  initialized component.\n+\n+   begin\n+      --  Access types are always fully default initialized\n+\n+      if Is_Access_Type (Typ) then\n+         return Full_Default_Initialization;\n+\n+      --  An array type subject to aspect/pragma Default_Component_Value is\n+      --  fully default initialized. Otherwise its initialization status is\n+      --  that of its component type.\n+\n+      elsif Is_Array_Type (Typ) then\n+         if Present (Default_Aspect_Component_Value (Base_Type (Typ))) then\n+            return Full_Default_Initialization;\n+         else\n+            return Default_Initialization (Component_Type (Typ));\n+         end if;\n+\n+      --  The initialization status of a private type depends on its full view\n+\n+      elsif Is_Private_Type (Typ) and then Present (Full_View (Typ)) then\n+         return Default_Initialization (Full_View (Typ));\n+\n+      --  Record and protected types offer several initialization options\n+      --  depending on their components (if any).\n+\n+      elsif Is_Record_Type (Typ) or else Is_Protected_Type (Typ) then\n+         Comp := First_Component (Typ);\n+\n+         --  Inspect all components\n+\n+         if Present (Comp) then\n+            while Present (Comp) loop\n+\n+               --  Do not process internally generated components except for\n+               --  _parent which represents the ancestor portion of a derived\n+               --  type.\n+\n+               if Comes_From_Source (Comp)\n+                 or else Chars (Comp) = Name_uParent\n+               then\n+                  Init := Default_Initialization (Base_Type (Etype (Comp)));\n+\n+                  --  A component with mixed initialization renders the whole\n+                  --  record/protected type mixed.\n+\n+                  if Init = Mixed_Initialization then\n+                     return Mixed_Initialization;\n+\n+                  --  The component is fully default initialized when its type\n+                  --  is fully default initialized or when the component has an\n+                  --  initialization expression. Note that this has precedence\n+                  --  given that the component type may lack initialization.\n+\n+                  elsif Init = Full_Default_Initialization\n+                    or else Present (Expression (Parent (Comp)))\n+                  then\n+                     FDI := True;\n+\n+                  --  Components with no possible initialization are ignored\n+\n+                  elsif Init = No_Possible_Initialization then\n+                     null;\n+\n+                  --  The component has no full default initialization\n+\n+                  else\n+                     NDI := True;\n+                  end if;\n+               end if;\n+\n+               Next_Component (Comp);\n+            end loop;\n+\n+            --  Detect a mixed case of initialization\n+\n+            if FDI and NDI then\n+               return Mixed_Initialization;\n+\n+            elsif FDI then\n+               return Full_Default_Initialization;\n+\n+            elsif NDI then\n+               return No_Default_Initialization;\n+\n+            --  The type either has no components or they are all internally\n+            --  generated.\n+\n+            else\n+               return No_Possible_Initialization;\n+            end if;\n+\n+         --  The record type is null, there is nothing to initialize\n+\n+         else\n+            return No_Possible_Initialization;\n+         end if;\n+\n+      --  A scalar type subject to aspect/pragma Default_Value is fully default\n+      --  initialized.\n+\n+      elsif Is_Scalar_Type (Typ)\n+        and then Present (Default_Aspect_Value (Base_Type (Typ)))\n+      then\n+         return Full_Default_Initialization;\n+\n+      --  Task types are always fully default initialized\n+\n+      elsif Is_Task_Type (Typ) then\n+         return Full_Default_Initialization;\n+      end if;\n+\n+      --  The type has no full default initialization\n+\n+      return No_Default_Initialization;\n+   end Default_Initialization;\n+\n    ---------------------\n    -- Defining_Entity --\n    ---------------------"}, {"sha": "8b95413bd3cd450151227e5faf10d7995b3d39d1", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1efcc17b7f168c11304b7600ca7e25430ec6128/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=a1efcc17b7f168c11304b7600ca7e25430ec6128", "patch": "@@ -384,6 +384,40 @@ package Sem_Util is\n    --  Current_Scope is returned. The returned value is Empty if this is called\n    --  from a library package which is not within any subprogram.\n \n+   --  The following type lists all possible forms of default initialization\n+   --  that may apply to a type.\n+\n+   type Default_Initialization_Kind is\n+     (No_Possible_Initialization,\n+      --  This value signifies that a type cannot possibly be initialized\n+      --  because it has no content, for example - a null record.\n+\n+      Full_Default_Initialization,\n+      --  This value covers the following combinations of types and content:\n+      --    * Access type\n+      --    * Array-of-scalars with specified Default_Component_Value\n+      --    * Array type with fully default initialized component type\n+      --    * Record or protected type with components that either have a\n+      --        default expression or their related types are fully default\n+      --        initialized.\n+      --    * Scalar type with specified Default_Value\n+      --    * Task type\n+      --    * Type extension of a type with full default initialization where\n+      --        the extension components are also fully default initialized\n+\n+      Mixed_Initialization,\n+      --  This value applies to a type where some of its internals are fully\n+      --  default initialized and some are not.\n+\n+      No_Default_Initialization);\n+      --  This value reflects a type where none of its content is fully\n+      --  default initialized.\n+\n+   function Default_Initialization\n+     (Typ : Entity_Id) return Default_Initialization_Kind;\n+   --  Determine the default initialization kind that applies to a particular\n+   --  type.\n+\n    function Deepest_Type_Access_Level (Typ : Entity_Id) return Uint;\n    --  Same as Type_Access_Level, except that if the type is the type of an Ada\n    --  2012 stand-alone object of an anonymous access type, then return the"}]}