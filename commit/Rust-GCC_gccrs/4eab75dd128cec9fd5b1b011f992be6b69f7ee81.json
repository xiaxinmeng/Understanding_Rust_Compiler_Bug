{"sha": "4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVhYjc1ZGQxMjhjZWM5ZmQ1YjFiMDExZjk5MmJlNmI2OWY3ZWU4MQ==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-12-11T20:20:23Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2012-12-11T20:20:23Z"}, "message": "re PR c++/53094 (constexpr vector subscripting)\n\n2012-12-11  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR c++/53094\ncp/\n\t* tree.c (cp_tree_equal): Handle VECTOR_CST.\n\t* semantics.c (cxx_eval_bare_aggregate): Protect a dereference.\n\tHandle VECTOR_CST.\ntestsuite/\n\t* g++.dg/cpp0x/constexpr-53094-1.C: New testcase.\n\t* g++.dg/cpp0x/constexpr-53094-2.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-53094-3.C: Likewise.\n\nFrom-SVN: r194421", "tree": {"sha": "0277ae7a99c17b3afc64d4b3af39811c76bdd446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0277ae7a99c17b3afc64d4b3af39811c76bdd446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "759deff3ac0e0c8a7680dd106e05394ad219f84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/759deff3ac0e0c8a7680dd106e05394ad219f84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/759deff3ac0e0c8a7680dd106e05394ad219f84b"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "5e75a143aa9673bcb405ddf17f526c9aa707d2ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -1,3 +1,10 @@\n+2012-12-11  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53094\n+\t* tree.c (cp_tree_equal): Handle VECTOR_CST.\n+\t* semantics.c (cxx_eval_bare_aggregate): Protect a dereference.\n+\tHandle VECTOR_CST.\n+\n 2012-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/55643"}, {"sha": "f6493993b37c242befc444f0d2778c82c10fb674", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -7123,15 +7123,15 @@ cxx_eval_bare_aggregate (const constexpr_call *call, tree t,\n \tgoto fail;\n       if (elt != ce->value)\n \tchanged = true;\n-      if (TREE_CODE (ce->index) == COMPONENT_REF)\n+      if (ce->index && TREE_CODE (ce->index) == COMPONENT_REF)\n \t{\n \t  /* This is an initialization of a vfield inside a base\n \t     subaggregate that we already initialized; push this\n \t     initialization into the previous initialization.  */\n \t  constructor_elt *inner = base_field_constructor_elt (n, ce->index);\n \t  inner->value = elt;\n \t}\n-      else if (TREE_CODE (ce->index) == NOP_EXPR)\n+      else if (ce->index && TREE_CODE (ce->index) == NOP_EXPR)\n \t{\n \t  /* This is an initializer for an empty base; now that we've\n \t     checked that it's constant, we can ignore it.  */\n@@ -7148,6 +7148,8 @@ cxx_eval_bare_aggregate (const constexpr_call *call, tree t,\n     }\n   t = build_constructor (TREE_TYPE (t), n);\n   TREE_CONSTANT (t) = true;\n+  if (TREE_CODE (TREE_TYPE (t)) == VECTOR_TYPE)\n+    t = fold (t);\n   return t;\n }\n "}, {"sha": "c4302371b73910a351f5c28050ee099deb2639bd", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -2468,6 +2468,9 @@ cp_tree_equal (tree t1, tree t2)\n       return cp_tree_equal (TREE_REALPART (t1), TREE_REALPART (t2))\n \t&& cp_tree_equal (TREE_IMAGPART (t1), TREE_IMAGPART (t2));\n \n+    case VECTOR_CST:\n+      return operand_equal_p (t1, t2, OEP_ONLY_CONST);\n+\n     case CONSTRUCTOR:\n       /* We need to do this when determining whether or not two\n \t non-type pointer to member function template arguments"}, {"sha": "2f80e7df4191f7c7275d4e187f7003eb07b35d60", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -1,3 +1,10 @@\n+2012-12-11  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR c++/53094\n+\t* g++.dg/cpp0x/constexpr-53094-1.C: New testcase.\n+\t* g++.dg/cpp0x/constexpr-53094-2.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-53094-3.C: Likewise.\n+\n 2012-12-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/55643"}, {"sha": "c24ff60219d7bbf8b04df6a36fa4e9a91820f04f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-53094-1.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-1.C?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+typedef float __attribute__ ((vector_size (4 * sizeof (float)))) V4;\n+constexpr V4 v = { 1, 1, 1, 0 };\n+constexpr V4 r = v[0] + v; // { dg-bogus \"not a constant expression\" \"\" { xfail *-*-* } }"}, {"sha": "af4b8d93bbf262013e765c03b21b5fb925d59eca", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-53094-2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-2.C?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+typedef float __attribute__ ((vector_size (4 * sizeof (float)))) V4;\n+constexpr V4 build (float x, float y, float z) { return (V4){ x, y, z, 0 };}\n+constexpr V4 x = build (1, 0, 0);"}, {"sha": "bd17ac746cec76b8828c213225dcc4014a6575dc", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-53094-3.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eab75dd128cec9fd5b1b011f992be6b69f7ee81/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-53094-3.C?ref=4eab75dd128cec9fd5b1b011f992be6b69f7ee81", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++11\" }\n+\n+typedef float __attribute__ ((vector_size (4 * sizeof (float)))) V4;\n+\n+struct Rot3 {\n+  typedef float T;\n+  typedef V4 Vec;\n+  Vec axis[3];\n+  constexpr Rot3 (V4 ix, V4 iy, V4 iz) : axis {ix, iy, iz} {}\n+\n+  constexpr Rot3(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz) :\n+    Rot3((Vec) { xx, xy, xz, 0 },\n+\t (Vec) { yx, yy, yz, 0 },\n+\t (Vec) { zx, zy, zz, 0 }) {}\n+\n+};\n+\n+constexpr Rot3 r1( 0, 1 ,0, 0, 0, 1,  1, 0, 0);"}]}