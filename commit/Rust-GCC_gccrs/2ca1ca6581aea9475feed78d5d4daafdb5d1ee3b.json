{"sha": "2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhMWNhNjU4MWFlYTk0NzVmZWVkNzhkNWQ0ZGFhZmRiNWQxZWUzYg==", "commit": {"author": {"name": "Chung-Ju Wu", "email": "jasonwucj@gmail.com", "date": "2015-01-14T06:08:35Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2015-01-14T06:08:35Z"}, "message": "[NDS32] Remove some features and options that are not available yet in nds32 port of GNU binutils package.\n\ngcc/\n\t* config/nds32/nds32.opt (mforce-fp-as-gp): Remove.\n\t(mforbid-fp-as-gp): Remove.\n\t(mex9): Remove.\n\t* config/nds32/nds32-fp-as-gp.c (nds32_have_prologue_p): Remove.\n\t(nds32_symbol_load_store_p): Remove.\n\t(nds32_fp_as_gp_check_available): Clean up implementation.\n\t* config/nds32/nds32.h (LINK_SPEC): Remove -mforce-as-gp and -mex9\n\tcases.\n\t* config/nds32/nds32.c (nds32_asm_file_start): No need to consider\n\tfp-as-gp and ex9 cases.\n\nFrom-SVN: r219576", "tree": {"sha": "20360da399697d634a330b93aee5285dccf735a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20360da399697d634a330b93aee5285dccf735a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/comments", "author": {"login": "jasonwucj", "id": 5520732, "node_id": "MDQ6VXNlcjU1MjA3MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5520732?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jasonwucj", "html_url": "https://github.com/jasonwucj", "followers_url": "https://api.github.com/users/jasonwucj/followers", "following_url": "https://api.github.com/users/jasonwucj/following{/other_user}", "gists_url": "https://api.github.com/users/jasonwucj/gists{/gist_id}", "starred_url": "https://api.github.com/users/jasonwucj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jasonwucj/subscriptions", "organizations_url": "https://api.github.com/users/jasonwucj/orgs", "repos_url": "https://api.github.com/users/jasonwucj/repos", "events_url": "https://api.github.com/users/jasonwucj/events{/privacy}", "received_events_url": "https://api.github.com/users/jasonwucj/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "be77e6092bae228235587d3b666c8b8c259683d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be77e6092bae228235587d3b666c8b8c259683d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be77e6092bae228235587d3b666c8b8c259683d6"}], "stats": {"total": 207, "additions": 15, "deletions": 192}, "files": [{"sha": "eef9de94f2eea2f72570206bd30ace0fc69a4320", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "patch": "@@ -1,3 +1,16 @@\n+2015-01-14  Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config/nds32/nds32.opt (mforce-fp-as-gp): Remove.\n+\t(mforbid-fp-as-gp): Remove.\n+\t(mex9): Remove.\n+\t* config/nds32/nds32-fp-as-gp.c (nds32_have_prologue_p): Remove.\n+\t(nds32_symbol_load_store_p): Remove.\n+\t(nds32_fp_as_gp_check_available): Clean up implementation.\n+\t* config/nds32/nds32.h (LINK_SPEC): Remove -mforce-as-gp and -mex9\n+\tcases.\n+\t* config/nds32/nds32.c (nds32_asm_file_start): No need to consider\n+\tfp-as-gp and ex9 cases.\n+\n 2015-01-13  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* tree-profile.c (init_ic_make_global_vars): Drop workaround"}, {"sha": "4732714b9a977f755633010180ec86553e583fdf", "filename": "gcc/config/nds32/nds32-fp-as-gp.c", "status": "modified", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32-fp-as-gp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32-fp-as-gp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-fp-as-gp.c?ref=2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "patch": "@@ -73,55 +73,6 @@\n \n /* ------------------------------------------------------------------------ */\n \n-/* A helper function to check if this function should contain prologue.  */\n-static int\n-nds32_have_prologue_p (void)\n-{\n-  int i;\n-\n-  for (i = 0; i < 28; i++)\n-    if (NDS32_REQUIRED_CALLEE_SAVED_P (i))\n-      return 1;\n-\n-  return (flag_pic\n-\t  || NDS32_REQUIRED_CALLEE_SAVED_P (FP_REGNUM)\n-\t  || NDS32_REQUIRED_CALLEE_SAVED_P (LP_REGNUM));\n-}\n-\n-/* Return true if is load/store with SYMBOL_REF addressing mode\n-   and memory mode is SImode.  */\n-static bool\n-nds32_symbol_load_store_p (rtx_insn *insn)\n-{\n-  rtx mem_src = NULL_RTX;\n-\n-  switch (get_attr_type (insn))\n-    {\n-    case TYPE_LOAD:\n-      mem_src = SET_SRC (PATTERN (insn));\n-      break;\n-    case TYPE_STORE:\n-      mem_src = SET_DEST (PATTERN (insn));\n-      break;\n-    default:\n-      break;\n-    }\n-\n-  /* Find load/store insn with addressing mode is SYMBOL_REF.  */\n-  if (mem_src != NULL_RTX)\n-    {\n-      if ((GET_CODE (mem_src) == ZERO_EXTEND)\n-\t  || (GET_CODE (mem_src) == SIGN_EXTEND))\n-\tmem_src = XEXP (mem_src, 0);\n-\n-      if ((GET_CODE (XEXP (mem_src, 0)) == SYMBOL_REF)\n-\t   || (GET_CODE (XEXP (mem_src, 0)) == LO_SUM))\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n /* Function to determine whether it is worth to do fp_as_gp optimization.\n    Return 0: It is NOT worth to do fp_as_gp optimization.\n    Return 1: It is APPROXIMATELY worth to do fp_as_gp optimization.\n@@ -130,106 +81,6 @@ nds32_symbol_load_store_p (rtx_insn *insn)\n int\n nds32_fp_as_gp_check_available (void)\n {\n-  /* If there exists ANY of following conditions,\n-     we DO NOT perform fp_as_gp optimization:\n-       1. TARGET_FORBID_FP_AS_GP is set\n-          regardless of the TARGET_FORCE_FP_AS_GP.\n-       2. User explicitly uses 'naked' attribute.\n-       3. Not optimize for size.\n-       4. Need frame pointer.\n-       5. If $fp is already required to be saved,\n-          it means $fp is already choosen by register allocator.\n-          Thus we better not to use it for fp_as_gp optimization.\n-       6. This function is a vararg function.\n-          DO NOT apply fp_as_gp optimization on this function\n-          because it may change and break stack frame.\n-       7. The epilogue is empty.\n-          This happens when the function uses exit()\n-          or its attribute is no_return.\n-          In that case, compiler will not expand epilogue\n-          so that we have no chance to output .omit_fp_end directive.  */\n-  if (TARGET_FORBID_FP_AS_GP\n-      || lookup_attribute (\"naked\", DECL_ATTRIBUTES (current_function_decl))\n-      || !optimize_size\n-      || frame_pointer_needed\n-      || NDS32_REQUIRED_CALLEE_SAVED_P (FP_REGNUM)\n-      || (cfun->stdarg == 1)\n-      || (find_fallthru_edge (EXIT_BLOCK_PTR_FOR_FN (cfun)->preds) == NULL))\n-    return 0;\n-\n-  /* Now we can check the possibility of using fp_as_gp optimization.  */\n-  if (TARGET_FORCE_FP_AS_GP)\n-    {\n-      /* User explicitly issues -mforce-fp-as-gp option.  */\n-      df_set_regs_ever_live (FP_REGNUM, 1);\n-      return 1;\n-    }\n-  else\n-    {\n-      /* In the following we are going to evaluate whether\n-         it is worth to do fp_as_gp optimization.  */\n-      int good_gain     = 0;\n-      int symbol_count  = 0;\n-\n-      int threshold;\n-      rtx_insn *insn;\n-\n-      /* We check if there already requires prologue.\n-         Note that $gp will be saved in prologue for PIC code generation.\n-         After that, we can set threshold by the existence of prologue.\n-         Each fp-implied instruction will gain 2-byte code size\n-         from gp-aware instruction, so we have following heuristics.  */\n-      if (flag_pic\n-\t  || nds32_have_prologue_p ())\n-\t{\n-\t  /* Have-prologue:\n-\t       Compiler already intends to generate prologue content,\n-\t       so the fp_as_gp optimization will only insert\n-\t       'la $fp,_FP_BASE_' instruction, which will be\n-\t       converted into 4-byte instruction at link time.\n-\t       The threshold is \"3\" symbol accesses, 2 + 2 + 2 > 4.  */\n-\t  threshold = 3;\n-\t}\n-      else\n-\t{\n-\t  /* None-prologue:\n-\t       Compiler originally does not generate prologue content,\n-\t       so the fp_as_gp optimization will NOT ONLY insert\n-\t       'la $fp,_FP_BASE' instruction, but also causes\n-\t       push/pop instructions.\n-\t       If we are using v3push (push25/pop25),\n-\t       the threshold is \"5\" symbol accesses, 5*2 > 4 + 2 + 2;\n-\t       If we are using normal push (smw/lmw),\n-\t       the threshold is \"5+2\" symbol accesses 7*2 > 4 + 4 + 4.  */\n-\t  threshold = 5 + (TARGET_V3PUSH ? 0 : 2);\n-\t}\n-\n-      /* We would like to traverse every instruction in this function.\n-         So we need to have push_topmost_sequence()/pop_topmost_sequence()\n-         surrounding our for-loop evaluation.  */\n-      push_topmost_sequence ();\n-      /* Counting the insn number which the addressing mode is symbol.  */\n-      for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-\t{\n-\t  if (single_set (insn) && nds32_symbol_load_store_p (insn))\n-\t    symbol_count++;\n-\n-\t  if (symbol_count == threshold)\n-\t    {\n-\t      good_gain = 1;\n-\t      break;\n-\t    }\n-\t}\n-      pop_topmost_sequence ();\n-\n-      /* Enable fp_as_gp optimization when potential gain is good enough.  */\n-      if (good_gain)\n-\t{\n-\t  df_set_regs_ever_live (FP_REGNUM, 1);\n-\t  return 1;\n-\t}\n-    }\n-\n   /* By default we return 0.  */\n   return 0;\n }"}, {"sha": "227052e3ac6b544cd772955d29648b1ab39d3eef", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "patch": "@@ -2191,26 +2191,6 @@ nds32_asm_file_start (void)\n \t\t\t \"for checking inconsistency on interrupt handler\\n\");\n   fprintf (asm_out_file, \"\\t.vec_size\\t%d\\n\", nds32_isr_vector_size);\n \n-  /* If user enables '-mforce-fp-as-gp' or compiles programs with -Os,\n-     the compiler may produce 'la $fp,_FP_BASE_' instruction\n-     at prologue for fp-as-gp optimization.\n-     We should emit weak reference of _FP_BASE_ to avoid undefined reference\n-     in case user does not pass '--relax' option to linker.  */\n-  if (TARGET_FORCE_FP_AS_GP || optimize_size)\n-    {\n-      fprintf (asm_out_file, \"\\t! This weak reference is required to do \"\n-\t\t\t     \"fp-as-gp link time optimization\\n\");\n-      fprintf (asm_out_file, \"\\t.weak\\t_FP_BASE_\\n\");\n-    }\n-  /* If user enables '-mex9', we should emit relaxation directive\n-     to tell linker that this file is allowed to do ex9 optimization.  */\n-  if (TARGET_EX9)\n-    {\n-      fprintf (asm_out_file, \"\\t! This relaxation directive is required \"\n-\t\t\t     \"to do ex9 link time optimization\\n\");\n-      fprintf (asm_out_file, \"\\t.relax\\tex9\\n\");\n-    }\n-\n   fprintf (asm_out_file, \"\\t! ------------------------------------\\n\");\n \n   if (TARGET_ISA_V2)\n@@ -2744,12 +2724,6 @@ nds32_option_override (void)\n \tfixed_regs[r] = call_used_regs[r] = 1;\n     }\n \n-  /* See if user explicitly would like to use fp-as-gp optimization.\n-     If so, we must prevent $fp from being allocated\n-     during register allocation.  */\n-  if (TARGET_FORCE_FP_AS_GP)\n-    fixed_regs[FP_REGNUM] = call_used_regs[FP_REGNUM] = 1;\n-\n   if (!TARGET_16_BIT)\n     {\n       /* Under no 16 bit ISA, we need to strictly disable TARGET_V3PUSH.  */"}, {"sha": "8e4ebecf3be2937cef8ed30df9ecaf85d7e5bebb", "filename": "gcc/config/nds32/nds32.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.h?ref=2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "patch": "@@ -381,13 +381,10 @@ enum nds32_builtins\n #define ASM_SPEC \\\n   \" %{mbig-endian:-EB} %{mlittle-endian:-EL}\"\n \n-/* If user issues -mrelax, -mforce-fp-as-gp, or -mex9,\n-   we need to pass '--relax' to linker.\n-   Besides, for -mex9, we need to further pass '--mex9'.  */\n+/* If user issues -mrelax, we need to pass '--relax' to linker.  */\n #define LINK_SPEC \\\n   \" %{mbig-endian:-EB} %{mlittle-endian:-EL}\" \\\n-  \" %{mrelax|mforce-fp-as-gp|mex9:--relax}\" \\\n-  \" %{mex9:--mex9}\"\n+  \" %{mrelax:--relax}\"\n \n #define LIB_SPEC \\\n   \" -lc -lgloss\""}, {"sha": "0d573daa5483e161d1a2bda9165f756583771772", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=2ca1ca6581aea9475feed78d5d4daafdb5d1ee3b", "patch": "@@ -95,18 +95,6 @@ Enum(nds32_cmodel_type) String(medium) Value(CMODEL_MEDIUM)\n EnumValue\n Enum(nds32_cmodel_type) String(large) Value(CMODEL_LARGE)\n \n-mforce-fp-as-gp\n-Target Report Mask(FORCE_FP_AS_GP)\n-Prevent $fp being allocated during register allocation so that compiler is able to force performing fp-as-gp optimization.\n-\n-mforbid-fp-as-gp\n-Target Report Mask(FORBID_FP_AS_GP)\n-Forbid using $fp to access static and global variables.  This option strictly forbids fp-as-gp optimization regardless of '-mforce-fp-as-gp'.\n-\n-mex9\n-Target Report Mask(EX9)\n-Use special directives to guide linker doing ex9 optimization.\n-\n mctor-dtor\n Target Report\n Enable constructor/destructor feature."}]}