{"sha": "c11889cef5d45cc5a33fc391ff73980d9f623afb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzExODg5Y2VmNWQ0NWNjNWEzM2ZjMzkxZmY3Mzk4MGQ5ZjYyM2FmYg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-12-29T02:42:17Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-12-29T02:42:17Z"}, "message": "re PR c++/13081 (forward template declarations in <complex> let inlining fail)\n\n\tPR c++/13081\n\t* decl.c (duplicate_decls): Preserve inline-ness when redeclaring\n\ta function template.\n\n\tPR c++/12613\n\t* decl.c (reshape_init): Reject GNU colon-style designated\n\tinitializers in arrays.\n\n\tPR c++/13081\n\t* g++.dg/opt/inline6.C: New test.\n\n\tPR c++/12613\n\t* g++.dg/parse/error9.C: New test.\n\nFrom-SVN: r75192", "tree": {"sha": "03a77065af1da4e7ea52001d708f0111ab58b95d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a77065af1da4e7ea52001d708f0111ab58b95d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c11889cef5d45cc5a33fc391ff73980d9f623afb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11889cef5d45cc5a33fc391ff73980d9f623afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c11889cef5d45cc5a33fc391ff73980d9f623afb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c11889cef5d45cc5a33fc391ff73980d9f623afb/comments", "author": null, "committer": null, "parents": [{"sha": "1896d29d23be825e42ee0c6e8c3afa4c54fbbcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1896d29d23be825e42ee0c6e8c3afa4c54fbbcaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1896d29d23be825e42ee0c6e8c3afa4c54fbbcaf"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "62e395a007a26ece59ca42547cab4be12969e920", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c11889cef5d45cc5a33fc391ff73980d9f623afb", "patch": "@@ -1,5 +1,13 @@\n 2003-12-28  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/13081\n+\t* decl.c (duplicate_decls): Preserve inline-ness when redeclaring\n+\ta function template.\n+\n+\tPR c++/12613\n+\t* decl.c (reshape_init): Reject GNU colon-style designated\n+\tinitializers in arrays.\n+\n \tPR c++/13009\n \t* call.c (build_special_member_call): Do not assume that we have a\n \tpointer to the complete object in an assignment operator."}, {"sha": "80041cb614ddbbeb32c2740b75700a3ba616a1de", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c11889cef5d45cc5a33fc391ff73980d9f623afb", "patch": "@@ -1594,6 +1594,14 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t    = DECL_SOURCE_LOCATION (newdecl);\n \t}\n \n+      if (DECL_FUNCTION_TEMPLATE_P (newdecl))\n+\t{\n+\t  DECL_INLINE (DECL_TEMPLATE_RESULT (olddecl)) \n+\t    |= DECL_INLINE (DECL_TEMPLATE_RESULT (newdecl));\n+\t  DECL_DECLARED_INLINE_P (DECL_TEMPLATE_RESULT (olddecl))\n+\t    |= DECL_DECLARED_INLINE_P (DECL_TEMPLATE_RESULT (newdecl));\n+\t}\n+\n       return olddecl;\n     }\n \n@@ -4342,7 +4350,17 @@ reshape_init (tree type, tree *initp)\n \t      TREE_CHAIN (element_init) = CONSTRUCTOR_ELTS (new_init);\n \t      CONSTRUCTOR_ELTS (new_init) = element_init;\n \t      if (TREE_PURPOSE (element_init))\n-\t\tindex = TREE_PURPOSE (element_init);\n+\t\t{\n+\t\t  tree next_index = TREE_PURPOSE (element_init);\n+\t\t  if (TREE_CODE (next_index) == IDENTIFIER_NODE)\n+\t\t    {\n+\t\t      error (\"name `%D' used in a GNU-style designated \"\n+\t\t\t     \"initializer for an array\", next_index);\n+\t\t      TREE_PURPOSE (element_init) = NULL_TREE;\n+\t\t    }\n+\t\t  else\n+\t\t    index = next_index;\n+\t\t}\n \t    }\n \t}\n       else"}, {"sha": "bfca531f3aded604da5e50b33c33c24ded8b9a56", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c11889cef5d45cc5a33fc391ff73980d9f623afb", "patch": "@@ -1,5 +1,11 @@\n 2003-12-28  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/13081\n+\t* g++.dg/opt/inline6.C: New test.\n+\n+\tPR c++/12613\n+\t* g++.dg/parse/error9.C: New test.\n+\n \t* gcc.dg/const-elim-1.c: XFAIL on arm-*-*.\n \n 2003-12-28  Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "21872210558c00a7a7d1552b193d22666db95468", "filename": "gcc/testsuite/g++.dg/opt/inline6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Finline6.C?ref=c11889cef5d45cc5a33fc391ff73980d9f623afb", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/13081\n+// { dg-options \"-O2\" }\n+// { dg-final { scan-assembler-not \"foo\" } }\n+\n+template<typename T> T foo(T);\n+ \n+template<typename T> inline T foo(T t)\n+{\n+  return t;\n+}\n+\n+void bar (long& l) {\n+  l = foo(l);\n+}"}, {"sha": "aa9109fd22bf151d3e39aabb55739981dcc4d39e", "filename": "gcc/testsuite/g++.dg/parse/error9.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c11889cef5d45cc5a33fc391ff73980d9f623afb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror9.C?ref=c11889cef5d45cc5a33fc391ff73980d9f623afb", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/12613\n+// { dg-options \"\" }\n+\n+enum { FOO = 1, BAR = 2 };\n+int a[] = { FOO: 1, BAR: 2 }; // { dg-error \"\" }"}]}