{"sha": "8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjYjAzNDY1YTJmMzJjNzE5YTlhMzM5ZGJlMGI2MDU1NDdmOGI5YQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T08:37:47Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-20T08:37:47Z"}, "message": "[multiple changes]\n\n2004-04-20  Sascha Brawer  <brawer@dandelis.ch>\n\n\t* java/awt/image/DataBufferShort.java,\n\tjava/awt/image/DataBufferFloat.java,\n\tjava/awt/image/DataBufferDouble.java,\n\tjava/awt/image/PixelInterleavedSampleModel.java: New files.\n\t* gnu/java/awt/Buffers.java (createBuffer, createBufferFromData,\n\tgetData): Added support\tfor TYPE_SHORT, TYPE_FLOAT and TYPE_DOUBLE.\n\n2004-04-20  Michael Koch  <konqueror@gmx.de>\n\n\t* Makefile.am (java_source_files): Added\n\tjava/awt/image/DataBufferDouble.java,\n\tjava/awt/image/DataBufferFloat.java,\n\tjava/awt/image/DataBufferShort.java and\n\tjava/awt/image/PixelInterleavedSampleModel.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r80886", "tree": {"sha": "e1202d5b830144c0b8e5086f4ae6c4220655e2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1202d5b830144c0b8e5086f4ae6c4220655e2a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/comments", "author": null, "committer": null, "parents": [{"sha": "57bef48ec5d1e635f0dd2397904f6ce4f91a640c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bef48ec5d1e635f0dd2397904f6ce4f91a640c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bef48ec5d1e635f0dd2397904f6ce4f91a640c"}], "stats": {"total": 645, "additions": 644, "deletions": 1}, "files": [{"sha": "a30122fc17e76b78fc9ce85ec3304702766f76f5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -1,3 +1,21 @@\n+2004-04-20  Sascha Brawer  <brawer@dandelis.ch>\n+\n+\t* java/awt/image/DataBufferShort.java,\n+\tjava/awt/image/DataBufferFloat.java,\n+\tjava/awt/image/DataBufferDouble.java,\n+\tjava/awt/image/PixelInterleavedSampleModel.java: New files.\n+\t* gnu/java/awt/Buffers.java (createBuffer, createBufferFromData,\n+\tgetData): Added support\tfor TYPE_SHORT, TYPE_FLOAT and TYPE_DOUBLE.\n+\n+2004-04-20  Michael Koch  <konqueror@gmx.de>\n+\n+\t* Makefile.am (java_source_files): Added\n+\tjava/awt/image/DataBufferDouble.java,\n+\tjava/awt/image/DataBufferFloat.java,\n+\tjava/awt/image/DataBufferShort.java and\n+\tjava/awt/image/PixelInterleavedSampleModel.java.\n+\t* Makefile.in: Regenerated.\n+\n 2004-04-19  Bryce McKinlay  <mckinlay@redhat.com>\n  \n \t* gcj/cni.h (JvAllocObject): Remove these obsolete, "}, {"sha": "31cbb47ce490b09a4bb7790c0e6c598f693b303b", "filename": "libjava/Makefile.am", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -1113,14 +1113,18 @@ java/awt/image/ComponentColorModel.java \\\n java/awt/image/ComponentSampleModel.java \\\n java/awt/image/DataBuffer.java \\\n java/awt/image/DataBufferByte.java \\\n+java/awt/image/DataBufferDouble.java \\\n+java/awt/image/DataBufferFloat.java \\\n java/awt/image/DataBufferInt.java \\\n+java/awt/image/DataBufferShort.java \\\n java/awt/image/DataBufferUShort.java \\\n java/awt/image/DirectColorModel.java \\\n java/awt/image/ImageConsumer.java \\\n java/awt/image/ImageObserver.java \\\n java/awt/image/ImageProducer.java \\\n java/awt/image/IndexColorModel.java \\\n java/awt/image/PackedColorModel.java \\\n+java/awt/image/PixelInterleavedSampleModel.java \\\n java/awt/image/Raster.java \\\n java/awt/image/RasterOp.java \\\n java/awt/image/SampleModel.java \\"}, {"sha": "71e4b9be2e1411ce89ba6af1f6cf1e891a14f60c", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -795,14 +795,18 @@ java/awt/image/ComponentColorModel.java \\\n java/awt/image/ComponentSampleModel.java \\\n java/awt/image/DataBuffer.java \\\n java/awt/image/DataBufferByte.java \\\n+java/awt/image/DataBufferDouble.java \\\n+java/awt/image/DataBufferFloat.java \\\n java/awt/image/DataBufferInt.java \\\n+java/awt/image/DataBufferShort.java \\\n java/awt/image/DataBufferUShort.java \\\n java/awt/image/DirectColorModel.java \\\n java/awt/image/ImageConsumer.java \\\n java/awt/image/ImageObserver.java \\\n java/awt/image/ImageProducer.java \\\n java/awt/image/IndexColorModel.java \\\n java/awt/image/PackedColorModel.java \\\n+java/awt/image/PixelInterleavedSampleModel.java \\\n java/awt/image/Raster.java \\\n java/awt/image/RasterOp.java \\\n java/awt/image/SampleModel.java \\\n@@ -3591,7 +3595,10 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/image/ComponentSampleModel.P \\\n .deps/java/awt/image/CropImageFilter.P \\\n .deps/java/awt/image/DataBuffer.P .deps/java/awt/image/DataBufferByte.P \\\n+.deps/java/awt/image/DataBufferDouble.P \\\n+.deps/java/awt/image/DataBufferFloat.P \\\n .deps/java/awt/image/DataBufferInt.P \\\n+.deps/java/awt/image/DataBufferShort.P \\\n .deps/java/awt/image/DataBufferUShort.P \\\n .deps/java/awt/image/DirectColorModel.P \\\n .deps/java/awt/image/FilteredImageSource.P \\\n@@ -3603,6 +3610,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/image/MemoryImageSource.P \\\n .deps/java/awt/image/PackedColorModel.P \\\n .deps/java/awt/image/PixelGrabber.P \\\n+.deps/java/awt/image/PixelInterleavedSampleModel.P \\\n .deps/java/awt/image/RGBImageFilter.P .deps/java/awt/image/Raster.P \\\n .deps/java/awt/image/RasterFormatException.P \\\n .deps/java/awt/image/RasterOp.P .deps/java/awt/image/RenderedImage.P \\"}, {"sha": "3f254749e0ba2a96e807f275b88df1a48de15fbf", "filename": "libjava/gnu/java/awt/Buffers.java", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fgnu%2Fjava%2Fawt%2FBuffers.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fgnu%2Fjava%2Fawt%2FBuffers.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FBuffers.java?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000, 2002  Free Software Foundation\n+/* Copyright (C) 2000, 2002, 2004  Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -83,10 +83,16 @@ public static DataBuffer createBuffer(int dataType, int size, int numBanks)\n       {\n       case DataBuffer.TYPE_BYTE:\n \treturn new DataBufferByte(size, numBanks);\n+      case DataBuffer.TYPE_SHORT:\n+\treturn new DataBufferShort(size, numBanks);\n       case DataBuffer.TYPE_USHORT:\n \treturn new DataBufferUShort(size, numBanks);\n       case DataBuffer.TYPE_INT:\n \treturn new DataBufferInt(size, numBanks);\n+      case DataBuffer.TYPE_FLOAT:\n+\treturn new DataBufferFloat(size, numBanks);\n+      case DataBuffer.TYPE_DOUBLE:\n+\treturn new DataBufferDouble(size, numBanks);\n       default:\n \tthrow new UnsupportedOperationException();\n       }\n@@ -106,10 +112,16 @@ public static DataBuffer createBufferFromData(int dataType, Object data,\n       {\n       case DataBuffer.TYPE_BYTE:\n \treturn new DataBufferByte((byte[]) data, size);\n+      case DataBuffer.TYPE_SHORT:\n+\treturn new DataBufferShort((short[]) data, size);\n       case DataBuffer.TYPE_USHORT:\n \treturn new DataBufferUShort((short[]) data, size);\n       case DataBuffer.TYPE_INT:\n \treturn new DataBufferInt((int[]) data, size);\n+      case DataBuffer.TYPE_FLOAT:\n+\treturn new DataBufferFloat((float[]) data, size);\n+      case DataBuffer.TYPE_DOUBLE:\n+\treturn new DataBufferDouble((double[]) data, size);\n       default:\n \tthrow new UnsupportedOperationException();\n       }\n@@ -126,10 +138,22 @@ public static Object getData(DataBuffer buffer)\n   {\n     if (buffer instanceof DataBufferByte)\n       return ((DataBufferByte) buffer).getData();\n+\n+    if (buffer instanceof DataBufferShort)\n+      return ((DataBufferShort) buffer).getData();\n+\n     if (buffer instanceof DataBufferUShort)\n       return ((DataBufferUShort) buffer).getData();\n+\n     if (buffer instanceof DataBufferInt)\n       return ((DataBufferInt) buffer).getData();\n+\n+    if (buffer instanceof DataBufferFloat)\n+      return ((DataBufferFloat) buffer).getData();\n+\n+    if (buffer instanceof DataBufferDouble)\n+      return ((DataBufferDouble) buffer).getData();\n+\n     throw new ClassCastException(\"Unknown data buffer type\");\n   }\n \n@@ -149,6 +173,11 @@ public static Object getData(DataBuffer src, int srcOffset,\n \tfrom = ((DataBufferByte) src).getData();\n \tif (dest == null) dest = new byte[length+destOffset];\n       }\n+    else if (src instanceof DataBufferShort)\n+      {\n+\tfrom = ((DataBufferShort) src).getData();\n+\tif (dest == null) dest = new short[length+destOffset];\n+      }\n     else if (src instanceof DataBufferUShort)\n       {\n \tfrom = ((DataBufferUShort) src).getData();\n@@ -159,6 +188,16 @@ else if (src instanceof DataBufferInt)\n \tfrom = ((DataBufferInt) src).getData();\n \tif (dest == null) dest = new int[length+destOffset];\n       }\n+    else if (src instanceof DataBufferFloat)\n+      {\n+\tfrom = ((DataBufferFloat) src).getData();\n+\tif (dest == null) dest = new float[length+destOffset];\n+      }\n+    else if (src instanceof DataBufferDouble)\n+      {\n+\tfrom = ((DataBufferDouble) src).getData();\n+\tif (dest == null) dest = new double[length+destOffset];\n+      }\n     else\n       {\n \tthrow new ClassCastException(\"Unknown data buffer type\");"}, {"sha": "b1291f4165bd64a73164bf83d9eced993a5b7fd6", "filename": "libjava/java/awt/image/DataBufferDouble.java", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferDouble.java?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -0,0 +1,174 @@\n+/* Copyright (C) 2004  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.image;\n+\n+/* This is one of several classes that are nearly identical. Maybe we\n+   should have a central template and generate all these files. This\n+   is one of the cases where templates or macros would have been\n+   useful to have in Java.\n+\n+   This file has been created using search-replace. My only fear is\n+   that these classes will grow out-of-sync as of a result of changes\n+   that are not propagated to the other files. As always, mirroring\n+   code is a maintenance nightmare.  */\n+\n+/**\n+ * @since 1.4\n+ *\n+ * @author <a href=\"mailto:rolfwr@ii.uib.no\">Rolf W. Rasmussen</a>\n+ * @author <a href=\"mailto:brawer@dandelis.ch\">Sascha Brawer</a>\n+ */\n+public final class DataBufferDouble\n+  extends DataBuffer\n+{\n+  private double[] data;\n+  private double[][] bankData;\n+  \n+  public DataBufferDouble(int size)\n+  {\n+    super(TYPE_DOUBLE, size);\n+    data = new double[size];\n+  }\n+\n+  public DataBufferDouble(int size, int numBanks)\n+  {\n+    super(TYPE_DOUBLE, size, numBanks);\n+    bankData = new double[numBanks][size];\n+    data = bankData[0];\n+  }\n+\n+  public DataBufferDouble(double[] dataArray, int size)\n+  {\n+    super(TYPE_DOUBLE, size);\n+    data = dataArray;\n+  }\n+    \n+  public DataBufferDouble(double[] dataArray, int size, int offset)\n+  {\n+    super(TYPE_DOUBLE, size, 1, offset);\n+    data = dataArray;\n+  }\n+\n+  public DataBufferDouble(double[][] dataArray, int size)\n+  {\n+    super(TYPE_DOUBLE, size, dataArray.length);\n+    bankData = dataArray;\n+    data = bankData[0];\n+  }\n+\n+  public DataBufferDouble(double[][] dataArray, int size, int[] offsets)\n+  {\n+    super(TYPE_DOUBLE, size, dataArray.length, offsets);\n+    bankData = dataArray;\n+    data = bankData[0];\n+  }\n+\n+  public double[] getData()\n+  {\n+    return data;\n+  }\n+    \n+  public double[] getData(int bank)\n+  {\n+    return bankData[bank];\n+  }\n+    \n+  public double[][] getBankData()\n+  {\n+    return bankData;\n+  }\n+  \n+  public int getElem(int i)\n+  {\n+    return (int) data[i+offset];\n+  }\n+\n+  public int getElem(int bank, int i)\n+  {\n+    return (int) bankData[bank][i+offsets[bank]];\n+  }\n+\n+  public void setElem(int i, int val)\n+  {\n+    data[i+offset] = (double) val;\n+  }\n+\n+  public void setElem(int bank, int i, int val)\n+  {\n+    bankData[bank][i+offsets[bank]] = (double) val;\n+  }\n+\n+  public float getElemFloat(int i)\n+  {\n+    return (float) data[i+offset];\n+  }\n+    \n+  public float getElemFloat(int bank, int i)\n+  {\n+    return (float) bankData[bank][i+offsets[bank]];\n+  }\n+\n+  public void setElemFloat(int i, float val)\n+  {\n+    data[i+offset] = val;\n+  }\n+\n+  public void setElemFloat(int bank, int i, float val)\n+  {\n+    bankData[bank][i+offsets[bank]] = val;\n+  }\n+\n+  public double getElemDouble(int i)\n+  {\n+    return data[i + offset];\n+  }\n+    \n+  public double getElemDouble(int bank, int i)\n+  {\n+    return bankData[bank][i + offsets[bank]];\n+  }\n+\n+  public void setElemDouble(int i, double val)\n+  {\n+    data[i + offset] = val;\n+  }\n+\n+  public void setElemDouble(int bank, int i, double val)\n+  {\n+    bankData[bank][i + offsets[bank]] = val;\n+  }\n+}"}, {"sha": "b2d88c16b8bc36cb2efaa6e82924b7ee1718aee0", "filename": "libjava/java/awt/image/DataBufferFloat.java", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferFloat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferFloat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferFloat.java?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -0,0 +1,172 @@\n+/* Copyright (C) 2004  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.image;\n+\n+/* This is one of several classes that are nearly identical. Maybe we\n+   should have a central template and generate all these files. This\n+   is one of the cases where templates or macros would have been\n+   useful to have in Java.\n+\n+   This file has been created using search-replace. My only fear is\n+   that these classes will grow out-of-sync as of a result of changes\n+   that are not propagated to the other files. As always, mirroring\n+   code is a maintenance nightmare.  */\n+\n+/**\n+ * @author <a href=\"mailto:rolfwr@ii.uib.no\">Rolf W. Rasmussen</a>\n+ * @author <a href=\"mailto:brawer@dandelis.ch\">Sascha Brawer</a>\n+ */\n+public final class DataBufferFloat\n+  extends DataBuffer\n+{\n+  private float[] data;\n+  private float[][] bankData;\n+  \n+  public DataBufferFloat(int size)\n+  {\n+    super(TYPE_FLOAT, size);\n+    data = new float[size];\n+  }\n+\n+  public DataBufferFloat(int size, int numBanks)\n+  {\n+    super(TYPE_FLOAT, size, numBanks);\n+    bankData = new float[numBanks][size];\n+    data = bankData[0];\n+  }\n+\n+  public DataBufferFloat(float[] dataArray, int size)\n+  {\n+    super(TYPE_FLOAT, size);\n+    data = dataArray;\n+  }\n+    \n+  public DataBufferFloat(float[] dataArray, int size, int offset)\n+  {\n+    super(TYPE_FLOAT, size, 1, offset);\n+    data = dataArray;\n+  }\n+\n+  public DataBufferFloat(float[][] dataArray, int size)\n+  {\n+    super(TYPE_FLOAT, size, dataArray.length);\n+    bankData = dataArray;\n+    data = bankData[0];\n+  }\n+\n+  public DataBufferFloat(float[][] dataArray, int size, int[] offsets)\n+  {\n+    super(TYPE_FLOAT, size, dataArray.length, offsets);\n+    bankData = dataArray;\n+    data = bankData[0];\n+  }\n+\n+  public float[] getData()\n+  {\n+    return data;\n+  }\n+    \n+  public float[] getData(int bank)\n+  {\n+    return bankData[bank];\n+  }\n+    \n+  public float[][] getBankData()\n+  {\n+    return bankData;\n+  }\n+  \n+  public int getElem(int i)\n+  {\n+    return (int) data[i+offset];\n+  }\n+\n+  public int getElem(int bank, int i)\n+  {\n+    return (int) bankData[bank][i+offsets[bank]];\n+  }\n+\n+  public void setElem(int i, int val)\n+  {\n+    data[i+offset] = (float) val;\n+  }\n+\n+  public void setElem(int bank, int i, int val)\n+  {\n+    bankData[bank][i+offsets[bank]] = (float) val;\n+  }\n+\n+  public float getElemFloat(int i)\n+  {\n+    return data[i+offset];\n+  }\n+    \n+  public float getElemFloat(int bank, int i)\n+  {\n+    return bankData[bank][i+offsets[bank]];\n+  }\n+\n+  public void setElemFloat(int i, float val)\n+  {\n+    data[i+offset] = val;\n+  }\n+\n+  public void setElemFloat(int bank, int i, float val)\n+  {\n+    bankData[bank][i+offsets[bank]] = val;\n+  }\n+\n+  public double getElemDouble(int i)\n+  {\n+    return getElemFloat(i);\n+  }\n+    \n+  public double getElemDouble(int bank, int i)\n+  {\n+    return getElemFloat(bank, i);\n+  }\n+\n+  public void setElemDouble(int i, double val)\n+  {\n+    setElemFloat(i, (float) val);\n+  }\n+\n+  public void setElemDouble(int bank, int i, double val)\n+  {\n+    setElemFloat(bank, i, (float) val);\n+  }\n+}"}, {"sha": "7a5c39424239a17cc93ded84c8b8aba0fc78c219", "filename": "libjava/java/awt/image/DataBufferShort.java", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferShort.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferShort.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FDataBufferShort.java?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -0,0 +1,130 @@\n+/* Copyright (C) 2004  Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.image;\n+\n+/* This is one of several classes that are nearly identical. Maybe we\n+   should have a central template and generate all these files. This\n+   is one of the cases where templates or macros would have been\n+   useful to have in Java.\n+\n+   This file has been created using search-replace. My only fear is\n+   that these classes will grow out-of-sync as of a result of changes\n+   that are not propagated to the other files. As always, mirroring\n+   code is a maintenance nightmare.  */\n+\n+/**\n+ * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n+ */\n+public final class DataBufferShort extends DataBuffer\n+{\n+  private short[] data;\n+  private short[][] bankData;\n+  \n+  public DataBufferShort(int size)\n+  {\n+    super(TYPE_SHORT, size);\n+    data = new short[size];\n+  }\n+\n+  public DataBufferShort(int size, int numBanks)\n+  {\n+    super(TYPE_SHORT, size, numBanks);\n+    bankData = new short[numBanks][size];\n+    data = bankData[0];\n+  }\n+\n+  public DataBufferShort(short[] dataArray, int size)\n+  {\n+    super(TYPE_SHORT, size);\n+    data = dataArray;\n+  }\n+    \n+  public DataBufferShort(short[] dataArray, int size, int offset)\n+  {\n+    super(TYPE_SHORT, size, 1, offset);\n+    data = dataArray;\n+  }\n+\n+  public DataBufferShort(short[][] dataArray, int size)\n+  {\n+    super(TYPE_SHORT, size, dataArray.length);\n+    bankData = dataArray;\n+    data = bankData[0];\n+  }\n+\n+  public DataBufferShort(short[][] dataArray, int size, int[] offsets)\n+  {\n+    super(TYPE_SHORT, size, dataArray.length, offsets);\n+    bankData = dataArray;\n+    data = bankData[0];\n+  }\n+\n+  public short[] getData()\n+  {\n+    return data;\n+  }\n+    \n+  public short[] getData(int bank)\n+  {\n+    return bankData[bank];\n+  }\n+    \n+  public short[][] getBankData()\n+  {\n+    return bankData;\n+  }\n+  \n+  public int getElem(int i)\n+  {\n+    return data[i+offset];\n+  }\n+\n+  public int getElem(int bank, int i)\n+  {\n+    return bankData[bank][i+offsets[bank]];\n+  }\n+\n+  public void setElem(int i, int val)\n+  {\n+    data[i+offset] = (short) val;\n+  }\n+\n+  public void setElem(int bank, int i, int val)\n+  {\n+    bankData[bank][i+offsets[bank]] = (short) val;\n+  }\n+}"}, {"sha": "d17a68d9ae32e2c962f39ef6d84e6e6e7f9b24cc", "filename": "libjava/java/awt/image/PixelInterleavedSampleModel.java", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FPixelInterleavedSampleModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ecb03465a2f32c719a9a339dbe0b605547f8b9a/libjava%2Fjava%2Fawt%2Fimage%2FPixelInterleavedSampleModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FPixelInterleavedSampleModel.java?ref=8ecb03465a2f32c719a9a339dbe0b605547f8b9a", "patch": "@@ -0,0 +1,98 @@\n+/* PixelInterleavedSampleModel.java\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt.image;\n+\n+\n+/**\n+ * A <code>SampleModel</code> that uses exactly one element of the\n+ * raster&#x2019;s {@link DataBuffer} per pixel, holds all bands in a\n+ * single bank, and stores band data in pixel-interleaved manner.\n+ *\n+ * @since 1.2\n+ *\n+ * @author <a href=\"mailto:brawer@dandelis.ch\">Sascha Brawer</a>\n+ */\n+public class PixelInterleavedSampleModel\n+  extends ComponentSampleModel\n+{\n+  public PixelInterleavedSampleModel(int dataType, int width, int height,\n+                                     int pixelStride, int scanlineStride,\n+                                     int[] bandOffsets)\n+  {\n+    super(dataType, width, height, pixelStride, scanlineStride,\n+          bandOffsets);\n+  }\n+\n+  \n+  /**\n+   * Creates a new <code>SampleModel</code> that is like this one, but\n+   * uses the specified width and height.\n+   *\n+   * @param width the number of pixels in the horizontal direction.\n+   *\n+   * @param height the number of pixels in the vertical direction.\n+   */\n+  public SampleModel createCompatibleSampleModel(int width, int height)\n+  {\n+    return new PixelInterleavedSampleModel(dataType, width, height,\n+                                           pixelStride, scanlineStride,\n+                                           bandOffsets);\n+  }\n+\n+\n+  /**\n+   * Creates a new <code>SampleModel</code> that is like this one, but\n+   * uses only a subset of its bands.\n+   *\n+   * @param bands an array whose elements indicate which bands shall\n+   * be part of the subset. For example, <code>[0, 2, 3]</code> would\n+   * create a SampleModel containing bands #0, #2 and #3.\n+   */\n+  public SampleModel createSubsetSampleModel(int[] bands)\n+  {\n+    int[] subOffsets;\n+\n+    subOffsets = new int[bands.length];\n+    for (int i = 0; i < bands.length; i++)\n+      subOffsets[i] = bandOffsets[bands[i]];\n+\n+    return new PixelInterleavedSampleModel(dataType, width, height,\n+                                           pixelStride, scanlineStride,\n+                                           subOffsets);\n+  }\n+}"}]}