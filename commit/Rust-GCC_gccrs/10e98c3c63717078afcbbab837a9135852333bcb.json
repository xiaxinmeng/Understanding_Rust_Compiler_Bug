{"sha": "10e98c3c63717078afcbbab837a9135852333bcb", "node_id": "C_kwDOANBUbNoAKDEwZTk4YzNjNjM3MTcwNzhhZmNiYmFiODM3YTkxMzU4NTIzMzNiY2I", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-09T10:44:02Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:50Z"}, "message": "aarch64: Use type-qualified builtins for UADD[LW][2] Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them to implement\nwidening-add Neon intrinsics. This removes the need for many casts in\narm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n\tqualifiers in generator macros for uadd[lw][2] builtins.\n\t* config/aarch64/arm_neon.h (vaddl_s8): Remove unnecessary\n\tcast.\n\t(vaddl_s16): Likewise.\n\t(vaddl_s32): Likewise.\n\t(vaddl_u8): Use type-qualified builtin and remove casts.\n\t(vaddl_u16): Likewise.\n\t(vaddl_u32): Likewise.\n\t(vaddl_high_s8): Remove unnecessary cast.\n\t(vaddl_high_s16): Likewise.\n\t(vaddl_high_s32): Likewise.\n\t(vaddl_high_u8): Use type-qualified builtin and remove casts.\n\t(vaddl_high_u16): Likewise.\n\t(vaddl_high_u32): Likewise.\n\t(vaddw_s8): Remove unnecessary cast.\n\t(vaddw_s16): Likewise.\n\t(vaddw_s32): Likewise.\n\t(vaddw_u8): Use type-qualified builtin and remove casts.\n\t(vaddw_u16): Likewise.\n\t(vaddw_u32): Likewise.\n\t(vaddw_high_s8): Remove unnecessary cast.\n\t(vaddw_high_s16): Likewise.\n\t(vaddw_high_s32): Likewise.\n\t(vaddw_high_u8): Use type-qualified builtin and remove casts.\n\t(vaddw_high_u16): Likewise.\n\t(vaddw_high_u32): Likewise.", "tree": {"sha": "4552a4e2768afadf06e4a2634fc0509266ef942f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4552a4e2768afadf06e4a2634fc0509266ef942f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10e98c3c63717078afcbbab837a9135852333bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e98c3c63717078afcbbab837a9135852333bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10e98c3c63717078afcbbab837a9135852333bcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10e98c3c63717078afcbbab837a9135852333bcb/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22c03d439894a6eaaa5f149c76ff91b1a7c06fb"}], "stats": {"total": 68, "additions": 28, "deletions": 40}, "files": [{"sha": "879662eb0d9f5cfc80919b7dc8b0adc43aee85ac", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e98c3c63717078afcbbab837a9135852333bcb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e98c3c63717078afcbbab837a9135852333bcb/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=10e98c3c63717078afcbbab837a9135852333bcb", "patch": "@@ -158,21 +158,21 @@\n   BUILTIN_VALLP (STORESTRUCT_LANE_P, st4_lane, 0, ALL)\n \n   BUILTIN_VQW (BINOP, saddl2, 0, NONE)\n-  BUILTIN_VQW (BINOP, uaddl2, 0, NONE)\n+  BUILTIN_VQW (BINOPU, uaddl2, 0, NONE)\n   BUILTIN_VQW (BINOP, ssubl2, 0, NONE)\n   BUILTIN_VQW (BINOP, usubl2, 0, NONE)\n   BUILTIN_VQW (BINOP, saddw2, 0, NONE)\n-  BUILTIN_VQW (BINOP, uaddw2, 0, NONE)\n+  BUILTIN_VQW (BINOPU, uaddw2, 0, NONE)\n   BUILTIN_VQW (BINOP, ssubw2, 0, NONE)\n   BUILTIN_VQW (BINOP, usubw2, 0, NONE)\n   /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>l<mode>.  */\n   BUILTIN_VD_BHSI (BINOP, saddl, 0, NONE)\n-  BUILTIN_VD_BHSI (BINOP, uaddl, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOPU, uaddl, 0, NONE)\n   BUILTIN_VD_BHSI (BINOP, ssubl, 0, NONE)\n   BUILTIN_VD_BHSI (BINOP, usubl, 0, NONE)\n   /* Implemented by aarch64_<ANY_EXTEND:su><ADDSUB:optab>w<mode>.  */\n   BUILTIN_VD_BHSI (BINOP, saddw, 0, NONE)\n-  BUILTIN_VD_BHSI (BINOP, uaddw, 0, NONE)\n+  BUILTIN_VD_BHSI (BINOPU, uaddw, 0, NONE)\n   BUILTIN_VD_BHSI (BINOP, ssubw, 0, NONE)\n   BUILTIN_VD_BHSI (BINOP, usubw, 0, NONE)\n   /* Implemented by aarch64_<sur>h<addsub><mode>.  */"}, {"sha": "43a89b3a2b37aa8aff7ff5969b81edd05808055a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10e98c3c63717078afcbbab837a9135852333bcb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10e98c3c63717078afcbbab837a9135852333bcb/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=10e98c3c63717078afcbbab837a9135852333bcb", "patch": "@@ -377,180 +377,168 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_saddlv8qi (__a, __b);\n+  return __builtin_aarch64_saddlv8qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_saddlv4hi (__a, __b);\n+  return __builtin_aarch64_saddlv4hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  return (int64x2_t) __builtin_aarch64_saddlv2si (__a, __b);\n+  return __builtin_aarch64_saddlv2si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_uaddlv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t   (int8x8_t) __b);\n+  return __builtin_aarch64_uaddlv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_uaddlv4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t   (int16x4_t) __b);\n+  return __builtin_aarch64_uaddlv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_uaddlv2si ((int32x2_t) __a,\n-\t\t\t\t\t\t   (int32x2_t) __b);\n+  return __builtin_aarch64_uaddlv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_high_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_saddl2v16qi (__a, __b);\n+  return __builtin_aarch64_saddl2v16qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_high_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_saddl2v8hi (__a, __b);\n+  return __builtin_aarch64_saddl2v8hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_high_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int64x2_t) __builtin_aarch64_saddl2v4si (__a, __b);\n+  return __builtin_aarch64_saddl2v4si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_high_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_uaddl2v16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t     (int8x16_t) __b);\n+  return __builtin_aarch64_uaddl2v16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_high_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_uaddl2v8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t    (int16x8_t) __b);\n+  return __builtin_aarch64_uaddl2v8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddl_high_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_uaddl2v4si ((int32x4_t) __a,\n-\t\t\t\t\t\t    (int32x4_t) __b);\n+  return __builtin_aarch64_uaddl2v4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_s8 (int16x8_t __a, int8x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_saddwv8qi (__a, __b);\n+  return __builtin_aarch64_saddwv8qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_s16 (int32x4_t __a, int16x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_saddwv4hi (__a, __b);\n+  return __builtin_aarch64_saddwv4hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_s32 (int64x2_t __a, int32x2_t __b)\n {\n-  return (int64x2_t) __builtin_aarch64_saddwv2si (__a, __b);\n+  return __builtin_aarch64_saddwv2si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_u8 (uint16x8_t __a, uint8x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_uaddwv8qi ((int16x8_t) __a,\n-\t\t\t\t\t\t   (int8x8_t) __b);\n+  return __builtin_aarch64_uaddwv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_u16 (uint32x4_t __a, uint16x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_uaddwv4hi ((int32x4_t) __a,\n-\t\t\t\t\t\t   (int16x4_t) __b);\n+  return __builtin_aarch64_uaddwv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_u32 (uint64x2_t __a, uint32x2_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_uaddwv2si ((int64x2_t) __a,\n-\t\t\t\t\t\t   (int32x2_t) __b);\n+  return __builtin_aarch64_uaddwv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_high_s8 (int16x8_t __a, int8x16_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_saddw2v16qi (__a, __b);\n+  return __builtin_aarch64_saddw2v16qi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_high_s16 (int32x4_t __a, int16x8_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_saddw2v8hi (__a, __b);\n+  return __builtin_aarch64_saddw2v8hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_high_s32 (int64x2_t __a, int32x4_t __b)\n {\n-  return (int64x2_t) __builtin_aarch64_saddw2v4si (__a, __b);\n+  return __builtin_aarch64_saddw2v4si (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_high_u8 (uint16x8_t __a, uint8x16_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_uaddw2v16qi ((int16x8_t) __a,\n-\t\t\t\t\t\t     (int8x16_t) __b);\n+  return __builtin_aarch64_uaddw2v16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_high_u16 (uint32x4_t __a, uint16x8_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_uaddw2v8hi ((int32x4_t) __a,\n-\t\t\t\t\t\t    (int16x8_t) __b);\n+  return __builtin_aarch64_uaddw2v8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddw_high_u32 (uint64x2_t __a, uint32x4_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_uaddw2v4si ((int64x2_t) __a,\n-\t\t\t\t\t\t    (int32x4_t) __b);\n+  return __builtin_aarch64_uaddw2v4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t"}]}