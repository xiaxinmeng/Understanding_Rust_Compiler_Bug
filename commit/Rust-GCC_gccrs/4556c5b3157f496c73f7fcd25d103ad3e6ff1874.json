{"sha": "4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1NmM1YjMxNTdmNDk2YzczZjdmY2QyNWQxMDNhZDNlNmZmMTg3NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-06T18:39:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-06T18:39:24Z"}, "message": "PR c++/89576 - if constexpr of lambda capture.\n\nNow that we're doing implicit lambda capture in templates, we see x here as\nthe lambda capture.  maybe_convert_cond was doing nothing in a template, so\nwe never called mark_rvalue_use on x.  As part of the broad move toward\ndoing more processing of non-dependent expressions, let's do this\nconversion.\n\n\t* semantics.c (maybe_convert_cond): Do convert a non-dependent\n\tcondition in a template.\n\t* typeck.c (condition_conversion): Handle being called in a\n\ttemplate.\n\nFrom-SVN: r269433", "tree": {"sha": "45bd916b990e65427ccf824b8e924564ab3a69f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45bd916b990e65427ccf824b8e924564ab3a69f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d135eeb21daa79f0abf5df4dd91ab100a32e562d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d135eeb21daa79f0abf5df4dd91ab100a32e562d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d135eeb21daa79f0abf5df4dd91ab100a32e562d"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "a076fa9a255e92048005fa01b744e7e62f1cbec4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "patch": "@@ -1,3 +1,11 @@\n+2019-03-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/89576 - if constexpr of lambda capture.\n+\t* semantics.c (maybe_convert_cond): Do convert a non-dependent\n+\tcondition in a template.\n+\t* typeck.c (condition_conversion): Handle being called in a\n+\ttemplate.\n+\n 2019-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87378 - bogus -Wredundant-move warning."}, {"sha": "2573b77f6d6e4bd6525a1214fe46fd5428cfbe1e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "patch": "@@ -646,10 +646,10 @@ maybe_convert_cond (tree cond)\n     return NULL_TREE;\n \n   /* Wait until we instantiate templates before doing conversion.  */\n-  if (processing_template_decl)\n+  if (type_dependent_expression_p (cond))\n     return cond;\n \n-  if (warn_sequence_point)\n+  if (warn_sequence_point && !processing_template_decl)\n     verify_sequence_points (cond);\n \n   /* Do the conversion.  */"}, {"sha": "9ceb7af00220c058bbd225914df3985e9e83d3b2", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "patch": "@@ -5867,18 +5867,17 @@ cp_truthvalue_conversion (tree expr)\n     return c_common_truthvalue_conversion (input_location, expr);\n }\n \n-/* Just like cp_truthvalue_conversion, but we want a CLEANUP_POINT_EXPR.  */\n+/* Just like cp_truthvalue_conversion, but we want a CLEANUP_POINT_EXPR.  This\n+   is a low-level function; most callers should use maybe_convert_cond.  */\n \n tree\n condition_conversion (tree expr)\n {\n   tree t;\n-  /* Anything that might happen in a template should go through\n-     maybe_convert_cond.  */\n-  gcc_assert (!processing_template_decl);\n   t = perform_implicit_conversion_flags (boolean_type_node, expr,\n \t\t\t\t\t tf_warning_or_error, LOOKUP_NORMAL);\n-  t = fold_build_cleanup_point_expr (boolean_type_node, t);\n+  if (!processing_template_decl)\n+    t = fold_build_cleanup_point_expr (boolean_type_node, t);\n   return t;\n }\n "}, {"sha": "49c7b7abb6335f33c46cc0f83912e4fc747892de", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if15.C?ref=4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "patch": "@@ -7,5 +7,5 @@ constexpr int foo (int) { return 2; }\n template <typename>\n void a()\n {\n-  if constexpr(foo) { };\n+  if constexpr(foo) { };\t// { dg-error \"overloaded\" }\n }"}, {"sha": "8bfde6c1bdb5985a29d79b94f0ac536c037bf7d8", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if28.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4556c5b3157f496c73f7fcd25d103ad3e6ff1874/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if28.C?ref=4556c5b3157f496c73f7fcd25d103ad3e6ff1874", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/89576\n+// { dg-do compile { target c++17 } }\n+\n+template <class T>\n+void foo()\n+{\n+    constexpr int x = 0;\n+    [&] {\n+        if constexpr (x) {}\n+    };\n+}"}]}