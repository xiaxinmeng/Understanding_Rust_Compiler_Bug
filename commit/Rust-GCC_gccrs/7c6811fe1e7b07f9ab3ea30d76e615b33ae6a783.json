{"sha": "7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M2ODExZmUxZTdiMDdmOWFiM2VhMzBkNzZlNjE1YjMzYWU2YTc4Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T19:04:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T19:04:03Z"}, "message": "Makefile.in (gcse.o, [...]): Depend on gcse.h..\n\ngcc/\n\t* Makefile.in (gcse.o, target-globals.o): Depend on gcse.h..\n\t* gcse.h: New file.\n\t* gcse.c: Include gcse.h.\n\t(default_target_gcse): New variable.\n\t(this_target_gcse): New conditional variable.\n\t(can_copy): Redefine as a macro.\n\t(can_copy_init_p): New macro.\n\t(can_copy_p): Remove can_copy_init_p.\n\t* target-globals.h (this_target_gcse): Declare.\n\t(target_globals): Add a gcse field.\n\t(restore_target_globals): Copy the gcse field to\n\tthis_target_gcse.\n\t* target-globals.c: Include gcse.h.\n\t(default_target_globals): Initialize the gcse field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162108", "tree": {"sha": "97f6f506973f488da7ec0448ae53b49404c92688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f6f506973f488da7ec0448ae53b49404c92688"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15e7b94f185a0eb2cb8a0b0fbf4c8d3025f1b40d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e7b94f185a0eb2cb8a0b0fbf4c8d3025f1b40d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e7b94f185a0eb2cb8a0b0fbf4c8d3025f1b40d"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "90a3e6b7956a4a76cbb6fc77909d099b832868c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "patch": "@@ -1,3 +1,21 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (gcse.o, target-globals.o): Depend on gcse.h..\n+\t* gcse.h: New file.\n+\t* gcse.c: Include gcse.h.\n+\t(default_target_gcse): New variable.\n+\t(this_target_gcse): New conditional variable.\n+\t(can_copy): Redefine as a macro.\n+\t(can_copy_init_p): New macro.\n+\t(can_copy_p): Remove can_copy_init_p.\n+\t* target-globals.h (this_target_gcse): Declare.\n+\t(target_globals): Add a gcse field.\n+\t(restore_target_globals): Copy the gcse field to\n+\tthis_target_gcse.\n+\t* target-globals.c: Include gcse.h.\n+\t(default_target_globals): Initialize the gcse field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* ira-int.h (target_ira_int): Add x_ira_prohibited_mode_move_regs"}, {"sha": "c093623eaf88be559504ec3f95f39297d4839f18", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "patch": "@@ -3097,7 +3097,7 @@ gcse.o : gcse.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n    $(TM_P_H) $(PARAMS_H) cselib.h $(EXCEPT_H) gt-gcse.h $(TREE_H) $(TIMEVAR_H) \\\n    intl.h $(OBSTACK_H) $(TREE_PASS_H) $(DF_H) $(DBGCNT_H) $(TARGET_H) \\\n-   $(DF_H)\n+   $(DF_H) gcse.h\n store-motion.o : store-motion.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h $(FLAGS_H) insn-config.h $(GGC_H) \\\n    $(RECOG_H) $(EXPR_H) $(BASIC_BLOCK_H) $(FUNCTION_H) output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) \\\n@@ -3483,7 +3483,7 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n    $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H) \\\n-   $(LIBFUNCS_H) $(CFGLOOP_H) $(IRA_INT_H) builtins.h\n+   $(LIBFUNCS_H) $(CFGLOOP_H) $(IRA_INT_H) builtins.h gcse.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\"}, {"sha": "6f345ccbce62f871b0943132419566cf5fbea3bb", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "patch": "@@ -170,6 +170,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"dbgcnt.h\"\n #include \"target.h\"\n+#include \"gcse.h\"\n \n /* We support GCSE via Partial Redundancy Elimination.  PRE optimizations\n    are a superset of those done by classic GCSE.\n@@ -263,6 +264,11 @@ along with GCC; see the file COPYING3.  If not see\n \f\n /* GCSE global vars.  */\n \n+struct target_gcse default_target_gcse;\n+#if SWITCHABLE_TARGET\n+struct target_gcse *this_target_gcse = &default_target_gcse;\n+#endif\n+\n /* Set to non-zero if CSE should run after all GCSE optimizations are done.  */\n int flag_rerun_cse_after_global_opts;\n \n@@ -539,10 +545,10 @@ static bool is_too_expensive (const char *);\n \f\n /* Misc. utilities.  */\n \n-/* Nonzero for each mode that supports (set (reg) (reg)).\n-   This is trivially true for integer and floating point values.\n-   It may or may not be true for condition codes.  */\n-static char can_copy[(int) NUM_MACHINE_MODES];\n+#define can_copy \\\n+  (this_target_gcse->x_can_copy)\n+#define can_copy_init_p \\\n+  (this_target_gcse->x_can_copy_init_p)\n \n /* Compute which modes support reg/reg copy operations.  */\n \n@@ -579,8 +585,6 @@ compute_can_copy (void)\n bool\n can_copy_p (enum machine_mode mode)\n {\n-  static bool can_copy_init_p = false;\n-\n   if (! can_copy_init_p)\n     {\n       compute_can_copy ();"}, {"sha": "b4ed7f22fa12b1e79000241c66e56d9882de8ba6", "filename": "gcc/gcse.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Fgcse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Fgcse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.h?ref=7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "patch": "@@ -0,0 +1,43 @@\n+/* Global common subexpression elimination/Partial redundancy elimination\n+   and global constant/copy propagation for GNU compiler.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+   2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_GCSE_H\n+#define GCC_GCSE_H\n+\n+/* Target-dependent globals.  */\n+struct target_gcse {\n+  /* Nonzero for each mode that supports (set (reg) (reg)).\n+     This is trivially true for integer and floating point values.\n+     It may or may not be true for condition codes.  */\n+  char x_can_copy[(int) NUM_MACHINE_MODES];\n+\n+  /* True if the previous field has been initialized.  */\n+  bool x_can_copy_init_p;\n+};\n+\n+extern GTY(()) struct target_gcse default_target_gcse;\n+#if SWITCHABLE_TARGET\n+extern struct target_gcse *this_target_gcse;\n+#else\n+#define this_target_gcse (&default_target_gcse)\n+#endif\n+\n+#endif"}, {"sha": "02aa5d873c10d8d1315eaf4fe782f9f65da04271", "filename": "gcc/target-globals.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"ira-int.h\"\n #include \"builtins.h\"\n+#include \"gcse.h\"\n \n #if SWITCHABLE_TARGET\n struct target_globals default_target_globals = {\n@@ -52,7 +53,8 @@ struct target_globals default_target_globals = {\n   &default_target_cfgloop,\n   &default_target_ira,\n   &default_target_ira_int,\n-  &default_target_builtins\n+  &default_target_builtins,\n+  &default_target_gcse\n };\n \n struct target_globals *\n@@ -73,6 +75,7 @@ save_target_globals (void)\n   g->ira = XCNEW (struct target_ira);\n   g->ira_int = XCNEW (struct target_ira_int);\n   g->builtins = XCNEW (struct target_builtins);\n+  g->gcse = XCNEW (struct target_gcse);\n   restore_target_globals (g);\n   target_reinit ();\n   return g;"}, {"sha": "cdad7085e9a6327cd1fa50af164bf0d31fbbf2ff", "filename": "gcc/target-globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=7c6811fe1e7b07f9ab3ea30d76e615b33ae6a783", "patch": "@@ -33,6 +33,7 @@ extern struct target_cfgloop *this_target_cfgloop;\n extern struct target_ira *this_target_ira;\n extern struct target_ira_int *this_target_ira_int;\n extern struct target_builtins *this_target_builtins;\n+extern struct target_gcse *this_target_gcse;\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n@@ -47,6 +48,7 @@ struct GTY(()) target_globals {\n   struct target_ira *GTY((skip)) ira;\n   struct target_ira_int *GTY((skip)) ira_int;\n   struct target_builtins *GTY((skip)) builtins;\n+  struct target_gcse *GTY((skip)) gcse;\n };\n \n extern struct target_globals default_target_globals;\n@@ -68,6 +70,7 @@ restore_target_globals (struct target_globals *g)\n   this_target_ira = g->ira;\n   this_target_ira_int = g->ira_int;\n   this_target_builtins = g->builtins;\n+  this_target_gcse = g->gcse;\n }\n #endif\n "}]}