{"sha": "16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjOWQzYjE3MWY5ZTg5YjIzZDU4ZGI4YWIwNWVmYTNlNGNlYTg3Mg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-07-23T17:58:57Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-07-23T17:58:57Z"}, "message": "re PR target/18788 (\"-pthreads\" option with \"-shared\" does not cause libpthread.so to be linked in.)\n\n\tlibjava:\n\t* configure.ac (*-*-solaris2.8): Use alternate thread library.\n\tAdd libthread.\n\t(*-*-solaris2.9): Use libthread.\n\t* configure: Regenerate.\n\n\tlibgomp:\n\t* configure.tgt (*-*-solaris2.[56]*): Removed.\n\n\tgcc:\n\t* configure.ac: Don't disable TLS on Solaris 8/9 by default\n\tSet tga_func for Solaris 2/x86 resp. SPARC.\n\tRemove duplicate parts of sparc*-sun-solaris2.* TLS check.\n\t(LIB_THREAD_LDFLAGS_SPEC): Define.\n\t(LIB_TLS_SPEC): Define.\n\tCheck for required Sun ld version.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/sol2.h (LIB_SPEC): Use LIB_THREAD_LDFLAGS_SPEC with\n\t-pthread, -threads, LIB_TLS_SPEC with -pthread.\n\t* doc/install.texi (Specific, *-*-solaris2*): Document use of\n\talternate thread libraries on Solaris 8.\n\tDocument TLS patch requirements.\n\t* doc/sourcebuild.texi (Add Options): Sort alphabetically.\n\tDocument tls.\n\n\tPR target/18788\n\t* config/sol2.h (LIB_SPEC): Link with thread libraries even with\n\t-shared.\n\n\tgcc/testsuite:\n\t* lib/target-supports.exp (add_options_for_tls): New proc.\n\t* g++.dg/tls/static-1.C: Use dg-add-options tls.\n\t* g++.dg/tls/static-1a.cc: Likewise.\n\t* gcc.dg/tls/emutls-1.c: Likewise.\n\t* gcc.dg/tls/opt-11.c: Likewise.\n\t* gcc.dg/tls/opt-12.c: Likewise.\n\t* gcc.dg/tls/pr24428-2.c: Likewise.\n\t* gcc.dg/tls/pr24428.c: Likewise.\n\t* obj-c++.dg/tls/static-1.mm: Likewise.\n\t* obj-c++.dg/torture/tls/thr-init-1.mm: Likewise.\n\t* obj-c++.dg/torture/tls/thr-init-2.mm: Likewise.\n\t* obj-c++.dg/torture/tls/thr-init-3.mm: Likewise.\n\t* objc.dg/torture/tls/thr-init-2.m: Likewise.\n\t* objc.dg/torture/tls/thr-init-3.m: Likewise.\n\t* objc.dg/torture/tls/thr-init.m: Likewise.\n\t* gcc.dg/lto/20090210_0.c: Add -pthread for *-*-solaris2.[89].\n\nFrom-SVN: r162478", "tree": {"sha": "39103be234a3e19ac19bd12912df0b40cd3fdd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39103be234a3e19ac19bd12912df0b40cd3fdd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a6faad6e7dd942b60d5e78de424de674144543a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a6faad6e7dd942b60d5e78de424de674144543a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a6faad6e7dd942b60d5e78de424de674144543a"}], "stats": {"total": 543, "additions": 431, "deletions": 112}, "files": [{"sha": "61abdeb8ffad44ef4a76c365862e2c5f546eaeb5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,3 +1,25 @@\n+2010-07-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac: Don't disable TLS on Solaris 8/9 by default\n+\tSet tga_func for Solaris 2/x86 resp. SPARC.\n+\tRemove duplicate parts of sparc*-sun-solaris2.* TLS check.\n+\t(LIB_THREAD_LDFLAGS_SPEC): Define.\n+\t(LIB_TLS_SPEC): Define.\n+\tCheck for required Sun ld version.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sol2.h (LIB_SPEC): Use LIB_THREAD_LDFLAGS_SPEC with\n+\t-pthread, -threads, LIB_TLS_SPEC with -pthread.\n+\t* doc/install.texi (Specific, *-*-solaris2*): Document use of\n+\talternate thread libraries on Solaris 8.\n+\tDocument TLS patch requirements.\n+\t* doc/sourcebuild.texi (Add Options): Sort alphabetically.\n+\tDocument tls.\n+\n+\tPR target/18788\n+\t* config/sol2.h (LIB_SPEC): Link with thread libraries even with\n+\t-shared.\n+\n 2010-07-23  Jakub Jelinek  <jakub@redhat.com>\n \n \t* tree.h (struct tree_base): Add nameless_flag bitfield."}, {"sha": "c451c5378e0549188e1fe6cea01be049fe3be81f", "filename": "gcc/config.in", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -449,7 +449,7 @@\n #endif\n \n \n-/* Define if your assembler supports thread-local storage. */\n+/* Define if your assembler and linker support thread-local storage. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_TLS\n #endif\n@@ -1537,6 +1537,18 @@\n #endif\n \n \n+/* Define to the linker flags to use for -pthread. */\n+#ifndef USED_FOR_TARGET\n+#undef LIB_THREAD_LDFLAGS_SPEC\n+#endif\n+\n+\n+/* Define to the library containing __tls_get_addr/___tls_get_addr. */\n+#ifndef USED_FOR_TARGET\n+#undef LIB_TLS_SPEC\n+#endif\n+\n+\n /* Define to the sub-directory in which libtool stores uninstalled libraries.\n    */\n #ifndef USED_FOR_TARGET"}, {"sha": "805b32fe89c5a396bcf330d0cec304f4052af503", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -124,11 +124,12 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIB_SPEC\n #define LIB_SPEC \\\n   \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n-   %{!shared:\\\n-     %{!symbolic:\\\n-       %{pthreads|pthread:-lpthread} \\\n-       %{!pthreads:%{!pthread:%{threads:-lthread}}} \\\n-       %{p|pg:-ldl} -lc}}\"\n+   %{!symbolic:\\\n+     %{pthreads|pthread:\" \\\n+        LIB_THREAD_LDFLAGS_SPEC \" -lpthread \" LIB_TLS_SPEC \"} \\\n+     %{!pthreads:%{!pthread:%{threads:\" \\\n+\tLIB_THREAD_LDFLAGS_SPEC \" -lthread}}} \\\n+     %{p|pg:-ldl} -lc}\"\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC \"crtend.o%s crtn.o%s\""}, {"sha": "fedfaa7f090cac2b5d6d988315d45dd276ec803d", "filename": "gcc/configure", "status": "modified", "additions": 167, "deletions": 45, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -22108,17 +22108,9 @@ foo:\t.long\t25\n \t;;\n   i[34567]86-*-*)\n     case \"$target\" in\n-      i[34567]86-*-solaris2.[89]*)\n-\t# TLS was introduced in the Solaris 9 4/04 release but\n-\t# we do not enable it by default on Solaris 9 either.\n-\tif test \"x$enable_tls\" = xyes ; then\n-\t  on_solaris=yes\n-\telse\n-\t  enable_tls=no;\n-\tfi\n-\t;;\n       i[34567]86-*-solaris2.*)\n \ton_solaris=yes\n+\ttga_func=___tls_get_addr\n \t;;\n       *)\n \ton_solaris=no\n@@ -22333,50 +22325,27 @@ foo:\t.long\t25\n \t;;\n   sparc*-*-*)\n     case \"$target\" in\n-      sparc*-sun-solaris2.[89]*)\n-\t# TLS was introduced in the Solaris 9 4/04 release but\n-\t# we do not enable it by default on Solaris 9 either.\n-\tif test \"x$enable_tls\" = xyes ; then\n-\t  on_solaris=yes\n-\telse\n-\t  enable_tls=no;\n-\tfi\n-\t;;\n       sparc*-sun-solaris2.*)\n \ton_solaris=yes\n+\ttga_func=__tls_get_addr\n \t;;\n       *)\n \ton_solaris=no\n \t;;\n     esac\n     if test x$on_solaris = xyes && test x$gas_flag = xno; then\n       conftest_s='\n-\t.section \".tdata\",#alloc,#write,#tls\n-foo:\t.long\t25\n-\t.text\n-\tsethi\t%tgd_hi22(foo), %o0\n-\tadd\t%o0, %tgd_lo10(foo), %o1\n-\tadd\t%l7, %o1, %o0, %tgd_add(foo)\n-\tcall\t__tls_get_addr, %tgd_call(foo)\n-\tsethi\t%tldm_hi22(foo), %l1\n-\tadd\t%l1, %tldm_lo10(foo), %l2\n-\tadd\t%l7, %l2, %o0, %tldm_add(foo)\n-\tcall\t__tls_get_addr, %tldm_call(foo)\n-\tsethi\t%tldo_hix22(foo), %l3\n-\txor\t%l3, %tldo_lox10(foo), %l4\n-\tadd\t%o0, %l4, %l5, %tldo_add(foo)\n-\tsethi\t%tie_hi22(foo), %o3\n-\tadd\t%o3, %tie_lo10(foo), %o3\n-\tld\t[%l7 + %o3], %o2, %tie_ld(foo)\n-\tadd\t%g7, %o2, %o4, %tie_add(foo)\n-\tsethi\t%tle_hix22(foo), %l1\n-\txor\t%l1, %tle_lox10(foo), %o5\n-\tld\t[%g7 + %o5], %o1'\n+\t.section \".tdata\",#alloc,#write,#tls'\n \ttls_first_major=0\n \ttls_first_minor=0\n     else\n       conftest_s='\n-\t.section \".tdata\",\"awT\",@progbits\n+\t.section \".tdata\",\"awT\",@progbits'\n+\ttls_first_major=2\n+\ttls_first_minor=14\n+\ttls_as_opt=\"-32 --fatal-warnings\"\n+    fi\n+    conftest_s=\"$conftest_s\n foo:\t.long\t25\n \t.text\n \tsethi\t%tgd_hi22(foo), %o0\n@@ -22396,11 +22365,7 @@ foo:\t.long\t25\n \tadd\t%g7, %o2, %o4, %tie_add(foo)\n \tsethi\t%tle_hix22(foo), %l1\n \txor\t%l1, %tle_lox10(foo), %o5\n-\tld\t[%g7 + %o5], %o1'\n-\ttls_first_major=2\n-\ttls_first_minor=14\n-\ttls_as_opt=\"-32 --fatal-warnings\"\n-      fi\n+\tld\t[%g7 + %o5], %o1\"\n \t;;\n   xtensa*-*-*)\n     conftest_s='\n@@ -22455,6 +22420,163 @@ if test $gcc_cv_as_tls = yes; then\n   set_have_as_tls=yes\n fi\n fi\n+case \"$target\" in\n+  # TLS was introduced in the Solaris 9 FCS release and backported to\n+  # Solaris 8 patches.  Support for GNU-style TLS on x86 was only\n+  # introduced in Solaris 9 4/04, replacing the earlier Sun style that Sun\n+  # ld and GCC don't support any longer.\n+  *-*-solaris2.*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker and ld.so.1 TLS support\" >&5\n+$as_echo_n \"checking linker and ld.so.1 TLS support... \" >&6; }\n+    ld_tls_support=no\n+    # Check ld and ld.so.1 TLS support.\n+    if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+      # Assume all interesting versions of GNU ld have TLS support.\n+      # FIXME: still need ld.so.1 support, i.e. ld version checks below.\n+      ld_tls_support=yes\n+    else\n+      case \"$target\" in\n+        # Solaris 8/x86 ld has GNU style TLS support since version 1.280.\n+        i?86-*-solaris2.8)\n+          min_tls_ld_vers_minor=280\n+          ;;\n+        # Solaris 8/SPARC ld has TLS support since version 1.272.\n+        sparc*-*-solaris2.8)\n+          min_tls_ld_vers_minor=272\n+          ;;\n+\t# Solaris 9/x86 ld has GNU style TLS support since version 1.374.\n+        i?86-*-solaris2.9)\n+          min_tls_ld_vers_minor=374\n+          ;;\n+\t# Solaris 9/SPARC and Solaris 10+ ld have TLS support since FCS.\n+        sparc*-*-solaris2.9 | *-*-solaris2.1[0-9]*)\n+\t  min_tls_ld_vers_minor=343\n+          ;;\n+      esac\n+      if test \"$ls_vers_major\" -gt 1 || \\\n+        test \"$ld_vers_minor\" -ge \"$min_tls_ld_vers_minor\"; then\n+ \tld_tls_support=yes\n+      else\n+        set_have_as_tls=no\n+      fi\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ld_tls_support\" >&5\n+$as_echo \"$ld_tls_support\" >&6; }\n+\n+    save_LIBS=\"$LIBS\"\n+    save_LDFLAGS=\"$LDFLAGS\"\n+    LIBS=\n+    LDFLAGS=\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking alternate thread library\" >&5\n+$as_echo_n \"checking alternate thread library... \" >&6; }\n+    case \"$target\" in\n+      # TLS support was backported to Solaris 8 patches, but only lives in\n+      # the alternate thread library which became the default in Solaris 9.\n+      # We want to always use that, irrespective of TLS support.\n+      *-*-solaris2.8)\n+        # Take multilib subdir into account.  There's no spec to handle\n+\t# this.  The 64 symlink exists since Solaris 8.\n+        lwp_dir=/usr/lib/lwp\n+\tlwp_spec=\"-L$lwp_dir%{m64:/64} -R$lwp_dir%{m64:/64}\"\n+        LDFLAGS=\"-L$lwp_dir -R$lwp_dir\"\n+        ;;\n+      *-*-solaris2*)\n+        lwp_dir=\"none\"\n+\tlwp_spec=\"\"\n+\t;;\n+    esac\n+    # Always define LIB_THREAD_LDFLAGS_SPEC, even without TLS support.\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LIB_THREAD_LDFLAGS_SPEC \"$lwp_spec\"\n+_ACEOF\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lwp_dir\" >&5\n+$as_echo \"$lwp_dir\" >&6; }\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking library containing $tga_func\" >&5\n+$as_echo_n \"checking library containing $tga_func... \" >&6; }\n+    # Before Solaris 10, __tls_get_addr (SPARC/x64) resp. ___tls_get_addr\n+    # (32-bit x86) only lived in libthread, so check for that.  Keep\n+    # set_have_as_tls if found, disable if not.\n+    as_ac_Search=`$as_echo \"ac_cv_search_$tga_func\" | $as_tr_sh`\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing $tga_func\" >&5\n+$as_echo_n \"checking for library containing $tga_func... \" >&6; }\n+if { as_var=$as_ac_Search; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char $tga_func ();\n+int\n+main ()\n+{\n+return $tga_func ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' thread; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  eval \"$as_ac_Search=\\$ac_res\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if { as_var=$as_ac_Search; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+  break\n+fi\n+done\n+if { as_var=$as_ac_Search; eval \"test \\\"\\${$as_var+set}\\\" = set\"; }; then :\n+\n+else\n+  eval \"$as_ac_Search=no\"\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+eval ac_res=\\$$as_ac_Search\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+eval ac_res=\\$$as_ac_Search\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+else\n+  set_have_as_tls=no\n+fi\n+\n+    # Clear LIBS if we cannot support TLS.\n+    if test $set_have_as_tls = no; then\n+      LIBS=\n+    fi\n+    # Always define LIB_TLS_SPEC, even without TLS support.\n+\n+cat >>confdefs.h <<_ACEOF\n+#define LIB_TLS_SPEC \"$LIBS\"\n+_ACEOF\n+\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $LIBS\" >&5\n+$as_echo \"$LIBS\" >&6; }\n+\n+    LIBS=\"$save_LIBS\"\n+    LDFLAGS=\"$save_LDFLAGS\"\n+    ;;\n+esac\n if test $set_have_as_tls = yes ; then\n \n $as_echo \"#define HAVE_AS_TLS 1\" >>confdefs.h"}, {"sha": "143db7e3940f3059f67b36c8d1d2014dca634b44", "filename": "gcc/configure.ac", "status": "modified", "additions": 97, "deletions": 46, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -2687,17 +2687,9 @@ foo:\t.long\t25\n \t;;\n   i[34567]86-*-*)\n     case \"$target\" in\n-      i[34567]86-*-solaris2.[89]*)\n-\t# TLS was introduced in the Solaris 9 4/04 release but\n-\t# we do not enable it by default on Solaris 9 either.\n-\tif test \"x$enable_tls\" = xyes ; then\n-\t  on_solaris=yes\n-\telse\n-\t  enable_tls=no;\n-\tfi\n-\t;;\n       i[34567]86-*-solaris2.*)\n \ton_solaris=yes\n+\ttga_func=___tls_get_addr\n \t;;\n       *)\n \ton_solaris=no\n@@ -2913,50 +2905,27 @@ foo:\t.long\t25\n \t;;\n   sparc*-*-*)\n     case \"$target\" in\n-      sparc*-sun-solaris2.[89]*)\n-\t# TLS was introduced in the Solaris 9 4/04 release but\n-\t# we do not enable it by default on Solaris 9 either.\n-\tif test \"x$enable_tls\" = xyes ; then\n-\t  on_solaris=yes\n-\telse\n-\t  enable_tls=no;\n-\tfi\n-\t;;\n       sparc*-sun-solaris2.*)\n \ton_solaris=yes\n+\ttga_func=__tls_get_addr\n \t;;\n       *)\n \ton_solaris=no\n \t;;\n     esac\n     if test x$on_solaris = xyes && test x$gas_flag = xno; then\n       conftest_s='\n-\t.section \".tdata\",#alloc,#write,#tls\n-foo:\t.long\t25\n-\t.text\n-\tsethi\t%tgd_hi22(foo), %o0\n-\tadd\t%o0, %tgd_lo10(foo), %o1\n-\tadd\t%l7, %o1, %o0, %tgd_add(foo)\n-\tcall\t__tls_get_addr, %tgd_call(foo)\n-\tsethi\t%tldm_hi22(foo), %l1\n-\tadd\t%l1, %tldm_lo10(foo), %l2\n-\tadd\t%l7, %l2, %o0, %tldm_add(foo)\n-\tcall\t__tls_get_addr, %tldm_call(foo)\n-\tsethi\t%tldo_hix22(foo), %l3\n-\txor\t%l3, %tldo_lox10(foo), %l4\n-\tadd\t%o0, %l4, %l5, %tldo_add(foo)\n-\tsethi\t%tie_hi22(foo), %o3\n-\tadd\t%o3, %tie_lo10(foo), %o3\n-\tld\t[%l7 + %o3], %o2, %tie_ld(foo)\n-\tadd\t%g7, %o2, %o4, %tie_add(foo)\n-\tsethi\t%tle_hix22(foo), %l1\n-\txor\t%l1, %tle_lox10(foo), %o5\n-\tld\t[%g7 + %o5], %o1'\n+\t.section \".tdata\",#alloc,#write,#tls'\n \ttls_first_major=0\n \ttls_first_minor=0\n     else\n       conftest_s='\n-\t.section \".tdata\",\"awT\",@progbits\n+\t.section \".tdata\",\"awT\",@progbits'\n+\ttls_first_major=2\n+\ttls_first_minor=14\n+\ttls_as_opt=\"-32 --fatal-warnings\"\n+    fi\n+    conftest_s=\"$conftest_s\n foo:\t.long\t25\n \t.text\n \tsethi\t%tgd_hi22(foo), %o0\n@@ -2976,11 +2945,7 @@ foo:\t.long\t25\n \tadd\t%g7, %o2, %o4, %tie_add(foo)\n \tsethi\t%tle_hix22(foo), %l1\n \txor\t%l1, %tle_lox10(foo), %o5\n-\tld\t[%g7 + %o5], %o1'\n-\ttls_first_major=2\n-\ttls_first_minor=14\n-\ttls_as_opt=\"-32 --fatal-warnings\"\n-      fi\n+\tld\t[%g7 + %o5], %o1\"\n \t;;\n   xtensa*-*-*)\n     conftest_s='\n@@ -3007,9 +2972,95 @@ else\n   [$tls_first_major,$tls_first_minor,0], [$tls_as_opt], [$conftest_s],,\n   [set_have_as_tls=yes])\n fi\n+case \"$target\" in\n+  # TLS was introduced in the Solaris 9 FCS release and backported to\n+  # Solaris 8 patches.  Support for GNU-style TLS on x86 was only\n+  # introduced in Solaris 9 4/04, replacing the earlier Sun style that Sun\n+  # ld and GCC don't support any longer.\n+  *-*-solaris2.*)\n+    AC_MSG_CHECKING(linker and ld.so.1 TLS support)\n+    ld_tls_support=no\n+    # Check ld and ld.so.1 TLS support.\n+    if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+      # Assume all interesting versions of GNU ld have TLS support.\n+      # FIXME: still need ld.so.1 support, i.e. ld version checks below.\n+      ld_tls_support=yes\n+    else\n+      case \"$target\" in\n+        # Solaris 8/x86 ld has GNU style TLS support since version 1.280.\n+        i?86-*-solaris2.8)\n+          min_tls_ld_vers_minor=280\n+          ;;\n+        # Solaris 8/SPARC ld has TLS support since version 1.272.\n+        sparc*-*-solaris2.8)\n+          min_tls_ld_vers_minor=272\n+          ;;\n+\t# Solaris 9/x86 ld has GNU style TLS support since version 1.374.\n+        i?86-*-solaris2.9)\n+          min_tls_ld_vers_minor=374\n+          ;;\n+\t# Solaris 9/SPARC and Solaris 10+ ld have TLS support since FCS.\n+        sparc*-*-solaris2.9 | *-*-solaris2.1[[0-9]]*)\n+\t  min_tls_ld_vers_minor=343\n+          ;;\n+      esac\n+      if test \"$ls_vers_major\" -gt 1 || \\\n+        test \"$ld_vers_minor\" -ge \"$min_tls_ld_vers_minor\"; then\n+ \tld_tls_support=yes\n+      else\n+        set_have_as_tls=no\n+      fi\n+    fi\n+    AC_MSG_RESULT($ld_tls_support)\n+\n+    save_LIBS=\"$LIBS\"\n+    save_LDFLAGS=\"$LDFLAGS\"\n+    LIBS=\n+    LDFLAGS=\n+\n+    AC_MSG_CHECKING(alternate thread library)\n+    case \"$target\" in\n+      # TLS support was backported to Solaris 8 patches, but only lives in\n+      # the alternate thread library which became the default in Solaris 9. \n+      # We want to always use that, irrespective of TLS support.\n+      *-*-solaris2.8)\n+        # Take multilib subdir into account.  There's no spec to handle\n+\t# this.  The 64 symlink exists since Solaris 8.\n+        lwp_dir=/usr/lib/lwp\n+\tlwp_spec=\"-L$lwp_dir%{m64:/64} -R$lwp_dir%{m64:/64}\"\n+        LDFLAGS=\"-L$lwp_dir -R$lwp_dir\"\n+        ;;\n+      *-*-solaris2*)\n+        lwp_dir=\"none\"\n+\tlwp_spec=\"\"\n+\t;;\n+    esac    \n+    # Always define LIB_THREAD_LDFLAGS_SPEC, even without TLS support.\n+    AC_DEFINE_UNQUOTED(LIB_THREAD_LDFLAGS_SPEC, \"$lwp_spec\",\n+        [Define to the linker flags to use for -pthread.])\n+    AC_MSG_RESULT($lwp_dir)\n+\n+    AC_MSG_CHECKING(library containing $tga_func)\n+    # Before Solaris 10, __tls_get_addr (SPARC/x64) resp. ___tls_get_addr\n+    # (32-bit x86) only lived in libthread, so check for that.  Keep\n+    # set_have_as_tls if found, disable if not.\n+    AC_SEARCH_LIBS([$tga_func], [thread],, [set_have_as_tls=no])\n+    # Clear LIBS if we cannot support TLS.\n+    if test $set_have_as_tls = no; then\n+      LIBS=\n+    fi\n+    # Always define LIB_TLS_SPEC, even without TLS support.\n+    AC_DEFINE_UNQUOTED(LIB_TLS_SPEC, \"$LIBS\",\n+        [Define to the library containing __tls_get_addr/___tls_get_addr.])\n+    AC_MSG_RESULT($LIBS)\n+\n+    LIBS=\"$save_LIBS\"\n+    LDFLAGS=\"$save_LDFLAGS\"\n+    ;;\n+esac\n if test $set_have_as_tls = yes ; then\n   AC_DEFINE(HAVE_AS_TLS, 1,\n-\t    [Define if your assembler supports thread-local storage.])\n+\t    [Define if your assembler and linker support thread-local storage.])\n fi\n \n # Target-specific assembler checks."}, {"sha": "648f0977154ffb2a7599ebe0227d1864d55ae911", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -4165,6 +4165,29 @@ There are patches for Solaris 8 (117350-12 or newer for SPARC,\n 117351-12 or newer for Intel) and Solaris 9 (117171-11 or newer for\n SPARC, 117172-11 or newer for Intel) that address this problem.\n \n+Solaris~8 provides an alternate implementation of the thread libraries,\n+@samp{libpthread} and @samp{libthread}.  They are required for TLS\n+support and have been made the default in Solaris~9, so they are always\n+used on Solaris~8.\n+\n+Thread-local storage (TLS) is supported in Solaris~8 and 9, but requires\n+some patches.  The @samp{libthread} patches provide the\n+@code{__tls_get_addr} (SPARC, 64-bit x86) resp.@ @code{___tls_get_addr}\n+(32-bit x86) functions.  On Solaris~8, you need 108993-26 or newer on\n+SPARC, 108994-26 or newer on Intel.  On Solaris~9, the necessary support\n+on SPARC is present since FCS, while 114432-05 or newer is reqired on\n+Intel.  Additionally, on Solaris~8, patch 109147-14 or newer on SPARC or\n+109148-22 or newer on Intel are required for the Sun @command{ld} and\n+runtime linker (@command{ld.so.1}) support.  Again, Solaris~9/SPARC\n+works since FCS, while 113986-02 is required on Intel.  The linker\n+patches must be installed even if GNU @command{ld} is used. Sun\n+@command{as} in Solaris~8 and 9 doesn't support the necessary\n+relocations, so GNU @command{as} must be used.  The @command{configure}\n+script checks for those prerequisites and automatically enables TLS\n+support if they are met.  Although those minimal patch versions should\n+work, it is recommended to use the latest patch versions which include\n+additional bug fixes.\n+\n @html\n <hr />\n @end html"}, {"sha": "e78158ffc96d9b5163c6a39229212a7c8ea05228", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1879,6 +1879,16 @@ The supported values of @var{feature} for directive @code{dg-add-options}\n are:\n \n @table @code\n+@item arm_neon\n+NEON support.  Only ARM targets support this feature, and only then\n+in certain modes; see the @ref{arm_neon_ok,,arm_neon_ok effective target\n+keyword}.\n+\n+@item arm_neon_fp16\n+NEON and half-precision floating point support.  Only ARM targets\n+support this feature, and only then in certain modes; see\n+the @ref{arm_neon_ok,,arm_neon_fp16_ok effective target keyword}.\n+\n @item bind_pic_locally\n Add the target-specific flags needed to enable functions to bind\n locally when using pic/PIC passes in the testsuite.\n@@ -1894,15 +1904,8 @@ compliance mode.\n @code{mips16} function attributes.\n Only MIPS targets support this feature, and only then in certain modes.\n \n-@item arm_neon\n-NEON support.  Only ARM targets support this feature, and only then\n-in certain modes; see the @ref{arm_neon_ok,,arm_neon_ok effective target\n-keyword}.\n-\n-@item arm_neon_fp16\n-NEON and half-precision floating point support.  Only ARM targets\n-support this feature, and only then in certain modes; see\n-the @ref{arm_neon_ok,,arm_neon_fp16_ok effective target keyword}.\n+@item tls\n+Add the target-specific flags needed to use thread-local storage.\n @end table\n \n @node Require Support"}, {"sha": "59cd07429ded14606ba3598d048e92aef6cf239c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,3 +1,22 @@\n+2010-07-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lib/target-supports.exp (add_options_for_tls): New proc.\n+\t* g++.dg/tls/static-1.C: Use dg-add-options tls.\n+\t* g++.dg/tls/static-1a.cc: Likewise.\n+\t* gcc.dg/tls/emutls-1.c: Likewise.\n+\t* gcc.dg/tls/opt-11.c: Likewise.\n+\t* gcc.dg/tls/opt-12.c: Likewise.\n+\t* gcc.dg/tls/pr24428-2.c: Likewise.\n+\t* gcc.dg/tls/pr24428.c: Likewise.\n+\t* obj-c++.dg/tls/static-1.mm: Likewise.\n+\t* obj-c++.dg/torture/tls/thr-init-1.mm: Likewise.\n+\t* obj-c++.dg/torture/tls/thr-init-2.mm: Likewise.\n+\t* obj-c++.dg/torture/tls/thr-init-3.mm: Likewise.\n+\t* objc.dg/torture/tls/thr-init-2.m: Likewise.\n+\t* objc.dg/torture/tls/thr-init-3.m: Likewise.\n+\t* objc.dg/torture/tls/thr-init.m: Likewise.\n+\t* gcc.dg/lto/20090210_0.c: Add -pthread for *-*-solaris2.[89].\n+\n 2010-07-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/tree-ssa/loadpre6.c: Cleanup fre dump file."}, {"sha": "506b0fcf7a0eecde254bb7b7643e0566467c990e", "filename": "gcc/testsuite/g++.dg/tls/static-1.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fstatic-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fstatic-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fstatic-1.C?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,6 +1,7 @@\n // { dg-do run }\n // { dg-options \"-O2\" }\n // { dg-require-effective-target tls_runtime }\n+// { dg-add-options tls }\n // { dg-additional-sources \"static-1a.cc\" }\n \n extern \"C\" void abort ();"}, {"sha": "1c6109f861ece30dd1e51d44ff714ec81628b7c7", "filename": "gcc/testsuite/g++.dg/tls/static-1a.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fstatic-1a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fstatic-1a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fstatic-1a.cc?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,6 +1,7 @@\n // { dg-do run }\n // { dg-options \"-O2\" }\n // { dg-require-effective-target tls_runtime }\n+// { dg-add-options tls }\n // { dg-additional-sources \"static-1a.cc\" }\n \n struct A"}, {"sha": "2c858a67d326ceee5467c4184242fe9494cb23e8", "filename": "gcc/testsuite/gcc.dg/lto/20090210_0.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20090210_0.c?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,7 @@\n /* { dg-lto-do run }  */\n /* { dg-suppress-ld-options {-fPIC} }  */\n+/* { dg-require-effective-target tls } */\n+/* { dg-extra-ld-options \"-pthread\" { target *-*-solaris2.[89] } } */\n int foo (int x)\n {\n   return x;"}, {"sha": "3b3577c895efd70d78632b51e2fc080b93fc9e6d", "filename": "gcc/testsuite/gcc.dg/tls/emutls-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Femutls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Femutls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Femutls-1.c?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run { target *-wrs-vxworks } } */\n /* { dg-require-effective-target tls } */\n+/* { dg-add-options tls } */\n \n /* vxworks' TLS model requires no extra padding on the tls proxy\n    objects.  */"}, {"sha": "0069c484a2c43c7df4c82f1c21234f456ddd991a", "filename": "gcc/testsuite/gcc.dg/tls/opt-11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-11.c?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target tls_runtime } */\n+/* { dg-add-options tls } */\n \n extern void abort (void);\n extern void *memset (void *, int, __SIZE_TYPE__);"}, {"sha": "7b9e498a5a8dc06a9181e48c20e35db6191381ac", "filename": "gcc/testsuite/gcc.dg/tls/opt-12.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fopt-12.c?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -2,6 +2,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2 -fpic\" } */\n /* { dg-require-effective-target tls_runtime } */\n+/* { dg-add-options tls } */\n /* { dg-require-effective-target fpic } */\n \n extern void abort (void);"}, {"sha": "b147f60d6a911f9099db097eb193d77009e906f6", "filename": "gcc/testsuite/gcc.dg/tls/pr24428-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428-2.c?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n /* { dg-require-effective-target tls_runtime } */\n+/* { dg-add-options tls } */\n \n __thread double thrtest[81];\n int main ()"}, {"sha": "6439698775a848a518e569dc088986739e5c6aa4", "filename": "gcc/testsuite/gcc.dg/tls/pr24428.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftls%2Fpr24428.c?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do run } */\n /* { dg-options \"-O2\" } */\n /* { dg-require-effective-target tls_runtime } */\n+/* { dg-add-options tls } */\n \n __thread double thrtest[81];\n int main ()"}, {"sha": "b3123442837ec4801330a41612bdcbc6b0897423", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -569,6 +569,24 @@ proc check_effective_target_pcc_bitfield_type_matters { } {\n     }]\n }\n \n+# Add to FLAGS all the target-specific flags needed to use thread-local storage.\n+\n+proc add_options_for_tls { flags } {\n+    # On Solaris 8 and 9, __tls_get_addr/___tls_get_addr only lives in\n+    # libthread, so always pass -pthread for native TLS.\n+    # Need to duplicate native TLS check from\n+    # check_effective_target_tls_native to avoid recursion.\n+    if { [istarget *-*-solaris2.\\[89\\]*] &&\n+\t [check_no_messages_and_pattern tls_native \"!emutls\" assembly {\n+\t     __thread int i;\n+\t     int f (void) { return i; }\n+\t     void g (int j) { i = j; }\n+\t }] } {\n+\treturn \"$flags -pthread\"\n+    }\n+    return $flags\n+}\n+\n # Return 1 if thread local storage (TLS) is supported, 0 otherwise.\n \n proc check_effective_target_tls {} {"}, {"sha": "6d58010eb0ca54bf4e1169fb723f6c0aca7dfc2c", "filename": "gcc/testsuite/obj-c++.dg/tls/static-1.mm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftls%2Fstatic-1.mm?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-require-effective-target tls }\n+// { dg-add-options tls }\n // { dg-additional-sources \"static-1a.mm\" }\n \n extern \"C\" {"}, {"sha": "1ec8623f3ee9748d188d58102c70ccb75e85940e", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-1.mm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-1.mm?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-require-effective-target tls }\n+// { dg-add-options tls }\n /* { dg-skip-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n extern \"C\" {\n extern void abort ();"}, {"sha": "4e5baac790df84f2c7c29f802b0a648e0282d8d6", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-2.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-2.mm?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-require-effective-target tls }\n+// { dg-add-options tls }\n /* { dg-skip-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n \n extern \"C\" {\n@@ -42,4 +43,4 @@ int main (int ac, char *av[])\n     abort () ;\n   \n   return 0;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1515d25005736c2e27249daddf899fd8ca457ea3", "filename": "gcc/testsuite/obj-c++.dg/torture/tls/thr-init-3.mm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Ftls%2Fthr-init-3.mm?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target tls } */\n+/* { dg-add-options tls } */\n /* { dg-skip-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.mm\" } */"}, {"sha": "9a946bb444daaaf4d190864b7a7b3a84b35061de", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init-2.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-2.m?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-require-effective-target tls }\n+// { dg-add-options tls }\n /* { dg-skip-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n \n extern void _exit(int);"}, {"sha": "6ac977c9bae66b492af941ea58104f8808c52ded", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init-3.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target tls } */\n+/* { dg-add-options tls } */\n /* { dg-skip-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n /* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */"}, {"sha": "286a4706f06fe4e1f52d911125e0a6066de8cc3b", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init.m", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init.m?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target tls } */\n+/* { dg-add-options tls } */\n /* { dg-skip-if \"PR44140\" { *-*-* } { \"-flto\" \"-fwhopr\" } { \"\" } } */\n \n extern void _exit(int);"}, {"sha": "127b500b355eae5df62fffc8afe65eae63ae40f9", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,3 +1,7 @@\n+2010-07-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.tgt (*-*-solaris2.[56]*): Removed.\n+\n 2010-07-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* acinclude.m4 (LIBGOMP_ENABLE_SYMVERS): Handle sun style."}, {"sha": "16bb888862e6a485cbdbee40d7ce82bbc42cb7a8", "filename": "libgomp/configure.tgt", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libgomp%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libgomp%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure.tgt?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -116,11 +116,6 @@ case \"${target}\" in\n \tconfig_path=\"mingw32 posix\"\n \t;;\n \n-  *-*-solaris2.[56]*)\n-\tconfig_path=\"posix95 posix\"\n-\tXLDFLAGS=\"${XLDFLAGS} -lposix4\"\n-\t;;\n-\n   *-*-darwin*)\n \tconfig_path=\"bsd posix\"\n \t;;"}, {"sha": "7d01621d3905312b59f6170caa74cc2f5664372f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1,3 +1,10 @@\n+2010-07-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (*-*-solaris2.8): Use alternate thread library.\n+\tAdd libthread.\n+\t(*-*-solaris2.9): Use libthread.\n+\t* configure: Regenerate.\n+\n 2010-07-15  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* include/sparc-signal.h: Renamed to ..."}, {"sha": "8ccfa24cc126c92f0eb1ace3c80edca993d761bc", "filename": "libjava/configure", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -20712,6 +20712,19 @@ case \"$THREADS\" in\n \tTHREADLIBS='-lpthread -lrt'\n \tTHREADSPEC='-lpthread -lrt'\n \t;;\n+     *-*-solaris2.8)\n+\t# Always use alternate thread library on Solaris 8.  Need libthread\n+\t# for TLS support.\n+\t# Need -Wl,-R to get it through libtool ...\n+\tTHREADLIBS='-L/usr/lib/lwp$(MULTISUBDIR) -Wl,-R -Wl,/usr/lib/lwp$(MULTISUBDIR) -lpthread -lthread'\n+\t# ... while ld only accepts -R.\n+\tTHREADSPEC='-L/usr/lib/lwp%{m64:/64} -R/usr/lib/lwp%{m64:/64} -lpthread -lthread'\n+        ;;\n+     *-*-solaris2.9)\n+\t# As on Solaris 8, need libthread for TLS support.\n+\tTHREADLIBS='-lpthread -lthread'\n+\tTHREADSPEC='-lpthread -lthread'\n+\t;;\n      *)\n \tTHREADLIBS=-lpthread\n \tTHREADSPEC=-lpthread"}, {"sha": "125e9ce9b46ca8acc8f821fdb6e80b0a09184e83", "filename": "libjava/configure.ac", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c9d3b171f9e89b23d58db8ab05efa3e4cea872/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=16c9d3b171f9e89b23d58db8ab05efa3e4cea872", "patch": "@@ -1064,6 +1064,19 @@ case \"$THREADS\" in\n \tTHREADLIBS='-lpthread -lrt'\n \tTHREADSPEC='-lpthread -lrt'\n \t;;\n+     *-*-solaris2.8)\n+\t# Always use alternate thread library on Solaris 8.  Need libthread\n+\t# for TLS support.\n+\t# Need -Wl,-R to get it through libtool ...\n+\tTHREADLIBS='-L/usr/lib/lwp$(MULTISUBDIR) -Wl,-R -Wl,/usr/lib/lwp$(MULTISUBDIR) -lpthread -lthread'\n+\t# ... while ld only accepts -R.\n+\tTHREADSPEC='-L/usr/lib/lwp%{m64:/64} -R/usr/lib/lwp%{m64:/64} -lpthread -lthread'\n+        ;;\n+     *-*-solaris2.9)\n+\t# As on Solaris 8, need libthread for TLS support.\n+\tTHREADLIBS='-lpthread -lthread'\n+\tTHREADSPEC='-lpthread -lthread'\n+\t;;\n      *)\n \tTHREADLIBS=-lpthread\n \tTHREADSPEC=-lpthread"}]}