{"sha": "45c8342998c3c431a06366f37c48be9082de8906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVjODM0Mjk5OGMzYzQzMWEwNjM2NmYzN2M0OGJlOTA4MmRlODkwNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-27T10:54:51Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-27T10:54:51Z"}, "message": "re PR middle-end/51959 (ICE in set_mem_alias_set, at emit-rtl.c:1884)\n\n2012-01-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/51959\n\t* expr.c (store_field): Use the alias-set of the scratch memory\n\tfor storing to it.\n\n\t* g++.dg/torture/pr51959.C: New testcase.\n\nFrom-SVN: r183616", "tree": {"sha": "b599001dbe6f3f81d8368b34ad45ce0bb017a6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b599001dbe6f3f81d8368b34ad45ce0bb017a6c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45c8342998c3c431a06366f37c48be9082de8906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c8342998c3c431a06366f37c48be9082de8906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c8342998c3c431a06366f37c48be9082de8906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c8342998c3c431a06366f37c48be9082de8906/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10c7477699e2d8906204293e15c64b34d1e62231", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c7477699e2d8906204293e15c64b34d1e62231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c7477699e2d8906204293e15c64b34d1e62231"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "a18f505691e1f648efd571c0ec4b3064649b36a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c8342998c3c431a06366f37c48be9082de8906/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c8342998c3c431a06366f37c48be9082de8906/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45c8342998c3c431a06366f37c48be9082de8906", "patch": "@@ -1,3 +1,9 @@\n+2012-01-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/51959\n+\t* expr.c (store_field): Use the alias-set of the scratch memory\n+\tfor storing to it.\n+\n 2012-01-27  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/51990"}, {"sha": "48c3e0a19d565f945caec1b5ad86fee84c5aa31a", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c8342998c3c431a06366f37c48be9082de8906/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c8342998c3c431a06366f37c48be9082de8906/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=45c8342998c3c431a06366f37c48be9082de8906", "patch": "@@ -6299,7 +6299,7 @@ store_field (rtx target, HOST_WIDE_INT bitsize, HOST_WIDE_INT bitpos,\n \n       store_field (blk_object, bitsize, bitpos,\n \t\t   bitregion_start, bitregion_end,\n-\t\t   mode, exp, type, alias_set, nontemporal);\n+\t\t   mode, exp, type, MEM_ALIAS_SET (blk_object), nontemporal);\n \n       emit_move_insn (target, object);\n "}, {"sha": "bdd2792e388509c35371ca636e0bed32ec7d4291", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c8342998c3c431a06366f37c48be9082de8906/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c8342998c3c431a06366f37c48be9082de8906/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45c8342998c3c431a06366f37c48be9082de8906", "patch": "@@ -1,3 +1,8 @@\n+2012-01-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/51959\n+\t* g++.dg/torture/pr51959.C: New testcase.\n+\n 2012-01-27  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/51990"}, {"sha": "da0be71ebd86de7dee786edbc9b3563141518bd5", "filename": "gcc/testsuite/g++.dg/torture/pr51959.C", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45c8342998c3c431a06366f37c48be9082de8906/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51959.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45c8342998c3c431a06366f37c48be9082de8906/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51959.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr51959.C?ref=45c8342998c3c431a06366f37c48be9082de8906", "patch": "@@ -0,0 +1,80 @@\n+// { dg-do compile }\n+\n+namespace std {\n+    typedef __SIZE_TYPE__ size_t;\n+}\n+inline void* operator new(std::size_t, void* __p) throw() {\n+    return __p;\n+}\n+template <typename T> class QTypeInfo {\n+};\n+enum { Q_COMPLEX_TYPE = 0,     Q_PRIMITIVE_TYPE = 0x1,     Q_STATIC_TYPE = 0,     Q_MOVABLE_TYPE = 0x2,     Q_DUMMY_TYPE = 0x4 };\n+template<typename Enum> class QFlags {\n+    int i;\n+    inline QFlags(Enum f) : i(f) { }\n+};\n+class __attribute__((visibility(\"default\"))) QSize {\n+public:\n+    bool isEmpty() const;\n+    friend inline bool operator==(const QSize &, const QSize &);\n+    int wd;\n+    int ht;\n+};\n+template<> class QTypeInfo<QSize > {\n+public:\n+    enum {\n+\tisComplex = (((Q_MOVABLE_TYPE) & Q_PRIMITIVE_TYPE) == 0), isStatic = (((Q_MOVABLE_TYPE) & (Q_MOVABLE_TYPE | Q_PRIMITIVE_TYPE)) == 0), isLarge = (sizeof(QSize)>sizeof(void*)), isPointer = false, isDummy = (((Q_MOVABLE_TYPE) & Q_DUMMY_TYPE) != 0) };\n+};\n+class __attribute__((visibility(\"default\"))) QBasicAtomicInt {\n+public:\n+    inline bool operator!=(int value) const     { }\n+};\n+struct __attribute__((visibility(\"default\"))) QListData {\n+    struct Data {\n+\tQBasicAtomicInt ref;\n+    };\n+    void **append();\n+};\n+template <typename T> class QList {\n+    struct Node {\n+\tvoid *v;\n+    };\n+    union {\n+\tQListData p;\n+\tQListData::Data *d;\n+    };\n+public:\n+    void append(const T &t);\n+    inline void push_back(const T &t) {\n+\tappend(t);\n+    }\n+    void node_construct(Node *n, const T &t);\n+    void node_destruct(Node *n);\n+};\n+template <typename T> inline void QList<T>::node_construct(Node *n, const T &t) {\n+    if (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) n->v = new T(t);\n+    else if (QTypeInfo<T>::isComplex) new (n) T(t);\n+}\n+template <typename T> inline void QList<T>::node_destruct(Node *n) {\n+}\n+template <typename T>  void QList<T>::append(const T &t) {\n+    if (d->ref != 1) {\n+\ttry {\n+\t}\n+\tcatch (...) {\n+\t}\n+\tif (QTypeInfo<T>::isLarge || QTypeInfo<T>::isStatic) {\n+\t}\n+\telse {\n+\t    Node *n, copy;\n+\t    node_construct(&copy, t);\n+\t    try {                 n = reinterpret_cast<Node *>(p.append());;             }\n+\t    catch (...) {                 node_destruct(&copy);                 throw;             }\n+\t    *n = copy;\n+\t}\n+    }\n+};\n+void virtual_hook(QSize sz, QList<QSize> &arg)\n+{\n+  arg.push_back(sz);\n+}"}]}