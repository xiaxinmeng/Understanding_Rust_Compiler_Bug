{"sha": "5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4ZGQ2MmExYjQzNmNmODIxYjMyYTE1ZDlhMmZlNzllZjNjZGMxNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-06-14T22:07:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-06-14T22:07:33Z"}, "message": "re PR libstdc++/53648 ([C++11] nested empty tuples)\n\n\tPR libstdc++/53648\n\t* include/std/tuple (__empty_not_final): Do not use EBO for tuples.\n\t* testsuite/20_util/tuple/53648.cc: New.\n\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error line\n\tnumber.\n\nFrom-SVN: r188636", "tree": {"sha": "7c36953de8a28145a886c09f39ecc89ab70643a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c36953de8a28145a886c09f39ecc89ab70643a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ac8ab82de41cc1d642cfb9f1d31a5501f8153e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ac8ab82de41cc1d642cfb9f1d31a5501f8153e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ac8ab82de41cc1d642cfb9f1d31a5501f8153e"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "818e6746fb860e6b5801abc6302f515c9f46a8d2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "patch": "@@ -1,3 +1,11 @@\n+2012-06-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/53648\n+\t* include/std/tuple (__empty_not_final): Do not use EBO for tuples.\n+\t* testsuite/20_util/tuple/53648.cc: New.\n+\t* testsuite/20_util/uses_allocator/cons_neg.cc: Adjust dg-error line\n+\tnumber.\n+\n 2012-06-14  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* doc/xml/manual/status_cxx2011.xml: Correct C++11 status table."}, {"sha": "fb9e09fffe890ff62f5ac265f2e1606336d8b58e", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "patch": "@@ -1,6 +1,7 @@\n // <tuple> -*- C++ -*-\n \n-// Copyright (C) 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -201,10 +202,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void _M_swap(_Tuple_impl&) noexcept { /* no-op */ }\n     };\n \n+  template<typename _Tp>\n+    struct __is_empty_non_tuple : is_empty<_Tp> { };\n+\n+  // Using EBO for elements that are tuples causes ambiguous base errors.\n+  template<typename _El0, typename... _El>\n+    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };\n+\n   // Use the Empty Base-class Optimization for empty, non-final types.\n   template<typename _Tp>\n     using __empty_not_final\n-      = typename conditional<__is_final(_Tp), false_type, is_empty<_Tp>>::type;\n+    = typename conditional<__is_final(_Tp), false_type,\n+\t\t\t   __is_empty_non_tuple<_Tp>>::type;\n \n   /**\n    * Recursive tuple implementation. Here we store the @c Head element"}, {"sha": "5671e4443492e823fe052c0112293fd93682f59c", "filename": "libstdc++-v3/testsuite/20_util/tuple/53648.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F53648.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F53648.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F53648.cc?ref=5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "patch": "@@ -0,0 +1,44 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// libstdc++/53648\n+\n+#include <tuple>\n+#include <type_traits>\n+\n+using std::tuple;\n+\n+struct A { };\n+\n+template class tuple<tuple<>>;\n+template class tuple<tuple<tuple<>>>;\n+template class tuple<A, tuple<A, tuple<A, tuple<A>>>>;\n+template class tuple<tuple<tuple<A, A>, A>, A>;\n+\n+// Verify the following QoI properties are preserved\n+\n+static_assert( std::is_empty<tuple<>>::value, \"tuple<> is empty\" );\n+\n+static_assert( std::is_empty<tuple<tuple<>>>::value,\n+               \"tuple<tuple<>> is empty\" );\n+\n+static_assert( sizeof(tuple<char, tuple<>>) == sizeof(char),\n+               \"tuple<> is eligible for EBO\" );\n+"}, {"sha": "d81dd35d096a96a854908a0e42238d1542e6de43", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/cons_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2Fcons_neg.cc?ref=5c8dd62a1b436cf821b32a15d9a2fe79ef3cdc16", "patch": "@@ -44,4 +44,4 @@ void test01()\n \n   tuple<Type> t(allocator_arg, a, 1);\n }\n-// { dg-error \"no matching function\" \"\" { target *-*-* } 112 }\n+// { dg-error \"no matching function\" \"\" { target *-*-* } 113 }"}]}