{"sha": "40d6e956681de2e7204030f005a7ea6951d04407", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBkNmU5NTY2ODFkZTJlNzIwNDAzMGYwMDVhN2VhNjk1MWQwNDQwNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-04-19T14:41:03Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-04-19T14:41:03Z"}, "message": "calls.c (precompute_arguments): Remove must_preallocate and args_size calls.\n\n\t* calls.c (precompute_arguments): Remove must_preallocate and\n\targs_size calls.\n\t(expand_call): Update call of precompute_arguments.\n\nFrom-SVN: r33258", "tree": {"sha": "170bce3c6f6bfce0a03b503619811d079d38925a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/170bce3c6f6bfce0a03b503619811d079d38925a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40d6e956681de2e7204030f005a7ea6951d04407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d6e956681de2e7204030f005a7ea6951d04407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40d6e956681de2e7204030f005a7ea6951d04407", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40d6e956681de2e7204030f005a7ea6951d04407/comments", "author": null, "committer": null, "parents": [{"sha": "44be169cb5ff11beefbb0061e3e2bed0a30d2677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44be169cb5ff11beefbb0061e3e2bed0a30d2677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44be169cb5ff11beefbb0061e3e2bed0a30d2677"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "e7ecc5ecdc38744310b539b323f6864cfcdac521", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6e956681de2e7204030f005a7ea6951d04407/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6e956681de2e7204030f005a7ea6951d04407/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40d6e956681de2e7204030f005a7ea6951d04407", "patch": "@@ -1,5 +1,9 @@\n Wed Apr 19 12:02:37 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \n+\t* calls.c (precompute_arguments): Remove must_preallocate and\n+\targs_size calls.\n+\t(expand_call): Update call of precompute_arguments.\n+\n \t* loop.c (check_insn_for_bivs, for_every_insn_in_loop,\n \tcheck_insn_for_givs): Break out from ...\n \t(strength_reduce) ... here; use for_every_insn_in_loop to call"}, {"sha": "e61fc8fd08a9e7dbc56e0cf7166fd38a28bff646", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40d6e956681de2e7204030f005a7ea6951d04407/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40d6e956681de2e7204030f005a7ea6951d04407/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=40d6e956681de2e7204030f005a7ea6951d04407", "patch": "@@ -185,9 +185,8 @@ static void store_unaligned_arguments_into_pseudos PARAMS ((struct arg_data *,\n static int finalize_must_preallocate\t\tPARAMS ((int, int,\n \t\t\t\t\t\t\t struct arg_data *,\n \t\t\t\t\t\t\t struct args_size *));\n-static void precompute_arguments \t\tPARAMS ((int, int, int,\n-\t\t\t\t\t\t\t struct arg_data *,\n-\t\t\t\t\t\t\t struct args_size *));\n+static void precompute_arguments \t\tPARAMS ((int, int,\n+\t\t\t\t\t\t\t struct arg_data *));\n static int compute_argument_block_size\t\tPARAMS ((int, \n \t\t\t\t\t\t\t struct args_size *,\n \t\t\t\t\t\t\t int));\n@@ -1417,23 +1416,17 @@ compute_argument_block_size (reg_parm_stack_space, args_size,\n \n    FLAGS is mask of ECF_* constants.\n \n-   MUST_PREALLOCATE indicates that we must preallocate stack space for\n-   any stack arguments.\n-\n    NUM_ACTUALS is the number of arguments.\n \n    ARGS is an array containing information for each argument; this routine\n-   fills in the INITIAL_VALUE and VALUE fields for each precomputed argument.\n-\n-   ARGS_SIZE contains information about the size of the arg list.  */\n+   fills in the INITIAL_VALUE and VALUE fields for each precomputed argument.  \n+   */\n \n static void\n-precompute_arguments (flags, must_preallocate, num_actuals, args, args_size)\n+precompute_arguments (flags, num_actuals, args)\n      int flags;\n-     int must_preallocate;\n      int num_actuals;\n      struct arg_data *args;\n-     struct args_size *args_size;\n {\n   int i;\n \n@@ -1448,15 +1441,13 @@ precompute_arguments (flags, must_preallocate, num_actuals, args, args_size)\n      on the stack, then we must precompute any parameter which contains a\n      function call which will store arguments on the stack.\n      Otherwise, evaluating the parameter may clobber previous parameters\n-     which have already been stored into the stack.  */\n+     which have already been stored into the stack.  (we have code to avoid\n+     such case by saving the ougoing stack arguments, but it results in\n+     worse code)  */\n \n   for (i = 0; i < num_actuals; i++)\n     if ((flags & (ECF_CONST | ECF_PURE))\n-\t|| ((args_size->var != 0 || args_size->constant != 0)\n-\t    && calls_function (args[i].tree_value, 1))\n-\t|| (must_preallocate\n-\t    && (args_size->var != 0 || args_size->constant != 0)\n-\t    && calls_function (args[i].tree_value, 0)))\n+\t|| calls_function (args[i].tree_value, !ACCUMULATE_OUTGOING_ARGS))\n       {\n \t/* If this is an addressable type, we cannot pre-evaluate it.  */\n \tif (TREE_ADDRESSABLE (TREE_TYPE (args[i].tree_value)))\n@@ -2481,8 +2472,7 @@ expand_call (exp, target, ignore)\n \tstructure_value_addr = copy_to_reg (structure_value_addr);\n \n       /* Precompute any arguments as needed.  */\n-      precompute_arguments (flags, must_preallocate, num_actuals,\n-\t\t\t    args, &args_size);\n+      precompute_arguments (flags, num_actuals, args);\n \n       /* Now we are about to start emitting insns that can be deleted\n \t if a libcall is deleted.  */"}]}