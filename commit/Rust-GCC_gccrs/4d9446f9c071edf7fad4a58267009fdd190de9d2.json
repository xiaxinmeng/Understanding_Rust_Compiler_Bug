{"sha": "4d9446f9c071edf7fad4a58267009fdd190de9d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ5NDQ2ZjljMDcxZWRmN2ZhZDRhNTgyNjcwMDlmZGQxOTBkZTlkMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-06T09:18:41Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-06T09:18:41Z"}, "message": "einfo.ads (Returns_Limited_View): Remove.\n\n\t* einfo.ads (Returns_Limited_View): Remove.\n\t(Set_Returns_Limited_View ): Likewise.\n\t* einfo.adb (Returns_Limited_View): Likewise.\n\t(Set_Returns_Limited_View ): Likewise.\n\t* freeze.adb (Late_Freeze_Subprogram): Remove.\n\t(Freeze_Entity): Do not defer the freezing of functions returning an\n\tincomplete type coming from a limited context.\n\nFrom-SVN: r237121", "tree": {"sha": "2d5817f043242485f2d94a0fa3ffd9ef1f30087f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d5817f043242485f2d94a0fa3ffd9ef1f30087f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d9446f9c071edf7fad4a58267009fdd190de9d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9446f9c071edf7fad4a58267009fdd190de9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9446f9c071edf7fad4a58267009fdd190de9d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9446f9c071edf7fad4a58267009fdd190de9d2/comments", "author": null, "committer": null, "parents": [{"sha": "31ce61574321e0da9ca6567b8b85d4b3a16ddc0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ce61574321e0da9ca6567b8b85d4b3a16ddc0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ce61574321e0da9ca6567b8b85d4b3a16ddc0a"}], "stats": {"total": 105, "additions": 12, "deletions": 93}, "files": [{"sha": "8c1b90457d0e9c860809bec2b442a0d4244c598b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4d9446f9c071edf7fad4a58267009fdd190de9d2", "patch": "@@ -1,3 +1,13 @@\n+2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* einfo.ads (Returns_Limited_View): Remove.\n+\t(Set_Returns_Limited_View ): Likewise.\n+\t* einfo.adb (Returns_Limited_View): Likewise.\n+\t(Set_Returns_Limited_View ): Likewise.\n+\t* freeze.adb (Late_Freeze_Subprogram): Remove.\n+\t(Freeze_Entity): Do not defer the freezing of functions returning an\n+\tincomplete type coming from a limited context.\n+\n 2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (finish_subprog_decl): Add ASM_NAME parameter."}, {"sha": "f215564231cf4214b6f3557c71f945b3e8e37d04", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=4d9446f9c071edf7fad4a58267009fdd190de9d2", "patch": "@@ -432,7 +432,6 @@ package body Einfo is\n    --    No_Pool_Assigned                Flag131\n    --    Is_Default_Init_Cond_Procedure  Flag132\n    --    Has_Inherited_Default_Init_Cond Flag133\n-   --    Returns_Limited_View            Flag134\n    --    Has_Aliased_Components          Flag135\n    --    No_Strict_Aliasing              Flag136\n    --    Is_Machine_Code_Subprogram      Flag137\n@@ -3065,12 +3064,6 @@ package body Einfo is\n       return Flag90 (Id);\n    end Returns_By_Ref;\n \n-   function Returns_Limited_View (Id : E) return B is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Function);\n-      return Flag134 (Id);\n-   end Returns_Limited_View;\n-\n    function Reverse_Bit_Order (Id : E) return B is\n    begin\n       pragma Assert (Is_Record_Type (Id));\n@@ -6142,12 +6135,6 @@ package body Einfo is\n       Set_Flag90 (Id, V);\n    end Set_Returns_By_Ref;\n \n-   procedure Set_Returns_Limited_View (Id : E; V : B := True) is\n-   begin\n-      pragma Assert (Ekind (Id) = E_Function);\n-      Set_Flag134 (Id, V);\n-   end Set_Returns_Limited_View;\n-\n    procedure Set_Reverse_Bit_Order (Id : E; V : B := True) is\n    begin\n       pragma Assert\n@@ -9141,7 +9128,6 @@ package body Einfo is\n       W (\"Requires_Overriding\",             Flag213 (Id));\n       W (\"Return_Present\",                  Flag54  (Id));\n       W (\"Returns_By_Ref\",                  Flag90  (Id));\n-      W (\"Returns_Limited_View\",            Flag134 (Id));\n       W (\"Reverse_Bit_Order\",               Flag164 (Id));\n       W (\"Reverse_Storage_Order\",           Flag93  (Id));\n       W (\"Rewritten_For_C\",                 Flag287 (Id));"}, {"sha": "c8b9469de98b139c7e6c10203354a2c288f5d269", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=4d9446f9c071edf7fad4a58267009fdd190de9d2", "patch": "@@ -3973,12 +3973,6 @@ package Einfo is\n --       by reference, either because its return type is a by-reference-type\n --       or because the function explicitly uses the secondary stack.\n \n---    Returns_Limited_View (Flag134)\n---       Defined in function entities. Set if the return type of the function\n---       at the point of definition is a limited view. Used to handle the late\n---       freezing of the function when it is called in the current semantic\n---       unit while it is still unfrozen.\n-\n --    Reverse_Bit_Order (Flag164) [base type only]\n --       Defined in all record type entities. Set if entity has a Bit_Order\n --       aspect (set by an aspect clause or attribute definition clause) that\n@@ -5972,7 +5966,6 @@ package Einfo is\n    --    Requires_Overriding                 (Flag213)  (non-generic case only)\n    --    Return_Present                      (Flag54)\n    --    Returns_By_Ref                      (Flag90)\n-   --    Returns_Limited_View                (Flag134)  (non-generic case only)\n    --    Rewritten_For_C                     (Flag287)  (generate C code only)\n    --    Sec_Stack_Needed_For_Return         (Flag167)\n    --    SPARK_Pragma_Inherited              (Flag265)\n@@ -7174,7 +7167,6 @@ package Einfo is\n    function Return_Applies_To                   (Id : E) return N;\n    function Return_Present                      (Id : E) return B;\n    function Returns_By_Ref                      (Id : E) return B;\n-   function Returns_Limited_View                (Id : E) return B;\n    function Reverse_Bit_Order                   (Id : E) return B;\n    function Reverse_Storage_Order               (Id : E) return B;\n    function Rewritten_For_C                     (Id : E) return B;\n@@ -7848,7 +7840,6 @@ package Einfo is\n    procedure Set_Return_Applies_To               (Id : E; V : N);\n    procedure Set_Return_Present                  (Id : E; V : B := True);\n    procedure Set_Returns_By_Ref                  (Id : E; V : B := True);\n-   procedure Set_Returns_Limited_View            (Id : E; V : B := True);\n    procedure Set_Reverse_Bit_Order               (Id : E; V : B := True);\n    procedure Set_Reverse_Storage_Order           (Id : E; V : B := True);\n    procedure Set_Rewritten_For_C                 (Id : E; V : B := True);\n@@ -8678,7 +8669,6 @@ package Einfo is\n    pragma Inline (Return_Applies_To);\n    pragma Inline (Return_Present);\n    pragma Inline (Returns_By_Ref);\n-   pragma Inline (Returns_Limited_View);\n    pragma Inline (Reverse_Bit_Order);\n    pragma Inline (Reverse_Storage_Order);\n    pragma Inline (Rewritten_For_C);\n@@ -9143,7 +9133,6 @@ package Einfo is\n    pragma Inline (Set_Return_Applies_To);\n    pragma Inline (Set_Return_Present);\n    pragma Inline (Set_Returns_By_Ref);\n-   pragma Inline (Set_Returns_Limited_View);\n    pragma Inline (Set_Reverse_Bit_Order);\n    pragma Inline (Set_Reverse_Storage_Order);\n    pragma Inline (Set_Rewritten_For_C);"}, {"sha": "66396c562beea2723c40e0fe53974bad9eb649a0", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9446f9c071edf7fad4a58267009fdd190de9d2/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=4d9446f9c071edf7fad4a58267009fdd190de9d2", "patch": "@@ -1934,9 +1934,6 @@ package body Freeze is\n       Has_Default_Initialization : Boolean := False;\n       --  This flag gets set to true for a variable with default initialization\n \n-      Late_Freezing : Boolean := False;\n-      --  Used to detect attempt to freeze function declared in another unit\n-\n       Result : List_Id := No_List;\n       --  List of freezing actions, left at No_List if none\n \n@@ -1973,9 +1970,8 @@ package body Freeze is\n \n       function Freeze_Profile (E : Entity_Id) return Boolean;\n       --  Freeze formals and return type of subprogram. If some type in the\n-      --  profile is a limited view, freezing of the entity will take place\n-      --  elsewhere, and the function returns False. This routine will be\n-      --  modified if and when we can implement AI05-019 efficiently ???\n+      --  profile is incomplete and we are in an instance, freezing of the\n+      --  entity will take place elsewhere, and the function returns False.\n \n       procedure Freeze_Record_Type (Rec : Entity_Id);\n       --  Freeze record type, including freezing component types, and freezing\n@@ -1985,16 +1981,6 @@ package body Freeze is\n       --  Determine whether an arbitrary entity is subject to Boolean aspect\n       --  Import and its value is specified as True.\n \n-      procedure Late_Freeze_Subprogram (E : Entity_Id);\n-      --  Following AI05-151, a function can return a limited view of a type\n-      --  declared elsewhere. In that case the function cannot be frozen at\n-      --  the end of its enclosing package. If its first use is in a different\n-      --  unit, it cannot be frozen there, but if the call is legal the full\n-      --  view of the return type is available and the subprogram can now be\n-      --  frozen. However the freeze node cannot be inserted at the point of\n-      --  call, but rather must go in the package holding the function, so that\n-      --  the backend can process it in the proper context.\n-\n       function New_Freeze_Node return Node_Id;\n       --  Create a new freeze node for entity E\n \n@@ -3300,15 +3286,6 @@ package body Freeze is\n \n          if Ekind (E) = E_Function then\n \n-            --  Check whether function is declared elsewhere. Previous code\n-            --  used Get_Source_Unit on both arguments, but the values are\n-            --  equal in the case of a parent and a child unit.\n-            --  Confusion with subunits in code  ????\n-\n-            Late_Freezing :=\n-              not In_Same_Extended_Unit (E, N)\n-                and then Returns_Limited_View (E);\n-\n             --  Freeze return type\n \n             R_Type := Etype (E);\n@@ -3326,24 +3303,6 @@ package body Freeze is\n             then\n                R_Type := Full_View (R_Type);\n                Set_Etype (E, R_Type);\n-\n-            --  If the return type is a limited view and the non-limited\n-            --  view is still incomplete, the function has to be frozen at a\n-            --  later time. If the function is abstract there is no place at\n-            --  which the full view will become available, and no code to be\n-            --  generated for it, so mark type as frozen.\n-\n-            elsif Ekind (R_Type) = E_Incomplete_Type\n-              and then From_Limited_With (R_Type)\n-              and then Ekind (Non_Limited_View (R_Type)) = E_Incomplete_Type\n-            then\n-               if Is_Abstract_Subprogram (E) then\n-                  null;\n-               else\n-                  Set_Is_Frozen (E, False);\n-                  Set_Returns_Limited_View (E);\n-                  return False;\n-               end if;\n             end if;\n \n             Freeze_And_Append (R_Type, N, Result);\n@@ -4613,25 +4572,6 @@ package body Freeze is\n          return False;\n       end Has_Boolean_Aspect_Import;\n \n-      ----------------------------\n-      -- Late_Freeze_Subprogram --\n-      ----------------------------\n-\n-      procedure Late_Freeze_Subprogram (E : Entity_Id) is\n-         Spec  : constant Node_Id :=\n-                   Specification (Unit_Declaration_Node (Scope (E)));\n-         Decls : List_Id;\n-\n-      begin\n-         if Present (Private_Declarations (Spec)) then\n-            Decls := Private_Declarations (Spec);\n-         else\n-            Decls := Visible_Declarations (Spec);\n-         end if;\n-\n-         Append_List (Result, Decls);\n-      end Late_Freeze_Subprogram;\n-\n       ---------------------\n       -- New_Freeze_Node --\n       ---------------------\n@@ -5111,12 +5051,6 @@ package body Freeze is\n                Freeze_Subprogram (E);\n             end if;\n \n-            if Late_Freezing then\n-               Late_Freeze_Subprogram (E);\n-               Ghost_Mode := Save_Ghost_Mode;\n-               return No_List;\n-            end if;\n-\n             --  If warning on suspicious contracts then check for the case of\n             --  a postcondition other than False for a No_Return subprogram.\n "}]}