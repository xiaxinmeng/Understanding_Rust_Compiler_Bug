{"sha": "4220128209dba821e1b76d842028d55f0985a659", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIyMDEyODIwOWRiYTgyMWUxYjc2ZDg0MjAyOGQ1NWYwOTg1YTY1OQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-01-08T07:47:06Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2006-01-08T07:47:06Z"}, "message": "sh.h (CONST_OK_FOR_K16): Define.\n\n\t* config/sh/sh.h (CONST_OK_FOR_K16): Define.\n\t(CONST_OK_FOR_K): Add CONST_OK_FOR_K16 case.\n\t(EXTRA_CONSTRAINT_C16): Remove.\n\t(EXTRA_CONSTRAINT_Css, EXTRA_CONSTRAINT_Csu): Define.\n\t(EXTRA_CONSTRAINT_C): Remove EXTRA_CONSTRAINT_C16 case and add\n\tEXTRA_CONSTRAINT_Css and EXTRA_CONSTRAINT_Csu cases.\n\t* config/sh/sh.c (print_operand): Handle unsigned 16-bit symbolic\n\tconstants of SHmedia.  Handle nested constant expressions of\n\tSHmedia correctly.\n\t(andcosts): Fix the costs for SHmedia constants.\n\t(sh_rtx_costs): Take account of outer_code for SHmedia constants.\n\t* config/sh/sh.md (*movsi_media): Use Css constraint instead of C16.\n\t(*movsi_media_nofpu, *movqi_media, *movhi_media): Likewise.\n\t(*movdi_media, *movdi_media_nofpu, movv8qi_i, movv2hi_i): Likewise.\n\t(movv4hi_i, movv2si_i):\tLikewise.\n\t(movsi_const): Adjust the second operand of ior so to match with\n\tthe Csu constraint.\n\t(movdi_const, movdi_const_32bit): Likewise.\n\t(movdi_const_16bit+1): Don't sign-extend LOW.\n\t(movdi_const_16bit+2): Likewise.  Remove the zero_extend and truncate\n\tstep.\n\t(*double_shori): Fix the split condition.  Use GEN_INT instead\n\tof get_int_mode calls.  Mask lower 16-bit of the argument of\n\tthe last GEN_INT.\n\t(sym2GOTPLT): Remove.\n\t(symGOTPLT2reg): Replace gen_sym2GOTPLT with gen_rtx_CONST and\n\tgen_rtx_UNSPEC.\n\t* config/sh/predicates.md (arith_operand): Use EXTRA_CONSTRAINT_Css\n\tinstead of EXTRA_CONSTRAINT_C16.\n\n\nCo-Authored-By: Kaz Kojima <kkojima@gcc.gnu.org>\n\nFrom-SVN: r109471", "tree": {"sha": "38e48dd4a288540558b992918ad89c249df1e7ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e48dd4a288540558b992918ad89c249df1e7ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4220128209dba821e1b76d842028d55f0985a659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4220128209dba821e1b76d842028d55f0985a659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4220128209dba821e1b76d842028d55f0985a659", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4220128209dba821e1b76d842028d55f0985a659/comments", "author": null, "committer": null, "parents": [{"sha": "8b47b2d6b20b52587cda2bf947173ad130bcfd16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b47b2d6b20b52587cda2bf947173ad130bcfd16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b47b2d6b20b52587cda2bf947173ad130bcfd16"}], "stats": {"total": 231, "additions": 133, "deletions": 98}, "files": [{"sha": "bfe381cea104e97e0c7704f5cbcdc44d9f0cb9d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4220128209dba821e1b76d842028d55f0985a659/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4220128209dba821e1b76d842028d55f0985a659/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4220128209dba821e1b76d842028d55f0985a659", "patch": "@@ -1,3 +1,36 @@\n+2006-01-08  J\"orn Rennecke  <joern.rennecke@st.com>\n+\t    Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (CONST_OK_FOR_K16): Define.\n+\t(CONST_OK_FOR_K): Add CONST_OK_FOR_K16 case.\n+\t(EXTRA_CONSTRAINT_C16): Remove.\n+\t(EXTRA_CONSTRAINT_Css, EXTRA_CONSTRAINT_Csu): Define.\n+\t(EXTRA_CONSTRAINT_C): Remove EXTRA_CONSTRAINT_C16 case and add\n+\tEXTRA_CONSTRAINT_Css and EXTRA_CONSTRAINT_Csu cases.\n+\t* config/sh/sh.c (print_operand): Handle unsigned 16-bit symbolic\n+\tconstants of SHmedia.  Handle nested constant expressions of\n+\tSHmedia correctly.\n+\t(andcosts): Fix the costs for SHmedia constants.\n+\t(sh_rtx_costs): Take account of outer_code for SHmedia constants.\n+\t* config/sh/sh.md (*movsi_media): Use Css constraint instead of C16.\n+\t(*movsi_media_nofpu, *movqi_media, *movhi_media): Likewise.\n+\t(*movdi_media, *movdi_media_nofpu, movv8qi_i, movv2hi_i): Likewise.\n+\t(movv4hi_i, movv2si_i):\tLikewise.\n+\t(movsi_const): Adjust the second operand of ior so to match with\n+\tthe Csu constraint.\n+\t(movdi_const, movdi_const_32bit): Likewise.\n+\t(movdi_const_16bit+1): Don't sign-extend LOW.\n+\t(movdi_const_16bit+2): Likewise.  Remove the zero_extend and truncate\n+\tstep.\n+\t(*double_shori): Fix the split condition.  Use GEN_INT instead\n+\tof get_int_mode calls.  Mask lower 16-bit of the argument of\n+\tthe last GEN_INT.\n+\t(sym2GOTPLT): Remove.\n+\t(symGOTPLT2reg): Replace gen_sym2GOTPLT with gen_rtx_CONST and\n+\tgen_rtx_UNSPEC.\n+\t* config/sh/predicates.md (arith_operand): Use EXTRA_CONSTRAINT_Css\n+\tinstead of EXTRA_CONSTRAINT_C16.\n+\n 2005-01-07  Ian Lance Taylor  <ian@airs.com>\n \t    David Edelsohn  <edelsohn@gnu.org>\n "}, {"sha": "2934d44565149b1ae18525e9d8fc65b6d2978e02", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=4220128209dba821e1b76d842028d55f0985a659", "patch": "@@ -1,5 +1,5 @@\n ;; Predicate definitions for Renesas / SuperH SH.\n-;; Copyright (C) 2005 Free Software Foundation, Inc.\n+;; Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n ;;\n ;; This file is part of GCC.\n ;;\n@@ -111,7 +111,7 @@\n \t same register from literal constants into a set and an add,\n \t when the difference is too wide for an add.  */\n       if (GET_CODE (op) == CONST_INT\n-\t  || EXTRA_CONSTRAINT_C16 (op))\n+\t  || EXTRA_CONSTRAINT_Css (op))\n \treturn 1;\n       else if (GET_CODE (op) == TRUNCATE\n \t       && ! system_reg_operand (XEXP (op, 0), VOIDmode)"}, {"sha": "a9cafec612fd3455a177c8af29bd7441d093c269", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4220128209dba821e1b76d842028d55f0985a659", "patch": "@@ -1,6 +1,6 @@\n /* Output routines for GCC for Renesas / SuperH SH.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com).\n \n@@ -976,35 +976,38 @@ print_operand (FILE *stream, rtx x, int code)\n \n \tcase CONST:\n \t  if (TARGET_SHMEDIA\n-\t      && GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n+\t      && (GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n+\t\t  || GET_CODE (XEXP (x, 0)) == ZERO_EXTEND)\n \t      && (GET_MODE (XEXP (x, 0)) == DImode\n \t\t  || GET_MODE (XEXP (x, 0)) == SImode)\n \t      && GET_CODE (XEXP (XEXP (x, 0), 0)) == TRUNCATE\n \t      && GET_MODE (XEXP (XEXP (x, 0), 0)) == HImode)\n \t    {\n \t      rtx val = XEXP (XEXP (XEXP (x, 0), 0), 0);\n+\t      rtx val2 = val;\n+\t      bool nested_expr = false;\n \n \t      fputc ('(', stream);\n \t      if (GET_CODE (val) == ASHIFTRT)\n \t\t{\n \t\t  fputc ('(', stream);\n-\t\t  if (GET_CODE (XEXP (val, 0)) == CONST)\n-\t\t    fputc ('(', stream);\n-\t\t  output_addr_const (stream, XEXP (val, 0));\n-\t\t  if (GET_CODE (XEXP (val, 0)) == CONST)\n-\t\t    fputc (')', stream);\n+\t\t  val2 = XEXP (val, 0);\n+\t\t}\n+\t      if (GET_CODE (val2) == CONST\n+\t\t  || GET_RTX_CLASS (GET_CODE (val2)) != RTX_OBJ)\n+\t\t{\n+\t\t  fputc ('(', stream);\n+\t\t  nested_expr = true;\n+\t\t}\n+\t      output_addr_const (stream, val2);\n+\t      if (nested_expr)\n+\t\tfputc (')', stream);\n+\t      if (GET_CODE (val) == ASHIFTRT)\n+\t\t{\n \t\t  fputs (\" >> \", stream);\n \t\t  output_addr_const (stream, XEXP (val, 1));\n \t\t  fputc (')', stream);\n \t\t}\n-\t      else\n-\t\t{\n-\t\t  if (GET_CODE (val) == CONST)\n-\t\t    fputc ('(', stream);\n-\t\t  output_addr_const (stream, val);\n-\t\t  if (GET_CODE (val) == CONST)\n-\t\t    fputc (')', stream);\n-\t\t}\n \t      fputs (\" & 65535)\", stream);\n \t      break;\n \t    }\n@@ -1971,12 +1974,12 @@ andcosts (rtx x)\n \n   if (TARGET_SHMEDIA)\n     {\n-      if ((GET_CODE (XEXP (x, 1)) == CONST_INT\n-\t   && CONST_OK_FOR_I16 (INTVAL (XEXP (x, 1))))\n-\t  || EXTRA_CONSTRAINT_C16 (XEXP (x, 1)))\n+      if (GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t  && (CONST_OK_FOR_I10 (INTVAL (XEXP (x, 1)))\n+\t      || CONST_OK_FOR_J16 (INTVAL (XEXP (x, 1)))))\n \treturn 1;\n       else\n-\treturn 2;\n+\treturn 1 + rtx_cost (XEXP (x, 1), AND);\n     }\n \n   /* These constants are single cycle extu.[bw] instructions.  */\n@@ -2096,9 +2099,9 @@ sh_rtx_costs (rtx x, int code, int outer_code, int *total)\n \t  else if (CONST_OK_FOR_I16 (INTVAL (x) >> 16))\n \t    *total = COSTS_N_INSNS ((outer_code != SET) + 1);\n \t  else if (CONST_OK_FOR_I16 ((INTVAL (x) >> 16) >> 16))\n-\t    *total = COSTS_N_INSNS (3);\n+\t    *total = COSTS_N_INSNS ((outer_code != SET) + 2);\n           else\n-\t    *total = COSTS_N_INSNS (4);\n+\t    *total = COSTS_N_INSNS ((outer_code != SET) + 3);\n \t  return true;\n         }\n       if (CONST_OK_FOR_I08 (INTVAL (x)))"}, {"sha": "df2ebc0aa41c43553217340676e978674d64c30d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=4220128209dba821e1b76d842028d55f0985a659", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler for Renesas / SuperH SH.\n    Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-   2003, 2004, 2005 Free Software Foundation, Inc.\n+   2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Steve Chamberlain (sac@cygnus.com).\n    Improved by Jim Wilson (wilson@cygnus.com).\n \n@@ -1493,7 +1493,8 @@ extern enum reg_class reg_class_from_letter[];\n     Bsc: SCRATCH - for the scratch register in movsi_ie in the\n \t fldi0 / fldi0 cases\n    C: Constants other than only CONST_INT (constraint len == 3)\n-    C16: 16 bit constant, literal or symbolic\n+    Css: signed 16 bit constant, literal or symbolic\n+    Csu: unsigned 16 bit constant, literal or symbolic\n     Csy: label or symbol\n     Cpg: non-explicit constants that can be directly loaded into a general\n \t purpose register in PIC code.  like 's' except we don't allow\n@@ -1527,7 +1528,8 @@ extern enum reg_class reg_class_from_letter[];\n    C is the letter, and VALUE is a constant value.\n    Return 1 if VALUE is in the range specified by C.\n \tI08: arithmetic operand -127..128, as used in add, sub, etc\n-\tI16: arithmetic operand -32768..32767, as used in SHmedia movi and shori\n+\tI16: arithmetic operand -32768..32767, as used in SHmedia movi\n+\tK16: arithmetic operand 0..65535, as used in SHmedia shori\n \tP27: shift operand 1,2,8 or 16\n \tK08: logical operand 0..255, as used in and, or, etc.\n \tM: constant 1\n@@ -1564,8 +1566,11 @@ extern enum reg_class reg_class_from_letter[];\n \n #define CONST_OK_FOR_K08(VALUE) (((HOST_WIDE_INT)(VALUE))>= 0 \\\n \t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 255)\n+#define CONST_OK_FOR_K16(VALUE) (((HOST_WIDE_INT)(VALUE))>= 0 \\\n+\t\t\t\t && ((HOST_WIDE_INT)(VALUE)) <= 65535)\n #define CONST_OK_FOR_K(VALUE, STR) \\\n   ((STR)[1] == '0' && (STR)[2] == '8' ? CONST_OK_FOR_K08 (VALUE) \\\n+   : (STR)[1] == '1' && (STR)[2] == '6' ? CONST_OK_FOR_K16 (VALUE)\t\\\n    : 0)\n #define CONST_OK_FOR_P27(VALUE) \\\n   ((VALUE)==1||(VALUE)==2||(VALUE)==8||(VALUE)==16)\n@@ -2312,8 +2317,8 @@ struct sh_args {\n   ((STR)[1] == 's' && (STR)[2] == 'c' ? EXTRA_CONSTRAINT_Bsc (OP) \\\n    : 0)\n \n-/* The `C16' constraint is a 16-bit constant, literal or symbolic.  */\n-#define EXTRA_CONSTRAINT_C16(OP) \\\n+/* The `Css' constraint is a signed 16-bit constant, literal or symbolic.  */\n+#define EXTRA_CONSTRAINT_Css(OP) \\\n   (GET_CODE (OP) == CONST \\\n    && GET_CODE (XEXP ((OP), 0)) == SIGN_EXTEND \\\n    && (GET_MODE (XEXP ((OP), 0)) == DImode \\\n@@ -2327,6 +2332,21 @@ struct sh_args {\n \t   && GET_CODE (XEXP (XEXP (XEXP (XEXP ((OP), 0), 0), 0), \\\n \t\t\t      1)) == CONST_INT)))\n \n+/* The `Csu' constraint is an unsigned 16-bit constant, literal or symbolic.  */\n+#define EXTRA_CONSTRAINT_Csu(OP) \\\n+  (GET_CODE (OP) == CONST \\\n+   && GET_CODE (XEXP ((OP), 0)) == ZERO_EXTEND \\\n+   && (GET_MODE (XEXP ((OP), 0)) == DImode \\\n+       || GET_MODE (XEXP ((OP), 0)) == SImode) \\\n+   && GET_CODE (XEXP (XEXP ((OP), 0), 0)) == TRUNCATE \\\n+   && GET_MODE (XEXP (XEXP ((OP), 0), 0)) == HImode \\\n+   && (MOVI_SHORI_BASE_OPERAND_P (XEXP (XEXP (XEXP ((OP), 0), 0), 0)) \\\n+       || (GET_CODE (XEXP (XEXP (XEXP ((OP), 0), 0), 0)) == ASHIFTRT \\\n+\t   && (MOVI_SHORI_BASE_OPERAND_P \\\n+\t       (XEXP (XEXP (XEXP (XEXP ((OP), 0), 0), 0), 0))) \\\n+\t   && GET_CODE (XEXP (XEXP (XEXP (XEXP ((OP), 0), 0), 0), \\\n+\t\t\t      1)) == CONST_INT)))\n+\n /* Check whether OP is a datalabel unspec.  */\n #define DATALABEL_REF_NO_CONST_P(OP) \\\n   (GET_CODE (OP) == UNSPEC \\\n@@ -2413,7 +2433,8 @@ struct sh_args {\n         && (! PIC_ADDR_P (OP) || PIC_OFFSET_P (OP)) \\\n         && GET_CODE (OP) != LABEL_REF)))\n #define EXTRA_CONSTRAINT_C(OP, STR) \\\n-  ((STR)[1] == '1' && (STR)[2] == '6' ? EXTRA_CONSTRAINT_C16 (OP) \\\n+  ((STR)[1] == 's' && (STR)[2] == 's' ? EXTRA_CONSTRAINT_Css (OP) \\\n+   : (STR)[1] == 's' && (STR)[2] == 'u' ? EXTRA_CONSTRAINT_Csu (OP) \\\n    : (STR)[1] == 's' && (STR)[2] == 'y' ? EXTRA_CONSTRAINT_Csy (OP) \\\n    : (STR)[1] == 'p' && (STR)[2] == 'g' ? EXTRA_CONSTRAINT_Cpg (OP) \\\n    : 0)"}, {"sha": "38cd3bd6c6e3f37514835b576454481b12c9057b", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 47, "deletions": 69, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4220128209dba821e1b76d842028d55f0985a659/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=4220128209dba821e1b76d842028d55f0985a659", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for Renesas / SuperH SH.\n ;;  Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-;;  2003, 2004, 2005 Free Software Foundation, Inc.\n+;;  2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n ;;  Contributed by Steve Chamberlain (sac@cygnus.com).\n ;;  Improved by Jim Wilson (wilson@cygnus.com).\n \n@@ -4844,7 +4844,7 @@ label:\n   [(set (match_operand:SI 0 \"general_movdst_operand\"\n \t        \"=r,r,r,r,m,f?,m,f?,r,f?,*b,r,b\")\n \t(match_operand:SI 1 \"general_movsrc_operand\"\n-\t \"r,I16C16,nCpg,m,rZ,m,f?,rZ,f?,f?,r,*b,Csy\"))]\n+\t \"r,I16Css,nCpg,m,rZ,m,f?,rZ,f?,f?,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], SImode)\n        || sh_register_operand (operands[1], SImode)\n@@ -4874,7 +4874,7 @@ label:\n   [(set (match_operand:SI 0 \"general_movdst_operand\"\n \t        \"=r,r,r,r,m,*b,r,*b\")\n \t(match_operand:SI 1 \"general_movsrc_operand\"\n-\t \"r,I16C16,nCpg,m,rZ,r,*b,Csy\"))]\n+\t \"r,I16Css,nCpg,m,rZ,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], SImode)\n        || sh_register_operand (operands[1], SImode)\n@@ -4904,11 +4904,9 @@ label:\n \t\t     (const_int 16))))))\n    (set (match_dup 0)\n \t(ior:SI (ashift:SI (match_dup 0) (const_int 16))\n-\t\t(zero_extend:SI\n-\t\t (truncate:HI\n-\t\t  (const:SI\n-\t\t   (sign_extend:SI\n- \t\t    (truncate:HI (match_dup 1))))))))]\n+\t\t(const:SI\n+\t\t  (zero_extend:SI\n+ \t\t   (truncate:HI (match_dup 1))))))]\n   \"TARGET_SHMEDIA && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   \"\n@@ -5092,7 +5090,7 @@ label:\n \n (define_insn \"*movqi_media\"\n   [(set (match_operand:QI 0 \"general_movdst_operand\" \"=r,r,r,m\")\n-\t(match_operand:QI 1 \"general_movsrc_operand\" \"r,I16C16,m,rZ\"))]\n+\t(match_operand:QI 1 \"general_movsrc_operand\" \"r,I16Css,m,rZ\"))]\n   \"TARGET_SHMEDIA\n    && (arith_reg_operand (operands[0], QImode)\n        || extend_reg_or_0_operand (operands[1], QImode))\"\n@@ -5153,7 +5151,7 @@ label:\n \n (define_insn \"*movhi_media\"\n   [(set (match_operand:HI 0 \"general_movdst_operand\"     \"=r,r,r,r,m\")\n-\t(match_operand:HI 1 \"general_movsrc_operand\" \"r,I16C16,n,m,rZ\"))]\n+\t(match_operand:HI 1 \"general_movsrc_operand\" \"r,I16Css,n,m,rZ\"))]\n   \"TARGET_SHMEDIA\n    && (arith_reg_operand (operands[0], HImode)\n        || arith_reg_or_0_operand (operands[1], HImode))\"\n@@ -5272,7 +5270,7 @@ label:\n   [(set (match_operand:DI 0 \"general_movdst_operand\"\n \t         \"=r,r,r,rl,m,f?,m,f?,r,f?,*b,r,*b\")\n \t(match_operand:DI 1 \"general_movsrc_operand\"\n-\t \"r,I16C16,nCpgF,m,rlZ,m,f?,rZ,f?,f?,r,*b,Csy\"))]\n+\t \"r,I16Css,nCpgF,m,rlZ,m,f?,rZ,f?,f?,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA_FPU\n    && (register_operand (operands[0], DImode)\n        || sh_register_operand (operands[1], DImode))\"\n@@ -5295,7 +5293,7 @@ label:\n \n (define_insn \"*movdi_media_nofpu\"\n   [(set (match_operand:DI 0 \"general_movdst_operand\" \"=r,r,r,rl,m,*b,r,*b\");\n-\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,I16C16,nCpgF,m,rlZ,r,*b,Csy\"))]\n+\t(match_operand:DI 1 \"general_movsrc_operand\" \"r,I16Css,nCpgF,m,rlZ,r,*b,Csy\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], DImode)\n        || sh_register_operand (operands[1], DImode))\"\n@@ -5349,32 +5347,26 @@ label:\n \t\t     (const_int 48))))))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(zero_extend:DI\n-\t\t (truncate:HI\n-\t\t  (const:DI\n-\t\t   (sign_extend:DI\n-\t\t    (truncate:HI\n-\t\t     (ashiftrt:SI\n-\t\t      (match_dup 1)\n-\t\t      (const_int 32)))))))))\n+\t\t(const:DI\n+\t\t (zero_extend:DI\n+\t\t  (truncate:HI\n+\t\t   (ashiftrt:SI\n+\t\t    (match_dup 1)\n+\t\t    (const_int 32)))))))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(zero_extend:DI\n-\t\t (truncate:HI\n-\t\t  (const:DI\n-\t\t   (sign_extend:DI\n-\t\t    (truncate:HI\n-\t\t     (ashiftrt:SI\n-\t\t      (match_dup 1)\n-\t\t      (const_int 16)))))))))\n+\t\t(const:DI\n+\t\t (zero_extend:DI\n+\t\t  (truncate:HI\n+\t\t   (ashiftrt:SI\n+\t\t    (match_dup 1)\n+\t\t    (const_int 16)))))))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(zero_extend:DI\n-\t\t (truncate:HI\n-\t\t  (const:DI\n-\t\t   (sign_extend:DI\n-\t\t    (truncate:HI\n-\t\t     (match_dup 1))))))))]\n+\t\t(const:DI\n+\t\t (zero_extend:DI\n+\t\t  (truncate:HI\n+\t\t   (match_dup 1))))))]\n   \"TARGET_SHMEDIA64 && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   \"\n@@ -5391,12 +5383,10 @@ label:\n \t\t     (const_int 16))))))\n    (set (match_dup 0)\n \t(ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t\t(zero_extend:DI\n-\t\t (truncate:HI\n-\t\t  (const:DI\n-\t\t   (sign_extend:DI\n-\t\t    (truncate:HI\n-\t\t     (match_dup 1))))))))]\n+\t\t(const:DI\n+\t\t (zero_extend:DI\n+\t\t  (truncate:HI\n+\t\t   (match_dup 1))))))]\n   \"TARGET_SHMEDIA32 && reload_completed\n    && MOVI_SHORI_BASE_OPERAND_P (operands[1])\"\n   \"\n@@ -5429,10 +5419,8 @@ label:\n   unsigned HOST_WIDE_INT sign;\n   unsigned HOST_WIDE_INT val2 = val ^ (val-1);\n \n-  /* Sign-extend the 16 least-significant bits.  */\n+  /* Zero-extend the 16 least-significant bits.  */\n   low &= 0xffff;\n-  low ^= 0x8000;\n-  low -= 0x8000;\n \n   /* Arithmetic shift right the word by 16 bits.  */\n   high >>= 16;\n@@ -5529,19 +5517,16 @@ label:\n    && GET_CODE (operands[1]) == CONST_DOUBLE\"\n   [(set (match_dup 0) (match_dup 2))\n   (set (match_dup 0)\n-       (ior:DI (ashift:DI (match_dup 0) (const_int 16))\n-\t       (zero_extend:DI (truncate:HI (match_dup 1)))))]\n+       (ior:DI (ashift:DI (match_dup 0) (const_int 16)) (match_dup 1)))]\n   \"\n {\n   unsigned HOST_WIDE_INT low = CONST_DOUBLE_LOW (operands[1]);\n   unsigned HOST_WIDE_INT high = CONST_DOUBLE_HIGH (operands[1]);\n   unsigned HOST_WIDE_INT val = low;\n   unsigned HOST_WIDE_INT sign;\n \n-  /* Sign-extend the 16 least-significant bits.  */\n+  /* Zero-extend the 16 least-significant bits.  */\n   val &= 0xffff;\n-  val ^= 0x8000;\n-  val -= 0x8000;\n   operands[1] = GEN_INT (val);\n \n   /* Arithmetic shift right the double-word by 16 bits.  */\n@@ -5566,9 +5551,7 @@ label:\n   [(set (match_operand:DI 0 \"ext_dest_operand\" \"=r,r\")\n \t(ior:DI (ashift:DI (match_operand:DI 1 \"arith_reg_operand\" \"0,0\")\n \t\t\t   (const_int 16))\n-\t\t(zero_extend:DI\n-\t\t (truncate:HI\n-\t\t  (match_operand:DI 2 \"immediate_operand\" \"I16C16,nF\")))))]\n+\t\t(match_operand:DI 2 \"immediate_operand\" \"K16Csu,nF\")))]\n   \"TARGET_SHMEDIA && (reload_completed || arith_reg_dest (operands[0], DImode))\"\n   \"@\n \tshori\t%u2, %0\n@@ -5579,9 +5562,7 @@ label:\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(ior:SI (ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n \t\t\t   (const_int 16))\n-\t\t(zero_extend:SI\n-\t\t (truncate:HI\n-\t\t  (match_operand:SI 2 \"immediate_operand\" \"I16C16\")))))]\n+\t\t(match_operand:SI 2 \"immediate_operand\" \"K16Csu\")))]\n   \"TARGET_SHMEDIA\"\n   \"shori\t%u2, %0\")\n \n@@ -8315,17 +8296,16 @@ label:\n   DONE;\n }\")\n \n-(define_expand \"sym2GOTPLT\"\n-  [(const (unspec [(match_operand 0 \"\" \"\")] UNSPEC_GOTPLT))]\n-  \"\"\n-  \"\")\n-\n (define_expand \"symGOTPLT2reg\"\n   [(match_operand 0 \"\" \"\") (match_operand 1 \"\" \"\")]\n   \"\"\n   \"\n {\n-  emit_insn (gen_symGOT_load (operands[0], gen_sym2GOTPLT (operands[1])));\n+  rtx pltsym = gen_rtx_CONST (Pmode,\n+\t\t\t      gen_rtx_UNSPEC (Pmode,\n+\t\t\t\t\t      gen_rtvec (1, operands[1]),\n+\t\t\t\t\t      UNSPEC_GOTPLT));\n+  emit_insn (gen_symGOT_load (operands[0], pltsym));\n   DONE;\n }\")\n \n@@ -11260,7 +11240,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv8qi_i\"\n   [(set (match_operand:V8QI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V8QI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n+\t(match_operand:V8QI 1 \"general_movsrc_operand\" \"r,I16CssZ,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V8QImode)\n        || sh_register_operand (operands[1], V8QImode))\"\n@@ -11352,7 +11332,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv2hi_i\"\n   [(set (match_operand:V2HI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V2HI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n+\t(match_operand:V2HI 1 \"general_movsrc_operand\" \"r,I16CssZ,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V2HImode)\n        || sh_register_operand (operands[1], V2HImode))\"\n@@ -11377,7 +11357,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv4hi_i\"\n   [(set (match_operand:V4HI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V4HI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n+\t(match_operand:V4HI 1 \"general_movsrc_operand\" \"r,I16CssZ,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V4HImode)\n        || sh_register_operand (operands[1], V4HImode))\"\n@@ -11399,7 +11379,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n \n (define_insn \"movv2si_i\"\n   [(set (match_operand:V2SI 0 \"general_movdst_operand\" \"=r,r,r,rl,m\")\n-\t(match_operand:V2SI 1 \"general_movsrc_operand\" \"r,I16C16Z,nW,m,rlZ\"))]\n+\t(match_operand:V2SI 1 \"general_movsrc_operand\" \"r,I16CssZ,nW,m,rlZ\"))]\n   \"TARGET_SHMEDIA\n    && (register_operand (operands[0], V2SImode)\n        || sh_register_operand (operands[1], V2SImode))\"\n@@ -12345,18 +12325,16 @@ mov.l\\\\t1f,r0\\\\n\\\\\n                            (const_int 32))\n \t\t(match_operand:DI 2 \"const_int_operand\" \"n\")))]\n   \"TARGET_SHMEDIA\n-   && INTVAL (operands[2]) == trunc_int_for_mode (INTVAL (operands[2]), SImode)\"\n+   && ! (INTVAL (operands[2]) & ~(unsigned HOST_WIDE_INT) 0xffffffffUL)\"\n   \"#\"\n   \"rtx_equal_p (operands[0], operands[1])\"\n   [(const_int 0)]\n   \"\n {\n   HOST_WIDE_INT v = INTVAL (operands[2]);\n \n-  emit_insn (gen_shori_media (operands[0], operands[0],\n-\t     gen_int_mode (INTVAL (operands[2]) >> 16, HImode)));\n-  emit_insn (gen_shori_media (operands[0], operands[0],\n-\t\t\t      gen_int_mode (v, HImode)));\n+  emit_insn (gen_shori_media (operands[0], operands[0], GEN_INT (v >> 16)));\n+  emit_insn (gen_shori_media (operands[0], operands[0], GEN_INT (v & 65535)));\n   DONE;\n }\"\n   [(set_attr \"highpart\" \"ignore\")])"}]}