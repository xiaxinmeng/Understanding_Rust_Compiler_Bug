{"sha": "cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y1NGMyY2RmMjZkYzQ1ZjJkMzljZjBmYTczYTZkZGQ2ZWQ4ZGFmOQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-23T22:07:00Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-03-23T22:07:00Z"}, "message": "(make_extraction): In BITS_BIG_ENDIAN correction of POS, need to treat\nMEM and REG differently.\n\nFrom-SVN: r11603", "tree": {"sha": "59cdc49ba8dd13f814331cabd8a0ebf7526914a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59cdc49ba8dd13f814331cabd8a0ebf7526914a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9/comments", "author": null, "committer": null, "parents": [{"sha": "57b7e1bf863f4e38f9b32ded83c11a337a193283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b7e1bf863f4e38f9b32ded83c11a337a193283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b7e1bf863f4e38f9b32ded83c11a337a193283"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "fdc0060e49c3858eeadbb2e0de4bec1db881da32", "filename": "gcc/combine.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=cf54c2cdf26dc45f2d39cf0fa73a6ddd6ed8daf9", "patch": "@@ -5272,16 +5272,25 @@ make_extraction (mode, inner, pos, pos_rtx, len,\n \n   if (BITS_BIG_ENDIAN)\n     {\n-      /* If position is constant, compute new position.  Otherwise,\n-\t build subtraction.  */\n+      /* POS is passed as if BITS_BIG_ENDIAN == 0, so we need to convert it to\n+\t BITS_BIG_ENDIAN style.  If position is constant, compute new\n+\t position.  Otherwise, build subtraction.\n+\t Note that POS is relative to the mode of the original argument.\n+\t If it's a MEM we need to recompute POS relative to that.\n+\t However, if we're extracting from (or inserting into) a register,\n+\t we want to recompute POS relative to wanted_inner_mode.  */\n+      int width = (GET_CODE (inner) == MEM\n+\t\t   ? GET_MODE_BITSIZE (is_mode)\n+\t\t   : GET_MODE_BITSIZE (wanted_inner_mode));\n+\n       if (pos_rtx == 0)\n-\tpos = GET_MODE_BITSIZE (wanted_inner_mode) - len - pos;\n+\tpos = width - len - pos;\n       else\n \tpos_rtx\n \t  = gen_rtx_combine (MINUS, GET_MODE (pos_rtx),\n-\t\t\t     GEN_INT (GET_MODE_BITSIZE (wanted_inner_mode)\n-\t\t\t\t      - len),\n-\t\t\t     pos_rtx);\n+\t\t\t     GEN_INT (width - len), pos_rtx);\n+      /* POS may be less than 0 now, but we check for that below.\n+\t Note that it can only be less than 0 if GET_CODE (inner) != MEM.  */\n     }\n \n   /* If INNER has a wider mode, make it smaller.  If this is a constant"}]}