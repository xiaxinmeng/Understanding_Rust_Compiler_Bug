{"sha": "ba9fa684053917a07bfa8f4742da0e196e72b9a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5ZmE2ODQwNTM5MTdhMDdiZmE4ZjQ3NDJkYTBlMTk2ZTcyYjlhMg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-12-17T09:39:09Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-12-17T09:39:09Z"}, "message": "Fortran: Delay vtab generation until after parsing [PR92587]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/92587\n\t* match.c (gfc_match_assignment): Move gfc_find_vtab call from here ...\n\t* resolve.c (gfc_resolve_code): ... to here.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/92587\n\t* gfortran.dg/finalize_37.f90: New test.", "tree": {"sha": "c0f9d973ed27ff6aac1ee1d0391abbfff082e0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f9d973ed27ff6aac1ee1d0391abbfff082e0dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba9fa684053917a07bfa8f4742da0e196e72b9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9fa684053917a07bfa8f4742da0e196e72b9a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba9fa684053917a07bfa8f4742da0e196e72b9a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba9fa684053917a07bfa8f4742da0e196e72b9a2/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09deceb534b82ce144af3a345dcb06ab5e49ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c09deceb534b82ce144af3a345dcb06ab5e49ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c09deceb534b82ce144af3a345dcb06ab5e49ba4"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "c13fe96ed33173d6b7c96a18b872f0ce2956954e", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9fa684053917a07bfa8f4742da0e196e72b9a2/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9fa684053917a07bfa8f4742da0e196e72b9a2/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=ba9fa684053917a07bfa8f4742da0e196e72b9a2", "patch": "@@ -1389,9 +1389,6 @@ gfc_match_assignment (void)\n \n   gfc_check_do_variable (lvalue->symtree);\n \n-  if (lvalue->ts.type == BT_CLASS)\n-    gfc_find_vtab (&rvalue->ts);\n-\n   return MATCH_YES;\n }\n "}, {"sha": "1da7ba4d031d1dbea5073e643b17d7820c2a5e31", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9fa684053917a07bfa8f4742da0e196e72b9a2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9fa684053917a07bfa8f4742da0e196e72b9a2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=ba9fa684053917a07bfa8f4742da0e196e72b9a2", "patch": "@@ -11896,6 +11896,9 @@ gfc_resolve_code (gfc_code *code, gfc_namespace *ns)\n \t  if (!t)\n \t    break;\n \n+\t  if (code->expr1->ts.type == BT_CLASS)\n+\t   gfc_find_vtab (&code->expr2->ts);\n+\n \t  /* Remove a GFC_ISYM_CAF_GET inserted for a coindexed variable on\n \t     the LHS.  */\n \t  if (code->expr1->expr_type == EXPR_FUNCTION"}, {"sha": "6d5be0247c9623288957300e25e3b74f465054a3", "filename": "gcc/testsuite/gfortran.dg/finalize_37.f90", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba9fa684053917a07bfa8f4742da0e196e72b9a2/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_37.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba9fa684053917a07bfa8f4742da0e196e72b9a2/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_37.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_37.f90?ref=ba9fa684053917a07bfa8f4742da0e196e72b9a2", "patch": "@@ -0,0 +1,80 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/92587\n+!\n+\n+module m\n+  implicit none (type, external)\n+  type t2\n+  contains\n+    final :: fini\n+  end type\n+  type t3\n+    type(t2) :: a\n+  end type\n+  type, extends(t3) :: t4\n+  end type\n+  class(t4), allocatable :: y\n+  class(t4), allocatable :: z\n+  integer :: fini_cnt = 0\n+contains\n+  subroutine sub\n+    y = z\n+  end\n+  subroutine fini(x)\n+    type(t2) :: x\n+    fini_cnt = fini_cnt + 1\n+  end\n+end\n+\n+module m2\n+  use m\n+  implicit none (type, external)\n+  type, extends(t3) :: t5\n+  end type\n+  type, extends(t3) :: t6\n+  contains\n+    final :: fin2\n+  end type\n+  integer :: fin2_cnt = 0\n+contains\n+  subroutine bar(x, y, z)\n+    class(t4), allocatable, intent(out) :: x\n+    class(t5), allocatable, intent(out) :: y\n+    class(t6), allocatable, intent(out) :: z\n+  end\n+  subroutine fin2 (x)\n+    type(t6) :: x\n+    fin2_cnt = fin2_cnt + 1\n+  end\n+end  \n+\n+  use m\n+  use m2\n+  implicit none (type, external)\n+  class(t4), allocatable :: x2\n+  class(t5), allocatable :: y2\n+  class(t6), allocatable :: z2\n+\n+  if (fini_cnt /= 0 .or. fin2_cnt /= 0) stop 1\n+  call bar (x2, y2, z2)\n+  if (fini_cnt /= 0 .or. fin2_cnt /= 0) stop 2\n+  if (allocated(x2) .or. allocated(y2) .or. allocated(z2)) stop 3\n+\n+  allocate(t4 :: x2)\n+  allocate(t5 :: y2)\n+  allocate(t6 :: z2)\n+  call bar (x2, y2, z2)\n+  if (fini_cnt /= 3 .or. fin2_cnt /= 1) stop 4\n+  if (allocated(x2) .or. allocated(y2) .or. allocated(z2)) stop 5\n+\n+  allocate(t6 :: z2)\n+  call bar (x2, y2, z2)\n+  if (fini_cnt /= 4 .or. fin2_cnt /= 2) stop 6\n+  if (allocated(x2) .or. allocated(y2) .or. allocated(z2)) stop 7\n+end\n+\n+! { dg-final { scan-tree-dump \"__final_m_T2 \\\\\\(struct\" \"original\" } }\n+! { dg-final { scan-tree-dump \"__final_m_T3 \\\\\\(struct\" \"original\" } }\n+! { dg-final { scan-tree-dump \"__final_m2_T6 \\\\\\(struct\" \"original\" } }"}]}