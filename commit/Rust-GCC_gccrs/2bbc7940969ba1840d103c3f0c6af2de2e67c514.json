{"sha": "2bbc7940969ba1840d103c3f0c6af2de2e67c514", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiYzc5NDA5NjliYTE4NDBkMTAzYzNmMGM2YWYyZGUyZTY3YzUxNA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2018-07-17T08:09:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:09:14Z"}, "message": "[Ada] Missing check on illegal equality operation in subprogram\n\nIn Ada2012 it is illegal to declare an equality operation on an untagged\ntype when the operation is primitive and the type is already frozem (see\nRM 4.5.2 (9.8)). previously the test to detect this illegality only examined\ndeclarations within a package. This patch covers the case where type and\noperation are both declared within a subprogram body.\n\n2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch6.adb (Check_Untagged_Equality): Extend check to operations\n\tdeclared in the same scope as the operand type, when that scope is a\n\tprocedure.\n\ngcc/testsuite/\n\n\t* gnat.dg/equal3.adb: New testcase.\n\nFrom-SVN: r262788", "tree": {"sha": "672cf7cfb2bcd6fd572adb9d31a3a521416f8644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/672cf7cfb2bcd6fd572adb9d31a3a521416f8644"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bbc7940969ba1840d103c3f0c6af2de2e67c514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbc7940969ba1840d103c3f0c6af2de2e67c514", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbc7940969ba1840d103c3f0c6af2de2e67c514", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbc7940969ba1840d103c3f0c6af2de2e67c514/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17d65c91925fd92a656eacc230c71d1def1eff42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d65c91925fd92a656eacc230c71d1def1eff42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d65c91925fd92a656eacc230c71d1def1eff42"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "fd02931bf5cacc5e929a2bf7b7fc48303b35aa98", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2bbc7940969ba1840d103c3f0c6af2de2e67c514", "patch": "@@ -1,3 +1,9 @@\n+2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Untagged_Equality): Extend check to operations\n+\tdeclared in the same scope as the operand type, when that scope is a\n+\tprocedure.\n+\n 2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_unst.adb (Unnest_Subprograms): Do nothing if the expander is not"}, {"sha": "2dd9d2f42872903b8bad65e651394311059a72f3", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=2bbc7940969ba1840d103c3f0c6af2de2e67c514", "patch": "@@ -8581,14 +8581,10 @@ package body Sem_Ch6 is\n \n       if Is_Frozen (Typ) then\n \n-         --  If the type is not declared in a package, or if we are in the body\n-         --  of the package or in some other scope, the new operation is not\n-         --  primitive, and therefore legal, though suspicious. Should we\n-         --  generate a warning in this case ???\n+         --  The check applies to a primitive operation, so check that type\n+         --  and equality operation are in the same scope.\n \n-         if Ekind (Scope (Typ)) /= E_Package\n-           or else Scope (Typ) /= Current_Scope\n-         then\n+         if Scope (Typ) /= Current_Scope then\n             return;\n \n          --  If the type is a generic actual (sub)type, the operation is not\n@@ -8631,7 +8627,7 @@ package body Sem_Ch6 is\n                     (\"\\move declaration to package spec (Ada 2012)?y?\", Eq_Op);\n                end if;\n \n-            --  Otherwise try to find the freezing point\n+            --  Otherwise try to find the freezing point for better message.\n \n             else\n                Obj_Decl := Next (Parent (Typ));\n@@ -8659,6 +8655,13 @@ package body Sem_Ch6 is\n                      end if;\n \n                      exit;\n+\n+                  --  If we reach generated code for subprogram declaration\n+                  --  or body, it is the body that froze the type and the\n+                  --  declaration is legal.\n+\n+                  elsif Sloc (Obj_Decl) = Sloc (Decl) then\n+                     return;\n                   end if;\n \n                   Next (Obj_Decl);"}, {"sha": "2c2f1e3684b64190e414349e705696b05c8d0619", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2bbc7940969ba1840d103c3f0c6af2de2e67c514", "patch": "@@ -1,3 +1,7 @@\n+2018-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/equal3.adb: New testcase.\n+\n 2018-07-17  Justin Squirek  <squirek@adacore.com>\n \n \t* gnat.dg/split_args.adb: New testcase."}, {"sha": "2e4bba6472f1219bc0c138799f2bba49d083d049", "filename": "gcc/testsuite/gnat.dg/equal3.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Ftestsuite%2Fgnat.dg%2Fequal3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbc7940969ba1840d103c3f0c6af2de2e67c514/gcc%2Ftestsuite%2Fgnat.dg%2Fequal3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fequal3.adb?ref=2bbc7940969ba1840d103c3f0c6af2de2e67c514", "patch": "@@ -0,0 +1,22 @@\n+--  { dg-do compile }\n+\n+procedure Equal3 is\n+    type R is record\n+       A, B : Integer;\n+    end record;\n+\n+    package Pack is\n+       type RR is record\n+          C : R;\n+       end record;\n+\n+       X : RR := (C => (A => 1, B => 1));\n+       Y : RR := (C => (A => 1, B => 2));\n+       pragma Assert (X /= Y); --@ASSERT:PASS\n+\n+    end Pack;\n+    use Pack;\n+    function \"=\" (X, Y : R) return Boolean is (X.A = Y.A); --  { dg-error \"equality operator must be declared before type \\\"R\\\" is frozen \\\\(RM 4.5.2 \\\\(9.8\\\\)\\\\) \\\\(Ada 2012\\\\)\" }\n+begin\n+    pragma Assert (X /= Y); --@ASSERT:FAIL\n+end Equal3;"}]}