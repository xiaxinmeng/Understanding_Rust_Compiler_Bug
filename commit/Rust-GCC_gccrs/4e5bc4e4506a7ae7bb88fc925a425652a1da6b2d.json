{"sha": "4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d", "node_id": "C_kwDOANBUbNoAKDRlNWJjNGU0NTA2YTdhZTdiYjg4ZmM5MjVhNDI1NjUyYTFkYTZiMmQ", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-07T08:17:13Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-11T06:14:08Z"}, "message": "[PR/target 100316] Allow constant address for __builtin___clear_cache.\n\n__builtin___clear_cache was able to accept constant address for the\nargument, but it seems no longer accept recently, and it even not\naccept constant address which is hold in variable when optimization is\nenable:\n\n```\nvoid foo3(){\n  void *yy = (void*)0x1000;\n  __builtin___clear_cache(yy, yy);\n}\n```\n\nSo this patch make BEGIN and END accept VOIDmode, like cselib_lookup_mem did per\nJim Wilson's suggestion.\n\n```\nstatic cselib_val *\ncselib_lookup_mem (rtx x, int create)\n{\n  ...\n  addr_mode = GET_MODE (XEXP (x, 0));\n  if (addr_mode == VOIDmode)\n    addr_mode = Pmode;\n```\n\nChanges v2 -> v3:\n- Use gcc_assert rather than error, maybe_emit_call_builtin___clear_cache is\ninternal use only, and we already checked the type in other place.\n\nChanges v1 -> v2:\n- Check is CONST_INT intead of cehck mode, no new testcase, since\n  constant value with other type like CONST_DOUBLE will catched by\n  front-end.\ne.g.\nCode:\n```c\nvoid foo(){\n  __builtin___clear_cache(1.11, 0);\n}\n```\nError message:\n```\nclearcache-double.c: In function 'foo':\nclearcache-double.c:2:27: error: incompatible type for argument 1 of '__builtin___clear_cache'\n    2 |   __builtin___clear_cache(1.11, 0);\n      |                           ^~~~\n      |                           |\n      |                           double\nclearcache-double.c:2:27: note: expected 'void *' but argument is of type 'double'\n```\n\ngcc/ChangeLog:\n\n\tPR target/100316\n\t* builtins.c (maybe_emit_call_builtin___clear_cache): Allow\n\tCONST_INT for BEGIN and END, and use gcc_assert rather than\n\terror.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100316\n\t* gcc.c-torture/compile/pr100316.c: New.", "tree": {"sha": "2ae6d751a4b8f3b36611fcf41f899f7406cd29d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ae6d751a4b8f3b36611fcf41f899f7406cd29d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d97315a4e1acb992580e84065c66d09d1342a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d97315a4e1acb992580e84065c66d09d1342a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d97315a4e1acb992580e84065c66d09d1342a77"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "80a1bb191c660eda20b35ab0a93dcbe74385bc0d", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d", "patch": "@@ -5163,12 +5163,10 @@ default_emit_call_builtin___clear_cache (rtx begin, rtx end)\n void\n maybe_emit_call_builtin___clear_cache (rtx begin, rtx end)\n {\n-  if ((GET_MODE (begin) != ptr_mode && GET_MODE (begin) != Pmode)\n-      || (GET_MODE (end) != ptr_mode && GET_MODE (end) != Pmode))\n-    {\n-      error (\"both arguments to %<__builtin___clear_cache%> must be pointers\");\n-      return;\n-    }\n+  gcc_assert ((GET_MODE (begin) == ptr_mode || GET_MODE (begin) == Pmode\n+\t       || CONST_INT_P (begin))\n+\t      && (GET_MODE (end) == ptr_mode || GET_MODE (end) == Pmode\n+\t\t  || CONST_INT_P (end)));\n \n   if (targetm.have_clear_cache ())\n     {"}, {"sha": "38eca86f49f2b5e369e91420f57576b1f69e7a60", "filename": "gcc/testsuite/gcc.c-torture/compile/pr100316.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr100316.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr100316.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr100316.c?ref=4e5bc4e4506a7ae7bb88fc925a425652a1da6b2d", "patch": "@@ -0,0 +1,18 @@\n+void foo(){\n+  __builtin___clear_cache(0, 0);\n+}\n+\n+void foo1(){\n+  __builtin___clear_cache((void*)0, (void*)0);\n+}\n+\n+void foo2(){\n+  void *yy = 0;\n+  __builtin___clear_cache(yy, yy);\n+}\n+\n+void foo3(){\n+  void *yy = (void*)0x1000;\n+  __builtin___clear_cache(yy, yy);\n+}\n+"}]}