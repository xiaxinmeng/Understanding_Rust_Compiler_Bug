{"sha": "c1eacb709f2f0ea4ad783e146ac95e21111022fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFlYWNiNzA5ZjJmMGVhNGFkNzgzZTE0NmFjOTVlMjExMTEwMjJmZA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-12-18T21:15:52Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-12-18T21:15:52Z"}, "message": "Fix for PRs gcj/312 and gcj/253:\n\n\t* parse.y (valid_ref_assignconv_cast_p): Load classes for source and\n\tdest if they arn't already.\n\t* class.c (layout_class): Call maybe_layout_super_class on\n\tsuperinterfaces also, but only if compiling from bytecode.\n\nFrom-SVN: r38363", "tree": {"sha": "995e46d2de69324ffdd071c2072fcc0de72d8af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/995e46d2de69324ffdd071c2072fcc0de72d8af7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1eacb709f2f0ea4ad783e146ac95e21111022fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1eacb709f2f0ea4ad783e146ac95e21111022fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1eacb709f2f0ea4ad783e146ac95e21111022fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1eacb709f2f0ea4ad783e146ac95e21111022fd/comments", "author": null, "committer": null, "parents": [{"sha": "25cfec087a0d4de0736e71f729c0a2befec92132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25cfec087a0d4de0736e71f729c0a2befec92132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25cfec087a0d4de0736e71f729c0a2befec92132"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "0f71e7f8e1864a8838a01c26d0a4d1dc713be94c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1eacb709f2f0ea4ad783e146ac95e21111022fd/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1eacb709f2f0ea4ad783e146ac95e21111022fd/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c1eacb709f2f0ea4ad783e146ac95e21111022fd", "patch": "@@ -1,3 +1,11 @@\n+2000-12-17  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tFix for PRs gcj/312 and gcj/253:\n+\t* parse.y (valid_ref_assignconv_cast_p): Load classes for source and\n+\tdest if they arn't already.\n+\t* class.c (layout_class): Call maybe_layout_super_class on \n+\tsuperinterfaces also, but only if compiling from bytecode.\n+\n 2000-12-15  Tom Tromey  <tromey@redhat.com>\n \n \t* jcf-parse.c (jcf_parse_source): Set wfl_operator if not already"}, {"sha": "92dd0b971cd9f10df971da495d0723d1ac914c25", "filename": "gcc/java/class.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1eacb709f2f0ea4ad783e146ac95e21111022fd/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1eacb709f2f0ea4ad783e146ac95e21111022fd/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c1eacb709f2f0ea4ad783e146ac95e21111022fd", "patch": "@@ -1841,6 +1841,35 @@ layout_class (this_class)\n \n   layout_type (this_class);\n \n+  /* Also recursively load/layout any superinterfaces, but only if class was\n+  loaded from bytecode. The source parser will take care of this itself. */\n+  if (!CLASS_FROM_SOURCE_P (this_class))\n+    {\n+      tree basetype_vec = TYPE_BINFO_BASETYPES (this_class);\n+\n+      if (basetype_vec)\n+\t{\n+\t  int n = TREE_VEC_LENGTH (basetype_vec) - 1;\n+\t  int i;\n+\t  for (i = n; i > 0; i--)\n+\t    {\n+\t      tree vec_elt = TREE_VEC_ELT (basetype_vec, i);\n+\t      tree super_interface = BINFO_TYPE (vec_elt);\n+\n+\t      tree maybe_super_interface \n+\t\t= maybe_layout_super_class (super_interface, NULL_TREE);\n+\t      if (maybe_super_interface == NULL\n+\t\t  || TREE_CODE (TYPE_SIZE (maybe_super_interface)) == ERROR_MARK)\n+\t\t{\n+\t\t  TYPE_SIZE (this_class) = error_mark_node;\n+\t\t  CLASS_BEING_LAIDOUT (this_class) = 0;\n+\t\t  list = TREE_CHAIN (list);\n+\t\t  return;\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n   /* Convert the size back to an SI integer value */\n   TYPE_SIZE_UNIT (this_class) = \n     fold (convert (int_type_node, TYPE_SIZE_UNIT (this_class)));"}, {"sha": "ec09a49de2c667992574eecc01f742a24e21e670", "filename": "gcc/java/parse.y", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1eacb709f2f0ea4ad783e146ac95e21111022fd/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1eacb709f2f0ea4ad783e146ac95e21111022fd/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=c1eacb709f2f0ea4ad783e146ac95e21111022fd", "patch": "@@ -12778,6 +12778,20 @@ valid_ref_assignconv_cast_p (source, dest, cast)\n     source = TREE_TYPE (source);\n   if (TREE_CODE (dest) == POINTER_TYPE)\n     dest = TREE_TYPE (dest);\n+\n+  /* If source and dest are being compiled from bytecode, they may need to\n+     be loaded. */\n+  if (CLASS_P (source) && !CLASS_LOADED_P (source))\n+    {\n+      load_class (source, 1);\n+      safe_layout_class (source);\n+    }\n+  if (CLASS_P (dest) && !CLASS_LOADED_P (dest))\n+    {\n+      load_class (dest, 1);\n+      safe_layout_class (dest);\n+    }\n+\n   /* Case where SOURCE is a class type */\n   if (TYPE_CLASS_P (source))\n     {"}]}