{"sha": "95ee998ceb1d196000e2cb4e61b760d818119dee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlZTk5OGNlYjFkMTk2MDAwZTJjYjRlNjFiNzYwZDgxODExOWRlZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-07-23T19:59:41Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-07-23T19:59:41Z"}, "message": "c-semantics.c (make_rtl_for_local_static): Use TREE_ASM_WRITTEN to figure out whether or not a variable has already been...\n\n\t* c-semantics.c (make_rtl_for_local_static): Use TREE_ASM_WRITTEN\n\tto figure out whether or not a variable has already been emitted.\n\n\t* decl.c (make_rtl_for_nonlocal_decl): Rework.\n\n\t* pt.c (lookup_template_class): Ensure that TYPE_CONTEXT is set\n\tcorrectly.\n\nFrom-SVN: r35215", "tree": {"sha": "3530f888190774b58b61b605cab7584a692609b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3530f888190774b58b61b605cab7584a692609b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ee998ceb1d196000e2cb4e61b760d818119dee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ee998ceb1d196000e2cb4e61b760d818119dee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ee998ceb1d196000e2cb4e61b760d818119dee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ee998ceb1d196000e2cb4e61b760d818119dee/comments", "author": null, "committer": null, "parents": [{"sha": "07964b9c09eb5bfe56851851d4e1696cb34e763d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07964b9c09eb5bfe56851851d4e1696cb34e763d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07964b9c09eb5bfe56851851d4e1696cb34e763d"}], "stats": {"total": 154, "additions": 106, "deletions": 48}, "files": [{"sha": "06ec8261b7fb0b507daf4fff7871f17f5342750a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -1,3 +1,8 @@\n+2000-07-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* c-semantics.c (make_rtl_for_local_static): Use TREE_ASM_WRITTEN\n+\tto figure out whether or not a variable has already been emitted.\n+\n Sun Jul 23 14:49:12 2000  Jason Eckhardt  <jle@cygnus.com> \n \n         * config/i860/i860.md (untyped_call expander): Use GEN_CALL "}, {"sha": "2e0d537f1aea013fe0317da1501600a1a1e0647c", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -96,7 +96,7 @@ make_rtl_for_local_static (decl)\n \n   /* If we inlined this variable, we could see it's declaration\n      again.  */\n-  if (DECL_RTL (decl))\n+  if (TREE_ASM_WRITTEN (decl))\n     return;\n \n   if (DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))"}, {"sha": "1c5279960b302285eab3cca84801d22b496a99d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -1,3 +1,10 @@\n+2000-07-23  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* decl.c (make_rtl_for_nonlocal_decl): Rework.\n+\n+\t* pt.c (lookup_template_class): Ensure that TYPE_CONTEXT is set\n+\tcorrectly.\n+\n 2000-07-20  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cp-tree.h: Use __FUNCTION__ not __PRETTY_FUNCTION__."}, {"sha": "b4e1477b4e450fbcdfc9a7258945260cd590f780", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 42, "deletions": 44, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -7825,11 +7825,8 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n      tree init;\n      const char *asmspec;\n {\n-  int toplev;\n-  tree type;\n-\n-  type = TREE_TYPE (decl);\n-  toplev = toplevel_bindings_p ();\n+  int toplev = toplevel_bindings_p ();\n+  int defer_p;\n \n   /* Handle non-variables up front.  */\n   if (TREE_CODE (decl) != VAR_DECL)\n@@ -7838,54 +7835,55 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n       return;\n     }\n \n+  /* If we see a class member here, it should be a static data\n+     member.  */\n+  if (DECL_LANG_SPECIFIC (decl) && DECL_IN_AGGR_P (decl))\n+    {\n+      my_friendly_assert (TREE_STATIC (decl), 19990828);\n+      /* An in-class declaration of a static data member should be\n+\t external; it is only a declaration, and not a definition.  */\n+      if (init == NULL_TREE)\n+\tmy_friendly_assert (DECL_EXTERNAL (decl), 20000723);\n+    }\n+\n   /* Set the DECL_ASSEMBLER_NAME for the variable.  */\n   if (asmspec)\n     DECL_ASSEMBLER_NAME (decl) = get_identifier (asmspec);\n \n-  if (DECL_VIRTUAL_P (decl))\n-    make_decl_rtl (decl, NULL_PTR, toplev);\n-  else if (TREE_READONLY (decl)\n-\t   && DECL_INITIAL (decl) != NULL_TREE\n-\t   && DECL_INITIAL (decl) != error_mark_node\n-\t   && ! EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl)))\n-    {\n-      DECL_INITIAL (decl) = save_expr (DECL_INITIAL (decl));\n+  /* We don't create any RTL for local variables.  */\n+  if (DECL_FUNCTION_SCOPE_P (decl) && !TREE_STATIC (decl))\n+    return;\n \n-      if (toplev && ! TREE_PUBLIC (decl))\n-\t{\n-\t  /* If this is a static const, change its apparent linkage\n-\t     if it belongs to a #pragma interface.  */\n-\t  if (!interface_unknown)\n-\t    {\n-\t      TREE_PUBLIC (decl) = 1;\n-\t      DECL_EXTERNAL (decl) = interface_only;\n-\t    }\n-\t  make_decl_rtl (decl, asmspec, toplev);\n-\t}\n-      else if (toplev)\n-\trest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n-    }\n-  else if (DECL_LANG_SPECIFIC (decl) && DECL_IN_AGGR_P (decl))\n-    {\n-      my_friendly_assert (TREE_STATIC (decl), 19990828);\n+  /* We defer emission of local statics until the corresponding\n+     DECL_STMT is expanded.  */\n+  defer_p = DECL_FUNCTION_SCOPE_P (decl) || DECL_VIRTUAL_P (decl);\n \n-      if (init == NULL_TREE\n-#ifdef DEFAULT_STATIC_DEFS\n-\t  /* If this code is dead, then users must\n-\t     explicitly declare static member variables\n-\t     outside the class def'n as well.  */\n-\t  && TYPE_NEEDS_CONSTRUCTING (type)\n-#endif\n-\t  )\n+  /* We try to defer namespace-scope static constants so that they are\n+     not emitted into the object file unncessarily.  */\n+  if (!DECL_VIRTUAL_P (decl)\n+      && TREE_READONLY (decl)\n+      && DECL_INITIAL (decl) != NULL_TREE\n+      && DECL_INITIAL (decl) != error_mark_node\n+      && ! EMPTY_CONSTRUCTOR_P (DECL_INITIAL (decl))\n+      && toplev\n+      && !TREE_PUBLIC (decl))\n+    {\n+      /* Fool with the linkage according to #pragma interface.  */\n+      if (!interface_unknown)\n \t{\n-\t  DECL_EXTERNAL (decl) = 1;\n-\t  make_decl_rtl (decl, asmspec, 1);\n+\t  TREE_PUBLIC (decl) = 1;\n+\t  DECL_EXTERNAL (decl) = interface_only;\n \t}\n-      else\n-\trest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n+\n+      defer_p = 1;\n     }\n-  else if (TREE_CODE (CP_DECL_CONTEXT (decl)) == NAMESPACE_DECL\n-\t   || (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)))\n+\n+  /* If we're deferring the variable, just make RTL.  Do not actually\n+     emit the variable.  */\n+  if (defer_p)\n+    make_decl_rtl (decl, asmspec, toplev);\n+  /* If we're not deferring, go ahead and assemble the variable.  */\n+  else\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n }\n "}, {"sha": "d5a75ca34065329ed6bb3154189d917d7cabe88d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -3785,9 +3785,6 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n       return error_mark_node;\n     }\n \n-  if (context == NULL_TREE)\n-    context = global_namespace;\n-\n   if (TREE_CODE (template) != TEMPLATE_DECL)\n     {\n       cp_error (\"non-template type `%T' used as a template\", d1);\n@@ -3963,6 +3960,11 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t  return found;\n \t}\n       \n+      context = tsubst (DECL_CONTEXT (template), arglist,\n+\t\t\t/*complain=*/0, in_decl);\n+      if (!context)\n+\tcontext = global_namespace;\n+\n       /* Create the type.  */\n       if (TREE_CODE (template_type) == ENUMERAL_TYPE)\n \t{"}, {"sha": "08e42fdf1906fe33b2f7aa82964f9dd73b736249", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash20.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash20.C?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -0,0 +1,38 @@\n+// Build don't link:\n+\n+#include <typeinfo>\n+\n+struct GcspFlags\n+{\n+  enum Enum\n+  { \n+    OffYes, \n+    OffNo, \n+    Root\n+  };\n+\n+  static char const* name(Enum flag);\n+\n+  template<Enum GCSP_FLAG>\n+  struct btmFlag\n+  { \n+    static Enum const f=OffNo;\n+  };\n+\n+};\n+\n+template<>\n+struct \n+GcspFlags::btmFlag<GcspFlags::OffYes>\n+{ \n+  static GcspFlags::Enum const f=GcspFlags::OffYes;\n+};\n+\n+int\n+main ()\n+{\n+  GcspFlags::btmFlag<GcspFlags::OffYes> f;\n+  const type_info& ti = typeid (f);\n+  return 0;\n+}\n+"}, {"sha": "5b302d4116a87b2ba3773625f8f6d42be4255dce", "filename": "gcc/testsuite/g++.old-deja/g++.other/static12.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ee998ceb1d196000e2cb4e61b760d818119dee/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic12.C?ref=95ee998ceb1d196000e2cb4e61b760d818119dee", "patch": "@@ -0,0 +1,8 @@\n+// Build don't link:\n+// Origin: Jason Merrill <jason@redhat.com>\n+\n+int main ()\n+{\n+  static const int n = 10;\n+  static const int *p = &n;\n+}"}]}