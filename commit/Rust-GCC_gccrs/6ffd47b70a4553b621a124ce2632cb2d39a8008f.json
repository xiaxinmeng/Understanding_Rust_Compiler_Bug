{"sha": "6ffd47b70a4553b621a124ce2632cb2d39a8008f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmZDQ3YjcwYTQ1NTNiNjIxYTEyNGNlMjYzMmNiMmQzOWE4MDA4Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-07T15:04:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-07T15:04:22Z"}, "message": "C: add fixit hint to misspelled field names\n\ngcc/c/ChangeLog:\n\t* c-parser.c (c_parser_postfix_expression): In __builtin_offsetof\n\tand structure element reference, capture the location of the\n\telement name token and pass it to build_component_ref.\n\t(c_parser_postfix_expression_after_primary): Likewise for\n\tstructure element dereference.\n\t(c_parser_omp_variable_list): Likewise for\n\tOMP_CLAUSE_{_CACHE, MAP, FROM, TO},\n\t* c-tree.h (build_component_ref): Add location_t param.\n\t* c-typeck.c (build_component_ref): Add location_t param\n\tCOMPONENT_LOC.  Use it, if available, when issuing hints about\n\tmispelled member names to provide a fixit replacement hint.\n\ngcc/objc/ChangeLog:\n\t* objc-act.c (objc_build_component_ref): Update call\n\tto build_component_ref for added param, passing UNKNOWN_LOCATION.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/spellcheck-fields-2.c: New test case.\n\nFrom-SVN: r237176", "tree": {"sha": "71a730994243919c88c4e269b3d48b4000eb9529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71a730994243919c88c4e269b3d48b4000eb9529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ffd47b70a4553b621a124ce2632cb2d39a8008f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffd47b70a4553b621a124ce2632cb2d39a8008f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffd47b70a4553b621a124ce2632cb2d39a8008f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffd47b70a4553b621a124ce2632cb2d39a8008f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f471dc3e81fee3d346c4887ce63688dc2735fdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f471dc3e81fee3d346c4887ce63688dc2735fdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f471dc3e81fee3d346c4887ce63688dc2735fdd"}], "stats": {"total": 107, "additions": 91, "deletions": 16}, "files": [{"sha": "de23e36d0ea55ef347253d346183ae65bcd9b3f0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -1,3 +1,17 @@\n+2016-06-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-parser.c (c_parser_postfix_expression): In __builtin_offsetof\n+\tand structure element reference, capture the location of the\n+\telement name token and pass it to build_component_ref.\n+\t(c_parser_postfix_expression_after_primary): Likewise for\n+\tstructure element dereference.\n+\t(c_parser_omp_variable_list): Likewise for\n+\tOMP_CLAUSE_{_CACHE, MAP, FROM, TO},\n+\t* c-tree.h (build_component_ref): Add location_t param.\n+\t* c-typeck.c (build_component_ref): Add location_t param\n+\tCOMPONENT_LOC.  Use it, if available, when issuing hints about\n+\tmispelled member names to provide a fixit replacement hint.\n+\n 2016-06-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/71362"}, {"sha": "2fef1acebd13131d68d85fd525d860df2eca859f", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -7708,8 +7708,9 @@ c_parser_postfix_expression (c_parser *parser)\n \t       accept sub structure and sub array references.  */\n \t    if (c_parser_next_token_is (parser, CPP_NAME))\n \t      {\n+\t\tc_token *comp_tok = c_parser_peek_token (parser);\n \t\toffsetof_ref = build_component_ref\n-\t\t  (loc, offsetof_ref, c_parser_peek_token (parser)->value);\n+\t\t  (loc, offsetof_ref, comp_tok->value, comp_tok->location);\n \t\tc_parser_consume_token (parser);\n \t\twhile (c_parser_next_token_is (parser, CPP_DOT)\n \t\t       || c_parser_next_token_is (parser,\n@@ -7735,9 +7736,10 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t\t    c_parser_error (parser, \"expected identifier\");\n \t\t\t    break;\n \t\t\t  }\n+\t\t\tc_token *comp_tok = c_parser_peek_token (parser);\n \t\t\toffsetof_ref = build_component_ref\n-\t\t\t  (loc, offsetof_ref,\n-\t\t\t   c_parser_peek_token (parser)->value);\n+\t\t\t  (loc, offsetof_ref, comp_tok->value,\n+\t\t\t   comp_tok->location);\n \t\t\tc_parser_consume_token (parser);\n \t\t      }\n \t\t    else\n@@ -8214,7 +8216,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n {\n   struct c_expr orig_expr;\n   tree ident, idx;\n-  location_t sizeof_arg_loc[3];\n+  location_t sizeof_arg_loc[3], comp_loc;\n   tree sizeof_arg[3];\n   unsigned int literal_zero_mask;\n   unsigned int i;\n@@ -8328,7 +8330,11 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  c_parser_consume_token (parser);\n \t  expr = default_function_array_conversion (expr_loc, expr);\n \t  if (c_parser_next_token_is (parser, CPP_NAME))\n-\t    ident = c_parser_peek_token (parser)->value;\n+\t    {\n+\t      c_token *comp_tok = c_parser_peek_token (parser);\n+\t      ident = comp_tok->value;\n+\t      comp_loc = comp_tok->location;\n+\t    }\n \t  else\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n@@ -8340,7 +8346,8 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  start = expr.get_start ();\n \t  finish = c_parser_peek_token (parser)->get_finish ();\n \t  c_parser_consume_token (parser);\n-\t  expr.value = build_component_ref (op_loc, expr.value, ident);\n+\t  expr.value = build_component_ref (op_loc, expr.value, ident,\n+\t\t\t\t\t    comp_loc);\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) != COMPONENT_REF)\n@@ -8360,7 +8367,11 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  c_parser_consume_token (parser);\n \t  expr = convert_lvalue_to_rvalue (expr_loc, expr, true, false);\n \t  if (c_parser_next_token_is (parser, CPP_NAME))\n-\t    ident = c_parser_peek_token (parser)->value;\n+\t    {\n+\t      c_token *comp_tok = c_parser_peek_token (parser);\n+\t      ident = comp_tok->value;\n+\t      comp_loc = comp_tok->location;\n+\t    }\n \t  else\n \t    {\n \t      c_parser_error (parser, \"expected identifier\");\n@@ -8376,7 +8387,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t\t\t\t\t    build_indirect_ref (op_loc,\n \t\t\t\t\t\t\t\texpr.value,\n \t\t\t\t\t\t\t\tRO_ARROW),\n-\t\t\t\t\t    ident);\n+\t\t\t\t\t    ident, comp_loc);\n \t  set_c_expr_source_range (&expr, start, finish);\n \t  expr.original_code = ERROR_MARK;\n \t  if (TREE_CODE (expr.value) != COMPONENT_REF)\n@@ -10622,9 +10633,12 @@ c_parser_omp_variable_list (c_parser *parser,\n \t\t      t = error_mark_node;\n \t\t      break;\n \t\t    }\n-\t\t  tree ident = c_parser_peek_token (parser)->value;\n+\n+\t\t  c_token *comp_tok = c_parser_peek_token (parser);\n+\t\t  tree ident = comp_tok->value;\n+\t\t  location_t comp_loc = comp_tok->location;\n \t\t  c_parser_consume_token (parser);\n-\t\t  t = build_component_ref (op_loc, t, ident);\n+\t\t  t = build_component_ref (op_loc, t, ident, comp_loc);\n \t\t}\n \t      /* FALLTHROUGH  */\n \t    case OMP_CLAUSE_DEPEND:"}, {"sha": "b4374e3e4bffd622f920382b282d8efcbb555c28", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -614,7 +614,7 @@ extern struct c_expr convert_lvalue_to_rvalue (location_t, struct c_expr,\n \t\t\t\t\t       bool, bool);\n extern void mark_exp_read (tree);\n extern tree composite_type (tree, tree);\n-extern tree build_component_ref (location_t, tree, tree);\n+extern tree build_component_ref (location_t, tree, tree, location_t);\n extern tree build_array_ref (location_t, tree, tree);\n extern tree build_external_ref (location_t, tree, int, tree *);\n extern void pop_maybe_used (bool);"}, {"sha": "cd8e9e57b3a06d5e75ec2b42698369302bba8d57", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -2329,10 +2329,12 @@ should_suggest_deref_p (tree datum_type)\n \n /* Make an expression to refer to the COMPONENT field of structure or\n    union value DATUM.  COMPONENT is an IDENTIFIER_NODE.  LOC is the\n-   location of the COMPONENT_REF.  */\n+   location of the COMPONENT_REF.  COMPONENT_LOC is the location\n+   of COMPONENT.  */\n \n tree\n-build_component_ref (location_t loc, tree datum, tree component)\n+build_component_ref (location_t loc, tree datum, tree component,\n+\t\t     location_t component_loc)\n {\n   tree type = TREE_TYPE (datum);\n   enum tree_code code = TREE_CODE (type);\n@@ -2364,8 +2366,24 @@ build_component_ref (location_t loc, tree datum, tree component)\n \t{\n \t  tree guessed_id = lookup_field_fuzzy (type, component);\n \t  if (guessed_id)\n-\t    error_at (loc, \"%qT has no member named %qE; did you mean %qE?\",\n-\t\t      type, component, guessed_id);\n+\t    {\n+\t      /* Attempt to provide a fixit replacement hint, if\n+\t\t we have a valid range for the component.  */\n+\t      location_t reported_loc\n+\t\t= (component_loc != UNKNOWN_LOCATION) ? component_loc : loc;\n+\t      rich_location rich_loc (line_table, reported_loc);\n+\t      if (component_loc != UNKNOWN_LOCATION)\n+\t\t{\n+\t\t  source_range component_range =\n+\t\t    get_range_from_loc (line_table, component_loc);\n+\t\t  rich_loc.add_fixit_replace (component_range,\n+\t\t\t\t\t      IDENTIFIER_POINTER (guessed_id));\n+\t\t}\n+\t      error_at_rich_loc\n+\t\t(&rich_loc,\n+\t\t \"%qT has no member named %qE; did you mean %qE?\",\n+\t\t type, component, guessed_id);\n+\t    }\n \t  else\n \t    error_at (loc, \"%qT has no member named %qE\", type, component);\n \t  return error_mark_node;"}, {"sha": "ddc670a4375b2b86bf7f6c66bf019b6f04e87e8f", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -1,3 +1,8 @@\n+2016-06-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* objc-act.c (objc_build_component_ref): Update call\n+\tto build_component_ref for added param, passing UNKNOWN_LOCATION.\n+\n 2016-04-18  Michael Matz  <matz@suse.de>\n \n \t* objc-act.c (objc_build_struct): Use SET_DECL_ALIGN."}, {"sha": "44f01d2c9fe952fca6723f272e58be37372197e1", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -2654,7 +2654,8 @@ objc_build_component_ref (tree datum, tree component)\n   return finish_class_member_access_expr (datum, component, false,\n                                           tf_warning_or_error);\n #else\n-  return build_component_ref (input_location, datum, component);\n+  return build_component_ref (input_location, datum, component,\n+\t\t\t      UNKNOWN_LOCATION);\n #endif\n }\n "}, {"sha": "dd514d63f07ffc70a910ee7242555861bac6f64a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -1,3 +1,7 @@\n+2016-06-07  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/spellcheck-fields-2.c: New test case.\n+\n 2016-06-07  Richard Biener  <rguenther@suse.de>\n \n \tPR c/61564"}, {"sha": "d6ebff1ea795d8940570733d5373fe24cd3afbbf", "filename": "gcc/testsuite/gcc.dg/spellcheck-fields-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffd47b70a4553b621a124ce2632cb2d39a8008f/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-fields-2.c?ref=6ffd47b70a4553b621a124ce2632cb2d39a8008f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-options \"-fdiagnostics-show-caret\" } */\n+\n+union u\n+{\n+  int color;\n+  int shape;\n+};\n+\n+int test (union u *ptr)\n+{\n+  return ptr->colour; /* { dg-error \"did you mean .color.?\" } */\n+}\n+\n+/* Verify that we get an underline and a fixit hint.  */\n+/* { dg-begin-multiline-output \"\" }\n+   return ptr->colour;\n+               ^~~~~~\n+               color\n+   { dg-end-multiline-output \"\" } */"}]}