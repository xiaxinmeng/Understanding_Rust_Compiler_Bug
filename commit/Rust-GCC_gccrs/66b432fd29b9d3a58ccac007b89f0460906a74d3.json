{"sha": "66b432fd29b9d3a58ccac007b89f0460906a74d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiNDMyZmQyOWI5ZDNhNThjY2FjMDA3Yjg5ZjA0NjA5MDZhNzRkMw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-01-18T20:17:57Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-01-18T20:17:57Z"}, "message": "re PR libstdc++/51866 ([c++0x][4.7 Regression] unordered_multiset compares moved-out values)\n\n2012-01-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\t    Roman Kononov  <roman@binarylife.net>\n\n\tPR libstdc++/51866\n\t* include/bits/hashtable.h (_Hashtable<>::_M_insert(_Arg, false_type)):\n\tDo not keep a reference to a potentially moved instance.\n\t* testsuite/23_containers/unordered_multiset/insert/51866.cc: New.\n\t* testsuite/23_containers/unordered_multimap/insert/51866.cc: New.\n\nCo-Authored-By: Roman Kononov <roman@binarylife.net>\n\nFrom-SVN: r183285", "tree": {"sha": "8abd2d9719fc4e2b32085b95da5449eaee01bded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8abd2d9719fc4e2b32085b95da5449eaee01bded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66b432fd29b9d3a58ccac007b89f0460906a74d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b432fd29b9d3a58ccac007b89f0460906a74d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b432fd29b9d3a58ccac007b89f0460906a74d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b432fd29b9d3a58ccac007b89f0460906a74d3/comments", "author": null, "committer": null, "parents": [{"sha": "9ffaf4bc3cb4f56156c97693238b89959f6a0da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ffaf4bc3cb4f56156c97693238b89959f6a0da4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ffaf4bc3cb4f56156c97693238b89959f6a0da4"}], "stats": {"total": 202, "additions": 194, "deletions": 8}, "files": [{"sha": "c2ef19f87492177c387619d8d1b62d79f4062062", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=66b432fd29b9d3a58ccac007b89f0460906a74d3", "patch": "@@ -1,3 +1,12 @@\n+2012-01-18  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\t    Roman Kononov  <roman@binarylife.net>\n+\n+\tPR libstdc++/51866\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_insert(_Arg, false_type)):\n+\tDo not keep a reference to a potentially moved instance.\n+\t* testsuite/23_containers/unordered_multiset/insert/51866.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/insert/51866.cc: New.\n+\n 2012-01-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* doc/html/*: Regenerate."}, {"sha": "c2ffae24cb618f1b19b8e0e36ec793f25aa4632b", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=66b432fd29b9d3a58ccac007b89f0460906a74d3", "patch": "@@ -1227,7 +1227,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      = this->_M_hash_code(__k);\n \t    this->_M_store_code(__new_node, __code);\n \n-\t    // Second,  do rehash if necessary.\n+\t    // Second, do rehash if necessary.\n \t    if (__do_rehash.first)\n \t\t_M_rehash(__do_rehash.second, __saved_state);\n \n@@ -1347,21 +1347,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  = _M_rehash_policy._M_need_rehash(_M_bucket_count,\n \t\t\t\t\t    _M_element_count, 1);\n \n-\tconst key_type& __k = this->_M_extract()(__v);\n-\ttypename _Hashtable::_Hash_code_type __code = this->_M_hash_code(__k);\n+\t// First compute the hash code so that we don't do anything if it throws.\n+\ttypename _Hashtable::_Hash_code_type __code\n+\t  = this->_M_hash_code(this->_M_extract()(__v));\n \n \t_Node* __new_node = nullptr;\n \t__try\n \t  {\n-\t    // First allocate new node so that we don't rehash if it throws.\n+\t    // Second allocate new node so that we don't rehash if it throws.\n \t    __new_node = _M_allocate_node(std::forward<_Arg>(__v));\n \t    this->_M_store_code(__new_node, __code);\n \t    if (__do_rehash.first)\n \t\t_M_rehash(__do_rehash.second, __saved_state);\n \n-\t    // Second, find the node before an equivalent one.\n-\t    size_type __n = _M_bucket_index(__k, __code);\n-\t    _BaseNode* __prev = _M_find_before_node(__n, __k, __code);\n+\t    // Third, find the node before an equivalent one.\n+\t    size_type __bkt = _M_bucket_index(__new_node);\n+\t    _BaseNode* __prev\n+\t      = _M_find_before_node(__bkt, this->_M_extract()(__new_node->_M_v),\n+\t\t\t\t    __code);\n \t    if (__prev)\n \t      {\n \t\t// Insert after the node before the equivalent one.\n@@ -1372,7 +1375,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      // The inserted node has no equivalent in the hashtable. We must\n \t      // insert the new node at the beginning of the bucket to preserve\n \t      // equivalent elements relative positions.\n-\t      _M_insert_bucket_begin(__n, __new_node);\n+\t      _M_insert_bucket_begin(__bkt, __new_node);\n \t    ++_M_element_count;\n \t    return iterator(__new_node);\n \t  }"}, {"sha": "aa85c4b1d5a1dbcde21aeec6934e02691bc753d0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/insert/51866.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F51866.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F51866.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Finsert%2F51866.cc?ref=66b432fd29b9d3a58ccac007b89f0460906a74d3", "patch": "@@ -0,0 +1,87 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+struct num\n+{\n+  int value;\n+  num(int n)                 : value(n) {}\n+  num(num const&)            = default;\n+  num& operator=(num const&) = default;\n+  num(num&& o)               : value(o.value)\n+  { o.value = -1; }\n+  num& operator=(num&& o)\n+  {\n+    if (this != &o)\n+      {\n+\tvalue = o.value;\n+\to.value = -1;\n+      }\n+    return *this;\n+  }\n+};\n+\n+struct num_hash\n+{\n+  size_t operator()(num const& a) const\n+  { return a.value; }\n+};\n+\n+struct num_equal\n+{\n+  static bool _S_called_on_moved_instance;\n+  bool operator()(num const& a, num const& b) const\n+  {\n+    if (a.value == -1 || b.value == -1)\n+      _S_called_on_moved_instance = true;\n+    return a.value == b.value;\n+  }\n+};\n+\n+bool num_equal::_S_called_on_moved_instance = false;\n+\n+// libstdc++/51866\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unordered_multimap<num, int, num_hash, num_equal> mmap;\n+  mmap.insert(std::make_pair(num(1), 1));\n+  mmap.insert(std::make_pair(num(2), 2));\n+  mmap.insert(std::make_pair(num(1), 3));\n+  mmap.insert(std::make_pair(num(2), 4));\n+  VERIFY( mmap.size() == 4 );\n+  auto iter = mmap.cbegin();\n+  auto x0 = (iter++)->first.value;\n+  auto x1 = (iter++)->first.value;\n+  auto x2 = (iter++)->first.value;\n+  auto x3 = (iter++)->first.value;\n+  VERIFY( iter == mmap.cend() );\n+  VERIFY( (x0 == 1 && x1 == 1 && x2 == 2 && x3 == 2)\n+\t  || (x0 == 2 && x1 == 2 && x2 == 1 && x3 == 1) );\n+  VERIFY( !num_equal::_S_called_on_moved_instance );\n+}\n+  \n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7ee0dce3a4520e59937af09ef39d661150a8ab0d", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/insert/51866.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2F51866.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66b432fd29b9d3a58ccac007b89f0460906a74d3/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2F51866.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Finsert%2F51866.cc?ref=66b432fd29b9d3a58ccac007b89f0460906a74d3", "patch": "@@ -0,0 +1,87 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+struct num\n+{\n+  int value;\n+  num(int n)                 : value(n) {}\n+  num(num const&)            = default;\n+  num& operator=(num const&) = default;\n+  num(num&& o)               : value(o.value)\n+  { o.value = -1; }\n+  num& operator=(num&& o)\n+  {\n+    if (this != &o)\n+      {\n+\tvalue = o.value;\n+\to.value = -1;\n+      }\n+    return *this;\n+  }\n+};\n+\n+struct num_hash\n+{\n+  size_t operator()(num const& a) const\n+  { return a.value; }\n+};\n+\n+struct num_equal\n+{\n+  static bool _S_called_on_moved_instance;\n+  bool operator()(num const& a, num const& b) const\n+  {\n+    if (a.value == -1 || b.value == -1)\n+      _S_called_on_moved_instance = true;\n+    return a.value == b.value;\n+  }\n+};\n+\n+bool num_equal::_S_called_on_moved_instance = false;\n+\n+// libstdc++/51866\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  std::unordered_multiset<num, num_hash, num_equal> mset;\n+  mset.insert(num(1));\n+  mset.insert(num(2));\n+  mset.insert(num(1));\n+  mset.insert(num(2));\n+  VERIFY( mset.size() == 4 );\n+  auto iter = mset.cbegin();\n+  int x0 = (iter++)->value;\n+  int x1 = (iter++)->value;\n+  int x2 = (iter++)->value;\n+  int x3 = (iter++)->value;\n+  VERIFY( iter == mset.cend() );\n+  VERIFY( (x0 == 1 && x1 == 1 && x2 == 2 && x3 == 2)\n+\t  || (x0 == 2 && x1 == 2 && x2 == 1 && x3 == 1) );\n+  VERIFY( !num_equal::_S_called_on_moved_instance );\n+}\n+  \n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}