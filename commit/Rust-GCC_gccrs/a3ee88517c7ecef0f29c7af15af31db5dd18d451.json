{"sha": "a3ee88517c7ecef0f29c7af15af31db5dd18d451", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNlZTg4NTE3YzdlY2VmMGYyOWM3YWYxNWFmMzFkYjVkZDE4ZDQ1MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-08-13T11:24:35Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-13T11:24:35Z"}, "message": "re PR libstdc++/62118 (cases under libstdc++-v3/testsuite/ext/ failed on aarch64/arm)\n\n2014-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/62118\n\t* include/ext/random.tcc (uniform_on_sphere_helper<2, _RealType>::\n\toperator()): Use std::hypot only when _GLIBCXX_USE_C99_MATH_TR1.\n\nFrom-SVN: r213906", "tree": {"sha": "6a28cb3bf25d14857d4b2a205c8c1daa7cc9c0b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a28cb3bf25d14857d4b2a205c8c1daa7cc9c0b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3ee88517c7ecef0f29c7af15af31db5dd18d451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ee88517c7ecef0f29c7af15af31db5dd18d451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3ee88517c7ecef0f29c7af15af31db5dd18d451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3ee88517c7ecef0f29c7af15af31db5dd18d451/comments", "author": null, "committer": null, "parents": [{"sha": "0bcb976e6ad80e999b64c8e0f0e3a8852b79968d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcb976e6ad80e999b64c8e0f0e3a8852b79968d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcb976e6ad80e999b64c8e0f0e3a8852b79968d"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "0f51eb493cfa0e5bb74905fb2ade42ede7d2032f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee88517c7ecef0f29c7af15af31db5dd18d451/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee88517c7ecef0f29c7af15af31db5dd18d451/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a3ee88517c7ecef0f29c7af15af31db5dd18d451", "patch": "@@ -1,3 +1,9 @@\n+2014-08-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/62118\n+\t* include/ext/random.tcc (uniform_on_sphere_helper<2, _RealType>::\n+\toperator()): Use std::hypot only when _GLIBCXX_USE_C99_MATH_TR1.\n+\n 2014-08-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/basic_string.h (getline): Qualify call to prevent ADL"}, {"sha": "9aef359adc91e91025ed8db4499178bf53827c6e", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3ee88517c7ecef0f29c7af15af31db5dd18d451/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3ee88517c7ecef0f29c7af15af31db5dd18d451/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=a3ee88517c7ecef0f29c7af15af31db5dd18d451", "patch": "@@ -1547,10 +1547,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template<std::size_t _Dimen, typename _RealType>\n       class uniform_on_sphere_helper\n       {\n-\ttypedef typename uniform_on_sphere_distribution<_Dimen, _RealType>::result_type result_type;\n+\ttypedef typename uniform_on_sphere_distribution<_Dimen, _RealType>::\n+\t  result_type result_type;\n \n       public:\n-\ttemplate<typename _NormalDistribution, typename _UniformRandomNumberGenerator>\n+\ttemplate<typename _NormalDistribution,\n+\t\t typename _UniformRandomNumberGenerator>\n \tresult_type operator()(_NormalDistribution& __nd,\n \t\t\t       _UniformRandomNumberGenerator& __urng)\n         {\n@@ -1604,9 +1606,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t  while (__sq == _RealType(0) || __sq > _RealType(1));\n \n+#if _GLIBCXX_USE_C99_MATH_TR1\n \t  // Yes, we do not just use sqrt(__sq) because hypot() is more\n \t  // accurate.\n \t  auto __norm = std::hypot(__ret[0], __ret[1]);\n+#else\n+\t  auto __norm = std::sqrt(__ret[0] * __ret[0] + __ret[1] * __ret[1]);\n+#endif\n \t  __ret[0] /= __norm;\n \t  __ret[1] /= __norm;\n "}]}