{"sha": "fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmNGJmZDNmMzJiMzVlOTFkY2ZlYzBkMzE0M2M3MTBlMWIxNzYzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-02-17T08:29:50Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-02-17T08:29:50Z"}, "message": "re PR target/43653 (ICE at reload1.c:1188 with -O1 -ftree-vectorize and empty struct)\n\n\tPR target/43653\n\t* config/i386/i386.c (ix86_secondary_reload): Handle SSE\n\tinput reload with PLUS RTX.\n\ntestsuite/ChangeLog:\n\n\tPR target/43653\n\t* gcc.target/i386/pr43653.c: New test.\n\nFrom-SVN: r170241", "tree": {"sha": "ab8b9a69d4ca69ec1da5b87b2fe39b2e40f4549b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab8b9a69d4ca69ec1da5b87b2fe39b2e40f4549b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/comments", "author": null, "committer": null, "parents": [{"sha": "1770aeed11c064c75507eaca52a9e49234f9eff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1770aeed11c064c75507eaca52a9e49234f9eff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1770aeed11c064c75507eaca52a9e49234f9eff6"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "cdcfb72ae8067f676e2c4dfc5ef3521ef477df6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "patch": "@@ -1,3 +1,9 @@\n+2011-02-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/43653\n+\t* config/i386/i386.c (ix86_secondary_reload): Handle SSE\n+\tinput reload with PLUS RTX.\n+\n 2011-02-16  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mips/mips.opt (mno-mdmx): Use Var(TARGET_MDMX, 0) instead\n@@ -101,11 +107,11 @@\n \n 2011-02-15  Nathan Froyd  <froydnj@codesourcery.com>\n \n-        * config/iq2000/i2000.h (REG_CLASS_FROM_LETTER): Delete.\n-        (CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n-        (EXTRA_CONSTRAINT): Delete.\n-        * config/iq2000/constraints.md: New file.\n-        * config/iq2000/iq2000.md: Include it.\n+\t* config/iq2000/i2000.h (REG_CLASS_FROM_LETTER): Delete.\n+\t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\t* config/iq2000/constraints.md: New file.\n+\t* config/iq2000/iq2000.md: Include it.\n \t(define_insn \"\"): Delete.\n \t(movsi_internal2, movhi_internal2, movqi_internal2): Delete\n \tunsupported constraint letters from patterns.\n@@ -211,7 +217,7 @@\n \t* config/stormy16/stormy16.h (REG_CLASS_FROM_LETTER): Delete.\n \t(CONST_OK_FOR_LETTER_P, CONST_DOUBLE_OK_FOR_LETTER_P): Delete.\n \t(EXTRA_CONSTRAINT): Delete.\n-\t* config/stormy16/stormy16.c (xstormy16_legitiamte_address_p):\n+\t* config/stormy16/stormy16.c (xstormy16_legitimate_address_p):\n \tUn-staticize.\n \t(xstormy16_extra_constraint_p): Delete.\n \n@@ -280,18 +286,15 @@\n \t(sparc64_fallback_frame_state): Merge with ...\n \t(sparc_fallback_frame_state): ... this into ...\n \t(MD_FALLBACK_FRAME_STATE_FOR): ... this.\n-\tChange new_cfa to long.\n-\tRemove regs_off, fpu_save_off, fpu_save.\n-\tDefine nframes, mctx.\n-\tUse IS_SIGHANDLER, handler_args, mctx, walk stack instead of\n-\thardcoded offsets.\n+\tChange new_cfa to long.  Remove regs_off, fpu_save_off, fpu_save.\n+\tDefine nframes, mctx.  Use IS_SIGHANDLER, handler_args, mctx, walk\n+\tstack instead of hardcoded offsets.\n \n 2011-02-14  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n-\t* go/gccgo.texi (Top, Import and Export): Fix a typo and a\n-\tmarkup nit.\n+\t* go/gccgo.texi (Top, Import and Export): Fix a typo and a markup nit.\n \n-2011-02-14  Andriy Gapon <avg@freebsd.org>\n+2011-02-14  Andriy Gapon  <avg@freebsd.org>\n \n \tPR target/45808\n \t* config/freebsd-spec.h (FBSD_LIB_SPEC): Handle the shared case.\n@@ -348,7 +351,7 @@\n 2011-02-12  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* config/darwin.c (darwin_override_options): Add a hunk missed\n-\tfrom the commit of r168571.  Trim comment line lengths and \n+\tfrom the commit of r168571.  Trim comment line lengths and\n \tcorrect indents of the preceding block.\n \n 2011-02-12  Iain Sandoe  <iains@gcc.gnu.org>"}, {"sha": "2511817ee83c6f89f241b33da91256cac8ea33bf", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "patch": "@@ -28293,7 +28293,8 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n {\n   /* QImode spills from non-QI registers require\n      intermediate register on 32bit targets.  */\n-  if (!in_p && mode == QImode && !TARGET_64BIT\n+  if (!TARGET_64BIT\n+      && !in_p && mode == QImode\n       && (rclass == GENERAL_REGS\n \t  || rclass == LEGACY_REGS\n \t  || rclass == INDEX_REGS))\n@@ -28313,6 +28314,45 @@ ix86_secondary_reload (bool in_p, rtx x, reg_class_t rclass,\n \treturn Q_REGS;\n     }\n \n+  /* This condition handles corner case where an expression involving\n+     pointers gets vectorized.  We're trying to use the address of a\n+     stack slot as a vector initializer.  \n+\n+     (set (reg:V2DI 74 [ vect_cst_.2 ])\n+          (vec_duplicate:V2DI (reg/f:DI 20 frame)))\n+\n+     Eventually frame gets turned into sp+offset like this:\n+\n+     (set (reg:V2DI 21 xmm0 [orig:74 vect_cst_.2 ] [74])\n+          (vec_duplicate:V2DI (plus:DI (reg/f:DI 7 sp)\n+\t                               (const_int 392 [0x188]))))\n+\n+     That later gets turned into:\n+\n+     (set (reg:V2DI 21 xmm0 [orig:74 vect_cst_.2 ] [74])\n+          (vec_duplicate:V2DI (plus:DI (reg/f:DI 7 sp)\n+\t    (mem/u/c/i:DI (symbol_ref/u:DI (\"*.LC0\") [flags 0x2]) [0 S8 A64]))))\n+\n+     We'll have the following reload recorded:\n+\n+     Reload 0: reload_in (DI) =\n+           (plus:DI (reg/f:DI 7 sp)\n+            (mem/u/c/i:DI (symbol_ref/u:DI (\"*.LC0\") [flags 0x2]) [0 S8 A64]))\n+     reload_out (V2DI) = (reg:V2DI 21 xmm0 [orig:74 vect_cst_.2 ] [74])\n+     SSE_REGS, RELOAD_OTHER (opnum = 0), can't combine\n+     reload_in_reg: (plus:DI (reg/f:DI 7 sp) (const_int 392 [0x188]))\n+     reload_out_reg: (reg:V2DI 21 xmm0 [orig:74 vect_cst_.2 ] [74])\n+     reload_reg_rtx: (reg:V2DI 22 xmm1)\n+\n+     Which isn't going to work since SSE instructions can't handle scalar\n+     additions.  Returning GENERAL_REGS forces the addition into integer\n+     register and reload can handle subsequent reloads without problems.  */\n+\n+  if (in_p && GET_CODE (x) == PLUS\n+      && SSE_CLASS_P (rclass)\n+      && SCALAR_INT_MODE_P (mode))\n+    return GENERAL_REGS;\n+\n   return NO_REGS;\n }\n "}, {"sha": "ba0a7285d7303a6e293f8c119e67569c4aaa165d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "patch": "@@ -1,3 +1,8 @@\n+2011-02-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/43653\n+\t* gcc.target/i386/pr43653.c: New test.\n+\n 2011-02-11  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/47172"}, {"sha": "22928edacfec1901f02a3acae73b2ac36ad6534c", "filename": "gcc/testsuite/gcc.target/i386/pr43653.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43653.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf4bfd3f32b35e91dcfec0d3143c710e1b17638/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43653.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43653.c?ref=fbf4bfd3f32b35e91dcfec0d3143c710e1b17638", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -ftree-vectorize -msse\" } */\n+\n+typedef struct {} S;\n+\n+void *foo()\n+{\n+  S a[64], *p[64];\n+  int i;\n+\n+  for (i = 0; i < 64; i++)\n+    p[i] = &a[i];\n+  return p[0];\n+}"}]}