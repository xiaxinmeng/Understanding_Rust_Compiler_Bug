{"sha": "f277b5e03b84f165522aadcaf16a7cfddecfc087", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI3N2I1ZTAzYjg0ZjE2NTUyMmFhZGNhZjE2YTdjZmRkZWNmYzA4Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-05-05T11:12:19Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-05-05T11:12:19Z"}, "message": "cppfiles.c (struct include_file): New member err_no.\n\n\t* cppfiles.c (struct include_file): New member err_no.\n\t(find_or_create_entry): Set it.\n\t(open_file): Don't set fds to -2.  Instead, use err_no to\n\tremember previous errors, if any.\n\nFrom-SVN: r41865", "tree": {"sha": "b9605775a3f8dfa905683c31d3707f15c4cf8aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9605775a3f8dfa905683c31d3707f15c4cf8aef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f277b5e03b84f165522aadcaf16a7cfddecfc087", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f277b5e03b84f165522aadcaf16a7cfddecfc087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f277b5e03b84f165522aadcaf16a7cfddecfc087", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f277b5e03b84f165522aadcaf16a7cfddecfc087/comments", "author": null, "committer": null, "parents": [{"sha": "5dc6bfd7da13d129648feaffe6b570dd1a4aa917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc6bfd7da13d129648feaffe6b570dd1a4aa917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc6bfd7da13d129648feaffe6b570dd1a4aa917"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "06727576cdf4bfd2d7c97c0d68bf703bee339cdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f277b5e03b84f165522aadcaf16a7cfddecfc087/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f277b5e03b84f165522aadcaf16a7cfddecfc087/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f277b5e03b84f165522aadcaf16a7cfddecfc087", "patch": "@@ -1,3 +1,10 @@\n+2001-05-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* cppfiles.c (struct include_file): New member err_no.\n+\t(find_or_create_entry): Set it.\n+\t(open_file): Don't set fds to -2.  Instead, use err_no to\n+\tremember previous errors, if any.\n+\n 2001-05-05  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_gen_movhi): Optimize moves"}, {"sha": "dea6dd6677e17e704155bea5d59bff364c9f3974", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f277b5e03b84f165522aadcaf16a7cfddecfc087/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f277b5e03b84f165522aadcaf16a7cfddecfc087/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=f277b5e03b84f165522aadcaf16a7cfddecfc087", "patch": "@@ -67,6 +67,7 @@ struct include_file\n   const unsigned char *buffer;\t/* pointer to cached file contents */\n   struct stat st;\t\t/* copy of stat(2) data for file */\n   int fd;\t\t\t/* fd open on file (short term storage only) */\n+  int err_no;\t\t\t/* errno obtained if opening a file failed */\n   unsigned short include_count;\t/* number of times file has been read */\n   unsigned short refcnt;\t/* number of stacked buffers using this file */\n   unsigned char mapped;\t\t/* file buffer is mmapped */\n@@ -175,6 +176,7 @@ find_or_create_entry (pfile, fname)\n     {\n       file = xcnew (struct include_file);\n       file->name = name;\n+      file->err_no = errno;\n       node = splay_tree_insert (pfile->all_include_files,\n \t\t\t\t(splay_tree_key) file->name,\n \t\t\t\t(splay_tree_value) file);\n@@ -210,12 +212,12 @@ open_file (pfile, filename)\n   splay_tree_node nd = find_or_create_entry (pfile, filename);\n   struct include_file *file = (struct include_file *) nd->value;\n \n-  if (errno)\n-    file->fd = -2;\n-\n-  /* Don't retry opening if we failed previously.  */\n-  if (file->fd == -2)\n-    return 0;\n+  if (file->err_no)\n+    {\n+      /* Ugh.  handle_missing_header () needs errno to be set.  */\n+      errno = file->err_no;\n+      return 0;\n+    }\n \n   /* Don't reopen an idempotent file. */\n   if (DO_NOT_REREAD (file))\n@@ -266,12 +268,10 @@ open_file (pfile, filename)\n     }\n \n   /* Don't issue an error message if the file doesn't exist.  */\n+  file->err_no = errno;\n   if (errno != ENOENT && errno != ENOTDIR)\n     cpp_error_from_errno (pfile, file->name);\n \n-  /* Create a negative node for this path, and return null.  */\n-  file->fd = -2;\n-\n   return 0;\n }\n "}]}