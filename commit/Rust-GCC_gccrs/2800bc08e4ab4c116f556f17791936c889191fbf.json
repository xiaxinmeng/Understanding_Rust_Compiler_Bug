{"sha": "2800bc08e4ab4c116f556f17791936c889191fbf", "node_id": "C_kwDOANBUbNoAKDI4MDBiYzA4ZTRhYjRjMTE2ZjU1NmYxNzc5MTkzNmM4ODkxOTFmYmY", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:32:16Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-17T19:32:16Z"}, "message": "libstdc++: Import the fast_float library\n\nWe're going to use the fast_float library[1] in our (compiled-in)\nfloating-point std::from_chars implementation for faster and more\nportable parsing of binary32/64 decimal strings.\n\nThe single file fast_float.h is an amalgamation of the entire library,\nwhich can be (re)generated with the amalgamate.py script (from the\nfast_float repository) via the command\n\n  python3 ./script/amalgamate.py --license=MIT \\\n    > $GCC_SRC/libstdc++-v3/c++17/fast_float/fast_float.h\n\nThe code has a GPL-compatible license.\n\n[1]: https://github.com/fastfloat/fast_float\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++17/fast_float/LOCAL_PATCHES: New file.\n\t* src/c++17/fast_float/MERGE: New file.\n\t* src/c++17/fast_float/README.md: New file, copied from the\n\tfast_float repository.\n\t* src/c++17/fast_float/fast_float.h: New file, an amalgamation\n\tof the fast_float library.\n\nSigned-off-by: Patrick Palka <ppalka@redhat.com>", "tree": {"sha": "86e132633eb307ffb03932802746ece7170fc8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e132633eb307ffb03932802746ece7170fc8d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2800bc08e4ab4c116f556f17791936c889191fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2800bc08e4ab4c116f556f17791936c889191fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2800bc08e4ab4c116f556f17791936c889191fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2800bc08e4ab4c116f556f17791936c889191fbf/comments", "author": null, "committer": null, "parents": [{"sha": "cc3bf3404e4b1cdd1110e450bd5df45fdaaaae85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc3bf3404e4b1cdd1110e450bd5df45fdaaaae85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc3bf3404e4b1cdd1110e450bd5df45fdaaaae85"}], "stats": {"total": 3166, "additions": 3166, "deletions": 0}, "files": [{"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "libstdc++-v3/src/c++17/fast_float/LOCAL_PATCHES", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FLOCAL_PATCHES?ref=2800bc08e4ab4c116f556f17791936c889191fbf"}, {"sha": "43bdc3981c86bd339783b0fc699114ea1676faa1", "filename": "libstdc++-v3/src/c++17/fast_float/MERGE", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FMERGE?ref=2800bc08e4ab4c116f556f17791936c889191fbf", "patch": "@@ -0,0 +1,4 @@\n+d35368cae610b4edeec61cd41e4d2367a4d33f58\n+\n+The first line of this file holds the git revision number of the\n+last merge done from the master library sources."}, {"sha": "1e1c06d0a3effc176803dcdbd067f7fc1e70c9db", "filename": "libstdc++-v3/src/c++17/fast_float/README.md", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FREADME.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FREADME.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2FREADME.md?ref=2800bc08e4ab4c116f556f17791936c889191fbf", "patch": "@@ -0,0 +1,218 @@\n+## fast_float number parsing library: 4x faster than strtod\n+\n+![Ubuntu 20.04 CI (GCC 9)](https://github.com/lemire/fast_float/workflows/Ubuntu%2020.04%20CI%20(GCC%209)/badge.svg)\n+![Ubuntu 18.04 CI (GCC 7)](https://github.com/lemire/fast_float/workflows/Ubuntu%2018.04%20CI%20(GCC%207)/badge.svg)\n+![Alpine Linux](https://github.com/lemire/fast_float/workflows/Alpine%20Linux/badge.svg)\n+![MSYS2-CI](https://github.com/lemire/fast_float/workflows/MSYS2-CI/badge.svg)\n+![VS16-CLANG-CI](https://github.com/lemire/fast_float/workflows/VS16-CLANG-CI/badge.svg)\n+[![VS16-CI](https://github.com/fastfloat/fast_float/actions/workflows/vs16-ci.yml/badge.svg)](https://github.com/fastfloat/fast_float/actions/workflows/vs16-ci.yml)\n+\n+The fast_float library provides fast header-only implementations for the C++ from_chars\n+functions for `float` and `double` types.  These functions convert ASCII strings representing\n+decimal values (e.g., `1.3e10`) into binary types. We provide exact rounding (including\n+round to even). In our experience, these `fast_float` functions many times faster than comparable number-parsing functions from existing C++ standard libraries.\n+\n+Specifically, `fast_float` provides the following two functions with a C++17-like syntax (the library itself only requires C++11):\n+\n+```C++\n+from_chars_result from_chars(const char* first, const char* last, float& value, ...);\n+from_chars_result from_chars(const char* first, const char* last, double& value, ...);\n+```\n+\n+The return type (`from_chars_result`) is defined as the struct:\n+```C++\n+struct from_chars_result {\n+    const char* ptr;\n+    std::errc ec;\n+};\n+```\n+\n+It parses the character sequence [first,last) for a number. It parses floating-point numbers expecting\n+a locale-independent format equivalent to the C++17 from_chars function. \n+The resulting floating-point value is the closest floating-point values (using either float or double), \n+using the \"round to even\" convention for values that would otherwise fall right in-between two values.\n+That is, we provide exact parsing according to the IEEE standard.\n+\n+\n+Given a successful parse, the pointer (`ptr`) in the returned value is set to point right after the\n+parsed number, and the `value` referenced is set to the parsed value. In case of error, the returned\n+`ec` contains a representative error, otherwise the default (`std::errc()`) value is stored.\n+\n+The implementation does not throw and does not allocate memory (e.g., with `new` or `malloc`).\n+\n+It will parse infinity and nan values.\n+\n+Example:\n+\n+``` C++\n+#include \"fast_float/fast_float.h\"\n+#include <iostream>\n+ \n+int main() {\n+    const std::string input =  \"3.1416 xyz \";\n+    double result;\n+    auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\n+    if(answer.ec != std::errc()) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n+    std::cout << \"parsed the number \" << result << std::endl;\n+    return EXIT_SUCCESS;\n+}\n+```\n+\n+\n+Like the C++17 standard, the `fast_float::from_chars` functions take an optional last argument of\n+the type `fast_float::chars_format`. It is a bitset value: we check whether \n+`fmt & fast_float::chars_format::fixed` and `fmt & fast_float::chars_format::scientific` are set\n+to determine whether we allow the fixed point and scientific notation respectively.\n+The default is  `fast_float::chars_format::general` which allows both `fixed` and `scientific`.\n+\n+The library seeks to follow the C++17 (see [20.19.3](http://eel.is/c++draft/charconv.from.chars).(7.1))  specification. \n+* The `from_chars` function does not skip leading white-space characters.\n+* [A leading `+` sign](https://en.cppreference.com/w/cpp/utility/from_chars) is forbidden.\n+* It is generally impossible to represent a decimal value exactly as binary floating-point number (`float` and `double` types). We seek the nearest value. We round to an even mantissa when we are in-between two binary floating-point numbers. \n+\n+Furthermore, we have the following restrictions:\n+* We only support `float` and `double` types at this time.\n+* We only support the decimal format: we do not support hexadecimal strings.\n+* For values that are either very large or very small (e.g., `1e9999`), we represent it using the infinity or negative infinity value.\n+\n+We support Visual Studio, macOS, Linux, freeBSD. We support big and little endian. We support 32-bit and 64-bit systems.\n+\n+\n+\n+## Using commas as decimal separator\n+\n+\n+The C++ standard stipulate that `from_chars` has to be locale-independent. In\n+particular, the decimal separator has to be the period (`.`). However, \n+some users still want to use the `fast_float` library with in a locale-dependent \n+manner. Using a separate function called `from_chars_advanced`, we allow the users\n+to pass a `parse_options` instance which contains a custom decimal separator (e.g., \n+the comma). You may use it as follows.\n+\n+```C++\n+#include \"fast_float/fast_float.h\"\n+#include <iostream>\n+ \n+int main() {\n+    const std::string input =  \"3,1416 xyz \";\n+    double result;\n+    fast_float::parse_options options{fast_float::chars_format::general, ','};\n+    auto answer = fast_float::from_chars_advanced(input.data(), input.data()+input.size(), result, options);\n+    if((answer.ec != std::errc()) || ((result != 3.1416))) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n+    std::cout << \"parsed the number \" << result << std::endl;\n+    return EXIT_SUCCESS;\n+}\n+```\n+\n+\n+## Reference\n+\n+- Daniel Lemire, [Number Parsing at a Gigabyte per Second](https://arxiv.org/abs/2101.11408), Software: Pratice and Experience 51 (8), 2021.\n+\n+## Other programming languages\n+\n+- [There is an R binding](https://github.com/eddelbuettel/rcppfastfloat) called `rcppfastfloat`.\n+- [There is a Rust port of the fast_float library](https://github.com/aldanor/fast-float-rust/) called `fast-float-rust`.\n+- [There is a Java port of the fast_float library](https://github.com/wrandelshofer/FastDoubleParser) called `FastDoubleParser`.\n+- [There is a C# port of the fast_float library](https://github.com/CarlVerret/csFastFloat) called `csFastFloat`.\n+\n+\n+## Relation With Other Work\n+\n+The fastfloat algorithm is part of the [LLVM standard libraries](https://github.com/llvm/llvm-project/commit/87c016078ad72c46505461e4ff8bfa04819fe7ba). \n+\n+The fast_float library provides a performance similar to that of the [fast_double_parser](https://github.com/lemire/fast_double_parser) library but using an updated algorithm reworked from the ground up, and while offering an API more in line with the expectations of C++ programmers. The fast_double_parser library is part of the [Microsoft LightGBM machine-learning framework](https://github.com/microsoft/LightGBM).\n+\n+## Users\n+\n+The fast_float library is used by [Apache Arrow](https://github.com/apache/arrow/pull/8494) where it multiplied the number parsing speed by two or three times. It is also used by [Yandex ClickHouse](https://github.com/ClickHouse/ClickHouse) and by [Google Jsonnet](https://github.com/google/jsonnet).\n+\n+\n+## How fast is it?\n+\n+It can parse random floating-point numbers at a speed of 1 GB/s on some systems. We find that it is often twice as fast as the best available competitor, and many times faster than many standard-library implementations.\n+\n+<img src=\"http://lemire.me/blog/wp-content/uploads/2020/11/fastfloat_speed.png\" width=\"400\">\n+\n+```\n+$ ./build/benchmarks/benchmark \n+# parsing random integers in the range [0,1)\n+volume = 2.09808 MB \n+netlib                                  :   271.18 MB/s (+/- 1.2 %)    12.93 Mfloat/s  \n+doubleconversion                        :   225.35 MB/s (+/- 1.2 %)    10.74 Mfloat/s  \n+strtod                                  :   190.94 MB/s (+/- 1.6 %)     9.10 Mfloat/s  \n+abseil                                  :   430.45 MB/s (+/- 2.2 %)    20.52 Mfloat/s  \n+fastfloat                               :  1042.38 MB/s (+/- 9.9 %)    49.68 Mfloat/s  \n+```\n+\n+See https://github.com/lemire/simple_fastfloat_benchmark for our benchmarking code.\n+\n+\n+## Video\n+\n+[![Go Systems 2020](http://img.youtube.com/vi/AVXgvlMeIm4/0.jpg)](http://www.youtube.com/watch?v=AVXgvlMeIm4)<br />\n+\n+## Using as a CMake dependency\n+\n+This library is header-only by design. The CMake file provides the `fast_float` target\n+which is merely a pointer to the `include` directory.\n+\n+If you drop the `fast_float` repository in your CMake project, you should be able to use\n+it in this manner:\n+\n+```cmake\n+add_subdirectory(fast_float)\n+target_link_libraries(myprogram PUBLIC fast_float)\n+```\n+\n+Or you may want to retrieve the dependency automatically if you have a sufficiently recent version of CMake (3.11 or better at least):\n+\n+```cmake\n+FetchContent_Declare(\n+  fast_float\n+  GIT_REPOSITORY https://github.com/lemire/fast_float.git\n+  GIT_TAG tags/v1.1.2\n+  GIT_SHALLOW TRUE)\n+\n+FetchContent_MakeAvailable(fast_float)\n+target_link_libraries(myprogram PUBLIC fast_float)\n+\n+```\n+\n+You should change the `GIT_TAG` line so that you recover the version you wish to use.\n+\n+## Using as single header\n+\n+The script `script/amalgamate.py` may be used to generate a single header \n+version of the library if so desired.\n+Just run the script from the root directory of this repository. \n+You can customize the license type and output file if desired as described in\n+the command line help.\n+\n+You may directly download automatically generated single-header files:\n+\n+https://github.com/fastfloat/fast_float/releases/download/v1.1.2/fast_float.h\n+\n+## Credit\n+\n+Though this work is inspired by many different people, this work benefited especially from exchanges with \n+Michael Eisel, who motivated the original research with his key insights, and with Nigel Tao who provided \n+invaluable feedback. R\u00e9my Oudompheng first implemented a fast path we use in the case of long digits.\n+\n+The library includes code adapted from Google Wuffs (written by Nigel Tao) which was originally published \n+under the Apache 2.0 license.\n+\n+## License\n+\n+<sup>\n+Licensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n+2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n+</sup>\n+\n+<br>\n+\n+<sub>\n+Unless you explicitly state otherwise, any contribution intentionally submitted\n+for inclusion in this repository by you, as defined in the Apache-2.0 license,\n+shall be dual licensed as above, without any additional terms or conditions.\n+</sub>"}, {"sha": "8a45ebca8a8036530a7093718a4c5ca8999a64b9", "filename": "libstdc++-v3/src/c++17/fast_float/fast_float.h", "status": "added", "additions": 2944, "deletions": 0, "changes": 2944, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2800bc08e4ab4c116f556f17791936c889191fbf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffast_float%2Ffast_float.h?ref=2800bc08e4ab4c116f556f17791936c889191fbf"}]}