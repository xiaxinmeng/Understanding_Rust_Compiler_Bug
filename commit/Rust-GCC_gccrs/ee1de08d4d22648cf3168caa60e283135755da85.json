{"sha": "ee1de08d4d22648cf3168caa60e283135755da85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxZGUwOGQ0ZDIyNjQ4Y2YzMTY4Y2FhNjBlMjgzMTM1NzU1ZGE4NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-12-03T19:27:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-12-03T19:27:47Z"}, "message": "re PR c++/91369 (Implement P0784R7: constexpr new)\n\n\tPR c++/91369\n\t* constexpr.c (struct constexpr_global_ctx): Add cleanups member,\n\tinitialize it in the ctor.\n\t(cxx_eval_constant_expression) <case TARGET_EXPR>: If TARGET_EXPR_SLOT\n\tis already in the values hash_map, don't evaluate it again.  Put\n\tTARGET_EXPR_SLOT into hash_map even if not lval, and push it into\n\tsave_exprs too.  If there is TARGET_EXPR_CLEANUP and not\n\tCLEANUP_EH_ONLY, push the cleanup to cleanups vector.\n\t<case CLEANUP_POINT_EXPR>: Save outer cleanups, set cleanups to\n\tlocal auto_vec, after evaluating the body evaluate cleanups and\n\trestore previous cleanups.\n\t<case TRY_CATCH_EXPR>: Don't crash if the first operand is NULL_TREE.\n\t(cxx_eval_outermost_constant_expr): Set cleanups to local auto_vec,\n\tafter evaluating the expression evaluate cleanups.\n\n\t* g++.dg/cpp2a/constexpr-new8.C: New test.\n\nFrom-SVN: r278945", "tree": {"sha": "e083274d278bc2660e28c8e0c3930a6bb161b171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e083274d278bc2660e28c8e0c3930a6bb161b171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1de08d4d22648cf3168caa60e283135755da85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1de08d4d22648cf3168caa60e283135755da85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1de08d4d22648cf3168caa60e283135755da85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1de08d4d22648cf3168caa60e283135755da85/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21cd8589291a1b415106740acd56509e0143356d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cd8589291a1b415106740acd56509e0143356d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cd8589291a1b415106740acd56509e0143356d"}], "stats": {"total": 119, "additions": 103, "deletions": 16}, "files": [{"sha": "02c730eb1d9113224808fb1e61131bb4d15501e6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee1de08d4d22648cf3168caa60e283135755da85", "patch": "@@ -1,3 +1,20 @@\n+2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91369\n+\t* constexpr.c (struct constexpr_global_ctx): Add cleanups member,\n+\tinitialize it in the ctor.\n+\t(cxx_eval_constant_expression) <case TARGET_EXPR>: If TARGET_EXPR_SLOT\n+\tis already in the values hash_map, don't evaluate it again.  Put\n+\tTARGET_EXPR_SLOT into hash_map even if not lval, and push it into\n+\tsave_exprs too.  If there is TARGET_EXPR_CLEANUP and not\n+\tCLEANUP_EH_ONLY, push the cleanup to cleanups vector.\n+\t<case CLEANUP_POINT_EXPR>: Save outer cleanups, set cleanups to\n+\tlocal auto_vec, after evaluating the body evaluate cleanups and\n+\trestore previous cleanups.\n+\t<case TRY_CATCH_EXPR>: Don't crash if the first operand is NULL_TREE.\n+\t(cxx_eval_outermost_constant_expr): Set cleanups to local auto_vec,\n+\tafter evaluating the expression evaluate cleanups.\n+\n 2019-12-03  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91363 - P0960R3: Parenthesized initialization of aggregates."}, {"sha": "5afcc876e7643360dec9e03da655f529a1d471e4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 63, "deletions": 16, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=ee1de08d4d22648cf3168caa60e283135755da85", "patch": "@@ -1025,8 +1025,10 @@ struct constexpr_global_ctx {\n   /* Heap VAR_DECLs created during the evaluation of the outermost constant\n      expression.  */\n   auto_vec<tree, 16> heap_vars;\n+  /* Cleanups that need to be evaluated at the end of CLEANUP_POINT_EXPR.  */\n+  vec<tree> *cleanups;\n   /* Constructor.  */\n-  constexpr_global_ctx () : constexpr_ops_count (0) {}\n+  constexpr_global_ctx () : constexpr_ops_count (0), cleanups (NULL) {}\n };\n \n /* The constexpr expansion context.  CALL is the current function\n@@ -1039,8 +1041,8 @@ struct constexpr_ctx {\n   constexpr_global_ctx *global;\n   /* The innermost call we're evaluating.  */\n   constexpr_call *call;\n-  /* SAVE_EXPRs that we've seen within the current LOOP_EXPR.  NULL if we\n-     aren't inside a loop.  */\n+  /* SAVE_EXPRs and TARGET_EXPR_SLOT vars of TARGET_EXPRs that we've seen\n+     within the current LOOP_EXPR.  NULL if we aren't inside a loop.  */\n   vec<tree> *save_exprs;\n   /* The CONSTRUCTOR we're currently building up for an aggregate\n      initializer.  */\n@@ -2085,8 +2087,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  else\n \t    ctx->global->values.put (res, NULL_TREE);\n \n-\t  /* Track the callee's evaluated SAVE_EXPRs so that we can forget\n-\t     their values after the call.  */\n+\t  /* Track the callee's evaluated SAVE_EXPRs and TARGET_EXPRs so that\n+\t     we can forget their values after the call.  */\n \t  constexpr_ctx ctx_with_save_exprs = *ctx;\n \t  auto_vec<tree, 10> save_exprs;\n \t  ctx_with_save_exprs.save_exprs = &save_exprs;\n@@ -2135,7 +2137,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t      TREE_READONLY (e) = true;\n \t    }\n \n-\t  /* Forget the saved values of the callee's SAVE_EXPRs.  */\n+\t  /* Forget the saved values of the callee's SAVE_EXPRs and\n+\t     TARGET_EXPRs.  */\n \t  unsigned int i;\n \t  tree save_expr;\n \t  FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n@@ -4635,7 +4638,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t    gcc_assert (*jump_target);\n \t}\n \n-      /* Forget saved values of SAVE_EXPRs.  */\n+      /* Forget saved values of SAVE_EXPRs and TARGET_EXPRs.  */\n       unsigned int i;\n       tree save_expr;\n       FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n@@ -4659,7 +4662,7 @@ cxx_eval_loop_expr (const constexpr_ctx *ctx, tree t,\n \t && (!switches (jump_target) || count == 0)\n \t && !*non_constant_p);\n \n-  /* Forget saved values of SAVE_EXPRs.  */\n+  /* Forget saved values of SAVE_EXPRs and TARGET_EXPRs.  */\n   unsigned int i;\n   tree save_expr;\n   FOR_EACH_VEC_ELT (save_exprs, i, save_expr)\n@@ -5004,6 +5007,14 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t  *non_constant_p = true;\n \t  break;\n \t}\n+      /* Avoid evaluating a TARGET_EXPR more than once.  */\n+      if (tree *p = ctx->global->values.get (TARGET_EXPR_SLOT (t)))\n+\t{\n+\t  if (lval)\n+\t    return TARGET_EXPR_SLOT (t);\n+\t  r = *p;\n+\t  break;\n+\t}\n       if ((AGGREGATE_TYPE_P (TREE_TYPE (t)) || VECTOR_TYPE_P (TREE_TYPE (t))))\n \t{\n \t  /* We're being expanded without an explicit target, so start\n@@ -5024,13 +5035,14 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       if (!*non_constant_p)\n \t/* Adjust the type of the result to the type of the temporary.  */\n \tr = adjust_temp_type (TREE_TYPE (t), r);\n+      if (TARGET_EXPR_CLEANUP (t) && !CLEANUP_EH_ONLY (t))\n+\tctx->global->cleanups->safe_push (TARGET_EXPR_CLEANUP (t));\n+      r = unshare_constructor (r);\n+      ctx->global->values.put (TARGET_EXPR_SLOT (t), r);\n+      if (ctx->save_exprs)\n+\tctx->save_exprs->safe_push (TARGET_EXPR_SLOT (t));\n       if (lval)\n-\t{\n-\t  tree slot = TARGET_EXPR_SLOT (t);\n-\t  r = unshare_constructor (r);\n-\t  ctx->global->values.put (slot, r);\n-\t  return slot;\n-\t}\n+\treturn TARGET_EXPR_SLOT (t);\n       break;\n \n     case INIT_EXPR:\n@@ -5080,10 +5092,15 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t}\n       break;\n \n-    case NON_LVALUE_EXPR:\n     case TRY_CATCH_EXPR:\n+      if (TREE_OPERAND (t, 0) == NULL_TREE)\n+\t{\n+\t  r = void_node;\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n+    case NON_LVALUE_EXPR:\n     case TRY_BLOCK:\n-    case CLEANUP_POINT_EXPR:\n     case MUST_NOT_THROW_EXPR:\n     case EXPR_STMT:\n     case EH_SPEC_BLOCK:\n@@ -5093,6 +5110,26 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\tjump_target);\n       break;\n \n+    case CLEANUP_POINT_EXPR:\n+      {\n+\tauto_vec<tree, 2> cleanups;\n+\tvec<tree> *prev_cleanups = ctx->global->cleanups;\n+\tctx->global->cleanups = &cleanups;\n+\tr = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0),\n+\t\t\t\t\t  lval,\n+\t\t\t\t\t  non_constant_p, overflow_p,\n+\t\t\t\t\t  jump_target);\n+\tctx->global->cleanups = prev_cleanups;\n+\tunsigned int i;\n+\ttree cleanup;\n+\t/* Evaluate the cleanups.  */\n+\tFOR_EACH_VEC_ELT_REVERSE (cleanups, i, cleanup)\n+\t  cxx_eval_constant_expression (ctx, cleanup, false,\n+\t\t\t\t\tnon_constant_p, overflow_p,\n+\t\t\t\t\tjump_target);\n+      }\n+      break;\n+\n     case TRY_FINALLY_EXPR:\n       r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0), lval,\n \t\t\t\t\tnon_constant_p, overflow_p,\n@@ -5903,6 +5940,9 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n \tr = TARGET_EXPR_INITIAL (r);\n     }\n \n+  auto_vec<tree, 16> cleanups;\n+  global_ctx.cleanups = &cleanups;\n+\n   instantiate_constexpr_fns (r);\n   r = cxx_eval_constant_expression (&ctx, r,\n \t\t\t\t    false, &non_constant_p, &overflow_p);\n@@ -5912,6 +5952,13 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n   else\n     DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (object) = true;\n \n+  unsigned int i;\n+  tree cleanup;\n+  /* Evaluate the cleanups.  */\n+  FOR_EACH_VEC_ELT_REVERSE (cleanups, i, cleanup)\n+    cxx_eval_constant_expression (&ctx, cleanup, false,\n+\t\t\t\t  &non_constant_p, &overflow_p);\n+\n   /* Mutable logic is a bit tricky: we want to allow initialization of\n      constexpr variables with mutable members, but we can't copy those\n      members to another constexpr variable.  */"}, {"sha": "ec32c210d59c195308a3c26f5efc3143790535bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee1de08d4d22648cf3168caa60e283135755da85", "patch": "@@ -1,3 +1,8 @@\n+2019-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/91369\n+\t* g++.dg/cpp2a/constexpr-new8.C: New test.\n+\n 2019-12-03  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/acle/general-c/struct_1.c: New test."}, {"sha": "c9c852dfc37a777276b91acb79226112a76d1ef1", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-new8.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1de08d4d22648cf3168caa60e283135755da85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-new8.C?ref=ee1de08d4d22648cf3168caa60e283135755da85", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/91369\n+// { dg-do compile { target c++2a } }\n+\n+struct A {\n+  constexpr A () : p{new int} {}\n+  constexpr ~A () { delete p; }\n+  int *p;\n+};\n+\n+constexpr bool\n+test ()\n+{\n+  A{};\n+  return true;\n+}\n+\n+constexpr auto res = test ();\n+static_assert (res);"}]}