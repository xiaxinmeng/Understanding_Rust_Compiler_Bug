{"sha": "75c7c595ac14c1ea2ea36eecd1eab3e314903377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjN2M1OTVhYzE0YzFlYTJlYTM2ZWVjZDFlYWIzZTMxNDkwMzM3Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-12-13T10:17:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-12-13T10:17:36Z"}, "message": "re PR tree-optimization/17687 (sincos tree representation causes extra addressable vars)\n\n2006-12-13  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/17687\n\t* builtins.def (BUILT_IN_CEXPI, BUILT_IN_CEXPIF, BUILT_IN_CEXPIL):\n\tNew builtins for imaginary argument cexp.\n\t* builtin-types.def (BT_FN_COMPLEX_FLOAT_FLOAT,\n\tBT_FN_COMPLEX_DOUBLE_DOUBLE, BT_FN_COMPLEX_LONGDOUBLE_LONGDOUBLE):\n\tNew required builtin types.\n\t* builtins.c (expand_builtin_cexpi): Declare.\n\t(mathfn_built_in): Handle BUILT_IN_CEXPI.\n\t(expand_builtin_cexpi): New static helper.\n\t(expand_builtin): Call it.\n\t(do_mpfr_sincos): Adjust for CEXPI evaluation.\n\t(fold_builtin_sincos): New function to fold sincos to cepxi.\n\n\t* gcc.dg/builtins-59.c: New testcase.\n\nFrom-SVN: r119824", "tree": {"sha": "edd4f764129b7d185816c6c0b6b0db7d95bf7ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edd4f764129b7d185816c6c0b6b0db7d95bf7ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c7c595ac14c1ea2ea36eecd1eab3e314903377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c7c595ac14c1ea2ea36eecd1eab3e314903377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c7c595ac14c1ea2ea36eecd1eab3e314903377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c7c595ac14c1ea2ea36eecd1eab3e314903377/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54200abb68aed1ddf147251fcbe402549482d499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54200abb68aed1ddf147251fcbe402549482d499", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54200abb68aed1ddf147251fcbe402549482d499"}], "stats": {"total": 176, "additions": 172, "deletions": 4}, "files": [{"sha": "1f4301dfd394861c014508516d82a6acb8368e30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75c7c595ac14c1ea2ea36eecd1eab3e314903377", "patch": "@@ -1,3 +1,18 @@\n+2006-12-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/17687\n+\t* builtins.def (BUILT_IN_CEXPI, BUILT_IN_CEXPIF, BUILT_IN_CEXPIL):\n+\tNew builtins for imaginary argument cexp.\n+\t* builtin-types.def (BT_FN_COMPLEX_FLOAT_FLOAT,\n+\tBT_FN_COMPLEX_DOUBLE_DOUBLE, BT_FN_COMPLEX_LONGDOUBLE_LONGDOUBLE):\n+\tNew required builtin types.\n+\t* builtins.c (expand_builtin_cexpi): Declare.\n+\t(mathfn_built_in): Handle BUILT_IN_CEXPI.\n+\t(expand_builtin_cexpi): New static helper.\n+\t(expand_builtin): Call it.\n+\t(do_mpfr_sincos): Adjust for CEXPI evaluation.\n+\t(fold_builtin_sincos): New function to fold sincos to cepxi.\n+\n 2006-12-13  Richard Guenther  <rguenther@suse.de>\n \n \t* ipa-reference.c (scan_for_static_refs): Also scan"}, {"sha": "bac7480438c93020f0a499e40a8565c5c8011058", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=75c7c595ac14c1ea2ea36eecd1eab3e314903377", "patch": "@@ -159,6 +159,12 @@ DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_COMPLEX_DOUBLE,\n \t\t     BT_DOUBLE, BT_COMPLEX_DOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE,\n \t\t     BT_LONGDOUBLE, BT_COMPLEX_LONGDOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_FLOAT_FLOAT,\n+\t\t     BT_COMPLEX_FLOAT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_DOUBLE_DOUBLE,\n+\t\t     BT_COMPLEX_DOUBLE, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_LONGDOUBLE_LONGDOUBLE,\n+\t\t     BT_COMPLEX_LONGDOUBLE, BT_LONGDOUBLE)\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_UINT, BT_PTR, BT_UINT)\n DEF_FUNCTION_TYPE_1 (BT_FN_PTR_SIZE, BT_PTR, BT_SIZE)\n DEF_FUNCTION_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)"}, {"sha": "78b34338eb68d9249a99a61bdf6d06ce36f52615", "filename": "gcc/builtins.c", "status": "modified", "additions": 130, "deletions": 4, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=75c7c595ac14c1ea2ea36eecd1eab3e314903377", "patch": "@@ -94,6 +94,7 @@ static rtx expand_builtin_mathfn (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_mathfn_3 (tree, rtx, rtx);\n static rtx expand_builtin_sincos (tree);\n+static rtx expand_builtin_cexpi (tree, rtx, rtx);\n static rtx expand_builtin_int_roundingfn (tree, rtx, rtx);\n static rtx expand_builtin_int_roundingfn_2 (tree, rtx, rtx);\n static rtx expand_builtin_args_info (tree);\n@@ -1648,6 +1649,7 @@ mathfn_built_in (tree type, enum built_in_function fn)\n       CASE_MATHFN (BUILT_IN_ATANH)\n       CASE_MATHFN (BUILT_IN_CBRT)\n       CASE_MATHFN (BUILT_IN_CEIL)\n+      CASE_MATHFN (BUILT_IN_CEXPI)\n       CASE_MATHFN (BUILT_IN_COPYSIGN)\n       CASE_MATHFN (BUILT_IN_COS)\n       CASE_MATHFN (BUILT_IN_COSH)\n@@ -2215,6 +2217,78 @@ expand_builtin_sincos (tree exp)\n   return const0_rtx;\n }\n \n+/* Expand a call to the internal cexpi builtin to the sincos math function.\n+   EXP is the expression that is a call to the builtin function; if convenient,\n+   the result should be placed in TARGET.  SUBTARGET may be used as the target\n+   for computing one of EXP's operands.  */\n+\n+static rtx\n+expand_builtin_cexpi (tree exp, rtx target, rtx subtarget)\n+{\n+  tree fndecl = get_callee_fndecl (exp);\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  enum machine_mode mode;\n+  tree arg, type;\n+  rtx op0, op1, op2;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  type = TREE_TYPE (arg);\n+  mode = TYPE_MODE (TREE_TYPE (arg));\n+\n+  /* Try expanding via a sincos optab, fall back to emitting a libcall\n+     to sincos.  We are sure we have sincos either way because cexpi\n+     is only generated from sincos.  */\n+  if (sincos_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n+    {\n+      op1 = gen_reg_rtx (mode);\n+      op2 = gen_reg_rtx (mode);\n+\n+      op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+\n+      /* Compute into op1 and op2.  */\n+      expand_twoval_unop (sincos_optab, op0, op2, op1, 0);\n+    }\n+  else\n+    {\n+      tree call, narglist, fn = NULL_TREE;\n+      tree top1, top2;\n+      rtx op1a, op2a;\n+\n+      if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPIF)\n+\tfn = built_in_decls[BUILT_IN_SINCOSF];\n+      else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPI)\n+\tfn = built_in_decls[BUILT_IN_SINCOS];\n+      else if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_CEXPIL)\n+\tfn = built_in_decls[BUILT_IN_SINCOSL];\n+      gcc_assert (fn);\n+ \n+      op1 = assign_temp (TREE_TYPE (arg), 0, 1, 1);\n+      op2 = assign_temp (TREE_TYPE (arg), 0, 1, 1);\n+      op1a = copy_to_mode_reg (Pmode, XEXP (op1, 0));\n+      op2a = copy_to_mode_reg (Pmode, XEXP (op2, 0));\n+      top1 = make_tree (build_pointer_type (TREE_TYPE (arg)), op1a);\n+      top2 = make_tree (build_pointer_type (TREE_TYPE (arg)), op2a);\n+\n+      narglist = build_tree_list (NULL_TREE, top2);\n+      narglist = tree_cons (NULL_TREE, top1, narglist);\n+      narglist = tree_cons (NULL_TREE, arg, narglist);\n+\n+      /* Make sure not to fold the sincos call again.  */\n+      call = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n+      expand_normal (build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t     call, arglist, NULL_TREE));\n+    }\n+\n+  /* Now build the proper return type.  */\n+  return expand_expr (build2 (COMPLEX_EXPR, build_complex_type (type),\n+\t\t\t      make_tree (TREE_TYPE (arg), op2),\n+\t\t\t      make_tree (TREE_TYPE (arg), op1)),\n+\t\t      target, VOIDmode, 0);\n+}\n+\n /* Expand a call to one of the builtin rounding functions gcc defines\n    as an extension (lfloor and lceil).  As these are gcc extensions we\n    do not need to worry about setting errno to EDOM.\n@@ -5772,6 +5846,11 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \treturn target;\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_CEXPI):\n+      target = expand_builtin_cexpi (exp, target, subtarget);\n+      gcc_assert (target);\n+      return target;\n+\n     CASE_FLT_FN (BUILT_IN_SIN):\n     CASE_FLT_FN (BUILT_IN_COS):\n       if (! flag_unsafe_math_optimizations)\n@@ -7249,6 +7328,45 @@ fold_builtin_tan (tree arglist, tree type)\n   return NULL_TREE;\n }\n \n+/* Fold function call to builtin sincos, sincosf, or sincosl.  Return\n+   NULL_TREE if no simplification can be made.  */\n+\n+static tree\n+fold_builtin_sincos (tree arglist)\n+{\n+  tree type, arg0, arg1, arg2;\n+  tree res, fn, call;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, POINTER_TYPE,\n+\t\t\t POINTER_TYPE, VOID_TYPE))\n+    return NULL_TREE;\n+\n+  arg0 = TREE_VALUE (arglist);\n+  type = TREE_TYPE (arg0);\n+  arg1 = TREE_VALUE (TREE_CHAIN (arglist));\n+  arg2 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+\n+  /* Calculate the result when the argument is a constant.  */\n+  if ((res = do_mpfr_sincos (arg0, arg1, arg2)))\n+    return res;\n+\n+  /* Canonicalize sincos to cexpi.  */\n+  fn = mathfn_built_in (type, BUILT_IN_CEXPI);\n+  if (!fn)\n+    return NULL_TREE;\n+\n+  call = build_function_call_expr (fn, build_tree_list (NULL_TREE, arg0));\n+  call = builtin_save_expr (call);\n+\n+  return build2 (COMPOUND_EXPR, type,\n+\t\t build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t build_fold_indirect_ref (arg1),\n+\t\t\t build1 (IMAGPART_EXPR, type, call)),\n+\t\t build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t build_fold_indirect_ref (arg2),\n+\t\t\t build1 (REALPART_EXPR, type, call)));\n+}\n+\n /* Fold function call to builtin trunc, truncf or truncl.  Return\n    NULL_TREE if no simplification can be made.  */\n \n@@ -9192,10 +9310,11 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n       return fold_builtin_tan (arglist, type);\n \n     CASE_FLT_FN (BUILT_IN_SINCOS):\n-      if (validate_arglist (arglist, REAL_TYPE, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n-\treturn do_mpfr_sincos (TREE_VALUE (arglist), TREE_VALUE (TREE_CHAIN (arglist)),\n-\t\t\t       TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist))));\n-    break;\n+      return fold_builtin_sincos (arglist);\n+\n+    CASE_FLT_FN (BUILT_IN_CEXPI):\n+      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+\treturn do_mpfr_sincos (TREE_VALUE (arglist), NULL_TREE, NULL_TREE);\n \n     CASE_FLT_FN (BUILT_IN_SINH):\n       if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n@@ -11667,6 +11786,8 @@ do_mpfr_arg3 (tree arg1, tree arg2, tree arg3, tree type,\n \n /* If argument ARG is a REAL_CST, call mpfr_sin_cos() on it and set\n    the pointers *(ARG_SINP) and *(ARG_COSP) to the resulting values.\n+   If ARG_SINP and ARG_COSP are NULL then the result is returned\n+   as a complex value.\n    The type is taken from the type of ARG and is used for setting the\n    precision of the calculation and results.  */\n \n@@ -11698,6 +11819,11 @@ do_mpfr_sincos (tree arg, tree arg_sinp, tree arg_cosp)\n \t  mpfr_clears (m, ms, mc, NULL);\n \t  if (result_s && result_c)\n \t    {\n+\t      /* If we are to return in a complex value do so.  */\n+\t      if (!arg_sinp && !arg_cosp)\n+\t\treturn build_complex (build_complex_type (type),\n+\t\t\t\t      result_c, result_s);\n+\n \t      /* Dereference the sin/cos pointer arguments.  */\n \t      arg_sinp = build_fold_indirect_ref (arg_sinp);\n \t      arg_cosp = build_fold_indirect_ref (arg_cosp);"}, {"sha": "ca402a35ec7cd01863ebaae5a33466e778381e60", "filename": "gcc/builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=75c7c595ac14c1ea2ea36eecd1eab3e314903377", "patch": "@@ -452,6 +452,9 @@ DEF_C99_BUILTIN        (BUILT_IN_CCOSL, \"ccosl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLE\n DEF_C99_BUILTIN        (BUILT_IN_CEXP, \"cexp\", BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CEXPF, \"cexpf\", BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CEXPL, \"cexpl\", BT_FN_COMPLEX_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_CEXPI, \"cexpi\", BT_FN_COMPLEX_DOUBLE_DOUBLE, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_CEXPIF, \"cexpif\", BT_FN_COMPLEX_FLOAT_FLOAT, ATTR_MATHFN_FPROUNDING)\n+DEF_GCC_BUILTIN        (BUILT_IN_CEXPIL, \"cexpil\", BT_FN_COMPLEX_LONGDOUBLE_LONGDOUBLE, ATTR_MATHFN_FPROUNDING)\n DEF_C99_BUILTIN        (BUILT_IN_CIMAG, \"cimag\", BT_FN_DOUBLE_COMPLEX_DOUBLE, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CIMAGF, \"cimagf\", BT_FN_FLOAT_COMPLEX_FLOAT, ATTR_CONST_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN_CIMAGL, \"cimagl\", BT_FN_LONGDOUBLE_COMPLEX_LONGDOUBLE, ATTR_CONST_NOTHROW_LIST)"}, {"sha": "08dc8ef891b459604fd3145dce7c42c003230f91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75c7c595ac14c1ea2ea36eecd1eab3e314903377", "patch": "@@ -1,3 +1,8 @@\n+2006-12-13  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/17687\n+\t* gcc.dg/builtins-59.c: New testcase.\n+\n 2006-12-13  Ben Elliston  <bje@au.ibm.com>\n \n \t* gcc.target/spu/Wmain.c: New test."}, {"sha": "a7da71265d4d62a33270a69411aa5cdf2fba74da", "filename": "gcc/testsuite/gcc.dg/builtins-59.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-59.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c7c595ac14c1ea2ea36eecd1eab3e314903377/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-59.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-59.c?ref=75c7c595ac14c1ea2ea36eecd1eab3e314903377", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+\n+double test (double x)\n+{\n+  double s, c;\n+  __builtin_sincos (x, &s, &c);\n+  return s + c;\n+}\n+\n+/* { dg-final { scan-tree-dump \"__builtin_cexpi\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-not \"sincos\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}