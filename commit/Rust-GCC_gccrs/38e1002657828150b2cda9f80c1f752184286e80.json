{"sha": "38e1002657828150b2cda9f80c1f752184286e80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhlMTAwMjY1NzgyODE1MGIyY2RhOWY4MGMxZjc1MjE4NDI4NmU4MA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-19T20:59:33Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-02-26T15:33:18Z"}, "message": "c++: Fix value-init crash in template [PR93676]\n\nSince <https://gcc.gnu.org/ml/gcc-patches/2015-02/msg00556.html> we\nattempt to value-initialize in build_vec_init even when there's no\ninitializer but the type has a constexpr default constructor.  But\nbuild_value_init doesn't work in templates, and build_vec_init\ncreates a lot of garbage that would not be used anyway, so don't\ncall it in a template.\n\n\tPR c++/93676 - value-init crash in template.\n\t* init.c (build_new_1): Don't call build_vec_init in a template.\n\n\t* g++.dg/cpp0x/nsdmi-template19.C: New test.", "tree": {"sha": "848964a3def8a1c117965c14e08b2b68c378cbb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/848964a3def8a1c117965c14e08b2b68c378cbb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38e1002657828150b2cda9f80c1f752184286e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e1002657828150b2cda9f80c1f752184286e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e1002657828150b2cda9f80c1f752184286e80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e1002657828150b2cda9f80c1f752184286e80/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce13842b50cbd2676f2e322995182af20df31fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce13842b50cbd2676f2e322995182af20df31fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce13842b50cbd2676f2e322995182af20df31fe"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "d34730c6ec10c28db25334ffc87252828261aa95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=38e1002657828150b2cda9f80c1f752184286e80", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93676 - value-init crash in template.\n+\t* init.c (build_new_1): Don't call build_vec_init in a template.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93862 - ICE with static_cast when converting from int[]."}, {"sha": "61ed3aa7e93ef5cbc6bc6c87d3ae2c047ccde751", "filename": "gcc/cp/init.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=38e1002657828150b2cda9f80c1f752184286e80", "patch": "@@ -3511,13 +3511,17 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t  explicit_value_init_p = true;\n \t}\n \n-      if (processing_template_decl && explicit_value_init_p)\n+      if (processing_template_decl)\n \t{\n+\t  /* Avoid an ICE when converting to a base in build_simple_base_path.\n+\t     We'll throw this all away anyway, and build_new will create\n+\t     a NEW_EXPR.  */\n+\t  tree t = fold_convert (build_pointer_type (elt_type), data_addr);\n \t  /* build_value_init doesn't work in templates, and we don't need\n \t     the initializer anyway since we're going to throw it away and\n \t     rebuild it at instantiation time, so just build up a single\n \t     constructor call to get any appropriate diagnostics.  */\n-\t  init_expr = cp_build_fold_indirect_ref (data_addr);\n+\t  init_expr = cp_build_fold_indirect_ref (t);\n \t  if (type_build_ctor_call (elt_type))\n \t    init_expr = build_special_member_call (init_expr,\n \t\t\t\t\t\t   complete_ctor_identifier,"}, {"sha": "572989b2c7a00ab166a0e2137a72249672bd222f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38e1002657828150b2cda9f80c1f752184286e80", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/93676 - value-init crash in template.\n+\t* g++.dg/cpp0x/nsdmi-template19.C: New test.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93862 - ICE with static_cast when converting from int[]."}, {"sha": "f3e2cb87fd67f9caae663aa4141172963803c9b8", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template19.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38e1002657828150b2cda9f80c1f752184286e80/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template19.C?ref=38e1002657828150b2cda9f80c1f752184286e80", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/93676 - value-init crash in template.\n+// { dg-do compile { target c++11 } }\n+\n+struct P {\n+  int x = 0;\n+};\n+\n+template<class T>\n+struct S {\n+  S() { new P[2][2]; }\n+};\n+\n+S<int> s;"}]}