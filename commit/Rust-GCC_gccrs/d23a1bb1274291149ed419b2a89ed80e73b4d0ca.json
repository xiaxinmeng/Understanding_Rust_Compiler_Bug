{"sha": "d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzYTFiYjEyNzQyOTExNDllZDQxOWIyYTg5ZWQ4MGU3M2I0ZDBjYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-06-09T12:10:57Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-06-09T12:10:57Z"}, "message": "search.c (lookup_member): New fn.\n\n\t* search.c (lookup_member): New fn.\n\t* class.c (finish_struct_1): Use it.\n\t* decl.c (lookup_name_real): Use it.\n\nFrom-SVN: r20375", "tree": {"sha": "1b6c401c419abd68e88269dfb6e2db0aec238ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b6c401c419abd68e88269dfb6e2db0aec238ba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/comments", "author": null, "committer": null, "parents": [{"sha": "9ae4ec4602f0b57ac1a8c5a4d1ab38f96cf6a0c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ae4ec4602f0b57ac1a8c5a4d1ab38f96cf6a0c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ae4ec4602f0b57ac1a8c5a4d1ab38f96cf6a0c6"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "09249c47683234a294ec2f678a900d1142b02b21", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "patch": "@@ -1,3 +1,9 @@\n+1998-06-09  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* search.c (lookup_member): New fn.\n+\t* class.c (finish_struct_1): Use it.\n+\t* decl.c (lookup_name_real): Use it.\n+\n Mon Jun  8 20:45:52 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (decl2.o): Depend on dwarf2out.h and dwarfout.h."}, {"sha": "0e1aa26f422b121c4ebdc1277c5625aa431140a1", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "patch": "@@ -3210,9 +3210,7 @@ finish_struct_1 (t, warn_anon)\n \t      || sname == constructor_name_full (ctype))\n \t    cp_error_at (\"using-declaration for constructor\", x);\n \n-\t  fdecl = lookup_field (binfo, sname, 0, 0);\n-\t  if (! fdecl)\n-\t    fdecl = lookup_fnfields (binfo, sname, 0);\n+\t  fdecl = lookup_member (binfo, sname, 0, 0);\n \n \t  if (fdecl)\n \t    access_decls = scratch_tree_cons (access, fdecl, access_decls);"}, {"sha": "6324becec6b650f3fdb8e35f098da24e210a63b4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "patch": "@@ -2708,6 +2708,7 @@ extern tree compute_access\t\t\tPROTO((tree, tree));\n extern tree lookup_field\t\t\tPROTO((tree, tree, int, int));\n extern tree lookup_nested_field\t\t\tPROTO((tree, int));\n extern tree lookup_fnfields\t\t\tPROTO((tree, tree, int));\n+extern tree lookup_member\t\t\tPROTO((tree, tree, int, int));\n extern tree lookup_nested_tag\t\t\tPROTO((tree, tree));\n extern tree get_matching_virtual\t\tPROTO((tree, tree, int));\n extern tree get_abstract_virtuals\t\tPROTO((tree));"}, {"sha": "dd7ddead613d843cfc90c71eed620ed4858b30cc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "patch": "@@ -4816,7 +4816,7 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t  else if (type == current_class_type)\n \t    val = IDENTIFIER_CLASS_VALUE (name);\n \t  else\n-\t    val = lookup_field (type, name, 0, prefer_type);\n+\t    val = lookup_member (type, name, 0, prefer_type);\n \t}\n       else\n \tval = NULL_TREE;"}, {"sha": "e92e8d8e2b5ab0354f3ea759f2945cf480eaba2d", "filename": "gcc/cp/search.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d23a1bb1274291149ed419b2a89ed80e73b4d0ca/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d23a1bb1274291149ed419b2a89ed80e73b4d0ca", "patch": "@@ -2005,6 +2005,35 @@ lookup_fnfields (basetype_path, name, complain)\n \n   return rvals;\n }\n+\n+/* Look for a field or function named NAME in an inheritance lattice\n+   dominated by XBASETYPE.  PROTECT is zero if we can avoid computing\n+   access information, otherwise it is 1.  WANT_TYPE is 1 when we should\n+   only return TYPE_DECLs, if no TYPE_DECL can be found return NULL_TREE.  */\n+\n+tree\n+lookup_member (xbasetype, name, protect, want_type)\n+     tree xbasetype, name;\n+     int protect, want_type;\n+{\n+  tree ret, basetype_path;\n+\n+  if (TREE_CODE (xbasetype) == TREE_VEC)\n+    basetype_path = xbasetype;\n+  else if (IS_AGGR_TYPE_CODE (TREE_CODE (xbasetype)))\n+    {\n+      basetype_path = TYPE_BINFO (xbasetype);\n+      BINFO_VIA_PUBLIC (basetype_path) = 1;\n+      BINFO_INHERITANCE_CHAIN (basetype_path) = NULL_TREE;\n+    }\n+  else\n+    my_friendly_abort (97);\n+  \n+  ret = lookup_field (basetype_path, name, protect, want_type);\n+  if (! ret && ! want_type)\n+    ret = lookup_fnfields (basetype_path, name, protect);\n+  return ret;\n+}\n \f\n /* BREADTH-FIRST SEARCH ROUTINES.  */\n "}]}