{"sha": "2cb921f417450d570773b217b30c3e37c4307585", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiOTIxZjQxNzQ1MGQ1NzA3NzNiMjE3YjMwYzNlMzdjNDMwNzU4NQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-03-21T23:15:38Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-03-21T23:15:38Z"}, "message": "langhooks.c (lhd_tree_inlining_cannot_inline_tree_fn): Check flag_really_no_inline instead of optimize == 0.\n\n2002-03-21  Aldy Hernandez  <aldyh@redhat.com>\n\n        * langhooks.c (lhd_tree_inlining_cannot_inline_tree_fn): Check\n        flag_really_no_inline instead of optimize == 0.\n\n        * c-objc-common.c (c_cannot_inline_tree_fn): Same.\n\n        * cp/tree.c (cp_cannot_inline_tree_fn): Same.\n\n        * flags.h (flag_really_no_inline): New.\n\n        * c-common.c (c_common_post_options): Initialzie\n        flag_really_no_inline.\n\n        * toplev.c (flag_really_no_inline): New.\n\nFrom-SVN: r51146", "tree": {"sha": "3beb113603745e909f02ca89d980838212400f0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3beb113603745e909f02ca89d980838212400f0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cb921f417450d570773b217b30c3e37c4307585", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb921f417450d570773b217b30c3e37c4307585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb921f417450d570773b217b30c3e37c4307585", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb921f417450d570773b217b30c3e37c4307585/comments", "author": null, "committer": null, "parents": [{"sha": "239b8b9dd67cfcf41249d63d21a49773f5b26006", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/239b8b9dd67cfcf41249d63d21a49773f5b26006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/239b8b9dd67cfcf41249d63d21a49773f5b26006"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "67d1cd5992458439585ff5898fc22584f63caaac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -1,3 +1,19 @@\n+2002-03-21  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * langhooks.c (lhd_tree_inlining_cannot_inline_tree_fn): Check\n+        flag_really_no_inline instead of optimize == 0.\n+\n+        * c-objc-common.c (c_cannot_inline_tree_fn): Same.\n+\n+        * cp/tree.c (cp_cannot_inline_tree_fn): Same.\n+\n+        * flags.h (flag_really_no_inline): New.\n+\n+        * c-common.c (c_common_post_options): Initialzie\n+        flag_really_no_inline.\n+\n+        * toplev.c (flag_really_no_inline): New.\n+\n 2002-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/avr/avr.md (length): Fix length computation for\n@@ -360,6 +376,7 @@ Tue Mar 19 14:12:32 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(movqi): Use gen_lowpart in place of gen_rtx_SUBREG.\n \tReplace gen_rtx (SUBREG) with gen_rtx_SUBREG.\n \n+>>>>>>> 1.13452\n 2002-03-18  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* config/rs6000/rs6000.h (PREDICATE_CODES): Add PARALLEL to"}, {"sha": "228f41b10fe9ed0b561ba7e712e36fdfe383b43a", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -4100,6 +4100,9 @@ c_common_post_options ()\n {\n   cpp_post_options (parse_in);\n \n+  /* Save no-inline information we may clobber below.  */\n+  flag_really_no_inline = flag_no_inline;\n+\n   flag_inline_trees = 1;\n \n   /* Use tree inlining if possible.  Function instrumentation is only"}, {"sha": "6c0aef673f70fd5d7bd5617727853f166fcf0b0a", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -146,7 +146,7 @@ c_cannot_inline_tree_fn (fnp)\n   tree fn = *fnp;\n   tree t;\n \n-  if (optimize == 0\n+  if (flag_really_no_inline\n       && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n     return 1;\n "}, {"sha": "4f1b168d7ca2f1d8c57e004df4d9dde7f1a6f66a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -2131,7 +2131,7 @@ cp_cannot_inline_tree_fn (fnp)\n {\n   tree fn = *fnp;\n \n-  if (optimize == 0\n+  if (flag_really_no_inline\n       && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) == NULL)\n     return 1;\n "}, {"sha": "a3e4a043bf542b7553837cbf3c321e354d476504", "filename": "gcc/flags.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -380,6 +380,11 @@ extern int flag_keep_inline_functions;\n \n extern int flag_no_inline;\n \n+/* Nonzero means that we don't want inlining by virtue of -fno-inline,\n+   not just because the tree inliner turned us off.  */\n+\n+extern int flag_really_no_inline;\n+\n /* Nonzero if we are only using compiler to check syntax errors.  */\n \n extern int flag_syntax_only;"}, {"sha": "4c4d7d6f1204cb7ad1ce840c03c1b4fc736fda69", "filename": "gcc/langhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -174,7 +174,7 @@ int\n lhd_tree_inlining_cannot_inline_tree_fn (fnp)\n      tree *fnp;\n {\n-  if (optimize == 0\n+  if (flag_really_no_inline\n       && lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (*fnp)) == NULL)\n     return 1;\n "}, {"sha": "121d3f782bb7fc9a836460c514a27c6ad23e2810", "filename": "gcc/toplev.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb921f417450d570773b217b30c3e37c4307585/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2cb921f417450d570773b217b30c3e37c4307585", "patch": "@@ -646,6 +646,11 @@ int flag_keep_inline_functions;\n \n int flag_no_inline;\n \n+/* Nonzero means that we don't want inlining by virtue of -fno-inline,\n+   not just because the tree inliner turned us off.  */\n+\n+int flag_really_no_inline;\n+\n /* Nonzero means that we should emit static const variables\n    regardless of whether or not optimization is turned on.  */\n "}]}