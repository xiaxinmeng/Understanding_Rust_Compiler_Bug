{"sha": "1be3429587ab561a658cf1e90fcf00a7a51a645a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlMzQyOTU4N2FiNTYxYTY1OGNmMWU5MGZjZjAwYTdhNTFhNjQ1YQ==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-22T04:26:50Z"}, "committer": {"name": "Ramana Radhakrishnan", "email": "ramana@gcc.gnu.org", "date": "2015-10-22T04:26:50Z"}, "message": "[Patch AArch64 63304] Fix issue with global state.\n\n\nJiong pointed out privately that there was a thinko\nin the way in which the global state was being\nset and reset. I don't like adding such\nglobal state but ....\n\n\n2015-10-22  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        PR target/63304\n        * config/aarch64/aarch64.c (aarch64_nopcrelative_literal_loads): New.\n        (aarch64_expand_mov_immediate): Use aarch64_nopcrelative_literal_loads.\n        (aarch64_classify_address): Likewise.\n        (aarch64_secondary_reload): Likewise.\n        (aarch64_override_options_after_change_1): Adjust.\n        * config/aarch64/aarch64.md (aarch64_reload_movcp<GPF_TF:mode><P:mode>):\n        Use aarch64_nopcrelative_literal_loads.\n        (aarch64_reload_movcp<VALL:mode><P:mode>): Likewise.\n        * config/aarch64/aarch64-protos.h (aarch64_nopcrelative_literal_loads): \n\tDeclare\n\n2015-10-22  Jiong Wang  <jiong.wang@arm.com>\n            Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n\n        PR target/63304\n        * gcc.target/aarch64/pr63304_1.c: New test.\n\nFrom-SVN: r229160", "tree": {"sha": "a72028ff5f01d94492c05b6feb2d35b23d572e8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72028ff5f01d94492c05b6feb2d35b23d572e8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1be3429587ab561a658cf1e90fcf00a7a51a645a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be3429587ab561a658cf1e90fcf00a7a51a645a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1be3429587ab561a658cf1e90fcf00a7a51a645a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1be3429587ab561a658cf1e90fcf00a7a51a645a/comments", "author": null, "committer": null, "parents": [{"sha": "01f32f32aab2a474cbed3836e0d84a9fd943b69a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01f32f32aab2a474cbed3836e0d84a9fd943b69a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01f32f32aab2a474cbed3836e0d84a9fd943b69a"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "11116c42605012e641f7e820bd98d0e0adf932fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1be3429587ab561a658cf1e90fcf00a7a51a645a", "patch": "@@ -1,3 +1,16 @@\n+2015-10-22  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/63304\n+\t* config/aarch64/aarch64.c (aarch64_nopcrelative_literal_loads): New.\n+\t(aarch64_expand_mov_immediate): Use aarch64_nopcrelative_literal_loads.\n+\t(aarch64_classify_address): Likewise.\n+\t(aarch64_secondary_reload): Likewise.\n+\t(aarch64_override_options_after_change_1): Adjust.\n+\t* config/aarch64/aarch64.md (aarch64_reload_movcp<GPF_TF:mode><P:mode>):\n+\tUse aarch64_nopcrelative_literal_loads.\n+\t(aarch64_reload_movcp<VALL:mode><P:mode>): Likewise.\n+\t* config/aarch64/aarch64-protos.h (aarch64_nopcrelative_literal_loads): Declare\n+\n 2015-10-21  Martin Sebor  <msebor@redhat.com>\n \n \tPR driver/68043"}, {"sha": "f5bb1c54a164c62577108553802115231dfdc09b", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=1be3429587ab561a658cf1e90fcf00a7a51a645a", "patch": "@@ -402,4 +402,5 @@ int aarch64_ccmp_mode_to_code (enum machine_mode mode);\n bool extract_base_offset_in_addr (rtx mem, rtx *base, rtx *offset);\n bool aarch64_operands_ok_for_ldpstp (rtx *, bool, enum machine_mode);\n bool aarch64_operands_adjust_ok_for_ldpstp (rtx *, bool, enum machine_mode);\n+extern bool aarch64_nopcrelative_literal_loads;\n #endif /* GCC_AARCH64_PROTOS_H */"}, {"sha": "cca7d98eff3aa40799e0727f0327d54e683e81a4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=1be3429587ab561a658cf1e90fcf00a7a51a645a", "patch": "@@ -147,6 +147,9 @@ enum aarch64_processor aarch64_tune = cortexa53;\n /* Mask to specify which instruction scheduling options should be used.  */\n unsigned long aarch64_tune_flags = 0;\n \n+/* Global flag for PC relative loads.  */\n+bool aarch64_nopcrelative_literal_loads;\n+\n /* Support for command line parsing of boolean flags in the tuning\n    structures.  */\n struct aarch64_flag_desc\n@@ -1535,7 +1538,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t     we need to expand the literal pool access carefully.\n \t     This is something that needs to be done in a number\n \t     of places, so could well live as a separate function.  */\n-\t  if (nopcrelative_literal_loads)\n+\t  if (aarch64_nopcrelative_literal_loads)\n \t    {\n \t      gcc_assert (can_create_pseudo_p ());\n \t      base = gen_reg_rtx (ptr_mode);\n@@ -3661,7 +3664,7 @@ aarch64_classify_address (struct aarch64_address_info *info,\n \t  return ((GET_CODE (sym) == LABEL_REF\n \t\t   || (GET_CODE (sym) == SYMBOL_REF\n \t\t       && CONSTANT_POOL_ADDRESS_P (sym)\n-\t\t       && !nopcrelative_literal_loads)));\n+\t\t       && !aarch64_nopcrelative_literal_loads)));\n \t}\n       return false;\n \n@@ -4895,7 +4898,7 @@ aarch64_secondary_reload (bool in_p ATTRIBUTE_UNUSED, rtx x,\n   if (MEM_P (x) && GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x)\n       && (SCALAR_FLOAT_MODE_P (GET_MODE (x))\n \t  || targetm.vector_mode_supported_p (GET_MODE (x)))\n-      && nopcrelative_literal_loads)\n+      && aarch64_nopcrelative_literal_loads)\n     {\n       sri->icode = aarch64_constant_pool_reload_icode (mode);\n       return NO_REGS;\n@@ -7550,7 +7553,7 @@ aarch64_override_options_after_change_1 (struct gcc_options *opts)\n   else if (opts->x_flag_omit_leaf_frame_pointer)\n     opts->x_flag_omit_frame_pointer = true;\n \n-  /* If not opzimizing for size, set the default\n+  /* If not optimizing for size, set the default\n      alignment to what the target wants.  */\n   if (!opts->x_optimize_size)\n     {\n@@ -7564,21 +7567,21 @@ aarch64_override_options_after_change_1 (struct gcc_options *opts)\n \n   /* If nopcrelative_literal_loads is set on the command line, this\n      implies that the user asked for PC relative literal loads.  */\n-  if (nopcrelative_literal_loads == 1)\n-    nopcrelative_literal_loads = 0;\n+  if (opts->x_nopcrelative_literal_loads == 1)\n+    aarch64_nopcrelative_literal_loads = false;\n \n   /* If it is not set on the command line, we default to no\n      pc relative literal loads.  */\n-  if (nopcrelative_literal_loads == 2)\n-    nopcrelative_literal_loads = 1;\n+  if (opts->x_nopcrelative_literal_loads == 2)\n+    aarch64_nopcrelative_literal_loads = true;\n \n   /* In the tiny memory model it makes no sense\n      to disallow non PC relative literal pool loads\n      as many other things will break anyway.  */\n-  if (nopcrelative_literal_loads\n+  if (opts->x_nopcrelative_literal_loads\n       && (aarch64_cmodel == AARCH64_CMODEL_TINY\n \t  || aarch64_cmodel == AARCH64_CMODEL_TINY_PIC))\n-    nopcrelative_literal_loads = 0;\n+    aarch64_nopcrelative_literal_loads = false;\n }\n \n /* 'Unpack' up the internal tuning structs and update the options"}, {"sha": "baa97fdf250b9d96c84123dd6cf0c4fd1bf2efb5", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=1be3429587ab561a658cf1e90fcf00a7a51a645a", "patch": "@@ -4510,7 +4510,7 @@\n  [(set (match_operand:GPF_TF 0 \"register_operand\" \"=w\")\n        (mem:GPF_TF (match_operand 1 \"aarch64_constant_pool_symref\" \"S\")))\n   (clobber (match_operand:P 2 \"register_operand\" \"=&r\"))]\n- \"TARGET_FLOAT && nopcrelative_literal_loads\"\n+ \"TARGET_FLOAT && aarch64_nopcrelative_literal_loads\"\n  {\n    aarch64_expand_mov_immediate (operands[2], XEXP (operands[1], 0));\n    emit_move_insn (operands[0], gen_rtx_MEM (<GPF_TF:MODE>mode, operands[2]));\n@@ -4523,7 +4523,7 @@\n  [(set (match_operand:VALL 0 \"register_operand\" \"=w\")\n        (mem:VALL (match_operand 1 \"aarch64_constant_pool_symref\" \"S\")))\n   (clobber (match_operand:P 2 \"register_operand\" \"=&r\"))]\n- \"TARGET_FLOAT && nopcrelative_literal_loads\"\n+ \"TARGET_FLOAT && aarch64_nopcrelative_literal_loads\"\n  {\n    aarch64_expand_mov_immediate (operands[2], XEXP (operands[1], 0));\n    emit_move_insn (operands[0], gen_rtx_MEM (<VALL:MODE>mode, operands[2]));"}, {"sha": "b952ac76bcda917a0f42af16f72f00c516550c09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1be3429587ab561a658cf1e90fcf00a7a51a645a", "patch": "@@ -1,3 +1,9 @@\n+2015-10-22  Jiong Wang  <jiong.wang@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\tPR target/63304\n+\t* gcc.target/aarch64/pr63304_1.c: New test.\n+\n 2015-10-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/66781"}, {"sha": "fa0fb56d9e1eae5e69ba0dee294102a2d57162ac", "filename": "gcc/testsuite/gcc.target/aarch64/pr63304_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr63304_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1be3429587ab561a658cf1e90fcf00a7a51a645a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr63304_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr63304_1.c?ref=1be3429587ab561a658cf1e90fcf00a7a51a645a", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 --save-temps\" } */\n+#pragma GCC push_options\n+#pragma GCC target (\"+nothing+simd, cmodel=small\")\n+\n+int\n+cal (float a)\n+{\n+  float b = 1.2;\n+  float c = 2.2;\n+  if ((a + b) != c)\n+    return 0;\n+  else\n+    return 1;\n+}\n+\n+#pragma GCC push_options\n+\n+#pragma GCC target (\"cmodel=large\")\n+\n+int\n+cal2 (float a)\n+{\n+\n+  float b = 1.2;\n+  float c = 2.2;\n+  if ((a + b) != c)\n+    return 0;\n+  else\n+    return 1;\n+}\n+\n+#pragma GCC pop_options\n+\n+int\n+cal3 (float a)\n+{\n+\n+  float b = 1.2;\n+  float c = 2.2;\n+  if ((a + b) != c)\n+    return 0;\n+  else\n+    return 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"adrp\" 6 } } */"}]}