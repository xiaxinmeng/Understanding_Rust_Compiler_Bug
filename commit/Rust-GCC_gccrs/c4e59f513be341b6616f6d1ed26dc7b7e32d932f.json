{"sha": "c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlNTlmNTEzYmUzNDFiNjYxNmY2ZDFlZDI2ZGM3YjdlMzJkOTMyZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-12-29T21:35:02Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-12-29T21:35:02Z"}, "message": "expr.c (store_field): Use adjust_address, not PUT_MODE.\n\n\t* expr.c (store_field): Use adjust_address, not PUT_MODE.\n\t(expand_expr, case VIEW_CONVERT_EXPR): Likewise.\n\t* reload1.c (eliminate_regs, case SUBREG): Likewise, but use\n\tadjust_address_nv.\n\t* varasm.c (make_decl_rtl): Likewise.\n\t* integrate.c (copy_rtx_and_substitute, case MEM): Likewise, but use\n\treplace_equiv_address_nv.\n\nFrom-SVN: r48387", "tree": {"sha": "4b74e331666c431f6ed796be6e9e7e894fd44eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b74e331666c431f6ed796be6e9e7e894fd44eb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/comments", "author": null, "committer": null, "parents": [{"sha": "44e3910ab7a6842e7435c1015d055c418761fa16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e3910ab7a6842e7435c1015d055c418761fa16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e3910ab7a6842e7435c1015d055c418761fa16"}], "stats": {"total": 39, "additions": 17, "deletions": 22}, "files": [{"sha": "af84a629c8fa1e892c1fefc97e4819dc936b5de9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "patch": "@@ -1,5 +1,13 @@\n Sat Dec 29 15:48:54 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* expr.c (store_field): Use adjust_address, not PUT_MODE.\n+\t(expand_expr, case VIEW_CONVERT_EXPR): Likewise.\n+\t* reload1.c (eliminate_regs, case SUBREG): Likewise, but use\n+\tadjust_address_nv.\n+\t* varasm.c (make_decl_rtl): Likewise.\n+\t* integrate.c (copy_rtx_and_substitute, case MEM): Likewise, but use\n+\treplace_equiv_address_nv.\n+\n \t* varasm.c (decode_addr_const, case INTEGER_CST): Call\n \toutput_constant_def instead of looking at TREE_CST_RTL.\n "}, {"sha": "60c3431f73a053bdcef7ef91a4715d21fcb3ad52", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "patch": "@@ -5006,9 +5006,7 @@ store_field (target, bitsize, bitpos, mode, exp, value_mode, unsignedp, type,\n \t= assign_temp\n \t  (build_qualified_type (type, TYPE_QUALS (type) | TYPE_QUAL_CONST),\n \t   0, 1, 1);\n-      rtx blk_object = copy_rtx (object);\n-\n-      PUT_MODE (blk_object, BLKmode);\n+      rtx blk_object = adjust_address (object, BLKmode, 0);\n \n       if (bitsize != (HOST_WIDE_INT) GET_MODE_BITSIZE (GET_MODE (target)))\n \temit_move_insn (object, target);\n@@ -7340,12 +7338,11 @@ expand_expr (exp, target, tmode, modifier)\n \t\t       (HOST_WIDE_INT) GET_MODE_SIZE (TYPE_MODE (type)));\n \t      rtx new = assign_stack_temp_for_type (TYPE_MODE (type),\n \t\t\t\t\t\t    temp_size, 0, type);\n-\t      rtx new_with_op0_mode = copy_rtx (new);\n+\t      rtx new_with_op0_mode = adjust_address (new, GET_MODE (op0), 0);\n \n \t      if (TREE_ADDRESSABLE (exp))\n \t\tabort ();\n \n-\t      PUT_MODE (new_with_op0_mode, GET_MODE (op0));\n \t      if (GET_MODE (op0) == BLKmode)\n \t\temit_block_move (new_with_op0_mode, op0,\n \t\t\t\t GEN_INT (GET_MODE_SIZE (TYPE_MODE (type))));\n@@ -7355,7 +7352,7 @@ expand_expr (exp, target, tmode, modifier)\n \t      op0 = new;\n \t    }\n       \n-\t  PUT_MODE (op0, TYPE_MODE (type));\n+\t  op0 = adjust_address (op0, TYPE_MODE (type), 0);\n \t}\n \n       return op0;"}, {"sha": "47c4a4db1351890210ee627a1ef6896133ee5c06", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "patch": "@@ -2263,10 +2263,9 @@ copy_rtx_and_substitute (orig, map, for_lhs)\n \t  return validize_mem (force_const_mem (const_mode, constant));\n \t}\n \n-      copy = rtx_alloc (MEM);\n-      PUT_MODE (copy, mode);\n-      XEXP (copy, 0) = copy_rtx_and_substitute (XEXP (orig, 0), map, 0);\n-      MEM_COPY_ATTRIBUTES (copy, orig);\n+     copy = replace_equiv_address_nv (orig,\n+\t\t\t\t      copy_rtx_and_substitute (XEXP (orig, 0),\n+\t\t\t\t\t\t\t       map, 0));\n \n       /* If inlining and this is not for the LHS, turn off RTX_UNCHANGING_P\n \t since this may be an indirect reference to a parameter and the"}, {"sha": "5844932d4cd7761464c0cab778709213684167ad", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "patch": "@@ -2552,14 +2552,7 @@ eliminate_regs (x, mem_mode, insn)\n \t\t   )\n \t\t  || x_size == new_size)\n \t      )\n-\t    {\n-\t      int offset = SUBREG_BYTE (x);\n-\t      enum machine_mode mode = GET_MODE (x);\n-\n-\t      PUT_MODE (new, mode);\n-\t      XEXP (new, 0) = plus_constant (XEXP (new, 0), offset);\n-\t      return new;\n-\t    }\n+\t    return adjust_address_nv (x, GET_MODE (x), SUBREG_BYTE (x));\n \t  else\n \t    return gen_rtx_SUBREG (GET_MODE (x), new, SUBREG_BYTE (x));\n \t}"}, {"sha": "419791d63630503064e110b1a8f3c3e23071429b", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e59f513be341b6616f6d1ed26dc7b7e32d932f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c4e59f513be341b6616f6d1ed26dc7b7e32d932f", "patch": "@@ -840,10 +840,8 @@ make_decl_rtl (decl, asmspec)\n     {\n       /* If the old RTL had the wrong mode, fix the mode.  */\n       if (GET_MODE (DECL_RTL (decl)) != DECL_MODE (decl))\n-\t{\n-\t  rtx rtl = DECL_RTL (decl);\n-\t  PUT_MODE (rtl, DECL_MODE (decl));\n-\t}\n+\tSET_DECL_RTL (decl, adjust_address_nv (DECL_RTL (decl),\n+\t\t\t\t\t       DECL_MODE (decl), 0));\n \n       /* ??? Another way to do this would be to do what halfpic.c does\n \t and maintain a hashed table of such critters.  */"}]}