{"sha": "3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZkNmFlOGEyNTQxZGFkMzJiMDNjNGMwMzkxMjdmMDY1MWRiZGYxZg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2018-11-13T12:51:19Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2018-11-13T12:51:19Z"}, "message": "[ARC] Update EH code.\n\nOur ABI says the blink is pushed first on stack followed by an unknown\nnumber of register saves, and finally by fp.  Hence we cannot use the\nEH_RETURN_ADDRESS macro as the stack is not finalized at that moment.\nThe alternative is to use the eh_return pattern and to initialize all\nthe bits after register allocation when the stack layout is finalized.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.c (arc_eh_return_address_location): Repurpose it\n\tto fit the eh_return pattern.\n\t* config/arc/arc.md (eh_return): Define.\n\t(VUNSPEC_ARC_EH_RETURN): Likewise.\n\t* config/arc/arc-protos.h (arc_eh_return_address_location): Match\n\tnew implementation.\n\t* config/arc/arc.h (EH_RETURN_HANDLER_RTX): Remove it.\n\ntestsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* gcc.target/arc/builtin_eh.c: New test.\n\nFrom-SVN: r266066", "tree": {"sha": "87a6d61d752b24a10a840cdc55d7ac597f20e850", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87a6d61d752b24a10a840cdc55d7ac597f20e850"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "90b480138a5492776e9fab6e7f95aae874d6a0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b480138a5492776e9fab6e7f95aae874d6a0ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b480138a5492776e9fab6e7f95aae874d6a0ea"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "5683289a8d88f086d55af95ac5b6b1791156bda3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -1,3 +1,14 @@\n+2018-11-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc.c (arc_eh_return_address_location): Repurpose it\n+\tto fit the eh_return pattern.\n+\t* config/arc/arc.md (eh_return): Define.\n+\t(VUNSPEC_ARC_EH_RETURN): Likewise.\n+\t* config/arc/arc-protos.h (arc_eh_return_address_location): Match\n+\tnew implementation.\n+\t* config/arc/arc.h (EH_RETURN_HANDLER_RTX): Remove it.\n+\n+\n 2018-11-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* common/config/arc/arc-common.c (arc_option_optimization_table):"}, {"sha": "a9de6d534f69513a99c26e1b5202787a69115757", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -109,7 +109,7 @@ extern bool arc_legitimize_reload_address (rtx *, machine_mode, int, int);\n extern void arc_secondary_reload_conv (rtx, rtx, rtx, bool);\n extern void arc_cpu_cpp_builtins (cpp_reader *);\n extern bool arc_store_addr_hazard_p (rtx_insn *, rtx_insn *);\n-extern rtx arc_eh_return_address_location (void);\n+extern void arc_eh_return_address_location (rtx);\n extern bool arc_is_jli_call_p (rtx);\n extern void arc_file_end (void);\n extern bool arc_is_secure_call_p (rtx);"}, {"sha": "dbe6ff51637eb125afae7ae21e2b1046ab4207d0", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -3947,10 +3947,13 @@ arc_check_multi (rtx op, bool push_p)\n /* Return rtx for the location of the return address on the stack,\n    suitable for use in __builtin_eh_return.  The new return address\n    will be written to this location in order to redirect the return to\n-   the exception handler.  */\n+   the exception handler.  Our ABI says the blink is pushed first on\n+   stack followed by an unknown number of register saves, and finally\n+   by fp.  Hence we cannot use the EH_RETURN_ADDRESS macro as the\n+   stack is not finalized.  */\n \n-rtx\n-arc_eh_return_address_location (void)\n+void\n+arc_eh_return_address_location (rtx source)\n {\n   rtx mem;\n   int offset;\n@@ -3978,8 +3981,8 @@ arc_eh_return_address_location (void)\n      remove this store seems perfectly sensible.  Marking the memory\n      address as volatile obviously has the effect of preventing DSE\n      from removing the store.  */\n-  MEM_VOLATILE_P (mem) = 1;\n-  return mem;\n+  MEM_VOLATILE_P (mem) = true;\n+  emit_move_insn (mem, source);\n }\n \n /* PIC */"}, {"sha": "6e9b1e5ddb61a4fa9c746e211d8860dc95f5a8e4", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -1391,8 +1391,6 @@ do { \\\n \n #define EH_RETURN_STACKADJ_RTX   gen_rtx_REG (Pmode, 2)\n \n-#define EH_RETURN_HANDLER_RTX    arc_eh_return_address_location ()\n-\n /* Turn off splitting of long stabs.  */\n #define DBX_CONTIN_LENGTH 0\n "}, {"sha": "830236242e0ca18232c41df40c20db9fa7e2b400", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -163,6 +163,7 @@\n   VUNSPEC_ARC_SC\n   VUNSPEC_ARC_LL\n   VUNSPEC_ARC_BLOCKAGE\n+  VUNSPEC_ARC_EH_RETURN\n   ])\n \n (define_constants\n@@ -6608,6 +6609,20 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"2\")])\n \n+;; Patterns for exception handling\n+(define_insn_and_split \"eh_return\"\n+  [(unspec_volatile [(match_operand:SI 0 \"register_operand\" \"r\")]\n+\t\t    VUNSPEC_ARC_EH_RETURN)]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"\n+  {\n+    arc_eh_return_address_location (operands[0]);\n+    DONE;\n+  }\"\n+)\n ;; include the arc-FPX instructions\n (include \"fpx.md\")\n "}, {"sha": "43f542d47c77e7cc9d0ecbbc191158478208d626", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -1,3 +1,7 @@\n+2018-11-13  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/builtin_eh.c: New test.\n+\n 2018-11-13  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/firq-1.c: Update test."}, {"sha": "717a54bb084c9d91e080249817c929d037e09529", "filename": "gcc/testsuite/gcc.target/arc/builtin_eh.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fd6ae8a2541dad32b03c4c039127f0651dbdf1f/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fbuiltin_eh.c?ref=3fd6ae8a2541dad32b03c4c039127f0651dbdf1f", "patch": "@@ -0,0 +1,22 @@\n+/* Check if we have the right offset for @bar function.  */\n+/* { dg-options \"-O1\" } */\n+\n+void bar (void);\n+\n+void\n+foo (int x)\n+{\n+  __builtin_unwind_init ();\n+  __builtin_eh_return (x, bar);\n+}\n+\n+/* { dg-final { scan-assembler \"r24\" } } */\n+/* { dg-final { scan-assembler \"r22\" } } */\n+/* { dg-final { scan-assembler \"r20\" } } */\n+/* { dg-final { scan-assembler \"r18\" } } */\n+/* { dg-final { scan-assembler \"r16\" } } */\n+/* { dg-final { scan-assembler \"r14\" } } */\n+/* { dg-final { scan-assembler \"r13\" } } */\n+/* { dg-final { scan-assembler \"r0\" } } */\n+/* { dg-final { scan-assembler \"fp\" } } */\n+/* { dg-final { scan-assembler \"fp,64\" } } */"}]}