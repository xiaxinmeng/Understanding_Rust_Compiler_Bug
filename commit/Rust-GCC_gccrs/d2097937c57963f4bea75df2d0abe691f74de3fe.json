{"sha": "d2097937c57963f4bea75df2d0abe691f74de3fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIwOTc5MzdjNTc5NjNmNGJlYTc1ZGYyZDBhYmU2OTFmNzRkZTNmZQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-01-09T23:16:56Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-01-09T23:16:56Z"}, "message": "* All Files: Remove PARAMS macro.\n\nFrom-SVN: r61133", "tree": {"sha": "c01acffab8cc0c484f09b1cdd4401847e024105e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01acffab8cc0c484f09b1cdd4401847e024105e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2097937c57963f4bea75df2d0abe691f74de3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2097937c57963f4bea75df2d0abe691f74de3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2097937c57963f4bea75df2d0abe691f74de3fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2097937c57963f4bea75df2d0abe691f74de3fe/comments", "author": null, "committer": null, "parents": [{"sha": "30028c85159c12c4e8920af0a9111372e56f1636", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30028c85159c12c4e8920af0a9111372e56f1636", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30028c85159c12c4e8920af0a9111372e56f1636"}], "stats": {"total": 1776, "additions": 865, "deletions": 911}, "files": [{"sha": "34d39a4521444226c628f4f50df12583bc0494f7", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -1,5 +1,7 @@\n 2003-01-09  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* All Files: Remove PARAMS macro.\n+\n \t* expr.c, gjavah.c, javaop.h, jcf-dump.c, jcf-io.c, jcf-reader.c,\n \tjcf-write.c, jcf.h, jv-scan.c: Don't rely on the `DEFUN', `AND' or\n \t`__STDC__' macros."}, {"sha": "8bf76502c936f8484325fd517f6076d42e8e1487", "filename": "gcc/java/boehm.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fboehm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fboehm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fboehm.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -34,16 +34,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"parse.h\"\n #include \"toplev.h\"\n \n-static void mark_reference_fields PARAMS ((tree,\n-\t\t\t\t\t   unsigned HOST_WIDE_INT *,\n-\t\t\t\t\t   unsigned HOST_WIDE_INT *,\n-\t\t\t\t\t   unsigned int,\n-\t\t\t\t\t   int *, int *,\n-\t\t\t\t\t   int *,\n-\t\t\t\t\t   HOST_WIDE_INT *));\n-static void set_bit PARAMS ((unsigned HOST_WIDE_INT *,\n-\t\t\t     unsigned HOST_WIDE_INT *,\n-\t\t\t     unsigned int));\n+static void mark_reference_fields (tree, unsigned HOST_WIDE_INT *,\n+\t\t\t\t   unsigned HOST_WIDE_INT *, unsigned int,\n+\t\t\t\t   int *, int *, int *, HOST_WIDE_INT *);\n+static void set_bit (unsigned HOST_WIDE_INT *, unsigned HOST_WIDE_INT *,\n+\t\t     unsigned int);\n \n /* Treat two HOST_WIDE_INT's as a contiguous bitmap, with bit 0 being\n    the least significant.  This function sets bit N in the bitmap.  */"}, {"sha": "bb7bcb5f282422cd04e81c5d87512884d2ff3aba", "filename": "gcc/java/buffer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fbuffer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fbuffer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuffer.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -43,4 +43,4 @@ struct buffer\n \n #define BUFFER_RESET(BUFP) ((BUFP)->ptr = (BUFP)->data)\n \n-extern void buffer_grow PARAMS ((struct buffer*, int));\n+extern void buffer_grow (struct buffer*, int);"}, {"sha": "d2de9124809abf8f203748580bb06293cbc84eed", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -61,19 +61,17 @@ enum builtin_type\n   BT_LAST\n };\n \n-static tree max_builtin PARAMS ((tree, tree));\n-static tree min_builtin PARAMS ((tree, tree));\n-static tree abs_builtin PARAMS ((tree, tree));\n-static tree cos_builtin PARAMS ((tree, tree));\n-static tree sin_builtin PARAMS ((tree, tree));\n-static tree sqrt_builtin PARAMS ((tree, tree));\n-\n-static tree build_function_call_expr PARAMS ((tree, tree));\n-static void define_builtin PARAMS ((enum built_in_function,\n-\t\t\t\t    const char *,\n-\t\t\t\t    enum built_in_class,\n-\t\t\t\t    tree, int));\n-static tree define_builtin_type PARAMS ((int, int, int, int, int));\n+static tree max_builtin (tree, tree);\n+static tree min_builtin (tree, tree);\n+static tree abs_builtin (tree, tree);\n+static tree cos_builtin (tree, tree);\n+static tree sin_builtin (tree, tree);\n+static tree sqrt_builtin (tree, tree);\n+\n+static tree build_function_call_expr (tree, tree);\n+static void define_builtin (enum built_in_function, const char *,\n+\t\t\t    enum built_in_class, tree, int);\n+static tree define_builtin_type (int, int, int, int, int);\n \n \f\n "}, {"sha": "ecb16eb5ae8b255b1c6e8e69c6c5a15d175ada4c", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -102,15 +102,15 @@ static tree wfl;\n \n #define WORD_SIZE  ((unsigned int)(sizeof(word) * BITS_PER_UNIT))\n \n-static void check_bool_init PARAMS ((tree, words, words, words));\n-static void check_init PARAMS ((tree, words));\n-static void check_cond_init PARAMS ((tree, tree, tree, words, words, words));\n-static void check_bool2_init PARAMS ((enum tree_code, tree, tree, words, words, words));\n+static void check_bool_init (tree, words, words, words);\n+static void check_init (tree, words);\n+static void check_cond_init (tree, tree, tree, words, words, words);\n+static void check_bool2_init (enum tree_code, tree, tree, words, words, words);\n struct alternatives;\n-static void done_alternative PARAMS ((words, struct alternatives *));\n-static tree get_variable_decl PARAMS ((tree));\n-static void final_assign_error PARAMS ((tree));\n-static void check_final_reassigned PARAMS ((tree, words));\n+static void done_alternative (words, struct alternatives *);\n+static tree get_variable_decl (tree);\n+static void final_assign_error (tree);\n+static void check_final_reassigned (tree, words);\n \n #define ALLOC_WORDS(NUM) (xmalloc ((NUM) * sizeof (word)))\n #define FREE_WORDS(PTR) (free (PTR))"}, {"sha": "29a3aa7cddb0665528921e1362b33a086a0f3737", "filename": "gcc/java/class.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -48,16 +48,16 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #define O_BINARY 0 /* MS-DOS brain-damage */\n #endif\n \n-static tree make_method_value PARAMS ((tree));\n-static tree build_java_method_type PARAMS ((tree, tree, int));\n-static int32 hashUtf8String PARAMS ((const char *, int));\n-static tree make_field_value PARAMS ((tree));\n-static tree get_dispatch_vector PARAMS ((tree));\n-static tree get_dispatch_table PARAMS ((tree, tree));\n-static void add_interface_do PARAMS ((tree, tree, int));\n-static tree maybe_layout_super_class PARAMS ((tree, tree));\n-static int assume_compiled PARAMS ((const char *));\n-static tree build_method_symbols_entry PARAMS ((tree));\n+static tree make_method_value (tree);\n+static tree build_java_method_type (tree, tree, int);\n+static int32 hashUtf8String (const char *, int);\n+static tree make_field_value (tree);\n+static tree get_dispatch_vector (tree);\n+static tree get_dispatch_table (tree, tree);\n+static void add_interface_do (tree, tree, int);\n+static tree maybe_layout_super_class (tree, tree);\n+static int assume_compiled (const char *);\n+static tree build_method_symbols_entry (tree);\n \n static GTY(()) rtx registerClass_libfunc;\n static GTY(()) rtx registerResource_libfunc;\n@@ -86,8 +86,8 @@ typedef struct assume_compiled_node_struct\n   struct assume_compiled_node_struct *child;\n } assume_compiled_node;\n \n-static assume_compiled_node *find_assume_compiled_node\n-\t\t\tPARAMS ((assume_compiled_node *, const char *));\n+static assume_compiled_node *find_assume_compiled_node (assume_compiled_node *,\n+\t\t\t\t\t\t\tconst char *);\n \n /* This is the root of the include/exclude tree.  */\n \n@@ -2134,7 +2134,7 @@ emit_register_classes ()\n     }\n   else\n     {\n-      extern tree get_file_function_name PARAMS ((int));\n+      extern tree get_file_function_name (int);\n       tree init_name = get_file_function_name ('I');\n       tree init_type = build_function_type (void_type_node, end_params_node);\n       tree init_decl;\n@@ -2270,8 +2270,8 @@ init_class_processing ()\n   gcc_obstack_init (&temporary_obstack);\n }\n \f\n-static hashval_t java_treetreehash_hash PARAMS ((const void *));\n-static int java_treetreehash_compare PARAMS ((const void *, const void *));\n+static hashval_t java_treetreehash_hash (const void *);\n+static int java_treetreehash_compare (const void *, const void *);\n \n /* A hash table mapping trees to trees.  Used generally.  */\n "}, {"sha": "11efc2bf0c021885086063a60c59c4b797d1dc08", "filename": "gcc/java/constants.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -31,11 +31,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-static void set_constant_entry PARAMS ((CPool *, int, int, jword));\n-static int find_class_or_string_constant PARAMS ((CPool *, int, tree));\n-static int find_name_and_type_constant PARAMS ((CPool *, tree, tree));\n-static tree get_tag_node PARAMS ((int));\n-static tree build_constant_data_ref PARAMS ((void));\n+static void set_constant_entry (CPool *, int, int, jword);\n+static int find_class_or_string_constant (CPool *, int, tree);\n+static int find_name_and_type_constant (CPool *, tree, tree);\n+static tree get_tag_node (int);\n+static tree build_constant_data_ref (void);\n \n /* Set the INDEX'th constant in CPOOL to have the given TAG and VALUE. */\n "}, {"sha": "bcdaf18acfc2d3ff56a5378adf590e7c7c523829", "filename": "gcc/java/convert.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fconvert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fconvert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconvert.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -20,8 +20,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* Written by Jeffrey Hsu <hsu@cygnus.com> */\n \n-extern tree convert_to_boolean PARAMS ((tree, tree));\n-extern tree convert_to_char    PARAMS ((tree, tree));\n-extern tree convert_to_integer PARAMS ((tree type, tree expr));\n-extern tree convert_to_real PARAMS ((tree type, tree expr));\n-extern tree convert_to_pointer PARAMS ((tree type, tree expr));\n+extern tree convert_to_boolean (tree, tree);\n+extern tree convert_to_char (tree, tree);\n+extern tree convert_to_integer (tree type, tree expr);\n+extern tree convert_to_real (tree type, tree expr);\n+extern tree convert_to_pointer (tree type, tree expr);"}, {"sha": "fa690663bcf6c834d325176fb89d368c15250b53", "filename": "gcc/java/decl.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -47,17 +47,17 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree-inline.h\"\n \n #if defined (DEBUG_JAVA_BINDING_LEVELS)\n-extern void indent PARAMS ((void));\n+extern void indent (void);\n #endif\n \n-static tree push_jvm_slot PARAMS ((int, tree));\n-static tree lookup_name_current_level PARAMS ((tree));\n-static tree push_promoted_type PARAMS ((const char *, tree));\n-static struct binding_level *make_binding_level PARAMS ((void));\n-static tree create_primitive_vtable PARAMS ((const char *));\n-static tree check_local_named_variable PARAMS ((tree, tree, int, int *));\n-static tree check_local_unnamed_variable PARAMS ((tree, tree, tree));\n-static void dump_function PARAMS ((enum tree_dump_index, tree));\n+static tree push_jvm_slot (int, tree);\n+static tree lookup_name_current_level (tree);\n+static tree push_promoted_type (const char *, tree);\n+static struct binding_level *make_binding_level (void);\n+static tree create_primitive_vtable (const char *);\n+static tree check_local_named_variable (tree, tree, int, int *);\n+static tree check_local_unnamed_variable (tree, tree, tree);\n+static void dump_function (enum tree_dump_index, tree);\n \n /* Name of the Cloneable class.  */\n tree java_lang_cloneable_identifier_node;"}, {"sha": "59b7fdf5bfc0e2dd6c3ae51009c39c6393c8205a", "filename": "gcc/java/except.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -39,13 +39,13 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"java-except.h\"\n #include \"toplev.h\"\n \n-static void expand_start_java_handler PARAMS ((struct eh_range *));\n-static void expand_end_java_handler PARAMS ((struct eh_range *));\n-static struct eh_range *find_handler_in_range PARAMS ((int, struct eh_range *,\n-\t\t\t\t\t\t      struct eh_range *));\n-static void link_handler PARAMS ((struct eh_range *, struct eh_range *));\n-static void check_start_handlers PARAMS ((struct eh_range *, int));\n-static void free_eh_ranges PARAMS ((struct eh_range *range));\n+static void expand_start_java_handler (struct eh_range *);\n+static void expand_end_java_handler (struct eh_range *);\n+static struct eh_range *find_handler_in_range (int, struct eh_range *,\n+\t\t\t\t\t       struct eh_range *);\n+static void link_handler (struct eh_range *, struct eh_range *);\n+static void check_start_handlers (struct eh_range *, int);\n+static void free_eh_ranges (struct eh_range *range);\n \n struct eh_range *current_method_handlers;\n "}, {"sha": "cd6c1b1a0a4c6225721d95054c8c5ebf704789c2", "filename": "gcc/java/expr.c", "status": "modified", "additions": 39, "deletions": 40, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -44,48 +44,47 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"except.h\"\n #include \"ggc.h\"\n \n-static void flush_quick_stack PARAMS ((void));\n-static void push_value PARAMS ((tree));\n-static tree pop_value PARAMS ((tree));\n-static void java_stack_swap PARAMS ((void));\n-static void java_stack_dup PARAMS ((int, int));\n-static void build_java_athrow PARAMS ((tree));\n-static void build_java_jsr PARAMS ((int, int));\n-static void build_java_ret PARAMS ((tree));\n-static void expand_java_multianewarray PARAMS ((tree, int));\n-static void expand_java_arraystore PARAMS ((tree));\n-static void expand_java_arrayload PARAMS ((tree));\n-static void expand_java_array_length PARAMS ((void));\n-static tree build_java_monitor PARAMS ((tree, tree));\n-static void expand_java_pushc PARAMS ((int, tree));\n-static void expand_java_return PARAMS ((tree));\n-static void expand_load_internal PARAMS ((int, tree, int));\n-static void expand_java_NEW PARAMS ((tree));\n-static void expand_java_INSTANCEOF PARAMS ((tree));\n-static void expand_java_CHECKCAST PARAMS ((tree));\n-static void expand_iinc PARAMS ((unsigned int, int, int));\n-static void expand_java_binop PARAMS ((tree, enum tree_code));\n-static void note_label PARAMS ((int, int));\n-static void expand_compare PARAMS ((enum tree_code, tree, tree, int));\n-static void expand_test PARAMS ((enum tree_code, tree, int));\n-static void expand_cond PARAMS ((enum tree_code, tree, int));\n-static void expand_java_goto PARAMS ((int));\n+static void flush_quick_stack (void);\n+static void push_value (tree);\n+static tree pop_value (tree);\n+static void java_stack_swap (void);\n+static void java_stack_dup (int, int);\n+static void build_java_athrow (tree);\n+static void build_java_jsr (int, int);\n+static void build_java_ret (tree);\n+static void expand_java_multianewarray (tree, int);\n+static void expand_java_arraystore (tree);\n+static void expand_java_arrayload (tree);\n+static void expand_java_array_length (void);\n+static tree build_java_monitor (tree, tree);\n+static void expand_java_pushc (int, tree);\n+static void expand_java_return (tree);\n+static void expand_load_internal (int, tree, int);\n+static void expand_java_NEW (tree);\n+static void expand_java_INSTANCEOF (tree);\n+static void expand_java_CHECKCAST (tree);\n+static void expand_iinc (unsigned int, int, int);\n+static void expand_java_binop (tree, enum tree_code);\n+static void note_label (int, int);\n+static void expand_compare (enum tree_code, tree, tree, int);\n+static void expand_test (enum tree_code, tree, int);\n+static void expand_cond (enum tree_code, tree, int);\n+static void expand_java_goto (int);\n #if 0\n-static void expand_java_call PARAMS ((int, int));\n-static void expand_java_ret PARAMS ((tree)); \n+static void expand_java_call (int, int);\n+static void expand_java_ret (tree); \n #endif\n-static tree pop_arguments PARAMS ((tree)); \n-static void expand_invoke PARAMS ((int, int, int)); \n-static void expand_java_field_op PARAMS ((int, int, int)); \n-static void java_push_constant_from_pool PARAMS ((struct JCF *, int)); \n-static void java_stack_pop PARAMS ((int)); \n-static tree build_java_throw_out_of_bounds_exception PARAMS ((tree)); \n-static tree build_java_check_indexed_type PARAMS ((tree, tree)); \n-static tree case_identity PARAMS ((tree, tree)); \n-static unsigned char peek_opcode_at_pc PARAMS ((struct JCF *, int, int));\n-static int emit_init_test_initialization PARAMS ((void **entry,\n-\t\t\t\t\t\t  void * ptr));\n-static int get_offset_table_index PARAMS ((tree));\n+static tree pop_arguments (tree); \n+static void expand_invoke (int, int, int); \n+static void expand_java_field_op (int, int, int); \n+static void java_push_constant_from_pool (struct JCF *, int); \n+static void java_stack_pop (int); \n+static tree build_java_throw_out_of_bounds_exception (tree); \n+static tree build_java_check_indexed_type (tree, tree); \n+static tree case_identity (tree, tree); \n+static unsigned char peek_opcode_at_pc (struct JCF *, int, int);\n+static int emit_init_test_initialization (void **entry, void * ptr);\n+static int get_offset_table_index (tree);\n \n static GTY(()) tree operand_type[59];\n "}, {"sha": "45509977cde3cf358adbfd7c5396458861a16f5a", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -123,43 +123,41 @@ struct method_name\n /* List of method names we've seen.  */\n static struct method_name *method_name_list;\n \n-static void print_field_info PARAMS ((FILE*, JCF*, int, int, JCF_u2));\n-static void print_mangled_classname PARAMS ((FILE*, JCF*, const char*, int));\n-static int  print_cxx_classname PARAMS ((FILE*, const char*, JCF*, int, int));\n-static void print_method_info PARAMS ((FILE*, JCF*, int, int, JCF_u2));\n-static void print_c_decl PARAMS ((FILE*, JCF*, int, int, int, const char *,\n-\t\t\t\t  int));\n-static void print_stub_or_jni PARAMS ((FILE*, JCF*, int, int, int,\n-\t\t\t\t       const char *, int));\n-static void print_full_cxx_name PARAMS ((FILE*, JCF*, int, int, int,\n-\t\t\t\t\t const char *, int));\n-static void decompile_method PARAMS ((FILE*, JCF*, int));\n-static void add_class_decl PARAMS ((FILE*, JCF*, JCF_u2));\n-\n-static int java_float_finite PARAMS ((jfloat));\n-static int java_double_finite PARAMS ((jdouble));\n-static void print_name PARAMS ((FILE *, JCF *, int));\n-static void print_base_classname PARAMS ((FILE *, JCF *, int));\n-static int utf8_cmp PARAMS ((const unsigned char *, int, const char *));\n-static char *cxx_keyword_subst PARAMS ((const unsigned char *, int));\n-static void generate_access PARAMS ((FILE *, JCF_u2));\n-static int name_is_method_p PARAMS ((const unsigned char *, int));\n-static char *get_field_name PARAMS ((JCF *, int, JCF_u2));\n-static void print_field_name PARAMS ((FILE *, JCF *, int, JCF_u2));\n-static const unsigned char *super_class_name PARAMS ((JCF *, int *));\n-static void print_include PARAMS ((FILE *, const unsigned char *, int));\n-static int gcjh_streq PARAMS ((const void *p1, const void *p2));\n-static int throwable_p PARAMS ((const unsigned char *signature));\n-static const unsigned char *decode_signature_piece\n-  PARAMS ((FILE *, const unsigned char *, const unsigned char *, int *));\n-static void print_class_decls PARAMS ((FILE *, JCF *, int));\n-static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static int overloaded_jni_method_exists_p PARAMS ((const unsigned char *, int,\n-\t\t\t\t\t\t   const char *, int));\n-static void jni_print_char PARAMS ((FILE *, int));\n-static void decompile_return_statement PARAMS ((FILE *, JCF *, int, int, int));\n+static void print_field_info (FILE*, JCF*, int, int, JCF_u2);\n+static void print_mangled_classname (FILE*, JCF*, const char*, int);\n+static int  print_cxx_classname (FILE*, const char*, JCF*, int, int);\n+static void print_method_info (FILE*, JCF*, int, int, JCF_u2);\n+static void print_c_decl (FILE*, JCF*, int, int, int, const char *, int);\n+static void print_stub_or_jni (FILE*, JCF*, int, int, int, const char *, int);\n+static void print_full_cxx_name (FILE*, JCF*, int, int, int, const char *, int);\n+static void decompile_method (FILE*, JCF*, int);\n+static void add_class_decl (FILE*, JCF*, JCF_u2);\n+\n+static int java_float_finite (jfloat);\n+static int java_double_finite (jdouble);\n+static void print_name (FILE *, JCF *, int);\n+static void print_base_classname (FILE *, JCF *, int);\n+static int utf8_cmp (const unsigned char *, int, const char *);\n+static char *cxx_keyword_subst (const unsigned char *, int);\n+static void generate_access (FILE *, JCF_u2);\n+static int name_is_method_p (const unsigned char *, int);\n+static char *get_field_name (JCF *, int, JCF_u2);\n+static void print_field_name (FILE *, JCF *, int, JCF_u2);\n+static const unsigned char *super_class_name (JCF *, int *);\n+static void print_include (FILE *, const unsigned char *, int);\n+static int gcjh_streq (const void *p1, const void *p2);\n+static int throwable_p (const unsigned char *signature);\n+static const unsigned char *\n+  decode_signature_piece (FILE *, const unsigned char *,\n+\t\t\t  const unsigned char *, int *);\n+static void print_class_decls (FILE *, JCF *, int);\n+static void usage (void) ATTRIBUTE_NORETURN;\n+static void help (void) ATTRIBUTE_NORETURN;\n+static void version (void) ATTRIBUTE_NORETURN;\n+static int overloaded_jni_method_exists_p (const unsigned char *, int,\n+\t\t\t\t\t   const char *, int);\n+static void jni_print_char (FILE *, int);\n+static void decompile_return_statement (FILE *, JCF *, int, int, int);\n \n JCF_u2 current_field_name;\n JCF_u2 current_field_value;\n@@ -1755,9 +1753,9 @@ struct namelet\n   struct namelet *next;\n };\n \n-static void add_namelet PARAMS ((const unsigned char *,\n-\t\t\t\tconst unsigned char *, struct namelet *));\n-static void print_namelet PARAMS ((FILE *, struct namelet *, int));\n+static void add_namelet (const unsigned char *, const unsigned char *,\n+\t\t\t struct namelet *);\n+static void print_namelet (FILE *, struct namelet *, int);\n \n /* The special root namelet.  */\n static struct namelet root ="}, {"sha": "27a34d13922acdc37e4582ccc113b06c00b30bfe", "filename": "gcc/java/java-except.h", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjava-except.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjava-except.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-except.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -57,18 +57,11 @@ extern struct eh_range whole_range;\n \n #define NULL_EH_RANGE (&whole_range)\n \n-extern struct eh_range * find_handler PARAMS ((int));\n-\n-extern void method_init_exceptions PARAMS ((void));\n-\n-extern void emit_handlers PARAMS ((void));\n-\n-extern void maybe_start_try PARAMS ((int, int));\n-\n-extern void maybe_end_try PARAMS ((int, int));\n-\n-extern void add_handler PARAMS ((int, int, tree, tree));\n-\n-extern void handle_nested_ranges PARAMS ((void));\n-\n-extern void expand_resume_after_catch PARAMS ((void));\n+extern struct eh_range * find_handler (int);\n+extern void method_init_exceptions (void);\n+extern void emit_handlers (void);\n+extern void maybe_start_try (int, int);\n+extern void maybe_end_try (int, int);\n+extern void add_handler (int, int, tree, tree);\n+extern void handle_nested_ranges (void);\n+extern void expand_resume_after_catch (void);"}, {"sha": "b4ed394eec7781367fc58121a4f0f1560ad78929", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 199, "deletions": 204, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -1001,9 +1001,9 @@ struct treetreehash_entry GTY(())\n   tree value;\n };\n \n-extern tree java_treetreehash_find PARAMS ((htab_t, tree));\n-extern tree * java_treetreehash_new PARAMS ((htab_t, tree));\n-extern htab_t java_treetreehash_create PARAMS ((size_t size, int ggc));\n+extern tree java_treetreehash_find (htab_t, tree);\n+extern tree * java_treetreehash_new (htab_t, tree);\n+extern htab_t java_treetreehash_create (size_t size, int ggc);\n \n /* DECL_LANG_SPECIFIC for VAR_DECL, PARM_DECL and sometimes FIELD_DECL\n    (access methods on outer class fields) and final fields. */\n@@ -1088,221 +1088,216 @@ struct lang_type GTY(())\n #define JCF_u4 unsigned long\n #define JCF_u2 unsigned short\n \n-extern void java_parse_file PARAMS ((int));\n-extern bool java_mark_addressable PARAMS ((tree));\n-extern tree java_type_for_mode PARAMS ((enum machine_mode, int));\n-extern tree java_type_for_size PARAMS ((unsigned int, int));\n-extern tree java_unsigned_type PARAMS ((tree));\n-extern tree java_signed_type PARAMS ((tree));\n-extern tree java_signed_or_unsigned_type PARAMS ((int, tree));\n-extern tree java_truthvalue_conversion PARAMS ((tree));\n-extern void add_assume_compiled PARAMS ((const char *, int));\n-extern tree lookup_class PARAMS ((tree));\n-extern tree lookup_java_constructor PARAMS ((tree, tree));\n-extern tree lookup_java_method PARAMS ((tree, tree, tree));\n-extern tree lookup_argument_method PARAMS ((tree, tree, tree));\n-extern tree lookup_argument_method2 PARAMS ((tree, tree, tree));\n-extern int has_method PARAMS ((tree, tree));\n-extern tree promote_type PARAMS ((tree));\n-extern tree get_constant PARAMS ((struct JCF*, int));\n-extern tree get_name_constant PARAMS ((struct JCF*, int));\n-extern tree get_class_constant PARAMS ((struct JCF*, int));\n-extern tree parse_signature PARAMS ((struct JCF *jcf, int sig_index));\n-extern tree add_field PARAMS ((tree, tree, tree, int));\n-extern tree add_method PARAMS ((tree, int, tree, tree));\n-extern tree add_method_1 PARAMS ((tree, int, tree, tree));\n-extern tree make_class PARAMS ((void));\n-extern tree push_class PARAMS ((tree, tree));\n-extern tree unmangle_classname PARAMS ((const char *name, int name_length));\n-extern tree parse_signature_string PARAMS ((const unsigned char *, int));\n-extern tree get_type_from_signature PARAMS ((tree));\n-extern void layout_class PARAMS ((tree));\n-extern tree layout_class_method PARAMS ((tree, tree, tree, tree));\n-extern void layout_class_methods PARAMS ((tree));\n-extern tree build_class_ref PARAMS ((tree));\n-extern tree build_dtable_decl PARAMS ((tree));\n-extern tree build_internal_class_name PARAMS ((tree));\n-extern tree build_constants_constructor PARAMS ((void));\n-extern tree build_ref_from_constant_pool PARAMS ((int));\n-extern void compile_resource_file PARAMS ((char *, const char *));\n-extern tree build_utf8_ref PARAMS ((tree));\n-extern tree ident_subst PARAMS ((const char*, int,\n-\t\t\t\tconst char*, int, int, const char*));\n-extern tree identifier_subst PARAMS ((const tree,\n-\t\t\t\t     const char *, int, int, const char *));\n-extern int global_bindings_p\t\t\tPARAMS ((void));\n-extern int kept_level_p\t\t\t\tPARAMS ((void));\n-extern tree getdecls\t\t\t\tPARAMS ((void));\n-extern void pushlevel\t\t\t\tPARAMS ((int));\n-extern tree poplevel\t\t\t\tPARAMS ((int,int, int));\n-extern void insert_block\t\t\tPARAMS ((tree));\n-extern void set_block\t\t\t\tPARAMS ((tree));\n-extern tree pushdecl\t\t\t\tPARAMS ((tree));\n-extern void java_init_decl_processing PARAMS ((void));\n-extern void java_dup_lang_specific_decl PARAMS ((tree));\n-extern tree build_java_signature PARAMS ((tree));\n-extern tree build_java_argument_signature PARAMS ((tree));\n-extern void set_java_signature PARAMS ((tree, tree));\n-extern tree build_static_field_ref PARAMS ((tree));\n-extern tree build_address_of PARAMS ((tree));\n-extern tree find_local_variable PARAMS ((int index, tree type, int pc));\n-extern tree find_stack_slot PARAMS ((int index, tree type));\n-extern tree build_prim_array_type PARAMS ((tree, HOST_WIDE_INT));\n-extern tree build_java_array_type PARAMS ((tree, HOST_WIDE_INT));\n-extern int is_compiled_class PARAMS ((tree));\n-extern tree mangled_classname PARAMS ((const char*, tree));\n-extern tree lookup_label PARAMS ((int));\n-extern tree pop_type_0 PARAMS ((tree, char**));\n-extern tree pop_type PARAMS ((tree));\n-extern tree decode_newarray_type PARAMS ((int));\n-extern tree lookup_field PARAMS ((tree*, tree));\n-extern int is_array_type_p PARAMS ((tree));\n-extern HOST_WIDE_INT java_array_type_length PARAMS ((tree));\n-extern int read_class PARAMS ((tree));\n-extern void load_class PARAMS ((tree, int));\n-\n-extern tree check_for_builtin PARAMS ((tree, tree));\n-extern void initialize_builtins PARAMS ((void));\n-\n-extern tree lookup_name PARAMS ((tree));\n-extern tree build_known_method_ref PARAMS ((tree, tree, tree, tree, tree));\n-extern tree build_class_init PARAMS ((tree, tree));\n-extern tree build_invokevirtual PARAMS ((tree, tree));\n-extern tree build_invokeinterface PARAMS ((tree, tree));\n-extern tree build_jni_stub PARAMS ((tree));\n-extern tree invoke_build_dtable PARAMS ((int, tree));\n-extern tree build_field_ref PARAMS ((tree, tree, tree));\n-extern void pushdecl_force_head PARAMS ((tree));\n-extern tree build_java_binop PARAMS ((enum tree_code, tree, tree, tree));\n-extern tree build_java_soft_divmod PARAMS ((enum tree_code, tree, tree, tree));\n-extern tree binary_numeric_promotion PARAMS ((tree, tree, tree *, tree *));\n-extern tree build_java_arrayaccess PARAMS ((tree, tree, tree));\n-extern tree build_java_arraystore_check PARAMS ((tree, tree));\n-extern tree build_newarray PARAMS ((int, tree));\n-extern tree build_anewarray PARAMS ((tree, tree));\n-extern tree build_new_array PARAMS ((tree, tree));\n-extern tree build_java_array_length_access PARAMS ((tree));\n-extern tree build_java_arraynull_check PARAMS ((tree, tree, tree));\n-extern tree build_java_indirect_ref PARAMS ((tree, tree, int));\n-extern tree java_check_reference PARAMS ((tree, int));\n-extern tree build_get_class PARAMS ((tree));\n-extern tree build_instanceof PARAMS ((tree, tree));\n-extern tree create_label_decl PARAMS ((tree));\n-extern void push_labeled_block PARAMS ((tree));\n-extern tree prepare_eh_table_type PARAMS ((tree));\n-extern tree build_exception_object_ref PARAMS ((tree));\n-extern tree generate_name PARAMS ((void));\n-extern void pop_labeled_block PARAMS ((void));\n-extern const char *lang_printable_name PARAMS ((tree, int));\n-extern tree maybe_add_interface PARAMS ((tree, tree));\n-extern void set_super_info PARAMS ((int, tree, tree, int));\n-extern void set_class_decl_access_flags PARAMS ((int, tree));\n-extern int get_access_flags_from_decl PARAMS ((tree));\n-extern int interface_of_p PARAMS ((tree, tree));\n-extern int inherits_from_p PARAMS ((tree, tree));\n-extern int common_enclosing_context_p PARAMS ((tree, tree));\n-extern int enclosing_context_p PARAMS ((tree, tree));\n-extern void complete_start_java_method PARAMS ((tree));\n-extern tree build_result_decl PARAMS ((tree));\n-extern void emit_handlers PARAMS ((void));\n-extern void init_outgoing_cpool PARAMS ((void));\n-extern void make_class_data PARAMS ((tree));\n-extern void register_class PARAMS ((void));\n-extern int alloc_name_constant PARAMS ((int, tree));\n-extern void emit_register_classes PARAMS ((void));\n-extern void emit_offset_symbol_table PARAMS ((void));\n-extern void lang_init_source PARAMS ((int));\n-extern void write_classfile PARAMS ((tree));\n-extern char *print_int_node PARAMS ((tree));\n-extern void parse_error_context PARAMS ((tree cl, const char *, ...))\n+extern void java_parse_file (int);\n+extern bool java_mark_addressable (tree);\n+extern tree java_type_for_mode (enum machine_mode, int);\n+extern tree java_type_for_size (unsigned int, int);\n+extern tree java_unsigned_type (tree);\n+extern tree java_signed_type (tree);\n+extern tree java_signed_or_unsigned_type (int, tree);\n+extern tree java_truthvalue_conversion (tree);\n+extern void add_assume_compiled (const char *, int);\n+extern tree lookup_class (tree);\n+extern tree lookup_java_constructor (tree, tree);\n+extern tree lookup_java_method (tree, tree, tree);\n+extern tree lookup_argument_method (tree, tree, tree);\n+extern tree lookup_argument_method2 (tree, tree, tree);\n+extern int has_method (tree, tree);\n+extern tree promote_type (tree);\n+extern tree get_constant (struct JCF*, int);\n+extern tree get_name_constant (struct JCF*, int);\n+extern tree get_class_constant (struct JCF*, int);\n+extern tree parse_signature (struct JCF *jcf, int sig_index);\n+extern tree add_field (tree, tree, tree, int);\n+extern tree add_method (tree, int, tree, tree);\n+extern tree add_method_1 (tree, int, tree, tree);\n+extern tree make_class (void);\n+extern tree push_class (tree, tree);\n+extern tree unmangle_classname (const char *name, int name_length);\n+extern tree parse_signature_string (const unsigned char *, int);\n+extern tree get_type_from_signature (tree);\n+extern void layout_class (tree);\n+extern tree layout_class_method (tree, tree, tree, tree);\n+extern void layout_class_methods (tree);\n+extern tree build_class_ref (tree);\n+extern tree build_dtable_decl (tree);\n+extern tree build_internal_class_name (tree);\n+extern tree build_constants_constructor (void);\n+extern tree build_ref_from_constant_pool (int);\n+extern void compile_resource_file (char *, const char *);\n+extern tree build_utf8_ref (tree);\n+extern tree ident_subst (const char*, int, const char*, int, int, const char*);\n+extern tree identifier_subst (const tree, const char *, int, int, const char *);\n+extern int global_bindings_p (void);\n+extern int kept_level_p (void);\n+extern tree getdecls (void);\n+extern void pushlevel (int);\n+extern tree poplevel (int,int, int);\n+extern void insert_block (tree);\n+extern void set_block (tree);\n+extern tree pushdecl (tree);\n+extern void java_init_decl_processing (void);\n+extern void java_dup_lang_specific_decl (tree);\n+extern tree build_java_signature (tree);\n+extern tree build_java_argument_signature (tree);\n+extern void set_java_signature (tree, tree);\n+extern tree build_static_field_ref (tree);\n+extern tree build_address_of (tree);\n+extern tree find_local_variable (int index, tree type, int pc);\n+extern tree find_stack_slot (int index, tree type);\n+extern tree build_prim_array_type (tree, HOST_WIDE_INT);\n+extern tree build_java_array_type (tree, HOST_WIDE_INT);\n+extern int is_compiled_class (tree);\n+extern tree mangled_classname (const char*, tree);\n+extern tree lookup_label (int);\n+extern tree pop_type_0 (tree, char**);\n+extern tree pop_type (tree);\n+extern tree decode_newarray_type (int);\n+extern tree lookup_field (tree*, tree);\n+extern int is_array_type_p (tree);\n+extern HOST_WIDE_INT java_array_type_length (tree);\n+extern int read_class (tree);\n+extern void load_class (tree, int);\n+\n+extern tree check_for_builtin (tree, tree);\n+extern void initialize_builtins (void);\n+\n+extern tree lookup_name (tree);\n+extern tree build_known_method_ref (tree, tree, tree, tree, tree);\n+extern tree build_class_init (tree, tree);\n+extern tree build_invokevirtual (tree, tree);\n+extern tree build_invokeinterface (tree, tree);\n+extern tree build_jni_stub (tree);\n+extern tree invoke_build_dtable (int, tree);\n+extern tree build_field_ref (tree, tree, tree);\n+extern void pushdecl_force_head (tree);\n+extern tree build_java_binop (enum tree_code, tree, tree, tree);\n+extern tree build_java_soft_divmod (enum tree_code, tree, tree, tree);\n+extern tree binary_numeric_promotion (tree, tree, tree *, tree *);\n+extern tree build_java_arrayaccess (tree, tree, tree);\n+extern tree build_java_arraystore_check (tree, tree);\n+extern tree build_newarray (int, tree);\n+extern tree build_anewarray (tree, tree);\n+extern tree build_new_array (tree, tree);\n+extern tree build_java_array_length_access (tree);\n+extern tree build_java_arraynull_check (tree, tree, tree);\n+extern tree build_java_indirect_ref (tree, tree, int);\n+extern tree java_check_reference (tree, int);\n+extern tree build_get_class (tree);\n+extern tree build_instanceof (tree, tree);\n+extern tree create_label_decl (tree);\n+extern void push_labeled_block (tree);\n+extern tree prepare_eh_table_type (tree);\n+extern tree build_exception_object_ref (tree);\n+extern tree generate_name (void);\n+extern void pop_labeled_block (void);\n+extern const char *lang_printable_name (tree, int);\n+extern tree maybe_add_interface (tree, tree);\n+extern void set_super_info (int, tree, tree, int);\n+extern void set_class_decl_access_flags (int, tree);\n+extern int get_access_flags_from_decl (tree);\n+extern int interface_of_p (tree, tree);\n+extern int inherits_from_p (tree, tree);\n+extern int common_enclosing_context_p (tree, tree);\n+extern int enclosing_context_p (tree, tree);\n+extern void complete_start_java_method (tree);\n+extern tree build_result_decl (tree);\n+extern void emit_handlers (void);\n+extern void init_outgoing_cpool (void);\n+extern void make_class_data (tree);\n+extern void register_class (void);\n+extern int alloc_name_constant (int, tree);\n+extern void emit_register_classes (void);\n+extern void emit_offset_symbol_table (void);\n+extern void lang_init_source (int);\n+extern void write_classfile (tree);\n+extern char *print_int_node (tree);\n+extern void parse_error_context (tree cl, const char *, ...)\n   ATTRIBUTE_PRINTF_2;\n-extern void finish_class PARAMS ((void));\n-extern void java_layout_seen_class_methods PARAMS ((void));\n-extern void check_for_initialization PARAMS ((tree, tree));\n-\n-extern tree pushdecl_top_level PARAMS ((tree));\n-extern int alloc_class_constant PARAMS ((tree));\n-extern void init_expr_processing PARAMS ((void));\n-extern void push_super_field PARAMS ((tree, tree));\n-extern void init_class_processing PARAMS ((void));\n-extern int can_widen_reference_to PARAMS ((tree, tree));\n-extern int class_depth PARAMS ((tree));\n-extern int verify_jvm_instructions PARAMS ((struct JCF *, const unsigned char *, long));\n-extern void maybe_pushlevels PARAMS ((int));\n-extern void maybe_poplevels PARAMS ((int));\n-extern void force_poplevels PARAMS ((int));\n-extern int process_jvm_instruction PARAMS ((int, const unsigned char *, long));\n-extern int maybe_adjust_start_pc PARAMS ((struct JCF *, int, int, int));\n-extern void set_local_type PARAMS ((int, tree));\n-extern int merge_type_state PARAMS ((tree));\n-extern int push_type_0 PARAMS ((tree));\n-extern void push_type PARAMS ((tree));\n-extern void load_type_state PARAMS ((tree));\n-extern void add_interface PARAMS ((tree, tree));\n-extern tree force_evaluation_order PARAMS ((tree));\n-extern int verify_constant_pool PARAMS ((struct JCF *));\n-extern void start_java_method PARAMS ((tree));\n-extern void end_java_method PARAMS ((void));\n-extern void give_name_to_locals PARAMS ((struct JCF *));\n-extern void note_instructions PARAMS ((struct JCF *, tree));\n-extern void expand_byte_code PARAMS ((struct JCF *, tree));\n-extern int open_in_zip PARAMS ((struct JCF *, const char *, const char *, int));\n-extern void set_constant_value PARAMS ((tree, tree));\n+extern void finish_class (void);\n+extern void java_layout_seen_class_methods (void);\n+extern void check_for_initialization (tree, tree);\n+\n+extern tree pushdecl_top_level (tree);\n+extern int alloc_class_constant (tree);\n+extern void init_expr_processing (void);\n+extern void push_super_field (tree, tree);\n+extern void init_class_processing (void);\n+extern int can_widen_reference_to (tree, tree);\n+extern int class_depth (tree);\n+extern int verify_jvm_instructions (struct JCF *, const unsigned char *, long);\n+extern void maybe_pushlevels (int);\n+extern void maybe_poplevels (int);\n+extern void force_poplevels (int);\n+extern int process_jvm_instruction (int, const unsigned char *, long);\n+extern int maybe_adjust_start_pc (struct JCF *, int, int, int);\n+extern void set_local_type (int, tree);\n+extern int merge_type_state (tree);\n+extern int push_type_0 (tree);\n+extern void push_type (tree);\n+extern void load_type_state (tree);\n+extern void add_interface (tree, tree);\n+extern tree force_evaluation_order (tree);\n+extern int verify_constant_pool (struct JCF *);\n+extern void start_java_method (tree);\n+extern void end_java_method (void);\n+extern void give_name_to_locals (struct JCF *);\n+extern void note_instructions (struct JCF *, tree);\n+extern void expand_byte_code (struct JCF *, tree);\n+extern int open_in_zip (struct JCF *, const char *, const char *, int);\n+extern void set_constant_value (tree, tree);\n #ifdef jword\n-extern int find_constant1 PARAMS ((struct CPool *, int, jword));\n-extern int find_constant2 PARAMS ((struct CPool *, int, jword, jword));\n+extern int find_constant1 (struct CPool *, int, jword);\n+extern int find_constant2 (struct CPool *, int, jword, jword);\n #endif\n-extern int find_utf8_constant PARAMS ((struct CPool *, tree));\n-extern int find_string_constant PARAMS ((struct CPool *, tree));\n-extern int find_class_constant PARAMS ((struct CPool *, tree));\n-extern int find_fieldref_index PARAMS ((struct CPool *, tree));\n-extern int find_methodref_index PARAMS ((struct CPool *, tree));\n-extern int find_methodref_with_class_index PARAMS ((struct CPool *, tree, tree));\n-extern void write_constant_pool PARAMS ((struct CPool *, unsigned char *, int));\n-extern int count_constant_pool_bytes PARAMS ((struct CPool *));\n-extern int encode_newarray_type PARAMS ((tree));\n+extern int find_utf8_constant (struct CPool *, tree);\n+extern int find_string_constant (struct CPool *, tree);\n+extern int find_class_constant (struct CPool *, tree);\n+extern int find_fieldref_index (struct CPool *, tree);\n+extern int find_methodref_index (struct CPool *, tree);\n+extern int find_methodref_with_class_index (struct CPool *, tree, tree);\n+extern void write_constant_pool (struct CPool *, unsigned char *, int);\n+extern int count_constant_pool_bytes (struct CPool *);\n+extern int encode_newarray_type (tree);\n #ifdef uint64\n-extern void format_int PARAMS ((char *, jlong, int));\n-extern void format_uint PARAMS ((char *, uint64, int));\n+extern void format_int (char *, jlong, int);\n+extern void format_uint (char *, uint64, int);\n #endif\n-extern void jcf_trim_old_input PARAMS ((struct JCF *));\n+extern void jcf_trim_old_input (struct JCF *);\n #ifdef BUFSIZ\n-extern void jcf_print_utf8 PARAMS ((FILE *, const unsigned char *, int));\n-extern void jcf_print_char PARAMS ((FILE *, int));\n-extern void jcf_print_utf8_replace PARAMS ((FILE *, const unsigned char *,\n-\t\t\t\t\t   int, int, int));\n-extern const char* open_class PARAMS ((const char *, struct JCF *,\n-\t\t\t\t       int, const char *));\n+extern void jcf_print_utf8 (FILE *, const unsigned char *, int);\n+extern void jcf_print_char (FILE *, int);\n+extern void jcf_print_utf8_replace (FILE *, const unsigned char *, int, int, int);\n+extern const char* open_class (const char *, struct JCF *, int, const char *);\n #endif\n-extern void java_debug_context PARAMS ((void));\n-extern void safe_layout_class PARAMS ((tree));\n+extern void java_debug_context (void);\n+extern void safe_layout_class (tree);\n \n-extern tree get_boehm_type_descriptor PARAMS ((tree));\n-extern bool class_has_finalize_method PARAMS ((tree));\n-extern void java_check_methods PARAMS ((tree));\n-extern void init_jcf_parse PARAMS((void));\n-extern void init_src_parse PARAMS((void));\n+extern tree get_boehm_type_descriptor (tree);\n+extern bool class_has_finalize_method (tree);\n+extern void java_check_methods (tree);\n+extern void init_jcf_parse (void);\n+extern void init_src_parse (void);\n \n-extern int cxx_keyword_p PARAMS ((const char *, int));\n-extern tree java_mangle_decl PARAMS ((struct obstack *, tree));\n-extern tree java_mangle_class_field PARAMS ((struct obstack *, tree));\n-extern tree java_mangle_class_field_from_string PARAMS ((struct obstack *, char *));\n-extern tree java_mangle_vtable PARAMS ((struct obstack *, tree));\n-extern const char *lang_printable_name_wls PARAMS ((tree, int));\n-extern void append_gpp_mangled_name PARAMS ((const char *, int));\n+extern int cxx_keyword_p (const char *, int);\n+extern tree java_mangle_decl (struct obstack *, tree);\n+extern tree java_mangle_class_field (struct obstack *, tree);\n+extern tree java_mangle_class_field_from_string (struct obstack *, char *);\n+extern tree java_mangle_vtable (struct obstack *, tree);\n+extern const char *lang_printable_name_wls (tree, int);\n+extern void append_gpp_mangled_name (const char *, int);\n \n-extern void add_predefined_file PARAMS ((tree));\n-extern int predefined_filename_p PARAMS ((tree));\n+extern void add_predefined_file (tree);\n+extern int predefined_filename_p (tree);\n \n-extern void java_optimize_inline PARAMS ((tree));\n-extern tree decl_constant_value PARAMS ((tree));\n+extern void java_optimize_inline (tree);\n+extern tree decl_constant_value (tree);\n \n #if defined(RTX_CODE) && defined (HAVE_MACHINE_MODES)\n-struct rtx_def * java_expand_expr PARAMS ((tree, rtx, enum machine_mode,\n-\t\t\t\t\t   int)); \n+struct rtx_def * java_expand_expr (tree, rtx, enum machine_mode, int); \n #endif\n-extern void java_inlining_merge_static_initializers PARAMS ((tree, void *));\n-extern void java_inlining_map_static_initializers PARAMS ((tree, void *));\n+extern void java_inlining_merge_static_initializers (tree, void *);\n+extern void java_inlining_map_static_initializers (tree, void *);\n \n #define DECL_FINAL(DECL) DECL_LANG_FLAG_3 (DECL)\n "}, {"sha": "e780b8430bf51b53441783e26ec15b3bc7521046", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -91,21 +91,21 @@ int class_access_flags = 0;\n /* Print in format similar to javap.  VERY IMCOMPLETE. */\n int flag_javap_compatible = 0;\n \n-static void print_access_flags PARAMS ((FILE *, uint16, char));\n-static void print_constant_terse PARAMS ((FILE*, JCF*, int, int));\n-static void print_constant PARAMS ((FILE *, JCF *, int, int));\n-static void print_constant_ref PARAMS ((FILE *, JCF *, int));\n-static void disassemble_method PARAMS ((JCF*, const unsigned char *, int));\n-static void print_name PARAMS ((FILE*, JCF*, int));\n-static void print_signature PARAMS ((FILE*, JCF*, int, int));\n-static int utf8_equal_string PARAMS ((struct JCF*, int, const char *));\n-static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void process_class PARAMS ((struct JCF *));\n-static void print_constant_pool PARAMS ((struct JCF *));\n-static void print_exception_table PARAMS ((struct JCF *,\n-\t\t\t\t\t  const unsigned char *entries, int));\n+static void print_access_flags (FILE *, uint16, char);\n+static void print_constant_terse (FILE*, JCF*, int, int);\n+static void print_constant (FILE *, JCF *, int, int);\n+static void print_constant_ref (FILE *, JCF *, int);\n+static void disassemble_method (JCF*, const unsigned char *, int);\n+static void print_name (FILE*, JCF*, int);\n+static void print_signature (FILE*, JCF*, int, int);\n+static int utf8_equal_string (struct JCF*, int, const char *);\n+static void usage (void) ATTRIBUTE_NORETURN;\n+static void help (void) ATTRIBUTE_NORETURN;\n+static void version (void) ATTRIBUTE_NORETURN;\n+static void process_class (struct JCF *);\n+static void print_constant_pool (struct JCF *);\n+static void print_exception_table (struct JCF *, const unsigned char *entries,\n+\t\t\t\t   int);\n \n #define PRINT_SIGNATURE_RESULT_ONLY 1\n #define PRINT_SIGNATURE_ARGS_ONLY 2"}, {"sha": "93798261b3adce7f791ac892c4c8d0dff30cadf6", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -91,18 +91,18 @@ static struct JCF main_jcf[1];\n static struct ZipFile *localToFile;\n \n /* Declarations of some functions used here.  */\n-static void handle_innerclass_attribute PARAMS ((int count, JCF *));\n-static tree give_name_to_class PARAMS ((JCF *jcf, int index));\n-static void parse_zip_file_entries PARAMS ((void));\n-static void process_zip_dir PARAMS ((FILE *));\n-static void parse_source_file_1 PARAMS ((tree, FILE *));\n-static void parse_source_file_2 PARAMS ((void));\n-static void parse_source_file_3 PARAMS ((void));\n-static void parse_class_file PARAMS ((void));\n-static void set_source_filename PARAMS ((JCF *, int));\n-static void ggc_mark_jcf PARAMS ((void**));\n-static void jcf_parse PARAMS ((struct JCF*));\n-static void load_inner_classes PARAMS ((tree));\n+static void handle_innerclass_attribute (int count, JCF *);\n+static tree give_name_to_class (JCF *jcf, int index);\n+static void parse_zip_file_entries (void);\n+static void process_zip_dir (FILE *);\n+static void parse_source_file_1 (tree, FILE *);\n+static void parse_source_file_2 (void);\n+static void parse_source_file_3 (void);\n+static void parse_class_file (void);\n+static void set_source_filename (JCF *, int);\n+static void ggc_mark_jcf (void**);\n+static void jcf_parse (struct JCF*);\n+static void load_inner_classes (tree);\n \n /* Mark (for garbage collection) all the tree nodes that are\n    referenced from JCF's constant pool table. Do that only if the JCF"}, {"sha": "4e34f7a12fe2819395dafa046e6f2b431fae523b", "filename": "gcc/java/jcf-path.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-path.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-path.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-path.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -62,10 +62,10 @@ struct entry\n   struct entry *next;\n };\n \n-static void free_entry PARAMS ((struct entry **));\n-static void append_entry PARAMS ((struct entry **, struct entry *));\n-static void add_entry PARAMS ((struct entry **, const char *, int));\n-static void add_path PARAMS ((struct entry **, const char *, int));\n+static void free_entry (struct entry **);\n+static void append_entry (struct entry **, struct entry *);\n+static void add_entry (struct entry **, const char *, int);\n+static void add_path (struct entry **, const char *, int);\n \n /* We support several different ways to set the class path.\n "}, {"sha": "1bd5299e97ac186f015f1db3b77336420c192e3d", "filename": "gcc/java/jcf-reader.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-reader.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-reader.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-reader.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -28,19 +28,19 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"jcf.h\"\n #include \"zipfile.h\"\n \n-static int get_attribute PARAMS ((JCF *));\n-static int jcf_parse_preamble PARAMS ((JCF *));\n-static int jcf_parse_constant_pool PARAMS ((JCF *));\n-static void jcf_parse_class PARAMS ((JCF *));\n-static int jcf_parse_fields PARAMS ((JCF *));\n-static int jcf_parse_one_method PARAMS ((JCF *));\n-static int jcf_parse_methods PARAMS ((JCF *));\n-static int jcf_parse_final_attributes PARAMS ((JCF *));\n+static int get_attribute (JCF *);\n+static int jcf_parse_preamble (JCF *);\n+static int jcf_parse_constant_pool (JCF *);\n+static void jcf_parse_class (JCF *);\n+static int jcf_parse_fields (JCF *);\n+static int jcf_parse_one_method (JCF *);\n+static int jcf_parse_methods (JCF *);\n+static int jcf_parse_final_attributes (JCF *);\n #ifdef NEED_PEEK_ATTRIBUTE\n-static int peek_attribute PARAMS ((JCF *, int, const char *, int));\n+static int peek_attribute (JCF *, int, const char *, int);\n #endif\n #ifdef NEED_SKIP_ATTRIBUTE\n-static void skip_attribute PARAMS ((JCF *, int));\n+static void skip_attribute (JCF *, int);\n #endif\n \n /* Go through all available attribute (ATTRIBUTE_NUMER) and try to"}, {"sha": "15035c05cfca752c76b758495d662aa7f3aeaa4c", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 65, "deletions": 70, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -280,81 +280,76 @@ struct jcf_partial\n   struct jcf_switch_state *sw_state;\n };\n \n-static void generate_bytecode_insns PARAMS ((tree, int, struct jcf_partial *));\n-static struct chunk * alloc_chunk PARAMS ((struct chunk *, unsigned char *,\n-\t\t\t\t\t  int, struct obstack *));\n-static unsigned char * append_chunk PARAMS ((unsigned char *, int,\n-\t\t\t\t\t    struct jcf_partial *));\n-static void append_chunk_copy PARAMS ((unsigned char *, int,\n-\t\t\t\t      struct jcf_partial *));\n-static struct jcf_block * gen_jcf_label PARAMS ((struct jcf_partial *));\n-static void finish_jcf_block PARAMS ((struct jcf_partial *));\n-static void define_jcf_label PARAMS ((struct jcf_block *,\n-\t\t\t\t     struct jcf_partial *));\n-static struct jcf_block * get_jcf_label_here PARAMS ((struct jcf_partial *));\n-static void put_linenumber PARAMS ((int, struct jcf_partial *));\n-static void localvar_alloc PARAMS ((tree, struct jcf_partial *));\n-static void localvar_free PARAMS ((tree, struct jcf_partial *));\n-static int get_access_flags PARAMS ((tree));\n-static void write_chunks PARAMS ((FILE *, struct chunk *));\n-static int adjust_typed_op PARAMS ((tree, int));\n-static void generate_bytecode_conditional PARAMS ((tree, struct jcf_block *,\n-\t\t\t\t\t\t  struct jcf_block *, int,\n-\t\t\t\t\t\t  struct jcf_partial *));\n-static void generate_bytecode_return PARAMS ((tree, struct jcf_partial *));\n-static void perform_relocations PARAMS ((struct jcf_partial *));\n-static void init_jcf_state PARAMS ((struct jcf_partial *, struct obstack *));\n-static void init_jcf_method PARAMS ((struct jcf_partial *, tree));\n-static void release_jcf_state PARAMS ((struct jcf_partial *));\n-static struct chunk * generate_classfile PARAMS ((tree, struct jcf_partial *));\n-static struct jcf_handler *alloc_handler PARAMS ((struct jcf_block *,\n-\t\t\t\t\t\t struct jcf_block *,\n-\t\t\t\t\t\t struct jcf_partial *));\n-static void emit_iinc PARAMS ((tree, HOST_WIDE_INT, struct jcf_partial *));\n-static void emit_reloc PARAMS ((HOST_WIDE_INT, int, struct jcf_block *, \n-\t\t\t       struct jcf_partial *));\n-static void push_constant1 PARAMS ((HOST_WIDE_INT, struct jcf_partial *));\n-static void push_constant2 PARAMS ((HOST_WIDE_INT, struct jcf_partial *));\n-static void push_int_const PARAMS ((HOST_WIDE_INT, struct jcf_partial *));\n-static int find_constant_wide PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t\t      struct jcf_partial *));\n-static void push_long_const PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT, \n-\t\t\t\t    struct jcf_partial *));\n-static int find_constant_index PARAMS ((tree, struct jcf_partial *));\n-static void push_long_const PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t\t    struct jcf_partial *));\n-static void field_op PARAMS ((tree, int, struct jcf_partial *));\n-static void maybe_wide PARAMS ((int, int, struct jcf_partial *));\n-static void emit_dup PARAMS ((int, int, struct jcf_partial *));\n-static void emit_pop PARAMS ((int, struct jcf_partial *));\n-static void emit_load_or_store PARAMS ((tree, int, struct jcf_partial *));\n-static void emit_load PARAMS ((tree, struct jcf_partial *));\n-static void emit_store PARAMS ((tree, struct jcf_partial *));\n-static void emit_unop PARAMS ((enum java_opcode, tree, struct jcf_partial *));\n-static void emit_binop PARAMS ((enum java_opcode, tree, struct jcf_partial *));\n-static void emit_reloc PARAMS ((HOST_WIDE_INT, int, struct jcf_block *,\n-\t\t\t       struct jcf_partial *));\n-static void emit_switch_reloc PARAMS ((struct jcf_block *,\n-\t\t\t\t      struct jcf_partial *));\n-static void emit_case_reloc PARAMS ((struct jcf_relocation *,\n-\t\t\t\t    struct jcf_partial *));\n-static void emit_if PARAMS ((struct jcf_block *, int, int,\n-\t\t\t    struct jcf_partial *));\n-static void emit_goto PARAMS ((struct jcf_block *, struct jcf_partial *));\n-static void emit_jsr PARAMS ((struct jcf_block *, struct jcf_partial *));\n-static void call_cleanups PARAMS ((struct jcf_block *, struct jcf_partial *));\n-static char *make_class_file_name PARAMS ((tree));\n-static unsigned char *append_synthetic_attribute PARAMS ((struct jcf_partial *));\n-static void append_innerclasses_attribute PARAMS ((struct jcf_partial *, tree));\n-static void append_innerclasses_attribute_entry PARAMS ((struct jcf_partial *, tree, tree));\n-static void append_gcj_attribute PARAMS ((struct jcf_partial *, tree));\n+static void generate_bytecode_insns (tree, int, struct jcf_partial *);\n+static struct chunk * alloc_chunk (struct chunk *, unsigned char *,\n+\t\t\t\t   int, struct obstack *);\n+static unsigned char * append_chunk (unsigned char *, int,\n+\t\t\t\t     struct jcf_partial *);\n+static void append_chunk_copy (unsigned char *, int, struct jcf_partial *);\n+static struct jcf_block * gen_jcf_label (struct jcf_partial *);\n+static void finish_jcf_block (struct jcf_partial *);\n+static void define_jcf_label (struct jcf_block *, struct jcf_partial *);\n+static struct jcf_block * get_jcf_label_here (struct jcf_partial *);\n+static void put_linenumber (int, struct jcf_partial *);\n+static void localvar_alloc (tree, struct jcf_partial *);\n+static void localvar_free (tree, struct jcf_partial *);\n+static int get_access_flags (tree);\n+static void write_chunks (FILE *, struct chunk *);\n+static int adjust_typed_op (tree, int);\n+static void generate_bytecode_conditional (tree, struct jcf_block *,\n+\t\t\t\t\t   struct jcf_block *, int,\n+\t\t\t\t\t   struct jcf_partial *);\n+static void generate_bytecode_return (tree, struct jcf_partial *);\n+static void perform_relocations (struct jcf_partial *);\n+static void init_jcf_state (struct jcf_partial *, struct obstack *);\n+static void init_jcf_method (struct jcf_partial *, tree);\n+static void release_jcf_state (struct jcf_partial *);\n+static struct chunk * generate_classfile (tree, struct jcf_partial *);\n+static struct jcf_handler *alloc_handler (struct jcf_block *,\n+\t\t\t\t\t  struct jcf_block *,\n+\t\t\t\t\t  struct jcf_partial *);\n+static void emit_iinc (tree, HOST_WIDE_INT, struct jcf_partial *);\n+static void emit_reloc (HOST_WIDE_INT, int, struct jcf_block *, \n+\t\t\tstruct jcf_partial *);\n+static void push_constant1 (HOST_WIDE_INT, struct jcf_partial *);\n+static void push_constant2 (HOST_WIDE_INT, struct jcf_partial *);\n+static void push_int_const (HOST_WIDE_INT, struct jcf_partial *);\n+static int find_constant_wide (HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t       struct jcf_partial *);\n+static void push_long_const (HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t     struct jcf_partial *);\n+static int find_constant_index (tree, struct jcf_partial *);\n+static void push_long_const (HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t     struct jcf_partial *);\n+static void field_op (tree, int, struct jcf_partial *);\n+static void maybe_wide (int, int, struct jcf_partial *);\n+static void emit_dup (int, int, struct jcf_partial *);\n+static void emit_pop (int, struct jcf_partial *);\n+static void emit_load_or_store (tree, int, struct jcf_partial *);\n+static void emit_load (tree, struct jcf_partial *);\n+static void emit_store (tree, struct jcf_partial *);\n+static void emit_unop (enum java_opcode, tree, struct jcf_partial *);\n+static void emit_binop (enum java_opcode, tree, struct jcf_partial *);\n+static void emit_reloc (HOST_WIDE_INT, int, struct jcf_block *,\n+\t\t\tstruct jcf_partial *);\n+static void emit_switch_reloc (struct jcf_block *, struct jcf_partial *);\n+static void emit_case_reloc (struct jcf_relocation *, struct jcf_partial *);\n+static void emit_if (struct jcf_block *, int, int, struct jcf_partial *);\n+static void emit_goto (struct jcf_block *, struct jcf_partial *);\n+static void emit_jsr (struct jcf_block *, struct jcf_partial *);\n+static void call_cleanups (struct jcf_block *, struct jcf_partial *);\n+static char *make_class_file_name (tree);\n+static unsigned char *append_synthetic_attribute (struct jcf_partial *);\n+static void append_innerclasses_attribute (struct jcf_partial *, tree);\n+static void append_innerclasses_attribute_entry (struct jcf_partial *, tree, tree);\n+static void append_gcj_attribute (struct jcf_partial *, tree);\n \n /* Utility macros for appending (big-endian) data to a buffer.\n    We assume a local variable 'ptr' points into where we want to\n    write next, and we assume enough space has been allocated. */\n \n #ifdef ENABLE_JC1_CHECKING\n-static int CHECK_PUT PARAMS ((void *, struct jcf_partial *, int));\n+static int CHECK_PUT (void *, struct jcf_partial *, int);\n \n static int\n CHECK_PUT (ptr, state, i)\n@@ -411,7 +406,7 @@ alloc_chunk (last, data, size, work)\n }\n \n #ifdef ENABLE_JC1_CHECKING\n-static int CHECK_OP PARAMS ((struct jcf_partial *));\n+static int CHECK_OP (struct jcf_partial *);\n \n static int\n CHECK_OP (state)"}, {"sha": "0555f362372f6a60f3346a7839f04c634603073b", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -55,7 +55,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #endif \n \n struct JCF;\n-typedef int (*jcf_filbuf_t) PARAMS ((struct JCF*, int needed));\n+typedef int (*jcf_filbuf_t) (struct JCF*, int needed);\n \n typedef struct CPool {\n   /* Available number of elements in the constants array, before it\n@@ -217,10 +217,10 @@ typedef struct JCF {\n \n #define DEFAULT_CLASS_PATH \".\"\n \n-extern const char *find_class PARAMS ((const char *, int, JCF*, int));\n-extern const char *find_classfile PARAMS ((char *, JCF*, const char *));\n-extern int jcf_filbuf_from_stdio PARAMS ((JCF *jcf, int count));\n-extern int jcf_unexpected_eof PARAMS ((JCF*, int)) ATTRIBUTE_NORETURN;\n+extern const char *find_class (const char *, int, JCF*, int);\n+extern const char *find_classfile (char *, JCF*, const char *);\n+extern int jcf_filbuf_from_stdio (JCF *jcf, int count);\n+extern int jcf_unexpected_eof (JCF*, int) ATTRIBUTE_NORETURN;\n \n /* Extract a character from a Java-style Utf8 string.\n  * PTR points to the current character.\n@@ -251,27 +251,27 @@ extern int quiet_flag;\n #endif\n \n /* Declarations for dependency code.  */\n-extern void jcf_dependency_reset PARAMS ((void));\n-extern void jcf_dependency_set_target PARAMS ((const char *));\n-extern void jcf_dependency_add_target PARAMS ((const char *));\n-extern void jcf_dependency_set_dep_file PARAMS ((const char *));\n-extern void jcf_dependency_add_file PARAMS ((const char *, int));\n-extern void jcf_dependency_write PARAMS ((void));\n-extern void jcf_dependency_init PARAMS ((int));\n-extern void jcf_dependency_print_dummies PARAMS ((void));\n+extern void jcf_dependency_reset (void);\n+extern void jcf_dependency_set_target (const char *);\n+extern void jcf_dependency_add_target (const char *);\n+extern void jcf_dependency_set_dep_file (const char *);\n+extern void jcf_dependency_add_file (const char *, int);\n+extern void jcf_dependency_write (void);\n+extern void jcf_dependency_init (int);\n+extern void jcf_dependency_print_dummies (void);\n \n /* Declarations for path handling code.  */\n-extern void jcf_path_init PARAMS ((void));\n-extern void jcf_path_classpath_arg PARAMS ((const char *));\n-extern void jcf_path_bootclasspath_arg PARAMS ((const char *));\n-extern void jcf_path_extdirs_arg PARAMS ((const char *));\n-extern void jcf_path_include_arg PARAMS ((const char *));\n-extern void jcf_path_seal PARAMS ((int));\n-extern void *jcf_path_start PARAMS ((void));\n-extern void *jcf_path_next PARAMS ((void *));\n-extern char *jcf_path_name PARAMS ((void *));\n-extern int jcf_path_is_zipfile PARAMS ((void *));\n-extern int jcf_path_is_system PARAMS ((void *));\n-extern int jcf_path_max_len PARAMS ((void));\n+extern void jcf_path_init (void);\n+extern void jcf_path_classpath_arg (const char *);\n+extern void jcf_path_bootclasspath_arg (const char *);\n+extern void jcf_path_extdirs_arg (const char *);\n+extern void jcf_path_include_arg (const char *);\n+extern void jcf_path_seal (int);\n+extern void *jcf_path_start (void);\n+extern void *jcf_path_next (void *);\n+extern char *jcf_path_name (void *);\n+extern int jcf_path_is_zipfile (void *);\n+extern int jcf_path_is_system (void *);\n+extern int jcf_path_max_len (void);\n \n #endif /* ! GCC_JCF_H */"}, {"sha": "670717345dfd27d9ac21a06a8a2582b5e93b9e17", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -39,15 +39,15 @@ Boston, MA 02111-1307, USA.  */\n \n #include <getopt.h>\n \n-extern void fatal_error PARAMS ((const char *s, ...))\n+extern void fatal_error (const char *s, ...)\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n-void warning PARAMS ((const char *s, ...)) ATTRIBUTE_PRINTF_1;\n-void gcc_obstack_init PARAMS ((struct obstack *obstack));\n-void report PARAMS ((void));\n+void warning (const char *s, ...) ATTRIBUTE_PRINTF_1;\n+void gcc_obstack_init (struct obstack *obstack);\n+void report (void);\n \n-static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void help PARAMS ((void)) ATTRIBUTE_NORETURN;\n-static void version PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void usage (void) ATTRIBUTE_NORETURN;\n+static void help (void) ATTRIBUTE_NORETURN;\n+static void version (void) ATTRIBUTE_NORETURN;\n \n #define JC1_LITE\n #include \"jcf.h\""}, {"sha": "61e70a78ebee9477d149a280a19f101f5c2a6b6f", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -34,7 +34,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"tree.h\"\n #include \"java-tree.h\"\n \n-static char * do_mangle_classname PARAMS ((const char *string));\n+static char * do_mangle_classname (const char *string);\n \n struct obstack  name_obstack;\n struct obstack *mangle_obstack = &name_obstack;\n@@ -55,8 +55,8 @@ gcc_obstack_init (obstack)\n #define OBSTACK_CHUNK_FREE free\n #endif\n   _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) PARAMS ((long))) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) PARAMS ((void *))) OBSTACK_CHUNK_FREE);\n+\t\t  (void *(*) (long)) OBSTACK_CHUNK_ALLOC,\n+\t\t  (void (*) (void *)) OBSTACK_CHUNK_FREE);\n }\n \n static void usage (const char *) ATTRIBUTE_NORETURN;"}, {"sha": "4127588fee8b1996526434fd24d970f3a94c3aa8", "filename": "gcc/java/keyword.gperf", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fkeyword.gperf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fkeyword.gperf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.gperf?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -30,11 +30,11 @@ struct java_keyword { const char *const name; const int token; };\n #ifdef __GNUC__\n __inline\n #endif\n-static unsigned int hash\t\tPARAMS ((const char *, unsigned int));\n+static unsigned int hash (const char *, unsigned int);\n #ifdef __GNUC__\n __inline\n #endif\n-const struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n+const struct java_keyword *java_keyword (const char *, unsigned int);\n %%\n abstract, ABSTRACT_TK\n default, DEFAULT_TK"}, {"sha": "1b20f7c220c2163b84fe8e819fd6efbbbcc5dbe9", "filename": "gcc/java/keyword.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fkeyword.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fkeyword.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fkeyword.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -30,11 +30,11 @@ struct java_keyword { const char *const name; const int token; };\n #ifdef __GNUC__\n __inline\n #endif\n-static unsigned int hash\t\tPARAMS ((const char *, unsigned int));\n+static unsigned int hash (const char *, unsigned int);\n #ifdef __GNUC__\n __inline\n #endif\n-const struct java_keyword *java_keyword\tPARAMS ((const char *, unsigned int));\n+const struct java_keyword *java_keyword (const char *, unsigned int);\n \n #define TOTAL_KEYWORDS 52\n #define MIN_WORD_LENGTH 2"}, {"sha": "239e82b45da4d676695669f9095c75e47fe5f7fb", "filename": "gcc/java/lang.c", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -53,32 +53,24 @@ struct string_option\n   const int on_value;\n };\n \n-static const char *java_init PARAMS ((const char *));\n-static void java_finish PARAMS ((void));\n-static void java_init_options PARAMS ((void));\n-static bool java_post_options PARAMS ((void));\n-\n-static int java_decode_option PARAMS ((int, char **));\n-static void put_decl_string PARAMS ((const char *, int));\n-static void put_decl_node PARAMS ((tree));\n-static void java_print_error_function PARAMS ((diagnostic_context *,\n-\t\t\t\t\t       const char *));\n-static int process_option_with_no PARAMS ((const char *,\n-\t\t\t\t\t   const struct string_option *,\n-\t\t\t\t\t   int));\n-static tree java_tree_inlining_walk_subtrees PARAMS ((tree *,\n-\t\t\t\t\t\t      int *,\n-\t\t\t\t\t\t      walk_tree_fn,\n-\t\t\t\t\t\t      void *,\n-\t\t\t\t\t\t      void *));\n-static int java_unsafe_for_reeval PARAMS ((tree));\n-static int merge_init_test_initialization PARAMS ((void * *, \n-\t\t\t\t\t\t   void *));\n-static int inline_init_test_initialization PARAMS ((void * *, \n-\t\t\t\t\t\t    void *));\n-static bool java_can_use_bit_fields_p PARAMS ((void));\n-static int java_dump_tree PARAMS ((void *, tree));\n-static void dump_compound_expr PARAMS ((dump_info_p, tree));\n+static const char *java_init (const char *);\n+static void java_finish (void);\n+static void java_init_options (void);\n+static bool java_post_options (void);\n+\n+static int java_decode_option (int, char **);\n+static void put_decl_string (const char *, int);\n+static void put_decl_node (tree);\n+static void java_print_error_function (diagnostic_context *, const char *);\n+static int process_option_with_no (const char *, const struct string_option *, int);\n+static tree java_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n+\t\t\t\t\t      void *, void *);\n+static int java_unsafe_for_reeval (tree);\n+static int merge_init_test_initialization (void * *, void *);\n+static int inline_init_test_initialization (void * *, void *);\n+static bool java_can_use_bit_fields_p (void);\n+static int java_dump_tree (void *, tree);\n+static void dump_compound_expr (dump_info_p, tree);\n \n #ifndef TARGET_OBJECT_SUFFIX\n # define TARGET_OBJECT_SUFFIX \".o\""}, {"sha": "c6744f401e7484f8989284aeb5dd212917342eec", "filename": "gcc/java/lex.c", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -40,35 +40,34 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"chartables.h\"\n \n /* Function declarations.  */\n-static char *java_sprint_unicode PARAMS ((struct java_line *, int));\n-static void java_unicode_2_utf8 PARAMS ((unicode_t));\n-static void java_lex_error PARAMS ((const char *, int));\n+static char *java_sprint_unicode (struct java_line *, int);\n+static void java_unicode_2_utf8 (unicode_t);\n+static void java_lex_error (const char *, int);\n #ifndef JC1_LITE\n-static int java_is_eol PARAMS ((FILE *, int));\n-static tree build_wfl_node PARAMS ((tree));\n+static int java_is_eol (FILE *, int);\n+static tree build_wfl_node (tree);\n #endif\n-static void java_store_unicode PARAMS ((struct java_line *, unicode_t, int));\n-static int java_parse_escape_sequence PARAMS ((void));\n-static int java_start_char_p PARAMS ((unicode_t));\n-static int java_part_char_p PARAMS ((unicode_t));\n-static int java_parse_doc_section PARAMS ((int));\n-static void java_parse_end_comment PARAMS ((int));\n-static int java_get_unicode PARAMS ((void));\n-static int java_read_unicode PARAMS ((java_lexer *, int *));\n-static int java_read_unicode_collapsing_terminators PARAMS ((java_lexer *,\n-\t\t\t\t\t\t\t     int *));\n-static void java_store_unicode PARAMS ((struct java_line *, unicode_t, int));\n-static int java_read_char PARAMS ((java_lexer *));\n-static void java_allocate_new_line PARAMS ((void));\n-static void java_unget_unicode PARAMS ((void));\n-static unicode_t java_sneak_unicode PARAMS ((void));\n+static void java_store_unicode (struct java_line *, unicode_t, int);\n+static int java_parse_escape_sequence (void);\n+static int java_start_char_p (unicode_t);\n+static int java_part_char_p (unicode_t);\n+static int java_parse_doc_section (int);\n+static void java_parse_end_comment (int);\n+static int java_get_unicode (void);\n+static int java_read_unicode (java_lexer *, int *);\n+static int java_read_unicode_collapsing_terminators (java_lexer *, int *);\n+static void java_store_unicode (struct java_line *, unicode_t, int);\n+static int java_read_char (java_lexer *);\n+static void java_allocate_new_line (void);\n+static void java_unget_unicode (void);\n+static unicode_t java_sneak_unicode (void);\n #ifndef JC1_LITE\n-static int utf8_cmp PARAMS ((const unsigned char *, int, const char *));\n+static int utf8_cmp (const unsigned char *, int, const char *);\n #endif\n \n-java_lexer *java_new_lexer PARAMS ((FILE *, const char *));\n+java_lexer *java_new_lexer (FILE *, const char *);\n #ifndef JC1_LITE\n-static void error_if_numeric_overflow PARAMS ((tree));\n+static void error_if_numeric_overflow (tree);\n #endif\n \n #ifdef HAVE_ICONV\n@@ -838,7 +837,7 @@ java_parse_escape_sequence ()\n    with an 'f', indicating it is of type 'float'; NUMBER_BEGINNING\n    is the line number on which to report any error.  */\n \n-static void java_perform_atof\tPARAMS ((YYSTYPE *, char *, int, int));\n+static void java_perform_atof (YYSTYPE *, char *, int, int);\n \n static void\n java_perform_atof (java_lval, literal_token, fflag, number_beginning)\n@@ -888,7 +887,7 @@ java_perform_atof (java_lval, literal_token, fflag, number_beginning)\n }\n #endif\n \n-static int yylex\t\tPARAMS ((YYSTYPE *));\n+static int yylex (YYSTYPE *);\n \n static int\n #ifdef JC1_LITE"}, {"sha": "9579036c602f5b3ec736e2827397be6e0329da66", "filename": "gcc/java/lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Flex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Flex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flex.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -158,7 +158,7 @@ typedef struct java_lexer\n } java_lexer;\n \n /* Destroy a lexer object.  */\n-extern void java_destroy_lexer PARAMS ((java_lexer *));\n+extern void java_destroy_lexer (java_lexer *);\n \n #define JAVA_LINE_MAX 80\n "}, {"sha": "9a6b80217ede19ae6f640db89acd495c15b81843", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -38,28 +38,28 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"obstack.h\"\n #include \"ggc.h\"\n \n-static void mangle_field_decl PARAMS ((tree));\n-static void mangle_method_decl PARAMS ((tree));\n+static void mangle_field_decl (tree);\n+static void mangle_method_decl (tree);\n \n-static void mangle_type PARAMS ((tree));\n-static void mangle_pointer_type PARAMS ((tree));\n-static void mangle_array_type PARAMS ((tree));\n-static int  mangle_record_type PARAMS ((tree, int));\n+static void mangle_type (tree);\n+static void mangle_pointer_type (tree);\n+static void mangle_array_type (tree);\n+static int  mangle_record_type (tree, int);\n \n-static int find_compression_pointer_match PARAMS ((tree));\n-static int find_compression_array_match PARAMS ((tree));\n-static int find_compression_record_match PARAMS ((tree, tree *));\n-static int find_compression_array_template_match PARAMS ((tree));\n+static int find_compression_pointer_match (tree);\n+static int find_compression_array_match (tree);\n+static int find_compression_record_match (tree, tree *);\n+static int find_compression_array_template_match (tree);\n \n-static void set_type_package_list PARAMS ((tree));\n-static int  entry_match_pointer_p PARAMS ((tree, int));\n-static void emit_compression_string PARAMS ((int));\n+static void set_type_package_list (tree);\n+static int  entry_match_pointer_p (tree, int);\n+static void emit_compression_string (int);\n \n-static void init_mangling PARAMS ((struct obstack *));\n-static tree finish_mangling PARAMS ((void));\n-static void compression_table_add PARAMS ((tree));\n+static void init_mangling (struct obstack *);\n+static tree finish_mangling (void);\n+static void compression_table_add (tree);\n \n-static void mangle_member_name PARAMS ((tree));\n+static void mangle_member_name (tree);\n \n /* We use an incoming obstack, always to be provided to the interface\n    functions. */"}, {"sha": "864ac4d684a4956eec88a7dbffb52da945efbc6f", "filename": "gcc/java/mangle_name.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fmangle_name.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fmangle_name.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle_name.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -35,9 +35,9 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"obstack.h\"\n #include \"toplev.h\"\n \n-static void append_unicode_mangled_name PARAMS ((const char *, int));\n+static void append_unicode_mangled_name (const char *, int);\n #ifndef HAVE_AS_UTF8\n-static int  unicode_mangling_length PARAMS ((const char *, int));\n+static int  unicode_mangling_length (const char *, int);\n #endif\n \n extern struct obstack *mangle_obstack;"}, {"sha": "2411b1187ba3e6d5c88eb70f11eb87f4c6d996e4", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -116,15 +116,15 @@ struct method_declarator {\n }\n \n /* Two actions for this grammar */\n-static int make_class_name_recursive PARAMS ((struct obstack *stack,\n-\t\t\t\t\t      struct class_context *ctx));\n-static char *get_class_name PARAMS ((void));\n-static void report_class_declaration PARAMS ((const char *));\n-static void report_main_declaration PARAMS ((struct method_declarator *));\n-static void push_class_context PARAMS ((const char *));\n-static void pop_class_context PARAMS ((void));\n-\n-void report PARAMS ((void)); \n+static int make_class_name_recursive (struct obstack *stack,\n+\t\t\t\t      struct class_context *ctx);\n+static char *get_class_name (void);\n+static void report_class_declaration (const char *);\n+static void report_main_declaration (struct method_declarator *);\n+static void push_class_context (const char *);\n+static void pop_class_context (void);\n+\n+void report (void); \n \n #include \"lex.h\"\n #include \"parse.h\""}, {"sha": "37731fbd255e50ed3a2d45a530b9ad963105e591", "filename": "gcc/java/parse.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -36,8 +36,8 @@ extern int quiet_flag;\n \n #ifndef JC1_LITE\n /* Function extern to java/ */\n-extern int int_fits_type_p PARAMS ((tree, tree));\n-extern tree stabilize_reference PARAMS ((tree));\n+extern int int_fits_type_p (tree, tree);\n+extern tree stabilize_reference (tree);\n #endif\n \n /* Macros for verbose debug info  */\n@@ -920,32 +920,32 @@ struct parser_ctxt {\n #define JAVA_RADIX10_FLAG(NODE) TREE_LANG_FLAG_0(NODE)\n \n #ifndef JC1_LITE\n-void java_complete_class PARAMS ((void));\n-void java_check_circular_reference PARAMS ((void));\n-void java_fix_constructors PARAMS ((void));\n-void java_layout_classes PARAMS ((void));\n-void java_reorder_fields PARAMS ((void));\n-tree java_method_add_stmt PARAMS ((tree, tree));\n-int java_report_errors PARAMS ((void));\n-extern tree do_resolve_class PARAMS ((tree, tree, tree, tree));\n+void java_complete_class (void);\n+void java_check_circular_reference (void);\n+void java_fix_constructors (void);\n+void java_layout_classes (void);\n+void java_reorder_fields (void);\n+tree java_method_add_stmt (tree, tree);\n+int java_report_errors (void);\n+extern tree do_resolve_class (tree, tree, tree, tree);\n #endif\n-char *java_get_line_col PARAMS ((const char *, int, int));\n-extern void reset_report PARAMS ((void));\n+char *java_get_line_col (const char *, int, int);\n+extern void reset_report (void);\n \n /* Always in use, no matter what you compile */\n-void java_push_parser_context PARAMS ((void));\n-void java_pop_parser_context PARAMS ((int));\n-void java_init_lex PARAMS ((FILE *, const char *));\n-extern void java_parser_context_save_global PARAMS ((void));\n-extern void java_parser_context_restore_global PARAMS ((void));\n-int yyparse PARAMS ((void));\n-extern int java_parse PARAMS ((void));\n-extern void yyerror PARAMS ((const char *))\n+void java_push_parser_context (void);\n+void java_pop_parser_context (int);\n+void java_init_lex (FILE *, const char *);\n+extern void java_parser_context_save_global (void);\n+extern void java_parser_context_restore_global (void);\n+int yyparse (void);\n+extern int java_parse (void);\n+extern void yyerror (const char *)\n #ifdef JC1_LITE\n ATTRIBUTE_NORETURN\n #endif\n ;\n-extern void java_expand_classes PARAMS ((void));\n+extern void java_expand_classes (void);\n \n extern struct parser_ctxt *ctxp;\n extern struct parser_ctxt *ctxp_for_generation;"}, {"sha": "3dbe3b3ed3ab02a5ac531763b935e127ef2bc65a", "filename": "gcc/java/parse.y", "status": "modified", "additions": 250, "deletions": 261, "changes": 511, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -73,272 +73,261 @@ definitions and other extensions.  */\n #include \"tree-inline.h\"\n \n /* Local function prototypes */\n-static char *java_accstring_lookup PARAMS ((int));\n-static void  classitf_redefinition_error PARAMS ((const char *,tree, tree, tree));\n-static void  variable_redefinition_error PARAMS ((tree, tree, tree, int));\n-static tree  create_class PARAMS ((int, tree, tree, tree));\n-static tree  create_interface PARAMS ((int, tree, tree));\n-static void  end_class_declaration PARAMS ((int));\n-static tree  find_field PARAMS ((tree, tree));\n-static tree lookup_field_wrapper PARAMS ((tree, tree));\n-static int   duplicate_declaration_error_p PARAMS ((tree, tree, tree));\n-static void  register_fields PARAMS ((int, tree, tree));\n-static tree parser_qualified_classname PARAMS ((tree));\n-static int  parser_check_super PARAMS ((tree, tree, tree));\n-static int  parser_check_super_interface PARAMS ((tree, tree, tree));\n-static void check_modifiers_consistency PARAMS ((int));\n-static tree lookup_cl PARAMS ((tree));\n-static tree lookup_java_method2 PARAMS ((tree, tree, int));\n-static tree method_header PARAMS ((int, tree, tree, tree));\n-static void fix_method_argument_names PARAMS ((tree ,tree));\n-static tree method_declarator PARAMS ((tree, tree));\n-static void parse_warning_context PARAMS ((tree cl, const char *msg, ...))\n+static char *java_accstring_lookup (int);\n+static void  classitf_redefinition_error (const char *,tree, tree, tree);\n+static void  variable_redefinition_error (tree, tree, tree, int);\n+static tree  create_class (int, tree, tree, tree);\n+static tree  create_interface (int, tree, tree);\n+static void  end_class_declaration (int);\n+static tree  find_field (tree, tree);\n+static tree lookup_field_wrapper (tree, tree);\n+static int   duplicate_declaration_error_p (tree, tree, tree);\n+static void  register_fields (int, tree, tree);\n+static tree parser_qualified_classname (tree);\n+static int  parser_check_super (tree, tree, tree);\n+static int  parser_check_super_interface (tree, tree, tree);\n+static void check_modifiers_consistency (int);\n+static tree lookup_cl (tree);\n+static tree lookup_java_method2 (tree, tree, int);\n+static tree method_header (int, tree, tree, tree);\n+static void fix_method_argument_names (tree ,tree);\n+static tree method_declarator (tree, tree);\n+static void parse_warning_context (tree cl, const char *msg, ...)\n   ATTRIBUTE_PRINTF_2;\n-static void issue_warning_error_from_context PARAMS ((tree, const char *msg, va_list))\n+static void issue_warning_error_from_context (tree, const char *msg, va_list)\n   ATTRIBUTE_PRINTF (2, 0);\n-static void parse_ctor_invocation_error PARAMS ((void));\n-static tree parse_jdk1_1_error PARAMS ((const char *));\n-static void complete_class_report_errors PARAMS ((jdep *));\n-static int process_imports PARAMS ((void));\n-static void read_import_dir PARAMS ((tree));\n-static int find_in_imports_on_demand PARAMS ((tree, tree));\n-static void find_in_imports PARAMS ((tree, tree));\n-static void check_inner_class_access PARAMS ((tree, tree, tree));\n-static int check_pkg_class_access PARAMS ((tree, tree, bool));\n-static void register_package PARAMS ((tree));\n-static tree resolve_package PARAMS ((tree, tree *, tree *));\n-static tree resolve_class PARAMS ((tree, tree, tree, tree));\n-static void declare_local_variables PARAMS ((int, tree, tree));\n-static void dump_java_tree PARAMS ((enum tree_dump_index, tree));\n-static void source_start_java_method PARAMS ((tree));\n-static void source_end_java_method PARAMS ((void));\n-static tree find_name_in_single_imports PARAMS ((tree));\n-static void check_abstract_method_header PARAMS ((tree));\n-static tree lookup_java_interface_method2 PARAMS ((tree, tree));\n-static tree resolve_expression_name PARAMS ((tree, tree *));\n-static tree maybe_create_class_interface_decl PARAMS ((tree, tree, tree, tree));\n-static int check_class_interface_creation PARAMS ((int, int, tree,\n-\t\t\t\t\t\t  tree, tree, tree));\n-static tree patch_method_invocation PARAMS ((tree, tree, tree, int,\n-\t\t\t\t\t    int *, tree *));\n-static int breakdown_qualified PARAMS ((tree *, tree *, tree));\n-static int in_same_package PARAMS ((tree, tree));\n-static tree resolve_and_layout PARAMS ((tree, tree));\n-static tree qualify_and_find PARAMS ((tree, tree, tree));\n-static tree resolve_no_layout PARAMS ((tree, tree));\n-static int invocation_mode PARAMS ((tree, int));\n-static tree find_applicable_accessible_methods_list PARAMS ((int, tree,\n-\t\t\t\t\t\t\t    tree, tree));\n-static void search_applicable_methods_list PARAMS ((int, tree, tree, tree,\n-\t\t\t\t\t\t   tree *, tree *));\n-static tree find_most_specific_methods_list PARAMS ((tree));\n-static int argument_types_convertible PARAMS ((tree, tree));\n-static tree patch_invoke PARAMS ((tree, tree, tree));\n-static int maybe_use_access_method PARAMS ((int, tree *, tree *));\n-static tree lookup_method_invoke PARAMS ((int, tree, tree, tree, tree));\n-static tree register_incomplete_type PARAMS ((int, tree, tree, tree));\n-static tree check_inner_circular_reference PARAMS ((tree, tree));\n-static tree check_circular_reference PARAMS ((tree));\n-static tree obtain_incomplete_type PARAMS ((tree));\n-static tree java_complete_lhs PARAMS ((tree));\n-static tree java_complete_tree PARAMS ((tree));\n-static tree maybe_generate_pre_expand_clinit PARAMS ((tree));\n-static int analyze_clinit_body PARAMS ((tree, tree));\n-static int maybe_yank_clinit PARAMS ((tree));\n-static void start_complete_expand_method PARAMS ((tree));\n-static void java_complete_expand_method PARAMS ((tree));\n-static void java_expand_method_bodies PARAMS ((tree));\n-static int  unresolved_type_p PARAMS ((tree, tree *));\n-static void create_jdep_list PARAMS ((struct parser_ctxt *));\n-static tree build_expr_block PARAMS ((tree, tree));\n-static tree enter_block PARAMS ((void));\n-static tree exit_block PARAMS ((void));\n-static tree lookup_name_in_blocks PARAMS ((tree));\n-static void maybe_absorb_scoping_blocks PARAMS ((void));\n-static tree build_method_invocation PARAMS ((tree, tree));\n-static tree build_new_invocation PARAMS ((tree, tree));\n-static tree build_assignment PARAMS ((int, int, tree, tree));\n-static tree build_binop PARAMS ((enum tree_code, int, tree, tree));\n-static tree patch_assignment PARAMS ((tree, tree));\n-static tree patch_binop PARAMS ((tree, tree, tree));\n-static tree build_unaryop PARAMS ((int, int, tree));\n-static tree build_incdec PARAMS ((int, int, tree, int));\n-static tree patch_unaryop PARAMS ((tree, tree));\n-static tree build_cast PARAMS ((int, tree, tree));\n-static tree build_null_of_type PARAMS ((tree));\n-static tree patch_cast PARAMS ((tree, tree));\n-static int valid_ref_assignconv_cast_p PARAMS ((tree, tree, int));\n-static int valid_builtin_assignconv_identity_widening_p PARAMS ((tree, tree));\n-static int valid_cast_to_p PARAMS ((tree, tree));\n-static int valid_method_invocation_conversion_p PARAMS ((tree, tree));\n-static tree try_builtin_assignconv PARAMS ((tree, tree, tree));\n-static tree try_reference_assignconv PARAMS ((tree, tree));\n-static tree build_unresolved_array_type PARAMS ((tree));\n-static int build_type_name_from_array_name PARAMS ((tree, tree *));\n-static tree build_array_from_name PARAMS ((tree, tree, tree, tree *));\n-static tree build_array_ref PARAMS ((int, tree, tree));\n-static tree patch_array_ref PARAMS ((tree));\n-static tree make_qualified_name PARAMS ((tree, tree, int));\n-static tree merge_qualified_name PARAMS ((tree, tree));\n-static tree make_qualified_primary PARAMS ((tree, tree, int));\n-static int resolve_qualified_expression_name PARAMS ((tree, tree *,\n-\t\t\t\t\t\t     tree *, tree *));\n-static void qualify_ambiguous_name PARAMS ((tree));\n-static tree resolve_field_access PARAMS ((tree, tree *, tree *));\n-static tree build_newarray_node PARAMS ((tree, tree, int));\n-static tree patch_newarray PARAMS ((tree));\n-static tree resolve_type_during_patch PARAMS ((tree));\n-static tree build_this PARAMS ((int));\n-static tree build_wfl_wrap PARAMS ((tree, int));\n-static tree build_return PARAMS ((int, tree));\n-static tree patch_return PARAMS ((tree));\n-static tree maybe_access_field PARAMS ((tree, tree, tree));\n-static int complete_function_arguments PARAMS ((tree));\n-static int check_for_static_method_reference PARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t      tree, tree));\n-static int not_accessible_p PARAMS ((tree, tree, tree, int));\n-static void check_deprecation PARAMS ((tree, tree));\n-static int class_in_current_package PARAMS ((tree));\n-static tree build_if_else_statement PARAMS ((int, tree, tree, tree));\n-static tree patch_if_else_statement PARAMS ((tree));\n-static tree add_stmt_to_compound PARAMS ((tree, tree, tree));\n-static tree add_stmt_to_block PARAMS ((tree, tree, tree));\n-static tree patch_exit_expr PARAMS ((tree));\n-static tree build_labeled_block PARAMS ((int, tree));\n-static tree finish_labeled_statement PARAMS ((tree, tree));\n-static tree build_bc_statement PARAMS ((int, int, tree));\n-static tree patch_bc_statement PARAMS ((tree));\n-static tree patch_loop_statement PARAMS ((tree));\n-static tree build_new_loop PARAMS ((tree));\n-static tree build_loop_body PARAMS ((int, tree, int));\n-static tree finish_loop_body PARAMS ((int, tree, tree, int));\n-static tree build_debugable_stmt PARAMS ((int, tree));\n-static tree finish_for_loop PARAMS ((int, tree, tree, tree));\n-static tree patch_switch_statement PARAMS ((tree));\n-static tree string_constant_concatenation PARAMS ((tree, tree));\n-static tree build_string_concatenation PARAMS ((tree, tree));\n-static tree patch_string_cst PARAMS ((tree));\n-static tree patch_string PARAMS ((tree));\n-static tree encapsulate_with_try_catch PARAMS ((int, tree, tree, tree));\n-static tree build_assertion PARAMS ((int, tree, tree));\n-static tree build_try_statement PARAMS ((int, tree, tree));\n-static tree build_try_finally_statement PARAMS ((int, tree, tree));\n-static tree patch_try_statement PARAMS ((tree));\n-static tree patch_synchronized_statement PARAMS ((tree, tree));\n-static tree patch_throw_statement PARAMS ((tree, tree));\n-static void check_thrown_exceptions PARAMS ((int, tree));\n-static int check_thrown_exceptions_do PARAMS ((tree));\n-static void purge_unchecked_exceptions PARAMS ((tree));\n-static bool ctors_unchecked_throws_clause_p PARAMS ((tree));\n-static void check_throws_clauses PARAMS ((tree, tree, tree));\n-static void finish_method_declaration PARAMS ((tree));\n-static tree build_super_invocation PARAMS ((tree));\n-static int verify_constructor_circularity PARAMS ((tree, tree));\n-static char *constructor_circularity_msg PARAMS ((tree, tree));\n-static tree build_this_super_qualified_invocation PARAMS ((int, tree, tree,\n-\t\t\t\t\t\t\t  int, int));\n-static const char *get_printable_method_name PARAMS ((tree));\n-static tree patch_conditional_expr PARAMS ((tree, tree, tree));\n-static tree generate_finit PARAMS ((tree));\n-static tree generate_instinit PARAMS ((tree));\n-static tree build_instinit_invocation PARAMS ((tree));\n-static void fix_constructors PARAMS ((tree));\n-static tree build_alias_initializer_parameter_list PARAMS ((int, tree,\n-\t\t\t\t\t\t\t    tree, int *));\n-static tree craft_constructor PARAMS ((tree, tree));\n-static int verify_constructor_super PARAMS ((tree));\n-static tree create_artificial_method PARAMS ((tree, int, tree, tree, tree));\n-static void start_artificial_method_body PARAMS ((tree));\n-static void end_artificial_method_body PARAMS ((tree));\n-static int check_method_redefinition PARAMS ((tree, tree));\n-static int check_method_types_complete PARAMS ((tree));\n-static void java_check_regular_methods PARAMS ((tree));\n-static void java_check_abstract_methods PARAMS ((tree));\n-static void unreachable_stmt_error PARAMS ((tree));\n-static tree find_expr_with_wfl PARAMS ((tree));\n-static void missing_return_error PARAMS ((tree));\n-static tree build_new_array_init PARAMS ((int, tree));\n-static tree patch_new_array_init PARAMS ((tree, tree));\n-static tree maybe_build_array_element_wfl PARAMS ((tree));\n-static int array_constructor_check_entry PARAMS ((tree, tree));\n-static const char *purify_type_name PARAMS ((const char *));\n-static tree fold_constant_for_init PARAMS ((tree, tree));\n-static tree strip_out_static_field_access_decl PARAMS ((tree));\n-static jdeplist *reverse_jdep_list PARAMS ((struct parser_ctxt *));\n-static void static_ref_err PARAMS ((tree, tree, tree));\n-static void parser_add_interface PARAMS ((tree, tree, tree));\n-static void add_superinterfaces PARAMS ((tree, tree));\n-static tree jdep_resolve_class PARAMS ((jdep *));\n-static int note_possible_classname PARAMS ((const char *, int));\n-static void java_complete_expand_classes PARAMS ((void));\n-static void java_complete_expand_class PARAMS ((tree));\n-static void java_complete_expand_methods PARAMS ((tree));\n-static tree cut_identifier_in_qualified PARAMS ((tree));\n-static tree java_stabilize_reference PARAMS ((tree));\n-static tree do_unary_numeric_promotion PARAMS ((tree));\n-static char * operator_string PARAMS ((tree));\n-static tree do_merge_string_cste PARAMS ((tree, const char *, int, int));\n-static tree merge_string_cste PARAMS ((tree, tree, int));\n-static tree java_refold PARAMS ((tree));\n-static int java_decl_equiv PARAMS ((tree, tree));\n-static int binop_compound_p PARAMS ((enum tree_code));\n-static tree search_loop PARAMS ((tree));\n-static int labeled_block_contains_loop_p PARAMS ((tree, tree));\n-static int check_abstract_method_definitions PARAMS ((int, tree, tree));\n-static void java_check_abstract_method_definitions PARAMS ((tree));\n-static void java_debug_context_do PARAMS ((int));\n-static void java_parser_context_push_initialized_field PARAMS ((void));\n-static void java_parser_context_pop_initialized_field PARAMS ((void));\n-static tree reorder_static_initialized PARAMS ((tree));\n-static void java_parser_context_suspend PARAMS ((void));\n-static void java_parser_context_resume PARAMS ((void));\n-static int pop_current_osb PARAMS ((struct parser_ctxt *));\n+static void parse_ctor_invocation_error (void);\n+static tree parse_jdk1_1_error (const char *);\n+static void complete_class_report_errors (jdep *);\n+static int process_imports (void);\n+static void read_import_dir (tree);\n+static int find_in_imports_on_demand (tree, tree);\n+static void find_in_imports (tree, tree);\n+static void check_inner_class_access (tree, tree, tree);\n+static int check_pkg_class_access (tree, tree, bool);\n+static void register_package (tree);\n+static tree resolve_package (tree, tree *, tree *);\n+static tree resolve_class (tree, tree, tree, tree);\n+static void declare_local_variables (int, tree, tree);\n+static void dump_java_tree (enum tree_dump_index, tree);\n+static void source_start_java_method (tree);\n+static void source_end_java_method (void);\n+static tree find_name_in_single_imports (tree);\n+static void check_abstract_method_header (tree);\n+static tree lookup_java_interface_method2 (tree, tree);\n+static tree resolve_expression_name (tree, tree *);\n+static tree maybe_create_class_interface_decl (tree, tree, tree, tree);\n+static int check_class_interface_creation (int, int, tree, tree, tree, tree);\n+static tree patch_method_invocation (tree, tree, tree, int, int *, tree *);\n+static int breakdown_qualified (tree *, tree *, tree);\n+static int in_same_package (tree, tree);\n+static tree resolve_and_layout (tree, tree);\n+static tree qualify_and_find (tree, tree, tree);\n+static tree resolve_no_layout (tree, tree);\n+static int invocation_mode (tree, int);\n+static tree find_applicable_accessible_methods_list (int, tree, tree, tree);\n+static void search_applicable_methods_list (int, tree, tree, tree, tree *, tree *);\n+static tree find_most_specific_methods_list (tree);\n+static int argument_types_convertible (tree, tree);\n+static tree patch_invoke (tree, tree, tree);\n+static int maybe_use_access_method (int, tree *, tree *);\n+static tree lookup_method_invoke (int, tree, tree, tree, tree);\n+static tree register_incomplete_type (int, tree, tree, tree);\n+static tree check_inner_circular_reference (tree, tree);\n+static tree check_circular_reference (tree);\n+static tree obtain_incomplete_type (tree);\n+static tree java_complete_lhs (tree);\n+static tree java_complete_tree (tree);\n+static tree maybe_generate_pre_expand_clinit (tree);\n+static int analyze_clinit_body (tree, tree);\n+static int maybe_yank_clinit (tree);\n+static void start_complete_expand_method (tree);\n+static void java_complete_expand_method (tree);\n+static void java_expand_method_bodies (tree);\n+static int  unresolved_type_p (tree, tree *);\n+static void create_jdep_list (struct parser_ctxt *);\n+static tree build_expr_block (tree, tree);\n+static tree enter_block (void);\n+static tree exit_block (void);\n+static tree lookup_name_in_blocks (tree);\n+static void maybe_absorb_scoping_blocks (void);\n+static tree build_method_invocation (tree, tree);\n+static tree build_new_invocation (tree, tree);\n+static tree build_assignment (int, int, tree, tree);\n+static tree build_binop (enum tree_code, int, tree, tree);\n+static tree patch_assignment (tree, tree);\n+static tree patch_binop (tree, tree, tree);\n+static tree build_unaryop (int, int, tree);\n+static tree build_incdec (int, int, tree, int);\n+static tree patch_unaryop (tree, tree);\n+static tree build_cast (int, tree, tree);\n+static tree build_null_of_type (tree);\n+static tree patch_cast (tree, tree);\n+static int valid_ref_assignconv_cast_p (tree, tree, int);\n+static int valid_builtin_assignconv_identity_widening_p (tree, tree);\n+static int valid_cast_to_p (tree, tree);\n+static int valid_method_invocation_conversion_p (tree, tree);\n+static tree try_builtin_assignconv (tree, tree, tree);\n+static tree try_reference_assignconv (tree, tree);\n+static tree build_unresolved_array_type (tree);\n+static int build_type_name_from_array_name (tree, tree *);\n+static tree build_array_from_name (tree, tree, tree, tree *);\n+static tree build_array_ref (int, tree, tree);\n+static tree patch_array_ref (tree);\n+static tree make_qualified_name (tree, tree, int);\n+static tree merge_qualified_name (tree, tree);\n+static tree make_qualified_primary (tree, tree, int);\n+static int resolve_qualified_expression_name (tree, tree *, tree *, tree *);\n+static void qualify_ambiguous_name (tree);\n+static tree resolve_field_access (tree, tree *, tree *);\n+static tree build_newarray_node (tree, tree, int);\n+static tree patch_newarray (tree);\n+static tree resolve_type_during_patch (tree);\n+static tree build_this (int);\n+static tree build_wfl_wrap (tree, int);\n+static tree build_return (int, tree);\n+static tree patch_return (tree);\n+static tree maybe_access_field (tree, tree, tree);\n+static int complete_function_arguments (tree);\n+static int check_for_static_method_reference (tree, tree, tree, tree, tree);\n+static int not_accessible_p (tree, tree, tree, int);\n+static void check_deprecation (tree, tree);\n+static int class_in_current_package (tree);\n+static tree build_if_else_statement (int, tree, tree, tree);\n+static tree patch_if_else_statement (tree);\n+static tree add_stmt_to_compound (tree, tree, tree);\n+static tree add_stmt_to_block (tree, tree, tree);\n+static tree patch_exit_expr (tree);\n+static tree build_labeled_block (int, tree);\n+static tree finish_labeled_statement (tree, tree);\n+static tree build_bc_statement (int, int, tree);\n+static tree patch_bc_statement (tree);\n+static tree patch_loop_statement (tree);\n+static tree build_new_loop (tree);\n+static tree build_loop_body (int, tree, int);\n+static tree finish_loop_body (int, tree, tree, int);\n+static tree build_debugable_stmt (int, tree);\n+static tree finish_for_loop (int, tree, tree, tree);\n+static tree patch_switch_statement (tree);\n+static tree string_constant_concatenation (tree, tree);\n+static tree build_string_concatenation (tree, tree);\n+static tree patch_string_cst (tree);\n+static tree patch_string (tree);\n+static tree encapsulate_with_try_catch (int, tree, tree, tree);\n+static tree build_assertion (int, tree, tree);\n+static tree build_try_statement (int, tree, tree);\n+static tree build_try_finally_statement (int, tree, tree);\n+static tree patch_try_statement (tree);\n+static tree patch_synchronized_statement (tree, tree);\n+static tree patch_throw_statement (tree, tree);\n+static void check_thrown_exceptions (int, tree);\n+static int check_thrown_exceptions_do (tree);\n+static void purge_unchecked_exceptions (tree);\n+static bool ctors_unchecked_throws_clause_p (tree);\n+static void check_throws_clauses (tree, tree, tree);\n+static void finish_method_declaration (tree);\n+static tree build_super_invocation (tree);\n+static int verify_constructor_circularity (tree, tree);\n+static char *constructor_circularity_msg (tree, tree);\n+static tree build_this_super_qualified_invocation (int, tree, tree, int, int);\n+static const char *get_printable_method_name (tree);\n+static tree patch_conditional_expr (tree, tree, tree);\n+static tree generate_finit (tree);\n+static tree generate_instinit (tree);\n+static tree build_instinit_invocation (tree);\n+static void fix_constructors (tree);\n+static tree build_alias_initializer_parameter_list (int, tree, tree, int *);\n+static tree craft_constructor (tree, tree);\n+static int verify_constructor_super (tree);\n+static tree create_artificial_method (tree, int, tree, tree, tree);\n+static void start_artificial_method_body (tree);\n+static void end_artificial_method_body (tree);\n+static int check_method_redefinition (tree, tree);\n+static int check_method_types_complete (tree);\n+static void java_check_regular_methods (tree);\n+static void java_check_abstract_methods (tree);\n+static void unreachable_stmt_error (tree);\n+static tree find_expr_with_wfl (tree);\n+static void missing_return_error (tree);\n+static tree build_new_array_init (int, tree);\n+static tree patch_new_array_init (tree, tree);\n+static tree maybe_build_array_element_wfl (tree);\n+static int array_constructor_check_entry (tree, tree);\n+static const char *purify_type_name (const char *);\n+static tree fold_constant_for_init (tree, tree);\n+static tree strip_out_static_field_access_decl (tree);\n+static jdeplist *reverse_jdep_list (struct parser_ctxt *);\n+static void static_ref_err (tree, tree, tree);\n+static void parser_add_interface (tree, tree, tree);\n+static void add_superinterfaces (tree, tree);\n+static tree jdep_resolve_class (jdep *);\n+static int note_possible_classname (const char *, int);\n+static void java_complete_expand_classes (void);\n+static void java_complete_expand_class (tree);\n+static void java_complete_expand_methods (tree);\n+static tree cut_identifier_in_qualified (tree);\n+static tree java_stabilize_reference (tree);\n+static tree do_unary_numeric_promotion (tree);\n+static char * operator_string (tree);\n+static tree do_merge_string_cste (tree, const char *, int, int);\n+static tree merge_string_cste (tree, tree, int);\n+static tree java_refold (tree);\n+static int java_decl_equiv (tree, tree);\n+static int binop_compound_p (enum tree_code);\n+static tree search_loop (tree);\n+static int labeled_block_contains_loop_p (tree, tree);\n+static int check_abstract_method_definitions (int, tree, tree);\n+static void java_check_abstract_method_definitions (tree);\n+static void java_debug_context_do (int);\n+static void java_parser_context_push_initialized_field (void);\n+static void java_parser_context_pop_initialized_field (void);\n+static tree reorder_static_initialized (tree);\n+static void java_parser_context_suspend (void);\n+static void java_parser_context_resume (void);\n+static int pop_current_osb (struct parser_ctxt *);\n \n /* JDK 1.1 work. FIXME */\n \n-static tree maybe_make_nested_class_name PARAMS ((tree));\n-static int make_nested_class_name PARAMS ((tree));\n-static void set_nested_class_simple_name_value PARAMS ((tree, int));\n-static void link_nested_class_to_enclosing PARAMS ((void));\n-static tree resolve_inner_class PARAMS ((htab_t, tree, tree *, tree *, tree));\n-static tree find_as_inner_class PARAMS ((tree, tree, tree));\n-static tree find_as_inner_class_do PARAMS ((tree, tree));\n-static int check_inner_class_redefinition PARAMS ((tree, tree));\n-\n-static tree build_thisn_assign PARAMS ((void));\n-static tree build_current_thisn PARAMS ((tree));\n-static tree build_access_to_thisn PARAMS ((tree, tree, int));\n-static tree maybe_build_thisn_access_method PARAMS ((tree));\n-\n-static tree build_outer_field_access PARAMS ((tree, tree));\n-static tree build_outer_field_access_methods PARAMS ((tree));\n-static tree build_outer_field_access_expr PARAMS ((int, tree, tree,\n-\t\t\t\t\t\t  tree, tree));\n-static tree build_outer_method_access_method PARAMS ((tree));\n-static tree build_new_access_id PARAMS ((void));\n-static tree build_outer_field_access_method PARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t    tree, tree));\n-\n-static int outer_field_access_p PARAMS ((tree, tree));\n-static int outer_field_expanded_access_p PARAMS ((tree, tree *,\n-\t\t\t\t\t\t tree *, tree *));\n-static tree outer_field_access_fix PARAMS ((tree, tree, tree));\n-static tree build_incomplete_class_ref PARAMS ((int, tree));\n-static tree patch_incomplete_class_ref PARAMS ((tree));\n-static tree create_anonymous_class PARAMS ((int, tree));\n-static void patch_anonymous_class PARAMS ((tree, tree, tree));\n-static void add_inner_class_fields PARAMS ((tree, tree));\n-\n-static tree build_dot_class_method PARAMS ((tree));\n-static tree build_dot_class_method_invocation PARAMS ((tree));\n-static void create_new_parser_context PARAMS ((int));\n-static void mark_parser_ctxt PARAMS ((void *));\n-static tree maybe_build_class_init_for_field PARAMS ((tree, tree));\n-\n-static int attach_init_test_initialization_flags PARAMS ((PTR *, PTR));\n-static int emit_test_initialization PARAMS ((PTR *, PTR));\n-\n-static char *string_convert_int_cst PARAMS ((tree));\n+static tree maybe_make_nested_class_name (tree);\n+static int make_nested_class_name (tree);\n+static void set_nested_class_simple_name_value (tree, int);\n+static void link_nested_class_to_enclosing (void);\n+static tree resolve_inner_class (htab_t, tree, tree *, tree *, tree);\n+static tree find_as_inner_class (tree, tree, tree);\n+static tree find_as_inner_class_do (tree, tree);\n+static int check_inner_class_redefinition (tree, tree);\n+\n+static tree build_thisn_assign (void);\n+static tree build_current_thisn (tree);\n+static tree build_access_to_thisn (tree, tree, int);\n+static tree maybe_build_thisn_access_method (tree);\n+\n+static tree build_outer_field_access (tree, tree);\n+static tree build_outer_field_access_methods (tree);\n+static tree build_outer_field_access_expr (int, tree, tree, tree, tree);\n+static tree build_outer_method_access_method (tree);\n+static tree build_new_access_id (void);\n+static tree build_outer_field_access_method (tree, tree, tree, tree, tree);\n+\n+static int outer_field_access_p (tree, tree);\n+static int outer_field_expanded_access_p (tree, tree *, tree *, tree *);\n+static tree outer_field_access_fix (tree, tree, tree);\n+static tree build_incomplete_class_ref (int, tree);\n+static tree patch_incomplete_class_ref (tree);\n+static tree create_anonymous_class (int, tree);\n+static void patch_anonymous_class (tree, tree, tree);\n+static void add_inner_class_fields (tree, tree);\n+\n+static tree build_dot_class_method (tree);\n+static tree build_dot_class_method_invocation (tree);\n+static void create_new_parser_context (int);\n+static void mark_parser_ctxt (void *);\n+static tree maybe_build_class_init_for_field (tree, tree);\n+\n+static int attach_init_test_initialization_flags (PTR *, PTR);\n+static int emit_test_initialization (PTR *, PTR);\n+\n+static char *string_convert_int_cst (tree);\n \n /* Number of error found so far. */\n int java_error_count;"}, {"sha": "5b40c0a41cb6aaf309417f62a0eb249132fafada", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -39,11 +39,11 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n \n-static tree convert_ieee_real_to_integer PARAMS ((tree, tree));\n-static tree parse_signature_type PARAMS ((const unsigned char **,\n-\t\t\t\t\t const unsigned char *));\n-static tree lookup_do PARAMS ((tree, tree, tree, tree, tree (*)(tree)));\n-static tree build_null_signature PARAMS ((tree));\n+static tree convert_ieee_real_to_integer (tree, tree);\n+static tree parse_signature_type (const unsigned char **,\n+\t\t\t\t  const unsigned char *);\n+static tree lookup_do (tree, tree, tree, tree, tree (*)(tree));\n+static tree build_null_signature (tree);\n \n tree * type_map;\n \n@@ -790,7 +790,7 @@ has_method (class, method_name)\n static tree\n lookup_do (searched_class, searched_interface, method_name, signature, signature_builder)\n      tree searched_class, searched_interface, method_name, signature;\n-     tree (*signature_builder) PARAMS ((tree));\n+     tree (*signature_builder) (tree);\n {\n   tree method;\n   "}, {"sha": "a21cb83694b42ae29bd132e44abf60af14dea64a", "filename": "gcc/java/verify.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -36,12 +36,12 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"java-except.h\"\n #include \"toplev.h\"\n \n-static void push_pending_label PARAMS ((tree));\n-static tree merge_types PARAMS ((tree, tree));\n-static const char *check_pending_block PARAMS ((tree));\n-static void type_stack_dup PARAMS ((int, int));\n-static int start_pc_cmp PARAMS ((const PTR, const PTR));\n-static char *pop_argument_types PARAMS ((tree));\n+static void push_pending_label (tree);\n+static tree merge_types (tree, tree);\n+static const char *check_pending_block (tree);\n+static void type_stack_dup (int, int);\n+static int start_pc_cmp (const PTR, const PTR);\n+static char *pop_argument_types (tree);\n \n extern int stack_pointer;\n "}, {"sha": "cc1b475c5ae794374adc44097d8e8d9c61e5eba8", "filename": "gcc/java/xref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -81,7 +81,7 @@ expand_xref (node)\n {\n   /* Maintain these two cached. */\n   static FILE *fp = NULL;\n-  static void (*current_expand) PARAMS ((FILE *, tree)) = NULL;\n+  static void (*current_expand) (FILE *, tree) = NULL;\n \n   if ( !flag_emit_xref )\n     return;"}, {"sha": "227bd59ac4f12e2274f7304800c3a2075be295b4", "filename": "gcc/java/xref.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fxref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fxref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -24,11 +24,11 @@ of Sun Microsystems, Inc. in the United States and other countries.\n The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n /* Exported functions. */\n-int xref_flag_value PARAMS ((const char *));\n-void expand_xref PARAMS ((tree));\n-void xref_set_data PARAMS ((int, void *));\n-void *xref_get_data PARAMS ((int));\n-void xref_set_current_fp PARAMS ((FILE *));\n+int xref_flag_value (const char *);\n+void expand_xref (tree);\n+void xref_set_data (int, void *);\n+void *xref_get_data (int);\n+void xref_set_current_fp (FILE *);\n \n /* flag_emit_xref range of possible values. */\n \n@@ -40,7 +40,7 @@ enum {\n \n typedef struct {\n   char *key;\t\t\t         /* Activator in -fxref=<key>  */\n-  void (*expand) PARAMS ((FILE *, tree)); /* Function to write xrefs out */\n+  void (*expand) (FILE *, tree);         /* Function to write xrefs out */\n   FILE *fp;\t\t\t         /* fp to use during the call.  */\n   void *data;\t\t\t         /* Placeholder for additional data */\n } xref_flag_table;"}, {"sha": "148c77e85daa3567786f3d04d60f7cea6035f635", "filename": "gcc/java/zextract.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fzextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fzextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzextract.c?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -214,9 +214,9 @@ typedef unsigned long     ulg;  /*  predefined on some systems) & match zip  */\n /* Prototypes          */\n /***********************/\n \n-static ush makeword PARAMS ((const uch *));\n-static ulg makelong PARAMS ((const uch *));\n-static long find_zip_file_start PARAMS ((int fd, long offset));\n+static ush makeword (const uch *);\n+static ulg makelong (const uch *);\n+static long find_zip_file_start (int fd, long offset);\n \n /***********************/\n /* Function makeword() */"}, {"sha": "f4a477287861ca8c7308dd3f4db8da77a1c195bb", "filename": "gcc/java/zipfile.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fzipfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2097937c57963f4bea75df2d0abe691f74de3fe/gcc%2Fjava%2Fzipfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fzipfile.h?ref=d2097937c57963f4bea75df2d0abe691f74de3fe", "patch": "@@ -60,10 +60,9 @@ extern struct ZipFile *SeenZipFiles;\n    ((ZipDirectory*)((char*)(ZIPD)+(ZIPD)->direntry_size))\n #define ZIPMAGIC 0x504b0304\t\n \n-extern ZipFile * opendir_in_zip PARAMS ((const char *, int));\n-extern int read_zip_archive PARAMS ((ZipFile *));\n+extern ZipFile * opendir_in_zip (const char *, int);\n+extern int read_zip_archive (ZipFile *);\n #ifdef GCC_JCF_H\n-extern int read_zip_member PARAMS ((JCF*, ZipDirectory*, ZipFile *));\n-extern int open_in_zip PARAMS ((struct JCF *, const char *,\n-\t\t\t       const char *, int));\n+extern int read_zip_member (JCF*, ZipDirectory*, ZipFile *);\n+extern int open_in_zip (struct JCF *, const char *, const char *, int);\n #endif"}]}