{"sha": "d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0MmFjYzM5NmQ2NDUyNjdjZDFjY2JkYjRkMGQ3M2NjOWIxZWY0OA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-29T13:15:45Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-07-30T19:10:48Z"}, "message": "Change const basic_block to const_basic_block.\n\n\t* gimple-range-cache.cc (*::set_bb_range): Change const basic_block to\n\tconst_basic_block..\n\t(*::get_bb_range): Ditto.\n\t(*::bb_range_p): Ditto.\n\t* gimple-range-cache.h: Change prototypes.", "tree": {"sha": "ee8ccd0f3a130e9936956534e6ca6a14b0c85446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8ccd0f3a130e9936956534e6ca6a14b0c85446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48/comments", "author": null, "committer": null, "parents": [{"sha": "0b3560d3a9f2b55ba4807f2b0f8cbbf6cee9e6e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3560d3a9f2b55ba4807f2b0f8cbbf6cee9e6e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3560d3a9f2b55ba4807f2b0f8cbbf6cee9e6e3"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "91541f12c3c2ed3ee958a589be10d1189bff7541", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "patch": "@@ -160,9 +160,9 @@ non_null_ref::process_name (tree name)\n class ssa_block_ranges\n {\n public:\n-  virtual bool set_bb_range (const basic_block bb, const irange &r) = 0;\n-  virtual bool get_bb_range (irange &r, const basic_block bb) = 0;\n-  virtual bool bb_range_p (const basic_block bb) = 0;\n+  virtual bool set_bb_range (const_basic_block bb, const irange &r) = 0;\n+  virtual bool get_bb_range (irange &r, const_basic_block bb) = 0;\n+  virtual bool bb_range_p (const_basic_block bb) = 0;\n \n   void dump(FILE *f);\n };\n@@ -193,9 +193,9 @@ class sbr_vector : public ssa_block_ranges\n public:\n   sbr_vector (tree t, irange_allocator *allocator);\n \n-  virtual bool set_bb_range (const basic_block bb, const irange &r) OVERRIDE;\n-  virtual bool get_bb_range (irange &r, const basic_block bb) OVERRIDE;\n-  virtual bool bb_range_p (const basic_block bb) OVERRIDE;\n+  virtual bool set_bb_range (const_basic_block bb, const irange &r) OVERRIDE;\n+  virtual bool get_bb_range (irange &r, const_basic_block bb) OVERRIDE;\n+  virtual bool bb_range_p (const_basic_block bb) OVERRIDE;\n protected:\n   irange **m_tab;\t// Non growing vector.\n   int m_tab_size;\n@@ -225,7 +225,7 @@ sbr_vector::sbr_vector (tree t, irange_allocator *allocator)\n // Set the range for block BB to be R.\n \n bool\n-sbr_vector::set_bb_range (const basic_block bb, const irange &r)\n+sbr_vector::set_bb_range (const_basic_block bb, const irange &r)\n {\n   irange *m;\n   gcc_checking_assert (bb->index < m_tab_size);\n@@ -243,7 +243,7 @@ sbr_vector::set_bb_range (const basic_block bb, const irange &r)\n // there is no range.\n \n bool\n-sbr_vector::get_bb_range (irange &r, const basic_block bb)\n+sbr_vector::get_bb_range (irange &r, const_basic_block bb)\n {\n   gcc_checking_assert (bb->index < m_tab_size);\n   irange *m = m_tab[bb->index];\n@@ -258,7 +258,7 @@ sbr_vector::get_bb_range (irange &r, const basic_block bb)\n // Return true if a range is present.\n \n bool\n-sbr_vector::bb_range_p (const basic_block bb)\n+sbr_vector::bb_range_p (const_basic_block bb)\n {\n   gcc_checking_assert (bb->index < m_tab_size);\n   return m_tab[bb->index] != NULL;\n@@ -281,9 +281,9 @@ class sbr_sparse_bitmap : public ssa_block_ranges\n {\n public:\n   sbr_sparse_bitmap (tree t, irange_allocator *allocator, bitmap_obstack *bm);\n-  virtual bool set_bb_range (const basic_block bb, const irange &r) OVERRIDE;\n-  virtual bool get_bb_range (irange &r, const basic_block bb) OVERRIDE;\n-  virtual bool bb_range_p (const basic_block bb) OVERRIDE;\n+  virtual bool set_bb_range (const_basic_block bb, const irange &r) OVERRIDE;\n+  virtual bool get_bb_range (irange &r, const_basic_block bb) OVERRIDE;\n+  virtual bool bb_range_p (const_basic_block bb) OVERRIDE;\n private:\n   void bitmap_set_quad (bitmap head, int quad, int quad_value);\n   int bitmap_get_quad (const_bitmap head, int quad);\n@@ -342,7 +342,7 @@ sbr_sparse_bitmap::bitmap_get_quad (const_bitmap head, int quad)\n // Set the range on entry to basic block BB to R.\n \n bool\n-sbr_sparse_bitmap::set_bb_range (const basic_block bb, const irange &r)\n+sbr_sparse_bitmap::set_bb_range (const_basic_block bb, const irange &r)\n {\n   if (r.undefined_p ())\n     {\n@@ -368,7 +368,7 @@ sbr_sparse_bitmap::set_bb_range (const basic_block bb, const irange &r)\n // there is no range.\n \n bool\n-sbr_sparse_bitmap::get_bb_range (irange &r, const basic_block bb)\n+sbr_sparse_bitmap::get_bb_range (irange &r, const_basic_block bb)\n {\n   int value = bitmap_get_quad (bitvec, bb->index);\n \n@@ -386,7 +386,7 @@ sbr_sparse_bitmap::get_bb_range (irange &r, const basic_block bb)\n // Return true if a range is present.\n \n bool\n-sbr_sparse_bitmap::bb_range_p (const basic_block bb)\n+sbr_sparse_bitmap::bb_range_p (const_basic_block bb)\n {\n   return (bitmap_get_quad (bitvec, bb->index) != 0);\n }\n@@ -417,7 +417,7 @@ block_range_cache::~block_range_cache ()\n // If it has not been accessed yet, allocate it first.\n \n bool\n-block_range_cache::set_bb_range (tree name, const basic_block bb,\n+block_range_cache::set_bb_range (tree name, const_basic_block bb,\n \t\t\t\t const irange &r)\n {\n   unsigned v = SSA_NAME_VERSION (name);\n@@ -464,7 +464,7 @@ block_range_cache::query_block_ranges (tree name)\n // is one.\n \n bool\n-block_range_cache::get_bb_range (irange &r, tree name, const basic_block bb)\n+block_range_cache::get_bb_range (irange &r, tree name, const_basic_block bb)\n {\n   ssa_block_ranges *ptr = query_block_ranges (name);\n   if (ptr)\n@@ -475,7 +475,7 @@ block_range_cache::get_bb_range (irange &r, tree name, const basic_block bb)\n // Return true if NAME has a range set in block BB.\n \n bool\n-block_range_cache::bb_range_p (tree name, const basic_block bb)\n+block_range_cache::bb_range_p (tree name, const_basic_block bb)\n {\n   ssa_block_ranges *ptr = query_block_ranges (name);\n   if (ptr)"}, {"sha": "1e77c9bf3a9304708edfb43a061cb058d594187d", "filename": "gcc/gimple-range-cache.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48/gcc%2Fgimple-range-cache.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d242acc396d645267cd1ccbdb4d0d73cc9b1ef48/gcc%2Fgimple-range-cache.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.h?ref=d242acc396d645267cd1ccbdb4d0d73cc9b1ef48", "patch": "@@ -52,9 +52,9 @@ class block_range_cache\n   block_range_cache ();\n   ~block_range_cache ();\n \n-  bool set_bb_range (tree name, const basic_block bb, const irange &r);\n-  bool get_bb_range (irange &r, tree name, const basic_block bb);\n-  bool bb_range_p (tree name, const basic_block bb);\n+  bool set_bb_range (tree name, const_basic_block bb, const irange &r);\n+  bool get_bb_range (irange &r, tree name, const_basic_block bb);\n+  bool bb_range_p (tree name, const_basic_block bb);\n \n   void dump (FILE *f);\n   void dump (FILE *f, basic_block bb, bool print_varying = true);"}]}