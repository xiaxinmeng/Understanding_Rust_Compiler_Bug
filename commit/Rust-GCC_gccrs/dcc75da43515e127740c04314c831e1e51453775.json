{"sha": "dcc75da43515e127740c04314c831e1e51453775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNjNzVkYTQzNTE1ZTEyNzc0MGMwNDMxNGM4MzFlMWU1MTQ1Mzc3NQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-12-04T09:44:42Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-12-04T09:44:42Z"}, "message": "[ARM] PR target/68214: Delete IP-reg-clobbering call-through-mem patterns\n\n\tPR target/68214\n\t* config/arm/arm.md (*call_mem): Delete pattern.\n\t(*call_value_mem): Likewise.\n\t* config/arm/arm.c (output_call_mem): Delete.\n\t* config/arm/arm-protos.h (output_call_mem): Delete prototype.\n\nFrom-SVN: r231252", "tree": {"sha": "c5a7f61d3c8308decd29021cd7a8c10b310126f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5a7f61d3c8308decd29021cd7a8c10b310126f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcc75da43515e127740c04314c831e1e51453775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc75da43515e127740c04314c831e1e51453775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc75da43515e127740c04314c831e1e51453775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc75da43515e127740c04314c831e1e51453775/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d90085b9dc951f9c8f088e7c43b3394cd8caed0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d90085b9dc951f9c8f088e7c43b3394cd8caed0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d90085b9dc951f9c8f088e7c43b3394cd8caed0b"}], "stats": {"total": 78, "additions": 8, "deletions": 70}, "files": [{"sha": "66dbfe3e863cae30e725ac03ab21e1602f6ade67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc75da43515e127740c04314c831e1e51453775/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc75da43515e127740c04314c831e1e51453775/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcc75da43515e127740c04314c831e1e51453775", "patch": "@@ -1,3 +1,11 @@\n+2015-12-04  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/68214\n+\t* config/arm/arm.md (*call_mem): Delete pattern.\n+\t(*call_value_mem): Likewise.\n+\t* config/arm/arm.c (output_call_mem): Delete.\n+\t* config/arm/arm-protos.h (output_call_mem): Delete prototype.\n+\n 2015-12-04  Bin Cheng  <bin.cheng@arm.com>\n \n \t* config/aarch64/atomics.md (atomic_store<mode>): Use predicate"}, {"sha": "e7328e79650739fca1c3e21b10c194feaa697465", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc75da43515e127740c04314c831e1e51453775/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc75da43515e127740c04314c831e1e51453775/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=dcc75da43515e127740c04314c831e1e51453775", "patch": "@@ -132,7 +132,6 @@ extern bool arm_const_double_by_parts (rtx);\n extern bool arm_const_double_by_immediates (rtx);\n extern void arm_emit_call_insn (rtx, rtx, bool);\n extern const char *output_call (rtx *);\n-extern const char *output_call_mem (rtx *);\n void arm_emit_movpair (rtx, rtx);\n extern const char *output_mov_long_double_arm_from_arm (rtx *);\n extern const char *output_move_double (rtx *, bool, int *count);"}, {"sha": "3588b839fb6b22b2ae71798c46b385153c011855", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc75da43515e127740c04314c831e1e51453775/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc75da43515e127740c04314c831e1e51453775/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dcc75da43515e127740c04314c831e1e51453775", "patch": "@@ -17913,41 +17913,6 @@ output_call (rtx *operands)\n   return \"\";\n }\n \n-/* Output a 'call' insn that is a reference in memory. This is\n-   disabled for ARMv5 and we prefer a blx instead because otherwise\n-   there's a significant performance overhead.  */\n-const char *\n-output_call_mem (rtx *operands)\n-{\n-  gcc_assert (!arm_arch5);\n-  if (TARGET_INTERWORK)\n-    {\n-      output_asm_insn (\"ldr%?\\t%|ip, %0\", operands);\n-      output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n-      output_asm_insn (\"bx%?\\t%|ip\", operands);\n-    }\n-  else if (regno_use_in (LR_REGNUM, operands[0]))\n-    {\n-      /* LR is used in the memory address.  We load the address in the\n-\t first instruction.  It's safe to use IP as the target of the\n-\t load since the call will kill it anyway.  */\n-      output_asm_insn (\"ldr%?\\t%|ip, %0\", operands);\n-      output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n-      if (arm_arch4t)\n-\toutput_asm_insn (\"bx%?\\t%|ip\", operands);\n-      else\n-\toutput_asm_insn (\"mov%?\\t%|pc, %|ip\", operands);\n-    }\n-  else\n-    {\n-      output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n-      output_asm_insn (\"ldr%?\\t%|pc, %0\", operands);\n-    }\n-\n-  return \"\";\n-}\n-\n-\n /* Output a move from arm registers to arm registers of a long double\n    OPERANDS[0] is the destination.\n    OPERANDS[1] is the source.  */"}, {"sha": "1462a31af9c96ca08c4b7c7ac944ef933c2458f2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcc75da43515e127740c04314c831e1e51453775/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcc75da43515e127740c04314c831e1e51453775/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dcc75da43515e127740c04314c831e1e51453775", "patch": "@@ -7662,23 +7662,6 @@\n )\n \n \n-;; Note: not used for armv5+ because the sequence used (ldr pc, ...) is not\n-;; considered a function call by the branch predictor of some cores (PR40887).\n-;; Falls back to blx rN (*call_reg_armv5).\n-\n-(define_insn \"*call_mem\"\n-  [(call (mem:SI (match_operand:SI 0 \"call_memory_operand\" \"m\"))\n-\t (match_operand 1 \"\" \"\"))\n-   (use (match_operand 2 \"\" \"\"))\n-   (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5 && !SIBLING_CALL_P (insn)\"\n-  \"*\n-  return output_call_mem (operands);\n-  \"\n-  [(set_attr \"length\" \"12\")\n-   (set_attr \"type\" \"call\")]\n-)\n-\n (define_expand \"call_value\"\n   [(parallel [(set (match_operand       0 \"\" \"\")\n \t           (call (match_operand 1 \"memory_operand\" \"\")\n@@ -7742,23 +7725,6 @@\n    (set_attr \"type\" \"call\")]\n )\n \n-;; Note: see *call_mem\n-\n-(define_insn \"*call_value_mem\"\n-  [(set (match_operand 0 \"\" \"\")\n-\t(call (mem:SI (match_operand:SI 1 \"call_memory_operand\" \"m\"))\n-\t      (match_operand 2 \"\" \"\")))\n-   (use (match_operand 3 \"\" \"\"))\n-   (clobber (reg:SI LR_REGNUM))]\n-  \"TARGET_ARM && !arm_arch5 && (!CONSTANT_ADDRESS_P (XEXP (operands[1], 0)))\n-   && !SIBLING_CALL_P (insn)\"\n-  \"*\n-  return output_call_mem (&operands[1]);\n-  \"\n-  [(set_attr \"length\" \"12\")\n-   (set_attr \"type\" \"call\")]\n-)\n-\n ;; Allow calls to SYMBOL_REFs specially as they are not valid general addresses\n ;; The 'a' causes the operand to be treated as an address, i.e. no '#' output.\n "}]}