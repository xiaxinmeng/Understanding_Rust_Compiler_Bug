{"sha": "7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M3ZGFlNjU0MjgzZGVjNmMwM2NkNjg5Y2UzYTUxODJiNDdmYzVhMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-25T20:15:44Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-25T20:15:44Z"}, "message": "config.gcc (sparc*-*-solaris2*): Adjust.\n\n\t* config.gcc (sparc*-*-solaris2*): Adjust.\n\t(sparc64-*-linux*): Likewise.\n\t* config/sparc/default-64.h: Rename to...\n\t* config/sparc/default64.h: ...this.\n\t* config/sparc/sparc.c (sparc_option_override): Replace TARGET_64BIT\n\twith TARGET_ARCH64.\n\t(sparc_mangle_type): Replace !TARGET_64BIT with TARGET_ARCH32.\n\t* config/sparc/sparc.h: Minor tweaks.\n\t* config/sparc/sparc.md: Replace !TARGET_64BIT and !TARGET_ARCH64 with\n\tTARGET_ARCH32 throughout.  Minor various tweaks throughout.\n\nFrom-SVN: r241538", "tree": {"sha": "4a3d40f867233bde4e76e0f52924c709255cfb53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a3d40f867233bde4e76e0f52924c709255cfb53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/comments", "author": null, "committer": null, "parents": [{"sha": "6c95388f116dd28bdbcfec25c8f535ccde1d8603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c95388f116dd28bdbcfec25c8f535ccde1d8603", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c95388f116dd28bdbcfec25c8f535ccde1d8603"}], "stats": {"total": 1131, "additions": 587, "deletions": 544}, "files": [{"sha": "b442d5485cc0e24f3bcacda2f8ac85abec750ccb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "patch": "@@ -1,3 +1,16 @@\n+2016-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config.gcc (sparc*-*-solaris2*): Adjust.\n+\t(sparc64-*-linux*): Likewise.\n+\t* config/sparc/default-64.h: Rename to...\n+\t* config/sparc/default64.h: ...this.\n+\t* config/sparc/sparc.c (sparc_option_override): Replace TARGET_64BIT\n+\twith TARGET_ARCH64.\n+\t(sparc_mangle_type): Replace !TARGET_64BIT with TARGET_ARCH32.\n+\t* config/sparc/sparc.h: Minor tweaks.\n+\t* config/sparc/sparc.md: Replace !TARGET_64BIT and !TARGET_ARCH64 with\n+\tTARGET_ARCH32 throughout.  Minor various tweaks throughout.\n+\n 2016-10-25  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (fcache::file_patch): Add comment about lifetime."}, {"sha": "d956da22ad60abfe9c6b4be0882f9e7dd64ac39f", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "patch": "@@ -2783,7 +2783,7 @@ sparc*-*-solaris2*)\n \ttm_file=\"sparc/biarch64.h ${tm_file} ${sol2_tm_file} sparc/tso.h\"\n \tcase ${target} in\n \t    sparc64-*-* | sparcv9-*-*)\n-\t\ttm_file=\"sparc/default-64.h ${tm_file}\"\n+\t\ttm_file=\"sparc/default64.h ${tm_file}\"\n \t\t;;\n \t    *)\n \t\ttest x$with_cpu != x || with_cpu=v9\n@@ -2806,7 +2806,7 @@ sparc64-*-rtems*)\n \ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-rtems-64\"\n \t;;\n sparc64-*-linux*)\n-\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h sparc/sysv4.h gnu-user.h linux.h glibc-stdint.h sparc/default-64.h sparc/linux64.h sparc/tso.h\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h sparc/sysv4.h gnu-user.h linux.h glibc-stdint.h sparc/default64.h sparc/linux64.h sparc/tso.h\"\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \ttmake_file=\"${tmake_file} sparc/t-sparc sparc/t-linux64\"\n \t;;"}, {"sha": "be72d110692d8358c3d1b07a659366f1ab12c24a", "filename": "gcc/config/sparc/default64.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fdefault64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fdefault64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fdefault64.h?ref=7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "previous_filename": "gcc/config/sparc/default-64.h"}, {"sha": "c5638ccd2aae6123c49c63dddcde4c7b8917dd92", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "patch": "@@ -1384,13 +1384,13 @@ sparc_option_override (void)\n \n #ifndef SPARC_BI_ARCH\n   /* Check for unsupported architecture size.  */\n-  if (! TARGET_64BIT != DEFAULT_ARCH32_P)\n+  if (!TARGET_64BIT != DEFAULT_ARCH32_P)\n     error (\"%s is not supported by this configuration\",\n \t   DEFAULT_ARCH32_P ? \"-m64\" : \"-m32\");\n #endif\n \n   /* We force all 64bit archs to use 128 bit long double */\n-  if (TARGET_64BIT && ! TARGET_LONG_DOUBLE_128)\n+  if (TARGET_ARCH64 && !TARGET_LONG_DOUBLE_128)\n     {\n       error (\"-mlong-double-64 not allowed with -m64\");\n       target_flags |= MASK_LONG_DOUBLE_128;\n@@ -11739,7 +11739,7 @@ sparc_file_end (void)\n static const char *\n sparc_mangle_type (const_tree type)\n {\n-  if (!TARGET_64BIT\n+  if (TARGET_ARCH32\n       && TYPE_MAIN_VARIANT (type) == long_double_type_node\n       && TARGET_LONG_DOUBLE_128)\n     return \"g\";"}, {"sha": "ee216576bf1c676a7fef0715e9ea4fb19b31e9a7", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "patch": "@@ -44,12 +44,12 @@ along with GCC; see the file COPYING3.  If not see\n #endif /* sparc64 */\n #else\n #ifdef SPARC_BI_ARCH\n-#define TARGET_ARCH32 (! TARGET_64BIT)\n+#define TARGET_ARCH32 (!TARGET_64BIT)\n #else\n #define TARGET_ARCH32 (DEFAULT_ARCH32_P)\n #endif /* SPARC_BI_ARCH */\n #endif /* IN_LIBGCC2 */\n-#define TARGET_ARCH64 (! TARGET_ARCH32)\n+#define TARGET_ARCH64 (!TARGET_ARCH32)\n \n /* Code model selection in 64-bit environment.\n "}, {"sha": "990c6f6ac1eb5e49502397afd439b30eb86fc032", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 567, "deletions": 537, "changes": 1104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c7dae654283dec6c03cd689ce3a5182b47fc5a0/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7c7dae654283dec6c03cd689ce3a5182b47fc5a0", "patch": "@@ -1,8 +1,8 @@\n-;; Machine description for SPARC chip for GCC\n-;;  Copyright (C) 1987-2016 Free Software Foundation, Inc.\n-;;  Contributed by Michael Tiemann (tiemann@cygnus.com)\n-;;  64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n-;;  at Cygnus Support.\n+;; Machine description for SPARC.\n+;; Copyright (C) 1987-2016 Free Software Foundation, Inc.\n+;; Contributed by Michael Tiemann (tiemann@cygnus.com)\n+;; 64-bit SPARC-V9 support by Michael Tiemann, Jim Wilson, and Doug Evans,\n+;; at Cygnus Support.\n \n ;; This file is part of GCC.\n \n@@ -20,8 +20,6 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-;;- See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n-\n (define_c_enum \"unspec\" [\n   UNSPEC_MOVE_PIC\n   UNSPEC_UPDATE_RETURN\n@@ -205,8 +203,8 @@\n   (GSR_REG\t\t\t102)\n  ])\n \n-(define_mode_iterator P [(SI \"Pmode == SImode\") (DI \"Pmode == DImode\")])\n (define_mode_iterator I [QI HI SI DI])\n+(define_mode_iterator P [(SI \"TARGET_ARCH32\") (DI \"TARGET_ARCH64\")])\n (define_mode_iterator W [SI (DI \"TARGET_ARCH64\")])\n (define_mode_iterator F [SF DF TF])\n \n@@ -710,7 +708,7 @@\n               (const_int 0)))]\n   \"TARGET_ARCH64 && !TARGET_VIS3\"\n   \"#\"\n-  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& !reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:W (ne:DI (match_dup 1) (const_int 0))\n                                       (const_int 1)\n@@ -737,7 +735,7 @@\n                      (const_int 0))))]\n   \"TARGET_ARCH64 && !TARGET_SUBXC\"\n   \"#\"\n-  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& !reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:W (ne:DI (match_dup 1) (const_int 0))\n                                       (const_int -1)\n@@ -790,7 +788,7 @@\n               (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& !reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:W (eq:DI (match_dup 1) (const_int 0))\n                                       (const_int 1)\n@@ -804,7 +802,7 @@\n                      (const_int 0))))]\n   \"TARGET_ARCH64\"\n   \"#\"\n-  \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n+  \"&& !reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n    (set (match_dup 0) (if_then_else:W (eq:DI (match_dup 1) (const_int 0))\n                                       (const_int -1)\n@@ -1220,7 +1218,7 @@\n (define_split\n   [(set (match_operand:W 0 \"register_operand\" \"\")\n \t(match_operator:W 1 \"icc_comparison_operator\"\n-\t  [(match_operand 2 \"icc_register_operand\" \"\") (const_int 0)]))]\n+\t [(match_operand 2 \"icc_register_operand\" \"\") (const_int 0)]))]\n   \"TARGET_V9\n    /* 64-bit LTU is better implemented using addxc with VIS3.  */\n    && !(GET_CODE (operands[1]) == LTU\n@@ -1243,8 +1241,8 @@\n (define_expand \"cbranchcc4\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n-\t\t          [(match_operand 1 \"compare_operand\" \"\")\n-\t\t           (match_operand 2 \"const_zero_operand\" \"\")])\n+\t\t       [(match_operand 1 \"compare_operand\" \"\")\n+\t\t        (match_operand 2 \"const_zero_operand\" \"\")])\n \t\t      (label_ref (match_operand 3 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1282,7 +1280,10 @@\n           (match_operand:F 2 \"register_operand\" \"\")]))\n    (use (match_operand 3 \"\"))]\n   \"TARGET_FPU\"\n-  { emit_conditional_branch_insn (operands); DONE; })\n+{\n+  emit_conditional_branch_insn (operands);\n+  DONE;\n+})\n \n \n ;; Now match both normal and inverted jump.\n@@ -1291,7 +1292,7 @@\n (define_insn \"*normal_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"icc_comparison_operator\"\n-\t\t\t\t      [(reg CC_REG) (const_int 0)])\n+\t\t       [(reg CC_REG) (const_int 0)])\n \t\t      (label_ref (match_operand 1 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1307,7 +1308,7 @@\n (define_insn \"*inverted_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"icc_comparison_operator\"\n-\t\t\t\t      [(reg CC_REG) (const_int 0)])\n+\t\t       [(reg CC_REG) (const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 1 \"\" \"\"))))]\n   \"\"\n@@ -1323,8 +1324,8 @@\n (define_insn \"*normal_fp_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(match_operand:CCFP 0 \"fcc_register_operand\" \"c\")\n-\t\t\t\t       (const_int 0)])\n+\t\t       [(match_operand:CCFP 0 \"fcc_register_operand\" \"c\")\n+\t\t\t(const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1340,8 +1341,8 @@\n (define_insn \"*inverted_fp_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(match_operand:CCFP 0 \"fcc_register_operand\" \"c\")\n-\t\t\t\t       (const_int 0)])\n+\t\t       [(match_operand:CCFP 0 \"fcc_register_operand\" \"c\")\n+\t\t\t(const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n@@ -1357,8 +1358,8 @@\n (define_insn \"*normal_fpe_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(match_operand:CCFPE 0 \"fcc_register_operand\" \"c\")\n-\t\t\t\t       (const_int 0)])\n+\t\t       [(match_operand:CCFPE 0 \"fcc_register_operand\" \"c\")\n+\t\t\t(const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1374,8 +1375,8 @@\n (define_insn \"*inverted_fpe_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n-\t\t\t\t      [(match_operand:CCFPE 0 \"fcc_register_operand\" \"c\")\n-\t\t\t\t       (const_int 0)])\n+\t\t       [(match_operand:CCFPE 0 \"fcc_register_operand\" \"c\")\n+\t\t\t(const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"\"\n@@ -1421,8 +1422,8 @@\n (define_insn \"*normal_int_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"v9_register_comparison_operator\"\n-\t\t\t\t      [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t\t       (const_int 0)])\n+\t\t       [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t(const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"TARGET_ARCH64\"\n@@ -1437,8 +1438,8 @@\n (define_insn \"*inverted_int_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"v9_register_comparison_operator\"\n-\t\t\t\t      [(match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t\t       (const_int 0)])\n+\t\t       [(match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t(const_int 0)])\n \t\t      (pc)\n \t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n   \"TARGET_ARCH64\"\n@@ -1463,7 +1464,8 @@\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")\n \t\t   (match_operand:P 2 \"call_address_operand\" \"\")\n-\t\t   (match_operand:P 3 \"const_int_operand\" \"\")] UNSPEC_LOAD_PCREL_SYM))\n+\t\t   (match_operand:P 3 \"const_int_operand\" \"\")]\n+\t\t  UNSPEC_LOAD_PCREL_SYM))\n    (clobber (reg:P O7_REG))]\n   \"REGNO (operands[0]) == INTVAL (operands[3])\"\n {\n@@ -1580,7 +1582,8 @@\n (define_insn \"movsi_lo_sum_pic\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-                   (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"in\")] UNSPEC_MOVE_PIC)))]\n+                   (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"in\")]\n+\t\t\t      UNSPEC_MOVE_PIC)))]\n   \"flag_pic\"\n {\n #ifdef HAVE_AS_SPARC_GOTDATA_OP\n@@ -1606,7 +1609,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (unspec:SI [(match_operand:SI 1 \"register_operand\" \"r\")\n \t            (match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t    (match_operand 3 \"symbolic_operand\" \"\")] UNSPEC_MOVE_GOTDATA))]\n+\t\t    (match_operand 3 \"symbolic_operand\" \"\")]\n+\t\t   UNSPEC_MOVE_GOTDATA))]\n   \"flag_pic && check_pic (1)\"\n {\n #ifdef HAVE_AS_SPARC_GOTDATA_OP\n@@ -1697,10 +1701,10 @@\n \n (define_insn \"*movdi_insn_sp32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-\t\t\t\t\t\"=T,o,T,U,o,r,r,r,?T,?*f,?*f,?o,?*e,?*e,  r,?*f,?*e,?W,b,b\")\n+\t\t\t    \"=T,o,T,U,o,r,r,r,?T,?*f,?*f,?o,?*e,?*e,  r,?*f,?*e,?W,b,b\")\n         (match_operand:DI 1 \"input_operand\"\n-\t\t\t\t\t\" J,J,U,T,r,o,i,r,*f,  T,  o,*f, *e, *e,?*f,  r,  W,*e,J,P\"))]\n-  \"! TARGET_ARCH64\n+\t\t\t    \" J,J,U,T,r,o,i,r,*f,  T,  o,*f, *e, *e,?*f,  r,  W,*e,J,P\"))]\n+  \"TARGET_ARCH32\n    && (register_operand (operands[0], DImode)\n        || register_or_zero_operand (operands[1], DImode))\"\n   \"@\n@@ -1800,7 +1804,8 @@\n (define_insn \"movdi_lo_sum_pic\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-                   (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"in\")] UNSPEC_MOVE_PIC)))]\n+                   (unspec:DI [(match_operand:DI 2 \"immediate_operand\" \"in\")]\n+\t\t\t      UNSPEC_MOVE_PIC)))]\n   \"TARGET_ARCH64 && flag_pic\"\n {\n #ifdef HAVE_AS_SPARC_GOTDATA_OP\n@@ -1826,7 +1831,8 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n \t            (match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t    (match_operand 3 \"symbolic_operand\" \"\")] UNSPEC_MOVE_GOTDATA))]\n+\t\t    (match_operand 3 \"symbolic_operand\" \"\")]\n+\t\t   UNSPEC_MOVE_GOTDATA))]\n   \"TARGET_ARCH64 && flag_pic && check_pic (1)\"\n {\n #ifdef HAVE_AS_SPARC_GOTDATA_OP\n@@ -1858,14 +1864,16 @@\n \n (define_insn \"seth44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] UNSPEC_SETH44)))]\n+        (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n+\t\t\t    UNSPEC_SETH44)))]\n   \"TARGET_CM_MEDMID\"\n   \"sethi\\t%%h44(%a1), %0\")\n \n (define_insn \"setm44\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-                   (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")] UNSPEC_SETM44)))]\n+                   (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")]\n+\t\t\t      UNSPEC_SETM44)))]\n   \"TARGET_CM_MEDMID\"\n   \"or\\t%1, %%m44(%a2), %0\")\n \n@@ -1878,20 +1886,23 @@\n \n (define_insn \"sethh\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] UNSPEC_SETHH)))]\n+        (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n+\t\t\t    UNSPEC_SETHH)))]\n   \"TARGET_CM_MEDANY\"\n   \"sethi\\t%%hh(%a1), %0\")\n \n (define_insn \"setlm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")] UNSPEC_SETLM)))]\n+        (high:DI (unspec:DI [(match_operand:DI 1 \"symbolic_operand\" \"\")]\n+\t\t\t    UNSPEC_SETLM)))]\n   \"TARGET_CM_MEDANY\"\n   \"sethi\\t%%lm(%a1), %0\")\n \n (define_insn \"sethm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-                   (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")] UNSPEC_EMB_SETHM)))]\n+                   (unspec:DI [(match_operand:DI 2 \"symbolic_operand\" \"\")]\n+\t\t\t      UNSPEC_EMB_SETHM)))]\n   \"TARGET_CM_MEDANY\"\n   \"or\\t%1, %%hm(%a2), %0\")\n \n@@ -1904,7 +1915,8 @@\n \n (define_insn \"embmedany_sethi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand:DI 1 \"data_segment_operand\" \"\")] UNSPEC_EMB_HISUM)))]\n+        (high:DI (unspec:DI [(match_operand:DI 1 \"data_segment_operand\" \"\")]\n+\t\t\t    UNSPEC_EMB_HISUM)))]\n   \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n@@ -1917,26 +1929,30 @@\n \n (define_insn \"embmedany_brsum\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")] UNSPEC_EMB_HISUM))]\n+        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")]\n+\t           UNSPEC_EMB_HISUM))]\n   \"TARGET_CM_EMBMEDANY\"\n   \"add\\t%1, %_, %0\")\n \n (define_insn \"embmedany_textuhi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")] UNSPEC_EMB_TEXTUHI)))]\n+        (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")]\n+\t\t\t    UNSPEC_EMB_TEXTUHI)))]\n   \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi\\t%%uhi(%a1), %0\")\n \n (define_insn \"embmedany_texthi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")] UNSPEC_EMB_TEXTHI)))]\n+        (high:DI (unspec:DI [(match_operand:DI 1 \"text_segment_operand\" \"\")]\n+\t\t\t    UNSPEC_EMB_TEXTHI)))]\n   \"TARGET_CM_EMBMEDANY && check_pic (1)\"\n   \"sethi\\t%%hi(%a1), %0\")\n \n (define_insn \"embmedany_textulo\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (lo_sum:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-                   (unspec:DI [(match_operand:DI 2 \"text_segment_operand\" \"\")] UNSPEC_EMB_TEXTULO)))]\n+                   (unspec:DI [(match_operand:DI 2 \"text_segment_operand\" \"\")]\n+\t\t\t      UNSPEC_EMB_TEXTULO)))]\n   \"TARGET_CM_EMBMEDANY\"\n   \"or\\t%1, %%ulo(%a2), %0\")\n \n@@ -1954,7 +1970,7 @@\n               (match_operand:TI 2 \"register_operand\" \"=&r\")])]\n   \"(TARGET_CM_MEDANY\n     || TARGET_CM_EMBMEDANY)\n-   && ! flag_pic\"\n+   && !flag_pic\"\n {\n   sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n@@ -1966,7 +1982,7 @@\n               (match_operand:TI 2 \"register_operand\" \"=&r\")])]\n   \"(TARGET_CM_MEDANY\n     || TARGET_CM_EMBMEDANY)\n-   && ! flag_pic\"\n+   && !flag_pic\"\n {\n   sparc_emit_set_symbolic_const64 (operands[0], operands[1], operands[2]);\n   DONE;\n@@ -1976,7 +1992,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"const_int_operand\" \"\"))]\n-  \"! TARGET_ARCH64\n+  \"TARGET_ARCH32\n    && ((GET_CODE (operands[0]) == REG\n         && SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -1994,8 +2010,8 @@\n   /* Slick... but this trick loses if this subreg constant part\n      can be done in one insn.  */\n   if (low == high\n-      && ! SPARC_SETHI32_P (high)\n-      && ! SPARC_SIMM13_P (high))\n+      && !SPARC_SETHI32_P (high)\n+      && !SPARC_SIMM13_P (high))\n     emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),\n \t\t\t  gen_highpart (SImode, operands[0])));\n   else\n@@ -2008,10 +2024,9 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"register_operand\" \"\"))]\n   \"reload_completed\n-   && (! TARGET_V9\n-       || (! TARGET_ARCH64\n-           && sparc_split_regreg_legitimate (operands[0],\n-                                             operands[1])))\"\n+   && (!TARGET_V9\n+       || (TARGET_ARCH32\n+           && sparc_split_regreg_legitimate (operands[0], operands[1])))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_dest = operands[0];\n@@ -2044,7 +2059,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (match_operand:DI 1 \"memory_operand\" \"\"))]\n-  \"(! TARGET_ARCH64\n+  \"(TARGET_ARCH32\n     && reload_completed\n     && sparc_splitdi_legitimate (operands[0], operands[1]))\"\n   [(clobber (const_int 0))]\n@@ -2070,7 +2085,7 @@\n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n         (match_operand:DI 1 \"register_operand\" \"\"))]\n-  \"(! TARGET_ARCH64\n+  \"(TARGET_ARCH32\n     && reload_completed\n     && sparc_splitdi_legitimate (operands[1], operands[0]))\"\n   [(clobber (const_int 0))]\n@@ -2086,9 +2101,9 @@\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n         (match_operand:DI 1 \"const_zero_operand\" \"\"))]\n   \"reload_completed\n-   && (! TARGET_V9\n-       || (! TARGET_ARCH64\n-\t   && ! mem_min_alignment (operands[0], 8)))\n+   && (!TARGET_V9\n+       || (TARGET_ARCH32\n+\t   && !mem_min_alignment (operands[0], 8)))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n {\n@@ -2115,7 +2130,7 @@\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r , o,?*e,?o,b\")\n         (match_operand:TI 1 \"input_operand\"        \"roJ,rJ, eo, e,J\"))]\n   \"TARGET_ARCH64\n-   && ! TARGET_HARD_QUAD\n+   && !TARGET_HARD_QUAD\n    && (register_operand (operands[0], TImode)\n        || register_or_zero_operand (operands[1], TImode))\"\n   \"#\"\n@@ -2145,9 +2160,9 @@\n         (match_operand:TI 1 \"register_operand\" \"\"))]\n   \"reload_completed\n    && ((TARGET_FPU\n-        && ! TARGET_HARD_QUAD)\n-       || (! fp_register_operand (operands[0], TImode)\n-           && ! fp_register_operand (operands[1], TImode)))\"\n+        && !TARGET_HARD_QUAD)\n+       || (!fp_register_operand (operands[0], TImode)\n+           && !fp_register_operand (operands[1], TImode)))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_dest = operands[0];\n@@ -2208,8 +2223,8 @@\n         (match_operand:TI 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n    && offsettable_memref_p (operands[1])\n-   && (! TARGET_HARD_QUAD\n-       || ! fp_register_operand (operands[0], TImode))\"\n+   && (!TARGET_HARD_QUAD\n+       || !fp_register_operand (operands[0], TImode))\"\n   [(clobber (const_int 0))]\n {\n   rtx word0 = adjust_address (operands[1], DImode, 0);\n@@ -2242,8 +2257,8 @@\n \t(match_operand:TI 1 \"register_operand\" \"\"))]\n   \"reload_completed\n    && offsettable_memref_p (operands[0])\n-   && (! TARGET_HARD_QUAD\n-       || ! fp_register_operand (operands[1], TImode))\"\n+   && (!TARGET_HARD_QUAD\n+       || !fp_register_operand (operands[1], TImode))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_src = operands[1];\n@@ -2360,9 +2375,11 @@\n })\n \n (define_insn \"*movdf_insn_sp32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=b,b,e,e,*r, f,  e,T,W,U,T,  f,  *r,  o,o\")\n-\t(match_operand:DF 1 \"input_operand\"         \"G,C,e,e, f,*r,W#F,G,e,T,U,o#F,*roF,*rG,f\"))]\n-  \"! TARGET_ARCH64\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\"\n+\t\t\t    \"=b,b,e,e,*r, f,  e,T,W,U,T,  f,  *r,  o,o\")\n+\t(match_operand:DF 1 \"input_operand\"\n+\t\t\t    \" G,C,e,e, f,*r,W#F,G,e,T,U,o#F,*roF,*rG,f\"))]\n+  \"TARGET_ARCH32\n    && (register_operand (operands[0], DFmode)\n        || register_or_zero_or_all_ones_operand (operands[1], DFmode))\"\n   \"@\n@@ -2417,7 +2434,7 @@\n         (match_operand:DF 1 \"const_double_operand\" \"\"))]\n   \"REG_P (operands[0])\n    && SPARC_INT_REG_P (REGNO (operands[0]))\n-   && ! const_zero_operand (operands[1], GET_MODE (operands[0]))\n+   && !const_zero_operand (operands[1], GET_MODE (operands[0]))\n    && reload_completed\"\n   [(clobber (const_int 0))]\n {\n@@ -2443,8 +2460,8 @@\n       /* Slick... but this trick loses if this subreg constant part\n          can be done in one insn.  */\n       if (lo == hi\n-\t  && ! SPARC_SETHI32_P (INTVAL (hi))\n-\t  && ! SPARC_SIMM13_P (INTVAL (hi)))\n+\t  && !SPARC_SETHI32_P (INTVAL (hi))\n+\t  && !SPARC_SIMM13_P (INTVAL (hi)))\n         {\n           emit_insn (gen_movsi (gen_lowpart (SImode, operands[0]),\n \t\t\t        gen_highpart (SImode, operands[0])));\n@@ -2465,10 +2482,9 @@\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n         (match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"(! TARGET_V9\n-    || (! TARGET_ARCH64\n-        && sparc_split_regreg_legitimate (operands[0],\n-                                          operands[1])))\n+  \"(!TARGET_V9\n+    || (TARGET_ARCH32\n+        && sparc_split_regreg_legitimate (operands[0], operands[1])))\n    && reload_completed\"\n   [(clobber (const_int 0))]\n {\n@@ -2501,9 +2517,9 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n-   && ! TARGET_ARCH64\n+   && TARGET_ARCH32\n    && (((REGNO (operands[0]) % 2) != 0)\n-       || ! mem_min_alignment (operands[1], 8))\n+       || !mem_min_alignment (operands[1], 8))\n    && offsettable_memref_p (operands[1])\"\n   [(clobber (const_int 0))]\n {\n@@ -2529,9 +2545,9 @@\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))]\n   \"reload_completed\n-   && ! TARGET_ARCH64\n+   && TARGET_ARCH32\n    && (((REGNO (operands[1]) % 2) != 0)\n-       || ! mem_min_alignment (operands[0], 8))\n+       || !mem_min_alignment (operands[0], 8))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n {\n@@ -2549,9 +2565,9 @@\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n         (match_operand:DF 1 \"const_zero_operand\" \"\"))]\n   \"reload_completed\n-   && (! TARGET_V9\n-       || (! TARGET_ARCH64\n-\t   && ! mem_min_alignment (operands[0], 8)))\n+   && (!TARGET_V9\n+       || (TARGET_ARCH32\n+\t   && !mem_min_alignment (operands[0], 8)))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n {\n@@ -2569,7 +2585,7 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n         (match_operand:DF 1 \"const_zero_operand\" \"\"))]\n   \"reload_completed\n-   && ! TARGET_ARCH64\n+   && TARGET_ARCH32\n    && ((GET_CODE (operands[0]) == REG\n \t&& SPARC_INT_REG_P (REGNO (operands[0])))\n        || (GET_CODE (operands[0]) == SUBREG\n@@ -2599,7 +2615,7 @@\n (define_insn \"*movtf_insn_sp32\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o,  o,U,  r\")\n \t(match_operand:TF 1 \"input_operand\"        \" G,oe,e,rGU,o,roG\"))]\n-  \"! TARGET_ARCH64\n+  \"TARGET_ARCH32\n    && (register_operand (operands[0], TFmode)\n        || register_or_zero_operand (operands[1], TFmode))\"\n   \"#\"\n@@ -2610,7 +2626,7 @@\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=b, e,o, o,  r\")\n \t(match_operand:TF 1 \"input_operand\"         \"G,oe,e,rG,roG\"))]\n   \"TARGET_ARCH64\n-   && ! TARGET_HARD_QUAD\n+   && !TARGET_HARD_QUAD\n    && (register_operand (operands[0], TFmode)\n        || register_or_zero_operand (operands[1], TFmode))\"\n   \"#\"\n@@ -2639,11 +2655,11 @@\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n         (match_operand:TF 1 \"register_operand\" \"\"))]\n   \"reload_completed\n-   && (! TARGET_ARCH64\n+   && (TARGET_ARCH32\n        || (TARGET_FPU\n-           && ! TARGET_HARD_QUAD)\n-       || (! fp_register_operand (operands[0], TFmode)\n-           && ! fp_register_operand (operands[1], TFmode)))\"\n+           && !TARGET_HARD_QUAD)\n+       || (!fp_register_operand (operands[0], TFmode)\n+           && !fp_register_operand (operands[1], TFmode)))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_dest = operands[0];\n@@ -2704,9 +2720,9 @@\n         (match_operand:TF 1 \"memory_operand\" \"\"))]\n   \"(reload_completed\n     && offsettable_memref_p (operands[1])\n-    && (! TARGET_ARCH64\n-\t|| ! TARGET_HARD_QUAD\n-\t|| ! fp_register_operand (operands[0], TFmode)))\"\n+    && (TARGET_ARCH32\n+\t|| !TARGET_HARD_QUAD\n+\t|| !fp_register_operand (operands[0], TFmode)))\"\n   [(clobber (const_int 0))]\n {\n   rtx word0 = adjust_address (operands[1], DFmode, 0);\n@@ -2739,9 +2755,9 @@\n \t(match_operand:TF 1 \"register_operand\" \"\"))]\n   \"(reload_completed\n     && offsettable_memref_p (operands[0])\n-    && (! TARGET_ARCH64\n-\t|| ! TARGET_HARD_QUAD\n-\t|| ! fp_register_operand (operands[1], TFmode)))\"\n+    && (TARGET_ARCH32\n+\t|| !TARGET_HARD_QUAD\n+\t|| !fp_register_operand (operands[1], TFmode)))\"\n   [(clobber (const_int 0))]\n {\n   rtx set_src = operands[1];\n@@ -2772,7 +2788,7 @@\n \t\t\t(match_operand:I 3 \"arith10_operand\" \"\")))]\n   \"TARGET_V9 && !(<I:MODE>mode == DImode && TARGET_ARCH32)\"\n {\n-  if (! sparc_expand_conditional_move (<I:MODE>mode, operands))\n+  if (!sparc_expand_conditional_move (<I:MODE>mode, operands))\n     FAIL;\n   DONE;\n })\n@@ -2784,16 +2800,16 @@\n \t\t\t(match_operand:F 3 \"register_operand\" \"\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n {\n-  if (! sparc_expand_conditional_move (<F:MODE>mode, operands))\n+  if (!sparc_expand_conditional_move (<F:MODE>mode, operands))\n     FAIL;\n   DONE;\n })\n \n (define_insn \"*mov<I:mode>_cc_v9\"\n   [(set (match_operand:I 0 \"register_operand\" \"=r\")\n \t(if_then_else:I (match_operator 1 \"icc_or_fcc_comparison_operator\"\n-\t\t\t       [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n-\t\t\t\t(const_int 0)])\n+\t\t\t [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n+\t\t\t  (const_int 0)])\n \t\t\t(match_operand:I 3 \"arith11_operand\" \"rL\")\n \t\t\t(match_operand:I 4 \"register_operand\" \"0\")))]\n   \"TARGET_V9 && !(<I:MODE>mode == DImode && TARGET_ARCH32)\"\n@@ -2803,8 +2819,8 @@\n (define_insn \"*mov<I:mode>_cc_reg_sp64\"\n   [(set (match_operand:I 0 \"register_operand\" \"=r\")\n \t(if_then_else:I (match_operator 1 \"v9_register_comparison_operator\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t\t (const_int 0)])\n+\t\t         [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t  (const_int 0)])\n \t\t\t(match_operand:I 3 \"arith10_operand\" \"rM\")\n \t\t\t(match_operand:I 4 \"register_operand\" \"0\")))]\n   \"TARGET_ARCH64\"\n@@ -2814,8 +2830,8 @@\n (define_insn \"*movsf_cc_v9\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else:SF (match_operator 1 \"icc_or_fcc_comparison_operator\"\n-\t\t\t\t[(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:SF 3 \"register_operand\" \"f\")\n \t\t\t (match_operand:SF 4 \"register_operand\" \"0\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n@@ -2825,8 +2841,8 @@\n (define_insn \"*movsf_cc_reg_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else:SF (match_operator 1 \"v9_register_comparison_operator\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:SF 3 \"register_operand\" \"f\")\n \t\t\t (match_operand:SF 4 \"register_operand\" \"0\")))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n@@ -2837,8 +2853,8 @@\n (define_insn \"movdf_cc_v9\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else:DF (match_operator 1 \"icc_or_fcc_comparison_operator\"\n-\t\t\t\t[(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:DF 3 \"register_operand\" \"e\")\n \t\t\t (match_operand:DF 4 \"register_operand\" \"0\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n@@ -2850,8 +2866,8 @@\n (define_insn \"movdf_cc_reg_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else:DF (match_operator 1 \"v9_register_comparison_operator\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:DF 3 \"register_operand\" \"e\")\n \t\t\t (match_operand:DF 4 \"register_operand\" \"0\")))]\n   \"TARGET_ARCH64 && TARGET_FPU\"\n@@ -2862,8 +2878,8 @@\n (define_insn \"*movtf_cc_hq_v9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else:TF (match_operator 1 \"icc_or_fcc_comparison_operator\"\n-\t\t\t\t[(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:TF 3 \"register_operand\" \"e\")\n \t\t\t (match_operand:TF 4 \"register_operand\" \"0\")))]\n   \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n@@ -2873,8 +2889,8 @@\n (define_insn \"*movtf_cc_reg_hq_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else:TF (match_operator 1 \"v9_register_comparison_operator\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:TF 3 \"register_operand\" \"e\")\n \t\t\t (match_operand:TF 4 \"register_operand\" \"0\")))]\n   \"TARGET_ARCH64 && TARGET_FPU && TARGET_HARD_QUAD\"\n@@ -2884,8 +2900,8 @@\n (define_insn_and_split \"*movtf_cc_v9\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else:TF (match_operator 1 \"icc_or_fcc_comparison_operator\"\n-\t\t\t    [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n-\t\t\t     (const_int 0)])\n+\t\t\t  [(match_operand 2 \"icc_or_fcc_register_operand\" \"X\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:TF 3 \"register_operand\" \"e\")\n \t\t\t (match_operand:TF 4 \"register_operand\" \"0\")))]\n   \"TARGET_V9 && TARGET_FPU && !TARGET_HARD_QUAD\"\n@@ -2905,13 +2921,17 @@\n \n   if (reg_overlap_mentioned_p (dest1, srca2))\n     {\n-      emit_insn (gen_movdf_cc_v9 (dest2, operands[1], operands[2], srca2, dest2));\n-      emit_insn (gen_movdf_cc_v9 (dest1, operands[1], operands[2], srca1, dest1));\n+      emit_insn (gen_movdf_cc_v9 (dest2, operands[1], operands[2],\n+\t\t\t\t  srca2, dest2));\n+      emit_insn (gen_movdf_cc_v9 (dest1, operands[1], operands[2],\n+\t\t\t\t  srca1, dest1));\n     }\n   else\n     {\n-      emit_insn (gen_movdf_cc_v9 (dest1, operands[1], operands[2], srca1, dest1));\n-      emit_insn (gen_movdf_cc_v9 (dest2, operands[1], operands[2], srca2, dest2));\n+      emit_insn (gen_movdf_cc_v9 (dest1, operands[1], operands[2],\n+\t\t\t\t  srca1, dest1));\n+      emit_insn (gen_movdf_cc_v9 (dest2, operands[1], operands[2],\n+\t\t\t\t  srca2, dest2));\n     }\n   DONE;\n }\n@@ -2920,11 +2940,11 @@\n (define_insn_and_split \"*movtf_cc_reg_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else:TF (match_operator 1 \"v9_register_comparison_operator\"\n-\t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t  [(match_operand:DI 2 \"register_operand\" \"r\")\n+\t\t\t   (const_int 0)])\n \t\t\t (match_operand:TF 3 \"register_operand\" \"e\")\n \t\t\t (match_operand:TF 4 \"register_operand\" \"0\")))]\n-  \"TARGET_ARCH64 && TARGET_FPU && ! TARGET_HARD_QUAD\"\n+  \"TARGET_ARCH64 && TARGET_FPU && !TARGET_HARD_QUAD\"\n   \"#\"\n   \"&& reload_completed\"\n   [(clobber (const_int 0))]\n@@ -2941,13 +2961,17 @@\n \n   if (reg_overlap_mentioned_p (dest1, srca2))\n     {\n-      emit_insn (gen_movdf_cc_reg_sp64 (dest2, operands[1], operands[2], srca2, dest2));\n-      emit_insn (gen_movdf_cc_reg_sp64 (dest1, operands[1], operands[2], srca1, dest1));\n+      emit_insn (gen_movdf_cc_reg_sp64 (dest2, operands[1], operands[2],\n+\t\t\t\t\tsrca2, dest2));\n+      emit_insn (gen_movdf_cc_reg_sp64 (dest1, operands[1], operands[2],\n+\t\t\t\t\tsrca1, dest1));\n     }\n   else\n     {\n-      emit_insn (gen_movdf_cc_reg_sp64 (dest1, operands[1], operands[2], srca1, dest1));\n-      emit_insn (gen_movdf_cc_reg_sp64 (dest2, operands[1], operands[2], srca2, dest2));\n+      emit_insn (gen_movdf_cc_reg_sp64 (dest1, operands[1], operands[2],\n+\t\t\t\t        srca1, dest1));\n+      emit_insn (gen_movdf_cc_reg_sp64 (dest2, operands[1], operands[2],\n+\t\t\t\t\tsrca2, dest2));\n     }\n   DONE;\n }\n@@ -3094,7 +3118,7 @@\n (define_insn_and_split \"*zero_extendsidi2_insn_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n@@ -3450,47 +3474,41 @@\n \n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(float_extend:DF\n-\t (match_operand:SF 1 \"register_operand\" \"f\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_FPU\"\n   \"fstod\\t%1, %0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fptype\" \"double\")])\n \n (define_expand \"extendsftf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(float_extend:TF\n-\t (match_operand:SF 1 \"register_operand\" \"\")))]\n+\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU && (TARGET_HARD_QUAD || TARGET_ARCH64)\"\n   \"emit_tfmode_cvt (FLOAT_EXTEND, operands); DONE;\")\n \n (define_insn \"*extendsftf2_hq\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(float_extend:TF\n-\t (match_operand:SF 1 \"register_operand\" \"f\")))]\n+\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fstoq\\t%1, %0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"extenddftf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(float_extend:TF\n-\t (match_operand:DF 1 \"register_operand\" \"\")))]\n+\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))]\n   \"TARGET_FPU && (TARGET_HARD_QUAD || TARGET_ARCH64)\"\n   \"emit_tfmode_cvt (FLOAT_EXTEND, operands); DONE;\")\n \n (define_insn \"*extenddftf2_hq\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-\t(float_extend:TF\n-\t (match_operand:DF 1 \"register_operand\" \"e\")))]\n+\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fdtoq\\t%1, %0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_insn \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t (match_operand:DF 1 \"register_operand\" \"e\")))]\n+\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU\"\n   \"fdtos\\t%1, %0\"\n   [(set_attr \"type\" \"fp\")\n@@ -3499,30 +3517,26 @@\n \n (define_expand \"trunctfsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float_truncate:SF\n-\t (match_operand:TF 1 \"general_operand\" \"\")))]\n+\t(float_truncate:SF (match_operand:TF 1 \"general_operand\" \"\")))]\n   \"TARGET_FPU && (TARGET_HARD_QUAD || TARGET_ARCH64)\"\n   \"emit_tfmode_cvt (FLOAT_TRUNCATE, operands); DONE;\")\n \n (define_insn \"*trunctfsf2_hq\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"e\")))]\n+\t(float_truncate:SF (match_operand:TF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fqtos\\t%1, %0\"\n   [(set_attr \"type\" \"fp\")])\n \n (define_expand \"trunctfdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float_truncate:DF\n-\t (match_operand:TF 1 \"general_operand\" \"\")))]\n+\t(float_truncate:DF (match_operand:TF 1 \"general_operand\" \"\")))]\n   \"TARGET_FPU && (TARGET_HARD_QUAD || TARGET_ARCH64)\"\n   \"emit_tfmode_cvt (FLOAT_TRUNCATE, operands); DONE;\")\n \n (define_insn \"*trunctfdf2_hq\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-\t(float_truncate:DF\n-\t (match_operand:TF 1 \"register_operand\" \"e\")))]\n+\t(float_truncate:DF (match_operand:TF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fqtod\\t%1, %0\"\n   [(set_attr \"type\" \"fp\")])\n@@ -3562,7 +3576,7 @@\n (define_expand \"floatunssitf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n \t(unsigned_float:TF (match_operand:SI 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU && TARGET_ARCH64 && ! TARGET_HARD_QUAD\"\n+  \"TARGET_FPU && TARGET_ARCH64 && !TARGET_HARD_QUAD\"\n   \"emit_tfmode_cvt (UNSIGNED_FLOAT, operands); DONE;\")\n \n ;; Now the same for 64 bit sources.\n@@ -3611,7 +3625,7 @@\n (define_expand \"floatunsditf2\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n \t(unsigned_float:TF (match_operand:DI 1 \"register_operand\" \"\")))]\n-  \"TARGET_FPU && TARGET_ARCH64 && ! TARGET_HARD_QUAD\"\n+  \"TARGET_FPU && TARGET_ARCH64 && !TARGET_HARD_QUAD\"\n   \"emit_tfmode_cvt (UNSIGNED_FLOAT, operands); DONE;\")\n \n ;; Convert a float to an actual integer.\n@@ -3650,7 +3664,7 @@\n (define_expand \"fixuns_trunctfsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(unsigned_fix:SI (match_operand:TF 1 \"general_operand\" \"\")))]\n-  \"TARGET_FPU && TARGET_ARCH64 && ! TARGET_HARD_QUAD\"\n+  \"TARGET_FPU && TARGET_ARCH64 && !TARGET_HARD_QUAD\"\n   \"emit_tfmode_cvt (UNSIGNED_FIX, operands); DONE;\")\n \n ;; Now the same, for V9 targets\n@@ -3699,7 +3713,7 @@\n (define_expand \"fixuns_trunctfdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(unsigned_fix:DI (match_operand:TF 1 \"general_operand\" \"\")))]\n-  \"TARGET_FPU && TARGET_ARCH64 && ! TARGET_HARD_QUAD\"\n+  \"TARGET_FPU && TARGET_ARCH64 && !TARGET_HARD_QUAD\"\n   \"emit_tfmode_cvt (UNSIGNED_FIX, operands); DONE;\")\n \n \n@@ -3711,7 +3725,7 @@\n \t\t (match_operand:DI 2 \"arith_double_add_operand\" \"\")))]\n   \"\"\n {\n-  if (!TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_adddi3_sp32 (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -3730,7 +3744,7 @@\n \t\t\t   (pc)))]\n  \"\"\n {\n-  if (!TARGET_64BIT)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_uaddvdi4_sp32 (operands[0], operands[1], operands[2]));\n       rtx x = gen_rtx_LTU (VOIDmode, gen_rtx_REG (CCCmode, SPARC_ICC_REG),\n@@ -3753,7 +3767,7 @@\n \t\t\t   (pc)))]\n  \"\"\n {\n-  if (!TARGET_64BIT)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_addvdi4_sp32 (operands[0], operands[1], operands[2]));\n       rtx x = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCVmode, SPARC_ICC_REG),\n@@ -3768,7 +3782,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:CC CC_REG))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -3796,7 +3810,7 @@\n \t\t     (match_dup 1)))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -3834,7 +3848,7 @@\n \t\t     (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_ADDV)))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -3869,7 +3883,7 @@\n                                    (match_operand:SI 1 \"register_operand\" \"%r\")\n                                    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n                                  (ltu:SI (reg:CCC CC_REG) (const_int 0)))))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (plus:SI (plus:SI (match_dup 1) (match_dup 2))\n@@ -3884,7 +3898,7 @@\n         (plus:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n                  (match_operand:DI 2 \"register_operand\" \"r\")))\n    (clobber (reg:CC CC_REG))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -4104,7 +4118,7 @@\n \t\t  (match_operand:DI 2 \"arith_double_add_operand\" \"\")))]\n   \"\"\n {\n-  if (!TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_subdi3_sp32 (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -4128,7 +4142,7 @@\n       DONE;\n     }\n \n-  if (!TARGET_64BIT)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_usubvdi4_sp32 (operands[0], operands[1], operands[2]));\n       rtx x = gen_rtx_LTU (VOIDmode, gen_rtx_REG (CCCmode, SPARC_ICC_REG),\n@@ -4151,7 +4165,7 @@\n \t\t\t   (pc)))]\n  \"\"\n {\n-  if (!TARGET_64BIT)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_subvdi4_sp32 (operands[0], operands[1], operands[2]));\n       rtx x = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCVmode, SPARC_ICC_REG),\n@@ -4166,7 +4180,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (clobber (reg:CC CC_REG))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CC CC_REG)\n@@ -4192,7 +4206,7 @@\n \t\t     (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(minus:DI (match_dup 1) (match_dup 2)))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CC CC_REG)\n@@ -4232,7 +4246,7 @@\n \t\t     (unspec:DI [(match_dup 1) (match_dup 2)] UNSPEC_SUBV)))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(minus:DI (match_dup 1) (match_dup 2)))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CC CC_REG)\n@@ -4266,7 +4280,7 @@\n \t\t\t\t    (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n \t\t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n                                   (ltu:SI (reg:CCC CC_REG) (const_int 0)))))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 3) (minus:SI (minus:SI (match_dup 1) (match_dup 2))\n@@ -4281,7 +4295,7 @@\n       (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n                 (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))\n    (clobber (reg:CC CC_REG))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CC CC_REG)\n@@ -4470,12 +4484,13 @@\n \n (define_insn \"*cmp_ccv_minus_sltu_set\"\n   [(set (reg:CCV CC_REG)\n-\t(compare:CCV (minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n-\t\t\t\t\t (match_operand:SI 2 \"arith_operand\" \"rI\"))\n-\t\t\t       (ltu:SI (reg:CC CC_REG) (const_int 0)))\n-\t\t     (unspec:SI [(minus:SI (match_dup 1) (match_dup 2))\n-\t\t\t\t (ltu:SI (reg:CC CC_REG) (const_int 0))]\n-\t\t\t\tUNSPEC_SUBV)))\n+\t(compare:CCV\n+\t  (minus:SI (minus:SI (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")\n+\t\t\t      (match_operand:SI 2 \"arith_operand\" \"rI\"))\n+\t\t    (ltu:SI (reg:CC CC_REG) (const_int 0)))\n+\t  (unspec:SI [(minus:SI (match_dup 1) (match_dup 2))\n+\t\t      (ltu:SI (reg:CC CC_REG) (const_int 0))]\n+\t\t     UNSPEC_SUBV)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_dup 1) (match_dup 2))\n \t\t  (ltu:SI (reg:CC CC_REG) (const_int 0))))]\n@@ -4526,7 +4541,9 @@\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n   \"TARGET_V8PLUS\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"mulx\\\");\"\n+{\n+  return output_v8plus_mult (insn, operands, \\\"mulx\\\");\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"9,8\")])\n \n@@ -4648,9 +4665,10 @@\n (define_expand \"smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\")))\n-\t\t      (const_int 32))))]\n+\t  (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t     (sign_extend:DI (match_operand:SI 2 \"arith_operand\" \"\")))\n+\t    (const_int 32))))]\n   \"TARGET_HARD_MUL && TARGET_ARCH32\"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -4677,9 +4695,10 @@\n (define_insn \"smulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r,r\")))\n-\t\t      (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n+\t  (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t     (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r,r\")))\n+\t    (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n    (clobber (match_scratch:SI 4 \"=X,&h\"))]\n   \"TARGET_V8PLUS\"\n   \"@\n@@ -4692,11 +4711,10 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(subreg:SI\n-\t (lshiftrt:DI\n-\t  (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t   (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r,r\")))\n-\t  (match_operand:SI 3 \"small_int_operand\" \"I,I\"))\n-\t 4))\n+\t  (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t     (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r,r\")))\n+\t    (match_operand:SI 3 \"small_int_operand\" \"I,I\")) 4))\n    (clobber (match_scratch:SI 4 \"=X,&h\"))]\n   \"TARGET_V8PLUS\"\n   \"@\n@@ -4708,9 +4726,10 @@\n (define_insn \"const_smulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t\t       (match_operand:DI 2 \"small_int_operand\" \"I,I\"))\n-\t\t      (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n+\t  (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t     (match_operand:DI 2 \"small_int_operand\" \"I,I\"))\n+\t  (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n    (clobber (match_scratch:SI 4 \"=X,&h\"))]\n   \"TARGET_V8PLUS\"\n   \"@\n@@ -4722,9 +4741,10 @@\n (define_insn \"*smulsi3_highpart_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t\t       (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n-\t\t      (const_int 32))))]\n+\t  (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t     (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t  (const_int 32))))]\n   \"TARGET_HARD_MUL32\"\n   \"smul\\t%1, %2, %%g0\\n\\trd\\t%%y, %0\"\n   [(set_attr \"type\" \"multi\")\n@@ -4733,9 +4753,10 @@\n (define_insn \"const_smulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t\t       (match_operand:DI 2 \"small_int_operand\" \"i\"))\n-\t\t      (const_int 32))))]\n+\t  (lshiftrt:DI\n+\t    (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t     (match_operand:DI 2 \"small_int_operand\" \"i\"))\n+\t    (const_int 32))))]\n   \"TARGET_HARD_MUL32\"\n   \"smul\\t%1, %2, %%g0\\n\\trd\\t%%y, %0\"\n   [(set_attr \"type\" \"multi\")\n@@ -4846,9 +4867,10 @@\n (define_expand \"umulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n-\t\t\t       (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\")))\n-\t\t      (const_int 32))))]\n+\t  (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"\"))\n+\t\t     (zero_extend:DI (match_operand:SI 2 \"uns_arith_operand\" \"\")))\n+\t  (const_int 32))))]\n   \"TARGET_HARD_MUL && TARGET_ARCH32\"\n {\n   if (CONSTANT_P (operands[2]))\n@@ -4875,9 +4897,10 @@\n (define_insn \"umulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r,r\")))\n-\t\t      (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n+\t  (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t     (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r,r\")))\n+\t    (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n    (clobber (match_scratch:SI 4 \"=X,h\"))]\n   \"TARGET_V8PLUS\"\n   \"@\n@@ -4889,9 +4912,10 @@\n (define_insn \"const_umulsi3_highpart_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=h,r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n-\t\t\t       (match_operand:DI 2 \"uns_small_int_operand\" \"\"))\n-\t\t      (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n+\t  (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r,r\"))\n+\t\t     (match_operand:DI 2 \"uns_small_int_operand\" \"\"))\n+\t    (match_operand:SI 3 \"small_int_operand\" \"I,I\"))))\n    (clobber (match_scratch:SI 4 \"=X,h\"))]\n   \"TARGET_V8PLUS\"\n   \"@\n@@ -4903,9 +4927,10 @@\n (define_insn \"*umulsi3_highpart_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t\t       (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n-\t\t      (const_int 32))))]\n+\t  (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t     (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t    (const_int 32))))]\n   \"TARGET_HARD_MUL32\"\n   \"umul\\t%1, %2, %%g0\\n\\trd\\t%%y, %0\"\n   [(set_attr \"type\" \"multi\")\n@@ -4914,9 +4939,10 @@\n (define_insn \"const_umulsi3_highpart\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t\t       (match_operand:DI 2 \"uns_small_int_operand\" \"\"))\n-\t\t      (const_int 32))))]\n+\t  (lshiftrt:DI\n+\t    (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t     (match_operand:DI 2 \"uns_small_int_operand\" \"\"))\n+\t    (const_int 32))))]\n   \"TARGET_HARD_MUL32\"\n   \"umul\\t%1, %s2, %%g0\\n\\trd\\t%%y, %0\"\n   [(set_attr \"type\" \"multi\")\n@@ -4925,16 +4951,14 @@\n \n (define_expand \"umulxhi_vis\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (mult:TI (zero_extend:TI\n-                       (match_operand:DI 1 \"arith_operand\" \"\"))\n-                     (zero_extend:TI\n-                       (match_operand:DI 2 \"arith_operand\" \"\")))\n-           (const_int 64))))]\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t    (mult:TI (zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"\"))\n+\t\t     (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"\")))\n+\t  (const_int 64))))]\n  \"TARGET_VIS3\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_umulxhi_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -4943,44 +4967,40 @@\n \n (define_insn \"*umulxhi_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (mult:TI (zero_extend:TI\n-                       (match_operand:DI 1 \"arith_operand\" \"%r\"))\n-                     (zero_extend:TI\n-                       (match_operand:DI 2 \"arith_operand\" \"rI\")))\n-           (const_int 64))))]\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t    (mult:TI (zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+\t\t     (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"rI\")))\n+\t  (const_int 64))))]\n   \"TARGET_VIS3 && TARGET_ARCH64\"\n   \"umulxhi\\t%1, %2, %0\"\n   [(set_attr \"type\" \"imul\")])\n \n (define_insn \"umulxhi_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (mult:TI (zero_extend:TI\n-                       (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n-                     (zero_extend:TI\n-                       (match_operand:DI 2 \"arith_operand\" \"rI,rI\")))\n-           (const_int 64))))\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t    (mult:TI (zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+\t\t     (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"rI,rI\")))\n+\t  (const_int 64))))\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n-  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"umulxhi\\\");\"\n+  \"TARGET_VIS3 && TARGET_ARCH32\"\n+{\n+  return output_v8plus_mult (insn, operands, \\\"umulxhi\\\");\n+}\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"9,8\")])\n \n (define_expand \"xmulx_vis\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (truncate:DI\n-          (unspec:TI [(zero_extend:TI\n-                        (match_operand:DI 1 \"arith_operand\" \"\"))\n-                      (zero_extend:TI\n-                        (match_operand:DI 2 \"arith_operand\" \"\"))]\n-           UNSPEC_XMUL)))]\n+\t(truncate:DI\n+\t  (unspec:TI [(zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"\"))\n+\t\t      (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"\"))]\n+\t\t     UNSPEC_XMUL)))]\n   \"TARGET_VIS3\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_xmulx_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -4989,44 +5009,40 @@\n \n (define_insn \"*xmulx_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-          (unspec:TI [(zero_extend:TI\n-                        (match_operand:DI 1 \"arith_operand\" \"%r\"))\n-                      (zero_extend:TI\n-                        (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n-           UNSPEC_XMUL)))]\n+\t(truncate:DI\n+\t  (unspec:TI [(zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+\t\t      (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n+\t\t     UNSPEC_XMUL)))]\n   \"TARGET_VIS3 && TARGET_ARCH64\"\n   \"xmulx\\t%1, %2, %0\"\n   [(set_attr \"type\" \"imul\")])\n \n (define_insn \"xmulx_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n-        (truncate:DI\n-          (unspec:TI [(zero_extend:TI\n-                        (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n-                      (zero_extend:TI\n-                        (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n-           UNSPEC_XMUL)))\n+\t(truncate:DI\n+\t  (unspec:TI [(zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+\t\t      (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n+\t\t     UNSPEC_XMUL)))\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n-  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"xmulx\\\");\"\n+  \"TARGET_VIS3 && TARGET_ARCH32\"\n+{\n+  return output_v8plus_mult (insn, operands, \\\"xmulx\\\");\n+}\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"9,8\")])\n \n (define_expand \"xmulxhi_vis\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (unspec:TI [(zero_extend:TI\n-                          (match_operand:DI 1 \"arith_operand\" \"\"))\n-                        (zero_extend:TI\n-                          (match_operand:DI 2 \"arith_operand\" \"\"))]\n-             UNSPEC_XMUL)\n-           (const_int 64))))]\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t     (unspec:TI [(zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"\"))\n+\t\t\t (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"\"))]\n+\t\t\tUNSPEC_XMUL)\n+\t  (const_int 64))))]\n   \"TARGET_VIS3\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_xmulxhi_v8plus (operands[0], operands[1], operands[2]));\n       DONE;\n@@ -5035,32 +5051,30 @@\n \n (define_insn \"*xmulxhi_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (unspec:TI [(zero_extend:TI\n-                          (match_operand:DI 1 \"arith_operand\" \"%r\"))\n-                        (zero_extend:TI\n-                          (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n-             UNSPEC_XMUL)\n-           (const_int 64))))]\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t    (unspec:TI [(zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"%r\"))\n+\t\t\t(zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"rI\"))]\n+\t\t       UNSPEC_XMUL)\n+\t    (const_int 64))))]\n   \"TARGET_VIS3 && TARGET_ARCH64\"\n   \"xmulxhi\\t%1, %2, %0\"\n   [(set_attr \"type\" \"imul\")])\n \n (define_insn \"xmulxhi_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,h\")\n-        (truncate:DI\n-          (lshiftrt:TI\n-            (unspec:TI [(zero_extend:TI\n-                          (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n-                        (zero_extend:TI\n-                          (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n-             UNSPEC_XMUL)\n-           (const_int 64))))\n+\t(truncate:DI\n+\t  (lshiftrt:TI\n+\t    (unspec:TI [(zero_extend:TI (match_operand:DI 1 \"arith_operand\" \"%r,0\"))\n+\t\t        (zero_extend:TI (match_operand:DI 2 \"arith_operand\" \"rI,rI\"))]\n+\t\t       UNSPEC_XMUL)\n+\t  (const_int 64))))\n    (clobber (match_scratch:SI 3 \"=&h,X\"))\n    (clobber (match_scratch:SI 4 \"=&h,X\"))]\n-  \"TARGET_VIS3 && !TARGET_ARCH64\"\n-  \"* return output_v8plus_mult (insn, operands, \\\"xmulxhi\\\");\"\n+  \"TARGET_VIS3 && TARGET_ARCH32\"\n+{\n+  return output_v8plus_mult (insn, operands, \\\"xmulxhi\\\");\n+}\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"length\" \"9,8\")])\n \n@@ -5424,48 +5438,46 @@\n \n (define_insn \"*cmp_cc_arith_op\"\n   [(set (reg:CC CC_REG)\n-\t(compare:CC\n-\t (match_operator:SI 2 \"cc_arith_operator\"\n-\t\t\t    [(match_operand:SI 0 \"arith_operand\" \"%r\")\n-\t\t\t     (match_operand:SI 1 \"arith_operand\" \"rI\")])\n+\t(compare:CC (match_operator:SI 2 \"cc_arith_operator\"\n+\t\t     [(match_operand:SI 0 \"arith_operand\" \"%r\")\n+\t\t      (match_operand:SI 1 \"arith_operand\" \"rI\")])\n \t (const_int 0)))]\n   \"\"\n   \"%A2cc\\t%0, %1, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op\"\n   [(set (reg:CCX CC_REG)\n-\t(compare:CCX\n-\t (match_operator:DI 2 \"cc_arith_operator\"\n-\t\t\t    [(match_operand:DI 0 \"arith_operand\" \"%r\")\n-\t\t\t     (match_operand:DI 1 \"arith_operand\" \"rI\")])\n+\t(compare:CCX (match_operator:DI 2 \"cc_arith_operator\"\n+\t\t      [(match_operand:DI 0 \"arith_operand\" \"%r\")\n+\t\t       (match_operand:DI 1 \"arith_operand\" \"rI\")])\n \t (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"%A2cc\\t%0, %1, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_arith_op_set\"\n   [(set (reg:CC CC_REG)\n-\t(compare:CC\n-\t (match_operator:SI 3 \"cc_arith_operator\"\n-\t\t\t    [(match_operand:SI 1 \"arith_operand\" \"%r\")\n-\t\t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")])\n+\t(compare:CC (match_operator:SI 3 \"cc_arith_operator\"\n+\t\t     [(match_operand:SI 1 \"arith_operand\" \"%r\")\n+\t\t      (match_operand:SI 2 \"arith_operand\" \"rI\")])\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(match_operator:SI 4 \"cc_arith_operator\" [(match_dup 1) (match_dup 2)]))]\n+\t(match_operator:SI 4 \"cc_arith_operator\"\n+         [(match_dup 1) (match_dup 2)]))]\n   \"GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n   \"%A3cc\\t%1, %2, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op_set\"\n   [(set (reg:CCX CC_REG)\n-\t(compare:CCX\n-\t (match_operator:DI 3 \"cc_arith_operator\"\n-\t\t\t    [(match_operand:DI 1 \"arith_operand\" \"%r\")\n-\t\t\t     (match_operand:DI 2 \"arith_operand\" \"rI\")])\n+\t(compare:CCX (match_operator:DI 3 \"cc_arith_operator\"\n+\t\t      [(match_operand:DI 1 \"arith_operand\" \"%r\")\n+\t\t       (match_operand:DI 2 \"arith_operand\" \"rI\")])\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(match_operator:DI 4 \"cc_arith_operator\" [(match_dup 1) (match_dup 2)]))]\n+\t(match_operator:DI 4 \"cc_arith_operator\"\n+         [(match_dup 1) (match_dup 2)]))]\n   \"TARGET_ARCH64 && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n   \"%A3cc\\t%1, %2, %0\"\n   [(set_attr \"type\" \"compare\")])\n@@ -5516,50 +5528,46 @@\n \n (define_insn \"*cmp_cc_arith_op_not\"\n   [(set (reg:CC CC_REG)\n-\t(compare:CC\n-\t (match_operator:SI 2 \"cc_arith_not_operator\"\n-\t\t\t    [(not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n-\t\t\t     (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")])\n+\t(compare:CC (match_operator:SI 2 \"cc_arith_not_operator\"\n+\t\t     [(not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n+\t\t      (match_operand:SI 1 \"register_or_zero_operand\" \"rJ\")])\n \t (const_int 0)))]\n   \"\"\n   \"%B2cc\\t%r1, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op_not\"\n   [(set (reg:CCX CC_REG)\n-\t(compare:CCX\n-\t (match_operator:DI 2 \"cc_arith_not_operator\"\n-\t\t\t    [(not:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n-\t\t\t     (match_operand:DI 1 \"register_or_zero_operand\" \"rJ\")])\n+\t(compare:CCX (match_operator:DI 2 \"cc_arith_not_operator\"\n+\t\t      [(not:DI (match_operand:DI 0 \"arith_operand\" \"rI\"))\n+\t\t       (match_operand:DI 1 \"register_or_zero_operand\" \"rJ\")])\n \t (const_int 0)))]\n   \"TARGET_ARCH64\"\n   \"%B2cc\\t%r1, %0, %%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_cc_arith_op_not_set\"\n   [(set (reg:CC CC_REG)\n-\t(compare:CC\n-\t (match_operator:SI 3 \"cc_arith_not_operator\"\n-\t\t\t    [(not:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n-\t\t\t     (match_operand:SI 2 \"register_or_zero_operand\" \"rJ\")])\n+\t(compare:CC (match_operator:SI 3 \"cc_arith_not_operator\"\n+\t\t     [(not:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n+\t\t      (match_operand:SI 2 \"register_or_zero_operand\" \"rJ\")])\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 4 \"cc_arith_not_operator\"\n-\t\t\t    [(not:SI (match_dup 1)) (match_dup 2)]))]\n+\t [(not:SI (match_dup 1)) (match_dup 2)]))]\n   \"GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n   \"%B3cc\\t%r2, %1, %0\"\n   [(set_attr \"type\" \"compare\")])\n \n (define_insn \"*cmp_ccx_arith_op_not_set\"\n   [(set (reg:CCX CC_REG)\n-\t(compare:CCX\n-\t (match_operator:DI 3 \"cc_arith_not_operator\"\n-\t\t\t    [(not:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n-\t\t\t     (match_operand:DI 2 \"register_or_zero_operand\" \"rJ\")])\n+\t(compare:CCX (match_operator:DI 3 \"cc_arith_not_operator\"\n+\t\t      [(not:DI (match_operand:DI 1 \"arith_operand\" \"rI\"))\n+\t\t       (match_operand:DI 2 \"register_or_zero_operand\" \"rJ\")])\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operator:DI 4 \"cc_arith_not_operator\"\n-\t\t\t    [(not:DI (match_dup 1)) (match_dup 2)]))]\n+         [(not:DI (match_dup 1)) (match_dup 2)]))]\n   \"TARGET_ARCH64 && GET_CODE (operands[3]) == GET_CODE (operands[4])\"\n   \"%B3cc\\t%r2, %1, %0\"\n   [(set_attr \"type\" \"compare\")])\n@@ -5572,7 +5580,7 @@\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"\"\n {\n-  if (!TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_negdi2_sp32 (operands[0], operands[1]));\n       DONE;\n@@ -5591,7 +5599,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  if (!TARGET_64BIT)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_unegvdi3_sp32 (operands[0], operands[1]));\n       rtx x = gen_rtx_LTU (VOIDmode, gen_rtx_REG (CCCmode, SPARC_ICC_REG),\n@@ -5613,7 +5621,7 @@\n \t\t      (pc)))]\n   \"\"\n {\n-  if (!TARGET_64BIT)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_negvdi3_sp32 (operands[0], operands[1]));\n       rtx x = gen_rtx_NE (VOIDmode, gen_rtx_REG (CCVmode, SPARC_ICC_REG),\n@@ -5627,7 +5635,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (reg:CC CC_REG))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -5647,7 +5655,7 @@\n \t\t     (const_int -1)))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(neg:DI (match_dup 1)))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -5676,7 +5684,7 @@\n \t\t     (unspec:DI [(match_dup 1)] UNSPEC_NEGV)))\n    (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n \t(neg:DI (match_dup 1)))]\n-  \"!TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"#\"\n   \"&& reload_completed\"\n   [(parallel [(set (reg:CCC CC_REG)\n@@ -6435,7 +6443,7 @@\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       if (GET_CODE (operands[2]) == CONST_INT)\n \tFAIL;\n@@ -6462,7 +6470,9 @@\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  \"* return output_v8plus_shift (insn ,operands, \\\"sllx\\\");\"\n+{\n+  return output_v8plus_shift (insn ,operands, \\\"sllx\\\");\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -6491,11 +6501,11 @@\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n-  {\n-     if (GET_CODE (operands[2]) == CONST_INT)\n-       operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n-     return \"sra\\t%1, %2, %0\";\n-  }\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+   operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+  return \"sra\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"*ashrsi3_extend\"\n@@ -6526,7 +6536,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       if (GET_CODE (operands[2]) == CONST_INT)\n         FAIL;\t/* prefer generic code in this case */\n@@ -6540,12 +6550,11 @@\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64\"\n-  \n-  {\n-    if (GET_CODE (operands[2]) == CONST_INT)\n-      operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n-    return \"srax\\t%1, %2, %0\";\n-  }\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n+  return \"srax\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"ashrdi3_v8plus\"\n@@ -6554,7 +6563,9 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  \"* return output_v8plus_shift (insn, operands, \\\"srax\\\");\"\n+{\n+  return output_v8plus_shift (insn, operands, \\\"srax\\\");\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -6563,11 +6574,11 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"\"\n-  {\n-    if (GET_CODE (operands[2]) == CONST_INT)\n-      operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n-    return \"srl\\t%1, %2, %0\";\n-  }\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+  return \"srl\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"*lshrsi3_extend0\"\n@@ -6576,11 +6587,11 @@\n \t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"TARGET_ARCH64\"\n-  {\n-    if (GET_CODE (operands[2]) == CONST_INT)\n-      operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n-    return \"srl\\t%1, %2, %0\";\n-  }\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+  return \"srl\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n ;; This handles the case where\n@@ -6616,7 +6627,7 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64 || TARGET_V8PLUS\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       if (GET_CODE (operands[2]) == CONST_INT)\n         FAIL;\n@@ -6630,11 +6641,11 @@\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n   \"TARGET_ARCH64\"\n-  {\n-    if (GET_CODE (operands[2]) == CONST_INT)\n-      operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n-    return \"srlx\\t%1, %2, %0\";\n-  }\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n+  return \"srlx\\t%1, %2, %0\";\n+}\n   [(set_attr \"type\" \"shift\")])\n \n (define_insn \"lshrdi3_v8plus\"\n@@ -6643,7 +6654,9 @@\n \t\t     (match_operand:SI 2 \"arith_operand\" \"rI,rI,rI\")))\n    (clobber (match_scratch:SI 3 \"=X,X,&h\"))]\n   \"TARGET_V8PLUS\"\n-  \"* return output_v8plus_shift (insn, operands, \\\"srlx\\\");\"\n+{\n+  return output_v8plus_shift (insn, operands, \\\"srlx\\\");\n+}\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"5,5,6\")])\n \n@@ -6712,14 +6725,18 @@\n \n (define_insn \"*jump_ubranch\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n-  \"! TARGET_CBCOND\"\n-  \"* return output_ubranch (operands[0], insn);\"\n+  \"!TARGET_CBCOND\"\n+{\n+  return output_ubranch (operands[0], insn);\n+}\n   [(set_attr \"type\" \"uncond_branch\")])\n \n (define_insn \"*jump_cbcond\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))]\n   \"TARGET_CBCOND\"\n-  \"* return output_ubranch (operands[0], insn);\"\n+{\n+  return output_ubranch (operands[0], insn);\n+}\n   [(set_attr \"type\" \"uncond_cbcond\")])\n \n (define_expand \"tablejump\"\n@@ -6747,7 +6764,7 @@\n (define_insn \"*tablejump_sp32\"\n   [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"jmp\\t%a0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n@@ -6786,7 +6803,7 @@\n \t Why cannot we have delay slots filled if it were a CALL?  */\n \n       /* We accept negative sizes for untyped calls.  */\n-      if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n+      if (TARGET_ARCH32 && INTVAL (operands[3]) != 0)\n \temit_jump_insn\n \t  (gen_rtx_PARALLEL\n \t   (VOIDmode,\n@@ -6807,7 +6824,7 @@\n   fn_rtx = operands[0];\n \n   /* We accept negative sizes for untyped calls.  */\n-  if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n+  if (TARGET_ARCH32 && INTVAL (operands[3]) != 0)\n     sparc_emit_call_insn\n       (gen_rtx_PARALLEL\n        (VOIDmode,\n@@ -6836,7 +6853,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"call\\t%a0, %1%#\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -6845,7 +6862,7 @@\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"call\\t%a0, %1%#\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -6875,7 +6892,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n+  \"TARGET_ARCH32 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) & 0xfff);\n   return \"call\\t%a0, %1\\n\\t nop\\n\\tunimp\\t%2\";\n@@ -6891,7 +6908,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n+  \"TARGET_ARCH32 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) > 0\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) & 0xfff);\n   return \"call\\t%a0, %1\\n\\t nop\\n\\tunimp\\t%2\";\n@@ -6907,7 +6924,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n+  \"TARGET_ARCH32 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call\\t%a0, %1\\n\\t nop\\n\\tnop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"3\")])\n@@ -6920,7 +6937,7 @@\n    (match_operand 2 \"immediate_operand\" \"\")\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 1 for most machines.\n-  \"! TARGET_ARCH64 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n+  \"TARGET_ARCH32 && GET_CODE (operands[2]) == CONST_INT && INTVAL (operands[2]) < 0\"\n   \"call\\t%a0, %1\\n\\t nop\\n\\tnop\"\n   [(set_attr \"type\" \"call_no_delay_slot\")\n    (set_attr \"length\" \"3\")])\n@@ -6958,7 +6975,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"call\\t%a1, %2%#\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -6968,7 +6985,7 @@\n \t      (match_operand 2 \"\" \"\")))\n    (clobber (reg:SI O7_REG))]\n   ;;- Do not use operand 2 for most machines.\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n   \"call\\t%a1, %2%#\"\n   [(set_attr \"type\" \"call\")])\n \n@@ -7037,16 +7054,20 @@\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (return)]\n-  \"! TARGET_ARCH64\"\n-  \"* return output_sibcall(insn, operands[0]);\"\n+  \"TARGET_ARCH32\"\n+{\n+  return output_sibcall(insn, operands[0]);\n+}\n   [(set_attr \"type\" \"sibcall\")])\n \n (define_insn \"*sibcall_symbolic_sp64\"\n   [(call (mem:DI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (return)]\n   \"TARGET_ARCH64\"\n-  \"* return output_sibcall(insn, operands[0]);\"\n+{\n+  return output_sibcall(insn, operands[0]);\n+}\n   [(set_attr \"type\" \"sibcall\")])\n \n (define_expand \"sibcall_value\"\n@@ -7061,8 +7082,10 @@\n \t(call (mem:SI (match_operand:SI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n    (return)]\n-  \"! TARGET_ARCH64\"\n-  \"* return output_sibcall(insn, operands[1]);\"\n+  \"TARGET_ARCH32\"\n+{\n+  return output_sibcall(insn, operands[1]);\n+}\n   [(set_attr \"type\" \"sibcall\")])\n \n (define_insn \"*sibcall_value_symbolic_sp64\"\n@@ -7071,7 +7094,9 @@\n \t      (match_operand 2 \"\" \"\")))\n    (return)]\n   \"TARGET_ARCH64\"\n-  \"* return output_sibcall(insn, operands[1]);\"\n+{\n+  return output_sibcall(insn, operands[1]);\n+}\n   [(set_attr \"type\" \"sibcall\")])\n \n \n@@ -7151,7 +7176,9 @@\n (define_insn \"*return_internal\"\n   [(return)]\n   \"\"\n-  \"* return output_return (insn);\"\n+{\n+  return output_return (insn);\n+}\n   [(set_attr \"type\" \"return\")\n    (set (attr \"length\")\n \t(cond [(eq_attr \"calls_eh_return\" \"true\")\n@@ -7215,7 +7242,9 @@\n \t\t\t    (match_operand:P 2 \"register_operand\" \"r\")]\n \t\t\t    UNSPECV_PROBE_STACK_RANGE))]\n   \"\"\n-  \"* return output_probe_stack_range (operands[0], operands[2]);\"\n+{\n+  return output_probe_stack_range (operands[0], operands[2]);\n+}\n   [(set_attr \"type\" \"multi\")])\n \n ;; Prepare to return any type including a structure value.\n@@ -7228,7 +7257,7 @@\n   rtx valreg1 = gen_rtx_REG (DImode, 24);\n   rtx result = operands[0];\n \n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       rtx rtnreg = gen_rtx_REG (SImode, RETURN_ADDR_REGNUM);\n       rtx value = gen_reg_rtx (SImode);\n@@ -7272,7 +7301,7 @@\n (define_insn \"update_return\"\n   [(unspec:SI [(match_operand:SI 0 \"register_operand\" \"r\")\n \t       (match_operand:SI 1 \"register_operand\" \"r\")] UNSPEC_UPDATE_RETURN)]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n {\n   if (flag_delayed_branch)\n     return \"cmp\\t%1, 0\\n\\tbe,a\\t.+8\\n\\t add\\t%0, 4, %0\";\n@@ -7297,7 +7326,7 @@\n \n (define_insn \"*branch_sp32\"\n   [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))]\n-  \"! TARGET_ARCH64\"\n+  \"TARGET_ARCH32\"\n  \"jmp\\t%a0%#\"\n  [(set_attr \"type\" \"uncond_branch\")])\n  \n@@ -7376,15 +7405,19 @@\n (define_insn \"flush_register_windows\"\n   [(unspec_volatile [(const_int 0)] UNSPECV_FLUSHW)]\n   \"\"\n-  { return TARGET_V9 ? \"flushw\" : \"ta\\t3\"; }\n+{\n+  return TARGET_V9 ? \"flushw\" : \"ta\\t3\";\n+}\n   [(set_attr \"type\" \"flushw\")])\n \n ;; Special pattern for the FLUSH instruction.\n \n (define_insn \"flush<P:mode>\"\n   [(unspec_volatile [(match_operand:P 0 \"memory_operand\" \"m\")] UNSPECV_FLUSH)]\n   \"\"\n-  { return TARGET_V9 ? \"flush\\t%f0\" : \"iflush\\t%f0\"; }\n+{\n+  return TARGET_V9 ? \"flush\\t%f0\" : \"iflush\\t%f0\";\n+}\n   [(set_attr \"type\" \"iflush\")])\n \n ;; Special insns to load and store the 32-bit FP Status Register.\n@@ -7405,29 +7438,12 @@\n \n ;; Find first set instructions.\n \n-;; The scan instruction searches from the most significant bit while ffs\n-;; searches from the least significant bit.  The bit index and treatment of\n-;; zero also differ.  It takes at least 7 instructions to get the proper\n-;; result.  Here is an obvious 8 instruction sequence.\n-\n-;; XXX\n-(define_insn \"ffssi2\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&r\")\n-\t(ffs:SI (match_operand:SI 1 \"register_operand\" \"r\")))\n-   (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"TARGET_SPARCLITE || TARGET_SPARCLET\"\n-{\n-  return \"sub\\t%%g0, %1, %0\\;and\\t%0, %1, %0\\;scan\\t%0, 0, %0\\;mov\\t32, %2\\;sub\\t%2, %0, %0\\;sra\\t%0, 31, %2\\;and\\t%2, 31, %2\\;add\\t%2, %0, %0\";\n-}\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_expand \"popcountdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n         (popcount:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"TARGET_POPC\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_popcountdi_v8plus (operands[0], operands[1]));\n       DONE;\n@@ -7444,7 +7460,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (popcount:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (match_scratch:SI 2 \"=&h\"))]\n-  \"TARGET_POPC && ! TARGET_ARCH64\"\n+  \"TARGET_POPC && TARGET_ARCH32\"\n {\n   if (sparc_check_64 (operands[1], insn) <= 0)\n     output_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n@@ -7460,7 +7476,7 @@\n         (truncate:SI (popcount:DI (match_dup 2))))]\n   \"TARGET_POPC\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_popcountsi_v8plus (operands[0], operands[1]));\n       DONE;\n@@ -7479,7 +7495,7 @@\n (define_insn \"popcountsi_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (popcount:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_POPC && ! TARGET_ARCH64\"\n+  \"TARGET_POPC && TARGET_ARCH32\"\n {\n   if (sparc_check_64 (operands[1], insn) <= 0)\n     output_asm_insn (\"srl\\t%1, 0, %1\", operands);\n@@ -7493,7 +7509,7 @@\n         (clz:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n   \"TARGET_VIS3\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_clzdi_v8plus (operands[0], operands[1]));\n       DONE;\n@@ -7511,7 +7527,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n         (clz:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (match_scratch:SI 2 \"=&h\"))]\n-  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+  \"TARGET_VIS3 && TARGET_ARCH32\"\n {\n   if (sparc_check_64 (operands[1], insn) <= 0)\n     output_asm_insn (\"srl\\t%L1, 0, %L1\", operands);\n@@ -7529,7 +7545,7 @@\n         (minus:SI (match_dup 3) (const_int 32)))]\n   \"TARGET_VIS3\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_clzsi_v8plus (operands[0], operands[1]));\n       DONE;\n@@ -7552,7 +7568,7 @@\n (define_insn \"clzsi_v8plus\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n         (clz:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_VIS3 && ! TARGET_ARCH64\"\n+  \"TARGET_VIS3 && TARGET_ARCH32\"\n {\n   if (sparc_check_64 (operands[1], insn) <= 0)\n     output_asm_insn (\"srl\\t%1, 0, %1\", operands);\n@@ -7708,8 +7724,8 @@\n \t\t    (const_int 0)))]\n   \"(rtx_equal_p (operands[2], operands[0])\n     || rtx_equal_p (operands[2], operands[1]))\n-    && ! SPARC_FP_REG_P (REGNO (operands[0]))\n-    && ! SPARC_FP_REG_P (REGNO (operands[1]))\"\n+    && !SPARC_FP_REG_P (REGNO (operands[0]))\n+    && !SPARC_FP_REG_P (REGNO (operands[1]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (reg:CC CC_REG)\n \t\t   (compare:CC (match_dup 1) (const_int 0)))])]\n@@ -7724,8 +7740,8 @@\n   \"TARGET_ARCH64\n    && (rtx_equal_p (operands[2], operands[0])\n        || rtx_equal_p (operands[2], operands[1]))\n-   && ! SPARC_FP_REG_P (REGNO (operands[0]))\n-   && ! SPARC_FP_REG_P (REGNO (operands[1]))\"\n+   && !SPARC_FP_REG_P (REGNO (operands[0]))\n+   && !SPARC_FP_REG_P (REGNO (operands[1]))\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n \t      (set (reg:CCX CC_REG)\n \t\t   (compare:CCX (match_dup 1) (const_int 0)))])]\n@@ -7734,10 +7750,10 @@\n \n ;; Prefetch instructions.\n \n-;; ??? UltraSPARC-III note: A memory operation loading into the floating point register\n-;; ??? file, if it hits the prefetch cache, has a chance to dual-issue with other memory\n-;; ??? operations.  With DFA we might be able to model this, but it requires a lot of\n-;; ??? state.\n+;; ??? UltraSPARC-III note: A memory operation loading into the floating point\n+;; register file, if it hits the prefetch cache, has a chance to dual-issue\n+;; with other memory operations.  With DFA we might be able to model this,\n+;; but it requires a lot of state.\n (define_expand \"prefetch\"\n   [(match_operand 0 \"address_operand\" \"\")\n    (match_operand 1 \"const_int_operand\" \"\")\n@@ -7814,7 +7830,7 @@\n   [(trap_if (match_operator 0 \"comparison_operator\"\n \t     [(match_operand:SI 1 \"compare_operand\" \"\")\n \t      (match_operand:SI 2 \"arith_operand\" \"\")])\n-\t   (match_operand 3 \"arith_operand\"))]\n+\t    (match_operand 3 \"arith_operand\"))]\n   \"\"\n {\n   operands[1] = gen_compare_reg (operands[0]);\n@@ -7827,7 +7843,7 @@\n   [(trap_if (match_operator 0 \"comparison_operator\"\n \t     [(match_operand:DI 1 \"compare_operand\" \"\")\n \t      (match_operand:DI 2 \"arith_operand\" \"\")])\n-\t   (match_operand 3 \"arith_operand\"))]\n+\t    (match_operand 3 \"arith_operand\"))]\n   \"TARGET_ARCH64\"\n {\n   operands[1] = gen_compare_reg (operands[0]);\n@@ -7838,7 +7854,7 @@\n \n (define_insn \"*trapsi_insn\"\n   [(trap_if (match_operator 0 \"icc_comparison_operator\"\n-\t      [(reg:CC CC_REG) (const_int 0)])\n+\t     [(reg:CC CC_REG) (const_int 0)])\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n   \"\"\n {\n@@ -7851,7 +7867,7 @@\n \n (define_insn \"*trapdi_insn\"\n   [(trap_if (match_operator 0 \"icc_comparison_operator\"\n-\t      [(reg:CCX CC_REG) (const_int 0)])\n+\t     [(reg:CCX CC_REG) (const_int 0)])\n \t    (match_operand:SI 1 \"arith_operand\" \"rM\"))]\n   \"TARGET_V9\"\n   \"t%C0\\t%%xcc, %1\"\n@@ -8094,43 +8110,47 @@\n \n (define_insn \"*tldo_ldub1_sp32\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:HI (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:HI\n+\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldub2_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:SI\n+\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsb1_sp32\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:HI (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:HI\n+\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsb2_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:SI\n+\t  (mem:QI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n@@ -8149,65 +8169,71 @@\n \n (define_insn \"*tldo_ldub1_sp64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:HI (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:HI\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldub2_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:SI\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldub3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:DI\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldub\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsb1_sp64\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:HI (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:HI\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsb2_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:SI\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsb3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:DI\n+\t  (mem:QI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldsb\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n@@ -8226,21 +8252,23 @@\n \n (define_insn \"*tldo_lduh1_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:SI\n+\t  (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsh1_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:SI\n+\t  (mem:HI (plus:SI (unspec:SI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:SI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH32\"\n   \"ldsh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n@@ -8259,43 +8287,47 @@\n \n (define_insn \"*tldo_lduh1_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:SI (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:SI\n+\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_lduh2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:DI\n+\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"lduh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsh1_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:SI (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:SI\n+\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldsh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n    (set_attr \"us3load_type\" \"3cycle\")])\n \n (define_insn \"*tldo_ldsh2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:DI\n+\t  (mem:HI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldsh\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n@@ -8323,20 +8355,22 @@\n \n (define_insn \"*tldo_lduw1_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(zero_extend:DI\n+\t  (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t       (match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"lduw\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"load\")])\n \n (define_insn \"*tldo_ldsw1_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n-\t\t\t\t\t\t     (match_operand 3 \"tld_symbolic_operand\" \"\")]\n-\t\t\t\t\t\t    UNSPEC_TLSLDO)\n-\t\t\t\t\t (match_operand:DI 1 \"register_operand\" \"r\")))))]\n+\t(sign_extend:DI\n+\t  (mem:SI (plus:DI (unspec:DI [(match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t\t\t\t(match_operand 3 \"tld_symbolic_operand\" \"\")]\n+\t\t\t\t      UNSPEC_TLSLDO)\n+\t\t\t   (match_operand:DI 1 \"register_operand\" \"r\")))))]\n   \"TARGET_TLS && TARGET_ARCH64\"\n   \"ldsw\\t[%1 + %2], %0, %%tldo_add(%3)\"\n   [(set_attr \"type\" \"sload\")\n@@ -8585,7 +8619,7 @@\n   [(set (match_operand:VM64 0 \"nonimmediate_operand\" \"=e,e,e,*r, f,e,m,m,U,T, o,*r\")\n \t(match_operand:VM64 1 \"input_operand\"         \"Y,C,e, f,*r,m,e,Y,T,U,*r,*r\"))]\n   \"TARGET_VIS\n-   && ! TARGET_ARCH64\n+   && TARGET_ARCH32\n    && (register_operand (operands[0], <VM64:MODE>mode)\n        || register_or_zero_or_all_ones_operand (operands[1], <VM64:MODE>mode))\"\n   \"@\n@@ -8611,9 +8645,9 @@\n         (match_operand:VM64 1 \"register_operand\" \"\"))]\n   \"reload_completed\n    && TARGET_VIS\n-   && ! TARGET_ARCH64\n+   && TARGET_ARCH32\n    && (((REGNO (operands[1]) % 2) != 0)\n-       || ! mem_min_alignment (operands[0], 8))\n+       || !mem_min_alignment (operands[0], 8))\n    && offsettable_memref_p (operands[0])\"\n   [(clobber (const_int 0))]\n {\n@@ -8632,7 +8666,7 @@\n         (match_operand:VM64 1 \"register_operand\" \"\"))]\n   \"reload_completed\n    && TARGET_VIS\n-   && ! TARGET_ARCH64\n+   && TARGET_ARCH32\n    && sparc_split_regreg_legitimate (operands[0], operands[1])\"\n   [(clobber (const_int 0))]\n {\n@@ -8661,7 +8695,7 @@\n   DONE;\n })\n \n-(define_expand \"vec_init<mode>\"\n+(define_expand \"vec_init<VMALL:mode>\"\n   [(match_operand:VMALL 0 \"register_operand\" \"\")\n    (match_operand:VMALL 1 \"\" \"\")]\n   \"TARGET_VIS\"\n@@ -8675,7 +8709,7 @@\n \n (define_mode_iterator VADDSUB [V1SI V2SI V2HI V4HI])\n \n-(define_insn \"<plusminus_insn><mode>3\"\n+(define_insn \"<plusminus_insn><VADDSUB:mode>3\"\n   [(set (match_operand:VADDSUB 0 \"register_operand\" \"=<vconstr>\")\n \t(plusminus:VADDSUB (match_operand:VADDSUB 1 \"register_operand\" \"<vconstr>\")\n \t\t\t   (match_operand:VADDSUB 2 \"register_operand\" \"<vconstr>\")))]\n@@ -8692,7 +8726,7 @@\n (define_code_attr vlinsn [(ior \"or\") (and \"and\") (xor \"xor\")])\n (define_code_attr vlninsn [(ior \"nor\") (and \"nand\") (xor \"xnor\")])\n \n-(define_insn \"<code><mode>3\"\n+(define_insn \"*<vlop:code><VL:mode>3\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n \t(vlop:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\")\n \t\t (match_operand:VL 2 \"register_operand\" \"<vconstr>\")))]\n@@ -8702,7 +8736,7 @@\n    (set_attr \"fptype\" \"<vfptype>\")\n    (set_attr \"v3pipe\" \"true\")])\n \n-(define_insn \"*not_<code><mode>3\"\n+(define_insn \"*not_<vlop:code><VL:mode>3\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n         (not:VL (vlop:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\")\n \t\t\t (match_operand:VL 2 \"register_operand\" \"<vconstr>\"))))]\n@@ -8713,7 +8747,7 @@\n    (set_attr \"v3pipe\" \"true\")])\n \n ;; (ior (not (op1)) (not (op2))) is the canonical form of NAND.\n-(define_insn \"*nand<mode>_vis\"\n+(define_insn \"*nand<VL:mode>_vis\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n \t(ior:VL (not:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\"))\n \t\t(not:VL (match_operand:VL 2 \"register_operand\" \"<vconstr>\"))))]\n@@ -8725,7 +8759,7 @@\n \n (define_code_iterator vlnotop [ior and])\n \n-(define_insn \"*<code>_not1<mode>_vis\"\n+(define_insn \"*<vlnotop:code>_not1<VL:mode>_vis\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n \t(vlnotop:VL (not:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\"))\n \t\t    (match_operand:VL 2 \"register_operand\" \"<vconstr>\")))]\n@@ -8735,7 +8769,7 @@\n    (set_attr \"fptype\" \"<vfptype>\")\n    (set_attr \"v3pipe\" \"true\")])\n \n-(define_insn \"*<code>_not2<mode>_vis\"\n+(define_insn \"*<vlnotop:code>_not2<VL:mode>_vis\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n \t(vlnotop:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\")\n \t\t    (not:VL (match_operand:VL 2 \"register_operand\" \"<vconstr>\"))))]\n@@ -8745,7 +8779,7 @@\n    (set_attr \"fptype\" \"<vfptype>\")\n    (set_attr \"v3pipe\" \"true\")])\n \n-(define_insn \"one_cmpl<mode>2\"\n+(define_insn \"one_cmpl<VL:mode>2\"\n   [(set (match_operand:VL 0 \"register_operand\" \"=<vconstr>\")\n \t(not:VL (match_operand:VL 1 \"register_operand\" \"<vconstr>\")))]\n   \"TARGET_VIS\"\n@@ -8913,7 +8947,7 @@\n   [(set (reg:DI GSR_REG) (match_operand:DI 0 \"arith_operand\" \"\"))]\n   \"TARGET_VIS\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_wrgsr_v8plus (operands[0]));\n       DONE;\n@@ -8929,7 +8963,7 @@\n (define_insn \"wrgsr_v8plus\"\n   [(set (reg:DI GSR_REG) (match_operand:DI 0 \"arith_operand\" \"I,r\"))\n    (clobber (match_scratch:SI 1 \"=X,&h\"))]\n-  \"TARGET_VIS && ! TARGET_ARCH64\"\n+  \"TARGET_VIS && TARGET_ARCH32\"\n {\n   if (GET_CODE (operands[0]) == CONST_INT\n       || sparc_check_64 (operands[0], insn))\n@@ -8944,7 +8978,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\") (reg:DI GSR_REG))]\n   \"TARGET_VIS\"\n {\n-  if (! TARGET_ARCH64)\n+  if (TARGET_ARCH32)\n     {\n       emit_insn (gen_rdgsr_v8plus (operands[0]));\n       DONE;\n@@ -8960,7 +8994,7 @@\n (define_insn \"rdgsr_v8plus\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\") (reg:DI GSR_REG))\n    (clobber (match_scratch:SI 1 \"=&h\"))]\n-  \"TARGET_VIS && ! TARGET_ARCH64\"\n+  \"TARGET_VIS && TARGET_ARCH32\"\n {\n   return \"rd\\t%%gsr, %1\\n\\tsrlx\\t%1, 32, %H0\\n\\tmov %1, %L0\";\n }\n@@ -9110,28 +9144,28 @@\n (define_mode_iterator GCM [V4HI V2SI])\n (define_mode_attr gcm_name [(V4HI \"16\") (V2SI \"32\")])\n \n-(define_insn \"fcmp<code><GCM:gcm_name><P:mode>_vis\"\n+(define_insn \"fcmp<gcond:code><GCM:gcm_name><P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n   \t(unspec:P [(gcond:GCM (match_operand:GCM 1 \"register_operand\" \"e\")\n \t\t              (match_operand:GCM 2 \"register_operand\" \"e\"))]\n \t UNSPEC_FCMP))]\n   \"TARGET_VIS\"\n-  \"fcmp<code><GCM:gcm_name>\\t%1, %2, %0\"\n+  \"fcmp<gcond:code><GCM:gcm_name>\\t%1, %2, %0\"\n   [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"double\")\n    (set_attr \"v3pipe\" \"true\")])\n \n-(define_insn \"fpcmp<code>8<P:mode>_vis\"\n+(define_insn \"fpcmp<gcond:code>8<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n   \t(unspec:P [(gcond:V8QI (match_operand:V8QI 1 \"register_operand\" \"e\")\n \t\t               (match_operand:V8QI 2 \"register_operand\" \"e\"))]\n \t UNSPEC_FCMP))]\n   \"TARGET_VIS4\"\n-  \"fpcmp<code>8\\t%1, %2, %0\"\n+  \"fpcmp<gcond:code>8\\t%1, %2, %0\"\n   [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"double\")])\n \n-(define_expand \"vcond<mode><mode>\"\n+(define_expand \"vcond<GCM:mode><GCM:mode>\"\n   [(match_operand:GCM 0 \"register_operand\" \"\")\n    (match_operand:GCM 1 \"register_operand\" \"\")\n    (match_operand:GCM 2 \"register_operand\" \"\")\n@@ -9140,9 +9174,7 @@\n       (match_operand:GCM 5 \"register_operand\" \"\")])]\n   \"TARGET_VIS3\"\n {\n-  sparc_expand_vcond (<MODE>mode, operands,\n-                      UNSPEC_CMASK<gcm_name>,\n-                      UNSPEC_FCMP);\n+  sparc_expand_vcond (<MODE>mode, operands, UNSPEC_CMASK<gcm_name>, UNSPEC_FCMP);\n   DONE;\n })\n \n@@ -9155,9 +9187,7 @@\n       (match_operand:V8QI 5 \"register_operand\" \"\")])]\n   \"TARGET_VIS3\"\n {\n-  sparc_expand_vcond (V8QImode, operands,\n-                      UNSPEC_CMASK8,\n-                      UNSPEC_FUCMP);\n+  sparc_expand_vcond (V8QImode, operands, UNSPEC_CMASK8, UNSPEC_FUCMP);\n   DONE;\n })\n \n@@ -9247,15 +9277,15 @@\n ;; Unlike constant permutation, we can vastly simplify the compression of\n ;; the 64-bit selector input to the 32-bit %gsr value by knowing what the\n ;; width of the input is.\n-(define_expand \"vec_perm<mode>\"\n+(define_expand \"vec_perm<VM64:mode>\"\n   [(match_operand:VM64 0 \"register_operand\" \"\")\n    (match_operand:VM64 1 \"register_operand\" \"\")\n    (match_operand:VM64 2 \"register_operand\" \"\")\n    (match_operand:VM64 3 \"register_operand\" \"\")]\n   \"TARGET_VIS2\"\n {\n   sparc_expand_vec_perm_bmask (<MODE>mode, operands[3]);\n-  emit_insn (gen_bshuffle<mode>_vis (operands[0], operands[1], operands[2]));\n+  emit_insn (gen_bshuffle<VM64:mode>_vis (operands[0], operands[1], operands[2]));\n   DONE;\n })\n \n@@ -9360,15 +9390,15 @@\n (define_code_attr vis3_shift_patname\n   [(ashift \"ashl\") (ss_ashift \"ssashl\") (lshiftrt \"lshr\") (ashiftrt \"ashr\")])\n    \n-(define_insn \"v<vis3_shift_patname><mode>3\"\n+(define_insn \"v<vis3_shift_patname><GCM:mode>3\"\n   [(set (match_operand:GCM 0 \"register_operand\" \"=<vconstr>\")\n \t(vis3_shift:GCM (match_operand:GCM 1 \"register_operand\" \"<vconstr>\")\n \t\t\t(match_operand:GCM 2 \"register_operand\" \"<vconstr>\")))]\n   \"TARGET_VIS3\"\n   \"<vis3_shift_insn><vbits>\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fga\")])\n \n-(define_insn \"pdistn<mode>_vis\"\n+(define_insn \"pdistn<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n         (unspec:P [(match_operand:V8QI 1 \"register_operand\" \"e\")\n                    (match_operand:V8QI 2 \"register_operand\" \"e\")]\n@@ -9419,7 +9449,7 @@\n (define_code_attr vis3_addsub_ss_patname\n   [(ss_plus \"ssadd\") (ss_minus \"sssub\")])\n \n-(define_insn \"<vis3_addsub_ss_patname><mode>3\"\n+(define_insn \"<vis3_addsub_ss_patname><VASS:mode>3\"\n   [(set (match_operand:VASS 0 \"register_operand\" \"=<vconstr>\")\n         (vis3_addsub_ss:VASS (match_operand:VASS 1 \"register_operand\" \"<vconstr>\")\n                              (match_operand:VASS 2 \"register_operand\" \"<vconstr>\")))]\n@@ -9435,7 +9465,7 @@\n (define_code_attr vis4_minmax_patname\n   [(smin \"min\") (smax \"max\")])\n \n-(define_insn \"<vis4_minmax_patname><mode>3\"\n+(define_insn \"<vis4_minmax_patname><VMMAX:mode>3\"\n   [(set (match_operand:VMMAX 0 \"register_operand\" \"=<vconstr>\")\n         (vis4_minmax:VMMAX (match_operand:VMMAX 1 \"register_operand\" \"<vconstr>\")\n                            (match_operand:VMMAX 2 \"register_operand\" \"<vconstr>\")))]\n@@ -9449,7 +9479,7 @@\n (define_code_attr vis4_uminmax_patname\n  [(umin \"minu\") (umax \"maxu\")])\n \n-(define_insn \"<vis4_uminmax_patname><mode>3\"\n+(define_insn \"<vis4_uminmax_patname><VMMAX:mode>3\"\n   [(set (match_operand:VMMAX 0 \"register_operand\" \"=<vconstr>\")\n         (vis4_uminmax:VMMAX (match_operand:VMMAX 1 \"register_operand\" \"<vconstr>\")\n                             (match_operand:VMMAX 2 \"register_operand\" \"<vconstr>\")))]\n@@ -9474,31 +9504,31 @@\n (define_code_attr vis4_addsub_us_patname\n   [(us_plus \"usadd\") (us_minus \"ussub\")])\n \n-(define_insn \"<vis4_addsub_us_patname><mode>3\"\n+(define_insn \"<vis4_addsub_us_patname><VAUS:mode>3\"\n  [(set (match_operand:VAUS 0 \"register_operand\" \"=<vconstr>\")\n        (vis4_addsub_us:VAUS (match_operand:VAUS 1 \"register_operand\" \"<vconstr>\")\n                             (match_operand:VAUS 2 \"register_operand\" \"<vconstr>\")))]\n  \"TARGET_VIS4\"\n  \"<vis4_addsub_us_insn><vbits>\\t%1, %2, %0\"\n  [(set_attr \"type\" \"fga\")])\n \n-(define_insn \"fucmp<code>8<P:mode>_vis\"\n+(define_insn \"fucmp<gcond:code>8<P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-  \t(unspec:P [(gcond:V8QI (match_operand:V8QI 1 \"register_operand\" \"e\")\n+\t(unspec:P [(gcond:V8QI (match_operand:V8QI 1 \"register_operand\" \"e\")\n \t\t               (match_operand:V8QI 2 \"register_operand\" \"e\"))]\n \t UNSPEC_FUCMP))]\n   \"TARGET_VIS3\"\n-  \"fucmp<code>8\\t%1, %2, %0\"\n+  \"fucmp<gcond:code>8\\t%1, %2, %0\"\n   [(set_attr \"type\" \"visl\")\n    (set_attr \"v3pipe\" \"true\")])\n \n-(define_insn \"fpcmpu<code><GCM:gcm_name><P:mode>_vis\"\n+(define_insn \"fpcmpu<gcond:code><GCM:gcm_name><P:mode>_vis\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-  \t(unspec:P [(gcond:GCM (match_operand:GCM 1 \"register_operand\" \"e\")\n+\t(unspec:P [(gcond:GCM (match_operand:GCM 1 \"register_operand\" \"e\")\n \t\t              (match_operand:GCM 2 \"register_operand\" \"e\"))]\n \t UNSPEC_FUCMP))]\n   \"TARGET_VIS4\"\n-  \"fpcmpu<code><GCM:gcm_name>\\t%1, %2, %0\"\n+  \"fpcmpu<gcond:code><GCM:gcm_name>\\t%1, %2, %0\"\n   [(set_attr \"type\" \"visl\")\n    (set_attr \"fptype\" \"double\")])\n "}]}