{"sha": "b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwZmY4YmJiMzc5ZDdiZTQ2YjNlNTE2ZTAyZTRjOWVkMDhkM2MxNA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2012-05-04T08:03:54Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2012-05-04T08:03:54Z"}, "message": "gcc.c (eval_spec_function): Finalize/restore the current string obstack state as part of the context...\n\n        * gcc.c (eval_spec_function): Finalize/restore the current string\n        obstack state as part of the context push/pop operations.\n\nFrom-SVN: r187146", "tree": {"sha": "85a3a040f1d5a4524635a077278a095151962816", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a3a040f1d5a4524635a077278a095151962816"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b075f09963a9960f9f386a8ec4d6cc41c214f4bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b075f09963a9960f9f386a8ec4d6cc41c214f4bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b075f09963a9960f9f386a8ec4d6cc41c214f4bd"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "7496a50a4cc4187b5ca601f0e38647b6fecdc371", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "patch": "@@ -1,3 +1,8 @@\n+2012-05-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.c (eval_spec_function): Finalize/restore the current string\n+\tobstack state as part of the context push/pop operations.\n+\n 2012-05-04  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR rtl-optimization/52804"}, {"sha": "e152b70539380bd75cbc1837cfba5a098d6793a1", "filename": "gcc/gcc.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "patch": "@@ -5313,6 +5313,8 @@ eval_spec_function (const char *func, const char *args)\n   int save_this_is_linker_script;\n   const char *save_suffix_subst;\n \n+  int save_growing_size;\n+  void *save_growing_value;\n \n   sf = lookup_spec_function (func);\n   if (sf == NULL)\n@@ -5329,6 +5331,18 @@ eval_spec_function (const char *func, const char *args)\n   save_input_from_pipe = input_from_pipe;\n   save_suffix_subst = suffix_subst;\n \n+  /* If we have some object growing now, finalize it so the args and function\n+     eval proceed from a cleared context.  This is needed to prevent the first\n+     constructed arg from mistakenly including the growing value.  We'll push\n+     this value back on the obstack once the function evaluation is done, to\n+     restore a consistent processing context for our caller.  This is fine as\n+     the address of growing objects isn't guaranteed to remain stable until\n+     they are finalized, and we expect this situation to be rare enough for\n+     the extra copy not to be an issue.  */\n+  save_growing_size = obstack_object_size (&obstack);\n+  if (save_growing_size > 0)\n+    save_growing_value = obstack_finish (&obstack);\n+\n   /* Create a new spec processing context, and build the function\n      arguments.  */\n \n@@ -5354,6 +5368,9 @@ eval_spec_function (const char *func, const char *args)\n   input_from_pipe = save_input_from_pipe;\n   suffix_subst = save_suffix_subst;\n \n+  if (save_growing_size > 0)\n+    obstack_grow (&obstack, save_growing_value, save_growing_size);\n+\n   return funcval;\n }\n "}]}