{"sha": "4b16f9c8759e30a946ef32a79de671ed6460f2bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxNmY5Yzg3NTllMzBhOTQ2ZWYzMmE3OWRlNjcxZWQ2NDYwZjJiYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-04T17:12:32Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-04T17:12:32Z"}, "message": "re PR c++/56464 ([C++11] Crashes when using implicit this in a lambda capture in member initializer)\n\n\tPR c++/56464\n\tPR c++/54383\n\t* semantics.c (lambda_expr_this_capture): Handle NSDMI\n\tand non-class scopes.\n\nFrom-SVN: r196437", "tree": {"sha": "f219827cc3d7fcd6a15fc7a47f06fb52d179ad5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f219827cc3d7fcd6a15fc7a47f06fb52d179ad5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b16f9c8759e30a946ef32a79de671ed6460f2bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b16f9c8759e30a946ef32a79de671ed6460f2bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b16f9c8759e30a946ef32a79de671ed6460f2bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b16f9c8759e30a946ef32a79de671ed6460f2bb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0388c91350e82bf7ad3738566b7d084a3e5e5691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0388c91350e82bf7ad3738566b7d084a3e5e5691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0388c91350e82bf7ad3738566b7d084a3e5e5691"}], "stats": {"total": 84, "additions": 63, "deletions": 21}, "files": [{"sha": "8243e67b30d00d5473cf30e0cef2da83bb97ac90", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b16f9c8759e30a946ef32a79de671ed6460f2bb", "patch": "@@ -1,3 +1,10 @@\n+2013-03-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/56464\n+\tPR c++/54383\n+\t* semantics.c (lambda_expr_this_capture): Handle NSDMI\n+\tand non-class scopes.\n+\n 2013-03-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokdeclarator): Remove dead code."}, {"sha": "ab3d16ea3b805e677c1c75d55130a2f9d4fa71ed", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 42, "deletions": 21, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4b16f9c8759e30a946ef32a79de671ed6460f2bb", "patch": "@@ -9442,41 +9442,62 @@ lambda_expr_this_capture (tree lambda)\n   if (!this_capture\n       && LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) != CPLD_NONE)\n     {\n-      tree containing_function = TYPE_CONTEXT (LAMBDA_EXPR_CLOSURE (lambda));\n-      tree lambda_stack = tree_cons (NULL_TREE, lambda, NULL_TREE);\n+      tree lambda_stack = NULL_TREE;\n       tree init = NULL_TREE;\n \n       /* If we are in a lambda function, we can move out until we hit:\n-           1. a non-lambda function,\n+           1. a non-lambda function or NSDMI,\n            2. a lambda function capturing 'this', or\n            3. a non-default capturing lambda function.  */\n-      while (LAMBDA_FUNCTION_P (containing_function))\n-        {\n-          tree lambda\n-            = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (containing_function));\n+      for (tree tlambda = lambda; ;)\n+\t{\n+          lambda_stack = tree_cons (NULL_TREE,\n+                                    tlambda,\n+                                    lambda_stack);\n \n-          if (LAMBDA_EXPR_THIS_CAPTURE (lambda))\n+\t  if (LAMBDA_EXPR_EXTRA_SCOPE (tlambda)\n+\t      && TREE_CODE (LAMBDA_EXPR_EXTRA_SCOPE (tlambda)) == FIELD_DECL)\n \t    {\n-\t      /* An outer lambda has already captured 'this'.  */\n-\t      init = LAMBDA_EXPR_THIS_CAPTURE (lambda);\n+\t      /* In an NSDMI, we don't have a function to look up the decl in,\n+\t\t but the fake 'this' pointer that we're using for parsing is\n+\t\t in scope_chain.  */\n+\t      init = scope_chain->x_current_class_ptr;\n+\t      gcc_checking_assert\n+\t\t(init && (TREE_TYPE (TREE_TYPE (init))\n+\t\t\t  == current_nonlambda_class_type ()));\n \t      break;\n \t    }\n \n-\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (lambda) == CPLD_NONE)\n-\t    /* An outer lambda won't let us capture 'this'.  */\n+\t  tree closure_decl = TYPE_NAME (LAMBDA_EXPR_CLOSURE (tlambda));\n+\t  tree containing_function = decl_function_context (closure_decl);\n+\n+\t  if (containing_function == NULL_TREE)\n+\t    /* We ran out of scopes; there's no 'this' to capture.  */\n \t    break;\n \n-          lambda_stack = tree_cons (NULL_TREE,\n-                                    lambda,\n-                                    lambda_stack);\n+\t  if (!LAMBDA_FUNCTION_P (containing_function))\n+\t    {\n+\t      /* We found a non-lambda function.  */\n+\t      if (DECL_NONSTATIC_MEMBER_FUNCTION_P (containing_function))\n+\t\t/* First parameter is 'this'.  */\n+\t\tinit = DECL_ARGUMENTS (containing_function);\n+\t      break;\n+\t    }\n \n-          containing_function = decl_function_context (containing_function);\n-        }\n+\t  tlambda\n+            = CLASSTYPE_LAMBDA_EXPR (DECL_CONTEXT (containing_function));\n \n-      if (!init && DECL_NONSTATIC_MEMBER_FUNCTION_P (containing_function)\n-\t  && !LAMBDA_FUNCTION_P (containing_function))\n-\t/* First parameter is 'this'.  */\n-\tinit = DECL_ARGUMENTS (containing_function);\n+          if (LAMBDA_EXPR_THIS_CAPTURE (tlambda))\n+\t    {\n+\t      /* An outer lambda has already captured 'this'.  */\n+\t      init = LAMBDA_EXPR_THIS_CAPTURE (tlambda);\n+\t      break;\n+\t    }\n+\n+\t  if (LAMBDA_EXPR_DEFAULT_CAPTURE_MODE (tlambda) == CPLD_NONE)\n+\t    /* An outer lambda won't let us capture 'this'.  */\n+\t    break;\n+\t}\n \n       if (init)\n \tthis_capture = add_default_capture (lambda_stack,"}, {"sha": "94dc254fd7c09c5134b338236646a7f50ef353bf", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-nsdmi1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-nsdmi1.C?ref=4b16f9c8759e30a946ef32a79de671ed6460f2bb", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/56464\n+// { dg-do run { target c++11 } }\n+\n+struct bug { bug*a = [&]{ return [=]{return this;}(); }(); };\n+int main()\n+{\n+  bug b;\n+  if (b.a != &b)\n+    __builtin_abort ();\n+}"}, {"sha": "b4b8e7201aabadc4aa6eb7a6a6937481cfe09be5", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-this10.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b16f9c8759e30a946ef32a79de671ed6460f2bb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-this10.C?ref=4b16f9c8759e30a946ef32a79de671ed6460f2bb", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/54383\n+// { dg-do compile { target c++11 } }\n+\n+auto foo = [&](int a) { return a > this->b; }; // { dg-error \"this\" }"}]}