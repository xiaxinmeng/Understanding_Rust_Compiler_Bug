{"sha": "5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1M2JmZWQ0ODRiOTMzNjliNDJmYmY4YzFlNzc1MGZmM2NhNWY4NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-01-29T09:25:14Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-01-29T09:25:14Z"}, "message": "re PR c++/69509 (infinite loop compiling a VLA in a recursive constexpr function)\n\n\tPR c++/69509\n\tPR c++/69516\n\t* constexpr.c (cxx_eval_array_reference): Give the \"array subscript\n\tout of bound\" error earlier.\n\t* init.c (build_vec_init): Change NE_EXPR into GT_EXPR.  Update the\n\tcommentary.\n\n\t* g++.dg/ext/constexpr-vla2.C: New test.\n\t* g++.dg/ext/constexpr-vla3.C: New test.\n\t* g++.dg/ubsan/vla-1.C: Remove dg-shouldfail.\n\nFrom-SVN: r232969", "tree": {"sha": "eafb02c3b10525280e4825fa8103c05dc0a2a8a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eafb02c3b10525280e4825fa8103c05dc0a2a8a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "452ec2a5ec2e84bd6f469afb43b0928361d1710f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/452ec2a5ec2e84bd6f469afb43b0928361d1710f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/452ec2a5ec2e84bd6f469afb43b0928361d1710f"}], "stats": {"total": 112, "additions": 81, "deletions": 31}, "files": [{"sha": "6c66cc4747ac4a832c9905aff4b1a29526ea698d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -1,3 +1,12 @@\n+2016-01-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/69509\n+\tPR c++/69516\n+\t* constexpr.c (cxx_eval_array_reference): Give the \"array subscript\n+\tout of bound\" error earlier.\n+\t* init.c (build_vec_init): Change NE_EXPR into GT_EXPR.  Update the\n+\tcommentary.\n+\n 2016-01-29  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* name-lookup.c (begin_scope): After reusing a cp_binding_level"}, {"sha": "b0769914d452feef4e586dce552c793b7a67cd29", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -1833,6 +1833,19 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n       return t;\n     }\n \n+  tree nelts = array_type_nelts_top (TREE_TYPE (ary));\n+  /* For VLAs, the number of elements won't be an integer constant.  */\n+  nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n+\t\t\t\t\toverflow_p);\n+  VERIFY_CONSTANT (nelts);\n+  if (!tree_int_cst_lt (index, nelts))\n+    {\n+      if (!ctx->quiet)\n+\terror (\"array subscript out of bound\");\n+      *non_constant_p = true;\n+      return t;\n+    }\n+\n   bool found;\n   if (TREE_CODE (ary) == CONSTRUCTOR)\n     {\n@@ -1846,37 +1859,23 @@ cxx_eval_array_reference (const constexpr_ctx *ctx, tree t,\n \n   if (!found)\n     {\n-      tree nelts = array_type_nelts_top (TREE_TYPE (ary));\n-      /* For VLAs, the number of elements won't be an integer constant.  */\n-      nelts = cxx_eval_constant_expression (ctx, nelts, false, non_constant_p,\n-\t\t\t\t\t    overflow_p);\n-      VERIFY_CONSTANT (nelts);\n-      if (tree_int_cst_lt (index, nelts))\n+      if (TREE_CODE (ary) == CONSTRUCTOR\n+\t  && CONSTRUCTOR_NO_IMPLICIT_ZERO (ary))\n \t{\n-\t  if (TREE_CODE (ary) == CONSTRUCTOR\n-\t      && CONSTRUCTOR_NO_IMPLICIT_ZERO (ary))\n-\t    {\n-\t      /* 'ary' is part of the aggregate initializer we're currently\n-\t\t building; if there's no initializer for this element yet,\n-\t\t that's an error. */\n-\t      if (!ctx->quiet)\n-\t\terror (\"accessing uninitialized array element\");\n-\t      *non_constant_p = true;\n-\t      return t;\n-\t    }\n-\n-\t  /* If it's within the array bounds but doesn't have an explicit\n-\t     initializer, it's value-initialized.  */\n-\t  tree val = build_value_init (elem_type, tf_warning_or_error);\n-\t  return cxx_eval_constant_expression (ctx, val,\n-\t\t\t\t\t       lval,\n-\t\t\t\t\t       non_constant_p, overflow_p);\n+\t  /* 'ary' is part of the aggregate initializer we're currently\n+\t     building; if there's no initializer for this element yet,\n+\t     that's an error.  */\n+\t  if (!ctx->quiet)\n+\t    error (\"accessing uninitialized array element\");\n+\t  *non_constant_p = true;\n+\t  return t;\n \t}\n \n-      if (!ctx->quiet)\n-\terror (\"array subscript out of bound\");\n-      *non_constant_p = true;\n-      return t;\n+      /* If it's within the array bounds but doesn't have an explicit\n+\t initializer, it's value-initialized.  */\n+      tree val = build_value_init (elem_type, tf_warning_or_error);\n+      return cxx_eval_constant_expression (ctx, val, lval, non_constant_p,\n+\t\t\t\t\t   overflow_p);\n     }\n \n   if (TREE_CODE (ary) == CONSTRUCTOR)"}, {"sha": "976ada84587752585ec84b1064733832c6cfac7f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -4008,15 +4008,15 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t\t&& (num_initialized_elts\n \t\t    == tree_to_shwi (maxindex) + 1))))\n     {\n-      /* If the ITERATOR is equal to -1, then we don't have to loop;\n+      /* If the ITERATOR is lesser or equal to -1, then we don't have to loop;\n \t we've already initialized all the elements.  */\n       tree for_stmt;\n       tree elt_init;\n       tree to;\n \n       for_stmt = begin_for_stmt (NULL_TREE, NULL_TREE);\n       finish_for_init_stmt (for_stmt);\n-      finish_for_cond (build2 (NE_EXPR, boolean_type_node, iterator,\n+      finish_for_cond (build2 (GT_EXPR, boolean_type_node, iterator,\n \t\t\t       build_int_cst (TREE_TYPE (iterator), -1)),\n \t\t       for_stmt, false);\n       elt_init = cp_build_unary_op (PREDECREMENT_EXPR, iterator, 0,"}, {"sha": "c20ea73f52ff314009fd99a56c8536147d500ca8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -1,3 +1,11 @@\n+2016-01-29  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/69509\n+\tPR c++/69516\n+\t* g++.dg/ext/constexpr-vla2.C: New test.\n+\t* g++.dg/ext/constexpr-vla3.C: New test.\n+\t* g++.dg/ubsan/vla-1.C: Remove dg-shouldfail.\n+\n 2016-01-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/69537"}, {"sha": "6cb1f708a238d23eca56f72ec8e6d49904f81942", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla2.C?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/69509\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+fn_bad (int n)\n+{\n+  __extension__ int a [n] = { 0 };\n+  int z = a [0] + (n ? fn_bad (n - 1) : 0);\n+  return z;\n+}\n+\n+constexpr int\n+fn_ok (int n)\n+{\n+  __extension__ int a [n] = { 0 };\n+  int z = a [0] + (n > 1 ? fn_ok (n - 1) : 0);\n+  return z;\n+}\n+\n+constexpr int i1 = fn_ok (3);\n+constexpr int i2 = fn_bad (3); // { dg-error \"array subscript out of bound\" }"}, {"sha": "ba4eb50f5de5fda146adc1ffb8ff4e4e94ab5eec", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla3.C?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/69516\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo (int n)\n+{\n+  __extension__ int a[n] = { 1, 2, 3, 4, 5, 6 };\n+  int z = 0;\n+  for (int i = 0; i <= n; ++i)\n+    z += a[i];\n+  return z;\n+}\n+\n+constexpr int n = foo (3); // { dg-error \"array subscript out of bound\" }"}, {"sha": "311cdb1d77a740e81ff245adb809437052603eca", "filename": "gcc/testsuite/g++.dg/ubsan/vla-1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5453bfed484b93369b42fbf8c1e7750ff3ca5f85/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvla-1.C?ref=5453bfed484b93369b42fbf8c1e7750ff3ca5f85", "patch": "@@ -1,6 +1,5 @@\n // { dg-do run }\n // { dg-options \"-Wno-vla -fsanitize=undefined\" }\n-// { dg-shouldfail \"ubsan\" }\n // { dg-output \"index 1 out of bounds\" }\n \n void f(int i) {"}]}