{"sha": "d9082b50a98168b766cfc5136f50a3497c14897d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkwODJiNTBhOTgxNjhiNzY2Y2ZjNTEzNmY1MGEzNDk3YzE0ODk3ZA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-17T08:01:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-17T08:01:46Z"}, "message": "Merge #631\n\n631: Use builtin bool instead of creating new bool types for ComparisonExpr r=dkm a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000141.html \r\n\r\n> The TypeCheckExpr creates a new TyTy::BoolType for a\r\n> ComparisonExpr. This new BoolType is unknown to TyTyResolveCompile\r\n> which causes a crash when trying to compile the inferred new\r\n> BoolType. Resolve this by looking up the builtin bool type.\r\n> The new \"bools_eq.rs\" testcase uses several bools which show\r\n> this issue.\r\n> \r\n> Also the lhs and rhs types need to be compatible, but don't\r\n> need to be bool type themselves. So don't append the reference\r\n> to the inferred type. The existing \"ifunaryexpr.rs\" testcase\r\n> will fail without this fix.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>", "tree": {"sha": "43d75121ca9c9b69b3baf9ca04271d39b73e3b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d75121ca9c9b69b3baf9ca04271d39b73e3b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9082b50a98168b766cfc5136f50a3497c14897d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhG2zqCRBK7hj4Ov3rIwAAPygIAHiGk5DWmizmJ07e3QlQQxlG\nY+bZv48ww0q0x5zGqLOjYAtKhBE8qg7jCZ55oHLq/GPvVblylDBXP1I8rnzy/6Bt\nomT52A09NVxjNs+DrnvoDpFSuW/ZQC+8xjk9K6Ck4JP71D/WjGwO7wloeugrz/lk\nwpsufTYI2i8O02krReW8sSP7CECw/DcvtZItElQsuKMi8A83Af7ETMAbiMjL+SYQ\nDijEWMGy4+e+jCqCG2N9CeKOq8AcAvqp00jBbzhlA37eSozvBWlCc4KL/RM0nDCR\n02XeWRY/sXsLZY6Z9wUq7CMYKEI1M3wcLdTQgjXNgbWjMuHYlupwZpq71KbVDxA=\n=tlMI\n-----END PGP SIGNATURE-----\n", "payload": "tree 43d75121ca9c9b69b3baf9ca04271d39b73e3b0b\nparent 52c1cdc9c63baeb090680daf6762c02362f2c6cd\nparent 5b229ddbf41c9e74fcce930c26101c1d34a5c9d1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629187306 +0000\ncommitter GitHub <noreply@github.com> 1629187306 +0000\n\nMerge #631\n\n631: Use builtin bool instead of creating new bool types for ComparisonExpr r=dkm a=dkm\n\nFrom Mark Wielaard : https://gcc.gnu.org/pipermail/gcc-rust/2021-August/000141.html \r\n\r\n> The TypeCheckExpr creates a new TyTy::BoolType for a\r\n> ComparisonExpr. This new BoolType is unknown to TyTyResolveCompile\r\n> which causes a crash when trying to compile the inferred new\r\n> BoolType. Resolve this by looking up the builtin bool type.\r\n> The new \"bools_eq.rs\" testcase uses several bools which show\r\n> this issue.\r\n> \r\n> Also the lhs and rhs types need to be compatible, but don't\r\n> need to be bool type themselves. So don't append the reference\r\n> to the inferred type. The existing \"ifunaryexpr.rs\" testcase\r\n> will fail without this fix.\n\nCo-authored-by: Mark Wielaard <mark@klomp.org>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9082b50a98168b766cfc5136f50a3497c14897d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9082b50a98168b766cfc5136f50a3497c14897d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9082b50a98168b766cfc5136f50a3497c14897d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c1cdc9c63baeb090680daf6762c02362f2c6cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c1cdc9c63baeb090680daf6762c02362f2c6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c1cdc9c63baeb090680daf6762c02362f2c6cd"}, {"sha": "5b229ddbf41c9e74fcce930c26101c1d34a5c9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b229ddbf41c9e74fcce930c26101c1d34a5c9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b229ddbf41c9e74fcce930c26101c1d34a5c9d1"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "a833822e9b3d111078f19b8751f5376d6d9f4b4b", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9082b50a98168b766cfc5136f50a3497c14897d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9082b50a98168b766cfc5136f50a3497c14897d/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=d9082b50a98168b766cfc5136f50a3497c14897d", "patch": "@@ -630,10 +630,8 @@ class TypeCheckExpr : public TypeCheckBase\n     if (result == nullptr || result->get_kind () == TyTy::TypeKind::ERROR)\n       return;\n \n-    // we expect this to be\n-    infered = new TyTy::BoolType (expr.get_mappings ().get_hirid ());\n-    infered->append_reference (lhs->get_ref ());\n-    infered->append_reference (rhs->get_ref ());\n+    bool ok = context->lookup_builtin (\"bool\", &infered);\n+    rust_assert (ok);\n   }\n \n   void visit (HIR::LazyBooleanExpr &expr) override"}, {"sha": "965127b5d542d1dec031872b72d3215de951f7b6", "filename": "gcc/testsuite/rust/compile/torture/bools_eq.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9082b50a98168b766cfc5136f50a3497c14897d/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbools_eq.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9082b50a98168b766cfc5136f50a3497c14897d/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbools_eq.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fbools_eq.rs?ref=d9082b50a98168b766cfc5136f50a3497c14897d", "patch": "@@ -0,0 +1,18 @@\n+extern \"C\"\n+{\n+  fn abort ();\n+}\n+\n+fn beq (a: bool, b: bool) -> bool\n+{\n+  let bools_eq = a == b;\n+  bools_eq\n+}\n+\n+pub fn main ()\n+{\n+  let a = true;\n+  let b = false;\n+  let r = beq (a, b);\n+  if r { unsafe { abort (); } }\n+}"}]}