{"sha": "7421802276e737c2da297599121480833db92de9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyMTgwMjI3NmU3MzdjMmRhMjk3NTk5MTIxNDgwODMzZGI5MmRlOQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-25T09:23:24Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-26T08:03:55Z"}, "message": "d: Use read() to load contents of stdin into memory.\n\nThis would be an improvement over reading one character at a time.\n\nAn ICE was discovered when mixing reading from stdin with `-v', this has been\nfixed in upstream DMD and backported as well.\n\nReviewed-on: https://github.com/dlang/dmd/pull/11620\n\ngcc/d/ChangeLog:\n\n\t* d-lang.cc (d_parse_file): Use read() to load contents from stdin,\n\tallow the front-end to free the memory after parsing.\n\t* dmd/MERGE: Merge upstream dmd 2cc25c219.", "tree": {"sha": "cd6cbc5a311c559679c6d3743940a6fb4a6ffc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd6cbc5a311c559679c6d3743940a6fb4a6ffc9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7421802276e737c2da297599121480833db92de9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7421802276e737c2da297599121480833db92de9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7421802276e737c2da297599121480833db92de9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7421802276e737c2da297599121480833db92de9/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db88844a22f75b13ced224415f645680784d354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db88844a22f75b13ced224415f645680784d354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db88844a22f75b13ced224415f645680784d354"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "c5254a02446d1d8d9d13d70c1753c88d44574c71", "filename": "gcc/d/d-lang.cc", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7421802276e737c2da297599121480833db92de9/gcc%2Fd%2Fd-lang.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7421802276e737c2da297599121480833db92de9/gcc%2Fd%2Fd-lang.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-lang.cc?ref=7421802276e737c2da297599121480833db92de9", "patch": "@@ -906,32 +906,43 @@ d_parse_file (void)\n     {\n       if (strcmp (in_fnames[i], \"-\") == 0)\n \t{\n-\t  /* Handling stdin, generate a unique name for the module.  */\n-\t  obstack buffer;\n-\t  gcc_obstack_init (&buffer);\n-\t  int c;\n+\t  /* Load the entire contents of stdin into memory.  8 kilobytes should\n+\t     be a good enough initial size, but double on each iteration.\n+\t     16 bytes are added for the final '\\n' and 15 bytes of padding.  */\n+\t  ssize_t size = 8 * 1024;\n+\t  uchar *buffer = XNEWVEC (uchar, size + 16);\n+\t  ssize_t len = 0;\n+\t  ssize_t count;\n+\n+\t  while ((count = read (STDIN_FILENO, buffer + len, size - len)) > 0)\n+\t    {\n+\t      len += count;\n+\t      if (len == size)\n+\t\t{\n+\t\t  size *= 2;\n+\t\t  buffer = XRESIZEVEC (uchar, buffer, size + 16);\n+\t\t}\n+\t    }\n \n+\t  if (count < 0)\n+\t    {\n+\t      error (Loc (\"stdin\", 0, 0), \"%s\", xstrerror (errno));\n+\t      free (buffer);\n+\t      continue;\n+\t    }\n+\n+\t  /* Handling stdin, generate a unique name for the module.  */\n \t  Module *m = Module::create (in_fnames[i],\n \t\t\t\t      Identifier::generateId (\"__stdin\"),\n \t\t\t\t      global.params.doDocComments,\n \t\t\t\t      global.params.doHdrGeneration);\n \t  modules.push (m);\n \n-\t  /* Load the entire contents of stdin into memory.  */\n-\t  while ((c = getc (stdin)) != EOF)\n-\t    obstack_1grow (&buffer, c);\n-\n-\t  if (!obstack_object_size (&buffer))\n-\t    obstack_1grow (&buffer, '\\0');\n-\n \t  /* Overwrite the source file for the module, the one created by\n \t     Module::create would have a forced a `.d' suffix.  */\n \t  m->srcfile = File::create (\"<stdin>\");\n-\t  m->srcfile->len = obstack_object_size (&buffer);\n-\t  m->srcfile->buffer = (unsigned char *) obstack_finish (&buffer);\n-\n-\t  /* Tell the front-end not to free the buffer after parsing.  */\n-\t  m->srcfile->ref = 1;\n+\t  m->srcfile->len = len;\n+\t  m->srcfile->buffer = buffer;\n \t}\n       else\n \t{"}, {"sha": "8445bfaf343365f1e32da5db28d873d9e72f1927", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7421802276e737c2da297599121480833db92de9/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7421802276e737c2da297599121480833db92de9/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=7421802276e737c2da297599121480833db92de9", "patch": "@@ -1,4 +1,4 @@\n-1b5a53d01c465109ce47edf49ace6143b69b118b\n+2cc25c2191928f865e1b711f30b6a4268d6a0d9a\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "30ba8dd93be95c3c0c05d29256cc823aa9285ea1", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7421802276e737c2da297599121480833db92de9/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7421802276e737c2da297599121480833db92de9/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=7421802276e737c2da297599121480833db92de9", "patch": "@@ -1212,8 +1212,9 @@ void FuncDeclaration::semantic(Scope *sc)\n         if (type && mod)\n         {\n             printedMain = true;\n-            const char *name = FileName::searchPath(global.path, mod->srcfile->toChars(), true);\n-            message(\"entry     %-10s\\t%s\", type, name);\n+            const char *name = mod->srcfile->toChars();\n+            const char *path = FileName::searchPath(global.path, name, true);\n+            message(\"entry     %-10s\\t%s\", type, path ? path : name);\n         }\n     }\n "}]}