{"sha": "ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2NkZjFhNDZlZTRhMzQyNWJlZTE2MDJjY2Y3NThhMmJiOTM2NDU3MQ==", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@redhat.com", "date": "2003-11-18T01:36:56Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@gcc.gnu.org", "date": "2003-11-18T01:36:56Z"}, "message": "BasicDefaults.java: Rewrite to spec.\n\n2003-11-17  Graydon Hoare  <graydon@redhat.com>\n\n\t* javax/swing/plaf/basic/BasicDefaults.java: Rewrite to spec.\n\t* javax/swing/UIDefaults.java: Modify to reflect rewrite.\n\nFrom-SVN: r73688", "tree": {"sha": "ec4cd3232c9ce2ab328e590c5edbc47051ec3de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4cd3232c9ce2ab328e590c5edbc47051ec3de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/comments", "author": null, "committer": null, "parents": [{"sha": "628b6e8cc11bf9e24e18f895eabf5cf7ec65c871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/628b6e8cc11bf9e24e18f895eabf5cf7ec65c871", "html_url": "https://github.com/Rust-GCC/gccrs/commit/628b6e8cc11bf9e24e18f895eabf5cf7ec65c871"}], "stats": {"total": 394, "additions": 312, "deletions": 82}, "files": [{"sha": "3dcb93016e43aac1a5e278f44e0ed9d5f5207f20", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "patch": "@@ -1,3 +1,8 @@\n+2003-11-17  Graydon Hoare  <graydon@redhat.com>\n+\n+\t* javax/swing/plaf/basic/BasicDefaults.java: Rewrite to spec.\n+\t* javax/swing/UIDefaults.java: Modify to reflect rewrite.\n+\n 2003-11-16  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/13062:"}, {"sha": "f1f99646adf3cc04767325c628c60653e5bc1043", "filename": "libjava/javax/swing/UIDefaults.java", "status": "modified", "additions": 287, "deletions": 62, "changes": 349, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/libjava%2Fjavax%2Fswing%2FUIDefaults.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FUIDefaults.java?ref=ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "patch": "@@ -41,9 +41,20 @@\n import java.awt.Dimension;\n import java.awt.Font;\n import java.awt.Insets;\n+import java.beans.PropertyChangeEvent;\n import java.beans.PropertyChangeListener;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Constructor;\n import java.util.Hashtable;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.LinkedList;\n import java.util.Locale;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n import javax.swing.border.Border;\n import javax.swing.plaf.ComponentUI;\n \n@@ -56,19 +67,32 @@\n  */\n public class UIDefaults extends Hashtable\n {\n+\n+  LinkedList bundles;\n+  Set listeners;\n+  Locale defaultLocale;\n+\n   interface ActiveValue\n   {\n     Object createValue(UIDefaults table);\n   } // interface ActiveValue\n \n   public static class LazyInputMap implements LazyValue\n   {\n-    public LazyInputMap(Object[] bindings)\n+    Object[] bind;\n+    public LazyInputMap (Object[] bindings)\n     {\n+      bind = bindings;\n     }\n-    public Object createValue(UIDefaults table)\n+    public Object createValue (UIDefaults table)\n     {\n-      throw new Error(\"not implemented\");\n+      InputMap im = new InputMap ();\n+      for (int i = 0; 2*i+1 < bind.length; ++i)\n+        {\n+          im.put (KeyStroke.getKeyStroke ((String) bind[2*i]),\n+                  bind[2*i+1]);\n+        }\n+      return im;\n     }\n   } // class LazyInputMap\n \n@@ -79,135 +103,287 @@ public Object createValue(UIDefaults table)\n \n   public static class ProxyLazyValue implements LazyValue\n   {\n-    public ProxyLazyValue(String s)\n+    LazyValue inner;\n+    public ProxyLazyValue (String s)\n     {\n-      throw new Error(\"not implemented\");\n+      final String className = s;\n+      inner = new LazyValue ()\n+        { \n+          public Object createValue (UIDefaults table) \n+          {\n+            try\n+              {\n+                return Class\n+                  .forName (className)\n+                  .getConstructor (new Class[] {})\n+                  .newInstance (new Object[] {});\n+              }\n+            catch (Exception e)\n+              {\n+                return null;\n+              }\n+          }\n+        };\n     }\n-    public ProxyLazyValue(String c, String m)\n+\n+    public ProxyLazyValue (String c, String m)\n     {\n-      throw new Error(\"not implemented\");\n+      final String className = c;\n+      final String methodName = m;\n+      inner = new LazyValue ()\n+        { \n+          public Object createValue (UIDefaults table) \n+          {\n+            try \n+              {                \n+                return Class\n+                  .forName (className)\n+                  .getMethod (methodName, new Class[] {})\n+                  .invoke (null, new Object[] {});\n+              }\n+            catch (Exception e)\n+              {\n+                return null;\n+              }\n+          }\n+        };\n     }\n-    public ProxyLazyValue(String c, Object[] o)\n+    \n+    public ProxyLazyValue (String c, Object[] os)\n     {\n-      throw new Error(\"not implemented\");\n+      final String className = c;\n+      final Object[] objs = os;\n+      final Class[] clss = new Class[objs.length];\n+      for (int i = 0; i < objs.length; ++i)\n+        {\n+          clss[i] = objs[i].getClass ();\n+        }      \n+      inner = new LazyValue ()\n+        { \n+          public Object createValue (UIDefaults table) \n+          {            \n+            try\n+              {\n+                return Class\n+                  .forName (className)\n+                  .getConstructor (clss)\n+                  .newInstance (objs);\n+              }\n+            catch (Exception e)\n+              {\n+                return null;\n+              }\n+          }\n+        };\n     }\n-    public ProxyLazyValue(String c, String m, Object[] o)\n+\n+    public ProxyLazyValue (String c, String m, Object[] os)\n     {\n-      throw new Error(\"not implemented\");\n+      final String className = c;\n+      final String methodName = m;\n+      final Object[] objs = os;\n+      final Class[] clss = new Class[objs.length];\n+      for (int i = 0; i < objs.length; ++i)\n+        {\n+          clss[i] = objs[i].getClass ();\n+        }      \n+      inner = new LazyValue ()\n+        { \n+          public Object createValue (UIDefaults table) \n+          {            \n+            try \n+              {\n+                return Class\n+                  .forName (className)\n+                  .getMethod (methodName, clss)\n+                  .invoke (null, objs);\n+              }\n+            catch (Exception e)\n+              {\n+                return null;\n+              }\n+          }\n+        };\n     }\n-    public Object createValue(UIDefaults table)\n+    \n+    public Object createValue (UIDefaults table)\n     {\n-      throw new Error(\"not implemented\");\n+      return inner.createValue (table);\n     }\n   } // class ProxyLazyValue\n \n   private static final long serialVersionUID = 7341222528856548117L;\n \n-  public UIDefaults()\n+  public UIDefaults ()\n   {\n+    bundles = new LinkedList ();\n+    listeners = new HashSet ();\n+    defaultLocale = Locale.getDefault ();\n   }\n \n-  public UIDefaults(Object[] entries)\n+  public UIDefaults (Object[] entries)\n   {\n-    // XXX\n+    bundles = new LinkedList ();\n+    listeners = new HashSet ();\n+    defaultLocale = Locale.getDefault ();\n+\n+    for (int i = 0; (2*i+1) < entries.length; ++i)\n+      {\n+        put (entries[2*i], entries[2*i+1]);\n+      }\n   }\n \n-  public Object get(Object key)\n+  public Object get (Object key)\n   {\n-    // XXX Obey 1.4 specs\n-    return super.get(key);\n+    return this.get (key, getDefaultLocale ());\n   }\n \n-  public Object get(Object key, Locale l)\n+  public Object get (Object key, Locale loc)\n   {\n-    throw new Error(\"not implemented\");\n+    Object obj = null;\n+\n+    if (super.containsKey (key))\n+      {\n+        obj = super.get (key);\n+      }\n+    else if (key instanceof String)\n+      {\n+        String keyString = (String) key;\n+        ListIterator i = bundles.listIterator (0);\n+        while (i.hasNext ())\n+          {\n+            String bundle_name = (String) i.next ();\n+            ResourceBundle res =\n+              ResourceBundle.getBundle (bundle_name, loc);\n+            if (res != null)\n+              {\n+                try \n+                  {                    \n+                    obj = res.getObject (keyString);\n+                    break;\n+                  }\n+                catch (MissingResourceException me)\n+                  {\n+                    // continue, this bundle has no such key\n+                  }\n+              }\n+          }\n+      }\n+\n+    // now we've found the object, resolve it.\n+    // nb: LazyValues aren't supported in resource bundles, so it's correct\n+    // to insert their results in the locale-less hashtable.\n+\n+    if (obj == null)\n+      return null;\n+\n+    if (obj instanceof LazyValue)\n+      {\n+        Object resolved = ((LazyValue)obj).createValue (this);\n+        super.remove (key);\n+        super.put (key, resolved);\n+        return resolved;\n+      }\n+    else if (obj instanceof ActiveValue)\n+      {\n+        return ((ActiveValue)obj).createValue (this);\n+      }    \n+\n+    return obj;\n   }\n \n   public Object put(Object key, Object value)\n   {\n-    throw new Error(\"not implemented\");\n+    Object old = super.put (key, value);\n+    if (key instanceof String && old != value)\n+      firePropertyChange ((String) key, old, value);\n+    return old;\n   }\n \n-  public void putDefaults(Object[] list)\n+  public void putDefaults(Object[] entries)\n   {\n-    throw new Error(\"not implemented\");\n+    for (int i = 0; (2*i+1) < entries.length; ++i)\n+      {\n+        super.put (entries[2*i], entries[2*i+1]);\n+      }\n+    firePropertyChange (\"UIDefaults\", null, null);\n   }\n \n   public Font getFont(Object key)\n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Font ? (Font) o : null;\n   }\n \n   public Font getFont(Object key, Locale l)\n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Font ? (Font) o : null;\n   }\n \n   public Color getColor(Object key)\n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Color ? (Color) o : null;\n   }\n \n   public Color getColor(Object key, Locale l)\n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Color ? (Color) o : null;\n   }\n \n   public Icon getIcon(Object key)\n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Icon ? (Icon) o : null;\n   }\n \n   public Icon getIcon(Object key, Locale l)\n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Icon ? (Icon) o : null;\n   }\n \n   public Border getBorder(Object key)\n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Border ? (Border) o : null;\n   }\n \n   public Border getBorder(Object key, Locale l)\n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Border ? (Border) o : null;\n   }\n \n   public String getString(Object key)\n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof String ? (String) o : null;\n   }\n \n   public String getString(Object key, Locale l)\n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof String ? (String) o : null;\n   }\n \n   int getInt(Object key)\n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Integer ? ((Integer) o).intValue() : 0;\n   }\n \n   int getInt(Object key, Locale l)\n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Integer ? ((Integer) o).intValue() : 0;\n   }\n \n   public boolean getBoolean(Object key)\n   {\n-    return Boolean.TRUE.equals(get(key));\n+    return Boolean.TRUE.equals (get (key));\n   }\n \n   public boolean getBoolean(Object key, Locale l)\n@@ -217,89 +393,138 @@ public boolean getBoolean(Object key, Locale l)\n \n   public Insets getInsets(Object key) \n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Insets ? (Insets) o : null;\n   }\n \n   public Insets getInsets(Object key, Locale l) \n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Insets ? (Insets) o : null;\n   }\n \n   public Dimension getDimension(Object key) \n   {\n-    Object o = get(key);\n+    Object o = get (key);\n     return o instanceof Dimension ? (Dimension) o : null;\n   }\n \n   public Dimension getDimension(Object key, Locale l) \n   {\n-    Object o = get(key, l);\n+    Object o = get (key, l);\n     return o instanceof Dimension ? (Dimension) o : null;\n   }\n \n   public Class getUIClass(String id, ClassLoader loader)\n   {\n-    throw new Error(\"not implemented\");\n+    String className = (String) get (id);\n+    if (className == null)\n+      return null;\n+    try \n+      {\n+        if (loader != null)\n+          return loader.loadClass (className);    \n+        return Class.forName (className);\n+      }\n+    catch (Exception e)\n+      {\n+        return null;\n+      }\n   }\n \n   public Class getUIClass(String id)\n   {\n-    throw new Error(\"not implemented\");\n+    return getUIClass (id, null);\n   }\n-\n+  \n   protected void getUIError(String msg)\n   {\n-    // Does nothing unless overridden.\n+    System.err.println (\"UIDefaults.getUIError: \" + msg);\n   }\n \n-  public ComponentUI getUI(JComponent a)\n+  public ComponentUI getUI(JComponent target)\n   {\n-    String pp = a.getUIClassID();\n-    ComponentUI p = (ComponentUI) get(pp);\n-    if (p == null)\n-      getUIError(\"failed to locate UI:\" + pp);\n-    return p;\n+    String classId = target.getUIClassID ();\n+    Class cls = getUIClass (classId);\n+    if (cls == null)\n+      {\n+        getUIError (\"failed to locate UI class:\" + classId);\n+        return null;\n+      }\n+\n+    Method factory;\n+\n+    try \n+      {\n+        factory = cls.getMethod (\"createUI\", new Class[] { JComponent.class } );\n+      }\n+    catch (NoSuchMethodException nme)\n+      {\n+        getUIError (\"failed to locate createUI method on \" + cls.toString ());\n+        return null;\n+      }\n+\n+    try\n+      {\n+        return (ComponentUI) factory.invoke (null, new Object[] { target });\n+      }\n+    catch (java.lang.reflect.InvocationTargetException ite)\n+\t{\n+        getUIError (\"InvocationTargetException (\"+ ite.getTargetException() \n+\t\t    +\") calling createUI(...) on \" + cls.toString ());\n+        return null;        \n+\t    \n+\t}\n+    catch (Exception e)\n+      {\n+        getUIError (\"exception calling createUI(...) on \" + cls.toString ());\n+        return null;        \n+      }\n   }\n \n-  void addPropertyChangeListener(PropertyChangeListener l)\n+  void addPropertyChangeListener(PropertyChangeListener listener)\n   {\n-    throw new Error(\"not implemented\");\n+    listeners.add (listener);\n   }\n \n-  void removePropertyChangeListener(PropertyChangeListener l)\n+  void removePropertyChangeListener(PropertyChangeListener listener)\n   {\n-    throw new Error(\"not implemented\");\n+    listeners.remove (listener);\n   }\n \n   public PropertyChangeListener[] getPropertyChangeListeners()\n   {\n-    throw new Error(\"not implemented\");\n+    return (PropertyChangeListener[]) listeners.toArray ();\n   }\n \n   protected void firePropertyChange(String property, Object o, Object n)\n   {\n-    throw new Error(\"not implemented\");\n+    Iterator i = listeners.iterator ();\n+    PropertyChangeEvent pce = new PropertyChangeEvent (this, property, o, n);\n+    while (i.hasNext ())\n+      {\n+        PropertyChangeListener pcl = (PropertyChangeListener) i.next ();\n+        pcl.propertyChange (pce);\n+      }\n   }\n \n   void addResourceBundle(String name)\n   {\n-    throw new Error(\"not implemented\");\n+    bundles.addFirst (name);\n   }\n \n   void removeResourceBundle(String name)\n   {\n-    throw new Error(\"not implemented\");\n+    bundles.remove (name);\n   }\n \n-  void setDefaultLocale(Locale l)\n+  void setDefaultLocale(Locale loc)\n   {\n-    throw new Error(\"not implemented\");\n+    defaultLocale = loc;\n   }\n \n   public Locale getDefaultLocale()\n   {\n-    throw new Error(\"not implemented\");\n+    return defaultLocale;\n   }\n } // class UIDefaults"}, {"sha": "ee6575e014d65552402345647995192cde2d5367", "filename": "libjava/javax/swing/plaf/basic/BasicDefaults.java", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDefaults.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ccdf1a46ee4a3425bee1602ccf758a2bb9364571/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDefaults.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDefaults.java?ref=ccdf1a46ee4a3425bee1602ccf758a2bb9364571", "patch": "@@ -95,27 +95,27 @@ public class BasicDefaults extends UIDefaults\n     public BasicDefaults()\n     {\n \t//\tSystem.out.println(\"BasicDefaults !!!!!!!!!!!!!!!!!!!!!!!!!\");\n-\tput(\"JButton\", new BasicButtonUI());\n-\tput(\"JLabel\",  new BasicLabelUI());\n+\tput(\"JButton\", \"javax.swing.plaf.basic.BasicButtonUI\");\n+\tput(\"JLabel\",  \"javax.swing.plaf.basic.BasicLabelUI\");\n \t\n-\tput(\"JPanel\",  new BasicPanelUI());\n-\tput(\"JCheckBox\",  new BasicCheckBoxUI());\n-\tput(\"JRadioButton\",  new BasicRadioButtonUI());\n-\tput(\"JToggleButton\",  new BasicToggleButtonUI());\n-\tput(\"JOptionPane\",  new BasicOptionPaneUI());\n-\tput(\"JList\",  new BasicListUI());\n-\tput(\"JTree\",  new BasicTreeUI());\n-\tput(\"JTextComponent\",  new BasicTextUI());\n-\tput(\"JTabbedPane\",  new BasicTabbedPaneUI());\n-\tput(\"JScrollPane\", new BasicScrollPaneUI());\n-\tput(\"JViewport\",   new BasicViewportUI());\n-\n-\tput(\"JButton.border\",      new BasicBorder());\n-\tput(\"JPanel.border\",       new PanelBorder());\n-\n-\tput(\"JToggleButton.border\", new PanelBorder());\n-\tput(\"JCheckBox.border\", new PanelBorder());\n-\tput(\"JRadioButton.border\", new PanelBorder());\n+\tput(\"JPanel\",  \"javax.swing.plaf.basic.BasicPanelUI\");\n+\tput(\"JCheckBox\",  \"javax.swing.plaf.basic.BasicCheckBoxUI\");\n+\tput(\"JRadioButton\",  \"javax.swing.plaf.basic.BasicRadioButtonUI\");\n+\tput(\"JToggleButton\",  \"javax.swing.plaf.basic.BasicToggleButtonUI\");\n+\tput(\"JOptionPane\",  \"javax.swing.plaf.basic.BasicOptionPaneUI\");\n+\tput(\"JList\",  \"javax.swing.plaf.basic.BasicListUI\");\n+\tput(\"JTree\",  \"javax.swing.plaf.basic.BasicTreeUI\");\n+\tput(\"JTextComponent\",  \"javax.swing.plaf.basic.BasicTextUI\");\n+\tput(\"JTabbedPane\",  \"javax.swing.plaf.basic.BasicTabbedPaneUI\");\n+\tput(\"JScrollPane\", \"javax.swing.plaf.basic.BasicScrollPaneUI\");\n+\tput(\"JViewport\",   \"javax.swing.plaf.basic.BasicViewportUI\");\n+\n+\tput(\"JButton.border\",      \"javax.swing.plaf.basic.BasicBorder\");\n+\tput(\"JPanel.border\",       \"javax.swing.plaf.basic.PanelBorder\");\n+\n+\tput(\"JToggleButton.border\", \"javax.swing.plaf.basic.PanelBorder\");\n+\tput(\"JCheckBox.border\", \"javax.swing.plaf.basic.PanelBorder\");\n+\tput(\"JRadioButton.border\", \"javax.swing.plaf.basic.PanelBorder\");\n     }\n     \n }"}]}