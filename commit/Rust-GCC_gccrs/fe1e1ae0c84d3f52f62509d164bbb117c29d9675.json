{"sha": "fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "node_id": "C_kwDOANBUbNoAKGZlMWUxYWUwYzg0ZDNmNTJmNjI1MDlkMTY0YmJiMTE3YzI5ZDk2NzU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-25T18:14:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-10-25T18:14:29Z"}, "message": "c++: remove use_default_args parm of coerce_template_parms\n\nThe parameter use_default_args of coerce_template_parms, introduced way\nback in r110693, is effectively unused ever since r7-5536-g3c75aaa3d884ef\nremoved the last 'coerce_template_parms (..., true, false)' call.  So\nthis patch aims to simplify this function's API by getting rid of this\nparameter.\n\nIn passing, I noticed we currently define wrapper overloads of\ncoerce_template_parms that act as defacto default arguments for complain\nand require_all_args.  It seems cleaner however to just specify real\ndefault arguments for the main overload instead.  And I suppose we\nshould also give c_innermost_t_p the same defaults.\n\nBut I'm not sure about defaulting complain to tf_none, which is\ninconsistent with how we default it in other places to either tf_error\nor tf_warning_or_error (as a convenience for non-SFINAE callers).  And\nsince in general it's probably better to not default complain as that's\na source of SFINAE bugs, and only a handful of callers use this defacto\ncomplain=tf_none default, this patch gets rid of this complain default\n(but keeps the require_all_args default).\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (resolve_function_concept_overload): Explicitly\n\tpass complain=tf_none to coerce_template_parms.\n\t(resolve_concept_check): Likewise.\n\t(normalize_concept_check): Likewise.\n\t* cp-tree.h (coerce_template_parms): Declare the main overload\n\tand default its last parameter to true.  Remove wrapper overloads.\n\t* pt.cc (determine_specialization): Adjust calls to\n\tcoerce_template_parms and coerce_innermost_template_parms after\n\tremoving their last parameter.\n\t(coerce_template_args_for_ttp): Likewise.\n\t(coerce_ttp_args_for_tta): Likewise.\n\t(coerce_template_template_parms): Likewise.\n\t(coerce_template_parms): Remove use_default_args parameter and\n\tadjust function comment.  Document default argument.  Remove\n\twrapper overloads.  No longer static.\n\t(coerce_innermost_template_parms): Remove use_default_args\n\tparameter.  Default require_all_args to true.\n\t(lookup_template_class): As with determine_specialization.\n\t(finish_template_variable): Likewise.\n\t(tsubst_decl): Likewise.\n\t(instantiate_alias_template): Likewise.\n\t(fn_type_unification): Likewise.\n\t(resolve_overloaded_unification): Likewise.\n\t(resolve_nondeduced_context): Likewise.\n\t(get_partial_spec_bindings): Likewise.", "tree": {"sha": "b85991cffd97f77493ac11a38a9ae2ea2e42f607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b85991cffd97f77493ac11a38a9ae2ea2e42f607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/comments", "author": null, "committer": null, "parents": [{"sha": "4a54873d7753068fe64e01efd5d8a06615bdb167", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a54873d7753068fe64e01efd5d8a06615bdb167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a54873d7753068fe64e01efd5d8a06615bdb167"}], "stats": {"total": 117, "additions": 32, "deletions": 85}, "files": [{"sha": "5e6a3bcf0598ef436f37f9b414e1565dc5b5a515", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "patch": "@@ -323,7 +323,7 @@ resolve_function_concept_overload (tree ovl, tree args)\n       /* Remember the candidate if we can deduce a substitution.  */\n       ++processing_template_decl;\n       tree parms = TREE_VALUE (DECL_TEMPLATE_PARMS (tmpl));\n-      if (tree subst = coerce_template_parms (parms, args, tmpl))\n+      if (tree subst = coerce_template_parms (parms, args, tmpl, tf_none))\n         {\n           if (subst == error_mark_node)\n             ++nerrs;\n@@ -404,7 +404,7 @@ resolve_concept_check (tree check)\n   tree args = TREE_OPERAND (id, 1);\n   tree parms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (tmpl));\n   ++processing_template_decl;\n-  tree result = coerce_template_parms (parms, args, tmpl);\n+  tree result = coerce_template_parms (parms, args, tmpl, tf_none);\n   --processing_template_decl;\n   if (result == error_mark_node)\n     return error_mark_node;\n@@ -726,7 +726,7 @@ normalize_concept_check (tree check, tree args, norm_info info)\n   /* Turn on template processing; coercing non-type template arguments\n      will automatically assume they're non-dependent.  */\n   ++processing_template_decl;\n-  tree subst = coerce_template_parms (parms, targs, tmpl);\n+  tree subst = coerce_template_parms (parms, targs, tmpl, tf_none);\n   --processing_template_decl;\n   if (subst == error_mark_node)\n     return error_mark_node;"}, {"sha": "867096b08c6d8f1b293acedbc7a36595ad134fbb", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "patch": "@@ -7468,8 +7468,8 @@ extern tree get_function_template_decl\t\t(const_tree);\n extern tree resolve_nondeduced_context\t\t(tree, tsubst_flags_t);\n extern tree resolve_nondeduced_context_or_error\t(tree, tsubst_flags_t);\n extern hashval_t iterative_hash_template_arg\t(tree arg, hashval_t val);\n-extern tree coerce_template_parms               (tree, tree, tree);\n-extern tree coerce_template_parms               (tree, tree, tree, tsubst_flags_t);\n+extern tree coerce_template_parms\t\t(tree, tree, tree, tsubst_flags_t,\n+\t\t\t\t\t\t bool = true);\n extern tree canonicalize_type_argument\t\t(tree, tsubst_flags_t);\n extern void register_local_specialization       (tree, tree);\n extern tree retrieve_local_specialization       (tree);"}, {"sha": "51bfbbcd36dc0a7bd4fdafe0068c5dd7d602dfd6", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 27, "deletions": 80, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe1e1ae0c84d3f52f62509d164bbb117c29d9675/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=fe1e1ae0c84d3f52f62509d164bbb117c29d9675", "patch": "@@ -148,10 +148,8 @@ static void add_pending_template (tree);\n static tree reopen_tinst_level (struct tinst_level *);\n static tree tsubst_initializer_list (tree, tree);\n static tree get_partial_spec_bindings (tree, tree, tree);\n-static tree coerce_template_parms (tree, tree, tree, tsubst_flags_t,\n-\t\t\t\t   bool, bool);\n static tree coerce_innermost_template_parms (tree, tree, tree, tsubst_flags_t,\n-\t\t\t\t\t      bool, bool);\n+\t\t\t\t\t     bool = true);\n static void tsubst_enum\t(tree, tree, tree);\n static bool check_instantiated_args (tree, tree, tsubst_flags_t);\n static int check_non_deducible_conversion (tree, tree, unification_kind_t, int,\n@@ -2172,8 +2170,7 @@ determine_specialization (tree template_id,\n     {\n       tree parms = INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (fns));\n       targs = coerce_template_parms (parms, explicit_targs, fns,\n-\t\t\t\t     tf_warning_or_error,\n-\t\t\t\t     /*req_all*/true, /*use_defarg*/true);\n+\t\t\t\t     tf_warning_or_error);\n       if (targs != error_mark_node\n \t  && constraints_satisfied_p (fns, targs))\n         templates = tree_cons (targs, fns, templates);\n@@ -7833,10 +7830,7 @@ coerce_template_args_for_ttp (tree templ, tree arglist,\n     arglist = add_to_template_args (outer, arglist);\n \n   tree parmlist = DECL_INNERMOST_TEMPLATE_PARMS (templ);\n-  return coerce_template_parms (parmlist, arglist, templ,\n-\t\t\t\tcomplain,\n-\t\t\t\t/*require_all_args=*/true,\n-\t\t\t\t/*use_default_args=*/true);\n+  return coerce_template_parms (parmlist, arglist, templ, complain);\n }\n \n /* A cache of template template parameters with match-all default\n@@ -7910,9 +7904,7 @@ coerce_ttp_args_for_tta (tree& arg, tree pargs, tsubst_flags_t complain)\n     {\n       tree aparms\n \t= INNERMOST_TEMPLATE_PARMS (DECL_TEMPLATE_PARMS (arg_tmpl));\n-      pargs = coerce_template_parms (aparms, pargs, arg_tmpl, complain,\n-\t\t\t\t       /*require_all*/true,\n-\t\t\t\t       /*use_default*/true);\n+      pargs = coerce_template_parms (aparms, pargs, arg_tmpl, complain);\n     }\n   --processing_template_decl;\n   return pargs;\n@@ -8079,8 +8071,7 @@ coerce_template_template_parms (tree parm_parms_full,\n \t  pargs = add_to_template_args (outer_args, pargs);\n \t}\n \n-      pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none,\n-\t\t\t\t     /*require_all*/true, /*use_default*/true);\n+      pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none);\n       if (pargs != error_mark_node)\n \t{\n \t  tree targs = make_tree_vec (nargs);\n@@ -8840,19 +8831,16 @@ pack_expansion_args_count (tree args)\n    warning messages are issued under control of COMPLAIN.\n \n    If REQUIRE_ALL_ARGS is false, argument deduction will be performed\n-   for arguments not specified in ARGS.  Otherwise, if\n-   USE_DEFAULT_ARGS is true, default arguments will be used to fill in\n-   unspecified arguments.  If REQUIRE_ALL_ARGS is true, but\n-   USE_DEFAULT_ARGS is false, then all arguments must be specified in\n-   ARGS.  */\n+   for arguments not specified in ARGS.  If REQUIRE_ALL_ARGS is true,\n+   arguments not specified in ARGS must have default arguments which\n+   we'll use to fill in ARGS.  */\n \n-static tree\n+tree\n coerce_template_parms (tree parms,\n \t\t       tree args,\n \t\t       tree in_decl,\n \t\t       tsubst_flags_t complain,\n-\t\t       bool require_all_args,\n-\t\t       bool use_default_args)\n+\t\t       bool require_all_args /* = true */)\n {\n   int nparms, nargs, parm_idx, arg_idx, lost = 0;\n   tree orig_inner_args;\n@@ -8913,9 +8901,8 @@ coerce_template_parms (tree parms,\n       || (nargs < nparms - variadic_p\n \t  && require_all_args\n \t  && !variadic_args_p\n-\t  && (!use_default_args\n-\t      || (TREE_VEC_ELT (parms, nargs) != error_mark_node\n-                  && !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs))))))\n+\t  && (TREE_VEC_ELT (parms, nargs) != error_mark_node\n+\t      && !TREE_PURPOSE (TREE_VEC_ELT (parms, nargs)))))\n     {\n     bad_nargs:\n       if (complain & tf_error)\n@@ -9183,30 +9170,6 @@ coerce_template_parms (tree parms,\n   return new_inner_args;\n }\n \n-/* Convert all template arguments to their appropriate types, and\n-   return a vector containing the innermost resulting template\n-   arguments.  If any error occurs, return error_mark_node. Error and\n-   warning messages are not issued.\n-\n-   Note that no function argument deduction is performed, and default\n-   arguments are used to fill in unspecified arguments. */\n-tree\n-coerce_template_parms (tree parms, tree args, tree in_decl)\n-{\n-  return coerce_template_parms (parms, args, in_decl, tf_none, true, true);\n-}\n-\n-/* Convert all template arguments to their appropriate type, and\n-   instantiate default arguments as needed. This returns a vector\n-   containing the innermost resulting template arguments, or\n-   error_mark_node if unsuccessful.  */\n-tree\n-coerce_template_parms (tree parms, tree args, tree in_decl,\n-                       tsubst_flags_t complain)\n-{\n-  return coerce_template_parms (parms, args, in_decl, complain, true, true);\n-}\n-\n /* Like coerce_template_parms.  If PARMS represents all template\n    parameters levels, this function returns a vector of vectors\n    representing all the resulting argument levels.  Note that in this\n@@ -9219,11 +9182,10 @@ coerce_template_parms (tree parms, tree args, tree in_decl,\n \n static tree\n coerce_innermost_template_parms (tree parms,\n-\t\t\t\t  tree args,\n-\t\t\t\t  tree in_decl,\n-\t\t\t\t  tsubst_flags_t complain,\n-\t\t\t\t  bool require_all_args,\n-\t\t\t\t  bool use_default_args)\n+\t\t\t\t tree args,\n+\t\t\t\t tree in_decl,\n+\t\t\t\t tsubst_flags_t complain,\n+\t\t\t\t bool require_all_args /* = true */)\n {\n   int parms_depth = TMPL_PARMS_DEPTH (parms);\n   int args_depth = TMPL_ARGS_DEPTH (args);\n@@ -9243,8 +9205,7 @@ coerce_innermost_template_parms (tree parms,\n \t  if (cur_depth == args_depth)\n \t    l = coerce_template_parms (TREE_VALUE (level),\n \t\t\t\t       args, in_decl, complain,\n-\t\t\t\t       require_all_args,\n-\t\t\t\t       use_default_args);\n+\t\t\t\t       require_all_args);\n \t  else\n \t    l = TMPL_ARGS_LEVEL (args, cur_depth);\n \n@@ -9257,8 +9218,7 @@ coerce_innermost_template_parms (tree parms,\n   else\n     coerced_args = coerce_template_parms (INNERMOST_TEMPLATE_PARMS (parms),\n \t\t\t\t\t  args, in_decl, complain,\n-\t\t\t\t\t  require_all_args,\n-\t\t\t\t\t  use_default_args);\n+\t\t\t\t\t  require_all_args);\n   return coerced_args;\n }\n \n@@ -9953,9 +9913,7 @@ lookup_template_class (tree d1, tree arglist, tree in_decl, tree context,\n \t actually tsubst'd into the definition to create the\n \t instantiation.  */\n       arglist = coerce_innermost_template_parms (parmlist, arglist, gen_tmpl,\n-\t\t\t\t\t\t complain,\n-\t\t\t\t\t\t /*require_all_args=*/true,\n-\t\t\t\t\t\t /*use_default_args=*/true);\n+\t\t\t\t\t\t complain);\n \n       if (arglist == error_mark_node)\n \t/* We were unable to bind the arguments.  */\n@@ -10371,9 +10329,7 @@ finish_template_variable (tree var, tsubst_flags_t complain)\n   tree arglist = TREE_OPERAND (var, 1);\n \n   tree parms = DECL_TEMPLATE_PARMS (templ);\n-  arglist = coerce_innermost_template_parms (parms, arglist, templ, complain,\n-\t\t\t\t\t     /*req_all*/true,\n-\t\t\t\t\t     /*use_default*/true);\n+  arglist = coerce_innermost_template_parms (parms, arglist, templ, complain);\n   if (arglist == error_mark_node)\n     return error_mark_node;\n \n@@ -15022,8 +14978,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t\t     the template.  */\n \t\t  argvec = (coerce_innermost_template_parms\n \t\t\t    (DECL_TEMPLATE_PARMS (gen_tmpl),\n-\t\t\t     argvec, t, complain,\n-\t\t\t     /*all*/true, /*defarg*/true));\n+\t\t\t     argvec, t, complain));\n \t\tif (argvec == error_mark_node)\n \t\t  RETURN (error_mark_node);\n \t\thash = spec_hasher::hash (gen_tmpl, argvec);\n@@ -21956,11 +21911,8 @@ instantiate_alias_template (tree tmpl, tree args, tsubst_flags_t complain)\n   if (tmpl == error_mark_node || args == error_mark_node)\n     return error_mark_node;\n \n-  args =\n-    coerce_innermost_template_parms (DECL_TEMPLATE_PARMS (tmpl),\n-\t\t\t\t     args, tmpl, complain,\n-\t\t\t\t     /*require_all_args=*/true,\n-\t\t\t\t     /*use_default_args=*/true);\n+  args = coerce_innermost_template_parms (DECL_TEMPLATE_PARMS (tmpl),\n+\t\t\t\t\t  args, tmpl, complain);\n \n   /* FIXME check for satisfaction in check_instantiated_args.  */\n   if (flag_concepts\n@@ -22210,8 +22162,7 @@ fn_type_unification (tree fn,\n       explicit_targs\n \t= (coerce_template_parms (tparms, explicit_targs, fn,\n \t\t\t\t  complain|tf_partial,\n-\t\t\t\t  /*require_all_args=*/false,\n-\t\t\t\t  /*use_default_args=*/false));\n+\t\t\t\t  /*require_all_args=*/false));\n       if (explicit_targs == error_mark_node)\n \tgoto fail;\n \n@@ -23304,9 +23255,7 @@ resolve_overloaded_unification (tree tparms,\n \t    continue;\n \n \t  subargs = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n-\t\t\t\t\t   expl_subargs, NULL_TREE, tf_none,\n-\t\t\t\t\t   /*require_all_args=*/true,\n-\t\t\t\t\t   /*use_default_args=*/true);\n+\t\t\t\t\t   expl_subargs, NULL_TREE, tf_none);\n \t  if (subargs != error_mark_node\n \t      && !any_dependent_template_arguments_p (subargs))\n \t    {\n@@ -23450,9 +23399,7 @@ resolve_nondeduced_context (tree orig_expr, tsubst_flags_t complain)\n \t    continue;\n \n \t  subargs = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n-\t\t\t\t\t   expl_subargs, NULL_TREE, tf_none,\n-\t\t\t\t\t   /*require_all_args=*/true,\n-\t\t\t\t\t   /*use_default_args=*/true);\n+\t\t\t\t\t   expl_subargs, NULL_TREE, tf_none);\n \t  if (subargs != error_mark_node\n \t      && !any_dependent_template_arguments_p (subargs))\n \t    {\n@@ -25581,7 +25528,7 @@ get_partial_spec_bindings (tree tmpl, tree spec_tmpl, tree args)\n   if (spec_args != error_mark_node)\n     spec_args = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (tmpl),\n \t\t\t\t       INNERMOST_TEMPLATE_ARGS (spec_args),\n-\t\t\t\t       tmpl, tf_none, false, false);\n+\t\t\t\t       tmpl, tf_none, false);\n \n   pop_tinst_level ();\n "}]}