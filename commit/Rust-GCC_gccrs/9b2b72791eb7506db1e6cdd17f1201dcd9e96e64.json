{"sha": "9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIyYjcyNzkxZWI3NTA2ZGIxZTZjZGQxN2YxMjAxZGNkOWU5NmU2NA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2014-06-02T20:13:44Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2014-06-02T20:13:44Z"}, "message": "expr.h: Remove prototypes of functions defined in builtins.c.\n\n\n\t* expr.h: Remove prototypes of functions defined in builtins.c.\n\t* tree.h: (build_call_expr_*, build_string_literal): Add prototypes.\n\tRemove prototypes of functions defined in builtins.c.\n\t* builtins.h: Update prototype list to include all exported functions.\n\t* builtins.c: (default_libc_has_function, gnu_libc_has_function,\n\tno_c99_libc_has_function): Move to targhooks.c\n\t(build_string_literal, build_call_expr_loc_array,\n\tbuild_call_expr_loc_vec, build_call_expr_loc, build_call_expr): Move\n\tto tree.c.\n\t(expand_builtin_object_size, fold_builtin_object_size): Make static.\n\t* targhooks.c (default_libc_has_function, gnu_libc_has_function,\n\tno_c99_libc_has_function): Relocate from builtins.c.\n\t* tree.c: Include builtins.h.\n\t(build_call_expr_loc_array, build_call_expr_loc_vec,\n\tbuild_call_expr_loc, build_call_expr, build_string_literal): Relocate\n\tfrom builtins.c.\n\t* fold-const.h (fold_fma): Move prototype to builtins.h.\n\t* realmpfr.h (do_mpc_arg2): Move prototype to builtins.h.\n\n\t* fortran/trans.c (trans_runtime_error_vararg): Call\n\tfold_build_call_array_loc instead of fold_builtin_call_array.\n\n\t* asan.c: Include builtins.h.\n\t* cfgexpand.c: Likewise.\n\t* convert.c: Likewise.\n\t* emit-rtl.c: Likewise.\n\t* except.c: Likewise.\n\t* expr.c: Likewise.\n\t* fold-const.c: Likewise.\n\t* gimple-fold.c: Likewise.\n\t* gimple-ssa-strength-reduction.c: Likewise.\n\t* gimplify.c: Likewise.\n\t* ipa-inline.c: Likewise.\n\t* ipa-prop.c: Likewise.\n\t* lto-streamer-out.c: Likewise.\n\t* stmt.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* tree-object-size.c: Likewise.\n\t* tree-sra.c: Likewise.\n\t* tree-ssa-ccp.c: Likewise.\n\t* tree-ssa-forwprop.c: Likewise.\n\t* tree-ssa-loop-ivcanon.c: Likewise.\n\t* tree-ssa-loop-ivopts.c: Likewise.\n\t* tree-ssa-math-opts.c: Likewise.\n\t* tree-ssa-reassoc.c: Likewise.\n\t* tree-ssa-threadedge.c: Likewise.\n\t* tree-streamer-in.c: Likewise.\n\t* tree-vect-data-refs.c: Likewise.\n\t* tree-vect-patterns.c: Likewise.\n\t* tree-vect-stmts.c: Likewise.\n\n\tc\n\t* c-decl.c: Include builtins.h.\n\t* c-parser.c: Likewise.\n\n\tcp\n\t* decl.c: Include builtins.h.\n\t* semantics.c: Likewise.\n\n\tgo\n\t* go-gcc.cc: Include builtins.h.\n\n\tlto\n\t* lto-symtab.c: Include builtins.h.\n\n\tconfig\n\t* aarch64/aarch64.c: Include builtins.h.\n\t* alpha/alpha.c: Likewise.\n\t* arc/arc.c: Likewise.\n\t* arm/arm.c: Likewise.\n\t* avr/avr.c: Likewise.\n\t* bfin/bfin.c: Likewise.\n\t* c6x/c6x.c: Likewise.\n\t* cr16/cr16.c: Likewise.\n\t* cris/cris.c: Likewise.\n\t* epiphany/epiphany.c: Likewise.\n\t* fr30/fr30.c: Likewise.\n\t* frv/frv.c: Likewise.\n\t* h8300/h8300.c: Likewise.\n\t* i386/i386.c: Likewise.\n\t* i386/winnt.c: Likewise.\n\t* ia64/ia64.c: Likewise.\n\t* iq2000/iq2000.c: Likewise.\n\t* lm32/lm32.c: Likewise.\n\t* m32c/m32c.c: Likewise.\n\t* m32r/m32r.c: Likewise.\n\t* m68k/m68k.c: Likewise.\n\t* mcore/mcore.c: Likewise.\n\t* mep/mep.c: Likewise.\n\t* microblaze/microblaze.c: Likewise.\n\t* mips/mips.c: Likewise.\n\t* mmix/mmix.c: Likewise.\n\t* mn10300/mn10300.c: Likewise.\n\t* moxie/moxie.c: Likewise.\n\t* msp430/msp430.c: Likewise.\n\t* nds32/nds32.c: Likewise.\n\t* pa/pa.c: Likewise.\n\t* pdp11/pdp11.c: Likewise.\n\t* picochip/picochip.c: Likewise.\n\t* rl78/rl78.c: Likewise.\n\t* rs6000/rs6000.c: Likewise.\n\t* rx/rx.c: Likewise.\n\t* s390/s390.c: Likewise.\n\t* score/score.c: Likewise.\n\t* sh/sh.c: Likewise.\n\t* sparc/sparc.c: Likewise.\n\t* spu/spu.c: Likewise.\n\t* stormy16/stormy16.c: Likewise.\n\t* tilegx/tilegx.c: Likewise.\n\t* tilepro/tilepro.c: Likewise.\n\t* v850/v850.c: Likewise.\n\t* vax/vax.c: Likewise.\n\t* xtensa/xtensa.c: Likewise.\n\nFrom-SVN: r211145", "tree": {"sha": "18a4c2a3589ba33be4975b081fec3a1e5b53a891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18a4c2a3589ba33be4975b081fec3a1e5b53a891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/comments", "author": null, "committer": null, "parents": [{"sha": "097f0bcf651b735f9dcf517e6c00630da9e40a8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/097f0bcf651b735f9dcf517e6c00630da9e40a8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/097f0bcf651b735f9dcf517e6c00630da9e40a8a"}], "stats": {"total": 544, "additions": 371, "deletions": 173}, "files": [{"sha": "1f9f102c53e70a1d7a8dd659fc5c309ad4f58f56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1,3 +1,99 @@\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* expr.h: Remove prototypes of functions defined in builtins.c.\n+\t* tree.h: (build_call_expr_*, build_string_literal): Add prototypes.\n+\tRemove prototypes of functions defined in builtins.c.\n+\t* builtins.h: Update prototype list to include all exported functions.\n+\t* builtins.c: (default_libc_has_function, gnu_libc_has_function,\n+\tno_c99_libc_has_function): Move to targhooks.c\n+\t(build_string_literal, build_call_expr_loc_array,\n+\tbuild_call_expr_loc_vec, build_call_expr_loc, build_call_expr): Move\n+\tto tree.c.\n+\t(expand_builtin_object_size, fold_builtin_object_size): Make static.\n+\t* targhooks.c (default_libc_has_function, gnu_libc_has_function,\n+\tno_c99_libc_has_function): Relocate from builtins.c.\n+\t* tree.c: Include builtins.h.\n+\t(build_call_expr_loc_array, build_call_expr_loc_vec,\n+\tbuild_call_expr_loc, build_call_expr, build_string_literal): Relocate\n+\tfrom builtins.c.\n+\t* fold-const.h (fold_fma): Move prototype to builtins.h.\n+\t* realmpfr.h (do_mpc_arg2): Move prototype to builtins.h.\n+\t* asan.c: Include builtins.h.\n+\t* cfgexpand.c: Likewise.\n+\t* convert.c: Likewise.\n+\t* emit-rtl.c: Likewise.\n+\t* except.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* fold-const.c: Likewise.\n+\t* gimple-fold.c: Likewise.\n+\t* gimple-ssa-strength-reduction.c: Likewise.\n+\t* gimplify.c: Likewise.\n+\t* ipa-inline.c: Likewise.\n+\t* ipa-prop.c: Likewise.\n+\t* lto-streamer-out.c: Likewise.\n+\t* stmt.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* tree-object-size.c: Likewise.\n+\t* tree-sra.c: Likewise.\n+\t* tree-ssa-ccp.c: Likewise.\n+\t* tree-ssa-forwprop.c: Likewise.\n+\t* tree-ssa-loop-ivcanon.c: Likewise.\n+\t* tree-ssa-loop-ivopts.c: Likewise.\n+\t* tree-ssa-math-opts.c: Likewise.\n+\t* tree-ssa-reassoc.c: Likewise.\n+\t* tree-ssa-threadedge.c: Likewise.\n+\t* tree-streamer-in.c: Likewise.\n+\t* tree-vect-data-refs.c: Likewise.\n+\t* tree-vect-patterns.c: Likewise.\n+\t* tree-vect-stmts.c: Likewise.\n+\t* config/aarch64/aarch64.c: Likewise.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/arc/arc.c: Likewise.\n+\t* config/arm/arm.c: Likewise.\n+\t* config/avr/avr.c: Likewise.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/c6x/c6x.c: Likewise.\n+\t* config/cr16/cr16.c: Likewise.\n+\t* config/cris/cris.c: Likewise.\n+\t* config/epiphany/epiphany.c: Likewise.\n+\t* config/fr30/fr30.c: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/h8300/h8300.c: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\t* config/ia64/ia64.c: Likewise.\n+\t* config/iq2000/iq2000.c: Likewise.\n+\t* config/lm32/lm32.c: Likewise.\n+\t* config/m32c/m32c.c: Likewise.\n+\t* config/m32r/m32r.c: Likewise.\n+\t* config/m68k/m68k.c: Likewise.\n+\t* config/mcore/mcore.c: Likewise.\n+\t* config/mep/mep.c: Likewise.\n+\t* config/microblaze/microblaze.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/mmix/mmix.c: Likewise.\n+\t* config/mn10300/mn10300.c: Likewise.\n+\t* config/moxie/moxie.c: Likewise.\n+\t* config/msp430/msp430.c: Likewise.\n+\t* config/nds32/nds32.c: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pdp11/pdp11.c: Likewise.\n+\t* config/picochip/picochip.c: Likewise.\n+\t* config/rl78/rl78.c: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/rx/rx.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/score/score.c: Likewise.\n+\t* config/sh/sh.c: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/spu/spu.c: Likewise.\n+\t* config/stormy16/stormy16.c: Likewise.\n+\t* config/tilegx/tilegx.c: Likewise.\n+\t* config/tilepro/tilepro.c: Likewise.\n+\t* config/v850/v850.c: Likewise.\n+\t* config/vax/vax.c: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\n 2014-06-02  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/61094"}, {"sha": "5021338b8550f5194c6256a2a88190c37ced7da0", "filename": "gcc/asan.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -54,6 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ubsan.h\"\n #include \"predict.h\"\n #include \"params.h\"\n+#include \"builtins.h\"\n \n /* AddressSanitizer finds out-of-bounds and use-after-free bugs\n    with <2x slowdown on average."}, {"sha": "2d3d867b0b2d138a8fe9d4f2898746f7507e12aa", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 110, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -259,31 +259,6 @@ is_builtin_fn (tree decl)\n   return TREE_CODE (decl) == FUNCTION_DECL && DECL_BUILT_IN (decl);\n }\n \n-/* By default we assume that c99 functions are present at the runtime,\n-   but sincos is not.  */\n-bool\n-default_libc_has_function (enum function_class fn_class)\n-{\n-  if (fn_class == function_c94\n-      || fn_class == function_c99_misc\n-      || fn_class == function_c99_math_complex)\n-    return true;\n-\n-  return false;\n-}\n-\n-bool\n-gnu_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n-{\n-  return true;\n-}\n-\n-bool\n-no_c99_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n-{\n-  return false;\n-}\n-\n /* Return true if NODE should be considered for inline expansion regardless\n    of the optimization level.  This means whenever a function is invoked with\n    its \"internal\" name, which normally contains the prefix \"__builtin\".  */\n@@ -4690,29 +4665,6 @@ expand_builtin_copysign (tree exp, rtx target, rtx subtarget)\n   return expand_copysign (op0, op1, target);\n }\n \n-/* Create a new constant string literal and return a char* pointer to it.\n-   The STRING_CST value is the LEN characters at STR.  */\n-tree\n-build_string_literal (int len, const char *str)\n-{\n-  tree t, elem, index, type;\n-\n-  t = build_string (len, str);\n-  elem = build_type_variant (char_type_node, 1, 0);\n-  index = build_index_type (size_int (len - 1));\n-  type = build_array_type (elem, index);\n-  TREE_TYPE (t) = type;\n-  TREE_CONSTANT (t) = 1;\n-  TREE_READONLY (t) = 1;\n-  TREE_STATIC (t) = 1;\n-\n-  type = build_pointer_type (elem);\n-  t = build1 (ADDR_EXPR, type,\n-\t      build4 (ARRAY_REF, elem,\n-\t\t      t, integer_zero_node, NULL_TREE, NULL_TREE));\n-  return t;\n-}\n-\n /* Expand a call to __builtin___clear_cache.  */\n \n static rtx\n@@ -11159,66 +11111,6 @@ fold_call_expr (location_t loc, tree exp, bool ignore)\n   return NULL_TREE;\n }\n \n-/* Conveniently construct a function call expression.  FNDECL names the\n-   function to be called and N arguments are passed in the array\n-   ARGARRAY.  */\n-\n-tree\n-build_call_expr_loc_array (location_t loc, tree fndecl, int n, tree *argarray)\n-{\n-  tree fntype = TREE_TYPE (fndecl);\n-  tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n- \n-  return fold_builtin_call_array (loc, TREE_TYPE (fntype), fn, n, argarray);\n-}\n-\n-/* Conveniently construct a function call expression.  FNDECL names the\n-   function to be called and the arguments are passed in the vector\n-   VEC.  */\n-\n-tree\n-build_call_expr_loc_vec (location_t loc, tree fndecl, vec<tree, va_gc> *vec)\n-{\n-  return build_call_expr_loc_array (loc, fndecl, vec_safe_length (vec),\n-\t\t\t\t    vec_safe_address (vec));\n-}\n-\n-\n-/* Conveniently construct a function call expression.  FNDECL names the\n-   function to be called, N is the number of arguments, and the \"...\"\n-   parameters are the argument expressions.  */\n-\n-tree\n-build_call_expr_loc (location_t loc, tree fndecl, int n, ...)\n-{\n-  va_list ap;\n-  tree *argarray = XALLOCAVEC (tree, n);\n-  int i;\n-\n-  va_start (ap, n);\n-  for (i = 0; i < n; i++)\n-    argarray[i] = va_arg (ap, tree);\n-  va_end (ap);\n-  return build_call_expr_loc_array (loc, fndecl, n, argarray);\n-}\n-\n-/* Like build_call_expr_loc (UNKNOWN_LOCATION, ...).  Duplicated because\n-   varargs macros aren't supported by all bootstrap compilers.  */\n-\n-tree\n-build_call_expr (tree fndecl, int n, ...)\n-{\n-  va_list ap;\n-  tree *argarray = XALLOCAVEC (tree, n);\n-  int i;\n-\n-  va_start (ap, n);\n-  for (i = 0; i < n; i++)\n-    argarray[i] = va_arg (ap, tree);\n-  va_end (ap);\n-  return build_call_expr_loc_array (UNKNOWN_LOCATION, fndecl, n, argarray);\n-}\n-\n /* Construct a CALL_EXPR with type TYPE with FN as the function expression.\n    N arguments are passed in the array ARGARRAY.  */\n \n@@ -12281,7 +12173,7 @@ fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n \n /* Expand a call EXP to __builtin_object_size.  */\n \n-rtx\n+static rtx\n expand_builtin_object_size (tree exp)\n {\n   tree ost;\n@@ -12586,7 +12478,7 @@ maybe_emit_free_warning (tree exp)\n /* Fold a call to __builtin_object_size with arguments PTR and OST,\n    if possible.  */\n \n-tree\n+static tree\n fold_builtin_object_size (tree ptr, tree ost)\n {\n   unsigned HOST_WIDE_INT bytes;"}, {"sha": "8be990e8d8a5d0a23267abb72b3cc49d3bb27217", "filename": "gcc/builtins.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -20,6 +20,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_BUILTINS_H\n #define GCC_BUILTINS_H\n \n+#include <mpc.h>\n+\n /* Target-dependent globals.  */\n struct target_builtins {\n   /* For each register that may be used for calling a function, this\n@@ -44,6 +46,54 @@ extern struct target_builtins *this_target_builtins;\n #define this_target_builtins (&default_target_builtins)\n #endif\n \n+/* Non-zero if __builtin_constant_p should be folded right away.  */\n+extern bool force_folding_builtin_constant_p;\n+\n+extern bool is_builtin_fn (tree);\n+extern bool get_object_alignment_1 (tree, unsigned int *,\n+\t\t\t\t    unsigned HOST_WIDE_INT *);\n+extern unsigned int get_object_alignment (tree);\n+extern bool get_pointer_alignment_1 (tree, unsigned int *,\n+\t\t\t\t     unsigned HOST_WIDE_INT *);\n+extern unsigned int get_pointer_alignment (tree);\n+extern tree c_strlen (tree, int);\n+extern void expand_builtin_setjmp_setup (rtx, rtx);\n+extern void expand_builtin_setjmp_receiver (rtx);\n+extern tree mathfn_built_in (tree, enum built_in_function fn);\n+extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n+extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n+extern rtx expand_builtin_saveregs (void);\n+extern tree std_build_builtin_va_list (void);\n+extern tree std_fn_abi_va_list (tree);\n+extern tree std_canonical_va_list_type (tree);\n+extern void std_expand_builtin_va_start (tree, rtx);\n+extern void expand_builtin_trap (void);\n+extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+extern enum built_in_function builtin_mathfn_code (const_tree);\n+extern tree fold_builtin_expect (location_t, tree, tree, tree);\n+extern tree fold_builtin_strcpy (location_t, tree, tree, tree, tree);\n+extern tree fold_builtin_strncpy (location_t, tree, tree, tree, tree, tree);\n+extern tree fold_fma (location_t, tree, tree, tree, tree);\n+extern bool avoid_folding_inline_builtin (tree);\n+extern tree fold_call_expr (location_t, tree, bool);\n+extern tree fold_builtin_call_array (location_t, tree, tree, int, tree *);\n extern bool validate_gimple_arglist (const_gimple, ...);\n+extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n+extern tree fold_builtin_strcat (location_t, tree, tree, tree);\n+extern tree fold_builtin_fputs (location_t, tree, tree, bool, bool, tree);\n+extern bool fold_builtin_next_arg (tree, bool);\n+extern tree fold_builtin_memory_chk (location_t, tree, tree, tree, tree, tree,\n+\t\t\t\t     tree, bool, enum built_in_function);\n+extern tree fold_builtin_stxcpy_chk (location_t, tree, tree, tree, tree, tree,\n+\t\t\t\t     bool, enum built_in_function);\n+extern tree fold_builtin_stxncpy_chk (location_t, tree, tree, tree, tree, tree,\n+\t\t\t\t      bool, enum built_in_function);\n+extern tree gimple_fold_builtin_snprintf_chk (gimple, tree,\n+\t\t\t\t\t      enum built_in_function);\n+extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n+extern tree fold_call_stmt (gimple, bool);\n+extern void set_builtin_user_assembler_name (tree decl, const char *asmspec);\n+extern bool is_simple_builtin (tree);\n+extern bool is_inexpensive_builtin (tree);\n \n #endif"}, {"sha": "536e07e38d903aee8fabf03c188b60db5c7df072", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1,3 +1,8 @@\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* c-decl.c: Include builtins.h.\n+\t* c-parser.c: Likewise.\n+\n 2014-05-27  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/56724"}, {"sha": "dc8dbc2fb3c89b9b61339d05b19c2bd96e391d0a", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin.h\"\n #include \"c-family/c-ada-spec.h\"\n #include \"cilk.h\"\n+#include \"builtins.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context"}, {"sha": "1d9780edf4ecb07d251f1ce06b021d2e1febe23b", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"plugin.h\"\n #include \"omp-low.h\"\n+#include \"builtins.h\"\n \n \f\n /* Initialization routine for this file.  */"}, {"sha": "8b0e466a52f25ecd0d210775bc5f0d59fd9bf92d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"recog.h\"\n #include \"output.h\"\n+#include \"builtins.h\"\n \n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to"}, {"sha": "bb33304a2fd50203b4ef19ab94697dd4caf6b2e0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -64,6 +64,7 @@\n #include \"tree-vectorizer.h\"\n #include \"config/arm/aarch-cost-tables.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n /* Defined for convenience.  */\n #define POINTER_BYTES (POINTER_SIZE / BITS_PER_UNIT)"}, {"sha": "77ba003add5954943ff8d3154b87286b36f7948d", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"libfuncs.h\"\n #include \"opts.h\"\n #include \"params.h\"\n+#include \"builtins.h\"\n \n /* Specify which cpu to schedule for.  */\n enum processor_type alpha_tune;"}, {"sha": "0aa43c2ce2e73ce3baafa58fef3bacef09456ad4", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -66,6 +66,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"pass_manager.h\"\n #include \"wide-int.h\"\n+#include \"builtins.h\"\n \n /* Which cpu we're compiling for (A5, ARC600, ARC601, ARC700).  */\n static const char *arc_cpu_string = \"\";"}, {"sha": "98a8d891f23a2890c787d2d8d2754b07a670e688", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@\n #include \"opts.h\"\n #include \"dumpfile.h\"\n #include \"gimple-expr.h\"\n+#include \"builtins.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;"}, {"sha": "9285ccd11489dd6e0066fcf8f29e1c322fca1091", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@\n #include \"target-def.h\"\n #include \"params.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))"}, {"sha": "35408eb68cf61a60d120ca0a2029ecc1f639f760", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -59,6 +59,7 @@\n #include \"hw-doloop.h\"\n #include \"opts.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */"}, {"sha": "f0d8cbb42fdd1612a1ca01888af4861af2da24fc", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -57,6 +57,7 @@\n #include \"regrename.h\"\n #include \"dumpfile.h\"\n #include \"gimple-expr.h\"\n+#include \"builtins.h\"\n \n /* Table of supported architecture variants.  */\n typedef struct"}, {"sha": "e9bfc8917f0203ac30cdc3fb4b575d13d0117156", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -45,6 +45,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n /* Definitions.  */\n "}, {"sha": "cbed2df8ead8175fea958cd4dc98cf8a04ab042f", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"opts.h\"\n #include \"cgraph.h\"\n+#include \"builtins.h\"\n \n /* Usable when we have an amount to add or subtract, and want the\n    optimal size of the insn.  */"}, {"sha": "5a4d89e4ebc9b780e45a0cb3aec06e3201d31460", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\t/* for current_pass */\n #include \"context.h\"\n #include \"pass_manager.h\"\n+#include \"builtins.h\"\n \n /* Which cpu we're compiling for.  */\n int epiphany_cpu_type;"}, {"sha": "37759cc7bd4325947849d9e55abfe9edc4f8b404", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -45,6 +45,7 @@\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n+#include \"builtins.h\"\n \n /*}}}*/\n /*{{{  Function Prologues & Epilogues */ "}, {"sha": "fda2c1fd857f65153e48b0afeb4ce2232ddd534a", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"df.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n #ifndef FRV_INLINE\n #define FRV_INLINE inline"}, {"sha": "a0ff81b20b193ef4c3465d63d8915be97031b273", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n /* Classifies a h8300_src_operand or h8300_dst_operand.\n "}, {"sha": "84f79dd1d7fc14ca4c4576e5ec1e66cd8c0c3da0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -84,6 +84,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-globals.h\"\n #include \"tree-vectorizer.h\"\n #include \"shrink-wrap.h\"\n+#include \"builtins.h\"\n \n static rtx legitimize_dllimport_symbol (rtx, bool);\n static rtx legitimize_pe_coff_extern_decl (rtx, bool);"}, {"sha": "de607179715e84b46f8b1157dbb5c68469143e66", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"lto-streamer.h\"\n #include \"lto-section-names.h\"\n+#include \"builtins.h\"\n \n /* i386/PE specific attribute support.\n "}, {"sha": "cb9a9ca8af8269242577f278f43c4977b287ea6b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -74,6 +74,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"reload.h\"\n #include \"opts.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n /* This is used for communication between ASM_OUTPUT_LABEL and\n    ASM_OUTPUT_LABELREF.  */"}, {"sha": "49896e8a198c3dd429cbb75b68c52978f460c64a", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -47,6 +47,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order"}, {"sha": "fe3dcf4057f7bc2507e19238f3ef0fcbfe0cd8c5", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -50,6 +50,7 @@\n #include \"langhooks.h\"\n #include \"tm-constrs.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n struct lm32_frame_info\n {"}, {"sha": "0d7dcee1bc9810eb33bcdc275514d77d70010ce7", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@\n #include \"gimple.h\"\n #include \"df.h\"\n #include \"tm-constrs.h\"\n+#include \"builtins.h\"\n \n /* Prototypes */\n "}, {"sha": "71ce534e802067b13c8fc31059b93e693f427f81", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -46,6 +46,7 @@\n #include \"target-def.h\"\n #include \"tm-constrs.h\"\n #include \"opts.h\"\n+#include \"builtins.h\"\n \n /* Array of valid operand punctuation characters.  */\n static char m32r_punct_chars[256];"}, {"sha": "90ffeb497ad5fdddc5bdbe19439e9d687db62d8f", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"opts.h\"\n #include \"optabs.h\"\n+#include \"builtins.h\"\n \n enum reg_class regno_reg_class[] =\n {"}, {"sha": "717591e43246c200bf3a9062d2fb1bd0f02f2272", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -46,6 +46,7 @@\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n /* For dumping information about frame sizes.  */\n char * mcore_current_function_name = 0;"}, {"sha": "558883c47c3bb5e5c484f12b7f3d369d5ac042b4", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"opts.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n /* Structure of this file:\n "}, {"sha": "cf2dc74cccc07b99201b62e133213feab4a34529", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@\n #include \"optabs.h\"\n #include \"diagnostic-core.h\"\n #include \"cgraph.h\"\n+#include \"builtins.h\"\n \n #define MICROBLAZE_VERSION_COMPARE(VA,VB) strcasecmp (VA, VB)\n "}, {"sha": "0d6bbf16ad1c63b180f266d7b0ddf7975e659438", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -72,6 +72,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"context.h\"\n #include \"cgraph.h\"\n+#include \"builtins.h\"\n \n /* True if X is an UNSPEC wrapper around a SYMBOL_REF or LABEL_REF.  */\n #define UNSPEC_ADDRESS_P(X)\t\t\t\t\t\\"}, {"sha": "e0b8ce76f09e5abf5653ee5f8f33542f77ba9d91", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target-def.h\"\n #include \"df.h\"\n #include \"tm-constrs.h\"\n+#include \"builtins.h\"\n \n /* First some local helper definitions.  */\n #define MMIX_FIRST_GLOBAL_REGNUM 32"}, {"sha": "d229ca9638b9586d69fd75747887922879a20936", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -49,6 +49,7 @@\n #include \"opts.h\"\n #include \"cfgloop.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n /* This is used in the am33_2.0-linux-gnu port, in which global symbol\n    names are not prefixed by underscores, to tell whether to prefix a"}, {"sha": "1e289068179b7b7ae4bd9cb61cd30e03e794b128", "filename": "gcc/config/moxie/moxie.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmoxie%2Fmoxie.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmoxie%2Fmoxie.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -49,6 +49,7 @@\n #include \"tm_p.h\"\n #include \"langhooks.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n #define LOSE_AND_RETURN(msgid, x)\t\t\\\n   do\t\t\t\t\t\t\\"}, {"sha": "52195c90a7ec8951f0109cf073bbfda5cd6dd4f5", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@\n #include \"msp430-protos.h\"\n #include \"dumpfile.h\"\n #include \"opts.h\"\n+#include \"builtins.h\"\n \f\n \n static void msp430_compute_frame_info (void);"}, {"sha": "8516221b25d0340bf9dd94b9452b9cbb46ee72d2", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -50,6 +50,7 @@\n #include \"target-def.h\"\n #include \"langhooks.h\"\t\t/* For add_builtin_function().  */\n #include \"ggc.h\"\n+#include \"builtins.h\"\n \n /* ------------------------------------------------------------------------ */\n "}, {"sha": "fe3881e8092397c03594a75e69d91f04e51e7917", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"df.h\"\n #include \"opts.h\"\n+#include \"builtins.h\"\n \n /* Return nonzero if there is a bypass for the output of \n    OUT_INSN and the fp store IN_INSN.  */"}, {"sha": "f10d28a2560564ab970dbc36d872279888cfc01b", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -44,6 +44,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"opts.h\"\n #include \"dbxout.h\"\n+#include \"builtins.h\"\n \n /* this is the current value returned by the macro FIRST_PARM_OFFSET \n    defined in tm.h */"}, {"sha": "6433acb49d5f5beb5581a55865ed78b48f346271", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -65,6 +65,7 @@ along with GCC; see the file COPYING3.  If not, see\n #include \"libfuncs.h\"\t\t/* For memcpy_libfuncs, etc. */\n #include \"df.h\"\t\t\t/* For df_regs_ever_live_df_regs_ever_live_pp, etc. */\n #include \"dbxout.h\"\n+#include \"builtins.h\"\n \f\n \n /* Target AE ISA information. */"}, {"sha": "b9e6d00ad73fc28493edf1c2ee2accf292cb618e", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -55,6 +55,7 @@\n #include \"context.h\"\n #include \"tm-constrs.h\" /* for satisfies_constraint_*().  */\n #include \"insn-flags.h\" /* for gen_*().  */\n+#include \"builtins.h\"\n \f\n static inline bool is_interrupt_func (const_tree decl);\n static inline bool is_brk_interrupt_func (const_tree decl);"}, {"sha": "4dcbaf831538f1471db456e2d8c5fd4d93271535", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -79,6 +79,7 @@\n #include \"dumpfile.h\"\n #include \"cgraph.h\"\n #include \"target-globals.h\"\n+#include \"builtins.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif"}, {"sha": "9f834481b4f88eb6a84d7047d0efca9a7ed3a79f", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -55,6 +55,7 @@\n #include \"langhooks.h\"\n #include \"opts.h\"\n #include \"cgraph.h\"\n+#include \"builtins.h\"\n \n static unsigned int rx_gp_base_regnum_val = INVALID_REGNUM;\n static unsigned int rx_pid_base_regnum_val = INVALID_REGNUM;"}, {"sha": "85a6ca9f67f9596e2f06f8b35277492cdf9349a1", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"tree-pass.h\"\n #include \"context.h\"\n+#include \"builtins.h\"\n \n /* Define the specific costs for a given cpu.  */\n "}, {"sha": "576a2a0cde9d178c433a4bcc61fe382ad11170e2", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -51,6 +51,7 @@\n #include \"langhooks.h\"\n #include \"df.h\"\n #include \"opts.h\"\n+#include \"builtins.h\"\n \n #define SCORE_SDATA_MAX                score_sdata_max\n #define SCORE_STACK_ALIGN(LOC)         (((LOC) + 3) & ~3)"}, {"sha": "caa558ecea5f543c89e33c81eae04ad00fe258bb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"pass_manager.h\"\n #include \"context.h\"\n+#include \"builtins.h\"\n \n int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n "}, {"sha": "8b1dfa6d3b07b39cb4fb7f9cb9e625a27b8954a5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"context.h\"\n #include \"wide-int.h\"\n+#include \"builtins.h\"\n \n /* Processor costs */\n "}, {"sha": "a32a3a33bdf778d28d1f712f9444efdb6e0c06ae", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -66,6 +66,7 @@\n #include \"df.h\"\n #include \"dumpfile.h\"\n #include \"cfgloop.h\"\n+#include \"builtins.h\"\n \n /* Builtin types, data and prototypes. */\n "}, {"sha": "1463d52ef01c9a66a979a29d78626e0042085739", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -62,6 +62,7 @@\n #include \"gimplify.h\"\n #include \"df.h\"\n #include \"reload.h\"\n+#include \"builtins.h\"\n \n static rtx emit_addhi3_postreload (rtx, rtx, rtx);\n static void xstormy16_asm_out_constructor (rtx, int);"}, {"sha": "ab53fab26b8d0235cca424c693ef5f956af60710", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@\n #include \"tilegx-builtins.h\"\n #include \"tilegx-multiply.h\"\n #include \"diagnostic.h\"\n+#include \"builtins.h\"\n \n /* SYMBOL_REF for GOT */\n static GTY(()) rtx g_got_symbol = NULL;"}, {"sha": "1749556a557f3b2afc0229de5788ac3e63db1569", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -62,6 +62,7 @@\n #include \"tilepro-builtins.h\"\n #include \"tilepro-multiply.h\"\n #include \"diagnostic.h\"\n+#include \"builtins.h\"\n \n /* SYMBOL_REF for GOT */\n static GTY(()) rtx g_got_symbol = NULL;"}, {"sha": "e164586bfdcde309bc5efd0687d8fd14506409dd", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -45,6 +45,7 @@\n #include \"target-def.h\"\n #include \"df.h\"\n #include \"opts.h\"\n+#include \"builtins.h\"\n \n #ifndef streq\n #define streq(a,b) (strcmp (a, b) == 0)"}, {"sha": "4897ac2d62cdf773bcd25c58805a837d46f96a8f", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"target-def.h\"\n #include \"wide-int.h\"\n+#include \"builtins.h\"\n \n static void vax_option_override (void);\n static bool vax_legitimate_address_p (enum machine_mode, rtx, bool);"}, {"sha": "540ffecd391d5b91670b3c3942daf4595fec514b", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"gimplify.h\"\n #include \"df.h\"\n+#include \"builtins.h\"\n \n \n /* Enumeration for all of the relational tests, so that we can build"}, {"sha": "2d9600dd853db47487e4d4f08e51dbc568d5b9ba", "filename": "gcc/convert.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n+#include \"builtins.h\"\n #include \"ubsan.h\"\n \n /* Convert EXPR to some pointer or reference type TYPE."}, {"sha": "346782e623b706d11dc266b6f7b38c915dbe629f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1,3 +1,8 @@\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* decl.c: Include builtins.h.\n+\t* semantics.c: Likewise.\n+\n 2014-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tDR 1227"}, {"sha": "c61ad68f92bf2f09a6134c6da98bf903297aec78", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"cilk.h\"\n #include \"wide-int.h\"\n+#include \"builtins.h\"\n \n /* Possible cases of bad specifiers type used by bad_specifiers. */\n enum bad_spec_place {"}, {"sha": "4c13e9dc7398f400ad6ad773f2fcd8a0d4a01a0e", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"bitmap.h\"\n #include \"omp-low.h\"\n+#include \"builtins.h\"\n \n static bool verify_constant (tree, bool, bool *, bool *);\n #define VERIFY_CONSTANT(X)\t\t\t\t\t\t\\"}, {"sha": "fe1da9ed8abf3e7d8ec2a9ade8941e4632584dc6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"params.h\"\n #include \"target.h\"\n+#include \"builtins.h\"\n \n struct target_rtl default_target_rtl;\n #if SWITCHABLE_TARGET"}, {"sha": "018439e9e100a58f27d7a12eaf87935047154206", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -141,6 +141,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"pointer-set.h\"\n #include \"cfgloop.h\"\n+#include \"builtins.h\"\n \n /* Provide defaults for stuff that may not be defined when using\n    sjlj exceptions.  */"}, {"sha": "512c024e69898e65b25b5da608db2fc505474ad3", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"tree-ssa-address.h\"\n #include \"cfgexpand.h\"\n+#include \"builtins.h\"\n \n #ifndef STACK_PUSH_CODE\n #ifdef STACK_GROWS_DOWNWARD"}, {"sha": "6a1d3ab5709edbe7185bc3aaab2772c24debb94d", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -252,20 +252,6 @@ extern unsigned HOST_WIDE_INT choose_multiplier (unsigned HOST_WIDE_INT, int,\n \t\t\t\t\t\t int, unsigned HOST_WIDE_INT *,\n \t\t\t\t\t\t int *, int *);\n \f\n-/* Functions from builtins.c:  */\n-extern rtx expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-extern tree std_build_builtin_va_list (void);\n-extern tree std_fn_abi_va_list (tree);\n-extern tree std_canonical_va_list_type (tree);\n-\n-extern void std_expand_builtin_va_start (tree, rtx);\n-extern rtx default_expand_builtin (tree, rtx, rtx, enum machine_mode, int);\n-extern void expand_builtin_setjmp_setup (rtx, rtx);\n-extern void expand_builtin_setjmp_receiver (rtx);\n-extern rtx expand_builtin_saveregs (void);\n-extern void expand_builtin_trap (void);\n-extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n-\f\n /* Functions from expr.c:  */\n \n /* This is run during target initialization to set up which modes can be"}, {"sha": "24daaa32ce3b50f561e7ab385ad0f2ee68a6bb0a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimplify.h\"\n #include \"tree-dfa.h\"\n #include \"hash-table.h\"  /* Required for ENABLE_FOLD_CHECKING.  */\n+#include \"builtins.h\"\n \n /* Nonzero if we are folding constants inside an initializer; zero\n    otherwise.  */"}, {"sha": "dcb97a17a310a969589733dc15fbe82c26b8b956", "filename": "gcc/fold-const.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -85,7 +85,6 @@ extern void fold_defer_overflow_warnings (void);\n extern void fold_undefer_overflow_warnings (bool, const_gimple, int);\n extern void fold_undefer_and_ignore_overflow_warnings (void);\n extern bool fold_deferring_overflow_warnings_p (void);\n-extern tree fold_fma (location_t, tree, tree, tree, tree);\n extern int operand_equal_p (const_tree, const_tree, unsigned int);\n extern int multiple_of_p (tree, const_tree, const_tree);\n #define omit_one_operand(T1,T2,T3)\\"}, {"sha": "5aa0979e5633cbc85886d827889f6d48196fd133", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1,3 +1,8 @@\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* fortran/trans.c (trans_runtime_error_vararg): Call\n+\tfold_build_call_array_loc instead of fold_builtin_call_array.\n+\n 2014-06-02  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* trans-decl.c (gfc_build_builtin_function_decls): Correct number of"}, {"sha": "cfb8038440b8489bbfd60ee4fe4c66f4e990fc9d", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -450,13 +450,13 @@ trans_runtime_error_vararg (bool error, locus* where, const char* msgid,\n     fntype = TREE_TYPE (gfor_fndecl_runtime_warning_at);\n \n   loc = where ? where->lb->location : input_location;\n-  tmp = fold_builtin_call_array (loc, TREE_TYPE (fntype),\n-\t\t\t\t fold_build1_loc (loc, ADDR_EXPR,\n+  tmp = fold_build_call_array_loc (loc, TREE_TYPE (fntype),\n+\t\t\t\t   fold_build1_loc (loc, ADDR_EXPR,\n \t\t\t\t\t     build_pointer_type (fntype),\n \t\t\t\t\t     error\n \t\t\t\t\t     ? gfor_fndecl_runtime_error_at\n \t\t\t\t\t     : gfor_fndecl_runtime_warning_at),\n-\t\t\t\t nargs + 2, argarray);\n+\t\t\t\t   nargs + 2, argarray);\n   gfc_add_expr_to_block (&block, tmp);\n \n   return gfc_finish_block (&block);"}, {"sha": "403dee707a323c22b7704d9f10abcd9ddea1808d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"gimplify-me.h\"\n #include \"dbgcnt.h\"\n+#include \"builtins.h\"\n \n /* Return true when DECL can be referenced from current unit.\n    FROM_DECL (if non-null) specify constructor of variable DECL was taken from."}, {"sha": "fae2c562b324871593ea295f84244ef3f9855ff2", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -64,6 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"tree-affine.h\"\n #include \"wide-int-print.h\"\n+#include \"builtins.h\"\n \f\n /* Information about a strength reduction candidate.  Each statement\n    in the candidate table represents an expression of one of the"}, {"sha": "92714b595494bac071c6449579e8f1a11d940cd2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -62,6 +62,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"langhooks-def.h\"\t/* FIXME: for lhd_set_decl_assembler_name */\n #include \"tree-pass.h\"\t\t/* FIXME: only for PROP_gimple_any */\n+#include \"builtins.h\"\n \n enum gimplify_omp_var_data\n {"}, {"sha": "d66b753a68b3f9246b5aa80b1795a22c00640582", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1,3 +1,7 @@\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* go-gcc.cc: Include builtins.h.\n+\n 2014-05-17  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* go-lang.c (struct GTY): Don't use variable_size gty attribute."}, {"sha": "5b95e5d133a257a5b17ef45853e5b347767ae6e9", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -39,6 +39,7 @@\n #include \"output.h\"\n #include \"real.h\"\n #include \"realmpfr.h\"\n+#include \"builtins.h\"\n \n #include \"go-c.h\"\n "}, {"sha": "82bbd7f14ddce0032bf83bd9104b0b5904d03f1f", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -122,6 +122,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-utils.h\"\n #include \"sreal.h\"\n #include \"cilk.h\"\n+#include \"builtins.h\"\n \n /* Statistics we collect about inlining algorithm.  */\n static int overall_size;"}, {"sha": "167082160ebb979e797fb7244f39d157548eedfc", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -61,6 +61,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssanames.h\"\n #include \"dbgcnt.h\"\n #include \"domwalk.h\"\n+#include \"builtins.h\"\n \n /* Intermediate information that we get from alias analysis about a particular\n    parameter in a particular basic_block.  When a parameter or the memory it"}, {"sha": "64e4f4b4530d383824c3abd39f33e8746e952901", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-streamer.h\"\n #include \"streamer-hooks.h\"\n #include \"cfgloop.h\"\n+#include \"builtins.h\"\n \n \n static void lto_write_tree (struct output_block*, tree, bool);"}, {"sha": "87a8deafaf111a3eaf46c270a2ee0123e2cf4457", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1,3 +1,7 @@\n+2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* lto-symtab.c: Include builtins.h.\n+\n 2014-05-26  Richard Biener  <rguenther@suse.de>\n \n \t* lto.c (lto_parse_hex): Use int64_t."}, {"sha": "571b2dd386d2382e7d0d0d0a42834913e1bb2fdf", "filename": "gcc/lto/lto-symtab.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Flto%2Flto-symtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Flto%2Flto-symtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-symtab.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -34,6 +34,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n #include \"ipa-utils.h\"\n #include \"ipa-inline.h\"\n+#include \"builtins.h\"\n \n /* Replace the cgraph node NODE with PREVAILING_NODE in the cgraph, merging\n    all edges and removing the old node.  */"}, {"sha": "d909dba2d03f8f3adae7cc6740f2cd79767545ca", "filename": "gcc/realmpfr.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Frealmpfr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Frealmpfr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frealmpfr.h?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -25,9 +25,6 @@\n #include <mpc.h>\n #include \"real.h\"\n \n-/* In builtins.c.  */\n-extern tree do_mpc_arg2 (tree, tree, tree, int, int (*)(mpc_ptr, mpc_srcptr, mpc_srcptr, mpc_rnd_t));\n-\n /* Convert between MPFR and REAL_VALUE_TYPE.  The caller is\n    responsible for initializing and clearing the MPFR parameter.  */\n "}, {"sha": "7c1ea5d5cb9f550327c0bfe4016a7b1a6b8a0e68", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pretty-print.h\"\n #include \"params.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n \f\n /* Functions and data structures for expanding case statements.  */"}, {"sha": "dfbd2543086fabc58bb3aaab09c9ba4d7b8d0393", "filename": "gcc/targhooks.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -1322,6 +1322,31 @@ default_have_conditional_execution (void)\n #endif\n }\n \n+/* By default we assume that c99 functions are present at the runtime,\n+   but sincos is not.  */\n+bool\n+default_libc_has_function (enum function_class fn_class)\n+{\n+  if (fn_class == function_c94\n+      || fn_class == function_c99_misc\n+      || fn_class == function_c99_math_complex)\n+    return true;\n+\n+  return false;\n+}\n+\n+bool\n+gnu_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n+{\n+  return true;\n+}\n+\n+bool\n+no_c99_libc_has_function (enum function_class fn_class ATTRIBUTE_UNUSED)\n+{\n+  return false;\n+}\n+\n tree\n default_builtin_tm_load_store (tree ARG_UNUSED (type))\n {"}, {"sha": "7e75cce662f038560df2369bf60ae4e50c300283", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -67,6 +67,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"target.h\"\n #include \"cfgloop.h\"\n+#include \"builtins.h\"\n \n #include \"rtl.h\"\t/* FIXME: For asm_str_count.  */\n "}, {"sha": "93f8373f92aff7b09a2492ea0f4f1ec54c8b4a9a", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -42,6 +42,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"tree-phinodes.h\"\n #include \"ssa-iterators.h\"\n+#include \"builtins.h\"\n \n struct object_size_info\n {"}, {"sha": "db91c8b81753219c6f0274b7dc3c846746a8e4a5", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -112,6 +112,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-pretty-print.h\"\n #include \"ipa-inline.h\"\n #include \"ipa-utils.h\"\n+#include \"builtins.h\"\n \n /* Enumeration of all aggregate reductions we can do.  */\n enum sra_mode { SRA_MODE_EARLY_IPA,   /* early call regularization */"}, {"sha": "66b897743ece62f8a29ff72c928c30c3a41b7e01", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -154,6 +154,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"params.h\"\n #include \"wide-int-print.h\"\n+#include \"builtins.h\"\n \n \n /* Possible lattice values.  */"}, {"sha": "33fede2665ad711190fb631829c1b28d2f00f043", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"optabs.h\"\n #include \"tree-ssa-propagate.h\"\n #include \"tree-ssa-dom.h\"\n+#include \"builtins.h\"\n \n /* This pass propagates the RHS of assignment statements into use\n    sites of the LHS of the assignment.  It's basically a specialized"}, {"sha": "1bbc1cd3b6a919605adea6e6e7e7968697c9f7a5", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"target.h\"\n #include \"tree-cfgcleanup.h\"\n+#include \"builtins.h\"\n \n /* Specifies types of loops that may be unrolled.  */\n "}, {"sha": "7546ff6fe8361557d27c46aafd21bf795b97c46d", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -109,6 +109,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-propagate.h\"\n #include \"expmed.h\"\n #include \"tree-ssa-address.h\"\n+#include \"builtins.h\"\n \n /* FIXME: Expressions are expanded to RTL in this pass to determine the\n    cost of different addressing modes.  This should be moved to a TBD"}, {"sha": "68dfa17b85e0c5373b1cc68d7c9f26c8bcac9e79", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -114,6 +114,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"alloc-pool.h\"\n #include \"target.h\"\n #include \"gimple-pretty-print.h\"\n+#include \"builtins.h\"\n \n /* FIXME: RTL headers have to be included here for optabs.  */\n #include \"rtl.h\"\t\t/* Because optabs.h wants enum rtx_code.  */"}, {"sha": "3d811f06893912a7b6d88f667f9f84455dc0ed88", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -60,6 +60,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"params.h\"\n #include \"diagnostic-core.h\"\n+#include \"builtins.h\"\n \n /*  This is a simple global reassociation pass.  It is, in part, based\n     on the LLVM pass of the same name (They do some things more/less"}, {"sha": "69e5a6b5629e2c62e3521d554c20ad5611bf790c", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -48,6 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"params.h\"\n #include \"tree-ssa-threadedge.h\"\n+#include \"builtins.h\"\n \n /* To avoid code explosion due to jump threading, we limit the\n    number of statements we are going to copy.  This variable"}, {"sha": "da7c096b82612ee7f0ea094cceaf8011eab2d558", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"data-streamer.h\"\n #include \"streamer-hooks.h\"\n #include \"lto-streamer.h\"\n+#include \"builtins.h\"\n \n /* Read a STRING_CST from the string table in DATA_IN using input\n    block IB.  */"}, {"sha": "a4c439fb19ad860fa9a1d0e7718bcba45c77515e", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -57,6 +57,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Need to include rtl.h, expr.h, etc. for optabs.  */\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"builtins.h\"\n \n /* Return true if load- or store-lanes optab OPTAB is implemented for\n    COUNT vectors of type VECTYPE.  NAME is the name of OPTAB.  */"}, {"sha": "b504f4241db4b108b5f262c825c04684055214e3", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\t\t/* FIXME: for insn_data */\n #include \"diagnostic-core.h\"\n #include \"dumpfile.h\"\n+#include \"builtins.h\"\n \n /* Pattern recognition functions  */\n static gimple vect_recog_widen_sum_pattern (vec<gimple> *, tree *,"}, {"sha": "8c61775897da0e525159e40834578da19014ef8f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-vectorizer.h\"\n #include \"dumpfile.h\"\n #include \"cgraph.h\"\n+#include \"builtins.h\"\n \n /* For lang_hooks.types.type_for_mode.  */\n #include \"langhooks.h\""}, {"sha": "de16549a099f8c874bda56240715e4fc5a586e25", "filename": "gcc/tree.c", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -76,6 +76,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"debug.h\"\n #include \"intl.h\"\n #include \"wide-int.h\"\n+#include \"builtins.h\"\n \n /* Tree code classes.  */\n \n@@ -10467,6 +10468,91 @@ build_call_vec (tree return_type, tree fn, vec<tree, va_gc> *args)\n   return ret;\n }\n \n+/* Conveniently construct a function call expression.  FNDECL names the\n+   function to be called and N arguments are passed in the array\n+   ARGARRAY.  */\n+\n+tree\n+build_call_expr_loc_array (location_t loc, tree fndecl, int n, tree *argarray)\n+{\n+  tree fntype = TREE_TYPE (fndecl);\n+  tree fn = build1 (ADDR_EXPR, build_pointer_type (fntype), fndecl);\n+ \n+  return fold_builtin_call_array (loc, TREE_TYPE (fntype), fn, n, argarray);\n+}\n+\n+/* Conveniently construct a function call expression.  FNDECL names the\n+   function to be called and the arguments are passed in the vector\n+   VEC.  */\n+\n+tree\n+build_call_expr_loc_vec (location_t loc, tree fndecl, vec<tree, va_gc> *vec)\n+{\n+  return build_call_expr_loc_array (loc, fndecl, vec_safe_length (vec),\n+\t\t\t\t    vec_safe_address (vec));\n+}\n+\n+\n+/* Conveniently construct a function call expression.  FNDECL names the\n+   function to be called, N is the number of arguments, and the \"...\"\n+   parameters are the argument expressions.  */\n+\n+tree\n+build_call_expr_loc (location_t loc, tree fndecl, int n, ...)\n+{\n+  va_list ap;\n+  tree *argarray = XALLOCAVEC (tree, n);\n+  int i;\n+\n+  va_start (ap, n);\n+  for (i = 0; i < n; i++)\n+    argarray[i] = va_arg (ap, tree);\n+  va_end (ap);\n+  return build_call_expr_loc_array (loc, fndecl, n, argarray);\n+}\n+\n+/* Like build_call_expr_loc (UNKNOWN_LOCATION, ...).  Duplicated because\n+   varargs macros aren't supported by all bootstrap compilers.  */\n+\n+tree\n+build_call_expr (tree fndecl, int n, ...)\n+{\n+  va_list ap;\n+  tree *argarray = XALLOCAVEC (tree, n);\n+  int i;\n+\n+  va_start (ap, n);\n+  for (i = 0; i < n; i++)\n+    argarray[i] = va_arg (ap, tree);\n+  va_end (ap);\n+  return build_call_expr_loc_array (UNKNOWN_LOCATION, fndecl, n, argarray);\n+}\n+\n+/* Create a new constant string literal and return a char* pointer to it.\n+   The STRING_CST value is the LEN characters at STR.  */\n+tree\n+build_string_literal (int len, const char *str)\n+{\n+  tree t, elem, index, type;\n+\n+  t = build_string (len, str);\n+  elem = build_type_variant (char_type_node, 1, 0);\n+  index = build_index_type (size_int (len - 1));\n+  type = build_array_type (elem, index);\n+  TREE_TYPE (t) = type;\n+  TREE_CONSTANT (t) = 1;\n+  TREE_READONLY (t) = 1;\n+  TREE_STATIC (t) = 1;\n+\n+  type = build_pointer_type (elem);\n+  t = build1 (ADDR_EXPR, type,\n+\t      build4 (ARRAY_REF, elem,\n+\t\t      t, integer_zero_node, NULL_TREE, NULL_TREE));\n+  return t;\n+}\n+\n+\n+\n /* Return true if T (assumed to be a DECL) must be assigned a memory\n    location.  */\n "}, {"sha": "5392fddfef7cd1ce7d4a19aaa34ee8d0a1dbd593", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 42, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "patch": "@@ -3624,6 +3624,11 @@ extern tree build_call_valist (tree, tree, int, va_list);\n    build_call_array_loc (UNKNOWN_LOCATION, T1, T2, N, T3)\n extern tree build_call_array_loc (location_t, tree, tree, int, const tree *);\n extern tree build_call_vec (tree, tree, vec<tree, va_gc> *);\n+extern tree build_call_expr_loc_array (location_t, tree, int, tree *);\n+extern tree build_call_expr_loc_vec (location_t, tree, vec<tree, va_gc> *);\n+extern tree build_call_expr_loc (location_t, tree, int, ...);\n+extern tree build_call_expr (tree, int, ...);\n+extern tree build_string_literal (int, const char *);\n \n /* Construct various nodes representing data types.  */\n \n@@ -4745,46 +4750,4 @@ extern tree get_inner_reference (tree, HOST_WIDE_INT *, HOST_WIDE_INT *,\n    EXP, an ARRAY_REF or an ARRAY_RANGE_REF.  */\n extern tree array_ref_low_bound (tree);\n \n-/* In builtins.c.  */\n-\n-/* Non-zero if __builtin_constant_p should be folded right away.  */\n-extern bool force_folding_builtin_constant_p;\n-\n-extern bool avoid_folding_inline_builtin (tree);\n-extern tree fold_call_expr (location_t, tree, bool);\n-extern tree fold_builtin_fputs (location_t, tree, tree, bool, bool, tree);\n-extern tree fold_builtin_strcpy (location_t, tree, tree, tree, tree);\n-extern tree fold_builtin_strncpy (location_t, tree, tree, tree, tree, tree);\n-extern tree fold_builtin_strcat (location_t, tree, tree, tree);\n-extern tree fold_builtin_memory_chk (location_t, tree, tree, tree, tree, tree, tree, bool,\n-\t\t\t\t     enum built_in_function);\n-extern tree fold_builtin_stxcpy_chk (location_t, tree, tree, tree, tree, tree, bool,\n-\t\t\t\t     enum built_in_function);\n-extern tree fold_builtin_stxncpy_chk (location_t, tree, tree, tree, tree, tree, bool,\n-\t\t\t\t      enum built_in_function);\n-extern tree fold_builtin_expect (location_t, tree, tree, tree);\n-extern bool fold_builtin_next_arg (tree, bool);\n-extern enum built_in_function builtin_mathfn_code (const_tree);\n-extern tree fold_builtin_call_array (location_t, tree, tree, int, tree *);\n-extern tree build_call_expr_loc_array (location_t, tree, int, tree *);\n-extern tree build_call_expr_loc_vec (location_t, tree, vec<tree, va_gc> *);\n-extern tree build_call_expr_loc (location_t, tree, int, ...);\n-extern tree build_call_expr (tree, int, ...);\n-extern tree mathfn_built_in (tree, enum built_in_function fn);\n-extern tree c_strlen (tree, int);\n-extern tree build_string_literal (int, const char *);\n-extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n-extern bool is_builtin_fn (tree);\n-extern bool get_object_alignment_1 (tree, unsigned int *,\n-\t\t\t\t    unsigned HOST_WIDE_INT *);\n-extern unsigned int get_object_alignment (tree);\n-extern bool get_pointer_alignment_1 (tree, unsigned int *,\n-\t\t\t\t     unsigned HOST_WIDE_INT *);\n-extern unsigned int get_pointer_alignment (tree);\n-extern tree fold_call_stmt (gimple, bool);\n-extern tree gimple_fold_builtin_snprintf_chk (gimple, tree, enum built_in_function);\n-extern void set_builtin_user_assembler_name (tree decl, const char *asmspec);\n-extern bool is_simple_builtin (tree);\n-extern bool is_inexpensive_builtin (tree);\n-\n #endif  /* GCC_TREE_H  */"}]}