{"sha": "6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUyMTg4ZTBkYjFjN2M0YjI4N2QwMGQ2OTcyMWFlNjg4NDFlM2JjYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-04T01:49:15Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-04T01:49:15Z"}, "message": "final.c (output_asm_insn): Call targetm.asm_out.print_operand_punct_valid_p.\n\n\t* final.c (output_asm_insn): Call\n\ttargetm.asm_out.print_operand_punct_valid_p.  Update comments.\n\t(output_operand): Call targetm.asm_out.print_operand.  Update comments.\n\t(output_address): Call targetm.asm_out.print_operand_address.\n\tUpdate comments.\n\t* target.h (struct gcc_target): Add print_operand,\n\tprint_operand_address, and print_operand_punct_valid_p fields.\n\t* targhooks.h (default_print_operand): Declare.\n\t(default_print_operand_address): Declare.\n\t(default_print_operand_punct_valid_p): Declare.\n\t* targhooks.c (default_print_operand): Define.\n\t(default_print_operand_address): Define.\n\t(default_print_operand_punct_valid_p): Define.\n\t* target-def.h (TARGET_PRINT_OPERAND): Define if not defined.\n\t(TARGET_PRINT_OPERAND_ADDRESS): Likewise.\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Likewise.\n\t(TARGET_ASM_OUT): Add TARGET_PRINT_OPERAND,\n\tTARGET_PRINT_OPERAND_ADDRESS, and TARGET_PRINT_OPERAND_PUNCT_VALID_P.\n\t* vmsdbgout.c (addr_const_to_string): Update comment.\n\t* config/i386/i386.c (print_operand): Rename to...\n\t(ix86_print_operand): ...this.  Make static.\n\t(print_operand_address): Rename to...\n\t(ix86_print_operand_address): ...this.  Make static.  Call\n\tix86_print_operand instead of PRINT_OPERAND.\n\t(ix86_print_operand_punct_valid_p): New function.\n\t(TARGET_PRINT_OPERAND): Define.\n\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n\t* config/i386/i386.h (HI_REGISTER_NAMES): Update comment.\n\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n\t(PRINT_OPERAND): Delete.\n\t(PRINT_OPERAND_ADDRESS): Delete.\n\t* config/i386/i386-protos.h (print_operand): Delete prototype.\n\t(print_operand_address): Delete prototype.\n\nFrom-SVN: r160245", "tree": {"sha": "4ce976911991a5a234374dfb54ae57d02930e38c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ce976911991a5a234374dfb54ae57d02930e38c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/comments", "author": null, "committer": null, "parents": [{"sha": "b97e8f3a945d47010ad16040294e8fb3fa4cbc2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97e8f3a945d47010ad16040294e8fb3fa4cbc2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97e8f3a945d47010ad16040294e8fb3fa4cbc2e"}], "stats": {"total": 181, "additions": 140, "deletions": 41}, "files": [{"sha": "e0c0358ce5c10ad8dae7e9eac21467b6197a553e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -1,3 +1,40 @@\n+2010-06-03  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* final.c (output_asm_insn): Call\n+\ttargetm.asm_out.print_operand_punct_valid_p.  Update comments.\n+\t(output_operand): Call targetm.asm_out.print_operand.  Update comments.\n+\t(output_address): Call targetm.asm_out.print_operand_address.\n+\tUpdate comments.\n+\t* target.h (struct gcc_target): Add print_operand,\n+\tprint_operand_address, and print_operand_punct_valid_p fields.\n+\t* targhooks.h (default_print_operand): Declare.\n+\t(default_print_operand_address): Declare.\n+\t(default_print_operand_punct_valid_p): Declare.\n+\t* targhooks.c (default_print_operand): Define.\n+\t(default_print_operand_address): Define.\n+\t(default_print_operand_punct_valid_p): Define.\n+\t* target-def.h (TARGET_PRINT_OPERAND): Define if not defined.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Likewise.\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Likewise.\n+\t(TARGET_ASM_OUT): Add TARGET_PRINT_OPERAND,\n+\tTARGET_PRINT_OPERAND_ADDRESS, and TARGET_PRINT_OPERAND_PUNCT_VALID_P.\n+\t* vmsdbgout.c (addr_const_to_string): Update comment.\n+\t* config/i386/i386.c (print_operand): Rename to...\n+\t(ix86_print_operand): ...this.  Make static.\n+\t(print_operand_address): Rename to...\n+\t(ix86_print_operand_address): ...this.  Make static.  Call\n+\tix86_print_operand instead of PRINT_OPERAND.\n+\t(ix86_print_operand_punct_valid_p): New function.\n+\t(TARGET_PRINT_OPERAND): Define.\n+\t(TARGET_PRINT_OPERAND_ADDRESS): Define.\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n+\t* config/i386/i386.h (HI_REGISTER_NAMES): Update comment.\n+\t(PRINT_OPERAND_PUNCT_VALID_P): Delete.\n+\t(PRINT_OPERAND): Delete.\n+\t(PRINT_OPERAND_ADDRESS): Delete.\n+\t* config/i386/i386-protos.h (print_operand): Delete prototype.\n+\t(print_operand_address): Delete prototype.\n+\n 2010-06-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44403"}, {"sha": "c1e6858f47a8159b5c191e2eb937a7114a4ae285", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -60,8 +60,6 @@ extern bool legitimate_pic_operand_p (rtx);\n extern int legitimate_pic_address_disp_p (rtx);\n \n extern void print_reg (rtx, int, FILE*);\n-extern void print_operand (FILE*, rtx, int);\n-extern void print_operand_address (FILE*, rtx);\n extern bool output_addr_const_extra (FILE*, rtx);\n \n extern void split_di (rtx[], int, rtx[], rtx[]);"}, {"sha": "645501ad08859e68d9dea6d86218d17a6f8b2acb", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -10962,7 +10962,7 @@ output_pic_addr_const (FILE *file, rtx x, int code)\n \t}\n       else\n \t/* We can't handle floating point constants;\n-\t   PRINT_OPERAND must handle them.  */\n+\t   TARGET_PRINT_OPERAND must handle them.  */\n \toutput_operand_lossage (\"floating constant misused\");\n       break;\n \n@@ -11579,8 +11579,8 @@ get_some_local_dynamic_name (void)\n    ; -- print a semicolon (after prefixes due to bug in older gas).\n  */\n \n-void\n-print_operand (FILE *file, rtx x, int code)\n+static void\n+ix86_print_operand (FILE *file, rtx x, int code)\n {\n   if (code)\n     {\n@@ -11615,7 +11615,7 @@ print_operand (FILE *file, rtx x, int code)\n \t      if (!REG_P (x))\n \t\t{\n \t\t  putc ('[', file);\n-\t\t  PRINT_OPERAND (file, x, 0);\n+\t\t  ix86_print_operand (file, x, 0);\n \t\t  putc (']', file);\n \t\t  return;\n \t\t}\n@@ -11625,7 +11625,7 @@ print_operand (FILE *file, rtx x, int code)\n \t      gcc_unreachable ();\n \t    }\n \n-\t  PRINT_OPERAND (file, x, 0);\n+\t  ix86_print_operand (file, x, 0);\n \t  return;\n \n \n@@ -11780,7 +11780,7 @@ print_operand (FILE *file, rtx x, int code)\n \tcase 's':\n \t  if (CONST_INT_P (x) || ! SHIFT_DOUBLE_OMITS_COUNT)\n \t    {\n-\t      PRINT_OPERAND (file, x, 0);\n+\t      ix86_print_operand (file, x, 0);\n \t      fputs (\", \", file);\n \t    }\n \t  return;\n@@ -12177,11 +12177,17 @@ print_operand (FILE *file, rtx x, int code)\n \toutput_addr_const (file, x);\n     }\n }\n+\n+static bool\n+ix86_print_operand_punct_valid_p (unsigned char code)\n+{\n+  return (code == '*' || code == '+' || code == '&' || code == ';');\n+}\n \f\n /* Print a memory operand whose address is ADDR.  */\n \n-void\n-print_operand_address (FILE *file, rtx addr)\n+static void\n+ix86_print_operand_address (FILE *file, rtx addr)\n {\n   struct ix86_address parts;\n   rtx base, index, disp;\n@@ -30676,6 +30682,13 @@ ix86_enum_va_list (int idx, const char **pname, tree *ptree)\n #undef TARGET_ASM_UNALIGNED_DI_OP\n #define TARGET_ASM_UNALIGNED_DI_OP TARGET_ASM_ALIGNED_DI_OP\n \n+#undef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND ix86_print_operand\n+#undef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS ix86_print_operand_address\n+#undef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P ix86_print_operand_punct_valid_p\n+\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST ix86_adjust_cost\n #undef TARGET_SCHED_ISSUE_RATE"}, {"sha": "5e8fcadfe45ae6afcd9f48f7fa62ec5377d79e91", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -1992,7 +1992,8 @@ do {\t\t\t\t\t\t\t\\\n    For non floating point regs, the following are the HImode names.\n \n    For float regs, the stack top is sometimes referred to as \"%st(0)\"\n-   instead of just \"%st\".  PRINT_OPERAND handles this with the \"y\" code.  */\n+   instead of just \"%st\".  TARGET_PRINT_OPERAND handles this with the\n+   \"y\" code.  */\n \n #define HI_REGISTER_NAMES\t\t\t\t\t\t\\\n {\"ax\",\"dx\",\"cx\",\"bx\",\"si\",\"di\",\"bp\",\"sp\",\t\t\t\t\\\n@@ -2162,20 +2163,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\"call \" CRT_MKSTR(__USER_LABEL_PREFIX__) #FUNC \"\\n\"\t\\\n \tTEXT_SECTION_ASM_OP);\n \f\n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   Effect of various CODE letters is described in i386.c near\n-   print_operand function.  */\n-\n-#define PRINT_OPERAND_PUNCT_VALID_P(CODE) \\\n-  ((CODE) == '*' || (CODE) == '+' || (CODE) == '&' || (CODE) == ';')\n-\n-#define PRINT_OPERAND(FILE, X, CODE)  \\\n-  print_operand ((FILE), (X), (CODE))\n-\n-#define PRINT_OPERAND_ADDRESS(FILE, ADDR)  \\\n-  print_operand_address ((FILE), (ADDR))\n-\n #define OUTPUT_ADDR_CONST_EXTRA(FILE, X, FAIL)\t\\\n do {\t\t\t\t\t\t\\\n   if (! output_addr_const_extra (FILE, (X)))\t\\"}, {"sha": "93fb170d90fa82a1dbc8c0c02c2edb8425d8465e", "filename": "gcc/final.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -3329,7 +3329,7 @@ output_asm_insn (const char *templ, rtx *operands)\n \t   outputs an operand in a special way depending on the letter.\n \t   Letters `acln' are implemented directly.\n \t   Other letters are passed to `output_operand' so that\n-\t   the PRINT_OPERAND macro can define them.  */\n+\t   the TARGET_PRINT_OPERAND hook can define them.  */\n \telse if (ISALPHA (*p))\n \t  {\n \t    int letter = *p++;\n@@ -3395,12 +3395,10 @@ output_asm_insn (const char *templ, rtx *operands)\n \t    c = *p;\n \t  }\n \t/* % followed by punctuation: output something for that\n-\t   punctuation character alone, with no operand.\n-\t   The PRINT_OPERAND macro decides what is actually done.  */\n-#ifdef PRINT_OPERAND_PUNCT_VALID_P\n-\telse if (PRINT_OPERAND_PUNCT_VALID_P ((unsigned char) *p))\n+\t   punctuation character alone, with no operand.  The\n+\t   TARGET_PRINT_OPERAND hook decides what is actually done.  */\n+\telse if (targetm.asm_out.print_operand_punct_valid_p ((unsigned char) *p))\n \t  output_operand (NULL_RTX, *p++);\n-#endif\n \telse\n \t  output_operand_lossage (\"invalid %%-code\");\n \tbreak;\n@@ -3472,14 +3470,13 @@ mark_symbol_refs_as_used (rtx x)\n }\n \n /* Print operand X using machine-dependent assembler syntax.\n-   The macro PRINT_OPERAND is defined just to control this function.\n    CODE is a non-digit that preceded the operand-number in the % spec,\n    such as 'z' if the spec was `%z3'.  CODE is 0 if there was no char\n    between the % and the digits.\n    When CODE is a non-letter, X is 0.\n \n    The meanings of the letters are machine-dependent and controlled\n-   by PRINT_OPERAND.  */\n+   by TARGET_PRINT_OPERAND.  */\n \n static void\n output_operand (rtx x, int code ATTRIBUTE_UNUSED)\n@@ -3490,24 +3487,23 @@ output_operand (rtx x, int code ATTRIBUTE_UNUSED)\n   /* X must not be a pseudo reg.  */\n   gcc_assert (!x || !REG_P (x) || REGNO (x) < FIRST_PSEUDO_REGISTER);\n \n-  PRINT_OPERAND (asm_out_file, x, code);\n+  targetm.asm_out.print_operand (asm_out_file, x, code);\n \n   if (x == NULL_RTX)\n     return;\n \n   for_each_rtx (&x, mark_symbol_ref_as_used, NULL);\n }\n \n-/* Print a memory reference operand for address X\n-   using machine-dependent assembler syntax.\n-   The macro PRINT_OPERAND_ADDRESS exists just to control this function.  */\n+/* Print a memory reference operand for address X using\n+   machine-dependent assembler syntax.  */\n \n void\n output_address (rtx x)\n {\n   bool changed = false;\n   walk_alter_subreg (&x, &changed);\n-  PRINT_OPERAND_ADDRESS (asm_out_file, x);\n+  targetm.asm_out.print_operand_address (asm_out_file, x);\n }\n \f\n /* Print an integer constant expression in assembler syntax."}, {"sha": "b91a000e7c7f87ebac3a0125a11ba23232baf6c3", "filename": "gcc/target-def.h", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -261,6 +261,18 @@\n \n #define TARGET_ASM_TRAMPOLINE_TEMPLATE NULL\n \n+#ifndef TARGET_PRINT_OPERAND\n+#define TARGET_PRINT_OPERAND default_print_operand\n+#endif\n+\n+#ifndef TARGET_PRINT_OPERAND_ADDRESS\n+#define TARGET_PRINT_OPERAND_ADDRESS default_print_operand_address\n+#endif\n+\n+#ifndef TARGET_PRINT_OPERAND_PUNCT_VALID_P\n+#define TARGET_PRINT_OPERAND_PUNCT_VALID_P default_print_operand_punct_valid_p\n+#endif\n+\n #define TARGET_ASM_ALIGNED_INT_OP\t\t\t\t\\\n \t\t       {TARGET_ASM_ALIGNED_HI_OP,\t\t\\\n \t\t\tTARGET_ASM_ALIGNED_SI_OP,\t\t\\\n@@ -314,7 +326,10 @@\n \t\t\tTARGET_ASM_OUTPUT_ANCHOR,\t\t\\\n \t\t\tTARGET_ASM_OUTPUT_DWARF_DTPREL,\t\t\\\n \t\t\tTARGET_ASM_FINAL_POSTSCAN_INSN,\t\t\\\n-\t\t\tTARGET_ASM_TRAMPOLINE_TEMPLATE }\n+\t\t\tTARGET_ASM_TRAMPOLINE_TEMPLATE,\t\t\\\n+\t\t\tTARGET_PRINT_OPERAND,\t\t\t\\\n+\t\t\tTARGET_PRINT_OPERAND_ADDRESS,\t\t\\\n+\t\t\tTARGET_PRINT_OPERAND_PUNCT_VALID_P }\n \n /* Scheduler hooks.  All of these default to null pointers, which\n    haifa-sched.c looks for and handles.  */"}, {"sha": "c8be2b5a46c9b05517e0f531b273e25e2794384a", "filename": "gcc/target.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -277,6 +277,16 @@ struct gcc_target\n \n     /* Emit the trampoline template.  This hook may be NULL.  */\n     void (*trampoline_template) (FILE *);\n+\n+    /* Emit a machine-specific insn operand.  */\n+    void (*print_operand) (FILE *, rtx, int);\n+\n+    /* Emit a machine-specific memory address.  */\n+    void (*print_operand_address) (FILE *, rtx);\n+\n+    /* Determine whether CODE is a valid punctuation character for the\n+       `print_operand' hook.  */\n+    bool (*print_operand_punct_valid_p)(unsigned char code);\n   } asm_out;\n \n   /* Functions relating to instruction scheduling.  */"}, {"sha": "f6dbebf53105ded92757a83b40c26f1ea99c07fa", "filename": "gcc/targhooks.c", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -325,6 +325,46 @@ default_unwind_emit (FILE * stream ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n+/* Emit to STREAM the assembler syntax for insn operand X.  */\n+\n+void\n+default_print_operand (FILE *stream ATTRIBUTE_UNUSED, rtx x ATTRIBUTE_UNUSED,\n+\t\t       int code ATTRIBUTE_UNUSED)\n+{\n+#ifdef PRINT_OPERAND\n+  PRINT_OPERAND (stream, x, code);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+\n+/* Emit to STREAM the assembler syntax for an insn operand whose memory\n+   address is X.  */\n+\n+void\n+default_print_operand_address (FILE *stream ATTRIBUTE_UNUSED,\n+\t\t\t       rtx x ATTRIBUTE_UNUSED)\n+{\n+#ifdef PRINT_OPERAND_ADDRESS\n+  PRINT_OPERAND_ADDRESS (stream, x);\n+#else\n+  gcc_unreachable ();\n+#endif\n+}\n+\n+/* Return true if CODE is a valid punctuation character for the\n+   `print_operand' hook.  */\n+\n+bool\n+default_print_operand_punct_valid_p (unsigned char code ATTRIBUTE_UNUSED)\n+{\n+#ifdef PRINT_OPERAND_PUNCT_VALID_P\n+  return PRINT_OPERAND_PUNCT_VALID_P (code);\n+#else\n+  return false;\n+#endif\n+}\n+\n /* True if MODE is valid for the target.  By \"valid\", we mean able to\n    be manipulated in non-trivial ways.  In particular, this means all\n    the arithmetic is supported."}, {"sha": "f6be95dff8716998e3deeff6f8364ee9de6ae673", "filename": "gcc/targhooks.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -63,6 +63,9 @@ extern bool hook_callee_copies_named\n   (CUMULATIVE_ARGS *ca, enum machine_mode, const_tree, bool);\n \n extern void default_unwind_emit (FILE *, rtx);\n+extern void default_print_operand (FILE *, rtx, int);\n+extern void default_print_operand_address (FILE *, rtx);\n+extern bool default_print_operand_punct_valid_p (unsigned char);\n \n extern bool default_scalar_mode_supported_p (enum machine_mode);\n extern bool default_decimal_float_supported_p (void);"}, {"sha": "6856ab3124ab297a1a39a92eb8bae1c2262e2b80", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e2188e0db1c7c4b287d00d69721ae68841e3bcc/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=6e2188e0db1c7c4b287d00d69721ae68841e3bcc", "patch": "@@ -491,8 +491,8 @@ addr_const_to_string (char *str, rtx x)\n \t  strcat (str, buf1);\n \t}\n       else\n-\t/* We can't handle floating point constants; PRINT_OPERAND must\n-\t   handle them.  */\n+\t/* We can't handle floating point constants;\n+\t   TARGET_PRINT_OPERAND must handle them.  */\n \toutput_operand_lossage (\"floating constant misused\");\n       break;\n "}]}