{"sha": "11d6ea5e1da0876047915162678967b0cb90ec49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFkNmVhNWUxZGEwODc2MDQ3OTE1MTYyNjc4OTY3YjBjYjkwZWM0OQ==", "commit": {"author": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-07T18:33:01Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-01-07T18:33:01Z"}, "message": "Update loop-block testcases.\n\n2010-01-06  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* graphite-blocking.c (scop_do_block): Print \"SCoP will be loop\n\tblocked\" only when both the strip mine and the interchange have\n\tbeen applied.\n\n\t* testsuite/gcc.dg/graphite/block-2.c: Removed.\n\t* testsuite/gcc.dg/graphite/block-3.c: Add scan pattern.\n\t* testsuite/gcc.dg/graphite/block-4.c: Same.\n\t* testsuite/gcc.dg/graphite/block-5.c: Same.\n\t* testsuite/gcc.dg/graphite/block-6.c: Same.\n\nFrom-SVN: r155703", "tree": {"sha": "6f83ba20e9cf8193ffdaaae85927a545b30222fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f83ba20e9cf8193ffdaaae85927a545b30222fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11d6ea5e1da0876047915162678967b0cb90ec49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6ea5e1da0876047915162678967b0cb90ec49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d6ea5e1da0876047915162678967b0cb90ec49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d6ea5e1da0876047915162678967b0cb90ec49/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "556afcdc1107b79c8f037cc1f9dc4f5a220ff8e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556afcdc1107b79c8f037cc1f9dc4f5a220ff8e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556afcdc1107b79c8f037cc1f9dc4f5a220ff8e4"}], "stats": {"total": 97, "additions": 45, "deletions": 52}, "files": [{"sha": "f9c66037a0a2b6dd53d7e225db597be3cf02e1ff", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=11d6ea5e1da0876047915162678967b0cb90ec49", "patch": "@@ -1,3 +1,21 @@\n+2010-01-07  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/42641\n+\t* sese.c (rename_map_elt_info): Use the SSA name version, do\n+\tnot hash pointers.\n+\n+2010-01-06  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* graphite-blocking.c (scop_do_block): Print \"SCoP will be loop\n+\tblocked\" only when both the strip mine and the interchange have\n+\tbeen applied.\n+\n+\t* testsuite/gcc.dg/graphite/block-2.c: Removed.\n+\t* testsuite/gcc.dg/graphite/block-3.c: Add scan pattern.\n+\t* testsuite/gcc.dg/graphite/block-4.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-5.c: Same.\n+\t* testsuite/gcc.dg/graphite/block-6.c: Same.\n+\n 2010-01-06  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-clast-to-gimple.c (save_clast_name_index): Free slot"}, {"sha": "f7ddae2ee9176ae879fe50c074da475dbc8b2465", "filename": "gcc/graphite-blocking.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Fgraphite-blocking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Fgraphite-blocking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-blocking.c?ref=11d6ea5e1da0876047915162678967b0cb90ec49", "patch": "@@ -285,25 +285,27 @@ scop_do_strip_mine (scop_p scop)\n bool\n scop_do_block (scop_p scop)\n {\n-  bool transform_done = false;\n+  bool strip_mined = false;\n+  bool interchanged = false;\n \n   store_scattering (scop);\n \n-  lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop));\n-  transform_done = scop_do_interchange (scop);\n+  strip_mined = lst_do_strip_mine (SCOP_TRANSFORMED_SCHEDULE (scop));\n+  interchanged = scop_do_interchange (scop);\n \n   /* If we don't interchange loops, then the strip mine is not\n      profitable, and the transform is not a loop blocking.  */\n-  if (!transform_done\n+  if (!interchanged\n       || !graphite_legal_transform (scop))\n     {\n       restore_scattering (scop);\n       return false;\n     }\n-  else if (dump_file && (dump_flags & TDF_DETAILS))\n+  else if (strip_mined && interchanged\n+\t   && dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"SCoP will be loop blocked.\\n\");\n \n-  return transform_done;\n+  return strip_mined || interchanged;\n }\n \n #endif"}, {"sha": "210ea3427769be89e43b1c0c779deb76e7658d92", "filename": "gcc/testsuite/gcc.dg/graphite/block-2.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/556afcdc1107b79c8f037cc1f9dc4f5a220ff8e4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/556afcdc1107b79c8f037cc1f9dc4f5a220ff8e4/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-2.c?ref=556afcdc1107b79c8f037cc1f9dc4f5a220ff8e4", "patch": "@@ -1,29 +0,0 @@\n-typedef unsigned char   UChar;\n-typedef int             Int32;\n-typedef unsigned int    UInt32;\n-\n-void fallbackSort ( UInt32* fmap, \n-                    UInt32* eclass, \n-                    Int32   nblock,\n-                    Int32   verb )\n-{\n-   Int32 ftab[257];\n-   Int32 ftabCopy[256];\n-   Int32 H, i, j, k, l, r, cc, cc1;\n-   Int32 nNotDone;\n-   Int32 nBhtab;\n-   UChar* eclass8 = (UChar*)eclass;\n-\n-   if (verb >= 4)\n-      VPrintf0 ( \"        bucket sorting ...\\n\" );\n-   for (i = 0; i < 257;    i++) ftab[i] = 0;\n-   for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;\n-   for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];\n-   for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];\n-\n-   for (i = 0; i < nblock; i++) {\n-      j = eclass8[i] + ftab [i];\n-   }\n-   AssertH ( j < 256, 1005 );\n-}\n-/* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "75356161334ec42f389a2c6ef45903e17d8d2c00", "filename": "gcc/testsuite/gcc.dg/graphite/block-3.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-3.c?ref=11d6ea5e1da0876047915162678967b0cb90ec49", "patch": "@@ -9,17 +9,18 @@ void test (void)\n {\n   int i, j, k;\n \n-  /* These loops contain too few iterations for being strip-mined by 64.  */\n+  /* These loops contain too few iterations to be blocked by 64.  */\n   for (i = 0; i < 24; i++)\n     for (j = 0; j < 24; j++)\n       for (k = 0; k < 24; k++)\n         A[i][j][k] = B[i][k] * C[k][j];\n \n-  /* These loops should still be strip mined.  */\n+  /* These loops should still be loop blocked.  */\n   for (i = 0; i < M; i++)\n     for (j = 0; j < M; j++)\n       for (k = 0; k < M; k++)\n         A[i][j][k] = B[i][k] * C[k][j];\n }\n \n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "d752a4d95e6235fa432a53ce82b2fc744ea48aa9", "filename": "gcc/testsuite/gcc.dg/graphite/block-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-4.c?ref=11d6ea5e1da0876047915162678967b0cb90ec49", "patch": "@@ -20,4 +20,5 @@ void test (void)\n         A[i][j] = B[i][k] * C[k][j];\n }\n \n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "a8f3817e67e9d4c4446f93b2c3311a8bc8d16490", "filename": "gcc/testsuite/gcc.dg/graphite/block-5.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-5.c?ref=11d6ea5e1da0876047915162678967b0cb90ec49", "patch": "@@ -8,19 +8,19 @@ int test ()\n   int b[N][N];\n   unsigned i, j;\n \n-  for (i = 0; i < N; i++) \n+  for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n       a[i][j] = i*j;\n \n-  for (j = 1; j < N; j++) \n+  /* This loop nest should be blocked.  */\n+  for (j = 1; j < N; j++)\n     for (i = 0; i < N; i++)\n       a[i][j] = a[i][j-1] + b[i][j];\n \n-  for (i = 0; i < N; i++) \n-    for (j = 0; j < N; j++) \n-      foo (a[i][j]); \n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      foo (a[i][j]);\n }\n \n-/* Interchange is legal for loops 0 and 1 of the first two SCoPs */\n-/* { dg-final { scan-tree-dump-times \"Interchange valid for loops 0 and 1:\" 2 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 1 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}, {"sha": "6905e3635f76fb20f3561c2c065c51004d925a4d", "filename": "gcc/testsuite/gcc.dg/graphite/block-6.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11d6ea5e1da0876047915162678967b0cb90ec49/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-6.c?ref=11d6ea5e1da0876047915162678967b0cb90ec49", "patch": "@@ -7,19 +7,19 @@ int test ()\n   int a[N][N];\n   unsigned i, j;\n \n-  for (i = 0; i < N; i++) \n+  for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n-\ta[i][j] = i*j;\n+      a[i][j] = i*j;\n \n-  for (i = 1; i < N; i++) \n+  /* Interchange is not legal for loops 0 and 1.  */\n+  for (i = 1; i < N; i++)\n     for (j = 1; j < (N-1) ; j++)\n-\ta[i][j] = a[i-1][j+1] * a[i-1][j+1]/2;\n+      a[i][j] = a[i-1][j+1] * a[i-1][j+1]/2;\n \n-  for (i = 0; i < N; i++) \n+  for (i = 0; i < N; i++)\n     for (j = 0; j < N; j++)\n-      foo (a[i][j]); \n+      foo (a[i][j]);\n }\n \n-/* Interchange is not legal for loops 0 and 1 of SCoP 2.  */\n-/* { dg-final { scan-tree-dump-times \"Interchange not valid for loops 0 and 1:\" 1 \"graphite\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 0 \"graphite\" } } */\n /* { dg-final { cleanup-tree-dump \"graphite\" } } */"}]}