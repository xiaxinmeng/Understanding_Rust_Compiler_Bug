{"sha": "647eea9dd803b0b7df330dc834d5817761fcfbe6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ3ZWVhOWRkODAzYjBiN2RmMzMwZGM4MzRkNTgxNzc2MWZjZmJlNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-02-12T15:17:56Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-02-12T15:17:56Z"}, "message": "c-tree.h, [...]: Fix comment typos.\n\n\t* c-tree.h, combine.c, expmed.c, flow.c, libgcc2.c,\n\tsimplify-rtx.c, tree-ssa-live.h: Fix comment typos.  Follow\n\tspelling conventions.\n\nFrom-SVN: r94939", "tree": {"sha": "e97624b94c226e126abcb5ef4b80d102a7fd124b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97624b94c226e126abcb5ef4b80d102a7fd124b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/647eea9dd803b0b7df330dc834d5817761fcfbe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647eea9dd803b0b7df330dc834d5817761fcfbe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647eea9dd803b0b7df330dc834d5817761fcfbe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647eea9dd803b0b7df330dc834d5817761fcfbe6/comments", "author": null, "committer": null, "parents": [{"sha": "0008978072badfdf3c5afc69f98530cc3e48f953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0008978072badfdf3c5afc69f98530cc3e48f953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0008978072badfdf3c5afc69f98530cc3e48f953"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "06ad3a43b9ca07a5c30c4047a634a94cf36dd902", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -1,3 +1,9 @@\n+2005-02-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-tree.h, combine.c, expmed.c, flow.c, libgcc2.c,\n+\tsimplify-rtx.c, tree-ssa-live.h: Fix comment typos.  Follow\n+\tspelling conventions.\n+\n 2005-02-12  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vectorizer.c (vect_get_base_and_offset): Remove."}, {"sha": "1cde48283488912e4ebaadc8143757fef0853f75", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -126,7 +126,7 @@ struct c_expr\n   /* The value of the expression.  */\n   tree value;\n   /* Record the original binary operator of an expression, which may\n-     have been changed by fold, STRING_CST for unparenthesised string\n+     have been changed by fold, STRING_CST for unparenthesized string\n      constants, or ERROR_MARK for other expressions (including\n      parenthesized expressions).  */\n   enum tree_code original_code;"}, {"sha": "73b12bb4f0c5d14ec57273946915432e537d26ce", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -1276,7 +1276,7 @@ can_combine_p (rtx insn, rtx i3, rtx pred ATTRIBUTE_UNUSED, rtx succ,\n \n \t  /* If the clobber represents an earlyclobber operand, we must not\n \t     substitute an expression containing the clobbered register.\n-\t     As we do not analyse the constraint strings here, we have to\n+\t     As we do not analyze the constraint strings here, we have to\n \t     make the conservative assumption.  However, if the register is\n \t     a fixed hard reg, the clobber cannot represent any operand;\n \t     we leave it up to the machine description to either accept or"}, {"sha": "49b1faa77cf0f312248094dc79649cbfc13a0c42", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -1089,7 +1089,7 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n     }\n \n   /* If we have an out-of-bounds access to a register, just return an\n-     uninitialised register of the required mode.  This can occur if the\n+     uninitialized register of the required mode.  This can occur if the\n      source code contains an out-of-bounds access to a small array.  */\n   if (REG_P (op0) && bitnum >= GET_MODE_BITSIZE (GET_MODE (op0)))\n     return gen_reg_rtx (tmode);"}, {"sha": "1ab2a94567f8d330ff5264d06579f391b7f905a1", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -2891,7 +2891,7 @@ mark_regno_cond_dead (struct propagate_block_info *pbi, int regno, rtx cond)\n \n       /* Otherwise this is a conditional set.  Record that fact.\n \t It may have been conditionally used, or there may be a\n-\t subsequent set with a complimentary condition.  */\n+\t subsequent set with a complementary condition.  */\n \n       node = splay_tree_lookup (pbi->reg_cond_dead, regno);\n       if (node == NULL)"}, {"sha": "56a9bc4e87a3dffd9c49a7e6025fa584af4450a6", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -1553,7 +1553,7 @@ NAME (TYPE x, Wtype m)\n \n /* All of these would be present in a full C99 implementation of <math.h>\n    and <complex.h>.  Our problem is that only a few systems have such full\n-   implementations.  Further, libgcc_s.so isn't currenly linked against\n+   implementations.  Further, libgcc_s.so isn't currently linked against\n    libm.so, and even for systems that do provide full C99, the extra overhead\n    of all programs using libgcc having to link against libm.  So avoid it.  */\n \n@@ -1653,7 +1653,7 @@ CONCAT3(__div,MODE,3) (MTYPE a, MTYPE b, MTYPE c, MTYPE d)\n {\n   MTYPE denom, ratio, x, y;\n \n-  /* ??? We can get better behaviour from logrithmic scaling instead of \n+  /* ??? We can get better behavior from logarithmic scaling instead of \n      the division.  But that would mean starting to link libgcc against\n      libm.  We could implement something akin to ldexp/frexp as gcc builtins\n      fairly easily...  */\n@@ -1673,7 +1673,7 @@ CONCAT3(__div,MODE,3) (MTYPE a, MTYPE b, MTYPE c, MTYPE d)\n     }\n \n   /* Recover infinities and zeros that computed as NaN+iNaN; the only cases\n-     are non-zero/zero, infinite/finite, and finite/infinite.  */\n+     are nonzero/zero, infinite/finite, and finite/infinite.  */\n   if (isnan (x) && isnan (y))\n     {\n       if (denom == 0.0 && (!isnan (a) || !isnan (b)))"}, {"sha": "dc452dbdc26efaac117625100a1e6829ba4a3795", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -1925,7 +1925,7 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \t    return const0_rtx;\n \n \t  /* Transform (and (extend X) C) into (zero_extend (and X C)) if\n-\t     there are no non-zero bits of C outside of X's mode.  */\n+\t     there are no nonzero bits of C outside of X's mode.  */\n \t  if ((GET_CODE (op0) == SIGN_EXTEND\n \t       || GET_CODE (op0) == ZERO_EXTEND)\n \t      && GET_CODE (trueop1) == CONST_INT"}, {"sha": "b2a85c947976766de31353a7dcf374fb3edc9182", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/647eea9dd803b0b7df330dc834d5817761fcfbe6/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=647eea9dd803b0b7df330dc834d5817761fcfbe6", "patch": "@@ -428,7 +428,7 @@ tpa_decompact(tpa_p tpa)\n }\n \n \n-/* Once a var_map has been created and compressed, a complimentary root_var\n+/* Once a var_map has been created and compressed, a complementary root_var\n    object can be built.  This creates a list of all the root variables from\n    which ssa version names are derived.  Each root variable has a list of \n    which partitions are versions of that root.  "}]}