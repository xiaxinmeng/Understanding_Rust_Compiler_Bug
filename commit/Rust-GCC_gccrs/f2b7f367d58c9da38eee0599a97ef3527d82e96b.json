{"sha": "f2b7f367d58c9da38eee0599a97ef3527d82e96b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJiN2YzNjdkNThjOWRhMzhlZWUwNTk5YTk3ZWYzNTI3ZDgyZTk2Yg==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-14T10:20:48Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2003-11-14T10:20:48Z"}, "message": "reload1.c (reload): Revert previous patch.\n\n2003-11-14  Eric Christopher  <echristo@redhat.com>\n\n        * reload1.c (reload): Revert previous patch. Make\n        check for assignment into reg_equiv_address stricter.\n\nFrom-SVN: r73595", "tree": {"sha": "4ac88036dba89bbd0e0bd6453ac93f1c0401a94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ac88036dba89bbd0e0bd6453ac93f1c0401a94a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2b7f367d58c9da38eee0599a97ef3527d82e96b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b7f367d58c9da38eee0599a97ef3527d82e96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2b7f367d58c9da38eee0599a97ef3527d82e96b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2b7f367d58c9da38eee0599a97ef3527d82e96b/comments", "author": null, "committer": null, "parents": [{"sha": "15cc172b125877cd6079ef3975fc1d3025a66c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15cc172b125877cd6079ef3975fc1d3025a66c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15cc172b125877cd6079ef3975fc1d3025a66c52"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "41450e28841698beb4b2920d5c8e639fee313f52", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b7f367d58c9da38eee0599a97ef3527d82e96b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b7f367d58c9da38eee0599a97ef3527d82e96b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2b7f367d58c9da38eee0599a97ef3527d82e96b", "patch": "@@ -1,3 +1,8 @@\n+2003-11-14  Eric Christopher  <echristo@redhat.com>\n+\n+\t* reload1.c (reload): Revert previous patch. Make\n+\tcheck for assignment into reg_equiv_address stricter.\n+\n 2003-11-14  Arnaud Charlet  <charlet@act-europe.fr>\n \n \t* Makefile.in (POSTSTAGE1_FLAGS_TO_PASS): Pass ADAFLAGS.\n@@ -37,8 +42,8 @@\n \n 2003-11-13  Andrew Pinski <apinski@apple.com>\n \n-\t* config/darwin.c (machopic_output_possible_stub_label): \n-\tAllow stub symbol be not defined when outputting possible \n+\t* config/darwin.c (machopic_output_possible_stub_label):\n+\tAllow stub symbol be not defined when outputting possible\n \tstub label.\n \n 2003-11-13  Kazu Hirata  <kazu@cs.umass.edu>"}, {"sha": "5851dbfb931d719fd26d5e7a7eeaeeffc1306d73", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2b7f367d58c9da38eee0599a97ef3527d82e96b/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2b7f367d58c9da38eee0599a97ef3527d82e96b/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f2b7f367d58c9da38eee0599a97ef3527d82e96b", "patch": "@@ -774,12 +774,6 @@ reload (rtx first, int global)\n \t\t\t    = force_const_mem (GET_MODE (SET_DEST (set)), x);\n \t\t\t  if (!reg_equiv_memory_loc[i])\n \t\t\t    continue;\n-\t\t\t  /* As above. Later passes of reload assume that\n-\t\t\t     all addresses found in the reg_equiv_* arrays\n-\t\t\t     were originally legitimate.  */\n-\t\t\t  if (!memory_operand (reg_equiv_memory_loc[i], VOIDmode))\n-\t\t\t    reg_equiv_memory_loc[i] = NULL_RTX;\n-\n \t\t\t}\n \t\t    }\n \t\t  else\n@@ -916,18 +910,24 @@ reload (rtx first, int global)\n \tif (reg_renumber[i] < 0 && reg_equiv_memory_loc[i])\n \t  {\n \t    rtx x = eliminate_regs (reg_equiv_memory_loc[i], 0, NULL_RTX);\n+\t    enum reg_class class = MODE_BASE_REG_CLASS (GET_MODE (x));\n \n \t    if (strict_memory_address_p (GET_MODE (regno_reg_rtx[i]),\n \t\t\t\t\t XEXP (x, 0)))\n \t      reg_equiv_mem[i] = x, reg_equiv_address[i] = 0;\n-\t    else if (CONSTANT_P (XEXP (x, 0))\n+\t    else if ((CONSTANT_P (x)\n+\t\t      && LEGITIMATE_CONSTANT_P (x)\n+\t\t      && PREFERRED_RELOAD_CLASS (x, class) != NO_REGS)\n \t\t     || (GET_CODE (XEXP (x, 0)) == REG\n \t\t\t && REGNO (XEXP (x, 0)) < FIRST_PSEUDO_REGISTER)\n \t\t     || (GET_CODE (XEXP (x, 0)) == PLUS\n \t\t\t && GET_CODE (XEXP (XEXP (x, 0), 0)) == REG\n \t\t\t && (REGNO (XEXP (XEXP (x, 0), 0))\n \t\t\t     < FIRST_PSEUDO_REGISTER)\n-\t\t\t && CONSTANT_P (XEXP (XEXP (x, 0), 1))))\n+\t\t\t && (CONSTANT_P (XEXP (XEXP (x, 0), 1))\n+\t\t\t     && LEGITIMATE_CONSTANT_P (XEXP (XEXP (x, 0), 1))\n+\t\t\t     && PREFERRED_RELOAD_CLASS (XEXP (XEXP (x, 0), 1), class)\n+\t\t\t                                    != NO_REGS)))\n \t      reg_equiv_address[i] = XEXP (x, 0), reg_equiv_mem[i] = 0;\n \t    else\n \t      {"}]}