{"sha": "8e983d807e96f2b993e1bc840c915c8f461077d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU5ODNkODA3ZTk2ZjJiOTkzZTFiYzg0MGM5MTVjOGY0NjEwNzdkNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:14:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-01T08:14:49Z"}, "message": "[multiple changes]\n\n2012-10-01  Thomas Quinot  <quinot@adacore.com>\n\n\t* gnatcmd.adb, make.adb (Scan_Make_Arg, Inspect_Switches): Recognize\n\tand reject an invalid parameter passed to -vP.\n\n2012-10-01  Yannick Moy  <moy@adacore.com>\n\n\t* sem_warn.adb (Check_Infinite_Loop_Warning/Test_Ref): Improve\n\tthe detection of modifications to the loop variable by noting\n\tthat, if the type of variable is elementary and the condition\n\tdoes not contain a function call, then the condition cannot be\n\tmodified by side-effects from a procedure call.\n\n2012-10-01  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb: Add comments.\n\n2012-10-01  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Improve condition catching\n\tnever-ending recursion. The previous condition erroneously disabled\n\tsilently the expansion of the class-wide interface object\n\tinitialization in cases not involving the recursion.\n\nFrom-SVN: r191892", "tree": {"sha": "6f0271e566e17f424763b6a9433eabc8f59c42de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f0271e566e17f424763b6a9433eabc8f59c42de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e983d807e96f2b993e1bc840c915c8f461077d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e983d807e96f2b993e1bc840c915c8f461077d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e983d807e96f2b993e1bc840c915c8f461077d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e983d807e96f2b993e1bc840c915c8f461077d4/comments", "author": null, "committer": null, "parents": [{"sha": "7246b890962539d475f0f4737c4e87be6f197be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7246b890962539d475f0f4737c4e87be6f197be9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7246b890962539d475f0f4737c4e87be6f197be9"}], "stats": {"total": 157, "additions": 106, "deletions": 51}, "files": [{"sha": "6feb58d828c3cf430a539a33bcae1a38950e50a3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8e983d807e96f2b993e1bc840c915c8f461077d4", "patch": "@@ -1,3 +1,27 @@\n+2012-10-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* gnatcmd.adb, make.adb (Scan_Make_Arg, Inspect_Switches): Recognize\n+\tand reject an invalid parameter passed to -vP.\n+\n+2012-10-01  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_warn.adb (Check_Infinite_Loop_Warning/Test_Ref): Improve\n+\tthe detection of modifications to the loop variable by noting\n+\tthat, if the type of variable is elementary and the condition\n+\tdoes not contain a function call, then the condition cannot be\n+\tmodified by side-effects from a procedure call.\n+\n+2012-10-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb: Add comments.\n+\n+2012-10-01  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Improve condition catching\n+\tnever-ending recursion. The previous condition erroneously disabled\n+\tsilently the expansion of the class-wide interface object\n+\tinitialization in cases not involving the recursion.\n+\n 2012-10-01  Thomas Quinot  <quinot@adacore.com>\n \n \t* make.adb: Minor documentation fix: error messages are sent to"}, {"sha": "2861d7c2cdeecb0c7f3a5c0ee8d4e5cdc1276a3c", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8e983d807e96f2b993e1bc840c915c8f461077d4", "patch": "@@ -1791,6 +1791,8 @@ package body Checks is\n       --  Do not generate the checks in Ada 83, 95 or 05 mode because they\n       --  require an Ada 2012 construct.\n \n+      --  Why??? these pragmas and attributes are available in all ada modes\n+\n       if Ada_Version_Explicit < Ada_2012 then\n          return;\n       end if;\n@@ -1932,9 +1934,11 @@ package body Checks is\n       --  Extract the subprogram specification and declaration nodes\n \n       Subp_Spec := Parent (Subp);\n+\n       if Nkind (Subp_Spec) = N_Defining_Program_Unit_Name then\n          Subp_Spec := Parent (Subp_Spec);\n       end if;\n+\n       Subp_Decl := Parent (Subp_Spec);\n \n       --  Do not generate checks in Ada 83 or 95 because the pragmas involved\n@@ -1961,6 +1965,9 @@ package body Checks is\n       --  through the its contract and recover the pre and post conditions (if\n       --  available).\n \n+      --  So what??? you can have multiple such pragmas, this is unnecessary\n+      --  complexity being added for no purpose???\n+\n       if Present (Contract (Subp)) then\n          declare\n             Nam  : Name_Id;\n@@ -2080,6 +2087,9 @@ package body Checks is\n       --  Do not process subprograms where pre and post conditions do not make\n       --  sense.\n \n+      --  More detail here of why these specific conditions are needed???\n+      --  And remember to document them ???\n+\n       if not Comes_From_Source (Subp)\n         or else Is_Imported (Subp)\n         or else Is_Intrinsic_Subprogram (Subp)\n@@ -2127,24 +2137,20 @@ package body Checks is\n \n    procedure Apply_Predicate_Check (N : Node_Id; Typ : Entity_Id) is\n       S : Entity_Id;\n+\n    begin\n       if Present (Predicate_Function (Typ)) then\n \n          --  A predicate check does not apply within internally generated\n          --  subprograms, such as TSS functions.\n \n          S := Current_Scope;\n-         while Present (S)\n-           and then not Is_Subprogram (S)\n-         loop\n+         while Present (S) and then not Is_Subprogram (S) loop\n             S := Scope (S);\n          end loop;\n \n-         if Present (S)\n-           and then Get_TSS_Name (S) /= TSS_Null\n-         then\n+         if Present (S) and then Get_TSS_Name (S) /= TSS_Null then\n             return;\n-\n          else\n             Insert_Action (N,\n               Make_Predicate_Check (Typ, Duplicate_Subexpr (N)));"}, {"sha": "b43dfd82960ef97649a1d3ac3ba3766bc20100ce", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=8e983d807e96f2b993e1bc840c915c8f461077d4", "patch": "@@ -4910,8 +4910,15 @@ package body Exp_Ch3 is\n          --  Expr's type, both types share the same dispatch table and there is\n          --  no need to displace the pointer.\n \n-         elsif Comes_From_Source (N)\n-           and then Is_Interface (Typ)\n+         elsif Is_Interface (Typ)\n+\n+           --  Avoid never-ending recursion because if Equivalent_Type is set\n+           --  then we've done it already and must not do it again!\n+\n+           and then not\n+             (Nkind (Object_Definition (N)) = N_Identifier\n+                and then\n+              Present (Equivalent_Type (Entity (Object_Definition (N)))))\n          then\n             pragma Assert (Is_Class_Wide_Type (Typ));\n "}, {"sha": "ef93f2fab1c9460a3311b589f43340f530a1810f", "filename": "gcc/ada/gnatcmd.adb", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fgnatcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fgnatcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatcmd.adb?ref=8e983d807e96f2b993e1bc840c915c8f461077d4", "patch": "@@ -1769,19 +1769,27 @@ begin\n \n                   --  -vPx  Specify verbosity while parsing project files\n \n-                  elsif Argv'Length = 4\n-                    and then Argv (Argv'First + 1 .. Argv'First + 2) = \"vP\"\n-                  then\n-                     case Argv (Argv'Last) is\n-                        when '0' =>\n-                           Current_Verbosity := Prj.Default;\n-                        when '1' =>\n-                           Current_Verbosity := Prj.Medium;\n-                        when '2' =>\n-                           Current_Verbosity := Prj.High;\n-                        when others =>\n-                           Fail (\"Invalid switch: \" & Argv.all);\n-                     end case;\n+                  elsif Argv (Argv'First + 1 .. Argv'First + 2) = \"vP\" then\n+                     if Argv'Length = 4\n+                          and then Argv (Argv'Last) in '0' .. '2'\n+                     then\n+                        case Argv (Argv'Last) is\n+                           when '0' =>\n+                              Current_Verbosity := Prj.Default;\n+                           when '1' =>\n+                              Current_Verbosity := Prj.Medium;\n+                           when '2' =>\n+                              Current_Verbosity := Prj.High;\n+                           when others =>\n+\n+                              --  Cannot happen\n+\n+                              raise Program_Error;\n+                        end case;\n+                     else\n+                        Fail (\"invalid verbosity level: \"\n+                                & Argv (Argv'First + 3 .. Argv'Last));\n+                     end if;\n \n                      Remove_Switch (Arg_Num);\n "}, {"sha": "2d53ee23fb5fff39c46f17a384ef339c5fd7d447", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=8e983d807e96f2b993e1bc840c915c8f461077d4", "patch": "@@ -7825,11 +7825,12 @@ package body Make is\n \n          --  -vPx  (verbosity of the parsing of the project files)\n \n-         elsif Argv'Last = 4\n-           and then Argv (2 .. 3) = \"vP\"\n-           and then Argv (4) in '0' .. '2'\n-         then\n-            if And_Save then\n+         elsif Argv (2 .. 3) = \"vP\" then\n+            if Argv'Last /= 4 or else Argv (4) not in '0' .. '2' then\n+               Make_Failed\n+                 (\"invalid verbosity level \" & Argv (4 .. Argv'Last));\n+\n+            elsif And_Save then\n                case Argv (4) is\n                   when '0' =>\n                      Current_Verbosity := Prj.Default;"}, {"sha": "34bc4582cd87c3d6fc93749bc8077b38bfd4abc4", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e983d807e96f2b993e1bc840c915c8f461077d4/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=8e983d807e96f2b993e1bc840c915c8f461077d4", "patch": "@@ -472,32 +472,41 @@ package body Sem_Warn is\n                return Abandon;\n             end if;\n \n-            --  If we appear in the context of a procedure call, then also\n-            --  abandon, since there may be issues of non-visible side\n-            --  effects going on in the call.\n+            --  If the condition contains a function call, we consider it may\n+            --  be modified by side-effects from a procedure call. Otherwise,\n+            --  we consider the condition may not be modified, although that\n+            --  might happen if Variable is itself a by-reference parameter,\n+            --  and the procedure called modifies the global object referred to\n+            --  by Variable, but we actually prefer to issue a warning in this\n+            --  odd case. Note that the case where the procedure called has\n+            --  visibility over Variable is treated in another case below.\n+\n+            if Function_Call_Found then\n+               declare\n+                  P : Node_Id;\n \n-            declare\n-               P : Node_Id;\n+               begin\n+                  P := N;\n+                  loop\n+                     P := Parent (P);\n+                     exit when P = Loop_Statement;\n \n-            begin\n-               P := N;\n-               loop\n-                  P := Parent (P);\n-                  exit when P = Loop_Statement;\n-\n-                  --  Abandon if at procedure call, or something strange is\n-                  --  going on (perhaps a node with no parent that should\n-                  --  have one but does not?) As always, for a warning we\n-                  --  prefer to just abandon the warning than get into the\n-                  --  business of complaining about the tree structure here!\n-\n-                  if No (P) or else Nkind (P) = N_Procedure_Call_Statement then\n-                     return Abandon;\n-                  end if;\n-               end loop;\n-            end;\n+                     --  Abandon if at procedure call, or something strange is\n+                     --  going on (perhaps a node with no parent that should\n+                     --  have one but does not?) As always, for a warning we\n+                     --  prefer to just abandon the warning than get into the\n+                     --  business of complaining about the tree structure here!\n+\n+                     if No (P)\n+                       or else Nkind (P) = N_Procedure_Call_Statement\n+                     then\n+                        return Abandon;\n+                     end if;\n+                  end loop;\n+               end;\n+            end if;\n \n-            --  Reference to variable renaming variable in question\n+         --  Reference to variable renaming variable in question\n \n          elsif Is_Entity_Name (N)\n            and then Present (Entity (N))\n@@ -509,7 +518,7 @@ package body Sem_Warn is\n          then\n             return Abandon;\n \n-            --  Call to subprogram\n+         --  Call to subprogram\n \n          elsif Nkind (N) in N_Subprogram_Call then\n "}]}