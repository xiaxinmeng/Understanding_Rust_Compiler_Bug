{"sha": "012019922e6fed9b526e0c9cc34ec15250b73939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEyMDE5OTIyZTZmZWQ5YjUyNmUwYzljYzM0ZWMxNTI1MGI3MzkzOQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-09T22:49:12Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-09T22:49:12Z"}, "message": "re PR fortran/29431 (Not Implemented: complex character array constructors)\n\n2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29431\n\t* trans-array.c    (get_array_ctor_strlen): If we fall through to\n\tdefault, use a constant character length if it is available.\n\n2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29431\n\t* gfortran.dg/array_constructor_13.f90: New test.\n\nFrom-SVN: r118631", "tree": {"sha": "bed8c70b70d83314600842c219fac7804ddc3afa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed8c70b70d83314600842c219fac7804ddc3afa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/012019922e6fed9b526e0c9cc34ec15250b73939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012019922e6fed9b526e0c9cc34ec15250b73939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/012019922e6fed9b526e0c9cc34ec15250b73939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/012019922e6fed9b526e0c9cc34ec15250b73939/comments", "author": null, "committer": null, "parents": [{"sha": "217b58895ef4c0fd9ca9e885a90c5a08c3634642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/217b58895ef4c0fd9ca9e885a90c5a08c3634642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/217b58895ef4c0fd9ca9e885a90c5a08c3634642"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "76a31a6f93f0e99f94fa19a9838633a8b3d25933", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=012019922e6fed9b526e0c9cc34ec15250b73939", "patch": "@@ -1,3 +1,9 @@\n+2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29431\n+\t* trans-array.c    (get_array_ctor_strlen): If we fall through to\n+\tdefault, use a constant character length if it is available.\n+\n 2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/29744"}, {"sha": "2a5b3b72e1398d907fb3eaf743c8977b69b933fa", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=012019922e6fed9b526e0c9cc34ec15250b73939", "patch": "@@ -1416,7 +1416,7 @@ get_array_ctor_strlen (gfc_constructor * c, tree * len)\n \n \tcase EXPR_ARRAY:\n \t  if (!get_array_ctor_strlen (c->expr->value.constructor, len))\n-\t    is_const = FALSE;\n+\t    is_const = false;\n \t  break;\n \n \tcase EXPR_VARIABLE:\n@@ -1425,7 +1425,15 @@ get_array_ctor_strlen (gfc_constructor * c, tree * len)\n \t  break;\n \n \tdefault:\n-\t  is_const = FALSE;\n+\t  is_const = false;\n+\n+\t  /* Hope that whatever we have possesses a constant character\n+\t     length!  */\n+\t  if (!(*len && INTEGER_CST_P (*len)) && c->expr->ts.cl)\n+\t    {\n+\t      gfc_conv_const_charlen (c->expr->ts.cl);\n+\t      *len = c->expr->ts.cl->backend_decl;\n+\t    }\n \t  /* TODO: For now we just ignore anything we don't know how to\n \t     handle, and hope we can figure it out a different way.  */\n \t  break;"}, {"sha": "298fd305084112904d5b2b0cf5dcd01f14d6f575", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=012019922e6fed9b526e0c9cc34ec15250b73939", "patch": "@@ -1,3 +1,8 @@\n+2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29431\n+\t* gfortran.dg/array_constructor_13.f90: New test.\n+\n 2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/29744"}, {"sha": "bacc6fffc38f0c1aad254df1cb83da12dac79738", "filename": "gcc/testsuite/gfortran.dg/array_constructor_13.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/012019922e6fed9b526e0c9cc34ec15250b73939/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_13.f90?ref=012019922e6fed9b526e0c9cc34ec15250b73939", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+! Tests patch for PR29431, which arose from PR29373.\n+!\n+! Contributed by Tobias Schlueter  <tobi@gcc.gnu.org>\n+!\n+  implicit none\n+  CHARACTER(len=6), DIMENSION(2,2)  :: a\n+\n+! Reporters original triggered another error:\n+! gfc_todo: Not Implemented: complex character array\n+! constructors.\n+\n+  a = reshape([to_string(1.0), trim(\"abcdef\"), &\n+               to_string(7.0), trim(\"hijklm\")], &\n+               [2, 2])\n+  print *, a\n+\n+  CONTAINS\n+    FUNCTION to_string(x)\n+      character*6 to_string\n+      REAL, INTENT(in) :: x\n+      WRITE(to_string, FMT=\"(F6.3)\") x\n+    END FUNCTION\n+end"}]}