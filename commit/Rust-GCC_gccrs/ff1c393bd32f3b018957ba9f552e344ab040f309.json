{"sha": "ff1c393bd32f3b018957ba9f552e344ab040f309", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxYzM5M2JkMzJmM2IwMTg5NTdiYTlmNTUyZTM0NGFiMDQwZjMwOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-06-28T12:41:38Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-06-28T12:41:38Z"}, "message": "tree.c (build_varargs_function_type_list): New.\n\n2008-06-28  Kai Tietz  <kai.tietz@onevision.com>\n\n        * tree.c (build_varargs_function_type_list): New.\n        (build_function_type_list_1): New.\n        (build_function_type_list): Use build_function_type_list_1.\n        * tree.h (build_varargs_function_type_list): New.\n\nFrom-SVN: r137221", "tree": {"sha": "73a050f6f9c39147a8e01cd21051f86e6451b4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a050f6f9c39147a8e01cd21051f86e6451b4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff1c393bd32f3b018957ba9f552e344ab040f309", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1c393bd32f3b018957ba9f552e344ab040f309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff1c393bd32f3b018957ba9f552e344ab040f309", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff1c393bd32f3b018957ba9f552e344ab040f309/comments", "author": null, "committer": null, "parents": [{"sha": "d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d74032d9e1ef0a43d3259fcdc8a8ec2b30edacca"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "3dc9e8f66038ffc7fd376ac3641045ee8d1e3c56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1c393bd32f3b018957ba9f552e344ab040f309/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1c393bd32f3b018957ba9f552e344ab040f309/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff1c393bd32f3b018957ba9f552e344ab040f309", "patch": "@@ -1,3 +1,10 @@\n+2008-06-28  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* tree.c (build_varargs_function_type_list): New.\n+\t(build_function_type_list_1): New.\n+\t(build_function_type_list): Use build_function_type_list_1.\n+\t* tree.h (build_varargs_function_type_list): New.\n+\n 2008-06-28  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \tPR target/34856"}, {"sha": "d9e4e7f18dbf845b930ad3f1bcdc179bb1d6270a", "filename": "gcc/tree.c", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1c393bd32f3b018957ba9f552e344ab040f309/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1c393bd32f3b018957ba9f552e344ab040f309/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ff1c393bd32f3b018957ba9f552e344ab040f309", "patch": "@@ -5862,23 +5862,26 @@ build_function_type (tree value_type, tree arg_types)\n }\n \n /* Build a function type.  The RETURN_TYPE is the type returned by the\n-   function.  If additional arguments are provided, they are\n-   additional argument types.  The list of argument types must always\n-   be terminated by NULL_TREE.  */\n+   function. If VAARGS is set, no void_type_node is appended to the\n+   the list. ARGP muse be alway be terminated be a NULL_TREE.  */\n \n-tree\n-build_function_type_list (tree return_type, ...)\n+static tree\n+build_function_type_list_1 (bool vaargs, tree return_type, va_list argp)\n {\n   tree t, args, last;\n-  va_list p;\n-\n-  va_start (p, return_type);\n \n-  t = va_arg (p, tree);\n-  for (args = NULL_TREE; t != NULL_TREE; t = va_arg (p, tree))\n+  t = va_arg (argp, tree);\n+  for (args = NULL_TREE; t != NULL_TREE; t = va_arg (argp, tree))\n     args = tree_cons (NULL_TREE, t, args);\n \n-  if (args == NULL_TREE)\n+  if (vaargs)\n+    {\n+\t  last = args;\n+\t  if (args != NULL_TREE)\n+\t    args = nreverse (args);\n+      gcc_assert (args != NULL_TREE && last != void_list_node);\n+    }\n+  else if (args == NULL_TREE)\n     args = void_list_node;\n   else\n     {\n@@ -5888,7 +5891,41 @@ build_function_type_list (tree return_type, ...)\n     }\n   args = build_function_type (return_type, args);\n \n+  return args;\n+}\n+\n+/* Build a function type.  The RETURN_TYPE is the type returned by the\n+   function.  If additional arguments are provided, they are\n+   additional argument types.  The list of argument types must always\n+   be terminated by NULL_TREE.  */\n+\n+tree\n+build_function_type_list (tree return_type, ...)\n+{\n+  tree args;\n+  va_list p;\n+\n+  va_start (p, return_type);\n+  args = build_function_type_list_1 (false, return_type, p);\n+  va_end (p);\n+  return args;\n+}\n+\n+/* Build a variable argument function type.  The RETURN_TYPE is the\n+   type returned by the function.  If additional arguments are provided,\n+   they are additional argument types.  The list of argument types must\n+   always be terminated by NULL_TREE.  */\n+\n+tree\n+build_varargs_function_type_list (tree return_type, ...)\n+{\n+  tree args;\n+  va_list p;\n+\n+  va_start (p, return_type);\n+  args = build_function_type_list_1 (true, return_type, p);\n   va_end (p);\n+\n   return args;\n }\n "}, {"sha": "c00ad54cf05cdf9d6cbdf6029af2f5f1e74d5004", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff1c393bd32f3b018957ba9f552e344ab040f309/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff1c393bd32f3b018957ba9f552e344ab040f309/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ff1c393bd32f3b018957ba9f552e344ab040f309", "patch": "@@ -4084,6 +4084,7 @@ extern tree build_index_2_type (tree, tree);\n extern tree build_array_type (tree, tree);\n extern tree build_function_type (tree, tree);\n extern tree build_function_type_list (tree, ...);\n+extern tree build_varargs_function_type_list (tree, ...);\n extern tree build_method_type_directly (tree, tree, tree);\n extern tree build_method_type (tree, tree);\n extern tree build_offset_type (tree, tree);"}]}