{"sha": "c2092deb7f2a90a56c44db0439ef60309e1e2d75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIwOTJkZWI3ZjJhOTBhNTZjNDRkYjA0MzllZjYwMzA5ZTFlMmQ3NQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-07-16T20:58:04Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2012-07-16T20:58:04Z"}, "message": "re PR fortran/53824 (ICE with ALLOCATE of coarrays)\n\n2012-07-16  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/53824\n\t* resolve.c (resolve_allocate_deallocate):  If both\n\tstart indices are NULL, skip the test for equality.\n\n2012-07-16  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/53824\n\t* gfortran.dg/coarray_allocate_1.f90:  New test.\n\nFrom-SVN: r189549", "tree": {"sha": "ae9f29d2e110538a9051f69e9510fe356b5aeaff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae9f29d2e110538a9051f69e9510fe356b5aeaff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2092deb7f2a90a56c44db0439ef60309e1e2d75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2092deb7f2a90a56c44db0439ef60309e1e2d75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2092deb7f2a90a56c44db0439ef60309e1e2d75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2092deb7f2a90a56c44db0439ef60309e1e2d75/comments", "author": null, "committer": null, "parents": [{"sha": "8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db81fb2feeb722b0b49db4750e58fc1ecd05bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db81fb2feeb722b0b49db4750e58fc1ecd05bff"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "c080e5afd9357f6868005a97453514999d077e7a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c2092deb7f2a90a56c44db0439ef60309e1e2d75", "patch": "@@ -1,3 +1,9 @@\n+2012-07-16  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/53824\n+\t* resolve.c (resolve_allocate_deallocate):  If both\n+\tstart indices are NULL, skip the test for equality.\n+\n 2012-07-16  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* f95-lang.c: Include dumpfile.h instead of tree-dump.h."}, {"sha": "ab79460cc0cc84e612d726054e1311e6ceb00dcb", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=c2092deb7f2a90a56c44db0439ef60309e1e2d75", "patch": "@@ -7326,8 +7326,8 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \t  }\n     }\n \n-  /* Check that an allocate-object appears only once in the statement.  \n-     FIXME: Checking derived types is disabled.  */\n+  /* Check that an allocate-object appears only once in the statement.  */\n+\n   for (p = code->ext.alloc.list; p; p = p->next)\n     {\n       pe = p->expr;\n@@ -7377,9 +7377,10 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \t\t\t{\n \t\t\t  gfc_array_ref *par = &(pr->u.ar);\n \t\t\t  gfc_array_ref *qar = &(qr->u.ar);\n-\t\t\t  if (gfc_dep_compare_expr (par->start[0],\n-\t\t\t\t\t\t    qar->start[0]) != 0)\n-\t\t\t      break;\n+\t\t\t  if ((par->start[0] != NULL || qar->start[0] != NULL)\n+\t\t\t      && gfc_dep_compare_expr (par->start[0],\n+\t\t\t\t\t\t       qar->start[0]) != 0)\n+\t\t\t    break;\n \t\t\t}\n \t\t    }\n \t\t  else"}, {"sha": "1eebfa4d3bbcbbd3bbe5120b4fcf064337b28c3a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c2092deb7f2a90a56c44db0439ef60309e1e2d75", "patch": "@@ -1,3 +1,8 @@\n+2012-07-16  Thomas K\u00f6nig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/53824\n+\t* gfortran.dg/coarray_allocate_1.f90:  New test.\n+\n 2012-07-16  Andrew Pinski  <apinski@cavium.com>\n \n \t* gcc.c-torture/execute/bswap-1.c: New testcase."}, {"sha": "b2f3136f08829a5a617fe3156477082b64338ca0", "filename": "gcc/testsuite/gfortran.dg/coarray_allocate_1.f90", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2092deb7f2a90a56c44db0439ef60309e1e2d75/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_allocate_1.f90?ref=c2092deb7f2a90a56c44db0439ef60309e1e2d75", "patch": "@@ -0,0 +1,95 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+! PR 53824 - this used to ICE.\n+! Original test case by Vladim\u00edr Fuka\n+program Jac\n+ implicit none\n+\n+ integer,parameter:: KND=KIND(1.0)\n+\n+ type Domain\n+  real(KND),dimension(:,:,:),allocatable:: A,B\n+  integer :: n=64,niter=20000,blockit=1000\n+  integer :: starti,endi\n+  integer :: startj,endj\n+  integer :: startk,endk\n+  integer,dimension(:),allocatable :: startsi,startsj,startsk\n+  integer,dimension(:),allocatable :: endsi,endsj,endsk\n+ end type\n+\n+ type(Domain),allocatable :: D[:,:,:]\n+! real(KND),codimension[*] :: sumA,sumB,diffAB\n+ integer i,j,k,ncom\n+ integer nims,nxims,nyims,nzims\n+ integer im,iim,jim,kim\n+ character(20):: ch\n+\n+ nims = num_images()\n+ nxims = nint(nims**(1./3.))\n+ nyims = nint(nims**(1./3.))\n+ nzims = nims / (nxims*nyims)\n+\n+ im = this_image()\n+ if (im==1) write(*,*) \"n: [\",nxims,nyims,nzims,\"]\"\n+\n+ kim = (im-1) / (nxims*nyims) + 1\n+ jim = ((im-1) - (kim-1)*(nxims*nyims)) / nxims + 1\n+ iim = (im-1) - (kim-1)*(nxims*nyims) - (jim-1)*(nxims) + 1\n+\n+ write (*,*) im,\"[\",iim,jim,kim,\"]\"\n+\n+ allocate(D[nxims,nyims,*])\n+\n+ ncom=command_argument_count()\n+ if (command_argument_count() >=2) then\n+  call get_command_argument(1,value=ch)\n+  read (ch,*) D%n\n+  call get_command_argument(2,value=ch)\n+  read (ch,*) D%niter\n+  call get_command_argument(3,value=ch)\n+  read (ch,*) D%blockit\n+ end if\n+\n+ allocate(D%startsi(nxims))\n+ allocate(D%startsj(nyims))\n+ allocate(D%startsk(nzims))\n+ allocate(D%endsi(nxims))\n+ allocate(D%endsj(nyims))\n+ allocate(D%endsk(nzims))\n+\n+ D%startsi(1) = 1\n+ do i=2,nxims\n+   D%startsi(i) = D%startsi(i-1) + D%n/nxims\n+ end do\n+ D%endsi(nxims) = D%n\n+ D%endsi(1:nxims-1) = D%startsi(2:nxims) - 1\n+\n+ D%startsj(1) = 1\n+ do j=2,nyims\n+   D%startsj(j) = D%startsj(j-1) + D%n/nyims\n+ end do\n+ D%endsj(nyims) = D%n\n+ D%endsj(1:nyims-1) = D%startsj(2:nyims) - 1\n+\n+ D%startsk(1) = 1\n+ do k=2,nzims\n+   D%startsk(k) = D%startsk(k-1) + D%n/nzims\n+ end do\n+ D%endsk(nzims) = D%n\n+ D%endsk(1:nzims-1) = D%startsk(2:nzims) - 1\n+\n+ D%starti = D%startsi(iim)\n+ D%endi = D%endsi(iim)\n+ D%startj = D%startsj(jim)\n+ D%endj = D%endsj(jim)\n+ D%startk = D%startsk(kim)\n+ D%endk = D%endsk(kim)\n+\n+ write(*,*) D%startsi,D%endsi\n+ write(*,*) D%startsj,D%endsj\n+ write(*,*) D%startsk,D%endsk\n+\n+ !$hmpp JacKernel allocate, args[A,B].size={0:D%n+1,0:D%n+1,0:D%n+1}\n+ allocate(D%A(D%starti-1:D%endi+1,D%startj-1:D%endj+1,D%startk-1:D%endk+1),&\n+  D%B(D%starti-1:D%endi+1,D%startj-1:D%endj+1,D%startk-1:D%endk+1))\n+end program Jac"}]}