{"sha": "306133e3d42250f24023acc7f435ee2a63db0afe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA2MTMzZTNkNDIyNTBmMjQwMjNhY2M3ZjQzNWVlMmE2M2RiMGFmZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2011-11-12T15:57:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2011-11-12T15:57:03Z"}, "message": "re PR libstdc++/51083 (TR1 [tr.c99.cmath.over] and C++11 [cmplx.over] overloads not constrained)\n\n\tPR libstdc++/51083\n\t* include/ext/type_traits.h (__promote): Only define __type member\n\tfor integral and floating point types, to prevent math functions\n\tparticipating in overload resolution for other types.\n\t(__promote_2, __promote_3, __promote_4): Use __promote in default\n\ttemplate argument values, so deduction only succeeds for integral and\n\tfloating point types.\n\t* testsuite/26_numerics/cmath/51083.cc: New.\n\t* testsuite/26_numerics/complex/51083.cc: New.\n\t* testsuite/tr1/8_c_compatibility/cmath/51083.cc: New.\n\t* testsuite/tr1/8_c_compatibility/complex/51083.cc: New.\n\nFrom-SVN: r181321", "tree": {"sha": "b28a063e9a478a87290e6b1ddea155409d4e9cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b28a063e9a478a87290e6b1ddea155409d4e9cb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/306133e3d42250f24023acc7f435ee2a63db0afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306133e3d42250f24023acc7f435ee2a63db0afe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/306133e3d42250f24023acc7f435ee2a63db0afe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/306133e3d42250f24023acc7f435ee2a63db0afe/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33a55f2919b6667660c3d1f87ac0969fb76f26fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a55f2919b6667660c3d1f87ac0969fb76f26fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a55f2919b6667660c3d1f87ac0969fb76f26fe"}], "stats": {"total": 302, "additions": 277, "deletions": 25}, "files": [{"sha": "22663da3cac842548538735af3e4502452f3cfbf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=306133e3d42250f24023acc7f435ee2a63db0afe", "patch": "@@ -1,3 +1,17 @@\n+2011-11-12  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/51083\n+\t* include/ext/type_traits.h (__promote): Only define __type member\n+\tfor integral and floating point types, to prevent math functions\n+\tparticipating in overload resolution for other types.\n+\t(__promote_2, __promote_3, __promote_4): Use __promote in default\n+\ttemplate argument values, so deduction only succeeds for integral and\n+\tfloating point types.\n+\t* testsuite/26_numerics/cmath/51083.cc: New.\n+\t* testsuite/26_numerics/complex/51083.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/cmath/51083.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/complex/51083.cc: New.\n+\n 2011-11-10  Andrew MacLeod  <amacleod@redhat.com>\n \n \tPR middle-end/51038"}, {"sha": "b0fa36bcec886183d872e4b39464cc3ef47e883a", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=306133e3d42250f24023acc7f435ee2a63db0afe", "patch": "@@ -161,44 +161,50 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct __promote\n     { typedef double __type; };\n \n+  // No nested __type member for non-integer non-floating point types,\n+  // allows this type to be used for SFINAE to constrain overloads in\n+  // <cmath> and <complex> to only the intended types.\n   template<typename _Tp>\n     struct __promote<_Tp, false>\n-    { typedef _Tp __type; };\n+    { };\n+\n+  template<>\n+    struct __promote<long double>\n+    { typedef long double __type; };\n+\n+  template<>\n+    struct __promote<double>\n+    { typedef double __type; };\n+\n+  template<>\n+    struct __promote<float>\n+    { typedef float __type; };\n \n-  template<typename _Tp, typename _Up>\n+  template<typename _Tp, typename _Up,\n+           typename _Tp2 = typename __promote<_Tp>::__type,\n+           typename _Up2 = typename __promote<_Up>::__type>\n     struct __promote_2\n     {\n-    private:\n-      typedef typename __promote<_Tp>::__type __type1;\n-      typedef typename __promote<_Up>::__type __type2;\n-\n-    public:\n-      typedef __typeof__(__type1() + __type2()) __type;\n+      typedef __typeof__(_Tp2() + _Up2()) __type;\n     };\n \n-  template<typename _Tp, typename _Up, typename _Vp>\n+  template<typename _Tp, typename _Up, typename _Vp,\n+           typename _Tp2 = typename __promote<_Tp>::__type,\n+           typename _Up2 = typename __promote<_Up>::__type,\n+           typename _Vp2 = typename __promote<_Vp>::__type>\n     struct __promote_3\n     {\n-    private:\n-      typedef typename __promote<_Tp>::__type __type1;\n-      typedef typename __promote<_Up>::__type __type2;\n-      typedef typename __promote<_Vp>::__type __type3;\n-\n-    public:\n-      typedef __typeof__(__type1() + __type2() + __type3()) __type;\n+      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;\n     };\n \n-  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>\n+  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,\n+           typename _Tp2 = typename __promote<_Tp>::__type,\n+           typename _Up2 = typename __promote<_Up>::__type,\n+           typename _Vp2 = typename __promote<_Vp>::__type,\n+           typename _Wp2 = typename __promote<_Wp>::__type>\n     struct __promote_4\n     {\n-    private:\n-      typedef typename __promote<_Tp>::__type __type1;\n-      typedef typename __promote<_Up>::__type __type2;\n-      typedef typename __promote<_Vp>::__type __type3;\n-      typedef typename __promote<_Wp>::__type __type4;\n-\n-    public:\n-      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;\n+      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;\n     };\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "8ba9b10e5d8c16dcf3603e5a8e046f3d391a7090", "filename": "libstdc++-v3/testsuite/26_numerics/cmath/51083.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F51083.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F51083.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcmath%2F51083.cc?ref=306133e3d42250f24023acc7f435ee2a63db0afe", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <cmath>\n+\n+namespace a\n+{\n+  template<typename> class Mat { };\n+\n+  template<typename T> struct Mat2 : Mat<T> { };\n+\n+  template<typename T>\n+    int fdim(Mat<T>) { return 1; }\n+\n+  template<typename T, typename U>\n+    int floor(Mat<T>, U) { return 1; }\n+  template<typename T, typename U>\n+    int floor(T, Mat<U>) { return 1; }\n+\n+  template<typename T, typename U, typename V>\n+    int fma(Mat<T>, U, V) { return 1; }\n+  template<typename T, typename U, typename V>\n+    int fma(T, Mat<U>, V) { return 1; }\n+  template<typename T, typename U, typename V>\n+    int fma(T, U, Mat<V>) { return 1; }\n+}\n+\n+int main()\n+{\n+  int __attribute__((unused)) i;\n+\n+  using namespace std;\n+\n+  a::Mat2<double> c;\n+  i = fdim(c);\n+  i = floor(c, 0.);\n+  i = floor(0., c);\n+  i = floor(c, 1);\n+  i = floor(1, c);\n+  i = fma(c, 0., 1.);\n+  i = fma(0., c, 1.);\n+  i = fma(0., 1., c);\n+  i = fma(c, 0., 1);\n+  i = fma(0., c, 1);\n+  i = fma(0., 1, c);\n+}"}, {"sha": "54e781ba1a0367ecd2cae02a19a04f7658bb4209", "filename": "libstdc++-v3/testsuite/26_numerics/complex/51083.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2F51083.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2F51083.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2F51083.cc?ref=306133e3d42250f24023acc7f435ee2a63db0afe", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+\n+namespace a\n+{\n+  template<typename> class Mat { };\n+\n+  template<typename T> struct Mat2 : Mat<T> { };\n+\n+  template<typename T> int arg(Mat<T>) { return 1; }\n+  template<typename T> int conj(Mat<T>) { return 1; }\n+  template<typename T> int imag(Mat<T>) { return 1; }\n+  template<typename T> int norm(Mat<T>) { return 1; }\n+  template<typename T> int proj(Mat<T>) { return 1; }\n+  template<typename T> int real(Mat<T>) { return 1; }\n+\n+  template<typename T, typename U> int pow(Mat<T>, U) { return 1; }\n+  template<typename T, typename U> int pow(T, Mat<U>) { return 1; }\n+}\n+\n+int main()\n+{\n+  int __attribute__((unused)) i;\n+\n+  using namespace std;\n+\n+  a::Mat2< std::complex<double> > c;\n+  i = arg(c);\n+  i = conj(c);\n+  i = imag(c);\n+  i = norm(c);\n+  i = proj(c);\n+  i = real(c);\n+  i = pow(std::complex<float>(), c);\n+  i = pow(c, std::complex<float>());\n+}"}, {"sha": "504305a3043708538e9f3c388a5bdc8fd500a2cc", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/51083.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2F51083.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2F51083.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2F51083.cc?ref=306133e3d42250f24023acc7f435ee2a63db0afe", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/cmath>\n+\n+namespace a\n+{\n+  template<typename> class Mat { };\n+\n+  template<typename T> struct Mat2 : Mat<T> { };\n+\n+  template<typename T>\n+    int fdim(Mat<T>) { return 1; }\n+\n+  template<typename T, typename U>\n+    int floor(Mat<T>, U) { return 1; }\n+  template<typename T, typename U>\n+    int floor(T, Mat<U>) { return 1; }\n+\n+  template<typename T, typename U, typename V>\n+    int fma(Mat<T>, U, V) { return 1; }\n+  template<typename T, typename U, typename V>\n+    int fma(T, Mat<U>, V) { return 1; }\n+  template<typename T, typename U, typename V>\n+    int fma(T, U, Mat<V>) { return 1; }\n+}\n+\n+int main()\n+{\n+  int __attribute__((unused)) i;\n+\n+  using namespace std::tr1;\n+\n+  a::Mat2<double> c;\n+  i = fdim(c);\n+  i = floor(c, 0.);\n+  i = floor(0., c);\n+  i = floor(c, 1);\n+  i = floor(1, c);\n+  i = fma(c, 0., 1.);\n+  i = fma(0., c, 1.);\n+  i = fma(0., 1., c);\n+  i = fma(c, 0., 1);\n+  i = fma(0., c, 1);\n+  i = fma(0., 1, c);\n+}"}, {"sha": "f41914ee91e0964208d4200a0ae28dc01c2204d7", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/51083.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2F51083.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/306133e3d42250f24023acc7f435ee2a63db0afe/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2F51083.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2F51083.cc?ref=306133e3d42250f24023acc7f435ee2a63db0afe", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++0x\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <tr1/complex>\n+\n+namespace a\n+{\n+  template<typename> class Mat { };\n+\n+  template<typename T> struct Mat2 : Mat<T> { };\n+\n+  template<typename T> int arg(Mat<T>) { return 1; }\n+  template<typename T> int conj(Mat<T>) { return 1; }\n+  template<typename T> int imag(Mat<T>) { return 1; }\n+  template<typename T> int norm(Mat<T>) { return 1; }\n+  template<typename T> int proj(Mat<T>) { return 1; }\n+  template<typename T> int real(Mat<T>) { return 1; }\n+\n+  template<typename T, typename U> int pow(Mat<T>, U) { return 1; }\n+  template<typename T, typename U> int pow(T, Mat<U>) { return 1; }\n+}\n+\n+int main()\n+{\n+  int __attribute__((unused)) i;\n+\n+  using namespace std::tr1;\n+\n+  a::Mat2< std::complex<double> > c;\n+  i = arg(c);\n+  i = conj(c);\n+  i = imag(c);\n+  i = norm(c);\n+  i = proj(c);\n+  i = real(c);\n+  i = pow(std::complex<float>(), c);\n+  i = pow(c, std::complex<float>());\n+}"}]}