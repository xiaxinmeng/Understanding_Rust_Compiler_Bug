{"sha": "11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFlZjBiMjJkNjhjZDEzZTJjMGYwMGZmNTMzMWI2YWU4NzVmMzUzMw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-01-07T05:31:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-01-07T05:31:51Z"}, "message": "re PR middle-end/81897 (spurious -Wmaybe-uninitialized warning)\n\n\tPR middle-end/81897\n\t* tree-ssa-uninit.c (compute_control_dep_chain): Do not bail on\n\tbasic blocks with a small number of successors.\n\t(convert_control_dep_chain_into_preds): Improve handling of\n\tforwarder blocks.\n\t(dump_predicates): Split apart into...\n\t(dump_pred_chain): ...here...\n\t(dump_pred_info): ...and here.\n\t(can_one_predicate_be_invalidated_p): Add debugging printfs.\n\t(can_chain_union_be_invalidated_p): Improve check for invalidation\n\tof paths.\n\t(uninit_uses_cannot_happen): Avoid unnecessary if\n\tconvert_control_dep_chain_into_preds yielded nothing.\n\n\tPR middle-end/81897\n\t* gcc.dg/uninit-pr81897.c: New test.\n\nFrom-SVN: r256320", "tree": {"sha": "8a640e451ad0b2d4f93d8c311ab7310b9933986c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a640e451ad0b2d4f93d8c311ab7310b9933986c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f59d40267ba8eb4e938c02d1a8a0c890cbf1f359", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59d40267ba8eb4e938c02d1a8a0c890cbf1f359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59d40267ba8eb4e938c02d1a8a0c890cbf1f359"}], "stats": {"total": 163, "additions": 123, "deletions": 40}, "files": [{"sha": "f6fe407051aac4d6562223f71015cbd9c6a67c8e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "patch": "@@ -1,3 +1,19 @@\n+2018-01-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/81897\n+\t* tree-ssa-uninit.c (compute_control_dep_chain): Do not bail on\n+\tbasic blocks with a small number of successors.\n+\t(convert_control_dep_chain_into_preds): Improve handling of\n+\tforwarder blocks.\n+\t(dump_predicates): Split apart into...\n+\t(dump_pred_chain): ...here...\n+\t(dump_pred_info): ...and here.\n+\t(can_one_predicate_be_invalidated_p): Add debugging printfs.\n+\t(can_chain_union_be_invalidated_p): Improve check for invalidation\n+\tof paths.\n+\t(uninit_uses_cannot_happen): Avoid unnecessary if\n+\tconvert_control_dep_chain_into_preds yielded nothing.\n+\n 2018-01-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83640"}, {"sha": "218e7821df7de923d7d91215f46e91292a0515ed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "patch": "@@ -1,3 +1,8 @@\n+2018-01-06  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR middle-end/81897\n+\t* gcc.dg/uninit-pr81897.c: New test.\n+\n 2018-01-06  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/83640"}, {"sha": "0323050839d70017cae19c9fa0d81abb4fb917e0", "filename": "gcc/testsuite/gcc.dg/uninit-pr81897.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr81897.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr81897.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr81897.c?ref=11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile }  */\n+/* { dg-options \"-O2 -Wuninitialized\" } */\n+\n+int f(void);\n+static inline void rcu_read_unlock(void)\n+{\n+        static _Bool __warned;\n+        if (f() && !__warned && !f()) {\n+                __warned = 1;\n+        }\n+}\n+int inet6_rtm_getroute(void)\n+{\n+        int dst;\n+        int fibmatch = f();\n+\n+        if (!fibmatch)\n+                dst = f();\n+        rcu_read_unlock();\n+        if (fibmatch)\n+                dst = 0;\n+\n+        return dst;\n+}"}, {"sha": "382394762865f14b8834dcafa9fd8c801448a006", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 78, "deletions": 40, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11ef0b22d68cd13e2c0f00ff5331b6ae875f3533/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=11ef0b22d68cd13e2c0f00ff5331b6ae875f3533", "patch": "@@ -33,6 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa.h\"\n #include \"params.h\"\n #include \"tree-cfg.h\"\n+#include \"cfghooks.h\"\n \n /* This implements the pass that does predicate aware warning on uses of\n    possibly uninitialized variables.  The pass first collects the set of\n@@ -543,9 +544,6 @@ compute_control_dep_chain (basic_block bb, basic_block dep_bb,\n   bool found_cd_chain = false;\n   size_t cur_chain_len = 0;\n \n-  if (EDGE_COUNT (bb->succs) < 2)\n-    return false;\n-\n   if (*num_calls > PARAM_VALUE (PARAM_UNINIT_CONTROL_DEP_ATTEMPTS))\n     return false;\n   ++*num_calls;\n@@ -671,11 +669,9 @@ convert_control_dep_chain_into_preds (vec<edge> *dep_chains,\n \t  e = one_cd_chain[j];\n \t  guard_bb = e->src;\n \t  gsi = gsi_last_bb (guard_bb);\n-\t  if (gsi_end_p (gsi))\n-\t    {\n-\t      has_valid_pred = false;\n-\t      break;\n-\t    }\n+\t  /* Ignore empty BBs as they're basically forwarder blocks.  */\n+\t  if (empty_block_p (guard_bb) && single_succ_p (guard_bb))\n+\t    continue;\n \t  cond_stmt = gsi_stmt (gsi);\n \t  if (is_gimple_call (cond_stmt) && EDGE_COUNT (e->src->succs) >= 2)\n \t    /* Ignore EH edge.  Can add assertion on the other edge's flag.  */\n@@ -916,38 +912,49 @@ find_def_preds (pred_chain_union *preds, gphi *phi)\n   return has_valid_pred;\n }\n \n+/* Dump a pred_info.  */\n+\n+static void\n+dump_pred_info (pred_info one_pred)\n+{\n+  if (one_pred.invert)\n+    fprintf (dump_file, \" (.NOT.) \");\n+  print_generic_expr (dump_file, one_pred.pred_lhs);\n+  fprintf (dump_file, \" %s \", op_symbol_code (one_pred.cond_code));\n+  print_generic_expr (dump_file, one_pred.pred_rhs);\n+}\n+\n+/* Dump a pred_chain.  */\n+\n+static void\n+dump_pred_chain (pred_chain one_pred_chain)\n+{\n+  size_t np = one_pred_chain.length ();\n+  for (size_t j = 0; j < np; j++)\n+    {\n+      dump_pred_info (one_pred_chain[j]);\n+      if (j < np - 1)\n+\tfprintf (dump_file, \" (.AND.) \");\n+      else\n+\tfprintf (dump_file, \"\\n\");\n+    }\n+}\n+\n /* Dumps the predicates (PREDS) for USESTMT.  */\n \n static void\n dump_predicates (gimple *usestmt, pred_chain_union preds, const char *msg)\n {\n-  size_t i, j;\n-  pred_chain one_pred_chain = vNULL;\n   fprintf (dump_file, \"%s\", msg);\n-  print_gimple_stmt (dump_file, usestmt, 0);\n-  fprintf (dump_file, \"is guarded by :\\n\\n\");\n+  if (usestmt)\n+    {\n+      print_gimple_stmt (dump_file, usestmt, 0);\n+      fprintf (dump_file, \"is guarded by :\\n\\n\");\n+    }\n   size_t num_preds = preds.length ();\n-  /* Do some dumping here:  */\n-  for (i = 0; i < num_preds; i++)\n+  for (size_t i = 0; i < num_preds; i++)\n     {\n-      size_t np;\n-\n-      one_pred_chain = preds[i];\n-      np = one_pred_chain.length ();\n-\n-      for (j = 0; j < np; j++)\n-\t{\n-\t  pred_info one_pred = one_pred_chain[j];\n-\t  if (one_pred.invert)\n-\t    fprintf (dump_file, \" (.NOT.) \");\n-\t  print_generic_expr (dump_file, one_pred.pred_lhs);\n-\t  fprintf (dump_file, \" %s \", op_symbol_code (one_pred.cond_code));\n-\t  print_generic_expr (dump_file, one_pred.pred_rhs);\n-\t  if (j < np - 1)\n-\t    fprintf (dump_file, \" (.AND.) \");\n-\t  else\n-\t    fprintf (dump_file, \"\\n\");\n-\t}\n+      dump_pred_chain (preds[i]);\n       if (i < num_preds - 1)\n \tfprintf (dump_file, \"(.OR.)\\n\");\n       else\n@@ -2259,12 +2266,19 @@ normalize_preds (pred_chain_union preds, gimple *use_or_def, bool is_use)\n }\n \n /* Return TRUE if PREDICATE can be invalidated by any individual\n-   predicate in WORKLIST.  */\n+   predicate in USE_GUARD.  */\n \n static bool\n can_one_predicate_be_invalidated_p (pred_info predicate,\n \t\t\t\t    pred_chain use_guard)\n {\n+  if (dump_file && dump_flags & TDF_DETAILS)\n+    {\n+      fprintf (dump_file, \"Testing if this predicate: \");\n+      dump_pred_info (predicate);\n+      fprintf (dump_file, \"\\n...can be invalidated by a USE guard of: \");\n+      dump_pred_chain (use_guard);\n+    }\n   for (size_t i = 0; i < use_guard.length (); ++i)\n     {\n       /* NOTE: This is a very simple check, and only understands an\n@@ -2273,7 +2287,15 @@ can_one_predicate_be_invalidated_p (pred_info predicate,\n \t invalidate with say [i > 5] or [i == 8].  There is certainly\n \t room for improvement here.  */\n       if (pred_neg_p (predicate, use_guard[i]))\n-\treturn true;\n+\t{\n+\t  if (dump_file && dump_flags & TDF_DETAILS)\n+\t    {\n+\t      fprintf (dump_file, \"  Predicate was invalidated by: \");\n+\t      dump_pred_info (use_guard[i]);\n+\t      fputc ('\\n', dump_file);\n+\t    }\n+\t  return true;\n+\t}\n     }\n   return false;\n }\n@@ -2287,12 +2309,22 @@ can_chain_union_be_invalidated_p (pred_chain_union uninit_pred,\n {\n   if (uninit_pred.is_empty ())\n     return false;\n+  if (dump_file && dump_flags & TDF_DETAILS)\n+    dump_predicates (NULL, uninit_pred,\n+\t\t     \"Testing if anything here can be invalidated: \");\n   for (size_t i = 0; i < uninit_pred.length (); ++i)\n     {\n       pred_chain c = uninit_pred[i];\n-      for (size_t j = 0; j < c.length (); ++j)\n-\tif (!can_one_predicate_be_invalidated_p (c[j], use_guard))\n-\t  return false;\n+      size_t j;\n+      for (j = 0; j < c.length (); ++j)\n+\tif (can_one_predicate_be_invalidated_p (c[j], use_guard))\n+\t  break;\n+\n+      /* If we were unable to invalidate any predicate in C, then there\n+\t is a viable path from entry to the PHI where the PHI takes\n+\t an uninitialized value and continues to a use of the PHI.  */\n+      if (j == c.length ())\n+\treturn false;\n     }\n   return true;\n }\n@@ -2334,18 +2366,24 @@ uninit_uses_cannot_happen (gphi *phi, unsigned uninit_opnds,\n \n       /* Build the control dependency chain for uninit operand `i'...  */\n       uninit_preds = vNULL;\n-      if (!compute_control_dep_chain (find_dom (e->src),\n+      if (!compute_control_dep_chain (ENTRY_BLOCK_PTR_FOR_FN (cfun),\n \t\t\t\t      e->src, dep_chains, &num_chains,\n \t\t\t\t      &cur_chain, &num_calls))\n \t{\n \t  ret = false;\n \t  break;\n \t}\n       /* ...and convert it into a set of predicates.  */\n-      convert_control_dep_chain_into_preds (dep_chains, num_chains,\n-\t\t\t\t\t    &uninit_preds);\n+      bool has_valid_preds\n+\t= convert_control_dep_chain_into_preds (dep_chains, num_chains,\n+\t\t\t\t\t\t&uninit_preds);\n       for (size_t j = 0; j < num_chains; ++j)\n \tdep_chains[j].release ();\n+      if (!has_valid_preds)\n+\t{\n+\t  ret = false;\n+\t  break;\n+\t}\n       simplify_preds (&uninit_preds, NULL, false);\n       uninit_preds = normalize_preds (uninit_preds, NULL, false);\n "}]}