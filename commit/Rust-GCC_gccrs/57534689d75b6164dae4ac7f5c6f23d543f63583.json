{"sha": "57534689d75b6164dae4ac7f5c6f23d543f63583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1MzQ2ODlkNzViNjE2NGRhZTRhYzdmNWM2ZjIzZDU0M2Y2MzU4Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-08T21:29:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-08T21:29:44Z"}, "message": "re PR target/55023 (hppa: wrong code generated with tail call optimisation)\n\n\tPR target/55023\n\tPR middle-end/64388\n\t* dse.c (struct insn_info): Mention frame_read set also\n\tbefore reload for tail calls on some targets.\n\t(scan_insn): Revert 2014-12-22 change.  Set frame_read\n\talso before reload for tail calls if\n\tHARD_FRAME_POINTER_IS_ARG_POINTER.  Call add_wild_read\n\tinstead of add_non_frame_wild_read for non-const/memset\n\ttail calls after reload.\n\nFrom-SVN: r219361", "tree": {"sha": "ad02b36a3b21a9b6133dce14ecbc824729fff439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad02b36a3b21a9b6133dce14ecbc824729fff439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57534689d75b6164dae4ac7f5c6f23d543f63583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57534689d75b6164dae4ac7f5c6f23d543f63583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57534689d75b6164dae4ac7f5c6f23d543f63583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57534689d75b6164dae4ac7f5c6f23d543f63583/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5481fc443060065cde9ed7bc6f3fd83bc1ecc4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5481fc443060065cde9ed7bc6f3fd83bc1ecc4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5481fc443060065cde9ed7bc6f3fd83bc1ecc4c"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "53eb2f29a19fb2dbc8cee1f29c826cf2da2d0410", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57534689d75b6164dae4ac7f5c6f23d543f63583/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57534689d75b6164dae4ac7f5c6f23d543f63583/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57534689d75b6164dae4ac7f5c6f23d543f63583", "patch": "@@ -1,3 +1,15 @@\n+2015-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/55023\n+\tPR middle-end/64388\n+\t* dse.c (struct insn_info): Mention frame_read set also\n+\tbefore reload for tail calls on some targets.\n+\t(scan_insn): Revert 2014-12-22 change.  Set frame_read\n+\talso before reload for tail calls if\n+\tHARD_FRAME_POINTER_IS_ARG_POINTER.  Call add_wild_read\n+\tinstead of add_non_frame_wild_read for non-const/memset\n+\ttail calls after reload.\n+\n 2015-01-08  Jason Merrill  <jason@redhat.com>\n \n \t* ubsan.c (do_ubsan_in_current_function): New."}, {"sha": "1ca1bda41bdc532f137036c5a4e1cf8cb497bc13", "filename": "gcc/dse.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57534689d75b6164dae4ac7f5c6f23d543f63583/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57534689d75b6164dae4ac7f5c6f23d543f63583/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=57534689d75b6164dae4ac7f5c6f23d543f63583", "patch": "@@ -371,9 +371,11 @@ struct insn_info\n \teither stack pointer or hard frame pointer based.  This means\n \tthat we have no other choice than also killing all the frame\n \tpointer based stores upon encountering a const function call.\n-     This field is set after reload for const function calls.  Having\n-     this set is less severe than a wild read, it just means that all\n-     the frame related stores are killed rather than all the stores.  */\n+     This field is set after reload for const function calls and before\n+     reload for const tail function calls on targets where arg pointer\n+     is the frame pointer.  Having this set is less severe than a wild\n+     read, it just means that all the frame related stores are killed\n+     rather than all the stores.  */\n   bool frame_read;\n \n   /* This field is only used for the processing of const functions.\n@@ -2483,17 +2485,6 @@ scan_insn (bb_info_t bb_info, rtx_insn *insn)\n \n       insn_info->cannot_delete = true;\n \n-      /* Arguments for a sibling call that are pushed to memory are passed\n-\t using the incoming argument pointer of the current function.  These\n-\t may or may not be frame related depending on the target.  Since\n-\t argument pointer related stores are not currently tracked, we treat\n-\t a sibling call as though it does a wild read.  */\n-      if (SIBLING_CALL_P (insn))\n-\t{\n-\t  add_wild_read (bb_info);\n-\t  return;\n-\t}\n-\n       /* Const functions cannot do anything bad i.e. read memory,\n \t however, they can read their parameters which may have\n \t been pushed onto the stack.\n@@ -2527,7 +2518,13 @@ scan_insn (bb_info_t bb_info, rtx_insn *insn)\n \t\t     const_call ? \"const\" : \"memset\", INSN_UID (insn));\n \n \t  /* See the head comment of the frame_read field.  */\n-\t  if (reload_completed)\n+\t  if (reload_completed\n+\t      /* Tail calls are storing their arguments using\n+\t\t arg pointer.  If it is a frame pointer on the target,\n+\t\t even before reload we need to kill frame pointer based\n+\t\t stores.  */\n+\t      || (SIBLING_CALL_P (insn)\n+\t\t  && HARD_FRAME_POINTER_IS_ARG_POINTER))\n \t    insn_info->frame_read = true;\n \n \t  /* Loop over the active stores and remove those which are\n@@ -2601,7 +2598,11 @@ scan_insn (bb_info_t bb_info, rtx_insn *insn)\n \t\t}\n \t    }\n \t}\n-\n+      else if (SIBLING_CALL_P (insn) && reload_completed)\n+\t/* Arguments for a sibling call that are pushed to memory are passed\n+\t   using the incoming argument pointer of the current function.  After\n+\t   reload that might be (and likely is) frame pointer based.  */\n+\tadd_wild_read (bb_info);\n       else\n \t/* Every other call, including pure functions, may read any memory\n            that is not relative to the frame.  */"}]}