{"sha": "8cb66696c10894bea286b4175c8a7d8fe14c6b05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiNjY2OTZjMTA4OTRiZWEyODZiNDE3NWM4YTdkOGZlMTRjNmIwNQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-10-01T00:07:52Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-10-01T00:07:52Z"}, "message": "s390-protos.h (s390_expand_logical_operator): Add prototype.\n\n\t* config/s390/s390-protos.h (s390_expand_logical_operator): Add\n\tprototype.\n\t(s390_logical_operator_ok_p): Likewise.\n\t* config/s390/s390.c (s390_expand_logical_operator): New function.\n\t(s390_logical_operator_ok_p): Likewise.\n\t* config/s390/s390.md (\"anddi3\"): New expander.\n\t(\"*anddi3\"): Rename from old anddi3 pattern, add Q->Q alternative.\n\t(\"*anddi3_ss\", \"*anddi3_ss_inv\"): Remove.\n\t(\"andsi3\"): Use s390_expand_logical_operator.\n\t(\"*andsi3_esa\", \"*andsi3_zarch\"): Add Q->Q alternative.\n\t(\"*andsi3_ss\", \"*andsi3_ss_inv\"): Remove.\n\t(\"andhi3\"): New expander.\n\t(\"*andhi3_zarch\", \"*andhi3_esa\"): New patterns.\n\t(\"andhi3\", \"*andhi3_ni\", \"*andhi3_ss\", \"*andhi3_ss_inv\"): Remove.\n\t(\"andqi3\"): New expander.\n\t(\"*andqi3_zarch\", \"*andqi3_esa\"): New patterns.\n\t(\"andqi3\", \"*andqi3_ni\", \"*andqi3_ss\", \"*andqi3_ss_inv\"): Remove.\n\t(\"iordi3\"): New expander.\n\t(\"*iordi3\"): Rename from old iordi3 pattern, add Q->Q alternative.\n\t(\"*iordi3_ss\", \"*iordi3_ss_inv\"): Remove.\n\t(\"iorsi3\"): Use s390_expand_logical_operator.\n\t(\"*iorsi3_esa\", \"*iorsi3_zarch\"): Add Q->Q alternative.\n\t(\"*iorsi3_ss\", \"*iorsi3_ss_inv\"): Remove.\n\t(\"iorhi3\"): New expiorer.\n\t(\"*iorhi3_zarch\", \"*iorhi3_esa\"): New patterns.\n\t(\"iorhi3\", \"*iorhi3_ni\", \"*iorhi3_ss\", \"*iorhi3_ss_inv\"): Remove.\n\t(\"iorqi3\"): New expiorer.\n\t(\"*iorqi3_zarch\", \"*iorqi3_esa\"): New patterns.\n\t(\"iorqi3\", \"*iorqi3_ni\", \"*iorqi3_ss\", \"*iorqi3_ss_inv\"): Remove.\n\t(\"xordi3\"): New expander.\n\t(\"*xordi3\"): Rename from old xordi3 pattern, add Q->Q alternative.\n\t(\"*xordi3_ss\", \"*xordi3_ss_inv\"): Remove.\n\t(\"xorsi3\"): New expander.\n\t(\"*xorsi3\"): Rename from old xorsi3 pattern, add Q->Q alternative.\n\t(\"*xorsi3_ss\", \"*xorsi3_ss_inv\"): Remove.\n\t(\"xorhi3\"): New expander.\n\t(\"*xorqi3\"): Rename from old xorhi3 pattern, add Q->Q alternative.\n\t(\"*xorhi3_ss\", \"*xorhi3_ss_inv\"): Remove.\n\t(\"xorqi3\"): New expander.\n\t(\"*xorqi3\"): Rename from old xorqi3 pattern, add Q->Q alternative.\n\t(\"*xorqi3_ss\", \"*xorqi3_ss_inv\"): Remove.\n\nFrom-SVN: r88370", "tree": {"sha": "bb7f7a8c4463b4bcbdc2f45520d147b4204edae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb7f7a8c4463b4bcbdc2f45520d147b4204edae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb66696c10894bea286b4175c8a7d8fe14c6b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb66696c10894bea286b4175c8a7d8fe14c6b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb66696c10894bea286b4175c8a7d8fe14c6b05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb66696c10894bea286b4175c8a7d8fe14c6b05/comments", "author": null, "committer": null, "parents": [{"sha": "7d103eb5d4826dd66a937ee67eabf24256ed54bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d103eb5d4826dd66a937ee67eabf24256ed54bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d103eb5d4826dd66a937ee67eabf24256ed54bb"}], "stats": {"total": 705, "additions": 350, "deletions": 355}, "files": [{"sha": "59b82f9c62bb143c9aa553a9bcc467d98cd85707", "filename": "gcc/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8cb66696c10894bea286b4175c8a7d8fe14c6b05", "patch": "@@ -1,3 +1,47 @@\n+2004-09-30  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (s390_expand_logical_operator): Add\n+\tprototype.\n+\t(s390_logical_operator_ok_p): Likewise.\n+\t* config/s390/s390.c (s390_expand_logical_operator): New function.\n+\t(s390_logical_operator_ok_p): Likewise.\n+\t* config/s390/s390.md (\"anddi3\"): New expander.\n+\t(\"*anddi3\"): Rename from old anddi3 pattern, add Q->Q alternative.\n+\t(\"*anddi3_ss\", \"*anddi3_ss_inv\"): Remove.\n+\t(\"andsi3\"): Use s390_expand_logical_operator.\n+\t(\"*andsi3_esa\", \"*andsi3_zarch\"): Add Q->Q alternative.\n+\t(\"*andsi3_ss\", \"*andsi3_ss_inv\"): Remove.\n+\t(\"andhi3\"): New expander.\n+\t(\"*andhi3_zarch\", \"*andhi3_esa\"): New patterns.\n+\t(\"andhi3\", \"*andhi3_ni\", \"*andhi3_ss\", \"*andhi3_ss_inv\"): Remove.\n+\t(\"andqi3\"): New expander.\n+\t(\"*andqi3_zarch\", \"*andqi3_esa\"): New patterns.\n+\t(\"andqi3\", \"*andqi3_ni\", \"*andqi3_ss\", \"*andqi3_ss_inv\"): Remove.\n+\t(\"iordi3\"): New expander.\n+\t(\"*iordi3\"): Rename from old iordi3 pattern, add Q->Q alternative.\n+\t(\"*iordi3_ss\", \"*iordi3_ss_inv\"): Remove.\n+\t(\"iorsi3\"): Use s390_expand_logical_operator.\n+\t(\"*iorsi3_esa\", \"*iorsi3_zarch\"): Add Q->Q alternative.\n+\t(\"*iorsi3_ss\", \"*iorsi3_ss_inv\"): Remove.\n+\t(\"iorhi3\"): New expiorer.\n+\t(\"*iorhi3_zarch\", \"*iorhi3_esa\"): New patterns.\n+\t(\"iorhi3\", \"*iorhi3_ni\", \"*iorhi3_ss\", \"*iorhi3_ss_inv\"): Remove.\n+\t(\"iorqi3\"): New expiorer.\n+\t(\"*iorqi3_zarch\", \"*iorqi3_esa\"): New patterns.\n+\t(\"iorqi3\", \"*iorqi3_ni\", \"*iorqi3_ss\", \"*iorqi3_ss_inv\"): Remove.\n+\t(\"xordi3\"): New expander.\n+\t(\"*xordi3\"): Rename from old xordi3 pattern, add Q->Q alternative.\n+\t(\"*xordi3_ss\", \"*xordi3_ss_inv\"): Remove.\n+\t(\"xorsi3\"): New expander.\n+\t(\"*xorsi3\"): Rename from old xorsi3 pattern, add Q->Q alternative.\n+\t(\"*xorsi3_ss\", \"*xorsi3_ss_inv\"): Remove.\n+\t(\"xorhi3\"): New expander.\n+\t(\"*xorqi3\"): Rename from old xorhi3 pattern, add Q->Q alternative.\n+\t(\"*xorhi3_ss\", \"*xorhi3_ss_inv\"): Remove.\n+\t(\"xorqi3\"): New expander.\n+\t(\"*xorqi3\"): Rename from old xorqi3 pattern, add Q->Q alternative.\n+\t(\"*xorqi3_ss\", \"*xorqi3_ss_inv\"): Remove.\n+\n 2004-09-30  Roger Sayle  <roger@eyesopen.com>\n \n \t* combine.c (force_to_mode) <NE_EXPR>: Only convert the expression"}, {"sha": "8846f25c31039943b66fb5ceffe7d5424cbae13a", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=8cb66696c10894bea286b4175c8a7d8fe14c6b05", "patch": "@@ -84,6 +84,9 @@ extern bool s390_expand_addcc (enum rtx_code, rtx, rtx, rtx, rtx, rtx);\n extern rtx s390_return_addr_rtx (int, rtx);\n extern rtx s390_back_chain_rtx (void);\n extern rtx s390_emit_call (rtx, rtx, rtx, rtx);\n+extern void s390_expand_logical_operator (enum rtx_code,\n+\t\t\t\t\t  enum machine_mode, rtx *);\n+extern bool s390_logical_operator_ok_p (rtx *);\n \n extern bool s390_output_addr_const_extra (FILE*, rtx);\n extern void print_operand_address (FILE *, rtx);"}, {"sha": "411b06f7f32d4be2438d561edb974f03922a19dc", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=8cb66696c10894bea286b4175c8a7d8fe14c6b05", "patch": "@@ -1059,6 +1059,76 @@ s390_split_ok_p (rtx dst, rtx src, enum machine_mode mode, int first_subword)\n   return true;\n }\n \n+/* Expand logical operator CODE in mode MODE with operands OPERANDS.  */\n+\n+void\n+s390_expand_logical_operator (enum rtx_code code, enum machine_mode mode,\n+\t\t\t      rtx *operands)\n+{\n+  enum machine_mode wmode = mode;\n+  rtx dst = operands[0];\n+  rtx src1 = operands[1];\n+  rtx src2 = operands[2];\n+  rtx op, clob, tem;\n+\n+  /* If we cannot handle the operation directly, use a temp register.  */\n+  if (!s390_logical_operator_ok_p (operands))\n+    dst = gen_reg_rtx (mode);\n+\n+  /* QImode and HImode patterns make sense only if we have a destination\n+     in memory.  Otherwise perform the operation in SImode.  */\n+  if ((mode == QImode || mode == HImode) && GET_CODE (dst) != MEM)\n+    wmode = SImode;\n+\n+  /* Widen operands if required.  */\n+  if (mode != wmode)\n+    {\n+      if (GET_CODE (dst) == SUBREG\n+\t  && (tem = simplify_subreg (wmode, dst, mode, 0)) != 0)\n+\tdst = tem;\n+      else if (REG_P (dst))\n+\tdst = gen_rtx_SUBREG (wmode, dst, 0);\n+      else\n+        dst = gen_reg_rtx (wmode);\n+\n+      if (GET_CODE (src1) == SUBREG\n+\t  && (tem = simplify_subreg (wmode, src1, mode, 0)) != 0)\n+\tsrc1 = tem;\n+      else if (GET_MODE (src1) != VOIDmode)\n+\tsrc1 = gen_rtx_SUBREG (wmode, force_reg (mode, src1), 0);\n+\n+      if (GET_CODE (src2) == SUBREG\n+\t  && (tem = simplify_subreg (wmode, src2, mode, 0)) != 0)\n+\tsrc2 = tem;\n+      else if (GET_MODE (src2) != VOIDmode)\n+\tsrc2 = gen_rtx_SUBREG (wmode, force_reg (mode, src2), 0);\n+    }\n+\n+  /* Emit the instruction.  */\n+  op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_ee (code, wmode, src1, src2));\n+  clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n+  emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clob)));\n+\n+  /* Fix up the destination if needed.  */\n+  if (dst != operands[0])\n+    emit_move_insn (operands[0], gen_lowpart (mode, dst));\n+}\n+\n+/* Check whether OPERANDS are OK for a logical operation (AND, IOR, XOR).  */\n+\n+bool\n+s390_logical_operator_ok_p (rtx *operands)\n+{\n+  /* If the destination operand is in memory, it needs to coincide\n+     with one of the source operands.  After reload, it has to be\n+     the first source operand.  */\n+  if (GET_CODE (operands[0]) == MEM)\n+    return rtx_equal_p (operands[0], operands[1])\n+\t   || (!reload_completed && rtx_equal_p (operands[0], operands[2]));\n+\n+  return true;\n+}\n+\n \n /* Change optimizations to be performed, depending on the\n    optimization level."}, {"sha": "86d13b8a871889970f696632304ee691ec737984", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 233, "deletions": 355, "changes": 588, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb66696c10894bea286b4175c8a7d8fe14c6b05/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=8cb66696c10894bea286b4175c8a7d8fe14c6b05", "patch": "@@ -5007,41 +5007,33 @@\n    ng\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_insn \"anddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d,d,d,d,d\")\n-\t(and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"d,o,0,0,0,0,0,0\")\n- \t\t(match_operand:DI 2 \"general_operand\"\n-\t\t\t\t    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,d,m\")))\n-     (clobber (reg:CC 33))]\n-   \"TARGET_64BIT\"\n-   \"@\n-    #\n-    #\n-    nihh\\t%0,%j2\n-    nihl\\t%0,%j2\n-    nilh\\t%0,%j2\n-    nill\\t%0,%j2\n-    ngr\\t%0,%2\n-    ng\\t%0,%2\"\n- [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RRE,RXY\")])\n-\n-(define_insn \"*anddi3_ss\"\n-  [(set (match_operand:DI 0 \"s_operand\" \"=Q\")\n-        (and:DI (match_dup 0)\n-                (match_operand:DI 1 \"s_imm_operand\" \"Q\")))\n+(define_insn \"*anddi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,d,Q\")\n+        (and:DI (match_operand:DI 1 \"nonimmediate_operand\"\n+                                    \"%d,o,0,0,0,0,0,0,0\")\n+                (match_operand:DI 2 \"general_operand\"\n+                                    \"M,M,N0HDF,N1HDF,N2HDF,N3HDF,d,m,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"nc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   #\n+   #\n+   nihh\\t%0,%j2\n+   nihl\\t%0,%j2\n+   nilh\\t%0,%j2\n+   nill\\t%0,%j2\n+   ngr\\t%0,%2\n+   ng\\t%0,%2\n+   nc\\t%O0(8,%R0),%2\"\n+  [(set_attr \"op_type\" \"RRE,RXE,RI,RI,RI,RI,RRE,RXY,SS\")])\n \n-(define_insn \"*anddi3_ss_inv\"\n-  [(set (match_operand:DI 0 \"s_operand\" \"=Q\")\n-        (and:DI (match_operand:DI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"anddi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+        (and:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"nc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"TARGET_64BIT\"\n+  \"s390_expand_logical_operator (AND, DImode, operands); DONE;\")\n \n ;\n ; andsi3 instruction pattern(s).\n@@ -5076,149 +5068,115 @@\n    ny\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n-(define_expand \"andsi3\"\n-  [(parallel\n-    [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t  (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"general_operand\" \"\")))\n-     (clobber (reg:CC 33))])]\n-  \"\"\n-  \"\")\n-\n (define_insn \"*andsi3_zarch\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d,d,d,d\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"d,o,0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"M,M,N0HSF,N1HSF,d,R,T\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,d,Q\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%d,o,0,0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"M,M,N0HSF,N1HSF,d,R,T,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    #\n    #\n    nilh\\t%0,%j2\n    nill\\t%0,%j2\n    nr\\t%0,%2\n    n\\t%0,%2\n-   ny\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RR,RX,RXY\")])\n+   ny\\t%0,%2\n+   nc\\t%O0(4,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXE,RI,RI,RR,RX,RXY,SS\")])\n \n (define_insn \"*andsi3_esa\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R\")))\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"d,R,Q\")))\n    (clobber (reg:CC 33))]\n-  \"!TARGET_ZARCH\"\n+  \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n-   n\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX\")])\n-\n-(define_insn \"*andsi3_ss\"\n-  [(set (match_operand:SI 0 \"s_operand\" \"=Q\")\n-        (and:SI (match_dup 0)\n-                (match_operand:SI 1 \"s_imm_operand\" \"Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"nc\\t%O0(4,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+   n\\t%0,%2\n+   nc\\t%O0(4,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RX,SS\")])\n \n-(define_insn \"*andsi3_ss_inv\"\n-  [(set (match_operand:SI 0 \"s_operand\" \"=Q\")\n-        (and:SI (match_operand:SI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"andsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+        (and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:SI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"nc\\t%O0(4,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_expand_logical_operator (AND, SImode, operands); DONE;\")\n \n ;\n ; andhi3 instruction pattern(s).\n ;\n \n-(define_insn \"*andhi3_ni\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n-        (and:HI (match_operand:HI 1 \"register_operand\" \"%0,0\")\n-                (match_operand:HI 2 \"nonmemory_operand\" \"d,n\")))\n+(define_insn \"*andhi3_zarch\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n+        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n-   nill\\t%0,%x2\"\n-  [(set_attr \"op_type\"  \"RR,RI\")])\n-\n-(define_insn \"andhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (and:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-                (match_operand:HI 2 \"nonmemory_operand\" \"d\")))\n+   nill\\t%0,%x2\n+   nc\\t%O0(2,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RI,SS\")])\n+\n+(define_insn \"*andhi3_esa\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,Q\")\n+        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"nr\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n-(define_insn \"*andhi3_ss\"\n-  [(set (match_operand:HI 0 \"s_operand\" \"=Q\")\n-        (and:HI (match_dup 0)\n-                (match_operand:HI 1 \"s_imm_operand\" \"Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"nc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   nr\\t%0,%2\n+   nc\\t%O0(2,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,SS\")])\n \n-(define_insn \"*andhi3_ss_inv\"\n-  [(set (match_operand:HI 0 \"s_operand\" \"=Q\")\n-        (and:HI (match_operand:HI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"andhi3\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+        (and:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:HI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"nc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_expand_logical_operator (AND, HImode, operands); DONE;\")\n \n ;\n ; andqi3 instruction pattern(s).\n ;\n \n-(define_insn \"*andqi3_ni\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d,d\")\n-        (and:QI (match_operand:QI 1 \"register_operand\" \"%0,0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"d,n\")))\n+(define_insn \"*andqi3_zarch\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,Q,S,Q\")\n+        (and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"d,n,n,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    nr\\t%0,%2\n-   nill\\t%0,%b2\"\n-  [(set_attr \"op_type\"  \"RR,RI\")])\n-\n-(define_insn \"andqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-        (and:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"d\")))\n+   nill\\t%0,%b2\n+   ni\\t%0,%b2\n+   niy\\t%0,%b2\n+   nc\\t%O0(1,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")])\n+\n+(define_insn \"*andqi3_esa\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,Q\")\n+        (and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"d,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"nr\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n-(define_insn \"*andqi3_ss\"\n-  [(set (match_operand:QI 0 \"s_operand\" \"=Q,S,Q\")\n-        (and:QI (match_dup 0)\n-                (match_operand:QI 1 \"s_imm_operand\" \"n,n,Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n+  \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n-   ni\\t%0,%b1\n-   niy\\t%0,%b1\n-   nc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SI,SIY,SS\")])\n+   nr\\t%0,%2\n+   ni\\t%0,%b2\n+   nc\\t%O0(1,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n \n-(define_insn \"*andqi3_ss_inv\"\n-  [(set (match_operand:QI 0 \"s_operand\" \"=Q,S,Q\")\n-        (and:QI (match_operand:QI 1 \"s_imm_operand\" \"n,n,Q\")\n-                (match_dup 0)))\n+(define_expand \"andqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+        (and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"@\n-   ni\\t%0,%b1\n-   niy\\t%0,%b1\n-   nc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SI,SIY,SS\")])\n+  \"s390_expand_logical_operator (AND, QImode, operands); DONE;\")\n \n \n ;;\n@@ -5254,38 +5212,30 @@\n    og\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_insn \"iordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d,d,d,d,d\")\n-        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0\")\n-                (match_operand:DI 2 \"general_operand\" \"N0HD0,N1HD0,N2HD0,N3HD0,d,m\")))\n+(define_insn \"*iordi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,d,Q\")\n+        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0,0\")\n+                (match_operand:DI 2 \"general_operand\"\n+                                    \"N0HD0,N1HD0,N2HD0,N3HD0,d,m,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n   \"@\n    oihh\\t%0,%i2\n    oihl\\t%0,%i2\n    oilh\\t%0,%i2\n    oill\\t%0,%i2\n    ogr\\t%0,%2\n-   og\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RRE,RXY\")])\n-\n-(define_insn \"*iordi3_ss\"\n-  [(set (match_operand:DI 0 \"s_operand\" \"=Q\")\n-        (ior:DI (match_dup 0)\n-                (match_operand:DI 1 \"s_imm_operand\" \"Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"oc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+   og\\t%0,%2\n+   oc\\t%O0(8,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RI,RI,RI,RI,RRE,RXY,SS\")])\n \n-(define_insn \"*iordi3_ss_inv\"\n-  [(set (match_operand:DI 0 \"s_operand\" \"=Q\")\n-        (ior:DI (match_operand:DI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"iordi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+        (ior:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"oc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"TARGET_64BIT\"\n+  \"s390_expand_logical_operator (IOR, DImode, operands); DONE;\")\n \n ;\n ; iorsi3 instruction pattern(s).\n@@ -5318,147 +5268,113 @@\n    oy\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n-(define_expand \"iorsi3\"\n-  [(parallel\n-    [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t  (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"general_operand\" \"\")))\n-     (clobber (reg:CC 33))])]\n-  \"\"\n-  \"\")\n-\n-(define_insn \"iorsi3_zarch\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d,d,d\")\n-        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,d,R,T\")))\n+(define_insn \"*iorsi3_zarch\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,d,d,Q\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"N0HS0,N1HS0,d,R,T,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    oilh\\t%0,%i2\n    oill\\t%0,%i2\n    or\\t%0,%2\n    o\\t%0,%2\n-   oy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RI,RI,RR,RX,RXY\")])\n-\n-(define_insn \"iorsi3_esa\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n-        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R\")))\n+   oy\\t%0,%2\n+   oc\\t%O0(4,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RI,RI,RR,RX,RXY,SS\")])\n+\n+(define_insn \"*iorsi3_esa\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"d,R,Q\")))\n    (clobber (reg:CC 33))]\n-  \"!TARGET_ZARCH\"\n+  \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n-   o\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX\")])\n-\n-(define_insn \"*iorsi3_ss\"\n-  [(set (match_operand:SI 0 \"s_operand\" \"=Q\")\n-        (ior:SI (match_dup 0)\n-                (match_operand:SI 1 \"s_imm_operand\" \"Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"oc\\t%O0(4,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+   o\\t%0,%2\n+   oc\\t%O0(4,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RX,SS\")])\n \n-(define_insn \"*iorsi3_ss_inv\"\n-  [(set (match_operand:SI 0 \"s_operand\" \"=Q\")\n-        (ior:SI (match_operand:SI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"iorsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+        (ior:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:SI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"oc\\t%O0(4,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_expand_logical_operator (IOR, SImode, operands); DONE;\")\n \n ;\n ; iorhi3 instruction pattern(s).\n ;\n \n-(define_insn \"*iorhi3_oi\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n-        (ior:HI (match_operand:HI 1 \"register_operand\" \"%0,0\")\n-                (match_operand:HI 2 \"nonmemory_operand\" \"d,n\")))\n+(define_insn \"*iorhi3_zarch\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n+        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n-   oill\\t%0,%x2\"\n-  [(set_attr \"op_type\"  \"RR,RI\")])\n-\n-(define_insn \"iorhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (ior:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-                (match_operand:HI 2 \"nonmemory_operand\" \"d\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"or\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n-(define_insn \"*iorhi3_ss\"\n-  [(set (match_operand:HI 0 \"s_operand\" \"=Q\")\n-        (ior:HI (match_dup 0)\n-                (match_operand:HI 1 \"s_imm_operand\" \"Q\")))\n+   oill\\t%0,%x2\n+   oc\\t%O0(2,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RI,SS\")])\n+\n+(define_insn \"*iorhi3_esa\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,Q\")\n+        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"oc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   or\\t%0,%2\n+   oc\\t%O0(2,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,SS\")])\n \n-(define_insn \"*iorhi3_ss_inv\"\n-  [(set (match_operand:HI 0 \"s_operand\" \"=Q\")\n-        (ior:HI (match_operand:HI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"iorhi3\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+        (ior:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:HI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"oc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_expand_logical_operator (IOR, HImode, operands); DONE;\")\n \n ;\n ; iorqi3 instruction pattern(s).\n ;\n \n-(define_insn \"*iorqi3_oi\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d,d\")\n-        (ior:QI (match_operand:QI 1 \"register_operand\" \"%0,0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"d,n\")))\n+(define_insn \"*iorqi3_zarch\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,d,Q,S,Q\")\n+        (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"d,n,n,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_ZARCH\"\n+  \"TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n    or\\t%0,%2\n-   oill\\t%0,%b2\"\n-  [(set_attr \"op_type\"  \"RR,RI\")])\n-\n-(define_insn \"iorqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-        (ior:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"d\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"or\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n-(define_insn \"*iorqi3_ss\"\n-  [(set (match_operand:QI 0 \"s_operand\" \"=Q,S,Q\")\n-        (ior:QI (match_dup 0)\n-                (match_operand:QI 1 \"s_imm_operand\" \"n,n,Q\")))\n+   oill\\t%0,%b2\n+   oi\\t%0,%b2\n+   oiy\\t%0,%b2\n+   oc\\t%O0(1,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RI,SI,SIY,SS\")])\n+\n+(define_insn \"*iorqi3_esa\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,Q\")\n+        (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"d,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n+  \"!TARGET_ZARCH && s390_logical_operator_ok_p (operands)\"\n   \"@\n-   oi\\t%0,%b1\n-   oiy\\t%0,%b1\n-   oc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SI,SIY,SS\")])\n+   or\\t%0,%2\n+   oi\\t%0,%b2\n+   oc\\t%O0(1,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,SI,SS\")])\n \n-(define_insn \"*iorqi3_ss_inv\"\n-  [(set (match_operand:QI 0 \"s_operand\" \"=Q,S,Q\")\n-        (ior:QI (match_operand:QI 1 \"s_imm_operand\" \"n,n,Q\")\n-                (match_dup 0)))\n+(define_expand \"iorqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+        (ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"@\n-   oi\\t%0,%b1\n-   oiy\\t%0,%b1\n-   oc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SI,SIY,SS\")])\n+  \"s390_expand_logical_operator (IOR, QImode, operands); DONE;\")\n \n \n ;;\n@@ -5494,34 +5410,25 @@\n    xr\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RRE,RXY\")])\n \n-(define_insn \"xordi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=d,d\")\n-        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0\")\n-                (match_operand:DI 2 \"general_operand\" \"d,m\")))\n+(define_insn \"*xordi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=d,d,Q\")\n+        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+                (match_operand:DI 2 \"general_operand\" \"d,m,Q\")))\n    (clobber (reg:CC 33))]\n-  \"TARGET_64BIT\"\n+  \"TARGET_64BIT && s390_logical_operator_ok_p (operands)\"\n   \"@\n    xgr\\t%0,%2\n-   xg\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RRE,RXY\")])\n-\n-(define_insn \"*xordi3_ss\"\n-  [(set (match_operand:DI 0 \"s_operand\" \"=Q\")\n-        (xor:DI (match_dup 0)\n-                (match_operand:DI 1 \"s_imm_operand\" \"Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"xc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+   xg\\t%0,%2\n+   xc\\t%O0(8,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RRE,RXY,SS\")])\n \n-(define_insn \"*xordi3_ss_inv\"\n-  [(set (match_operand:DI 0 \"s_operand\" \"=Q\")\n-        (xor:DI (match_operand:DI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"xordi3\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+        (xor:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:DI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"xc\\t%O0(8,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"TARGET_64BIT\"\n+  \"s390_expand_logical_operator (XOR, DImode, operands); DONE;\")\n \n ;\n ; xorsi3 instruction pattern(s).\n@@ -5554,103 +5461,74 @@\n    xy\\t%0,%2\"\n   [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n \n-(define_insn \"xorsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n-        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0\")\n-                (match_operand:SI 2 \"general_operand\" \"d,R,T\")))\n+(define_insn \"*xorsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d,d,d,Q\")\n+        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:SI 2 \"general_operand\" \"d,R,T,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n+  \"s390_logical_operator_ok_p (operands)\"\n   \"@\n    xr\\t%0,%2\n    x\\t%0,%2\n-   xy\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR,RX,RXY\")])\n-\n-(define_insn \"*xorsi3_ss\"\n-  [(set (match_operand:SI 0 \"s_operand\" \"=Q\")\n-        (xor:SI (match_dup 0)\n-                (match_operand:SI 1 \"s_imm_operand\" \"Q\")))\n+   xy\\t%0,%2\n+   xc\\t%O0(4,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,RX,RXY,SS\")])\n+\n+(define_expand \"xorsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+        (xor:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:SI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"xc\\t%O0(4,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n-\n-(define_insn \"*xorsi3_ss_inv\"\n-  [(set (match_operand:SI 0 \"s_operand\" \"=Q\")\n-        (xor:SI (match_operand:SI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"xc\\t%O0(4,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_expand_logical_operator (XOR, SImode, operands); DONE;\")\n \n ;\n ; xorhi3 instruction pattern(s).\n ;\n \n-(define_insn \"xorhi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n-        (xor:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-                (match_operand:HI 2 \"nonmemory_operand\" \"d\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n-  \"xr\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n-(define_insn \"*xorhi3_ss\"\n-  [(set (match_operand:HI 0 \"s_operand\" \"=Q\")\n-        (xor:HI (match_dup 0)\n-                (match_operand:HI 1 \"s_imm_operand\" \"Q\")))\n+(define_insn \"*xorhi3\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=d,Q\")\n+        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"%0,0\")\n+                (match_operand:HI 2 \"general_operand\" \"d,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"xc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_logical_operator_ok_p (operands)\"\n+  \"@\n+   xr\\t%0,%2\n+   xc\\t%O0(2,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,SS\")])\n \n-(define_insn \"*xorhi3_ss_inv\"\n-  [(set (match_operand:HI 0 \"s_operand\" \"=Q\")\n-        (xor:HI (match_operand:HI 1 \"s_imm_operand\" \"Q\")\n-                (match_dup 0)))\n+(define_expand \"xorhi3\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n+        (xor:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:HI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"xc\\t%O0(2,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SS\")])\n+  \"s390_expand_logical_operator (XOR, HImode, operands); DONE;\")\n \n ;\n ; xorqi3 instruction pattern(s).\n ;\n \n-(define_insn \"xorqi3\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n-        (xor:QI (match_operand:QI 1 \"register_operand\" \"%0\")\n-                (match_operand:QI 2 \"nonmemory_operand\" \"d\")))\n+(define_insn \"*xorqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=d,Q,S,Q\")\n+        (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,0\")\n+                (match_operand:QI 2 \"general_operand\" \"d,n,n,Q\")))\n    (clobber (reg:CC 33))]\n-  \"\"\n-  \"xr\\t%0,%2\"\n-  [(set_attr \"op_type\"  \"RR\")])\n-\n-(define_insn \"*xorqi3_ss\"\n-  [(set (match_operand:QI 0 \"s_operand\" \"=Q,S,Q\")\n-        (xor:QI (match_dup 0)\n-                (match_operand:QI 1 \"s_imm_operand\" \"n,n,Q\")))\n-   (clobber (reg:CC 33))]\n-  \"\"\n+  \"s390_logical_operator_ok_p (operands)\"\n   \"@\n-   xi\\t%0,%b1\n-   xiy\\t%0,%b1\n-   xc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SI,SIY,SS\")])\n+   xr\\t%0,%2\n+   xi\\t%0,%b2\n+   xiy\\t%0,%b2\n+   xc\\t%O0(1,%R0),%2\"\n+  [(set_attr \"op_type\"  \"RR,SI,SIY,SS\")])\n \n-(define_insn \"*xorqi3_ss_inv\"\n-  [(set (match_operand:QI 0 \"s_operand\" \"=Q,S,Q\")\n-        (xor:QI (match_operand:QI 1 \"s_imm_operand\" \"n,n,Q\")\n-                (match_dup 0)))\n+(define_expand \"xorqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+        (xor:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n+                (match_operand:QI 2 \"general_operand\" \"\")))\n    (clobber (reg:CC 33))]\n   \"\"\n-  \"@\n-   xi\\t%0,%b1\n-   xiy\\t%0,%b1\n-   xc\\t%O0(1,%R0),%1\"\n-  [(set_attr \"op_type\"  \"SI,SIY,SS\")])\n+  \"s390_expand_logical_operator (XOR, QImode, operands); DONE;\")\n \n \n ;;"}]}