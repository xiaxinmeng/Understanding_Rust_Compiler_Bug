{"sha": "296b0b042ae6de0541b07a3169f9d12a92a3d672", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk2YjBiMDQyYWU2ZGUwNTQxYjA3YTMxNjlmOWQxMmE5MmEzZDY3Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-07T13:18:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-07T13:18:36Z"}, "message": "ipa-inline.c (want_inline_small_function_p): Compute big_speedup_p lazily and last.\n\n2018-11-07  Richard Biener  <rguenther@suse.de>\n\n\t* ipa-inline.c (want_inline_small_function_p): Compute\n\tbig_speedup_p lazily and last.\n\nFrom-SVN: r265873", "tree": {"sha": "d234f9310e16fee382da3ac61590ce0cfc733b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d234f9310e16fee382da3ac61590ce0cfc733b77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/296b0b042ae6de0541b07a3169f9d12a92a3d672", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b0b042ae6de0541b07a3169f9d12a92a3d672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296b0b042ae6de0541b07a3169f9d12a92a3d672", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296b0b042ae6de0541b07a3169f9d12a92a3d672/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fe2da9fafe878a361e2d23821d590fd53ef99bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe2da9fafe878a361e2d23821d590fd53ef99bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fe2da9fafe878a361e2d23821d590fd53ef99bd"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "899e3fa37e21f36d98d11313af588737adafe8a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b0b042ae6de0541b07a3169f9d12a92a3d672/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b0b042ae6de0541b07a3169f9d12a92a3d672/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=296b0b042ae6de0541b07a3169f9d12a92a3d672", "patch": "@@ -1,3 +1,8 @@\n+2018-11-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* ipa-inline.c (want_inline_small_function_p): Compute\n+\tbig_speedup_p lazily and last.\n+\n 2018-11-07  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (fld_type_variant_equal_p): Skip TYPE_ALIGN check when"}, {"sha": "bcd165374618f17a30ee7b7e3f85a78423d8e9b5", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/296b0b042ae6de0541b07a3169f9d12a92a3d672/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/296b0b042ae6de0541b07a3169f9d12a92a3d672/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=296b0b042ae6de0541b07a3169f9d12a92a3d672", "patch": "@@ -779,21 +779,21 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n     {\n       int growth = estimate_edge_growth (e);\n       ipa_hints hints = estimate_edge_hints (e);\n-      bool big_speedup = big_speedup_p (e);\n+      int big_speedup = -1; /* compute this lazily */\n \n       if (growth <= 0)\n \t;\n       /* Apply MAX_INLINE_INSNS_SINGLE limit.  Do not do so when\n \t hints suggests that inlining given function is very profitable.  */\n       else if (DECL_DECLARED_INLINE_P (callee->decl)\n \t       && growth >= MAX_INLINE_INSNS_SINGLE\n-\t       && ((!big_speedup\n-\t\t    && !(hints & (INLINE_HINT_indirect_call\n+\t       && (growth >= MAX_INLINE_INSNS_SINGLE * 16\n+\t\t   || (!(hints & (INLINE_HINT_indirect_call\n \t\t\t\t  | INLINE_HINT_known_hot\n \t\t\t\t  | INLINE_HINT_loop_iterations\n \t\t\t\t  | INLINE_HINT_array_index\n-\t\t\t\t  | INLINE_HINT_loop_stride)))\n-\t\t   || growth >= MAX_INLINE_INSNS_SINGLE * 16))\n+\t\t\t\t  | INLINE_HINT_loop_stride))\n+\t\t       && !(big_speedup = big_speedup_p (e)))))\n \t{\n           e->inline_failed = CIF_MAX_INLINE_INSNS_SINGLE_LIMIT;\n \t  want_inline = false;\n@@ -813,15 +813,15 @@ want_inline_small_function_p (struct cgraph_edge *e, bool report)\n \t Upgrade it to MAX_INLINE_INSNS_SINGLE when hints suggests that\n \t inlining given function is very profitable.  */\n       else if (!DECL_DECLARED_INLINE_P (callee->decl)\n-\t       && !big_speedup\n \t       && !(hints & INLINE_HINT_known_hot)\n \t       && growth >= ((hints & (INLINE_HINT_indirect_call\n \t\t\t\t       | INLINE_HINT_loop_iterations\n \t\t\t               | INLINE_HINT_array_index\n \t\t\t\t       | INLINE_HINT_loop_stride))\n \t\t\t     ? MAX (MAX_INLINE_INSNS_AUTO,\n \t\t\t\t    MAX_INLINE_INSNS_SINGLE)\n-\t\t\t     : MAX_INLINE_INSNS_AUTO))\n+\t\t\t     : MAX_INLINE_INSNS_AUTO)\n+\t       && !(big_speedup == -1 ? big_speedup_p (e) : big_speedup))\n \t{\n \t  /* growth_likely_positive is expensive, always test it last.  */\n           if (growth >= MAX_INLINE_INSNS_SINGLE"}]}