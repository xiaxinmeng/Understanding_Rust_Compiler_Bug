{"sha": "4460cef2258096e1ad518654c127eea8ac71fb79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2MGNlZjIyNTgwOTZlMWFkNTE4NjU0YzEyN2VlYThhYzcxZmI3OQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-05-23T10:51:45Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-05-23T10:51:45Z"}, "message": "class.c (alter_access): Use %E format specifier to print an identifier node.\n\n\t* class.c (alter_access): Use %E format specifier to print an\n\tidentifier node.  Avoid looking at the IDENTIFIER_POINTER.\n\t(push_lang_context): Likewise.\n\t* decl.c (lookup_label): Likewise.\n\t(grokdeclarator): Likewise.\n\t* parser.c (cp_parser_check_for_invalid_template_id):Likewise.\n\t* pt.c (do_type_instantiation): Likewise.\n\t* tree.c (handle_java_interface_attribute): Likewise.\n\t(handle_com_interface_attribute): Likewise.\n\t(handle_init_priority_attribute): Likewise.\n\nFrom-SVN: r82161", "tree": {"sha": "947d192d307213dd0a8db85a2a31ae419336ef39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/947d192d307213dd0a8db85a2a31ae419336ef39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4460cef2258096e1ad518654c127eea8ac71fb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4460cef2258096e1ad518654c127eea8ac71fb79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4460cef2258096e1ad518654c127eea8ac71fb79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4460cef2258096e1ad518654c127eea8ac71fb79/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5763419e53ddb4f56a511d0c980787d0d1b4e993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5763419e53ddb4f56a511d0c980787d0d1b4e993", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5763419e53ddb4f56a511d0c980787d0d1b4e993"}], "stats": {"total": 64, "additions": 37, "deletions": 27}, "files": [{"sha": "3878c7ecff505b6f675cb94d2eb378127acf7f63", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4460cef2258096e1ad518654c127eea8ac71fb79", "patch": "@@ -1,3 +1,16 @@\n+2004-05-23  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* class.c (alter_access): Use %E format specifier to print an\n+\tidentifier node.  Avoid looking at the IDENTIFIER_POINTER.\n+\t(push_lang_context): Likewise.\n+\t* decl.c (lookup_label): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t* parser.c (cp_parser_check_for_invalid_template_id): Likewise.\n+\t* pt.c (do_type_instantiation): Likewise.\n+\t* tree.c (handle_java_interface_attribute): Likewise.\n+\t(handle_com_interface_attribute): Likewise.\n+\t(handle_init_priority_attribute): Likewise.\n+\n 2004-05-22  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15285"}, {"sha": "47c60e7851d2583271fc3def1adc730d109741c0", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=4460cef2258096e1ad518654c127eea8ac71fb79", "patch": "@@ -1055,8 +1055,8 @@ alter_access (tree t, tree fdecl, tree access)\n \t  if (TREE_CODE (TREE_TYPE (fdecl)) == FUNCTION_DECL)\n \t    cp_error_at (\"conflicting access specifications for method `%D', ignored\", TREE_TYPE (fdecl));\n \t  else\n-\t    error (\"conflicting access specifications for field `%s', ignored\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (fdecl)));\n+\t    error (\"conflicting access specifications for field `%E', ignored\",\n+\t\t   DECL_NAME (fdecl));\n \t}\n       else\n \t{\n@@ -5706,7 +5706,7 @@ push_lang_context (tree name)\n       current_lang_name = name;\n     }\n   else\n-    error (\"language string `\\\"%s\\\"' not recognized\", IDENTIFIER_POINTER (name));\n+    error (\"language string `\\\"%E\\\"' not recognized\", name);\n }\n   \n /* Get out of the current language scope.  */"}, {"sha": "65e8800beec8dc6771c660229b25479e534e602b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4460cef2258096e1ad518654c127eea8ac71fb79", "patch": "@@ -2066,8 +2066,7 @@ lookup_label (tree id)\n   /* You can't use labels at global scope.  */\n   if (current_function_decl == NULL_TREE)\n     {\n-      error (\"label `%s' referenced outside of any function\",\n-\t     IDENTIFIER_POINTER (id));\n+      error (\"label `%E' referenced outside of any function\", id);\n       POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, NULL_TREE);\n     }\n \n@@ -6746,7 +6745,7 @@ grokdeclarator (tree declarator,\n \t\t\tlonglong = 1;\n \t\t    }\n \t\t  else if (RIDBIT_SETP (i, specbits))\n-\t\t    pedwarn (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n+\t\t    pedwarn (\"duplicate `%E'\", id);\n \n \t\t  /* Diagnose \"__thread extern\" or \"__thread static\".  */\n \t\t  if (RIDBIT_SETP (RID_THREAD, specbits))\n@@ -6786,8 +6785,7 @@ grokdeclarator (tree declarator,\n \t{\n \t  tree t = lookup_name (id, 1);\n \t  if (!t || TREE_CODE (t) != TYPE_DECL)\n-\t    error (\"`%s' fails to be a typedef or built in type\",\n-\t\t   IDENTIFIER_POINTER (id));\n+\t    error (\"`%E' fails to be a typedef or built in type\", id);\n \t  else\n \t    {\n \t      type = TREE_TYPE (t);\n@@ -7343,8 +7341,8 @@ grokdeclarator (tree declarator,\n \t\t      error (\"destructor cannot be static member function\");\n \t\t    if (quals)\n \t\t      {\n-\t\t\terror (\"destructors may not be `%s'\",\n-\t\t\t\t  IDENTIFIER_POINTER (TREE_VALUE (quals)));\n+\t\t\terror (\"destructors may not be `%E'\",\n+\t\t\t\t  TREE_VALUE (quals));\n \t\t\tquals = NULL_TREE;\n \t\t      }\n \t\t    if (decl_context == FIELD)\n@@ -7372,8 +7370,8 @@ grokdeclarator (tree declarator,\n \t\t      }\n \t\t    if (quals)\n \t\t      {\n-\t\t\terror (\"constructors may not be `%s'\",\n-\t\t\t\t  IDENTIFIER_POINTER (TREE_VALUE (quals)));\n+\t\t\terror (\"constructors may not be `%E'\",\n+                               TREE_VALUE (quals));\n \t\t\tquals = NULL_TREE;\n \t\t      }\n \t\t    {\n@@ -8179,8 +8177,8 @@ grokdeclarator (tree declarator,\n \t  {\n \t    if (friendp)\n \t      {\n-\t\terror (\"`%s' is neither function nor member function; cannot be declared friend\",\n-\t\t       IDENTIFIER_POINTER (declarator));\n+\t\terror (\"`%E' is neither function nor member function; \"\n+                       \"cannot be declared friend\", declarator);\n \t\tfriendp = 0;\n \t      }\n \t    decl = NULL_TREE;"}, {"sha": "d26061f87d24310c401a73eb202b22a22f7802a9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4460cef2258096e1ad518654c127eea8ac71fb79", "patch": "@@ -1891,7 +1891,7 @@ cp_parser_check_for_invalid_template_id (cp_parser* parser,\n       if (TYPE_P (type))\n \terror (\"`%T' is not a template\", type);\n       else if (TREE_CODE (type) == IDENTIFIER_NODE)\n-\terror (\"`%s' is not a template\", IDENTIFIER_POINTER (type));\n+\terror (\"`%E' is not a template\", type);\n       else\n \terror (\"invalid template-id\");\n       /* Remember the location of the invalid \"<\".  */"}, {"sha": "2b12479257290ef9a75c412014dc4ecf1cc009f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4460cef2258096e1ad518654c127eea8ac71fb79", "patch": "@@ -10698,8 +10698,8 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n   if (storage != NULL_TREE)\n     {\n       if (pedantic && !in_system_header)\n-\tpedwarn(\"ISO C++ forbids the use of `%s' on explicit instantiations\", \n-\t\t   IDENTIFIER_POINTER (storage));\n+\tpedwarn(\"ISO C++ forbids the use of `%E' on explicit instantiations\", \n+                storage);\n \n       if (storage == ridpointers[(int) RID_INLINE])\n \tnomem_p = 1;"}, {"sha": "e9bfdb8be9a3c2932454e9c041dc8ec8b727c0a9", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460cef2258096e1ad518654c127eea8ac71fb79/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=4460cef2258096e1ad518654c127eea8ac71fb79", "patch": "@@ -1811,8 +1811,8 @@ handle_java_interface_attribute (tree* node,\n       || !CLASS_TYPE_P (*node)\n       || !TYPE_FOR_JAVA (*node))\n     {\n-      error (\"`%s' attribute can only be applied to Java class definitions\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"`%E' attribute can only be applied to Java class definitions\",\n+\t     name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -1840,14 +1840,14 @@ handle_com_interface_attribute (tree* node,\n       || !CLASS_TYPE_P (*node)\n       || *node != TYPE_MAIN_VARIANT (*node))\n     {\n-      warning (\"`%s' attribute can only be applied to class definitions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (\"`%E' attribute can only be applied to class definitions\",\n+\t       name);\n       return NULL_TREE;\n     }\n \n   if (!warned++)\n-    warning (\"`%s' is obsolete; g++ vtables are now COM-compatible by default\",\n-\t     IDENTIFIER_POINTER (name));\n+    warning (\"`%E' is obsolete; g++ vtables are now COM-compatible by default\",\n+\t     name);\n \n   return NULL_TREE;\n }\n@@ -1891,8 +1891,8 @@ handle_init_priority_attribute (tree* node,\n \t init_priority value, so don't allow it.  */\n       || current_function_decl) \n     {\n-      error (\"can only use `%s' attribute on file-scope definitions of objects of class type\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"can only use `%E' attribute on file-scope definitions \"\n+             \"of objects of class type\", name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -1919,8 +1919,7 @@ handle_init_priority_attribute (tree* node,\n     }\n   else\n     {\n-      error (\"`%s' attribute is not supported on this platform\",\n-\t     IDENTIFIER_POINTER (name));\n+      error (\"`%E' attribute is not supported on this platform\", name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }"}]}