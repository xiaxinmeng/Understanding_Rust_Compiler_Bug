{"sha": "98e30e515f184bd63196d4d500a682fbfeb9635e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlMzBlNTE1ZjE4NGJkNjMxOTZkNGQ1MDBhNjgyZmJmZWI5NjM1ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-07T14:12:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-07T14:12:44Z"}, "message": "fold-const.c (fold_binary_loc): Move (X & C2) << C1 -> (X << C1) & (C2 << C1) simplification ...\n\n2015-07-07  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (fold_binary_loc): Move\n\t(X & C2) << C1 -> (X << C1) & (C2 << C1) simplification ...\n\t* match.pd: ... here.\n\tAdd (X * C1) % C2 -> 0 simplification pattern derived from\n\textract_muldiv_1.\n\n\t* gcc.dg/vect/vect-over-widen-3-big-array.c: Adjust.\n\nFrom-SVN: r225517", "tree": {"sha": "daaaff74c7d6229017ab98b9e6dc9cbfc072a51c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daaaff74c7d6229017ab98b9e6dc9cbfc072a51c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98e30e515f184bd63196d4d500a682fbfeb9635e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e30e515f184bd63196d4d500a682fbfeb9635e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e30e515f184bd63196d4d500a682fbfeb9635e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e30e515f184bd63196d4d500a682fbfeb9635e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddae3477d446e1f93b62b7cb2880f75216e85ce8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddae3477d446e1f93b62b7cb2880f75216e85ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddae3477d446e1f93b62b7cb2880f75216e85ce8"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "b1b3f7f958929d5c528bbd14a97ffe8ec4250625", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98e30e515f184bd63196d4d500a682fbfeb9635e", "patch": "@@ -1,3 +1,11 @@\n+2015-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_binary_loc): Move\n+\t(X & C2) << C1 -> (X << C1) & (C2 << C1) simplification ...\n+\t* match.pd: ... here.\n+\tAdd (X * C1) % C2 -> 0 simplification pattern derived from\n+\textract_muldiv_1.\n+\n 2015-07-07  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \tPR target/66780"}, {"sha": "23ef423df7887e2875d2d6146f80b8d429ebda2c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=98e30e515f184bd63196d4d500a682fbfeb9635e", "patch": "@@ -11194,27 +11194,6 @@ fold_binary_loc (location_t loc,\n \t\t\t     prec) == 0)\n \treturn TREE_OPERAND (arg0, 0);\n \n-      /* Fold (X & C2) << C1 into (X << C1) & (C2 << C1)\n-\t      (X & C2) >> C1 into (X >> C1) & (C2 >> C1)\n-\t if the latter can be further optimized.  */\n-      if ((code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n-\t  && TREE_CODE (arg0) == BIT_AND_EXPR\n-\t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n-\t{\n-\t  tree mask = fold_build2_loc (loc, code, type,\n-\t\t\t\t   fold_convert_loc (loc, type,\n-\t\t\t\t\t\t     TREE_OPERAND (arg0, 1)),\n-\t\t\t\t   arg1);\n-\t  tree shift = fold_build2_loc (loc, code, type,\n-\t\t\t\t    fold_convert_loc (loc, type,\n-\t\t\t\t\t\t      TREE_OPERAND (arg0, 0)),\n-\t\t\t\t    arg1);\n-\t  tem = fold_binary_loc (loc, BIT_AND_EXPR, type, shift, mask);\n-\t  if (tem)\n-\t    return tem;\n-\t}\n-\n       return NULL_TREE;\n \n     case MIN_EXPR:"}, {"sha": "5e8fd32ed22638d5a6b0264c009094cb7e7dec40", "filename": "gcc/match.pd", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=98e30e515f184bd63196d4d500a682fbfeb9635e", "patch": "@@ -230,7 +230,14 @@ along with GCC; see the file COPYING3.  If not see\n  /* (X % Y) % Y is just X % Y.  */\n  (simplify\n   (mod (mod@2 @0 @1) @1)\n-  @2))\n+  @2)\n+ /* From extract_muldiv_1: (X * C1) % C2 is zero if C1 is a multiple of C2.  */\n+ (simplify\n+  (mod (mult @0 INTEGER_CST@1) INTEGER_CST@2)\n+  (if (ANY_INTEGRAL_TYPE_P (type)\n+       && TYPE_OVERFLOW_UNDEFINED (type)\n+       && wi::multiple_of_p (@1, @2, TYPE_SIGN (type)))\n+   { build_zero_cst (type); })))\n \n /* X % -C is the same as X % C.  */\n (simplify\n@@ -992,6 +999,16 @@ along with GCC; see the file COPYING3.  If not see\n \t   (if (shift_type == TREE_TYPE (@3))\n \t    (bit_and @4 { newmaskt; }))))))))))))\n \n+/* Fold (X & C2) << C1 into (X << C1) & (C2 << C1)\n+   (X & C2) >> C1 into (X >> C1) & (C2 >> C1).  */\n+(for shift (lshift rshift)\n+ (simplify\n+  (shift (convert? (bit_and @0 INTEGER_CST@2)) INTEGER_CST@1)\n+  (if (tree_nop_conversion_p (type, TREE_TYPE (@0)))\n+   (with { tree mask = int_const_binop (shift, fold_convert (type, @2), @1); }\n+    (bit_and (shift (convert @0) @1) { mask; })))))\n+\n+\n /* Simplifications of conversions.  */\n \n /* Basic strip-useless-type-conversions / strip_nops.  */"}, {"sha": "d9fa97a3f655a4453dadedf62df6e6c8ea9e6ed7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98e30e515f184bd63196d4d500a682fbfeb9635e", "patch": "@@ -1,3 +1,7 @@\n+2015-07-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/vect/vect-over-widen-3-big-array.c: Adjust.\n+\n 2015-07-07  Andrew Bennett  <andrew.bennett@imgtec.com>\n \n \t* gcc.target/mips/call-1.c: Allow testcase to match the jrc instruction."}, {"sha": "1ca312829a723963e909d3507ef32cbc70b61dc5", "filename": "gcc/testsuite/gcc.dg/vect/vect-over-widen-3-big-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e30e515f184bd63196d4d500a682fbfeb9635e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-over-widen-3-big-array.c?ref=98e30e515f184bd63196d4d500a682fbfeb9635e", "patch": "@@ -58,6 +58,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vect_recog_over_widening_pattern: detected\" 2 \"vect\" } } */\n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n "}]}