{"sha": "7813a5109103ac06197386fa7c6cda211b8f5037", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgxM2E1MTA5MTAzYWMwNjE5NzM4NmZhN2M2Y2RhMjExYjhmNTAzNw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-07-30T17:38:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-30T17:38:16Z"}, "message": "exp_util.ads (Find_Prim_Op): Document that Program_Error is raised if no primitive operation is found.\n\n2008-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.ads (Find_Prim_Op): Document that Program_Error is raised\n\tif no primitive operation is found.\n\n\t* exp_util.adb: (Find_Prim_Op): Add comments for previous change\n\nFrom-SVN: r138329", "tree": {"sha": "56c07c375e2b2ee1b22cdf54090931c10d63a001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56c07c375e2b2ee1b22cdf54090931c10d63a001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7813a5109103ac06197386fa7c6cda211b8f5037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7813a5109103ac06197386fa7c6cda211b8f5037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7813a5109103ac06197386fa7c6cda211b8f5037", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7813a5109103ac06197386fa7c6cda211b8f5037/comments", "author": null, "committer": null, "parents": [{"sha": "1adfc03bfe5852370d96336666abfbec6e40060e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1adfc03bfe5852370d96336666abfbec6e40060e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1adfc03bfe5852370d96336666abfbec6e40060e"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "09850f644d4dfcd7557fe7284e7ab2324e1c16b6", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813a5109103ac06197386fa7c6cda211b8f5037/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813a5109103ac06197386fa7c6cda211b8f5037/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=7813a5109103ac06197386fa7c6cda211b8f5037", "patch": "@@ -1582,6 +1582,8 @@ package body Exp_Util is\n \n          Next_Elmt (Prim);\n \n+         --  Raise Program_Error if no primitive found\n+\n          if No (Prim) then\n             raise Program_Error;\n          end if;\n@@ -1612,6 +1614,8 @@ package body Exp_Util is\n       while not Is_TSS (Node (Prim), Name) loop\n          Next_Elmt (Prim);\n \n+         --  Raise program error if no primitive found\n+\n          if No (Prim) then\n             raise Program_Error;\n          end if;"}, {"sha": "5848d5d71718629392fafa99d2fad69df50e78ca", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7813a5109103ac06197386fa7c6cda211b8f5037/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7813a5109103ac06197386fa7c6cda211b8f5037/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=7813a5109103ac06197386fa7c6cda211b8f5037", "patch": "@@ -360,7 +360,10 @@ package Exp_Util is\n    --  Find the first primitive operation of type T whose name is 'Name'.\n    --  This function allows the use of a primitive operation which is not\n    --  directly visible. If T is a class wide type, then the reference is\n-   --  to an operation of the corresponding root type.\n+   --  to an operation of the corresponding root type. Raises Program_Error\n+   --  exception if no primitive operation is found. This is normally an\n+   --  internal error, but in some cases is an expected consequence of\n+   --  illegalities elsewhere.\n \n    function Find_Prim_Op\n      (T    : Entity_Id;\n@@ -370,6 +373,9 @@ package Exp_Util is\n    --  with the indicated suffix). This function allows use of a primitive\n    --  operation which is not directly visible. If T is a class wide type,\n    --  then the reference is to an operation of the corresponding root type.\n+   --  Raises Program_Error exception if no primitive operation is found.\n+   --  This is normally an internal error, but in some cases is an expected\n+   --  consequence of illegalities elsewhere.\n \n    function Find_Protection_Object (Scop : Entity_Id) return Entity_Id;\n    --  Traverse the scope stack starting from Scop and look for an entry,"}]}