{"sha": "a916f21d3c176a23f54114a17605813a31cd5d2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxNmYyMWQzYzE3NmEyM2Y1NDExNGExNzYwNTgxM2EzMWNkNWQyZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-01-14T14:30:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-01-14T14:30:33Z"}, "message": "re PR tree-optimization/22548 (Aliasing can not tell array members apart)\n\n2006-01-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/22548\n\tPR tree-optimization/22555\n\tPR tree-optimization/22501\n\t* Makefile.in (tree-ssa-structalias.o): Depend on $(PARAMS_H).\n\t* params.def (salias-max-array-elements): New parameter.\n\t* params.h (SALIAS_MAX_ARRAY_ELEMENTS): Define.\n\t* doc/invoke.texi (salias-max-array-elements): Document.\n\t* tree-flow-inline.h (var_can_have_subvars): We also handle\n\tarrays now.\n\t* tree-ssa-alias.c (find_used_portions): Handle ARRAY_REF like\n\tCOMPONENT_REF.\n\t* tree-ssa-structalias.c (params.h): Include.\n\t(push_fields_onto_fieldstack): Handle ARRAY_TYPE.\n\t(find_func_aliases): Handle multiple constraints from ARRAY_REF.\n\t(get_constraint_for): For ADDR_EXPR operating on something\n\tcontaining an ARRAY_REF, add all subvars to the solution.\n\t(handle_ptr_arith): Handle ARRAY_TYPE like RECORD_TYPE types.\n\t* tree-ssa-operands.c (parse_ssa_operands): Handle ARRAY_REF\n\tfor creating MUST_DEFs.\n\t(get_expr_operands): Treat ARRAY_REF like COMPONENT_REF wrt subvars.\n\n\t* gcc.dg/tree-ssa/alias-4.c: New testcase.\n\t* gcc.dg/tree-ssa/alias-5.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-6.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-7.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-8.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-9.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-10.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-11.c: Likewise.\n\t* gcc.dg/tree-ssa/alias-12.c: Likewise.\n\nFrom-SVN: r109703", "tree": {"sha": "97912e34de2d72cef706a4b2d7ff6e7a163b3439", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97912e34de2d72cef706a4b2d7ff6e7a163b3439"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a916f21d3c176a23f54114a17605813a31cd5d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a916f21d3c176a23f54114a17605813a31cd5d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a916f21d3c176a23f54114a17605813a31cd5d2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a916f21d3c176a23f54114a17605813a31cd5d2e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7f17528ab58fa0a0f627b94bacbae686438b9bd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f17528ab58fa0a0f627b94bacbae686438b9bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f17528ab58fa0a0f627b94bacbae686438b9bd4"}], "stats": {"total": 333, "additions": 317, "deletions": 16}, "files": [{"sha": "b9dc3c2fab0f689cf757da49fe3843814b725286", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -1,3 +1,26 @@\n+2006-01-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22548\n+\tPR tree-optimization/22555\n+\tPR tree-optimization/22501\n+\t* Makefile.in (tree-ssa-structalias.o): Depend on $(PARAMS_H).\n+\t* params.def (salias-max-array-elements): New parameter.\n+\t* params.h (SALIAS_MAX_ARRAY_ELEMENTS): Define.\n+\t* doc/invoke.texi (salias-max-array-elements): Document.\n+\t* tree-flow-inline.h (var_can_have_subvars): We also handle\n+\tarrays now.\n+\t* tree-ssa-alias.c (find_used_portions): Handle ARRAY_REF like\n+\tCOMPONENT_REF.\n+\t* tree-ssa-structalias.c (params.h): Include.\n+\t(push_fields_onto_fieldstack): Handle ARRAY_TYPE.\n+\t(find_func_aliases): Handle multiple constraints from ARRAY_REF.\n+\t(get_constraint_for): For ADDR_EXPR operating on something\n+\tcontaining an ARRAY_REF, add all subvars to the solution.\n+\t(handle_ptr_arith): Handle ARRAY_TYPE like RECORD_TYPE types.\n+\t* tree-ssa-operands.c (parse_ssa_operands): Handle ARRAY_REF\n+\tfor creating MUST_DEFs.\n+\t(get_expr_operands): Treat ARRAY_REF like COMPONENT_REF wrt subvars.\n+\n 2006-01-14  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-niter.c (number_of_iterations_cond): Split into several"}, {"sha": "45152ae1f7eeefeb093dae1ffdd05fc37365a212", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -1792,7 +1792,7 @@ stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tree-ssa-structalias.o: tree-ssa-structalias.c tree-ssa-structalias.h \\\n    $(SYSTEM_H) $(CONFIG_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n    $(TM_H) coretypes.h cgraph.h tree-pass.h $(TIMEVAR_H) \\\n-   gt-tree-ssa-structalias.h\n+   gt-tree-ssa-structalias.h $(PARAMS_H)\n tree-ssa.o : tree-ssa.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) $(EXPR_H) output.h $(DIAGNOSTIC_H) \\\n    toplev.h function.h $(TIMEVAR_H) $(TM_H) coretypes.h \\"}, {"sha": "032f3ad048d1a50c6a180f9e1b02f09ccda8bef5", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -5744,6 +5744,10 @@ The maximum number of fields in a variable without direct\n structure accesses for which structure aliasing will consider trying \n to track each field.  The default is 5\n \n+@item salias-max-array-elements\n+The maximum number of elements an array can have and its elements\n+still be tracked individually by structure aliasing. The default is 4\n+\n @item sra-max-structure-size\n The maximum structure size, in bytes, at which the scalar replacement\n of aggregates (SRA) optimization will perform block copies.  The"}, {"sha": "33fa4441cde6c2d0a7850e63e54c22da442c1b6c", "filename": "gcc/params.def", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -47,7 +47,14 @@ DEFPARAM (PARAM_SALIAS_MAX_IMPLICIT_FIELDS,\n \t  \"salias-max-implicit-fields\",\n \t  \"The maximum number of fields in a structure variable without direct structure accesses that GCC will attempt to track separately\",\n \t  5, 0, 0)\n-   \n+\n+/* The maximum number of array elements structure aliasing will decompose\n+   an array for.  The default is 4.  */\n+DEFPARAM (PARAM_SALIAS_MAX_ARRAY_ELEMENTS,\n+\t  \"salias-max-array-elements\",\n+\t  \"The maximum number of elements in an array for wich we track its elements separately\",\n+\t  4, 0, 0)\n+\n /* The maximum structure size at which the scalar replacement of\n    aggregates (SRA) pass will perform block copies.  The default\n    value, 0, implies that GCC will select the most appropriate size"}, {"sha": "f64193982b4e0578e80f239d09f001c5ff7d74b7", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -91,6 +91,8 @@ typedef enum compiler_param\n /* Macros for the various parameters.  */\n #define SALIAS_MAX_IMPLICIT_FIELDS \\\n   PARAM_VALUE (PARAM_SALIAS_MAX_IMPLICIT_FIELDS)\n+#define SALIAS_MAX_ARRAY_ELEMENTS \\\n+  PARAM_VALUE (PARAM_SALIAS_MAX_ARRAY_ELEMENTS)\n #define SRA_MAX_STRUCTURE_SIZE \\\n   PARAM_VALUE (PARAM_SRA_MAX_STRUCTURE_SIZE)\n #define SRA_MAX_STRUCTURE_COUNT \\"}, {"sha": "318cc53fae2b741fc223dd8b05f4ba182a7a0b13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -1,3 +1,18 @@\n+2006-01-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/22548\n+\tPR tree-optimization/22555\n+\tPR tree-optimization/22501\n+\t* gcc.dg/tree-ssa/alias-4.c: New testcase.\n+\t* gcc.dg/tree-ssa/alias-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-6.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-7.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-8.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-9.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-10.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/alias-12.c: Likewise.\n+\n 2005-01-14  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/pr19210-1.c: Update outcome.  Add new test loop."}, {"sha": "03956100a2c20f5fddecfa33d1dc6471cbf0276e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-10.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-10.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct {\n+\tint i;\n+\tint x[2];\n+\tint j;\n+} a;\n+\n+int foo(int i)\n+{\n+\ta.i = 1;\n+\ta.j = 2;\n+\ta.x[i] = 0;\n+\treturn a.i + a.j;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 3;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "cccc512cbe19a83afbd51a44589ab7fb05be1e2e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-11.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-11.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct param { int *a; };\n+void foo(struct param *p);\n+int bar(void)\n+{\n+  int a[32];\n+  struct param p;\n+  a[0] = 1;\n+  a[1] = 1;\n+  p.a = &a[0];\n+  foo(&p);\n+  return a[0] + *p.a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return \\\\*p\\\\.a \\\\\\+ a.0.;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "dbd33016032ac54a58d8e292a6ea327e3eb8240c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-12.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-12.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-alias1-vops\" } */\n+\n+struct {\n+\tint i;\n+\tint x[128];\n+\tint j;\n+} a;\n+\n+int foo(int i)\n+{\n+\ta.x[i] = 0;\n+\treturn a.x[i];\n+}\n+\n+/* { dg-final { scan-tree-dump \"V_MAY_DEF\" \"alias1\" } } */\n+/* { dg-final { cleanup-tree-dump \"alias1\" } } */\n+"}, {"sha": "e0394327d91e92fcb6b1a9489d57129c76bb6f74", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-4.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct {\n+\tint i;\n+\tstruct {\n+\t\tint x[2];\n+\t} b;\n+} a;\n+\n+int foo(void)\n+{\n+\ta.i = 1;\n+\ta.b.x[0] = 0;\n+\ta.b.x[1] = 1;\n+\treturn a.i + a.b.x[0];\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "f1faae52c9c8e69896cae5d3a0598f1a5a52b0e4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-5.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct {\n+\tint i;\n+\tstruct {\n+\t\tstruct {\n+\t\t\tint i;\n+\t\t} x[2];\n+\t} b;\n+} a;\n+\n+int foo(void)\n+{\n+\ta.i = 1;\n+\ta.b.x[0].i = 0;\n+\ta.b.x[1].i = 1;\n+\treturn a.i + a.b.x[0].i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "460dd11cd481c7dd438d2d6dfe967c4aa15c8f3b", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-6.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-6.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+struct param { int *a; };\n+void foo(struct param *p);\n+int bar(void)\n+{\n+  int a[2];\n+  struct param p;\n+  a[0] = 1;\n+  a[1] = 1;\n+  p.a = &a[0];\n+  foo(&p);\n+  return a[0] + *p.a;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return \\\\*p\\\\.a \\\\\\+ a.0.;\" \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */\n+"}, {"sha": "7ef604be293d907a976a5c3ae1e21ba27b7d7169", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-7.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort(void);\n+int main()\n+{\n+  int a[2];\n+  int *p = a;\n+  int i;\n+  a[0] = 1;\n+  a[1] = 2;\n+  for (i=0; i<2; ++i)\n+    if (p[i] != i+1)\n+      abort();\n+  return 0;\n+}\n+"}, {"sha": "7c825f9657952db00bc38c54334c84436b147713", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-8.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort(void);\n+int main()\n+{\n+  int a[2];\n+  int i = 1;\n+  a[0] = 1;\n+  a[1] = 2;\n+  if (*(a + i) != 2)\n+    abort();\n+  return 0;\n+}\n+"}, {"sha": "0a20e054366dea551e2e255c422a02be550d4d41", "filename": "gcc/testsuite/gcc.dg/tree-ssa/alias-9.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Falias-9.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort(void);\n+int main()\n+{\n+  int a[32];\n+  int i = 1;\n+  a[0] = 1;\n+  a[1] = 2;\n+  if (*(a + i) != 2)\n+    abort();\n+  return 0;\n+}\n+"}, {"sha": "7e36ccc0e2ad3e0a420225817de4408a9fb80106", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -1489,8 +1489,7 @@ get_subvar_at (tree var, unsigned HOST_WIDE_INT offset)\n }\n \n /* Return true if V is a tree that we can have subvars for.\n-   Normally, this is any aggregate type, however, due to implementation\n-   limitations ATM, we exclude array types as well.  Also complex\n+   Normally, this is any aggregate type.  Also complex\n    types which are not gimple registers can have subvars.  */\n \n static inline bool\n@@ -1500,9 +1499,8 @@ var_can_have_subvars (tree v)\n   if (!DECL_P (v) || MTAG_P (v))\n     return false;\n \n-  /* Aggregates besides arrays can have subvars.  */\n-  if (AGGREGATE_TYPE_P (TREE_TYPE (v))\n-      && TREE_CODE (TREE_TYPE (v)) != ARRAY_TYPE)\n+  /* Aggregates can have subvars.  */\n+  if (AGGREGATE_TYPE_P (TREE_TYPE (v)))\n     return true;\n \n   /* Complex types variables which are not also a gimple register can"}, {"sha": "353e7bd4448b62274bdcfdfe1d0ab2cc3370de45", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -2698,6 +2698,7 @@ find_used_portions (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n     case COMPONENT_REF:\n+    case ARRAY_REF:\n       {\n \tHOST_WIDE_INT bitsize;\n \tHOST_WIDE_INT bitmaxsize;"}, {"sha": "87a1fc6eb1de7d758ac6152a03b327f13abb2c8a", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -732,8 +732,7 @@ parse_ssa_operands (tree stmt)\n \tif (TREE_CODE (lhs) == VIEW_CONVERT_EXPR)\n \t  lhs = TREE_OPERAND (lhs, 0);\n \n-\tif (TREE_CODE (lhs) != ARRAY_REF\n-\t    && TREE_CODE (lhs) != ARRAY_RANGE_REF\n+\tif (TREE_CODE (lhs) != ARRAY_RANGE_REF\n \t    && TREE_CODE (lhs) != BIT_FIELD_REF)\n \t  lhs_flags |= opf_kill_def;\n \n@@ -1101,7 +1100,6 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n       get_tmr_operands (stmt, expr, flags);\n       return;\n \n-    case ARRAY_REF:\n     case ARRAY_RANGE_REF:\n       /* Treat array references as references to the virtual variable\n \t representing the array.  The virtual variable for an ARRAY_REF\n@@ -1115,6 +1113,7 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 3), opf_none);\n       return;\n \n+    case ARRAY_REF:\n     case COMPONENT_REF:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n@@ -1162,6 +1161,12 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n \t      s_ann->has_volatile_ops = true; \n \t    get_expr_operands (stmt, &TREE_OPERAND (expr, 2), opf_none);\n \t  }\n+\telse if (code == ARRAY_REF)\n+\t  {\n+            get_expr_operands (stmt, &TREE_OPERAND (expr, 1), opf_none);\n+            get_expr_operands (stmt, &TREE_OPERAND (expr, 2), opf_none);\n+            get_expr_operands (stmt, &TREE_OPERAND (expr, 3), opf_none);\n+\t  }\n \treturn;\n       }\n     case WITH_SIZE_EXPR:\n@@ -1192,8 +1197,7 @@ get_expr_operands (tree stmt, tree *expr_p, int flags)\n \top = TREE_OPERAND (expr, 0);\n \tif (TREE_CODE (op) == WITH_SIZE_EXPR)\n \t  op = TREE_OPERAND (expr, 0);\n-\tif (TREE_CODE (op) == ARRAY_REF\n-\t    || TREE_CODE (op) == ARRAY_RANGE_REF\n+\tif (TREE_CODE (op) == ARRAY_RANGE_REF\n \t    || TREE_CODE (op) == REALPART_EXPR\n \t    || TREE_CODE (op) == IMAGPART_EXPR)\n \t  subflags = opf_is_def;"}, {"sha": "90bd037e313488e1028abd3871f7b62b2992fe3a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 84, "deletions": 4, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a916f21d3c176a23f54114a17605813a31cd5d2e/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=a916f21d3c176a23f54114a17605813a31cd5d2e", "patch": "@@ -48,6 +48,7 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n #include \"timevar.h\"\n #include \"alloc-pool.h\"\n #include \"splay-tree.h\"\n+#include \"params.h\"\n #include \"tree-ssa-structalias.h\"\n #include \"cgraph.h\"\n \n@@ -2493,8 +2494,30 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t    {\n \t      struct constraint_expr *c;\n \t      unsigned int i;\n-\n-\t      get_constraint_for (TREE_OPERAND (t, 0), results);\n+\t      tree exp = TREE_OPERAND (t, 0);\n+\n+\t      get_constraint_for (exp, results);\n+\t      /* Make sure we capture constraints to all elements\n+\t\t of an array.  */\n+\t      if ((handled_component_p (exp)\n+\t\t   && ref_contains_array_ref (exp))\n+\t\t  || TREE_CODE (TREE_TYPE (exp)) == ARRAY_TYPE)\n+\t\t{\n+\t\t  struct constraint_expr *origrhs;\n+\t\t  varinfo_t origvar;\n+\t\t  struct constraint_expr tmp;\n+\n+\t\t  gcc_assert (VEC_length (ce_s, *results) == 1);\n+\t\t  origrhs = VEC_last (ce_s, *results);\n+\t\t  tmp = *origrhs;\n+\t\t  VEC_pop (ce_s, *results);\n+\t\t  origvar = get_varinfo (origrhs->var);\n+\t\t  for (; origvar; origvar = origvar->next)\n+\t\t    {\n+\t\t      tmp.var = origvar->id;\n+\t\t      VEC_safe_push (ce_s, heap, *results, &tmp);\n+\t\t    }\n+\t\t}\n \t      for (i = 0; VEC_iterate (ce_s, *results, i, c); i++)\n \t\t{\n \t\t  if (c->type == DEREF)\n@@ -3151,7 +3174,6 @@ handle_ptr_arith (VEC (ce_s, heap) *lhsc, tree expr)\n \n   get_constraint_for (op0, &temp);\n   if (POINTER_TYPE_P (TREE_TYPE (op0))\n-      && TREE_CODE (TREE_TYPE (TREE_TYPE (op0))) == RECORD_TYPE\n       && TREE_CODE (op1) == INTEGER_CST)\n     {\n       rhsoffset = TREE_INT_CST_LOW (op1) * BITS_PER_UNIT;\n@@ -3378,7 +3400,8 @@ find_func_aliases (tree origt)\n \t\t\t\n \t\t\tget_constraint_for (rhsop, &rhsc);\n \t\t\tif (TREE_CODE (strippedrhs) == ADDR_EXPR\n-\t\t\t    && AGGREGATE_TYPE_P (TREE_TYPE (rhstype)))\n+\t\t\t    && AGGREGATE_TYPE_P (TREE_TYPE (rhstype))\n+\t\t\t    && VEC_length (ce_s, rhsc) == 1)\n \t\t\t  {\n \t\t\t    struct constraint_expr *origrhs;\n \t\t\t    varinfo_t origvar;\n@@ -3568,6 +3591,63 @@ push_fields_onto_fieldstack (tree type, VEC(fieldoff_s,heap) **fieldstack,\n       return 2;\n     }\n \n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      tree sz = TYPE_SIZE (type);\n+      tree elsz = TYPE_SIZE (TREE_TYPE (type));\n+      HOST_WIDE_INT nr;\n+      int i;\n+\n+      if (! sz\n+\t  || ! host_integerp (sz, 1)\n+\t  || TREE_INT_CST_LOW (sz) == 0\n+\t  || ! elsz\n+\t  || ! host_integerp (elsz, 1)\n+\t  || TREE_INT_CST_LOW (elsz) == 0)\n+\treturn 0;\n+\n+      nr = TREE_INT_CST_LOW (sz) / TREE_INT_CST_LOW (elsz);\n+      if (nr > SALIAS_MAX_ARRAY_ELEMENTS)\n+\treturn 0;\n+\n+      for (i = 0; i < nr; ++i)\n+\t{\n+\t  bool push = false;\n+\t  int pushed = 0;\n+\t\n+\t  if (has_union \n+\t      && (TREE_CODE (TREE_TYPE (type)) == QUAL_UNION_TYPE\n+\t\t  || TREE_CODE (TREE_TYPE (type)) == UNION_TYPE))\n+\t    *has_union = true;\n+\t\n+\t  if (!AGGREGATE_TYPE_P (TREE_TYPE (type))) /* var_can_have_subvars */\n+\t    push = true;\n+\t  else if (!(pushed = push_fields_onto_fieldstack\n+\t\t     (TREE_TYPE (type), fieldstack,\n+\t\t      offset + i * TREE_INT_CST_LOW (elsz), has_union)))\n+\t    /* Empty structures may have actual size, like in C++. So\n+\t       see if we didn't push any subfields and the size is\n+\t       nonzero, push the field onto the stack */\n+\t    push = true;\n+\n+\t  if (push)\n+\t    {\n+\t      fieldoff_s *pair;\n+\n+\t      pair = VEC_safe_push (fieldoff_s, heap, *fieldstack, NULL);\n+\t      pair->type = TREE_TYPE (type);\n+\t      pair->size = elsz;\n+\t      pair->decl = NULL_TREE;\n+\t      pair->offset = offset + i * TREE_INT_CST_LOW (elsz);\n+\t      count++;\n+\t    }\n+\t  else\n+\t    count += pushed;\n+\t}\n+\n+      return count;\n+    }\n+\n   for (field = TYPE_FIELDS (type); field; field = TREE_CHAIN (field))\n     if (TREE_CODE (field) == FIELD_DECL)\n       {"}]}