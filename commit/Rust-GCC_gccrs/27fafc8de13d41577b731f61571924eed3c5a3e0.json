{"sha": "27fafc8de13d41577b731f61571924eed3c5a3e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdmYWZjOGRlMTNkNDE1NzdiNzMxZjYxNTcxOTI0ZWVkM2M1YTNlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-05-22T03:32:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-22T03:32:43Z"}, "message": "pt.c (determine_specialization): Just return an error_mark_node.\n\n\t* pt.c (determine_specialization): Just return an error_mark_node.\n\tAlso print the decl we want in error messages.  If we complain,\n\treturn error_mark_node.\n\t(tsubst_friend_function): Set lineno and input_filename so\n\terror messages will be useful.\n\t(instantiate_template): Just return an error_mark_node.\n\t* pt.c (print_template_context): Add new argument.\n\t(maybe_print_template_context): New fn.\n\t(push_tinst_level): Increment tinst_level_tick.\n\t(pop_tinst_level): Likewise.\n\t* errfn.c (cp_thing): Call maybe_print_template_context.  Use\n\txrealloc instead of xmalloc.\n\t* typeck.c (build_unary_op, CONVERT_EXPR): Propagate TREE_CONSTANT.\n\nFrom-SVN: r19946", "tree": {"sha": "2733b8b284901fd46e9746d2ac5a060d97c860d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2733b8b284901fd46e9746d2ac5a060d97c860d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27fafc8de13d41577b731f61571924eed3c5a3e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fafc8de13d41577b731f61571924eed3c5a3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27fafc8de13d41577b731f61571924eed3c5a3e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27fafc8de13d41577b731f61571924eed3c5a3e0/comments", "author": null, "committer": null, "parents": [{"sha": "911c3b7d7cf7c25f2b3f8ee1d19ba88fc21bac17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911c3b7d7cf7c25f2b3f8ee1d19ba88fc21bac17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911c3b7d7cf7c25f2b3f8ee1d19ba88fc21bac17"}], "stats": {"total": 112, "additions": 94, "deletions": 18}, "files": [{"sha": "2adb7c548033f122886916b6af306550b7b8b927", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=27fafc8de13d41577b731f61571924eed3c5a3e0", "patch": "@@ -1,3 +1,21 @@\n+1998-05-22  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (determine_specialization): Just return an error_mark_node.\n+\tAlso print the decl we want in error messages.  If we complain,\n+\treturn error_mark_node.\n+\t(tsubst_friend_function): Set lineno and input_filename so \n+\terror messages will be useful.\n+\t(instantiate_template): Just return an error_mark_node.\n+\n+\t* pt.c (print_template_context): Add new argument.\n+\t(maybe_print_template_context): New fn.\n+\t(push_tinst_level): Increment tinst_level_tick.\n+\t(pop_tinst_level): Likewise.\n+\t* errfn.c (cp_thing): Call maybe_print_template_context.  Use\n+\txrealloc instead of xmalloc.\n+\n+\t* typeck.c (build_unary_op, CONVERT_EXPR): Propagate TREE_CONSTANT.\n+\n 1998-05-21  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (tsubst_friend_class): Don't call redeclare_class_template"}, {"sha": "d5e7077fa152c62e881839b38fd51df6e4cb6764", "filename": "gcc/cp/errfn.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2Ferrfn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2Ferrfn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferrfn.c?ref=27fafc8de13d41577b731f61571924eed3c5a3e0", "patch": "@@ -72,11 +72,13 @@ cp_thing (errfn, atarg1, format, ap)\n   const char *f;\n   tree atarg = 0;\n \n+  maybe_print_template_context ();\n+\n   len = strlen (format) + 1;\n   if (len > buflen)\n     {\n       buflen = len;\n-      buf = xmalloc (buflen);\n+      buf = xrealloc (buf, buflen);\n     }\n   offset = 0;\n "}, {"sha": "2720f92eb2c010ba9e653750a9c3eafadd778ada", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 72, "deletions": 17, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=27fafc8de13d41577b731f61571924eed3c5a3e0", "patch": "@@ -756,6 +756,9 @@ determine_specialization (template_id, decl, targs_out,\n \n   *targs_out = NULL_TREE;\n \n+  if (fns == error_mark_node)\n+    return error_mark_node;\n+\n   /* Check for baselinks. */\n   if (TREE_CODE (fns) == TREE_LIST)\n     fns = TREE_VALUE (fns);\n@@ -823,19 +826,22 @@ determine_specialization (template_id, decl, targs_out,\n     {\n     no_match:\n       if (complain)\n-\tcp_error (\"`%D' does not match any template declaration\",\n-\t\t  template_id);\n-      \n+\t{\n+\t  cp_error_at (\"template-id `%D' for `%+D' does not match any template declaration\",\n+\t\t       template_id, decl);\n+\t  return error_mark_node;\n+\t}\n       return NULL_TREE;\n     }\n   else if (TREE_CHAIN (templates) != NULL_TREE) \n     {\n     ambiguous:\n       if (complain)\n \t{\n-\t  cp_error (\"ambiguous template specialization `%D'\",\n-\t\t    template_id);\n+\t  cp_error_at (\"ambiguous template specialization `%D' for `%+D'\",\n+\t\t       template_id, decl);\n \t  print_candidates (templates);\n+\t  return error_mark_node;\n \t}\n       return NULL_TREE;\n     }\n@@ -3313,24 +3319,46 @@ uses_template_parms (t)\n   return for_each_template_parm (t, 0, 0);\n }\n \n-static struct tinst_level *current_tinst_level = 0;\n-static struct tinst_level *free_tinst_level = 0;\n-static int tinst_depth = 0;\n+static struct tinst_level *current_tinst_level;\n+static struct tinst_level *free_tinst_level;\n+static int tinst_depth;\n extern int max_tinst_depth;\n #ifdef GATHER_STATISTICS\n-int depth_reached = 0;\n+int depth_reached;\n #endif\n+int tinst_level_tick;\n+int last_template_error_tick;\n \n /* Print out all the template instantiations that we are currently\n-   working on.  */\n+   working on.  If ERR, we are being called from cp_thing, so do\n+   the right thing for an error message.  */\n \n-void\n-print_template_context ()\n+static void\n+print_template_context (err)\n+     int err;\n {\n   struct tinst_level *p = current_tinst_level;\n   int line = lineno;\n   char *file = input_filename;\n \n+  if (err)\n+    {\n+      if (current_function_decl == p->decl)\n+\t/* Avoid redundancy with the the \"In function\" line.  */;\n+      else if (current_function_decl == NULL_TREE)\n+\tcp_error (\"In instantiation of `%D':\", p->decl);\n+      else\n+\tmy_friendly_abort (980521);\n+\n+      if (p)\n+\t{\n+\t  lineno = p->line;\n+\t  input_filename = p->file;\n+\t  p = p->next;\n+\t}\n+    }\n+\n+ next:\n   for (; p; p = p->next)\n     {\n       cp_error (\"  instantiated from `%D'\", p->decl);\n@@ -3343,6 +3371,19 @@ print_template_context ()\n   input_filename = file;\n }\n \n+/* Called from cp_thing to print the template context for an error.  */\n+\n+void\n+maybe_print_template_context ()\n+{\n+  if (last_template_error_tick == tinst_level_tick\n+      || current_tinst_level == 0)\n+    return;\n+\n+  last_template_error_tick = tinst_level_tick;\n+  print_template_context (1);\n+}\n+\n static int\n push_tinst_level (d)\n      tree d;\n@@ -3362,7 +3403,7 @@ push_tinst_level (d)\n       error (\" (use -ftemplate-depth-NN to increase the maximum)\");\n       cp_error (\"  instantiating `%D'\", d);\n \n-      print_template_context ();\n+      print_template_context (0);\n \n       return 0;\n     }\n@@ -3387,6 +3428,7 @@ push_tinst_level (d)\n     depth_reached = tinst_depth;\n #endif\n \n+  ++tinst_level_tick;\n   return 1;\n }\n \n@@ -3399,6 +3441,7 @@ pop_tinst_level ()\n   old->next = free_tinst_level;\n   free_tinst_level = old;\n   --tinst_depth;\n+  ++tinst_level_tick;\n }\n \n struct tinst_level *\n@@ -3423,7 +3466,12 @@ tsubst_friend_function (decl, args)\n      tree args;\n {\n   tree new_friend;\n-  \n+  int line = lineno;\n+  char *file = input_filename;\n+\n+  lineno = DECL_SOURCE_LINE (decl);\n+  input_filename = DECL_SOURCE_FILE (decl);\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL \n       && DECL_TEMPLATE_INSTANTIATION (decl)\n       && TREE_CODE (DECL_TI_TEMPLATE (decl)) != TEMPLATE_DECL)\n@@ -3458,10 +3506,11 @@ tsubst_friend_function (decl, args)\n \t\t\t\t       new_friend,\n \t\t\t\t       &new_args,\n \t\t\t\t       0, 1);\n-      return instantiate_template (tmpl, new_args);\n+      new_friend = instantiate_template (tmpl, new_args);\n+      goto done;\n     }\n-    else\n-      new_friend = tsubst (decl, args, NULL_TREE);\n+  else\n+    new_friend = tsubst (decl, args, NULL_TREE);\n \t\n   /* The new_friend will look like an instantiation, to the\n      compiler, but is not an instantiation from the point of view of\n@@ -3497,6 +3546,9 @@ tsubst_friend_function (decl, args)\n \tnew_friend = fn;\n     }\n \n+ done:\n+  lineno = line;\n+  input_filename = file;\n   return new_friend;\n }\n \n@@ -5516,6 +5568,9 @@ instantiate_template (tmpl, targ_ptr)\n   struct obstack *old_fmp_obstack;\n   extern struct obstack *function_maybepermanent_obstack;\n \n+  if (tmpl == error_mark_node)\n+    return error_mark_node;\n+\n   my_friendly_assert (TREE_CODE (tmpl) == TEMPLATE_DECL, 283);\n \n   /* FIXME this won't work with member templates; we only have one level"}, {"sha": "4dffd73f435cb84ceb77b2d94c70a316c24fca53", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27fafc8de13d41577b731f61571924eed3c5a3e0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=27fafc8de13d41577b731f61571924eed3c5a3e0", "patch": "@@ -4259,6 +4259,7 @@ build_unary_op (code, xarg, noconvert)\n \t  if (!noconvert)\n \t   arg = default_conversion (arg);\n \t  arg = build1 (NON_LVALUE_EXPR, TREE_TYPE (arg), arg);\n+\t  TREE_CONSTANT (arg) = TREE_CONSTANT (TREE_OPERAND (arg, 0));\n \t}\n       break;\n "}]}