{"sha": "81b02905b035e7afee46c38186c95434b6d86813", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiMDI5MDViMDM1ZTdhZmVlNDZjMzgxODZjOTU0MzRiNmQ4NjgxMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-08T10:53:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-08T10:53:05Z"}, "message": "invoke.texi (-Wimplicit-fallthrough): Document FALLTHRU comment style changes.\n\n\t* doc/invoke.texi (-Wimplicit-fallthrough): Document FALLTHRU comment\n\tstyle changes.\n\n\t* lex.c (fallthrough_comment_p): Extend to handle more common FALLTHRU\n\tcomment styles.\n\n\t* c-c++-common/Wimplicit-fallthrough-23.c (foo): Add further tests.\n\nFrom-SVN: r240885", "tree": {"sha": "4947622b51f5c1b8e380d14c7173ad3d1d835182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4947622b51f5c1b8e380d14c7173ad3d1d835182"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b02905b035e7afee46c38186c95434b6d86813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b02905b035e7afee46c38186c95434b6d86813", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b02905b035e7afee46c38186c95434b6d86813", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b02905b035e7afee46c38186c95434b6d86813/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7bad794aa005aa3ee52fc9c872051d8346c09a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bad794aa005aa3ee52fc9c872051d8346c09a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bad794aa005aa3ee52fc9c872051d8346c09a24"}], "stats": {"total": 226, "additions": 213, "deletions": 13}, "files": [{"sha": "f547a7b8da6e4ff933e5341100e23bd7e70fab30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b02905b035e7afee46c38186c95434b6d86813/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b02905b035e7afee46c38186c95434b6d86813/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81b02905b035e7afee46c38186c95434b6d86813", "patch": "@@ -1,5 +1,8 @@\n 2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* doc/invoke.texi (-Wimplicit-fallthrough): Document FALLTHRU comment\n+\tstyle changes.\n+\n \t* doc/invoke.texi (-Wimplicit-fallthrough): Document the accepted\n \tFALLTHRU comment styles.\n "}, {"sha": "65805babb30e69ad416aad7c60daa156ed3537d3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b02905b035e7afee46c38186c95434b6d86813/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b02905b035e7afee46c38186c95434b6d86813/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=81b02905b035e7afee46c38186c95434b6d86813", "patch": "@@ -4179,11 +4179,13 @@ should match one of the following regular expressions:\n \n @item @code{@@fallthrough@@}\n \n-@item @code{[ \\t]*FALL(S | |-)?THR(OUGH|U)\\.?[ \\t]*}\n+@item @code{lint -fallthrough ?}\n \n-@item @code{[ \\t]*Fall((s | |-)[Tt]|t)hr(ough|u)\\.?[ \\t]*}\n+@item @code{[ \\t.!]*(ELSE |INTENTIONAL(LY)? )?FALL(S | |-)?THR(OUGH|U)[ \\t.!]*(-[^\\n\\r]*)?}\n \n-@item @code{[ \\t]*fall(s | |-)?thr(ough|u)\\.?[ \\t]*}\n+@item @code{[ \\t.!]*(Else |Intentional(ly)? )?Fall((s | |-)[Tt]|t)hr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?}\n+\n+@item @code{[ \\t.!]*([Ee]lse |[Ii]ntentional(ly)? )?fall(s | |-)?thr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?}\n \n @end itemize\n "}, {"sha": "12b90093a98a6437fa41e8872e65a5bca892ed55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b02905b035e7afee46c38186c95434b6d86813/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b02905b035e7afee46c38186c95434b6d86813/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81b02905b035e7afee46c38186c95434b6d86813", "patch": "@@ -1,5 +1,7 @@\n 2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/Wimplicit-fallthrough-23.c (foo): Add further tests.\n+\n \t* c-c++-common/Wimplicit-fallthrough-23.c: New test.\n \t* c-c++-common/Wimplicit-fallthrough-24.c: New test.\n "}, {"sha": "c2988b716db5b0d99cd0117f48f55ae9a15dd5ec", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-23.c", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b02905b035e7afee46c38186c95434b6d86813/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b02905b035e7afee46c38186c95434b6d86813/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-23.c?ref=81b02905b035e7afee46c38186c95434b6d86813", "patch": "@@ -21,15 +21,39 @@ foo (int i)\n     case 4:\n       bar (4);\n       break;\n+    case 5:\n+      bar (5);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* Else Fall-Thru!  */\n+    case 6:\n+      bar (6);\n+      break;\n     case 7:\n       bar (7);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       /* Some comment.  */\n-      /* fallthrough.  */\n+      /* ... fallthrough ...  */\n       /* Some other comment.  */\n       /* And yet another.  */\n     case 8:\n       bar (8);\n       break;\n+    case 9:\n+      bar (9);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* Intentional Fallthru */\n+    case 10:\n+      bar (10);\n+      break;\n+    case 11:\n+      bar (11);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* intentionally fall through  */\n+    case 12:\n+      bar (12);\n+      break;\n+    case 13:\n+      bar (13);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /* Falls Through - for reasons known only to the author.  */\n+    case 14:\n+      bar (14);\n+      break;\n     case 15:\n       bar (15);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       /*-fallthrough*/\n@@ -42,12 +66,42 @@ foo (int i)\n     case 18:\n       bar (18);\n       break;\n+    case 19:\n+      bar (19);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*lint -fallthrough*/\n+    case 20:\n+      bar (20);\n+      break;\n+    case 21:\n+      bar (21);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*lint -fallthrough */\n+    case 22:\n+      bar (22);\n+      break;\n     case 23:\n       bar (23);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       /*fallthru*/\n     case 24:\n       bar (24);\n       break;\n+    case 25:\n+      bar (25);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*Else fallthru*/\n+    case 26:\n+      bar (26);\n+      break;\n+    case 27:\n+      bar (27);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*Intentional fallthru*/\n+    case 28:\n+      bar (28);\n+      break;\n+    case 29:\n+      bar (29);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      /*Intentionally fallthru*/\n+    case 30:\n+      bar (30);\n+      break;\n     case 31:\n       bar (31);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       /*Falls thru*/\n@@ -78,15 +132,39 @@ foo (int i)\n     case 4:\n       bar (4);\n       break;\n+    case 5:\n+      bar (5);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // Else Fall-Thru!\n+    case 6:\n+      bar (6);\n+      break;\n     case 7:\n       bar (7);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       // Some comment.\n-      // fallthrough\n+      // ... fallthrough ...\n       // Some other comment.\n       // And yet another.\n     case 8:\n       bar (8);\n       break;\n+    case 9:\n+      bar (9);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // Intentional Fallthru\n+    case 10:\n+      bar (10);\n+      break;\n+    case 11:\n+      bar (11);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // intentionally fall through \n+    case 12:\n+      bar (12);\n+      break;\n+    case 13:\n+      bar (13);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      // Falls Through - for reasons known only to the author.\n+    case 14:\n+      bar (14);\n+      break;\n     case 15:\n       bar (15);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       //-fallthrough\n@@ -99,12 +177,42 @@ foo (int i)\n     case 18:\n       bar (18);\n       break;\n+    case 19:\n+      bar (19);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //lint -fallthrough\n+    case 20:\n+      bar (20);\n+      break;\n+    case 21:\n+      bar (21);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //lint -fallthrough \n+    case 22:\n+      bar (22);\n+      break;\n     case 23:\n       bar (23);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       //fallthru\n     case 24:\n       bar (24);\n       break;\n+    case 25:\n+      bar (25);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //Else fallthru\n+    case 26:\n+      bar (26);\n+      break;\n+    case 27:\n+      bar (27);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //Intentional fallthru\n+    case 28:\n+      bar (28);\n+      break;\n+    case 29:\n+      bar (29);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n+      //Intentionally fallthru\n+    case 30:\n+      bar (30);\n+      break;\n     case 31:\n       bar (31);\t\t\t/* { dg-bogus \"this statement may \\[laf]* through\" } */\n       //Falls thru"}, {"sha": "6e48566878e6c3e8e66de640cc141544a4f21ce3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b02905b035e7afee46c38186c95434b6d86813/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b02905b035e7afee46c38186c95434b6d86813/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=81b02905b035e7afee46c38186c95434b6d86813", "patch": "@@ -1,5 +1,8 @@\n 2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* lex.c (fallthrough_comment_p): Extend to handle more common FALLTHRU\n+\tcomment styles.\n+\n \t* lex.c (fallthrough_comment_p): Fix off-by-one size comparison\n \terrors, cleanup.\n \t(_cpp_lex_direct): Allow arbitrary comments in between"}, {"sha": "2e0512d6428e8391cd3bb57b57a2dee56acdb066", "filename": "libcpp/lex.c", "status": "modified", "additions": 90, "deletions": 8, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b02905b035e7afee46c38186c95434b6d86813/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b02905b035e7afee46c38186c95434b6d86813/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=81b02905b035e7afee46c38186c95434b6d86813", "patch": "@@ -2060,22 +2060,86 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n       from += 1 + len;\n     }\n   /* Whole comment contents (regex):\n-     [ \\t]*FALL(S | |-)?THR(OUGH|U)\\.?[ \\t]*\n-     [ \\t]*Fall((s | |-)[Tt]|t)hr(ough|u)\\.?[ \\t]*\n-     [ \\t]*fall(s | |-)?thr(ough|u)\\.?[ \\t]*\n+     lint -fallthrough ?\n+   */\n+  else if (*from == 'l')\n+    {\n+      size_t len = sizeof \"int -fallthrough\" - 1;\n+      if ((size_t) (pfile->buffer->cur - from - 1) < len)\n+\treturn false;\n+      if (memcmp (from + 1, \"int -fallthrough\", len))\n+        return false;\n+      from += 1 + len;\n+      if (*from == ' ')\n+        from++;\n+    }\n+  /* Whole comment contents (regex):\n+     [ \\t.!]*(ELSE |INTENTIONAL(LY)? )?FALL(S | |-)?THR(OUGH|U)[ \\t.!]*(-[^\\n\\r]*)?\n+     [ \\t.!]*(Else |Intentional(ly)? )?Fall((s | |-)[Tt]|t)hr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?\n+     [ \\t.!]*([Ee]lse |[Ii]ntentional(ly)? )?fall(s | |-)?thr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?\n    */\n   else\n     {\n-      while (*from == ' ' || *from == '\\t')\n+      while (*from == ' ' || *from == '\\t' || *from == '.' || *from == '!')\n \tfrom++;\n       unsigned char f = *from;\n+      bool all_upper = false;\n+      if (f == 'E' || f == 'e')\n+        {\n+          if ((size_t) (pfile->buffer->cur - from)\n+\t      < sizeof \"else fallthru\" - 1)\n+\t    return false;\n+\t  if (f == 'E' && memcmp (from + 1, \"LSE F\", sizeof \"LSE F\" - 1) == 0)\n+\t    all_upper = true;\n+\t  else if (memcmp (from + 1, \"lse \", sizeof \"lse \" - 1))\n+\t    return false;\n+\t  from += sizeof \"else \" - 1;\n+\t  if (f == 'e' && *from == 'F')\n+\t    return false;\n+\t  f = *from;\n+        }\n+      else if (f == 'I' || f == 'i')\n+        {\n+          if ((size_t) (pfile->buffer->cur - from)\n+\t      < sizeof \"intentional fallthru\" - 1)\n+\t    return false;\n+\t  if (f == 'I' && memcmp (from + 1, \"NTENTIONAL\",\n+\t\t\t\t  sizeof \"NTENTIONAL\" - 1) == 0)\n+\t    all_upper = true;\n+\t  else if (memcmp (from + 1, \"ntentional\",\n+\t\t\t   sizeof \"ntentional\" - 1))\n+\t    return false;\n+\t  from += sizeof \"intentional\" - 1;\n+\t  if (*from == ' ')\n+\t    {\n+\t      from++;\n+\t      if (all_upper && *from == 'f')\n+\t\treturn false;\n+\t    }\n+\t  else if (all_upper)\n+\t    {\n+\t      if (memcmp (from, \"LY F\", sizeof \"LY F\" - 1))\n+\t\treturn false;\n+\t      from += sizeof \"LY \" - 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (memcmp (from, \"ly \", sizeof \"ly \" - 1))\n+\t\treturn false;\n+\t      from += sizeof \"ly \" - 1;\n+\t    }\n+\t  if (f == 'i' && *from == 'F')\n+\t    return false;\n+\t  f = *from;\n+        }\n       if (f != 'F' && f != 'f')\n \treturn false;\n       if ((size_t) (pfile->buffer->cur - from) < sizeof \"fallthru\" - 1)\n \treturn false;\n-      bool all_upper = false;\n       if (f == 'F' && memcmp (from + 1, \"ALL\", sizeof \"ALL\" - 1) == 0)\n \tall_upper = true;\n+      else if (all_upper)\n+\treturn false;\n       else if (memcmp (from + 1, \"all\", sizeof \"all\" - 1))\n \treturn false;\n       from += sizeof \"fall\" - 1;\n@@ -2100,10 +2164,28 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n \t}\n       else\n \tfrom += sizeof \"thru\" - 1;\n-      if (*from == '.')\n-\tfrom++;\n-      while (*from == ' ' || *from == '\\t')\n+      while (*from == ' ' || *from == '\\t' || *from == '.' || *from == '!')\n \tfrom++;\n+      if (*from == '-')\n+\t{\n+\t  from++;\n+\t  if (*comment_start == '*')\n+\t    {\n+\t      do\n+\t\t{\n+\t\t  while (*from && *from != '*'\n+\t\t\t && *from != '\\n' && *from != '\\r')\n+\t\t    from++;\n+\t\t  if (*from != '*' || from[1] == '/')\n+\t\t    break;\n+\t\t  from++;\n+\t\t}\n+\t      while (1);\n+\t    }\n+\t  else\n+\t    while (*from && *from != '\\n' && *from != '\\r')\n+\t      from++;\n+\t}\n     }\n   /* C block comment.  */\n   if (*comment_start == '*')"}]}