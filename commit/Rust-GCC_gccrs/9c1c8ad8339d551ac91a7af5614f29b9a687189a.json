{"sha": "9c1c8ad8339d551ac91a7af5614f29b9a687189a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMxYzhhZDgzMzlkNTUxYWM5MWE3YWY1NjE0ZjI5YjlhNjg3MTg5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-12T23:00:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-12T23:00:48Z"}, "message": "combine: Don't fold away side-effects in simplify_and_const_int_1 [PR99830]\n\nHere is an alternate patch for the PR99830 bug.\nAs discussed on IRC and in the PR, the reason why a (clobber:TI (const_int 0))\nhas been propagated into the debug insns is that it got optimized away\nduring simplification from the i3 instruction pattern.\n\nAnd that happened because\nsimplify_and_const_int_1 (SImode, varop, 255)\nwith varop of\n(ashift:SI (subreg:SI (and:TI (clobber:TI (const_int 0 [0]))\n                              (const_int 255 [0xff])) 0)\n           (const_int 16 [0x10]))\nwas called and through nonzero_bits determined that (whatever << 16) & 255\nis const0_rtx.\nIt is, but if there are side-effects in varop and such clobbers are\nconsidered as such, we shouldn't optimize those away.\n\n2021-04-13  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/99830\n\t* combine.c (simplify_and_const_int_1): Don't optimize varop\n\taway if it has side-effects.\n\n\t* gcc.dg/pr99830.c: New test.", "tree": {"sha": "0451fabdd1ac65cf568ee89dad45e6fb40d31773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0451fabdd1ac65cf568ee89dad45e6fb40d31773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c1c8ad8339d551ac91a7af5614f29b9a687189a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1c8ad8339d551ac91a7af5614f29b9a687189a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c1c8ad8339d551ac91a7af5614f29b9a687189a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c1c8ad8339d551ac91a7af5614f29b9a687189a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb49f7de9341cb464327234c3a673ce3ef642e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb49f7de9341cb464327234c3a673ce3ef642e01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb49f7de9341cb464327234c3a673ce3ef642e01"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "dffa3b0390b582f805be7e014baad085eb89c32b", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1c8ad8339d551ac91a7af5614f29b9a687189a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1c8ad8339d551ac91a7af5614f29b9a687189a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=9c1c8ad8339d551ac91a7af5614f29b9a687189a", "patch": "@@ -10153,7 +10153,7 @@ simplify_and_const_int_1 (scalar_int_mode mode, rtx varop,\n   constop &= nonzero;\n \n   /* If we don't have any bits left, return zero.  */\n-  if (constop == 0)\n+  if (constop == 0 && !side_effects_p (varop))\n     return const0_rtx;\n \n   /* If VAROP is a NEG of something known to be zero or 1 and CONSTOP is"}, {"sha": "75226f5c3a940a3097617f94880b4829cc806246", "filename": "gcc/testsuite/gcc.dg/pr99830.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c1c8ad8339d551ac91a7af5614f29b9a687189a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c1c8ad8339d551ac91a7af5614f29b9a687189a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99830.c?ref=9c1c8ad8339d551ac91a7af5614f29b9a687189a", "patch": "@@ -0,0 +1,10 @@\n+/* PR debug/99830 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fno-expensive-optimizations -fno-split-wide-types -g\" } */\n+\n+int foo (long a, __int128 b, short c, int d, unsigned e, __int128 f)\n+{\n+  __builtin_memmove (2 + (char *) &f, foo, 1);\n+  c >>= (char) f;\n+  return c;\n+}"}]}