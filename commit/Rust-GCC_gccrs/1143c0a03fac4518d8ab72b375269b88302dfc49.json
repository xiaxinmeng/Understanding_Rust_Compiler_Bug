{"sha": "1143c0a03fac4518d8ab72b375269b88302dfc49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0M2MwYTAzZmFjNDUxOGQ4YWI3MmIzNzUyNjliODgzMDJkZmM0OQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "2000-04-22T17:09:39Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "2000-04-22T17:09:39Z"}, "message": "+ 2000-04-22 Anthony Green <green@cygnus.com> + + * include/jvm.h (__builtin_expect): Define as unused for now.\n\n+ 2000-04-22  Anthony Green  <green@cygnus.com>\n+\n+ \t* include/jvm.h (__builtin_expect): Define as unused for now.\n+ \t* java/lang/natObject.cc (_Jv_MonitorEnter): Add __builtin_expect.\n+ \t(notify): Ditto.\n+ \t(notifyAll): Ditto.\n+ \t(wait): Ditto.\n+ \t(_Jv_MonitorExit): Ditto.\n+ \t* boehm.cc (_Jv_MarkObj): Ditto.\n+ \t(_Jv_MarkObj): Ditto.\n+ \t(_Jv_MarkArray): Ditto.\n+ \t(_Jv_AllocBytes): Ditto.\n+ \t* prims.cc (_Jv_AllocObject): Ditto.\n+ \t(_Jv_NewObjectArray): Ditto.\n+ \t(_Jv_NewPrimArray): Ditto.\n+ \t(_Jv_Malloc): Ditto.\n+ \t(_Jv_Realloc): Ditto.\n+ \t(_Jv_MallocUnchecked): Ditto.\n+ \t(_Jv_divI): Ditto.\n+ \t(_Jv_remI): Ditto.\n+ \t(_Jv_divJ): Ditto.\n+ \t(_Jv_remJ): Ditto.\n+\n+ \t* include/Makefile.in: Rebuilt.\n+ \t* include/Makefile.am (include_HEADERS): Add jvmpi.h.\n+\n\nFrom-SVN: r33339", "tree": {"sha": "174f5778c3674a19984c0ecaef26fd9c1b42d71f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/174f5778c3674a19984c0ecaef26fd9c1b42d71f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1143c0a03fac4518d8ab72b375269b88302dfc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1143c0a03fac4518d8ab72b375269b88302dfc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1143c0a03fac4518d8ab72b375269b88302dfc49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1143c0a03fac4518d8ab72b375269b88302dfc49/comments", "author": null, "committer": null, "parents": [{"sha": "3fb304e7e478d72e3e90492bfa57b6af9c2942df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fb304e7e478d72e3e90492bfa57b6af9c2942df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fb304e7e478d72e3e90492bfa57b6af9c2942df"}], "stats": {"total": 99, "additions": 65, "deletions": 34}, "files": [{"sha": "072d5ef10462cccaf7768636a2dcd674b2ac8bcb", "filename": "libjava/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -1,3 +1,29 @@\n+2000-04-22  Anthony Green  <green@cygnus.com>\n+\n+\t* include/jvm.h (__builtin_expect): Define as unused for now.\n+\t* java/lang/natObject.cc (_Jv_MonitorEnter): Add __builtin_expect.\n+\t(notify): Ditto.\n+\t(notifyAll): Ditto.\n+\t(wait): Ditto.\n+\t(_Jv_MonitorExit): Ditto.\n+\t* boehm.cc (_Jv_MarkObj): Ditto.\n+\t(_Jv_MarkObj): Ditto.\n+\t(_Jv_MarkArray): Ditto.\n+\t(_Jv_AllocBytes): Ditto.\n+\t* prims.cc (_Jv_AllocObject): Ditto.\n+\t(_Jv_NewObjectArray): Ditto.\n+\t(_Jv_NewPrimArray): Ditto.\n+\t(_Jv_Malloc): Ditto.\n+\t(_Jv_Realloc): Ditto.\n+\t(_Jv_MallocUnchecked): Ditto.\n+\t(_Jv_divI): Ditto.\n+\t(_Jv_remI): Ditto.\n+\t(_Jv_divJ): Ditto.\n+\t(_Jv_remJ): Ditto.\n+\n+\t* include/Makefile.in: Rebuilt.\n+\t* include/Makefile.am (include_HEADERS): Add jvmpi.h.\n+\n 2000-04-21  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/io/PipedInputStream.java, java/io/PipedOutputStream.java:"}, {"sha": "62b9a86fc974cad9a328fd9d0751cca0f86e45d0", "filename": "libjava/boehm.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Fboehm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Fboehm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fboehm.cc?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -87,7 +87,7 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void * /*env*/)\n   _Jv_VTable *dt = *(_Jv_VTable **) addr;\n   // We check this in case a GC occurs before the vtbl is set.  FIXME:\n   // should use allocation lock while initializing object.\n-  if (! dt)\n+  if (__builtin_expect (! dt, 0))\n     return mark_stack_ptr;\n   jclass klass = dt->clas;\n \n@@ -98,7 +98,7 @@ _Jv_MarkObj (void *addr, void *msp, void *msl, void * /*env*/)\n   p = (ptr_t) klass;\n   MAYBE_MARK (p, mark_stack_ptr, mark_stack_limit, obj, o2label);\n \n-  if (klass == &ClassClass)\n+  if (__builtin_expect (klass == &ClassClass, 0))\n     {\n       jclass c = (jclass) addr;\n \n@@ -281,7 +281,7 @@ _Jv_MarkArray (void *addr, void *msp, void *msl, void * /*env*/)\n   _Jv_VTable *dt = *(_Jv_VTable **) addr;\n   // We check this in case a GC occurs before the vtbl is set.  FIXME:\n   // should use allocation lock while initializing object.\n-  if (! dt)\n+  if (__builtin_expect (! dt, 0))\n     return mark_stack_ptr;\n   jclass klass = dt->clas;\n \n@@ -329,7 +329,7 @@ _Jv_AllocBytes (jsize size)\n   // guarantee that PTRFREE allocations are zeroed.  Note that we\n   // don't have to do this for other allocation types because we set\n   // the `ok_init' flag in the type descriptor.\n-  if (r != NULL)\n+  if (__builtin_expect (r != NULL, !NULL))\n     memset (r, 0, size);\n   return r;\n }"}, {"sha": "8e3f18f9d0c1edea642b82cc2a88652f6b8636c2", "filename": "libjava/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.am?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -2,4 +2,4 @@\n \n AUTOMAKE_OPTIONS = foreign no-installinfo\n \n-include_HEADERS = jni.h\n+include_HEADERS = jni.h jvmpi.h"}, {"sha": "d3486584310abf3ffb386a35821d0853b28afebb", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -116,7 +116,7 @@ libgcj_basedir = @libgcj_basedir@\n \n AUTOMAKE_OPTIONS = foreign no-installinfo\n \n-include_HEADERS = jni.h\n+include_HEADERS = jni.h jvmpi.h\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = config.h\n CONFIG_CLEAN_FILES = \n@@ -127,7 +127,7 @@ DIST_COMMON =  ./stamp-h.in Makefile.am Makefile.in config.h.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n@@ -224,7 +224,7 @@ distdir: $(DISTFILES)\n \t@for file in $(DISTFILES); do \\\n \t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n-\t    cp -pr $$/$$file $(distdir)/$$file; \\\n+\t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n \t    test -f $(distdir)/$$file \\\n \t    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \\"}, {"sha": "8660443f6ed1234870fa84ee03412d70c05fd9b3", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -11,6 +11,9 @@ details.  */\n #ifndef __JAVA_JVM_H__\n #define __JAVA_JVM_H__\n \n+// FIXME: __builtin_expect doesn't work yet.\n+#define __builtin_expect(A,B) (A)\n+\n #include <gcj/javaprims.h>\n \n #include <java-assert.h>"}, {"sha": "6aed8986d1dd3b7706275dcbcf4ed60151ade59c", "filename": "libjava/java/lang/natObject.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Fjava%2Flang%2FnatObject.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Fjava%2Flang%2FnatObject.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatObject.cc?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -172,31 +172,31 @@ java::lang::Object::sync_init (void)\n void\n java::lang::Object::notify (void)\n {\n-  if (INIT_NEEDED (this))\n+  if (__builtin_expect (INIT_NEEDED (this), 0))\n     sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n-  if (_Jv_CondNotify (&si->condition, &si->mutex))\n+  if (__builtin_expect (_Jv_CondNotify (&si->condition, &si->mutex), 0))\n     JvThrow (new IllegalMonitorStateException(JvNewStringLatin1 \n                                               (\"current thread not owner\")));\n }\n \n void\n java::lang::Object::notifyAll (void)\n {\n-  if (INIT_NEEDED (this))\n+  if (__builtin_expect (INIT_NEEDED (this), 0))\n     sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n-  if (_Jv_CondNotifyAll (&si->condition, &si->mutex))\n+  if (__builtin_expect (_Jv_CondNotifyAll (&si->condition, &si->mutex), 0))\n     JvThrow (new IllegalMonitorStateException(JvNewStringLatin1 \n                                               (\"current thread not owner\")));\n }\n \n void\n java::lang::Object::wait (jlong timeout, jint nanos)\n {\n-  if (INIT_NEEDED (this))\n+  if (__builtin_expect (INIT_NEEDED (this), 0))\n     sync_init ();\n-  if (timeout < 0 || nanos < 0 || nanos > 999999)\n+  if (__builtin_expect (timeout < 0 || nanos < 0 || nanos > 999999, 0))\n     JvThrow (new IllegalArgumentException);\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) sync_info;\n   switch (_Jv_CondWait (&si->condition, &si->mutex, timeout, nanos))\n@@ -226,10 +226,10 @@ jint\n _Jv_MonitorEnter (jobject obj)\n {\n #ifndef HANDLE_SEGV\n-  if (! obj)\n+  if (__builtin_expect (! obj, 0))\n     JvThrow (new java::lang::NullPointerException);\n #endif\n-  if (INIT_NEEDED (obj))\n+  if (__builtin_expect (INIT_NEEDED (obj), 0))\n     obj->sync_init ();\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) obj->sync_info;\n   return _Jv_MutexLock (&si->mutex);\n@@ -241,7 +241,7 @@ _Jv_MonitorExit (jobject obj)\n   JvAssert (obj);\n   JvAssert (! INIT_NEEDED (obj));\n   _Jv_SyncInfo *si = (_Jv_SyncInfo *) obj->sync_info;\n-  if (_Jv_MutexUnlock (&si->mutex))\n+  if (__builtin_expect (_Jv_MutexUnlock (&si->mutex), 0))\n     JvThrow (new java::lang::IllegalMonitorStateException);\n   return 0;\n }"}, {"sha": "32e079be690479e2f540347128eb2102658f7b33", "filename": "libjava/prims.cc", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1143c0a03fac4518d8ab72b375269b88302dfc49/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=1143c0a03fac4518d8ab72b375269b88302dfc49", "patch": "@@ -322,7 +322,7 @@ _Jv_AllocObject (jclass c, jint size)\n   _Jv_InitClass (c);\n \n   jobject obj = (jobject) _Jv_AllocObj (size);\n-  if (! obj)\n+  if (__builtin_expect (! obj, 0))\n     JvThrow (no_memory);\n   *((_Jv_VTable **) obj) = c->vtable;\n \n@@ -339,7 +339,7 @@ _Jv_AllocObject (jclass c, jint size)\n #ifdef ENABLE_JVMPI\n   // Service JVMPI request.\n \n-  if (_Jv_JVMPI_Notify_OBJECT_ALLOC)\n+  if (__builtin_expect (_Jv_JVMPI_Notify_OBJECT_ALLOC != 0, 0))\n     {\n       JVMPI_Event event;\n \n@@ -366,7 +366,7 @@ _Jv_AllocObject (jclass c, jint size)\n jobjectArray\n _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n {\n-  if (count < 0)\n+  if (__builtin_expect (count < 0, 0))\n     JvThrow (new java::lang::NegativeArraySizeException);\n \n   JvAssert (! elementClass->isPrimitive ());\n@@ -376,7 +376,8 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n \t\t\t\t\t\t\t     elementClass);\n \n   // Check for overflow.\n-  if ((size_t) count > (SIZE_T_MAX - size) / sizeof (jobject))\n+  if (__builtin_expect ((size_t) count > \n+\t\t\t(SIZE_T_MAX - size) / sizeof (jobject), 0));\n     JvThrow (no_memory);\n \n   size += count * sizeof (jobject);\n@@ -385,7 +386,7 @@ _Jv_NewObjectArray (jsize count, jclass elementClass, jobject init)\n   jclass clas = _Jv_FindArrayClass (elementClass, 0);\n \n   obj = (jobjectArray) _Jv_AllocArray (size);\n-  if (! obj)\n+  if (__builtin_expect (! obj, 0))\n     JvThrow (no_memory);\n   obj->length = count;\n   jobject* ptr = elements(obj);\n@@ -409,19 +410,20 @@ jobject\n _Jv_NewPrimArray (jclass eltype, jint count)\n {\n   int elsize = eltype->size();\n-  if (count < 0)\n+  if (__builtin_expect (count < 0, 0))\n     JvThrow (new java::lang::NegativeArraySizeException ());\n \n   JvAssert (eltype->isPrimitive ());\n   jobject dummy = NULL;\n   size_t size = (size_t) _Jv_GetArrayElementFromElementType (dummy, eltype);\n \n   // Check for overflow.\n-  if ((size_t) count > (SIZE_T_MAX - size) / elsize)\n+  if (__builtin_expect ((size_t) count > \n+\t\t\t(SIZE_T_MAX - size) / elsize, 0))\n     JvThrow (no_memory);\n \n   __JArray *arr = (__JArray*) _Jv_AllocObj (size + elsize * count);\n-  if (! arr)\n+  if (__builtin_expect (! arr, 0))\n     JvThrow (no_memory);\n   arr->length = count;\n   // Note that we assume we are given zeroed memory by the allocator.\n@@ -924,29 +926,29 @@ _Jv_SetMaximumHeapSize (const char *arg)\n void *\n _Jv_Malloc (jsize size)\n {\n-  if (size == 0)\n+  if (__builtin_expect (size == 0, 0))\n     size = 1;\n   void *ptr = malloc ((size_t) size);\n-  if (ptr == NULL)\n+  if (__builtin_expect (ptr == NULL, 0))\n     JvThrow (no_memory);\n   return ptr;\n }\n \n void *\n _Jv_Realloc (void *ptr, jsize size)\n {\n-  if (size == 0)\n+  if (__builtin_expect (size == 0, 0))\n     size = 1;\n   ptr = realloc (ptr, (size_t) size);\n-  if (ptr == NULL)\n+  if (__builtin_expect (ptr == NULL, 0))\n     JvThrow (no_memory);\n   return ptr;\n }\n \n void *\n _Jv_MallocUnchecked (jsize size)\n {\n-  if (size == 0)\n+  if (__builtin_expect (size == 0, 0))\n     size = 1;\n   return malloc ((size_t) size);\n }\n@@ -967,7 +969,7 @@ _Jv_Free (void* ptr)\n jint\n _Jv_divI (jint dividend, jint divisor)\n {\n-  if (divisor == 0)\n+  if (__builtin_expect (divisor == 0, 0))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jint) 0x80000000L && divisor == -1)\n@@ -979,7 +981,7 @@ _Jv_divI (jint dividend, jint divisor)\n jint\n _Jv_remI (jint dividend, jint divisor)\n {\n-  if (divisor == 0)\n+  if (__builtin_expect (divisor == 0, 0))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jint) 0x80000000L && divisor == -1)\n@@ -991,7 +993,7 @@ _Jv_remI (jint dividend, jint divisor)\n jlong\n _Jv_divJ (jlong dividend, jlong divisor)\n {\n-  if (divisor == 0)\n+  if (__builtin_expect (divisor == 0, 0))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jlong) 0x8000000000000000LL && divisor == -1)\n@@ -1003,7 +1005,7 @@ _Jv_divJ (jlong dividend, jlong divisor)\n jlong\n _Jv_remJ (jlong dividend, jlong divisor)\n {\n-  if (divisor == 0)\n+  if (__builtin_expect (divisor == 0, 0))\n     _Jv_Throw (arithexception);\n   \n   if (dividend == (jlong) 0x8000000000000000LL && divisor == -1)"}]}