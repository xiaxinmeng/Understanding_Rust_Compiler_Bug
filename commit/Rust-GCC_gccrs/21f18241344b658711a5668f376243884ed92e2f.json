{"sha": "21f18241344b658711a5668f376243884ed92e2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmMTgyNDEzNDRiNjU4NzExYTU2NjhmMzc2MjQzODg0ZWQ5MmUyZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-16T13:07:40Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-16T13:07:40Z"}, "message": "(special_symbol): Don't treat \"L\" in \"L'...'\" as identifier.\n\n(check_macro_name, collect_expansion, rescan): Likewise.\n\nFrom-SVN: r13659", "tree": {"sha": "c44a9e4973bb8f300d849ceab0787e59a7335751", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c44a9e4973bb8f300d849ceab0787e59a7335751"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21f18241344b658711a5668f376243884ed92e2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f18241344b658711a5668f376243884ed92e2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f18241344b658711a5668f376243884ed92e2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f18241344b658711a5668f376243884ed92e2f/comments", "author": null, "committer": null, "parents": [{"sha": "37ef10540dd0ccd42bf25190e0b8fd2311383be5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ef10540dd0ccd42bf25190e0b8fd2311383be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ef10540dd0ccd42bf25190e0b8fd2311383be5"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "c3aff4271d94c242ebc3531e6c36eb33d21fffcd", "filename": "gcc/cccp.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f18241344b658711a5668f376243884ed92e2f/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f18241344b658711a5668f376243884ed92e2f/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=21f18241344b658711a5668f376243884ed92e2f", "patch": "@@ -2813,7 +2813,10 @@ do { ip = &instack[indepth];\t\t\\\n       /* A single quoted string is treated like a double -- some\n \t programs (e.g., troff) are perverse this way */\n \n-      if (ident_length)\n+      /* Handle any pending identifier;\n+\t but the L in L'...' or L\"...\" is not an identifier.  */\n+      if (ident_length\n+\t  && ! (ident_length == 1 && hash == HASHSTEP (0, 'L')))\n \tgoto specialchar;\n \n       start_line = ip->lineno;\n@@ -4123,6 +4126,8 @@ special_symbol (hp, op)\n \n     if (!is_idstart[*ip->bufp])\n       goto oops;\n+    if (ip->bufp[0] == 'L' && (ip->bufp[1] == '\\'' || ip->bufp[1] == '\"'))\n+      goto oops;\n     if ((hp = lookup (ip->bufp, -1, -1))) {\n       if (pcp_outfile && pcp_inside_if\n \t  && (hp->type == T_CONST\n@@ -5716,7 +5721,8 @@ check_macro_name (symname, usage)\n   for (p = symname; is_idchar[*p]; p++)\n     ;\n   sym_length = p - symname;\n-  if (sym_length == 0)\n+  if (sym_length == 0\n+      || (sym_length == 1 && *symname == 'L' && (*p == '\\'' || *p == '\"')))\n     error (\"invalid %s name\", usage);\n   else if (!is_idstart[*symname]\n \t   || (sym_length == 7 && ! bcmp (symname, \"defined\", 7)))\n@@ -5942,7 +5948,8 @@ collect_expansion (buf, end, nargs, arglist)\n \t    p++;\n \t    SKIP_WHITE_SPACE (p);\n \t  }\n-\t  if (! is_idstart[*p] || nargs == 0)\n+\t  if (! is_idstart[*p] || nargs == 0\n+\t      || (*p == 'L' && (p[1] == '\\'' || p[1] == '\"')))\n \t    error (\"`#' operator is not followed by a macro argument name\");\n \t  else\n \t    stringify = p;\n@@ -6005,7 +6012,8 @@ collect_expansion (buf, end, nargs, arglist)\n       while (p != limit && is_idchar[*p]) p++;\n       id_len = p - id_beg;\n \n-      if (is_idstart[c]) {\n+      if (is_idstart[c]\n+\t  && ! (id_len == 1 && c == 'L' && (*p == '\\'' || *p == '\"'))) {\n \tregister struct arglist *arg;\n \n \tfor (arg = arglist; arg != NULL; arg = arg->next) {"}]}