{"sha": "1c0d6ea02a74761a1756b65aaa3028054e9be680", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwZDZlYTAyYTc0NzYxYTE3NTZiNjVhYWEzMDI4MDU0ZTliZTY4MA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:39:49Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-06-05T15:39:49Z"}, "message": "Add AST node_id to AST Trait Items\n\nNodeIds are ids to map back to the AST from HIR. This is the building block\nto begin name resolution for traits.\n\nAddresses #395", "tree": {"sha": "4d923ae000423777a7df9a99327450fbf7f6eef8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d923ae000423777a7df9a99327450fbf7f6eef8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c0d6ea02a74761a1756b65aaa3028054e9be680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0d6ea02a74761a1756b65aaa3028054e9be680", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0d6ea02a74761a1756b65aaa3028054e9be680", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0d6ea02a74761a1756b65aaa3028054e9be680/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f1d9ed87d3e870f8e64ea28ba3e6bc898502255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1d9ed87d3e870f8e64ea28ba3e6bc898502255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1d9ed87d3e870f8e64ea28ba3e6bc898502255"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "0e25de2be5c36075f5167329407a5cd0088a559f", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0d6ea02a74761a1756b65aaa3028054e9be680/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0d6ea02a74761a1756b65aaa3028054e9be680/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=1c0d6ea02a74761a1756b65aaa3028054e9be680", "patch": "@@ -1282,9 +1282,13 @@ class MacroItem : public Item\n class TraitItem\n {\n protected:\n+  TraitItem () : node_id (Analysis::Mappings::get ()->get_next_node_id ()) {}\n+\n   // Clone function implementation as pure virtual method\n   virtual TraitItem *clone_trait_item_impl () const = 0;\n \n+  NodeId node_id;\n+\n public:\n   virtual ~TraitItem () {}\n \n@@ -1300,6 +1304,8 @@ class TraitItem\n \n   virtual void mark_for_strip () = 0;\n   virtual bool is_marked_for_strip () const = 0;\n+\n+  NodeId get_node_id () const { return node_id; }\n };\n \n /* Abstract base class for items used within an inherent impl block (the impl"}, {"sha": "fecb862fb2459a8e545b433a01859f283e66ca3f", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0d6ea02a74761a1756b65aaa3028054e9be680/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0d6ea02a74761a1756b65aaa3028054e9be680/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=1c0d6ea02a74761a1756b65aaa3028054e9be680", "patch": "@@ -2765,6 +2765,8 @@ struct TraitFunctionDecl\n   // Returns whether function has a where clause.\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n+  Identifier get_identifier () const { return function_name; }\n+\n   // Mega-constructor\n   TraitFunctionDecl (Identifier function_name, FunctionQualifiers qualifiers,\n \t\t     std::vector<std::unique_ptr<GenericParam> > generic_params,\n@@ -2871,14 +2873,17 @@ class TraitItemFunc : public TraitItem\n \n   TraitItemFunc (TraitFunctionDecl decl, std::unique_ptr<BlockExpr> block_expr,\n \t\t std::vector<Attribute> outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), decl (std::move (decl)),\n-      block_expr (std::move (block_expr)), locus (locus)\n+    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n+      decl (std::move (decl)), block_expr (std::move (block_expr)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clone\n   TraitItemFunc (TraitItemFunc const &other)\n     : outer_attrs (other.outer_attrs), decl (other.decl), locus (other.locus)\n   {\n+    node_id = other.node_id;\n+\n     // guard to prevent null dereference\n     if (other.block_expr != nullptr)\n       block_expr = other.block_expr->clone_block_expr ();\n@@ -2891,6 +2896,7 @@ class TraitItemFunc : public TraitItem\n     outer_attrs = other.outer_attrs;\n     decl = other.decl;\n     locus = other.locus;\n+    node_id = other.node_id;\n \n     // guard to prevent null dereference\n     if (other.block_expr != nullptr)\n@@ -2983,6 +2989,8 @@ struct TraitMethodDecl\n   // Returns whether method has a where clause.\n   bool has_where_clause () const { return !where_clause.is_empty (); }\n \n+  Identifier get_identifier () const { return function_name; }\n+\n   // Mega-constructor\n   TraitMethodDecl (Identifier function_name, FunctionQualifiers qualifiers,\n \t\t   std::vector<std::unique_ptr<GenericParam> > generic_params,\n@@ -3095,14 +3103,17 @@ class TraitItemMethod : public TraitItem\n \n   TraitItemMethod (TraitMethodDecl decl, std::unique_ptr<BlockExpr> block_expr,\n \t\t   std::vector<Attribute> outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), decl (std::move (decl)),\n-      block_expr (std::move (block_expr)), locus (locus)\n+    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n+      decl (std::move (decl)), block_expr (std::move (block_expr)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clone\n   TraitItemMethod (TraitItemMethod const &other)\n     : outer_attrs (other.outer_attrs), decl (other.decl), locus (other.locus)\n   {\n+    node_id = other.node_id;\n+\n     // guard to prevent null dereference\n     if (other.block_expr != nullptr)\n       block_expr = other.block_expr->clone_block_expr ();\n@@ -3115,6 +3126,7 @@ class TraitItemMethod : public TraitItem\n     outer_attrs = other.outer_attrs;\n     decl = other.decl;\n     locus = other.locus;\n+    node_id = other.node_id;\n \n     // guard to prevent null dereference\n     if (other.block_expr != nullptr)\n@@ -3187,14 +3199,17 @@ class TraitItemConst : public TraitItem\n   TraitItemConst (Identifier name, std::unique_ptr<Type> type,\n \t\t  std::unique_ptr<Expr> expr,\n \t\t  std::vector<Attribute> outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), name (std::move (name)),\n-      type (std::move (type)), expr (std::move (expr)), locus (locus)\n+    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n+      name (std::move (name)), type (std::move (type)), expr (std::move (expr)),\n+      locus (locus)\n   {}\n \n   // Copy constructor with clones\n   TraitItemConst (TraitItemConst const &other)\n     : outer_attrs (other.outer_attrs), name (other.name), locus (other.locus)\n   {\n+    node_id = other.node_id;\n+\n     // guard to prevent null dereference\n     if (other.expr != nullptr)\n       expr = other.expr->clone_expr ();\n@@ -3211,6 +3226,7 @@ class TraitItemConst : public TraitItem\n     outer_attrs = other.outer_attrs;\n     name = other.name;\n     locus = other.locus;\n+    node_id = other.node_id;\n \n     // guard to prevent null dereference\n     if (other.expr != nullptr)\n@@ -3259,6 +3275,8 @@ class TraitItemConst : public TraitItem\n     return type;\n   }\n \n+  Identifier get_identifier () const { return name; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemConst *clone_trait_item_impl () const override\n@@ -3289,14 +3307,16 @@ class TraitItemType : public TraitItem\n     Identifier name,\n     std::vector<std::unique_ptr<TypeParamBound> > type_param_bounds,\n     std::vector<Attribute> outer_attrs, Location locus)\n-    : outer_attrs (std::move (outer_attrs)), name (std::move (name)),\n+    : TraitItem (), outer_attrs (std::move (outer_attrs)),\n+      name (std::move (name)),\n       type_param_bounds (std::move (type_param_bounds)), locus (locus)\n   {}\n \n   // Copy constructor with vector clone\n   TraitItemType (TraitItemType const &other)\n     : outer_attrs (other.outer_attrs), name (other.name), locus (other.locus)\n   {\n+    node_id = other.node_id;\n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n       type_param_bounds.push_back (e->clone_type_param_bound ());\n@@ -3309,6 +3329,7 @@ class TraitItemType : public TraitItem\n     outer_attrs = other.outer_attrs;\n     name = other.name;\n     locus = other.locus;\n+    node_id = other.node_id;\n \n     type_param_bounds.reserve (other.type_param_bounds.size ());\n     for (const auto &e : other.type_param_bounds)\n@@ -3346,6 +3367,8 @@ class TraitItemType : public TraitItem\n     return type_param_bounds;\n   }\n \n+  Identifier get_identifier () const { return name; }\n+\n protected:\n   // Clone function implementation as (not pure) virtual method\n   TraitItemType *clone_trait_item_impl () const override"}]}