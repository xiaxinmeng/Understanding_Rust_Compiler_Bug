{"sha": "e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJkZmYzZjJmNmJiYzQzNGJmOWFlMGFkMTcwMTU5NGZiMjRkODVjZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-08-27T19:10:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-08-27T19:10:39Z"}, "message": "ansidecl.h (VA_OPEN, VA_CLOSE): Allow multiple uses.\n\ninclude:\n\t* ansidecl.h (VA_OPEN, VA_CLOSE): Allow multiple uses.\n\nlibiberty:\n\t* concat.c (concat): Use VPARAMS, VA_OPEN, VA_FIXEDARG & VA_CLOSE.\n\nFrom-SVN: r45204", "tree": {"sha": "d23e7ce6ba6bad4bc0e3bcf6fa3f63d9e2844c33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d23e7ce6ba6bad4bc0e3bcf6fa3f63d9e2844c33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/comments", "author": null, "committer": null, "parents": [{"sha": "67a44b16b1678e2f3bda0db7127e99dace8399fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a44b16b1678e2f3bda0db7127e99dace8399fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a44b16b1678e2f3bda0db7127e99dace8399fb"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "23ba4fb7983d775760c82019553c53edbceeb66f", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "patch": "@@ -1,3 +1,7 @@\n+2001-08-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ansidecl.h (VA_OPEN, VA_CLOSE): Allow multiple uses.\n+\n 2001-08-23  Lars Brinkhoff  <lars@nocrew.org>\n \n \t* dyn-string.h, fibheap.h, partition.h, sort.h, splay-tree.h:"}, {"sha": "4c63fa66e4984112a9aa8db22e7f043d11335205", "filename": "include/ansidecl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "patch": "@@ -152,8 +152,8 @@ So instead we use the macro below and test it against specific values.  */\n /* \"struct Qdmy\" swallows the semicolon after VA_OPEN/VA_FIXEDARG's\n    use without inhibiting further decls and without declaring an\n    actual variable.  */\n-#define VA_OPEN(AP, VAR)\tva_list AP; va_start(AP, VAR); { struct Qdmy\n-#define VA_CLOSE(AP)\t\t} va_end(AP)\n+#define VA_OPEN(AP, VAR)\t{ va_list AP; va_start(AP, VAR); { struct Qdmy\n+#define VA_CLOSE(AP)\t\t} va_end(AP); }\n #define VA_FIXEDARG(AP, T, N)\tstruct Qdmy\n  \n #undef const\n@@ -199,8 +199,8 @@ So instead we use the macro below and test it against specific values.  */\n #define VPARAMS(args)\t\t(va_alist) va_dcl\n #define VA_START(va_list, var)\tva_start(va_list)\n \n-#define VA_OPEN(AP, VAR)\t\tva_list AP; va_start(AP); { struct Qdmy\n-#define VA_CLOSE(AP)\t\t\t} va_end(AP)\n+#define VA_OPEN(AP, VAR)\t\t{ va_list AP; va_start(AP); { struct Qdmy\n+#define VA_CLOSE(AP)\t\t\t} va_end(AP); }\n #define VA_FIXEDARG(AP, TYPE, NAME)\tTYPE NAME = va_arg(AP, TYPE)\n \n /* some systems define these in header files for non-ansi mode */"}, {"sha": "0b3ed2e0d159db922786d8433735473d126a5556", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "patch": "@@ -1,3 +1,7 @@\n+2001-08-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* concat.c (concat): Use VPARAMS, VA_OPEN, VA_FIXEDARG & VA_CLOSE.\n+\n 2001-08-23  Ulrich Drepper  <drepper@redhat.com>\n \n \t* regex.c (truncate_wchar): Use wcrtomb not wctomb."}, {"sha": "2e31e833f4db8c888b753351e9b71211218c84bf", "filename": "libiberty/concat.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/libiberty%2Fconcat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf/libiberty%2Fconcat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconcat.c?ref=e2dff3f2f6bbc434bf9ae0ad1701594fb24d85cf", "patch": "@@ -74,48 +74,29 @@ NOTES\n #  endif\n # endif\n \n-/* VARARGS */\n-#ifdef ANSI_PROTOTYPES\n-char *\n-concat (const char *first, ...)\n-#else\n char *\n-concat (va_alist)\n-     va_dcl\n-#endif\n+concat VPARAMS ((const char *first, ...))\n {\n   register size_t length;\n   register char *newstr;\n   register char *end;\n   register const char *arg;\n-  va_list args;\n-#ifndef ANSI_PROTOTYPES\n-  const char *first;\n-#endif\n \n   /* First compute the size of the result and get sufficient memory.  */\n-#ifdef ANSI_PROTOTYPES\n-  va_start (args, first);\n-#else\n-  va_start (args);\n-  first = va_arg (args, const char *);\n-#endif\n-\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, const char *, first);\n+  \n   length = 0;\n   for (arg = first; arg ; arg = va_arg (args, const char *))\n     length += strlen (arg);\n \n-  va_end (args);\n+  VA_CLOSE (args);\n \n   newstr = (char *) xmalloc (length + 1);\n \n   /* Now copy the individual pieces to the result string. */\n-#ifdef ANSI_PROTOTYPES\n-  va_start (args, first);\n-#else\n-  va_start (args);\n-  first = va_arg (args, const char *);\n-#endif\n+  VA_OPEN (args, first);\n+  VA_FIXEDARG (args, const char *, first);\n \n   end = newstr;\n   for (arg = first; arg ; arg = va_arg (args, const char *))\n@@ -125,7 +106,7 @@ concat (va_alist)\n       end += length;\n     }\n   *end = '\\000';\n-  va_end (args);\n+  VA_CLOSE (args);\n \n   return newstr;\n }"}]}