{"sha": "d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4ZTcxNzNlZjk2NGRkYWMzYWIzYWQ4Y2M5N2RlOGY5ZjNiMzJlZQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-26T07:32:40Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-08-26T07:32:40Z"}, "message": "Fortran: Add 'device_type' clause to OpenMP's declare target\n\ngcc/fortran/ChangeLog:\n\n\t* gfortran.h (enum gfc_omp_device_type): New.\n\t(symbol_attribute, gfc_omp_clauses, gfc_common_head): Use it.\n\t* module.c (enum ab_attribute): Add AB_OMP_DEVICE_TYPE_HOST,\n\tAB_OMP_DEVICE_TYPE_NOHOST and AB_OMP_DEVICE_TYPE_ANY.\n\t(attr_bits, mio_symbol_attribute): Handle it.\n\t(load_commons, write_common_0): Handle omp_device_type flag.\n\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_DEVICE_TYPE\n\t(OMP_DECLARE_TARGET_CLAUSES): Likewise.\n\t(gfc_match_omp_clauses): Match 'device_type'.\n\t(gfc_match_omp_declare_target): Handle it.\n\t* trans-common.c (build_common_decl): Write device-type clause.\n\t* trans-decl.c (add_attributes_to_decl): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/gomp/declare-target-4.f90: New test.\n\t* gfortran.dg/gomp/declare-target-5.f90: New test.", "tree": {"sha": "4554d34bd8b9a0bfc30b1db3dd075f9c09dda41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4554d34bd8b9a0bfc30b1db3dd075f9c09dda41e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4797a61cc5024fc9adf5918e9bb2b78988f9e4d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4797a61cc5024fc9adf5918e9bb2b78988f9e4d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4797a61cc5024fc9adf5918e9bb2b78988f9e4d4"}], "stats": {"total": 284, "additions": 277, "deletions": 7}, "files": [{"sha": "d0cea838444c3f76753f68263add5b969edfa7d9", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -753,6 +753,13 @@ CInteropKind_t;\n    that the list is initialized.  */\n extern CInteropKind_t c_interop_kinds_table[];\n \n+enum gfc_omp_device_type\n+{\n+  OMP_DEVICE_TYPE_UNSET,\n+  OMP_DEVICE_TYPE_HOST,\n+  OMP_DEVICE_TYPE_NOHOST,\n+  OMP_DEVICE_TYPE_ANY\n+};\n \n /* Structure and list of supported extension attributes.  */\n typedef enum\n@@ -919,6 +926,7 @@ typedef struct\n   /* Mentioned in OMP DECLARE TARGET.  */\n   unsigned omp_declare_target:1;\n   unsigned omp_declare_target_link:1;\n+  ENUM_BITFIELD (gfc_omp_device_type) omp_device_type:2;\n \n   /* Mentioned in OACC DECLARE.  */\n   unsigned oacc_declare_create:1;\n@@ -1360,6 +1368,7 @@ typedef struct gfc_omp_clauses\n   struct gfc_expr *num_threads;\n   gfc_omp_namelist *lists[OMP_LIST_NUM];\n   enum gfc_omp_sched_kind sched_kind;\n+  enum gfc_omp_device_type device_type;\n   struct gfc_expr *chunk_size;\n   enum gfc_omp_default_sharing default_sharing;\n   int collapse, orderedc;\n@@ -1699,6 +1708,7 @@ typedef struct gfc_common_head\n   char use_assoc, saved, threadprivate;\n   unsigned char omp_declare_target : 1;\n   unsigned char omp_declare_target_link : 1;\n+  ENUM_BITFIELD (gfc_omp_device_type) omp_device_type:2;\n   /* Provide sufficient space to hold \"symbol.symbol.eq.1234567890\".  */\n   char name[2*GFC_MAX_SYMBOL_LEN + 1 + 14 + 1];\n   struct gfc_symbol *head;"}, {"sha": "714fbd9c299ca3bd86dd2ec0eb7573c55256e172", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -2051,7 +2051,8 @@ enum ab_attribute\n   AB_OMP_REQ_REVERSE_OFFLOAD, AB_OMP_REQ_UNIFIED_ADDRESS,\n   AB_OMP_REQ_UNIFIED_SHARED_MEMORY, AB_OMP_REQ_DYNAMIC_ALLOCATORS,\n   AB_OMP_REQ_MEM_ORDER_SEQ_CST, AB_OMP_REQ_MEM_ORDER_ACQ_REL,\n-  AB_OMP_REQ_MEM_ORDER_RELAXED\n+  AB_OMP_REQ_MEM_ORDER_RELAXED, AB_OMP_DEVICE_TYPE_NOHOST,\n+  AB_OMP_DEVICE_TYPE_HOST, AB_OMP_DEVICE_TYPE_ANY\n };\n \n static const mstring attr_bits[] =\n@@ -2132,6 +2133,9 @@ static const mstring attr_bits[] =\n     minit (\"OMP_REQ_MEM_ORDER_SEQ_CST\", AB_OMP_REQ_MEM_ORDER_SEQ_CST),\n     minit (\"OMP_REQ_MEM_ORDER_ACQ_REL\", AB_OMP_REQ_MEM_ORDER_ACQ_REL),\n     minit (\"OMP_REQ_MEM_ORDER_RELAXED\", AB_OMP_REQ_MEM_ORDER_RELAXED),\n+    minit (\"OMP_DEVICE_TYPE_HOST\", AB_OMP_DEVICE_TYPE_HOST),\n+    minit (\"OMP_DEVICE_TYPE_NOHOST\", AB_OMP_DEVICE_TYPE_NOHOST),\n+    minit (\"OMP_DEVICE_TYPE_ANYHOST\", AB_OMP_DEVICE_TYPE_ANY),\n     minit (NULL, -1)\n };\n \n@@ -2397,6 +2401,22 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t      == OMP_REQ_ATOMIC_MEM_ORDER_RELAXED)\n \t    MIO_NAME (ab_attribute) (AB_OMP_REQ_MEM_ORDER_RELAXED, attr_bits);\n \t}\n+      switch (attr->omp_device_type)\n+\t{\n+\tcase OMP_DEVICE_TYPE_UNSET:\n+\t  break;\n+\tcase OMP_DEVICE_TYPE_HOST:\n+\t  MIO_NAME (ab_attribute) (AB_OMP_DEVICE_TYPE_HOST, attr_bits);\n+\t  break;\n+\tcase OMP_DEVICE_TYPE_NOHOST:\n+\t  MIO_NAME (ab_attribute) (AB_OMP_DEVICE_TYPE_NOHOST, attr_bits);\n+\t  break;\n+\tcase OMP_DEVICE_TYPE_ANY:\n+\t  MIO_NAME (ab_attribute) (AB_OMP_DEVICE_TYPE_ANY, attr_bits);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n       mio_rparen ();\n     }\n   else\n@@ -2661,6 +2681,15 @@ mio_symbol_attribute (symbol_attribute *attr)\n \t\t\t\t\t   \"relaxed\", &gfc_current_locus,\n \t\t\t\t\t   module_name);\n \t      break;\n+\t    case AB_OMP_DEVICE_TYPE_HOST:\n+\t      attr->omp_device_type = OMP_DEVICE_TYPE_HOST;\n+\t      break;\n+\t    case AB_OMP_DEVICE_TYPE_NOHOST:\n+\t      attr->omp_device_type = OMP_DEVICE_TYPE_NOHOST;\n+\t      break;\n+\t    case AB_OMP_DEVICE_TYPE_ANY:\n+\t      attr->omp_device_type = OMP_DEVICE_TYPE_ANY;\n+\t      break;\n \t    }\n \t}\n     }\n@@ -4849,6 +4878,7 @@ load_commons (void)\n \tp->saved = 1;\n       if (flags & 2)\n \tp->threadprivate = 1;\n+      p->omp_device_type = (gfc_omp_device_type) ((flags >> 2) & 3);\n       p->use_assoc = 1;\n \n       /* Get whether this was a bind(c) common or not.  */\n@@ -5713,6 +5743,7 @@ write_common_0 (gfc_symtree *st, bool this_module)\n       flags = p->saved ? 1 : 0;\n       if (p->threadprivate)\n \tflags |= 2;\n+      flags |= p->omp_device_type << 2;\n       mio_integer (&flags);\n \n       /* Write out whether the common block is bind(c) or not.  */"}, {"sha": "d0e516c472ddd72d5310fdf6e1167fbceb68ceba", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -752,7 +752,7 @@ gfc_match_oacc_clause_link (const char *str, gfc_omp_namelist **list)\n   return MATCH_ERROR;\n }\n \n-/* OpenMP 4.5 clauses.  */\n+/* OpenMP clauses.  */\n enum omp_mask1\n {\n   OMP_CLAUSE_PRIVATE,\n@@ -800,7 +800,8 @@ enum omp_mask1\n   OMP_CLAUSE_SIMD,\n   OMP_CLAUSE_THREADS,\n   OMP_CLAUSE_USE_DEVICE_PTR,\n-  OMP_CLAUSE_USE_DEVICE_ADDR,  /* Actually, OpenMP 5.0.  */\n+  OMP_CLAUSE_USE_DEVICE_ADDR,  /* OpenMP 5.0.  */\n+  OMP_CLAUSE_DEVICE_TYPE,  /* OpenMP 5.0.  */\n   OMP_CLAUSE_NOWAIT,\n   /* This must come last.  */\n   OMP_MASK1_LAST\n@@ -1214,6 +1215,24 @@ gfc_match_omp_clauses (gfc_omp_clauses **cp, const omp_mask mask,\n \t\t\t\t\t   OMP_MAP_FORCE_DEVICEPTR, false,\n \t\t\t\t\t   allow_derived))\n \t    continue;\n+\t  if ((mask & OMP_CLAUSE_DEVICE_TYPE)\n+\t      && gfc_match (\"device_type ( \") == MATCH_YES)\n+\t    {\n+\t      if (gfc_match (\"host\") == MATCH_YES)\n+\t\tc->device_type = OMP_DEVICE_TYPE_HOST;\n+\t      else if (gfc_match (\"nohost\") == MATCH_YES)\n+\t\tc->device_type = OMP_DEVICE_TYPE_NOHOST;\n+\t      else if (gfc_match (\"any\") == MATCH_YES)\n+\t\tc->device_type = OMP_DEVICE_TYPE_ANY;\n+\t      else\n+\t\t{\n+\t\t  gfc_error (\"Expected HOST, NOHOST or ANY at %C\");\n+\t\t  break;\n+\t\t}\n+\t      if (gfc_match (\" )\") != MATCH_YES)\n+\t\tbreak;\n+\t      continue;\n+\t    }\n \t  if ((mask & OMP_CLAUSE_DEVICE_RESIDENT)\n \t      && gfc_match_omp_variable_list\n \t\t   (\"device_resident (\",\n@@ -2638,7 +2657,7 @@ gfc_match_oacc_routine (void)\n #define OMP_ORDERED_CLAUSES \\\n   (omp_mask (OMP_CLAUSE_THREADS) | OMP_CLAUSE_SIMD)\n #define OMP_DECLARE_TARGET_CLAUSES \\\n-  (omp_mask (OMP_CLAUSE_TO) | OMP_CLAUSE_LINK)\n+  (omp_mask (OMP_CLAUSE_TO) | OMP_CLAUSE_LINK | OMP_CLAUSE_DEVICE_TYPE)\n \n \n static match\n@@ -3275,6 +3294,15 @@ gfc_match_omp_declare_target (void)\n \t\tgfc_add_omp_declare_target_link (&n->sym->attr, n->sym->name,\n \t\t\t\t\t\t &n->sym->declared_at);\n \t    }\n+\t  if (c->device_type != OMP_DEVICE_TYPE_UNSET)\n+\t    {\n+\t      if (n->sym->attr.omp_device_type != OMP_DEVICE_TYPE_UNSET\n+\t\t  && n->sym->attr.omp_device_type != c->device_type)\n+\t\tgfc_error_now (\"List item %qs at %L set in previous OMP DECLARE \"\n+\t\t\t       \"TARGET directive to a different DEVICE_TYPE\",\n+\t\t\t       n->sym->name, &n->where);\n+\t      n->sym->attr.omp_device_type = c->device_type;\n+\t    }\n \t  n->sym->mark = 1;\n \t}\n       else if (n->u.common->omp_declare_target\n@@ -3297,6 +3325,13 @@ gfc_match_omp_declare_target (void)\n \t{\n \t  n->u.common->omp_declare_target = 1;\n \t  n->u.common->omp_declare_target_link = (list == OMP_LIST_LINK);\n+\t  if (n->u.common->omp_device_type != OMP_DEVICE_TYPE_UNSET\n+\t      && n->u.common->omp_device_type != c->device_type)\n+\t    gfc_error_now (\"COMMON at %L set in previous OMP DECLARE \"\n+\t\t\t   \"TARGET directive to a different DEVICE_TYPE\",\n+\t\t\t   &n->where);\n+\t  n->u.common->omp_device_type = c->device_type;\n+\n \t  for (s = n->u.common->head; s; s = s->common_next)\n \t    {\n \t      s->mark = 1;\n@@ -3307,8 +3342,17 @@ gfc_match_omp_declare_target (void)\n \t\t    gfc_add_omp_declare_target_link (&s->attr, s->name,\n \t\t\t\t\t\t     &s->declared_at);\n \t\t}\n+\t      if (s->attr.omp_device_type != OMP_DEVICE_TYPE_UNSET\n+\t\t  && s->attr.omp_device_type != c->device_type)\n+\t\tgfc_error_now (\"List item %qs at %L set in previous OMP DECLARE\"\n+\t\t\t       \" TARGET directive to a different DEVICE_TYPE\",\n+\t\t\t       s->name, &n->where);\n+\t      s->attr.omp_device_type = c->device_type;\n \t    }\n \t}\n+  if (c->device_type && !c->lists[OMP_LIST_TO] && !c->lists[OMP_LIST_LINK])\n+    gfc_warning_now (0, \"OMP DECLARE TARGET directive at %L with only \"\n+\t\t\t\"DEVICE_TYPE clause is ignored\", &old_loc);\n \n   gfc_buffer_error (true);\n "}, {"sha": "52a9b2f4f49f94e223edf0dee96e7e4e3692cf57", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -426,6 +426,8 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n   /* If there is no backend_decl for the common block, build it.  */\n   if (decl == NULL_TREE)\n     {\n+      tree omp_clauses = NULL_TREE;\n+\n       if (com->is_bind_c == 1 && com->binding_label)\n \tdecl = build_decl (input_location, VAR_DECL, identifier, union_type);\n       else\n@@ -460,14 +462,33 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n       if (com->threadprivate)\n \tset_decl_tls_model (decl, decl_default_tls_model (decl));\n \n+      if (com->omp_device_type != OMP_DEVICE_TYPE_UNSET)\n+\t{\n+\t  tree c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE_DEVICE_TYPE);\n+\t  switch (com->omp_device_type)\n+\t    {\n+\t    case OMP_DEVICE_TYPE_HOST:\n+\t      OMP_CLAUSE_DEVICE_TYPE_KIND (c) = OMP_CLAUSE_DEVICE_TYPE_HOST;\n+\t      break;\n+\t    case OMP_DEVICE_TYPE_NOHOST:\n+\t      OMP_CLAUSE_DEVICE_TYPE_KIND (c) = OMP_CLAUSE_DEVICE_TYPE_NOHOST;\n+\t      break;\n+\t    case OMP_DEVICE_TYPE_ANY:\n+\t      OMP_CLAUSE_DEVICE_TYPE_KIND (c) = OMP_CLAUSE_DEVICE_TYPE_ANY;\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  omp_clauses = c;\n+\t}\n       if (com->omp_declare_target_link)\n \tDECL_ATTRIBUTES (decl)\n \t  = tree_cons (get_identifier (\"omp declare target link\"),\n-\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t\t       omp_clauses, DECL_ATTRIBUTES (decl));\n       else if (com->omp_declare_target)\n \tDECL_ATTRIBUTES (decl)\n \t  = tree_cons (get_identifier (\"omp declare target\"),\n-\t\t       NULL_TREE, DECL_ATTRIBUTES (decl));\n+\t\t       omp_clauses, DECL_ATTRIBUTES (decl));\n \n       /* Place the back end declaration for this common block in\n          GLOBAL_BINDING_LEVEL.  */"}, {"sha": "92242771dde6a6ad4c1ee1e04c8b6d10ab56fc3b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -1465,11 +1465,31 @@ add_attributes_to_decl (symbol_attribute sym_attr, tree list)\n       tree dims = oacc_build_routine_dims (clauses);\n       list = oacc_replace_fn_attrib_attr (list, dims);\n     }\n+  if (sym_attr.omp_device_type != OMP_DEVICE_TYPE_UNSET)\n+    {\n+      tree c = build_omp_clause (UNKNOWN_LOCATION, OMP_CLAUSE_DEVICE_TYPE);\n+      switch (sym_attr.omp_device_type)\n+\t{\n+\tcase OMP_DEVICE_TYPE_HOST:\n+\t  OMP_CLAUSE_DEVICE_TYPE_KIND (c) = OMP_CLAUSE_DEVICE_TYPE_HOST;\n+\t  break;\n+\tcase OMP_DEVICE_TYPE_NOHOST:\n+\t  OMP_CLAUSE_DEVICE_TYPE_KIND (c) = OMP_CLAUSE_DEVICE_TYPE_NOHOST;\n+\t  break;\n+\tcase OMP_DEVICE_TYPE_ANY:\n+\t  OMP_CLAUSE_DEVICE_TYPE_KIND (c) = OMP_CLAUSE_DEVICE_TYPE_ANY;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      OMP_CLAUSE_CHAIN (c) = clauses;\n+      clauses = c;\n+    }\n \n   if (sym_attr.omp_declare_target_link\n       || sym_attr.oacc_declare_link)\n     list = tree_cons (get_identifier (\"omp declare target link\"),\n-\t\t      NULL_TREE, list);\n+\t\t      clauses, list);\n   else if (sym_attr.omp_declare_target\n \t   || sym_attr.oacc_declare_create\n \t   || sym_attr.oacc_declare_copyin"}, {"sha": "6e3f91eefca0acdc9b0b39f5b10c4a5f0b953d16", "filename": "gcc/testsuite/gfortran.dg/gomp/declare-target-4.f90", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-target-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-target-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-target-4.f90?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -0,0 +1,81 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+\n+subroutine f1\n+  !$omp declare target device_type (any)  ! { dg-warning \"OMP DECLARE TARGET directive at .1. with only DEVICE_TYPE clause is ignored\" }\n+end subroutine\n+\n+subroutine f2\n+  !$omp declare target to (f2) device_type (any)\n+end subroutine\n+\n+subroutine f3\n+  !$omp declare target device_type (any) to (f3)\n+end subroutine\n+\n+subroutine f4\n+  !$omp declare target device_type (host) to (f4)\n+end subroutine\n+\n+subroutine f5\n+  !$omp declare target device_type (nohost) to (f5)\n+end subroutine\n+\n+module mymod\n+  ! device_type is ignored for variables in OpenMP 5.0\n+  ! but TR8 and later apply those rules to variables as well\n+  implicit none\n+  integer :: a, b(4), c, d\n+  integer :: e, f, g\n+  integer :: m, n, o, p, q, r, s, t, u, v, w, x\n+  common /block1/ m, n\n+  common /block2/ o, p\n+  common /block3/ q, r\n+  common /block4/ s, t\n+  common /block5/ u, v\n+  common /block6/ w, x\n+\n+  !$omp declare target to(a) device_type(nohost)\n+  !$omp declare target to(b) device_type(host)\n+  !$omp declare target to(c) device_type(any)\n+ ! Fails in ME with \"Error: wrong number of arguments specified for 'omp declare target link' attribute\"\n+ ! !$omp declare target link(e) device_type(nohost)\n+ ! !$omp declare target link(f) device_type(host)\n+ ! !$omp declare target link(g) device_type(any)\n+\n+  !$omp declare target to(/block1/) device_type(nohost)\n+  !$omp declare target to(/block2/) device_type(host)\n+  !$omp declare target to(/block3/) device_type(any)\n+  !$omp declare target link(/block4/) device_type(nohost)\n+  !$omp declare target link(/block5/) device_type(host)\n+  !$omp declare target link(/block6/) device_type(any)\n+contains\n+  subroutine s1\n+    !$omp declare target to (s1) device_type (any)\n+  end\n+  subroutine s2\n+    !$omp declare target to (s2) device_type (nohost)\n+  end\n+  subroutine s3\n+    !$omp declare target to (s3) device_type (host)\n+  end\n+end module\n+\n+module m2\n+  use mymod\n+  implicit none\n+  public\n+  private :: s1, s2, s3, a, b, c, d, e, f, g\n+  public :: m, n, o, p, q, r, s, t, u, v, w, x\n+end module m2\n+\n+! { dg-final { scan-tree-dump-times \"omp declare target\" 7 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(\" 7 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"\\[\\n\\r]\\[\\n\\r]f1\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(any\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]f2\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(any\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]f3\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(host\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]f4\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(nohost\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]f5\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(any\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]s1\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(nohost\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]s2\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__attribute__\\\\(\\\\(omp declare target \\\\(device_type\\\\(host\\\\)\\\\)\\\\)\\\\)\\[\\n\\r]s3\" 1 \"original\" } }"}, {"sha": "76687d476d5bc42423a0a9fe0ce016766b3d7e77", "filename": "gcc/testsuite/gfortran.dg/gomp/declare-target-5.f90", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-target-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-target-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fdeclare-target-5.f90?ref=d58e7173ef964ddac3ab3ad8cc97de8f9f3b32ee", "patch": "@@ -0,0 +1,63 @@\n+subroutine foo()\n+  !$omp declare target  to(foo) device_type(bar)  ! { dg-error \"Expected HOST, NOHOST or ANY\" }\n+end\n+\n+subroutine bar()\n+  !$omp declare target  to(bar) device_type(nohost)\n+  !$omp declare target  to(bar) device_type(host)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+end\n+\n+module mymod_one\n+  implicit none\n+  integer :: a, b, c, d, e ,f\n+  integer :: m, n, o, p, q, r\n+  common /block1/ m, n\n+  common /block2/ o, p\n+  common /block3/ q, r\n+  !$omp declare target  to(a) device_type(nohost)\n+  !$omp declare target  to(b) device_type(any)\n+  !$omp declare target  to(c) device_type(host)\n+  !$omp declare target  link(d) device_type(nohost)\n+  !$omp declare target  link(e) device_type(any)\n+  !$omp declare target  link(f) device_type(host)\n+\n+  !$omp declare target  to(c) device_type(host)\n+  !$omp declare target  link(d) device_type(nohost)\n+end module\n+\n+module mtest\n+  use mymod_one ! { dg-error \"Cannot change attributes of USE-associated symbol\" }\n+  implicit none\n+\n+  !$omp declare target  to(a) device_type(any)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  to(b) device_type(host)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  to(c) device_type(nohost)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  link(d) device_type(host)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  link(e) device_type(nohost)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  link(f) device_type(any)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+end module\n+\n+module mymod\n+  implicit none\n+  integer :: a, b, c, d, e ,f\n+  integer :: m, n, o, p, q, r\n+  common /block1/ m, n\n+  common /block2/ o, p\n+  common /block3/ q, r\n+  !$omp declare target  to(a) device_type(nohost)\n+  !$omp declare target  to(b) device_type(any)\n+  !$omp declare target  to(c) device_type(host)\n+  !$omp declare target  link(d) device_type(nohost)\n+  !$omp declare target  link(e) device_type(any)\n+  !$omp declare target  link(f) device_type(host)\n+\n+  !$omp declare target  to(c) device_type(host)\n+  !$omp declare target  link(d) device_type(nohost)\n+\n+  !$omp declare target  to(a) device_type(any)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  to(b) device_type(host)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  to(c) device_type(nohost)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  link(d) device_type(host)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  link(e) device_type(nohost)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+  !$omp declare target  link(f) device_type(any)  ! { dg-error \"previous OMP DECLARE TARGET directive to a different DEVICE_TYPE\" }\n+end"}]}