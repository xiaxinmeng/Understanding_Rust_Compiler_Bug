{"sha": "dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmZGRiZDQ5YzY0ZGMxZThiNTdlM2FiZTFiOTQxYmRkNzRiOGY3MA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-06-07T19:00:47Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2009-06-07T19:00:47Z"}, "message": "re PR fortran/40008 (F2008: Add NEWUNIT= for OPEN statement)\n\n2009-06-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/40008\n\t* libgfortran.h: Define IOPARM_OPEN_HAS_NEWUNIT.\n\t* io/open.c (st_open): Don't error on negative unit number if NEWUNIT\n\twas specified. If NEWUNIT is specified, call new function to get the\n\tunique unit number and assign it.\n\t* io/io.h (st_parameter_open): Add pointer to newunit.  Add prototype for\n\tnext_available_newunit. Add prototype for new function,\n\tget_unique_unit_number.\n\t* io/unit.c: Declare next_available_newunit. Define the first newunit\n\tnumber. (init_units): Initialize next_available_unit.\n\t(get_unique_unit_number): New function. Fix whitespace and comments.\n\t* io/transfer.c (data_transfer_init): Update error message to not be\n\tspecific to OPEN statements.\n\nFrom-SVN: r148253", "tree": {"sha": "a644300144767eca9a438e4638477cda691850c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a644300144767eca9a438e4638477cda691850c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/comments", "author": null, "committer": null, "parents": [{"sha": "9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ad55c33ae2d0c410fbc563fd59e8edb37a48b8b"}], "stats": {"total": 86, "additions": 68, "deletions": 18}, "files": [{"sha": "1377d68adf61d74bcbd1c7a72a202f292e573776", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "patch": "@@ -1,3 +1,19 @@\n+2009-06-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/40008\n+\t* libgfortran.h: Define IOPARM_OPEN_HAS_NEWUNIT.\n+\t* io/open.c (st_open): Don't error on negative unit number if NEWUNIT\n+\twas specified. If NEWUNIT is specified, call new function to get the\n+\tunique unit number and assign it.\n+\t* io/io.h (st_parameter_open): Add pointer to newunit.  Add prototype for\n+\tnext_available_newunit. Add prototype for new function,\n+\tget_unique_unit_number.\n+\t* io/unit.c: Declare next_available_newunit. Define the first newunit\n+\tnumber. (init_units): Initialize next_available_unit.\n+\t(get_unique_unit_number): New function. Fix whitespace and comments.\n+\t* io/transfer.c (data_transfer_init): Update error message to not be\n+\tspecific to OPEN statements.\n+\n 2009-06-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/40334"}, {"sha": "9e1e45e252b11e78531352856ab4079d1b4dd124", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "patch": "@@ -297,6 +297,7 @@ typedef struct\n   CHARACTER2 (round);\n   CHARACTER1 (sign);\n   CHARACTER2 (asynchronous);\n+  GFC_INTEGER_4 *newunit;\n }\n st_parameter_open;\n \n@@ -794,6 +795,10 @@ internal_proto(unpack_filename);\n extern gfc_offset max_offset;\n internal_proto(max_offset);\n \n+/* Unit number to be assigned when NEWUNIT is used in an OPEN statement.  */\n+extern GFC_INTEGER_4 next_available_newunit;\n+internal_proto(next_available_newunit);\n+\n /* Unit tree root.  */\n extern gfc_unit *unit_root;\n internal_proto(unit_root);\n@@ -831,6 +836,9 @@ internal_proto (finish_last_advance_record);\n extern int unit_truncate (gfc_unit *, gfc_offset, st_parameter_common *);\n internal_proto (unit_truncate);\n \n+extern GFC_INTEGER_4 get_unique_unit_number (st_parameter_open *);\n+internal_proto(get_unique_unit_number);\n+\n /* open.c */\n \n extern gfc_unit *new_unit (st_parameter_open *, gfc_unit *, unit_flags *);"}, {"sha": "d5b4007ea23c97f6e6cf66f9ac7a51dafa0fe2e0", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "patch": "@@ -814,7 +814,7 @@ st_open (st_parameter_open *opp)\n \n   flags.convert = conv;\n \n-  if (opp->common.unit < 0)\n+  if (!(opp->common.flags & IOPARM_OPEN_HAS_NEWUNIT) && opp->common.unit < 0)\n     generate_error (&opp->common, LIBERROR_BAD_OPTION,\n \t\t    \"Bad unit number in OPEN statement\");\n \n@@ -842,8 +842,13 @@ st_open (st_parameter_open *opp)\n \n   if ((opp->common.flags & IOPARM_LIBRETURN_MASK) == IOPARM_LIBRETURN_OK)\n     {\n-      u = find_or_create_unit (opp->common.unit);\n+      if ((opp->common.flags & IOPARM_OPEN_HAS_NEWUNIT))\n+\t{\n+\t  *opp->newunit = get_unique_unit_number(opp);\n+\t  opp->common.unit = *opp->newunit;\n+\t}\n \n+      u = find_or_create_unit (opp->common.unit);\n       if (u->s == NULL)\n \t{\n \t  u = new_unit (opp, u, &flags);"}, {"sha": "08ba7f56f5915a5d3009b6331c6e494188fd54e5", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "patch": "@@ -2020,7 +2020,7 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n \tclose_unit (dtp->u.p.current_unit);\n \tdtp->u.p.current_unit = NULL;\n \tgenerate_error (&dtp->common, LIBERROR_BAD_OPTION,\n-\t\t\t\"Bad unit number in OPEN statement\");\n+\t\t\t\"Bad unit number in statement\");\n \treturn;\n       }\n     memset (&u_flags, '\\0', sizeof (u_flags));"}, {"sha": "d8d0c29a8f517eaf44b021b23c60f82723565f45", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 35, "deletions": 15, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "patch": "@@ -67,6 +67,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n /* Subroutines related to units */\n \n+GFC_INTEGER_4 next_available_newunit;\n+#define GFC_FIRST_NEWUNIT -10\n \n #define CACHE_SIZE 3\n static gfc_unit *unit_cache[CACHE_SIZE];\n@@ -131,7 +133,6 @@ rotate_right (gfc_unit * t)\n }\n \n \n-\n static int\n compare (int a, int b)\n {\n@@ -480,7 +481,7 @@ free_internal_unit (st_parameter_dt *dtp)\n \n \n /* get_unit()-- Returns the unit structure associated with the integer\n- * unit or the internal file. */\n+   unit or the internal file.  */\n \n gfc_unit *\n get_unit (st_parameter_dt *dtp, int do_create)\n@@ -489,7 +490,7 @@ get_unit (st_parameter_dt *dtp, int do_create)\n   if ((dtp->common.flags & IOPARM_DT_HAS_INTERNAL_UNIT) != 0)\n     return get_internal_unit(dtp);\n \n-  /* Has to be an external unit */\n+  /* Has to be an external unit.  */\n \n   dtp->u.p.unit_is_internal = 0;\n   dtp->internal_unit_desc = NULL;\n@@ -499,7 +500,7 @@ get_unit (st_parameter_dt *dtp, int do_create)\n \n \n /*************************/\n-/* Initialize everything */\n+/* Initialize everything.  */\n \n void\n init_units (void)\n@@ -511,6 +512,8 @@ init_units (void)\n   __GTHREAD_MUTEX_INIT_FUNCTION (&unit_lock);\n #endif\n \n+  next_available_newunit = GFC_FIRST_NEWUNIT;\n+\n   if (options.stdin_unit >= 0)\n     {\t\t\t\t/* STDIN */\n       u = insert_unit (options.stdin_unit);\n@@ -601,10 +604,8 @@ init_units (void)\n     }\n \n   /* Calculate the maximum file offset in a portable manner.\n-   * max will be the largest signed number for the type gfc_offset.\n-   *\n-   * set a 1 in the LSB and keep a running sum, stopping at MSB-1 bit. */\n-\n+     max will be the largest signed number for the type gfc_offset.\n+     set a 1 in the LSB and keep a running sum, stopping at MSB-1 bit.  */\n   max_offset = 0;\n   for (i = 0; i < sizeof (max_offset) * 8 - 1; i++)\n     max_offset = max_offset + ((gfc_offset) 1 << i);\n@@ -663,8 +664,8 @@ unlock_unit (gfc_unit *u)\n }\n \n /* close_unit()-- Close a unit.  The stream is closed, and any memory\n- * associated with the stream is freed.  Returns nonzero on I/O error.\n- * Should be called with the u->lock locked. */\n+   associated with the stream is freed.  Returns nonzero on I/O error.\n+   Should be called with the u->lock locked. */\n \n int\n close_unit (gfc_unit *u)\n@@ -674,11 +675,11 @@ close_unit (gfc_unit *u)\n \n \n /* close_units()-- Delete units on completion.  We just keep deleting\n- * the root of the treap until there is nothing left.\n- * Not sure what to do with locking here.  Some other thread might be\n- * holding some unit's lock and perhaps hold it indefinitely\n- * (e.g. waiting for input from some pipe) and close_units shouldn't\n- * delay the program too much.  */\n+   the root of the treap until there is nothing left.\n+   Not sure what to do with locking here.  Some other thread might be\n+   holding some unit's lock and perhaps hold it indefinitely\n+   (e.g. waiting for input from some pipe) and close_units shouldn't\n+   delay the program too much.  */\n \n void\n close_units (void)\n@@ -813,3 +814,22 @@ finish_last_advance_record (gfc_unit *u)\n   fbuf_flush (u, u->mode);\n }\n \n+/* Assign a negative number for NEWUNIT in OPEN statements.  */\n+GFC_INTEGER_4\n+get_unique_unit_number (st_parameter_open *opp)\n+{\n+  GFC_INTEGER_4 num;\n+\n+  __gthread_mutex_lock (&unit_lock);\n+  num = next_available_newunit--;\n+\n+  /* Do not allow NEWUNIT numbers to wrap.  */\n+  if (next_available_newunit >=  GFC_FIRST_NEWUNIT )\n+    {\n+      __gthread_mutex_unlock (&unit_lock);\n+      generate_error (&opp->common, LIBERROR_INTERNAL, \"NEWUNIT exhausted\");\n+      return 0;\n+    }\n+  __gthread_mutex_unlock (&unit_lock);\n+  return num;\n+}"}, {"sha": "a2f3e0623d2393bc07b281bb0cac9975e2f0ebfc", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=dcfddbd49c64dc1e8b57e3abe1b941bdd74b8f70", "patch": "@@ -590,6 +590,7 @@ st_parameter_common;\n #define IOPARM_OPEN_HAS_ROUND\t\t(1 << 20)\n #define IOPARM_OPEN_HAS_SIGN\t\t(1 << 21)\n #define IOPARM_OPEN_HAS_ASYNCHRONOUS\t(1 << 22)\n+#define IOPARM_OPEN_HAS_NEWUNIT\t\t(1 << 23)\n \n /* library start function and end macro.  These can be expanded if needed\n    in the future.  cmp is st_parameter_common *cmp  */"}]}