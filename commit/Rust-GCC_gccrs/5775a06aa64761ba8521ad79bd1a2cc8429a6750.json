{"sha": "5775a06aa64761ba8521ad79bd1a2cc8429a6750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3NWEwNmFhNjQ3NjFiYTg1MjFhZDc5YmQxYTJjYzg0MjlhNjc1MA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2004-09-21T15:39:00Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2004-09-21T15:39:00Z"}, "message": "cp-tree.h (struct lang_type_header): Remove uses_multiple_inheritance field.\n\n\t* cp-tree.h (struct lang_type_header): Remove\n\tuses_multiple_inheritance field.\n\t(TYPE_USES_MULTIPLE_INHERITANCE): Remove.\n\t(TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P): Remove.\n\t(TYPE_USES_VIRTUAL_BASECLASSES): Remove.\n\t(DECL_NEEDS_VTT_PARM_P): Use CLASSTYPE_VBASECLASSES.\n\t(TYPE_CONTAINS_VPTR_P): Likewise.\n\t* call.c (add_template_candidate_real): Use\n\tCLASSTYPE_VBASECLASSES.\n\t(build_special_member_call): Likewise.\n\t* class.c (finish_struct_bits): Remove\n\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P & TYPE_USES_VIRTUAL_BASECLASSES\n\tbookkeeping.\n\t(check_bases_and_members): Use TYPE_CONTAINS_VPTR_P.\n\t(create_vtable_ptr): Remove TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P\n\tbookkeeping.\n\t(build_vtt_inits): Use CLASSTYPE_VBASECLASSES.\n\t(accumulate_vtbl_inits, build_vbase_offset_vtbl_entries):\n\tLikewise.\n\t* decl.c (xref_basetypes): Remove TYPE_USES_MULTIPLE_INHERITANCE,\n\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P, TYPE_USES_VIRTUAL_BASECLASSES\n\tbookkeeping.\n\t(cxx_maybe_build_cleanup): Use CLASSTYPE_VBASECLASSES.\n\t* decl2.c (maybe_retrofit_in_chrg): Likewise.\n\t* init.c (expand_member, push_base_cleanups): Likewise.\n\t* pt.c (instantiate_class_template): Remove\n\tTYPE_USES_MULTIPLE_INHERITANCE,\n\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P, TYPE_USES_VIRTUAL_BASECLASSES\n\tbookkeeping.\n\t* ptree.c (cxx_print_type): Remove TYPE_USES_MULTIPLE_INHERITANCE\n\tcheck.\n\t* typeck2.c (process_init_constructor): Replace some sorrys with\n\tasserts.\n\nFrom-SVN: r87808", "tree": {"sha": "dedf44db33acea43bf8c4d28b28397caa6180946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dedf44db33acea43bf8c4d28b28397caa6180946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5775a06aa64761ba8521ad79bd1a2cc8429a6750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5775a06aa64761ba8521ad79bd1a2cc8429a6750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5775a06aa64761ba8521ad79bd1a2cc8429a6750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5775a06aa64761ba8521ad79bd1a2cc8429a6750/comments", "author": null, "committer": null, "parents": [{"sha": "2494e67370e79d3530c72fab916713e2254453d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2494e67370e79d3530c72fab916713e2254453d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2494e67370e79d3530c72fab916713e2254453d6"}], "stats": {"total": 157, "additions": 63, "deletions": 94}, "files": [{"sha": "f436ad9d077d6fcccb2c6488fae4a48fe550fc24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -1,3 +1,39 @@\n+2004-09-21  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (struct lang_type_header): Remove\n+\tuses_multiple_inheritance field.\n+\t(TYPE_USES_MULTIPLE_INHERITANCE): Remove.\n+\t(TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P): Remove.\n+\t(TYPE_USES_VIRTUAL_BASECLASSES): Remove.\n+\t(DECL_NEEDS_VTT_PARM_P): Use CLASSTYPE_VBASECLASSES.\n+\t(TYPE_CONTAINS_VPTR_P): Likewise.\n+\t* call.c (add_template_candidate_real): Use\n+\tCLASSTYPE_VBASECLASSES.\n+\t(build_special_member_call): Likewise.\n+\t* class.c (finish_struct_bits): Remove\n+\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P & TYPE_USES_VIRTUAL_BASECLASSES\n+\tbookkeeping.\n+\t(check_bases_and_members): Use TYPE_CONTAINS_VPTR_P.\n+\t(create_vtable_ptr): Remove TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P\n+\tbookkeeping.\n+\t(build_vtt_inits): Use CLASSTYPE_VBASECLASSES.\n+\t(accumulate_vtbl_inits, build_vbase_offset_vtbl_entries):\n+\tLikewise.\n+\t* decl.c (xref_basetypes): Remove TYPE_USES_MULTIPLE_INHERITANCE,\n+\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P, TYPE_USES_VIRTUAL_BASECLASSES\n+\tbookkeeping.\n+\t(cxx_maybe_build_cleanup): Use CLASSTYPE_VBASECLASSES.\n+\t* decl2.c (maybe_retrofit_in_chrg): Likewise.\n+\t* init.c (expand_member, push_base_cleanups): Likewise.\n+\t* pt.c (instantiate_class_template): Remove\n+\tTYPE_USES_MULTIPLE_INHERITANCE,\n+\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P, TYPE_USES_VIRTUAL_BASECLASSES\n+\tbookkeeping.\n+\t* ptree.c (cxx_print_type): Remove TYPE_USES_MULTIPLE_INHERITANCE\n+\tcheck.\n+\t* typeck2.c (process_init_constructor): Replace some sorrys with\n+\tasserts.\n+\n 2004-09-21  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* decl.c (reshape_init_array): Initialize max_index_cst to fix"}, {"sha": "c5761ec166899092f190b17151cb6385c41259d9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -2179,7 +2179,7 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n \n   if ((DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (tmpl)\n        || DECL_BASE_CONSTRUCTOR_P (tmpl))\n-      && TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (tmpl)))\n+      && CLASSTYPE_VBASECLASSES (DECL_CONTEXT (tmpl)))\n     args_without_in_chrg = TREE_CHAIN (args_without_in_chrg);\n \n   i = fn_type_unification (tmpl, explicit_targs, targs,\n@@ -5052,7 +5052,7 @@ build_special_member_call (tree instance, tree name, tree args,\n      the subobject.  */\n   if ((name == base_ctor_identifier\n        || name == base_dtor_identifier)\n-      && TYPE_USES_VIRTUAL_BASECLASSES (class_type))\n+      && CLASSTYPE_VBASECLASSES (class_type))\n     {\n       tree vtt;\n       tree sub_vtt;"}, {"sha": "071cd80344fd8aa5582543ed4883979177d61a02", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -1405,11 +1405,7 @@ finish_struct_bits (tree t)\n       TYPE_HAS_NONTRIVIAL_DESTRUCTOR (variants) \n \t= TYPE_HAS_NONTRIVIAL_DESTRUCTOR (t);\n \n-      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (variants) \n-\t= TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (t);\n       TYPE_POLYMORPHIC_P (variants) = TYPE_POLYMORPHIC_P (t);\n-      TYPE_USES_VIRTUAL_BASECLASSES (variants)\n-\t= TYPE_USES_VIRTUAL_BASECLASSES (t);\n       \n       TYPE_BINFO (variants) = TYPE_BINFO (t);\n \n@@ -4126,15 +4122,11 @@ check_bases_and_members (tree t)\n   /* Do some bookkeeping that will guide the generation of implicitly\n      declared member functions.  */\n   TYPE_HAS_COMPLEX_INIT_REF (t)\n-    |= (TYPE_HAS_INIT_REF (t) \n-\t|| TYPE_USES_VIRTUAL_BASECLASSES (t)\n-\t|| TYPE_POLYMORPHIC_P (t));\n+    |= (TYPE_HAS_INIT_REF (t) || TYPE_CONTAINS_VPTR_P (t));\n   TYPE_NEEDS_CONSTRUCTING (t)\n-    |= (TYPE_HAS_CONSTRUCTOR (t) \n-\t|| TYPE_USES_VIRTUAL_BASECLASSES (t)\n-\t|| TYPE_POLYMORPHIC_P (t));\n-  CLASSTYPE_NON_AGGREGATE (t) |= (TYPE_HAS_CONSTRUCTOR (t)\n-\t\t\t\t  || TYPE_POLYMORPHIC_P (t));\n+    |= (TYPE_HAS_CONSTRUCTOR (t) || TYPE_CONTAINS_VPTR_P (t));\n+  CLASSTYPE_NON_AGGREGATE (t)\n+    |= (TYPE_HAS_CONSTRUCTOR (t) || TYPE_POLYMORPHIC_P (t));\n   CLASSTYPE_NON_POD_P (t)\n     |= (CLASSTYPE_NON_AGGREGATE (t) || TYPE_HAS_DESTRUCTOR (t) \n \t|| TYPE_HAS_ASSIGN_REF (t));\n@@ -4229,13 +4221,6 @@ create_vtable_ptr (tree t, tree* virtuals_p)\n       /* This class is non-empty.  */\n       CLASSTYPE_EMPTY_P (t) = 0;\n \n-      if (BINFO_N_BASE_BINFOS (TYPE_BINFO (t)))\n-\t/* If there were any baseclasses, they can't possibly be at\n-\t   offset zero any more, because that's where the vtable\n-\t   pointer is.  So, converting to a base class is going to\n-\t   take work.  */\n-\tTYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (t) = 1;\n-\n       return field;\n     }\n \n@@ -6780,7 +6765,7 @@ build_vtt_inits (tree binfo, tree t, tree* inits, tree* index)\n   int top_level_p = same_type_p (TREE_TYPE (binfo), t);\n \n   /* We only need VTTs for subobjects with virtual bases.  */\n-  if (!TYPE_USES_VIRTUAL_BASECLASSES (BINFO_TYPE (binfo)))\n+  if (!CLASSTYPE_VBASECLASSES (BINFO_TYPE (binfo)))\n     return inits;\n \n   /* We need to use a construction vtable if this is not the primary\n@@ -6897,7 +6882,7 @@ dfs_build_secondary_vptr_vtt_inits (tree binfo, void *data)\n \n   /* If BINFO has virtual bases or is reachable via a virtual path\n      from T, it'll have a secondary vptr.  */\n-  if (!TYPE_USES_VIRTUAL_BASECLASSES (BINFO_TYPE (binfo))\n+  if (!CLASSTYPE_VBASECLASSES (BINFO_TYPE (binfo))\n       && !binfo_via_virtual (binfo, t))\n     return NULL_TREE;\n \n@@ -7052,7 +7037,7 @@ accumulate_vtbl_inits (tree binfo,\n   /* If we're building a construction vtable, we're not interested in\n      subobjects that don't require construction vtables.  */\n   if (ctor_vtbl_p \n-      && !TYPE_USES_VIRTUAL_BASECLASSES (BINFO_TYPE (binfo))\n+      && !CLASSTYPE_VBASECLASSES (BINFO_TYPE (binfo))\n       && !binfo_via_virtual (orig_binfo, BINFO_TYPE (rtti_binfo)))\n     return;\n \n@@ -7411,7 +7396,7 @@ build_vbase_offset_vtbl_entries (tree binfo, vtbl_init_data* vid)\n \n   /* If there are no virtual baseclasses, then there is nothing to\n      do.  */\n-  if (!TYPE_USES_VIRTUAL_BASECLASSES (BINFO_TYPE (binfo)))\n+  if (!CLASSTYPE_VBASECLASSES (BINFO_TYPE (binfo)))\n     return;\n \n   t = vid->derived;"}, {"sha": "19158e9975046b3e75a4708c3467e6b80b0ac52a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -53,16 +53,14 @@ struct diagnostic_context;\n       TEMPLATE_PARMS_FOR_INLINE.\n       DELETE_EXPR_USE_VEC (in DELETE_EXPR).\n       (TREE_CALLS_NEW) (in _EXPR or _REF) (commented-out).\n-      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (in _TYPE).\n       ICS_ELLIPSIS_FLAG (in _CONV)\n       DECL_INITIALIZED_P (in VAR_DECL)\n    2: IDENTIFIER_OPNAME_P (in IDENTIFIER_NODE)\n       TYPE_POLYMORPHIC_P (in _TYPE)\n       ICS_THIS_FLAG (in _CONV)\n       DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (in VAR_DECL)\n       STATEMENT_LIST_TRY_BLOCK (in STATEMENT_LIST)\n-   3: TYPE_USES_VIRTUAL_BASECLASSES (in a class TYPE).\n-      (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n+   3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n       FN_TRY_BLOCK_P (in TRY_BLOCK)\n       IDENTIFIER_CTOR_OR_DTOR_P (in IDENTIFIER_NODE)\n@@ -960,10 +958,11 @@ struct lang_type_header GTY(())\n   BOOL_BITFIELD has_type_conversion : 1;\n   BOOL_BITFIELD has_init_ref : 1;\n   BOOL_BITFIELD has_default_ctor : 1;\n-  BOOL_BITFIELD uses_multiple_inheritance : 1;\n   BOOL_BITFIELD const_needs_init : 1;\n   BOOL_BITFIELD ref_needs_init : 1;\n   BOOL_BITFIELD has_const_assign_ref : 1;\n+\n+  BOOL_BITFIELD spare : 1;\n };\n \n /* This structure provides additional information above and beyond\n@@ -1159,17 +1158,6 @@ struct lang_type GTY(())\n    convenient, don't reprocess any methods that appear in its redefinition.  */\n #define TYPE_REDEFINED(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->redefined)\n \n-/* Nonzero means that this _CLASSTYPE (or one of its ancestors) uses\n-   multiple inheritance.  If this is 0 for the root of a type\n-   hierarchy, then we can use more efficient search techniques.  */\n-#define TYPE_USES_MULTIPLE_INHERITANCE(NODE) \\\n-  (LANG_TYPE_CLASS_CHECK (NODE)->h.uses_multiple_inheritance)\n-\n-/* Nonzero means that this _CLASSTYPE (or one of its ancestors) uses\n-   virtual base classes.  If this is 0 for the root of a type\n-   hierarchy, then we can use more efficient search techniques.  */\n-#define TYPE_USES_VIRTUAL_BASECLASSES(NODE) (TREE_LANG_FLAG_3 (NODE))\n-\n /* The member function with which the vtable will be emitted:\n    the first noninline non-pure-virtual member function.  NULL_TREE\n    if there is no key function or if this is a class template */\n@@ -1739,7 +1727,7 @@ struct lang_decl GTY(())\n /* Nonzero if NODE is a FUNCTION_DECL for which a VTT parameter is\n    required.  */\n #define DECL_NEEDS_VTT_PARM_P(NODE)\t\t\t\\\n-  (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (NODE))\t\\\n+  (CLASSTYPE_VBASECLASSES (DECL_CONTEXT (NODE))\t\t\\\n    && (DECL_BASE_CONSTRUCTOR_P (NODE)\t\t\t\\\n        || DECL_BASE_DESTRUCTOR_P (NODE)))\n \n@@ -2262,11 +2250,6 @@ struct lang_decl GTY(())\n    using a twos-complement negated operand.  */\n #define TREE_NEGATED_INT(NODE) TREE_LANG_FLAG_0 (INTEGER_CST_CHECK (NODE))\n \n-/* Nonzero in any kind of _TYPE where conversions to base-classes may\n-   involve pointer arithmetic.  If this is zero, then converting to\n-   a base-class never requires changing the value of the pointer.  */\n-#define TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P(NODE) (TREE_LANG_FLAG_1 (NODE))\n-\n /* [class.virtual]\n \n    A class that declares or inherits a virtual function is called a\n@@ -2275,8 +2258,7 @@ struct lang_decl GTY(())\n \n /* Nonzero if this class has a virtual function table pointer.  */\n #define TYPE_CONTAINS_VPTR_P(NODE)\t\t\\\n-  (TYPE_POLYMORPHIC_P (NODE)\t\t\t\\\n-   || TYPE_USES_VIRTUAL_BASECLASSES (NODE))\n+  (TYPE_POLYMORPHIC_P (NODE) || CLASSTYPE_VBASECLASSES (NODE))\n \n /* This flag is true of a local VAR_DECL if it was declared in a for\n    statement, but we are no longer in the scope of the for.  */"}, {"sha": "d486505703c7a708340ca3166af6ab5b885acc6b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -9241,22 +9241,13 @@ xref_basetypes (tree ref, tree base_list)\n \n   if (max_bases > 1)\n     {\n-      TYPE_USES_MULTIPLE_INHERITANCE (ref) = 1;\n-      /* If there is more than one non-empty they cannot be at the\n-\t same address.  */\n-      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (ref) = 1;\n-\n       if (TYPE_FOR_JAVA (ref))\n \terror (\"Java class '%T' cannot have multiple bases\", ref);\n     }\n \n   if (max_vbases)\n     {\n       CLASSTYPE_VBASECLASSES (ref) = VEC_alloc (tree, max_vbases);\n-      TYPE_USES_VIRTUAL_BASECLASSES (ref) = 1;\n-      /* Converting to a virtual base class requires looking up the\n-\t offset of the virtual base.  */\n-      TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (ref) = 1;\n \n       if (TYPE_FOR_JAVA (ref))\n \terror (\"Java class '%T' cannot have virtual bases\", ref);\n@@ -9309,10 +9300,6 @@ xref_basetypes (tree ref, tree base_list)\n \t  TYPE_HAS_ARRAY_NEW_OPERATOR (ref)\n \t    |= TYPE_HAS_ARRAY_NEW_OPERATOR (basetype);\n \t  TYPE_GETS_DELETE (ref) |= TYPE_GETS_DELETE (basetype);\n-\t  TYPE_USES_MULTIPLE_INHERITANCE (ref)\n-\t    |= TYPE_USES_MULTIPLE_INHERITANCE (basetype);\n-\t  TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (ref)\n-\t    |= TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (basetype);\n \t  TYPE_HAS_CONVERSION (ref) |= TYPE_HAS_CONVERSION (basetype);\n \t}\n \n@@ -10788,6 +10775,8 @@ cxx_maybe_build_cleanup (tree decl)\n     {\n       int flags = LOOKUP_NORMAL|LOOKUP_DESTRUCTOR;\n       tree rval;\n+      bool has_vbases = (TREE_CODE (type) == RECORD_TYPE\n+\t\t\t && CLASSTYPE_VBASECLASSES (type));\n \n       if (TREE_CODE (type) == ARRAY_TYPE)\n \trval = decl;\n@@ -10798,15 +10787,13 @@ cxx_maybe_build_cleanup (tree decl)\n \t}\n \n       /* Optimize for space over speed here.  */\n-      if (! TYPE_USES_VIRTUAL_BASECLASSES (type)\n-\t  || flag_expensive_optimizations)\n+      if (!has_vbases || flag_expensive_optimizations)\n \tflags |= LOOKUP_NONVIRTUAL;\n \n       rval = build_delete (TREE_TYPE (rval), rval,\n \t\t\t   sfk_complete_destructor, flags, 0);\n \n-      if (TYPE_USES_VIRTUAL_BASECLASSES (type)\n-\t  && ! TYPE_HAS_DESTRUCTOR (type))\n+      if (has_vbases && !TYPE_HAS_DESTRUCTOR (type))\n \trval = build_compound_expr (rval, build_vbase_delete (type, decl));\n \n       return rval;"}, {"sha": "0c05a7ad160c6e39ef8ea2be11d1ed3750e133cd", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -198,7 +198,7 @@ maybe_retrofit_in_chrg (tree fn)\n   /* We don't need an in-charge parameter for constructors that don't\n      have virtual bases.  */\n   if (DECL_CONSTRUCTOR_P (fn)\n-      && !TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+      && !CLASSTYPE_VBASECLASSES (DECL_CONTEXT (fn)))\n     return;\n \n   arg_types = TYPE_ARG_TYPES (TREE_TYPE (fn));\n@@ -209,7 +209,7 @@ maybe_retrofit_in_chrg (tree fn)\n \n   /* If this is a subobject constructor or destructor, our caller will\n      pass us a pointer to our VTT.  */\n-  if (TYPE_USES_VIRTUAL_BASECLASSES (DECL_CONTEXT (fn)))\n+  if (CLASSTYPE_VBASECLASSES (DECL_CONTEXT (fn)))\n     {\n       parm = build_artificial_parm (vtt_parm_identifier, vtt_parm_type);\n "}, {"sha": "58dac9685a78d75354e396662c45720cf2b49071", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -1001,7 +1001,7 @@ expand_member_init (tree name)\n \n       if (!direct_binfo && !virtual_binfo)\n \t{\n-\t  if (TYPE_USES_VIRTUAL_BASECLASSES (current_class_type))\n+\t  if (CLASSTYPE_VBASECLASSES (current_class_type))\n \t    error (\"type `%D' is not a direct or virtual base of `%T'\",\n \t\t   name, current_class_type);\n \t  else\n@@ -2855,7 +2855,7 @@ push_base_cleanups (void)\n   VEC (tree) *vbases;\n \n   /* Run destructors for all virtual baseclasses.  */\n-  if (TYPE_USES_VIRTUAL_BASECLASSES (current_class_type))\n+  if (CLASSTYPE_VBASECLASSES (current_class_type))\n     {\n       tree cond = (condition_conversion\n \t\t   (build2 (BIT_AND_EXPR, integer_type_node,"}, {"sha": "42f652a5b9e8ba7d77d2bd2a510f72d9cf7a01f5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -5459,12 +5459,6 @@ instantiate_class_template (tree type)\n   TYPE_HAS_CONST_INIT_REF (type) = TYPE_HAS_CONST_INIT_REF (pattern);\n   TYPE_HAS_DEFAULT_CONSTRUCTOR (type) = TYPE_HAS_DEFAULT_CONSTRUCTOR (pattern);\n   TYPE_HAS_CONVERSION (type) = TYPE_HAS_CONVERSION (pattern);\n-  TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (type)\n-    = TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (pattern);\n-  TYPE_USES_MULTIPLE_INHERITANCE (type)\n-    = TYPE_USES_MULTIPLE_INHERITANCE (pattern);\n-  TYPE_USES_VIRTUAL_BASECLASSES (type)\n-    = TYPE_USES_VIRTUAL_BASECLASSES (pattern);\n   TYPE_PACKED (type) = TYPE_PACKED (pattern);\n   TYPE_ALIGN (type) = TYPE_ALIGN (pattern);\n   TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (pattern);"}, {"sha": "31682413161e439482ffe230d4b4b0952fe75641", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -123,8 +123,6 @@ cxx_print_type (FILE *file, tree node, int indent)\n     fputs (\" delete[]\", file);\n   if (TYPE_HAS_ASSIGN_REF (node))\n     fputs (\" this=(X&)\", file);\n-  if (TYPE_USES_MULTIPLE_INHERITANCE (node))\n-    fputs (\" uses-multiple-inheritance\", file);\n \n   if (TREE_CODE (node) == RECORD_TYPE)\n     {"}, {"sha": "089e15501cf97b9fddbf7e58667919ec2ee04bbd", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5775a06aa64761ba8521ad79bd1a2cc8429a6750/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=5775a06aa64761ba8521ad79bd1a2cc8429a6750", "patch": "@@ -947,23 +947,10 @@ process_init_constructor (tree type, tree init, tree* elts)\n \n       if (tail)\n \t{\n-\t  if (TYPE_USES_VIRTUAL_BASECLASSES (type))\n-\t    {\n-\t      sorry (\"initializer list for object of class with virtual base classes\");\n-\t      return error_mark_node;\n-\t    }\n-\n-\t  if (TYPE_BINFO (type) && BINFO_N_BASE_BINFOS (TYPE_BINFO (type)))\n-\t    {\n-\t      sorry (\"initializer list for object of class with base classes\");\n-\t      return error_mark_node;\n-\t    }\n-\n-\t  if (TYPE_POLYMORPHIC_P (type))\n-\t    {\n-\t      sorry (\"initializer list for object using virtual functions\");\n-\t      return error_mark_node;\n-\t    }\n+\t  gcc_assert (!CLASSTYPE_VBASECLASSES (type));\n+\t  gcc_assert (!TYPE_BINFO (type)\n+\t\t      || !BINFO_N_BASE_BINFOS (TYPE_BINFO (type)));\n+\t  gcc_assert (!TYPE_POLYMORPHIC_P (type));\n \t}\n \n       for (field = TYPE_FIELDS (type); field;"}]}