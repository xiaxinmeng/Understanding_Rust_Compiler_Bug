{"sha": "092a4ef80c31a76cf3277019d673f4d43621a7c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyYTRlZjgwYzMxYTc2Y2YzMjc3MDE5ZDY3M2Y0ZDQzNjIxYTdjNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-04-04T17:46:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-04T17:46:35Z"}, "message": "com.c (ffecom_expr_): Revert Oct 22 change.\n\n* com.c (ffecom_expr_): Revert Oct 22 change.  Instead take a WIDENP\nargument so that we can respect the signedness of the original type.\n(ffecom_init_0): Do sizetype initialization first.\n\nFrom-SVN: r18995", "tree": {"sha": "529c0cc9534c7470b7fa572fb8672efe67936cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529c0cc9534c7470b7fa572fb8672efe67936cea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/092a4ef80c31a76cf3277019d673f4d43621a7c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092a4ef80c31a76cf3277019d673f4d43621a7c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092a4ef80c31a76cf3277019d673f4d43621a7c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092a4ef80c31a76cf3277019d673f4d43621a7c6/comments", "author": null, "committer": null, "parents": [{"sha": "896cced482d766c5d1d07ce1c71c191ac8864dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896cced482d766c5d1d07ce1c71c191ac8864dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896cced482d766c5d1d07ce1c71c191ac8864dd3"}], "stats": {"total": 97, "additions": 42, "deletions": 55}, "files": [{"sha": "508cff4dc5c1bd5eceb7920075d4e695a9e46167", "filename": "gcc/f/ChangeLog.egcs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092a4ef80c31a76cf3277019d673f4d43621a7c6/gcc%2Ff%2FChangeLog.egcs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092a4ef80c31a76cf3277019d673f4d43621a7c6/gcc%2Ff%2FChangeLog.egcs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog.egcs?ref=092a4ef80c31a76cf3277019d673f4d43621a7c6", "patch": "@@ -1,3 +1,9 @@\n+Sat Apr  4 17:45:01 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* com.c (ffecom_expr_): Revert Oct 22 change.  Instead take a WIDENP\n+\targument so that we can respect the signedness of the original type.\n+\t(ffecom_init_0): Do sizetype initialization first.\n+\n 1998-03-28  Dave Love  <d.love@dl.ac.uk>\n \n \t* Make-lang.in (f771$(exeext)): Fix typpo."}, {"sha": "39af54dce70cc9bfa5f85ffe807b059f78642d4e", "filename": "gcc/f/com.c", "status": "modified", "additions": 36, "deletions": 55, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092a4ef80c31a76cf3277019d673f4d43621a7c6/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092a4ef80c31a76cf3277019d673f4d43621a7c6/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=092a4ef80c31a76cf3277019d673f4d43621a7c6", "patch": "@@ -434,9 +434,8 @@ static ffecomConcatList_ ffecom_concat_list_new_ (ffebld expr,\n static void ffecom_debug_kludge_ (tree aggr, char *aggr_type, ffesymbol member,\n \t\t\t\t  tree member_type, ffetargetOffset offset);\n static void ffecom_do_entry_ (ffesymbol fn, int entrynum);\n-static tree ffecom_expr_ (ffebld expr, tree type_tree, tree dest_tree,\n-\t\t\t  ffebld dest, bool *dest_used,\n-\t\t\t  bool assignp);\n+static tree ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n+\t\t\t  bool *dest_used, bool assignp, bool widenp);\n static tree ffecom_expr_intrinsic_ (ffebld expr, tree dest_tree,\n \t\t\t\t    ffebld dest, bool *dest_used);\n static tree ffecom_expr_power_integer_ (ffebld left, ffebld right);\n@@ -637,14 +636,6 @@ static char *ffecom_gfrt_argstring_[FFECOM_gfrt]\n /* NOTE: g77 currently doesn't use these; see setting of sizetype and\n    change that if you need to.\t-- jcb 09/01/91. */\n \n-#ifndef SIZE_TYPE\n-#define SIZE_TYPE \"long unsigned int\"\n-#endif\n-\n-#ifndef WCHAR_TYPE\n-#define WCHAR_TYPE \"int\"\n-#endif\n-\n #define ffecom_concat_list_count_(catlist) ((catlist).count)\n #define ffecom_concat_list_expr_(catlist,i) ((catlist).exprs[(i)])\n #define ffecom_concat_list_maxlen_(catlist) ((catlist).maxlen)\n@@ -2725,17 +2716,12 @@ ffecom_do_entry_ (ffesymbol fn, int entrynum)\n    Recursive descent on expr while making corresponding tree nodes and\n    attaching type info and such.  If destination supplied and compatible\n    with temporary that would be made in certain cases, temporary isn't\n-   made, destination used instead, and dest_used flag set TRUE.\n-\n-   If TREE_TYPE is non-null, it overrides the type that the expression\n-   would normally be computed in.  This is most useful for array indices\n-   which should be done in sizetype for efficiency.  */\n+   made, destination used instead, and dest_used flag set TRUE.  */\n \n #if FFECOM_targetCURRENT == FFECOM_targetGCC\n static tree\n-ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n-\t      ffebld dest, bool *dest_used,\n-\t      bool assignp)\n+ffecom_expr_ (ffebld expr, tree dest_tree, ffebld dest,\n+\t      bool *dest_used, bool assignp, bool widenp)\n {\n   tree item;\n   tree list;\n@@ -2744,7 +2730,7 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n   ffeinfoKindtype kt;\n   tree t;\n   tree dt;\t\t\t/* decl_tree for an ffesymbol. */\n-  tree tree_type;\n+  tree tree_type, tree_type_x;\n   tree left, right;\n   ffesymbol s;\n   enum tree_code code;\n@@ -2758,6 +2744,13 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n   kt = ffeinfo_kindtype (ffebld_info (expr));\n   tree_type = ffecom_tree_type[bt][kt];\n \n+  /* Widen integral arithmetic as desired while preserving signedness.  */\n+  tree_type_x = NULL_TREE;\n+  if (widenp && tree_type\n+      && GET_MODE_CLASS (TYPE_MODE (tree_type)) == MODE_INT\n+      && TYPE_PRECISION (tree_type) < TYPE_PRECISION (sizetype))\n+    tree_type_x = (TREE_UNSIGNED (tree_type) ? usizetype : ssizetype);\n+\n   switch (ffebld_op (expr))\n     {\n     case FFEBLD_opACCTER:\n@@ -2992,26 +2985,22 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n \t  t = ffecom_2 (ARRAY_REF,\n \t\t\tTYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (t))),\n \t\t\tt,\n-\t\t\tffecom_expr_ (dims[--i], sizetype, NULL, NULL,\n-\t\t\t\t      NULL, FALSE));\n+\t\t\tffecom_expr_ (dims[--i], NULL, NULL, NULL, FALSE, TRUE));\n #endif\n \n \treturn t;\n       }\n \n     case FFEBLD_opUPLUS:\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n       return ffecom_1 (NOP_EXPR, tree_type, left);\n \n     case FFEBLD_opPAREN:\t/* ~~~Make sure Fortran rules respected here */\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n       return ffecom_1 (NOP_EXPR, tree_type, left);\n \n     case FFEBLD_opUMINUS:\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n       if (tree_type_x) \n \t{\n \t  tree_type = tree_type_x;\n@@ -3020,10 +3009,8 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n       return ffecom_1 (NEGATE_EXPR, tree_type, left);\n \n     case FFEBLD_opADD:\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n-      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n-\t\t\t    NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n+      right = ffecom_expr_ (ffebld_right (expr), NULL, NULL, NULL, FALSE, widenp);\n       if (tree_type_x) \n \t{\n \t  tree_type = tree_type_x;\n@@ -3033,10 +3020,8 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n       return ffecom_2 (PLUS_EXPR, tree_type, left, right);\n \n     case FFEBLD_opSUBTRACT:\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n-      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n-\t\t\t    NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n+      right = ffecom_expr_ (ffebld_right (expr), NULL, NULL, NULL, FALSE, widenp);\n       if (tree_type_x) \n \t{\n \t  tree_type = tree_type_x;\n@@ -3046,10 +3031,8 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n       return ffecom_2 (MINUS_EXPR, tree_type, left, right);\n \n     case FFEBLD_opMULTIPLY:\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n-      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n-\t\t\t    NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n+      right = ffecom_expr_ (ffebld_right (expr), NULL, NULL, NULL, FALSE, widenp);\n       if (tree_type_x) \n \t{\n \t  tree_type = tree_type_x;\n@@ -3059,10 +3042,8 @@ ffecom_expr_ (ffebld expr, tree tree_type_x, tree dest_tree,\n       return ffecom_2 (MULT_EXPR, tree_type, left, right);\n \n     case FFEBLD_opDIVIDE:\n-      left = ffecom_expr_ (ffebld_left (expr), tree_type_x, NULL, NULL,\n-\t\t\t   NULL, FALSE);\n-      right = ffecom_expr_ (ffebld_right (expr), tree_type_x, NULL, NULL,\n-\t\t\t    NULL, FALSE);\n+      left = ffecom_expr_ (ffebld_left (expr), NULL, NULL, NULL, FALSE, widenp);\n+      right = ffecom_expr_ (ffebld_right (expr), NULL, NULL, NULL, FALSE, widenp);\n       if (tree_type_x) \n \t{\n \t  tree_type = tree_type_x;\n@@ -11563,8 +11544,8 @@ ffecom_expand_let_stmt (ffebld dest, ffebld source)\n \n       if ((TREE_CODE (dest_tree) != VAR_DECL)\n \t  || TREE_ADDRESSABLE (dest_tree))\n-\tsource_tree = ffecom_expr_ (source, NULL_TREE, dest_tree, dest,\n-\t\t\t\t    &dest_used, FALSE);\n+\tsource_tree = ffecom_expr_ (source, dest_tree, dest, &dest_used,\n+\t\t\t\t    FALSE, FALSE);\n       else\n \t{\n \t  source_tree = ffecom_expr (source);\n@@ -11605,8 +11586,7 @@ ffecom_expand_let_stmt (ffebld dest, ffebld source)\n tree\n ffecom_expr (ffebld expr)\n {\n-  return ffecom_expr_ (expr, NULL_TREE, NULL_TREE, NULL, NULL,\n-\t\t       FALSE);\n+  return ffecom_expr_ (expr, NULL_TREE, NULL, NULL, FALSE, FALSE);\n }\n \n #endif\n@@ -11616,8 +11596,7 @@ ffecom_expr (ffebld expr)\n tree\n ffecom_expr_assign (ffebld expr)\n {\n-  return ffecom_expr_ (expr, NULL_TREE, NULL_TREE, NULL, NULL,\n-\t\t       TRUE);\n+  return ffecom_expr_ (expr, NULL_TREE, NULL, NULL, TRUE, FALSE);\n }\n \n #endif\n@@ -11627,8 +11606,7 @@ ffecom_expr_assign (ffebld expr)\n tree\n ffecom_expr_assign_w (ffebld expr)\n {\n-  return ffecom_expr_ (expr, NULL_TREE, NULL_TREE, NULL, NULL,\n-\t\t       TRUE);\n+  return ffecom_expr_ (expr, NULL_TREE, NULL, NULL, TRUE, FALSE);\n }\n \n #endif\n@@ -11866,6 +11844,12 @@ ffecom_init_0 ()\n \t}\n     }\n \n+  /* Set the sizetype before we do anything else.  This _should_ be the\n+     first type we create.  */\n+\n+  t = make_unsigned_type (POINTER_SIZE);\n+  assert (t == sizetype);\n+\n #if FFECOM_GCC_INCLUDE\n   ffecom_initialize_char_syntax_ ();\n #endif\n@@ -11909,9 +11893,6 @@ ffecom_init_0 ()\n   pushdecl (build_decl (TYPE_DECL, get_identifier (\"long long unsigned int\"),\n \t\t\tlong_long_unsigned_type_node));\n \n-  set_sizetype\n-    (TREE_TYPE (IDENTIFIER_GLOBAL_VALUE (get_identifier (SIZE_TYPE))));\n-\n   error_mark_node = make_node (ERROR_MARK);\n   TREE_TYPE (error_mark_node) = error_mark_node;\n "}]}