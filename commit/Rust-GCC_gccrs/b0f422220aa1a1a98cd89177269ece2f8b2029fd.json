{"sha": "b0f422220aa1a1a98cd89177269ece2f8b2029fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBmNDIyMjIwYWExYTFhOThjZDg5MTc3MjY5ZWNlMmY4YjIwMjlmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-01-18T03:58:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-01-18T03:58:22Z"}, "message": "PR c++/86205 - ICE with ?: of throw and template-id.\n\nMy patch for 64372 removed a bogus lvalue-rvalue conversion for one arm of a\n?: expression where the other arm is a throw.  But we still need to require\nany overload to be resolved, even though we aren't getting that from\ndecay_conversion anymore.\n\n\t* pt.c (resolve_nondeduced_context_or_error): Split out from...\n\t* typeck.c (decay_conversion): ...here.\n\t* call.c (build_conditional_expr_1): Use it.\n\nFrom-SVN: r268058", "tree": {"sha": "7879322f9e077f358b2a0b82a24c86a203fc4d0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7879322f9e077f358b2a0b82a24c86a203fc4d0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0f422220aa1a1a98cd89177269ece2f8b2029fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f422220aa1a1a98cd89177269ece2f8b2029fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f422220aa1a1a98cd89177269ece2f8b2029fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f422220aa1a1a98cd89177269ece2f8b2029fd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aee6ed4a2cbed1ac8be35332ee2391206e2101a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aee6ed4a2cbed1ac8be35332ee2391206e2101a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aee6ed4a2cbed1ac8be35332ee2391206e2101a2"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "3fb1a895b5ac9f18102a8cebb8bd47a84cf19a04", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b0f422220aa1a1a98cd89177269ece2f8b2029fd", "patch": "@@ -1,5 +1,10 @@\n 2019-01-17  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/86205 - ICE with ?: of throw and template-id.\n+\t* pt.c (resolve_nondeduced_context_or_error): Split out from...\n+\t* typeck.c (decay_conversion): ...here.\n+\t* call.c (build_conditional_expr_1): Use it.\n+\n \tPR c++/86740, ICE with constexpr if and nested generic lambdas.\n \t* tree.c (cp_walk_subtrees): Handle LAMBDA_EXPR.\n "}, {"sha": "c639f5f23e86ea4d35eb0f0179559690048e1c45", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b0f422220aa1a1a98cd89177269ece2f8b2029fd", "patch": "@@ -5067,6 +5067,19 @@ build_conditional_expr_1 (const op_location_t &loc,\n   arg3_type = unlowered_expr_type (arg3);\n   if (VOID_TYPE_P (arg2_type) || VOID_TYPE_P (arg3_type))\n     {\n+      /* 'void' won't help in resolving an overloaded expression on the\n+\t other side, so require it to resolve by itself.  */\n+      if (arg2_type == unknown_type_node)\n+\t{\n+\t  arg2 = resolve_nondeduced_context_or_error (arg2, complain);\n+\t  arg2_type = TREE_TYPE (arg2);\n+\t}\n+      if (arg3_type == unknown_type_node)\n+\t{\n+\t  arg3 = resolve_nondeduced_context_or_error (arg3, complain);\n+\t  arg3_type = TREE_TYPE (arg3);\n+\t}\n+\n       /* [expr.cond]\n \n \t One of the following shall hold:"}, {"sha": "23d4a0e3c690e7c4b376316a26028fcd6049be0e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b0f422220aa1a1a98cd89177269ece2f8b2029fd", "patch": "@@ -6831,6 +6831,7 @@ extern tree get_template_innermost_arguments\t(const_tree);\n extern tree get_template_argument_pack_elems\t(const_tree);\n extern tree get_function_template_decl\t\t(const_tree);\n extern tree resolve_nondeduced_context\t\t(tree, tsubst_flags_t);\n+extern tree resolve_nondeduced_context_or_error\t(tree, tsubst_flags_t);\n extern hashval_t iterative_hash_template_arg (tree arg, hashval_t val);\n extern tree coerce_template_parms               (tree, tree, tree);\n extern tree coerce_template_parms               (tree, tree, tree, tsubst_flags_t);"}, {"sha": "48c180cc13b3b6cde66b75d1a0b23a856e3e643e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b0f422220aa1a1a98cd89177269ece2f8b2029fd", "patch": "@@ -21147,6 +21147,21 @@ resolve_nondeduced_context (tree orig_expr, tsubst_flags_t complain)\n   return orig_expr;\n }\n \n+/* As above, but error out if the expression remains overloaded.  */\n+\n+tree\n+resolve_nondeduced_context_or_error (tree exp, tsubst_flags_t complain)\n+{\n+  exp = resolve_nondeduced_context (exp, complain);\n+  if (type_unknown_p (exp))\n+    {\n+      if (complain & tf_error)\n+\tcxx_incomplete_type_error (exp, TREE_TYPE (exp));\n+      return error_mark_node;\n+    }\n+  return exp;\n+}\n+\n /* Subroutine of resolve_overloaded_unification; does deduction for a single\n    overload.  Fills TARGS with any deduced arguments, or error_mark_node if\n    different overloads deduce different arguments for a given parm."}, {"sha": "2fff2625bee1c3da5929f76bbe6acf2fb6a256b8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b0f422220aa1a1a98cd89177269ece2f8b2029fd", "patch": "@@ -2009,13 +2009,7 @@ decay_conversion (tree exp,\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  exp = resolve_nondeduced_context (exp, complain);\n-  if (type_unknown_p (exp))\n-    {\n-      if (complain & tf_error)\n-\tcxx_incomplete_type_error (exp, TREE_TYPE (exp));\n-      return error_mark_node;\n-    }\n+  exp = resolve_nondeduced_context_or_error (exp, complain);\n \n   code = TREE_CODE (type);\n "}, {"sha": "ec82dee10b7fef3bcf114ec84a896c25256ab1c3", "filename": "gcc/testsuite/g++.dg/cpp0x/cond2.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcond2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0f422220aa1a1a98cd89177269ece2f8b2029fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcond2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fcond2.C?ref=b0f422220aa1a1a98cd89177269ece2f8b2029fd", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/86205\n+// { dg-do compile { target c++11 } }\n+\n+bool b;\n+\n+template < class T > int f ()\n+{\n+  return 0;\n+}\n+\n+template < class T > auto g () -> decltype (b ? f < int > : throw 0)\n+{\n+  return b ? f<int> : throw 0;\n+}"}]}