{"sha": "a90552d5640745659ced7aca0d285a61da3b11ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwNTUyZDU2NDA3NDU2NTljZWQ3YWNhMGQyODVhNjFkYTNiMTFmZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-07-14T23:59:00Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-07-14T23:59:00Z"}, "message": "re PR fortran/32036 (Multiple evaluation of array index with bounds checking)\n\n\tPR fortran/32036\n\n\t* trans-array.c (gfc_conv_array_ref): Only evaluate index once.\n\n\t* gfortran.dg/bounds_check_8.f90: New test.\n\t* gfortran.dg/do_iterator_2.f90: Make code legal Fortran.\n\nFrom-SVN: r126647", "tree": {"sha": "2c7ec1151f8d0b27f09195b5c55c57e8ba9c9a34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c7ec1151f8d0b27f09195b5c55c57e8ba9c9a34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a90552d5640745659ced7aca0d285a61da3b11ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90552d5640745659ced7aca0d285a61da3b11ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a90552d5640745659ced7aca0d285a61da3b11ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a90552d5640745659ced7aca0d285a61da3b11ff/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37058415033503179d69f4d58e08dddae0a44142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37058415033503179d69f4d58e08dddae0a44142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37058415033503179d69f4d58e08dddae0a44142"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "9f8a27cfc10b81cd28ab672da7c04cb8489ae188", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a90552d5640745659ced7aca0d285a61da3b11ff", "patch": "@@ -1,3 +1,8 @@\n+2007-07-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32036\n+\t* trans-array.c (gfc_conv_array_ref): Only evaluate index once.\n+\n 2007-07-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32357"}, {"sha": "16f95777ee7ee3a021633ed362487dbb625a9b74", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=a90552d5640745659ced7aca0d285a61da3b11ff", "patch": "@@ -2278,6 +2278,9 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_symbol * sym,\n \t  tree cond;\n \t  char *msg;\n \n+\t  /* Evaluate the indexse.expr only once.  */\n+\t  indexse.expr = save_expr (indexse.expr);\n+\n \t  /* Lower bound.  */\n \t  tmp = gfc_conv_array_lbound (se->expr, n);\n \t  cond = fold_build2 (LT_EXPR, boolean_type_node, "}, {"sha": "97e883694dc0eb5e365e7a32bef0ccf75c9e914b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a90552d5640745659ced7aca0d285a61da3b11ff", "patch": "@@ -1,3 +1,9 @@\n+2007-07-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32036\n+\t* gfortran.dg/bounds_check_8.f90: New test.\n+\t* gfortran.dg/do_iterator_2.f90: Make code legal Fortran.\n+\n 2007-07-15  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32357"}, {"sha": "c9d8855d39df6019a593889b12cf374c5500022d", "filename": "gcc/testsuite/gfortran.dg/bounds_check_8.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbounds_check_8.f90?ref=a90552d5640745659ced7aca0d285a61da3b11ff", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do run }\n+! { dg-options \"-fbounds-check\" }\n+! PR fortran/32036\n+program test\n+  type t\n+    integer, dimension (5) :: field\n+  end type t\n+  type (t), dimension (2) :: a\n+  integer :: calls\n+\n+  type xyz_type\n+     integer :: x\n+  end type xyz_type\n+  type (xyz_type), dimension(3) :: xyz\n+  character(len=20) :: s\n+\n+  xyz(1)%x = 11111\n+  xyz(2)%x = 0\n+  xyz(3)%x = 0\n+\n+  write(s,*) xyz(bar())\n+  if (trim(adjustl(s)) /= \"11111\") call abort\n+\n+  a(1)%field = 0\n+  a(2)%field = 0\n+  calls = 0\n+  if (sum(a(foo(calls))%field) /= 0) call abort\n+  if (calls .ne. 1) call abort\n+\n+contains\n+\n+  function foo (calls)\n+    integer :: calls, foo\n+    calls = calls + 1\n+    foo = 2\n+  end function foo \n+\n+  integer function bar ()\n+    integer, save :: i = 1\n+    bar = i\n+    i = i + 1\n+  end function\n+\n+end program test"}, {"sha": "38f59b5e034a642d09c664941c18a986c7e8d4bd", "filename": "gcc/testsuite/gfortran.dg/do_iterator_2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_iterator_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a90552d5640745659ced7aca0d285a61da3b11ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_iterator_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_iterator_2.f90?ref=a90552d5640745659ced7aca0d285a61da3b11ff", "patch": "@@ -16,16 +16,16 @@ subroutine something\n   i = 1\n   n = 5\n   line = 'PZ0R1'\n-  if (internal (0)) call abort ()\n-  if (m .ne. 5) call abort ()\n+  if (internal (1)) call abort ()\n+  if (m .ne. 4) call abort ()\n contains\n   logical function internal (j)\n     intent(in) j\n     do i = j, n\n       k = index ('RE', lit (i))\n       m = m + 1\n       if (k == 0) cycle\n-      if (i+1 == n) exit\n+      if (i + 1 == n) exit\n     enddo\n     internal = (k == 0)\n   end function"}]}