{"sha": "e6d9df3c650d24bcd50b5df61d4656dea3e974da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkOWRmM2M2NTBkMjRiY2Q1MGI1ZGY2MWQ0NjU2ZGVhM2U5NzRkYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-12-09T17:19:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-12-09T17:19:19Z"}, "message": "exp_imgv.adb (Expand_Image_Attribute): Generate extra boolean parameter in call to Image_Wide_Character.\n\n2005-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_imgv.adb (Expand_Image_Attribute): Generate extra boolean\n\tparameter in call to Image_Wide_Character.\n\n\t* s-imgwch.ads, s-imgwch.adb (Image_Wide_Character): Add boolean\n\tparameter Ada_2005 to deal with annoying FFFE/FFFF inconsistency.\n\t(Image_Wide_Character): Add boolean parameter Ada_2005 to deal with\n\tannoying FFFE/FFFF inconsistency.\n\nFrom-SVN: r108293", "tree": {"sha": "c29a9485008dc37a0ce489ce23a01cd8ba7dbd48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29a9485008dc37a0ce489ce23a01cd8ba7dbd48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d9df3c650d24bcd50b5df61d4656dea3e974da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d9df3c650d24bcd50b5df61d4656dea3e974da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d9df3c650d24bcd50b5df61d4656dea3e974da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d9df3c650d24bcd50b5df61d4656dea3e974da/comments", "author": null, "committer": null, "parents": [{"sha": "d82e89e9defbe9f2b9ddbbd4873f2706e30c9f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d82e89e9defbe9f2b9ddbbd4873f2706e30c9f27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d82e89e9defbe9f2b9ddbbd4873f2706e30c9f27"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "2f76d639b7c1d3471b0b97e652b2e2ff50deed06", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d9df3c650d24bcd50b5df61d4656dea3e974da/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d9df3c650d24bcd50b5df61d4656dea3e974da/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=e6d9df3c650d24bcd50b5df61d4656dea3e974da", "patch": "@@ -32,6 +32,7 @@ with Exp_Util; use Exp_Util;\n with Namet;    use Namet;\n with Nmake;    use Nmake;\n with Nlists;   use Nlists;\n+with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n with Sem_Res;  use Sem_Res;\n with Sinfo;    use Sinfo;\n@@ -148,7 +149,6 @@ package body Exp_Imgv is\n               Make_Aggregate (Loc,\n                 Expressions => Ind))),\n         Suppress => All_Checks);\n-\n    end Build_Enumeration_Image_Tables;\n \n    ----------------------------\n@@ -191,6 +191,7 @@ package body Exp_Imgv is\n    --    For types whose root type is Wide_Character\n    --      xx = Wide_Character\n    --      tv = Wide_Character (Expr)\n+   --      pm = Boolean, true if Ada 2005 mode, False otherwise\n \n    --    For types whose root type is Wide_Wide_Character\n    --      xx = Wide_Wide_haracter\n@@ -398,6 +399,12 @@ package body Exp_Imgv is\n \n          Set_Conversion_OK (First (Arglist));\n          Set_Etype (First (Arglist), Tent);\n+\n+         --  For Wide_Character, append Ada 2005 indication\n+\n+      elsif Rtyp = Standard_Wide_Character then\n+         Append_To (Arglist,\n+           New_Reference_To (Boolean_Literals (Ada_Version >= Ada_05), Loc));\n       end if;\n \n       Rewrite (N,"}, {"sha": "a408ef62828699368aa46cad387cebf06e7b8b31", "filename": "gcc/ada/s-imgwch.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d9df3c650d24bcd50b5df61d4656dea3e974da/gcc%2Fada%2Fs-imgwch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d9df3c650d24bcd50b5df61d4656dea3e974da/gcc%2Fada%2Fs-imgwch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.adb?ref=e6d9df3c650d24bcd50b5df61d4656dea3e974da", "patch": "@@ -42,9 +42,24 @@ package body System.Img_WChar is\n    --------------------------\n \n    function Image_Wide_Character\n-     (V : Wide_Character) return String\n+     (V        : Wide_Character;\n+      Ada_2005 : Boolean) return String\n    is\n    begin\n+      --  Annoying Ada 95 incompatibility with FFFE/FFFF\n+\n+      if V >= Wide_Character'Val (16#FFFE#)\n+        and then not Ada_2005\n+      then\n+         if V = Wide_Character'Val (16#FFFE#) then\n+            return \"FFFE\";\n+         else\n+            return \"FFFF\";\n+         end if;\n+      end if;\n+\n+      --  Normal case, same as Wide_Wide_Character\n+\n       return\n         Image_Wide_Wide_Character\n           (Wide_Wide_Character'Val (Wide_Character'Pos (V)));"}, {"sha": "b827b803b92c18cb4c4c28c521422259034d9132", "filename": "gcc/ada/s-imgwch.ads", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d9df3c650d24bcd50b5df61d4656dea3e974da/gcc%2Fada%2Fs-imgwch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d9df3c650d24bcd50b5df61d4656dea3e974da/gcc%2Fada%2Fs-imgwch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-imgwch.ads?ref=e6d9df3c650d24bcd50b5df61d4656dea3e974da", "patch": "@@ -36,8 +36,12 @@\n package System.Img_WChar is\n    pragma Pure;\n \n-   function Image_Wide_Character (V : Wide_Character) return String;\n-   --  Computes Wide_Character'Image (V) and returns the computed result\n+   function Image_Wide_Character\n+     (V        : Wide_Character;\n+      Ada_2005 : Boolean) return String;\n+   --  Computes Wide_Character'Image (V) and returns the computed result. The\n+   --  parameter Ada_2005 is True if operating in Ada 2005 mode (or beyond).\n+   --  This is needed for the annoying FFFE/FFFF incompatibility.\n \n    function Image_Wide_Wide_Character (V : Wide_Wide_Character) return String;\n    --  Computes Wide_Wide_Character'Image (V) and returns the computed result"}]}