{"sha": "129e1a8a96d140150705fab30d25afb464eb1d99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI5ZTFhOGE5NmQxNDAxNTA3MDVmYWIzMGQyNWFmYjQ2NGViMWQ5OQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-06T19:14:46Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-06T19:20:54Z"}, "message": "Combine new calculated ranges with existing range.\n\nWhen a range is recalculated, retain what was previously known as IL changes\ncan produce different results from un-executed code.   This also paves\nthe way for external injection of ranges.\n\n\tgcc/\n\tPR tree-optimization/97737\n\tPR tree-optimization/97741\n\t* gimple-range.cc: (gimple_ranger::range_of_stmt): Intersect newly\n\tcalculated ranges with the existing known global range.\n\tgcc/testsuite/\n\t* gcc.dg/pr97737.c: New.\n\t* gcc.dg/pr97741.c: New.", "tree": {"sha": "07ad6c227d61e224f8495143c81292a079db91fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07ad6c227d61e224f8495143c81292a079db91fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/129e1a8a96d140150705fab30d25afb464eb1d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129e1a8a96d140150705fab30d25afb464eb1d99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/129e1a8a96d140150705fab30d25afb464eb1d99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/129e1a8a96d140150705fab30d25afb464eb1d99/comments", "author": null, "committer": null, "parents": [{"sha": "25126a28dbea7f9c7d6e5365929d7f3c9f60cdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25126a28dbea7f9c7d6e5365929d7f3c9f60cdaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25126a28dbea7f9c7d6e5365929d7f3c9f60cdaf"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "92a6335bec565ac6871102be7d2502280ee86c80", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129e1a8a96d140150705fab30d25afb464eb1d99/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129e1a8a96d140150705fab30d25afb464eb1d99/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=129e1a8a96d140150705fab30d25afb464eb1d99", "patch": "@@ -1026,8 +1026,14 @@ gimple_ranger::range_of_stmt (irange &r, gimple *s, tree name)\n   if (m_cache.get_non_stale_global_range (r, name))\n     return true;\n \n-  // Otherwise calculate a new value and save it.\n-  calc_stmt (r, s, name);\n+  // Otherwise calculate a new value.\n+  int_range_max tmp;\n+  calc_stmt (tmp, s, name);\n+\n+  // Combine the new value with the old value.  This is required because\n+  // the way value propagation works, when the IL changes on the fly we\n+  // can sometimes get different results.  See PR 97741.\n+  r.intersect (tmp);\n   m_cache.set_global_range (name, r);\n   return true;\n }"}, {"sha": "eef1c3531911be6faa5789b8e2e81fa20324e85c", "filename": "gcc/testsuite/gcc.dg/pr97737.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129e1a8a96d140150705fab30d25afb464eb1d99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97737.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129e1a8a96d140150705fab30d25afb464eb1d99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97737.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97737.c?ref=129e1a8a96d140150705fab30d25afb464eb1d99", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int a = 1, b, c;\n+\n+void d() {\n+  int e = 1;\n+L1:\n+  b = e;\n+L2:\n+  e = e / a;\n+  if (!(e || c || e - 1))\n+    goto L1;\n+  if (!b)\n+    goto L2;\n+}"}, {"sha": "47115d31d4a00454acdae945279ba749679a11f3", "filename": "gcc/testsuite/gcc.dg/pr97741.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/129e1a8a96d140150705fab30d25afb464eb1d99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97741.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/129e1a8a96d140150705fab30d25afb464eb1d99/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97741.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97741.c?ref=129e1a8a96d140150705fab30d25afb464eb1d99", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -Wextra -fno-strict-aliasing -fwrapv -Os -fno-toplevel-reorder -fno-tree-ccp -fno-tree-fre\" } */\n+\n+short a = 0;\n+long b = 0;\n+char c = 0;\n+void d() {\n+  int e = 0;\n+f:\n+  for (a = 6; a;)\n+    c = e;\n+  e = 0;\n+  for (; e == 20; ++e)\n+    for (; b;)\n+      goto f;\n+}\n+int main() { return 0; }"}]}