{"sha": "45852dcc91142eb73dc2b12ca939cce842d37daf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU4NTJkY2M5MTE0MmViNzNkYzJiMTJjYTkzOWNjZTg0MmQzN2RhZg==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-11-21T00:06:23Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-11-21T00:06:23Z"}, "message": "gimplify.h (gimplify_hasher : typed_free_remove, [...]): Move to gimplify.c.\n\n\n\n\t* gimplify.h (gimplify_hasher : typed_free_remove, struct gimplify_ctx):\n\tMove to gimplify.c.\n\t(free_gimplify_stack): Add prototype.\n\t* gimplify.c (gimplify_hasher:typed_free_remove): Relocate here.\n\t(struct gimplify_ctx): Relocate here.\n\t(gimplify_ctxp): Make static.\n\t(ctx_pool, ctx_alloc, ctx_free, free_gimplify_stack): New.  Manage a \n\tlist of struct gimplify_ctx.\n\t(push_gimplify_context): Add default parameters and allocate a struct\n\tfrom the pool.\n\t(pop_gimplify_context): Free a struct back to the pool.\n\t(gimplify_scan_omp_clauses, gimplify_omp_parallel, gimplify_omp_task,\n\tgimplify_omp_workshare, gimplify_transaction, gimplify_body): Don't\n\tuse a local 'struct gimplify_ctx'.\n\t* cgraphunit.c (expand_all_functions): call free_gimplify_stack.\n\t* gimplify-me.c (force_gimple_operand_1, gimple_regimplify_operands):\n\tLikewise.\n\t* omp-low.c (lower_omp_sections, lower_omp_single, lower_omp_master,\n\tlower_omp_ordered, lower_omp_critical, lower_omp_for,\n\tcreate_task_copyfn, lower_omp_taskreg, lower_omp_target,\n\tlower_omp_teams, execute_lower_omp): Likewise.\n\t* gimple-fold.c (gimplify_and_update_call_from_tree): Likewise.\n\t* tree-inline.c (optimize_inline_calls): Likewise.\n\nFrom-SVN: r205168", "tree": {"sha": "81dc78fd50ade92c05f83300f4d84fc625f8d50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81dc78fd50ade92c05f83300f4d84fc625f8d50d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45852dcc91142eb73dc2b12ca939cce842d37daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45852dcc91142eb73dc2b12ca939cce842d37daf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45852dcc91142eb73dc2b12ca939cce842d37daf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45852dcc91142eb73dc2b12ca939cce842d37daf/comments", "author": null, "committer": null, "parents": [{"sha": "41fd66597107279af9794ef7570c0fcca80e8348", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd66597107279af9794ef7570c0fcca80e8348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fd66597107279af9794ef7570c0fcca80e8348"}], "stats": {"total": 228, "additions": 140, "deletions": 88}, "files": [{"sha": "0afb3c8f036dad1494cb692a9290e988ef394849", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -1,3 +1,29 @@\n+2013-11-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimplify.h (gimplify_hasher : typed_free_remove, struct gimplify_ctx):\n+\tMove to gimplify.c.\n+\t(free_gimplify_stack): Add prototype.\n+\t* gimplify.c (gimplify_hasher:typed_free_remove): Relocate here.\n+\t(struct gimplify_ctx): Relocate here.\n+\t(gimplify_ctxp): Make static.\n+\t(ctx_pool, ctx_alloc, ctx_free, free_gimplify_stack): New.  Manage a \n+\tlist of struct gimplify_ctx.\n+\t(push_gimplify_context): Add default parameters and allocate a struct\n+\tfrom the pool.\n+\t(pop_gimplify_context): Free a struct back to the pool.\n+\t(gimplify_scan_omp_clauses, gimplify_omp_parallel, gimplify_omp_task,\n+\tgimplify_omp_workshare, gimplify_transaction, gimplify_body): Don't\n+\tuse a local 'struct gimplify_ctx'.\n+\t* cgraphunit.c (expand_all_functions): call free_gimplify_stack.\n+\t* gimplify-me.c (force_gimple_operand_1, gimple_regimplify_operands):\n+\tLikewise.\n+\t* omp-low.c (lower_omp_sections, lower_omp_single, lower_omp_master,\n+\tlower_omp_ordered, lower_omp_critical, lower_omp_for,\n+\tcreate_task_copyfn, lower_omp_taskreg, lower_omp_target,\n+\tlower_omp_teams, execute_lower_omp): Likewise.\n+\t* gimple-fold.c (gimplify_and_update_call_from_tree): Likewise.\n+\t* tree-inline.c (optimize_inline_calls): Likewise.\n+\n 2013-11-20  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/vsx.md (vsx_set_<mode>): Adjust for little endian."}, {"sha": "f56f7c7abbb6e93428de113c41f0e6f0f1dc5b68", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -205,6 +205,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"context.h\"\n #include \"pass_manager.h\"\n #include \"tree-nested.h\"\n+#include \"gimplify.h\"\n \n /* Queue of cgraph nodes scheduled to be added into cgraph.  This is a\n    secondary queue used during optimization to accommodate passes that\n@@ -1866,6 +1867,7 @@ expand_all_functions (void)\n \t}\n     }\n   cgraph_process_new_functions ();\n+  free_gimplify_stack ();\n \n   free (order);\n "}, {"sha": "91214bc90a25d9d08069b2d7adb2468c8cc071d4", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -608,16 +608,14 @@ gimplify_and_update_call_from_tree (gimple_stmt_iterator *si_p, tree expr)\n   gimple stmt, new_stmt;\n   gimple_stmt_iterator i;\n   gimple_seq stmts = NULL;\n-  struct gimplify_ctx gctx;\n   gimple laststore;\n   tree reaching_vuse;\n \n   stmt = gsi_stmt (*si_p);\n \n   gcc_assert (is_gimple_call (stmt));\n \n-  push_gimplify_context (&gctx);\n-  gctx.into_ssa = gimple_in_ssa_p (cfun);\n+  push_gimplify_context (gimple_in_ssa_p (cfun));\n \n   lhs = gimple_call_lhs (stmt);\n   if (lhs == NULL_TREE)"}, {"sha": "92542a9a2e9832bd24f3bfca80f280286d5ff08f", "filename": "gcc/gimplify-me.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimplify-me.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimplify-me.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify-me.c?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -45,7 +45,6 @@ force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n \t\t\tgimple_predicate gimple_test_f, tree var)\n {\n   enum gimplify_status ret;\n-  struct gimplify_ctx gctx;\n   location_t saved_location;\n \n   *stmts = NULL;\n@@ -57,16 +56,13 @@ force_gimple_operand_1 (tree expr, gimple_seq *stmts,\n       && (*gimple_test_f) (expr))\n     return expr;\n \n-  push_gimplify_context (&gctx);\n-  gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n-  gimplify_ctxp->allow_rhs_cond_expr = true;\n+  push_gimplify_context (gimple_in_ssa_p (cfun), true);\n   saved_location = input_location;\n   input_location = UNKNOWN_LOCATION;\n \n   if (var)\n     {\n-      if (gimplify_ctxp->into_ssa\n-\t  && is_gimple_reg (var))\n+      if (gimple_in_ssa_p (cfun) && is_gimple_reg (var))\n \tvar = make_ssa_name (var, NULL);\n       expr = build2 (MODIFY_EXPR, TREE_TYPE (var), var, expr);\n     }\n@@ -160,10 +156,8 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n   tree lhs;\n   gimple_seq pre = NULL;\n   gimple post_stmt = NULL;\n-  struct gimplify_ctx gctx;\n \n-  push_gimplify_context (&gctx);\n-  gimplify_ctxp->into_ssa = gimple_in_ssa_p (cfun);\n+  push_gimplify_context (gimple_in_ssa_p (cfun));\n \n   switch (gimple_code (stmt))\n     {"}, {"sha": "2b6de3e173218c8cfe4e4b9ff1fbef6b1b40c55b", "filename": "gcc/gimplify.c", "status": "modified", "additions": 92, "deletions": 18, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -89,6 +89,37 @@ enum omp_region_type\n   ORT_TARGET = 32\n };\n \n+/* Gimplify hashtable helper.  */\n+\n+struct gimplify_hasher : typed_free_remove <elt_t>\n+{\n+  typedef elt_t value_type;\n+  typedef elt_t compare_type;\n+  static inline hashval_t hash (const value_type *);\n+  static inline bool equal (const value_type *, const compare_type *);\n+};\n+\n+struct gimplify_ctx\n+{\n+  struct gimplify_ctx *prev_context;\n+\n+  vec<gimple> bind_expr_stack;\n+  tree temps;\n+  gimple_seq conditional_cleanups;\n+  tree exit_label;\n+  tree return_temp;\n+\n+  vec<tree> case_labels;\n+  /* The formal temporary table.  Should this be persistent?  */\n+  hash_table <gimplify_hasher> temp_htab;\n+\n+  int conditions;\n+  bool save_stack;\n+  bool into_ssa;\n+  bool allow_rhs_cond_expr;\n+  bool in_cleanup_point_expr;\n+};\n+\n struct gimplify_omp_ctx\n {\n   struct gimplify_omp_ctx *outer_context;\n@@ -100,10 +131,9 @@ struct gimplify_omp_ctx\n   bool combined_loop;\n };\n \n-struct gimplify_ctx *gimplify_ctxp;\n+static struct gimplify_ctx *gimplify_ctxp;\n static struct gimplify_omp_ctx *gimplify_omp_ctxp;\n \n-\n /* Forward declaration.  */\n static enum gimplify_status gimplify_compound_expr (tree *, gimple_seq *, bool);\n \n@@ -134,14 +164,63 @@ gimplify_seq_add_seq (gimple_seq *dst_p, gimple_seq src)\n   gsi_insert_seq_after_without_update (&si, src, GSI_NEW_STMT);\n }\n \n+\n+/* Pointer to a list of allocated gimplify_ctx structs to be used for pushing\n+   and popping gimplify contexts.  */\n+\n+static struct gimplify_ctx *ctx_pool = NULL;\n+\n+/* Return a gimplify context struct from the pool.  */\n+\n+static inline struct gimplify_ctx *\n+ctx_alloc (void)\n+{\n+  struct gimplify_ctx * c = ctx_pool;\n+\n+  if (c)\n+    ctx_pool = c->prev_context;\n+  else\n+    c = XNEW (struct gimplify_ctx);\n+\n+  memset (c, '\\0', sizeof (*c));\n+  return c;\n+}\n+\n+/* Put gimplify context C back into the pool.  */\n+\n+static inline void\n+ctx_free (struct gimplify_ctx *c)\n+{\n+  c->prev_context = ctx_pool;\n+  ctx_pool = c;\n+}\n+\n+/* Free allocated ctx stack memory.  */\n+\n+void\n+free_gimplify_stack (void)\n+{\n+  struct gimplify_ctx *c;\n+\n+  while ((c = ctx_pool))\n+    {\n+      ctx_pool = c->prev_context;\n+      free (c);\n+    }\n+}\n+\n+\n /* Set up a context for the gimplifier.  */\n \n void\n-push_gimplify_context (struct gimplify_ctx *c)\n+push_gimplify_context (bool in_ssa, bool rhs_cond_ok)\n {\n-  memset (c, '\\0', sizeof (*c));\n+  struct gimplify_ctx *c = ctx_alloc ();\n+\n   c->prev_context = gimplify_ctxp;\n   gimplify_ctxp = c;\n+  gimplify_ctxp->into_ssa = in_ssa;\n+  gimplify_ctxp->allow_rhs_cond_expr = rhs_cond_ok;\n }\n \n /* Tear down a context for the gimplifier.  If BODY is non-null, then\n@@ -168,6 +247,7 @@ pop_gimplify_context (gimple body)\n \n   if (c->temp_htab.is_created ())\n     c->temp_htab.dispose ();\n+  ctx_free (c);\n }\n \n /* Push a GIMPLE_BIND tuple onto the stack of bindings.  */\n@@ -5726,7 +5806,6 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t\t   enum omp_region_type region_type)\n {\n   struct gimplify_omp_ctx *ctx, *outer_ctx;\n-  struct gimplify_ctx gctx;\n   tree c;\n \n   ctx = new_omp_context (region_type);\n@@ -5863,7 +5942,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      omp_add_variable (ctx, OMP_CLAUSE_REDUCTION_PLACEHOLDER (c),\n \t\t\t\tGOVD_LOCAL | GOVD_SEEN);\n \t      gimplify_omp_ctxp = ctx;\n-\t      push_gimplify_context (&gctx);\n+\t      push_gimplify_context ();\n \n \t      OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c) = NULL;\n \t      OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (c) = NULL;\n@@ -5872,7 +5951,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t  \t\t&OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c));\n \t      pop_gimplify_context\n \t\t(gimple_seq_first_stmt (OMP_CLAUSE_REDUCTION_GIMPLE_INIT (c)));\n-\t      push_gimplify_context (&gctx);\n+\t      push_gimplify_context ();\n \t      gimplify_and_add (OMP_CLAUSE_REDUCTION_MERGE (c),\n \t\t  \t\t&OMP_CLAUSE_REDUCTION_GIMPLE_MERGE (c));\n \t      pop_gimplify_context\n@@ -5886,7 +5965,7 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t\t   && OMP_CLAUSE_LASTPRIVATE_STMT (c))\n \t    {\n \t      gimplify_omp_ctxp = ctx;\n-\t      push_gimplify_context (&gctx);\n+\t      push_gimplify_context ();\n \t      if (TREE_CODE (OMP_CLAUSE_LASTPRIVATE_STMT (c)) != BIND_EXPR)\n \t\t{\n \t\t  tree bind = build3 (BIND_EXPR, void_type_node, NULL,\n@@ -6309,14 +6388,13 @@ gimplify_omp_parallel (tree *expr_p, gimple_seq *pre_p)\n   tree expr = *expr_p;\n   gimple g;\n   gimple_seq body = NULL;\n-  struct gimplify_ctx gctx;\n \n   gimplify_scan_omp_clauses (&OMP_PARALLEL_CLAUSES (expr), pre_p,\n \t\t\t     OMP_PARALLEL_COMBINED (expr)\n \t\t\t     ? ORT_COMBINED_PARALLEL\n \t\t\t     : ORT_PARALLEL);\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   g = gimplify_and_return_first (OMP_PARALLEL_BODY (expr), &body);\n   if (gimple_code (g) == GIMPLE_BIND)\n@@ -6346,14 +6424,13 @@ gimplify_omp_task (tree *expr_p, gimple_seq *pre_p)\n   tree expr = *expr_p;\n   gimple g;\n   gimple_seq body = NULL;\n-  struct gimplify_ctx gctx;\n \n   gimplify_scan_omp_clauses (&OMP_TASK_CLAUSES (expr), pre_p,\n \t\t\t     find_omp_clause (OMP_TASK_CLAUSES (expr),\n \t\t\t\t\t      OMP_CLAUSE_UNTIED)\n \t\t\t     ? ORT_UNTIED_TASK : ORT_TASK);\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   g = gimplify_and_return_first (OMP_TASK_BODY (expr), &body);\n   if (gimple_code (g) == GIMPLE_BIND)\n@@ -6751,8 +6828,7 @@ gimplify_omp_workshare (tree *expr_p, gimple_seq *pre_p)\n   gimplify_scan_omp_clauses (&OMP_CLAUSES (expr), pre_p, ort);\n   if (ort == ORT_TARGET || ort == ORT_TARGET_DATA)\n     {\n-      struct gimplify_ctx gctx;\n-      push_gimplify_context (&gctx);\n+      push_gimplify_context ();\n       gimple g = gimplify_and_return_first (OMP_BODY (expr), &body);\n       if (gimple_code (g) == GIMPLE_BIND)\n \tpop_gimplify_context (g);\n@@ -6987,7 +7063,6 @@ gimplify_transaction (tree *expr_p, gimple_seq *pre_p)\n   tree expr = *expr_p, temp, tbody = TRANSACTION_EXPR_BODY (expr);\n   gimple g;\n   gimple_seq body = NULL;\n-  struct gimplify_ctx gctx;\n   int subcode = 0;\n \n   /* Wrap the transaction body in a BIND_EXPR so we have a context\n@@ -7000,7 +7075,7 @@ gimplify_transaction (tree *expr_p, gimple_seq *pre_p)\n       TRANSACTION_EXPR_BODY (expr) = bind;\n     }\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n   temp = voidify_wrapper_expr (*expr_p, NULL);\n \n   g = gimplify_and_return_first (TRANSACTION_EXPR_BODY (expr), &body);\n@@ -8358,7 +8433,6 @@ gimplify_body (tree fndecl, bool do_parms)\n   location_t saved_location = input_location;\n   gimple_seq parm_stmts, seq;\n   gimple outer_bind;\n-  struct gimplify_ctx gctx;\n   struct cgraph_node *cgn;\n \n   timevar_push (TV_TREE_GIMPLIFY);\n@@ -8368,7 +8442,7 @@ gimplify_body (tree fndecl, bool do_parms)\n   default_rtl_profile ();\n \n   gcc_assert (gimplify_ctxp == NULL);\n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   if (flag_openmp)\n     {"}, {"sha": "91000d1e6b75c637e9138de3b0bb741a15bf9ab0", "filename": "gcc/gimplify.h", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimplify.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fgimplify.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.h?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -48,39 +48,10 @@ enum gimplify_status {\n   GS_OK\t\t= 0,\t/* We did something, maybe more to do.  */\n   GS_ALL_DONE\t= 1\t/* The expression is fully gimplified.  */\n };\n-/* Gimplify hashtable helper.  */\n \n-struct gimplify_hasher : typed_free_remove <elt_t>\n-{\n-  typedef elt_t value_type;\n-  typedef elt_t compare_type;\n-  static inline hashval_t hash (const value_type *);\n-  static inline bool equal (const value_type *, const compare_type *);\n-};\n-\n-struct gimplify_ctx\n-{\n-  struct gimplify_ctx *prev_context;\n-\n-  vec<gimple> bind_expr_stack;\n-  tree temps;\n-  gimple_seq conditional_cleanups;\n-  tree exit_label;\n-  tree return_temp;\n-\n-  vec<tree> case_labels;\n-  /* The formal temporary table.  Should this be persistent?  */\n-  hash_table <gimplify_hasher> temp_htab;\n-\n-  int conditions;\n-  bool save_stack;\n-  bool into_ssa;\n-  bool allow_rhs_cond_expr;\n-  bool in_cleanup_point_expr;\n-};\n-\n-extern struct gimplify_ctx *gimplify_ctxp;\n-extern void push_gimplify_context (struct gimplify_ctx *);\n+extern void free_gimplify_stack (void);\n+extern void push_gimplify_context (bool in_ssa = false,\n+\t\t\t\t   bool rhs_cond_ok = false);\n extern void pop_gimplify_context (gimple);\n extern gimple gimple_current_bind_expr (void);\n extern vec<gimple> gimple_bind_expr_stack (void);"}, {"sha": "67221556f69ef434870303b01c6666dde24ec243", "filename": "gcc/omp-low.c", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -8351,11 +8351,10 @@ lower_omp_sections (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple_stmt_iterator tgsi;\n   gimple stmt, new_stmt, bind, t;\n   gimple_seq ilist, dlist, olist, new_body;\n-  struct gimplify_ctx gctx;\n \n   stmt = gsi_stmt (*gsi_p);\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   dlist = NULL;\n   ilist = NULL;\n@@ -8561,9 +8560,8 @@ lower_omp_single (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   tree block;\n   gimple t, bind, single_stmt = gsi_stmt (*gsi_p);\n   gimple_seq bind_body, bind_body_tail = NULL, dlist;\n-  struct gimplify_ctx gctx;\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   block = make_node (BLOCK);\n   bind = gimple_build_bind (NULL, NULL, block);\n@@ -8621,9 +8619,8 @@ lower_omp_master (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple stmt = gsi_stmt (*gsi_p), bind;\n   location_t loc = gimple_location (stmt);\n   gimple_seq tseq;\n-  struct gimplify_ctx gctx;\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   block = make_node (BLOCK);\n   bind = gimple_build_bind (NULL, NULL, block);\n@@ -8688,9 +8685,8 @@ lower_omp_ordered (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n {\n   tree block;\n   gimple stmt = gsi_stmt (*gsi_p), bind, x;\n-  struct gimplify_ctx gctx;\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   block = make_node (BLOCK);\n   bind = gimple_build_bind (NULL, NULL, block);\n@@ -8734,7 +8730,6 @@ lower_omp_critical (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple stmt = gsi_stmt (*gsi_p), bind;\n   location_t loc = gimple_location (stmt);\n   gimple_seq tbody;\n-  struct gimplify_ctx gctx;\n \n   name = gimple_omp_critical_name (stmt);\n   if (name)\n@@ -8787,7 +8782,7 @@ lower_omp_critical (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n       unlock = build_call_expr_loc (loc, unlock, 0);\n     }\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   block = make_node (BLOCK);\n   bind = gimple_build_bind (NULL, NULL, block);\n@@ -8877,9 +8872,8 @@ lower_omp_for (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple stmt = gsi_stmt (*gsi_p), new_stmt;\n   gimple_seq omp_for_body, body, dlist;\n   size_t i;\n-  struct gimplify_ctx gctx;\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   lower_omp (gimple_omp_for_pre_body_ptr (stmt), ctx);\n \n@@ -9094,7 +9088,6 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n   bool record_needs_remap = false, srecord_needs_remap = false;\n   splay_tree_node n;\n   struct omp_taskcopy_context tcctx;\n-  struct gimplify_ctx gctx;\n   location_t loc = gimple_location (task_stmt);\n \n   child_fn = gimple_omp_task_copy_fn (task_stmt);\n@@ -9107,7 +9100,7 @@ create_task_copyfn (gimple task_stmt, omp_context *ctx)\n     DECL_CONTEXT (t) = child_fn;\n \n   /* Populate the function.  */\n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n   push_cfun (child_cfun);\n \n   bind = build3 (BIND_EXPR, void_type_node, NULL, NULL, NULL);\n@@ -9387,7 +9380,6 @@ lower_omp_taskreg (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple stmt = gsi_stmt (*gsi_p);\n   gimple par_bind, bind, dep_bind = NULL;\n   gimple_seq par_body, olist, ilist, par_olist, par_rlist, par_ilist, new_body;\n-  struct gimplify_ctx gctx, dep_gctx;\n   location_t loc = gimple_location (stmt);\n \n   clauses = gimple_omp_taskreg_clauses (stmt);\n@@ -9412,15 +9404,15 @@ lower_omp_taskreg (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   if (gimple_code (stmt) == GIMPLE_OMP_TASK\n       && find_omp_clause (clauses, OMP_CLAUSE_DEPEND))\n     {\n-      push_gimplify_context (&dep_gctx);\n+      push_gimplify_context ();\n       dep_bind = gimple_build_bind (NULL, NULL, make_node (BLOCK));\n       lower_depend_clauses (stmt, &dep_ilist, &dep_olist);\n     }\n \n   if (ctx->srecord_type)\n     create_task_copyfn (stmt, ctx);\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   par_olist = NULL;\n   par_ilist = NULL;\n@@ -9510,7 +9502,6 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n   gimple stmt = gsi_stmt (*gsi_p);\n   gimple tgt_bind = NULL, bind;\n   gimple_seq tgt_body = NULL, olist, ilist, new_body;\n-  struct gimplify_ctx gctx;\n   location_t loc = gimple_location (stmt);\n   int kind = gimple_omp_target_kind (stmt);\n   unsigned int map_cnt = 0;\n@@ -9525,7 +9516,7 @@ lower_omp_target (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n     tgt_body = gimple_omp_body (stmt);\n   child_fn = ctx->cb.dst_fn;\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   for (c = clauses; c ; c = OMP_CLAUSE_CHAIN (c))\n     switch (OMP_CLAUSE_CODE (c))\n@@ -9811,8 +9802,7 @@ static void\n lower_omp_teams (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n {\n   gimple teams_stmt = gsi_stmt (*gsi_p);\n-  struct gimplify_ctx gctx;\n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   tree block = make_node (BLOCK);\n   gimple bind = gimple_build_bind (NULL, NULL, block);\n@@ -10105,10 +10095,8 @@ execute_lower_omp (void)\n \n   if (all_contexts->root)\n     {\n-      struct gimplify_ctx gctx;\n-\n       if (task_shared_vars)\n-\tpush_gimplify_context (&gctx);\n+\tpush_gimplify_context ();\n       lower_omp (&body, NULL);\n       if (task_shared_vars)\n \tpop_gimplify_context (NULL);"}, {"sha": "678579ac3de5059e5da7b52673247e235bbf3b24", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45852dcc91142eb73dc2b12ca939cce842d37daf/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=45852dcc91142eb73dc2b12ca939cce842d37daf", "patch": "@@ -4519,7 +4519,6 @@ optimize_inline_calls (tree fn)\n   copy_body_data id;\n   basic_block bb;\n   int last = n_basic_blocks_for_fn (cfun);\n-  struct gimplify_ctx gctx;\n   bool inlined_p = false;\n \n   /* Clear out ID.  */\n@@ -4540,7 +4539,7 @@ optimize_inline_calls (tree fn)\n   id.transform_lang_insert_block = NULL;\n   id.statements_to_fold = pointer_set_create ();\n \n-  push_gimplify_context (&gctx);\n+  push_gimplify_context ();\n \n   /* We make no attempts to keep dominance info up-to-date.  */\n   free_dominance_info (CDI_DOMINATORS);"}]}