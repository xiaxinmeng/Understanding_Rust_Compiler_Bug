{"sha": "d631b80aa7ff0f81cb486863f8bdb9369b48b5e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzMWI4MGFhN2ZmMGY4MWNiNDg2ODYzZjhiZGI5MzY5YjQ4YjVlOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-02T20:35:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-02T20:35:49Z"}, "message": "re PR rtl-optimization/7124 (-O2 -march=athlon produces ICE)\n\n        PR opt/7124\n        * config/i386/i386.c (ix86_register_move_cost): Increase cost\n        for secondary_memory_needed pairs.\n\nFrom-SVN: r57751", "tree": {"sha": "1dfe2c0b1567ce92b07b7b8fd40f58d89decfe3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfe2c0b1567ce92b07b7b8fd40f58d89decfe3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9/comments", "author": null, "committer": null, "parents": [{"sha": "a6ad79e790f038417c60704d9dd7a879a3ea05ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ad79e790f038417c60704d9dd7a879a3ea05ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ad79e790f038417c60704d9dd7a879a3ea05ee"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "7b571cc9508648c634f855e4f8b42d66708cc4d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d631b80aa7ff0f81cb486863f8bdb9369b48b5e9", "patch": "@@ -1,4 +1,11 @@\n-2002-10-02  Matt Austern  <austern@apple.com\n+2002-10-02  Richard Henderson  <rth@redhat.com>\n+\n+\tPR opt/7124\n+\t* config/i386/i386.c (ix86_register_move_cost): Increase cost\n+\tfor secondary_memory_needed pairs.\n+\n+2002-10-02  Matt Austern  <austern@apple.com>\n+\n \t* class.c (check_field_decls): Changed warning about const member\n \tvariables so that it doesn't get issued for a class aggregate.\n \t"}, {"sha": "b018c9eced73387efca330f2096293edff945527", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d631b80aa7ff0f81cb486863f8bdb9369b48b5e9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d631b80aa7ff0f81cb486863f8bdb9369b48b5e9", "patch": "@@ -13580,17 +13580,33 @@ ix86_register_move_cost (mode, class1, class2)\n      enum reg_class class1, class2;\n {\n   /* In case we require secondary memory, compute cost of the store followed\n-     by load.  In case of copying from general_purpose_register we may emit\n-     multiple stores followed by single load causing memory size mismatch\n-     stall.  Count this as arbitarily high cost of 20.  */\n+     by load.  In order to avoid bad register allocation choices, we need \n+     for this to be *at least* as high as the symmetric MEMORY_MOVE_COST.  */\n+\n   if (ix86_secondary_memory_needed (class1, class2, mode, 0))\n     {\n-      int add_cost = 0;\n+      int cost = 1;\n+\n+      cost += MAX (MEMORY_MOVE_COST (mode, class1, 0),\n+\t\t   MEMORY_MOVE_COST (mode, class1, 1));\n+      cost += MAX (MEMORY_MOVE_COST (mode, class2, 0),\n+\t\t   MEMORY_MOVE_COST (mode, class2, 1));\n+      \n+      /* In case of copying from general_purpose_register we may emit multiple\n+         stores followed by single load causing memory size mismatch stall.\n+         Count this as arbitarily high cost of 20.  */\n       if (CLASS_MAX_NREGS (class1, mode) > CLASS_MAX_NREGS (class2, mode))\n-\t  add_cost = 20;\n-      return (MEMORY_MOVE_COST (mode, class1, 0)\n-\t      + MEMORY_MOVE_COST (mode, class2, 1) + add_cost);\n+\tcost += 20;\n+\n+      /* In the case of FP/MMX moves, the registers actually overlap, and we\n+\t have to switch modes in order to treat them differently.  */\n+      if ((MMX_CLASS_P (class1) && MAYBE_FLOAT_CLASS_P (class2))\n+          || (MMX_CLASS_P (class2) && MAYBE_FLOAT_CLASS_P (class1)))\n+\tcost += 20;\n+\n+      return cost;\n     }\n+\n   /* Moves between SSE/MMX and integer unit are expensive.  */\n   if (MMX_CLASS_P (class1) != MMX_CLASS_P (class2)\n       || SSE_CLASS_P (class1) != SSE_CLASS_P (class2))"}]}