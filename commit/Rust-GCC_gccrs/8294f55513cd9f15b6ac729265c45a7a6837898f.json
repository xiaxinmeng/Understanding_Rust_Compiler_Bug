{"sha": "8294f55513cd9f15b6ac729265c45a7a6837898f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI5NGY1NTUxM2NkOWYxNWI2YWM3MjkyNjVjNDVhN2E2ODM3ODk4Zg==", "commit": {"author": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-11-20T14:21:43Z"}, "committer": {"name": "Andre Vehreschild", "email": "vehre@gcc.gnu.org", "date": "2016-11-20T14:21:43Z"}, "message": "re PR fortran/78395 ([OOP] error on polymorphic assignment)\n\ngcc/testsuite/ChangeLog:\n\n2016-11-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78395\n\t* gfortran.dg/typebound_operator_21.f03: New test.\n\ngcc/fortran/ChangeLog:\n\n2016-11-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n\n\tPR fortran/78395\n\t* resolve.c (resolve_typebound_function): Prevent stripping of refs,\n\twhen the base-expression is a class' typed one.\n\nFrom-SVN: r242637", "tree": {"sha": "58b4540d83d04271450ff7f8aceb277459f0a59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58b4540d83d04271450ff7f8aceb277459f0a59f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8294f55513cd9f15b6ac729265c45a7a6837898f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8294f55513cd9f15b6ac729265c45a7a6837898f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8294f55513cd9f15b6ac729265c45a7a6837898f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8294f55513cd9f15b6ac729265c45a7a6837898f/comments", "author": null, "committer": null, "parents": [{"sha": "5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18"}], "stats": {"total": 91, "additions": 90, "deletions": 1}, "files": [{"sha": "c06bb162c077c726f0129e319db4df0bc1e881ba", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8294f55513cd9f15b6ac729265c45a7a6837898f", "patch": "@@ -1,3 +1,9 @@\n+2016-11-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78395\n+\t* resolve.c (resolve_typebound_function): Prevent stripping of refs,\n+\twhen the base-expression is a class' typed one.\n+\n 2016-11-18  Richard Sandiford  <richard.sandiford@arm.com>\n  \t    Alan Hayward  <alan.hayward@arm.com>\n  \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "589a673e52ecd134acf4891a48d7cf4c79e42365", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8294f55513cd9f15b6ac729265c45a7a6837898f", "patch": "@@ -6140,7 +6140,7 @@ resolve_typebound_function (gfc_expr* e)\n \t  gfc_free_ref_list (class_ref->next);\n \t  class_ref->next = NULL;\n \t}\n-      else if (e->ref && !class_ref)\n+      else if (e->ref && !class_ref && expr->ts.type != BT_CLASS)\n \t{\n \t  gfc_free_ref_list (e->ref);\n \t  e->ref = NULL;"}, {"sha": "c20d91d85c8481ba8887d9a0ba8533cca37df19f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8294f55513cd9f15b6ac729265c45a7a6837898f", "patch": "@@ -1,3 +1,8 @@\n+2016-11-20  Andre Vehreschild  <vehre@gcc.gnu.org>\n+\n+\tPR fortran/78395\n+\t* gfortran.dg/typebound_operator_21.f03: New test.\n+\n 2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* gcc.dg/tree-ssa/divide-5.c: New file."}, {"sha": "bd99ffcee00dab9203c5531466de73573a49f526", "filename": "gcc/testsuite/gfortran.dg/typebound_operator_21.f03", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_21.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8294f55513cd9f15b6ac729265c45a7a6837898f/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_21.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_operator_21.f03?ref=8294f55513cd9f15b6ac729265c45a7a6837898f", "patch": "@@ -0,0 +1,78 @@\n+! { dg-do run }\n+!\n+! Test that pr78395 is fixed.\n+! Contributed by Chris MacMackin and Janus Weil\n+\n+module types_mod\n+  implicit none\n+\n+  type, public :: t1\n+    integer :: a\n+  contains\n+    procedure :: get_t2\n+  end type\n+\n+  type, public :: t2\n+    integer :: b\n+  contains\n+    procedure, pass(rhs) :: mul2\n+    procedure :: assign\n+    generic :: operator(*) => mul2\n+    generic :: assignment(=) => assign\n+  end type\n+\n+contains\n+\n+  function get_t2(this)\n+    class(t1), intent(in) :: this\n+    class(t2), allocatable :: get_t2\n+    type(t2), allocatable :: local\n+    allocate(local)\n+    local%b = this%a\n+    call move_alloc(local, get_t2)\n+  end function\n+\n+  function mul2(lhs, rhs)\n+    class(t2), intent(in) :: rhs\n+    integer, intent(in) :: lhs\n+    class(t2), allocatable :: mul2\n+    type(t2), allocatable :: local\n+    allocate(local)\n+    local%b = rhs%b*lhs\n+    call move_alloc(local, mul2)\n+  end function\n+\n+  subroutine assign(this, rhs)\n+    class(t2), intent(out) :: this\n+    class(t2), intent(in)  :: rhs\n+    select type(rhs)\n+    type is(t2)\n+      this%b = rhs%b\n+    class default\n+      error stop\n+    end select\n+  end subroutine\n+\n+end module\n+\n+\n+program minimal\n+  use types_mod\n+  implicit none\n+\n+  class(t1), allocatable :: v4\n+  class(t2), allocatable :: v6\n+\n+  allocate(v4, source=t1(4))\n+  allocate(v6)\n+  v6 = 3 * v4%get_t2() \n+\n+  select type (v6)\n+    type is (t2)\n+      if (v6%b /= 12) error stop\n+    class default\n+      error stop\n+  end select\n+  deallocate(v4, v6)\n+end\n+"}]}