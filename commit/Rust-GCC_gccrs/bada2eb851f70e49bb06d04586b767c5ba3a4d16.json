{"sha": "bada2eb851f70e49bb06d04586b767c5ba3a4d16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFkYTJlYjg1MWY3MGU0OWJiMDZkMDQ1ODZiNzY3YzViYTNhNGQxNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2004-11-24T16:42:41Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2004-11-24T16:42:41Z"}, "message": "rs6000.c (rs6000_return_in_memory): Allow Altivec vector modes without ALTIVEC_ABI.\n\n\t* config/rs6000/rs6000.c (rs6000_return_in_memory): Allow Altivec\n\tvector modes without ALTIVEC_ABI.  Use GCC vector instead of\n\tsynthetic vector.\n\t(rs6000_pass_by_reference): Split conditional into pieces.  Use\n\tGCC vector instead of synthetic vector.\n\nCo-Authored-By: Paolo Bonzini <bonzini@gnu.org>\n\nFrom-SVN: r91175", "tree": {"sha": "612efde6e7dfd35402a5581e3181a6c99fce0237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/612efde6e7dfd35402a5581e3181a6c99fce0237"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bada2eb851f70e49bb06d04586b767c5ba3a4d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bada2eb851f70e49bb06d04586b767c5ba3a4d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bada2eb851f70e49bb06d04586b767c5ba3a4d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bada2eb851f70e49bb06d04586b767c5ba3a4d16/comments", "author": null, "committer": null, "parents": [{"sha": "4033a1f238593d85ca3bef569214ffcbd51b26ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4033a1f238593d85ca3bef569214ffcbd51b26ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4033a1f238593d85ca3bef569214ffcbd51b26ec"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "27f0b3bf152ffc59d77828afc6f8b4dc1dc82a0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada2eb851f70e49bb06d04586b767c5ba3a4d16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada2eb851f70e49bb06d04586b767c5ba3a4d16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bada2eb851f70e49bb06d04586b767c5ba3a4d16", "patch": "@@ -1,3 +1,12 @@\n+2004-11-24  David Edelsohn  <edelsohn@gnu.org>\n+\t    Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_return_in_memory): Allow Altivec\n+\tvector modes without ALTIVEC_ABI.  Use GCC vector instead of\n+\tsynthetic vector.\n+\t(rs6000_pass_by_reference): Split conditional into pieces.  Use\n+\tGCC vector instead of synthetic vector.\n+\n 2004-11-24  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree.c (recompute_tree_invarant_for_addr_expr): The address of a"}, {"sha": "faf3bc554387da237b01133bcea2ea00a0831e2e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bada2eb851f70e49bb06d04586b767c5ba3a4d16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bada2eb851f70e49bb06d04586b767c5ba3a4d16/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=bada2eb851f70e49bb06d04586b767c5ba3a4d16", "patch": "@@ -4641,14 +4641,20 @@ rs6000_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n \t  || (unsigned HOST_WIDE_INT) int_size_in_bytes (type) > 8))\n     return true;\n \n+  /* Allow -maltivec -mabi=no-altivec without warning.  Altivec vector\n+     modes only exist for GCC vector types if -maltivec.  */\n+  if (TARGET_32BIT && !TARGET_ALTIVEC_ABI\n+      && ALTIVEC_VECTOR_MODE (TYPE_MODE (type)))\n+    return false;\n+\n   /* Return synthetic vectors in memory.  */\n   if (TREE_CODE (type) == VECTOR_TYPE\n       && int_size_in_bytes (type) > (TARGET_ALTIVEC_ABI ? 16 : 8))\n     {\n       static bool warned_for_return_big_vectors = false;\n       if (!warned_for_return_big_vectors)\n \t{\n-\t  warning (\"synthetic vector returned by reference: \"\n+\t  warning (\"GCC vector returned by reference: \"\n \t\t   \"non-standard ABI extension with no compatibility guarantee\");\n \t  warned_for_return_big_vectors = true;\n \t}\n@@ -5656,31 +5662,52 @@ function_arg_partial_nregs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n static bool\n rs6000_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n-\t\t\t  enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  tree type, bool named ATTRIBUTE_UNUSED)\n+\t\t\t  enum machine_mode mode, tree type,\n+\t\t\t  bool named ATTRIBUTE_UNUSED)\n {\n-  if ((DEFAULT_ABI == ABI_V4\n-       && ((type && AGGREGATE_TYPE_P (type))\n-\t   || mode == TFmode))\n-      || (TARGET_32BIT && !TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n-      || (type && int_size_in_bytes (type) < 0))\n+  if (DEFAULT_ABI == ABI_V4 && mode == TFmode)\n     {\n       if (TARGET_DEBUG_ARG)\n-\tfprintf (stderr, \"function_arg_pass_by_reference\\n\");\n+\tfprintf (stderr, \"function_arg_pass_by_reference: V4 long double\\n\");\n+      return 1;\n+    }\n+\n+  if (!type)\n+    return 0;\n \n+  if (DEFAULT_ABI == ABI_V4 && AGGREGATE_TYPE_P (type))\n+    {\n+      if (TARGET_DEBUG_ARG)\n+\tfprintf (stderr, \"function_arg_pass_by_reference: V4 aggregate\\n\");\n+      return 1;\n+    }\n+\n+  if (int_size_in_bytes (type) < 0)\n+    {\n+      if (TARGET_DEBUG_ARG)\n+\tfprintf (stderr, \"function_arg_pass_by_reference: variable size\\n\");\n+      return 1;\n+    }\n+\n+  /* Allow -maltivec -mabi=no-altivec without warning.  Altivec vector\n+     modes only exist for GCC vector types if -maltivec.  */\n+  if (TARGET_32BIT && !TARGET_ALTIVEC_ABI && ALTIVEC_VECTOR_MODE (mode))\n+    {\n+      if (TARGET_DEBUG_ARG)\n+\tfprintf (stderr, \"function_arg_pass_by_reference: AltiVec\\n\");\n       return 1;\n     }\n \n   /* Pass synthetic vectors in memory.  */\n-  if (type && TREE_CODE (type) == VECTOR_TYPE\n+  if (TREE_CODE (type) == VECTOR_TYPE\n       && int_size_in_bytes (type) > (TARGET_ALTIVEC_ABI ? 16 : 8))\n     {\n       static bool warned_for_pass_big_vectors = false;\n       if (TARGET_DEBUG_ARG)\n \tfprintf (stderr, \"function_arg_pass_by_reference: synthetic vector\\n\");\n       if (!warned_for_pass_big_vectors)\n \t{\n-\t  warning (\"synthetic vector passed by reference: \"\n+\t  warning (\"GCC vector passed by reference: \"\n \t\t   \"non-standard ABI extension with no compatibility guarantee\");\n \t  warned_for_pass_big_vectors = true;\n \t}"}]}