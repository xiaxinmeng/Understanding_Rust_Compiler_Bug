{"sha": "38a4d6da179a0c88cc8b697470f928488e0553ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzhhNGQ2ZGExNzlhMGM4OGNjOGI2OTc0NzBmOTI4NDg4ZTA1NTNlZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-06-22T14:25:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-06-22T14:25:52Z"}, "message": "syscall: remove Ustat\n    \n    glibc 2.28 removes ustat.h and the ustat function entirely, which\n    breaks syscall.Ustat.\n    \n    Updates golang/go#25990\n    \n    Reviewed-on: https://go-review.googlesource.com/120535\n\nFrom-SVN: r261896", "tree": {"sha": "4091ced53bb61d9a7f86a2957b2259bfdcbd56d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4091ced53bb61d9a7f86a2957b2259bfdcbd56d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38a4d6da179a0c88cc8b697470f928488e0553ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a4d6da179a0c88cc8b697470f928488e0553ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a4d6da179a0c88cc8b697470f928488e0553ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a4d6da179a0c88cc8b697470f928488e0553ee/comments", "author": null, "committer": null, "parents": [{"sha": "626d407be8579bca557958353844a87d15ef5849", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626d407be8579bca557958353844a87d15ef5849", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626d407be8579bca557958353844a87d15ef5849"}], "stats": {"total": 85, "additions": 1, "deletions": 84}, "files": [{"sha": "e62c91d949ee87ab902f9f7e08aa6a56a3e7faaa", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4d6da179a0c88cc8b697470f928488e0553ee/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4d6da179a0c88cc8b697470f928488e0553ee/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=38a4d6da179a0c88cc8b697470f928488e0553ee", "patch": "@@ -1,4 +1,4 @@\n-d3eb93c1b8990dbfd4bb660c5c8454916b62655c\n+bdead75ea02fa852a559f35b41453df0c47c9a66\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "de57d0cc837de81923c2420e51cfdfe94aad7995", "filename": "libgo/config.h.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=38a4d6da179a0c88cc8b697470f928488e0553ee", "patch": "@@ -343,9 +343,6 @@\n /* Define to 1 if you have the `unshare' function. */\n #undef HAVE_UNSHARE\n \n-/* Define to 1 if you have the <ustat.h> header file and it works. */\n-#undef HAVE_USTAT_H\n-\n /* Define to 1 if you have the `utimensat' function. */\n #undef HAVE_UTIMENSAT\n "}, {"sha": "7166f94016bc9129a3cdc32a186ecb16b9f5df2f", "filename": "libgo/configure", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=38a4d6da179a0c88cc8b697470f928488e0553ee", "patch": "@@ -14760,39 +14760,6 @@ fi\n done\n \n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether <ustat.h> can be used\" >&5\n-$as_echo_n \"checking whether <ustat.h> can be used... \" >&6; }\n-if test \"${libgo_cv_c_ustat_h+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  CFLAGS_hold=$CFLAGS\n-CFLAGS=\"$CFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE $OSCFLAGS\"\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-#include <sys/types.h>\n-#ifdef HAVE_LINUX_FILTER_H\n-#include <linux/filter.h>\n-#endif\n-#include <ustat.h>\n-\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  libgo_cv_c_ustat_h=yes\n-else\n-  libgo_cv_c_ustat_h=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-CFLAGS=$CFLAGS_hold\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_ustat_h\" >&5\n-$as_echo \"$libgo_cv_c_ustat_h\" >&6; }\n-if test $libgo_cv_c_ustat_h = yes; then\n-\n-$as_echo \"#define HAVE_USTAT_H 1\" >>confdefs.h\n-\n-fi\n-\n  if test \"$ac_cv_header_sys_mman_h\" = yes; then\n   HAVE_SYS_MMAN_H_TRUE=\n   HAVE_SYS_MMAN_H_FALSE='#'"}, {"sha": "1c192752ab207b728e2fdbf738fe7a6c89d8aa59", "filename": "libgo/configure.ac", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=38a4d6da179a0c88cc8b697470f928488e0553ee", "patch": "@@ -537,24 +537,6 @@ AC_CHECK_HEADERS([linux/filter.h linux/if_addr.h linux/if_ether.h linux/if_tun.h\n #endif\n ])\n \n-AC_CACHE_CHECK([whether <ustat.h> can be used],\n-[libgo_cv_c_ustat_h],\n-[CFLAGS_hold=$CFLAGS\n-CFLAGS=\"$CFLAGS -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE $OSCFLAGS\"\n-AC_COMPILE_IFELSE(\n-[AC_LANG_SOURCE([\n-#include <sys/types.h>\n-#ifdef HAVE_LINUX_FILTER_H\n-#include <linux/filter.h>\n-#endif\n-#include <ustat.h>\n-])], [libgo_cv_c_ustat_h=yes], [libgo_cv_c_ustat_h=no])\n-CFLAGS=$CFLAGS_hold])\n-if test $libgo_cv_c_ustat_h = yes; then\n-  AC_DEFINE(HAVE_USTAT_H, 1,\n-    [Define to 1 if you have the <ustat.h> header file and it works.])\n-fi\n-\n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n \n AC_CHECK_FUNCS(strerror_r strsignal wait4 mincore setenv unsetenv dl_iterate_phdr)"}, {"sha": "f515fce35e9ccc705baabd508cd986ea7a28188c", "filename": "libgo/go/syscall/libcall_linux_ustat.go", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626d407be8579bca557958353844a87d15ef5849/libgo%2Fgo%2Fsyscall%2Flibcall_linux_ustat.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626d407be8579bca557958353844a87d15ef5849/libgo%2Fgo%2Fsyscall%2Flibcall_linux_ustat.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_linux_ustat.go?ref=626d407be8579bca557958353844a87d15ef5849", "patch": "@@ -1,12 +0,0 @@\n-// Copyright 2015 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// GNU/Linux library ustat call.\n-// This is not supported on some kernels, such as arm64.\n-// +build !arm64,!nios2,!riscv64\n-\n-package syscall\n-\n-//sys\tUstat(dev int, ubuf *Ustat_t) (err error)\n-//ustat(dev _dev_t, ubuf *Ustat_t) _C_int"}, {"sha": "48bc71dbe986b77635072a3c467be7e20985dcaa", "filename": "libgo/mksysinfo.sh", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fmksysinfo.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fmksysinfo.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmksysinfo.sh?ref=38a4d6da179a0c88cc8b697470f928488e0553ee", "patch": "@@ -1164,20 +1164,6 @@ grep '^type _sysinfo ' gen-sysinfo.go | \\\n       -e 's/mem_unit/Unit/' \\\n     >> ${OUT}\n \n-# The ustat struct.\n-grep '^type _ustat ' gen-sysinfo.go | \\\n-    sed -e 's/_ustat/Ustat_t/' \\\n-      -e 's/f_tfree/Tfree/' \\\n-      -e 's/f_tinode/Tinoe/' \\\n-      -e 's/f_fname/Fname/' \\\n-      -e 's/f_fpack/Fpack/' \\\n-    >> ${OUT}\n-# Force it to be defined, as on some older GNU/Linux systems the\n-# header file fails when using with <linux/filter.h>.\n-if ! grep 'type _ustat ' gen-sysinfo.go >/dev/null 2>&1; then\n-  echo 'type Ustat_t struct { Tfree int32; Tinoe uint64; Fname [5+1]int8; Fpack [5+1]int8; }' >> ${OUT}\n-fi\n-\n # The utimbuf struct.\n grep '^type _utimbuf ' gen-sysinfo.go | \\\n     sed -e 's/_utimbuf/Utimbuf/' \\"}, {"sha": "4ab798c49788b51d04bc4d2ed135deab71626fe7", "filename": "libgo/sysinfo.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fsysinfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38a4d6da179a0c88cc8b697470f928488e0553ee/libgo%2Fsysinfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fsysinfo.c?ref=38a4d6da179a0c88cc8b697470f928488e0553ee", "patch": "@@ -144,9 +144,6 @@\n #if defined(HAVE_SYS_SYSINFO_H)\n #include <sys/sysinfo.h>\n #endif\n-#if defined(HAVE_USTAT_H)\n-#include <ustat.h>\n-#endif\n #if defined(HAVE_UTIME_H)\n #include <utime.h>\n #endif"}]}