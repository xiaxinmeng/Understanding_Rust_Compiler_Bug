{"sha": "31429fbc3c70716cb375dc73d1d151ed769d945e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0MjlmYmMzYzcwNzE2Y2IzNzVkYzczZDFkMTUxZWQ3NjlkOTQ1ZQ==", "commit": {"author": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-02-15T17:03:49Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2007-02-15T17:03:49Z"}, "message": "PlainSocketImpl.h: Regenerate.\n\n\t* gnu/java/net/PlainSocketImpl.h: Regenerate.\n\t* gnu/classpath/jdwp/VMVirtualMachine.h: Same.\n\t* gnu/classpath/jdwp/VMFrame.h: Same.\n\t* java/net/Socket.h: Same.\n\t* java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.h: Same.\n\nFrom-SVN: r122006", "tree": {"sha": "2875edfd5cea011a2688f3491cb30ce1430fc6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2875edfd5cea011a2688f3491cb30ce1430fc6b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31429fbc3c70716cb375dc73d1d151ed769d945e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31429fbc3c70716cb375dc73d1d151ed769d945e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31429fbc3c70716cb375dc73d1d151ed769d945e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31429fbc3c70716cb375dc73d1d151ed769d945e/comments", "author": null, "committer": null, "parents": [{"sha": "b697e623a344451a0067735dde0f7ffcdef83b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b697e623a344451a0067735dde0f7ffcdef83b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b697e623a344451a0067735dde0f7ffcdef83b5a"}], "stats": {"total": 108, "additions": 60, "deletions": 48}, "files": [{"sha": "6eeacf03ce456c46ca00499f31ce908f7b3890e9", "filename": "libjava/ChangeLog", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=31429fbc3c70716cb375dc73d1d151ed769d945e", "patch": "@@ -1,24 +1,30 @@\n+2007-02-15  David Daney  <ddaney@avtrex.com>\n+\n+\t* gnu/java/net/PlainSocketImpl.h: Regenerate.\n+\t* gnu/classpath/jdwp/VMVirtualMachine.h: Same.\n+\t* gnu/classpath/jdwp/VMFrame.h: Same.\n+\t* java/net/Socket.h: Same.\n+\t* java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.h: Same.\n+\n 2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n \n \t* defineclass.cc (_Jv_ClassReader::read_one_code_attribute):\n-    Added LocalVariableTable attribute handling.\n-    (_Jv_ClassReader::pool_Utf8_to_char_arr): New method.\n-    * jvmti.cc (_Jv_JVMTI_GetLocalVariableTable): New method.\n-    * include/java-interp.h: Added local_var_table and\n-    local_var_table_len fields to _Jv_InterpMethod.\n-    (_Jv_InterpMethod::get_local_var_table): New method.\n-    * testsuite/libjava.jvmti/interp/getlocalvartable.java: New\n-    test.\n-    * testsuite/libjava.jvmti/interp/getlocalvartable.jar: New test.\n-    * testsuite/libjava.jvmti/interp/getlocalvartable.out: Output\n-    for new test.\n-    * testsuite/libjava.jvmti/interp/getlocalvartable.h: New test.\n-    * testsuite/libjava.jvmti/interp/natgetlocalvartable.cc: New\n-    test.\n+\tAdded LocalVariableTable attribute handling.\n+\t(_Jv_ClassReader::pool_Utf8_to_char_arr): New method.\n+\t* jvmti.cc (_Jv_JVMTI_GetLocalVariableTable): New method.\n+\t* include/java-interp.h: Added local_var_table and \n+\tlocal_var_table_len fields to _Jv_InterpMethod.\n+\t(_Jv_InterpMethod::get_local_var_table): New method.\n+\t* testsuite/libjava.jvmti/interp/getlocalvartable.java: New test.\n+\t* testsuite/libjava.jvmti/interp/getlocalvartable.jar: New test.\n+\t* testsuite/libjava.jvmti/interp/getlocalvartable.out: Output\n+\tfor new test.\n+\t* testsuite/libjava.jvmti/interp/getlocalvartable.h: New test.\n+\t* testsuite/libjava.jvmti/interp/natgetlocalvartable.cc: New test.\n \n 2007-02-15  Kyle Galloway  <kgallowa@redhat.com>\n- \n-   * gnu/classpath/jdwp/natVMVirtualMachine (getFrames): Implement.\n+\n+\t* gnu/classpath/jdwp/natVMVirtualMachine (getFrames): Implement.\n \n 2007-02-13  Keith Seitz  <keiths@redhat.com>\n "}, {"sha": "8bc7ac6c6bafc3dcfebda924e2488a4be69d4f98", "filename": "libjava/gnu/classpath/jdwp/VMFrame.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMFrame.h?ref=31429fbc3c70716cb375dc73d1d151ed769d945e", "patch": "@@ -33,6 +33,7 @@ class gnu::classpath::jdwp::VMFrame : public ::java::lang::Object\n   virtual ::gnu::classpath::jdwp::util::Location * getLocation();\n   virtual ::java::lang::Object * getValue(jint);\n   virtual void setValue(jint, ::java::lang::Object *);\n+  virtual ::java::lang::Thread * getThread();\n   virtual ::java::lang::Object * getObject();\n   virtual jlong getId();\n   static const jint SIZE = 8;"}, {"sha": "421f46ae18a4ae6a423c158ff0ba5aa931a3aa6b", "filename": "libjava/gnu/classpath/jdwp/VMVirtualMachine.h", "status": "modified", "additions": 31, "deletions": 30, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2FVMVirtualMachine.h?ref=31429fbc3c70716cb375dc73d1d151ed769d945e", "patch": "@@ -1,3 +1,4 @@\n+\n // DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-\n \n #ifndef __gnu_classpath_jdwp_VMVirtualMachine__\n@@ -16,54 +17,54 @@ extern \"Java\"\n     {\n       namespace jdwp\n       {\n-        class VMVirtualMachine;\n+          class VMFrame;\n+          class VMMethod;\n+          class VMVirtualMachine;\n         namespace event\n         {\n-          class EventRequest;\n+            class EventRequest;\n         }\n         namespace util\n         {\n-          class MethodResult;\n+            class MethodResult;\n         }\n-        class VMFrame;\n-        class VMMethod;\n       }\n     }\n   }\n }\n \n class gnu::classpath::jdwp::VMVirtualMachine : public ::java::lang::Object\n {\n+\n public:\n-  VMVirtualMachine ();\n-  static void initialize ();\n-  static void suspendThread (::java::lang::Thread *);\n-  static void suspendAllThreads ();\n-  static void resumeThread (::java::lang::Thread *);\n-  static void resumeAllThreads ();\n-  static jint getSuspendCount (::java::lang::Thread *);\n-  static jint getAllLoadedClassesCount ();\n-  static ::java::util::Iterator *getAllLoadedClasses ();\n-  static jint getClassStatus (::java::lang::Class *);\n-  static JArray< ::gnu::classpath::jdwp::VMMethod *> *getAllClassMethods (::java::lang::Class *);\n-  static ::gnu::classpath::jdwp::VMMethod *getClassMethod (::java::lang::Class *, jlong);\n-  static ::java::util::ArrayList *getFrames (::java::lang::Thread *, jint, jint);\n-  static ::gnu::classpath::jdwp::VMFrame *getFrame (::java::lang::Thread *, jlong);\n-  static jint getFrameCount (::java::lang::Thread *);\n-  static jint getThreadStatus (::java::lang::Thread *);\n-  static ::java::util::ArrayList *getLoadRequests (::java::lang::ClassLoader *);\n-  static ::gnu::classpath::jdwp::util::MethodResult *executeMethod (::java::lang::Object *, ::java::lang::Thread *, ::java::lang::Class *, ::java::lang::reflect::Method *, JArray< ::java::lang::Object *> *, jboolean);\n-  static ::java::lang::String *getSourceFile (::java::lang::Class *);\n-  static void registerEvent (::gnu::classpath::jdwp::event::EventRequest *);\n-  static void unregisterEvent (::gnu::classpath::jdwp::event::EventRequest *);\n-  static void clearEvents (jbyte);\n+  VMVirtualMachine();\n+  static void initialize();\n+  static void suspendThread(::java::lang::Thread *);\n+  static void suspendAllThreads();\n+  static void resumeThread(::java::lang::Thread *);\n+  static void resumeAllThreads();\n+  static jint getSuspendCount(::java::lang::Thread *);\n+  static jint getAllLoadedClassesCount();\n+  static ::java::util::Iterator * getAllLoadedClasses();\n+  static jint getClassStatus(::java::lang::Class *);\n+  static JArray< ::gnu::classpath::jdwp::VMMethod * > * getAllClassMethods(::java::lang::Class *);\n+  static ::gnu::classpath::jdwp::VMMethod * getClassMethod(::java::lang::Class *, jlong);\n+  static ::java::util::ArrayList * getFrames(::java::lang::Thread *, jint, jint);\n+  static ::gnu::classpath::jdwp::VMFrame * getFrame(::java::lang::Thread *, jlong);\n+  static jint getFrameCount(::java::lang::Thread *);\n+  static jint getThreadStatus(::java::lang::Thread *);\n+  static ::java::util::ArrayList * getLoadRequests(::java::lang::ClassLoader *);\n+  static ::gnu::classpath::jdwp::util::MethodResult * executeMethod(::java::lang::Object *, ::java::lang::Thread *, ::java::lang::Class *, ::java::lang::reflect::Method *, JArray< ::java::lang::Object * > *, jboolean);\n+  static ::java::lang::String * getSourceFile(::java::lang::Class *);\n+  static void registerEvent(::gnu::classpath::jdwp::event::EventRequest *);\n+  static void unregisterEvent(::gnu::classpath::jdwp::event::EventRequest *);\n+  static void clearEvents(jbyte);\n private:\n-  static ::java::util::Hashtable *_jdwp_suspend_counts;\n+  static ::java::util::Hashtable * _jdwp_suspend_counts;\n public: // actually package-private\n   static ::java::util::Hashtable * _stepping_threads;\n public:\n-\n   static ::java::lang::Class class$;\n };\n \n-#endif /* __gnu_classpath_jdwp_VMVirtualMachine__ */\n+#endif // __gnu_classpath_jdwp_VMVirtualMachine__"}, {"sha": "7872ac24a726a8809dfc5f0fd65334df1830697c", "filename": "libjava/gnu/java/net/PlainSocketImpl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FPlainSocketImpl.h?ref=31429fbc3c70716cb375dc73d1d151ed769d945e", "patch": "@@ -24,6 +24,7 @@ extern \"Java\"\n     namespace net\n     {\n         class InetAddress;\n+        class InetSocketAddress;\n         class SocketAddress;\n         class SocketImpl;\n     }\n@@ -59,6 +60,9 @@ class gnu::java::net::PlainSocketImpl : public ::java::net::SocketImpl\n   jint available();\n   void close();\n   void sendUrgentData(jint);\n+public:\n+  ::java::net::InetSocketAddress * getLocalAddress();\n+public: // actually protected\n   ::java::io::InputStream * getInputStream();\n   ::java::io::OutputStream * getOutputStream();\n public: // actually package-private\n@@ -79,6 +83,7 @@ class gnu::java::net::PlainSocketImpl : public ::java::net::SocketImpl\n   jint __attribute__((aligned(__alignof__( ::java::net::SocketImpl)))) native_fd;\n   jint timeout;\n   ::java::net::InetAddress * localAddress;\n+  ::java::net::InetSocketAddress * localSocketAddress;\n private:\n   ::java::io::InputStream * in;\n   ::java::io::OutputStream * out;"}, {"sha": "bb0bf38b000779c124664b76c70c1b9ae1f75194", "filename": "libjava/java/net/Socket.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fjava%2Fnet%2FSocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fjava%2Fnet%2FSocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.h?ref=31429fbc3c70716cb375dc73d1d151ed769d945e", "patch": "@@ -91,7 +91,6 @@ class java::net::Socket : public ::java::lang::Object\n public: // actually package-private\n   static ::java::net::SocketImplFactory * factory;\n   ::java::net::SocketImpl * __attribute__((aligned(__alignof__( ::java::lang::Object)))) impl;\n-  jboolean implCreated;\n   jboolean bound;\n private:\n   jboolean inputShutdown;"}, {"sha": "24daec69337bc8d50dc842c68ac8bb3de5ef2a04", "filename": "libjava/java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fjava%2Futil%2FCollections%24UnmodifiableMap%24UnmodifiableEntrySet.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31429fbc3c70716cb375dc73d1d151ed769d945e/libjava%2Fjava%2Futil%2FCollections%24UnmodifiableMap%24UnmodifiableEntrySet.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FCollections%24UnmodifiableMap%24UnmodifiableEntrySet.h?ref=31429fbc3c70716cb375dc73d1d151ed769d945e", "patch": "@@ -18,7 +18,7 @@ class java::util::Collections$UnmodifiableMap$UnmodifiableEntrySet : public ::ja\n public:\n   ::java::util::Iterator * iterator();\n   JArray< ::java::util::Map$Entry * > * target$toArray();\n-  JArray< ::java::util::Map$Entry * > * toArray(JArray< ::java::util::Map$Entry * > *);\n+  JArray< ::java::lang::Object * > * toArray(JArray< ::java::lang::Object * > *);\n   JArray< ::java::lang::Object * > * toArray();\n private:\n   static const jlong serialVersionUID = 7854390611657943733LL;"}]}