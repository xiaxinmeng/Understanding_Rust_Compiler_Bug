{"sha": "bf862c537bfd76233e3938cb3811f0fa2d27de25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4NjJjNTM3YmZkNzYyMzNlMzkzOGNiMzgxMWYwZmEyZDI3ZGUyNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:10:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:10:18Z"}, "message": "[16/77] Add scalar_int_mode_pod\n\nThis patch adds a POD class for scalar integers, as an instance\nof a new pod_mode template.  Later patches will use pod_mode in\nsituations that really do need to be POD; this patch is simply\nusing PODs to remove load-time initialisation.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* coretypes.h (pod_mode): New type.\n\t(scalar_int_mode_pod): New typedef.\n\t* machmode.h (pod_mode): New class.\n\t(int_n_data_t::m): Change type to scalar_int_mode_pod.\n\t* genmodes.c (emit_mode_int_n): Update accordingly.\n\t* lower-subreg.h (target_lower_subreg): Change type to\n\tscalar_int_mode_pod.\n\t* gdbhooks.py (build_pretty_printer): Handle pod_mode and\n\tscalar_int_mode_pod.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251468", "tree": {"sha": "5fd8f2ebbbbf5d9f4a23b09cb8fb7bf2880aed0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd8f2ebbbbf5d9f4a23b09cb8fb7bf2880aed0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf862c537bfd76233e3938cb3811f0fa2d27de25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf862c537bfd76233e3938cb3811f0fa2d27de25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf862c537bfd76233e3938cb3811f0fa2d27de25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf862c537bfd76233e3938cb3811f0fa2d27de25/comments", "author": null, "committer": null, "parents": [{"sha": "501623d42404843e3b737db24bbd575db937ce1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501623d42404843e3b737db24bbd575db937ce1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501623d42404843e3b737db24bbd575db937ce1d"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "d7e70be58d6aa6ba7aa4dc594df646ca91e43c22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf862c537bfd76233e3938cb3811f0fa2d27de25", "patch": "@@ -1,3 +1,17 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* coretypes.h (pod_mode): New type.\n+\t(scalar_int_mode_pod): New typedef.\n+\t* machmode.h (pod_mode): New class.\n+\t(int_n_data_t::m): Change type to scalar_int_mode_pod.\n+\t* genmodes.c (emit_mode_int_n): Update accordingly.\n+\t* lower-subreg.h (target_lower_subreg): Change type to\n+\tscalar_int_mode_pod.\n+\t* gdbhooks.py (build_pretty_printer): Handle pod_mode and\n+\tscalar_int_mode_pod.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "37c836d87fa245c359f54322aa7da5d2e07b1f67", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=bf862c537bfd76233e3938cb3811f0fa2d27de25", "patch": "@@ -60,6 +60,8 @@ class scalar_float_mode;\n template<typename> class opt_mode;\n typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;\n typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;\n+template<typename> class pod_mode;\n+typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;\n \n /* Subclasses of rtx_def, using indentation to show the class\n    hierarchy, along with the relevant invariant."}, {"sha": "678698df9c83e97b9b0cccdaa3f3ab00d185447b", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=bf862c537bfd76233e3938cb3811f0fa2d27de25", "patch": "@@ -545,6 +545,10 @@ def build_pretty_printer():\n     pp.add_printer_for_types(['opt_scalar_int_mode',\n                               'opt_scalar_float_mode'],\n                              'opt_mode', OptMachineModePrinter)\n+    pp.add_printer_for_regex(r'pod_mode<(\\S+)>',\n+                             'pod_mode', MachineModePrinter)\n+    pp.add_printer_for_types(['scalar_int_mode_pod'],\n+                             'pod_mode', MachineModePrinter)\n     for mode in 'scalar_int_mode', 'scalar_float_mode':\n         pp.add_printer_for_types([mode], mode, MachineModePrinter)\n "}, {"sha": "3eb9b44c74b97f0ac218a6cb3bacb608ccdf12f0", "filename": "gcc/genmodes.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=bf862c537bfd76233e3938cb3811f0fa2d27de25", "patch": "@@ -1799,7 +1799,7 @@ emit_mode_int_n (void)\n       m = mode_sort[i];\n       printf(\" {\\n\");\n       tagged_printf (\"%u\", m->int_n, m->name);\n-      printf (\"E_%smode,\", m->name);\n+      printf (\"{ E_%smode },\", m->name);\n       printf(\" },\\n\");\n     }\n "}, {"sha": "69e8c29173a486bfeeb21bea6265b4e03f81e274", "filename": "gcc/lower-subreg.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Flower-subreg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Flower-subreg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.h?ref=bf862c537bfd76233e3938cb3811f0fa2d27de25", "patch": "@@ -43,7 +43,7 @@ struct lower_subreg_choices {\n /* Target-specific information for the subreg lowering pass.  */\n struct target_lower_subreg {\n   /* An integer mode that is twice as wide as word_mode.  */\n-  machine_mode x_twice_word_mode;\n+  scalar_int_mode_pod x_twice_word_mode;\n \n   /* What we have decided to do when optimizing for size (index 0)\n      and speed (index 1).  */"}, {"sha": "25e72a83330a1e2a6b148c8f9f49d75d9fc37de0", "filename": "gcc/machmode.h", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf862c537bfd76233e3938cb3811f0fa2d27de25/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=bf862c537bfd76233e3938cb3811f0fa2d27de25", "patch": "@@ -293,6 +293,19 @@ opt_mode<T>::exists (U *mode) const\n   return false;\n }\n \n+/* A POD version of mode class T.  */\n+\n+template<typename T>\n+struct pod_mode\n+{\n+  typedef typename mode_traits<T>::from_int from_int;\n+\n+  machine_mode m_mode;\n+  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+  ALWAYS_INLINE operator T () const { return from_int (m_mode); }\n+  ALWAYS_INLINE pod_mode &operator = (const T &m) { m_mode = m; return *this; }\n+};\n+\n /* Return true if mode M has type T.  */\n \n template<typename T>\n@@ -647,7 +660,7 @@ extern void init_adjust_machine_modes (void);\n struct int_n_data_t {\n   /* These parts are initailized by genmodes output */\n   unsigned int bitsize;\n-  machine_mode m;\n+  scalar_int_mode_pod m;\n   /* RID_* is RID_INTN_BASE + index into this array */\n };\n "}]}