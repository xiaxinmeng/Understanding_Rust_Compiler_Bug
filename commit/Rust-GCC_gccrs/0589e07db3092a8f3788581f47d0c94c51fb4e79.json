{"sha": "0589e07db3092a8f3788581f47d0c94c51fb4e79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4OWUwN2RiMzA5MmE4ZjM3ODg1ODFmNDdkMGM5NGM1MWZiNGU3OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-02T18:05:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-08-02T18:05:44Z"}, "message": "i386.c (ix86_expand_fp_compare): Use const0_rtx instead of GEN_INT (0x00) and const1_rtx instead of GEN_INT (0x01).\n\n\t* config/i386/i386.c (ix86_expand_fp_compare): Use const0_rtx instead\n\tof GEN_INT (0x00) and const1_rtx instead of GEN_INT (0x01).\n\t(ix86_split_ashl): Ditto.\n\t(ix86_expand_vector_init_one_nonzero): Ditto.\n\t(ix86_expand_vector_set): Ditto.\n\t(ix86_expand_reduc_v4sf): Ditto.\n\nFrom-SVN: r150355", "tree": {"sha": "6e82660eac22b3f4297f1c3798569cead3e58bac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e82660eac22b3f4297f1c3798569cead3e58bac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0589e07db3092a8f3788581f47d0c94c51fb4e79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0589e07db3092a8f3788581f47d0c94c51fb4e79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0589e07db3092a8f3788581f47d0c94c51fb4e79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0589e07db3092a8f3788581f47d0c94c51fb4e79/comments", "author": null, "committer": null, "parents": [{"sha": "f698757bbfd0de05ac67f765a4c3e63341a6c05c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f698757bbfd0de05ac67f765a4c3e63341a6c05c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f698757bbfd0de05ac67f765a4c3e63341a6c05c"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "0c3300f71149d54bae158f8820df90a61f8bdcef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0589e07db3092a8f3788581f47d0c94c51fb4e79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0589e07db3092a8f3788581f47d0c94c51fb4e79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0589e07db3092a8f3788581f47d0c94c51fb4e79", "patch": "@@ -1,4 +1,13 @@\n-2009-08-02  Paolo Bonzini  <bonzini@gnu.org\n+2009-08-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_fp_compare): Use const0_rtx instead\n+\tof GEN_INT (0x00) and const1_rtx instead of GEN_INT (0x01).\n+\t(ix86_split_ashl): Ditto.\n+\t(ix86_expand_vector_init_one_nonzero): Ditto.\n+\t(ix86_expand_vector_set): Ditto.\n+\t(ix86_expand_reduc_v4sf): Ditto.\n+\n+2009-08-02  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* explow.c (promote_function_mode): Remove assert.\n \t* config/sh/sh.c (sh_promote_function_mode): Declare.\n@@ -109,8 +118,8 @@\n \t(TARGET_PROMOTE_FUNCTION_ARGS): Remove.\n \n \t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Move...\n-\t* config/arm/arm.c (arm_promote_function_mode): ... here, without complex\n-\ttype handling.\n+\t* config/arm/arm.c (arm_promote_function_mode): ... here, without\n+\tcomplex type handling.\n \t(TARGET_PROMOTE_FUNCTION_MODE): Define.\n \t(TARGET_PROMOTE_FUNCTION_ARGS, TARGET_PROMOTE_FUNCTION_RETURN): Remove.\n "}, {"sha": "ff6373ef00e3ec211a824c177fcecc3ce8a70085", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0589e07db3092a8f3788581f47d0c94c51fb4e79/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0589e07db3092a8f3788581f47d0c94c51fb4e79/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0589e07db3092a8f3788581f47d0c94c51fb4e79", "patch": "@@ -14814,13 +14814,13 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t  if (code == LT && TARGET_IEEE_FP)\n \t    {\n \t      emit_insn (gen_andqi_ext_0 (scratch, scratch, GEN_INT (0x45)));\n-\t      emit_insn (gen_cmpqi_ext_3 (scratch, GEN_INT (0x01)));\n+\t      emit_insn (gen_cmpqi_ext_3 (scratch, const1_rtx));\n \t      intcmp_mode = CCmode;\n \t      code = EQ;\n \t    }\n \t  else\n \t    {\n-\t      emit_insn (gen_testqi_ext_ccno_0 (scratch, GEN_INT (0x01)));\n+\t      emit_insn (gen_testqi_ext_ccno_0 (scratch, const1_rtx));\n \t      code = NE;\n \t    }\n \t  break;\n@@ -14834,8 +14834,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t  else\n \t    {\n \t      emit_insn (gen_andqi_ext_0 (scratch, scratch, GEN_INT (0x45)));\n-\t      emit_insn (gen_xorqi_cc_ext_1 (scratch, scratch,\n-\t\t\t\t\t     GEN_INT (0x01)));\n+\t      emit_insn (gen_xorqi_cc_ext_1 (scratch, scratch, const1_rtx));\n \t      code = NE;\n \t    }\n \t  break;\n@@ -14868,7 +14867,6 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n \t    {\n \t      emit_insn (gen_testqi_ext_ccno_0 (scratch, GEN_INT (0x40)));\n \t      code = NE;\n-\t      break;\n \t    }\n \t  break;\n \tcase NE:\n@@ -17028,14 +17026,15 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \n \t  emit_insn ((mode == DImode\n \t\t      ? gen_lshrsi3\n-\t\t      : gen_lshrdi3) (high[0], high[0], GEN_INT (mode == DImode ? 5 : 6)));\n+\t\t      : gen_lshrdi3) (high[0], high[0],\n+\t\t\t\t      GEN_INT (mode == DImode ? 5 : 6)));\n \t  emit_insn ((mode == DImode\n \t\t      ? gen_andsi3\n-\t\t      : gen_anddi3) (high[0], high[0], GEN_INT (1)));\n+\t\t      : gen_anddi3) (high[0], high[0], const1_rtx));\n \t  emit_move_insn (low[0], high[0]);\n \t  emit_insn ((mode == DImode\n \t\t      ? gen_xorsi3\n-\t\t      : gen_xordi3) (low[0], low[0], GEN_INT (1)));\n+\t\t      : gen_xordi3) (low[0], low[0], const1_rtx));\n \t}\n \n       emit_insn ((mode == DImode\n@@ -28105,7 +28104,7 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, enum machine_mode mode,\n \t  if (mode != V4SFmode && TARGET_SSE2)\n \t    {\n \t      emit_insn (gen_sse2_pshufd_1 (new_target, new_target,\n-\t\t\t\t\t    GEN_INT (1),\n+\t\t\t\t\t    const1_rtx,\n \t\t\t\t\t    GEN_INT (one_var == 1 ? 0 : 1),\n \t\t\t\t\t    GEN_INT (one_var == 2 ? 0 : 1),\n \t\t\t\t\t    GEN_INT (one_var == 3 ? 0 : 1)));\n@@ -28125,7 +28124,7 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, enum machine_mode mode,\n \t    tmp = new_target;\n \n \t  emit_insn (gen_sse_shufps_v4sf (tmp, tmp, tmp,\n-\t\t\t\t       GEN_INT (1),\n+\t\t\t\t       const1_rtx,\n \t\t\t\t       GEN_INT (one_var == 1 ? 0 : 1),\n \t\t\t\t       GEN_INT (one_var == 2 ? 0+4 : 1+4),\n \t\t\t\t       GEN_INT (one_var == 3 ? 0+4 : 1+4)));\n@@ -28788,8 +28787,8 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  ix86_expand_vector_set (false, target, val, 0);\n \t  /* target = A X C D  */\n \t  emit_insn (gen_sse_shufps_v4sf (target, target, tmp,\n-\t\t\t\t       GEN_INT (1), GEN_INT (0),\n-\t\t\t\t       GEN_INT (2+4), GEN_INT (3+4)));\n+\t\t\t\t\t  const1_rtx, const0_rtx,\n+\t\t\t\t\t  GEN_INT (2+4), GEN_INT (3+4)));\n \t  return;\n \n \tcase 2:\n@@ -28799,8 +28798,8 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  ix86_expand_vector_set (false, tmp, val, 0);\n \t  /* target = A B X D */\n \t  emit_insn (gen_sse_shufps_v4sf (target, target, tmp,\n-\t\t\t\t       GEN_INT (0), GEN_INT (1),\n-\t\t\t\t       GEN_INT (0+4), GEN_INT (3+4)));\n+\t\t\t\t\t  const0_rtx, const1_rtx,\n+\t\t\t\t\t  GEN_INT (0+4), GEN_INT (3+4)));\n \t  return;\n \n \tcase 3:\n@@ -28810,8 +28809,8 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  ix86_expand_vector_set (false, tmp, val, 0);\n \t  /* target = A B X D */\n \t  emit_insn (gen_sse_shufps_v4sf (target, target, tmp,\n-\t\t\t\t       GEN_INT (0), GEN_INT (1),\n-\t\t\t\t       GEN_INT (2+4), GEN_INT (0+4)));\n+\t\t\t\t\t  const0_rtx, const1_rtx,\n+\t\t\t\t\t  GEN_INT (2+4), GEN_INT (0+4)));\n \t  return;\n \n \tdefault:\n@@ -29104,8 +29103,8 @@ ix86_expand_reduc_v4sf (rtx (*fn) (rtx, rtx, rtx), rtx dest, rtx in)\n   emit_insn (fn (tmp2, tmp1, in));\n \n   emit_insn (gen_sse_shufps_v4sf (tmp3, tmp2, tmp2,\n-\t\t\t       GEN_INT (1), GEN_INT (1),\n-\t\t\t       GEN_INT (1+4), GEN_INT (1+4)));\n+\t\t\t\t  const1_rtx, const1_rtx,\n+\t\t\t\t  GEN_INT (1+4), GEN_INT (1+4)));\n   emit_insn (fn (dest, tmp2, tmp3));\n }\n \f"}]}