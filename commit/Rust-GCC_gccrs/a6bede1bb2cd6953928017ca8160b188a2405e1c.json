{"sha": "a6bede1bb2cd6953928017ca8160b188a2405e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiZWRlMWJiMmNkNjk1MzkyODAxN2NhODE2MGIxODhhMjQwNWUxYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-19T23:44:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-19T23:44:39Z"}, "message": "Fix handling of mutually recursive named types.\n\nFrom-SVN: r178989", "tree": {"sha": "0db46268976393f58e9caf0817dc4353300e2189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0db46268976393f58e9caf0817dc4353300e2189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6bede1bb2cd6953928017ca8160b188a2405e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bede1bb2cd6953928017ca8160b188a2405e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bede1bb2cd6953928017ca8160b188a2405e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bede1bb2cd6953928017ca8160b188a2405e1c/comments", "author": null, "committer": null, "parents": [{"sha": "4ec5affac92bd2e50aeae34fa9beceaf398a7377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ec5affac92bd2e50aeae34fa9beceaf398a7377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ec5affac92bd2e50aeae34fa9beceaf398a7377"}], "stats": {"total": 48, "additions": 25, "deletions": 23}, "files": [{"sha": "fa3332ad55674ba586c541c85ca8f58b50e6558c", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bede1bb2cd6953928017ca8160b188a2405e1c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bede1bb2cd6953928017ca8160b188a2405e1c/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=a6bede1bb2cd6953928017ca8160b188a2405e1c", "patch": "@@ -6251,22 +6251,22 @@ Named_type::message_name() const\n Type*\n Named_type::named_base()\n {\n-  if (this->seen_ > 0)\n+  if (this->seen_)\n     return this;\n-  ++this->seen_;\n+  this->seen_ = true;\n   Type* ret = this->type_->base();\n-  --this->seen_;\n+  this->seen_ = false;\n   return ret;\n }\n \n const Type*\n Named_type::named_base() const\n {\n-  if (this->seen_ > 0)\n+  if (this->seen_)\n     return this;\n-  ++this->seen_;\n+  this->seen_ = true;\n   const Type* ret = this->type_->base();\n-  --this->seen_;\n+  this->seen_ = false;\n   return ret;\n }\n \n@@ -6276,11 +6276,11 @@ Named_type::named_base() const\n bool\n Named_type::is_named_error_type() const\n {\n-  if (this->seen_ > 0)\n+  if (this->seen_)\n     return false;\n-  ++this->seen_;\n+  this->seen_ = true;\n   bool ret = this->type_->is_error_type();\n-  --this->seen_;\n+  this->seen_ = false;\n   return ret;\n }\n \n@@ -6430,11 +6430,11 @@ Named_type::interface_method_table(Gogo* gogo, const Interface_type* interface,\n bool\n Named_type::named_type_has_hidden_fields(std::string* reason) const\n {\n-  if (this->seen_ > 0)\n+  if (this->seen_)\n     return false;\n-  ++this->seen_;\n+  this->seen_ = true;\n   bool ret = this->type_->has_hidden_fields(this, reason);\n-  --this->seen_;\n+  this->seen_ = false;\n   return ret;\n }\n \n@@ -6600,11 +6600,11 @@ Named_type::do_verify()\n bool\n Named_type::do_has_pointer() const\n {\n-  if (this->seen_ > 0)\n+  if (this->seen_)\n     return false;\n-  ++this->seen_;\n+  this->seen_ = true;\n   bool ret = this->type_->has_pointer();\n-  --this->seen_;\n+  this->seen_ = false;\n   return ret;\n }\n \n@@ -6906,14 +6906,14 @@ Named_type::do_get_backend(Gogo* gogo)\n     case TYPE_FUNCTION:\n       // Don't build a circular data structure.  GENERIC can't handle\n       // it.\n-      if (this->seen_ > 0)\n+      if (this->seen_in_get_backend_)\n \t{\n \t  this->is_circular_ = true;\n \t  return gogo->backend()->circular_pointer_type(bt, true);\n \t}\n-      ++this->seen_;\n+      this->seen_in_get_backend_ = true;\n       bt1 = Type::get_named_base_btype(gogo, base);\n-      --this->seen_;\n+      this->seen_in_get_backend_ = false;\n       if (this->is_circular_)\n \tbt1 = gogo->backend()->circular_pointer_type(bt, true);\n       if (!gogo->backend()->set_placeholder_function_type(bt, bt1))\n@@ -6923,14 +6923,14 @@ Named_type::do_get_backend(Gogo* gogo)\n     case TYPE_POINTER:\n       // Don't build a circular data structure. GENERIC can't handle\n       // it.\n-      if (this->seen_ > 0)\n+      if (this->seen_in_get_backend_)\n \t{\n \t  this->is_circular_ = true;\n \t  return gogo->backend()->circular_pointer_type(bt, false);\n \t}\n-      ++this->seen_;\n+      this->seen_in_get_backend_ = true;\n       bt1 = Type::get_named_base_btype(gogo, base);\n-      --this->seen_;\n+      this->seen_in_get_backend_ = false;\n       if (this->is_circular_)\n \tbt1 = gogo->backend()->circular_pointer_type(bt, false);\n       if (!gogo->backend()->set_placeholder_pointer_type(bt, bt1))"}, {"sha": "cb3fcaa7154fe1def53caf539b1744463b32fde4", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bede1bb2cd6953928017ca8160b188a2405e1c/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bede1bb2cd6953928017ca8160b188a2405e1c/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=a6bede1bb2cd6953928017ca8160b188a2405e1c", "patch": "@@ -2387,7 +2387,7 @@ class Named_type : public Type\n       interface_method_tables_(NULL), pointer_interface_method_tables_(NULL),\n       location_(location), named_btype_(NULL), dependencies_(),\n       is_visible_(true), is_error_(false), is_converted_(false),\n-      is_circular_(false), seen_(0)\n+      is_circular_(false), seen_(false), seen_in_get_backend_(false)\n   { }\n \n   // Return the associated Named_object.  This holds the actual name.\n@@ -2647,7 +2647,9 @@ class Named_type : public Type\n   // used to prevent infinite recursion when a type refers to itself.\n   // This is mutable because it is always reset to false when the\n   // function exits.\n-  mutable int seen_;\n+  mutable bool seen_;\n+  // Like seen_, but used only by do_get_backend.\n+  bool seen_in_get_backend_;\n };\n \n // A forward declaration.  This handles a type which has been declared"}]}