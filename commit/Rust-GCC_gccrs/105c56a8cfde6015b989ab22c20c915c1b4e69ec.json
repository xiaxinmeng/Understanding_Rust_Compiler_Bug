{"sha": "105c56a8cfde6015b989ab22c20c915c1b4e69ec", "node_id": "C_kwDOANBUbNoAKDEwNWM1NmE4Y2ZkZTYwMTViOTg5YWIyMmMyMGM5MTVjMWI0ZTY5ZWM", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-13T01:59:13Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-05-17T01:30:22Z"}, "message": "Optimize vpermtiw/b to vpunpcklqdq for certain cases.\n\nAssembly Optimization like:\n-       vmovq   %xmm0, %xmm2\n-       vmovdqa .LC0(%rip), %xmm0\n        vmovq   %xmm1, %xmm1\n-       vpermi2w        %xmm1, %xmm2, %xmm0\n+       vmovq   %xmm0, %xmm0\n+       vpunpcklqdq     %xmm1, %xmm0, %xmm0\n\n...\n\n-.LC0:\n-       .value  0\n-       .value  1\n-       .value  2\n-       .value  3\n-       .value  8\n-       .value  9\n-       .value  10\n-       .value  11\n\ngcc/ChangeLog:\n\n\tPR target/105033\n\t* config/i386/sse.md (*vec_concatv4si): Extend to ..\n\t(*vec_concat<mode>): .. V16QI and V8HImode.\n\t(*vec_concatv16qi_permt2): New pre_reload define_insn_and_split.\n\t(*vec_concatv8hi_permt2): Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105033.c: New test.", "tree": {"sha": "c2d81cf0a848f12031431939e00e20ec56a193ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d81cf0a848f12031431939e00e20ec56a193ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/105c56a8cfde6015b989ab22c20c915c1b4e69ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105c56a8cfde6015b989ab22c20c915c1b4e69ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/105c56a8cfde6015b989ab22c20c915c1b4e69ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/105c56a8cfde6015b989ab22c20c915c1b4e69ec/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fba0608d12a209a5d76d65bcb1dec1c07bc33e9"}], "stats": {"total": 91, "additions": 86, "deletions": 5}, "files": [{"sha": "873d048acfe4f851d58dab7846960db8229e6dd7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c56a8cfde6015b989ab22c20c915c1b4e69ec/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c56a8cfde6015b989ab22c20c915c1b4e69ec/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=105c56a8cfde6015b989ab22c20c915c1b4e69ec", "patch": "@@ -19644,11 +19644,11 @@\n    (set_attr \"type\" \"sselog,ssemov,sselog,ssemov,mmxcvt,mmxmov\")\n    (set_attr \"mode\" \"TI,TI,V4SF,SF,DI,DI\")])\n \n-(define_insn \"*vec_concatv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"       \"=x,v,x,x,v\")\n-\t(vec_concat:V4SI\n-\t  (match_operand:V2SI 1 \"register_operand\"     \" 0,v,0,0,v\")\n-\t  (match_operand:V2SI 2 \"nonimmediate_operand\" \" x,v,x,m,m\")))]\n+(define_insn \"*vec_concat<mode>\"\n+  [(set (match_operand:VI124_128 0 \"register_operand\"       \"=x,v,x,x,v\")\n+\t(vec_concat:VI124_128\n+\t  (match_operand:<ssehalfvecmode> 1 \"register_operand\"     \" 0,v,0,0,v\")\n+\t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \" x,v,x,m,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    punpcklqdq\\t{%2, %0|%0, %2}\n@@ -19661,6 +19661,60 @@\n    (set_attr \"prefix\" \"orig,maybe_evex,orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI,TI,V4SF,V2SF,V2SF\")])\n \n+(define_insn_and_split \"*vec_concatv16qi_permt2\"\n+  [(set (match_operand:V16QI 0 \"register_operand\")\n+\t(unspec:V16QI\n+\t  [(const_vector:V16QI [(const_int 0) (const_int 1)\n+\t\t\t\t(const_int 2) (const_int 3)\n+\t\t\t\t(const_int 4) (const_int 5)\n+\t\t\t\t(const_int 6) (const_int 7)\n+\t\t\t\t(const_int 16) (const_int 17)\n+\t\t\t\t(const_int 18) (const_int 19)\n+\t\t\t\t(const_int 20) (const_int 21)\n+\t\t\t\t(const_int 22) (const_int 23)])\n+\t   (match_operand:V16QI 1 \"register_operand\")\n+\t   (match_operand:V16QI 2 \"nonimmediate_operand\")]\n+\t  UNSPEC_VPERMT2))]\n+  \"TARGET_AVX512VL && TARGET_AVX512VBMI\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_concat:V16QI (match_dup 1) (match_dup 2)))]\n+{\n+  operands[1] = lowpart_subreg (V8QImode,\n+\t\t\t\tforce_reg (V16QImode, operands[1]),\n+\t\t\t\tV16QImode);\n+  if (!MEM_P (operands[2]))\n+    operands[2] = force_reg (V16QImode, operands[2]);\n+  operands[2] = lowpart_subreg (V8QImode, operands[2], V16QImode);\n+})\n+\n+(define_insn_and_split \"*vec_concatv8hi_permt2\"\n+  [(set (match_operand:V8HI 0 \"register_operand\")\n+\t(unspec:V8HI\n+\t  [(const_vector:V8HI [(const_int 0) (const_int 1)\n+\t\t\t\t(const_int 2) (const_int 3)\n+\t\t\t\t(const_int 8) (const_int 9)\n+\t\t\t\t(const_int 10) (const_int 11)])\n+\t   (match_operand:V8HI 1 \"register_operand\")\n+\t   (match_operand:V8HI 2 \"nonimmediate_operand\")]\n+\t  UNSPEC_VPERMT2))]\n+  \"TARGET_AVX512VL && TARGET_AVX512BW\n+   && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(vec_concat:V8HI (match_dup 1) (match_dup 2)))]\n+{\n+  operands[1] = lowpart_subreg (V4HImode,\n+\t\t\t\tforce_reg (V8HImode, operands[1]),\n+\t\t\t\tV8HImode);\n+  if (!MEM_P (operands[2]))\n+    operands[2] = force_reg (V8HImode, operands[2]);\n+  operands[2] = lowpart_subreg (V4HImode, operands[2], V8HImode);\n+})\n+\n (define_insn \"*vec_concat<mode>_0\"\n   [(set (match_operand:VI124_128 0 \"register_operand\"       \"=v,x\")\n \t(vec_concat:VI124_128"}, {"sha": "ab05e3b3bc859234ea95e4d38d93b10632ee85ec", "filename": "gcc/testsuite/gcc.target/i386/pr105033.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/105c56a8cfde6015b989ab22c20c915c1b4e69ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105033.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/105c56a8cfde6015b989ab22c20c915c1b4e69ec/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105033.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105033.c?ref=105c56a8cfde6015b989ab22c20c915c1b4e69ec", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=sapphirerapids -O2\" } */\n+/* { dg-final { scan-assembler-times {vpunpcklqdq[ \\t]+} 3 } } */\n+/* { dg-final { scan-assembler-not {vpermi2[wb][ \\t]+} } } */\n+\n+typedef _Float16 v8hf __attribute__((vector_size (16)));\n+typedef _Float16 v4hf __attribute__((vector_size (8)));\n+typedef short v8hi __attribute__((vector_size (16)));\n+typedef short v4hi __attribute__((vector_size (8)));\n+typedef char v16qi __attribute__((vector_size (16)));\n+typedef char v8qi __attribute__((vector_size (8)));\n+\n+v8hf foo (v4hf a, v4hf b)\n+{\n+  return __builtin_shufflevector (a, b, 0, 1, 2, 3, 4, 5, 6, 7);\n+}\n+\n+v8hi foo2 (v4hi a, v4hi b)\n+{\n+  return __builtin_shufflevector (a, b, 0, 1, 2, 3, 4, 5, 6, 7);\n+}\n+\n+v16qi foo3 (v8qi a, v8qi b)\n+{\n+  return __builtin_shufflevector (a, b, 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t  8, 9, 10, 11, 12, 13, 14, 15);\n+}"}]}