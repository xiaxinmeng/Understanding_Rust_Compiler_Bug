{"sha": "c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "node_id": "C_kwDOANBUbNoAKGM1ZThjNmMxOTNkOWExYWI4MGVmMWEwNWU1MTU4ZGRmMzVkNTQwMDk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T13:49:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-16T13:49:47Z"}, "message": "c++: Alignment changes to layout compatibility/common initial sequence - DR2583\n\nWhen trying to figure out what to do about alignment,\nlayout_compatible_type_p returns false if TYPE_ALIGN on\nENUMERAL_TYPE/CLASS_TYPE_P (but not scalar types?) differ, or if members\ndon't have the same positions.\n\nWhat is in DR2583 doesn't say anything like that though, on the other side\nit says that if the corresponding entities don't have the same alignment\nrequirements, they aren't part of the common initial sequence.\n\nSo, my understanding of this is we shouldn't check TYPE_ALIGN in\nlayout_compatible_type_p, but instead DECL_ALIGN in\nnext_common_initial_seqence.\n\n2022-11-16  Jakub Jelinek  <jakub@redhat.com>\n\n\t* typeck.cc (next_common_initial_sequence): Return false members have\n\tdifferent DECL_ALIGN.\n\t(layout_compatible_type_p): Don't test TYPE_ALIGN of ENUMERAL_TYPE\n\tor CLASS_TYPE_P.\n\n\t* g++.dg/cpp2a/is-layout-compatible3.C: Expect enums with different\n\talignas to be layout compatible, while classes with different\n\talignas on members layout incompatible.\n\t* g++.dg/DRs/dr2583.C: New test.", "tree": {"sha": "e8774dbe7aa3dbd2ae1b59534a4f6a5fdcf6435d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8774dbe7aa3dbd2ae1b59534a4f6a5fdcf6435d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e2c5510e001e5ccbde9e4b7df757e2bba2fdb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e2c5510e001e5ccbde9e4b7df757e2bba2fdb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e2c5510e001e5ccbde9e4b7df757e2bba2fdb00"}], "stats": {"total": 55, "additions": 50, "deletions": 5}, "files": [{"sha": "281d281629b372a73425015c4c784dfd427d2fea", "filename": "gcc/cp/typeck.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/gcc%2Fcp%2Ftypeck.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/gcc%2Fcp%2Ftypeck.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.cc?ref=c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "patch": "@@ -1833,6 +1833,8 @@ next_common_initial_sequence (tree &memb1, tree &memb2)\n   if ((!lookup_attribute (\"no_unique_address\", DECL_ATTRIBUTES (memb1)))\n       != !lookup_attribute (\"no_unique_address\", DECL_ATTRIBUTES (memb2)))\n     return false;\n+  if (DECL_ALIGN (memb1) != DECL_ALIGN (memb2))\n+    return false;\n   if (!tree_int_cst_equal (bit_position (memb1), bit_position (memb2)))\n     return false;\n   return true;\n@@ -1854,15 +1856,13 @@ layout_compatible_type_p (tree type1, tree type2)\n   type2 = cp_build_qualified_type (type2, TYPE_UNQUALIFIED);\n \n   if (TREE_CODE (type1) == ENUMERAL_TYPE)\n-    return (TYPE_ALIGN (type1) == TYPE_ALIGN (type2)\n-\t    && tree_int_cst_equal (TYPE_SIZE (type1), TYPE_SIZE (type2))\n+    return (tree_int_cst_equal (TYPE_SIZE (type1), TYPE_SIZE (type2))\n \t    && same_type_p (finish_underlying_type (type1),\n \t\t\t    finish_underlying_type (type2)));\n \n   if (CLASS_TYPE_P (type1)\n       && std_layout_type_p (type1)\n       && std_layout_type_p (type2)\n-      && TYPE_ALIGN (type1) == TYPE_ALIGN (type2)\n       && tree_int_cst_equal (TYPE_SIZE (type1), TYPE_SIZE (type2)))\n     {\n       tree field1 = TYPE_FIELDS (type1);"}, {"sha": "e80834c621590be7803896d62502b01dc1f843d5", "filename": "gcc/testsuite/g++.dg/DRs/dr2583.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2583.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2583.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FDRs%2Fdr2583.C?ref=c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "patch": "@@ -0,0 +1,45 @@\n+// DR 2583 - Common initial sequence should consider over-alignment.\n+// { dg-do compile { target c++11 } }\n+\n+#include <type_traits>\n+\n+struct A {\n+  int i;\n+  char c;\n+};\n+\n+struct B {\n+  int i;\n+  alignas(8) char c;\n+};\n+\n+struct C {\n+  int i;\n+  alignas(alignof(char)) char c;\n+};\n+\n+struct D {\n+  alignas(alignof(int)) int i;\n+  char c;\n+};\n+\n+struct S0 {\n+  alignas(16) char x[128];\n+  int i;\n+};\n+\n+struct alignas(16) S1 {\n+  char x[128];\n+  int i;\n+};\n+\n+#if __cpp_lib_is_layout_compatible >= 201907L\n+static_assert (std::is_corresponding_member (&A::i, &B::i), \"\");\n+static_assert (std::is_corresponding_member (&A::c, &B::c) == (alignof (char) == 8), \"\");\n+static_assert (std::is_corresponding_member (&A::i, &C::i), \"\");\n+static_assert (std::is_corresponding_member (&A::c, &C::c), \"\");\n+static_assert (std::is_corresponding_member (&A::i, &D::i), \"\");\n+static_assert (std::is_corresponding_member (&A::c, &D::c), \"\");\n+static_assert (std::is_corresponding_member (&S0::x, &S1::x) == (alignof (char) == 16), \"\");\n+static_assert (std::is_corresponding_member (&S0::i, &S1::i) == (alignof (char) == 16), \"\");\n+#endif"}, {"sha": "8f48ba8679a11d868a538909eaa84c07bb3090ec", "filename": "gcc/testsuite/g++.dg/cpp2a/is-layout-compatible3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-layout-compatible3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-layout-compatible3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fis-layout-compatible3.C?ref=c5e8c6c193d9a1ab80ef1a05e5158ddf35d54009", "patch": "@@ -55,10 +55,10 @@ static_assert (!std::is_layout_compatible_v<K, L>);\n static_assert (!std::is_layout_compatible_v<M, N>);\n static_assert (!std::is_layout_compatible_v<O, P>);\n static_assert (!std::is_layout_compatible_v<P, D>);\n-static_assert (!std::is_layout_compatible_v<Q, R>);\n+static_assert (std::is_layout_compatible_v<Q, R>);\n static_assert (!std::is_layout_compatible_v<U, V>);\n static_assert (!std::is_layout_compatible_v<A, I>);\n static_assert (!std::is_layout_compatible_v<C, I>);\n-static_assert (std::is_layout_compatible_v<E, F>);\n+static_assert (!std::is_layout_compatible_v<E, F>);\n static_assert (std::is_layout_compatible_v<G, H>);\n static_assert (std::is_layout_compatible_v<C1, D1>);"}]}