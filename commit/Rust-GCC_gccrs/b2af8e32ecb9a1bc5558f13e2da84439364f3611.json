{"sha": "b2af8e32ecb9a1bc5558f13e2da84439364f3611", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJhZjhlMzJlY2I5YTFiYzU1NThmMTNlMmRhODQ0MzkzNjRmMzYxMQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2001-06-18T16:48:37Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2001-06-18T16:48:37Z"}, "message": "objc.dg: New directory.\n\n\t* objc.dg: New directory.\n\t* objc.dg/dg.exp: New file.\n\t* objc.dg/alias.m: New.\n\t* objc.dg/class-1.m: New.\n\t* objc.dg/class-2.m: New.\n\t* objc.dg/const-str-1.m: New.\n\t* objc.dg/const-str-2.m: New.\n\t* objc.dg/id-1.m: New.\n\t* objc.dg/method-1.m: New.\n\t* objc.dg/super-class-1.m: New.\n\t* lib/objc-dg.exp: New file.\n\nFrom-SVN: r43446", "tree": {"sha": "0839f038a1d25f972038128166a0668ffb1e2df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0839f038a1d25f972038128166a0668ffb1e2df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2af8e32ecb9a1bc5558f13e2da84439364f3611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2af8e32ecb9a1bc5558f13e2da84439364f3611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2af8e32ecb9a1bc5558f13e2da84439364f3611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2af8e32ecb9a1bc5558f13e2da84439364f3611/comments", "author": null, "committer": null, "parents": [{"sha": "0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d97bf4c2c4e599beee17c3a99f6dfdd8884d09a"}], "stats": {"total": 331, "additions": 331, "deletions": 0}, "files": [{"sha": "5befa531a3870ae2789baea06edd0adeee82ed29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -1,3 +1,17 @@\n+2001-06-18  Stan Shebs  <shebs@apple.com>\n+\n+\t* objc.dg: New directory.\n+\t* objc.dg/dg.exp: New file.\n+\t* objc.dg/alias.m: New.\n+\t* objc.dg/class-1.m: New.\n+\t* objc.dg/class-2.m: New.\n+\t* objc.dg/const-str-1.m: New.\n+\t* objc.dg/const-str-2.m: New.\n+\t* objc.dg/id-1.m: New.\n+\t* objc.dg/method-1.m: New.\n+\t* objc.dg/super-class-1.m: New.\n+\t* lib/objc-dg.exp: New file.\n+\n 2001-06-16  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* g++.dg/mangle1.C: Modify regexp to test for `[: \\t\\n]' at end"}, {"sha": "aa4364ce22e59d050075f02150da76e727211c0a", "filename": "gcc/testsuite/lib/objc-dg.exp", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Flib%2Fobjc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Flib%2Fobjc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc-dg.exp?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,164 @@\n+#   Copyright (C) 1997, 1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+load_lib dg.exp\n+load_lib file-format.exp\n+load_lib target-supports.exp\n+load_lib scanasm.exp\n+\n+# For prune_gcc_output.\n+load_lib gcc.exp\n+\n+if ![info exists TORTURE_OPTIONS] {\n+    # It is theoretically beneficial to group all of the O2/O3 options together,\n+    # as in many cases the compiler will generate identical executables for\n+    # all of them--and the c-torture testsuite will skip testing identical\n+    # executables multiple times.\n+    # Also note that -finline-functions is explicitly included in one of the\n+    # items below, even though -O3 is also specified, because some ports may\n+    # choose to disable inlining functions by default, even when optimizing.\n+    set TORTURE_OPTIONS [list \\\n+\t{ -O0 } \\\n+\t{ -O1 } \\\n+\t{ -O2 } \\\n+\t{ -O3 -fomit-frame-pointer } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-loops } \\\n+\t{ -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions } \\\n+\t{ -O3 -g } \\\n+\t{ -Os } ]\n+}\n+\n+\n+# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n+# one for testcases without loops.\n+\n+set torture_with_loops $TORTURE_OPTIONS\n+set torture_without_loops \"\"\n+foreach option $TORTURE_OPTIONS {\n+    if ![string match \"*loop*\" $option] {\n+\tlappend torture_without_loops $option\n+    }\n+}\n+\n+# Define gcc callbacks for dg.exp.\n+\n+proc objc-dg-test { prog do_what extra_tool_flags } {\n+    # Set up the compiler flags, based on what we're going to do.\n+\n+    switch $do_what {\n+\t\"preprocess\" {\n+\t    set compile_type \"preprocess\"\n+\t    set output_file \"[file rootname [file tail $prog]].i\"\n+\t}\n+\t\"compile\" {\n+\t    set compile_type \"assembly\"\n+\t    set output_file \"[file rootname [file tail $prog]].s\"\n+\t}\n+\t\"assemble\" {\n+\t    set compile_type \"object\"\n+\t    set output_file \"[file rootname [file tail $prog]].o\"\n+\t}\n+\t\"link\" {\n+\t    set compile_type \"executable\"\n+\t    set output_file \"a.out\"\n+\t    # The following line is needed for targets like the i960 where\n+\t    # the default output file is b.out.  Sigh.\n+\t}\n+\t\"run\" {\n+\t    set compile_type \"executable\"\n+\t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n+\t    # Should this be handled elsewhere?\n+\t    # YES.\n+\t    set output_file \"./a.out\"\n+\t    # This is the only place where we care if an executable was\n+\t    # created or not.  If it was, dg.exp will try to run it.\n+\t    remote_file build delete $output_file;\n+\t}\n+\tdefault {\n+\t    perror \"$do_what: not a valid dg-do keyword\"\n+\t    return \"\"\n+\t}\n+    }\n+    set options \"\"\n+    if { $extra_tool_flags != \"\" } {\n+\tlappend options \"additional_flags=$extra_tool_flags\"\n+    }\n+\n+    set comp_output [objc_target_compile \"$prog\" \"$output_file\" \"$compile_type\" $options];\n+\n+    return [list $comp_output $output_file]\n+}\n+\n+proc objc-dg-prune { system text } {\n+    set text [prune_gcc_output $text]\n+\n+    # If we see \"region xxx is full\" then the testcase is too big for ram.\n+    # This is tricky to deal with in a large testsuite like c-torture so\n+    # deal with it here.  Just mark the testcase as unsupported.\n+    if [regexp \"(^|\\n)\\[^\\n\\]*: region \\[^\\n\\]* is full\" $text] {\n+\t# The format here is important.  See dg.exp.\n+\treturn \"::unsupported::memory full\"\n+    }\n+\n+    return $text\n+}\n+\n+# Utility routines.\n+\n+#\n+# search_for -- looks for a string match in a file\n+#\n+proc search_for { file pattern } {\n+    set fd [open $file r]\n+    while { [gets $fd cur_line]>=0 } {\n+\tif [string match \"*$pattern*\" $cur_line] then {\n+\t    close $fd\n+\t    return 1\n+\t}\n+    }\n+    close $fd\n+    return 0\n+}\n+\n+# Modified dg-runtest that can cycle through a list of optimization options\n+# as c-torture does.\n+proc objc-dg-runtest { testcases default-extra-flags } {\n+    global runtests\n+\n+    foreach test $testcases {\n+\t# If we're only testing specific files and this isn't one of \n+\t# them, skip it.\n+\tif ![runtest_file_p $runtests $test] {\n+\t    continue\n+        }\n+\n+\t# Look for a loop within the source code - if we don't find one,\n+\t# don't pass -funroll[-all]-loops.\n+\tglobal torture_with_loops torture_without_loops\n+\tif [expr [search_for $test \"for*(\"]+[search_for $test \"while*(\"]] {\n+\t    set option_list $torture_with_loops\n+\t} else {\n+\t    set option_list $torture_without_loops\n+\t}\n+\n+\tset nshort [file tail [file dirname $test]]/[file tail $test]\n+\n+\tforeach flags $option_list {\n+\t    verbose \"Testing $nshort, $flags\" 1\n+\t    dg-test $test $flags ${default-extra-flags}\n+\t}\n+    }\n+}"}, {"sha": "bf6d12d4e4d9773a38fed6f6ad0e4d4cb82cb262", "filename": "gcc/testsuite/objc.dg/alias.m", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Falias.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Falias.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Falias.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,12 @@\n+/* Test alias warnings.  */\n+/* { dg-do compile } */\n+\n+@compatibility_alias class1 class2; /* { dg-warning \"Cannot find class\" } */\n+\n+@interface class3;\n+@end\n+\n+@interface class4;\n+@end\n+\n+@compatibility_alias class4 class3;  /* { dg-warning \"Class\" \"already exists\" } */"}, {"sha": "a7760e104849c37af225fbe2d7e8ba2785d31584", "filename": "gcc/testsuite/objc.dg/class-1.m", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-1.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,20 @@\n+/* Redeclarations of class names.  */\n+/* { dg-do compile } */\n+\n+typedef int foo;\n+\n+@class foo;  /* { dg-error \"redeclared as different kind of symbol\" } */\n+/* { dg-error \"previous declaration of\" \"\" { target *-*-* } 4 } */\n+\n+typedef int bar;\n+\n+@interface bar\n+@end  /* { dg-error \"redeclared as different kind of symbol\" } */\n+/* { dg-error \"previous declaration of\" \"\" { target *-*-* } 9 } */\n+\n+int glob;\n+\n+@implementation glob\n+@end  /* { dg-error \"redeclared as different kind of symbol\" } */\n+/* { dg-error \"previous declaration of\" \"\" { target *-*-* } 15 } */\n+/* { dg-warning \"Cannot find interface declaration\" \"\" { target *-*-* } 18 } */"}, {"sha": "a4514f9290aff45a2fc7b41d3f3afe7b0cdc66e5", "filename": "gcc/testsuite/objc.dg/class-2.m", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fclass-2.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,15 @@\n+/* Test super classes.  */\n+/* { dg-do compile } */\n+\n+@interface supclass1\n+@end\n+\n+@interface supclass2\n+@end\n+\n+@interface class1 : supclass1\n+@end\n+\n+@implementation class1 : supclass2\n+@end  /* { dg-error \"conflicting super class name\" } */\n+/* { dg-error \"previous declaration\" \"\" { target *-*-* } 14 } */"}, {"sha": "1d94faa175793e688215be69a2a97ea71aa3842d", "filename": "gcc/testsuite/objc.dg/const-str-1.m", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-1.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,16 @@\n+/* Test errors for constant strings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fgnu-runtime\" } */\n+\n+int foo()\n+{\n+  baz(@\"hiya\");  /* { dg-error \"Cannot find interface declaration\" } */\n+}\n+\n+@interface NXConstantString\n+@end\n+\n+int bar()\n+{\n+  baz(@\"howdah\");\n+}"}, {"sha": "42dccd91888ae8d283882ee8c02cc48fbfe02316", "filename": "gcc/testsuite/objc.dg/const-str-2.m", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fconst-str-2.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,10 @@\n+/* Test the -fconstant-string-class flag error.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-fconstant-string-class\" } */\n+\n+{ dg-error \"no class name specified as argument to -fconstant-string-class\" \"\" { target *-*-* } 0 }\n+\n+int foo () {}\n+\n+/* Seem bogus, should investigate some day.  */\n+/* { dg-error \"parse error\" \"\" { target *-*-* } 5 } */"}, {"sha": "ebf952967c7123a48c67b51b1c26617ad7a5f73c", "filename": "gcc/testsuite/objc.dg/dg.exp", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,35 @@\n+# GCC Objective-C testsuite that uses the `dg.exp' driver.\n+#   Copyright (C) 1997, 2001 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Load support procs.\n+load_lib objc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[m\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "026a6d4b8aeb27f077ccacf020d9b128e5ad2303", "filename": "gcc/testsuite/objc.dg/id-1.m", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fid-1.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,6 @@\n+/* Test the id type warning.  */\n+/* { dg-do compile } */\n+\n+typedef int id;\n+\n+id b; /* { dg-warning \"Unexpected type for `id'\" } */"}, {"sha": "acc03c683590311c7f7f978ae705d7cf2b920662", "filename": "gcc/testsuite/objc.dg/method-1.m", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-1.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,34 @@\n+/* Tests of duplication.  */\n+/* { dg-do compile } */\n+\n+@interface class1\n+- (int) meth1;\n+- (void) meth1;  /* { dg-error \"duplicate declaration of instance method\" } */\n+@end\n+\n+@interface class2\n++ (void) meth1;\n++ (int) meth1;  /* { dg-error \"duplicate declaration of class method\" } */\n+@end\n+\n+@interface class3\n+- (int) meth1;\n+@end\n+\n+@implementation class3\n+- (int) meth1 {}\n+- (int) meth1 {}  /* { dg-error \"duplicate definition of instance method\" } */\n+/* { dg-error \"redefinition of\" \"\" { target *-*-* } 20 } */\n+/* { dg-error \"previously defined here\" \"\" { target *-*-* } 19 } */\n+@end\n+\n+@interface class4\n++ (void) meth1;\n+@end\n+\n+@implementation class4\n++ (void) meth1 {}\n++ (void) meth1 {}  /* { dg-error \"duplicate definition of class method\" } */\n+/* { dg-error \"redefinition of\" \"\" { target *-*-* } 31 } */\n+/* { dg-error \"previously defined here\" \"\" { target *-*-* } 30 } */\n+@end"}, {"sha": "d4252c97eba78e83b2de8416ad08e7a05ff6c442", "filename": "gcc/testsuite/objc.dg/super-class-1.m", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2af8e32ecb9a1bc5558f13e2da84439364f3611/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsuper-class-1.m?ref=b2af8e32ecb9a1bc5558f13e2da84439364f3611", "patch": "@@ -0,0 +1,5 @@\n+/* Test super classes.  */\n+/* { dg-do compile } */\n+\n+@interface class0 : supclass0\n+@end  /* { dg-error \"Cannot find interface declaration for .*, superclass\" } */"}]}