{"sha": "13795658b50234d99cf2b671214000131b132952", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM3OTU2NThiNTAyMzRkOTljZjJiNjcxMjE0MDAwMTMxYjEzMjk1Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-14T12:37:28Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-14T12:37:28Z"}, "message": "data.c, [...]: Fix comment typos.\n\n\t* data.c, decl.c, f95-lang.c, gfortran.h, match.c,\n\ttrans-array.c, trans-common.c, trans-expr.c,\n\ttrans-intrinsic.c, trans-stmt.c, trans-types.c, trans.h: Fix\n\tcomment typos.  Follow spelling conventions.\n\nFrom-SVN: r87492", "tree": {"sha": "86ce1a2225fed2b523fd783f41a07ab8fd9cee98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86ce1a2225fed2b523fd783f41a07ab8fd9cee98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13795658b50234d99cf2b671214000131b132952", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13795658b50234d99cf2b671214000131b132952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13795658b50234d99cf2b671214000131b132952", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13795658b50234d99cf2b671214000131b132952/comments", "author": null, "committer": null, "parents": [{"sha": "98ddffc1c10f62fca6e92b358b0a6d4398add660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ddffc1c10f62fca6e92b358b0a6d4398add660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ddffc1c10f62fca6e92b358b0a6d4398add660"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "1df48e167497b1bf5d183717cf16b7a81dd965c2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -1,3 +1,10 @@\n+2004-09-14  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* data.c, decl.c, f95-lang.c, gfortran.h, match.c,\n+\ttrans-array.c, trans-common.c, trans-expr.c,\n+\ttrans-intrinsic.c, trans-stmt.c, trans-types.c, trans.h: Fix\n+\tcomment typos.  Follow spelling conventions.\n+\n 2004-09-09  Paul Brook  <paul@codesourcery.com>\n \n \t* scanner.c (get_file): Add ATTRIBUTE_UNUSED."}, {"sha": "56479718d417003f5e9f86cc835d6bdfbb22abfe", "filename": "gcc/fortran/data.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fdata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fdata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdata.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -329,7 +329,7 @@ gfc_assign_data_value (gfc_expr * lvalue, gfc_expr * rvalue, mpz_t index)\n     last_con->expr = expr;\n }\n \n-/* Similarly, but initialize REPEAT consectutive values in LVALUE the same\n+/* Similarly, but initialize REPEAT consecutive values in LVALUE the same\n    value in RVALUE.  For the nonce, LVALUE must refer to a full array, not\n    an array section.  */\n "}, {"sha": "cc948b13d8e08867101538b1fd3d4dd8d78f2d38", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -399,7 +399,7 @@ match_old_style_init (const char *name)\n }\n \n /* Match the stuff following a DATA statement. If ERROR_FLAG is set,\n-   we are matching a DATA stement and are therefore issuing an error\n+   we are matching a DATA statement and are therefore issuing an error\n    if we encounter something unexpected, if not, we're trying to match \n    an old-style intialization expression of the form INTEGER I /2/.   */\n "}, {"sha": "107fb753f4c449330e2bf006369e7a5188b8f35a", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -354,7 +354,7 @@ static GTY(()) struct binding_level *global_binding_level;\n /* Binding level structures are initialized by copying this one.  */\n static struct binding_level clear_binding_level = { NULL, NULL, NULL };\n \f\n-/* Return non-zero if we are currently in the global binding level.  */\n+/* Return nonzero if we are currently in the global binding level.  */\n \n int\n global_bindings_p (void)"}, {"sha": "f33e79bac1b5cada7a98b2caabb9f59e899cde70", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -974,7 +974,7 @@ typedef union\n gfc_simplify_f;\n \n /* Again like gfc_check_f, these specify the type of the resolution\n-   function associated with an intrinsic. The fX are juse like in\n+   function associated with an intrinsic. The fX are just like in\n    gfc_check_f. f1m is used for MIN and MAX, s1 is used for abort().\n    */\n "}, {"sha": "b468c8e4be6cee6c6fd46bd52a11a040b9b86d42", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -2102,7 +2102,7 @@ gfc_match_call (void)\n \n \n /* Given a name, return a pointer to the common head structure,\n-   creating it if it does not exist. If FROM_MODULE is non-zero, we\n+   creating it if it does not exist. If FROM_MODULE is nonzero, we\n    mangle the name so that it doesn't interfere with commons defined \n    in the using namespace.\n    TODO: Add to global symbol tree.  */"}, {"sha": "582bb338dc397b101185e3e742c31637f50b2bcc", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -2245,7 +2245,7 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n }\n \n \n-/* Return true if the two SS could be aliased, ie. both point to the same data\n+/* Return true if the two SS could be aliased, i.e. both point to the same data\n    object.  */\n /* TODO: resolve aliases based on frontend expressions.  */\n \n@@ -3060,7 +3060,7 @@ gfc_trans_auto_array_allocation (tree decl, gfc_symbol * sym, tree fnbody)\n       gfc_trans_init_string_length (sym->ts.cl, &block);\n \n       /* Emit a DECL_EXPR for this variable, which will cause the\n-\t gimplifier to allocate stoage, and all that good stuff.  */\n+\t gimplifier to allocate storage, and all that good stuff.  */\n       tmp = build1 (DECL_EXPR, TREE_TYPE (decl), decl);\n       gfc_add_expr_to_block (&block, tmp);\n     }\n@@ -3572,7 +3572,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n       /* A transformational function return value will be a temporary\n \t array descriptor.  We still need to go through the scalarizer\n \t to create the descriptor.  Elemental functions ar handled as\n-\t arbitary expressions, ie. copy to a temporary.  */\n+\t arbitary expressions, i.e. copy to a temporary.  */\n       secss = ss;\n       /* Look for the SS for this function.  */\n       while (secss != gfc_ss_terminator"}, {"sha": "3f83d2e9d263cbba58fcd2f78afa810d13f0a783", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -136,7 +136,7 @@ get_segment_info (gfc_symbol * sym, HOST_WIDE_INT offset)\n   /* Create the segment_info and fill it in.  */\n   s = (segment_info *) gfc_getmem (sizeof (segment_info));\n   s->sym = sym;\n-  /* We will use this type when building the segment aggreagate type.  */\n+  /* We will use this type when building the segment aggregate type.  */\n   s->field = gfc_sym_type (sym);\n   s->length = int_size_in_bytes (s->field);\n   s->offset = offset;"}, {"sha": "358d4532233db16393db8732e2e3cab18ff6fe83", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -1581,7 +1581,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n     }\n   else if (expr->ts.type == BT_DERIVED)\n     {\n-      /* Nested dervived type.  */\n+      /* Nested derived type.  */\n       tmp = gfc_trans_structure_assign (dest, expr);\n       gfc_add_expr_to_block (&block, tmp);\n     }\n@@ -1603,7 +1603,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n   return gfc_finish_block (&block);\n }\n \n-/* Assign a derived type contructor to a variable.  */\n+/* Assign a derived type constructor to a variable.  */\n \n static tree\n gfc_trans_structure_assign (tree dest, gfc_expr * expr)"}, {"sha": "18f9ecfc6193d4e1bfc8584efe5fd60d9be33d66", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -1466,7 +1466,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n   /* Initialize the position to the first element.  If the array has zero\n      size we need to return zero.  Otherwise use the first element of the\n      array, in case all elements are equal to the limit.\n-     ie. pos = (ubound >= lbound) ? lbound, lbound - 1;  */\n+     i.e. pos = (ubound >= lbound) ? lbound, lbound - 1;  */\n   tmp = fold (build2 (MINUS_EXPR, gfc_array_index_type,\n \t\t      loop.from[0], gfc_index_one_node));\n   cond = fold (build2 (GE_EXPR, boolean_type_node,"}, {"sha": "2407dcf6a2c6b1b4e809ebbaa8f3e23c6a51d5b5", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -524,7 +524,7 @@ gfc_trans_arithmetic_if (gfc_code * code)\n \n    TODO: Large loop counts\n    Does not work loop counts which do not fit into a signed integer kind,\n-   ie. Does not work for loop counts > 2^31 for integer(kind=4) variables\n+   i.e. Does not work for loop counts > 2^31 for integer(kind=4) variables\n    We must support the full range.  */\n \n tree\n@@ -1286,9 +1286,9 @@ gfc_trans_forall_loop (forall_info *forall_tmp, int nvar, tree body, int mask_fl\n \n \n /* Generate the body and loops according to MASK_FLAG and NEST_FLAG.\n-   if MASK_FLAG is non-zero, the body is controlled by maskes in forall\n+   if MASK_FLAG is nonzero, the body is controlled by maskes in forall\n    nest, otherwise, the body is not controlled by maskes.\n-   if NEST_FLAG is non-zero, generate loops for nested forall, otherwise,\n+   if NEST_FLAG is nonzero, generate loops for nested forall, otherwise,\n    only generate loops for the current forall level.  */\n \n static tree"}, {"sha": "9dd8fe8a2d9ab5647561f5696cb57ccbc50a79fa", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -944,7 +944,7 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n   mpz_init (delta);\n \n   /* We don't use build_array_type because this does not include include\n-     lang-specific information (ie. the bounds of the array) when checking\n+     lang-specific information (i.e. the bounds of the array) when checking\n      for duplicates.  */\n   type = make_node (ARRAY_TYPE);\n "}, {"sha": "363589bc98e44c90e5703ec9dcf1f86b910afd8c", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13795658b50234d99cf2b671214000131b132952/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=13795658b50234d99cf2b671214000131b132952", "patch": "@@ -271,7 +271,7 @@ void gfc_conv_string_parameter (gfc_se * se);\n /* Add an item to the end of TREE_LIST.  */\n tree gfc_chainon_list (tree, tree);\n \n-/* When using the gfc_conv_* make sure you understand what they do, ie.\n+/* When using the gfc_conv_* make sure you understand what they do, i.e.\n    when a POST chain may be created, and what the retured expression may be\n    used for.  Note that character strings have special handling.  This\n    should not be a problem as most statements/operations only deal with"}]}