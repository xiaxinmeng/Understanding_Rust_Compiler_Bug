{"sha": "ee01694151edc7e8aef84dc3c484469e2ae443a0", "node_id": "C_kwDOANBUbNoAKGVlMDE2OTQxNTFlZGM3ZThhZWY4NGRjM2M0ODQ0NjllMmFlNDQzYTA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-06T10:43:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-12-06T11:53:43Z"}, "message": "tree-optimization/103544 - SLP reduction chain as SLP reduction issue\n\nWhen SLP reduction chain vectorization support added handling of\nan outer conversion in the chain picking a failed reduction up\nas SLP reduction that broke the invariant that the whole reduction\nwas forward reachable.  The following plugs that hole noting\na future enhancement possibility.\n\n2021-12-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103544\n\t* tree-vect-slp.c (vect_analyze_slp): Only add a SLP reduction\n\topportunity if the stmt in question is the reduction root.\n\t(dot_slp_tree): Add missing check for NULL child.\n\n\t* gcc.dg/vect/pr103544.c: New testcase.", "tree": {"sha": "8dac6e8627ccf2188c24618f4f43d203ca8a1ea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dac6e8627ccf2188c24618f4f43d203ca8a1ea5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee01694151edc7e8aef84dc3c484469e2ae443a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee01694151edc7e8aef84dc3c484469e2ae443a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee01694151edc7e8aef84dc3c484469e2ae443a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee01694151edc7e8aef84dc3c484469e2ae443a0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dc6d19222581c77a174d44d97507d234fb7e39b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc6d19222581c77a174d44d97507d234fb7e39b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc6d19222581c77a174d44d97507d234fb7e39b"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "c8bdee86e779561d3c5b0426a16c047fcafe4e0d", "filename": "gcc/testsuite/gcc.dg/vect/pr103544.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee01694151edc7e8aef84dc3c484469e2ae443a0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103544.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee01694151edc7e8aef84dc3c484469e2ae443a0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103544.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr103544.c?ref=ee01694151edc7e8aef84dc3c484469e2ae443a0", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+/* { dg-additional-options \"-march=haswell\" { target x86_64-*-* i?86-*-* } } */\n+\n+int crash_me(char* ptr, unsigned long size)\n+{\n+  short result[16] = {0};\n+\n+  unsigned long no_iters = 0;\n+  for(unsigned long i = 0; i < size - 12; i+= 13){\n+      for(unsigned long j = 0; j < 12; j++){\n+\t  result[j] += ptr[i + j] - '0';\n+      }\n+      no_iters++;\n+  }\n+\n+  int result_int = 0;\n+  for(int j = 0; j < 12; j++){\n+      int bit_value = result[j] > no_iters/2 ? 1 : 0;\n+      result_int |= bit_value;\n+  }\n+\n+  return result_int;\n+}"}, {"sha": "b912c3577df61a694d5bb9e22c5303fe6a48ab6e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee01694151edc7e8aef84dc3c484469e2ae443a0/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee01694151edc7e8aef84dc3c484469e2ae443a0/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=ee01694151edc7e8aef84dc3c484469e2ae443a0", "patch": "@@ -2537,7 +2537,8 @@ dot_slp_tree (FILE *f, slp_tree node, hash_set<slp_tree> &visited)\n     fprintf (f, \"\\\"%p\\\" -> \\\"%p\\\";\", (void *)node, (void *)child);\n \n   for (slp_tree child : SLP_TREE_CHILDREN (node))\n-    dot_slp_tree (f, child, visited);\n+    if (child)\n+      dot_slp_tree (f, child, visited);\n }\n \n DEBUG_FUNCTION void\n@@ -3418,8 +3419,13 @@ vect_analyze_slp (vec_info *vinfo, unsigned max_tree_size)\n \t\tvinfo = next;\n \t      }\n \t    STMT_VINFO_DEF_TYPE (first_element) = vect_internal_def;\n-\t    /* It can be still vectorized as part of an SLP reduction.  */\n-\t    loop_vinfo->reductions.safe_push (last);\n+\t    /* It can be still vectorized as part of an SLP reduction.\n+\t       ???  But only if we didn't skip a conversion around the group.\n+\t       In that case we'd have to reverse engineer that conversion\n+\t       stmt following the chain using reduc_idx and from the PHI\n+\t       using reduc_def.  */\n+\t    if (STMT_VINFO_DEF_TYPE (last) == vect_reduction_def)\n+\t      loop_vinfo->reductions.safe_push (last);\n \t  }\n \n       /* Find SLP sequences starting from groups of reductions.  */"}]}