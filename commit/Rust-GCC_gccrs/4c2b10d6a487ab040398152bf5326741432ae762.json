{"sha": "4c2b10d6a487ab040398152bf5326741432ae762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMyYjEwZDZhNDg3YWIwNDAzOTgxNTJiZjUzMjY3NDE0MzJhZTc2Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-08-18T18:04:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-08-18T18:04:32Z"}, "message": "re PR libstdc++/67066 (libstdc++-v3/src/filesystem/dir.cc fails to compile with --enable-concept-checks)\n\n\tPR libstdc++/67066\n\t* doc/xml/manual/configure.xml (manual.intro.setup.configure): Add\n\tcaveats for --enable-concept-checks. Improve link text.\n\t* doc/xml/manual/diagnostics.xml (std.diagnostics.concept_checking):\n\tClarify caveats.\n\t* doc/html/*: Regenerate.\n\t* include/bits/stl_deque.h (deque): Only use concept checks in C++03.\n\t* include/bits/stl_stack.h (stack): Likewise.\n\t* include/bits/stl_vector.h (vector): Likewise.\n\nFrom-SVN: r226984", "tree": {"sha": "852a218c29f9f79d623d2038fb7b1248bd7d0277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/852a218c29f9f79d623d2038fb7b1248bd7d0277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c2b10d6a487ab040398152bf5326741432ae762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b10d6a487ab040398152bf5326741432ae762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2b10d6a487ab040398152bf5326741432ae762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2b10d6a487ab040398152bf5326741432ae762/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e93c21e78ccc4e0427ccd4c5cf4500e2dce3e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e93c21e78ccc4e0427ccd4c5cf4500e2dce3e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e93c21e78ccc4e0427ccd4c5cf4500e2dce3e3"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "fed9a28cb3784424290a8bc68ec7625791ff567b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -1,3 +1,15 @@\n+2015-08-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/67066\n+\t* doc/xml/manual/configure.xml (manual.intro.setup.configure): Add\n+\tcaveats for --enable-concept-checks. Improve link text.\n+\t* doc/xml/manual/diagnostics.xml (std.diagnostics.concept_checking):\n+\tClarify caveats.\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/stl_deque.h (deque): Only use concept checks in C++03.\n+\t* include/bits/stl_stack.h (stack): Likewise.\n+\t* include/bits/stl_vector.h (vector): Likewise.\n+\n 2015-08-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/experimental/any (any::operator=(const any&)): Move check"}, {"sha": "df7f22f7fcdc41de3290bec396eb1a4526b529a1", "filename": "libstdc++-v3/doc/html/manual/concept_checking.html", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconcept_checking.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconcept_checking.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconcept_checking.html?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -35,8 +35,9 @@\n      <code class=\"literal\">-D_GLIBCXX_CONCEPT_CHECKS</code>.\n  </p><p>\n    Please note that the checks are based on the requirements in the original\n-   C++ standard, some of which have changed in the new C++11 revision.\n-   Additionally, some correct code might be rejected by the concept checks,\n+   C++ standard, many of which were relaxed in the C++11 standard and so valid\n+   C++11 code may be incorrectly rejected by the concept checks.  Additionally,\n+   some correct C++03 code might be rejected by the concept checks,\n    for example template argument types may need to be complete when used in\n    a template definition, rather than at the point of instantiation.\n    There are no plans to address these shortcomings."}, {"sha": "565d75e3e25f8388f676c3a0c08fe5a1a5e829ba", "filename": "libstdc++-v3/doc/html/manual/configure.html", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fconfigure.html?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -169,10 +169,12 @@\n \tMostly useful together with shared memory allocators, see PR\n \tlibstdc++/16612 for details.\n      </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-concept-checks</code></span></dt><dd><p>This turns on additional compile-time checks for instantiated\n-\tlibrary templates, in the form of specialized templates,\n-\t<a class=\"link\" href=\"concept_checking.html\" title=\"Concept Checking\">described here</a>.  They\n+\tlibrary templates, in the form of specialized templates described in\n+        the <a class=\"link\" href=\"concept_checking.html\" title=\"Concept Checking\">Concept\n+        Checking</a> section.  They\n \tcan help users discover when they break the rules of the STL, before\n-\ttheir programs run.\n+\ttheir programs run. These checks are based on C++03 rules and some of\n+\tthem are not compatible with correct C++11 code.\n      </p></dd><dt><span class=\"term\"><code class=\"code\">--enable-symvers[=style]</code></span></dt><dd><p>In 3.1 and later, tries to turn on symbol versioning in the\n \tshared library (if a shared library has been\n \trequested). Values for 'style' that are currently supported"}, {"sha": "9052ce64a0cc8889cff87674467e16ee5c749a92", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -630,4 +630,4 @@\n       </td></tr></tbody></table></div></div><br class=\"table-break\" /></div></div></div><div class=\"navfooter\"><hr /><table width=\"100%\" summary=\"Navigation footer\"><tr><td width=\"40%\" align=\"left\"><a accesskey=\"p\" href=\"intro.html\">Prev</a>\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"u\" href=\"intro.html\">Up</a></td><td width=\"40%\" align=\"right\">\u00a0<a accesskey=\"n\" href=\"license.html\">Next</a></td></tr><tr><td width=\"40%\" align=\"left\" valign=\"top\">Part\u00a0I.\u00a0\n   Introduction\n   \n-\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0License</td></tr></table></div></body></html>\n+\u00a0</td><td width=\"20%\" align=\"center\"><a accesskey=\"h\" href=\"../index.html\">Home</a></td><td width=\"40%\" align=\"right\" valign=\"top\">\u00a0License</td></tr></table></div></body></html>\n\\ No newline at end of file"}, {"sha": "2f558d2b7d7d94d9dce44169e974e08db3909429", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -288,10 +288,12 @@\n \n  <varlistentry><term><code>--enable-concept-checks</code></term>\n  <listitem><para>This turns on additional compile-time checks for instantiated\n-\tlibrary templates, in the form of specialized templates,\n-\t<link linkend=\"std.diagnostics.concept_checking\">described here</link>.  They\n+\tlibrary templates, in the form of specialized templates described in\n+        the <link linkend=\"std.diagnostics.concept_checking\">Concept\n+        Checking</link> section.  They\n \tcan help users discover when they break the rules of the STL, before\n-\ttheir programs run.\n+\ttheir programs run. These checks are based on C++03 rules and some of\n+\tthem are not compatible with correct C++11 code.\n      </para>\n  </listitem></varlistentry>\n "}, {"sha": "88ed2e28057f95657c995655664652578f8e4049", "filename": "libstdc++-v3/doc/xml/manual/diagnostics.xml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdiagnostics.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdiagnostics.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fdiagnostics.xml?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -114,8 +114,9 @@\n \n  <para>\n    Please note that the checks are based on the requirements in the original\n-   C++ standard, some of which have changed in the new C++11 revision.\n-   Additionally, some correct code might be rejected by the concept checks,\n+   C++ standard, many of which were relaxed in the C++11 standard and so valid\n+   C++11 code may be incorrectly rejected by the concept checks.  Additionally,\n+   some correct C++03 code might be rejected by the concept checks,\n    for example template argument types may need to be complete when used in\n    a template definition, rather than at the point of instantiation.\n    There are no plans to address these shortcomings."}, {"sha": "f674245b30dba7adb8df96ace1a36cc79e9828bd", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -829,7 +829,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       // concept requirements\n       typedef typename _Alloc::value_type        _Alloc_value_type;\n+#if __cplusplus < 201103L\n       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+#endif\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n \n       typedef _Deque_base<_Tp, _Alloc>\t\t\t_Base;"}, {"sha": "09dd6118a7a72197be51a75b17f698ddbb1708a6", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -100,8 +100,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // concept requirements\n       typedef typename _Sequence::value_type _Sequence_value_type;\n+#if __cplusplus < 201103L\n       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n       __glibcxx_class_requires(_Sequence, _BackInsertionSequenceConcept)\n+#endif\n       __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n \n       template<typename _Tp1, typename _Seq1>"}, {"sha": "305d44651786196cc269c6b30fecbce78d179f3e", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c2b10d6a487ab040398152bf5326741432ae762/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=4c2b10d6a487ab040398152bf5326741432ae762", "patch": "@@ -215,7 +215,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       // Concept requirements.\n       typedef typename _Alloc::value_type                _Alloc_value_type;\n+#if __cplusplus < 201103L\n       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n+#endif\n       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)\n       \n       typedef _Vector_base<_Tp, _Alloc>\t\t\t _Base;"}]}