{"sha": "b505e785a352b4defd89de198aeeb98d3399a0b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwNWU3ODVhMzUyYjRkZWZkODlkZTE5OGFlZWI5OGQzMzk5YTBiMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-03-04T23:00:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-03-04T23:00:25Z"}, "message": "re PR tree-optimization/39362 (ICE failing to coalesce ab SSA names)\n\n2009-03-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/39362\n\t* tree-ssa-sccvn.c (visit_use): Stores and copies from SSA_NAMEs\n\tthat occur in abnormal PHIs should be varying.\n\n\t* g++.dg/torture/pr39362.C: New testcase.\n\nFrom-SVN: r144626", "tree": {"sha": "066d9de6b7fa0bee916159c53075b2cc54197628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/066d9de6b7fa0bee916159c53075b2cc54197628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b505e785a352b4defd89de198aeeb98d3399a0b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b505e785a352b4defd89de198aeeb98d3399a0b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b505e785a352b4defd89de198aeeb98d3399a0b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b505e785a352b4defd89de198aeeb98d3399a0b1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b78ef3ee2247a1953a4fd6d578613952f572dab7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78ef3ee2247a1953a4fd6d578613952f572dab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78ef3ee2247a1953a4fd6d578613952f572dab7"}], "stats": {"total": 137, "additions": 129, "deletions": 8}, "files": [{"sha": "333fd9dbcd54bccf85809c805cee67b16ea83ef5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b505e785a352b4defd89de198aeeb98d3399a0b1", "patch": "@@ -1,3 +1,9 @@\n+2009-03-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39362\n+\t* tree-ssa-sccvn.c (visit_use): Stores and copies from SSA_NAMEs\n+\tthat occur in abnormal PHIs should be varying.\n+\n 2009-03-04  Zdenek Dvorak  <ook@ucw.cz>\n \n \t* tree-scalar-evolution.c (analyze_scalar_evolution_in_loop):"}, {"sha": "ca0a6ee8ad0953ac636c49b5779fc2d3d21f8922", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b505e785a352b4defd89de198aeeb98d3399a0b1", "patch": "@@ -1,3 +1,8 @@\n+2009-03-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/39362\n+\t* g++.dg/torture/pr39362.C: New testcase.\n+\n 2009-03-04  Jason Merrill  <jason@redhat.com>\n \t    Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n "}, {"sha": "fb23439f595c3fa6efedc74aee4f9d0862fdd63b", "filename": "gcc/testsuite/g++.dg/torture/pr39362.C", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39362.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39362.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr39362.C?ref=b505e785a352b4defd89de198aeeb98d3399a0b1", "patch": "@@ -0,0 +1,105 @@\n+/* { dg-do compile } */\n+\n+void *fastMalloc (int n);\n+void fastFree (void *p);\n+template <class T> struct C\n+{\n+  void deref () { delete static_cast <T *>(this); }\n+};\n+template <typename T>\n+struct D\n+{\n+  D (T *ptr) : m_ptr (ptr) { }\n+  ~D () { if (T * ptr = m_ptr) ptr->deref (); }\n+  T *operator-> () const;\n+  T *m_ptr;\n+  typedef T *UnspecifiedBoolType;\n+  operator UnspecifiedBoolType () const;\n+};\n+template <typename T> struct E\n+{\n+  static void destruct (T * begin, T * end)\n+    {\n+      for (T * cur = begin; cur != end; ++cur)\n+\tcur->~T ();\n+    }\n+};\n+template <typename T> class F;\n+template <typename T> struct G\n+{\n+  static void destruct (T * begin, T * end)\n+    {\n+      E <T>::destruct (begin, end);\n+    }\n+  static void uninitializedFill (T * dst, T * dstEnd, const T & val)\n+    {\n+      F<T>::uninitializedFill (dst, dstEnd, val);\n+    }\n+};\n+template <typename T> struct H\n+{\n+  void allocateBuffer (int newCapacity)\n+    {\n+      m_buffer = static_cast <T *>(fastMalloc (newCapacity * sizeof (T)));\n+    }\n+  void deallocateBuffer (T * bufferToDeallocate)\n+    {\n+      if (m_buffer == bufferToDeallocate)\n+\tfastFree (bufferToDeallocate);\n+    }\n+  T *buffer () { }\n+  int capacity () const { }\n+  T *m_buffer;\n+};\n+template <typename T, int cap> class I;\n+template <typename T> struct I <T, 0> : H <T>\n+{\n+  I (int capacity) { allocateBuffer (capacity); }\n+  ~I () { deallocateBuffer (buffer ()); }\n+  using H <T>::allocateBuffer;\n+  H <T>::buffer;\n+};\n+template <typename T, int cap = 0> struct J\n+{\n+  typedef T *iterator;\n+  ~J () { if (m_size) shrink (0); }\n+  J (const J &);\n+  int capacity () const { m_buffer.capacity (); }\n+  T & operator[](int i) { }\n+  iterator begin () { }\n+  iterator end () { return begin () + m_size; }\n+  void shrink (int size);\n+  template <typename U> void append (const U &);\n+  int m_size;\n+  I <T, cap> m_buffer;\n+};\n+template <typename T, int cap>\n+J <T, cap>::J (const J & other) : m_buffer (other.capacity ())\n+{\n+}\n+template <typename T, int cap>\n+void J <T, cap>::shrink (int size)\n+{\n+  G <T>::destruct (begin () + size, end ());\n+  m_size = size;\n+}\n+struct A : public C <A>\n+{\n+  virtual ~A ();\n+  typedef J <D <A> > B;\n+  virtual A *firstChild () const;\n+  virtual A *nextSibling () const;\n+  virtual const B & children (int length);\n+  B m_children;\n+};\n+const A::B &\n+A::children (int length)\n+{\n+  for (D <A> obj = firstChild (); obj; obj = obj->nextSibling ())\n+    {\n+      B children = obj->children (2);\n+      for (unsigned i = 0; i <length; ++i)\n+\tm_children.append (children[i]);\n+    }\n+}\n+"}, {"sha": "dc55676c4a3c455e345c3b113794dcf7d8abfaf6", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b505e785a352b4defd89de198aeeb98d3399a0b1/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=b505e785a352b4defd89de198aeeb98d3399a0b1", "patch": "@@ -2367,14 +2367,19 @@ visit_use (tree use)\n \t      VN_INFO (lhs)->expr = NULL_TREE;\n \t    }\n \n-\t  if (TREE_CODE (lhs) == SSA_NAME\n-\t      /* We can substitute SSA_NAMEs that are live over\n-\t\t abnormal edges with their constant value.  */\n-\t      && !(gimple_assign_copy_p (stmt)\n-\t\t   && is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n-\t      && !(simplified\n-\t\t   && is_gimple_min_invariant (simplified))\n-\t      && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t  if ((TREE_CODE (lhs) == SSA_NAME\n+\t       /* We can substitute SSA_NAMEs that are live over\n+\t\t  abnormal edges with their constant value.  */\n+\t       && !(gimple_assign_copy_p (stmt)\n+\t\t    && is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n+\t       && !(simplified\n+\t\t    && is_gimple_min_invariant (simplified))\n+\t       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t      /* Stores or copies from SSA_NAMEs that are live over\n+\t\t abnormal edges are a problem.  */\n+\t      || (gimple_assign_single_p (stmt)\n+\t\t  && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n+\t\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_assign_rhs1 (stmt))))\n \t    changed = defs_to_varying (stmt);\n \t  else if (REFERENCE_CLASS_P (lhs) || DECL_P (lhs))\n \t    {"}]}