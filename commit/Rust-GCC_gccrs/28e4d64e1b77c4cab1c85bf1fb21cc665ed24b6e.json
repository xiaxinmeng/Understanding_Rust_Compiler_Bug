{"sha": "28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhlNGQ2NGUxYjc3YzRjYWIxYzg1YmYxZmIyMWNjNjY1ZWQyNGI2ZQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonber@gnat.com", "date": "2004-10-27T12:29:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T12:29:32Z"}, "message": "checks.adb (Expr_Known_Valid): If floating-point validity checks are enabled...\n\n2004-10-26  Ed Schonberg  <schonberg@gnat.com>\n\n\t* checks.adb (Expr_Known_Valid): If floating-point validity checks are\n\tenabled, check the result of unary and binary operations when the\n\texpression is the right-hand side of an assignment.\n\nFrom-SVN: r89645", "tree": {"sha": "34813e768b591df62c5467dd0344b9df257802ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34813e768b591df62c5467dd0344b9df257802ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e/comments", "author": null, "committer": null, "parents": [{"sha": "59705c38c69f6a622b9f53764de40d869f69bd3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59705c38c69f6a622b9f53764de40d869f69bd3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59705c38c69f6a622b9f53764de40d869f69bd3d"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "a60b21d4ae45cd02fbe1d4501d4181a549232eb4", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=28e4d64e1b77c4cab1c85bf1fb21cc665ed24b6e", "patch": "@@ -3792,13 +3792,26 @@ package body Checks is\n \n       --  The result of any function call or operator is always considered\n       --  valid, since we assume the necessary checks are done by the call.\n+      --  For operators on floating-point operations, we must also check\n+      --  when the operation is the right-hand side of an assignment, or\n+      --  is an actual in a call.\n \n-      elsif Nkind (Expr) in N_Binary_Op\n-              or else\n-            Nkind (Expr) in N_Unary_Op\n-              or else\n-            Nkind (Expr) = N_Function_Call\n+      elsif\n+        Nkind (Expr) in N_Binary_Op or else Nkind (Expr) in N_Unary_Op\n       then\n+         if Is_Floating_Point_Type (Typ)\n+            and then Validity_Check_Floating_Point\n+            and then\n+              (Nkind (Parent (Expr)) = N_Assignment_Statement\n+                or else Nkind (Parent (Expr)) = N_Function_Call\n+                or else Nkind (Parent (Expr)) = N_Parameter_Association)\n+         then\n+            return False;\n+         else\n+            return True;\n+         end if;\n+\n+      elsif Nkind (Expr) = N_Function_Call then\n          return True;\n \n       --  For all other cases, we do not know the expression is valid"}]}