{"sha": "78a8eb4edcc2352b7af778d2a3563825d8d72b36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhhOGViNGVkY2MyMzUyYjdhZjc3OGQyYTM1NjM4MjVkOGQ3MmIzNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-06-22T16:26:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-06-22T16:26:52Z"}, "message": "reg-notes.def (REG_CFA_WINDOW_SAVE): New.\n\n\t* reg-notes.def (REG_CFA_WINDOW_SAVE): New.\n\t* dwarf2out.c (dwarf2out_frame_debug): Handle it.\n\t(dwarf2out_frame_debug_cfa_window_save): Rename from\n\tdwarf2out_window_save; make static.\n\t* tree.h (dwarf2out_window_save): Don't declare.\n\n\t* config/sparc/sparc.c (sparc_dwarf_handle_frame_unspec): Remove.\n\t(TARGET_DWARF_HANDLE_FRAME_UNSPEC): Remove.\n\t(emit_save_register_window): Rename from gen_save_register_window;\n\temit the insn and add REG_CFA_* notes.\n\t(sparc_expand_prologue): Update to match.\n\t* config/sparc/sparc.md (save_register_window_1): Simplify from\n\tsave_register_window<P:mode>.\n\nFrom-SVN: r175297", "tree": {"sha": "3a610ed9f5084ab4ef905d107dd27ccc753514d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a610ed9f5084ab4ef905d107dd27ccc753514d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78a8eb4edcc2352b7af778d2a3563825d8d72b36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a8eb4edcc2352b7af778d2a3563825d8d72b36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78a8eb4edcc2352b7af778d2a3563825d8d72b36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78a8eb4edcc2352b7af778d2a3563825d8d72b36/comments", "author": null, "committer": null, "parents": [{"sha": "8288cc7387c4490e0331f8288902159149f59889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8288cc7387c4490e0331f8288902159149f59889", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8288cc7387c4490e0331f8288902159149f59889"}], "stats": {"total": 136, "additions": 71, "deletions": 65}, "files": [{"sha": "f487bd2ff312274dff4bc1ad367135dbdbd96378", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78a8eb4edcc2352b7af778d2a3563825d8d72b36", "patch": "@@ -1,3 +1,19 @@\n+2011-06-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* reg-notes.def (REG_CFA_WINDOW_SAVE): New.\n+\t* dwarf2out.c (dwarf2out_frame_debug): Handle it.\n+\t(dwarf2out_frame_debug_cfa_window_save): Rename from\n+\tdwarf2out_window_save; make static.\n+\t* tree.h (dwarf2out_window_save): Don't declare.\n+\n+\t* config/sparc/sparc.c (sparc_dwarf_handle_frame_unspec): Remove.\n+\t(TARGET_DWARF_HANDLE_FRAME_UNSPEC): Remove.\n+\t(emit_save_register_window): Rename from gen_save_register_window;\n+\temit the insn and add REG_CFA_* notes.\n+\t(sparc_expand_prologue): Update to match.\n+\t* config/sparc/sparc.md (save_register_window_1): Simplify from\n+\tsave_register_window<P:mode>.\n+\n 2011-06-22  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/49497"}, {"sha": "e50d2f14dffc82966546a205969fcc4dec4a3869", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=78a8eb4edcc2352b7af778d2a3563825d8d72b36", "patch": "@@ -460,7 +460,6 @@ static unsigned int sparc_function_arg_boundary (enum machine_mode,\n \t\t\t\t\t\t const_tree);\n static int sparc_arg_partial_bytes (cumulative_args_t,\n \t\t\t\t    enum machine_mode, tree, bool);\n-static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n static bool sparc_frame_pointer_required (void);\n@@ -611,9 +610,6 @@ char sparc_hard_reg_printed[8];\n #undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n #define TARGET_VECTORIZE_PREFERRED_SIMD_MODE sparc_preferred_simd_mode\n \n-#undef TARGET_DWARF_HANDLE_FRAME_UNSPEC\n-#define TARGET_DWARF_HANDLE_FRAME_UNSPEC sparc_dwarf_handle_frame_unspec\n-\n #ifdef SUBTARGET_INSERT_ATTRIBUTES\n #undef TARGET_INSERT_ATTRIBUTES\n #define TARGET_INSERT_ATTRIBUTES SUBTARGET_INSERT_ATTRIBUTES\n@@ -4597,12 +4593,28 @@ emit_save_or_restore_local_in_regs (rtx base, int offset, sorr_act_t action)\n /* Generate a save_register_window insn.  */\n \n static rtx\n-gen_save_register_window (rtx increment)\n+emit_save_register_window (rtx increment)\n {\n-  if (TARGET_ARCH64)\n-    return gen_save_register_windowdi (increment);\n-  else\n-    return gen_save_register_windowsi (increment);\n+  rtx insn;\n+\n+  insn = emit_insn (gen_save_register_window_1 (increment));\n+  RTX_FRAME_RELATED_P (insn) = 1;\n+\n+  /* The return address (%i7) is saved in %o7.  */\n+  add_reg_note (insn, REG_CFA_REGISTER,\n+\t\tgen_rtx_SET (VOIDmode,\n+\t\t\t     gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),\n+\t\t\t     gen_rtx_REG (Pmode, INCOMING_RETURN_ADDR_REGNUM)));\n+\n+  /* The window save event.  */\n+  add_reg_note (insn, REG_CFA_WINDOW_SAVE, const0_rtx);\n+\n+  /* The CFA is %fp, the hard frame pointer.  */\n+  add_reg_note (insn, REG_CFA_DEF_CFA,\n+\t\tplus_constant (hard_frame_pointer_rtx,\n+\t\t\t       INCOMING_FRAME_SP_OFFSET));\n+\n+  return insn;\n }\n \n /* Generate a create_flat_frame_1 insn.  */\n@@ -4671,7 +4683,6 @@ sparc_expand_prologue (void)\n {\n   HOST_WIDE_INT size;\n   rtx insn;\n-  int i;\n \n   /* Compute a snapshot of current_function_uses_only_leaf_regs.  Relying\n      on the final value of the flag means deferring the prologue/epilogue\n@@ -4733,23 +4744,19 @@ sparc_expand_prologue (void)\n   else\n     {\n       if (size <= 4096)\n-\tinsn = emit_insn (gen_save_register_window (GEN_INT (-size)));\n+\temit_save_register_window (GEN_INT (-size));\n       else if (size <= 8192)\n \t{\n-\t  insn = emit_insn (gen_save_register_window (GEN_INT (-4096)));\n+\t  emit_save_register_window (GEN_INT (-4096));\n \t  /* %sp is not the CFA register anymore.  */\n \t  emit_insn (gen_stack_pointer_inc (GEN_INT (4096 - size)));\n \t}\n       else\n \t{\n \t  rtx reg = gen_rtx_REG (Pmode, 1);\n \t  emit_move_insn (reg, GEN_INT (-size));\n-\t  insn = emit_insn (gen_save_register_window (reg));\n+\t  emit_save_register_window (reg);\n \t}\n-\n-      RTX_FRAME_RELATED_P (insn) = 1;\n-      for (i=0; i < XVECLEN (PATTERN (insn), 0); i++)\n-        RTX_FRAME_RELATED_P (XVECEXP (PATTERN (insn), 0, i)) = 1;\n     }\n \n   if (sparc_leaf_function_p)\n@@ -10000,20 +10007,6 @@ get_some_local_dynamic_name_1 (rtx *px, void *data ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n-/* Handle the TARGET_DWARF_HANDLE_FRAME_UNSPEC hook.\n-\n-   This is called from dwarf2out.c to emit call frame instructions\n-   for frame-related insns containing UNSPECs and UNSPEC_VOLATILEs.  */\n-\n-static void\n-sparc_dwarf_handle_frame_unspec (const char *label,\n-\t\t\t\t rtx pattern ATTRIBUTE_UNUSED,\n-\t\t\t\t int index ATTRIBUTE_UNUSED)\n-{\n-  gcc_assert (index == UNSPECV_SAVEW);\n-  dwarf2out_window_save (label);\n-}\n-\n /* This is called from dwarf2out.c via TARGET_ASM_OUTPUT_DWARF_DTPREL.\n    We need to emit DTP-relative relocations.  */\n "}, {"sha": "017b689d47572db1164d06f04f8b131ff8ba7051", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=78a8eb4edcc2352b7af778d2a3563825d8d72b36", "patch": "@@ -6276,24 +6276,18 @@\n   DONE;\n })\n \n-;; The \"save register window\" insn is modelled as follows so that the DWARF-2\n-;; backend automatically emits the required call frame debugging information\n-;; while it is parsing it.  Therefore, the pattern should not be modified\n-;; without first studying the impact of the changes on the debug info.\n-;; [(set (%fp) (%sp))\n-;;  (set (%sp) (unspec_volatile [(%sp) (-frame_size)] UNSPECV_SAVEW))\n-;;  (set (%i7) (%o7))]\n-\n-(define_insn \"save_register_window<P:mode>\"\n-  [(set (reg:P 30) (reg:P 14))\n-   (set (reg:P 14) (unspec_volatile:P [(reg:P 14)\n-\t\t\t\t       (match_operand:P 0 \"arith_operand\" \"rI\")] UNSPECV_SAVEW))\n-   (set (reg:P 31) (reg:P 15))]\n+;; The \"save register window\" insn is modelled as follows.  The dwarf2\n+;; information is manually added in emit_save_register_window in sparc.c.\n+\n+(define_insn \"save_register_window_1\"\n+  [(unspec_volatile\n+\t[(match_operand 0 \"arith_operand\" \"rI\")]\n+\tUNSPECV_SAVEW)]\n   \"!TARGET_FLAT\"\n   \"save\\t%%sp, %0, %%sp\"\n   [(set_attr \"type\" \"savew\")])\n \n-;; Likewise for the \"create flat frame\" insns.  We need to use special insns\n+;; For the \"create flat frame\" insns, we need to use special insns\n ;; because %fp cannot be clobbered until after the frame is established (so\n ;; that it contains the live register window save area) and %i7 changed with\n ;; a simple move as it is a fixed register and the move would be eliminated."}, {"sha": "6d58a00dd634d98453e2f899368a4feb1afbcb1a", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=78a8eb4edcc2352b7af778d2a3563825d8d72b36", "patch": "@@ -1232,22 +1232,6 @@ reg_save (const char *label, unsigned int reg, unsigned int sreg, HOST_WIDE_INT\n   add_fde_cfi (label, cfi);\n }\n \n-/* Add the CFI for saving a register window.  LABEL is passed to reg_save.\n-   This CFI tells the unwinder that it needs to restore the window registers\n-   from the previous frame's window save area.\n-\n-   ??? Perhaps we should note in the CIE where windows are saved (instead of\n-   assuming 0(cfa)) and what registers are in the window.  */\n-\n-void\n-dwarf2out_window_save (const char *label)\n-{\n-  dw_cfi_ref cfi = new_cfi ();\n-\n-  cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n-  add_fde_cfi (label, cfi);\n-}\n-\n /* Entry point for saving a register to the stack.  REG is the GCC register\n    number.  LABEL and OFFSET are passed to reg_save.  */\n \n@@ -2104,6 +2088,19 @@ dwarf2out_frame_debug_cfa_restore (rtx reg, const char *label)\n   add_fde_cfi (label, cfi);\n }\n \n+/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_WINDOW_SAVE.\n+   ??? Perhaps we should note in the CIE where windows are saved (instead of\n+   assuming 0(cfa)) and what registers are in the window.  */\n+\n+static void\n+dwarf2out_frame_debug_cfa_window_save (const char *label)\n+{\n+  dw_cfi_ref cfi = new_cfi ();\n+\n+  cfi->dw_cfi_opc = DW_CFA_GNU_window_save;\n+  add_fde_cfi (label, cfi);\n+}\n+\n /* Record call frame debugging information for an expression EXPR,\n    which either sets SP or FP (adjusting how we calculate the frame\n    address) or saves a register to the stack or another register.\n@@ -2900,6 +2897,11 @@ dwarf2out_frame_debug (rtx insn, bool after_p)\n \thandled_one = true;\n \tbreak;\n \n+      case REG_CFA_WINDOW_SAVE:\n+\tdwarf2out_frame_debug_cfa_window_save (label);\n+\thandled_one = true;\n+\tbreak;\n+\n       default:\n \tbreak;\n       }"}, {"sha": "9924355f7721534b0364391c45f7ddc9673de06d", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=78a8eb4edcc2352b7af778d2a3563825d8d72b36", "patch": "@@ -160,6 +160,11 @@ REG_NOTE (CFA_RESTORE)\n    to the argument, if it is a MEM, it is ignored.  */\n REG_NOTE (CFA_SET_VDRAP)\n \n+/* Attached to insn that are RTX_FRAME_RELATED_P, indicating a window\n+   save operation, i.e. will result in a DW_CFA_GNU_window_save.\n+   The argument is ignored.  */\n+REG_NOTE (CFA_WINDOW_SAVE)\n+\n /* Indicates that REG holds the exception context for the function.\n    This context is shared by inline functions, so the code to acquire\n    the real exception context is delayed until after inlining.  */"}, {"sha": "20ba295a219ad52fecf2c0ee94621d54dc7ede63", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78a8eb4edcc2352b7af778d2a3563825d8d72b36/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=78a8eb4edcc2352b7af778d2a3563825d8d72b36", "patch": "@@ -5607,10 +5607,6 @@ extern char *dwarf2out_cfi_label (bool);\n \n extern void dwarf2out_def_cfa (const char *, unsigned, HOST_WIDE_INT);\n \n-/* Add the CFI for saving a register window.  */\n-\n-extern void dwarf2out_window_save (const char *);\n-\n /* Entry point for saving a register to the stack.  */\n \n extern void dwarf2out_reg_save (const char *, unsigned, HOST_WIDE_INT);"}]}