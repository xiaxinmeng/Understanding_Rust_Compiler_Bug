{"sha": "a019653eb25f5d200b7dc3724a30ec8cac31543c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAxOTY1M2ViMjVmNWQyMDBiN2RjMzcyNGEzMGVjOGNhYzMxNTQzYw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-18T20:42:08Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-18T20:42:08Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r343", "tree": {"sha": "7eeffca3eb8ec7a1f64cb61be5d02dfe436ec2f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eeffca3eb8ec7a1f64cb61be5d02dfe436ec2f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a019653eb25f5d200b7dc3724a30ec8cac31543c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a019653eb25f5d200b7dc3724a30ec8cac31543c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a019653eb25f5d200b7dc3724a30ec8cac31543c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a019653eb25f5d200b7dc3724a30ec8cac31543c/comments", "author": null, "committer": null, "parents": [{"sha": "ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef91d7e2b6f3823084998b1d984e0c4c10ff2c93"}], "stats": {"total": 143, "additions": 70, "deletions": 73}, "files": [{"sha": "67e51ddc12a17836090a2fe844b87428aee5ed54", "filename": "gcc/protoize.c", "status": "modified", "additions": 70, "deletions": 73, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a019653eb25f5d200b7dc3724a30ec8cac31543c/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a019653eb25f5d200b7dc3724a30ec8cac31543c/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=a019653eb25f5d200b7dc3724a30ec8cac31543c", "patch": "@@ -163,7 +163,7 @@ extern char *getcwd ();\n #ifndef abort\n extern VOLATILE void abort ();\n #endif\n-extern int kill();\n+extern int kill ();\n extern int creat ();\n #if 0 /* These conflict with stdio.h on some systems.  */\n extern int fprintf (FILE *, const char *, ...);\n@@ -186,17 +186,17 @@ extern int setjmp ();\n extern void longjmp ();\n #endif\n \n-extern char *   strcat();\n-extern int      strcmp();\n-extern char *   strcpy();\n+extern char *   strcat ();\n+extern int      strcmp ();\n+extern char *   strcpy ();\n #if 0 /* size_t from sys/types.h may fail to match GCC.\n \t If so, we would get a warning from this.\n \t So do without the prototype.  */\n-extern size_t   strlen(const char *);\n+extern size_t   strlen (const char *);\n #endif\n-extern int      strncmp();\n-extern char *   strncpy();\n-extern char *   strrchr();\n+extern int      strncmp ();\n+extern char *   strncpy ();\n+extern char *   strrchr ();\n \n #if !(defined (USG) || defined (VMS))\n extern int vfork ();\n@@ -205,7 +205,7 @@ extern int vfork ();\n extern int fork ();\n #endif /* !(defined (USG) || defined (VMS)) */\n \n-#endif /* !defined(POSIX) */\n+#endif /* !defined (POSIX) */\n \n /* Look for these where the `const' qualifier is intentionally cast aside.  */\n \n@@ -232,7 +232,7 @@ extern int fork ();\n \n #ifndef STD_PROTO_DIR\n #define STD_PROTO_DIR \"/usr/local/lib\"\n-#endif /* !defined(STD_PROTO_DIR) */\n+#endif /* !defined (STD_PROTO_DIR) */\n \n /* Suffix of aux_info files.  */\n \n@@ -259,7 +259,7 @@ static const char * const default_syscalls_dir = STD_PROTO_DIR;\n \n static char * syscalls_absolute_filename;\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n /* Type of the structure that holds information about macro unexpansions. */\n \n@@ -354,12 +354,12 @@ struct string_list *exclude_list;\n \n #ifdef UNPROTOIZE\n static const char * const other_var_style = \"stdarg\";\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n static const char * const other_var_style = \"varargs\";\n /* Note that this is a string containing the expansion of va_alist.\n    But in `main' we discard all but the first token.  */\n-static const char *varargs_style_indicator = STRINGIFY(va_alist);\n-#endif /* !defined(UNPROTOIZE) */\n+static const char *varargs_style_indicator = STRINGIFY (va_alist);\n+#endif /* !defined (UNPROTOIZE) */\n \n /* The following two types are used to create hash tables.  In this program,\n    there are two hash tables which are used to store and quickly lookup two\n@@ -458,10 +458,10 @@ struct def_dec_info_struct {\n   char\t        \tis_static;\t/* = 0 means visiblilty is \"extern\"  */\n   char\t\t\tis_implicit;\t/* != 0 for implicit func decl's */\n   char\t\t\twritten;\t/* != 0 means written for implicit */\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n   const char *\t\tformal_names;\t/* -> to list of names of formals */\n   const char *\t\tformal_decls;\t/* -> to string of formal declartions */\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n };\n \n /* Pointer to the tail component of the filename by which this program was\n@@ -478,12 +478,9 @@ static int errors = 0;\n /* ??? These comments should say what the flag mean as well as the options\n    that set them.  */\n \n-/* allow the user to pass the pathname of the gcc2 compiler as a\n-   command line option, instead of relying on the fact that 'gcc' in\n-   the path should be gcc2 */\n-\n-static char *compiler_pathname = \"gcc\";\n-\n+/* File name to use for running gcc.  Allows GCC 2 to be named\n+   something other than gcc.  */\n+static char *compiler_file_name = \"gcc\";\n \n static int version_flag = 0;\t\t/* Print our version number.  */\n static int quiet_flag = 0;\t\t/* Don't print messages normally.  */\n@@ -495,17 +492,17 @@ static const char ** compile_params = 0;\t/* Option string for gcc.  */\n #ifdef UNPROTOIZE\n static const char *indent_string = \"     \";\t/* Indentation for newly\n \t\t\t\t\t\t   inserted parm decls.  */\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n static int local_flag = 0;\t\t/* Insert new local decls (when?).  */\n static int global_flag = 0;\t\t/* set by -g option */\n static int cplusplus_flag = 0;\t\t/* Rename converted files to *.C.  */\n static const char* nondefault_syscalls_dir = 0; /* Dir to look for\n \t\t\t\t\t\t   SYSCALLS.c.X in.  */\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n /* An index into the compile_params array where we should insert the filename\n    parameter when we are ready to exec the C compiler.  A zero value indicates\n-   that we have not yet called munge_compile_params().  */\n+   that we have not yet called munge_compile_params.  */\n \n static int filename_index = 0;\n \n@@ -577,12 +574,12 @@ static char * repl_write_ptr;\n \n /* Pointer into the cleaned text buffer for the source file we are currently\n    converting.  This points to the first character of the line that we last\n-   did a \"seek_to_line()\" to (see below).  */\n+   did a \"seek_to_line\" to (see below).  */\n \n static const char *last_known_line_start;\n \n /* Number of the line (in the cleaned text buffer) that we last did a\n-   \"seek_to_line()\" to.  Will be one if we just read a new source file\n+   \"seek_to_line\" to.  Will be one if we just read a new source file\n    into the cleaned text buffer.  */\n \n static int last_known_line_number;\n@@ -778,10 +775,10 @@ usage ()\n #ifdef UNPROTOIZE\n   fprintf (stderr, \"%s: usage '%s [ -VqfnkN ] [ -i <istring> ] [ filename ... ]'\\n\",\n \t   pname, pname);\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n   fprintf (stderr, \"%s: usage '%s [ -VqfnkNlgC ] [ -B <diname> ] [ filename ... ]'\\n\",\n \t   pname, pname);\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n   exit (1);\n }\n \n@@ -903,7 +900,7 @@ is_syscalls_file (fi_p)\n   return (substr (fi_p->hash_entry->symbol, syscalls_filename) != NULL);\n }\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n /* Check to see if this file will need to have anything done to it on this\n    run.  If there is nothing in the given file which both needs conversion\n@@ -912,7 +909,7 @@ is_syscalls_file (fi_p)\n \n    Note that (for protoize) it is only valid to call this function *after*\n    the connections between declarations and definitions have all been made\n-   by connect_defs_and_decs().  */\n+   by connect_defs_and_decs.  */\n \n static int\n needs_to_be_converted (file_p)\n@@ -925,7 +922,7 @@ needs_to_be_converted (file_p)\n   if (is_syscalls_file (file_p))\n     return 0;\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   for (ddp = file_p->defs_decs; ddp; ddp = ddp->next_in_file)\n \n@@ -938,12 +935,12 @@ needs_to_be_converted (file_p)\n       /* ... and if this a definition or is a decl with an associated def ... */\n       && (ddp->is_func_def || (!ddp->is_func_def && ddp->definition))\n \n-#else /* defined(UNPROTOIZE) */\n+#else /* defined (UNPROTOIZE) */\n \n       /* ... and if we are unprotoizing and this function is in new style ... */\n       ddp->prototyped\n \n-#endif /* defined(UNPROTOIZE) */\n+#endif /* defined (UNPROTOIZE) */\n       )\n           /* ... then the containing file needs converting.  */\n           return -1;\n@@ -1110,7 +1107,7 @@ free_def_dec (p)\n         xfree (curr);\n       }\n   }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   xfree (p);\n }\n@@ -1426,7 +1423,7 @@ aux_info_corrupted ()\n }\n \n /* ??? This comment is vague.  Say what the condition is for.  */\n-/* Check to see that a condition is true.  This is kind of like an assert().  */\n+/* Check to see that a condition is true.  This is kind of like an assert.  */\n \n static void\n check_aux_info (cond)\n@@ -1526,7 +1523,7 @@ save_def_or_dec (l, is_syscalls)\n \n #ifndef UNPROTOIZE\n   def_dec_p->written = 0;\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   /* Start processing the line by picking off 5 pieces of information from\n      the left hand end of the line.  These are filename, line number,\n@@ -1591,7 +1588,7 @@ save_def_or_dec (l, is_syscalls)\n \n   def_dec_p->is_implicit = (*p == 'I');\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   p++;\n \n@@ -1605,7 +1602,7 @@ save_def_or_dec (l, is_syscalls)\n \n #ifndef UNPROTOIZE\n   def_dec_p->definition = 0;\t/* Fill this in later if protoizing.  */\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   check_aux_info (*p++ == ' ');\n   check_aux_info (*p++ == '*');\n@@ -1614,14 +1611,14 @@ save_def_or_dec (l, is_syscalls)\n \n #ifdef UNPROTOIZE\n   check_aux_info ((!strncmp (p, \"static\", 6)) || (!strncmp (p, \"extern\", 6)));\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n   if (!strncmp (p, \"static\", 6))\n     def_dec_p->is_static = -1;\n   else if (!strncmp (p, \"extern\", 6))\n     def_dec_p->is_static = 0;\n   else\n     check_aux_info (0);\t/* Didn't find either `extern' or `static'.  */\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   {\n     const char *ansi_start = p;\n@@ -1655,7 +1652,7 @@ save_def_or_dec (l, is_syscalls)\n \n #ifndef UNPROTOIZE\n   def_dec_p->f_list_chain = NULL;\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   for (;;)\n     {\n@@ -1673,7 +1670,7 @@ save_def_or_dec (l, is_syscalls)\n         cip->chain_next = def_dec_p->f_list_chain;\n         def_dec_p->f_list_chain = cip;\n       }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n       def_dec_p->f_list_count++;\n \n       p = left_paren_p - 2;\n@@ -1841,7 +1838,7 @@ save_def_or_dec (l, is_syscalls)\n       return;\n     }\n \n-#endif /* defined(UNPROTOIZE) */\n+#endif /* defined (UNPROTOIZE) */\n \n   /* Add this record to the head of the list of records pertaining to this\n      particular function name.  */\n@@ -1901,7 +1898,7 @@ munge_compile_params (params_list)\n   int param_count = 0;\n   const char *param;\n \n-  temp_params[param_count++] = compiler_pathname;\n+  temp_params[param_count++] = compiler_file_name;\n   for (;;)\n     {\n       while (isspace (*params_list))\n@@ -2301,7 +2298,7 @@ rename_c_file (hp)\n     }\n }\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \f\n /* Take the list of definitions and declarations attached to a particular\n    file_info node and reverse the order of the list.  This should get the\n@@ -2651,7 +2648,7 @@ connect_defs_and_decs (hp)\n            do not already have definitions.\n \n            Note that a trick is used here to prevent subsequent attempts to\n-           call find_static_definition() for a given function-name & file\n+           call find_static_definition for a given function-name & file\n            if the first such call returns NULL.  Essentially, we convert\n            these NULL return values to -1, and put the -1 into the definition\n            field for each other static declaration from the same file which\n@@ -2680,7 +2677,7 @@ connect_defs_and_decs (hp)\n       ((NONCONST def_dec_info *) dd_p)->definition = NULL;\n }\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n /* Give a pointer into the clean text buffer, return a number which is the\n    original source line number that the given pointer points into.  */\n@@ -2856,7 +2853,7 @@ other_variable_style_function (ansi_header)\n \n   return (int) substr (ansi_header, \"...\");\n \n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n \n   /* See if we have a varargs function, or a function which has varargs style\n      parameters or a varargs style return type.  */\n@@ -2877,7 +2874,7 @@ other_variable_style_function (ansi_header)\n           p = candidate + 1;\n     }\n   return 0;\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n }\n \n /* Do the editing operation specifically for a function \"declaration\".  Note\n@@ -2921,7 +2918,7 @@ edit_fn_declaration (def_dec_p, clean_text_p)\n       return;\n     }\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   /* Setup here to recover from confusing source code detected during this\n      particular \"edit\".  */\n@@ -3011,7 +3008,7 @@ edit_fn_declaration (def_dec_p, clean_text_p)\n \n #ifndef UNPROTOIZE\n   this_f_list_chain_item = definition->f_list_chain;\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   for (;;)\n     {\n@@ -3057,7 +3054,7 @@ edit_fn_declaration (def_dec_p, clean_text_p)\n \t\t     pname, def_dec_p->hash_entry->symbol);\n           check_source (0, end_formals);  /* leave the declaration intact */\n         }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n       clean_read_ptr = end_formals - 1;\n \n       /* Now see if it looks like there may be another formals list associated\n@@ -3078,7 +3075,7 @@ edit_fn_declaration (def_dec_p, clean_text_p)\n \t\t\t   pname, def_dec_p->hash_entry->symbol);\n                 check_source (0, start_formals); /* leave the decl intact */\n               }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n             break;\n   \n           }\n@@ -3185,7 +3182,7 @@ edit_formals_lists (end_formals, f_list_count, def_dec_p)\n #ifdef UNPROTOIZE\n   if (f_list_count == 0)\n     output_string (def_dec_p->formal_names);\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n   {\n     unsigned f_list_depth;\n     const f_list_chain_item *flci_p = def_dec_p->f_list_chain;\n@@ -3198,7 +3195,7 @@ edit_formals_lists (end_formals, f_list_count, def_dec_p)\n       flci_p = flci_p->chain_next;\n     output_string (flci_p->formals_list);\n   }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   clean_read_ptr = end_formals - 1;\n   return 0;\n@@ -3269,7 +3266,7 @@ find_rightmost_formals_list (clean_text_p)\n     check_source (ch == '{', l_brace_p);\n   }\n \n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n \n   /* Now scan backwards while looking for the right end of the rightmost\n      formals list associated with this function definition.  */\n@@ -3312,7 +3309,7 @@ find_rightmost_formals_list (clean_text_p)\n       check_source (--end_formals > clean_read_ptr, 0);\n     }\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   return end_formals;\n }\n@@ -3521,7 +3518,7 @@ add_global_decls (file_p, clean_text_p)\n       ((NONCONST def_dec_info *) dd_p->definition)->written = 0;\n }\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n /* Do the editing operation specifically for a function \"definition\".  Note\n    that editing operations for function \"declarations\" are handled by a\n@@ -3618,7 +3615,7 @@ edit_fn_definition (def_dec_p, clean_text_p)\n     if (!had_newlines)\n       output_string (\"\\n\");\n   }\n-#else /* !defined(UNPROTOIZE) */\n+#else /* !defined (UNPROTOIZE) */\n   /* If we are protoizing, there may be some flotsum & jetsum (like comments\n      and preprocessing directives) after the old formals list but before\n      the following { and we would like to preserve that stuff while effectively\n@@ -3664,7 +3661,7 @@ edit_fn_definition (def_dec_p, clean_text_p)\n         output_string (\" \");\n     clean_read_ptr = start_body - 1;\n   }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n }\n \n /* Clean up the clean text buffer.  Do this by converting comments and\n@@ -3962,7 +3959,7 @@ edit_file (hp)\n              gentile way of prodding the user to convert his \"system\"\n              include files to prototype format.  */\n           && !in_system_include_dir (convert_filename)\n-#endif /* defined(UNPROTOIZE) */\n+#endif /* defined (UNPROTOIZE) */\n           )\n         fprintf (stderr, \"%s: file `%s' not converted\\n\",\n \t\t pname, shortpath (NULL, convert_filename));\n@@ -4123,7 +4120,7 @@ edit_file (hp)\n          || (!def_dec_p->is_func_def && !def_dec_p->definition))\n           continue;\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n         if (def_dec_p->is_func_def)\n           edit_fn_definition (def_dec_p, clean_text_p);\n@@ -4132,7 +4129,7 @@ edit_file (hp)\n   \tif (def_dec_p->is_implicit)\n   \t  add_local_decl (def_dec_p, clean_text_p);\n   \telse\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n             edit_fn_declaration (def_dec_p, clean_text_p);\n       }\n   }\n@@ -4249,7 +4246,7 @@ do_processing ()\n \n #ifndef UNPROTOIZE\n   int syscalls_len;\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   /* One-by-one, check (and create if necessary), open, and read all of the\n      stuff in each aux_info file.  After reading each aux_info file, the\n@@ -4292,7 +4289,7 @@ do_processing ()\n \n   process_aux_info_file (syscalls_absolute_filename, 1, 1);\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   /* When we first read in all of the information from the aux_info files\n      we saved in it decending line number order, because that was likely to\n@@ -4314,7 +4311,7 @@ do_processing ()\n \n   visit_each_hash_node (function_name_primary, connect_defs_and_decs);\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   /* Now convert each file that can be converted (and needs to be).  */\n \n@@ -4328,13 +4325,13 @@ do_processing ()\n   if (cplusplus_flag && !nochange_flag)\n     visit_each_hash_node (filename_primary, rename_c_file);\n \n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n }\n \f\n static struct option longopts[] =\n {\n   {\"version\", 0, 0, 'V'},\n-  {\"pathname\", 0, 0, 'p'},\n+  {\"file_name\", 0, 0, 'p'},\n   {\"quiet\", 0, 0, 'q'},\n   {\"silent\", 0, 0, 'q'},\n   {\"force\", 0, 0, 'f'},\n@@ -4397,7 +4394,7 @@ main (argc, argv)\n       switch (c)\n \t{\n \tcase 'p':\n-\t  compiler_pathname = optarg;\n+\t  compiler_file_name = optarg;\n \t  break;\n \tcase 'd':\n \t  directory_list\n@@ -4435,7 +4432,7 @@ main (argc, argv)\n \tcase 'i':\n \t  indent_string = optarg;\n \t  break;\n-#else\t\t\t\t/* !defined(UNPROTOIZE) */\n+#else\t\t\t\t/* !defined (UNPROTOIZE) */\n \tcase 'l':\n \t  local_flag = 1;\n \t  break;\n@@ -4448,7 +4445,7 @@ main (argc, argv)\n \tcase 'B':\n \t  nondefault_syscalls_dir = optarg;\n \t  break;\n-#endif\t\t\t\t/* !defined(UNPROTOIZE) */\n+#endif\t\t\t\t/* !defined (UNPROTOIZE) */\n \tdefault:\n \t  usage ();\n \t}\n@@ -4489,7 +4486,7 @@ main (argc, argv)\n       varargs_style_indicator = savestring (varargs_style_indicator,\n \t\t\t\t\t    cp - varargs_style_indicator);\n   }\n-#endif /* !defined(UNPROTOIZE) */\n+#endif /* !defined (UNPROTOIZE) */\n \n   if (errors)\n     usage ();"}]}