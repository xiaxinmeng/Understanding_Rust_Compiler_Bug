{"sha": "4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGFiM2NiNjU5N2M2YTAyZDY3OTU5NzVjM2FiZjhmMWQ0MDEyYThjZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-10T21:05:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-12-10T21:05:49Z"}, "message": "(pedantic_omit_one_operand): New function.\n\n(fold, case COND_EXPR): Use it instead of calling pedantic_non_lvalue on the\nresult of omit_one_operand.\n\nFrom-SVN: r8641", "tree": {"sha": "202ebf142edada8be0094555e176a13c7470df3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202ebf142edada8be0094555e176a13c7470df3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce/comments", "author": null, "committer": null, "parents": [{"sha": "5f8997b9578b4843f6d9e8e24b45191993c8166c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8997b9578b4843f6d9e8e24b45191993c8166c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8997b9578b4843f6d9e8e24b45191993c8166c"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "ab717b8f2afd1b06715021aadb65b50c8eef4de1", "filename": "gcc/fold-const.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4ab3cb6597c6a02d6795975c3abf8f1d4012a8ce", "patch": "@@ -63,6 +63,7 @@ static int operand_equal_for_comparison_p PROTO((tree, tree, tree));\n static int twoval_comparison_p PROTO((tree, tree *, tree *, int *));\n static tree eval_subst\tPROTO((tree, tree, tree, tree, tree));\n static tree omit_one_operand PROTO((tree, tree, tree));\n+static tree pedantic_omit_one_operand PROTO((tree, tree, tree));\n static tree distribute_bit_expr PROTO((enum tree_code, tree, tree, tree));\n static tree make_bit_field_ref PROTO((tree, tree, int, int, int));\n static tree optimize_bit_field_compare PROTO((enum tree_code, tree,\n@@ -1997,6 +1998,22 @@ omit_one_operand (type, result, omitted)\n \n   return non_lvalue (t);\n }\n+\n+/* Similar, but call pedantic_non_lvalue instead of non_lvalue.  */\n+\n+static tree\n+pedantic_omit_one_operand (type, result, omitted)\n+     tree type, result, omitted;\n+{\n+  tree t = convert (type, result);\n+\n+  if (TREE_SIDE_EFFECTS (omitted))\n+    return build (COMPOUND_EXPR, type, omitted, t);\n+\n+  return pedantic_non_lvalue (t);\n+}\n+\n+\n \f\n /* Return a simplified tree node for the truth-negation of ARG.  This\n    never alters ARG itself.  We assume that ARG is an operation that\n@@ -4679,7 +4696,7 @@ fold (expr)\n \treturn pedantic_non_lvalue\n \t  (TREE_OPERAND (t, (integer_zerop (arg0) ? 2 : 1)));\n       else if (operand_equal_p (arg1, TREE_OPERAND (expr, 2), 0))\n-\treturn pedantic_non_lvalue (omit_one_operand (type, arg1, arg0));\n+\treturn pedantic_omit_one_operand (type, arg1, arg0);\n \n       /* If the second operand is zero, invert the comparison and swap\n \t the second and third operands.  Likewise if the second operand"}]}