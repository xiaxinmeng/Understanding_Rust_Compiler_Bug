{"sha": "fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3M2EzMzI4NGQyM2M1YTdkOGQ4ZWI1YjEzZTM3NDU0NDAxYjZjNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-11-08T08:06:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-11-08T08:06:42Z"}, "message": "re PR tree-optimization/78205 (BB vectorization confused by too large load groups)\n\n2016-11-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/78205\n\t* tree-vect-stmts.c (vectorizable_load): Move check whether\n\twe may run into gaps when BB vectorizing SLP permutations ...\n\t* tree-vect-slp.c (vect_supported_load_permutation_p): ...\n\there where we can do a more precise check.\n\n\t* gcc.dg/vect/bb-slp-pr78205.c: New testcase.\n\nFrom-SVN: r241956", "tree": {"sha": "3d6f2b801388eaa2f83d00e53e161e87ce062ae9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d6f2b801388eaa2f83d00e53e161e87ce062ae9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed053eb8240556e7953ff865c428b784b6546717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed053eb8240556e7953ff865c428b784b6546717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed053eb8240556e7953ff865c428b784b6546717"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "59d55154410b4867320b02a9653bc83733d405fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "patch": "@@ -1,3 +1,11 @@\n+2016-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78205\n+\t* tree-vect-stmts.c (vectorizable_load): Move check whether\n+\twe may run into gaps when BB vectorizing SLP permutations ...\n+\t* tree-vect-slp.c (vect_supported_load_permutation_p): ...\n+\there where we can do a more precise check.\n+\n 2016-11-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78224"}, {"sha": "acc09f38367f952535aed644445f8da823f52dfe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "patch": "@@ -1,3 +1,8 @@\n+2016-11-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/78205\n+\t* gcc.dg/vect/bb-slp-pr78205.c: New testcase.\n+\n 2016-11-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78224"}, {"sha": "e02502a3fc1eb338df2a85071c6141de6e29ebc1", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr78205.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr78205.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr78205.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr78205.c?ref=fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+/* { dg-additional-options \"-fdump-tree-optimized\" } */\n+\n+double x[2], a[4], b[4], c[5];\n+\n+void foo ()\n+{\n+  a[0] = c[0];\n+  a[1] = c[1];\n+  a[2] = c[0];\n+  a[3] = c[1];\n+  b[0] = c[2];\n+  b[1] = c[3];\n+  b[2] = c[2];\n+  b[3] = c[3];\n+  x[0] = c[4];\n+  x[1] = c[4];\n+}\n+\n+/* We may not vectorize the store to x[] as it accesses c out-of bounds\n+   but we do want to vectorize the other two store groups.  */\n+\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp2\" } } */\n+/* { dg-final { scan-tree-dump-times \"x\\\\\\[\\[0-1\\]\\\\\\] = \" 2 \"optimized\" } } */"}, {"sha": "8d547681913dff636474dc89951f3d6abce20b25", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "patch": "@@ -1459,6 +1459,25 @@ vect_supported_load_permutation_p (slp_instance slp_instn)\n \t    SLP_TREE_LOAD_PERMUTATION (node).release ();\n \t  else\n \t    {\n+\t      stmt_vec_info group_info\n+\t\t= vinfo_for_stmt (SLP_TREE_SCALAR_STMTS (node)[0]);\n+\t      group_info = vinfo_for_stmt (GROUP_FIRST_ELEMENT (group_info));\n+\t      unsigned nunits\n+\t\t= TYPE_VECTOR_SUBPARTS (STMT_VINFO_VECTYPE (group_info));\n+\t      unsigned k, maxk = 0;\n+\t      FOR_EACH_VEC_ELT (SLP_TREE_LOAD_PERMUTATION (node), j, k)\n+\t\tif (k > maxk)\n+\t\t  maxk = k;\n+\t      /* In BB vectorization we may not actually use a loaded vector\n+\t\t accessing elements in excess of GROUP_SIZE.  */\n+\t      if (maxk >= (GROUP_SIZE (group_info) & ~(nunits - 1)))\n+\t\t{\n+\t\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t\t   \"BB vectorization with gaps at the end of \"\n+\t\t\t\t   \"a load is not supported\\n\");\n+\t\t  return false;\n+\t\t}\n+\n \t      /* Verify the permutation can be generated.  */\n \t      vec<tree> tem;\n \t      unsigned n_perms;"}, {"sha": "15aec2197b33618f652c8c60a62cf48aa657ec2f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe73a33284d23c5a7d8d8eb5b13e37454401b6c4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=fe73a33284d23c5a7d8d8eb5b13e37454401b6c4", "patch": "@@ -6548,18 +6548,6 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       if (slp && SLP_TREE_LOAD_PERMUTATION (slp_node).exists ())\n \tslp_perm = true;\n \n-      /* ???  The following is overly pessimistic (as well as the loop\n-         case above) in the case we can statically determine the excess\n-\t elements loaded are within the bounds of a decl that is accessed.\n-\t Likewise for BB vectorizations using masked loads is a possibility.  */\n-      if (bb_vinfo && slp_perm && group_size % nunits != 0)\n-\t{\n-\t  dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t   \"BB vectorization with gaps at the end of a load \"\n-\t\t\t   \"is not supported\\n\");\n-\t  return false;\n-\t}\n-\n       /* Invalidate assumptions made by dependence analysis when vectorization\n \t on the unrolled body effectively re-orders stmts.  */\n       if (!PURE_SLP_STMT (stmt_info)"}]}