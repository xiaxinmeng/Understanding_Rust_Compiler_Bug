{"sha": "4eea1672584f6ff384865ccf3e93194a85b3eb99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVlYTE2NzI1ODRmNmZmMzg0ODY1Y2NmM2U5MzE5NGE4NWIzZWI5OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-14T10:00:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-14T10:00:12Z"}, "message": "reload1.c (emit_reload_insns): Also find equivalent mems for subregs of pseudos.\n\n        * reload1.c (emit_reload_insns): Also find equivalent mems\n        for subregs of pseudos.\n\nFrom-SVN: r26444", "tree": {"sha": "aefb588f66d3ba7808ea9b47c98f91be8b213c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aefb588f66d3ba7808ea9b47c98f91be8b213c0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eea1672584f6ff384865ccf3e93194a85b3eb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eea1672584f6ff384865ccf3e93194a85b3eb99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eea1672584f6ff384865ccf3e93194a85b3eb99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eea1672584f6ff384865ccf3e93194a85b3eb99/comments", "author": null, "committer": null, "parents": [{"sha": "c5fb6d4a79f2f7f8404089337dd01977134d16e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5fb6d4a79f2f7f8404089337dd01977134d16e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5fb6d4a79f2f7f8404089337dd01977134d16e6"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "3990cc140b18f087efb76b9437d18bf4ea6e596b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eea1672584f6ff384865ccf3e93194a85b3eb99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eea1672584f6ff384865ccf3e93194a85b3eb99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4eea1672584f6ff384865ccf3e93194a85b3eb99", "patch": "@@ -1,3 +1,8 @@\n+Wed Apr 14 09:59:38 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* reload1.c (emit_reload_insns): Also find equivalent mems\n+\tfor subregs of pseudos.\n+\n Wed Apr 14 09:39:20 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* i386.md (neghi): Use the whole register when widening the op."}, {"sha": "c566d3819d017d95bb01e937b9781f558945af41", "filename": "gcc/reload1.c", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eea1672584f6ff384865ccf3e93194a85b3eb99/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eea1672584f6ff384865ccf3e93194a85b3eb99/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=4eea1672584f6ff384865ccf3e93194a85b3eb99", "patch": "@@ -6865,6 +6865,7 @@ emit_reload_insns (chain)\n \t\t  int secondary_reload = reload_secondary_in_reload[j];\n \t\t  rtx real_oldequiv = oldequiv;\n \t\t  rtx real_old = old;\n+\t\t  rtx tmp;\n \n \t\t  /* If OLDEQUIV is a pseudo with a MEM, get the real MEM\n \t\t     and similarly for OLD.\n@@ -6873,30 +6874,42 @@ emit_reload_insns (chain)\n \t\t     equivalent MEM, we must fall back to reload_in, which\n \t\t     will have all the necessary substitutions registered.\n \t\t     Likewise for a pseudo that can't be replaced with its\n-\t\t     equivalent constant.  */\n+\t\t     equivalent constant. \n+\n+\t\t     Take extra care for subregs of such pseudos.  Note that\n+\t\t     we cannot use reg_equiv_mem in this case because it is\n+\t\t     not in the right mode.  */\n \t\t\t\t\n-\t\t  if (GET_CODE (oldequiv) == REG\n-\t\t      && REGNO (oldequiv) >= FIRST_PSEUDO_REGISTER\n-\t\t      && (reg_equiv_memory_loc[REGNO (oldequiv)] != 0\n-\t\t\t  || reg_equiv_constant[REGNO (oldequiv)] != 0))\n+\t\t  tmp = oldequiv;\n+\t\t  if (GET_CODE (tmp) == SUBREG)\n+\t\t    tmp = SUBREG_REG (tmp);\n+\t\t  if (GET_CODE (tmp) == REG\n+\t\t      && REGNO (tmp) >= FIRST_PSEUDO_REGISTER\n+\t\t      && (reg_equiv_memory_loc[REGNO (tmp)] != 0\n+\t\t\t  || reg_equiv_constant[REGNO (tmp)] != 0))\n \t\t    {\n-\t\t      if (! reg_equiv_mem[REGNO (oldequiv)]\n-\t\t\t  || num_not_at_initial_offset)\n+\t\t      if (! reg_equiv_mem[REGNO (tmp)]\n+\t\t\t  || num_not_at_initial_offset\n+\t\t\t  || GET_CODE (oldequiv) == SUBREG)\n \t\t\treal_oldequiv = reload_in[j];\n \t\t      else\n-\t\t\treal_oldequiv = reg_equiv_mem[REGNO (oldequiv)];\n+\t\t\treal_oldequiv = reg_equiv_mem[REGNO (tmp)];\n \t\t    }\n \n-\t\t  if (GET_CODE (old) == REG\n-\t\t      && REGNO (old) >= FIRST_PSEUDO_REGISTER\n-\t\t      && (reg_equiv_memory_loc[REGNO (old)] != 0\n-\t\t\t  || reg_equiv_constant[REGNO (old)] != 0))\n+\t\t  tmp = old;\n+\t\t  if (GET_CODE (tmp) == SUBREG)\n+\t\t    tmp = SUBREG_REG (tmp);\n+\t\t  if (GET_CODE (tmp) == REG\n+\t\t      && REGNO (tmp) >= FIRST_PSEUDO_REGISTER\n+\t\t      && (reg_equiv_memory_loc[REGNO (tmp)] != 0\n+\t\t\t  || reg_equiv_constant[REGNO (tmp)] != 0))\n \t\t    {\n-\t\t      if (! reg_equiv_mem[REGNO (old)]\n-\t\t\t  || num_not_at_initial_offset)\n+\t\t      if (! reg_equiv_mem[REGNO (tmp)]\n+\t\t\t  || num_not_at_initial_offset\n+\t\t\t  || GET_CODE (old) == SUBREG)\n \t\t\treal_old = reload_in[j];\n \t\t      else\n-\t\t\treal_old = reg_equiv_mem[REGNO (old)];\n+\t\t\treal_old = reg_equiv_mem[REGNO (tmp)];\n \t\t    }\n \n \t\t  second_reload_reg = reload_reg_rtx[secondary_reload];"}]}