{"sha": "51e471ae61b6a9fe672fe92e00edacabf69f55a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFlNDcxYWU2MWI2YTlmZTY3MmZlOTJlMDBlZGFjYWJmNjlmNTVhNA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-03-25T17:23:31Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-03-25T17:23:31Z"}, "message": "extend.texi (Common Type Attributes): Document vector_size.\n\ngcc/ChangeLog:\n\t* doc/extend.texi (Common Type Attributes): Document vector_size.\n\t(Common Variable Attributes): Mention size constraint.  Correct\n\tquoting and typos.\n\t(Vector Extensions): Use @dfn when defining bas type.  Clarify\n\tbase type and size constraints.\n\nFrom-SVN: r269920", "tree": {"sha": "8096f7771dbc0c1f4672a628878157c75e04f1cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8096f7771dbc0c1f4672a628878157c75e04f1cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51e471ae61b6a9fe672fe92e00edacabf69f55a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e471ae61b6a9fe672fe92e00edacabf69f55a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51e471ae61b6a9fe672fe92e00edacabf69f55a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51e471ae61b6a9fe672fe92e00edacabf69f55a4/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf8c1b11d560b377c46177d4bcfe146c8b220587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8c1b11d560b377c46177d4bcfe146c8b220587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8c1b11d560b377c46177d4bcfe146c8b220587"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "62c23d45a5a1bf8ac1b136fbbfe10812181052da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e471ae61b6a9fe672fe92e00edacabf69f55a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e471ae61b6a9fe672fe92e00edacabf69f55a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51e471ae61b6a9fe672fe92e00edacabf69f55a4", "patch": "@@ -1,3 +1,11 @@\n+2019-03-25  Martin Sebor  <msebor@redhat.com>\n+\n+\t* doc/extend.texi (Common Type Attributes): Document vector_size.\n+\t(Common Variable Attributes): Mention size constraint.  Correct\n+\tquoting and typos.\n+\t(Vector Extensions): Use @dfn when defining bas type.  Clarify\n+\tbase type and size constraints.\n+\n 2019-03-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/89789\n@@ -60,7 +68,7 @@\n \trescans.  Reprocess blocks as needed, calling df_analyze before\n \treprocessing.  Always call df_analyze before fixing up debug bind\n \tinsns.\n-\t\n+\n 2019-03-23  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/xmmintrin.h (_mm_movemask_pi8): Implement for 32-bit\n@@ -5203,7 +5211,7 @@\n \tPR tree-opt/86020\n \tRevert:\n \t2017-05-22  Jan Hubicka  <hubicka@ucw.cz>\n-\t\n+\n         * ipa-inline.c (edge_badness): Use inlined_time instead of\n         inline_summaries->get.\n "}, {"sha": "ef7adb6a9c0fe1abd769e237fd8d0ce4c614aef8", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 45, "deletions": 8, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51e471ae61b6a9fe672fe92e00edacabf69f55a4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51e471ae61b6a9fe672fe92e00edacabf69f55a4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=51e471ae61b6a9fe672fe92e00edacabf69f55a4", "patch": "@@ -7041,19 +7041,23 @@ class itself is instantiated.\n \n @item vector_size (@var{bytes})\n @cindex @code{vector_size} variable attribute\n-This attribute specifies the vector size for the variable, measured in\n-bytes.  For example, the declaration:\n+This attribute specifies the vector size for the type of the declared\n+variable, measured in bytes.  The type to which it applies is known as\n+the @dfn{base type}.  The @var{bytes} argument must be a positive\n+power-of-two multiple of the base type size.  For example, the declaration:\n \n @smallexample\n int foo __attribute__ ((vector_size (16)));\n @end smallexample\n \n @noindent\n causes the compiler to set the mode for @code{foo}, to be 16 bytes,\n-divided into @code{int} sized units.  Assuming a 32-bit int (a vector of\n-4 units of 4 bytes), the corresponding mode of @code{foo} is V4SI@.\n+divided into @code{int} sized units.  Assuming a 32-bit @code{int},\n+@code{foo}'s type is a vector of four units of four bytes each, and\n+the corresponding mode of @code{foo} is @code{V4SI}.\n+@xref{Vector Extensions} for details of manipulating vector variables.\n \n-This attribute is only applicable to integral and float scalars,\n+This attribute is only applicable to integral and floating scalars,\n although arrays, pointers, and function return values are allowed in\n conjunction with this construct.\n \n@@ -8116,6 +8120,39 @@ the case with lock or thread classes, which are usually defined and then\n not referenced, but contain constructors and destructors that have\n nontrivial bookkeeping functions.\n \n+@item vector_size (@var{bytes})\n+@cindex @code{vector_size} type attribute\n+This attribute specifies the vector size for the type, measured in bytes.\n+The type to which it applies is known as the @dfn{base type}.  The @var{bytes}\n+argument must be a positive power-of-two multiple of the base type size.  For\n+example, the following declarations:\n+\n+@smallexample\n+typedef __attribute__ ((vector_size (32))) int int_vec32_t ;\n+typedef __attribute__ ((vector_size (32))) int* int_vec32_ptr_t;\n+typedef __attribute__ ((vector_size (32))) int int_vec32_arr3_t[3];\n+@end smallexample\n+\n+@noindent\n+define @code{int_vec32_t} to be a 32-byte vector type composed of @code{int}\n+sized units.  With @code{int} having a size of 4 bytes, the type defines\n+a vector of eight units, four bytes each.  The mode of variables of type\n+@code{int_vec32_t} is @code{V8SI}.  @code{int_vec32_ptr_t} is then defined\n+to be a pointer to such a vector type, and @code{int_vec32_arr3_t} to be\n+an array of three such vectors.  @xref{Vector Extensions} for details of\n+manipulating objects of vector types.\n+\n+This attribute is only applicable to integral and floating scalar types.\n+In function declarations the attribute applies to the function return\n+type.\n+\n+For example, the following:\n+@smallexample\n+__attribute__ ((vector_size (16))) float get_flt_vec16 (void);\n+@end smallexample\n+declares @code{get_flt_vec16} to be a function returning a 16-byte vector\n+with the base type @code{float}.\n+\n @item visibility\n @cindex @code{visibility} type attribute\n In C++, attribute visibility (@pxref{Function Attributes}) can also be\n@@ -10883,17 +10920,17 @@ typedef int v4si __attribute__ ((vector_size (16)));\n @end smallexample\n \n @noindent\n-The @code{int} type specifies the base type, while the attribute specifies\n+The @code{int} type specifies the @dfn{base type}, while the attribute specifies\n the vector size for the variable, measured in bytes.  For example, the\n declaration above causes the compiler to set the mode for the @code{v4si}\n type to be 16 bytes wide and divided into @code{int} sized units.  For\n a 32-bit @code{int} this means a vector of 4 units of 4 bytes, and the\n corresponding mode of @code{foo} is @acronym{V4SI}.\n \n The @code{vector_size} attribute is only applicable to integral and\n-float scalars, although arrays, pointers, and function return values\n+floating scalars, although arrays, pointers, and function return values\n are allowed in conjunction with this construct. Only sizes that are\n-a power of two are currently allowed.\n+positive power-of-two multiples of the base type size are currently allowed.\n \n All the basic integer types can be used as base types, both as signed\n and as unsigned: @code{char}, @code{short}, @code{int}, @code{long},"}]}