{"sha": "0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFlNjI0MmZlZGZiNGE0ZjdhYzBmNmU3MmViZDM3ODg3MTVlMWNiMg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-10T13:03:06Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-10T13:03:06Z"}, "message": "trans-expr.c (expr_is_variable): New function taking non-copying intrinsic functions into account.\n\n2010-09-10  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* trans-expr.c (expr_is_variable): New function taking non-copying\n\tintrinsic functions into account.\n\t(gfc_trans_assignment_1): Use expr_is_variable.\n\nFrom-SVN: r164169", "tree": {"sha": "ff25399536bfae033545afa7e8e3e5b5c30977c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff25399536bfae033545afa7e8e3e5b5c30977c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2/comments", "author": null, "committer": null, "parents": [{"sha": "a5ad78bbcd97ca09a79505b06582824c09cdf8da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5ad78bbcd97ca09a79505b06582824c09cdf8da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5ad78bbcd97ca09a79505b06582824c09cdf8da"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "71d7c9ebddb11c98b6385b003959f663ecf85c23", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2", "patch": "@@ -1,3 +1,9 @@\n+2010-09-10  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-expr.c (expr_is_variable): New function taking non-copying\n+\tintrinsic functions into account.\n+\t(gfc_trans_assignment_1): Use expr_is_variable.\n+\n 2010-09-10  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* trans-array.c (gfc_conv_loop_setup): Access the shape along the"}, {"sha": "8d4295fce8fba6ee704f91d5c4e3506bcd747a44", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=0ae6242fedfb4a4f7ac0f6e72ebd3788715e1cb2", "patch": "@@ -5536,6 +5536,27 @@ gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n }\n \n \n+/* Tells whether the expression is to be treated as a variable reference.  */\n+\n+static bool\n+expr_is_variable (gfc_expr *expr)\n+{\n+  gfc_expr *arg;\n+\n+  if (expr->expr_type == EXPR_VARIABLE)\n+    return true;\n+\n+  arg = gfc_get_noncopying_intrinsic_argument (expr);\n+  if (arg)\n+    {\n+      gcc_assert (expr->value.function.isym->id == GFC_ISYM_TRANSPOSE);\n+      return expr_is_variable (arg);\n+    }\n+\n+  return false;\n+}\n+\n+\n /* Subroutine of gfc_trans_assignment that actually scalarizes the\n    assignment.  EXPR1 is the destination/LHS and EXPR2 is the source/RHS.\n    init_flag indicates initialization expressions and dealloc that no\n@@ -5661,7 +5682,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      must have its components deallocated afterwards.  */\n   scalar_to_array = (expr2->ts.type == BT_DERIVED\n \t\t       && expr2->ts.u.derived->attr.alloc_comp\n-\t\t       && expr2->expr_type != EXPR_VARIABLE\n+\t\t       && !expr_is_variable (expr2)\n \t\t       && !gfc_is_constant_expr (expr2)\n \t\t       && expr1->rank && !expr2->rank);\n   if (scalar_to_array && dealloc)\n@@ -5672,8 +5693,8 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n \n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n \t\t\t\t l_is_temp || init_flag,\n-\t\t\t\t (expr2->expr_type == EXPR_VARIABLE)\n-\t\t\t\t    || scalar_to_array, dealloc);\n+\t\t\t\t expr_is_variable (expr2) || scalar_to_array,\n+\t\t\t\t dealloc);\n   gfc_add_expr_to_block (&body, tmp);\n \n   if (lss == gfc_ss_terminator)"}]}