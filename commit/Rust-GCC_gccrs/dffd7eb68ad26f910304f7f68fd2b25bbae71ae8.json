{"sha": "dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZmZDdlYjY4YWQyNmY5MTAzMDRmN2Y2OGZkMmIyNWJiYWU3MWFlOA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-04-01T20:26:18Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-04-01T20:26:18Z"}, "message": "c-decl.c (grokdeclarator): Update.\n\n\t* c-decl.c (grokdeclarator): Update.\n\t* c-lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n\t* c-tree.h (c_mark_addressable): New.\n\t* c-typeck.c (default_function_array_conversion, build_unary_op,\n\tbuild_array_ref, convert_for_assignment): Update.\n\t(mark_addressable): Rename.\n\t* calls.c (try_to_integrate, expand_call): Use langhook.\n\t* expr.c (expand_expr): Use langhook.\n\t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.h (struct lang_hooks): New hook.\n\t* stmt.c (expand_asm_operands): Use langhook.\n\t* tree.h (mark_addressable): Remove.\nada:\n\t* decl.c (gnat_to_gnu_entity): Update.\n\t* gigi.h (mark_addressable): Rename.\n\t* misc.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n\t* trans.c (tree_transform): Update.\n\t* utils.c (create_var_decl): Update.\n\t* util2.c (build_binary_op, build_unary_op,\n\tfill_vms_descriptor): Update.\n\t(mark_addressable): Rename, update.\ncp:\n\t* call.c (build_addr_func): Update.\n\t* class.c (resolve_address_of_overloaded_function): Update.\n\t* cp-lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n\t* cp-tree.h (cxx_mark_addressable): New.\n\t* decl.c (register_dtor_fn, cxx_maybe_build_cleanup): Update.\n\t* decl2.c (build_cleanup): Update.\n\t* except.c (build_throw): Update.\n\t* init.c (resolve_offset_ref): Update.\n\t* pt.c (convert_nontype_argument): Update.\n\t* semantics.c (finish_asm_stmt, simplify_affr_init_exprs_r): Update.\n\t* typeck.c (decay_conversion, build_array_ref, build_unary_op,\n\tunary_complex_lvalue): Update.\n\t(mark_addressable): Rename.\nf:\n\t* com.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n\t(mark_addressable): Rename.\n\t(ffecom_arrayref_, ffecom_1): Update.\njava:\n\t* java-tree.h (java_mark_addressable): New.\n\t* lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n\t* typeck.c (mark_addressable): Rename, update.\nobjc:\n\t* objc-lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n\nFrom-SVN: r51705", "tree": {"sha": "c7580c1e88743ac267d338426669e9cd12ea3bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7580c1e88743ac267d338426669e9cd12ea3bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/comments", "author": null, "committer": null, "parents": [{"sha": "544ef5b5df52ed81deaea9123483195dbb1fa376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544ef5b5df52ed81deaea9123483195dbb1fa376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544ef5b5df52ed81deaea9123483195dbb1fa376"}], "stats": {"total": 247, "additions": 163, "deletions": 84}, "files": [{"sha": "d06f8cf2e5ae65534e5880412aa2bedd5ed0eb29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1,3 +1,20 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* c-decl.c (grokdeclarator): Update.\n+\t* c-lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n+\t* c-tree.h (c_mark_addressable): New.\n+\t* c-typeck.c (default_function_array_conversion, build_unary_op,\n+\tbuild_array_ref, convert_for_assignment): Update.\n+\t(mark_addressable): Rename.\n+\t* calls.c (try_to_integrate, expand_call): Use langhook.\n+\t* expr.c (expand_expr): Use langhook.\n+\t* langhooks-def.h (LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.h (struct lang_hooks): New hook.\n+\t* stmt.c (expand_asm_operands): Use langhook.\n+\t* tree.h (mark_addressable): Remove.\n+objc:\n+\t* objc-lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n+\n 2002-04-01  Bob Wilson  <bob.wilson@acm.org>\n \n         * config/xtensa/xtensa.c (xtensa_va_arg): Fix compiler warning"}, {"sha": "545940f97f09dc39ac5a7a8832942397d2a8c287", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1,3 +1,14 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* decl.c (gnat_to_gnu_entity): Update.\n+\t* gigi.h (mark_addressable): Rename.\n+\t* misc.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n+\t* trans.c (tree_transform): Update.\n+\t* utils.c (create_var_decl): Update.\n+\t* util2.c (build_binary_op, build_unary_op,\n+\tfill_vms_descriptor): Update.\n+\t(mark_addressable): Rename, update.\n+\n 2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* gigi.h (unsigned_type, signed_type, signed_or_unsigned_type):"}, {"sha": "adf1d35744bd9d9d3bfe3f0df1ac90bc76f43bf9", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1055,7 +1055,7 @@ gnat_to_gnu_entity (gnat_entity, gnu_expr, definition)\n \tif (Has_Nested_Block_With_Handler (Scope (gnat_entity))\n \t    && Exception_Mechanism != GCC_ZCX)\n \t  {\n-\t    mark_addressable (gnu_decl);\n+\t    gnat_mark_addressable (gnu_decl);\n \t    flush_addressof (gnu_decl);\n \t  }\n "}, {"sha": "7342117620f522b92bd502a384fb0a23f17d9f10", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -727,8 +727,8 @@ extern tree build_allocator\tPARAMS((tree, tree, tree, Entity_Id,\n extern tree fill_vms_descriptor PARAMS((tree, Entity_Id));\n \n /* Indicate that we need to make the address of EXPR_NODE and it therefore\n-   should not be allocated in a register. Return 1 if successful.  */\n-extern int mark_addressable\tPARAMS((tree));\n+   should not be allocated in a register.  Return true if successful.  */\n+extern bool gnat_mark_addressable PARAMS((tree));\n \n /* These functions return the basic data type sizes and related parameters\n    about the target machine.  */"}, {"sha": "520b02948ab0dc37cf05c71612662606b140d3b4", "filename": "gcc/ada/misc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmisc.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -114,6 +114,8 @@ static rtx gnat_expand_expr\t\tPARAMS ((tree, rtx, enum machine_mode,\n #define LANG_HOOKS_GET_ALIAS_SET\tgnat_get_alias_set\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR\t\tgnat_expand_expr\n+#undef LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE\tgnat_mark_addressable\n #undef LANG_HOOKS_PRINT_DECL\n #define LANG_HOOKS_PRINT_DECL\t\tgnat_print_decl\n #undef LANG_HOOKS_PRINT_TYPE"}, {"sha": "371f7f2be2b874955ea568cc82a3c88a4e4018aa", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -421,7 +421,7 @@ tree_transform (gnat_node)\n \t right now.  */\n       if (TREE_VALUE (gnu_except_ptr_stack) != 0)\n \t{\n-\t  mark_addressable (gnu_result);\n+\t  gnat_mark_addressable (gnu_result);\n \t  flush_addressof (gnu_result);\n \t}\n \n@@ -4764,9 +4764,10 @@ convert_with_check (gnat_type, gnu_expr, overflow_p, range_p, truncate_p)\n   return convert (gnu_type, gnu_result);\n }\n \f\n-/* Return 1 if GNU_EXPR can be directly addressed.  This is the case unless\n-   it is an expression involving computation or if it involves a bitfield\n-   reference.  This returns the same as mark_addressable in most cases.  */\n+/* Return 1 if GNU_EXPR can be directly addressed.  This is the case\n+   unless it is an expression involving computation or if it involves\n+   a bitfield reference.  This returns the same as\n+   gnat_mark_addressable in most cases.  */\n \n static int\n addressable_p (gnu_expr)"}, {"sha": "556e0128a9cd886253b324d0299370c080407e5b", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1361,7 +1361,7 @@ create_var_decl (var_name, asm_name, type, var_init, const_flag, public_flag,\n \n   /* If this is volatile, force it into memory.  */\n   if (TREE_SIDE_EFFECTS (var_decl))\n-    mark_addressable (var_decl);\n+    gnat_mark_addressable (var_decl);\n \n   if (TREE_CODE (var_decl) != CONST_DECL)\n     rest_of_decl_compilation (var_decl, 0, global_bindings_p (), 0);"}, {"sha": "0e8ada4041ae11623d6ea44af37618ed938032ee", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -817,7 +817,7 @@ build_binary_op (op_code, result_type, left_operand, right_operand)\n       if (! TREE_CONSTANT (right_operand)\n \t  || ! TREE_CONSTANT (TYPE_MIN_VALUE (right_type))\n \t  || op_code == ARRAY_RANGE_REF)\n-\tmark_addressable (left_operand);\n+\tgnat_mark_addressable (left_operand);\n \n       modulus = 0;\n       break;\n@@ -1238,7 +1238,7 @@ build_unary_op (op_code, result_type, operand)\n \t  if (type != error_mark_node)\n \t    operation_type = build_pointer_type (type);\n \n-\t  mark_addressable (operand);\n+\t  gnat_mark_addressable (operand);\n \t  result = fold (build1 (ADDR_EXPR, operation_type, operand));\n \t}\n \n@@ -1991,7 +1991,7 @@ fill_vms_descriptor (expr, gnat_formal)\n   tree const_list = 0;\n \n   expr = maybe_unconstrained_array (expr);\n-  mark_addressable (expr);\n+  gnat_mark_addressable (expr);\n \n   for (field = TYPE_FIELDS (record_type); field; field = TREE_CHAIN (field))\n     {\n@@ -2009,10 +2009,10 @@ fill_vms_descriptor (expr, gnat_formal)\n }\n \n /* Indicate that we need to make the address of EXPR_NODE and it therefore\n-   should not be allocated in a register. Return 1 if successful.  */\n+   should not be allocated in a register.  Returns true if successful.  */\n \n-int\n-mark_addressable (expr_node)\n+bool\n+gnat_mark_addressable (expr_node)\n      tree expr_node;\n {\n   while (1)\n@@ -2030,24 +2030,24 @@ mark_addressable (expr_node)\n \n       case CONSTRUCTOR:\n \tTREE_ADDRESSABLE (expr_node) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case VAR_DECL:\n       case PARM_DECL:\n       case RESULT_DECL:\n \tput_var_into_stack (expr_node);\n \tTREE_ADDRESSABLE (expr_node) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case FUNCTION_DECL:\n \tTREE_ADDRESSABLE (expr_node) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case CONST_DECL:\n \treturn (DECL_CONST_CORRESPONDING_VAR (expr_node) != 0\n-\t\t&& (mark_addressable\n+\t\t&& (gnat_mark_addressable\n \t\t    (DECL_CONST_CORRESPONDING_VAR (expr_node))));\n       default:\n-\treturn 1;\n+\treturn true;\n     }\n }"}, {"sha": "acb71e589c13c499d387229c579078a3f52e30ce", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -5022,7 +5022,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized)\n        Otherwise, the fact that those components are volatile\n        will be ignored, and would even crash the compiler.  */\n     if (C_TYPE_FIELDS_VOLATILE (TREE_TYPE (decl)))\n-      mark_addressable (decl);\n+      c_mark_addressable (decl);\n \n     decl_attributes (&decl, returned_attrs, 0);\n "}, {"sha": "278a252bffdea2f3675a1b5cb2b165766fa62ffd", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -54,6 +54,8 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_MARK_TREE c_mark_tree\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n+#undef LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_PARSE_FILE\n #define LANG_HOOKS_PARSE_FILE c_common_parse_file\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES"}, {"sha": "503e04519125f831cd8b04f7568663a411ff8ffd", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -248,6 +248,7 @@ extern tree require_complete_type\t\tPARAMS ((tree));\n extern int comptypes\t\t\t\tPARAMS ((tree, tree));\n extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n extern tree c_size_in_bytes                     PARAMS ((tree));\n+extern bool c_mark_addressable\t\t\tPARAMS ((tree));\n extern tree build_component_ref                 PARAMS ((tree, tree));\n extern tree build_indirect_ref                  PARAMS ((tree, const char *));\n extern tree build_array_ref                     PARAMS ((tree, tree));"}, {"sha": "7bca9aad5fe58af5b121f0ace9ce917577a0705a", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -932,7 +932,7 @@ default_function_array_conversion (exp)\n \t     is not the target type of the type of the ADDR_EXPR itself.\n \t     Question is, can this lossage be avoided?  */\n \t  adr = build1 (ADDR_EXPR, ptrtype, exp);\n-\t  if (mark_addressable (exp) == 0)\n+\t  if (!c_mark_addressable (exp))\n \t    return error_mark_node;\n \t  TREE_CONSTANT (adr) = staticp (exp);\n \t  TREE_SIDE_EFFECTS (adr) = 0;   /* Default would be, same as EXP.  */\n@@ -1317,7 +1317,7 @@ build_array_ref (array, index)\n \t  || (COMPLETE_TYPE_P (TREE_TYPE (TREE_TYPE (array)))\n \t      && TREE_CODE (TYPE_SIZE (TREE_TYPE (TREE_TYPE (array)))) != INTEGER_CST))\n \t{\n-\t  if (mark_addressable (array) == 0)\n+\t  if (!c_mark_addressable (array))\n \t    return error_mark_node;\n \t}\n       /* An array that is indexed by a constant value which is not within\n@@ -1328,7 +1328,7 @@ build_array_ref (array, index)\n \t  && TYPE_VALUES (TREE_TYPE (array))\n \t  && ! int_fits_type_p (index, TYPE_VALUES (TREE_TYPE (array))))\n \t{\n-\t  if (mark_addressable (array) == 0)\n+\t  if (!c_mark_addressable (array))\n \t    return error_mark_node;\n \t}\n \n@@ -2991,7 +2991,7 @@ build_unary_op (code, xarg, flag)\n       /* For &x[y], return x+y */\n       if (TREE_CODE (arg) == ARRAY_REF)\n \t{\n-\t  if (mark_addressable (TREE_OPERAND (arg, 0)) == 0)\n+\t  if (!c_mark_addressable (TREE_OPERAND (arg, 0)))\n \t    return error_mark_node;\n \t  return build_binary_op (PLUS_EXPR, TREE_OPERAND (arg, 0),\n \t\t\t\t  TREE_OPERAND (arg, 1), 1);\n@@ -3046,7 +3046,7 @@ build_unary_op (code, xarg, flag)\n \n       argtype = build_pointer_type (argtype);\n \n-      if (mark_addressable (arg) == 0)\n+      if (!c_mark_addressable (arg))\n \treturn error_mark_node;\n \n       {\n@@ -3265,13 +3265,14 @@ readonly_warning (arg, msgid)\n \f\n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register.\n-   Value is 1 if successful.  */\n+   Returns true if successful.  */\n \n-int\n-mark_addressable (exp)\n+bool\n+c_mark_addressable (exp)\n      tree exp;\n {\n   tree x = exp;\n+\n   while (1)\n     switch (TREE_CODE (x))\n       {\n@@ -3280,7 +3281,7 @@ mark_addressable (exp)\n \t  {\n \t    error (\"cannot take address of bit-field `%s'\",\n \t\t   IDENTIFIER_POINTER (DECL_NAME (TREE_OPERAND (x, 1))));\n-\t    return 0;\n+\t    return false;\n \t  }\n \n \t/* ... fall through ...  */\n@@ -3295,7 +3296,7 @@ mark_addressable (exp)\n       case COMPOUND_LITERAL_EXPR:\n       case CONSTRUCTOR:\n \tTREE_ADDRESSABLE (x) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case VAR_DECL:\n       case CONST_DECL:\n@@ -3308,7 +3309,7 @@ mark_addressable (exp)\n \t      {\n \t\terror (\"global register variable `%s' used in nested function\",\n \t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n-\t\treturn 0;\n+\t\treturn false;\n \t      }\n \t    pedwarn (\"register variable `%s' used in nested function\",\n \t\t     IDENTIFIER_POINTER (DECL_NAME (x)));\n@@ -3319,7 +3320,7 @@ mark_addressable (exp)\n \t      {\n \t\terror (\"address of global register variable `%s' requested\",\n \t\t       IDENTIFIER_POINTER (DECL_NAME (x)));\n-\t\treturn 0;\n+\t\treturn false;\n \t      }\n \n \t    /* If we are making this addressable due to its having\n@@ -3330,7 +3331,7 @@ mark_addressable (exp)\n \t    else if (C_TYPE_FIELDS_VOLATILE (TREE_TYPE (x)))\n \t      {\n \t\terror (\"cannot put object with volatile field into register\");\n-\t\treturn 0;\n+\t\treturn false;\n \t      }\n \n \t    pedwarn (\"address of register variable `%s' requested\",\n@@ -3347,7 +3348,7 @@ mark_addressable (exp)\n #endif\n \n       default:\n-\treturn 1;\n+\treturn true;\n     }\n }\n \f\n@@ -4037,7 +4038,7 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n \t  error (\"cannot pass rvalue to reference parameter\");\n \t  return error_mark_node;\n \t}\n-      if (mark_addressable (rhs) == 0)\n+      if (!c_mark_addressable (rhs))\n \treturn error_mark_node;\n       rhs = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (rhs)), rhs);\n "}, {"sha": "197914a9e7a65a2415c428c2ee962a860511ec22", "filename": "gcc/calls.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1903,7 +1903,7 @@ try_to_integrate (fndecl, actparms, target, ignore, type, structure_value_addr)\n       warning_with_decl (fndecl, \"inlining failed in call to `%s'\");\n       warning (\"called from here\");\n     }\n-  mark_addressable (fndecl);\n+  (*lang_hooks.mark_addressable) (fndecl);\n   return (rtx) (size_t) - 1;\n }\n \n@@ -2209,7 +2209,7 @@ expand_call (exp, target, ignore)\n \t      warning_with_decl (fndecl, \"can't inline call to `%s'\");\n \t      warning (\"called from here\");\n \t    }\n-\t  mark_addressable (fndecl);\n+\t  (*lang_hooks.mark_addressable) (fndecl);\n \t}\n \n       flags |= flags_from_decl_or_type (fndecl);\n@@ -2255,7 +2255,7 @@ expand_call (exp, target, ignore)\n \t    /* In case this is a static function, note that it has been\n \t       used.  */\n \t    if (! TREE_ADDRESSABLE (fndecl))\n-\t      mark_addressable (fndecl);\n+\t      (*lang_hooks.mark_addressable) (fndecl);\n \t    is_integrable = 0;\n \t  }\n       }"}, {"sha": "8527f0a9204043ca1514b0c75a25aff02228919a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1,3 +1,19 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* call.c (build_addr_func): Update.\n+\t* class.c (resolve_address_of_overloaded_function): Update.\n+\t* cp-lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n+\t* cp-tree.h (cxx_mark_addressable): New.\n+\t* decl.c (register_dtor_fn, cxx_maybe_build_cleanup): Update.\n+\t* decl2.c (build_cleanup): Update.\n+\t* except.c (build_throw): Update.\n+\t* init.c (resolve_offset_ref): Update.\n+\t* pt.c (convert_nontype_argument): Update.\n+\t* semantics.c (finish_asm_stmt, simplify_affr_init_exprs_r): Update.\n+\t* typeck.c (decay_conversion, build_array_ref, build_unary_op,\n+\tunary_complex_lvalue): Update.\n+\t(mark_addressable): Rename.\n+\n 2002-04-01  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/5998:"}, {"sha": "1a74f7483680e5609ec597d4113a6ea2f7baf832", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -355,7 +355,7 @@ build_addr_func (function)\n \n       type = build_pointer_type (type);\n \n-      if (mark_addressable (function) == 0)\n+      if (!cxx_mark_addressable (function))\n \treturn error_mark_node;\n \n       addr = build1 (ADDR_EXPR, type, function);"}, {"sha": "8ce3fc7ab46f63f5b9ff12fa5ada97d2b0181c3f", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -6061,7 +6061,7 @@ cannot resolve overloaded function `%D' based on conversion to type `%T'\",\n       /* The target must be a REFERENCE_TYPE.  Above, build_unary_op\n \t will mark the function as addressed, but here we must do it\n \t explicitly.  */\n-      mark_addressable (fn);\n+      cxx_mark_addressable (fn);\n \n       return fn;\n     }"}, {"sha": "f4d3cb0268257b394423c06d6a745a8b758803bd", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -67,6 +67,8 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_MARK_TREE cxx_mark_tree\n #undef LANG_HOOKS_UNSAFE_FOR_REEVAL\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n+#undef LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE cxx_mark_addressable\n #undef LANG_HOOKS_PRINT_STATISTICS\n #define LANG_HOOKS_PRINT_STATISTICS cxx_print_statistics\n #undef LANG_HOOKS_PRINT_XNODE"}, {"sha": "dbd955502422fbd257d520dc8e97496d5c4b3d4a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -3672,6 +3672,7 @@ extern tree pushdecl\t\t\t\tPARAMS ((tree));\n extern void cxx_init_decl_processing\t\tPARAMS ((void));\n extern void cxx_mark_tree\t\t\tPARAMS ((tree));\n extern void cxx_insert_default_attributes\tPARAMS ((tree));\n+extern bool cxx_mark_addressable\t\tPARAMS ((tree));\n extern int toplevel_bindings_p\t\t\tPARAMS ((void));\n extern int namespace_bindings_p\t\t\tPARAMS ((void));\n extern void keep_next_level\t\t\tPARAMS ((int));"}, {"sha": "b2b501a7f0f06a3f3ec15f0b11a83f352e48e027", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -8546,7 +8546,7 @@ register_dtor_fn (decl)\n   end_cleanup_fn ();\n \n   /* Call atexit with the cleanup function.  */\n-  mark_addressable (cleanup);\n+  cxx_mark_addressable (cleanup);\n   cleanup = build_unary_op (ADDR_EXPR, cleanup, 0);\n   if (flag_use_cxa_atexit)\n     {\n@@ -14531,7 +14531,7 @@ cxx_maybe_build_cleanup (decl)\n \trval = decl;\n       else\n \t{\n-\t  mark_addressable (decl);\n+\t  cxx_mark_addressable (decl);\n \t  rval = build_unary_op (ADDR_EXPR, decl, 0);\n \t}\n "}, {"sha": "2eece8aed05abf741fef4398f2e95e490aef4012", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -2567,7 +2567,7 @@ build_cleanup (decl)\n     temp = decl;\n   else\n     {\n-      mark_addressable (decl);\n+      cxx_mark_addressable (decl);\n       temp = build1 (ADDR_EXPR, build_pointer_type (type), decl);\n     }\n   temp = build_delete (TREE_TYPE (temp), temp,"}, {"sha": "b2d9fe007ab9565c119c997756102e41da2e3f02", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -756,7 +756,7 @@ build_throw (exp)\n \t\t\t\t     complete_dtor_identifier, 0);\n \t  cleanup = TREE_VALUE (cleanup);\n \t  mark_used (cleanup);\n-\t  mark_addressable (cleanup);\n+\t  cxx_mark_addressable (cleanup);\n \t  /* Pretend it's a normal function.  */\n \t  cleanup = build1 (ADDR_EXPR, cleanup_type, cleanup);\n \t}"}, {"sha": "10098e72cfad9eea1077abb73bd7cd800be035f3", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1796,7 +1796,7 @@ resolve_offset_ref (exp)\n       || TREE_CODE (TREE_TYPE (member)) == FUNCTION_TYPE)\n     {\n       /* These were static members.  */\n-      if (mark_addressable (member) == 0)\n+      if (!cxx_mark_addressable (member))\n \treturn error_mark_node;\n       return member;\n     }"}, {"sha": "d28298a56a3d6d2e9bc06f4debace8ae96300d8c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -3154,7 +3154,7 @@ convert_nontype_argument (type, expr)\n \t      return error_mark_node;\n \t  }\n \n-\tmark_addressable (expr);\n+\tcxx_mark_addressable (expr);\n \treturn build1 (ADDR_EXPR, type, expr);\n       }\n       break;"}, {"sha": "8666d7f02c4fbf80e62adca309f12edbff4c050b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -944,7 +944,7 @@ finish_asm_stmt (cv_qualifier, string, output_operands,\n \t     DECL_RTL for the OPERAND -- which we don't have at this\n \t     point.  */\n \t  if (!allows_reg && DECL_P (operand))\n-\t    mark_addressable (operand);\n+\t    cxx_mark_addressable (operand);\n \t}\n     }\n \n@@ -2204,7 +2204,7 @@ simplify_aggr_init_exprs_r (tp, walk_subtrees, data)\n     {\n       /* Replace the first argument with the address of the third\n \t argument to the AGGR_INIT_EXPR.  */\n-      mark_addressable (slot);\n+      cxx_mark_addressable (slot);\n       args = tree_cons (NULL_TREE, \n \t\t\tbuild1 (ADDR_EXPR, \n \t\t\t\tbuild_pointer_type (TREE_TYPE (slot)),"}, {"sha": "d379809b81ee6a5604d8cc0c33617bc8cf725361", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1726,7 +1726,7 @@ decay_conversion (exp)\n \t     is not the target type of the type of the ADDR_EXPR itself.\n \t     Question is, can this lossage be avoided?  */\n \t  adr = build1 (ADDR_EXPR, ptrtype, exp);\n-\t  if (mark_addressable (exp) == 0)\n+\t  if (!cxx_mark_addressable (exp))\n \t    return error_mark_node;\n \t  TREE_CONSTANT (adr) = staticp (exp);\n \t  TREE_SIDE_EFFECTS (adr) = 0;   /* Default would be, same as EXP.  */\n@@ -2446,7 +2446,7 @@ build_array_ref (array, idx)\n \t      && (TREE_CODE (TYPE_SIZE (TREE_TYPE (TREE_TYPE (array))))\n \t\t  != INTEGER_CST)))\n \t{\n-\t  if (mark_addressable (array) == 0)\n+\t  if (!cxx_mark_addressable (array))\n \t    return error_mark_node;\n \t}\n \n@@ -2458,7 +2458,7 @@ build_array_ref (array, idx)\n \t  && TYPE_VALUES (TREE_TYPE (array))\n \t  && ! int_fits_type_p (idx, TYPE_VALUES (TREE_TYPE (array))))\n \t{\n-\t  if (mark_addressable (array) == 0)\n+\t  if (!cxx_mark_addressable (array))\n \t    return error_mark_node;\n \t}\n \n@@ -4539,7 +4539,7 @@ build_unary_op (code, xarg, noconvert)\n       /* For &x[y], return x+y */\n       if (TREE_CODE (arg) == ARRAY_REF)\n \t{\n-\t  if (mark_addressable (TREE_OPERAND (arg, 0)) == 0)\n+\t  if (!cxx_mark_addressable (TREE_OPERAND (arg, 0)))\n \t    return error_mark_node;\n \t  return cp_build_binary_op (PLUS_EXPR, TREE_OPERAND (arg, 0),\n \t\t\t\t     TREE_OPERAND (arg, 1));\n@@ -4627,7 +4627,7 @@ build_unary_op (code, xarg, noconvert)\n       if (argtype != error_mark_node)\n \targtype = build_pointer_type (argtype);\n \n-      if (mark_addressable (arg) == 0)\n+      if (!cxx_mark_addressable (arg))\n \treturn error_mark_node;\n \n       {\n@@ -4811,18 +4811,18 @@ unary_complex_lvalue (code, arg)\n \f\n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register.\n-   Value is 1 if successful.\n+   Value is true if successful.\n \n    C++: we do not allow `current_class_ptr' to be addressable.  */\n \n-int\n-mark_addressable (exp)\n+bool\n+cxx_mark_addressable (exp)\n      tree exp;\n {\n   register tree x = exp;\n \n   if (TREE_ADDRESSABLE (x) == 1)\n-    return 1;\n+    return true;\n \n   while (1)\n     switch (TREE_CODE (x))\n@@ -4840,7 +4840,7 @@ mark_addressable (exp)\n \t  {\n             error (\"cannot take the address of `this', which is an rvalue expression\");\n \t    TREE_ADDRESSABLE (x) = 1; /* so compiler doesn't die later */\n-\t    return 1;\n+\t    return true;\n \t  }\n       case VAR_DECL:\n \t/* Caller should not be trying to mark initialized\n@@ -4857,24 +4857,24 @@ mark_addressable (exp)\n \t  warning (\"address requested for `%D', which is declared `register'\",\n \t\t      x);\n \tTREE_ADDRESSABLE (x) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case FUNCTION_DECL:\n \tTREE_ADDRESSABLE (x) = 1;\n \tTREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (x)) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case CONSTRUCTOR:\n \tTREE_ADDRESSABLE (x) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case TARGET_EXPR:\n \tTREE_ADDRESSABLE (x) = 1;\n-\tmark_addressable (TREE_OPERAND (x, 0));\n-\treturn 1;\n+\tcxx_mark_addressable (TREE_OPERAND (x, 0));\n+\treturn true;\n \n       default:\n-\treturn 1;\n+\treturn true;\n     }\n }\n \f"}, {"sha": "6f1a0d62eef2f323d039968e4cf48a3dd2640e5f", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -6247,7 +6247,7 @@ expand_expr (exp, target, tmode, modifier)\n \t  DECL_NONLOCAL (exp) = 1;\n \t  if (DECL_NO_STATIC_CHAIN (current_function_decl))\n \t    abort ();\n-\t  mark_addressable (exp);\n+\t  (*lang_hooks.mark_addressable) (exp);\n \t  if (GET_CODE (DECL_RTL (exp)) != MEM)\n \t    abort ();\n \t  addr = XEXP (DECL_RTL (exp), 0);"}, {"sha": "e0fbdcde40f54bf89b22b174c0200e69a06d8f9e", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1,3 +1,9 @@\n+Mon Apr  1 21:39:36 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n+\t(mark_addressable): Rename.\n+\t(ffecom_arrayref_, ffecom_1): Update.\n+\n Mon Apr  1 09:59:53 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (LANG_HOOKS_SIGNED_TYPE, LANG_HOOKS_UNSIGNED_TYPE,"}, {"sha": "97d245aa4a04245d2fcfe334ce0d2b9c69149bb2", "filename": "gcc/f/com.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -266,6 +266,7 @@ static tree ffe_type_for_size PARAMS ((unsigned int, int));\n static tree ffe_unsigned_type PARAMS ((tree));\n static tree ffe_signed_type PARAMS ((tree));\n static tree ffe_signed_or_unsigned_type PARAMS ((int, tree));\n+static bool ffe_mark_addressable PARAMS ((tree));\n static void ffecom_init_decl_processing PARAMS ((void));\n static tree ffecom_arglist_expr_ (const char *argstring, ffebld args);\n static tree ffecom_widest_expr_type_ (ffebld list);\n@@ -860,7 +861,7 @@ ffecom_arrayref_ (tree item, ffebld expr, int want_ptr)\n \treturn item;\n \n       if (ffeinfo_where (ffebld_info (expr)) == FFEINFO_whereFLEETING\n-\t  && ! mark_addressable (item))\n+\t  && ! ffe_mark_addressable (item))\n \treturn error_mark_node;\n     }\n \n@@ -9531,7 +9532,7 @@ ffecom_1 (enum tree_code code, tree type, tree node)\n \n   if (code == ADDR_EXPR)\n     {\n-      if (!mark_addressable (node))\n+      if (!ffe_mark_addressable (node))\n \tassert (\"can't mark_addressable this node!\" == NULL);\n     }\n \n@@ -14227,6 +14228,8 @@ static void ffe_mark_tree (tree);\n #define LANG_HOOKS_PARSE_FILE\t\tffe_parse_file\n #undef  LANG_HOOKS_MARK_TREE\n #define LANG_HOOKS_MARK_TREE\t\tffe_mark_tree\n+#undef  LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE\tffe_mark_addressable\n #undef  LANG_HOOKS_PRINT_IDENTIFIER\n #define LANG_HOOKS_PRINT_IDENTIFIER\tffe_print_identifier\n #undef  LANG_HOOKS_DECL_PRINTABLE_NAME\n@@ -14346,8 +14349,8 @@ ffe_init_options ()\n   flag_complex_divide_method = 1;\n }\n \n-int\n-mark_addressable (exp)\n+static bool\n+ffe_mark_addressable (exp)\n      tree exp;\n {\n   register tree x = exp;\n@@ -14362,7 +14365,7 @@ mark_addressable (exp)\n \n       case CONSTRUCTOR:\n \tTREE_ADDRESSABLE (x) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case VAR_DECL:\n       case CONST_DECL:\n@@ -14374,7 +14377,7 @@ mark_addressable (exp)\n \t    if (TREE_PUBLIC (x))\n \t      {\n \t\tassert (\"address of global register var requested\" == NULL);\n-\t\treturn 0;\n+\t\treturn false;\n \t      }\n \t    assert (\"address of register variable requested\" == NULL);\n \t  }\n@@ -14383,7 +14386,7 @@ mark_addressable (exp)\n \t    if (TREE_PUBLIC (x))\n \t      {\n \t\tassert (\"address of global register var requested\" == NULL);\n-\t\treturn 0;\n+\t\treturn false;\n \t      }\n \t    assert (\"address of register var requested\" == NULL);\n \t  }\n@@ -14398,7 +14401,7 @@ mark_addressable (exp)\n #endif\n \n       default:\n-\treturn 1;\n+\treturn true;\n       }\n }\n "}, {"sha": "8b5ef4ebac782bfa4c87a9514b73f02b56b3f7a5", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1,3 +1,9 @@\n+2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* java-tree.h (java_mark_addressable): New.\n+\t* lang.c (LANG_HOOKS_MARK_ADDRESSABLE): Redefine.\n+\t* typeck.c (mark_addressable): Rename, update.\n+\n 2002-04-01  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* expr.c (build_java_binop): Update."}, {"sha": "ae26b61cda18e589d5686fdeb948f97626ef837b", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1039,6 +1039,7 @@ struct lang_type\n extern void java_set_yydebug PARAMS ((int));\n extern void java_parse_file PARAMS ((void));\n extern void java_mark_tree PARAMS ((tree));\n+extern bool java_mark_addressable PARAMS ((tree));\n extern tree java_type_for_mode PARAMS ((enum machine_mode, int));\n extern tree java_type_for_size PARAMS ((unsigned int, int));\n extern tree java_unsigned_type PARAMS ((tree));"}, {"sha": "53e11beaed309b1ff809a18609118dd7e8088905", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -229,6 +229,8 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_PARSE_FILE java_parse_file\n #undef LANG_HOOKS_MARK_TREE\n #define LANG_HOOKS_MARK_TREE java_mark_tree\n+#undef LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE java_mark_addressable\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR java_expand_expr\n #undef LANG_HOOKS_DUP_LANG_SPECIFIC_DECL"}, {"sha": "108f3fbbe1dc0d07cf17c372729e5f8848ec87fb", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -263,10 +263,10 @@ java_unsigned_type (type)\n \n /* Mark EXP saying that we need to be able to take the\n    address of it; it should not be allocated in a register.\n-   Value is 1 if successful.  */\n+   Value is true if successful.  */\n \n-int\n-mark_addressable (exp)\n+bool\n+java_mark_addressable (exp)\n      tree exp;\n {\n   register tree x = exp;\n@@ -288,12 +288,12 @@ mark_addressable (exp)\n \tbreak;\n \n       case COND_EXPR:\n-\treturn mark_addressable (TREE_OPERAND (x, 1))\n-\t  & mark_addressable (TREE_OPERAND (x, 2));\n+\treturn java_mark_addressable (TREE_OPERAND (x, 1))\n+\t  && java_mark_addressable (TREE_OPERAND (x, 2));\n \n       case CONSTRUCTOR:\n \tTREE_ADDRESSABLE (x) = 1;\n-\treturn 1;\n+\treturn true;\n \n       case INDIRECT_REF:\n \t/* We sometimes add a cast *(TYPE*)&FOO to handle type and mode\n@@ -309,7 +309,7 @@ mark_addressable (exp)\n \t    x = TREE_OPERAND (x, 0);\n \t    break;\n \t  }\n-\treturn 1;\n+\treturn true;\n \n       case VAR_DECL:\n       case CONST_DECL:\n@@ -323,7 +323,7 @@ mark_addressable (exp)\n #endif\n \t/* drops through */\n       default:\n-\treturn 1;\n+\treturn true;\n     }\n }\n "}, {"sha": "c922e22a127668ba29f04456c1436c5ff46d1140", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -203,6 +203,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_SAFE_FROM_P, \\\n   LANG_HOOKS_FINISH_INCOMPLETE_DECL, \\\n   LANG_HOOKS_UNSAFE_FOR_REEVAL, \\\n+  LANG_HOOKS_MARK_ADDRESSABLE, \\\n   LANG_HOOKS_STATICP, \\\n   LANG_HOOKS_DUP_LANG_SPECIFIC_DECL, \\\n   LANG_HOOKS_UNSAVE_EXPR_NOW, \\"}, {"sha": "804e811d4b57596b857ad4be9cd646e64afb93e1", "filename": "gcc/langhooks.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -218,6 +218,11 @@ struct lang_hooks\n      through.  The default hook returns a negative number.  */\n   int (*unsafe_for_reeval) PARAMS ((tree));\n \n+  /* Mark EXP saying that we need to be able to take the address of\n+     it; it should not be allocated in a register.  Return true if\n+     successful.  */\n+  bool (*mark_addressable) PARAMS ((tree));\n+\n   /* Hook called by staticp for language-specific tree codes.  */\n   int (*staticp) PARAMS ((tree));\n "}, {"sha": "991ecd90060c40a124bf2b1b16a1a4eb05950ac6", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -50,6 +50,8 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_MARK_TREE c_mark_tree\n #undef LANG_HOOKS_EXPAND_EXPR\n #define LANG_HOOKS_EXPAND_EXPR c_expand_expr\n+#undef LANG_HOOKS_MARK_ADDRESSABLE\n+#define LANG_HOOKS_MARK_ADDRESSABLE c_mark_addressable\n #undef LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES\n #define LANG_HOOKS_INSERT_DEFAULT_ATTRIBUTES c_insert_default_attributes\n #undef LANG_HOOKS_FINISH_INCOMPLETE_DECL"}, {"sha": "3f2d29c0858300c7bc7d342a3853f042334ab376", "filename": "gcc/stmt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -1678,7 +1678,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t      || (DECL_P (val)\n \t\t  && GET_CODE (DECL_RTL (val)) == REG\n \t\t  && GET_MODE (DECL_RTL (val)) != TYPE_MODE (type))))\n-\tmark_addressable (val);\n+\t(*lang_hooks.mark_addressable) (val);\n \n       if (is_inout)\n \tninout++;\n@@ -1707,7 +1707,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \treturn;\n \n       if (! allows_reg && allows_mem)\n-\tmark_addressable (TREE_VALUE (tail));\n+\t(*lang_hooks.mark_addressable) (TREE_VALUE (tail));\n     }\n \n   /* Second pass evaluates arguments.  */"}, {"sha": "74eefe72ea7b775cc148bb6e214e0d62923b8c06", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dffd7eb68ad26f910304f7f68fd2b25bbae71ae8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=dffd7eb68ad26f910304f7f68fd2b25bbae71ae8", "patch": "@@ -2947,7 +2947,6 @@ extern int lang_attribute_common;\n \n /* In front end.  */\n \n-extern int mark_addressable\t\tPARAMS ((tree));\n extern void incomplete_type_error\tPARAMS ((tree, tree));\n extern tree truthvalue_conversion\tPARAMS ((tree));\n "}]}