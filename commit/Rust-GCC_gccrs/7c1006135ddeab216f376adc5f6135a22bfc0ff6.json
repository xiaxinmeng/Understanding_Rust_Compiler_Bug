{"sha": "7c1006135ddeab216f376adc5f6135a22bfc0ff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxMDA2MTM1ZGRlYWIyMTZmMzc2YWRjNWY2MTM1YTIyYmZjMGZmNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-22T17:11:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-03-22T22:56:04Z"}, "message": "libstdc++: Implement string_view range constructor for C++20\n\nThis implements the new string_view constructor proposed by P1989R2.\nThis hasn't been voted into the C++23 draft yet, but it's been reviewed\nby LWG and is expected to be approved at the next WG21 meeting.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/string_view (basic_string_view(Range&&)): Define new\n\tconstructor and deduction guide.\n\t* testsuite/21_strings/basic_string_view/cons/char/range_c++20.cc: New test.\n\t* testsuite/21_strings/basic_string_view/cons/wchar_t/range_c++20.cc: New test.", "tree": {"sha": "4db966543587859bdee3a508649bf67510e93dea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db966543587859bdee3a508649bf67510e93dea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c1006135ddeab216f376adc5f6135a22bfc0ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1006135ddeab216f376adc5f6135a22bfc0ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1006135ddeab216f376adc5f6135a22bfc0ff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1006135ddeab216f376adc5f6135a22bfc0ff6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bfd081f1bce3fb7f791591e741723dce4e884ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bfd081f1bce3fb7f791591e741723dce4e884ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bfd081f1bce3fb7f791591e741723dce4e884ed"}], "stats": {"total": 373, "additions": 371, "deletions": 2}, "files": [{"sha": "31502f7d58dd45913d8ab2ded243261cddb6dbe2", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1006135ddeab216f376adc5f6135a22bfc0ff6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1006135ddeab216f376adc5f6135a22bfc0ff6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=7c1006135ddeab216f376adc5f6135a22bfc0ff6", "patch": "@@ -45,6 +45,10 @@\n #include <bits/ostream_insert.h>\n #include <ext/numeric_traits.h>\n \n+#if __cplusplus > 202002L\n+# include <bits/ranges_base.h>\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -135,15 +139,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_len{__len}, _M_str{__str}\n       { }\n \n-#if __cplusplus > 201703L && __cpp_lib_concepts\n+#if __cplusplus >= 202002L && __cpp_lib_concepts\n       template<contiguous_iterator _It, sized_sentinel_for<_It> _End>\n \trequires same_as<iter_value_t<_It>, _CharT>\n \t  && (!convertible_to<_End, size_type>)\n \tconstexpr\n \tbasic_string_view(_It __first, _End __last)\n \t: _M_len(__last - __first), _M_str(std::to_address(__first))\n \t{ }\n-#endif\n+\n+#if __cplusplus > 202002L\n+      template<typename _Range, typename _DRange = remove_cvref_t<_Range>>\n+\trequires (!is_same_v<_DRange, basic_string_view>)\n+\t  && ranges::contiguous_range<_Range>\n+\t  && ranges::sized_range<_Range>\n+\t  && is_same_v<ranges::range_value_t<_Range>, _CharT>\n+\t  && (!is_convertible_v<_Range, const _CharT*>)\n+\t  && (!requires (_DRange& __d) {\n+\t\t__d.operator ::std::basic_string_view<_CharT, _Traits>();\n+\t      })\n+\t  && (!requires { typename _DRange::traits_type; }\n+\t      || is_same_v<typename _DRange::traits_type, _Traits>)\n+\tconstexpr\n+\tbasic_string_view(_Range&& __r)\n+\tnoexcept(noexcept(ranges::size(__r)) && noexcept(ranges::data(__r)))\n+\t: _M_len(ranges::size(__r)), _M_str(ranges::data(__r))\n+\t{ }\n+#endif // C++23\n+#endif // C++20\n \n       constexpr basic_string_view&\n       operator=(const basic_string_view&) noexcept = default;\n@@ -490,6 +513,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cplusplus > 201703L && __cpp_lib_concepts && __cpp_deduction_guides\n   template<contiguous_iterator _It, sized_sentinel_for<_It> _End>\n     basic_string_view(_It, _End) -> basic_string_view<iter_value_t<_It>>;\n+\n+#if __cplusplus > 202002L\n+  template<ranges::contiguous_range _Range>\n+    basic_string_view(_Range&&)\n+      -> basic_string_view<ranges::range_value_t<_Range>>;\n+#endif\n #endif\n \n   // [string.view.comparison], non-member basic_string_view comparison function"}, {"sha": "fa85f1994c94cc09e3f41f1fccfe609871df46ea", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/char/range_c++20.cc", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1006135ddeab216f376adc5f6135a22bfc0ff6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1006135ddeab216f376adc5f6135a22bfc0ff6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fchar%2Frange_c%2B%2B20.cc?ref=7c1006135ddeab216f376adc5f6135a22bfc0ff6", "patch": "@@ -0,0 +1,170 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  struct R\n+  {\n+    const char* begin() const\n+    { return str; }\n+\n+    const char* end() const\n+    { return str + std::char_traits<char>::length(str); }\n+\n+    const char* str = \"Home on the range\";\n+  };\n+\n+  R r;\n+  std::string_view s = r;\n+  VERIFY( s == r.str );\n+  VERIFY( s.data() == std::ranges::data(r) );\n+  VERIFY( s.size() == std::ranges::size(r) );\n+\n+  struct R2 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator std::string_view() const { return \"Out of range\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R2> );\n+  static_assert( std::ranges::sized_range<R2> );\n+  R2 r2;\n+  std::string_view s2 = r2; // uses conversion to string_view\n+  VERIFY( s2 == \"Out of range\" );\n+  VERIFY( std::string_view(const_cast<const R2&>(r2)) == s2 );\n+\n+  struct R3 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator const char*() { return \"Orange\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R3> );\n+  static_assert( std::ranges::sized_range<R3> );\n+  R3 r3;\n+  std::string_view s3(r3); // uses conversion to const char*\n+  VERIFY( s3 == \"Orange\" );\n+  s3 = std::string_view(const_cast<const R3&>(r3)); // uses range constructor\n+  VERIFY( s3 == \"Home on the range\" );\n+\n+  struct R4 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator std::string_view() { return \"Strange\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R4> );\n+  static_assert( std::ranges::sized_range<R4> );\n+  R4 r4;\n+  std::string_view s4 = r4; // Uses conversion to string_view\n+  VERIFY( s4 == \"Strange\" );\n+  // Cannot construct from const R4 because of non-const conversion op:\n+  static_assert( ! std::is_constructible_v<std::string_view, const R4&> );\n+\n+  struct R5 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator std::string_view() && { return \"Stranger\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R5> );\n+  static_assert( std::ranges::sized_range<R5> );\n+  R5 r5;\n+  std::string_view s5 = r5; // Uses range constructor\n+  VERIFY( s5 == r5.str );\n+  s5 = std::string_view(std::move(r5)); // In C++20 this used conversion op.\n+  VERIFY( s5 == r5.str );\t        // In C++23 it uses range constructor.\n+\n+  char arr[] = \"arrangement\\0with\\0nulls\";\n+  std::string_view sa = arr; // Does not use range constructor\n+  VERIFY( sa.data() == arr );\n+  VERIFY( sa == \"arrangement\" );\n+  VERIFY( std::end(sa) != std::end(arr) );\n+}\n+\n+void\n+test02()\n+{\n+  using V1 = std::basic_string_view<signed char>;\n+  // range_value_t<V1> is not the right type\n+  static_assert( ! std::is_constructible_v<std::string_view, V1> );\n+\n+  using V2 = std::basic_string_view<char, __gnu_cxx::char_traits<char>>;\n+  // V2::traits_type is not the right type\n+  static_assert( ! std::is_constructible_v<std::string_view, V2> );\n+\n+  struct V3 : V2\n+  {\n+  private:\n+    using V2::traits_type;\n+  };\n+  // V3::traits_type is not a valid (accessible) type\n+  static_assert( std::is_constructible_v<std::string_view, V3> );\n+\n+  struct V4 : V2\n+  {\n+    using traits_type = std::string_view::traits_type;\n+  };\n+  // V4::traits_type is the right type\n+  static_assert( std::is_constructible_v<std::string_view, V4> );\n+}\n+\n+void\n+test03()\n+{\n+  struct R\n+  {\n+    char* begin() { return nullptr; }\n+    const char* begin() const noexcept { return nullptr; }\n+\n+    char* end() { return nullptr; }\n+    const char* end() const noexcept { return nullptr; }\n+  };\n+\n+  static_assert( ! noexcept(std::string_view(std::declval<R&>())) );\n+  static_assert( noexcept(std::string_view(std::declval<const R&>())) );\n+}\n+\n+void\n+test04()\n+{\n+  struct R\n+  {\n+    const char* begin() const { return nullptr; }\n+    const char* end() const { return nullptr; }\n+  };\n+\n+  R r;\n+  std::basic_string_view s = r; // Use deduction guide.\n+\n+  static_assert( std::is_same_v<decltype(s), std::string_view> );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "cf73ae36a60153b513b8011192dfd86e79c0884f", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/cons/wchar_t/range_c++20.cc", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c1006135ddeab216f376adc5f6135a22bfc0ff6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Frange_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c1006135ddeab216f376adc5f6135a22bfc0ff6/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Frange_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fcons%2Fwchar_t%2Frange_c%2B%2B20.cc?ref=7c1006135ddeab216f376adc5f6135a22bfc0ff6", "patch": "@@ -0,0 +1,170 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do run { target c++23 } }\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  struct R\n+  {\n+    const wchar_t* begin() const\n+    { return str; }\n+\n+    const wchar_t* end() const\n+    { return str + std::char_traits<wchar_t>::length(str); }\n+\n+    const wchar_t* str = L\"Home on the range\";\n+  };\n+\n+  R r;\n+  std::wstring_view s = r;\n+  VERIFY( s == r.str );\n+  VERIFY( s.data() == std::ranges::data(r) );\n+  VERIFY( s.size() == std::ranges::size(r) );\n+\n+  struct R2 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator std::wstring_view() const { return L\"Out of range\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R2> );\n+  static_assert( std::ranges::sized_range<R2> );\n+  R2 r2;\n+  std::wstring_view s2 = r2; // uses conversion to wstring_view\n+  VERIFY( s2 == L\"Out of range\" );\n+  VERIFY( std::wstring_view(const_cast<const R2&>(r2)) == s2 );\n+\n+  struct R3 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator const wchar_t*() { return L\"Orange\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R3> );\n+  static_assert( std::ranges::sized_range<R3> );\n+  R3 r3;\n+  std::wstring_view s3(r3); // uses conversion to const wchar_t*\n+  VERIFY( s3 == L\"Orange\" );\n+  s3 = std::wstring_view(const_cast<const R3&>(r3)); // uses range constructor\n+  VERIFY( s3 == L\"Home on the range\" );\n+\n+  struct R4 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator std::wstring_view() { return L\"Strange\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R4> );\n+  static_assert( std::ranges::sized_range<R4> );\n+  R4 r4;\n+  std::wstring_view s4 = r4; // Uses conversion to wstring_view\n+  VERIFY( s4 == L\"Strange\" );\n+  // Cannot construct from const R4 because of non-const conversion op:\n+  static_assert( ! std::is_constructible_v<std::wstring_view, const R4&> );\n+\n+  struct R5 : R\n+  {\n+    using R::begin;\n+    using R::end;\n+    operator std::wstring_view() && { return L\"Stranger\"; }\n+  };\n+  static_assert( std::ranges::contiguous_range<R5> );\n+  static_assert( std::ranges::sized_range<R5> );\n+  R5 r5;\n+  std::wstring_view s5 = r5; // Uses range constructor\n+  VERIFY( s5 == r5.str );\n+  s5 = std::wstring_view(std::move(r5)); // In C++20 this used conversion op.\n+  VERIFY( s5 == r5.str );\t        // In C++23 it uses range constructor.\n+\n+  wchar_t arr[] = L\"arrangement\\0with\\0nulls\";\n+  std::wstring_view sa = arr; // Does not use range constructor\n+  VERIFY( sa.data() == arr );\n+  VERIFY( sa == L\"arrangement\" );\n+  VERIFY( std::end(sa) != std::end(arr) );\n+}\n+\n+void\n+test02()\n+{\n+  using V1 = std::basic_string_view<char>;\n+  // range_value_t<V1> is not the right type\n+  static_assert( ! std::is_constructible_v<std::wstring_view, V1> );\n+\n+  using V2 = std::basic_string_view<wchar_t, __gnu_cxx::char_traits<wchar_t>>;\n+  // V2::traits_type is not the right type\n+  static_assert( ! std::is_constructible_v<std::wstring_view, V2> );\n+\n+  struct V3 : V2\n+  {\n+  private:\n+    using V2::traits_type;\n+  };\n+  // V3::traits_type is not a valid (accessible) type\n+  static_assert( std::is_constructible_v<std::wstring_view, V3> );\n+\n+  struct V4 : V2\n+  {\n+    using traits_type = std::wstring_view::traits_type;\n+  };\n+  // V4::traits_type is the right type\n+  static_assert( std::is_constructible_v<std::wstring_view, V4> );\n+}\n+\n+void\n+test03()\n+{\n+  struct R\n+  {\n+    wchar_t* begin() { return nullptr; }\n+    const wchar_t* begin() const noexcept { return nullptr; }\n+\n+    wchar_t* end() { return nullptr; }\n+    const wchar_t* end() const noexcept { return nullptr; }\n+  };\n+\n+  static_assert( ! noexcept(std::wstring_view(std::declval<R&>())) );\n+  static_assert( noexcept(std::wstring_view(std::declval<const R&>())) );\n+}\n+\n+void\n+test04()\n+{\n+  struct R\n+  {\n+    const wchar_t* begin() const { return nullptr; }\n+    const wchar_t* end() const { return nullptr; }\n+  };\n+\n+  R r;\n+  std::basic_string_view s = r; // Use deduction guide.\n+\n+  static_assert( std::is_same_v<decltype(s), std::wstring_view> );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}