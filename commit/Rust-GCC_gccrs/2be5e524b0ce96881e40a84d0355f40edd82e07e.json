{"sha": "2be5e524b0ce96881e40a84d0355f40edd82e07e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlNWU1MjRiMGNlOTY4ODFlNDBhODRkMDM1NWY0MGVkZDgyZTA3ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-04-17T14:49:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-04-17T14:49:41Z"}, "message": "sparc.c (eligible_for_sibcall_delay): Cannot use leaf sibcall delay slot if flag_pic.\n\n\t* config/sparc/sparc.c (eligible_for_sibcall_delay): Cannot use\n\tleaf sibcall delay slot if flag_pic.\n\t(output_sibcall): Always emit call for leaf sibcall if flag_pic.\n\nFrom-SVN: r33210", "tree": {"sha": "b1e4321d352665efa9204292a144b9132c825282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1e4321d352665efa9204292a144b9132c825282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be5e524b0ce96881e40a84d0355f40edd82e07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be5e524b0ce96881e40a84d0355f40edd82e07e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be5e524b0ce96881e40a84d0355f40edd82e07e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be5e524b0ce96881e40a84d0355f40edd82e07e/comments", "author": null, "committer": null, "parents": [{"sha": "130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/130bfbdd7a19f08c318c8a888027d24e6e8fbfa1"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "f400c9547cbb735a45698ee30fd5fb9c5c7d7816", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be5e524b0ce96881e40a84d0355f40edd82e07e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be5e524b0ce96881e40a84d0355f40edd82e07e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2be5e524b0ce96881e40a84d0355f40edd82e07e", "patch": "@@ -1,3 +1,9 @@\n+2000-04-17  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/sparc/sparc.c (eligible_for_sibcall_delay): Cannot use\n+\tleaf sibcall delay slot if flag_pic.\n+\t(output_sibcall): Always emit call for leaf sibcall if flag_pic.\n+\n 2000-04-17  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (stmp-fixproto): Acknowledge errors in fixproto.\n@@ -44,7 +50,8 @@ Mon Apr 17 14:59:36 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n \t(ASM_OUTPUT_CASE_END): New, put assembler back into code CSECT.\n \t(ASM_OUTPUT_ADDR_VEC_ELT, ASM_OUTPUT_ADDR_DIFF_ELT): Remove page check,\n \tsince vector in in the data CSECT.\n-\t(ASM_OUTPUT_REG_POP, ASM_OUTPUT_REG_PUSH): Restore to correct operation.        * i370.md (Many patterns): Put the length in the XL directives.\n+\t(ASM_OUTPUT_REG_POP, ASM_OUTPUT_REG_PUSH): Restore to correct operation.\n+        * i370.md (Many patterns): Put the length in the XL directives.\n \t(movdi): Put back STM and MVC in definition.\n \t(floatsidf2): Correct TARGET_ELF_ABI pattern and add back the LE370\n \tpattern using the TCA."}, {"sha": "a2b75121d3ad7f42c7417ebbfb7bde2dc3a27b95", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be5e524b0ce96881e40a84d0355f40edd82e07e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be5e524b0ce96881e40a84d0355f40edd82e07e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=2be5e524b0ce96881e40a84d0355f40edd82e07e", "patch": "@@ -2504,7 +2504,7 @@ eligible_for_sibcall_delay (trial)\n     {\n       /* If the tail call is done using the call instruction,\n \t we have to restore %o7 in the delay slot.  */\n-      if (TARGET_ARCH64 && ! TARGET_CM_MEDLOW)\n+      if ((TARGET_ARCH64 && ! TARGET_CM_MEDLOW) || flag_pic)\n \treturn 0;\n \n       /* %g1 is used to build the function address */\n@@ -3735,7 +3735,7 @@ output_sibcall (insn, call_operand)\n \n   if (leaf_regs)\n     {\n-      int spare_slot = (TARGET_ARCH32 || TARGET_CM_MEDLOW);\n+      int spare_slot = ((TARGET_ARCH32 || TARGET_CM_MEDLOW) && ! flag_pic);\n       int size = 0;\n \n       if ((actual_fsize || ! spare_slot) && delay_slot)"}]}