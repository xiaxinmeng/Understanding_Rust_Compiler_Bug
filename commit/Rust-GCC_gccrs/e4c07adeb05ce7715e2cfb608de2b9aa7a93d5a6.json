{"sha": "e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRjMDdhZGViMDVjZTc3MTVlMmNmYjYwOGRlMmI5YWE3YTkzZDVhNg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-10-02T18:29:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-10-02T18:29:27Z"}, "message": "re PR target/50579 (gcc.target/mips/20020620-1.c FAILs on IRIX 6.5)\n\ngcc/testsuite/\n\tPR target/50579\n\t* gcc.target/mips/mips.exp (mips_long32_abi_p, mips_long64_abi_p):\n\tNew procedures.\n\t(mips-dg-options): Force an ABI option if the current ABI is\n\tincompatible with the required -mlong setting.  Likewise force\n\ta long setting if the current one is incompatible with the\n\tchosen ABI.  Keep abi_test_option_p, abi and eabi_p updated\n\tthroughout procedure.\n\t* gcc.target/mips/abi-o64-long64.c: Require -mno-abicalls\n\tinstead of addressing=absolute.\n\nFrom-SVN: r179433", "tree": {"sha": "76e55902244d7f2050a160fc419db15c02269341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76e55902244d7f2050a160fc419db15c02269341"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9b59f5634a62064c652b54dc1a9dc8710261a93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9b59f5634a62064c652b54dc1a9dc8710261a93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9b59f5634a62064c652b54dc1a9dc8710261a93"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "0f09e0f58f8bf809c34392541dd5e4e51f41d588", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "patch": "@@ -1,3 +1,16 @@\n+2011-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/50579\n+\t* gcc.target/mips/mips.exp (mips_long32_abi_p, mips_long64_abi_p):\n+\tNew procedures.\n+\t(mips-dg-options): Force an ABI option if the current ABI is\n+\tincompatible with the required -mlong setting.  Likewise force\n+\ta long setting if the current one is incompatible with the\n+\tchosen ABI.  Keep abi_test_option_p, abi and eabi_p updated\n+\tthroughout procedure.\n+\t* gcc.target/mips/abi-o64-long64.c: Require -mno-abicalls\n+\tinstead of addressing=absolute.\n+\n 2011-10-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/stack-1.c: New test."}, {"sha": "43078f6809a1d838970d489bb875743e92f8862d", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64.c?ref=e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "patch": "@@ -1,2 +1,2 @@\n-/* { dg-options \"-mabi=o64 -mlong64 addressing=absolute -O2\" } */\n+/* { dg-options \"-mabi=o64 -mlong64 -mno-abicalls -O2\" } */\n #include \"abi-main.h\""}, {"sha": "9d666fbaca3fee342d854d2e2728b39b45305e37", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=e4c07adeb05ce7715e2cfb608de2b9aa7a93d5a6", "patch": "@@ -588,6 +588,30 @@ proc mips_64bit_abi_p { option } {\n     return 0\n }\n \n+# Return true if the given abi-group option implicitly requires -mlong32.\n+# o64 requires this for -mabicalls, but not otherwise; pick the conservative\n+# case for simplicity.\n+proc mips_long32_abi_p { option } {\n+    switch -glob -- $option {\n+\t-mabi=o64 -\n+\t-mabi=n32 -\n+\t-mabi=32 {\n+\t    return 1\n+\t}\n+    }\n+    return 0\n+}\n+\n+# Return true if the given abi-group option implicitly requires -mlong64.\n+proc mips_long64_abi_p { option } {\n+    switch -glob -- $option {\n+\t-mabi=64 {\n+\t    return 1\n+\t}\n+    }\n+    return 0\n+}\n+\n # Check whether the current target supports all the options that the\n # current test requires.  Return \"\" if so, otherwise return one of\n # the incompatible options.  UPSTATUS describes the option status.\n@@ -1029,24 +1053,41 @@ proc mips-dg-options { args } {\n \t    # -mips16 -mhard-float requires o32 or o64.\n \t    # -mips16 PIC requires o32 or o64.\n \t    set force_abi 1\n+\t} elseif { [mips_have_test_option_p options \"-mlong32\"]\n+\t\t   && [mips_long64_abi_p $abi] } {\n+\t    set force_abi 1\n+\t} elseif { [mips_have_test_option_p options \"-mlong64\"]\n+\t\t   && [mips_long32_abi_p $abi] } {\n+\t    set force_abi 1\n \t} else {\n \t    set force_abi 0\n \t}\n \tif { $gp_size == 32 } {\n \t    if { $force_abi || [mips_64bit_abi_p $abi] } {\n-\t\tmips_make_test_option options \"-mabi=32\"\n+\t\tif { [mips_have_test_option_p options \"-mlong64\"] } {\n+\t\t    mips_make_test_option options \"-mabi=eabi\"\n+\t\t    mips_make_test_option options \"-mgp32\"\n+\t\t} else {\n+\t\t    mips_make_test_option options \"-mabi=32\"\n+\t\t}\n \t    }\n \t} else {\n \t    if { $force_abi || [mips_32bit_abi_p $abi] } {\n-\t\t# All configurations should have an assembler that\n-\t\t# supports o64, since it requires the same BFD target\n-\t\t# vector as o32.  In contrast, many assembler\n-\t\t# configurations do not have n32 or n64 support.\n-\t\tmips_make_test_option options \"-mabi=o64\"\n+\t\tif { [mips_have_test_option_p options \"-mlong64\"] } {\n+\t\t    mips_make_test_option options \"-mabi=eabi\"\n+\t\t    mips_make_test_option options \"-mgp64\"\n+\t\t} else {\n+\t\t    # All configurations should have an assembler that\n+\t\t    # supports o64, since it requires the same BFD target\n+\t\t    # vector as o32.  In contrast, many assembler\n+\t\t    # configurations do not have n32 or n64 support.\n+\t\t    mips_make_test_option options \"-mabi=o64\"\n+\t\t}\n \t    }\n \t}\n-\tunset abi\n-\tunset eabi_p\n+\tset abi_test_option_p [mips_test_option_p options abi]\n+\tset abi [mips_option options abi]\n+\tset eabi_p [mips_same_option_p $abi \"-mabi=eabi\"]\n     }\n \n     # Handle dependencies between the abi options and the post-abi options.\n@@ -1070,8 +1111,11 @@ proc mips-dg-options { args } {\n \t\tmips_make_test_option options \"-mno-mips16\"\n \t    }\n \t}\n-\tunset abi\n-\tunset eabi_p\n+\tif { [mips_long32_abi_p $abi] } {\n+\t    mips_make_test_option options \"-mlong32\"\n+\t} elseif { [mips_long64_abi_p $abi] } {\n+\t    mips_make_test_option options \"-mlong64\"\n+\t}\n     }\n \n     # Handle dependencies between the arch option and the post-arch options."}]}