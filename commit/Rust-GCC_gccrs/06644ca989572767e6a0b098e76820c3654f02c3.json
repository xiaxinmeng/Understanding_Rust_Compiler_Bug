{"sha": "06644ca989572767e6a0b098e76820c3654f02c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY2NDRjYTk4OTU3Mjc2N2U2YTBiMDk4ZTc2ODIwYzM2NTRmMDJjMw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-01-22T04:47:41Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-05-09T01:22:55Z"}, "message": "gcc/testsuite: Remove traces of crisv32-* outside gcc.target/cris\n\nPart of the removal of crisv32-* and cris-*-linux* (cris-elf remains).\nUses of \"cris*\" (as opposed to \"cris\") are deliberately left unadjusted.\n\ngcc/testsuite:\n\t* gcc.dg/20020919-1.c, gcc.dg/pr31866.c, gcc.dg/pr46647.c,\n\tgcc.dg/sibcall-10.c, gcc.dg/sibcall-3.c, gcc.dg/sibcall-4.c,\n\tgcc.dg/sibcall-9.c, gcc.dg/torture/cris-asm-mof-1.c,\n\tgcc.dg/torture/cris-volatile-1.c, gcc.dg/torture/pr38948.c,\n\tgcc.dg/tree-ssa/20040204-1.c, gcc.dg/tree-ssa/loop-1.c,\n\tgcc.dg/weak/typeof-2.c, lib/target-supports.exp: Remove remaining\n\ttraces of crisv32-*.", "tree": {"sha": "759b226276a0ec8be74f6e31c516b21ed7f363d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/759b226276a0ec8be74f6e31c516b21ed7f363d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06644ca989572767e6a0b098e76820c3654f02c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06644ca989572767e6a0b098e76820c3654f02c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06644ca989572767e6a0b098e76820c3654f02c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06644ca989572767e6a0b098e76820c3654f02c3/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a012982fd0d56fe15201682246404306a0c14370", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a012982fd0d56fe15201682246404306a0c14370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a012982fd0d56fe15201682246404306a0c14370"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "4c75fe20722622d4e7f9fe69a01f120a8badf2a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -1,6 +1,13 @@\n 2020-05-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.target/cris/: Adjust for removing crisv32-* and cris-linux-*.\n+\t* gcc.dg/20020919-1.c, gcc.dg/pr31866.c, gcc.dg/pr46647.c,\n+\tgcc.dg/sibcall-10.c, gcc.dg/sibcall-3.c, gcc.dg/sibcall-4.c,\n+\tgcc.dg/sibcall-9.c, gcc.dg/torture/cris-asm-mof-1.c,\n+\tgcc.dg/torture/cris-volatile-1.c, gcc.dg/torture/pr38948.c,\n+\tgcc.dg/tree-ssa/20040204-1.c, gcc.dg/tree-ssa/loop-1.c,\n+\tgcc.dg/weak/typeof-2.c, lib/target-supports.exp: Remove remaining\n+\ttraces of crisv32-*.\n \n 2020-05-08  Vladimir Makarov  <vmakarov@redhat.com>\n "}, {"sha": "38add3a45f0918d69eee79853351e445ee490fa5", "filename": "gcc/testsuite/gcc.dg/20020919-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20020919-1.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -8,7 +8,7 @@\n    You must be this tall ---> fit two long longs in asm-declared registers\n    to enter this amusement.  */\n \n-/* { dg-do compile { target alpha*-*-* cris-*-* crisv32-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n+/* { dg-do compile { target alpha*-*-* cris-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n /* { dg-options \"-O2\" } */\n \n /* Constructed examples; input/output (same register), output, input, and"}, {"sha": "d6a2ab05690dbf17cdc8359ec990d815d550c217", "filename": "gcc/testsuite/gcc.dg/pr31866.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31866.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31866.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr31866.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -1,5 +1,5 @@\n /* PR tree-optimization/31866 */\n-/* { dg-do compile { target alpha*-*-* cris-*-* crisv32-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n+/* { dg-do compile { target alpha*-*-* cris-*-* i?86-*-* mmix-*-* powerpc*-*-* rs6000-*-* x86_64-*-* } } */\n /* { dg-options \"-O2\" } */\n \n #if defined (__alpha__)"}, {"sha": "7eefc6e336a8bbbe07ee6b18378655aa56bc4600", "filename": "gcc/testsuite/gcc.dg/pr46647.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46647.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46647.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46647.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -25,5 +25,5 @@ func3 (void)\n   return 0;\n }\n \n-/* The xfail for avr, cris-* and crisv32-* is due to PR53535.  */\n-/* { dg-final { scan-tree-dump-not \"memset\" \"optimized\" { xfail avr-*-* cris-*-* crisv32-*-* } } } */\n+/* The xfail for avr and cris-* is due to PR53535.  */\n+/* { dg-final { scan-tree-dump-not \"memset\" \"optimized\" { xfail avr-*-* cris-*-* } } } */"}, {"sha": "4ac2ee45fbf7fff45a022fe441d646e2ae988755", "filename": "gcc/testsuite/gcc.dg/sibcall-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { amdgcn*-*-* cris-*-* crisv32-*-* csky-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { amdgcn*-*-* cris-*-* csky-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* -msave-restore disables sibcall patterns.  */"}, {"sha": "9962b641298f75d2012d3f3bfb0b41e9f4036272", "filename": "gcc/testsuite/gcc.dg/sibcall-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-3.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { cris-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */"}, {"sha": "9ba1d16d48954ed913fe3162b35fa942e1de5b17", "filename": "gcc/testsuite/gcc.dg/sibcall-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-4.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { cris-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* { dg-options \"-O2 -foptimize-sibling-calls\" } */"}, {"sha": "c06acdbea350ad92e58b86eff91e09fd424753ff", "filename": "gcc/testsuite/gcc.dg/sibcall-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -5,7 +5,7 @@\n    Copyright (C) 2002 Free Software Foundation Inc.\n    Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n \n-/* { dg-do run { xfail { { amdgcn*-*-* cris-*-* crisv32-*-* csky-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* nvptx-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* { dg-do run { xfail { { amdgcn*-*-* cris-*-* csky-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* nvptx-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n /* -mlongcall disables sibcall patterns.  */\n /* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n /* -msave-restore disables sibcall patterns.  */"}, {"sha": "77cee9f427889499a573c593b5bb9bea7364cea8", "filename": "gcc/testsuite/gcc.dg/torture/cris-asm-mof-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-asm-mof-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-asm-mof-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-asm-mof-1.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target cris-*-* crisv32-*-* } } */\n+/* { dg-do compile { target cris-*-* } } */\n /* { dg-skip-if \"\" { cris*-*-* } { \"-march*\" } { \"\" } } */\n /* { dg-options \"-O2 -march=v10\" } */\n /* { dg-final { scan-assembler \"in-asm: .mof\" } } */"}, {"sha": "7f613c4dc7707256f335c704c4e0b438c50a3727", "filename": "gcc/testsuite/gcc.dg/torture/cris-volatile-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-volatile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-volatile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcris-volatile-1.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -2,7 +2,7 @@\n    Check that size-optimizations for move insns (specifically peephole\n    optimizations) aren't applied to volatile objects in the CRIS port.\n    Origin: Hans-Peter Nilsson.  */\n-/* { dg-do compile { target cris-*-* crisv32-*-* } } */\n+/* { dg-do compile { target cris-*-* } } */\n /* { dg-final { scan-assembler-not {movu\\...\\[} } } */\n /* { dg-final { scan-assembler-not {move\\.[^d].\\[} } } */\n /* { dg-final { scan-assembler-not {and\\.[^d].\\[} } } */"}, {"sha": "22cef3b356d96253d88e341ff11b78532d231de8", "filename": "gcc/testsuite/gcc.dg/torture/pr38948.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr38948.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr38948.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr38948.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -1,5 +1,4 @@\n /* { dg-options \"-fno-tree-sra\" } */\n-/* { dg-options \"-fno-tree-sra -march=v32\" { target cris-*-* } } */\n typedef unsigned char byte;\n typedef unsigned int uint;\n typedef int bool;"}, {"sha": "b7d50ecd6d6d14c33c2ce5cfef1bdfc23a9e7299", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -33,4 +33,4 @@ void test55 (int x, int y)\n    that the && should be emitted (based on BRANCH_COST).  Fix this\n    by teaching dom to look through && and register all components\n    as true.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* visium-*-* x86_64-*-* riscv*-*-* or1k*-*-* msp430-*-* pru*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* visium-*-* x86_64-*-* riscv*-*-* or1k*-*-* msp430-*-* pru*-*-*\" } } } } */"}, {"sha": "a531b7584a64204b433ad81cbdd50bb160c7d13f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -46,7 +46,7 @@ int xxx(void)\n /* CRIS and MSP430 keep the address in a register.  */\n /* m68k sometimes puts the address in a register, depending on CPU and PIC.  */\n \n-/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* i?86-*-mingw* i?86-*-cygwin* x86_64-*-mingw* visium-*-* nvptx*-*-* pdp11*-*-* msp430-*-* amdgcn*-*-* } } } */\n+/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* fido-*-* m68k-*-* i?86-*-mingw* i?86-*-cygwin* x86_64-*-mingw* visium-*-* nvptx*-*-* pdp11*-*-* msp430-*-* amdgcn*-*-* } } } */\n /* { dg-final { scan-assembler-times \"foo,%r\" 5 { target hppa*-*-* } } } */\n /* { dg-final { scan-assembler-times \"= foo\"  5 { target ia64*-*-* } } } */\n /* { dg-final { scan-assembler-times \"call\\[ \\t\\]*_foo\" 5 { target i?86-*-mingw* i?86-*-cygwin* } } } */"}, {"sha": "afce17f53cb09431167ad026831471afa30fe4cd", "filename": "gcc/testsuite/gcc.dg/weak/typeof-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -42,7 +42,6 @@ int bar3 (int x)\n // { dg-final { if [string match s390*-*-* $target_triplet ] {return} } }\n // Likewise for CRIS targets.\n // { dg-final { if [string match cris-*-* $target_triplet ] {return} } }\n-// { dg-final { if [string match crisv32-*-* $target_triplet ] {return} } }\n // Likewise for m68k targets.\n // { dg-final { if [string match fido-*-* $target_triplet ] {return} } }\n // { dg-final { if [string match m68k-*-* $target_triplet ] {return} } }"}, {"sha": "a96b0525ba902b4d39e21123186171d951bd4e9d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06644ca989572767e6a0b098e76820c3654f02c3/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=06644ca989572767e6a0b098e76820c3654f02c3", "patch": "@@ -698,7 +698,6 @@ proc check_profiling_available { test_what } {\n \t     || [istarget avr-*-*]\n \t     || [istarget bfin-*-*]\n \t     || [istarget cris-*-*]\n-\t     || [istarget crisv32-*-*]\n \t     || [istarget csky-*-elf]\n \t     || [istarget fido-*-elf]\n \t     || [istarget h8300-*-*]\n@@ -7583,7 +7582,7 @@ proc check_effective_target_sync_int_long { } {\n \t     || [istarget hppa*-*linux*]\n \t     || [istarget s390*-*-*] \n \t     || [istarget powerpc*-*-*]\n-\t     || [istarget crisv32-*-*] || [istarget cris-*-*]\n+\t     || [istarget cris-*-*]\n \t     || ([istarget sparc*-*-*] && [check_effective_target_sparc_v9])\n \t     || ([istarget arc*-*-*] && [check_effective_target_arc_atomic])\n \t     || [check_effective_target_mips_llsc] }}]\n@@ -7606,7 +7605,7 @@ proc check_effective_target_sync_char_short { } {\n \t     || [istarget hppa*-*linux*]\n \t     || [istarget s390*-*-*] \n \t     || [istarget powerpc*-*-*]\n-\t     || [istarget crisv32-*-*] || [istarget cris-*-*]\n+\t     || [istarget cris-*-*]\n \t     || ([istarget sparc*-*-*] && [check_effective_target_sparc_v9])\n \t     || ([istarget arc*-*-*] && [check_effective_target_arc_atomic])\n \t     || [check_effective_target_mips_llsc] }}]"}]}