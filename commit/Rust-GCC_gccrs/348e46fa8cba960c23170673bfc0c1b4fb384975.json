{"sha": "348e46fa8cba960c23170673bfc0c1b4fb384975", "node_id": "C_kwDOANBUbNoAKDM0OGU0NmZhOGNiYTk2MGMyMzE3MDY3M2JmYzBjMWI0ZmIzODQ5NzU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-07T06:59:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-07T07:00:00Z"}, "message": "fixincludes: Deal also with the _Float128x cases [PR107059]\n\nOn Wed, Sep 28, 2022 at 08:19:43PM +0200, Jakub Jelinek via Gcc-patches wrote:\n> Another case are the following 3 snippets:\n> #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n> #   error \"_Float128X supported but no constant suffix\"\n> #  else\n> #   define __f128x(x) x##f128x\n> #  endif\n> ...\n> #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n> #   error \"_Float128X supported but no complex type\"\n> #  else\n> #   define __CFLOAT128X _Complex _Float128x\n> #  endif\n> ...\n> #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n> #   error \"_Float128x supported but no type\"\n> #  endif\n> but as no target has _Float128x right now and don't see it\n> coming soon, it isn't a big deal (on the glibc side it is of\n> course ok to adjust those).\n\nThis incremental patch deals handles the above 3 cases, so we\nfixinclude what glibc itself changed too.\n\n2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/107059\n\t* inclhack.def (glibc_cxx_floatn_5): New.\n\t* fixincl.x: Regenerated.\n\t* tests/base/bits/floatn.h: Regenerated.", "tree": {"sha": "4bd6cf6081627fe589321270450088cb12c256c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bd6cf6081627fe589321270450088cb12c256c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/348e46fa8cba960c23170673bfc0c1b4fb384975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348e46fa8cba960c23170673bfc0c1b4fb384975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348e46fa8cba960c23170673bfc0c1b4fb384975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348e46fa8cba960c23170673bfc0c1b4fb384975/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d"}], "stats": {"total": 80, "additions": 75, "deletions": 5}, "files": [{"sha": "20867548e246c7ed97ea895e1df59fa8c0a9bedf", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348e46fa8cba960c23170673bfc0c1b4fb384975/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348e46fa8cba960c23170673bfc0c1b4fb384975/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=348e46fa8cba960c23170673bfc0c1b4fb384975", "patch": "@@ -2,11 +2,11 @@\n  *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  *\n- * It has been AutoGen-ed  September 28, 2022 at 07:56:15 PM by AutoGen 5.18.16\n+ * It has been AutoGen-ed  September 29, 2022 at 10:22:55 PM by AutoGen 5.18.16\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Sep 28 19:56:15 CEST 2022\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Sep 29 22:22:55 CEST 2022\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 271 fixup descriptions.\n+ * This file contains 272 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4271,6 +4271,43 @@ static const char* apzGlibc_Cxx_Floatn_4Patch[] = {\n %2\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_Cxx_Floatn_5 fix\n+ */\n+tSCC zGlibc_Cxx_Floatn_5Name[] =\n+     \"glibc_cxx_floatn_5\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_Cxx_Floatn_5List[] =\n+  \"bits/floatn.h\\0bits/floatn-common.h\\0*/bits/floatn.h\\0*/bits/floatn-common.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_Cxx_Floatn_5Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zGlibc_Cxx_Floatn_5Select0[] =\n+       \"^([ \\t]*#[ \\t]*if !__GNUC_PREREQ \\\\(7, 0\\\\) \\\\|\\\\| )defined __cplusplus\\n\\\n+([ \\t]*#[ \\t]+error \\\"_Float128[xX] supported but no )\";\n+\n+#define    GLIBC_CXX_FLOATN_5_TEST_CT  1\n+static tTestDesc aGlibc_Cxx_Floatn_5Tests[] = {\n+  { TT_EGREP,    zGlibc_Cxx_Floatn_5Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_Cxx_Floatn_5\n+ */\n+static const char* apzGlibc_Cxx_Floatn_5Patch[] = {\n+    \"format\",\n+    \"%1(defined __cplusplus && !__GNUC_PREREQ (13, 0))\\n\\\n+%2\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Glibc_Mutex_Init fix\n@@ -11038,9 +11075,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          309\n+#define REGEX_COUNT          310\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            271\n+#define FIX_COUNT            272\n \n /*\n  *  Enumerate the fixes\n@@ -11147,6 +11184,7 @@ typedef enum {\n     GLIBC_CXX_FLOATN_2_FIXIDX,\n     GLIBC_CXX_FLOATN_3_FIXIDX,\n     GLIBC_CXX_FLOATN_4_FIXIDX,\n+    GLIBC_CXX_FLOATN_5_FIXIDX,\n     GLIBC_MUTEX_INIT_FIXIDX,\n     GLIBC_STDINT_FIXIDX,\n     GLIBC_STRNCPY_FIXIDX,\n@@ -11825,6 +11863,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      GLIBC_CXX_FLOATN_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aGlibc_Cxx_Floatn_4Tests,   apzGlibc_Cxx_Floatn_4Patch, 0 },\n \n+  {  zGlibc_Cxx_Floatn_5Name,    zGlibc_Cxx_Floatn_5List,\n+     apzGlibc_Cxx_Floatn_5Machs,\n+     GLIBC_CXX_FLOATN_5_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_Cxx_Floatn_5Tests,   apzGlibc_Cxx_Floatn_5Patch, 0 },\n+\n   {  zGlibc_Mutex_InitName,    zGlibc_Mutex_InitList,\n      apzGlibc_Mutex_InitMachs,\n      GLIBC_MUTEX_INIT_TEST_CT, FD_MACH_ONLY,"}, {"sha": "d4637470d7a79897a820a69f11c5e47597f8fe9c", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348e46fa8cba960c23170673bfc0c1b4fb384975/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348e46fa8cba960c23170673bfc0c1b4fb384975/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=348e46fa8cba960c23170673bfc0c1b4fb384975", "patch": "@@ -2131,6 +2131,23 @@ fix = {\n \tEOT;\n };\n \n+fix = {\n+    hackname  = glibc_cxx_floatn_5;\n+    files     = bits/floatn.h, bits/floatn-common.h, \"*/bits/floatn.h\", \"*/bits/floatn-common.h\";\n+    select    = \"^([ \\t]*#[ \\t]*if !__GNUC_PREREQ \\\\(7, 0\\\\) \\\\|\\\\| )defined __cplusplus\\n\"\n+\t\t\"([ \\t]*#[ \\t]+error \\\"_Float128[xX] supported but no )\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1(defined __cplusplus && !__GNUC_PREREQ (13, 0))\\n%2\";\n+    test_text = <<-EOT\n+\t#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n+\t#   error \"_Float128X supported but no constant suffix\"\n+\t#  endif\n+\t#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n+\t#   error \"_Float128x supported but no type\"\n+\t#  endif\n+\tEOT;\n+};\n+\n /*  glibc-2.3.5 defines pthread mutex initializers incorrectly,\n  *  so we replace them with versions that correspond to the\n  *  definition."}, {"sha": "9681134a5f3ce8e6008102a4d45ad1335c70f40c", "filename": "fixincludes/tests/base/bits/floatn.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/348e46fa8cba960c23170673bfc0c1b4fb384975/fixincludes%2Ftests%2Fbase%2Fbits%2Ffloatn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/348e46fa8cba960c23170673bfc0c1b4fb384975/fixincludes%2Ftests%2Fbase%2Fbits%2Ffloatn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fbits%2Ffloatn.h?ref=348e46fa8cba960c23170673bfc0c1b4fb384975", "patch": "@@ -84,3 +84,13 @@ typedef long double _Float128;\n #   define __CFLOAT128 _Complex long double\n #  endif\n #endif  /* GLIBC_CXX_FLOATN_4_CHECK */\n+\n+\n+#if defined( GLIBC_CXX_FLOATN_5_CHECK )\n+#  if !__GNUC_PREREQ (7, 0) || (defined __cplusplus && !__GNUC_PREREQ (13, 0))\n+#   error \"_Float128X supported but no constant suffix\"\n+#  endif\n+#  if !__GNUC_PREREQ (7, 0) || (defined __cplusplus && !__GNUC_PREREQ (13, 0))\n+#   error \"_Float128x supported but no type\"\n+#  endif\n+#endif  /* GLIBC_CXX_FLOATN_5_CHECK */"}]}