{"sha": "6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "node_id": "C_kwDOANBUbNoAKDZlNmJmNGNkMjFhZjM5YTc5MjNiYWUwMDc1MTdhYjQzYTRjM2IzNmE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-21T07:25:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-21T07:29:39Z"}, "message": "Fix no_fsanitize_address effective target\n\nThe implementation of the no_fsanitize_address effective target was copied\nfrom asan-dg.exp without realizing that it does not work outside of this\ncontext (there is a comment explaining why).  As a consequence, it always\nreturns 0, so for example the directive in gnat.dg/asan1.adb:\n\n{ dg-skip-if \"no address sanitizer\" { no_fsanitize_address } }\n\ndoes not work.  This led some people to add the nonsensical:\n\n{ dg-require-effective-target no_fsanitize_address }\n\nto sanitizer tests, e.g. g++.dg/warn/uninit-pr93100.C, thus disabling them\neverywhere instead of just for the problematic targets.\n\ngcc/testsuite/\n\t* lib/target-supports.exp (no_fsanitize_address): Add missing bits.\n\t* gcc.dg/uninit-pr93100.c: Skip if no_fsanitize_address.\n\t* gcc.dg/pr91441.c: Likewise.\n\t* gcc.dg/pr96260.c: Likewise.\n\t* gcc.dg/pr96307.c: Likewise.\n\t* g++.dg/warn/uninit-pr93100.C: Likewise.\n\t* gnat.dg/asan1.adb: Likewise.\n\n\t* gcc.dg/Wstringop-overflow-70.c: Adjust for SPARC.\n\t* g++.dg/abi/anon4.C: Likewise.", "tree": {"sha": "56e59e96253a468ac4913893724b51ebf5a7db85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e59e96253a468ac4913893724b51ebf5a7db85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/comments", "author": null, "committer": null, "parents": [{"sha": "417ea5c02cef7f000e66d1af22b066c2c1cda047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/417ea5c02cef7f000e66d1af22b066c2c1cda047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/417ea5c02cef7f000e66d1af22b066c2c1cda047"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "8200f4bb270f9af7be7064a294a27fac894c8a16", "filename": "gcc/testsuite/g++.dg/abi/anon4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fanon4.C?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,4 +1,5 @@\n // PR c++/65209\n+// { dg-additional-options \"-fno-pie\" { target sparc*-*-* } }\n // { dg-final { scan-assembler-not \"comdat\" } }\n \n // Everything involving the anonymous namespace bits should be private, not"}, {"sha": "e08a36d68a91ba9620ab44d5772017d598f50826", "filename": "gcc/testsuite/g++.dg/warn/uninit-pr93100.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funinit-pr93100.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funinit-pr93100.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funinit-pr93100.C?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/98508 - Sanitizer disable -Wall and -Wextra\n    { dg-do compile }\n-   { dg-require-effective-target no_fsanitize_address }\n-   { dg-options \"-O0 -Wall -fsanitize=address\" } */\n+   { dg-options \"-O0 -Wall -fsanitize=address\" }\n+   { dg-skip-if \"no address sanitizer\" { no_fsanitize_address } } */\n \n struct S\n {"}, {"sha": "ccfe2cefd1ceed7b54f3b41e3594f74f749c2c48", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-70.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-70.c?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -17,8 +17,8 @@ void* warn_loop (void)\n   char *p = __builtin_malloc (15);\n   for (int i = 0; i != 16; ++i)\n     /* The size of the write below depends on the target.  When vectorized\n-       the vector size may be 4 or 16, otherwise it may be a series of byte\n+       the vector size may be 4, 8 or 16, otherwise it may be a series of byte\n        assignments.  */\n-    p[i] = i;       // { dg-warning \"writing (1|2|4|16) bytes? into a region of size (0|1|3|15)\" }\n+    p[i] = i;       // { dg-warning \"writing (1|2|4|8|16) bytes? into a region of size (0|1|3|7|15)\" }\n   return p;\n }"}, {"sha": "4c785f61e597533202f9d3a42ce5a94aa3fd758f", "filename": "gcc/testsuite/gcc.dg/pr91441.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91441.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91441.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr91441.c?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,11 +1,11 @@\n /* PR target/91441 */\n /* { dg-do compile  } */\n-/* { dg-require-effective-target no_fsanitize_address }*/\n /* { dg-options \"--param asan-stack=1 -fsanitize=kernel-address\" } */\n+/* { dg-skip-if \"no address sanitizer\" { no_fsanitize_address } } */\n \n int *bar(int *);\n int *f( int a)\n {\n   return bar(&a);\n }\n-/* { dg-warning \".'-fsanitize=kernel-address' with stack protection is not supported without '-fasan-shadow-offset=' for this target\" \"\" { target *-*-* } 0 } */\n+/* { dg-warning \".'-fsanitize=kernel-address' with stack protection is not supported without '-fasan-shadow-offset=' for this target\" \"\" { target riscv*-*-* } 0 } */"}, {"sha": "587afb76116c5759751d5d6a2ceb1b4a392bc38a", "filename": "gcc/testsuite/gcc.dg/pr96260.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96260.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96260.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96260.c?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,7 +1,7 @@\n /* PR target/96260 */\n /* { dg-do compile } */\n-/* { dg-require-effective-target no_fsanitize_address }*/\n /* { dg-options \"--param asan-stack=1 -fsanitize=kernel-address -fasan-shadow-offset=0x100000\" } */\n+/* { dg-skip-if \"no address sanitizer\" { no_fsanitize_address } } */\n \n int *bar(int *);\n int *f( int a)"}, {"sha": "89002b85c8ea6829e6b78679eedde653bb16753e", "filename": "gcc/testsuite/gcc.dg/pr96307.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96307.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96307.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr96307.c?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,7 +1,7 @@\n /* PR target/96307 */\n /* { dg-do compile } */\n-/* { dg-require-effective-target no_fsanitize_address }*/\n /* { dg-additional-options \"-fsanitize=kernel-address --param=asan-instrumentation-with-call-threshold=8\" } */\n+/* { dg-skip-if \"no address sanitizer\" { no_fsanitize_address } } */\n \n #include <limits.h>\n enum a {test1, test2, test3=INT_MAX};"}, {"sha": "7cb02227bff8a448fd582efdee4ecf955ccaf16f", "filename": "gcc/testsuite/gcc.dg/uninit-pr93100.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr93100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr93100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr93100.c?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/93100 - gcc -fsanitize=address inhibits -Wuninitialized\n    { dg-do compile }\n    { dg-options \"-Wall -fsanitize=address\" }\n-   { dg-skip-if \"sanitize address\" { \"powerpc-ibm-aix*\" } } */\n+   { dg-skip-if \"no address sanitizer\" { no_fsanitize_address } } */\n \n struct A\n {"}, {"sha": "26bc1a404475ad7811f607de15d2dfd8f237d2e3", "filename": "gcc/testsuite/gnat.dg/asan1.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fasan1.adb?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -1,7 +1,7 @@\n --  { dg-do compile }\n --  { dg-additional-sources asan1_pkg.ads }\n --  { dg-options \"-fsanitize=address\" }\n---  { dg-skip-if \"\" no_fsanitize_address }\n+--  { dg-skip-if \"no address sanitizer\" { no_fsanitize_address } }\n \n with Asan1_Pkg;\n "}, {"sha": "9ebca7ac007363d2a35158bb80092118f629b97b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e6bf4cd21af39a7923bae007517ab43a4c3b36a/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6e6bf4cd21af39a7923bae007517ab43a4c3b36a", "patch": "@@ -11251,14 +11251,15 @@ proc check_effective_target_movdir { } {\n     } \"-mmovdiri -mmovdir64b\" ]\n }\n \n-# Return 1 if target is not support address sanitize, 1 otherwise.\n+# Return 1 if the target does not support address sanitizer, 0 otherwise\n \n proc check_effective_target_no_fsanitize_address {} {\n     if ![check_no_compiler_messages fsanitize_address executable {\n \tint main (void) { return 0; }\n-    }] {\n+    } \"-fsanitize=address\" ] {\n \treturn 1;\n     }\n+\n     return 0;\n }\n "}]}