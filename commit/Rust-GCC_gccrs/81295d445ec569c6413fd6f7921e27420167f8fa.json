{"sha": "81295d445ec569c6413fd6f7921e27420167f8fa", "node_id": "C_kwDOANBUbNoAKDgxMjk1ZDQ0NWVjNTY5YzY0MTNmZDZmNzkyMWUyNzQyMDE2N2Y4ZmE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-03-08T09:58:01Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2023-03-22T09:07:13Z"}, "message": "frange: Implement nan_state class [PR109008]\n\nThis patch implements a nan_state class, that allows us to query or\npass around the NANness of an frange.  We can store +NAN, -NAN, +-NAN,\nor not-a-NAN with it.\n\nI tried to touch as little as possible, leaving other cleanups to the\nnext release.  For example, we should replace the m_*_nan fields in\nfrange with nan_state, and provide relevant accessors to nan_state\n(isnan, etc).\n\n\tPR tree-optimization/109008\n\ngcc/ChangeLog:\n\n\t* value-range.cc (frange::set): Add nan_state argument.\n\t* value-range.h (class nan_state): New.\n\t(frange::get_nan_state): New.", "tree": {"sha": "f84f266d86af5f3873a0a64325d832750efcc75a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84f266d86af5f3873a0a64325d832750efcc75a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81295d445ec569c6413fd6f7921e27420167f8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81295d445ec569c6413fd6f7921e27420167f8fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81295d445ec569c6413fd6f7921e27420167f8fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81295d445ec569c6413fd6f7921e27420167f8fa/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e812e8c1e8d65aee05cc3fbbe5727d4e365df57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e812e8c1e8d65aee05cc3fbbe5727d4e365df57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e812e8c1e8d65aee05cc3fbbe5727d4e365df57"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "f71554b7d7ca69ba81c310c5ad2dab690cd621a9", "filename": "gcc/value-range.cc", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81295d445ec569c6413fd6f7921e27420167f8fa/gcc%2Fvalue-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81295d445ec569c6413fd6f7921e27420167f8fa/gcc%2Fvalue-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.cc?ref=81295d445ec569c6413fd6f7921e27420167f8fa", "patch": "@@ -284,7 +284,7 @@ frange::flush_denormals_to_zero ()\n void\n frange::set (tree type,\n \t     const REAL_VALUE_TYPE &min, const REAL_VALUE_TYPE &max,\n-\t     value_range_kind kind)\n+\t     const nan_state &nan, value_range_kind kind)\n {\n   switch (kind)\n     {\n@@ -316,8 +316,8 @@ frange::set (tree type,\n   m_max = max;\n   if (HONOR_NANS (m_type))\n     {\n-      m_pos_nan = true;\n-      m_neg_nan = true;\n+      m_pos_nan = nan.pos_p ();\n+      m_neg_nan = nan.neg_p ();\n     }\n   else\n     {\n@@ -367,6 +367,18 @@ frange::set (tree type,\n     verify_range ();\n }\n \n+// Setter for an frange defaulting the NAN possibility to +-NAN when\n+// HONOR_NANS.\n+\n+void\n+frange::set (tree type,\n+\t     const REAL_VALUE_TYPE &min, const REAL_VALUE_TYPE &max,\n+\t     value_range_kind kind)\n+{\n+  nan_state nan;\n+  set (type, min, max, nan, kind);\n+}\n+\n void\n frange::set (tree min, tree max, value_range_kind kind)\n {"}, {"sha": "ec50346826c344152d70d79fda76cef8bb8a87c6", "filename": "gcc/value-range.h", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81295d445ec569c6413fd6f7921e27420167f8fa/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81295d445ec569c6413fd6f7921e27420167f8fa/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=81295d445ec569c6413fd6f7921e27420167f8fa", "patch": "@@ -268,6 +268,56 @@ class unsupported_range : public vrange\n   virtual void accept (const vrange_visitor &v) const override;\n };\n \n+// The NAN state as an opaque object.  The default constructor is +-NAN.\n+\n+class nan_state\n+{\n+public:\n+  nan_state ();\n+  nan_state (bool pos_nan, bool neg_nan);\n+  bool neg_p () const;\n+  bool pos_p () const;\n+private:\n+  bool m_pos_nan;\n+  bool m_neg_nan;\n+};\n+\n+// Default constructor initializing the object to +-NAN.\n+\n+inline\n+nan_state::nan_state ()\n+{\n+  m_pos_nan = true;\n+  m_neg_nan = true;\n+}\n+\n+// Constructor initializing the object to +NAN if POS_NAN is set, -NAN\n+// if NEG_NAN is set, or +-NAN if both are set.  Otherwise POS_NAN and\n+// NEG_NAN are clear, and the object cannot be a NAN.\n+\n+inline\n+nan_state::nan_state (bool pos_nan, bool neg_nan)\n+{\n+  m_pos_nan = pos_nan;\n+  m_neg_nan = neg_nan;\n+}\n+\n+// Return if +NAN is possible.\n+\n+inline bool\n+nan_state::pos_p () const\n+{\n+  return m_pos_nan;\n+}\n+\n+// Return if -NAN is possible.\n+\n+inline bool\n+nan_state::neg_p () const\n+{\n+  return m_neg_nan;\n+}\n+\n // A floating point range.\n //\n // The representation is a type with a couple of endpoints, unioned\n@@ -295,6 +345,8 @@ class frange : public vrange\n   virtual void set (tree, tree, value_range_kind = VR_RANGE) override;\n   void set (tree type, const REAL_VALUE_TYPE &, const REAL_VALUE_TYPE &,\n \t    value_range_kind = VR_RANGE);\n+  void set (tree type, const REAL_VALUE_TYPE &, const REAL_VALUE_TYPE &,\n+\t    const nan_state &, value_range_kind = VR_RANGE);\n   void set_nan (tree type);\n   void set_nan (tree type, bool sign);\n   virtual void set_varying (tree type) override;\n@@ -315,9 +367,11 @@ class frange : public vrange\n   bool operator!= (const frange &r) const { return !(*this == r); }\n   const REAL_VALUE_TYPE &lower_bound () const;\n   const REAL_VALUE_TYPE &upper_bound () const;\n+  nan_state get_nan_state () const;\n   void update_nan ();\n   void update_nan (bool sign);\n   void update_nan (tree) = delete; // Disallow silent conversion to bool.\n+  void update_nan (const nan_state &);\n   void clear_nan ();\n \n   // fpclassify like API\n@@ -358,6 +412,14 @@ frange::upper_bound () const\n   return m_max;\n }\n \n+// Return the NAN state.\n+\n+inline nan_state\n+frange::get_nan_state () const\n+{\n+  return nan_state (m_pos_nan, m_neg_nan);\n+}\n+\n // is_a<> and as_a<> implementation for vrange.\n \n // Anything we haven't specialized is a hard fail."}]}