{"sha": "0841747819935a6f6def03b9c5f335e5755b7dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg0MTc0NzgxOTkzNWE2ZjZkZWYwM2I5YzVmMzM1ZTU3NTViN2RjMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "1997-10-28T19:56:50Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1997-10-28T19:56:50Z"}, "message": "Fix coldfire/btst problems.\n\n\t* m68k.md (btst patterns): Add 5200 support.\n\nFrom-SVN: r16217", "tree": {"sha": "c2dab20bc22bb2000243a63c2579bed3ce6d18e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2dab20bc22bb2000243a63c2579bed3ce6d18e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0841747819935a6f6def03b9c5f335e5755b7dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0841747819935a6f6def03b9c5f335e5755b7dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0841747819935a6f6def03b9c5f335e5755b7dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0841747819935a6f6def03b9c5f335e5755b7dc2/comments", "author": null, "committer": null, "parents": [{"sha": "750e83485a2a2e2a6b09368000961827d0f7b8a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/750e83485a2a2e2a6b09368000961827d0f7b8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/750e83485a2a2e2a6b09368000961827d0f7b8a8"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "05820601564cc5c592ad695c2855462d05e89cec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0841747819935a6f6def03b9c5f335e5755b7dc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0841747819935a6f6def03b9c5f335e5755b7dc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0841747819935a6f6def03b9c5f335e5755b7dc2", "patch": "@@ -1,3 +1,7 @@\n+Tue Oct 28 11:53:14 1997  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* m68k.md (btst patterns): Add 5200 support.\n+\n Tue Oct 28 11:58:40 1997  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* fold-const.c (fold): For ((a * C1) / C3) or (((a * C1) + C2) / C3)"}, {"sha": "3a54b6d19c0a73d017ec2e42c473cb9b6ee3bc71", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0841747819935a6f6def03b9c5f335e5755b7dc2/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0841747819935a6f6def03b9c5f335e5755b7dc2/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=0841747819935a6f6def03b9c5f335e5755b7dc2", "patch": "@@ -749,12 +749,27 @@\n \f\n ;; Recognizers for btst instructions.\n \n+;; Coldfire/5200 only allows \"<Q>\" type addresses when the bit position is\n+;; specified as a constant, so we must disable all patterns that may extract\n+;; from a MEM at a constant bit position if we can't use this as a constraint.\n+\n (define_insn \"\"\n   [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"o\")\n \t\t\t    (const_int 1)\n \t\t\t    (minus:SI (const_int 7)\n \t\t\t\t      (match_operand:SI 1 \"general_operand\" \"di\"))))]\n-  \"\"\n+  \"!TARGET_5200\"\n+  \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n+\n+;; This is the same as the above pattern except for the constraints.  The 'i'\n+;; has been deleted.\n+\n+(define_insn \"\"\n+  [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"o\")\n+\t\t\t    (const_int 1)\n+\t\t\t    (minus:SI (const_int 7)\n+\t\t\t\t      (match_operand:SI 1 \"general_operand\" \"d\"))))]\n+  \"TARGET_5200\"\n   \"* { return output_btst (operands, operands[1], operands[0], insn, 7); }\")\n \n (define_insn \"\"\n@@ -795,7 +810,7 @@\n   [(set (cc0) (zero_extract (match_operand:QI 0 \"memory_operand\" \"m\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n-  \"(unsigned) INTVAL (operands[1]) < 8\"\n+  \"(unsigned) INTVAL (operands[1]) < 8 && !TARGET_5200\"\n   \"*\n {\n   operands[1] = gen_rtx (CONST_INT, VOIDmode, 7 - INTVAL (operands[1]));\n@@ -806,7 +821,30 @@\n   [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"do\")\n \t\t\t    (const_int 1)\n \t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n-  \"\"\n+  \"!TARGET_5200\"\n+  \"*\n+{\n+  if (GET_CODE (operands[0]) == MEM)\n+    {\n+      operands[0] = adj_offsettable_operand (operands[0],\n+\t\t\t\t\t     INTVAL (operands[1]) / 8);\n+      operands[1] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t     7 - INTVAL (operands[1]) % 8);\n+      return output_btst (operands, operands[1], operands[0], insn, 7);\n+    }\n+  operands[1] = gen_rtx (CONST_INT, VOIDmode,\n+\t\t\t 31 - INTVAL (operands[1]));\n+  return output_btst (operands, operands[1], operands[0], insn, 31);\n+}\")\n+\n+;; This is the same as the above pattern except for the constraints.\n+;; The 'o' has been replaced with 'Q'.\n+\n+(define_insn \"\"\n+  [(set (cc0) (zero_extract (match_operand:SI 0 \"register_operand\" \"dQ\")\n+\t\t\t    (const_int 1)\n+\t\t\t    (match_operand:SI 1 \"const_int_operand\" \"n\")))]\n+  \"TARGET_5200\"\n   \"*\n {\n   if (GET_CODE (operands[0]) == MEM)"}]}