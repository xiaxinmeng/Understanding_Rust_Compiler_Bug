{"sha": "38147a2a4e7c553840b45ba7d099a5f93ac192a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxNDdhMmE0ZTdjNTUzODQwYjQ1YmE3ZDA5OWE1ZjkzYWMxOTJhNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-27T04:02:28Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-27T04:02:28Z"}, "message": "re PR ipa/65076 (16% tramp3d-v4.cpp compile time regression)\n\n\n\tPR ipa/65076\n\t* passes.def: Add pass_nothrow.\n\t* ipa-pure-const.c: (pass_data_nothrow): New.\n\t(pass_nothrow): New.\n\t(pass_nothrow::execute): New.\n\t(make_pass_nothrow): New.\n\t* tree-pass.h (make_pass_nothrow): Declare.\n\nFrom-SVN: r221719", "tree": {"sha": "bba2a867a9af484338b26cd48b43e003bf4baa50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba2a867a9af484338b26cd48b43e003bf4baa50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38147a2a4e7c553840b45ba7d099a5f93ac192a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38147a2a4e7c553840b45ba7d099a5f93ac192a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38147a2a4e7c553840b45ba7d099a5f93ac192a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38147a2a4e7c553840b45ba7d099a5f93ac192a4/comments", "author": null, "committer": null, "parents": [{"sha": "a21065cad0187cf31d5984b12ef73a9f78c229cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21065cad0187cf31d5984b12ef73a9f78c229cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21065cad0187cf31d5984b12ef73a9f78c229cb"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "4706ad99f105c5488f49c94fe04683fffee52722", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38147a2a4e7c553840b45ba7d099a5f93ac192a4", "patch": "@@ -1,3 +1,13 @@\n+2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/65076\n+\t* passes.def: Add pass_nothrow.\n+\t* ipa-pure-const.c: (pass_data_nothrow): New.\n+\t(pass_nothrow): New.\n+\t(pass_nothrow::execute): New.\n+\t(make_pass_nothrow): New.\n+\t* tree-pass.h (make_pass_nothrow): Declare.\n+\n 2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (redirect_to_unreachable): Be prepared for"}, {"sha": "a4cdae9508b84704588d96d55e91e4837307de49", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=38147a2a4e7c553840b45ba7d099a5f93ac192a4", "patch": "@@ -86,6 +86,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-scalar-evolution.h\"\n #include \"intl.h\"\n #include \"opts.h\"\n+#include \"varasm.h\"\n \n /* Lattice values for const and pure functions.  Everything starts out\n    being const, then may drop to pure and then neither depending on\n@@ -710,6 +711,16 @@ check_stmt (gimple_stmt_iterator *gsip, funct_state local, bool ipa)\n   if (is_gimple_debug (stmt))\n     return;\n \n+  /* Do consider clobber as side effects before IPA, so we rather inline\n+     C++ destructors and keep clobber semantics than eliminate them.\n+\n+     TODO: We may get smarter during early optimizations on these and let\n+     functions containing only clobbers to be optimized more.  This is a common\n+     case of C++ destructors.  */\n+\n+  if ((ipa || cfun->after_inlining) && gimple_clobber_p (stmt))\n+    return;\n+\n   if (dump_file)\n     {\n       fprintf (dump_file, \"  scanning: \");\n@@ -1870,3 +1881,96 @@ make_pass_warn_function_noreturn (gcc::context *ctxt)\n {\n   return new pass_warn_function_noreturn (ctxt);\n }\n+\n+/* Simple local pass for pure const discovery reusing the analysis from\n+   ipa_pure_const.   This pass is effective when executed together with\n+   other optimization passes in early optimization pass queue.  */\n+\n+namespace {\n+\n+const pass_data pass_data_nothrow =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"nothrow\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_IPA_PURE_CONST, /* tv_id */\n+  0, /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_nothrow : public gimple_opt_pass\n+{\n+public:\n+  pass_nothrow (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_nothrow, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  opt_pass * clone () { return new pass_nothrow (m_ctxt); }\n+  virtual bool gate (function *) { return optimize; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_nothrow\n+\n+unsigned int\n+pass_nothrow::execute (function *)\n+{\n+  struct cgraph_node *node;\n+  basic_block this_block;\n+\n+  if (TREE_NOTHROW (current_function_decl))\n+    return 0;\n+\n+  node = cgraph_node::get (current_function_decl);\n+\n+  /* We run during lowering, we can not really use availability yet.  */\n+  if (cgraph_node::get (current_function_decl)->get_availability ()\n+      <= AVAIL_INTERPOSABLE)\n+    {\n+      if (dump_file)\n+        fprintf (dump_file, \"Function is interposable;\"\n+\t         \" not analyzing.\\n\");\n+      return true;\n+    }\n+\n+  FOR_EACH_BB_FN (this_block, cfun)\n+    {\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (this_block);\n+\t   !gsi_end_p (gsi);\n+\t   gsi_next (&gsi))\n+        if (stmt_can_throw_external (gsi_stmt (gsi)))\n+\t  {\n+\t    if (is_gimple_call (gsi_stmt (gsi)))\n+\t      {\n+\t\ttree callee_t = gimple_call_fndecl (gsi_stmt (gsi));\n+\t\tif (callee_t && recursive_call_p (current_function_decl,\n+\t\t\t\t\t\t  callee_t))\n+\t\t  continue;\n+\t      }\n+\t\n+\t    if (dump_file)\n+\t      {\n+\t\tfprintf (dump_file, \"Statement can throw: \");\n+\t\tprint_gimple_stmt (dump_file, gsi_stmt (gsi), 0, 0);\n+\t      }\n+\t    return 0;\n+\t  }\n+    }\n+\n+  node->set_nothrow_flag (true);\n+  if (dump_file)\n+    fprintf (dump_file, \"Function found to be nothrow: %s\\n\",\n+\t     current_function_name ());\n+  return 0;\n+}\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_nothrow (gcc::context *ctxt)\n+{\n+  return new pass_nothrow (ctxt);\n+}"}, {"sha": "1d598b29997445c636d045204973aef7f50cf7ad", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=38147a2a4e7c553840b45ba7d099a5f93ac192a4", "patch": "@@ -58,6 +58,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_build_ssa);\n       NEXT_PASS (pass_ubsan);\n       NEXT_PASS (pass_early_warn_uninitialized);\n+      NEXT_PASS (pass_nothrow);\n   POP_INSERT_PASSES ()\n \n   NEXT_PASS (pass_chkp_instrumentation_passes);"}, {"sha": "bc8763db16563e8baf1543c73c5fdc72a6320ac5", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38147a2a4e7c553840b45ba7d099a5f93ac192a4/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=38147a2a4e7c553840b45ba7d099a5f93ac192a4", "patch": "@@ -436,6 +436,7 @@ extern gimple_opt_pass *make_pass_remove_cgraph_callee_edges (gcc::context\n \t\t\t\t\t\t\t      *ctxt);\n extern gimple_opt_pass *make_pass_build_cgraph_edges (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_local_pure_const (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_nothrow (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_tracer (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_warn_unused_result (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_diagnose_tm_blocks (gcc::context *ctxt);"}]}