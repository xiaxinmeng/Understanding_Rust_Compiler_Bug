{"sha": "f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyMjBhNWRkMzlmZWI0NjliZTJiZjgwYTViNDU1ZTJjZTc2NmY1ZQ==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@issan.informatik.uni-dortmund.de", "date": "1998-08-17T08:35:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-08-17T08:35:24Z"}, "message": "m68k.c: Include \"system.h\" instead of <stdio.h>.\n\n        * config/m68k/m68k.c: Include \"system.h\" instead of <stdio.h>.\n        Include \"toplev.h\".\n        (valid_dbcc_comparison_p): Mark mode argument as unused.\n        (symbolic_operand): Likewise.\n        (legitimize_pic_address): Likewise.\n        (const_uint32_operand): Likewise.\n        (const_sint32_operand): Likewise.\n        * sched.c [!INSN_SCHEDULING]: Define only dummy function\n        schedule_insns and comment out rest of file.\n\nFrom-SVN: r21779", "tree": {"sha": "b2f6f77060719590b9ba22b0fc031b946fa6d9de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2f6f77060719590b9ba22b0fc031b946fa6d9de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/comments", "author": null, "committer": null, "parents": [{"sha": "38198304ccb559a021fe5abbe91a5191d8cf5f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38198304ccb559a021fe5abbe91a5191d8cf5f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38198304ccb559a021fe5abbe91a5191d8cf5f0e"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "de303c588e019bcea0c91765f27b1896b785ebd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "patch": "@@ -1,5 +1,15 @@\n Mon Aug 17 09:23:42 1998  Andreas Schwab  <schwab@issan.informatik.uni-dortmund.de>\n \n+\t* config/m68k/m68k.c: Include \"system.h\" instead of <stdio.h>.\n+\tInclude \"toplev.h\".\n+\t(valid_dbcc_comparison_p): Mark mode argument as unused.\n+\t(symbolic_operand): Likewise.\n+\t(legitimize_pic_address): Likewise.\n+\t(const_uint32_operand): Likewise.\n+\t(const_sint32_operand): Likewise.\n+\t* sched.c [!INSN_SCHEDULING]: Define only dummy function\n+\tschedule_insns and comment out rest of file.\n+\n \t* m68k.c (output_move_simode_const): Use subl to move a zero into an\n \taddress register.\n \t(output_move_[hq]imode): Likewise."}, {"sha": "07f7a01563dbedc4cef403f0b288279200a278e3", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "patch": "@@ -21,7 +21,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Some output-actions in m68k.md need these.  */\n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"tree.h\"\n #include \"rtl.h\"\n #include \"regs.h\"\n@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"insn-attr.h\"\n #include \"recog.h\"\n+#include \"toplev.h\"\n \n /* Needed for use_return_insn.  */\n #include \"flags.h\"\n@@ -866,7 +867,7 @@ not_sp_operand (op, mode)\n int\n valid_dbcc_comparison_p (x, mode)\n      rtx x;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (x))\n     {\n@@ -1243,7 +1244,7 @@ output_btst (operands, countop, dataop, insn, signpos)\n int\n symbolic_operand (op, mode)\n      register rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   switch (GET_CODE (op))\n     {\n@@ -1331,7 +1332,7 @@ extend_operator(x, mode)\n rtx\n legitimize_pic_address (orig, mode, reg)\n      rtx orig, reg;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   rtx pic_ref = orig;\n \n@@ -3252,7 +3253,7 @@ strict_low_part_peephole_ok (mode, first_insn, target)\n int\n const_uint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == CONSTANT_P_RTX)\n     return 1;\n@@ -3273,7 +3274,7 @@ const_uint32_operand (op, mode)\n int\n const_sint32_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == CONSTANT_P_RTX)\n     return 1;"}, {"sha": "5fbf7609f4db3a720d638401e752d2bf3f673177", "filename": "gcc/sched.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5220a5dd39feb469be2bf80a5b455e2ce766f5e/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=f5220a5dd39feb469be2bf80a5b455e2ce766f5e", "patch": "@@ -127,10 +127,17 @@ Boston, MA 02111-1307, USA.  */\n #include \"insn-config.h\"\n #include \"insn-attr.h\"\n \n+#ifndef INSN_SCHEDULING\n+void\n+schedule_insns (dump_file)\n+     FILE *dump_file ATTRIBUTE_UNUSED;\n+{\n+}\n+#else /* INSN_SCHEDULING -- rest of file */\n+\n extern char *reg_known_equiv_p;\n extern rtx *reg_known_value;\n \n-#ifdef INSN_SCHEDULING\n /* Arrays set up by scheduling for the same respective purposes as\n    similar-named arrays set up by flow analysis.  We work with these\n    arrays during the scheduling pass so we can compare values against\n@@ -342,8 +349,6 @@ static void update_flow_info\t\tPROTO((rtx, rtx, rtx, rtx));\n \n /* Main entry point of this file.  */\n void schedule_insns\tPROTO((FILE *));\n-\n-#endif /* INSN_SCHEDULING */\n \f\n #define SIZE_FOR_MODE(X) (GET_MODE_SIZE (GET_MODE (X)))\n \n@@ -451,13 +456,6 @@ remove_dependence (insn, elem)\n   return;\n }\n \f\n-#ifndef INSN_SCHEDULING\n-void\n-schedule_insns (dump_file)\n-     FILE *dump_file;\n-{\n-}\n-#else\n #ifndef __GNUC__\n #define __inline\n #endif"}]}