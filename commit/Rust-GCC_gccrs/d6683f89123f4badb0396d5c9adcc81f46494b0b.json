{"sha": "d6683f89123f4badb0396d5c9adcc81f46494b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY2ODNmODkxMjNmNGJhZGIwMzk2ZDVjOWFkY2M4MWY0NjQ5NGIwYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-09-17T08:49:09Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-09-17T08:49:09Z"}, "message": "gcov: emit hotness colors to easily find hot code.\n\n2018-09-17  Martin Liska  <mliska@suse.cz>\n\n\t* doc/gcov.texi: Document new option --use-hotness-colors.\n\t* gcov.c (struct source_info): Declare new field.\n\t(source_info::source_info): Set default for maximum_count.\n\t(print_usage): Add new -q option.\n\t(process_args): Process it.\n\t(accumulate_line_info): Save src->maximum_count.\n\t(output_line_beginning): Make color line number if\n\tflag_use_hotness_colors is set.\n\t(output_line_details): Pass default argument value.\n\t(output_lines): Pass src->maximum_count.\n\nFrom-SVN: r264360", "tree": {"sha": "2c313b8db0db95ac676f624a871d05e5636412e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c313b8db0db95ac676f624a871d05e5636412e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6683f89123f4badb0396d5c9adcc81f46494b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6683f89123f4badb0396d5c9adcc81f46494b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6683f89123f4badb0396d5c9adcc81f46494b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6683f89123f4badb0396d5c9adcc81f46494b0b/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7dc58b50536223fefe18c38cde7c759ae528f934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc58b50536223fefe18c38cde7c759ae528f934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc58b50536223fefe18c38cde7c759ae528f934"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "fb43ecaf4be98287251e51e40b363ad9249a1fca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6683f89123f4badb0396d5c9adcc81f46494b0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6683f89123f4badb0396d5c9adcc81f46494b0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d6683f89123f4badb0396d5c9adcc81f46494b0b", "patch": "@@ -1,3 +1,16 @@\n+2018-09-17  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/gcov.texi: Document new option --use-hotness-colors.\n+\t* gcov.c (struct source_info): Declare new field.\n+\t(source_info::source_info): Set default for maximum_count.\n+\t(print_usage): Add new -q option.\n+\t(process_args): Process it.\n+\t(accumulate_line_info): Save src->maximum_count.\n+\t(output_line_beginning): Make color line number if\n+\tflag_use_hotness_colors is set.\n+\t(output_line_details): Pass default argument value.\n+\t(output_lines): Pass src->maximum_count.\n+\n 2018-09-17  Martin Liska  <mliska@suse.cz>\n \n \t* common/config/i386/i386-common.c (ix86_get_valid_option_values):"}, {"sha": "3b1b38aebfa2bf93ba22832a2593b16e24c34c97", "filename": "gcc/doc/gcov.texi", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6683f89123f4badb0396d5c9adcc81f46494b0b/gcc%2Fdoc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6683f89123f4badb0396d5c9adcc81f46494b0b/gcc%2Fdoc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcov.texi?ref=d6683f89123f4badb0396d5c9adcc81f46494b0b", "patch": "@@ -132,6 +132,7 @@ gcov [@option{-v}|@option{--version}] [@option{-h}|@option{--help}]\n      [@option{-n}|@option{--no-output}]\n      [@option{-o}|@option{--object-directory} @var{directory|file}]\n      [@option{-p}|@option{--preserve-paths}]\n+     [@option{-q}|@option{--use-hotness-colors}]\n      [@option{-r}|@option{--relative-only}]\n      [@option{-s}|@option{--source-prefix} @var{directory}]\n      [@option{-t}|@option{--stdout}]\n@@ -264,7 +265,6 @@ Use colors for lines of code that have zero coverage.  We use red color for\n non-exceptional lines and cyan for exceptional.  Same colors are used for\n basic blocks with @option{-a} option.\n \n-\n @item -l\n @itemx --long-file-names\n Create long file names for included source files.  For example, if the\n@@ -305,6 +305,12 @@ removed and unremoveable @file{..}\n components renamed to @samp{^}.  This is useful if sourcefiles are in several\n different directories.\n \n+@item -q\n+@itemx --use-hotness-colors\n+\n+Emit perf-like colored output for hot lines.  Legend of the color scale\n+is printed at the very beginning of the output file.\n+\n @item -r\n @itemx --relative-only\n Only output information about source files with a relative pathname"}, {"sha": "64ab85c981fe3d33773c15fcbefd71dc8162545e", "filename": "gcc/gcov.c", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6683f89123f4badb0396d5c9adcc81f46494b0b/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6683f89123f4badb0396d5c9adcc81f46494b0b/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=d6683f89123f4badb0396d5c9adcc81f46494b0b", "patch": "@@ -339,13 +339,16 @@ struct source_info\n \n   coverage_info coverage;\n \n+  /* Maximum line count in the source file.  */\n+  unsigned int maximum_count;\n+\n   /* Functions in this source file.  These are in ascending line\n      number order.  */\n   vector <function_info *> functions;\n };\n \n source_info::source_info (): index (0), name (NULL), file_time (),\n-  lines (), coverage (), functions ()\n+  lines (), coverage (), maximum_count (0), functions ()\n {\n }\n \n@@ -502,6 +505,10 @@ static int flag_verbose = 0;\n \n static int flag_use_colors = 0;\n \n+/* Use perf-like colors to indicate hot lines.  */\n+\n+static int flag_use_hotness_colors = 0;\n+\n /* Output count information for every basic block, not merely those\n    that contain line number information.  */\n \n@@ -839,6 +846,7 @@ print_usage (int error_p)\n   fnotice (file, \"  -n, --no-output                 Do not create an output file\\n\");\n   fnotice (file, \"  -o, --object-directory DIR|FILE Search for object files in DIR or called FILE\\n\");\n   fnotice (file, \"  -p, --preserve-paths            Preserve all pathname components\\n\");\n+  fnotice (file, \"  -q, --use-hotness-colors        Emit perf-like colored output for hot lines\\n\");\n   fnotice (file, \"  -r, --relative-only             Only show data for relative sources\\n\");\n   fnotice (file, \"  -s, --source-prefix DIR         Source prefix to elide\\n\");\n   fnotice (file, \"  -t, --stdout                    Output to stdout instead of a file\\n\");\n@@ -890,6 +898,7 @@ static const struct option options[] =\n   { \"display-progress\",     no_argument,       NULL, 'd' },\n   { \"hash-filenames\",\t    no_argument,       NULL, 'x' },\n   { \"use-colors\",\t    no_argument,       NULL, 'k' },\n+  { \"use-hotness-colors\",   no_argument,       NULL, 'q' },\n   { 0, 0, 0, 0 }\n };\n \n@@ -900,7 +909,7 @@ process_args (int argc, char **argv)\n {\n   int opt;\n \n-  const char *opts = \"abcdfhijklmno:prs:tuvwx\";\n+  const char *opts = \"abcdfhijklmno:pqrs:tuvwx\";\n   while ((opt = getopt_long (argc, argv, opts, options, NULL)) != -1)\n     {\n       switch (opt)\n@@ -929,6 +938,9 @@ process_args (int argc, char **argv)\n \tcase 'k':\n \t  flag_use_colors = 1;\n \t  break;\n+\tcase 'q':\n+\t  flag_use_hotness_colors = 1;\n+\t  break;\n \tcase 'm':\n \t  flag_demangled_names = 1;\n \t  break;\n@@ -2580,6 +2592,9 @@ static void accumulate_line_info (line_info *line, source_info *src,\n       /* Now, add the count of loops entirely on this line.  */\n       count += get_cycles_count (*line);\n       line->count = count;\n+\n+      if (line->count > src->maximum_count)\n+\tsrc->maximum_count = line->count;\n     }\n \n   if (line->exists && add_coverage)\n@@ -2756,7 +2771,8 @@ output_line_beginning (FILE *f, bool exists, bool unexceptional,\n \t\t       bool has_unexecuted_block,\n \t\t       gcov_type count, unsigned line_num,\n \t\t       const char *exceptional_string,\n-\t\t       const char *unexceptional_string)\n+\t\t       const char *unexceptional_string,\n+\t\t       unsigned int maximum_count)\n {\n   string s;\n   if (exists)\n@@ -2806,7 +2822,23 @@ output_line_beginning (FILE *f, bool exists, bool unexceptional,\n       pad_count_string (s);\n     }\n \n-  fprintf (f, \"%s:%5u\", s.c_str (), line_num);\n+  /* Format line number in output.  */\n+  char buffer[16];\n+  sprintf (buffer, \"%5u\", line_num);\n+  string linestr (buffer);\n+\n+  if (flag_use_hotness_colors && maximum_count)\n+    {\n+      if (count * 2 > maximum_count) /* > 50%.  */\n+\tlinestr.insert (0, SGR_SEQ (COLOR_BG_RED));\n+      else if (count * 5 > maximum_count) /* > 20%.  */\n+\tlinestr.insert (0, SGR_SEQ (COLOR_BG_YELLOW));\n+      else if (count * 10 > maximum_count) /* > 10%.  */\n+\tlinestr.insert (0, SGR_SEQ (COLOR_BG_GREEN));\n+      linestr += SGR_RESET;\n+    }\n+\n+  fprintf (f, \"%s:%s\", s.c_str (), linestr.c_str ());\n }\n \n static void\n@@ -2839,7 +2871,7 @@ output_line_details (FILE *f, const line_info *line, unsigned line_num)\n \t      output_line_beginning (f, line->exists,\n \t\t\t\t     (*it)->exceptional, false,\n \t\t\t\t     (*it)->count, line_num,\n-\t\t\t\t     \"%%%%%\", \"$$$$$\");\n+\t\t\t\t     \"%%%%%\", \"$$$$$\", 0);\n \t      fprintf (f, \"-block %2d\", ix++);\n \t      if (flag_verbose)\n \t\tfprintf (f, \" (BB %u)\", (*it)->id);\n@@ -2902,6 +2934,15 @@ output_lines (FILE *gcov_file, const source_info *src)\n   FILE *source_file;\n   const char *retval;\n \n+  /* Print legend of color hotness syntax.  */\n+  if (flag_use_hotness_colors)\n+    fprintf (gcov_file, \"%s\", DEFAULT_LINE_START \"Hotness legend: \" \\\n+\t     SGR_SEQ (COLOR_BG_RED) \"> 50%\" SGR_RESET \" \" \\\n+\t     SGR_SEQ (COLOR_BG_YELLOW) \"> 20%\" SGR_RESET \" \" \\\n+\t     SGR_SEQ (COLOR_BG_GREEN) \"> 10%\" SGR_RESET \"\\n\");\n+\n+  fprintf (gcov_file, DEFAULT_LINE_START \"Source:%s\\n\", src->coverage.name);\n+\n   fprintf (gcov_file, DEFAULT_LINE_START \"Source:%s\\n\", src->coverage.name);\n   if (!multiple_files)\n     {\n@@ -2964,7 +3005,7 @@ output_lines (FILE *gcov_file, const source_info *src)\n \t line so that tabs won't be messed up.  */\n       output_line_beginning (gcov_file, line->exists, line->unexceptional,\n \t\t\t     line->has_unexecuted_block, line->count,\n-\t\t\t     line_num, \"=====\", \"#####\");\n+\t\t\t     line_num, \"=====\", \"#####\", src->maximum_count);\n \n       print_source_line (gcov_file, source_lines, line_num);\n       output_line_details (gcov_file, line, line_num);\n@@ -3009,7 +3050,8 @@ output_lines (FILE *gcov_file, const source_info *src)\n \t\t\t\t\t line->unexceptional,\n \t\t\t\t\t line->has_unexecuted_block,\n \t\t\t\t\t line->count,\n-\t\t\t\t\t l, \"=====\", \"#####\");\n+\t\t\t\t\t l, \"=====\", \"#####\",\n+\t\t\t\t\t src->maximum_count);\n \n \t\t  print_source_line (gcov_file, source_lines, l);\n \t\t  output_line_details (gcov_file, line, l);"}]}