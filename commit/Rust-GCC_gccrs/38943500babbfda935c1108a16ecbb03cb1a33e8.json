{"sha": "38943500babbfda935c1108a16ecbb03cb1a33e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5NDM1MDBiYWJiZmRhOTM1YzExMDhhMTZlY2JiMDNjYjFhMzNlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-01-16T15:08:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-01-16T15:08:32Z"}, "message": "re PR c/83844 (ICE with warn_if_not_aligned attribute)\n\n\tPR c/83844\n\t* stor-layout.c (handle_warn_if_not_align): Use byte_position and\n\tmultiple_of_p instead of unchecked tree_to_uhwi and UHWI check.\n\tIf off is not INTEGER_CST, issue a may not be aligned warning\n\trather than isn't aligned.  Use isn%'t rather than isn't.\n\t* fold-const.c (multiple_of_p) <case BIT_AND_EXPR>: Don't fall through\n\tinto MULT_EXPR.\n\t<case MULT_EXPR>: Improve the case when bottom and one of the\n\tMULT_EXPR operands are INTEGER_CSTs and bottom is multiple of that\n\toperand, in that case check if the other operand is multiple of\n\tbottom divided by the INTEGER_CST operand.\n\n\t* gcc.dg/pr83844.c: New test.\n\nFrom-SVN: r256745", "tree": {"sha": "8c56b282c07c85b373c44f431ced983c5995758c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c56b282c07c85b373c44f431ced983c5995758c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38943500babbfda935c1108a16ecbb03cb1a33e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38943500babbfda935c1108a16ecbb03cb1a33e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38943500babbfda935c1108a16ecbb03cb1a33e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38943500babbfda935c1108a16ecbb03cb1a33e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42b394ff00b100d2c968db6478c87a259333ccec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42b394ff00b100d2c968db6478c87a259333ccec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42b394ff00b100d2c968db6478c87a259333ccec"}], "stats": {"total": 98, "additions": 91, "deletions": 7}, "files": [{"sha": "9b7bf83cb770fd1c5df90fc9a9be5424f0f3f3e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=38943500babbfda935c1108a16ecbb03cb1a33e8", "patch": "@@ -1,3 +1,17 @@\n+2018-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/83844\n+\t* stor-layout.c (handle_warn_if_not_align): Use byte_position and\n+\tmultiple_of_p instead of unchecked tree_to_uhwi and UHWI check.\n+\tIf off is not INTEGER_CST, issue a may not be aligned warning\n+\trather than isn't aligned.  Use isn%'t rather than isn't.\n+\t* fold-const.c (multiple_of_p) <case BIT_AND_EXPR>: Don't fall through\n+\tinto MULT_EXPR.\n+\t<case MULT_EXPR>: Improve the case when bottom and one of the\n+\tMULT_EXPR operands are INTEGER_CSTs and bottom is multiple of that\n+\toperand, in that case check if the other operand is multiple of\n+\tbottom divided by the INTEGER_CST operand.\n+\n 2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR target/83858"}, {"sha": "1ea37666131266f3d8ad1fa00fc6f43a4ccec254", "filename": "gcc/fold-const.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=38943500babbfda935c1108a16ecbb03cb1a33e8", "patch": "@@ -12595,9 +12595,34 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n \t a multiple of BOTTOM then TOP is a multiple of BOTTOM.  */\n       if (!integer_pow2p (bottom))\n \treturn 0;\n-      /* FALLTHRU */\n+      return (multiple_of_p (type, TREE_OPERAND (top, 1), bottom)\n+\t      || multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n \n     case MULT_EXPR:\n+      if (TREE_CODE (bottom) == INTEGER_CST)\n+\t{\n+\t  op1 = TREE_OPERAND (top, 0);\n+\t  op2 = TREE_OPERAND (top, 1);\n+\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t    std::swap (op1, op2);\n+\t  if (TREE_CODE (op2) == INTEGER_CST)\n+\t    {\n+\t      if (multiple_of_p (type, op2, bottom))\n+\t\treturn 1;\n+\t      /* Handle multiple_of_p ((x * 2 + 2) * 4, 8).  */\n+\t      if (multiple_of_p (type, bottom, op2))\n+\t\t{\n+\t\t  widest_int w = wi::sdiv_trunc (wi::to_widest (bottom),\n+\t\t\t\t\t\t wi::to_widest (op2));\n+\t\t  if (wi::fits_to_tree_p (w, TREE_TYPE (bottom)))\n+\t\t    {\n+\t\t      op2 = wide_int_to_tree (TREE_TYPE (bottom), w);\n+\t\t      return multiple_of_p (type, op1, op2);\n+\t\t    }\n+\t\t}\n+\t      return multiple_of_p (type, op1, bottom);\n+\t    }\n+\t}\n       return (multiple_of_p (type, TREE_OPERAND (top, 1), bottom)\n \t      || multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n "}, {"sha": "8c415ebb6ac8e04478c671385e2d4e70a27bfc5d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=38943500babbfda935c1108a16ecbb03cb1a33e8", "patch": "@@ -1150,12 +1150,16 @@ handle_warn_if_not_align (tree field, unsigned int record_align)\n     warning (opt_w, \"alignment %u of %qT is less than %u\",\n \t     record_align, context, warn_if_not_align);\n \n-  unsigned HOST_WIDE_INT off\n-    = (tree_to_uhwi (DECL_FIELD_OFFSET (field))\n-       + tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field)) / BITS_PER_UNIT);\n-  if ((off % warn_if_not_align) != 0)\n-    warning (opt_w, \"%q+D offset %wu in %qT isn't aligned to %u\",\n-\t     field, off, context, warn_if_not_align);\n+  tree off = byte_position (field);\n+  if (!multiple_of_p (TREE_TYPE (off), off, size_int (warn_if_not_align)))\n+    {\n+      if (TREE_CODE (off) == INTEGER_CST)\n+\twarning (opt_w, \"%q+D offset %E in %qT isn%'t aligned to %u\",\n+\t\t field, off, context, warn_if_not_align);\n+      else\n+\twarning (opt_w, \"%q+D offset %E in %qT may not be aligned to %u\",\n+\t\t field, off, context, warn_if_not_align);\n+    }\n }\n \n /* Called from place_field to handle unions.  */"}, {"sha": "ec9f4695cc315c7695b62f98948c48f3240a01be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=38943500babbfda935c1108a16ecbb03cb1a33e8", "patch": "@@ -1,3 +1,8 @@\n+2018-01-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/83844\n+\t* gcc.dg/pr83844.c: New test.\n+\n 2018-01-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.dg/torture/pr83847.c: New test."}, {"sha": "c6db68af2c5ed3af6bfb672d07d87170e7084462", "filename": "gcc/testsuite/gcc.dg/pr83844.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83844.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38943500babbfda935c1108a16ecbb03cb1a33e8/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83844.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr83844.c?ref=38943500babbfda935c1108a16ecbb03cb1a33e8", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/83844 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -Wall\" } */\n+\n+typedef unsigned long long __u64 __attribute__((aligned(4),warn_if_not_aligned(8)));\n+void bar (void *, void *, void *);\n+\n+void\n+foo (int n)\n+{\n+  struct A\n+  {\n+    int i1;\n+    int i2;\n+    int i3[n];\n+    __u64 x;\t/* { dg-warning \"in 'struct A' may not be aligned to 8\" } */\n+  } __attribute__((aligned (8)));\n+  struct B\n+  {\n+    int i1;\n+    int i2;\n+    long long i3[n];\n+    __u64 x;\n+  } __attribute__((aligned (8)));\n+  struct C\n+  {\n+    int i1;\n+    int i2;\n+    int i3[2 * n];\n+    __u64 x;\n+  } __attribute__((aligned (8)));\n+  struct A a;\n+  struct B b;\n+  struct C c;\n+  bar (&a, &b, &c);\n+}"}]}