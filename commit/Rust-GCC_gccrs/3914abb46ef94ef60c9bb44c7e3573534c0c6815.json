{"sha": "3914abb46ef94ef60c9bb44c7e3573534c0c6815", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxNGFiYjQ2ZWY5NGVmNjBjOWJiNDRjN2UzNTczNTM0YzBjNjgxNQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-22T17:02:53Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-22T17:02:53Z"}, "message": "dbxout.c (dbxout_global_decl): New.\n\n\t* dbxout.c (dbxout_global_decl): New.\n\t(xcoff_debug_hooks, dbx_debug_hooks): Use it.\n\t* sdbout.c (sdbout_finish): New.\n\t(sdbout_debug_hooks): Use it, add comments.\n\t(sdbout_global_decl): Defer initialised public vars to\n\tsdbout_finish.\n\t* varasm.c (assemble_variable): Don't output debug information\n\tfor file-scope variables.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r44243", "tree": {"sha": "f1f87373eb821207cc415143ba8c00551d90838c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f87373eb821207cc415143ba8c00551d90838c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3914abb46ef94ef60c9bb44c7e3573534c0c6815", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3914abb46ef94ef60c9bb44c7e3573534c0c6815", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3914abb46ef94ef60c9bb44c7e3573534c0c6815", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3914abb46ef94ef60c9bb44c7e3573534c0c6815/comments", "author": null, "committer": null, "parents": [{"sha": "be7560ea81db88a710ff0915d8736b9dee2c9ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7560ea81db88a710ff0915d8736b9dee2c9ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7560ea81db88a710ff0915d8736b9dee2c9ad1"}], "stats": {"total": 192, "additions": 87, "deletions": 105}, "files": [{"sha": "ee0d352ce2139838cb006ec3fe6f91a42964a90a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3914abb46ef94ef60c9bb44c7e3573534c0c6815", "patch": "@@ -1,3 +1,15 @@\n+2001-07-22 Neil Booth  <neil@daikokuya.demon.co.uk>\n+\t   Richard Henderson  <rth@redhat.com>\n+\n+\t* dbxout.c (dbxout_global_decl): New.\n+\t(xcoff_debug_hooks, dbx_debug_hooks): Use it.\n+\t* sdbout.c (sdbout_finish): New.\n+\t(sdbout_debug_hooks): Use it, add comments.\n+\t(sdbout_global_decl): Defer initialised public vars to\n+\tsdbout_finish.\n+\t* varasm.c (assemble_variable): Don't output debug information\n+\tfor file-scope variables.\n+\n 2001-07-22  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (get_trap_mode_suffix): New."}, {"sha": "b321cfce745b11103ed2300037cfe09b3547aa8d", "filename": "gcc/dbxout.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=3914abb46ef94ef60c9bb44c7e3573534c0c6815", "patch": "@@ -313,6 +313,7 @@ static void dbxout_prepare_symbol\tPARAMS ((tree));\n static void dbxout_finish_symbol\tPARAMS ((tree));\n static void dbxout_block\t\tPARAMS ((tree, int, tree));\n static void dbxout_begin_function\tPARAMS ((tree));\n+static void dbxout_global_decl\t\tPARAMS ((tree));\n \f\n /* The debug hooks structure.  */\n #if defined (DBX_DEBUGGING_INFO)\n@@ -343,7 +344,7 @@ struct gcc_debug_hooks dbx_debug_hooks =\n #endif\n   debug_nothing_int,\t\t/* end_function */\n   dbxout_function_decl,\n-  debug_nothing_tree,\t\t/* global_decl */\n+  dbxout_global_decl,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n   debug_nothing_rtx\t\t/* label */\n@@ -369,7 +370,7 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n   debug_nothing_tree,\t\t/* begin_function */\n   xcoffout_end_function,\n   debug_nothing_tree,\t\t/* function_decl */\n-  debug_nothing_tree,\t\t/* global_decl */\n+  dbxout_global_decl,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n   debug_nothing_rtx\t\t/* label */\n@@ -623,6 +624,18 @@ dbxout_end_block (line, n)\n   ASM_OUTPUT_INTERNAL_LABEL (asmfile, \"LBE\", n);\n }\n \n+/* Debug information for a global DECL.  Called from toplev.c after\n+   compilation proper has finished.  */\n+static void\n+dbxout_global_decl (decl)\n+     tree decl;\n+{\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && ! DECL_EXTERNAL (decl)\n+      && DECL_RTL_SET_P (decl))\t/* Not necessary?  */\n+    dbxout_symbol (decl, 0);\n+} \n+\n /* Output dbx data for a function definition.\n    This includes a definition of the function name itself (a symbol),\n    definitions of the parameters (locating them in the parameter list)"}, {"sha": "5ec4b2314d4b584db7c3cefaba561f7483715cab", "filename": "gcc/sdbout.c", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=3914abb46ef94ef60c9bb44c7e3573534c0c6815", "patch": "@@ -93,6 +93,7 @@ extern tree current_function_decl;\n #include \"sdbout.h\"\n \n static void sdbout_init\t\t\tPARAMS ((const char *));\n+static void sdbout_finish\t\tPARAMS ((const char *));\n static void sdbout_start_source_file\tPARAMS ((unsigned, const char *));\n static void sdbout_end_source_file\tPARAMS ((unsigned));\n static void sdbout_begin_block\t\tPARAMS ((unsigned, unsigned));\n@@ -124,6 +125,7 @@ static void sdbout_field_types\t\tPARAMS ((tree));\n static void sdbout_one_type\t\tPARAMS ((tree));\n static void sdbout_parms\t\tPARAMS ((tree));\n static void sdbout_reg_parms\t\tPARAMS ((tree));\n+static void sdbout_global_decl\t\tPARAMS ((tree));\n \f\n /* Random macros describing parts of SDB data.  */\n \n@@ -298,16 +300,16 @@ static struct sdb_file *current_file;\n /* The debug hooks structure.  */\n struct gcc_debug_hooks sdb_debug_hooks =\n {\n-  sdbout_init,\n-  debug_nothing_charstar,\n-  debug_nothing_int_charstar,\n-  debug_nothing_int_charstar,\n-  sdbout_start_source_file,\n-  sdbout_end_source_file,\n-  sdbout_begin_block,\n-  sdbout_end_block,\n+  sdbout_init,\t\t\t/* init */\n+  sdbout_finish,\t\t/* finish */\n+  debug_nothing_int_charstar,\t/* define */\n+  debug_nothing_int_charstar,\t/* undef */\n+  sdbout_start_source_file,\t/* start_source_file */\n+  sdbout_end_source_file,\t/* end_source_file */\n+  sdbout_begin_block,\t\t/* begin_block */\n+  sdbout_end_block,\t\t/* end_block */\n   debug_true_tree,\t\t/* ignore_block */\n-  sdbout_source_line,\n+  sdbout_source_line,\t\t/* source_line */\n #ifdef MIPS_DEBUGGING_INFO\n   /* Defer on MIPS systems so that parameter descriptions follow\n      function entry.  */\n@@ -317,11 +319,11 @@ struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_begin_prologue,\t/* begin_prologue */\n   debug_nothing_int,\t\t/* end_prologue */\n #endif\n-  sdbout_end_epilogue,\n-  sdbout_begin_function,\n-  sdbout_end_function,\n+  sdbout_end_epilogue,\t\t/* end_epilogue */\n+  sdbout_begin_function,\t/* begin_function */\n+  sdbout_end_function,\t\t/* end_function */\n   debug_nothing_tree,\t\t/* function_decl */\n-  sdbout_global_decl,\n+  sdbout_global_decl,\t\t/* global_decl */\n   debug_nothing_tree,\t\t/* deferred_inline_function */\n   debug_nothing_tree,\t\t/* outlining_inline_function */\n   sdbout_label\n@@ -1489,23 +1491,53 @@ sdbout_global_decl (decl)\n      tree decl;\n {\n   if (TREE_CODE (decl) == VAR_DECL\n-      && DECL_INITIAL (decl)\n-      && ! DECL_EXTERNAL (decl)\n-      && DECL_RTL (decl) != 0)\n+      && !DECL_EXTERNAL (decl)\n+      && DECL_RTL_SET_P (decl))\n     {\n       /* The COFF linker can move initialized global vars to the end.\n-\t And that can screw up the symbol ordering.  By putting the\n-\t symbols in that order to begin with, we avoid a problem.\n-\t mcsun!unido!fauern!tumuc!pes@uunet.uu.net.  */\n-      if (TREE_PUBLIC (decl))\n+\t And that can screw up the symbol ordering.  Defer those for\n+\t sdbout_finish ().  */\n+      if (!DECL_INITIAL (decl) || !TREE_PUBLIC (decl))\n \tsdbout_symbol (decl, 0);\n \n       /* Output COFF information for non-global file-scope initialized\n \t variables.  */\n-      if (GET_CODE (DECL_RTL (decl)) == MEM)\n+      if (DECL_INITIAL (decl) && GET_CODE (DECL_RTL (decl)) == MEM)\n \tsdbout_toplevel_data (decl);\n     }\n }\n+\n+/* Output initialized global vars at the end, in the order of\n+   definition.  See comment in sdbout_global_decl.  */\n+\n+static void\n+sdbout_finish (main_filename)\n+     const char *main_filename ATTRIBUTE_UNUSED;\n+{\n+  tree decl = getdecls ();\n+  unsigned int len = list_length (decl);\n+  tree *vec = (tree *) xmalloc (sizeof (tree) * len);\n+  unsigned int i;\n+\n+  /* Process the decls in reverse order--earliest first.  Put them\n+     into VEC from back to front, then take out from front.  */\n+\n+  for (i = 0; i < len; i++, decl = TREE_CHAIN (decl))\n+    vec[len - i - 1] = decl;\n+\n+  for (i = 0; i < len; i++)\n+    {\n+      decl = vec[i];\n+      if (TREE_CODE (decl) == VAR_DECL\n+\t  && ! DECL_EXTERNAL (decl)\n+\t  && DECL_INITIAL (decl)\n+\t  && TREE_PUBLIC (decl)\n+\t  && DECL_RTL_SET_P (decl))\n+\tsdbout_symbol (decl, 0);\n+    }\n+\n+  free (vec);\n+}\n \f\n /* Describe the beginning of an internal block within a function.\n    Also output descriptions of variables defined in this block."}, {"sha": "7adae8eb4f67616494018243c1add49035077a14", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 82, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3914abb46ef94ef60c9bb44c7e3573534c0c6815/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3914abb46ef94ef60c9bb44c7e3573534c0c6815", "patch": "@@ -1232,44 +1232,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n \n   last_assemble_variable_decl = 0;\n \n-  if (DECL_RTL_SET_P (decl) && GET_CODE (DECL_RTL (decl)) == REG)\n-    {\n-      /* Do output symbol info for global register variables, but do nothing\n-\t else for them.  */\n-\n-      if (TREE_ASM_WRITTEN (decl))\n-\treturn;\n-      TREE_ASM_WRITTEN (decl) = 1;\n-\n-      /* Do no output if -fsyntax-only.  */\n-      if (flag_syntax_only)\n-\treturn;\n-\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-      /* File-scope global variables are output here.  */\n-      if ((write_symbols == DBX_DEBUG || write_symbols == XCOFF_DEBUG)\n-\t   && top_level)\n-\tdbxout_symbol (decl, 0);\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-      if (write_symbols == SDB_DEBUG && top_level\n-\t  /* Leave initialized global vars for end of compilation;\n-\t     see comment in compile_file.  */\n-\t  && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n-\tsdbout_symbol (decl, 0);\n-#endif\n-\n-      /* Don't output any DWARF debugging information for variables here.\n-\t In the case of local variables, the information for them is output\n-\t when we do our recursive traversal of the tree representation for\n-\t the entire containing function.  In the case of file-scope variables,\n-\t we output information for all of them at the very end of compilation\n-\t while we are doing our final traversal of the chain of file-scope\n-\t declarations.  */\n-\n-      return;\n-    }\n-\n   /* Normally no need to say anything here for external references,\n      since assemble_external is called by the language-specific code\n      when a declaration is first seen.  */\n@@ -1283,6 +1245,13 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   if (TREE_CODE (decl) == FUNCTION_DECL)\n     return;\n \n+  /* Do nothing for global register variables.  */\n+  if (DECL_RTL_SET_P (decl) && GET_CODE (DECL_RTL (decl)) == REG)\n+    {\n+      TREE_ASM_WRITTEN (decl) = 1;\n+      return;\n+    }\n+\n   /* If type was incomplete when the variable was declared,\n      see if it is complete now.  */\n \n@@ -1411,27 +1380,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n            (decl, \"requested alignment for %s is greater than implemented alignment of %d.\",rounded);\n #endif\n        \n-#ifdef DBX_DEBUGGING_INFO\n-      /* File-scope global variables are output here.  */\n-      if (write_symbols == DBX_DEBUG && top_level)\n-\tdbxout_symbol (decl, 0);\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-      if (write_symbols == SDB_DEBUG && top_level\n-\t  /* Leave initialized global vars for end of compilation;\n-\t     see comment in compile_file.  */\n-\t  && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n-\tsdbout_symbol (decl, 0);\n-#endif\n-\n-      /* Don't output any DWARF debugging information for variables here.\n-\t In the case of local variables, the information for them is output\n-\t when we do our recursive traversal of the tree representation for\n-\t the entire containing function.  In the case of file-scope variables,\n-\t we output information for all of them at the very end of compilation\n-\t while we are doing our final traversal of the chain of file-scope\n-\t declarations.  */\n-\n #if 0 /* ??? We should either delete this or add a comment describing what\n \t it was intended to do and why we shouldn't delete it.  */\n       if (flag_shared_data)\n@@ -1494,29 +1442,6 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   /* Record current section so we can restore it if dbxout.c clobbers it.  */\n   saved_in_section = in_section;\n \n-  /* Output the dbx info now that we have chosen the section.  */\n-\n-#ifdef DBX_DEBUGGING_INFO\n-  /* File-scope global variables are output here.  */\n-  if (write_symbols == DBX_DEBUG && top_level)\n-    dbxout_symbol (decl, 0);\n-#endif\n-#ifdef SDB_DEBUGGING_INFO\n-  if (write_symbols == SDB_DEBUG && top_level\n-      /* Leave initialized global vars for end of compilation;\n-\t see comment in compile_file.  */\n-      && (TREE_PUBLIC (decl) == 0 || DECL_INITIAL (decl) == 0))\n-    sdbout_symbol (decl, 0);\n-#endif\n-\n-  /* Don't output any DWARF debugging information for variables here.\n-     In the case of local variables, the information for them is output\n-     when we do our recursive traversal of the tree representation for\n-     the entire containing function.  In the case of file-scope variables,\n-     we output information for all of them at the very end of compilation\n-     while we are doing our final traversal of the chain of file-scope\n-     declarations.  */\n-\n   /* If the debugging output changed sections, reselect the section\n      that's supposed to be selected.  */\n   if (in_section != saved_in_section)"}]}