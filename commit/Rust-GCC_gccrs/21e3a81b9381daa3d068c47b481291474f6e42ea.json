{"sha": "21e3a81b9381daa3d068c47b481291474f6e42ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlM2E4MWI5MzgxZGFhM2QwNjhjNDdiNDgxMjkxNDc0ZjZlNDJlYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-15T19:13:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-15T19:13:58Z"}, "message": "(asm_fprintf): Use \"ll\" prefix for a long long HOST_WIDE_INT.\n\n(output_{asm_insn,addr_const}): Use HOST_WIDE_INT_PRINT_*.\n\nFrom-SVN: r13174", "tree": {"sha": "c7ebc194fa5ff70effacd569714677fe83f447dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7ebc194fa5ff70effacd569714677fe83f447dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e3a81b9381daa3d068c47b481291474f6e42ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e3a81b9381daa3d068c47b481291474f6e42ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e3a81b9381daa3d068c47b481291474f6e42ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e3a81b9381daa3d068c47b481291474f6e42ea/comments", "author": null, "committer": null, "parents": [{"sha": "29cad4a46caadcd54bb746298a392adeef958571", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29cad4a46caadcd54bb746298a392adeef958571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29cad4a46caadcd54bb746298a392adeef958571"}], "stats": {"total": 54, "additions": 12, "deletions": 42}, "files": [{"sha": "c38aada7f6e16c158084f123481c2b71afca38d1", "filename": "gcc/final.c", "status": "modified", "additions": 12, "deletions": 42, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e3a81b9381daa3d068c47b481291474f6e42ea/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e3a81b9381daa3d068c47b481291474f6e42ea/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=21e3a81b9381daa3d068c47b481291474f6e42ea", "patch": "@@ -2560,12 +2560,7 @@ output_asm_insn (template, operands)\n \t    else if (letter == 'n')\n \t      {\n \t\tif (GET_CODE (operands[c]) == CONST_INT)\n-\t\t  fprintf (asm_out_file,\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t\t\t   \"%d\",\n-#else\n-\t\t\t   \"%ld\",\n-#endif\n+\t\t  fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC,\n \t\t\t   - INTVAL (operands[c]));\n \t\telse\n \t\t  {\n@@ -2701,13 +2696,7 @@ output_addr_const (file, x)\n       break;\n \n     case CONST_INT:\n-      fprintf (file,\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t       \"%d\",\n-#else\n-\t       \"%ld\",\n-#endif\n-\t       INTVAL (x));\n+      fprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n       break;\n \n     case CONST:\n@@ -2721,37 +2710,12 @@ output_addr_const (file, x)\n \t{\n \t  /* We can use %d if the number is one word and positive.  */\n \t  if (CONST_DOUBLE_HIGH (x))\n-\t    fprintf (file,\n-#if HOST_BITS_PER_WIDE_INT == 64\n-#if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n-\t\t     \"0x%lx%016lx\",\n-#else\n-\t\t     \"0x%x%016x\",\n-#endif\n-#else\n-#if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n-\t\t     \"0x%lx%08lx\",\n-#else\n-\t\t     \"0x%x%08x\",\n-#endif\n-#endif\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t     CONST_DOUBLE_HIGH (x), CONST_DOUBLE_LOW (x));\n \t  else if  (CONST_DOUBLE_LOW (x) < 0)\n-\t    fprintf (file,\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t\t     \"0x%x\",\n-#else\n-\t\t     \"0x%lx\",\n-#endif\n-\t\t     CONST_DOUBLE_LOW (x));\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_HEX, CONST_DOUBLE_LOW (x));\n \t  else\n-\t    fprintf (file,\n-#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n-\t\t     \"%d\",\n-#else\n-\t\t     \"%ld\",\n-#endif\n-\t\t     CONST_DOUBLE_LOW (x));\n+\t    fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x));\n \t}\n       else\n \t/* We can't handle floating point constants;\n@@ -2892,8 +2856,14 @@ asm_fprintf VPROTO((FILE *file, char *p, ...))\n \t       but we do not check for those cases.  It means that the value\n \t       is a HOST_WIDE_INT, which may be either `int' or `long'.  */\n \n-#if HOST_BITS_PER_WIDE_INT != HOST_BITS_PER_INT\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_INT\n+#else\n+#if HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG\n+\t    *q++ = 'l';\n+#else\n+\t    *q++ = 'l';\n \t    *q++ = 'l';\n+#endif\n #endif\n \n \t    *q++ = *p++;"}]}