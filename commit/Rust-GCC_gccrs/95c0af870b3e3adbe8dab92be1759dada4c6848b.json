{"sha": "95c0af870b3e3adbe8dab92be1759dada4c6848b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVjMGFmODcwYjNlM2FkYmU4ZGFiOTJiZTE3NTlkYWRhNGM2ODQ4Yg==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-12-12T16:40:49Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-12-12T16:40:49Z"}, "message": "sh.h (REG_CLASS_HAS_FP_REG): New.\n\nWed Dec 11 19:05:05 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n\n        * sh.h (REG_CLASS_HAS_FP_REG): New.\n        (REGISTER_MOVE_COST) Use it.  Put body into a function and\n        move it into:\n        * sh.c (sh_register_move_cost).\n        * sh-protos.h (sh_register_move_cost): Declare.\n\n        * sh.c (sh_expand_builtin): Abort for unexpected nop values.\n        (sh_adjust_cost): Always return a value.\n\nFrom-SVN: r60075", "tree": {"sha": "8d770599586a8ac4b6c657faa1525279f455575b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d770599586a8ac4b6c657faa1525279f455575b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95c0af870b3e3adbe8dab92be1759dada4c6848b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c0af870b3e3adbe8dab92be1759dada4c6848b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95c0af870b3e3adbe8dab92be1759dada4c6848b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95c0af870b3e3adbe8dab92be1759dada4c6848b/comments", "author": null, "committer": null, "parents": [{"sha": "7a18508b1fdefa738dc502b131d57a909639ec9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a18508b1fdefa738dc502b131d57a909639ec9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a18508b1fdefa738dc502b131d57a909639ec9b"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "e77bc11bd17119e5f41a9855a5c7ccf099801ec1", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95c0af870b3e3adbe8dab92be1759dada4c6848b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95c0af870b3e3adbe8dab92be1759dada4c6848b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=95c0af870b3e3adbe8dab92be1759dada4c6848b", "patch": "@@ -7008,12 +7008,13 @@ sh_hard_regno_rename_ok (old_reg, new_reg)\n    return 1;\n }\n \n-/* A C statement (sans semicolon) to update the integer variable COST\n+/* Function to update the integer COST\n    based on the relationship between INSN that is dependent on\n    DEP_INSN through the dependence LINK.  The default is to make no\n    adjustment to COST.  This can be used for example to specify to\n    the scheduler that an output- or anti-dependence does not incur\n-   the same cost as a data-dependence.  */\n+   the same cost as a data-dependence.  The return value should be\n+   the new value for COST.  */\n static int\n sh_adjust_cost (insn, link, dep_insn, cost)\n      rtx insn;\n@@ -7040,7 +7041,7 @@ sh_adjust_cost (insn, link, dep_insn, cost)\n \n       if (recog_memoized (insn) < 0\n \t  || recog_memoized (dep_insn) < 0)\n-\treturn;\n+\treturn cost;\n \n       dep_type = get_attr_type (dep_insn);\n       if (dep_type == TYPE_FLOAD || dep_type == TYPE_PCFLOAD)\n@@ -7699,6 +7700,8 @@ sh_expand_builtin (exp, target, subtarget, mode, ignore)\n     case 4:\n       pat = (*insn_data[d->icode].genfun) (op[0], op[1], op[2], op[3]);\n       break;\n+    default:\n+      abort ();\n     }\n   if (! pat)\n     return 0;\n@@ -7778,4 +7781,50 @@ sh_mark_label (address, nuses)\n     LABEL_NUSES (XEXP (address, 0)) += nuses;\n }\n \n+/* Compute extra cost of moving data between one register class\n+   and another.  */\n+\n+/* Regclass always uses 2 for moves in the same register class;\n+   If SECONDARY*_RELOAD_CLASS says something about the src/dst pair,\n+   it uses this information.  Hence, the general register <-> floating point\n+   register information here is not used for SFmode.  */\n+\n+int\n+sh_register_move_cost (mode, srcclass, dstclass)\n+     enum machine_mode mode;\n+     enum reg_class srcclass, dstclass;\n+{\n+  if (dstclass == T_REGS || dstclass == PR_REGS)\n+    return 10;\n+\n+  if ((REGCLASS_HAS_FP_REG (dstclass)\n+       && REGCLASS_HAS_GENERAL_REG (srcclass))\n+      || (REGCLASS_HAS_GENERAL_REG (dstclass)\n+\t  && REGCLASS_HAS_FP_REG (srcclass)))\n+   return ((TARGET_SHMEDIA ? 4 : TARGET_FMOVD ? 8 : 12)\n+\t   * ((GET_MODE_SIZE (mode) + 7) / 8U));\n+\n+  if ((dstclass == FPUL_REGS\n+       && REGCLASS_HAS_GENERAL_REG (srcclass))\n+      || (srcclass == FPUL_REGS\n+\t  && REGCLASS_HAS_GENERAL_REG (dstclass)))\n+    return 5;\n+\n+  if ((dstclass == FPUL_REGS\n+       && (srcclass == PR_REGS || srcclass == MAC_REGS || srcclass == T_REGS))\n+      || (srcclass == FPUL_REGS\t\t\n+\t  && (dstclass == PR_REGS || dstclass == MAC_REGS)))\n+    return 7;\n+\n+  if ((srcclass == TARGET_REGS && ! REGCLASS_HAS_GENERAL_REG (dstclass))\n+      || ((dstclass) == TARGET_REGS && ! REGCLASS_HAS_GENERAL_REG (srcclass)))\n+    return 20;\n+\n+  if ((srcclass == FPSCR_REGS && ! REGCLASS_HAS_GENERAL_REG (dstclass))\n+      || (dstclass == FPSCR_REGS && ! REGCLASS_HAS_GENERAL_REG (srcclass)))\n+  return 4;\n+\n+  return 2 * ((GET_MODE_SIZE (mode) + 7) / 8U);\n+}\n+\n #include \"gt-sh.h\""}]}