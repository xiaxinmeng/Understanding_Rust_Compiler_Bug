{"sha": "e82673c4a81d7c7aa8f344de00ef72cdd2846afa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgyNjczYzRhODFkN2M3YWE4ZjM0NGRlMDBlZjcyY2RkMjg0NmFmYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-17T22:03:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-03-17T22:03:45Z"}, "message": "Fix prologues/epilogues to deal with the lack of predecrement/postincrement...\n\nFix prologues/epilogues to deal with the lack of\npredecrement/postincrement addressing modes in the coldfire moveml\ninstruction.\n\nFrom-SVN: r13724", "tree": {"sha": "d029dca5dbda027f10badcbf2407572cb2bd933e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d029dca5dbda027f10badcbf2407572cb2bd933e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e82673c4a81d7c7aa8f344de00ef72cdd2846afa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82673c4a81d7c7aa8f344de00ef72cdd2846afa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82673c4a81d7c7aa8f344de00ef72cdd2846afa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82673c4a81d7c7aa8f344de00ef72cdd2846afa/comments", "author": null, "committer": null, "parents": [{"sha": "14499ba4f389c742028eb835fcb418c0f9e6dae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14499ba4f389c742028eb835fcb418c0f9e6dae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14499ba4f389c742028eb835fcb418c0f9e6dae0"}], "stats": {"total": 218, "additions": 208, "deletions": 10}, "files": [{"sha": "dd8c42dc4e1cc290d42e24f4f8dc2b9948ebf6b1", "filename": "gcc/config/m68k/lb1sf68.asm", "status": "modified", "additions": 208, "deletions": 10, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82673c4a81d7c7aa8f344de00ef72cdd2846afa/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82673c4a81d7c7aa8f344de00ef72cdd2846afa/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flb1sf68.asm?ref=e82673c4a81d7c7aa8f344de00ef72cdd2846afa", "patch": "@@ -1,5 +1,5 @@\n /* libgcc1 routines for 68000 w/o floating-point hardware.\n-   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996, 1997 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -214,7 +214,11 @@ TRUNCDFSF    = 7\n | void __clear_sticky_bits(void);\n SYM (__clear_sticky_bit):\t\t\n \tlea\tSYM (_fpCCR),a0\n+#ifndef __mcf5200__\n \tmovew\tIMM (0),a0@(STICK)\n+#else\n+\tclr.w\ta0@(STICK)\n+#endif\n \trts\n \n |=============================================================================\n@@ -280,7 +284,13 @@ $_exception_handler:\n \tbeq\t1f\t\t| no, exit\n \tpea\tSYM (_fpCCR)\t| yes, push address of _fpCCR\n \ttrap\tIMM (FPTRAP)\t| and trap\n+#ifndef __mcf5200__\n 1:\tmoveml\tsp@+,d2-d7\t| restore data registers\n+#else\n+1:\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| and return\n \trts\n #endif /* L_floatex */\n@@ -362,8 +372,8 @@ L6:\tmovel\tsp@+, d2\n \n /* Coldfire implementation of non-restoring division algorithm from\n    Hennessy & Patterson, Appendix A. */\n-\tlink\ta6,IMM (0)\n-\tmoveml\td2-d4,sp@-\n+\tlink\ta6,IMM (-12)\n+\tmoveml\td2-d4,sp@\n \tmovel\ta6@(8),d0\n \tmovel\ta6@(12),d1\n \tclrl\td2\t\t| clear p\n@@ -593,8 +603,13 @@ SYM (__subdf3):\n \n | double __adddf3(double, double);\n SYM (__adddf3):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\t| everything will be done in registers\n \tmoveml\td2-d7,sp@-\t| save all data registers and a2 (but d0-d1)\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovel\ta6@(8),d0\t| get first operand\n \tmovel\ta6@(12),d1\t| \n \tmovel\ta6@(16),d2\t| get second operand\n@@ -673,7 +688,9 @@ Ladddf$2:\n #ifndef __mcf5200__\n \tmoveml\ta2-a3,sp@-\t| save the address registers\n #else\n-\tmoveml\ta2-a4,sp@-\t| save the address registers\n+\tmovel\ta2,sp@-\t\n+\tmovel\ta3,sp@-\t\n+\tmovel\ta4,sp@-\t\n #endif\n \n \tmovel\td4,a2\t\t| save the exponents\n@@ -956,7 +973,9 @@ Ladddf$4:\n #ifndef __mcf5200__\n \tmoveml\tsp@+,a2-a3\t\n #else\n-\tmoveml\tsp@+,a2-a4\t\n+\tmovel\tsp@+,a4\t\n+\tmovel\tsp@+,a3\t\n+\tmovel\tsp@+,a2\t\n #endif\n \n | Before rounding normalize so bit #DBL_MANT_DIG is set (we will consider\n@@ -1062,7 +1081,9 @@ Lsubdf$0:\n #ifndef __mcf5200__\n \tmoveml\tsp@+,a2-a3\t|\n #else\n-\tmoveml\tsp@+,a2-a4\t|\n+\tmovel\tsp@+,a4\n+\tmovel\tsp@+,a3\n+\tmovel\tsp@+,a2\n #endif\n \n | Before rounding normalize so bit #DBL_MANT_DIG is set (we will consider\n@@ -1133,27 +1154,43 @@ Ladddf$a$small:\n #ifndef __mcf5200__\n \tmoveml\tsp@+,a2-a3\t\n #else\n-\tmoveml\tsp@+,a2-a4\t\n+\tmovel\tsp@+,a4\n+\tmovel\tsp@+,a3\n+\tmovel\tsp@+,a2\n #endif\n \tmovel\ta6@(16),d0\n \tmovel\ta6@(20),d1\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| and return\n \trts\n \n Ladddf$b$small:\n #ifndef __mcf5200__\n \tmoveml\tsp@+,a2-a3\t\n #else\n-\tmoveml\tsp@+,a2-a4\t\n+\tmovel\tsp@+,a4\t\n+\tmovel\tsp@+,a3\t\n+\tmovel\tsp@+,a2\t\n #endif\n \tmovel\ta6@(8),d0\n \tmovel\ta6@(12),d1\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| and return\n \trts\n \n@@ -1193,14 +1230,26 @@ Ladddf$a:\n \tbra\tLd$infty\t\t|\n \t\n Ladddf$ret$1:\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,a2-a3\t| restore regs and exit\n+#else\n+\tmovel\tsp@+,a4\n+\tmovel\tsp@+,a3\n+\tmovel\tsp@+,a2\n+#endif\n \n Ladddf$ret:\n | Normal exit.\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n \torl\td7,d0\t\t| put sign bit back\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n \n@@ -1272,8 +1321,13 @@ Ladddf$nf:\n \n | double __muldf3(double, double);\n SYM (__muldf3):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@-\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovel\ta6@(8),d0\t\t| get a into d0-d1\n \tmovel\ta6@(12),d1\t\t| \n \tmovel\ta6@(16),d2\t\t| and b into d2-d3\n@@ -1346,7 +1400,9 @@ Lmuldf$2:\t\t\t\t|\n #ifndef __mcf5200__\n \tmoveml\ta2-a3,sp@-\t| save a2 and a3 for temporary use\n #else\n-\tmoveml\ta2-a4,sp@-\n+\tmovel\ta2,sp@-\n+\tmovel\ta3,sp@-\n+\tmovel\ta4,sp@-\n #endif\n \tmovel\tIMM (0),a2\t| a2 is a null register\n \tmovel\td4,a3\t\t| and a3 will preserve the exponent\n@@ -1440,7 +1496,9 @@ Lmuldf$2:\t\t\t\t|\n #ifndef __mcf5200__\n \tmoveml\tsp@+,a2-a3\n #else\n-\tmoveml\tsp@+,a2-a4\n+\tmovel\tsp@+,a4\n+\tmovel\tsp@+,a3\n+\tmovel\tsp@+,a2\n #endif\n \n | Now we have the product in d0-d1-d2-d3, with bit 8 of d0 set. The \n@@ -1546,7 +1604,13 @@ Lmuldf$a$0:\n \tbge\tLd$inop\t\t| in case NaN or +/-INFINITY return NaN\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n \n@@ -1589,8 +1653,13 @@ Lmuldf$b$den:\n \n | double __divdf3(double, double);\n SYM (__divdf3):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@-\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovel\ta6@(8),d0\t| get a into d0-d1\n \tmovel\ta6@(12),d1\t| \n \tmovel\ta6@(16),d2\t| and b into d2-d3\n@@ -1820,7 +1889,13 @@ Ldivdf$a$0:\n \tmovel\td0,d1\t\t| \n \tlea\tSYM (_fpCCR),a0\t| clear exception flags\n \tmovew\tIMM (0),a0@\t|\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| \n+#else\n+\tmoveml\tsp@,d2-d7\t| \n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| \n \trts\t\t\t| \t\n \n@@ -2003,7 +2078,13 @@ Lround$0:\n \n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n \n@@ -2013,8 +2094,13 @@ Lround$0:\n \n | double __negdf2(double, double);\n SYM (__negdf2):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@-\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovew\tIMM (NEGATE),d5\n \tmovel\ta6@(8),d0\t| get number to negate in d0-d1\n \tmovel\ta6@(12),d1\t|\n@@ -2034,7 +2120,13 @@ SYM (__negdf2):\n \tbra\tLd$infty\t\t\n 1:\tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n 2:\tbclr\tIMM (31),d0\n@@ -2050,8 +2142,13 @@ EQUAL   =  0\n \n | int __cmpdf2(double, double);\n SYM (__cmpdf2):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@- \t| save registers\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovew\tIMM (COMPARE),d5\n \tmovel\ta6@(8),d0\t| get first operand\n \tmovel\ta6@(12),d1\t|\n@@ -2112,17 +2209,35 @@ Lcmpdf$1:\n \tbne\tLcmpdf$a$gt$b\t| |b| < |a|\n | If we got here a == b.\n \tmovel\tIMM (EQUAL),d0\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7 \t| put back the registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n Lcmpdf$a$gt$b:\n \tmovel\tIMM (GREATER),d0\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7 \t| put back the registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n Lcmpdf$b$gt$a:\n \tmovel\tIMM (LESS),d0\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7 \t| put back the registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n \n@@ -2368,8 +2483,13 @@ SYM (__subsf3):\n \n | float __addsf3(float, float);\n SYM (__addsf3):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\t| everything will be done in registers\n \tmoveml\td2-d7,sp@-\t| save all data registers but d0-d1\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovel\ta6@(8),d0\t| get first operand\n \tmovel\ta6@(12),d1\t| get second operand\n \tmovel\td0,d6\t\t| get d0's sign bit '\n@@ -2708,15 +2828,27 @@ Laddsf$a$small:\n \tmovel\ta6@(12),d0\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| and return\n \trts\n \n Laddsf$b$small:\n \tmovel\ta6@(8),d0\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| and return\n \trts\n \n@@ -2768,7 +2900,13 @@ Laddsf$ret:\n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n \torl\td7,d0\t\t| put sign bit\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| restore data registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| and return\n \trts\n \n@@ -2829,8 +2967,13 @@ Laddsf$nf:\n \n | float __mulsf3(float, float);\n SYM (__mulsf3):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@-\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovel\ta6@(8),d0\t| get a into d0\n \tmovel\ta6@(12),d1\t| and b into d1\n \tmovel\td0,d7\t\t| d7 will hold the sign of the product\n@@ -2992,7 +3135,13 @@ Lmulsf$a$0:\n \tbge\tLf$inop\t\t| if b is +/-INFINITY or NaN return NaN\n \tlea\tSYM (_fpCCR),a0\t| else return zero\n \tmovew\tIMM (0),a0@\t| \n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t| \n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t| \n \trts\t\t\t| \n \n@@ -3032,8 +3181,13 @@ Lmulsf$b$den:\n \n | float __divsf3(float, float);\n SYM (__divsf3):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@-\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovel\ta6@(8),d0\t\t| get a into d0\n \tmovel\ta6@(12),d1\t\t| and b into d1\n \tmovel\td0,d7\t\t\t| d7 will hold the sign of the result\n@@ -3181,7 +3335,13 @@ Ldivsf$a$0:\n \tmovel\tIMM (0),d0\t\t| else return zero\n \tlea\tSYM (_fpCCR),a0\t\t|\n \tmovew\tIMM (0),a0@\t\t|\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\t\t| \n+#else\n+\tmoveml\tsp@,d2-d7\t\t| \n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\t\t\t| \n \trts\t\t\t\t| \n \t\n@@ -3327,7 +3487,13 @@ Lround$0:\n \n \tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n \n@@ -3340,8 +3506,13 @@ Lround$0:\n \n | float __negsf2(float);\n SYM (__negsf2):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@-\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovew\tIMM (NEGATE),d5\n \tmovel\ta6@(8),d0\t| get number to negate in d0\n \tbchg\tIMM (31),d0\t| negate\n@@ -3357,7 +3528,13 @@ SYM (__negsf2):\n \tbra\tLf$infty\t\t\n 1:\tlea\tSYM (_fpCCR),a0\n \tmovew\tIMM (0),a0@\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n 2:\tbclr\tIMM (31),d0\n@@ -3373,8 +3550,13 @@ EQUAL   =  0\n \n | int __cmpsf2(float, float);\n SYM (__cmpsf2):\n+#ifndef __mcf5200__\n \tlink\ta6,IMM (0)\n \tmoveml\td2-d7,sp@- \t| save registers\n+#else\n+\tlink\ta6,IMM (-24)\n+\tmoveml\td2-d7,sp@\n+#endif\n \tmovew\tIMM (COMPARE),d5\n \tmovel\ta6@(8),d0\t| get first operand\n \tmovel\ta6@(12),d1\t| get second operand\n@@ -3420,17 +3602,33 @@ Lcmpsf$2:\n \tbne\tLcmpsf$a$gt$b\t| |b| < |a|\n | If we got here a == b.\n \tmovel\tIMM (EQUAL),d0\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7 \t| put back the registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+#endif\n \tunlk\ta6\n \trts\n Lcmpsf$a$gt$b:\n \tmovel\tIMM (GREATER),d0\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7 \t| put back the registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n Lcmpsf$b$gt$a:\n \tmovel\tIMM (LESS),d0\n+#ifndef __mcf5200__\n \tmoveml\tsp@+,d2-d7 \t| put back the registers\n+#else\n+\tmoveml\tsp@,d2-d7\n+\t| XXX if frame pointer is ever removed, stack pointer must\n+\t| be adjusted here.\n+#endif\n \tunlk\ta6\n \trts\n "}]}