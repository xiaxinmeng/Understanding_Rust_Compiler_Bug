{"sha": "70f6d5e19bb7c0eed9f3fc028632405b5c166676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBmNmQ1ZTE5YmI3YzBlZWQ5ZjNmYzAyODYzMjQwNWI1YzE2NjY3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-11T23:19:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-11T23:19:06Z"}, "message": "gcc/\n\t* common.opt (Wimplicit-fallthrough) Turn into alias to\n\t-Wimplicit-fallthrough=3.  Remove EnabledBy.\n\t(Wimplicit-fallthrough=): New option.\n\t* gimplify.c (warn_implicit_fallthrough_r): Use\n\tOPT_Wimplicit_fallthrough_ instead of OPT_Wimplicit_fallthrough.\n\t* doc/invoke.texi (-Wimplicit-fallthrough): Document as alias\n\tto -Wimplicit-fallthrough=3.\n\t(-Wimplicit-fallthrough=): Document.\ngcc/c-family/\n\t* c.opt (Wextra): Add as C/C++/ObjC/ObjC++ option.\n\t(Wimplicit-fallthrough=): Enable for these languages by -Wextra.\n\t* c-opts.c (sanitize_cpp_opts): Initialize\n\tcpp_opts->cpp_warn_implicit_fallthrough.\ngcc/testsuite/\n\t* c-c++-common/Wimplicit-fallthrough-25.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-26.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-27.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-28.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-29.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-30.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-31.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-32.c: New test.\n\t* c-c++-common/Wimplicit-fallthrough-33.c: New test.\nlibcpp/\n\t* include/cpplib.h (struct cpp_options): Add\n\tcpp_warn_implicit_fallthrough.\n\t* init.c (cpp_create_reader): Initialize it to 0.\n\t* lex.c (fallthrough_comment_p): Handle different\n\tcpp_warn_implicit_fallthrough levels.  Whitespace fixes.\n\nFrom-SVN: r241013", "tree": {"sha": "07eca0bd2785dbe7d4080d868f53c82033d3cef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07eca0bd2785dbe7d4080d868f53c82033d3cef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70f6d5e19bb7c0eed9f3fc028632405b5c166676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f6d5e19bb7c0eed9f3fc028632405b5c166676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70f6d5e19bb7c0eed9f3fc028632405b5c166676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70f6d5e19bb7c0eed9f3fc028632405b5c166676/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4803de58c5fc0f260fe63cedbdfcd4091d136fbf"}], "stats": {"total": 528, "additions": 502, "deletions": 26}, "files": [{"sha": "6facb484ff8fdb120ebe03a1225241f4e71e1aca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -1,3 +1,14 @@\n+2016-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* common.opt (Wimplicit-fallthrough) Turn into alias to\n+\t-Wimplicit-fallthrough=3.  Remove EnabledBy.\n+\t(Wimplicit-fallthrough=): New option.\n+\t* gimplify.c (warn_implicit_fallthrough_r): Use\n+\tOPT_Wimplicit_fallthrough_ instead of OPT_Wimplicit_fallthrough.\n+\t* doc/invoke.texi (-Wimplicit-fallthrough): Document as alias\n+\tto -Wimplicit-fallthrough=3.\n+\t(-Wimplicit-fallthrough=): Document.\n+\n 2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (emit_scc_insn): Remove direct support for EQ"}, {"sha": "64619fc60827cd9739522842c08bc8675b3e891c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -1,3 +1,10 @@\n+2016-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c.opt (Wextra): Add as C/C++/ObjC/ObjC++ option.\n+\t(Wimplicit-fallthrough=): Enable for these languages by -Wextra.\n+\t* c-opts.c (sanitize_cpp_opts): Initialize\n+\tcpp_opts->cpp_warn_implicit_fallthrough.\n+\n 2016-10-11  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c (warning_candidate_p): Change the return type to bool"}, {"sha": "da62b55fea3eb0fc92e49d6a85cb86d4864f994b", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -1279,6 +1279,11 @@ sanitize_cpp_opts (void)\n   if (flag_working_directory == -1)\n     flag_working_directory = (debug_info_level != DINFO_LEVEL_NONE);\n \n+  if (warn_implicit_fallthrough < 5)\n+    cpp_opts->cpp_warn_implicit_fallthrough = warn_implicit_fallthrough;\n+  else\n+    cpp_opts->cpp_warn_implicit_fallthrough = 0;\n+\n   if (cpp_opts->directives_only)\n     {\n       if (cpp_warn_unused_macros)"}, {"sha": "82c992c1f5ab0a57063b149f36df97b1adc5567c", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -462,6 +462,10 @@ Werror-implicit-function-declaration\n C ObjC RejectNegative Warning Alias(Werror=, implicit-function-declaration)\n This switch is deprecated; use -Werror=implicit-function-declaration instead.\n \n+Wextra\n+C ObjC C++ ObjC++ Warning\n+; in common.opt\n+\n Wfloat-conversion\n C ObjC C++ ObjC++ Var(warn_float_conversion) Warning LangEnabledBy(C ObjC C++ ObjC++,Wconversion)\n Warn for implicit type conversions that cause loss of floating point precision.\n@@ -536,6 +540,10 @@ Wimplicit\n C ObjC Var(warn_implicit) Warning LangEnabledBy(C ObjC,Wall)\n Warn about implicit declarations.\n \n+Wimplicit-fallthrough=\n+LangEnabledBy(C ObjC C++ ObjC++,Wextra,3,0)\n+; in common.opt\n+\n Wdouble-promotion\n C ObjC C++ ObjC++ Var(warn_double_promotion) Warning\n Warn about implicit conversions from \\\"float\\\" to \\\"double\\\"."}, {"sha": "15679c5d3923be42377828e648d2847a280f6efd", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -602,7 +602,10 @@ Common Var(warn_hsa) Init(1) Warning\n Warn when a function cannot be expanded to HSAIL.\n \n Wimplicit-fallthrough\n-Common Var(warn_implicit_fallthrough) Warning EnabledBy(Wextra)\n+Common Alias(Wimplicit-fallthrough=,3,0) Warning\n+\n+Wimplicit-fallthrough=\n+Common Var(warn_implicit_fallthrough) RejectNegative Joined UInteger Warning\n Warn when a switch case falls through.\n \n Winline"}, {"sha": "c11f1d572e9b87cfd29efe1b3eca28ab28b19ef7", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -273,8 +273,8 @@ Objective-C and Objective-C++ Dialects}.\n -Wformat-security  -Wformat-signedness  -Wformat-y2k -Wframe-address @gol\n -Wframe-larger-than=@var{len} -Wno-free-nonheap-object -Wjump-misses-init @gol\n -Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types @gol\n--Wimplicit  -Wimplicit-fallthrough  -Wimplicit-function-declaration @gol\n--Wimplicit-int @gol\n+-Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=@var{n} @gol\n+-Wimplicit-function-declaration  -Wimplicit-int @gol\n -Winit-self  -Winline  -Wno-int-conversion  -Wint-in-bool-context @gol\n -Wno-int-to-pointer-cast -Winvalid-memory-model -Wno-invalid-offsetof @gol\n -Winvalid-pch -Wlarger-than=@var{len} @gol\n@@ -3734,7 +3734,7 @@ name is still supported, but the newer name is more descriptive.)\n @gccoptlist{-Wclobbered  @gol\n -Wempty-body  @gol\n -Wignored-qualifiers @gol\n--Wimplicit-fallthrough @gol\n+-Wimplicit-fallthrough=3 @gol\n -Wmissing-field-initializers  @gol\n -Wmissing-parameter-type @r{(C only)}  @gol\n -Wold-style-declaration @r{(C only)}  @gol\n@@ -4106,6 +4106,12 @@ This warning is enabled by @option{-Wall}.\n @item -Wimplicit-fallthrough\n @opindex Wimplicit-fallthrough\n @opindex Wno-implicit-fallthrough\n+@option{-Wimplicit-fallthrough} is the same as @option{-Wimplicit-fallthrough=3}\n+and @option{-Wno-implicit-fallthrough} is the same as\n+@option{-Wimplicit-fallthrough=0}.\n+\n+@item -Wimplicit-fallthrough=@var{n}\n+@opindex Wimplicit-fallthrough=\n Warn when a switch case falls through.  For example:\n \n @smallexample\n@@ -4126,7 +4132,7 @@ switch (cond)\n \n This warning does not warn when the last statement of a case cannot\n fall through, e.g. when there is a return statement or a call to function\n-declared with the noreturn attribute.  @option{-Wimplicit-fallthrough}\n+declared with the noreturn attribute.  @option{-Wimplicit-fallthrough=}\n also takes into account control flow statements, such as ifs, and only\n warns when appropriate.  E.g.@:\n \n@@ -4169,27 +4175,61 @@ switch (cond)\n C++17 provides a standard way to suppress the @option{-Wimplicit-fallthrough}\n warning using @code{[[fallthrough]];} instead of the GNU attribute.  In C++11\n or C++14 users can use @code{[[gnu::fallthrough]];}, which is a GNU extension.\n-Instead of the these attributes, it is also possible to add a \"falls through\"\n+Instead of the these attributes, it is also possible to add a fallthrough\n comment to silence the warning.  The whole body of the C or C++ style comment\n-should match one of the following regular expressions:\n+should match the given regular expressions listed below.  The option argument\n+@var{n} specifies what kind of comments are accepted:\n+\n+@itemize @bullet\n+\n+@item @option{-Wimplicit-fallthrough=0} disables the warning altogether.\n+\n+@item @option{-Wimplicit-fallthrough=1} matches @code{.*} regular\n+expression, any comment is used as fallthrough comment.\n+\n+@item @option{-Wimplicit-fallthrough=2} case insensitively matches\n+@code{.*falls?[ \\t-]*thr(ough|u).*} regular expression.\n+\n+@item @option{-Wimplicit-fallthrough=3} case sensitively matches one of the\n+following regular expressions:\n \n @itemize @bullet\n \n @item @code{-fallthrough}\n \n @item @code{@@fallthrough@@}\n \n-@item @code{lint -fallthrough ?}\n+@item @code{lint -fallthrough[ \\t]*}\n+\n+@item @code{[ \\t.!]*(ELSE,? |INTENTIONAL(LY)? )?@*FALL(S | |-)?THR(OUGH|U)[ \\t.!]*(-[^\\n\\r]*)?}\n+\n+@item @code{[ \\t.!]*(Else,? |Intentional(ly)? )?@*Fall((s | |-)[Tt]|t)hr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?}\n \n-@item @code{[ \\t.!]*(ELSE,? |INTENTIONAL(LY)? )?FALL(S | |-)?THR(OUGH|U)[ \\t.!]*(-[^\\n\\r]*)?}\n+@item @code{[ \\t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?@*fall(s | |-)?thr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?}\n+\n+@end itemize\n \n-@item @code{[ \\t.!]*(Else,? |Intentional(ly)? )?Fall((s | |-)[Tt]|t)hr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?}\n+@item @option{-Wimplicit-fallthrough=4} case sensitively matches one of the\n+following regular expressions:\n+\n+@itemize @bullet\n+\n+@item @code{-fallthrough}\n+\n+@item @code{@@fallthrough@@}\n+\n+@item @code{lint -fallthrough[ \\t]*}\n+\n+@item @code{[ \\t]*FALLTHR(OUGH|U)[ \\t]*}\n+\n+@end itemize\n \n-@item @code{[ \\t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?fall(s | |-)?thr(ough|u)[ \\t.!]*(-[^\\n\\r]*)?}\n+@item @option{-Wimplicit-fallthrough=5} doesn't recognize any comments as\n+fallthrough comments, only attributes disable the warning.\n \n @end itemize\n \n-and the comment needs to be followed after optional whitespace and other comments\n+The comment needs to be followed after optional whitespace and other comments\n by @code{case} or @code{default} keywords or by a user label that preceeds some\n @code{case} or @code{default} label.\n \n@@ -4206,7 +4246,7 @@ switch (cond)\n @end group\n @end smallexample\n \n-This warning is enabled by @option{-Wextra}.\n+The @option{-Wimplicit-fallthrough=3} warning is enabled by @option{-Wextra}.\n \n @item -Wignored-qualifiers @r{(C and C++ only)}\n @opindex Wignored-qualifiers"}, {"sha": "2f074f9532cb7f818c83229512c785fd686cc02f", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -1918,15 +1918,15 @@ warn_implicit_fallthrough_r (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n \t    else if (gimple_code (prev) == GIMPLE_LABEL\n \t\t     && (label = gimple_label_label (as_a <glabel *> (prev)))\n \t\t     && (l = find_label_entry (&labels, label)))\n-\t      warned_p = warning_at (l->loc, OPT_Wimplicit_fallthrough,\n+\t      warned_p = warning_at (l->loc, OPT_Wimplicit_fallthrough_,\n \t\t\t\t     \"this statement may fall through\");\n \t    else if (!gimple_call_internal_p (prev, IFN_FALLTHROUGH)\n \t\t     /* Try to be clever and don't warn when the statement\n \t\t\tcan't actually fall through.  */\n \t\t     && gimple_stmt_may_fallthru (prev)\n \t\t     && gimple_has_location (prev))\n \t      warned_p = warning_at (gimple_location (prev),\n-\t\t\t\t     OPT_Wimplicit_fallthrough,\n+\t\t\t\t     OPT_Wimplicit_fallthrough_,\n \t\t\t\t     \"this statement may fall through\");\n \t    if (warned_p)\n \t      inform (gimple_location (next), \"here\");"}, {"sha": "4423684948a44d2e75d1851ed8a6ba033eb63030", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -1,3 +1,15 @@\n+2016-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/Wimplicit-fallthrough-25.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-26.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-27.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-28.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-29.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-30.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-31.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-32.c: New test.\n+\t* c-c++-common/Wimplicit-fallthrough-33.c: New test.\n+\n 2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/setcc-4.c: Adjust."}, {"sha": "f62287885eeb9d4ca9d441c8d30ad9c5a616759a", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-25.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-25.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wextra\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "3c62de1ff6cf85b1684927e825b5413593594fe1", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-26.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-26.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "7ea0815f50b1f9ebf784d804b7b2420fce050231", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-27.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-27.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=1\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "7c685f64d5fbdec72f7f0c793707eabf6ec482c9", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-28.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-28.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=2\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "9863e9d140ac3d0da1cc61111517c5d8706a1640", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-29.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-29.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=3\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "54d22dff6b41c5011641ef81aac01639339b5756", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-30.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-30.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=4\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "de20d92e20ac3262d5eec308cbf66eb0b3bed332", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-31.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-31.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=5\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-warning \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "cd0b8ce9363304e7e3a318553ebba7719c8d200b", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-32.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-32.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wimplicit-fallthrough=0\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "336cc447e21acdee2f71a1185137421604fcb4f2", "filename": "gcc/testsuite/c-c++-common/Wimplicit-fallthrough-33.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWimplicit-fallthrough-33.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-implicit-fallthrough\" } */\n+\n+void bar (int);\n+\n+void\n+foo (int i)\n+{\n+  switch (i)\n+    {\n+    case 1:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (1);\n+    case 2:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (2);\n+      /* Some comment.  */\n+    case 3:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (3);\n+      /* Here we really do want to fALl   tHRoUgh and we mean it!  */\n+    case 4:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (4);\n+      /* Intentionally fall through.  */\n+    case 5:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (5);\n+      /* FALLTHROUGH */\n+    case 6:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (6);\n+      __attribute__((fallthrough));\n+    case 7:\t\t\t/* { dg-bogus \"this statement may \\[fla\\]* through\" \"\" { target *-*-* } .+1 } */\n+      bar (7);\n+    default:\n+      break;\n+    }\n+}"}, {"sha": "40bd5cdc02e08620d71a7df10e44597efc7f31c8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -1,3 +1,11 @@\n+2016-10-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/cpplib.h (struct cpp_options): Add\n+\tcpp_warn_implicit_fallthrough.\n+\t* init.c (cpp_create_reader): Initialize it to 0.\n+\t* lex.c (fallthrough_comment_p): Handle different\n+\tcpp_warn_implicit_fallthrough levels.  Whitespace fixes.\n+\n 2016-10-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lex.c (fallthrough_comment_p): Accept Else, fallthrough."}, {"sha": "0781c095156cc7f0cbc77093fb793aed74b9b1cf", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -395,6 +395,9 @@ struct cpp_options\n      explicitly undefined.  */\n   unsigned char warn_builtin_macro_redefined;\n \n+  /* Different -Wimplicit-fallthrough= levels.  */\n+  unsigned char cpp_warn_implicit_fallthrough;\n+\n   /* Nonzero means we should look for header.gcc files that remap file\n      names.  */\n   unsigned char remap;"}, {"sha": "5e352806100f638a20e7908fcbc2592be9f016f6", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -189,6 +189,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   CPP_OPTION (pfile, warn_dollars) = 1;\n   CPP_OPTION (pfile, warn_variadic_macros) = 1;\n   CPP_OPTION (pfile, warn_builtin_macro_redefined) = 1;\n+  CPP_OPTION (pfile, cpp_warn_implicit_fallthrough) = 0;\n   /* By default, track locations of tokens resulting from macro\n      expansion.  The '2' means, track the locations with the highest\n      accuracy.  Read the comments for struct"}, {"sha": "6f65fa152fcadbc5087d5f55611909dc96739176", "filename": "libcpp/lex.c", "status": "modified", "additions": 92, "deletions": 11, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70f6d5e19bb7c0eed9f3fc028632405b5c166676/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=70f6d5e19bb7c0eed9f3fc028632405b5c166676", "patch": "@@ -2040,6 +2040,64 @@ static bool\n fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n {\n   const unsigned char *from = comment_start + 1;\n+\n+  switch (CPP_OPTION (pfile, cpp_warn_implicit_fallthrough))\n+    {\n+      /* For both -Wimplicit-fallthrough=0 and -Wimplicit-fallthrough=5 we\n+\t don't recognize any comments.  The latter only checks attributes,\n+\t the former doesn't warn.  */\n+    case 0:\n+    default:\n+      return false;\n+      /* -Wimplicit-fallthrough=1 considers any comment, no matter what\n+\t content it has.  */\n+    case 1:\n+      return true;\n+    case 2:\n+      /* -Wimplicit-fallthrough=2 looks for (case insensitive)\n+\t .*falls?[ \\t-]*thr(u|ough).* regex.  */\n+      for (; (size_t) (pfile->buffer->cur - from) >= sizeof \"fallthru\" - 1;\n+\t   from++)\n+\t{\n+\t  /* Is there anything like strpbrk with upper boundary, or\n+\t     memchr looking for 2 characters rather than just one?  */\n+\t  if (from[0] != 'f' && from[0] != 'F')\n+\t    continue;\n+\t  if (from[1] != 'a' && from[1] != 'A')\n+\t    continue;\n+\t  if (from[2] != 'l' && from[2] != 'L')\n+\t    continue;\n+\t  if (from[3] != 'l' && from[3] != 'L')\n+\t    continue;\n+\t  from += sizeof \"fall\" - 1;\n+\t  if (from[0] == 's' || from[0] == 'S')\n+\t    from++;\n+\t  while (*from == ' ' || *from == '\\t' || *from == '-')\n+\t    from++;\n+\t  if (from[0] != 't' && from[0] != 'T')\n+\t    continue;\n+\t  if (from[1] != 'h' && from[1] != 'H')\n+\t    continue;\n+\t  if (from[2] != 'r' && from[2] != 'R')\n+\t    continue;\n+\t  if (from[3] == 'u' || from[3] == 'U')\n+\t    return true;\n+\t  if (from[3] != 'o' && from[3] != 'O')\n+\t    continue;\n+\t  if (from[4] != 'u' && from[4] != 'U')\n+\t    continue;\n+\t  if (from[5] != 'g' && from[5] != 'G')\n+\t    continue;\n+\t  if (from[6] != 'h' && from[6] != 'H')\n+\t    continue;\n+\t  return true;\n+\t}\n+      return false;\n+    case 3:\n+    case 4:\n+      break;\n+    }\n+\n   /* Whole comment contents:\n      -fallthrough\n      @fallthrough@\n@@ -2060,18 +2118,41 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n       from += 1 + len;\n     }\n   /* Whole comment contents (regex):\n-     lint -fallthrough ?\n+     lint -fallthrough[ \\t]*\n    */\n   else if (*from == 'l')\n     {\n       size_t len = sizeof \"int -fallthrough\" - 1;\n       if ((size_t) (pfile->buffer->cur - from - 1) < len)\n \treturn false;\n       if (memcmp (from + 1, \"int -fallthrough\", len))\n-        return false;\n+\treturn false;\n       from += 1 + len;\n-      if (*from == ' ')\n-        from++;\n+      while (*from == ' ' || *from == '\\t')\n+\tfrom++;\n+    }\n+  /* Whole comment contents (regex):\n+     [ \\t]*FALLTHR(U|OUGH)[ \\t]*\n+   */\n+  else if (CPP_OPTION (pfile, cpp_warn_implicit_fallthrough) == 4)\n+    {\n+      while (*from == ' ' || *from == '\\t')\n+\tfrom++;\n+      if ((size_t) (pfile->buffer->cur - from)  < sizeof \"FALLTHRU\" - 1)\n+\treturn false;\n+      if (memcmp (from, \"FALLTHR\", sizeof \"FALLTHR\" - 1))\n+\treturn false;\n+      from += sizeof \"FALLTHR\" - 1;\n+      if (*from == 'U')\n+\tfrom++;\n+      else if ((size_t) (pfile->buffer->cur - from)  < sizeof \"OUGH\" - 1)\n+\treturn false;\n+      else if (memcmp (from, \"OUGH\", sizeof \"OUGH\" - 1))\n+\treturn false;\n+      else\n+\tfrom += sizeof \"OUGH\" - 1;\n+      while (*from == ' ' || *from == '\\t')\n+\tfrom++;\n     }\n   /* Whole comment contents (regex):\n      [ \\t.!]*(ELSE,? |INTENTIONAL(LY)? )?FALL(S | |-)?THR(OUGH|U)[ \\t.!]*(-[^\\n\\r]*)?\n@@ -2085,8 +2166,8 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n       unsigned char f = *from;\n       bool all_upper = false;\n       if (f == 'E' || f == 'e')\n-        {\n-          if ((size_t) (pfile->buffer->cur - from)\n+\t{\n+\t  if ((size_t) (pfile->buffer->cur - from)\n \t      < sizeof \"else fallthru\" - 1)\n \t    return false;\n \t  if (f == 'E' && memcmp (from + 1, \"LSE\", sizeof \"LSE\" - 1) == 0)\n@@ -2096,18 +2177,18 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n \t  from += sizeof \"else\" - 1;\n \t  if (*from == ',')\n \t    from++;\n-          if (*from != ' ')\n+\t  if (*from != ' ')\n \t    return false;\n \t  from++;\n \t  if (all_upper && *from == 'f')\n \t    return false;\n \t  if (f == 'e' && *from == 'F')\n \t    return false;\n \t  f = *from;\n-        }\n+\t}\n       else if (f == 'I' || f == 'i')\n-        {\n-          if ((size_t) (pfile->buffer->cur - from)\n+\t{\n+\t  if ((size_t) (pfile->buffer->cur - from)\n \t      < sizeof \"intentional fallthru\" - 1)\n \t    return false;\n \t  if (f == 'I' && memcmp (from + 1, \"NTENTIONAL\",\n@@ -2138,7 +2219,7 @@ fallthrough_comment_p (cpp_reader *pfile, const unsigned char *comment_start)\n \t  if (f == 'i' && *from == 'F')\n \t    return false;\n \t  f = *from;\n-        }\n+\t}\n       if (f != 'F' && f != 'f')\n \treturn false;\n       if ((size_t) (pfile->buffer->cur - from) < sizeof \"fallthru\" - 1)"}]}