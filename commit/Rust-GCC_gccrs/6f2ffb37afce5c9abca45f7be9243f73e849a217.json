{"sha": "6f2ffb37afce5c9abca45f7be9243f73e849a217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmYyZmZiMzdhZmNlNWM5YWJjYTQ1ZjdiZTkyNDNmNzNlODQ5YTIxNw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-02-13T23:48:39Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-02-13T23:48:39Z"}, "message": "verify.cc (state::seen_subrs): New field.\n\n\t* verify.cc (state::seen_subrs): New field.\n\t(state::state): Initialize it.\n\t(state::clean_subrs): New method.\n\t(state::~state): Call it.\n\t(state::copy): Copy subroutine list.\n\t(state::add_subr): New method.\n\t(state::merge): Only register a change if the current subroutine\n\thasn't yet been noted.\n\nFrom-SVN: r62878", "tree": {"sha": "3e671a8cc1b7f60a5e8146b6bbd098d78063cba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e671a8cc1b7f60a5e8146b6bbd098d78063cba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f2ffb37afce5c9abca45f7be9243f73e849a217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2ffb37afce5c9abca45f7be9243f73e849a217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2ffb37afce5c9abca45f7be9243f73e849a217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2ffb37afce5c9abca45f7be9243f73e849a217/comments", "author": null, "committer": null, "parents": [{"sha": "114775850c8a43ad478b7ec0b31252eaffb9200e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114775850c8a43ad478b7ec0b31252eaffb9200e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114775850c8a43ad478b7ec0b31252eaffb9200e"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "e53a2e7ff122b816566675f301ab2111090a626e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2ffb37afce5c9abca45f7be9243f73e849a217/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2ffb37afce5c9abca45f7be9243f73e849a217/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6f2ffb37afce5c9abca45f7be9243f73e849a217", "patch": "@@ -1,3 +1,14 @@\n+2003-02-13  Tom Tromey  <tromey@redhat.com>\n+\n+\t* verify.cc (state::seen_subrs): New field.\n+\t(state::state): Initialize it.\n+\t(state::clean_subrs): New method.\n+\t(state::~state): Call it.\n+\t(state::copy): Copy subroutine list.\n+\t(state::add_subr): New method.\n+\t(state::merge): Only register a change if the current subroutine\n+\thasn't yet been noted.\n+\n 2003-02-13  Mark Wielaard  <mark@klomp.org>\n \n \t* java/io/InputStreamReader.java (getEncoding): Return null when"}, {"sha": "a7b0ee2eb8b2442058fa376d259e008736e06591", "filename": "libjava/verify.cc", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f2ffb37afce5c9abca45f7be9243f73e849a217/libjava%2Fverify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f2ffb37afce5c9abca45f7be9243f73e849a217/libjava%2Fverify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fverify.cc?ref=6f2ffb37afce5c9abca45f7be9243f73e849a217", "patch": "@@ -1,6 +1,6 @@\n // defineclass.cc - defining a class from .class format.\n \n-/* Copyright (C) 2001, 2002  Free Software Foundation\n+/* Copyright (C) 2001, 2002, 2003  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -821,6 +821,12 @@ class _Jv_BytecodeVerifier\n     // assigns to locals[0] (overwriting `this') and then returns\n     // without really initializing.\n     type this_type;\n+    // This is a list of all subroutines that have been seen at this\n+    // point.  Ordinarily this is NULL; it is only allocated and used\n+    // in relatively weird situations involving non-ret exit from a\n+    // subroutine.  We have to keep track of this in this way to avoid\n+    // endless recursion in these cases.\n+    subr_info *seen_subrs;\n \n     // INVALID marks a state which is not on the linked list of states\n     // requiring reverification.\n@@ -839,6 +845,7 @@ class _Jv_BytecodeVerifier\n       stack = NULL;\n       locals = NULL;\n       local_changed = NULL;\n+      seen_subrs = NULL;\n     }\n \n     state (int max_stack, int max_locals)\n@@ -851,6 +858,7 @@ class _Jv_BytecodeVerifier\n \tstack[i] = unsuitable_type;\n       locals = new type[max_locals];\n       local_changed = (bool *) _Jv_Malloc (sizeof (bool) * max_locals);\n+      seen_subrs = NULL;\n       for (int i = 0; i < max_locals; ++i)\n \t{\n \t  locals[i] = unsuitable_type;\n@@ -866,6 +874,7 @@ class _Jv_BytecodeVerifier\n       stack = new type[max_stack];\n       locals = new type[max_locals];\n       local_changed = (bool *) _Jv_Malloc (sizeof (bool) * max_locals);\n+      seen_subrs = NULL;\n       copy (orig, max_stack, max_locals, ret_semantics);\n       next = INVALID;\n     }\n@@ -878,6 +887,7 @@ class _Jv_BytecodeVerifier\n \tdelete[] locals;\n       if (local_changed)\n \t_Jv_Free (local_changed);\n+      clean_subrs ();\n     }\n \n     void *operator new[] (size_t bytes)\n@@ -900,6 +910,17 @@ class _Jv_BytecodeVerifier\n       _Jv_Free (mem);\n     }\n \n+    void clean_subrs ()\n+    {\n+      subr_info *info = seen_subrs;\n+      while (info != NULL)\n+\t{\n+\t  subr_info *next = info->next;\n+\t  _Jv_Free (info);\n+\t  info = next;\n+\t}\n+    }\n+\n     void copy (const state *copy, int max_stack, int max_locals,\n \t       bool ret_semantics = false)\n     {\n@@ -919,6 +940,16 @@ class _Jv_BytecodeVerifier\n \t    locals[i] = copy->locals[i];\n \t  local_changed[i] = copy->local_changed[i];\n \t}\n+\n+      clean_subrs ();\n+      if (copy->seen_subrs)\n+\t{\n+\t  for (subr_info *info = seen_subrs; info != NULL; info = info->next)\n+\t    add_subr (info->pc);\n+\t}\n+      else\n+\tseen_subrs = NULL;\n+\n       this_type = copy->this_type;\n       // Don't modify `next'.\n     }\n@@ -945,6 +976,15 @@ class _Jv_BytecodeVerifier\n \tlocal_changed[i] = false;\n     }\n \n+    // Indicate that we've been in this this subroutine.\n+    void add_subr (int pc)\n+    {\n+      subr_info *n = (subr_info *) _Jv_Malloc (sizeof (subr_info));\n+      n->pc = pc;\n+      n->next = seen_subrs;\n+      seen_subrs = n;\n+    }\n+\n     // Merge STATE_OLD into this state.  Destructively modifies this\n     // state.  Returns true if the new state was in fact changed.\n     // Will throw an exception if the states are not mergeable.\n@@ -972,10 +1012,23 @@ class _Jv_BytecodeVerifier\n \t}\n       else\n \t{\n-\t  // If the subroutines differ, indicate that the state\n-\t  // changed.  This is needed to detect when subroutines have\n-\t  // merged.\n-\t  changed = true;\n+\t  // If the subroutines differ, and we haven't seen this\n+\t  // subroutine before, indicate that the state changed.  This\n+\t  // is needed to detect when subroutines have merged.\n+\t  bool found = false;\n+\t  for (subr_info *info = seen_subrs; info != NULL; info = info->next)\n+\t    {\n+\t      if (info->pc == state_old->subroutine)\n+\t\t{\n+\t\t  found = true;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  if (! found)\n+\t    {\n+\t      add_subr (state_old->subroutine);\n+\t      changed = true;\n+\t    }\n \t}\n \n       // Merge stacks.  Special handling for NO_STACK case."}]}