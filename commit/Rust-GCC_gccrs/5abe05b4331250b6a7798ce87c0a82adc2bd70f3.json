{"sha": "5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiZTA1YjQzMzEyNTBiNmE3Nzk4Y2U4N2MwYTgyYWRjMmJkNzBmMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-19T14:57:50Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-10-19T15:00:41Z"}, "message": "preprocessor: Fix non-fn fn-like macro at EOF [PR97471]\n\nWe inject EOF tokens between macro argument lists, but had\nconfused/stale logic in the non-fn invocation.  Renamed the magic\n'eof' token, as it's now only used for macro argument termination.\nAlways rewind the non-OPEN_PAREN token.\n\n\tlibcpp/\n\t* internal.h (struct cpp_reader): Rename 'eof' field to 'endarg'.\n\t* init.c (cpp_create_reader): Adjust.\n\t* macro.c (collect_args): Use endarg for separator.  Always rewind\n\tin the not-fn case.\n\tgcc/testsuite/\n\t* c-c++-common/cpp/pr97471.c: New.", "tree": {"sha": "e0e0014c3fb9a8fdf77f99b7393dd0dd443f9a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0e0014c3fb9a8fdf77f99b7393dd0dd443f9a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d31eb8f17fa17f63d46651af1c69fb8eca2d04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d31eb8f17fa17f63d46651af1c69fb8eca2d04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d31eb8f17fa17f63d46651af1c69fb8eca2d04a"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "f1e512ea3318e394390aa67c7cffa052ef28bd89", "filename": "gcc/testsuite/c-c++-common/cpp/pr97471.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr97471.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr97471.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fpr97471.c?ref=5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "patch": "@@ -0,0 +1,10 @@\n+/* PR preprocessor/97471 */\n+/* { dg-do compile } */\n+\n+/* ICE with non-fn use of fn-like macro at EOF  */\n+\n+#define a() b\n+\n+/* { dg-error \"expected\" \"\" { target c } .+2 } */\n+/* { dg-error \"does not name\" \"\" { target c++ } .+1 } */\n+a"}, {"sha": "454a183134af9d4eea8be5a0d02915419141af08", "filename": "libcpp/init.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "patch": "@@ -248,8 +248,10 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   /* Set up static tokens.  */\n   pfile->avoid_paste.type = CPP_PADDING;\n   pfile->avoid_paste.val.source = NULL;\n-  pfile->eof.type = CPP_EOF;\n-  pfile->eof.flags = 0;\n+  pfile->avoid_paste.src_loc = 0;\n+  pfile->endarg.type = CPP_EOF;\n+  pfile->endarg.flags = 0;\n+  pfile->endarg.src_loc = 0;\n \n   /* Create a token buffer for the lexer.  */\n   _cpp_init_tokenrun (&pfile->base_run, 250);"}, {"sha": "b1a2a996ef60e6e01e13af5fcdaf41afb17b8552", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "patch": "@@ -517,9 +517,9 @@ struct cpp_reader\n      set to -1 to disable it or to a non-negative value to enable it.  */\n   time_t source_date_epoch;\n \n-  /* EOF token, and a token forcing paste avoidance.  */\n+  /* A token forcing paste avoidance, and one demarking macro arguments.  */\n   cpp_token avoid_paste;\n-  cpp_token eof;\n+  cpp_token endarg;\n \n   /* Opaque handle to the dependencies of mkdeps.c.  */\n   class mkdeps *deps;"}, {"sha": "9cb3b10a9a0f3e785ca6d964e0c9aa56ac02041c", "filename": "libcpp/macro.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5abe05b4331250b6a7798ce87c0a82adc2bd70f3/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=5abe05b4331250b6a7798ce87c0a82adc2bd70f3", "patch": "@@ -1241,7 +1241,8 @@ collect_args (cpp_reader *pfile, const cpp_hashnode *node,\n \tntokens--;\n \n       arg->count = ntokens;\n-      set_arg_token (arg, &pfile->eof, pfile->eof.src_loc,\n+      /* Append an EOF to mark end-of-argument.  */\n+      set_arg_token (arg, &pfile->endarg, token->src_loc,\n \t\t     ntokens, MACRO_ARG_TOKEN_NORMAL,\n \t\t     CPP_OPTION (pfile, track_macro_expansion));\n \n@@ -1328,17 +1329,12 @@ funlike_invocation_p (cpp_reader *pfile, cpp_hashnode *node,\n       return collect_args (pfile, node, pragma_buff, num_args);\n     }\n \n-  /* CPP_EOF can be the end of macro arguments, or the end of the\n-     file.  We mustn't back up over the latter.  Ugh.  */\n-  if (token->type != CPP_EOF || token == &pfile->eof)\n-    {\n-      /* Back up.  We may have skipped padding, in which case backing\n-\t up more than one token when expanding macros is in general\n-\t too difficult.  We re-insert it in its own context.  */\n-      _cpp_backup_tokens (pfile, 1);\n-      if (padding)\n-\t_cpp_push_token_context (pfile, NULL, padding, 1);\n-    }\n+  /* Back up.  We may have skipped padding, in which case backing\n+     up more than one token when expanding macros is in general\n+     too difficult.  We re-insert it in its own context.  */\n+  _cpp_backup_tokens (pfile, 1);\n+  if (padding)\n+    _cpp_push_token_context (pfile, NULL, padding, 1);\n \n   return NULL;\n }"}]}