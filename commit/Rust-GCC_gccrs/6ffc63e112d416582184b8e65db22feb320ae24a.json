{"sha": "6ffc63e112d416582184b8e65db22feb320ae24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZmYzYzZTExMmQ0MTY1ODIxODRiOGU2NWRiMjJmZWIzMjBhZTI0YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-23T20:27:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-23T20:27:32Z"}, "message": "dwarf2cfi: Allocate reg_saved_in_data in the heap.\n\n        * dwarf2cfi.c (regs_saved_in_regs): Allocate from heap, not gc.\n        Update all users to match.\n        (execute_dwarf2_frame): Free reg_saved_in_data.\n\nFrom-SVN: r176703", "tree": {"sha": "45d307c66bacd0b702a1a606d3d555dd7553d5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45d307c66bacd0b702a1a606d3d555dd7553d5f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ffc63e112d416582184b8e65db22feb320ae24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffc63e112d416582184b8e65db22feb320ae24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ffc63e112d416582184b8e65db22feb320ae24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ffc63e112d416582184b8e65db22feb320ae24a/comments", "author": null, "committer": null, "parents": [{"sha": "999646c1ee2b7e11c5beb86109fe660ca4d4235f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/999646c1ee2b7e11c5beb86109fe660ca4d4235f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/999646c1ee2b7e11c5beb86109fe660ca4d4235f"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "5b0c5837228eeca4794c711ef7afc03da120a4d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffc63e112d416582184b8e65db22feb320ae24a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffc63e112d416582184b8e65db22feb320ae24a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ffc63e112d416582184b8e65db22feb320ae24a", "patch": "@@ -1,3 +1,9 @@\n+2011-07-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarf2cfi.c (regs_saved_in_regs): Allocate from heap, not gc.\n+\tUpdate all users to match.\n+\t(execute_dwarf2_frame): Free reg_saved_in_data.\n+\n 2011-07-23  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2cfi.c (queued_reg_save): Reorder for packing.  Don't GTY."}, {"sha": "1d6413fb368546496b1bb0127f55a32abff94548", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ffc63e112d416582184b8e65db22feb320ae24a/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ffc63e112d416582184b8e65db22feb320ae24a/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=6ffc63e112d416582184b8e65db22feb320ae24a", "patch": "@@ -1109,13 +1109,13 @@ typedef struct GTY(()) reg_saved_in_data {\n } reg_saved_in_data;\n \n DEF_VEC_O (reg_saved_in_data);\n-DEF_VEC_ALLOC_O (reg_saved_in_data, gc);\n+DEF_VEC_ALLOC_O (reg_saved_in_data, heap);\n \n /* A set of registers saved in other registers.  This is implemented as\n    a flat array because it normally contains zero or 1 entry, depending\n    on the target.  IA-64 is the big spender here, using a maximum of\n    5 entries.  */\n-static GTY(()) VEC(reg_saved_in_data, gc) *regs_saved_in_regs;\n+static VEC(reg_saved_in_data, heap) *regs_saved_in_regs;\n \n static GTY(()) reg_saved_in_data *cie_return_save;\n \n@@ -1161,7 +1161,7 @@ record_reg_saved_in_reg (rtx dest, rtx src)\n   if (dest == NULL)\n     return;\n \n-  elt = VEC_safe_push(reg_saved_in_data, gc, regs_saved_in_regs, NULL);\n+  elt = VEC_safe_push(reg_saved_in_data, heap, regs_saved_in_regs, NULL);\n   elt->orig_reg = src;\n   elt->saved_in_reg = dest;\n }\n@@ -2699,6 +2699,9 @@ initial_return_save (rtx rtl)\n static unsigned int\n execute_dwarf2_frame (void)\n {\n+  gcc_checking_assert (queued_reg_saves == NULL);\n+  gcc_checking_assert (regs_saved_in_regs == NULL);\n+\n   /* The first time we're called, compute the incoming frame state.  */\n   if (cie_cfi_vec == NULL)\n     {\n@@ -2737,7 +2740,7 @@ execute_dwarf2_frame (void)\n \t      cie_return_save = ggc_alloc_reg_saved_in_data ();\n \t      *cie_return_save = *VEC_index (reg_saved_in_data,\n \t\t\t\t\t     regs_saved_in_regs, 0);\n-\t      regs_saved_in_regs = NULL;\n+\t      VEC_pop (reg_saved_in_data, regs_saved_in_regs);\n \t      break;\n \t    default:\n \t      gcc_unreachable ();\n@@ -2748,12 +2751,10 @@ execute_dwarf2_frame (void)\n     }\n \n   /* Set up state for generating call frame debug info.  */\n-  gcc_checking_assert (queued_reg_saves == NULL);\n-  gcc_checking_assert (regs_saved_in_regs == NULL);\n-\n   cur_row = copy_cfi_row (cie_cfi_row);\n   if (cie_return_save)\n-    VEC_safe_push (reg_saved_in_data, gc, regs_saved_in_regs, cie_return_save);\n+    VEC_safe_push (reg_saved_in_data, heap,\n+\t\t   regs_saved_in_regs, cie_return_save);\n \n   cfa_store = cur_row->cfa;\n   args_size = 0;\n@@ -2770,7 +2771,7 @@ execute_dwarf2_frame (void)\n   /* Reset all function-specific information, particularly for GC.  */\n   XDELETEVEC (barrier_args_size);\n   barrier_args_size = NULL;\n-  regs_saved_in_regs = NULL;\n+  VEC_free (reg_saved_in_data, heap, regs_saved_in_regs);\n   VEC_free (queued_reg_save, heap, queued_reg_saves);\n \n   free_cfi_row (cur_row);"}]}