{"sha": "aad8e7a914fb239c7622e45838e9e85bdcc4bc59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkOGU3YTkxNGZiMjM5Yzc2MjJlNDU4MzhlOWU4NWJkY2M0YmM1OQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-09-06T23:26:48Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2001-09-06T23:26:48Z"}, "message": "Add support for checking call return percentages for gcov -b output.\n\nFrom-SVN: r45453", "tree": {"sha": "7435c4f38f3127401e260d0ccad23dc3775eb0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7435c4f38f3127401e260d0ccad23dc3775eb0a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aad8e7a914fb239c7622e45838e9e85bdcc4bc59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad8e7a914fb239c7622e45838e9e85bdcc4bc59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad8e7a914fb239c7622e45838e9e85bdcc4bc59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad8e7a914fb239c7622e45838e9e85bdcc4bc59/comments", "author": null, "committer": null, "parents": [{"sha": "a30705746d0cd348c73ffc21b87c02b100f29b67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30705746d0cd348c73ffc21b87c02b100f29b67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30705746d0cd348c73ffc21b87c02b100f29b67"}], "stats": {"total": 104, "additions": 95, "deletions": 9}, "files": [{"sha": "117387f7cb4f247aacaf5b51366695862afc1b27", "filename": "gcc/testsuite/gcc.misc-tests/gcov.exp", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aad8e7a914fb239c7622e45838e9e85bdcc4bc59/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aad8e7a914fb239c7622e45838e9e85bdcc4bc59/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fgcov.exp?ref=aad8e7a914fb239c7622e45838e9e85bdcc4bc59", "patch": "@@ -106,7 +106,7 @@ proc verify-branches { testcase file } {\n \t\t# All percentages in the current list should have been seen.\n \t\tif {[llength $shouldbe] != 0} {\n \t\t    if { $failed == 0 } {\n-\t\t        set bmessage \"expected percentages not found: $shouldbe\"\n+\t\t        set bmessage \"expected branch percentages not found: $shouldbe\"\n \t\t    }\n \t\t    incr failed\n \t\t    set shouldbe \"\"\n@@ -148,7 +148,7 @@ proc verify-branches { testcase file } {\n \t\t# All percentages in the list should have been seen by now.\n \t\tif {[llength $shouldbe] != 0} {\n \t\t    if { $failed == 0 } {\n-\t\t\tset bmessage \"expected percentages not found: $shouldbe\"\n+\t\t\tset bmessage \"expected branch percentages not found: $shouldbe\"\n \t\t    }\n \t\t    incr failed\n \t\t}\n@@ -159,14 +159,93 @@ proc verify-branches { testcase file } {\n     # All percentages in the list should have been seen.\n     if {[llength $shouldbe] != 0} {\n \tif { $failed == 0 } {\n-\t    set bmessage \"expected percentages not found: $shouldbe\"\n+\t    set bmessage \"expected branch percentages not found: $shouldbe\"\n \t}\n \tincr failed\n     }\n     close $fd\n     return [list $failed $bmessage]\n }\n \n+#\n+# verify-calls -- check that call return percentages are as expected\n+#\n+# TESTCASE is the name of the test.\n+# FILE is the name of the gcov output file.\n+#\n+# Checks are based on comments in the source file.  This means to look for\n+# call return percentages 50, 20, 33:\n+#     /* returns(50, 20, 33) */\n+# This means that all specified percentages should have been seen by now:\n+#     /* returns(end) */\n+# All specified percentages must also be seen by the next returns(n) or\n+# by the end of the file.\n+#\n+# Each check depends on the compiler having generated the expected\n+# call instructions.  Don't check for calls that are inserted by the\n+# compiler or that might be inlined.\n+#\n+proc verify-calls { testcase file } {\n+    global cmessage\n+    global subdir\n+    set failed 0\n+    set cmessage \"\"\n+    set shouldbe \"\"\n+    set fd [open $file r]\n+    while { [gets $fd line] >= 0 } {\n+\tif [regexp \"returns\" $line] {\n+\t    verbose \"Processing returns line: $line\" 3\n+\t    if [regexp \"returns\\\\((\\[0-9 \\]+)\\\\)\" \"$line\" all new_shouldbe] {\n+\t\t# All percentages in the current list should have been seen.\n+\t\tif {[llength $shouldbe] != 0} {\n+\t\t    if { $failed == 0 } {\n+\t\t        set cmessage \"expected return percentages not found: $shouldbe\"\n+\t\t    }\n+\t\t    incr failed\n+\t\t    set shouldbe \"\"\n+\t\t}\n+\t        # Record the percentages to check for.\n+\t\tset shouldbe $new_shouldbe\n+\t    } elseif [regexp \"call \\[0-9\\]+ returns = (-\\[0-9\\]+)%\" \"$line\" all returns] {\n+\t\t# Percentages should never be negative.\n+\t\tif { $failed == 0 } {\n+\t\t    set cmessage \"negative percentage: $returns\"\n+\t\t}\n+\t\tincr failed\n+\t    } elseif [regexp \"call \\[0-9\\]+ returns = (\\[0-9\\]+)%\" \"$line\" all returns] {\n+\t\t# For branches we check that percentages are not greater than\n+\t\t# 100 but call return percentages can be, as for setjmp(), so\n+\t\t# don't count that as an error.\n+\t\t#\n+\t\t# If this percentage is one to check for then remove it\n+\t\t# from the list.  It's normal to ignore some reports.\n+\t\tset i [lsearch $shouldbe $returns]\n+\t\tif {$i != -1} {\n+\t\t    set shouldbe [lreplace $shouldbe $i $i]\n+\t\t}\n+\t    } elseif [regexp \"returns\\\\(end\\\\)\" \"$line\"] {\n+\t\t# All percentages in the list should have been seen by now.\n+\t\tif {[llength $shouldbe] != 0} {\n+\t\t    if { $failed == 0 } {\n+\t\t\tset cmessage \"expected return percentages not found: $shouldbe\"\n+\t\t    }\n+\t\t    incr failed\n+\t\t}\n+\t\tset shouldbe \"\"\n+\t    }\n+\t}\n+    }\n+    # All percentages in the list should have been seen.\n+    if {[llength $shouldbe] != 0} {\n+\tif { $failed == 0 } {\n+\t    set cmessage \"expected return percentages not found: $shouldbe\"\n+\t}\n+\tincr failed\n+    }\n+    close $fd\n+    return [list $failed $cmessage]\n+}\n+\n # Called by dg-final to run gcov and analyze the results.\n #\n # ARGS is the options to pass to gcov followed by the name of the\n@@ -202,30 +281,37 @@ proc run-gcov { args } {\n     set lfailed [lindex $loutput 0]\n     set lmessage [lindex $loutput 1]\n \n-    # If we asked for branch information check that it is correct.\n+    # If we asked for branch and call information, check that it is correct.\n     if [regexp -- \"-b\" $args] {\n \tset boutput [verify-branches $testcase $testcase.gcov]\n \tset bfailed [lindex $boutput 0]\n \tset bmessage [lindex $boutput 1]\n+\tset coutput [verify-calls $testcase $testcase.gcov]\n+\tset cfailed [lindex $coutput 0]\n+\tset cmessage [lindex $coutput 1]\n     } else {\n \tset bfailed 0\n \tset bmessage \"\"\n+\tset cfailed 0\n+\tset cmessage \"\"\n     }\n \n     clean-gcov $testcase\n \n     # Report whether the gcov test passed or failed.  If there were\n     # multiple failures then the message is a summary.\n-    set tfailed [expr $lfailed + $bfailed]\n+    set tfailed [expr $lfailed + [expr $bfailed + $cfailed]]\n     if { $tfailed > 0 } {\n \tif { $tfailed == 1 } {\n-\t    set vmessage \"$lmessage$bmessage\"\n-\t} elseif { $bfailed == 0 } {\n+\t    set vmessage \"$lmessage$bmessage$cmessage\"\n+\t} elseif { $bfailed == 0 && $cfailed == 0 } {\n \t    set vmessage \"$lfailed failures in line counts\"\n-\t} elseif { $lfailed == 0 } {\n+\t} elseif { $lfailed == 0 && $cfailed == 0 } {\n \t    set vmessage \"$bfailed failures in branch percentages\"\n+\t} elseif { $lfailed == 0 && $bfailed == 0 } {\n+\t    set vmessage \"$cfailed failures in return percentages\"\n \t} else {\n-\t    set vmessage \"$lfailed failures in line counts, $bfailed in branch percentages\"\n+\t    set vmessage \"$lfailed failures in line counts, $bfailed in branch percentages, $cfailed in return percentages\"\n \t}\n \tfail \"$subdir/$testcase gcov: $vmessage\"\n     } else {"}]}