{"sha": "bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkYjExMDYyNTVhNDU2Yjc3YmNkOGJhNTZlM2YxYTliMjc4NzY4YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2000-04-12T07:22:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2000-04-12T07:22:32Z"}, "message": "objc-act.c: Include ggc.h.\n\n\t* objc/objc-act.c: Include ggc.h.\n\t(objc_tree_index, objc_global_trees): Convert most of the\n\tstatic tree variables into a static array with previous names\n\tas defines.\n\t(objc_ellipsis_node): New variable.\n\t(lang_init): Call objc_act_parse_init and c_parse_init.\n\tCreate objc_ellipsis_node.\n\t(build_selector_translation_table): Use objc_ellipsis_node instead\n\tof (tree)1.\n\t(hack_method_prototype): Likewise.\n\t(get_arg_type_list): Likewise.\n\t(start_method_def): Likewise.\n\t(continue_method_def): Likewise.\n\t(gen_method_decl): Likewise.\n\t(ggc_mark_imp_list): New function.\n\t(ggc_mark_hash_table): New function.\n\t(objc_act_parse_init): New function.\n\t* objc/objc-act.h (objc_ellipsis_node): Add extern variable.\n\t* c-parse.in (c_parse_init): For objc add roots of objc specific\n\tlocal tree variables.\n\t* objc/objc-parse.y: Rebuilt.\n\t* objc/objc-parse.c: Rebuilt.\n\t(opt_parm_list): Use objc_ellipsis_node instead of (tree)1.\n\n\t* Object.m (strlen): Provide prototype on all 64bit platforms,\n\tnot only alpha.\n\t* sarray.c (memcpy): Likewise.\n\t* encoding.c (objc_layout_finish_structure): Don't use\n\tROUND_TYPE_ALIGN on sparc.\n\nFrom-SVN: r33092", "tree": {"sha": "684ed6f94cfd06b71d423351cb97d7090ec8117c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/684ed6f94cfd06b71d423351cb97d7090ec8117c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8019e47f6e814a44026e11fc718688a81217a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8019e47f6e814a44026e11fc718688a81217a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8019e47f6e814a44026e11fc718688a81217a3f"}], "stats": {"total": 310, "additions": 254, "deletions": 56}, "files": [{"sha": "595d54aa99d7034583079dbad940f0e496322d69", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -1,3 +1,29 @@\n+2000-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* objc/objc-act.c: Include ggc.h.\n+\t(objc_tree_index, objc_global_trees): Convert most of the\n+\tstatic tree variables into a static array with previous names\n+\tas defines.\n+\t(objc_ellipsis_node): New variable.\n+\t(lang_init): Call objc_act_parse_init and c_parse_init.\n+\tCreate objc_ellipsis_node.\n+\t(build_selector_translation_table): Use objc_ellipsis_node instead\n+\tof (tree)1.\n+\t(hack_method_prototype): Likewise.\n+\t(get_arg_type_list): Likewise.\n+\t(start_method_def): Likewise.\n+\t(continue_method_def): Likewise.\n+\t(gen_method_decl): Likewise.\n+\t(ggc_mark_imp_list): New function.\n+\t(ggc_mark_hash_table): New function.\n+\t(objc_act_parse_init): New function.\n+\t* objc/objc-act.h (objc_ellipsis_node): Add extern variable.\n+\t* c-parse.in (c_parse_init): For objc add roots of objc specific\n+\tlocal tree variables.\n+\t* objc/objc-parse.y: Rebuilt.\n+\t* objc/objc-parse.c: Rebuilt.\n+\t(opt_parm_list): Use objc_ellipsis_node instead of (tree)1.\n+\n Wed Apr 12 01:00:44 EDT 2000  John Wehle  (john@feith.com)\n \n \t* cse.c (delete_trivially_dead_insns): Also delete insns"}, {"sha": "deea8e98378827a7dcb2eec7a8135132781555d2", "filename": "gcc/c-parse.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -266,6 +266,13 @@ c_parse_init ()\n   ggc_add_tree_root (&declspec_stack, 1);\n   ggc_add_tree_root (&current_declspecs, 1);\n   ggc_add_tree_root (&prefix_attributes, 1);\n+ifobjc\n+  ggc_add_tree_root (&objc_interface_context, 1);\n+  ggc_add_tree_root (&objc_implementation_context, 1);\n+  ggc_add_tree_root (&objc_method_context, 1);\n+  ggc_add_tree_root (&objc_ivar_chain, 1);\n+  ggc_add_tree_root (&objc_ivar_context, 1);\n+end ifobjc\n }\n \n %}\n@@ -2876,7 +2883,7 @@ optparmlist:\n \t| ',' ELLIPSIS\n \t\t{\n \t\t  /* oh what a kludge! */\n-\t\t  $$ = (tree)1;\n+\t\t  $$ = objc_ellipsis_node;\n \t\t}\n \t| ','\n \t\t{"}, {"sha": "4225837157335cdfd53c5580eb7aa23109d72555", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 196, "deletions": 50, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -51,6 +51,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"output.h\"\n #include \"toplev.h\"\n+#include \"ggc.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -134,12 +135,6 @@ static struct obstack util_obstack;\n    so we can free the whole contents.  */\n char *util_firstobj;\n \n-/* List of classes with list of their static instances.  */\n-static tree objc_static_instances = NULL_TREE;\n-\n-/* The declaration of the array administrating the static instances.  */\n-static tree static_instances_decl = NULL_TREE;\n-\n /* for encode_method_def */\n #include \"rtl.h\"\n #include \"c-parse.h\"\n@@ -345,6 +340,7 @@ static void generate_classref_translation_entry\tPARAMS ((tree));\n static void handle_class_ref\t\t\tPARAMS ((tree));\n static void generate_struct_by_value_array\tPARAMS ((void))\n      ATTRIBUTE_NORETURN;\n+static void objc_act_parse_init\t\t\tPARAMS ((void));\n \n /*** Private Interface (data) ***/\n \n@@ -388,16 +384,102 @@ static const char *TAG_EXECCLASS;\n #define TYPED_OBJECT(type) \\\n        (TREE_CODE (type) == RECORD_TYPE && TREE_STATIC_TEMPLATE (type))\n \n+tree objc_ellipsis_node;\n+\n+enum objc_tree_index\n+{\n+    OCTI_STATIC_NST,\n+    OCTI_STATIC_NST_DECL,\n+    OCTI_SELF_ID,\n+    OCTI_UCMD_ID,\n+    OCTI_UNUSED_LIST,\n+    OCTI_SELF_DECL,\n+    OCTI_UMSG_DECL,\n+    OCTI_UMSG_SUPER_DECL,\n+    OCTI_GET_CLASS_DECL,\n+    OCTI_GET_MCLASS_DECL,\n+    OCTI_SUPER_TYPE,\n+    OCTI_SEL_TYPE,\n+    OCTI_ID_TYPE,\n+    OCTI_CLS_TYPE,\n+    OCTI_NST_TYPE,\n+    OCTI_PROTO_TYPE,\n+\n+    OCTI_CLS_CHAIN,\n+    OCTI_ALIAS_CHAIN,\n+    OCTI_INTF_CHAIN,\n+    OCTI_PROTO_CHAIN,\n+    OCTI_CLS_REF_CHAIN,\n+    OCTI_SEL_REF_CHAIN,\n+    OCTI_CLS_NAMES_CHAIN,\n+    OCTI_METH_VAR_NAMES_CHAIN,\n+    OCTI_METH_VAR_TYPES_CHAIN,\n+\n+    OCTI_SYMBOLS_DECL,\n+    OCTI_NST_VAR_DECL,\n+    OCTI_CLS_VAR_DECL,\n+    OCTI_NST_METH_DECL,\n+    OCTI_CLS_METH_DECL,\n+    OCTI_CLS_DECL,\n+    OCTI_MCLS_DECL,\n+    OCTI_SEL_TABLE_DECL,\n+    OCTI_MODULES_DECL,\n+    OCTI_STRG_DECL,\n+\n+    OCTI_IMPL_CTX,\n+    OCTI_IMPL_TEMPL,\n+\n+    OCTI_CLS_TEMPL,\n+    OCTI_CAT_TEMPL,\n+    OCTI_UPRIV_REC,\n+    OCTI_PROTO_TEMPL,\n+    OCTI_SEL_TEMPL,\n+    OCTI_UCLS_SUPER_REF,\n+    OCTI_UUCLS_SUPER_REF,\n+    OCTI_METH_TEMPL,\n+    OCTI_IVAR_TEMPL,\n+    OCTI_SYMTAB_TEMPL,\n+    OCTI_MODULE_TEMPL,\n+    OCTI_SUPER_TEMPL,\n+    OCTI_OBJ_REF,\n+    OCTI_OBJ_ID,\n+    OCTI_CLS_ID,\n+    OCTI_ID_ID,\n+    OCTI_CNST_STR_ID,\n+    OCTI_CNST_STR_TYPE,\n+    OCTI_SUPER_DECL,\n+    OCTI_METH_CTX,\n+\n+    OCTI_MAX\n+};\n+\n+static tree objc_global_trees[OCTI_MAX];\n+\n+/* List of classes with list of their static instances.  */\n+#define objc_static_instances\tobjc_global_trees[OCTI_STATIC_NST]\n+\n+/* The declaration of the array administrating the static instances.  */\n+#define static_instances_decl\tobjc_global_trees[OCTI_STATIC_NST_DECL]\n+\n /* Some commonly used instances of \"identifier_node\".  */\n \n-static tree self_id, ucmd_id;\n-static tree unused_list;\n+#define self_id\t\t\tobjc_global_trees[OCTI_SELF_ID]\n+#define ucmd_id\t\t\tobjc_global_trees[OCTI_UCMD_ID]\n+#define unused_list\t\tobjc_global_trees[OCTI_UNUSED_LIST]\n \n-static tree self_decl, umsg_decl, umsg_super_decl;\n-static tree objc_get_class_decl, objc_get_meta_class_decl;\n+#define self_decl\t\tobjc_global_trees[OCTI_SELF_DECL]\n+#define umsg_decl\t\tobjc_global_trees[OCTI_UMSG_DECL]\n+#define umsg_super_decl\t\tobjc_global_trees[OCTI_UMSG_SUPER_DECL]\n+#define objc_get_class_decl\tobjc_global_trees[OCTI_GET_CLASS_DECL]\n+#define objc_get_meta_class_decl\t\t\t\\\n+\t\t\t\tobjc_global_trees[OCTI_GET_MCLASS_DECL]\n \n-static tree super_type, selector_type, id_type, objc_class_type;\n-static tree instance_type, protocol_type;\n+#define super_type\t\tobjc_global_trees[OCTI_SUPER_TYPE]\n+#define selector_type\t\tobjc_global_trees[OCTI_SEL_TYPE]\n+#define id_type\t\t\tobjc_global_trees[OCTI_ID_TYPE]\n+#define objc_class_type\t\tobjc_global_trees[OCTI_CLS_TYPE]\n+#define instance_type\t\tobjc_global_trees[OCTI_NST_TYPE]\n+#define protocol_type\t\tobjc_global_trees[OCTI_PROTO_TYPE]\n \n /* Type checking macros.  */\n \n@@ -408,22 +490,22 @@ static tree instance_type, protocol_type;\n #define IS_SUPER(TYPE) \\\n   (super_type && TYPE_MAIN_VARIANT (TYPE) == TYPE_MAIN_VARIANT (super_type))\n \n-static tree class_chain = NULL_TREE;\n-static tree alias_chain = NULL_TREE;\n-static tree interface_chain = NULL_TREE;\n-static tree protocol_chain = NULL_TREE;\n+#define class_chain\t\tobjc_global_trees[OCTI_CLS_CHAIN]\n+#define alias_chain\t\tobjc_global_trees[OCTI_ALIAS_CHAIN]\n+#define interface_chain\t\tobjc_global_trees[OCTI_INTF_CHAIN]\n+#define protocol_chain\t\tobjc_global_trees[OCTI_PROTO_CHAIN]\n \n /* Chains to manage selectors that are referenced and defined in the\n    module.  */\n \n-static tree cls_ref_chain = NULL_TREE;\t/* Classes referenced.  */\n-static tree sel_ref_chain = NULL_TREE;\t/* Selectors referenced.  */\n+#define cls_ref_chain\t\tobjc_global_trees[OCTI_CLS_REF_CHAIN]\t/* Classes referenced.  */\n+#define sel_ref_chain\t\tobjc_global_trees[OCTI_SEL_REF_CHAIN]\t/* Selectors referenced.  */\n \n /* Chains to manage uniquing of strings.  */\n \n-static tree class_names_chain = NULL_TREE;\n-static tree meth_var_names_chain = NULL_TREE;\n-static tree meth_var_types_chain = NULL_TREE;\n+#define class_names_chain\tobjc_global_trees[OCTI_CLS_NAMES_CHAIN]\n+#define meth_var_names_chain\tobjc_global_trees[OCTI_METH_VAR_NAMES_CHAIN]\n+#define meth_var_types_chain\tobjc_global_trees[OCTI_METH_VAR_TYPES_CHAIN]\n \n /* Hash tables to manage the global pool of method prototypes.  */\n \n@@ -432,21 +514,24 @@ static hash *cls_method_hash_list = 0;\n \n /* Backend data declarations.  */\n \n-static tree UOBJC_SYMBOLS_decl;\n-static tree UOBJC_INSTANCE_VARIABLES_decl, UOBJC_CLASS_VARIABLES_decl;\n-static tree UOBJC_INSTANCE_METHODS_decl, UOBJC_CLASS_METHODS_decl;\n-static tree UOBJC_CLASS_decl, UOBJC_METACLASS_decl;\n-static tree UOBJC_SELECTOR_TABLE_decl;\n-static tree UOBJC_MODULES_decl;\n-static tree UOBJC_STRINGS_decl;\n+#define UOBJC_SYMBOLS_decl\t\tobjc_global_trees[OCTI_SYMBOLS_DECL]\n+#define UOBJC_INSTANCE_VARIABLES_decl\tobjc_global_trees[OCTI_NST_VAR_DECL]\n+#define UOBJC_CLASS_VARIABLES_decl\tobjc_global_trees[OCTI_CLS_VAR_DECL]\n+#define UOBJC_INSTANCE_METHODS_decl\tobjc_global_trees[OCTI_NST_METH_DECL]\n+#define UOBJC_CLASS_METHODS_decl\tobjc_global_trees[OCTI_CLS_METH_DECL]\n+#define UOBJC_CLASS_decl\t\tobjc_global_trees[OCTI_CLS_DECL]\n+#define UOBJC_METACLASS_decl\t\tobjc_global_trees[OCTI_MCLS_DECL]\n+#define UOBJC_SELECTOR_TABLE_decl\tobjc_global_trees[OCTI_SEL_TABLE_DECL]\n+#define UOBJC_MODULES_decl\t\tobjc_global_trees[OCTI_MODULES_DECL]\n+#define UOBJC_STRINGS_decl\t\tobjc_global_trees[OCTI_STRG_DECL]\n \n /* The following are used when compiling a class implementation.\n    implementation_template will normally be an interface, however if\n    none exists this will be equal to implementation_context...it is\n    set in start_class.  */\n \n-static tree implementation_context = NULL_TREE;\n-static tree implementation_template = NULL_TREE;\n+#define implementation_context\t\tobjc_global_trees[OCTI_IMPL_CTX]\n+#define implementation_template\t\tobjc_global_trees[OCTI_IMPL_TEMPL]\n \n struct imp_entry\n {\n@@ -463,20 +548,29 @@ static struct imp_entry *imp_list = 0;\n static int imp_count = 0;\t/* `@implementation' */\n static int cat_count = 0;\t/* `@category' */\n \n-static tree objc_class_template, objc_category_template, uprivate_record;\n-static tree objc_protocol_template, objc_selector_template;\n-static tree ucls_super_ref, uucls_super_ref;\n-\n-static tree objc_method_template, objc_ivar_template;\n-static tree objc_symtab_template, objc_module_template;\n-static tree objc_super_template, objc_object_reference;\n-\n-static tree objc_object_id, objc_class_id, objc_id_id;\n-static tree constant_string_id;\n-static tree constant_string_type;\n-static tree UOBJC_SUPER_decl;\n-\n-static tree method_context = NULL_TREE;\n+#define objc_class_template\tobjc_global_trees[OCTI_CLS_TEMPL]\n+#define objc_category_template\tobjc_global_trees[OCTI_CAT_TEMPL]\n+#define uprivate_record\t\tobjc_global_trees[OCTI_UPRIV_REC]\n+#define objc_protocol_template\tobjc_global_trees[OCTI_PROTO_TEMPL]\n+#define objc_selector_template\tobjc_global_trees[OCTI_SEL_TEMPL]\n+#define ucls_super_ref\t\tobjc_global_trees[OCTI_UCLS_SUPER_REF]\n+#define uucls_super_ref\t\tobjc_global_trees[OCTI_UUCLS_SUPER_REF]\n+\n+#define objc_method_template\tobjc_global_trees[OCTI_METH_TEMPL]\n+#define objc_ivar_template\tobjc_global_trees[OCTI_IVAR_TEMPL]\n+#define objc_symtab_template\tobjc_global_trees[OCTI_SYMTAB_TEMPL]\n+#define objc_module_template\tobjc_global_trees[OCTI_MODULE_TEMPL]\n+#define objc_super_template\tobjc_global_trees[OCTI_SUPER_TEMPL]\n+#define objc_object_reference\tobjc_global_trees[OCTI_OBJ_REF]\n+\n+#define objc_object_id\t\tobjc_global_trees[OCTI_OBJ_ID]\n+#define objc_class_id\t\tobjc_global_trees[OCTI_CLS_ID]\n+#define objc_id_id\t\tobjc_global_trees[OCTI_ID_ID]\n+#define constant_string_id\tobjc_global_trees[OCTI_CNST_STR_ID]\n+#define constant_string_type\tobjc_global_trees[OCTI_CNST_STR_TYPE]\n+#define UOBJC_SUPER_decl\tobjc_global_trees[OCTI_SUPER_DECL]\n+\n+#define method_context\t\tobjc_global_trees[OCTI_METH_CTX]\n static int  method_slot = 0;\t/* Used by start_method_def, */\n \n #define BUFSIZE\t\t1024\n@@ -656,11 +750,16 @@ lang_init ()\n       flag_typed_selectors = 1;\n     }\n \n+  objc_ellipsis_node = make_node (ERROR_MARK);\n+\n   if (doing_objc_thang)\n     init_objc ();\n \n   if (print_struct_values)\n     generate_struct_by_value_array ();\n+\n+  objc_act_parse_init ();\n+  c_parse_init ();\n }\n \n static void\n@@ -2109,7 +2208,7 @@ build_selector_translation_table ()\n       TREE_STATIC (UOBJC_SELECTOR_TABLE_decl) = 1;\n       /* NULL terminate the list and fix the decl for output.  */\n       initlist = tree_cons (NULL_TREE, build_int_2 (0, 0), initlist);\n-      DECL_INITIAL (UOBJC_SELECTOR_TABLE_decl) = (tree) 1;\n+      DECL_INITIAL (UOBJC_SELECTOR_TABLE_decl) = objc_ellipsis_node;\n       initlist = build_constructor (TREE_TYPE (UOBJC_SELECTOR_TABLE_decl),\n \t\t\t\t    nreverse (initlist));\n       finish_decl (UOBJC_SELECTOR_TABLE_decl, initlist, NULL_TREE);\n@@ -3013,7 +3112,7 @@ hack_method_prototype (nst_methods, tmp_decl)\n   start_method_def (nst_methods);\n   TREE_SET_CODE (nst_methods, INSTANCE_METHOD_DECL);\n \n-  if (METHOD_ADD_ARGS (nst_methods) == (tree) 1)\n+  if (METHOD_ADD_ARGS (nst_methods) == objc_ellipsis_node)\n     parms = get_parm_info (0); /* we have a `, ...' */\n   else\n     parms = get_parm_info (1); /* place a `void_at_end' */\n@@ -4751,7 +4850,7 @@ get_arg_type_list (meth, context, superflag)\n       chainon (arglist, build_tree_list (NULL_TREE, TREE_TYPE (arg_decl)));\n     }\n \n-  if (METHOD_ADD_ARGS (meth) == (tree)1)\n+  if (METHOD_ADD_ARGS (meth) == objc_ellipsis_node)\n     /* We have a `, ...' immediately following the selector,\n        finalize the arglist...simulate get_parm_info (0).  */\n     ;\n@@ -6971,7 +7070,8 @@ start_method_def (method)\n       while (arglist);\n     }\n \n-  if (METHOD_ADD_ARGS (method) > (tree)1)\n+  if (METHOD_ADD_ARGS (method) != NULL_TREE\n+      && METHOD_ADD_ARGS (method) != objc_ellipsis_node)\n     {\n       /* We have a variable length selector - in \"prototype\" format.  */\n       tree akey = TREE_PURPOSE (METHOD_ADD_ARGS (method));\n@@ -7151,7 +7251,7 @@ continue_method_def ()\n {\n   tree parmlist;\n \n-  if (METHOD_ADD_ARGS (method_context) == (tree)1)\n+  if (METHOD_ADD_ARGS (method_context) == objc_ellipsis_node)\n     /* We have a `, ...' immediately following the selector.  */\n     parmlist = get_parm_info (0);\n   else\n@@ -7946,7 +8046,7 @@ gen_method_decl (method, buf)\n         }\n       while (chain);\n \n-      if (METHOD_ADD_ARGS (method) == (tree)1)\n+      if (METHOD_ADD_ARGS (method) == objc_ellipsis_node)\n         strcat (buf, \", ...\");\n       else if (METHOD_ADD_ARGS (method))\n         {\n@@ -8471,3 +8571,49 @@ void\n print_lang_statistics ()\n {\n }\n+\n+static void\n+ggc_mark_imp_list (arg)\n+    void *arg;\n+{\n+  struct imp_entry *impent;\n+\n+  for (impent = *(struct imp_entry **)arg; impent; impent = impent->next)\n+    {\n+      ggc_mark_tree (impent->imp_context);\n+      ggc_mark_tree (impent->imp_template);\n+      ggc_mark_tree (impent->class_decl);\n+      ggc_mark_tree (impent->meta_decl);\n+    }\n+}\n+\n+static void\n+ggc_mark_hash_table (arg)\n+    void *arg;\n+{\n+  hash *hash_table = *(hash **)arg;\n+  hash hst;\n+  attr list;\n+  int i;\n+\n+  if (hash_table == NULL)\n+    return;\n+  for (i = 0; i < SIZEHASHTABLE; i++)\n+    for (hst = hash_table [i]; hst; hst = hst->next)\n+      {\n+\tggc_mark_tree (hst->key);\n+\tfor (list = hst->list; list; list = list->next)\n+\t  ggc_mark_tree (list->value);\n+      }\n+}\n+\n+/* Add GC roots for variables local to this file.  */\n+static void\n+objc_act_parse_init ()\n+{\n+  ggc_add_tree_root (&objc_ellipsis_node, 1);\n+  ggc_add_tree_root (objc_global_trees, OCTI_MAX);\n+  ggc_add_root (&imp_list, 1, sizeof imp_list, ggc_mark_imp_list);\n+  ggc_add_root (&nst_method_hash_list, 1, sizeof nst_method_hash_list, ggc_mark_hash_table);\n+  ggc_add_root (&cls_method_hash_list, 1, sizeof cls_method_hash_list, ggc_mark_hash_table);\n+}"}, {"sha": "05f7ad656f3918652276495009a38a478b5c3a97", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -55,6 +55,7 @@ tree build_objc_string_object\t\t\tPARAMS ((tree));\n \n extern tree objc_ivar_chain;\n extern tree objc_method_context;\n+extern tree objc_ellipsis_node;\n \n void objc_declare_alias\t\t\t\tPARAMS ((tree, tree));\n void objc_declare_class\t\t\t\tPARAMS ((tree));"}, {"sha": "445ba74459d41924b3050d7ad00a789883887ef2", "filename": "gcc/objc/objc-parse.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.c?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -160,6 +160,11 @@ c_parse_init ()\n   ggc_add_tree_root (&declspec_stack, 1);\n   ggc_add_tree_root (&current_declspecs, 1);\n   ggc_add_tree_root (&prefix_attributes, 1);\n+  ggc_add_tree_root (&objc_interface_context, 1);\n+  ggc_add_tree_root (&objc_implementation_context, 1);\n+  ggc_add_tree_root (&objc_method_context, 1);\n+  ggc_add_tree_root (&objc_ivar_chain, 1);\n+  ggc_add_tree_root (&objc_ivar_context, 1);\n }\n \n #include <stdio.h>\n@@ -4881,7 +4886,7 @@ case 515:\n #line 2809 \"objc-parse.y\"\n {\n \t\t  /* oh what a kludge! */\n-\t\t  yyval.ttype = (tree)1;\n+\t\t  yyval.ttype = objc_ellipsis_node;\n \t\t;\n     break;}\n case 516:"}, {"sha": "1a452955c81f202b99d3baed10a08090a8ce9a77", "filename": "gcc/objc/objc-parse.y", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-parse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/gcc%2Fobjc%2Fobjc-parse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-parse.y?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -251,6 +251,11 @@ c_parse_init ()\n   ggc_add_tree_root (&declspec_stack, 1);\n   ggc_add_tree_root (&current_declspecs, 1);\n   ggc_add_tree_root (&prefix_attributes, 1);\n+  ggc_add_tree_root (&objc_interface_context, 1);\n+  ggc_add_tree_root (&objc_implementation_context, 1);\n+  ggc_add_tree_root (&objc_method_context, 1);\n+  ggc_add_tree_root (&objc_ivar_chain, 1);\n+  ggc_add_tree_root (&objc_ivar_context, 1);\n }\n \n %}\n@@ -2808,7 +2813,7 @@ optparmlist:\n \t| ',' ELLIPSIS\n \t\t{\n \t\t  /* oh what a kludge! */\n-\t\t  $$ = (tree)1;\n+\t\t  $$ = objc_ellipsis_node;\n \t\t}\n \t| ','\n \t\t{"}, {"sha": "abab0b9b409b4b13f90367b506f1a63cf1d10685", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -1,3 +1,11 @@\n+2000-04-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* Object.m (strlen): Provide prototype on all 64bit platforms,\n+\tnot only alpha.\n+\t* sarray.c (memcpy): Likewise.\n+\t* encoding.c (objc_layout_finish_structure): Don't use\n+\tROUND_TYPE_ALIGN on sparc.\n+\n 2000-03-29  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* objc/Protocol.h, objc/objc-list.h: Change #endif labels to"}, {"sha": "59851c14fb166c90fb7e5f20ce2022c111545d6b", "filename": "libobjc/Object.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2FObject.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2FObject.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FObject.m?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -320,7 +320,7 @@ - (Class)transmuteClassTo:(Class)aClassObject\n                      object_get_class_name(self), sel_get_name(aSel)];\n }\n \n-#ifdef __alpha__\n+#if defined(__alpha__) || (defined(__sparc__) && (defined(__sparcv9) || defined(__arch64__))) || (defined(__ia64__) && defined(__LP64__))\n extern size_t strlen(const char*);\n #endif\n "}, {"sha": "dde009cea383007c02d11d13f6fea453b4798527", "filename": "libobjc/encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2Fencoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2Fencoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fencoding.c?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -878,7 +878,7 @@ void objc_layout_finish_structure (struct objc_struct_layout *layout,\n          in the record type.  Round it up to a multiple of the record's\n          alignment. */\n \n-#ifdef ROUND_TYPE_ALIGN\n+#if defined(ROUND_TYPE_ALIGN) && !defined(__sparc__)\n       layout->record_align = ROUND_TYPE_ALIGN (layout->original_type,\n                                                1,\n                                                layout->record_align);"}, {"sha": "a71432ea59fab211ab0f32d27bd3fe9fd623ee1b", "filename": "libobjc/sarray.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2Fsarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcdb1106255a456b77bcd8ba56e3f1a9b278768a/libobjc%2Fsarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsarray.c?ref=bcdb1106255a456b77bcd8ba56e3f1a9b278768a", "patch": "@@ -44,7 +44,7 @@ const char* __objc_sparse2_id = \"2 level sparse indices\";\n const char* __objc_sparse3_id = \"3 level sparse indices\";\n #endif\n \n-#ifdef __alpha__\n+#if defined(__alpha__) || (defined(__sparc__) && (defined(__sparcv9) || defined(__arch64__))) || (defined(__ia64__) && defined(__LP64__))\n const void *memcpy (void*, const void*, size_t);\n #endif\n "}]}