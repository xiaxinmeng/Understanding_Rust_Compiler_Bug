{"sha": "18636ada462f21c115b8faeeef06d7ad621c0604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2MzZhZGE0NjJmMjFjMTE1YjhmYWVlZWYwNmQ3YWQ2MjFjMDYwNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-05-11T14:52:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2003-05-11T14:52:29Z"}, "message": "Missed from previous commit.\n\nFrom-SVN: r66690", "tree": {"sha": "8c98f652549fd58b79f5db9c5551ae0235af9cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c98f652549fd58b79f5db9c5551ae0235af9cca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18636ada462f21c115b8faeeef06d7ad621c0604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18636ada462f21c115b8faeeef06d7ad621c0604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18636ada462f21c115b8faeeef06d7ad621c0604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18636ada462f21c115b8faeeef06d7ad621c0604/comments", "author": null, "committer": null, "parents": [{"sha": "82244e3e9ceab8dbd929ce722a69f47e0ab4ba30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82244e3e9ceab8dbd929ce722a69f47e0ab4ba30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82244e3e9ceab8dbd929ce722a69f47e0ab4ba30"}], "stats": {"total": 213, "additions": 0, "deletions": 213}, "files": [{"sha": "5f50f91c550f884906c9d06758b7a23bf59fa3b3", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-asm-1.c", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82244e3e9ceab8dbd929ce722a69f47e0ab4ba30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82244e3e9ceab8dbd929ce722a69f47e0ab4ba30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-1.c?ref=82244e3e9ceab8dbd929ce722a69f47e0ab4ba30", "patch": "@@ -1,82 +0,0 @@\n-/* Copyright (C) 2000, 2003  Free Software Foundation.\n-\n-   Ensure all expected transformations of builtin strstr occur and\n-   perform correctly in presence of redirect.  */\n-\n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern char *strstr (const char *, const char *)\n-  __asm (\"my_strstr\");\n-extern char *strchr (const char *, int);\n-extern int strcmp (const char *, const char *);\n-extern int strncmp (const char *, const char *, size_t);\n-\n-const char *p = \"rld\", *q = \"hello world\";\n-\n-int\n-main (void)\n-{\n-  const char *const foo = \"hello world\";\n-  \n-  if (strstr (foo, \"\") != foo)\n-    abort ();\n-  if (strstr (foo + 4, \"\") != foo + 4)\n-    abort ();\n-  if (strstr (foo, \"h\") != foo)\n-    abort ();\n-  if (strstr (foo, \"w\") != foo + 6)\n-    abort ();\n-  if (strstr (foo + 6, \"o\") != foo + 7)\n-    abort ();\n-  if (strstr (foo + 1, \"world\") != foo + 6)\n-    abort ();\n-  if (strstr (foo + 2, p) != foo + 8)\n-    abort ();\n-  if (strstr (q, \"\") != q)\n-    abort ();\n-  if (strstr (q + 1, \"o\") != q + 4)\n-    abort ();\n-\n-  /* Test at least one instance of the __builtin_ style.  We do this\n-     to ensure that it works and that the prototype is correct.  */\n-  if (__builtin_strstr (foo + 1, \"world\") != foo + 6)\n-    abort ();\n-  \n-  return 0;\n-}\n-\n-/* There should be no calls to real strstr.  */\n-static char *real_strstr (const char *, const char *)\n-  __asm (\"strstr\");\n-\n-__attribute__ ((noinline))\n-static char *\n-real_strstr (const char *s1, const char *s2)\n-{\n-  abort ();\n-}\n-\n-static char *\n-strstr (const char *s1, const char *s2)\n-  __asm (\"my_strstr\");\n-\n-__attribute__ ((noinline))\n-static char *\n-strstr (const char *s1, const char *s2)\n-{\n-  size_t len = strlen (s2);\n-\n-#ifdef __OPTIMIZE__\n-  /* If optimizing, we should be called only in the\n-     strstr (foo + 2, p) case above.  All other cases should\n-     be optimized.  */\n-  if (s2 != p || strcmp (s1, \"hello world\" + 2) != 0)\n-    abort ();\n-#endif\n-  if (len == 0)\n-    return (char *) s1;\n-  for (s1 = strchr (s1, *s2); s1; s1 = strchr (s1 + 1, *s2))\n-    if (strncmp (s1, s2, len) == 0)\n-      return (char *) s1;\n-  return (char *) 0;\n-}"}, {"sha": "9c629a2b8d1a2bb218bfb80ac0e218fd87f108b4", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-asm-2.c", "status": "removed", "additions": 0, "deletions": 131, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82244e3e9ceab8dbd929ce722a69f47e0ab4ba30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82244e3e9ceab8dbd929ce722a69f47e0ab4ba30/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-asm-2.c?ref=82244e3e9ceab8dbd929ce722a69f47e0ab4ba30", "patch": "@@ -1,131 +0,0 @@\n-/* Copyright (C) 2003 Free Software Foundation.\n-\n-   Test memcpy and memset in presence of redirect.  */\n-\n-typedef __SIZE_TYPE__ size_t;\n-extern void abort (void);\n-extern void *memcpy (void *, const void *, size_t)\n-  __asm (\"my_memcpy\");\n-extern void bcopy (const void *, void *, size_t)\n-  __asm (\"my_bcopy\");\n-extern void *memset (void *, int, size_t)\n-  __asm (\"my_memset\");\n-extern void bzero (void *, size_t)\n-  __asm (\"my_bzero\");\n-extern int memcmp (const void *, const void *, size_t);\n-\n-struct A { char c[32]; } a = { \"foobar\" };\n-char x[64] = \"foobar\", y[64];\n-int i = 39, j = 6, k = 4;\n-\n-int\n-main (void)\n-{\n-  struct A b = a;\n-  struct A c = { { 'x' } };\n-\n-  if (memcmp (b.c, x, 32) || c.c[0] != 'x' || memcmp (c.c + 1, x + 32, 31))\n-    abort ();\n-  if (__builtin_memcpy (y, x, i) != y || memcmp (x, y, 64))\n-    abort ();\n-  if (memcpy (y + 6, x, j) != y + 6\n-      || memcmp (x, y, 6) || memcmp (x, y + 6, 58))\n-    abort ();\n-  if (__builtin_memset (y + 2, 'X', k) != y + 2\n-      || memcmp (y, \"foXXXXfoobar\", 13))\n-    abort ();\n-  bcopy (y + 1, y + 2, 6);\n-  if (memcmp (y, \"fooXXXXfobar\", 13))\n-    abort ();\n-  __builtin_bzero (y + 4, 2);\n-  if (memcmp (y, \"fooX\\0\\0Xfobar\", 13))\n-    abort ();\n-\n-  return 0;\n-}\n-\n-/* There should be no calls to real memcpy, memset, bcopy or bzero.  */\n-static void *real_memcpy (void *, const void *, size_t)\n-  __asm (\"memcpy\");\n-static void real_bcopy (const void *, void *, size_t)\n-  __asm (\"bcopy\");\n-static void *real_memset (void *, int, size_t)\n-  __asm (\"memset\");\n-static void real_bzero (void *, size_t)\n-  __asm (\"bzero\");\n-\n-__attribute__ ((noinline))\n-static void *\n-real_memcpy (void *d, const void *s, size_t n)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-static void\n-real_bcopy (const void *s, void *d, size_t n)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-static void *\n-real_memset (void *d, int c, size_t n)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-static void\n-real_bzero (void *d, size_t n)\n-{\n-  abort ();\n-}\n-\n-__attribute__ ((noinline))\n-void *\n-memcpy (void *d, const void *s, size_t n)\n-{\n-  char *dst = (char *) d;\n-  const char *src = (const char *) s;\n-  while (n--)\n-    *dst++ = *src++;\n-  return (char *) d;\n-}\n-\n-__attribute__ ((noinline))\n-void\n-bcopy (const void *s, void *d, size_t n)\n-{\n-  char *dst = (char *) d;\n-  const char *src = (const char *) s;\n-  if (src >= dst)\n-    while (n--)\n-      *dst++ = *src++;\n-  else\n-    {\n-      dst += n;\n-      src += n;\n-      while (n--)\n-        *--dst = *--src;\n-    }\n-}\n-\n-__attribute__ ((noinline))\n-void *\n-memset (void *d, int c, size_t n)\n-{\n-  char *dst = (char *) d;\n-  while (n--)\n-    *dst++ = c;\n-  return (char *) d;\n-}\n-\n-__attribute__ ((noinline))\n-void\n-bzero (void *d, size_t n)\n-{\n-  char *dst = (char *) d;\n-  while (n--)\n-    *dst++ = '\\0';\n-}"}]}