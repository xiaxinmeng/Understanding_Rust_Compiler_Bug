{"sha": "975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc1Y2NmMjI5MWZlMGIxYmY1ZDhhN2NjMDI0NWZhMzVlZDBkZjhkYw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2012-10-08T11:26:16Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2012-10-08T11:26:16Z"}, "message": "sched-int.h (schedule_block): Adjust declaration.\n\n\t* sched-int.h (schedule_block): Adjust declaration.\n\t* sched-rgn.c (bb_state_array, bb_state): New static variables.\n\t(sched_rgn_init): Initialize them.\n\t(sched_rgn_free): Free them.\n\t(schedule_region): Save scheduling state for future blocks, and\n\tpass such state to schedule_block.\n\t* params.def (PARAM_SCHED_STATE_EDGE_PROB_CUTOFF): New.\n\t* doc/invoke.texi (--param): Document it.\n\t* haifa-sched.c (schedule_block): New arg init_state.  Use it to\n\tinitialize state if nonnull.  All callers changed.\n\tCall advance_one_cycle after scheduling.\n\nFrom-SVN: r192203", "tree": {"sha": "189eaf3a2d0889ab0f7111d7f11b37bda6412bc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/189eaf3a2d0889ab0f7111d7f11b37bda6412bc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/comments", "author": null, "committer": null, "parents": [{"sha": "1e422ffff35dd27469eec04f5feb2041d95e2f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e422ffff35dd27469eec04f5feb2041d95e2f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e422ffff35dd27469eec04f5feb2041d95e2f4b"}], "stats": {"total": 75, "additions": 70, "deletions": 5}, "files": [{"sha": "a9f6c47910bc35254075fa990022101c9803e000", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -1,3 +1,17 @@\n+2012-10-08  Bernd Schmidt  <bernds@codesourcery.com>\n+\n+\t* sched-int.h (schedule_block): Adjust declaration.\n+\t* sched-rgn.c (bb_state_array, bb_state): New static variables.\n+\t(sched_rgn_init): Initialize them.\n+\t(sched_rgn_free): Free them.\n+\t(schedule_region): Save scheduling state for future blocks, and\n+\tpass such state to schedule_block.\n+\t* params.def (PARAM_SCHED_STATE_EDGE_PROB_CUTOFF): New.\n+\t* doc/invoke.texi (--param): Document it.\n+\t* haifa-sched.c (schedule_block): New arg init_state.  Use it to\n+\tinitialize state if nonnull.  All callers changed.\n+\tCall advance_one_cycle after scheduling.\n+\n 2012-10-08  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/54854"}, {"sha": "a9a79343985bdc6bcd070453446a40e996199612", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -9242,6 +9242,11 @@ The minimal probability of speculation success (in percents), so that\n speculative insns are scheduled.\n The default value is 40.\n \n+@item sched-spec-state-edge-prob-cutoff\n+The minimum probability an edge must have for the scheduler to save its\n+state across it.\n+The default value is 10.\n+\n @item sched-mem-true-dep-cost\n Minimal distance (in CPU cycles) between store and load targeting same\n memory locations.  The default value is 1."}, {"sha": "f45caf48771c514388e3c7ac340ad299de2b133c", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -5840,7 +5840,7 @@ verify_shadows (void)\n    region.  */\n \n bool\n-schedule_block (basic_block *target_bb)\n+schedule_block (basic_block *target_bb, state_t init_state)\n {\n   int i;\n   bool success = modulo_ii == 0;\n@@ -5875,7 +5875,10 @@ schedule_block (basic_block *target_bb)\n   if (sched_verbose)\n     dump_new_block_header (0, *target_bb, head, tail);\n \n-  state_reset (curr_state);\n+  if (init_state == NULL)\n+    state_reset (curr_state);\n+  else\n+    memcpy (curr_state, init_state, dfa_state_size);\n \n   /* Clear the ready list.  */\n   ready.first = ready.veclen - 1;\n@@ -6335,6 +6338,7 @@ schedule_block (basic_block *target_bb)\n   if (ls.modulo_epilogue)\n     success = true;\n  end_schedule:\n+  advance_one_cycle ();\n   perform_replacements_new_cycle ();\n   if (modulo_ii > 0)\n     {"}, {"sha": "8733f1ba631f899c0d0374d9d8144e40ab9be894", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -611,6 +611,11 @@ DEFPARAM(PARAM_SCHED_SPEC_PROB_CUTOFF,\n          \"The minimal probability of speculation success (in percents), so that speculative insn will be scheduled.\",\n          40, 0, 100)\n \n+DEFPARAM(PARAM_SCHED_STATE_EDGE_PROB_CUTOFF,\n+         \"sched-state-edge-prob-cutoff\",\n+         \"The minimum probability an edge must have for the scheduler to save its state across it.\",\n+         10, 0, 100)\n+\n DEFPARAM(PARAM_SELSCHED_MAX_LOOKAHEAD,\n          \"selsched-max-lookahead\",\n          \"The maximum size of the lookahead window of selective scheduling\","}, {"sha": "9e524f9f13e9840f4059420b7e85c37a77363ae2", "filename": "gcc/sched-ebb.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fsched-ebb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fsched-ebb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-ebb.c?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -544,7 +544,7 @@ schedule_ebb (rtx head, rtx tail, bool modulo_scheduling)\n \n   /* Make ready list big enough to hold all the instructions from the ebb.  */\n   sched_extend_ready_list (rgn_n_insns);\n-  success = schedule_block (&target_bb);\n+  success = schedule_block (&target_bb, NULL);\n   gcc_assert (success || modulo_scheduling);\n \n   /* Free ready list.  */"}, {"sha": "d3a15aa90a7237cc4a58ce9b791d2aaaa70437cb", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -1321,7 +1321,7 @@ extern int dep_cost (dep_t);\n extern int set_priorities (rtx, rtx);\n \n extern void sched_setup_bb_reg_pressure_info (basic_block, rtx);\n-extern bool schedule_block (basic_block *);\n+extern bool schedule_block (basic_block *, state_t);\n \n extern int cycle_issued_insns;\n extern int issue_rate;"}, {"sha": "ba85238e6fd2a3b04e2fce9157ed3dfa62484d0b", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=975ccf2291fe0b1bf5d8a7cc0245fa35ed0df8dc", "patch": "@@ -124,6 +124,9 @@ int current_blocks;\n static basic_block *bblst_table;\n static int bblst_size, bblst_last;\n \n+static char *bb_state_array;\n+static state_t *bb_state;\n+\n /* Target info declarations.\n \n    The block currently being scheduled is referred to as the \"target\" block,\n@@ -2982,9 +2985,21 @@ schedule_region (int rgn)\n       curr_bb = first_bb;\n       if (dbg_cnt (sched_block))\n         {\n-          schedule_block (&curr_bb);\n+\t  edge f;\n+\n+          schedule_block (&curr_bb, bb_state[first_bb->index]);\n           gcc_assert (EBB_FIRST_BB (bb) == first_bb);\n           sched_rgn_n_insns += sched_n_insns;\n+\t  f = find_fallthru_edge (last_bb->succs);\n+\t  if (f && f->probability * 100 / REG_BR_PROB_BASE >=\n+\t      PARAM_VALUE (PARAM_SCHED_STATE_EDGE_PROB_CUTOFF))\n+\t    {\n+\t      memcpy (bb_state[f->dest->index], curr_state,\n+\t\t      dfa_state_size);\n+\t      if (sched_verbose >= 5)\n+\t\tfprintf (sched_dump, \"saving state for edge %d->%d\\n\",\n+\t\t\t f->src->index, f->dest->index);\n+\t    }\n         }\n       else\n         {\n@@ -3017,6 +3032,8 @@ schedule_region (int rgn)\n void\n sched_rgn_init (bool single_blocks_p)\n {\n+  int i;\n+\n   min_spec_prob = ((PARAM_VALUE (PARAM_MIN_SPEC_PROB) * REG_BR_PROB_BASE)\n \t\t    / 100);\n \n@@ -3028,6 +3045,23 @@ sched_rgn_init (bool single_blocks_p)\n   CONTAINING_RGN (ENTRY_BLOCK) = -1;\n   CONTAINING_RGN (EXIT_BLOCK) = -1;\n \n+  if (!sel_sched_p ())\n+    {\n+      bb_state_array = (char *) xmalloc (last_basic_block * dfa_state_size);\n+      bb_state = XNEWVEC (state_t, last_basic_block);\n+      for (i = 0; i < last_basic_block; i++)\n+\t{\n+\t  bb_state[i] = (state_t) (bb_state_array + i * dfa_state_size);\n+      \n+\t  state_reset (bb_state[i]);\n+\t}\n+    }\n+  else\n+    {\n+      bb_state_array = NULL;\n+      bb_state = NULL;\n+    }\n+\n   /* Compute regions for scheduling.  */\n   if (single_blocks_p\n       || n_basic_blocks == NUM_FIXED_BLOCKS + 1\n@@ -3064,6 +3098,9 @@ sched_rgn_init (bool single_blocks_p)\n void\n sched_rgn_finish (void)\n {\n+  free (bb_state_array);\n+  free (bb_state);\n+\n   /* Reposition the prologue and epilogue notes in case we moved the\n      prologue/epilogue insns.  */\n   if (reload_completed)"}]}