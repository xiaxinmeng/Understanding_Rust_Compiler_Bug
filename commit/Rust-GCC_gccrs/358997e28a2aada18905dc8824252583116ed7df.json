{"sha": "358997e28a2aada18905dc8824252583116ed7df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU4OTk3ZTI4YTJhYWRhMTg5MDVkYzg4MjQyNTI1ODMxMTZlZDdkZg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-12T02:51:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-12T02:51:40Z"}, "message": "i386.md (logsf2, [...]): New patterns to implement log, logf and logl built-ins as inline x87 intrinsics.\n\n\n\t* config/i386/i386.md (logsf2, logdf2, logxf2, logdf2): New patterns\n\tto implement log, logf and logl built-ins as inline x87 intrinsics.\n\t(UNSPEC_FYL2X): New unspec to represent x87's \"fyl2x\" instruction.\n\t(*fyl2x_sfxf3, *fyl2x_dfxf3, *fyl2x_xf3, *fyl2x_tfxf3): New insn\n\tpatterns for x87's \"fyl2x\" instruction, used by log?f2 patterns.\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FYL2X like\n\tUNSPEC_FPATAN, i.e. replaces two stack operands with single result.\n\n\t* gcc.dg/i386-387-1.c: Update to also test log.\n\t* gcc.dg/i386-387-2.c: Likewise.\n\nFrom-SVN: r66709", "tree": {"sha": "152c83a01df523308adb9ade7e3ecf52d5db6386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/152c83a01df523308adb9ade7e3ecf52d5db6386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/358997e28a2aada18905dc8824252583116ed7df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358997e28a2aada18905dc8824252583116ed7df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/358997e28a2aada18905dc8824252583116ed7df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358997e28a2aada18905dc8824252583116ed7df/comments", "author": null, "committer": null, "parents": [{"sha": "04f3680d863dd792eb98e3490daf5cf374555ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f3680d863dd792eb98e3490daf5cf374555ed5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f3680d863dd792eb98e3490daf5cf374555ed5"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "cfdc86108448d47653a9fe6cbae5636e9632f90b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358997e28a2aada18905dc8824252583116ed7df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358997e28a2aada18905dc8824252583116ed7df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=358997e28a2aada18905dc8824252583116ed7df", "patch": "@@ -1,3 +1,14 @@\n+2003-05-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.md (logsf2, logdf2, logxf2, logdf2): New patterns\n+\tto implement log, logf and logl built-ins as inline x87 intrinsics.\n+\t(UNSPEC_FYL2X): New unspec to represent x87's \"fyl2x\" instruction.\n+\t(*fyl2x_sfxf3, *fyl2x_dfxf3, *fyl2x_xf3, *fyl2x_tfxf3): New insn\n+\tpatterns for x87's \"fyl2x\" instruction, used by log?f2 patterns.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FYL2X like\n+\tUNSPEC_FPATAN, i.e. replaces two stack operands with single result.\n+\n 2003-05-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (out_object_file): Don't set -Wno-error for ${cpu}.o. "}, {"sha": "ad8909f939baaae1ea9c8e1ae7e70956eb335688", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358997e28a2aada18905dc8824252583116ed7df/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358997e28a2aada18905dc8824252583116ed7df/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=358997e28a2aada18905dc8824252583116ed7df", "patch": "@@ -112,6 +112,7 @@\n \n    ; x87 Floating point\n    (UNSPEC_FPATAN\t\t65)\n+   (UNSPEC_FYL2X\t\t66)\n   ])\n \n (define_constants\n@@ -15522,6 +15523,106 @@\n   \"fpatan\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*fyl2x_sfxf3\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fyl2x\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*fyl2x_dfxf3\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fyl2x\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"*fyl2x_xf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fyl2x\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*fyl2x_tfxf3\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n+\t(unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fyl2x\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"logsf2\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")\n+\t\t    (match_dup 2)] UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (4); /* fldln2 */\n+  emit_move_insn (operands[2], temp);\n+})\n+\n+(define_expand \"logdf2\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")\n+\t\t    (match_dup 2)] UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (4); /* fldln2 */\n+  emit_move_insn (operands[2], temp);\n+})\n+\n+(define_expand \"logxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")\n+\t\t    (match_dup 2)] UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (4); /* fldln2 */\n+  emit_move_insn (operands[2], temp);\n+})\n+\n+(define_expand \"logtf2\"\n+  [(set (match_operand:TF 0 \"register_operand\" \"\")\n+\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"\")\n+\t\t    (match_dup 2)] UNSPEC_FYL2X))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (4); /* fldln2 */\n+  emit_move_insn (operands[2], temp);\n+})\n \f\n ;; Block operation instructions\n "}, {"sha": "75a59e687275ad3fb0414ba094ea1e7315965439", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358997e28a2aada18905dc8824252583116ed7df/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358997e28a2aada18905dc8824252583116ed7df/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=358997e28a2aada18905dc8824252583116ed7df", "patch": "@@ -1729,6 +1729,7 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t\tbreak;\n \n \t      case UNSPEC_FPATAN:\n+\t      case UNSPEC_FYL2X:\n \t\t/* These insns operate on the top two stack slots.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));"}, {"sha": "e2a4a06b3ca75ea02b23061ad6418f78e50d219d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358997e28a2aada18905dc8824252583116ed7df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358997e28a2aada18905dc8824252583116ed7df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=358997e28a2aada18905dc8824252583116ed7df", "patch": "@@ -1,3 +1,8 @@\n+2003-05-11  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/i386-387-1.c: Update to also test log.\n+\t* gcc.dg/i386-387-2.c: Likewise.\n+\n 2003-05-11  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* g77.f-torture/execute/int8421.f: New test."}, {"sha": "07389106f506034a7121132963033811e00019e4", "filename": "gcc/testsuite/gcc.dg/i386-387-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358997e28a2aada18905dc8824252583116ed7df/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358997e28a2aada18905dc8824252583116ed7df/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c?ref=358997e28a2aada18905dc8824252583116ed7df", "patch": "@@ -5,8 +5,10 @@\n /* { dg-final { scan-assembler \"call\\t_?cos\" } } */\n /* { dg-final { scan-assembler \"call\\t_?sqrt\" } } */\n /* { dg-final { scan-assembler \"call\\t_?atan2\" } } */\n+/* { dg-final { scan-assembler \"call\\t_?log\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n double f4(double x, double y) { return __builtin_atan2(x,y); }\n+double f5(double x) { return __builtin_log(x); }"}, {"sha": "3bebc758f2a30bbc05716c54aa4fed768e391e39", "filename": "gcc/testsuite/gcc.dg/i386-387-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358997e28a2aada18905dc8824252583116ed7df/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358997e28a2aada18905dc8824252583116ed7df/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c?ref=358997e28a2aada18905dc8824252583116ed7df", "patch": "@@ -5,8 +5,10 @@\n /* { dg-final { scan-assembler \"fcos\" } } */\n /* { dg-final { scan-assembler \"fsqrt\" } } */\n /* { dg-final { scan-assembler \"fpatan\" } } */\n+/* { dg-final { scan-assembler \"fyl2x\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n double f4(double x, double y) { return __builtin_atan2(x,y); }\n+double f5(double x) { return __builtin_log(x); }"}]}