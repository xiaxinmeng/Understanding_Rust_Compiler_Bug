{"sha": "cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VhM2JkM2U1YTBhNDBlYjkwODA5YmY5MDA2M2RhNDkxMWJhMjNiMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-01-27T04:18:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-01-27T04:18:12Z"}, "message": "Makefile.in (CRTSTUFF_CFLAGS): New.\n\n\t* Makefile.in (CRTSTUFF_CFLAGS): New.\n\t(crtbegin.o, crtend.o, crtbeginS.o, crtendS.o, crtbeginT.o): Use it.\n\t* config.gcc (alpha-linux, alpha-freebsd, alpha-netbsd): Use plain\n\tcrtstuff.c instead of alpha assembly version.\n\t* crtstuff.c (CRT_CALL_STATIC_FUNCTION): Rewrite to assume the\n\tentire dummy function sequence.  Use FORCE_CODE_SECTION_ALIGN\n\tnot FORCE_{INIT,FINI}_SECTION_ALIGN.\n\t(__do_global_dtors_aux): Mark used.\n\t(frame_dummy, __do_global_ctors_aux): Mark used.\n\t(fini_dummy, init_dummy): Remove.\n\n\t* config/alpha/crtbegin.asm: Remove file.\n\t* config/alpha/crtend.asm: Remove file.\n\t* config/alpha/t-crtbe: Remove file.\n\t* config/alpha/elf.h (CRT_CALL_STATIC_FUNCTION): New.\n\t(LINK_EH_SPEC): New.\n\n\t* config/cris/cris.h (CRT_CALL_STATIC_FUNCTION): Rewrite old\n\tFORCE_INIT_SECTION_ALIGN hack.  Register __fini_start before\n\tcalling constructors.\n\t* config/cris/linux.h (CRT_CALL_STATIC_FUNCTION): Undef.\n\n\t* config/i386/i386.h (CRT_CALL_STATIC_FUNCTION): New.\n\t* config/i386/linux.h (CRT_CALL_STATIC_FUNCTION): Replace old\n\tCRT_END_INIT_DUMMY hack.\n\t* config/i386/sol2.h (FORCE_CODE_SECTION_ALIGN): Replace\n\tFORCE_{INIT,FINI}_SECTION_ALIGN.\n\n\t* config/mcore/mcore-elf.h (FORCE_CODE_SECTION_ALIGN): Replace\n\tFORCE_{INIT,FINI}_SECTION_ALIGN.\n\n\t* config/s390/s390.h (CRT_CALL_STATIC_FUNCTION): Update for new\n\tinvocation sequence.\n\t* config/sh/sh.h (CRT_CALL_STATIC_FUNCTION): Likewise.\n\n\t* doc/tm.texi (CRT_CALL_STATIC_FUNCTION): Update.\n\t(FORCE_CODE_SECTION_ALIGN): New.\n\nFrom-SVN: r49261", "tree": {"sha": "e5878dd8630022a33d8797b199100a5b12fc5c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5878dd8630022a33d8797b199100a5b12fc5c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/comments", "author": null, "committer": null, "parents": [{"sha": "1f9131b7db56276783f0276f2083c208dbf05709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9131b7db56276783f0276f2083c208dbf05709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9131b7db56276783f0276f2083c208dbf05709"}], "stats": {"total": 670, "additions": 180, "deletions": 490}, "files": [{"sha": "f2a2e5db67c95f20248f34b659db3173580e2f2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1,3 +1,43 @@\n+2002-01-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* Makefile.in (CRTSTUFF_CFLAGS): New.\n+\t(crtbegin.o, crtend.o, crtbeginS.o, crtendS.o, crtbeginT.o): Use it.\n+\t* config.gcc (alpha-linux, alpha-freebsd, alpha-netbsd): Use plain\n+\tcrtstuff.c instead of alpha assembly version.\n+\t* crtstuff.c (CRT_CALL_STATIC_FUNCTION): Rewrite to assume the\n+\tentire dummy function sequence.  Use FORCE_CODE_SECTION_ALIGN\n+\tnot FORCE_{INIT,FINI}_SECTION_ALIGN.\n+\t(__do_global_dtors_aux): Mark used.\n+\t(frame_dummy, __do_global_ctors_aux): Mark used.\n+\t(fini_dummy, init_dummy): Remove.\n+\n+\t* config/alpha/crtbegin.asm: Remove file.\n+\t* config/alpha/crtend.asm: Remove file.\n+\t* config/alpha/t-crtbe: Remove file.\n+\t* config/alpha/elf.h (CRT_CALL_STATIC_FUNCTION): New.\n+\t(LINK_EH_SPEC): New.\n+\n+\t* config/cris/cris.h (CRT_CALL_STATIC_FUNCTION): Rewrite old\n+\tFORCE_INIT_SECTION_ALIGN hack.  Register __fini_start before\n+\tcalling constructors.\n+\t* config/cris/linux.h (CRT_CALL_STATIC_FUNCTION): Undef.\n+\n+\t* config/i386/i386.h (CRT_CALL_STATIC_FUNCTION): New.\n+\t* config/i386/linux.h (CRT_CALL_STATIC_FUNCTION): Replace old\n+\tCRT_END_INIT_DUMMY hack.\n+\t* config/i386/sol2.h (FORCE_CODE_SECTION_ALIGN): Replace\n+\tFORCE_{INIT,FINI}_SECTION_ALIGN.\n+\n+\t* config/mcore/mcore-elf.h (FORCE_CODE_SECTION_ALIGN): Replace\n+\tFORCE_{INIT,FINI}_SECTION_ALIGN.\n+\n+\t* config/s390/s390.h (CRT_CALL_STATIC_FUNCTION): Update for new\n+\tinvocation sequence.\n+\t* config/sh/sh.h (CRT_CALL_STATIC_FUNCTION): Likewise.\n+\n+\t* doc/tm.texi (CRT_CALL_STATIC_FUNCTION): Update.\n+\t(FORCE_CODE_SECTION_ALIGN): New.\n+\n 2002-01-26  Richard Henderson  <rth@redhat.com>\n \n \t* config/cris/cris.c (cris_print_operand): Handle 64-bit CONST_INT."}, {"sha": "835bebc6655a9b188a8c8b6fa21ffc0ee0db7b60", "filename": "gcc/Makefile.in", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -370,6 +370,10 @@ LIBGCC2_INCLUDES =\n # Additional target-dependent options for compiling libgcc2.a.\n TARGET_LIBGCC2_CFLAGS =\n \n+# Options to use when compiling crtbegin/end.\n+CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n+  -finhibit-size-directive -fno-inline-functions -fno-exceptions\n+\n # Additional sources to handle exceptions; overridden on ia64.\n LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \\\n   $(srcdir)/unwind-sjlj.c\n@@ -1067,42 +1071,34 @@ stmp-multilib: $(LIBGCC_DEPS)\n # constructors.\n $(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n-\t  -fno-exceptions $(CRTSTUFF_T_CFLAGS) @inhibit_libc@ \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -o $(T)crtbegin$(objext)\n+\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n+\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_BEGIN \\\n+\t  -o $(T)crtbegin$(objext)\n \n $(T)crtend.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n-\t  -fno-exceptions $(CRTSTUFF_T_CFLAGS) @inhibit_libc@ \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_END -o $(T)crtend$(objext)\n+\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n+\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_END \\\n+\t  -o $(T)crtend$(objext)\n \n # These are versions of crtbegin and crtend for shared libraries.\n $(T)crtbeginS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n-\t  -fno-exceptions $(CRTSTUFF_T_CFLAGS_S) @inhibit_libc@ \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFS_O \\\n+\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \\\n+\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFS_O \\\n \t  -o $(T)crtbeginS$(objext)\n \n $(T)crtendS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n-\t  -fno-exceptions $(CRTSTUFF_T_CFLAGS_S) @inhibit_libc@ \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O \\\n+\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \\\n+\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_END -DCRTSTUFFS_O \\\n \t  -o $(T)crtendS$(objext)\n \n # This is a version of crtbegin for -static links.\n $(T)crtbeginT.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \\\n   gbl-ctors.h stmp-int-hdrs tsystem.h\n-\t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n-\t  -finhibit-size-directive -fno-inline-functions \\\n-\t  -fno-exceptions $(CRTSTUFF_T_CFLAGS) @inhibit_libc@ \\\n-\t  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \\\n+\t$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \\\n+\t  @inhibit_libc@ -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \\\n \t  -o $(T)crtbeginT$(objext)\n \n # Compile the start modules crt0.o and mcrt0.o that are linked with"}, {"sha": "63cef2b6c824f38e1c2adc65fc386cd1ef784291", "filename": "gcc/config.gcc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -461,7 +461,8 @@ alpha*-*-linux*ecoff*)\n alpha*-*-linux*libc1*)\n \ttm_file=\"${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n-\ttmake_file=\"t-slibgcc-elf-ver t-linux t-linux-gnulibc1 alpha/t-alpha alpha/t-crtbe alpha/t-crtfm alpha/t-ieee\"\n+\ttmake_file=\"t-slibgcc-elf-ver t-linux t-linux-gnulibc1 alpha/t-alpha alpha/t-crtfm alpha/t-ieee\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tgas=yes gnu_ld=yes\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -470,7 +471,8 @@ alpha*-*-linux*libc1*)\n alpha*-*-linux*)\n \ttm_file=\"${tm_file} alpha/elf.h alpha/linux.h alpha/linux-elf.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n-\ttmake_file=\"t-slibgcc-elf-ver t-linux alpha/t-crtbe alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n+\ttmake_file=\"t-slibgcc-elf-ver t-linux alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tgas=yes gnu_ld=yes\n \tif test x$enable_threads = xyes; then\n \t\tthread_file='posix'\n@@ -479,12 +481,14 @@ alpha*-*-linux*)\n alpha*-*-freebsd*)\n \ttm_file=\"${tm_file} ${fbsd_tm_file} alpha/elf.h alpha/freebsd.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n-\ttmake_file=\"${tmake_file} alpha/t-crtbe alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n+\ttmake_file=\"${tmake_file} alpha/t-crtfm alpha/t-alpha alpha/t-ieee\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \t;;\n alpha*-*-netbsd*)\n \ttm_file=\"${tm_file} netbsd.h alpha/elf.h netbsd-elf.h alpha/netbsd.h\"\n \ttarget_cpu_default=\"MASK_GAS\"\n-\ttmake_file=\"${tmake_file} alpha/t-alpha alpha/t-crtbe alpha/t-ieee\"\n+\ttmake_file=\"${tmake_file} alpha/t-alpha alpha/t-ieee\"\n+\textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \t;;\n \n alpha*-*-openbsd*)"}, {"sha": "96725b003b5a8e306d51af9baa16c0a0858dc428", "filename": "gcc/config/alpha/crtbegin.asm", "status": "removed", "additions": 0, "deletions": 228, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9131b7db56276783f0276f2083c208dbf05709/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9131b7db56276783f0276f2083c208dbf05709/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm?ref=1f9131b7db56276783f0276f2083c208dbf05709", "patch": "@@ -1,228 +0,0 @@\n-/*\n- * Copyright (C) 1996, 1998, 2000 Free Software Foundation, Inc.\n- *  Contributed by Richard Henderson (rth@tamu.edu)\n- *\n- * This file is free software; you can redistribute it and/or modify it\n- * under the terms of the GNU General Public License as published by the\n- * Free Software Foundation; either version 2, or (at your option) any\n- * later version.\n- * \n- * In addition to the permissions in the GNU General Public License, the\n- * Free Software Foundation gives you unlimited permission to link the\n- * compiled version of this file with other programs, and to distribute\n- * those programs without any restriction coming from the use of this\n- * file.  (The General Public License restrictions do apply in other\n- * respects; for example, they cover modification of the file, and\n- * distribution when not linked into another program.)\n- * \n- * This file is distributed in the hope that it will be useful, but\n- * WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * General Public License for more details.\n- * \n- * You should have received a copy of the GNU General Public License\n- * along with this program; see the file COPYING.  If not, write to\n- * the Free Software Foundation, 59 Temple Place - Suite 330,\n- * Boston, MA 02111-1307, USA.\n- * \n- *    As a special exception, if you link this library with files\n- *    compiled with GCC to produce an executable, this does not cause\n- *    the resulting executable to be covered by the GNU General Public License.\n- *    This exception does not however invalidate any other reasons why\n- *    the executable file might be covered by the GNU General Public License.\n- */\n-\n-#include \"auto-host.h\"\n-\n-\n-/*\n- * Heads of the constructor/destructor lists.\n- */\n-\n-/* The __*TOR_LIST__ symbols are not global because when this file is used\n-   in a shared library, we do not want the symbol to fall over to the\n-   application's lists.  */\n-\n-.section .ctors,\"aw\"\n-\t.align 3\n-__CTOR_LIST__:\n-\t.quad\t-1\n-\n-.section .dtors,\"aw\"\n-\t.align 3\n-__DTOR_LIST__:\n-\t.quad\t-1\n-\n-.section .jcr,\"aw\"\n-\t.align 3\n-__JCR_LIST__:\n-\n-.section .eh_frame,\"aw\"\n-__EH_FRAME_BEGIN__:\n-\n-/*\n- * Fragment of the ELF _fini routine that invokes our dtor cleanup.\n- */\n-\n-.section .fini,\"ax\"\n-\n-\t/* Since the bits of the _fini function are spread across many\n-\t   object files, each potentially with its own GP, we must\n-\t   assume we need to load ours.  Further, our .fini section\n-\t   can easily be more than 4MB away from our .text bits so we\n-\t   can't use bsr.  */\n-\n-\tbr      $29,1f\n-1:\tldgp    $29,0($29)\n-\tjsr     $26,__do_global_dtors_aux\n-\n-\t/* Must match the alignment we got from crti.o else we get\n-\t   zero-filled holes in our _fini function and then SIGILL.  */\n-\t.align 3\n-\n-/*\n- * Fragment of the ELF _init routine that sets up the frame info.\n- */\n-\n-.section .init,\"ax\"\n-       br      $29,1f\n-1:     ldgp    $29,0($29)\n-       jsr     $26,__do_frame_setup\n-       .align 3\n-\n-/*\n- * Invoke our destructors in order.\n- */\n-\n-.section .sdata\n-\n-/* Support recursive calls to exit.  */\n-\t.type dtor_ptr,@object\n-\t.size dtor_ptr,4\n-dtor_ptr:\n-\t.gprel32 __DTOR_LIST__ + 8\n-\n-/* A globally unique widget for c++ local destructors to hang off.\n-\n-   This has a unique value in every dso; in the main program its\n-   value is zero.  The object should be protected.  This means the\n-   instance in any dso or the main program is not used in any other\n-   dso.  The dynamic linker takes care of this.  */\n- \n-\t.global __dso_handle\n-\t.type __dso_handle,@object\n-\t.size __dso_handle,8\n-#ifdef SHARED\n-.section .data\n-\t.align 3\n-__dso_handle:\n-\t.quad\t__dso_handle\n-#else\n-.section .bss\n-\t.align 3\n-__dso_handle:\n-\t.zero 8\n-#endif\n-#ifdef HAVE_GAS_HIDDEN\n-\t.hidden\t__dso_handle\n-#endif\n-\n-.text\n-\n-\t.align 3\n-\t.ent __do_global_dtors_aux\n-\n-__do_global_dtors_aux:\n-\tldgp\t$29,0($27)\n-\tlda     $30,-16($30)\n-\t.frame  $30,16,$26,0\n-\tstq\t$9,8($30)\n-\tstq     $26,0($30)\n-\t.mask   0x4000200,-16\n-\t.prologue 1\n-\n-#ifdef SHARED\n-\t/* Do c++ local destructors.  */\n-\tlda\t$1,__cxa_finalize\n-\tbeq\t$1,0f\n-\tlda\t$16,__dso_handle\n-\tjsr\t$26,__cxa_finalize\n-\tldgp\t$29,0($26)\n-#endif\n-\n-0:\tlda     $9,dtor_ptr\n-\tbr      2f\n-1:\tstl\t$1,0($9)\n-\tjsr     $26,($27)\n-\tldgp\t$29,0($26)\n-2:\tldl\t$1,0($9)\n-\taddq\t$1,$29,$2\n-\tldq     $27,0($2)\n-\taddl    $1,8,$1\n-\tbne     $27,1b\n-\n-\t/* Remove our frame info.  */\n-\tlda\t$1,__deregister_frame_info\n-\tbeq\t$1,3f\n-\tlda\t$16,__EH_FRAME_BEGIN__\n-\tjsr\t$26,__deregister_frame_info\n-\tldgp\t$29,0($26)\n-\n-3:\tldq     $26,0($30)\n-\tldq\t$9,8($30)\n-\tlda     $30,16($30)\n-\tret\n-\n-\t.end __do_global_dtors_aux\n-\n-/*\n- * Install our frame info; register java classes, if any.\n- */\n-\n-.section .bss\n-\t.type frame_object,@object\n-\t.size frame_object, 48\n-\t.align 3\n-frame_object:\n-\t.zero 48\n-\n-.text \n-\n-\t.align 3\n-\t.ent __do_frame_setup\n-\n-__do_frame_setup:\n-\tldgp\t$29,0($27)\n-\tlda     $30,-16($30)\n-\t.frame  $30,16,$26,0\n-\tstq     $26,0($30)\n-\t.mask   0x4000000,-16\n-\t.prologue 1\n-\n-\tlda\t$1,__register_frame_info\n-\tbeq\t$1,0f\n-\tlda\t$16,__EH_FRAME_BEGIN__\n-\tlda\t$17,frame_object\n-\tjsr\t$26,__register_frame_info\n-\tldgp\t$29,0($26)\n-\n-0:\tlda\t$1,_Jv_RegisterClasses\n-\tlda\t$16,__JCR_LIST__\n-\tbeq\t$1,0f\n-\tldq\t$2,8($16)\n-\tbeq\t$2,0f\n-\tjsr\t$26,_Jv_RegisterClasses\n-\tldgp\t$29,0($26)\n-\n-0:\tldq     $26,0($30)\n-\tlda     $30,16($30)\n-\tret\n-\n-\t.end __do_frame_setup\n-\n-.weak __register_frame_info\n-.weak __deregister_frame_info\n-#ifdef SHARED\n-.weak __cxa_finalize\n-#endif\n-.weak _Jv_RegisterClasses"}, {"sha": "1ffd808bf604ef1ef15f3116428c03c83e0c7522", "filename": "gcc/config/alpha/crtend.asm", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9131b7db56276783f0276f2083c208dbf05709/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9131b7db56276783f0276f2083c208dbf05709/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtend.asm?ref=1f9131b7db56276783f0276f2083c208dbf05709", "patch": "@@ -1,113 +0,0 @@\n-/*\n- * Copyright (C) 1996, 2000 Free Software Foundation, Inc.\n- *  Contributed by Richard Henderson (rth@tamu.edu)\n- *\n- * This file is free software; you can redistribute it and/or modify it\n- * under the terms of the GNU General Public License as published by the\n- * Free Software Foundation; either version 2, or (at your option) any\n- * later version.\n- * \n- * In addition to the permissions in the GNU General Public License, the\n- * Free Software Foundation gives you unlimited permission to link the\n- * compiled version of this file with other programs, and to distribute\n- * those programs without any restriction coming from the use of this\n- * file.  (The General Public License restrictions do apply in other\n- * respects; for example, they cover modification of the file, and\n- * distribution when not linked into another program.)\n- * \n- * This file is distributed in the hope that it will be useful, but\n- * WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- * General Public License for more details.\n- * \n- * You should have received a copy of the GNU General Public License\n- * along with this program; see the file COPYING.  If not, write to\n- * the Free Software Foundation, 59 Temple Place - Suite 330,\n- * Boston, MA 02111-1307, USA.\n- * \n- *    As a special exception, if you link this library with files\n- *    compiled with GCC to produce an executable, this does not cause\n- *    the resulting executable to be covered by the GNU General Public License.\n- *    This exception does not however invalidate any other reasons why\n- *    the executable file might be covered by the GNU General Public License.\n- */\n-\n-/*\n- * Tails of the constructor/destructor lists.\n- */\n-\n-/* The __*TOR_END__ symbols are not global because when this file is used\n-   in a shared library, we do not want the symbol to fall over to the\n-   application's lists.  */\n-\n-.section .ctors,\"aw\"\n-\t.align 3\n-__CTOR_END__:\n-\t.quad   0\n-\n-.section .dtors,\"aw\"\n-\t.align 3\n-__DTOR_END__:\n-\t.quad   0\n-\n-.section .jcr,\"aw\"\n-\t.align 3\n-__JCR_END__:\n-\t.quad\t0\n-\n-.section .eh_frame,\"aw\"\n-__FRAME_END__:\n-\t.quad\t0\n-\n-/*\n- * Fragment of the ELF _init routine that invokes our ctor startup\n- */\n-\n-.section .init,\"ax\"\n-\n-\t/* Since the bits of the _init function are spread across many\n-\t   object files, each potentially with its own GP, we must\n-\t   assume we need to load ours.  Further, our .init section\n-\t   can easily be more than 4MB away from our .text bits so we\n-\t   can't use bsr.  */\n-\n-\tbr      $29,1f\n-1:\tldgp    $29,0($29)\n-\tjsr     $26,__do_global_ctors_aux\n-\n-\t/* Must match the alignment we got from crti.o else we get\n-\t   zero-filled holes in our _init function and thense SIGILL.  */\n-\t.align 3\n-\n-/*\n- * Invoke our constructors in order.\n- */\n-\n-.text\n-\n-\t.align 3\n-\t.ent __do_global_ctors_aux\n-\n-__do_global_ctors_aux:\n-\tldgp\t$29,0($27)\n-\tlda     $30,-16($30)\n-\t.frame  $30,16,$26,0\n-\tstq     $9,8($30)\n-\tstq     $26,0($30)\n-\t.mask   0x4000200,-16\n-\t.prologue 1\n-\n-\tlda     $9,__CTOR_END__-8\n-\tbr      1f\n-0:\tjsr     $26,($27)\n-1:\tldq     $27,0($9)\n-\tsubq    $9,8,$9\n-\tnot     $27,$0\n-\tbne     $0,0b\n-\n-\tldq     $26,0($30)\n-\tldq     $9,8($30)\n-\tlda     $30,16($30)\n-\tret\n-\n-\t.end __do_global_ctors_aux"}, {"sha": "b4ed0d023bf52890cb370ca4cf91230f3fe7cee9", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha w/ELF.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Richard Henderson (rth@tamu.edu).\n \n@@ -642,3 +642,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n   alpha_this_gpdisp_sequence_number = 0)\n extern int alpha_this_literal_sequence_number;\n extern int alpha_this_gpdisp_sequence_number;\n+\n+/* Since the bits of the _init and _fini function is spread across\n+   many object files, each potentially with its own GP, we must assume\n+   we need to load our GP.  Further, the .init/.fini section can\n+   easily be more than 4MB away from the function to call so we can't\n+   use bsr.  */\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+   asm (SECTION_OP \"\\n\"\t\t\t\t\t\\\n+\"\tbr $29,1f\\n\"\t\t\t\t\t\\\n+\"1:\tldgp $29,0($29)\\n\"\t\t\t\t\\\n+\"\tunop\\n\"\t\t\t\t\t\t\\\n+\"\tjsr $26,\" USER_LABEL_PREFIX #FUNC \"\\n\"\t\t\\\n+\"\t.align 3\\n\"\t\t\t\t\t\\\n+\"\t.previous\");\n+\n+/* If we have the capability create headers for efficient EH lookup.\n+   As of Jan 2002, only glibc 2.2.4 can actually make use of this, but\n+   I imagine that other systems will catch up.  In the meantime, it\n+   doesn't harm to make sure that the data exists to be used later.  */\n+#if defined(HAVE_LD_EH_FRAME_HDR)\n+#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n+#endif"}, {"sha": "384237b1c9c16df90d95d66cb9715ff6c28ff44f", "filename": "gcc/config/alpha/t-crtbe", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9131b7db56276783f0276f2083c208dbf05709/gcc%2Fconfig%2Falpha%2Ft-crtbe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9131b7db56276783f0276f2083c208dbf05709/gcc%2Fconfig%2Falpha%2Ft-crtbe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Ft-crtbe?ref=1f9131b7db56276783f0276f2083c208dbf05709", "patch": "@@ -1,14 +0,0 @@\n-# Effectively disable the crtbegin/end rules using crtstuff.c\n-T = disable\n-\n-EXTRA_PARTS += crtbegin.o crtend.o crtbeginS.o crtendS.o\n-\n-# Assemble startup files.\n-crtbegin.o: $(srcdir)/config/alpha/crtbegin.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -o crtbegin.o -x assembler-with-cpp -I. $(srcdir)/config/alpha/crtbegin.asm\n-crtend.o: $(srcdir)/config/alpha/crtend.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -c -o crtend.o -x assembler-with-cpp -I. $(srcdir)/config/alpha/crtend.asm\n-crtbeginS.o: $(srcdir)/config/alpha/crtbegin.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -DSHARED -c -o crtbeginS.o -x assembler-with-cpp -I. $(srcdir)/config/alpha/crtbegin.asm\n-crtendS.o: $(srcdir)/config/alpha/crtend.asm $(GCC_PASSES)\n-\t$(GCC_FOR_TARGET) -DSHARED -c -o crtendS.o -x assembler-with-cpp -I. $(srcdir)/config/alpha/crtend.asm"}, {"sha": "f92a3b3971bfcbe8c4db05404804ca77f990cb22", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1451,14 +1451,20 @@ struct cum_args {int regs;};\n /* We pull a little trick to register the _fini function with atexit,\n    after (presumably) registering the eh frame info, since we don't handle\n    _fini (a.k.a. ___fini_start) in crt0 or have a crti for \"pure\" ELF.  */\n-#ifdef CRT_BEGIN\n-#define FORCE_INIT_SECTION_ALIGN\t\t\\\n- do\t\t\t\t\t\t\\\n-   {\t\t\t\t\t\t\\\n-     extern void __fini__start (void);\t\t\\\n-     atexit (__fini__start);\t\t\t\\\n-   }\t\t\t\t\t\t\\\n- while (0)\n+#ifdef CRT_END\n+# define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\t\\\n+static void __attribute__((__used__))\t\t\t\t\\\n+call_ ## FUNC (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  asm (SECTION_OP);\t\t\t\t\t\t\\\n+  if (__builtin_strcmp (#FUNC, \"__do_global_ctors_aux\") == 0)\t\\\n+   {\t\t\t\t\t\t\t\t\\\n+     extern void __fini__start (void);\t\t\t\t\\\n+     atexit (__fini__start);\t\t\t\t\t\\\n+   }\t\t\t\t\t\t\t\t\\\n+  FUNC ();\t\t\t\t\t\t\t\\\n+  asm (TEXT_SECTION_ASM_OP);\t\t\t\t\t\\\n+}\n #endif\n \n /* Node: PIC */"}, {"sha": "5949937ef719e5dfa9146c7e930d995ccaef4b28", "filename": "gcc/config/cris/linux.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fcris%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fcris%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Flinux.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -102,8 +102,8 @@ Boston, MA 02111-1307, USA.  */\n /* Node: Sections */\n \n /* GNU/Linux has crti and crtn and does not need the\n-   FORCE_INIT_SECTION_ALIGN trick in cris.h.  */\n-#undef FORCE_INIT_SECTION_ALIGN\n+   CRT_CALL_STATIC_FUNCTION trick in cris.h.  */\n+#undef CRT_CALL_STATIC_FUNCTION\n \n /*\n  * Local variables:"}, {"sha": "25705e6420ce4c483815dff5196999ef7ea5861b", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -2911,6 +2911,14 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n \n #define ASM_SIMPLIFY_DWARF_ADDR(X) \\\n   i386_simplify_dwarf_addr (X)\n+\n+/* Switch to init or fini section via SECTION_OP, emit a call to FUNC,\n+   and switch back.  For x86 we do this only to save a few bytes that\n+   would otherwise be unused in the text section.  */\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+   asm (SECTION_OP \"\\n\\t\"\t\t\t\t\\\n+\t\"call \" USER_LABEL_PREFIX #FUNC \"\\n\"\t\t\\\n+\tTEXT_SECTION_ASM_OP);\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "de634d3a4e771679fff772860f50493bfbe3f4e1", "filename": "gcc/config/i386/linux.h", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fi386%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fi386%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Flinux.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1,5 +1,6 @@\n /* Definitions for Intel 386 running Linux-based GNU systems with ELF format.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002\n+   Free Software Foundation, Inc.\n    Contributed by Eric Youngdale.\n    Modified for stabs-in-ELF by H.J. Lu.\n \n@@ -167,20 +168,20 @@ Boston, MA 02111-1307, USA.  */\n \n #if defined(__PIC__) && defined (USE_GNULIBC_1)\n /* This is a kludge. The i386 GNU/Linux dynamic linker needs ___brk_addr,\n-   __environ and atexit (). We have to make sure they are in the .dynsym\n-   section. We accomplish it by making a dummy call here. This\n-   code is never reached.  */\n-         \n-#define CRT_END_INIT_DUMMY\t\t\\\n-  do\t\t\t\t\t\\\n-    {\t\t\t\t\t\\\n-      extern void *___brk_addr;\t\t\\\n-      extern char **__environ;\t\t\\\n-\t\t\t\t\t\\\n-      ___brk_addr = __environ;\t\t\\\n-      atexit (0);\t\t\t\\\n-    }\t\t\t\t\t\\\n-  while (0)\n+   __environ and atexit.  We have to make sure they are in the .dynsym\n+   section.  We do this by forcing the assembler to create undefined \n+   references to these symbols in the object file.  */\n+#undef CRT_CALL_STATIC_FUNCTION\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+   asm (SECTION_OP \"\\n\\t\"\t\t\t\t\\\n+\t\"call \" USER_LABEL_PREFIX #FUNC \"\\n\"\t\t\\\n+\tTEXT_SECTION_ASM_OP \"\\n\\t\"\t\t\t\\\n+\t\".extern ___brk_addr\\n\\t\"\t\t\t\\\n+\t\".type ___brk_addr,@object\\n\\t\"\t\t\t\\\n+\t\".extern __environ\\n\\t\"\t\t\t\t\\\n+\t\".type __environ,@object\\n\\t\"\t\t\t\\\n+\t\".extern atexit\\n\\t\"\t\t\t\t\\\n+\t\".type atexit,@function\");\n #endif\n \n /* Handle special EH pointer encodings.  Absolute, pc-relative, and"}, {"sha": "fb9d74530bdba9ee93c5adf371f77cd20d226ac8", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1,5 +1,5 @@\n /* Target definitions for GNU compiler for Intel 80386 running Solaris 2\n-   Copyright (C) 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1993, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Fred Fish (fnf@cygnus.com).\n \n@@ -56,9 +56,7 @@ Boston, MA 02111-1307, USA.  */\n    two 0x00000090 ints, which generates a segmentation violation when\n    executed.  This macro forces the assembler to do the padding, since\n    it knows what it is doing.  */\n-\n-#define FORCE_INIT_SECTION_ALIGN asm (ALIGN_ASM_OP ## \"16\")\n-#define FORCE_FINI_SECTION_ALIGN FORCE_INIT_SECTION_ALIGN\n+#define FORCE_CODE_SECTION_ALIGN  asm(ALIGN_ASM_OP \"16\");\n \n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is"}, {"sha": "8cb8d1b337ae5110de75af7c5be6f28436fa95cb", "filename": "gcc/config/mcore/mcore-elf.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-elf.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of MCore target. \n-   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Cygnus Solutions.\n \n This file is part of GNU CC.\n@@ -158,11 +158,9 @@ exports_section ()\t\t\t\t\t\t\\\n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC  \"%{!mno-lsim:-lsim} crtend.o%s crtn.o%s\"\n \n-\n /* The subroutine calls in the .init and .fini sections create literal\n    pools which must be jumped around...  */\n-#define FORCE_INIT_SECTION_ALIGN\tasm (\"br 1f ; .literals ; 1:\")\n-#define FORCE_FINI_SECTION_ALIGN\tasm (\"br 1f ; .literals ; 1:\")\n+#define FORCE_CODE_SECTION_ALIGN\tasm (\"br 1f ; .literals ; 1:\");\n \n #undef  CTORS_SECTION_ASM_OP\n #define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\""}, {"sha": "99e1ef98530a0b588d59f663820ebbcc44dbaffc", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1299,15 +1299,13 @@ extern struct rtx_def *s390_compare_op0, *s390_compare_op1;\n /* S/390 constant pool breaks the devices in crtstuff.c to control section\n    in where code resides.  We have to write it as asm code.  */\n #ifndef __s390x__\n-#define CRT_CALL_STATIC_FUNCTION(func) \\\n-  if (0) \\\n-     func (); /* ... to avoid warnings.  */ \\\n-  else \\\n-    asm \\\n-      (\"bras\\t%%r2,1f\\n\\\n-0:\t.long\\t\" #func \" - 0b\\n\\\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC) \\\n+    asm (SECTION_OP \"\\n\\\n+\tbras\\t%%r2,1f\\n\\\n+0:\t.long\\t\" USER_LABEL_PREFIX #FUNC \" - 0b\\n\\\n 1:\tl\\t%%r3,0(%%r2)\\n\\\n-\tbas\\t%%r14,0(%%r3,%%r2)\" : : : \"2\", \"3\", \"cc\", \"memory\");\n+\tbas\\t%%r14,0(%%r3,%%r2)\\n\\\n+\t.previous\");\n #endif\n \n /* Constant Pool for all symbols operands which are changed with"}, {"sha": "0985a372bb837f1b48a162022f3f4d6f0494d003", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -2301,21 +2301,15 @@ extern struct rtx_def *fpscr_rtx;\n \n /* SH constant pool breaks the devices in crtstuff.c to control section\n    in where code resides.  We have to write it as asm code.  */\n-#define CRT_CALL_STATIC_FUNCTION(func) \\\n-  if (0) \\\n-     /* This avoids warnings about the static function being unused.  */ \\\n-     func (); \\\n-  else \\\n-    /* We should be passing FUNC to the asm statement as an asm input\t\\\n-       operand, but this breaks with -fPIC.  FIXME.  */\t\t\t\\\n-    asm \\\n-      (\"mov.l\t1f,r1\\n\\\n+#define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC) \\\n+   asm (SECTION_OP \"\\n\\\n+\tmov.l\t1f,r1\\n\\\n \tmova\t2f,r0\\n\\\n \tbraf\tr1\\n\\\n \tlds\tr0,pr\\n\\\n 0:\t.p2align 2\\n\\\n-1:\t.long\t\" USER_LABEL_PREFIX #func \" - 0b\\n\\\n-2:\")\n+1:\t.long\t\" USER_LABEL_PREFIX #FUNC \" - 0b\\n\\\n+2:\\n\" TEXT_SECTION_ASM_OP);\n \n #define ALLOCATE_INITIAL_VALUE(hard_reg) \\\n   (REGNO (hard_reg) == PR_REG \\"}, {"sha": "e3b2607ea5de71f32fd3390079f2e673fc98a218", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 24, "deletions": 52, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -1,7 +1,7 @@\n /* Specialized bits of code needed to support construction and\n    destruction of file-scope objects in C++ code.\n    Copyright (C) 1991, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Ron Guilmette (rfg@monkeys.com).\n \n This file is part of GCC.\n@@ -62,8 +62,20 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tsystem.h\"\n #include \"unwind-dw2-fde.h\"\n \n+#ifndef FORCE_CODE_SECTION_ALIGN\n+# define FORCE_CODE_SECTION_ALIGN\n+#endif\n+\n #ifndef CRT_CALL_STATIC_FUNCTION\n-# define CRT_CALL_STATIC_FUNCTION(func) func ()\n+# define CRT_CALL_STATIC_FUNCTION(SECTION_OP, FUNC)\t\\\n+static void __attribute__((__used__))\t\t\t\\\n+call_ ## FUNC (void)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  asm (SECTION_OP);\t\t\t\t\t\\\n+  FUNC ();\t\t\t\t\t\t\\\n+  FORCE_CODE_SECTION_ALIGN\t\t\t\t\\\n+  asm (TEXT_SECTION_ASM_OP);\t\t\t\t\\\n+}\n #endif\n \n #if defined(OBJECT_FORMAT_ELF) && defined(HAVE_LD_EH_FRAME_HDR) \\\n@@ -237,11 +249,11 @@ extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;\n    the list we left off processing, and we resume at that point,\n    should we be re-invoked.  */\n \n-static void\n+static void __attribute__((used))\n __do_global_dtors_aux (void)\n {\n   static func_ptr *p = __DTOR_LIST__ + 1;\n-  static int completed;\n+  static _Bool completed;\n   func_ptr f;\n \n   if (__builtin_expect (completed, 0))\n@@ -273,26 +285,15 @@ __do_global_dtors_aux (void)\n   completed = 1;\n }\n \n-\n /* Stick a call to __do_global_dtors_aux into the .fini section.  */\n-\n-static void __attribute__ ((__unused__))\n-fini_dummy (void)\n-{\n-  asm (FINI_SECTION_ASM_OP);\n-  CRT_CALL_STATIC_FUNCTION (__do_global_dtors_aux);\n-#ifdef FORCE_FINI_SECTION_ALIGN\n-  FORCE_FINI_SECTION_ALIGN;\n-#endif\n-  asm (TEXT_SECTION_ASM_OP);\n-}\n+CRT_CALL_STATIC_FUNCTION (FINI_SECTION_ASM_OP, __do_global_dtors_aux)\n \n #if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n    call in another function.  */\n \n-static void\n+static void __attribute__((used))\n frame_dummy (void)\n {\n #ifdef USE_EH_FRAME_REGISTRY\n@@ -322,16 +323,7 @@ frame_dummy (void)\n #endif /* JCR_SECTION_NAME */\n }\n \n-static void __attribute__ ((__unused__))\n-init_dummy (void)\n-{\n-  asm (INIT_SECTION_ASM_OP);\n-  CRT_CALL_STATIC_FUNCTION (frame_dummy);\n-#ifdef FORCE_INIT_SECTION_ALIGN\n-  FORCE_INIT_SECTION_ALIGN;\n-#endif\n-  asm (TEXT_SECTION_ASM_OP);\n-}\n+CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, frame_dummy)\n #endif /* EH_FRAME_SECTION_NAME || JCR_SECTION_NAME */\n \n #else  /* OBJECT_FORMAT_ELF */\n@@ -373,12 +365,10 @@ asm (INIT_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n    such a thing) so that we can properly perform the construction of\n    file-scope static-storage C++ objects within shared libraries.  */\n \n-static void\n+static void __attribute__((used))\n __do_global_ctors_aux (void)\t/* prologue goes in .init section */\n {\n-#ifdef FORCE_INIT_SECTION_ALIGN\n-  FORCE_INIT_SECTION_ALIGN;\t/* Explicit align before switch to .text */\n-#endif\n+  FORCE_CODE_SECTION_ALIGN\t/* explicit align before switch to .text */\n   asm (TEXT_SECTION_ASM_OP);\t/* don't put epilogue and body in .init */\n   DO_GLOBAL_CTORS_BODY;\n   atexit (__do_global_dtors);\n@@ -486,8 +476,7 @@ STATIC void *__JCR_END__[1]\n #ifdef INIT_SECTION_ASM_OP\n \n #ifdef OBJECT_FORMAT_ELF\n-\n-static void\n+static void __attribute__((used))\n __do_global_ctors_aux (void)\n {\n   func_ptr *p;\n@@ -496,21 +485,7 @@ __do_global_ctors_aux (void)\n }\n \n /* Stick a call to __do_global_ctors_aux into the .init section.  */\n-\n-static void __attribute__ ((__unused__))\n-init_dummy (void)\n-{\n-  asm (INIT_SECTION_ASM_OP);\n-  CRT_CALL_STATIC_FUNCTION (__do_global_ctors_aux);\n-#ifdef FORCE_INIT_SECTION_ALIGN\n-  FORCE_INIT_SECTION_ALIGN;\n-#endif\n-  asm (TEXT_SECTION_ASM_OP);\n-#ifdef CRT_END_INIT_DUMMY\n-  CRT_END_INIT_DUMMY;\n-#endif\n-}\n-\n+CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, __do_global_ctors_aux)\n #else  /* OBJECT_FORMAT_ELF */\n \n /* Stick the real initialization code, followed by a normal sort of\n@@ -542,10 +517,7 @@ __do_global_ctors_aux (void)\t/* prologue goes in .text section */\n   atexit (__do_global_dtors);\n }\t\t\t\t/* epilogue and body go in .init section */\n \n-#ifdef FORCE_INIT_SECTION_ALIGN\n-FORCE_INIT_SECTION_ALIGN;\n-#endif\n-\n+FORCE_CODE_SECTION_ALIGN\n asm (TEXT_SECTION_ASM_OP);\n \n #endif /* OBJECT_FORMAT_ELF */"}, {"sha": "a7a7c5b73f9d7d8a73b982cf525abba024a7891c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cea3bd3e5a0a40eb90809bf90063da4911ba23b0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=cea3bd3e5a0a40eb90809bf90063da4911ba23b0", "patch": "@@ -5458,16 +5458,24 @@ finalization code.  If not defined, GCC will assume such a section does\n not exist.\n \n @findex CRT_CALL_STATIC_FUNCTION\n-@item CRT_CALL_STATIC_FUNCTION\n-If defined, a C statement that calls the function named as the sole\n-argument of this macro.  This is used in @file{crtstuff.c} if\n-@code{INIT_SECTION_ASM_OP} or @code{FINI_SECTION_ASM_OP} to calls to\n-initialization and finalization functions from the init and fini\n-sections.  By default, this macro is a simple function call.  Some\n+@item CRT_CALL_STATIC_FUNCTION (@var{section_op}, @var{function})\n+If defined, an ASM statement that switches to a different section\n+via @var{section_op}, calls @var{function}, and switches back to\n+the text section.  This is used in @file{crtstuff.c} if\n+@code{INIT_SECTION_ASM_OP} or @code{FINI_SECTION_ASM_OP} to calls\n+to initialization and finalization functions from the init and fini\n+sections.  By default, this macro uses a simple function call.  Some\n ports need hand-crafted assembly code to avoid dependencies on\n registers initialized in the function prologue or to ensure that\n constant pools don't end up too far way in the text section.\n \n+@findex FORCE_CODE_SECTION_ALIGN\n+@item FORCE_CODE_SECTION_ALIGN\n+If defined, an ASM statement that aligns a code section to some\n+arbitrary boundary.  This is used to force all fragments of the\n+@code{.init} and @code{.fini} sections to have to same alignment\n+and thus prevent the linker from having to add any padding.\n+\n @findex EXTRA_SECTIONS\n @findex in_text\n @findex in_data"}]}