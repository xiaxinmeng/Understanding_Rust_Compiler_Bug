{"sha": "bbcb84bba0a21ff367c95d3d0970926992b20cdd", "node_id": "C_kwDOANBUbNoAKGJiY2I4NGJiYTBhMjFmZjM2N2M5NWQzZDA5NzA5MjY5OTJiMjBjZGQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-07T15:00:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-08T17:35:15Z"}, "message": "libstdc++: Fix -Wsystem-headers warnings in tests\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/18_support/new_nothrow.cc: Add missing noexcept\n\tto operator delete replacements.\n\t* testsuite/20_util/any/cons/92156.cc: Disable\n\t-Winit-list-lifetime warnings from instantiating invalid\n\tspecialization of manager function.\n\t* testsuite/20_util/any/modifiers/92156.cc: Likewise.\n\t* testsuite/20_util/default_delete/void_neg.cc: Prune additional\n\tdiagnostics.\n\t* testsuite/20_util/headers/memory/synopsis.cc: Add missing\n\tnoexcept.\n\t* testsuite/20_util/shared_ptr/cons/void_neg.cc: Prune\n\tadditional diagnostic.\n\t* testsuite/20_util/unique_ptr/creation/for_overwrite.cc: Add\n\tmissing noexcept to operator delete replacements.\n\t* testsuite/21_strings/basic_string/cons/char/103919.cc:\n\tLikewise.\n\t* testsuite/23_containers/map/modifiers/emplace/92300.cc:\n\tLikewise.\n\t* testsuite/23_containers/map/modifiers/insert/92300.cc:\n\tLikewise.\n\t* testsuite/24_iterators/headers/iterator/range_access_c++11.cc:\n\tAdd missing noexcept to synopsis declarations.\n\t* testsuite/24_iterators/headers/iterator/range_access_c++14.cc:\n\tLikewise.\n\t* testsuite/24_iterators/headers/iterator/range_access_c++17.cc:\n\tLikewise.", "tree": {"sha": "eb9ff8ab25c6138126fbd920c2440c0f7cc65c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb9ff8ab25c6138126fbd920c2440c0f7cc65c4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbcb84bba0a21ff367c95d3d0970926992b20cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcb84bba0a21ff367c95d3d0970926992b20cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbcb84bba0a21ff367c95d3d0970926992b20cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbcb84bba0a21ff367c95d3d0970926992b20cdd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f6d25f19bae521c3d028bcdcd69019540b8c3b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f6d25f19bae521c3d028bcdcd69019540b8c3b9"}], "stats": {"total": 67, "additions": 40, "deletions": 27}, "files": [{"sha": "37806122bd017e338250b2bca9bd66a5ccd5d56f", "filename": "libstdc++-v3/testsuite/18_support/new_nothrow.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_nothrow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_nothrow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnew_nothrow.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -64,7 +64,13 @@ void* operator new (size_t n)\n     }\n }\n \n-void operator delete (void *p)\n+#if __cplusplus >= 201103L\n+#define NOEXCEPT noexcept\n+#else\n+#define NOEXCEPT\n+#endif\n+\n+void operator delete (void *p) NOEXCEPT\n {\n     ++delete_called;\n     if (p)\n@@ -77,18 +83,18 @@ void* operator new[] (size_t n)\n     return operator new(n);\n }\n \n-void operator delete[] (void *p)\n+void operator delete[] (void *p) NOEXCEPT\n {\n     ++delete_vec_called;\n     operator delete(p);\n }\n \n #if __cplusplus >= 201402L\n-void operator delete (void *p, std::size_t)\n+void operator delete (void *p, std::size_t) noexcept\n {\n   ::operator delete(p);\n }\n-void operator delete[] (void *p, std::size_t)\n+void operator delete[] (void *p, std::size_t) noexcept\n {\n   ::operator delete[](p);\n }"}, {"sha": "0e768df9a000a63928132b3f4613b459a95508a5", "filename": "libstdc++-v3/testsuite/20_util/any/cons/92156.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92156.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92156.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92156.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-options \"-Wno-init-list-lifetime\" }\n \n // Copyright (C) 2020-2022 Free Software Foundation, Inc.\n //"}, {"sha": "b98d0e8e92a0147d88e3210d5ebbb187e7c2de2e", "filename": "libstdc++-v3/testsuite/20_util/any/modifiers/92156.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F92156.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F92156.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmodifiers%2F92156.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-options \"-Wno-init-list-lifetime\" }\n \n // Copyright (C) 2020-2022 Free Software Foundation, Inc.\n //"}, {"sha": "04042c2d7450cc26ffefcb3e30b680c528be58ba", "filename": "libstdc++-v3/testsuite/20_util/default_delete/void_neg.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdefault_delete%2Fvoid_neg.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -27,3 +27,6 @@ void test01()\n   d(nullptr);   // { dg-error \"here\" }\n   // { dg-error \"delete pointer to incomplete type\" \"\" { target *-*-* } 0 }\n }\n+\n+// { dg-prune-output \"invalid application of 'sizeof' to a void type\" }\n+// { dg-prune-output \"deleting 'void*' is undefined\" }"}, {"sha": "b14c4278cd39ab2ba30bce1c81ac4a1d96a87d9a", "filename": "libstdc++-v3/testsuite/20_util/headers/memory/synopsis.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Fsynopsis.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -32,7 +32,7 @@ namespace std\n   template<class Ptr> struct pointer_traits;\n   template<class T> struct pointer_traits<T*>;\n \n-  void* align(size_t alignment, size_t size, void*& ptr, size_t& space);\n+  void* align(size_t alignment, size_t size, void*& ptr, size_t& space) noexcept;\n \n   struct allocator_arg_t;\n   extern const allocator_arg_t allocator_arg;"}, {"sha": "215a1393f573a7c49d977fc2299cbcf018944ae6", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/void_neg.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Fvoid_neg.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -31,3 +31,5 @@ void test01()\n using std::shared_ptr;\n using std::is_constructible;\n static_assert(!is_constructible<shared_ptr<void>, const void*>::value, \"\");\n+\n+// { dg-prune-output \"invalid application of 'sizeof' to a void type\" }"}, {"sha": "2eb3a9980a534ec6fe641ab8a18bfc2959d17da6", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/for_overwrite.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2Ffor_overwrite.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -41,8 +41,8 @@ void* operator new(std::size_t n)\n   return p;\n }\n \n-void operator delete(void* p) { std::free(p); }\n-void operator delete(void* p, std::size_t) { std::free(p); }\n+void operator delete(void* p) noexcept { std::free(p); }\n+void operator delete(void* p, std::size_t) noexcept { std::free(p); }\n \n void\n test01()"}, {"sha": "c11036b49c5b2943fd068a349c20b773d422e3a0", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/103919.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F103919.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F103919.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2F103919.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -14,12 +14,12 @@ void* operator new(std::size_t n)\n   return std::malloc(n);\n }\n \n-void operator delete(void* p)\n+void operator delete(void* p) noexcept\n {\n   std::free(p);\n }\n \n-void operator delete(void* p, std::size_t)\n+void operator delete(void* p, std::size_t) noexcept\n {\n   std::free(p);\n }"}, {"sha": "ab48386bd8b292f036aa9fc3d6c32142516eb4ff", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/emplace/92300.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92300.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -12,12 +12,12 @@ void* operator new(std::size_t n)\n   return std::malloc(n);\n }\n \n-void operator delete(void* p)\n+void operator delete(void* p) noexcept\n {\n   std::free(p);\n }\n \n-void operator delete(void* p, std::size_t)\n+void operator delete(void* p, std::size_t) noexcept\n {\n   std::free(p);\n }"}, {"sha": "51c0138e1a36888d4e72c0d47b5e4b4ca9d441ab", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/insert/92300.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F92300.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F92300.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Finsert%2F92300.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -12,12 +12,12 @@ void* operator new(std::size_t n)\n   return std::malloc(n);\n }\n \n-void operator delete(void* p)\n+void operator delete(void* p) noexcept\n {\n   std::free(p);\n }\n \n-void operator delete(void* p, std::size_t)\n+void operator delete(void* p, std::size_t) noexcept\n {\n   std::free(p);\n }"}, {"sha": "c6262a5a3be9ea2d442011abb47eb8b441ec9132", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access_c++11.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B11.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B11.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B11.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -28,6 +28,6 @@ namespace std\n   template<class C> auto end(C& c) -> decltype(c.end());\n   template<class C> auto end(const C& c) -> decltype(c.end());\n \n-  template<class T, size_t N> T* begin(T (&array)[N]);\n-  template<class T, size_t N> T* end(T (&array)[N]);\n+  template<class T, size_t N> T* begin(T (&array)[N]) noexcept;\n+  template<class T, size_t N> T* end(T (&array)[N]) noexcept;\n }"}, {"sha": "81e6e84819f6d5fb32efd663e6a7b26a6d26a40b", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access_c++14.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B14.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B14.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B14.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -28,8 +28,8 @@ namespace std\n   template<class C> auto end(C& c) -> decltype(c.end());\n   template<class C> auto end(const C& c) -> decltype(c.end());\n \n-  template<class T, size_t N> constexpr T* begin(T (&array)[N]);\n-  template<class T, size_t N> constexpr T* end(T (&array)[N]);\n+  template<class T, size_t N> constexpr T* begin(T (&array)[N]) noexcept;\n+  template<class T, size_t N> constexpr T* end(T (&array)[N]) noexcept;\n \n   template<class C> auto cbegin(const C& c) -> decltype(c.begin());\n   template<class C> auto cend(const C& c) -> decltype(c.end());\n@@ -41,14 +41,14 @@ namespace std\n   template<class C> auto rend(const C& c) -> decltype(c.rend());\n \n   template<class T, size_t N>\n-    reverse_iterator<T*> rbegin(T (&array)[N]);\n+    reverse_iterator<T*> rbegin(T (&array)[N]) noexcept;\n   template<class T, size_t N>\n-    reverse_iterator<T*> rend(T (&array)[N]);\n+    reverse_iterator<T*> rend(T (&array)[N]) noexcept;\n \n   template<class E>\n-    reverse_iterator<const E*> rbegin(initializer_list<E>);\n+    reverse_iterator<const E*> rbegin(initializer_list<E>) noexcept;\n   template<class E>\n-    reverse_iterator<const E*> rend(initializer_list<E>);\n+    reverse_iterator<const E*> rend(initializer_list<E>) noexcept;\n \n   template<class C>\n     auto crbegin(const C& c) -> decltype(std::rbegin(c));"}, {"sha": "912959436827bc5940e1ea1c23fd17b24047f039", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/range_access_c++17.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbcb84bba0a21ff367c95d3d0970926992b20cdd/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Frange_access_c%2B%2B17.cc?ref=bbcb84bba0a21ff367c95d3d0970926992b20cdd", "patch": "@@ -27,8 +27,8 @@ namespace std\n   template<class C> constexpr auto end(C& c) -> decltype(c.end());\n   template<class C> constexpr auto end(const C& c) -> decltype(c.end());\n \n-  template<class T, size_t N> constexpr T* begin(T (&array)[N]);\n-  template<class T, size_t N> constexpr T* end(T (&array)[N]);\n+  template<class T, size_t N> constexpr T* begin(T (&array)[N]) noexcept;\n+  template<class T, size_t N> constexpr T* end(T (&array)[N]) noexcept;\n \n   template<class C> constexpr auto cbegin(const C& c) -> decltype(c.begin());\n   template<class C> constexpr auto cend(const C& c) -> decltype(c.end());\n@@ -40,14 +40,14 @@ namespace std\n   template<class C> constexpr auto rend(const C& c) -> decltype(c.rend());\n \n   template<class T, size_t N>\n-    constexpr reverse_iterator<T*> rbegin(T (&array)[N]);\n+    constexpr reverse_iterator<T*> rbegin(T (&array)[N]) noexcept;\n   template<class T, size_t N>\n-    constexpr reverse_iterator<T*> rend(T (&array)[N]);\n+    constexpr reverse_iterator<T*> rend(T (&array)[N]) noexcept;\n \n   template<class E>\n-    constexpr reverse_iterator<const E*> rbegin(initializer_list<E>);\n+    constexpr reverse_iterator<const E*> rbegin(initializer_list<E>) noexcept;\n   template<class E>\n-    constexpr reverse_iterator<const E*> rend(initializer_list<E>);\n+    constexpr reverse_iterator<const E*> rend(initializer_list<E>) noexcept;\n \n   template<class C>\n     constexpr auto crbegin(const C& c) -> decltype(std::rbegin(c));"}]}