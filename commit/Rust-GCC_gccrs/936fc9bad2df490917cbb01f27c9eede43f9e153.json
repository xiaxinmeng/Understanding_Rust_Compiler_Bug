{"sha": "936fc9bad2df490917cbb01f27c9eede43f9e153", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2ZmM5YmFkMmRmNDkwOTE3Y2JiMDFmMjdjOWVlZGU0M2Y5ZTE1Mw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2008-09-11T12:41:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2008-09-11T12:41:36Z"}, "message": "cgraph.c (cgraph_release_function_body): Plug memory leak on ipa_transforms_to_apply and CFG...\n\n\n\t* cgraph.c (cgraph_release_function_body): Plug memory leak on\n\tipa_transforms_to_apply and CFG; ggc_free gimple df and struct function\n\tso we are sure we do not dangle it forever.\n\t* function.c (outer_function_chain, find_function_data): Remove.\n\t(function_context_stack): New.\n\t(push_function_context, pop_function_context): Update.\n\t* function.h (struct function): Remove pointer outer.\n\t(outer_function_chain, find_function_data): Remove.\n\t* stmt.c (force_label_rtx): Remove dead call of find_function_data.\n\nFrom-SVN: r140285", "tree": {"sha": "fb9ef6a13039426828243cade216220f16250a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb9ef6a13039426828243cade216220f16250a8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/936fc9bad2df490917cbb01f27c9eede43f9e153", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936fc9bad2df490917cbb01f27c9eede43f9e153", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936fc9bad2df490917cbb01f27c9eede43f9e153", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936fc9bad2df490917cbb01f27c9eede43f9e153/comments", "author": null, "committer": null, "parents": [{"sha": "b1d0a338a77399b28670e657bfb1085a2b879384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d0a338a77399b28670e657bfb1085a2b879384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d0a338a77399b28670e657bfb1085a2b879384"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "054cabcbc5db95c10689150a8f9d736901abe048", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=936fc9bad2df490917cbb01f27c9eede43f9e153", "patch": "@@ -1,3 +1,15 @@\n+2008-09-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c (cgraph_release_function_body): Plug memory leak on\n+\tipa_transforms_to_apply and CFG; ggc_free gimple df and struct function\n+\tso we are sure we do not dangle it forever.\n+\t* function.c (outer_function_chain, find_function_data): Remove.\n+\t(function_context_stack): New.\n+\t(push_function_context, pop_function_context): Update.\n+\t* function.h (struct function): Remove pointer outer.\n+\t(outer_function_chain, find_function_data): Remove.\n+\t* stmt.c (force_label_rtx): Remove dead call of find_function_data.\n+\n 2008-09-11  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/37448"}, {"sha": "67a42ffba6b0878db746d948ad4d81e048788d22", "filename": "gcc/cgraph.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=936fc9bad2df490917cbb01f27c9eede43f9e153", "patch": "@@ -846,21 +846,34 @@ cgraph_node_remove_callers (struct cgraph_node *node)\n void\n cgraph_release_function_body (struct cgraph_node *node)\n {\n-  if (DECL_STRUCT_FUNCTION (node->decl)\n-      && DECL_STRUCT_FUNCTION (node->decl)->gimple_df)\n+  if (DECL_STRUCT_FUNCTION (node->decl))\n     {\n       tree old_decl = current_function_decl;\n       push_cfun (DECL_STRUCT_FUNCTION (node->decl));\n-      current_function_decl = node->decl;\n-      delete_tree_ssa ();\n-      delete_tree_cfg_annotations ();\n-      cfun->eh = NULL;\n-      gimple_set_body (node->decl, NULL);\n-      current_function_decl = old_decl;\n+      if (cfun->gimple_df)\n+\t{\n+\t  current_function_decl = node->decl;\n+\t  delete_tree_ssa ();\n+\t  delete_tree_cfg_annotations ();\n+\t  cfun->eh = NULL;\n+\t  current_function_decl = old_decl;\n+\t}\n+      if (cfun->cfg)\n+\t{\n+\t  gcc_assert (dom_computed[0] == DOM_NONE);\n+\t  gcc_assert (dom_computed[1] == DOM_NONE);\n+\t  clear_edges ();\n+\t}\n       pop_cfun();\n+      gimple_set_body (node->decl, NULL);\n+      VEC_free (ipa_opt_pass, heap,\n+      \t\tDECL_STRUCT_FUNCTION (node->decl)->ipa_transforms_to_apply);\n+      /* Struct function hangs a lot of data that would leak if we didn't\n+         removed all pointers to it.   */\n+      ggc_free (DECL_STRUCT_FUNCTION (node->decl));\n+      DECL_STRUCT_FUNCTION (node->decl) = NULL;\n     }\n   DECL_SAVED_TREE (node->decl) = NULL;\n-  DECL_STRUCT_FUNCTION (node->decl) = NULL;\n   DECL_INITIAL (node->decl) = error_mark_node;\n }\n "}, {"sha": "41c5a46a62184ae907bcf57636050e5b6a8e82fb", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=936fc9bad2df490917cbb01f27c9eede43f9e153", "patch": "@@ -208,23 +208,14 @@ static void do_clobber_return_reg (rtx, void *);\n static void do_use_return_reg (rtx, void *);\n static void set_insn_locators (rtx, int) ATTRIBUTE_UNUSED;\n \f\n-/* Pointer to chain of `struct function' for containing functions.  */\n-struct function *outer_function_chain;\n-\n-/* Given a function decl for a containing function,\n-   return the `struct function' for it.  */\n-\n-struct function *\n-find_function_data (tree decl)\n-{\n-  struct function *p;\n+/* Stack of nested functions.  */\n+/* Keep track of the cfun stack.  */\n \n-  for (p = outer_function_chain; p; p = p->outer)\n-    if (p->decl == decl)\n-      return p;\n+typedef struct function *function_p;\n \n-  gcc_unreachable ();\n-}\n+DEF_VEC_P(function_p);\n+DEF_VEC_ALLOC_P(function_p,heap);\n+static VEC(function_p,heap) *function_context_stack;\n \n /* Save the current context for compilation of a nested function.\n    This is called from language-specific code.  */\n@@ -235,8 +226,7 @@ push_function_context (void)\n   if (cfun == 0)\n     allocate_struct_function (NULL, false);\n \n-  cfun->outer = outer_function_chain;\n-  outer_function_chain = cfun;\n+  VEC_safe_push (function_p, heap, function_context_stack, cfun);\n   set_cfun (NULL);\n }\n \n@@ -246,10 +236,8 @@ push_function_context (void)\n void\n pop_function_context (void)\n {\n-  struct function *p = outer_function_chain;\n-\n+  struct function *p = VEC_pop (function_p, function_context_stack);\n   set_cfun (p);\n-  outer_function_chain = p->outer;\n   current_function_decl = p->decl;\n \n   /* Reset variables that have known state during rtx generation.  */\n@@ -3905,13 +3893,6 @@ set_cfun (struct function *new_cfun)\n     }\n }\n \n-/* Keep track of the cfun stack.  */\n-\n-typedef struct function *function_p;\n-\n-DEF_VEC_P(function_p);\n-DEF_VEC_ALLOC_P(function_p,heap);\n-\n /* Initialized with NOGC, making this poisonous to the garbage collector.  */\n \n static VEC(function_p,heap) *cfun_stack;"}, {"sha": "16f2324abffbb3e7f659c62fa7d35a2126b19f0e", "filename": "gcc/function.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=936fc9bad2df490917cbb01f27c9eede43f9e153", "patch": "@@ -495,9 +495,6 @@ struct function GTY(())\n   /* Points to the FUNCTION_DECL of this function.  */\n   tree decl;\n \n-  /* Function containing this function, if any.  */\n-  struct function *outer;\n-\n   /* A PARM_DECL that should contain the static chain for this function.\n      It will be initialized at the beginning of the function.  */\n   tree static_chain_decl;\n@@ -610,9 +607,6 @@ extern GTY(()) struct function *cfun;\n    push_cfun or set_cfun.  */\n #define cfun (cfun + 0)\n \n-/* Pointer to chain of `struct function' for containing functions.  */\n-extern GTY(()) struct function *outer_function_chain;\n-\n /* Nonzero if we've already converted virtual regs to hard regs.  */\n extern int virtuals_instantiated;\n \n@@ -633,10 +627,6 @@ extern void instantiate_decl_rtl (rtx x);\n #define n_bbs_in_dom_tree (cfun->cfg->x_n_bbs_in_dom_tree)\n #define VALUE_HISTOGRAMS(fun) (fun)->value_histograms\n \n-/* Given a function decl for a containing function,\n-   return the `struct function' for it.  */\n-struct function *find_function_data (tree);\n-\n /* Identify BLOCKs referenced by more than one NOTE_INSN_BLOCK_{BEG,END},\n    and create duplicate blocks.  */\n extern void reorder_blocks (void);"}, {"sha": "286e5663c98e3a867f69dfd204577c8f12836108", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936fc9bad2df490917cbb01f27c9eede43f9e153/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=936fc9bad2df490917cbb01f27c9eede43f9e153", "patch": "@@ -151,15 +151,9 @@ force_label_rtx (tree label)\n {\n   rtx ref = label_rtx (label);\n   tree function = decl_function_context (label);\n-  struct function *p;\n \n   gcc_assert (function);\n \n-  if (function != current_function_decl)\n-    p = find_function_data (function);\n-  else\n-    p = cfun;\n-\n   forced_labels = gen_rtx_EXPR_LIST (VOIDmode, ref, forced_labels);\n   return ref;\n }"}]}