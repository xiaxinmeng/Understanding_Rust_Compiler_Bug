{"sha": "e693ddbec3e38aeff2e229785b9037ba0caa17c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY5M2RkYmVjM2UzOGFlZmYyZTIyOTc4NWI5MDM3YmEwY2FhMTdjOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-10-09T15:06:35Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-10-09T15:06:35Z"}, "message": "[Ada] Fix spurious error on derived record passed as Out parameter\n\nThis fixlet gets rid of a spurious error issued in the specific case of\na call to a subprogram taking an Out parameter of a discriminated record\ntype without default discriminants, if the actual parameter is the\nresult of the conversion to the record type of a variable whose type is\nderived from the record and has a representation clause.\n\nThe compiler was failing to initialize the temporary made around the\ncall because of the representation clause, but this is required for a\ntype with discriminants because discriminants may be read by the called\nsubprogram.\n\n2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Add_Call_By_Copy_Code): Initialize the temporary\n\tmade for an Out parameter if the formal type has discriminants.\n\ngcc/testsuite/\n\n\t* gnat.dg/derived_type5.adb, gnat.dg/derived_type5_pkg.ads: New\n\ttestcase.\n\nFrom-SVN: r264980", "tree": {"sha": "c2982d7ce8279b96ff13045aa674032b22d111e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2982d7ce8279b96ff13045aa674032b22d111e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e693ddbec3e38aeff2e229785b9037ba0caa17c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e693ddbec3e38aeff2e229785b9037ba0caa17c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e693ddbec3e38aeff2e229785b9037ba0caa17c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e693ddbec3e38aeff2e229785b9037ba0caa17c8/comments", "author": null, "committer": null, "parents": [{"sha": "38c2f655ffa5cf2f335c2772ec484702d891a7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38c2f655ffa5cf2f335c2772ec484702d891a7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38c2f655ffa5cf2f335c2772ec484702d891a7c3"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "854cadddd516898723749dacbe478e55e6d47a6a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e693ddbec3e38aeff2e229785b9037ba0caa17c8", "patch": "@@ -1,3 +1,8 @@\n+2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): Initialize the temporary\n+\tmade for an Out parameter if the formal type has discriminants.\n+\n 2018-10-09  Maroua Maalej  <maalej@adacore.com>\n \n \t* sem_spark.adb (Check_Declaration): fix bug related to non"}, {"sha": "076e0c28e506ef2e7ec65ef1888637190da274fe", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=e693ddbec3e38aeff2e229785b9037ba0caa17c8", "patch": "@@ -1321,8 +1321,14 @@ package body Exp_Ch6 is\n          --  bounds of the actual and build an uninitialized temporary of the\n          --  right size.\n \n+         --  If the formal is an out parameter with discriminants, the\n+         --  discriminants must be captured even if the rest of the object\n+         --  is in principle uninitialized, because the discriminants may\n+         --  be read by the called subprogram.\n+\n          if Ekind (Formal) = E_In_Out_Parameter\n            or else (Is_Array_Type (F_Typ) and then not Is_Constrained (F_Typ))\n+           or else Has_Discriminants (F_Typ)\n          then\n             if Nkind (Actual) = N_Type_Conversion then\n                if Conversion_OK (Actual) then"}, {"sha": "985635296ea37e0261f0c99ae1491bfa73828173", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e693ddbec3e38aeff2e229785b9037ba0caa17c8", "patch": "@@ -1,3 +1,8 @@\n+2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/derived_type5.adb, gnat.dg/derived_type5_pkg.ads: New\n+\ttestcase.\n+\n 2018-10-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/warn17.adb: New testcase."}, {"sha": "ff9b615f643b596733f9e43e7b78283b7498294b", "filename": "gcc/testsuite/gnat.dg/derived_type5.adb", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type5.adb?ref=e693ddbec3e38aeff2e229785b9037ba0caa17c8", "patch": "@@ -0,0 +1,10 @@\n+--  { dg-do compile }\n+\n+with Derived_Type5_Pkg; use Derived_Type5_Pkg;\n+\n+procedure Derived_Type5 is\n+  D : Derived;\n+begin\n+  Proc1 (Rec (D));\n+  Proc2 (Rec (D));\n+end;"}, {"sha": "0049791f568f2ef35a1a934bda64e9f52175dd27", "filename": "gcc/testsuite/gnat.dg/derived_type5_pkg.ads", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type5_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e693ddbec3e38aeff2e229785b9037ba0caa17c8/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type5_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fderived_type5_pkg.ads?ref=e693ddbec3e38aeff2e229785b9037ba0caa17c8", "patch": "@@ -0,0 +1,27 @@\n+package Derived_Type5_Pkg is\n+\n+   type T_Unsigned8  is new Natural range 0 .. (2 ** 8 - 1);\n+\n+   type Rec (Discriminant : T_Unsigned8) is record\n+      Fixed_Field : T_Unsigned8;\n+      case Discriminant is\n+         when 0 =>\n+            Optional_Field : T_unsigned8;\n+         when others =>\n+            null;\n+      end case;\n+   end record;\n+\n+   type Derived is new Rec (0);\n+\n+   for Derived use record\n+      Fixed_Field    at 0 range 0  .. 7;\n+      Discriminant   at 0 range 8  .. 15;\n+      Optional_Field at 0 range 16 .. 23;\n+   end record;\n+\n+   procedure Proc1 (R : in out Rec);\n+\n+   procedure Proc2 (R : out Rec);\n+\n+end Derived_Type5_Pkg;"}]}