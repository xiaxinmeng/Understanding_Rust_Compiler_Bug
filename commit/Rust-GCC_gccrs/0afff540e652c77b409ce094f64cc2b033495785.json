{"sha": "0afff540e652c77b409ce094f64cc2b033495785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFmZmY1NDBlNjUyYzc3YjQwOWNlMDk0ZjY0Y2MyYjAzMzQ5NTc4NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-01-27T18:57:51Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-01-27T18:57:51Z"}, "message": "libcpp: use better locations for _Pragma tokens (preprocessor/69126)\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/69126\n\t* c-c++-common/pr69126.c: New test case.\n\nlibcpp/ChangeLog:\n\tPR preprocessor/69126\n\t* directives.c (destringize_and_run): Add expansion_loc param; use\n\tit when handling unexpanded pragmas to fixup the locations of the\n\tsynthesized tokens.\n\t(_cpp_do__Pragma): Add expansion_loc param and use it when calling\n\tdestringize_and_run.\n\t* internal.h (_cpp_do__Pragma): Add expansion_loc param.\n\t* macro.c (builtin_macro): Pass expansion location of _Pragma to\n\t_cpp_do__Pragma.\n\nFrom-SVN: r232893", "tree": {"sha": "f6cecd18c9211abd83605d0385a9448c4f50e786", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cecd18c9211abd83605d0385a9448c4f50e786"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0afff540e652c77b409ce094f64cc2b033495785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afff540e652c77b409ce094f64cc2b033495785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0afff540e652c77b409ce094f64cc2b033495785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0afff540e652c77b409ce094f64cc2b033495785/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b45285fc2ee430b675f57e8c92310aaf77ba031e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b45285fc2ee430b675f57e8c92310aaf77ba031e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b45285fc2ee430b675f57e8c92310aaf77ba031e"}], "stats": {"total": 56, "additions": 51, "deletions": 5}, "files": [{"sha": "e674bf495bab48b21540f44da72027f7adfd3327", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afff540e652c77b409ce094f64cc2b033495785/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afff540e652c77b409ce094f64cc2b033495785/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0afff540e652c77b409ce094f64cc2b033495785", "patch": "@@ -1,3 +1,8 @@\n+2016-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69126\n+\t* c-c++-common/pr69126.c: New test case.\n+\n 2016-01-27  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.dg/tree-ssa/ivopt_5.c: New test."}, {"sha": "fb4dcfb0169f7a5964f550a2818af037254a36c9", "filename": "gcc/testsuite/c-c++-common/pr69126.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afff540e652c77b409ce094f64cc2b033495785/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afff540e652c77b409ce094f64cc2b033495785/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69126.c?ref=0afff540e652c77b409ce094f64cc2b033495785", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-options \"-Wunused-variable\" } */\n+\n+#pragma GCC diagnostic push\n+int f()\n+{\n+    _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\")\n+    int x;\n+    return 0;\n+}\n+#pragma GCC diagnostic pop\n+\n+#pragma GCC diagnostic push\n+#define MACRO \\\n+    _Pragma(\"GCC diagnostic ignored \\\"-Wunused-variable\\\"\") \\\n+    int x;\n+\n+int g()\n+{\n+    MACRO;\n+    return 0;\n+}\n+#pragma GCC diagnostic pop"}, {"sha": "eff304f09202d4b99c19d565a4605040a86b80a3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=0afff540e652c77b409ce094f64cc2b033495785", "patch": "@@ -1,3 +1,15 @@\n+2016-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/69126\n+\t* directives.c (destringize_and_run): Add expansion_loc param; use\n+\tit when handling unexpanded pragmas to fixup the locations of the\n+\tsynthesized tokens.\n+\t(_cpp_do__Pragma): Add expansion_loc param and use it when calling\n+\tdestringize_and_run.\n+\t* internal.h (_cpp_do__Pragma): Add expansion_loc param.\n+\t* macro.c (builtin_macro): Pass expansion location of _Pragma to\n+\t_cpp_do__Pragma.\n+\n 2016-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR preprocessor/69177"}, {"sha": "a1e1239bf9952bd9666dcdf96af0bb6c93baba2f", "filename": "libcpp/directives.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=0afff540e652c77b409ce094f64cc2b033495785", "patch": "@@ -1753,7 +1753,8 @@ get__Pragma_string (cpp_reader *pfile)\n /* Destringize IN into a temporary buffer, by removing the first \\ of\n    \\\" and \\\\ sequences, and process the result as a #pragma directive.  */\n static void\n-destringize_and_run (cpp_reader *pfile, const cpp_string *in)\n+destringize_and_run (cpp_reader *pfile, const cpp_string *in,\n+\t\t     source_location expansion_loc)\n {\n   const unsigned char *src, *limit;\n   char *dest, *result;\n@@ -1833,6 +1834,12 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in)\n \t      toks = XRESIZEVEC (cpp_token, toks, maxcount);\n \t    }\n \t  toks[count] = *cpp_get_token (pfile);\n+\t  /* _Pragma is a builtin, so we're not within a macro-map, and so\n+\t     the token locations are set to bogus ordinary locations\n+\t     near to, but after that of the \"_Pragma\".\n+\t     Paper over this by setting them equal to the location of the\n+\t     _Pragma itself (PR preprocessor/69126).  */\n+\t  toks[count].src_loc = expansion_loc;\n \t  /* Macros have been already expanded by cpp_get_token\n \t     if the pragma allowed expansion.  */\n \t  toks[count++].flags |= NO_EXPAND;\n@@ -1867,14 +1874,14 @@ destringize_and_run (cpp_reader *pfile, const cpp_string *in)\n \n /* Handle the _Pragma operator.  Return 0 on error, 1 if ok.  */\n int\n-_cpp_do__Pragma (cpp_reader *pfile)\n+_cpp_do__Pragma (cpp_reader *pfile, source_location expansion_loc)\n {\n   const cpp_token *string = get__Pragma_string (pfile);\n   pfile->directive_result.type = CPP_PADDING;\n \n   if (string)\n     {\n-      destringize_and_run (pfile, &string->val.str);\n+      destringize_and_run (pfile, &string->val.str, expansion_loc);\n       return 1;\n     }\n   cpp_error (pfile, CPP_DL_ERROR,"}, {"sha": "bafd48038651e61c82116cf88d576fe71fd4bfa9", "filename": "libcpp/internal.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=0afff540e652c77b409ce094f64cc2b033495785", "patch": "@@ -688,7 +688,7 @@ extern int _cpp_handle_directive (cpp_reader *, int);\n extern void _cpp_define_builtin (cpp_reader *, const char *);\n extern char ** _cpp_save_pragma_names (cpp_reader *);\n extern void _cpp_restore_pragma_names (cpp_reader *, char **);\n-extern int _cpp_do__Pragma (cpp_reader *);\n+extern int _cpp_do__Pragma (cpp_reader *, source_location);\n extern void _cpp_init_directives (cpp_reader *);\n extern void _cpp_init_internal_pragmas (cpp_reader *);\n extern void _cpp_do_file_change (cpp_reader *, enum lc_reason, const char *,"}, {"sha": "cfb09ceaddddbb28c1b0d4dc69c1fb26adb58eb7", "filename": "libcpp/macro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0afff540e652c77b409ce094f64cc2b033495785/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=0afff540e652c77b409ce094f64cc2b033495785", "patch": "@@ -430,7 +430,7 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node, source_location loc)\n       if (pfile->state.in_directive)\n \treturn 0;\n \n-      return _cpp_do__Pragma (pfile);\n+      return _cpp_do__Pragma (pfile, loc);\n     }\n \n   buf = _cpp_builtin_macro_text (pfile, node);"}]}