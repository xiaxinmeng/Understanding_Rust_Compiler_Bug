{"sha": "28a5fa54aa47877b6d254430adbf3ca0377beeaa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhhNWZhNTRhYTQ3ODc3YjZkMjU0NDMwYWRiZjNjYTAzNzdiZWVhYQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2019-10-04T21:26:27Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2019-10-04T21:26:27Z"}, "message": "builtins.c (compute_objsize): Add an argument.\n\n\ngcc/ChangeLog:\n\n\t* builtins.c (compute_objsize): Add an argument.\n\t* tree-object-size.c (addr_object_size): Same.\n\t(compute_builtin_object_size): Same.\n\t* tree-object-size.h (compute_builtin_object): Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wstringop-overflow-17.c: New test.\n\nFrom-SVN: r276602", "tree": {"sha": "dd44779d5912a216f85020529e623bb2e8acf025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd44779d5912a216f85020529e623bb2e8acf025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28a5fa54aa47877b6d254430adbf3ca0377beeaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a5fa54aa47877b6d254430adbf3ca0377beeaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a5fa54aa47877b6d254430adbf3ca0377beeaa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a5fa54aa47877b6d254430adbf3ca0377beeaa/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e8879cb36eca17e7b1ff8f2124bbc5ec3c6dc91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8879cb36eca17e7b1ff8f2124bbc5ec3c6dc91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8879cb36eca17e7b1ff8f2124bbc5ec3c6dc91"}], "stats": {"total": 69, "additions": 57, "deletions": 12}, "files": [{"sha": "6a1c17c0465a06859af415187b84605bb160c73c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28a5fa54aa47877b6d254430adbf3ca0377beeaa", "patch": "@@ -1,3 +1,10 @@\n+2019-10-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* builtins.c (compute_objsize): Add an argument.\n+\t* tree-object-size.c (addr_object_size): Same.\n+\t(compute_builtin_object_size): Same.\n+\t* tree-object-size.h (compute_builtin_object): Same.\n+\n 2019-10-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (inline_insns_single, inline_insns_auto): Fix typo."}, {"sha": "a1dc83c0b2493d1559862e75f41ed33316deecb6", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=28a5fa54aa47877b6d254430adbf3ca0377beeaa", "patch": "@@ -3587,7 +3587,7 @@ compute_objsize (tree dest, int ostype, tree *pdecl /* = NULL */)\n   /* Only the two least significant bits are meaningful.  */\n   ostype &= 3;\n \n-  if (compute_builtin_object_size (dest, ostype, &size))\n+  if (compute_builtin_object_size (dest, ostype, &size, pdecl))\n     return build_int_cst (sizetype, size);\n \n   if (TREE_CODE (dest) == SSA_NAME)"}, {"sha": "9a5adf787dd4ebf9014fff2c6251f9121f376832", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28a5fa54aa47877b6d254430adbf3ca0377beeaa", "patch": "@@ -1,3 +1,7 @@\n+2019-10-04  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wstringop-overflow-17.c: New test.\n+\n 2019-10-04  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran.91959"}, {"sha": "de22c98c753fe793da4d1af37e2d25260c116031", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow-17.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow-17.c?ref=28a5fa54aa47877b6d254430adbf3ca0377beeaa", "patch": "@@ -0,0 +1,20 @@\n+/* Test to verify that -Wstringop-overflow mentions the referenced object\n+   i.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall\" } */\n+\n+static void copy_n (char *d, const char *s, int n)\n+{\n+  while (n--)\n+    *d++ = *s++;\n+  *d = 0;           // { dg-warning \"writing 1 byte into a region of size 0\" }\n+}\n+\n+void sink (void*);\n+\n+void call_copy_n (const char *s)\n+{\n+  char a[3];        // { dg-message \"destination object declared here\" }\n+  copy_n (a, \"1234567\", 7);\n+  sink (a);\n+}"}, {"sha": "db9b5694e85d2afce4df21e730823efd3dfc5f7e", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=28a5fa54aa47877b6d254430adbf3ca0377beeaa", "patch": "@@ -54,7 +54,8 @@ static const unsigned HOST_WIDE_INT unknown[4] = {\n \n static tree compute_object_offset (const_tree, const_tree);\n static bool addr_object_size (struct object_size_info *,\n-\t\t\t      const_tree, int, unsigned HOST_WIDE_INT *);\n+\t\t\t      const_tree, int, unsigned HOST_WIDE_INT *,\n+\t\t\t      tree * = NULL);\n static unsigned HOST_WIDE_INT alloc_object_size (const gcall *, int);\n static tree pass_through_call (const gcall *);\n static void collect_object_sizes_for (struct object_size_info *, tree);\n@@ -172,10 +173,15 @@ compute_object_offset (const_tree expr, const_tree var)\n \n static bool\n addr_object_size (struct object_size_info *osi, const_tree ptr,\n-\t\t  int object_size_type, unsigned HOST_WIDE_INT *psize)\n+\t\t  int object_size_type, unsigned HOST_WIDE_INT *psize,\n+\t\t  tree *pdecl /* = NULL */)\n {\n   tree pt_var, pt_var_size = NULL_TREE, var_size, bytes;\n \n+  tree dummy;\n+  if (!pdecl)\n+    pdecl = &dummy;\n+\n   gcc_assert (TREE_CODE (ptr) == ADDR_EXPR);\n \n   /* Set to unknown and overwrite just before returning if the size\n@@ -195,7 +201,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t  || TREE_CODE (TREE_OPERAND (pt_var, 0)) != SSA_NAME)\n \t{\n \t  compute_builtin_object_size (TREE_OPERAND (pt_var, 0),\n-\t\t\t\t       object_size_type & ~1, &sz);\n+\t\t\t\t       object_size_type & ~1, &sz, pdecl);\n \t}\n       else\n \t{\n@@ -232,7 +238,10 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t   && DECL_P (pt_var)\n \t   && tree_fits_uhwi_p (DECL_SIZE_UNIT (pt_var))\n \t   && tree_to_uhwi (DECL_SIZE_UNIT (pt_var)) < offset_limit)\n-    pt_var_size = DECL_SIZE_UNIT (pt_var);\n+    {\n+      *pdecl = pt_var;\n+      pt_var_size = DECL_SIZE_UNIT (pt_var);\n+    }\n   else if (pt_var\n \t   && TREE_CODE (pt_var) == STRING_CST\n \t   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n@@ -478,13 +487,16 @@ pass_through_call (const gcall *call)\n \n \n /* Compute __builtin_object_size value for PTR and set *PSIZE to\n-   the resulting value.  OBJECT_SIZE_TYPE is the second argument\n-   to __builtin_object_size.  Return true on success and false\n-   when the object size could not be determined.  */\n+   the resulting value.  If the declared object is known and PDECL\n+   is nonnull, sets *PDECL to the object's DECL.  OBJECT_SIZE_TYPE\n+   is the second argument   to __builtin_object_size.\n+   Returns true on success and false when the object size could not\n+   be determined.  */\n \n bool\n compute_builtin_object_size (tree ptr, int object_size_type,\n-\t\t\t     unsigned HOST_WIDE_INT *psize)\n+\t\t\t     unsigned HOST_WIDE_INT *psize,\n+\t\t\t     tree *pdecl /* = NULL */)\n {\n   gcc_assert (object_size_type >= 0 && object_size_type <= 3);\n \n@@ -496,7 +508,7 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n     init_offset_limit ();\n \n   if (TREE_CODE (ptr) == ADDR_EXPR)\n-    return addr_object_size (NULL, ptr, object_size_type, psize);\n+    return addr_object_size (NULL, ptr, object_size_type, psize, pdecl);\n \n   if (TREE_CODE (ptr) != SSA_NAME\n       || !POINTER_TYPE_P (TREE_TYPE (ptr)))\n@@ -520,7 +532,8 @@ compute_builtin_object_size (tree ptr, int object_size_type,\n \t      ptr = gimple_assign_rhs1 (def);\n \n \t      if (tree_fits_shwi_p (offset)\n-\t\t  && compute_builtin_object_size (ptr, object_size_type, psize))\n+\t\t  && compute_builtin_object_size (ptr, object_size_type,\n+\t\t\t\t\t\t  psize, pdecl))\n \t\t{\n \t\t  /* Return zero when the offset is out of bounds.  */\n \t\t  unsigned HOST_WIDE_INT off = tree_to_shwi (offset);"}, {"sha": "65528b3a696fac3cd567c80163597b6d2442d4d5", "filename": "gcc/tree-object-size.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftree-object-size.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28a5fa54aa47877b6d254430adbf3ca0377beeaa/gcc%2Ftree-object-size.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.h?ref=28a5fa54aa47877b6d254430adbf3ca0377beeaa", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern void init_object_sizes (void);\n extern void fini_object_sizes (void);\n-extern bool compute_builtin_object_size (tree, int, unsigned HOST_WIDE_INT *);\n+extern bool compute_builtin_object_size (tree, int, unsigned HOST_WIDE_INT *,\n+\t\t\t\t\t tree * = NULL);\n \n #endif  // GCC_TREE_OBJECT_SIZE_H"}]}