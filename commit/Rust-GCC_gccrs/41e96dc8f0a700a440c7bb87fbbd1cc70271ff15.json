{"sha": "41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlOTZkYzhmMGE3MDBhNDQwYzdiYjg3ZmJiZDFjYzcwMjcxZmYxNQ==", "commit": {"author": {"name": "Caroline Tice", "email": "cmtice@google.com", "date": "2013-09-08T23:35:14Z"}, "committer": {"name": "Caroline Tice", "email": "ctice@gcc.gnu.org", "date": "2013-09-08T23:35:14Z"}, "message": "Update libvtv testsuite so that most of the tests now run under\nthe dejagnu test harness.\n\nFrom-SVN: r202373", "tree": {"sha": "7aed39930d05ef1f28db4df7227d5b55ec792763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aed39930d05ef1f28db4df7227d5b55ec792763"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/comments", "author": {"login": "cmtice", "id": 5561162, "node_id": "MDQ6VXNlcjU1NjExNjI=", "avatar_url": "https://avatars.githubusercontent.com/u/5561162?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmtice", "html_url": "https://github.com/cmtice", "followers_url": "https://api.github.com/users/cmtice/followers", "following_url": "https://api.github.com/users/cmtice/following{/other_user}", "gists_url": "https://api.github.com/users/cmtice/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmtice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmtice/subscriptions", "organizations_url": "https://api.github.com/users/cmtice/orgs", "repos_url": "https://api.github.com/users/cmtice/repos", "events_url": "https://api.github.com/users/cmtice/events{/privacy}", "received_events_url": "https://api.github.com/users/cmtice/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f085f27e124563b5cbede337426695c4ed43693b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f085f27e124563b5cbede337426695c4ed43693b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f085f27e124563b5cbede337426695c4ed43693b"}], "stats": {"total": 2333, "additions": 2132, "deletions": 201}, "files": [{"sha": "20092f4d0a3ae148f72e8c2866bda5415bce9747", "filename": "libvtv/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2FChangeLog?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,84 @@\n+2013-09-08  Caroline Tice  <cmtice@google.com>\n+\n+\t* testsuite/event-main.cc:  Move to libvtv.cc subdirectory.\n+\t* testsuite/environment.cc: Ditto.\n+\t* testsuite/template-list2.cc: Ditto.\n+\t* testsuite/event.h: Ditto.\n+\t* testsuite/dataentry.cc: Ditto.\n+\t* testsuite/event-private.h: Ditto.\n+\t* testsuite/virtual_inheritance.cc: Ditto.\n+\t* testsuite/povray-derived.cc: Ditto.\n+\t* testsuite/nested_vcall_test.cc: Ditto.\n+\t* testsuite/template-list-iostream.cc: Ditto.\n+\t* testsuite/parts-test-extra-parts-views.h:  Ditto.\n+\t* testsuite/virtfunc-test.cc: Ditto.\n+\t* testsuite/parts-test-extra-parts.h: Ditto.\n+\t* testsuite/const_vtable.cc: Ditto.\n+\t* testsuite/template-list.cc: Ditto.\n+\t* testsuite/dup_name.cc: Ditto.\n+\t* testsuite/thunk.cc: Ditto.\n+\t* testsuite/parts-test-main.h: Ditto.\n+\t* testsuite/mul_inh.cc: Ditto.\n+\t* testsuite/test1.cc: Ditto.\n+\t* testsuite/bb_tests.cc: Ditto.\n+\t* testsuite/v8-test-2.cc: Ditto.\n+\t* testsuite/thunk_vtable_map_attack.cc: Ditto.\n+\t* testsuite/xlan-test.cc: Ditto.\n+\t* testsuite/parts-test-main.cpp: Move to libvtv.cc subdirectory and\n+\tchange file extension from .cc to .cpp.\n+\t* testsuite/event-definitions.cpp: Ditto.\n+\t* testsuite/event-main.cpp: Ditto.\n+\t* testsuite/derived-main.cpp: Ditto.\n+\t* testsuite/derived-lib.cpp: Ditto.\n+\t* testsuite/event-private.cpp: Ditto.\n+\t* testsuite/parts-test-extra-parts-views.cpp: Ditto.\n+\t* testsuite/parts-test-extra-parts.cpp: Ditto.\n+\t* testsuite/parts-test.list: Move to libvtv.cc subdirectory.  Change\n+\tfile extensions inside file from .cc to .cpp.\n+\t* testsuite/event.list: Ditto.\n+\t* testsuite/derived.list: Ditto.\n+\t* testsuite/register_pair.cc: Move to libvtv.cc; rename file to\n+\tregister_set_pair.cc; include stdlib.h, stdio.h stdint.h string.h\n+\t(KEY_TYPE_FIXED_SIZE): New define.\n+\t(key_buffer, name_string, fake_names): New global variables.\n+\t(generate_names): New function.\n+\t(vtv_string_hans): New function.\n+\t(main): Add call to generate_names. Update middle for-loop to\n+\tinitialize new parameters for __VLTRegisterPair... calls; move calls\n+\tto __VLTRegisterPair... to middle for-loop. Add calls to\n+\t__VLTRegisterSet...\n+\t* testsuite/register_pair_mt.cc: Ditto; renamed to\n+\tregister_set_pair_mt.cc\n+\t* testsuite/libvtv.cc/vtv.exp:  New file.\n+\t* testsuite/libvtv.mempool.cc/mempool.exp:  New file.\n+\t* testsuite/libvtv.mt.cc/mt.exp: New file.\n+\t* testsuite/lib/libvtv.exp:  New file.\n+\t* testsuite/lib/libvtv-dg.exp:  New file.\n+\t* testsuite/config/default.exp: New file.\n+\t* testsuite/Makefile.am:  New file. (Old file was moved to other-tests\n+\tsubdirectory.)\n+\t* testsuite/Makefile.in: New file (generated).\n+\t* testsuite/mempool_negative.c: Change to C++ file; move to\n+\tlibvtv.mempool.cc; include vtv-change-permission.h.\n+\t(main):  Add call to __VLTChangePermission.\n+\t* testsuite/mempool_positive.c: Change to C++ file; move to\n+\tlibvtv.mempool.cc; include vtv-change-permission.h.\n+\t(main): Add call to __VLTChangePermission.\n+\t* testsuite/temp_deriv3.cc:  Move to other-tests subdirectory.\n+\t* testsuite/environment-fail-64.s: Ditto.\n+\t* testsutite/dlopen.cc: Ditto.\n+\t* testsuite/so.cc: Ditto.\n+\t* testsuite/temp_deriv2.cc: Ditto.\n+\t* testsuite/field-test.cc: Ditto.\n+\t* testsuite/dlopen_mt.cc: Ditto.\n+\t* testsuite/environment-fail-32.s: Ditto.\n+\t* testsuite/temp_deriv.cc: Ditto.\n+\t* testsuite/replace-fail.cc: Ditto.\n+\t* testsuite/other-tests/Makefile.am:  New file.  Copied from the\n+\tMakefile.am that used to be in testsuite directory.\n+\t* testsuite/other-tests/Makefile.in: Generated. (New file).\n+\t* testsuite/other-tests/README:  New file.\n+\n 2013-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* testsuite/Makefile.am: Remove #if ENABLE_VTABLE_VERIFY check around"}, {"sha": "a2c1e9f4ea311e7ad5489a26137a95be8c5ba771", "filename": "libvtv/testsuite/Makefile.am", "status": "modified", "additions": 8, "deletions": 49, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2FMakefile.am?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,52 +1,11 @@\n-## Makefile for the testsuite subdirectory of the VTV library.\n-##\n-## Copyright (C) 2013 Free Software Foundation, Inc.\n-##\n-## Process this file with automake to produce Makefile.in.\n-##\n-## This file is part of the Vtable Verification (VTV) Library.  This\n-## library is free software; you can redistribute it and/or modify it\n-## under the terms of the GNU General Public License as published by\n-## the Free Software Foundation; either version 3, or (at your option)\n-## any later version.\n+## Process this with automake to create Makefile.in\n \n-## This library is distributed in the hope that it will be useful, but\n-## WITHOUT ANY WARRANTY; without even the implied warranty of\n-## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-## General Public License for more details.\n+AUTOMAKE_OPTIONS = foreign dejagnu\n \n-## You should have received a copy of the GNU General Public License\n-## along with this library; see the file COPYING3.  If not see\n-## <http://www.gnu.org/licenses/>.\n+EXPECT = `if [ -f ../../expect/expect ] ; then \\\n+\t  echo ../../expect/expect ; \\\n+\t  else echo expect ; fi`\n \n-AUTOMAKE_OPTIONS = nostdinc\n-\n-# Runs the testsuite via a script.\n-\n-# Create subdirectories.\n-stamp-subdir:\n-\tif test ! -d lib64; then \\\n-\t  mkdir -p lib64; \\\n-\tfi; \\\n-\tif test ! -d lib32; then \\\n-\t  mkdir -p lib32; \\\n-\tfi; \\\n-\techo `date` > stamp-subdir;\n-\n-\n-testing_script=${libvtv_srcdir}/scripts/run-testsuite.sh\n-check-script: ${testing_script} stamp-subdir\n-\t-@(chmod +x ${testing_script}; \\\n-\t${testing_script} ${libvtv_srcdir} ${libvtv_builddir})\n-\n-check-am:\n-\t$(MAKE) $(AM_MAKEFLAGS) check-script\n-\n-.PHONY: check-script\n-\n-# By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.out environment-fail-*  stamp-* replace-fail-*\n-\n-# To remove directories.\n-clean-local:\n-\trm -rf lib*\n+RUNTEST = `if [ -f ${srcdir}/../../dejagnu/runtest ] ; then \\\n+\t   echo ${srcdir}/../../dejagnu/runtest ; \\\n+\t   else echo runtest ;  fi`"}, {"sha": "ba28e744f95aadd4b3cb6a623ab30979e0eb6317", "filename": "libvtv/testsuite/Makefile.in", "status": "modified", "additions": 63, "deletions": 42, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2FMakefile.in?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -53,6 +53,8 @@ mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_CLEAN_FILES =\n CONFIG_CLEAN_VPATH_FILES =\n SOURCES =\n+DEJATOOL = $(PACKAGE)\n+RUNTESTDEFAULTFLAGS = --tool $$tool --srcdir $$srcdir\n ACLOCAL = @ACLOCAL@\n AMTAR = @AMTAR@\n AR = @AR@\n@@ -190,11 +192,15 @@ top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n toplevel_builddir = @toplevel_builddir@\n toplevel_srcdir = @toplevel_srcdir@\n-AUTOMAKE_OPTIONS = nostdinc\n-testing_script = ${libvtv_srcdir}/scripts/run-testsuite.sh\n+AUTOMAKE_OPTIONS = foreign dejagnu\n+EXPECT = `if [ -f ../../expect/expect ] ; then \\\n+\t  echo ../../expect/expect ; \\\n+\t  else echo expect ; fi`\n+\n+RUNTEST = `if [ -f ${srcdir}/../../dejagnu/runtest ] ; then \\\n+\t   echo ${srcdir}/../../dejagnu/runtest ; \\\n+\t   else echo runtest ;  fi`\n \n-# By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.out environment-fail-*  stamp-* replace-fail-*\n all: all-am\n \n .SUFFIXES:\n@@ -240,7 +246,46 @@ TAGS:\n ctags: CTAGS\n CTAGS:\n \n+\n+check-DEJAGNU: site.exp\n+\tsrcdir=`$(am__cd) $(srcdir) && pwd`; export srcdir; \\\n+\tEXPECT=$(EXPECT); export EXPECT; \\\n+\truntest=$(RUNTEST); \\\n+\tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n+\t  exit_status=0; l='$(DEJATOOL)'; for tool in $$l; do \\\n+\t    if $$runtest $(AM_RUNTESTFLAGS) $(RUNTESTDEFAULTFLAGS) $(RUNTESTFLAGS); \\\n+\t    then :; else exit_status=1; fi; \\\n+\t  done; \\\n+\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\tfi; \\\n+\texit $$exit_status\n+site.exp: Makefile\n+\t@echo 'Making a new site.exp file...'\n+\t@echo '## these variables are automatically generated by make ##' >site.tmp\n+\t@echo '# Do not edit here.  If you wish to override these values' >>site.tmp\n+\t@echo '# edit the last section' >>site.tmp\n+\t@echo 'set srcdir $(srcdir)' >>site.tmp\n+\t@echo \"set objdir `pwd`\" >>site.tmp\n+\t@echo 'set build_alias \"$(build_alias)\"' >>site.tmp\n+\t@echo 'set build_triplet $(build_triplet)' >>site.tmp\n+\t@echo 'set host_alias \"$(host_alias)\"' >>site.tmp\n+\t@echo 'set host_triplet $(host_triplet)' >>site.tmp\n+\t@echo 'set target_alias \"$(target_alias)\"' >>site.tmp\n+\t@echo 'set target_triplet $(target_triplet)' >>site.tmp\n+\t@echo '## All variables above are generated by configure. Do Not Edit ##' >>site.tmp\n+\t@test ! -f site.exp || \\\n+\t  sed '1,/^## All variables above are.*##/ d' site.exp >> site.tmp\n+\t@-rm -f site.bak\n+\t@test ! -f site.exp || mv site.exp site.bak\n+\t@mv site.tmp site.exp\n+\n+distclean-DEJAGNU:\n+\t-rm -f site.exp site.bak\n+\t-l='$(DEJATOOL)'; for tool in $$l; do \\\n+\t  rm -f $$tool.sum $$tool.log; \\\n+\tdone\n check-am: all-am\n+\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU\n check: check-am\n all-am: Makefile\n installdirs:\n@@ -261,7 +306,6 @@ install-strip:\n mostlyclean-generic:\n \n clean-generic:\n-\t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n \n distclean-generic:\n \t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n@@ -272,11 +316,11 @@ maintainer-clean-generic:\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n clean: clean-am\n \n-clean-am: clean-generic clean-libtool clean-local mostlyclean-am\n+clean-am: clean-generic clean-libtool mostlyclean-am\n \n distclean: distclean-am\n \t-rm -f Makefile\n-distclean-am: clean-am distclean-generic\n+distclean-am: clean-am distclean-DEJAGNU distclean-generic\n \n dvi: dvi-am\n \n@@ -336,43 +380,20 @@ ps-am:\n \n uninstall-am:\n \n-.MAKE: install-am install-strip\n-\n-.PHONY: all all-am check check-am clean clean-generic clean-libtool \\\n-\tclean-local distclean distclean-generic distclean-libtool dvi \\\n-\tdvi-am html html-am info info-am install install-am \\\n-\tinstall-data install-data-am install-dvi install-dvi-am \\\n-\tinstall-exec install-exec-am install-html install-html-am \\\n-\tinstall-info install-info-am install-man install-pdf \\\n-\tinstall-pdf-am install-ps install-ps-am install-strip \\\n-\tinstallcheck installcheck-am installdirs maintainer-clean \\\n-\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n-\tmostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am\n-\n-\n-# Runs the testsuite via a script.\n-\n-# Create subdirectories.\n-stamp-subdir:\n-\tif test ! -d lib64; then \\\n-\t  mkdir -p lib64; \\\n-\tfi; \\\n-\tif test ! -d lib32; then \\\n-\t  mkdir -p lib32; \\\n-\tfi; \\\n-\techo `date` > stamp-subdir;\n-check-script: ${testing_script} stamp-subdir\n-\t-@(chmod +x ${testing_script}; \\\n-\t${testing_script} ${libvtv_srcdir} ${libvtv_builddir})\n-\n-check-am:\n-\t$(MAKE) $(AM_MAKEFLAGS) check-script\n+.MAKE: check-am install-am install-strip\n \n-.PHONY: check-script\n+.PHONY: all all-am check check-DEJAGNU check-am clean clean-generic \\\n+\tclean-libtool distclean distclean-DEJAGNU distclean-generic \\\n+\tdistclean-libtool dvi dvi-am html html-am info info-am install \\\n+\tinstall-am install-data install-data-am install-dvi \\\n+\tinstall-dvi-am install-exec install-exec-am install-html \\\n+\tinstall-html-am install-info install-info-am install-man \\\n+\tinstall-pdf install-pdf-am install-ps install-ps-am \\\n+\tinstall-strip installcheck installcheck-am installdirs \\\n+\tmaintainer-clean maintainer-clean-generic mostlyclean \\\n+\tmostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \\\n+\tuninstall uninstall-am\n \n-# To remove directories.\n-clean-local:\n-\trm -rf lib*\n \n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded."}, {"sha": "6d5eba84f1000f1dd4247f92c22fe801e0b6e972", "filename": "libvtv/testsuite/config/default.exp", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fconfig%2Fdefault.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fconfig%2Fdefault.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fconfig%2Fdefault.exp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,17 @@\n+#   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+load_lib \"standard.exp\""}, {"sha": "83226fdd03f7bfd9dd6e9ee0fe1875f94f779ebe", "filename": "libvtv/testsuite/event.list", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fevent.list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fevent.list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fevent.list?ref=f085f27e124563b5cbede337426695c4ed43693b", "patch": "@@ -1 +0,0 @@\n-event-main.cc event-definitions.cc event-private.cc\n\\ No newline at end of file"}, {"sha": "b140c194cdcec9c6a5987ee094003ef07ad077d6", "filename": "libvtv/testsuite/lib/libvtv-dg.exp", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flib%2Flibvtv-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flib%2Flibvtv-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flib%2Flibvtv-dg.exp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,21 @@\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+proc libvtv-dg-test { prog do_what extra_tool_flags } {\n+    return [gcc-dg-test-1 libvtv_target_compile $prog $do_what $extra_tool_flags]\n+}\n+\n+proc libvtv-dg-prune { system text } {\n+    return [gcc-dg-prune $system $text]\n+}"}, {"sha": "83674be29a275d0c1e3f36aeab2c2c1475929188", "filename": "libvtv/testsuite/lib/libvtv.exp", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flib%2Flibvtv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flib%2Flibvtv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flib%2Flibvtv.exp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,220 @@\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# Damn dejagnu for not having proper library search paths for load_lib.\n+# We have to explicitly load everything that gcc-dg.exp wants to load.\n+\n+proc load_gcc_lib { filename } {\n+    global srcdir loaded_libs\n+\n+    load_file $srcdir/../../gcc/testsuite/lib/$filename\n+    set loaded_libs($filename) \"\"\n+}\n+\n+load_lib dg.exp\n+load_gcc_lib file-format.exp\n+load_gcc_lib target-supports.exp\n+load_gcc_lib target-supports-dg.exp\n+load_gcc_lib scanasm.exp\n+load_gcc_lib scandump.exp\n+load_gcc_lib scanrtl.exp\n+load_gcc_lib scantree.exp\n+load_gcc_lib scanipa.exp\n+load_gcc_lib prune.exp\n+load_gcc_lib target-libpath.exp\n+load_gcc_lib wrapper.exp\n+load_gcc_lib gcc-defs.exp\n+load_gcc_lib torture-options.exp\n+load_gcc_lib timeout.exp\n+load_gcc_lib timeout-dg.exp\n+load_gcc_lib fortran-modules.exp\n+load_gcc_lib gcc-dg.exp\n+\n+set dg-do-what-default run\n+\n+#\n+# GCC_UNDER_TEST is the compiler under test.\n+#\n+\n+set libvtv_compile_options \"\"\n+\n+#\n+# libvtv_init\n+#\n+\n+if [info exists TOOL_OPTIONS] {\n+    set multilibs [get_multilibs $TOOL_OPTIONS]\n+} else {\n+    set multilibs [get_multilibs]\n+}\n+\n+proc libvtv_init { args } {\n+    global srcdir blddir objdir tool_root_dir\n+    global libvtv_initialized\n+    global tmpdir\n+    global blddir\n+    global gluefile wrap_flags\n+    global ALWAYS_CFLAGS\n+    global CFLAGS\n+    global TOOL_EXECUTABLE TOOL_OPTIONS\n+    global GCC_UNDER_TEST\n+    global TESTING_IN_BUILD_TREE\n+    global target_triplet\n+    global always_ld_library_path\n+\n+    set blddir [lookfor_file [get_multilibs] libvtv]\n+\n+    # We set LC_ALL and LANG to C so that we get the same error\n+    # messages as expected.\n+    setenv LC_ALL C\n+    setenv LANG C\n+\n+    if ![info exists GCC_UNDER_TEST] then {\n+\tif [info exists TOOL_EXECUTABLE] {\n+\t    set GCC_UNDER_TEST $TOOL_EXECUTABLE\n+\t} else {\n+\t    set GCC_UNDER_TEST \"[find_gcc]\"\n+\t}\n+    }\n+\n+    if ![info exists tmpdir] {\n+\tset tmpdir \"/tmp\"\n+    }\n+\n+    if [info exists gluefile] {\n+\tunset gluefile\n+    }\n+\n+    if {![info exists CFLAGS]} {\n+\tset CFLAGS \"\"\n+    }\n+\n+    # Locate libgcc.a so we don't need to account for different values of\n+    # SHLIB_EXT on different platforms\n+    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n+    if {$gccdir != \"\"} {\n+\tset gccdir [file dirname $gccdir]\n+    }\n+\n+    # Compute what needs to be put into LD_LIBRARY_PATH\n+    set always_ld_library_path \".:${blddir}/.libs\"\n+\n+    # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n+    if {$gccdir != \"\"} {\n+\t# Add AIX pthread directory first.\n+\tif { [llength [glob -nocomplain ${gccdir}/pthread/libgcc_s*.a]] >= 1 } {\n+\t    append always_ld_library_path \":${gccdir}/pthread\"\n+\t}\n+\tappend always_ld_library_path \":${gccdir}\"\n+\tset compiler [lindex $GCC_UNDER_TEST 0]\n+\n+\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n+\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n+\t    set mldir \"\"\n+\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n+\t    set mldir [string trimright $mldir \"\\;@\"]\n+\t    if { \"$mldir\" == \".\" } {\n+\t      continue\n+\t    }\n+\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n+\t      append always_ld_library_path \":${gccdir}/${mldir}\"\n+\t    }\n+\t  }\n+\t}\n+    }\n+\n+    set ALWAYS_CFLAGS \"\"\n+    if { $blddir != \"\" } {\n+\tlappend ALWAYS_CFLAGS \"additional_flags=-B${blddir}/\"\n+\tlappend ALWAYS_CFLAGS \"additional_flags=-I${blddir}\"\n+\tlappend ALWAYS_CFLAGS \"ldflags=-L${blddir}/.libs\"\n+    }\n+    lappend ALWAYS_CFLAGS \"additional_flags=-I${srcdir}/..\"\n+\n+    if [istarget *-*-darwin*] {\n+\tlappend ALWAYS_CFLAGS \"additional_flags=-shared-libgcc\"\n+    }\n+\n+    if [info exists TOOL_OPTIONS] {\n+\tlappend ALWAYS_CFLAGS \"additional_flags=$TOOL_OPTIONS\"\n+    }\n+\n+    # Make sure that lines are not wrapped.  That can confuse the\n+    # error-message parsing machinery.\n+    lappend ALWAYS_CFLAGS \"additional_flags=-fmessage-length=0\"\n+\n+    # Turn on vtable verification\n+    lappend ALWAYS_CFLAGS \"-fvtable-verify=std\"\n+    # lappend ALWAYS_CFLAGS \"ldflags=-lvtv\"\n+}\n+\n+#\n+# libvtv_target_compile -- compile a source file\n+#\n+\n+proc libvtv_target_compile { source dest type options } {\n+    global blddir\n+    global libvtv_compile_options\n+    global gluefile wrap_flags\n+    global ALWAYS_CFLAGS\n+    global GCC_UNDER_TEST\n+    global lang_test_file\n+    global lang_library_path\n+    global lang_link_flags\n+\n+    if { [info exists lang_test_file] } {\n+\tif { $blddir != \"\" } {\n+\t    lappend options \"ldflags=-L${blddir}/${lang_library_path}\"\n+\t}\n+\tlappend options \"ldflags=${lang_link_flags}\"\n+    }\n+\n+    if { [target_info needs_status_wrapper] != \"\" && [info exists gluefile] } {\n+\tlappend options \"libs=${gluefile}\"\n+\tlappend options \"ldflags=${wrap_flags}\"\n+    }\n+\n+    lappend options \"additional_flags=[libio_include_flags]\"\n+    lappend options \"timeout=[timeout_value]\"\n+    lappend options \"compiler=$GCC_UNDER_TEST\"\n+\n+    set options [concat $libvtv_compile_options $options]\n+\n+    if [info exists ALWAYS_CFLAGS] {\n+\tset options [concat \"$ALWAYS_CFLAGS\" $options]\n+    }\n+\n+    set options [dg-additional-files-options $options $source]\n+\n+    set result [target_compile $source $dest $type $options]\n+\n+    return $result\n+}\n+\n+proc libvtv_option_help { } {\n+    send_user \" --additional_options,OPTIONS\\t\\tUse OPTIONS to compile the testcase files. OPTIONS should be comma-separated.\\n\"\n+}\n+\n+proc libvtv_option_proc { option } {\n+    if [regexp \"^--additional_options,\" $option] {\n+\tglobal libvtv_compile_options\n+\tregsub \"--additional_options,\" $option \"\" option\n+\tforeach x [split $option \",\"] {\n+\t    lappend libvtv_compile_options \"additional_flags=$x\"\n+\t}\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}"}, {"sha": "2a2447d02c89132785d50bc410f05deb7b502e2c", "filename": "libvtv/testsuite/libvtv.cc/bb_tests.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fbb_tests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fbb_tests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fbb_tests.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run }\n+struct base\n+{\n+  int total;\n+  virtual void add (int i) { total += i; }\n+  virtual void sub (int i) { total -= i; }\n+  virtual void init (void) { total = 73; }\n+};\n+\n+struct derived : public base\n+{\n+  int total;\n+  virtual void add (int i) { total += 10 * i; }\n+  virtual void sub (int i) { total -= 2 * i; }\n+  virtual void init (void) { total = 0; }\n+};\n+\n+bool\n+get_cond_value (int x)\n+{\n+  if ((x % 3) > 0)\n+    return true;\n+  else\n+    return false;\n+\n+  return false;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  base *a;\n+  bool cond_value = get_cond_value (10);\n+  int x;\n+\n+  if (cond_value)\n+    a = new base ();\n+  else\n+    a = new derived ();\n+\n+  cond_value = get_cond_value (47);\n+  x = 0;\n+  if (!cond_value)\n+    x = 17;\n+\n+  a->init ();\n+\n+  for ( ; x < 10; ++x)\n+    {\n+      a->add(50);\n+      a->sub(25);\n+    }\n+}"}, {"sha": "3229f00830824527ba4763206a0e6edffeec81f4", "filename": "libvtv/testsuite/libvtv.cc/const_vtable.cc", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fconst_vtable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fconst_vtable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fconst_vtable.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do run }\n extern \"C\" int printf(const char *,...); \n struct V1 {\n   int v; ", "previous_filename": "libvtv/testsuite/const_vtable.cc"}, {"sha": "6246136e521a9bf708584e8cb034d4c91b6501bd", "filename": "libvtv/testsuite/libvtv.cc/dataentry.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fdataentry.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fdataentry.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fdataentry.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n template<int patch_dim, int patch_space_dim>\n class DataOutInterface\n {", "previous_filename": "libvtv/testsuite/dataentry.cc"}, {"sha": "375dbe41bde4471993593600dadc078cb2ab1b15", "filename": "libvtv/testsuite/libvtv.cc/derived-lib.cpp", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived-lib.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived-lib.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived-lib.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,18 @@\n+#include \"lib.h\"\n+\n+struct Derived_Private : public Base\n+{\n+  virtual ~Derived_Private() \n+  { printf(\"in Derived_Private destructor\\n\"); }\n+};\n+\n+Base * GetPrivate()\n+{\n+  return new Derived_Private();\n+}\n+\n+void Destroy(Base * pb)\n+{\n+  delete pb;   // Virtual call #1\n+}\n+"}, {"sha": "0933ff696210d7da4803977ea304a70cc66bd5dc", "filename": "libvtv/testsuite/libvtv.cc/derived-main.cpp", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived-main.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived-main.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived-main.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do run }\n+\n+#include \"lib.h\"\n+\n+struct Derived: public Base \n+{\n+  virtual ~Derived() \n+  { printf(\"In Derived destructor\\n\"); }\n+};\n+\n+int main()\n+{\n+  Derived * d = new Derived;\n+  Destroy(d);\n+  Base * pp = GetPrivate();\n+  delete pp;  // Virtual call #2\n+}\n+"}, {"sha": "6ea3b9cf6036649ef8b69300dc2a36ebe8dac72f", "filename": "libvtv/testsuite/libvtv.cc/derived.list", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived.list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived.list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fderived.list?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1 @@\n+derived-main.cpp derived-lib.cpp"}, {"sha": "d9d02512630da10ea6e7ca14dd8df691c367ca0e", "filename": "libvtv/testsuite/libvtv.cc/dup_name.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fdup_name.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fdup_name.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fdup_name.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n \n extern \"C\" int printf(const char *, ...);", "previous_filename": "libvtv/testsuite/dup_name.cc"}, {"sha": "af1a87752986c4c43ed964878595f497888d323e", "filename": "libvtv/testsuite/libvtv.cc/environment.cc", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fenvironment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fenvironment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fenvironment.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do run }\n \n extern \"C\" int printf(const char *, ...);\n ", "previous_filename": "libvtv/testsuite/environment.cc"}, {"sha": "ba9efe11a4dc96704d2d49af0dd16c8b7e720a1c", "filename": "libvtv/testsuite/libvtv.cc/event-defintions.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-defintions.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-defintions.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-defintions.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/event-definitions.cc"}, {"sha": "95c4640313adf6feb4c3982e53f13b9468c4e0f3", "filename": "libvtv/testsuite/libvtv.cc/event-main.cpp", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-main.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-main.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-main.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include \"event-private.h\"\n \n template<typename T> void derefIfNotNull(T* ptr)", "previous_filename": "libvtv/testsuite/event-main.cc"}, {"sha": "a27f4697a25d68eeaf46071ad1fc6bf5c9b4c3c7", "filename": "libvtv/testsuite/libvtv.cc/event-private.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-private.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-private.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-private.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/event-private.cc"}, {"sha": "678ab5f68af8909ce22b9faf7a622b03a5b9c15b", "filename": "libvtv/testsuite/libvtv.cc/event-private.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-private.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-private.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent-private.h?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/event-private.h"}, {"sha": "61e1d7c917265b56761d6bda0a9ce37b05215835", "filename": "libvtv/testsuite/libvtv.cc/event.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent.h?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/event.h"}, {"sha": "77606f8c122c4d3077503ad8b6af5ef4f564adfe", "filename": "libvtv/testsuite/libvtv.cc/event.list", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent.list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent.list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fevent.list?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1 @@\n+event-main.cpp event-definitions.cpp event-private.cpp\n\\ No newline at end of file"}, {"sha": "b32b710c835d352dfdbec75294446d249a5e5f42", "filename": "libvtv/testsuite/libvtv.cc/mul_inh.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fmul_inh.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fmul_inh.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fmul_inh.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,27 @@\n+// { dg-do run }\n+\n+extern \"C\" int printf(const char *, ...);\n+\n+struct A {\n+  virtual ~A() {}\n+};\n+\n+struct B {\n+  virtual ~B() {}\n+};\n+\n+struct C: public A {\n+  virtual ~C() {}\n+};\n+\n+struct D: public C, B {\n+  virtual ~D() {}\n+};\n+\n+D d;\n+\n+int main()\n+{\n+  printf (\"%p\\n\", &d);\n+  return 0;\n+}"}, {"sha": "9d1a9c692da5911cfd2b0907f33100726f9e9342", "filename": "libvtv/testsuite/libvtv.cc/nested_vcall_test.cc", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fnested_vcall_test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fnested_vcall_test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fnested_vcall_test.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do run }\n \n class EtherCtrl {\n  protected:", "previous_filename": "libvtv/testsuite/nested_vcall_test.cc"}, {"sha": "13d7fdc6e4fad5cfd09068c9287c008346055af2", "filename": "libvtv/testsuite/libvtv.cc/parts-test-extra-parts-views.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts-views.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts-views.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts-views.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/parts-test-extra-parts-views.cc"}, {"sha": "0784c0ecdaad9ecca11672090749ce6b76d40a5f", "filename": "libvtv/testsuite/libvtv.cc/parts-test-extra-parts-views.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts-views.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts-views.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts-views.h?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/parts-test-extra-parts-views.h"}, {"sha": "dbd3dbfd8f5b66dddb98d6267dc9c1f302c68cf2", "filename": "libvtv/testsuite/libvtv.cc/parts-test-extra-parts.cpp", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/parts-test-extra-parts.cc"}, {"sha": "4ed2a4ce1a01d642645d01f76d165e49c3fc96ae", "filename": "libvtv/testsuite/libvtv.cc/parts-test-extra-parts.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-extra-parts.h?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/parts-test-extra-parts.h"}, {"sha": "a0cc721abf5860200d41fc87ca069a0f3aebb2f8", "filename": "libvtv/testsuite/libvtv.cc/parts-test-main.cpp", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-main.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-main.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-main.cpp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include \"parts-test-main.h\"\n #include \"parts-test-extra-parts-views.h\"\n ", "previous_filename": "libvtv/testsuite/parts-test-main.cc"}, {"sha": "fb631dec340c06d512e8258815c7f571234eadc0", "filename": "libvtv/testsuite/libvtv.cc/parts-test-main.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-main.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-main.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test-main.h?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/parts-test-main.h"}, {"sha": "11a959a62d1a26d010ef3be8c54e75622bde59b4", "filename": "libvtv/testsuite/libvtv.cc/parts-test.list", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test.list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test.list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fparts-test.list?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1 @@\n+parts-test-main.cpp parts-test-extra-parts.cpp parts-test-extra-parts-views.cpp"}, {"sha": "9005826dff4464f6078b25b4e9c60667859aec28", "filename": "libvtv/testsuite/libvtv.cc/povray-derived.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fpovray-derived.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fpovray-derived.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fpovray-derived.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n // Small test case from povray, see if it reproduces.\n \n #include <stdio.h>", "previous_filename": "libvtv/testsuite/povray-derived.cc"}, {"sha": "b7f08331d68bda71eb6549dedbb2ac81b0ddfa2c", "filename": "libvtv/testsuite/libvtv.cc/register_set_pair.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fregister_set_pair.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fregister_set_pair.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fregister_set_pair.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,101 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+#include \"vtv_utils.h\"\n+#include \"vtv_rts.h\"\n+\n+/* This configuration will test mostly inserting of elements that are already inserted since \n+   the number of repeats is 200 */\n+\n+#define NUM_MAPS 4000\n+#define ELEMENTS_PER_MAP 100\n+#define NUM_REPEATS 200\n+\n+#define KEY_TYPE_FIXED_SIZE 8\n+void *key_buffer = malloc (17);\n+typedef char * name_string;\n+name_string fake_names[NUM_MAPS];\n+\n+/* This variable has to be put in rel.ro */\n+void * maps[NUM_MAPS] VTV_PROTECTED_VAR;\n+\n+struct fake_vt {\n+  void * fake_vfp [4];\n+};\n+void * fake_vts [NUM_MAPS * ELEMENTS_PER_MAP];\n+\n+void\n+generate_names (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM_MAPS; ++i)\n+    {\n+      fake_names[i] = (char *) malloc (9 * sizeof (char));\n+      snprintf (fake_names[i], 9, \"name%d\", i);\n+    }\n+}\n+\n+static uint32_t\n+vtv_string_hash(const char *in)\n+{\n+  const char *s = in;\n+  uint32_t h = 0;\n+\n+  for ( ; *s; ++s)\n+    h = 5 * h + *s;\n+  return h;\n+}\n+\n+int main()\n+{\n+  __VLTChangePermission(__VLTP_READ_WRITE);\n+\n+  generate_names ();\n+\n+  for (int k = 0; k < NUM_REPEATS; k++)\n+    {\n+      int curr_fake_vt = 0;\n+      for (int i = 0; i < NUM_MAPS; i++)\n+\t{\n+\t  uint32_t *value_ptr = (uint32_t *) key_buffer;\n+\t  uint32_t len1 = strlen (fake_names[i]);\n+\t  uint32_t hash_value = vtv_string_hash (fake_names[i]);\n+\t  void *temp_array[ELEMENTS_PER_MAP];\n+\n+\t  *value_ptr = len1;\n+\t  value_ptr++;\n+\t  *value_ptr = hash_value;\n+\t  \n+\t  memcpy ((char *) key_buffer + KEY_TYPE_FIXED_SIZE, fake_names[i],\n+\t\t  len1);\n+\n+\n+#ifdef VTV_DEBUG\n+      __VLTRegisterPairDebug (&maps[i], (char *) key_buffer, 128,\n+\t\t\t      &fake_vts[curr_fake_vt], \"\", \"\");\n+#else\n+      __VLTRegisterPair (&maps[i], (char *) key_buffer, 128,\n+\t\t\t &fake_vts[curr_fake_vt]);\n+#endif\n+\tfor (int j = 0; j < ELEMENTS_PER_MAP; j++)\n+\t  {\n+\t    temp_array[j] = &fake_vts[curr_fake_vt];\n+\t    curr_fake_vt++;\n+\t  }\n+#ifdef VTV_DEBUG\n+\t__VLTRegisterSetDebug (&maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t       (void **) &temp_array);\n+#else\n+\t__VLTRegisterSet (&maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t  (void **) &temp_array);\n+#endif\n+\t}\n+    }\n+\n+  __VLTChangePermission(__VLTP_READ_ONLY);\n+  \n+  return 0;\n+}"}, {"sha": "297e875679776f81061c14f5bbc763035dc7d3ee", "filename": "libvtv/testsuite/libvtv.cc/register_set_pair_inserts.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fregister_set_pair_inserts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fregister_set_pair_inserts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fregister_set_pair_inserts.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,106 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n+#include \"vtv_utils.h\"\n+#include \"vtv_rts.h\"\n+\n+/* This configuration will test mostly inserting of new elements since \n+   the number of repeats is 1. It should also do a lot of rehashing */\n+\n+/* This test case may fail depending on the system configuration.\n+   Check the value of  /proc/sys/vm/max_map_count and fix by doing\n+   Ex: sudo sh -c  \"echo 131060 > /proc/sys/vm/max_map_count\" */\n+\n+#define NUM_MAPS 40000\n+#define ELEMENTS_PER_MAP 100\n+#define NUM_REPEATS 1\n+\n+#define KEY_TYPE_FIXED_SIZE 8\n+void *key_buffer = malloc (17);\n+typedef char * name_string;\n+name_string fake_names[NUM_MAPS];\n+\n+/* This variable has to be put in rel.ro */\n+void * maps[NUM_MAPS] VTV_PROTECTED_VAR;\n+\n+struct fake_vt {\n+  void * fake_vfp [4];\n+};\n+void * fake_vts [NUM_MAPS * ELEMENTS_PER_MAP];\n+\n+\n+void\n+generate_names (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM_MAPS; ++i)\n+    {\n+      fake_names[i] = (char *) malloc (9 * sizeof (char));\n+      snprintf (fake_names[i], 9, \"name%d\", i);\n+    }\n+}\n+\n+static uint32_t\n+vtv_string_hash(const char *in)\n+{\n+  const char *s = in;\n+  uint32_t h = 0;\n+\n+  for ( ; *s; ++s)\n+    h = 5 * h + *s;\n+  return h;\n+}\n+\n+int main()\n+{\n+  __VLTChangePermission(__VLTP_READ_WRITE);\n+\n+  generate_names();\n+\n+  for (int k = 0; k < NUM_REPEATS; k++)\n+    {\n+      int curr_fake_vt = 0;\n+      for (int i = 0; i < NUM_MAPS; i++)\n+\t{\n+\t  uint32_t *value_ptr = (uint32_t *) key_buffer;\n+\t  uint32_t len1 = strlen (fake_names[i]);\n+\t  uint32_t hash_value = vtv_string_hash (fake_names[i]);\n+\t  void *temp_array[ELEMENTS_PER_MAP];\n+\n+\t  *value_ptr = len1;\n+\t  value_ptr++;\n+\t  *value_ptr = hash_value;\n+\t  \n+\t  memcpy ((char *) key_buffer + KEY_TYPE_FIXED_SIZE, fake_names[i],\n+\t\t  len1);\n+\n+\n+#ifdef VTV_DEBUG\n+      __VLTRegisterPairDebug (&maps[i], (char *) key_buffer, 128,\n+\t\t\t      &fake_vts[curr_fake_vt], \"\", \"\");\n+#else\n+      __VLTRegisterPair (&maps[i], (char *) key_buffer, 128,\n+\t\t\t &fake_vts[curr_fake_vt]);\n+#endif\n+          for (int j = 0; j < ELEMENTS_PER_MAP; j++)\n+\t    {\n+\t    temp_array[j] = &fake_vts[curr_fake_vt];\n+\t      curr_fake_vt++;\n+\t    }\n+#ifdef VTV_DEBUG\n+\t__VLTRegisterSetDebug (&maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t       (void **) &temp_array);\n+#else\n+\t__VLTRegisterSet (&maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t  (void **) &temp_array);\n+#endif\n+\t}\n+    }\n+\n+  __VLTChangePermission(__VLTP_READ_ONLY);\n+\n+  return 0;\n+}"}, {"sha": "06ec3b01e102eb9635e36fefcd4bf8c3bba9e584", "filename": "libvtv/testsuite/libvtv.cc/template-list-iostream.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list-iostream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list-iostream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list-iostream.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n #include <iostream>\n #include <fstream>", "previous_filename": "libvtv/testsuite/template-list-iostream.cc"}, {"sha": "aeb2db9e52671e2cf3a46d083f4cf60da6a6031a", "filename": "libvtv/testsuite/libvtv.cc/template-list.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n \n extern \"C\" int printf(const char *, ...);", "previous_filename": "libvtv/testsuite/template-list.cc"}, {"sha": "3df8d372418660e6f72d5869aa49a28442f033b9", "filename": "libvtv/testsuite/libvtv.cc/template-list2.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftemplate-list2.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n \n extern \"C\" int printf(const char *, ...);", "previous_filename": "libvtv/testsuite/template-list2.cc"}, {"sha": "9005826dff4464f6078b25b4e9c60667859aec28", "filename": "libvtv/testsuite/libvtv.cc/test1.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftest1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftest1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Ftest1.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,74 @@\n+// { dg-do run }\n+\n+// Small test case from povray, see if it reproduces.\n+\n+#include <stdio.h>\n+\n+class POVMS_MessageReceiver\n+{\n+\n+private:\n+   int x;\n+   class Handler\n+   {\n+      public:\n+         virtual void print() = 0;\n+   };\n+protected:\n+   template<class T> class MemberHandler : public Handler\n+   {\n+   public:\n+      MemberHandler(T *xx)\n+      {\n+        x = xx;\n+      }\n+         \n+      ~MemberHandler() {}\n+    \n+      void print()\n+      {\n+         printf(\"In print\\n\");\n+      }\n+  private:\n+      T *x;\n+   };\n+\n+private:\n+   struct HandlerNode\n+   {\n+      Handler *handler;\n+   };\n+\n+   HandlerNode *receiver;\n+public:\n+   POVMS_MessageReceiver(int xx) : x(xx) {}\n+   ~POVMS_MessageReceiver() {}\n+\n+   void foo(int *xx);\n+   void try_call();\n+};\n+\n+void POVMS_MessageReceiver::foo(int *xx)\n+{\n+   receiver = new HandlerNode;\n+\n+   receiver->handler = new MemberHandler<int>(xx);\n+}\n+\n+void POVMS_MessageReceiver::try_call()\n+{\n+   receiver->handler->print();\n+}\n+\n+\n+int main()\n+{\n+   int loc = 34;\n+   POVMS_MessageReceiver a_test(100);\n+\n+   a_test.foo(&loc);\n+   a_test.try_call();\n+}\n+\n+\n+"}, {"sha": "bec1057f564b904a7d3825837debe45adb509400", "filename": "libvtv/testsuite/libvtv.cc/thunk.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fthunk.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fthunk.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fthunk.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n struct A {\n   A():value(123) {}", "previous_filename": "libvtv/testsuite/thunk.cc"}, {"sha": "51f974ee4e7c3bdd2801b1766b5104520c39d856", "filename": "libvtv/testsuite/libvtv.cc/thunk_vtable_map_attack.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fthunk_vtable_map_attack.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fthunk_vtable_map_attack.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fthunk_vtable_map_attack.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n #include <signal.h>\n #include <setjmp.h>", "previous_filename": "libvtv/testsuite/thunk_vtable_map_attack.cc"}, {"sha": "6bfda56e8c6c577600853d861334a1aac6051940", "filename": "libvtv/testsuite/libvtv.cc/v8-test-2.cc", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fv8-test-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fv8-test-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fv8-test-2.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,97 @@\n+// { dg-do run }\n+\n+#include <stdlib.h>\n+#include <string>\n+\n+class Literal;\n+class CallRuntime;\n+\n+class AstNode {\n+public:\n+\n+  enum Type {\n+    kLiteral, kCallRuntime,\n+    kInvalid = -1\n+  };\n+\n+  AstNode() { }\n+\n+  virtual ~AstNode() { }\n+\n+  virtual Type node_type() const = 0;\n+\n+  bool \n+  IsLiteral() { return node_type() == AstNode::kLiteral; } \n+\n+  Literal *\n+  AsLiteral() { return IsLiteral() ? reinterpret_cast<Literal*>(this)\n+                                   : NULL; }\n+\n+  bool\n+  IsCallRuntime() { return node_type() == AstNode::kCallRuntime; }\n+\n+  CallRuntime *\n+  AsCallRuntime() { return IsCallRuntime() ? reinterpret_cast<CallRuntime*>(this)\n+                                           : NULL; }\n+\n+};\n+\n+class Expression: public AstNode {\n+public:\n+private:\n+  int id_;\n+};\n+\n+class Literal: public Expression {\n+public:\n+\n+  virtual AstNode::Type node_type() const { return AstNode::kLiteral; }\n+\n+  private:\n+  std::string ToString();\n+\n+};\n+\n+class CallRuntime: public Expression {\n+public:\n+\n+  virtual AstNode::Type node_type() const { return AstNode::kCallRuntime; }\n+\n+  private:\n+  std::string name_;\n+};\n+\n+Expression *\n+ExpressionCheck (bool *ok)\n+{\n+  if (*ok == true)\n+    return new CallRuntime();\n+  else\n+    return new Literal ();\n+\n+  return NULL;\n+}\n+\n+Expression *\n+GetExpression (bool *ok)\n+{\n+  Expression *expression = ExpressionCheck (ok);\n+  Expression *return_expr = NULL;\n+\n+  if (expression != NULL && expression->AsLiteral() != NULL)\n+    return_expr = new Literal();\n+  else if (expression != NULL && expression->AsCallRuntime() != NULL)\n+    return_expr = expression;\n+\n+  return return_expr;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  bool a_bool = true;\n+\n+  AstNode *node = GetExpression (&a_bool);\n+\n+  return 0;\n+}"}, {"sha": "3ad12b896c1e32f833ac578e1e293fde60546031", "filename": "libvtv/testsuite/libvtv.cc/virtfunc-test.cc", "status": "added", "additions": 222, "deletions": 0, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvirtfunc-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvirtfunc-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvirtfunc-test.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,222 @@\n+// { dg-do run }\n+\n+/* This test script is part of GDB, the GNU debugger.\n+\n+   Copyright 1993, 1994, 1997, 1998, 1999, 2003, 2004,\n+   Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+   */\n+\n+// Pls try the following program on virtual functions and try to do print on\n+//  most of the code in main().  Almost none of them works !\n+\n+//\n+// The inheritance structure is:\n+//\n+// V : VA VB\n+// A : (V)\n+// B : A\n+// D : AD (V)\n+// C : (V)\n+// E : B (V) D C\n+//\n+\n+class VA \n+{\n+public:\n+    int va;\n+};\n+\n+class VB\n+{\n+public:\n+    int vb;\n+    int fvb();\n+    virtual int vvb();\n+};\n+\n+class V : public VA, public VB\n+{\n+public:\n+    int f();\n+    virtual int vv();\n+    int w;\n+};\n+\n+class A : virtual public V\n+{\n+public:\n+    virtual int f();\n+private:\n+    int a;\n+};\n+\n+class B : public A\n+{\n+public:\n+    int f();\n+private:\n+    int b;\n+};\n+\n+class C : public virtual V\n+{\n+public:\n+    int c;\n+};\n+\n+class AD\n+{\n+public:\n+    virtual int vg() = 0;\n+};\n+\n+class D : public AD, virtual public V\n+{\n+public:\n+    static void s();\n+    virtual int vg();\n+    virtual int vd();\n+    int fd();\n+    int d;\n+};\n+\n+class E : public B, virtual public V, public D, public C\n+{\n+public:\n+    int f();\n+    int vg();\n+    int vv();\n+    int e;\n+};\n+\n+D   dd;\n+D*  ppd = &dd;\n+AD* pAd = &dd;\n+\n+A   a;\n+B   b;\n+C   c;\n+D   d;\n+E   e;\n+V   v;\n+VB  vb;\n+\n+\n+A* \tpAa\t= \t&a;\n+A*\tpAe\t=\t&e;\n+\n+B*\tpBe\t=\t&e;\n+\n+D*\tpDd\t=\t&d;\n+D*\tpDe\t=\t&e;\n+\n+V*\tpVa\t=\t&a;\n+V*\tpVv\t=\t&v;\n+V*\tpVe\t=\t&e;\n+V*     pVd\t=\t&d;\n+\n+AD*\tpADe\t=\t&e;\n+\n+E*\tpEe\t=\t&e;\n+\n+VB*     pVB\t=\t&vb;\n+\n+void init()\n+{\n+\ta.vb = 1;\n+\tb.vb = 2;\n+\tc.vb = 3;\n+\td.vb = 4;\n+\te.vb = 5;\n+\tv.vb = 6;\n+\tvb.vb = 7;\n+\n+\td.d\t= 1;\n+\te.d\t=  2;\n+}\n+\n+extern \"C\" int printf(const char *, ...);\n+\n+int all_count = 0;\n+int failed_count = 0;\n+\n+#define TEST(EXPR, EXPECTED) \\\n+   ret = EXPR; \\\n+   if (ret != EXPECTED) {\\\n+      printf(\"Failed %s is %d, should be %d!\\n\", #EXPR, ret, EXPECTED); \\\n+      failed_count++; } \\\n+   all_count++;\n+\n+int ret;\n+\n+void test_calls()\n+{\n+\tTEST(pAe->f(), 20);\n+\tTEST(pAa->f(), 1);\n+\n+\tTEST(pDe->vg(), 202);\n+\tTEST(pADe->vg(), 202);\n+\tTEST(pDd->vg(), 101);\n+\n+\tTEST(pEe->vvb(), 411);\n+\n+\tTEST(pVB->vvb(), 407);\n+\n+\tTEST(pBe->vvb(), 411);\n+\tTEST(pDe->vvb(), 411);\n+\n+        TEST(pEe->vd(), 282);\n+        TEST(pEe->fvb(), 311);\n+    \n+        TEST(pEe->D::vg(), 102);\n+\tprintf(\"Did %d tests, of which %d failed.\\n\", all_count, failed_count);\n+}\n+#ifdef usestubs\n+extern \"C\" {\n+  void set_debug_traps();\n+  void breakpoint();\n+};\n+#endif\n+\n+int main()\n+{\n+#ifdef usestubs\n+   set_debug_traps();\n+   breakpoint();\n+#endif\n+    init();\n+\n+    e.w = 7;\n+    e.vb = 11;\n+\n+    test_calls();\n+    return 0;\n+    \n+}\n+\n+int A::f() {return 1;}\n+int B::f() {return 2;}\n+void D::s() {}\n+int E::f() {return 20;}\n+int D::vg() {return 100+d;}\n+int E::vg() {return 200+d;}\n+int V::f() {return 600+w;}\n+int V::vv() {return 400+w;}\n+int E::vv() {return 450+w;}\n+int D::fd() {return 250+d;}\n+int D::vd() {return 280+d;}\n+int VB::fvb() {return 300+vb;}\n+int VB::vvb() {return 400+vb;}"}, {"sha": "1c49c966453bf4cb980dc82d12ee9ec0ed41f675", "filename": "libvtv/testsuite/libvtv.cc/virtual_inheritance.cc", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvirtual_inheritance.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvirtual_inheritance.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvirtual_inheritance.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do run }\n+\n #include <assert.h>\n struct V {\n   V(): virtual_value(-123) {}", "previous_filename": "libvtv/testsuite/virtual_inheritance.cc"}, {"sha": "12ed77431a8f83985d465d22de31489fe42a827a", "filename": "libvtv/testsuite/libvtv.cc/vtv.exp", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvtv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvtv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fvtv.exp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,83 @@\n+load_lib libvtv-dg.exp\n+load_gcc_lib gcc-dg.exp\n+\n+global VTV_FLAGS\n+set VTV_FLAGS [list {-O0} {-O2}]\n+\n+libvtv_init c++\n+\n+set shlib_ext [get_shlib_extension]\n+set lang_link_flags \"-shared-libgcc -lstdc++\"\n+set lang_test_file_found 0\n+set lang_library_path \"../libstdc++-v3/src/.libs\"\n+\n+dg-init\n+\n+set blddir [lookfor_file [get_multilibs] libvtv]\n+\n+# Find the correct libstdc++ library to use.\n+\n+if { $blddir != \"\" } {\n+    # Look for a static libstdc++ first.\n+    if [file exists \"${blddir}/${lang_library_path}/libstdc++.a\"] {\n+\tset lang_test_file \"${lang_library_path}/libstdc++.a\"\n+\tset lang_test_file_found 1\n+\t# We may have a shared only build, so look for a shared libstdc++.\n+    } elseif [file exists \"${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"] {\n+\tset lang_test_file \"${lang_library_path}/libstdc++.${shlib_ext}\"\n+\tset lang_test_file_found 1\n+    } else {\n+\tputs \"looking for ${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"\n+\tputs \"No libstdc++ library found, will not execute c++ tests\"\n+    }\n+} elseif { [info exists GXX_UNDER_TEST] } {\n+    set lang_test_file_found 1\n+    # Needs to exist for libvtv.exp.\n+    set lang_test_file \"\"\n+} else {\n+    puts \"GXX_UNDER_TEST not defined, will not execute c++ tests\"\n+}\n+\n+\n+global srcdir\n+\n+if { $lang_test_file_found } {\n+    # Set the path for finding libstdc++.\n+    if { $blddir != \"\" } {\n+\tset ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+\tset ld_library_path \"$always_ld_library_path\"\n+    }\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+\n+    # Make sure we can find the libstdc++ header files.\n+    set flags_file \"${blddir}/../libstdc++-v3/scripts/testsuite_flags\"\n+    if { [file exists $flags_file] } {\n+\tset libstdcxx_includes [exec sh $flags_file --build-includes]\n+    } else {\n+\tset libstdcxx_includes \"\"\n+    }\n+\n+    # Run the tests with -fvtable-verify=std\n+    foreach flags $VTV_FLAGS {\n+\tforeach srcfile [lsort [glob -nocomplain ${srcdir}/libvtv.cc/*.cc]] {\n+\t    dg-runtest $srcfile \"$flags -fvtable-verify=std\" $libstdcxx_includes\n+\t}\n+\n+\tforeach srcfile [lsort [glob -nocomplain ${srcdir}/libvtv.cc/@*.list]] {\n+\t    dg-runtest $srcfile \"$flags -fvtable-verify=std\" $libstdcxx_includes\n+\t}\n+    }\n+\n+    # Run the tests with -fvtable-verify=preinit\n+    foreach flags $VTV_FLAGS {\n+\tforeach srcfile [lsort [glob -nocomplain ${srcdir}/libvtv.cc/*.cc]] {\n+\t    dg-runtest $srcfile \"$flags -fvtable-verify=preinit\" $libstdcxx_includes\n+\t}\n+\n+\tforeach srcfile [lsort [glob -nocomplain ${srcdir}/libvtv.cc/@*.list]] {\n+\t    dg-runtest $srcfile \"$flags -fvtable-verify=preinit\" $libstdcxx_includes\n+\t}\n+    }\n+}"}, {"sha": "213ed613fbb440aa5833d13330c1082ffa591525", "filename": "libvtv/testsuite/libvtv.cc/xlan-test.cc", "status": "added", "additions": 185, "deletions": 0, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fxlan-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.cc%2Fxlan-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.cc%2Fxlan-test.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,185 @@\n+// { dg-do run }\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+class XMemory\n+{\n+public:\n+  void * operator new (size_t size);\n+  void operator delete (void *p);\n+\n+protected:\n+  XMemory () {}\n+\n+  virtual ~XMemory() {}\n+};\n+\n+class XSerializable\n+{\n+public:\n+  virtual ~XSerializable () {};\n+\n+  virtual bool isSerializable() const = 0;\n+  virtual void serialize () = 0;\n+\n+protected:\n+  XSerializable() {};\n+\n+};\n+\n+class Grammar: public XSerializable, public XMemory\n+{\n+public:\n+  enum GrammarType {\n+    DTDGrammarType,\n+    SchemaGrammarType,\n+    OtherGrammarType,\n+    Unknown\n+  };\n+\n+  virtual ~Grammar() {}\n+\n+  virtual GrammarType getGrammarType() const = 0;\n+  virtual bool getValidated() const = 0;\n+\n+  virtual bool isSerializable() const;\n+  virtual void serialize ();\n+\n+protected:\n+  Grammar() {};\n+\n+};\n+\n+class SchemaGrammar : public Grammar\n+{\n+public:\n+\n+  SchemaGrammar () :  Grammar(), elemID(10) { fValidated = true; }\n+\n+  virtual ~SchemaGrammar() {}\n+\n+  virtual Grammar::GrammarType getGrammarType() const;\n+  virtual bool getValidated() const;\n+\n+  virtual bool isSerializable () const;\n+  virtual void serialize ();\n+\n+private:\n+  const unsigned int elemID;\n+  bool fValidated;\n+\n+};\n+\n+class OtherGrammar : public Grammar\n+{\n+public:\n+\n+  OtherGrammar () :  Grammar(), elemID(10) { fValidated = true; }\n+\n+  virtual ~OtherGrammar() {}\n+\n+  virtual Grammar::GrammarType getGrammarType() const;\n+  virtual bool getValidated() const;\n+\n+  virtual bool isSerializable () const;\n+  virtual void serialize ();\n+\n+private:\n+  const unsigned int elemID;\n+  bool fValidated;\n+\n+};\n+\n+void\n+Grammar::serialize ()\n+{\n+  printf (\"in Grammar::serialize\\n\");\n+}\n+\n+bool\n+Grammar::isSerializable () const\n+{\n+  return true;\n+}\n+\n+bool\n+SchemaGrammar::isSerializable () const\n+{\n+  return true;\n+}\n+\n+void\n+SchemaGrammar::serialize ()\n+{\n+  printf (\"in SchemaGrammar::serialize\\n\");\n+}\n+\n+Grammar::GrammarType\n+SchemaGrammar::getGrammarType() const {\n+  return Grammar::SchemaGrammarType;\n+}\n+\n+bool\n+SchemaGrammar::getValidated () const\n+{\n+  return fValidated;\n+}\n+\n+void *\n+XMemory::operator new (size_t size)\n+{\n+  return malloc (size);\n+}\n+\n+void\n+XMemory::operator delete (void *p)\n+{\n+}\n+\n+bool\n+OtherGrammar::isSerializable () const\n+{\n+  return false;\n+}\n+\n+void\n+OtherGrammar::serialize ()\n+{\n+  printf (\"in OtherGrammar::serialize\\n\");\n+}\n+\n+Grammar::GrammarType\n+OtherGrammar::getGrammarType() const {\n+  return Grammar::OtherGrammarType;\n+}\n+\n+bool\n+OtherGrammar::getValidated () const\n+{\n+  return fValidated;\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  SchemaGrammar sPtr;\n+  OtherGrammar oPtr;\n+  Grammar &sGrammar = sPtr;\n+\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      if (i == 0)\n+\tsGrammar = oPtr;\n+      else\n+\tsGrammar = sPtr;\n+\n+      if (sGrammar.getGrammarType() != Grammar::SchemaGrammarType ||\n+\t  sGrammar.getValidated ())\n+\tprintf (\"if condition was true.\\n\");\n+      else\n+\tprintf (\"if condition was false.\\n\");\n+    }\n+\n+  return 0;\n+}"}, {"sha": "9565eae711a329c504347fb67b607259d432bb97", "filename": "libvtv/testsuite/libvtv.mempool.cc/mempool.exp", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool.exp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,68 @@\n+load_lib libvtv-dg.exp\n+load_gcc_lib gcc-dg.exp\n+\n+global VTV_FLAGS\n+set VTV_FLAGS [list {-O0} {-O2}]\n+\n+libvtv_init c++\n+\n+set shlib_ext [get_shlib_extension]\n+set lang_link_flags \"-shared-libgcc -lstdc++\"\n+set lang_test_file_found 0\n+set lang_library_path \"../libstdc++-v3/src/.libs\"\n+\n+dg-init\n+\n+set blddir [lookfor_file [get_multilibs] libvtv]\n+\n+# Find the correct libstdc++ library to use.\n+\n+if { $blddir != \"\" } {\n+    # Look for a static libstdc++ first.\n+    if [file exists \"${blddir}/${lang_library_path}/libstdc++.a\"] {\n+\tset lang_test_file \"${lang_library_path}/libstdc++.a\"\n+\tset lang_test_file_found 1\n+\t# We may have a shared only build, so look for a shared libstdc++.\n+    } elseif [file exists \"${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"] {\n+\tset lang_test_file \"${lang_library_path}/libstdc++.${shlib_ext}\"\n+\tset lang_test_file_found 1\n+    } else {\n+\tputs \"looking for ${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"\n+\tputs \"No libstdc++ library found, will not execute c++ tests\"\n+    }\n+} elseif { [info exists GXX_UNDER_TEST] } {\n+    set lang_test_file_found 1\n+    # Needs to exist for libvtv.exp.\n+    set lang_test_file \"\"\n+} else {\n+    puts \"GXX_UNDER_TEST not defined, will not execute c++ tests\"\n+}\n+\n+\n+global srcdir\n+\n+if { $lang_test_file_found } {\n+    # Set the path for finding libstdc++.\n+    if { $blddir != \"\" } {\n+\tset ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+\tset ld_library_path \"$always_ld_library_path\"\n+    }\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+\n+    # Make sure we can find the libstdc++ header files.\n+    set flags_file \"${blddir}/../libstdc++-v3/scripts/testsuite_flags\"\n+    if { [file exists $flags_file] } {\n+\tset libstdcxx_includes [exec sh $flags_file --build-includes]\n+    } else {\n+\tset libstdcxx_includes \"\"\n+    }\n+\n+    # Run the tests with -fvtable-verify=std\n+    foreach flags $VTV_FLAGS {\n+\tforeach srcfile [lsort [glob -nocomplain ${srcdir}/libvtv.mempool.cc/*.cc]] {\n+\t    dg-runtest $srcfile \"$flags -fvtable-verify=std\" $libstdcxx_includes\n+\t}\n+    }\n+}"}, {"sha": "2d5e1d0b53187e5abb8e7afda6b1fdc1c3d548a2", "filename": "libvtv/testsuite/libvtv.mempool.cc/mempool_negative.cc", "status": "renamed", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool_negative.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool_negative.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool_negative.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -5,26 +5,21 @@\n #include <setjmp.h>\n \n #include \"vtv_malloc.h\"\n+#include \"../../../include/vtv-change-permission.h\"\n \n volatile static int signal_count = 0;\n \n sigjmp_buf before_segv;\n \n-bool vtv_debug = false;\n+unsigned int vtv_debug = 0;\n \n static void\n handler(int sig, siginfo_t *si, void *unused)\n {\n-  /*\n-  printf(\"Got SIGSEGV at address: 0x%lx\\n\",\n-         (long) si->si_addr);\n-  */\n-\n   signal_count++;\n   /* You are not supposed to longjmp out of a signal handler but it seems\n      to work for this test case and it simplifies it */\n   siglongjmp(before_segv, 1);\n-  /* exit(1); */\n }\n \n /* Try to modify the memory pointed by \"s\" but dont actually change the values.\n@@ -38,13 +33,13 @@ void mempoke(void * s, size_t n)\n   ret = sigsetjmp(before_segv, 1);\n   if (ret == 0)\n     p[0] = p[0];\n-  /* printf(\"after first setjmp ret=%d\\n\", ret); */\n+\n   assert(ret == 1 && signal_count == 1);\n \n   ret = sigsetjmp(before_segv, 1);\n   if (ret == 0)\n     p[n - 1] = p[n - 1];\n-  /* printf(\"after second setjmp ret=%d\\n\", ret); */\n+\n   assert(ret == 1 && signal_count == 2);\n }\n \n@@ -61,6 +56,8 @@ int main()\n   if (sigaction(SIGSEGV, &sa, NULL) == -1)\n     assert(0);\n \n+  /* Make the 'bookkeeping' vars read-write.  */\n+  __VLTChangePermission (__VLTP_READ_WRITE);\n   __vtv_malloc_init();\n \n   size = 10;", "previous_filename": "libvtv/testsuite/mempool_negative.c"}, {"sha": "5e60df9b686eeec6d056e338e848db1ceefccf70", "filename": "libvtv/testsuite/libvtv.mempool.cc/mempool_positive.cc", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool_positive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool_positive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.mempool.cc%2Fmempool_positive.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -4,8 +4,9 @@\n #include <stdio.h>\n \n #include \"vtv_malloc.h\"\n+#include \"../../../include/vtv-change-permission.h\"\n \n-bool vtv_debug = false;\n+unsigned int vtv_debug = 0;\n \n static void\n handler(int sig, siginfo_t *si, void *unused)\n@@ -37,6 +38,8 @@ int main()\n   if (sigaction(SIGSEGV, &sa, NULL) == -1)\n     assert(0);\n \n+  /* Make the 'bookkeeping' vars read-write.  */\n+  __VLTChangePermission (__VLTP_READ_WRITE);\n   __vtv_malloc_init();\n \n   size = 10;", "previous_filename": "libvtv/testsuite/mempool_positive.c"}, {"sha": "e2ee43577a306ff1af2503f34ca51aa0ad8e9ab6", "filename": "libvtv/testsuite/libvtv.mt.cc/mt.exp", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fmt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fmt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fmt.exp?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,68 @@\n+load_lib libvtv-dg.exp\n+load_gcc_lib gcc-dg.exp\n+\n+global VTV_FLAGS\n+set VTV_FLAGS [list {-O0} {-O2}]\n+\n+libvtv_init c++\n+\n+set shlib_ext [get_shlib_extension]\n+set lang_link_flags \"-shared-libgcc -lstdc++\"\n+set lang_test_file_found 0\n+set lang_library_path \"../libstdc++-v3/src/.libs\"\n+\n+dg-init\n+\n+set blddir [lookfor_file [get_multilibs] libvtv]\n+\n+# Find the correct libstdc++ library to use.\n+\n+if { $blddir != \"\" } {\n+    # Look for a static libstdc++ first.\n+    if [file exists \"${blddir}/${lang_library_path}/libstdc++.a\"] {\n+\tset lang_test_file \"${lang_library_path}/libstdc++.a\"\n+\tset lang_test_file_found 1\n+\t# We may have a shared only build, so look for a shared libstdc++.\n+    } elseif [file exists \"${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"] {\n+\tset lang_test_file \"${lang_library_path}/libstdc++.${shlib_ext}\"\n+\tset lang_test_file_found 1\n+    } else {\n+\tputs \"looking for ${blddir}/${lang_library_path}/libstdc++.${shlib_ext}\"\n+\tputs \"No libstdc++ library found, will not execute c++ tests\"\n+    }\n+} elseif { [info exists GXX_UNDER_TEST] } {\n+    set lang_test_file_found 1\n+    # Needs to exist for libvtv.exp.\n+    set lang_test_file \"\"\n+} else {\n+    puts \"GXX_UNDER_TEST not defined, will not execute c++ tests\"\n+}\n+\n+\n+global srcdir\n+\n+if { $lang_test_file_found } {\n+    # Set the path for finding libstdc++.\n+    if { $blddir != \"\" } {\n+\tset ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n+    } else {\n+\tset ld_library_path \"$always_ld_library_path\"\n+    }\n+    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n+    set_ld_library_path_env_vars\n+\n+    # Make sure we can find the libstdc++ header files.\n+    set flags_file \"${blddir}/../libstdc++-v3/scripts/testsuite_flags\"\n+    if { [file exists $flags_file] } {\n+\tset libstdcxx_includes [exec sh $flags_file --build-includes]\n+    } else {\n+\tset libstdcxx_includes \"\"\n+    }\n+\n+    # Run the tests with -fvtable-verify=std\n+    foreach flags $VTV_FLAGS {\n+\tforeach srcfile [lsort [glob -nocomplain ${srcdir}/libvtv.mt.cc/*.cc]] {\n+\t    dg-runtest $srcfile \"$flags -fvtable-verify=std -lpthread\" $libstdcxx_includes\n+\t}\n+    }\n+}"}, {"sha": "6df197343f7da1d890157118847e8ed0e52c31a2", "filename": "libvtv/testsuite/libvtv.mt.cc/register_set_pair_inserts_mt.cc", "status": "renamed", "additions": 62, "deletions": 6, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fregister_set_pair_inserts_mt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fregister_set_pair_inserts_mt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fregister_set_pair_inserts_mt.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,7 +1,11 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n #include \"vtv_utils.h\"\n #include \"vtv_rts.h\"\n #include \"pthread.h\"\n-#include <stdio.h>\n \n \n /* Multi-threaded test for calls to RegisterPair */\n@@ -19,6 +23,11 @@\n \n #define NUM_THREADS 9\n \n+#define KEY_TYPE_FIXED_SIZE 8\n+void *key_buffer = malloc (17);\n+typedef char * name_string;\n+name_string fake_names[NUM_MAPS];\n+\n /* This variable has to be put in rel.ro */\n void * volatile maps[NUM_MAPS] VTV_PROTECTED_VAR;\n \n@@ -30,29 +39,74 @@ void * fake_vts [NUM_MAPS * ELEMENTS_PER_MAP];\n volatile int current_map = -1;\n volatile int threads_completed_it = 0;\n \n+void\n+generate_names (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM_MAPS; ++i)\n+    {\n+      fake_names[i] = (char *) malloc (9 * sizeof (char));\n+      snprintf (fake_names[i], 9, \"name%d\", i);\n+    }\n+}\n+\n+static uint32_t\n+vtv_string_hash(const char *in)\n+{\n+  const char *s = in;\n+  uint32_t h = 0;\n+\n+  for ( ; *s; ++s)\n+    h = 5 * h + *s;\n+  return h;\n+}\n+\n void * do_register_pairs(void *)\n {\n   for (int k = 0; k < NUM_REPEATS; k++)\n     {\n       int curr_fake_vt = 0;\n       for (int i = 0; i < NUM_MAPS; i++)\n \t{\n+\t  uint32_t *value_ptr = (uint32_t *) key_buffer;\n+\t  uint32_t len1 = strlen (fake_names[i]);\n+\t  uint32_t hash_value = vtv_string_hash (fake_names[i]);\n+\t  void *temp_array[ELEMENTS_PER_MAP];\n+\n \t  while (current_map < (k*NUM_MAPS + i))\n \t    ;\n \n \t  __VLTChangePermission(__VLTP_READ_WRITE);\n \n-\t  for (int j = 0; j < ELEMENTS_PER_MAP; j++)\n-\t    {\n+\t  *value_ptr = len1;\n+\t  value_ptr++;\n+\t  *value_ptr = hash_value;\n+\t  \n+\t  memcpy ((char *) key_buffer + KEY_TYPE_FIXED_SIZE, fake_names[i],\n+\t\t  len1);\n+\n+\n #ifdef VTV_DEBUG\n-\t      __VLTRegisterPairDebug((void **) &maps[i], &fake_vts[curr_fake_vt], 0, 0, 0, 0);\n+\t  __VLTRegisterPairDebug ((void **) &maps[i], (char *) key_buffer, 128,\n+\t\t\t      &fake_vts[curr_fake_vt], \"\", \"\");\n #else\n-\t      __VLTRegisterPair((void **) &maps[i], &fake_vts[curr_fake_vt]);\n+\t  __VLTRegisterPair ((void **) &maps[i], (char *) key_buffer, 128,\n+\t\t\t &fake_vts[curr_fake_vt]);\n #endif\n-\t      __VLTVerifyVtablePointer((void **) &maps[i],  &fake_vts[curr_fake_vt]);\n+\t  for (int j = 0; j < ELEMENTS_PER_MAP; j++)\n+\t    {\n+\t      temp_array[j] = &fake_vts[curr_fake_vt];\n \t      curr_fake_vt++;\n \t    }\n \n+#ifdef VTV_DEBUG\n+\t  __VLTRegisterSetDebug ((void **) &maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t       (void **) &temp_array);\n+#else\n+\t  __VLTRegisterSet ((void **) &maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t  (void **) &temp_array);\n+#endif\n \t  __VLTChangePermission(__VLTP_READ_ONLY);\n \n \t  int old_value;\n@@ -78,6 +132,8 @@ int main()\n {\n   pthread_t thread_ids[NUM_THREADS];\n  \n+  generate_names();\n+\n   for (int t = 0; t < NUM_THREADS; t++ )\n     if (pthread_create(&thread_ids[t], NULL, do_register_pairs, NULL) != 0)\n       {", "previous_filename": "libvtv/testsuite/register_pair_inserts_mt.cc"}, {"sha": "1d480a1e3b86aaa44a5502c22e047472c03ba074", "filename": "libvtv/testsuite/libvtv.mt.cc/register_set_pair_mt.cc", "status": "renamed", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fregister_set_pair_mt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fregister_set_pair_mt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Flibvtv.mt.cc%2Fregister_set_pair_mt.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -1,7 +1,11 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+#include <string.h>\n+\n #include \"vtv_utils.h\"\n #include \"vtv_rts.h\"\n #include \"pthread.h\"\n-#include <stdio.h>\n \n \n /* Multi-threaded test for calls to RegisterPair */\n@@ -19,6 +23,11 @@\n \n #define NUM_THREADS 9\n \n+#define KEY_TYPE_FIXED_SIZE 8\n+void *key_buffer = malloc (17);\n+typedef char * name_string;\n+name_string fake_names[NUM_MAPS];\n+\n /* This variable has to be put in rel.ro */\n void * volatile maps[NUM_MAPS] VTV_PROTECTED_VAR;\n \n@@ -30,29 +39,74 @@ void * fake_vts [NUM_MAPS * ELEMENTS_PER_MAP];\n volatile int current_map = -1;\n volatile int threads_completed_it = 0;\n \n+void\n+generate_names (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < NUM_MAPS; ++i)\n+    {\n+      fake_names[i] = (char *) malloc (9 * sizeof (char));\n+      snprintf (fake_names[i], 9, \"name%d\", i);\n+    }\n+}\n+\n+static uint32_t\n+vtv_string_hash(const char *in)\n+{\n+  const char *s = in;\n+  uint32_t h = 0;\n+\n+  for ( ; *s; ++s)\n+    h = 5 * h + *s;\n+  return h;\n+}\n+\n void * do_register_pairs(void *)\n {\n   for (int k = 0; k < NUM_REPEATS; k++)\n     {\n       int curr_fake_vt = 0;\n       for (int i = 0; i < NUM_MAPS; i++)\n \t{\n+\t  uint32_t *value_ptr = (uint32_t *) key_buffer;\n+\t  uint32_t len1 = strlen (fake_names[i]);\n+\t  uint32_t hash_value = vtv_string_hash (fake_names[i]);\n+\t  void *temp_array[ELEMENTS_PER_MAP];\n+\t  \n \t  while (current_map < (k*NUM_MAPS + i))\n \t    ;\n-\n+\t  \n \t  __VLTChangePermission(__VLTP_READ_WRITE);\n+\t  \n+\t  *value_ptr = len1;\n+\t  value_ptr++;\n+\t  *value_ptr = hash_value;\n+\t  \n+\t  memcpy ((char *) key_buffer + KEY_TYPE_FIXED_SIZE, fake_names[i],\n+\t\t  len1);\n+\n \n-\t  for (int j = 0; j < ELEMENTS_PER_MAP; j++)\n-\t    {\n #ifdef VTV_DEBUG\n-\t      __VLTRegisterPair((void **) &maps[i], &fake_vts[curr_fake_vt], 0, 0, 0, 0);\n+\t  __VLTRegisterPairDebug ((void **) &maps[i], (char *) key_buffer, 128,\n+\t\t\t\t  &fake_vts[curr_fake_vt], \"\", \"\");\n #else\n-\t      __VLTRegisterPair((void **) &maps[i], &fake_vts[curr_fake_vt]);\n+\t  __VLTRegisterPair ((void **) &maps[i], (char *) key_buffer, 128,\n+\t\t\t     &fake_vts[curr_fake_vt]);\n #endif\n-\t      __VLTVerifyVtablePointer((void **) &maps[i],  &fake_vts[curr_fake_vt]);\n+\t  for (int j = 0; j < ELEMENTS_PER_MAP; j++)\n+\t    {\n+\t      temp_array[j] = &fake_vts[curr_fake_vt];\n \t      curr_fake_vt++;\n \t    }\n \n+#ifdef VTV_DEBUG\n+\t  __VLTRegisterSetDebug ((void **) &maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t       (void **) &temp_array);\n+#else\n+\t  __VLTRegisterSet ((void **) &maps[i], (char *) key_buffer, 128, 100,\n+\t\t\t  (void **) &temp_array);\n+#endif\n \t  __VLTChangePermission(__VLTP_READ_ONLY);\n \n \t  int old_value;\n@@ -77,6 +131,8 @@ void * do_register_pairs(void *)\n int main()\n {\n   pthread_t thread_ids[NUM_THREADS];\n+\n+  generate_names ();\n  \n   for (int t = 0; t < NUM_THREADS; t++ )\n     if (pthread_create(&thread_ids[t], NULL, do_register_pairs, NULL) != 0)", "previous_filename": "libvtv/testsuite/register_pair_mt.cc"}, {"sha": "56f76a79f5bbcd2ae9039e52d7c319bf49e7da65", "filename": "libvtv/testsuite/other-tests/Makefile.am", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2FMakefile.am?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,52 @@\n+## Makefile for the testsuite subdirectory of the VTV library.\n+##\n+## Copyright (C) 2013 Free Software Foundation, Inc.\n+##\n+## Process this file with automake to produce Makefile.in.\n+##\n+## This file is part of the Vtable Verification (VTV) Library.  This\n+## library is free software; you can redistribute it and/or modify it\n+## under the terms of the GNU General Public License as published by\n+## the Free Software Foundation; either version 3, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful, but\n+## WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+## General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License\n+## along with this library; see the file COPYING3.  If not see\n+## <http://www.gnu.org/licenses/>.\n+\n+AUTOMAKE_OPTIONS = nostdinc\n+\n+# Runs the testsuite via a script.\n+\n+# Create subdirectories.\n+stamp-subdir:\n+\tif test ! -d lib64; then \\\n+\t  mkdir -p lib64; \\\n+\tfi; \\\n+\tif test ! -d lib32; then \\\n+\t  mkdir -p lib32; \\\n+\tfi; \\\n+\techo `date` > stamp-subdir;\n+\n+\n+testing_script=${libvtv_srcdir}/scripts/run-testsuite.sh\n+check-script: ${testing_script} stamp-subdir\n+\t-@(chmod +x ${testing_script}; \\\n+\t${testing_script} ${libvtv_srcdir} ${libvtv_builddir})\n+\n+check-am:\n+\t$(MAKE) $(AM_MAKEFLAGS) check-script\n+\n+.PHONY: check-script\n+\n+# By adding these files here, automake will remove them for 'make clean'\n+CLEANFILES = *.out environment-fail-*  stamp-* replace-fail-*\n+\n+# To remove directories.\n+clean-local:\n+\trm -rf lib*"}, {"sha": "66a75e16ea65a03e5a986c3155ea1d73636e407b", "filename": "libvtv/testsuite/other-tests/Makefile.in", "status": "added", "additions": 379, "deletions": 0, "changes": 379, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2FMakefile.in?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,379 @@\n+# Makefile.in generated by automake 1.11.1 from Makefile.am.\n+# @configure_input@\n+\n+# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n+# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,\n+# Inc.\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+@SET_MAKE@\n+VPATH = @srcdir@\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkglibexecdir = $(libexecdir)/@PACKAGE@\n+am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\n+install_sh_DATA = $(install_sh) -c -m 644\n+install_sh_PROGRAM = $(install_sh) -c\n+install_sh_SCRIPT = $(install_sh) -c\n+INSTALL_HEADER = $(INSTALL_DATA)\n+transform = $(program_transform_name)\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_triplet = @build@\n+host_triplet = @host@\n+target_triplet = @target@\n+subdir = testsuite\n+DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am\n+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n+am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/libstdc++-raw-cxx.m4 \\\n+\t$(top_srcdir)/../config/multi.m4 \\\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/acinclude.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/configure.ac\n+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n+\t$(ACLOCAL_M4)\n+mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n+CONFIG_CLEAN_FILES =\n+CONFIG_CLEAN_VPATH_FILES =\n+SOURCES =\n+ACLOCAL = @ACLOCAL@\n+AMTAR = @AMTAR@\n+AR = @AR@\n+AS = @AS@\n+AUTOCONF = @AUTOCONF@\n+AUTOHEADER = @AUTOHEADER@\n+AUTOMAKE = @AUTOMAKE@\n+AWK = @AWK@\n+CC = @CC@\n+CCAS = @CCAS@\n+CCASFLAGS = @CCASFLAGS@\n+CCDEPMODE = @CCDEPMODE@\n+CFLAGS = @CFLAGS@\n+CPP = @CPP@\n+CPPFLAGS = @CPPFLAGS@\n+CXX = @CXX@\n+CXXCPP = @CXXCPP@\n+CXXDEPMODE = @CXXDEPMODE@\n+CXXFLAGS = @CXXFLAGS@\n+CYGPATH_W = @CYGPATH_W@\n+DEFS = @DEFS@\n+DEPDIR = @DEPDIR@\n+DSYMUTIL = @DSYMUTIL@\n+DUMPBIN = @DUMPBIN@\n+ECHO_C = @ECHO_C@\n+ECHO_N = @ECHO_N@\n+ECHO_T = @ECHO_T@\n+EGREP = @EGREP@\n+EXEEXT = @EXEEXT@\n+FGREP = @FGREP@\n+GREP = @GREP@\n+INSTALL = @INSTALL@\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n+LD = @LD@\n+LDFLAGS = @LDFLAGS@\n+LIBOBJS = @LIBOBJS@\n+LIBS = @LIBS@\n+LIBSTDCXX_RAW_CXX_CXXFLAGS = @LIBSTDCXX_RAW_CXX_CXXFLAGS@\n+LIBSTDCXX_RAW_CXX_LDFLAGS = @LIBSTDCXX_RAW_CXX_LDFLAGS@\n+LIBTOOL = @LIBTOOL@\n+LIPO = @LIPO@\n+LN_S = @LN_S@\n+LTLIBOBJS = @LTLIBOBJS@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+MKDIR_P = @MKDIR_P@\n+NM = @NM@\n+NMEDIT = @NMEDIT@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OTOOL = @OTOOL@\n+OTOOL64 = @OTOOL64@\n+PACKAGE = @PACKAGE@\n+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@\n+PACKAGE_NAME = @PACKAGE_NAME@\n+PACKAGE_STRING = @PACKAGE_STRING@\n+PACKAGE_TARNAME = @PACKAGE_TARNAME@\n+PACKAGE_URL = @PACKAGE_URL@\n+PACKAGE_VERSION = @PACKAGE_VERSION@\n+PATH_SEPARATOR = @PATH_SEPARATOR@\n+RANLIB = @RANLIB@\n+SED = @SED@\n+SET_MAKE = @SET_MAKE@\n+SHELL = @SHELL@\n+STRIP = @STRIP@\n+VERSION = @VERSION@\n+XCFLAGS = @XCFLAGS@\n+abs_builddir = @abs_builddir@\n+abs_srcdir = @abs_srcdir@\n+abs_top_builddir = @abs_top_builddir@\n+abs_top_srcdir = @abs_top_srcdir@\n+ac_ct_CC = @ac_ct_CC@\n+ac_ct_CXX = @ac_ct_CXX@\n+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n+am__include = @am__include@\n+am__leading_dot = @am__leading_dot@\n+am__quote = @am__quote@\n+am__tar = @am__tar@\n+am__untar = @am__untar@\n+bindir = @bindir@\n+build = @build@\n+build_alias = @build_alias@\n+build_cpu = @build_cpu@\n+build_os = @build_os@\n+build_vendor = @build_vendor@\n+builddir = @builddir@\n+datadir = @datadir@\n+datarootdir = @datarootdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+exec_prefix = @exec_prefix@\n+host = @host@\n+host_alias = @host_alias@\n+host_cpu = @host_cpu@\n+host_os = @host_os@\n+host_vendor = @host_vendor@\n+htmldir = @htmldir@\n+includedir = @includedir@\n+infodir = @infodir@\n+install_sh = @install_sh@\n+libdir = @libdir@\n+libexecdir = @libexecdir@\n+libtool_VERSION = @libtool_VERSION@\n+libvtv_builddir = @libvtv_builddir@\n+libvtv_srcdir = @libvtv_srcdir@\n+localedir = @localedir@\n+localstatedir = @localstatedir@\n+mandir = @mandir@\n+mkdir_p = @mkdir_p@\n+multi_basedir = @multi_basedir@\n+oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n+prefix = @prefix@\n+program_transform_name = @program_transform_name@\n+psdir = @psdir@\n+sbindir = @sbindir@\n+sharedstatedir = @sharedstatedir@\n+srcdir = @srcdir@\n+sysconfdir = @sysconfdir@\n+target = @target@\n+target_alias = @target_alias@\n+target_cpu = @target_cpu@\n+target_noncanonical = @target_noncanonical@\n+target_os = @target_os@\n+target_vendor = @target_vendor@\n+toolexecdir = @toolexecdir@\n+toolexeclibdir = @toolexeclibdir@\n+top_build_prefix = @top_build_prefix@\n+top_builddir = @top_builddir@\n+top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n+toplevel_srcdir = @toplevel_srcdir@\n+AUTOMAKE_OPTIONS = nostdinc\n+testing_script = ${libvtv_srcdir}/scripts/run-testsuite.sh\n+\n+# By adding these files here, automake will remove them for 'make clean'\n+CLEANFILES = *.out environment-fail-*  stamp-* replace-fail-*\n+all: all-am\n+\n+.SUFFIXES:\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)\n+\t@for dep in $?; do \\\n+\t  case '$(am__configure_deps)' in \\\n+\t    *$$dep*) \\\n+\t      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \\\n+\t        && { if test -f $@; then exit 0; else break; fi; }; \\\n+\t      exit 1;; \\\n+\t  esac; \\\n+\tdone; \\\n+\techo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign testsuite/Makefile'; \\\n+\t$(am__cd) $(top_srcdir) && \\\n+\t  $(AUTOMAKE) --foreign testsuite/Makefile\n+.PRECIOUS: Makefile\n+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n+\t@case '$?' in \\\n+\t  *config.status*) \\\n+\t    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \\\n+\t  *) \\\n+\t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\\n+\t    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\\n+\tesac;\n+\n+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+\n+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+$(am__aclocal_m4_deps):\n+\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n+\n+clean-libtool:\n+\t-rm -rf .libs _libs\n+tags: TAGS\n+TAGS:\n+\n+ctags: CTAGS\n+CTAGS:\n+\n+check-am: all-am\n+check: check-am\n+all-am: Makefile\n+installdirs:\n+install: install-am\n+install-exec: install-exec-am\n+install-data: install-data-am\n+uninstall: uninstall-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+\n+installcheck: installcheck-am\n+install-strip:\n+\t$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t  install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t  `test -z '$(STRIP)' || \\\n+\t    echo \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\"` install\n+mostlyclean-generic:\n+\n+clean-generic:\n+\t-test -z \"$(CLEANFILES)\" || rm -f $(CLEANFILES)\n+\n+distclean-generic:\n+\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n+\t-test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)\n+\n+maintainer-clean-generic:\n+\t@echo \"This command is intended for maintainers to use\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+clean: clean-am\n+\n+clean-am: clean-generic clean-libtool clean-local mostlyclean-am\n+\n+distclean: distclean-am\n+\t-rm -f Makefile\n+distclean-am: clean-am distclean-generic\n+\n+dvi: dvi-am\n+\n+dvi-am:\n+\n+html: html-am\n+\n+html-am:\n+\n+info: info-am\n+\n+info-am:\n+\n+install-data-am:\n+\n+install-dvi: install-dvi-am\n+\n+install-dvi-am:\n+\n+install-exec-am:\n+\n+install-html: install-html-am\n+\n+install-html-am:\n+\n+install-info: install-info-am\n+\n+install-info-am:\n+\n+install-man:\n+\n+install-pdf: install-pdf-am\n+\n+install-pdf-am:\n+\n+install-ps: install-ps-am\n+\n+install-ps-am:\n+\n+installcheck-am:\n+\n+maintainer-clean: maintainer-clean-am\n+\t-rm -f Makefile\n+maintainer-clean-am: distclean-am maintainer-clean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+mostlyclean-am: mostlyclean-generic mostlyclean-libtool\n+\n+pdf: pdf-am\n+\n+pdf-am:\n+\n+ps: ps-am\n+\n+ps-am:\n+\n+uninstall-am:\n+\n+.MAKE: install-am install-strip\n+\n+.PHONY: all all-am check check-am clean clean-generic clean-libtool \\\n+\tclean-local distclean distclean-generic distclean-libtool dvi \\\n+\tdvi-am html html-am info info-am install install-am \\\n+\tinstall-data install-data-am install-dvi install-dvi-am \\\n+\tinstall-exec install-exec-am install-html install-html-am \\\n+\tinstall-info install-info-am install-man install-pdf \\\n+\tinstall-pdf-am install-ps install-ps-am install-strip \\\n+\tinstallcheck installcheck-am installdirs maintainer-clean \\\n+\tmaintainer-clean-generic mostlyclean mostlyclean-generic \\\n+\tmostlyclean-libtool pdf pdf-am ps ps-am uninstall uninstall-am\n+\n+\n+# Runs the testsuite via a script.\n+\n+# Create subdirectories.\n+stamp-subdir:\n+\tif test ! -d lib64; then \\\n+\t  mkdir -p lib64; \\\n+\tfi; \\\n+\tif test ! -d lib32; then \\\n+\t  mkdir -p lib32; \\\n+\tfi; \\\n+\techo `date` > stamp-subdir;\n+check-script: ${testing_script} stamp-subdir\n+\t-@(chmod +x ${testing_script}; \\\n+\t${testing_script} ${libvtv_srcdir} ${libvtv_builddir})\n+\n+check-am:\n+\t$(MAKE) $(AM_MAKEFLAGS) check-script\n+\n+.PHONY: check-script\n+\n+# To remove directories.\n+clean-local:\n+\trm -rf lib*\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "a64047460a6ee6fb9318e9e7e945546ba09d9b73", "filename": "libvtv/testsuite/other-tests/README", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2FREADME?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "patch": "@@ -0,0 +1,8 @@\n+This directory contains tests that have not yet been converted to\n+proper dejagnu tests.  If you look at the run_testsuite script in\n+libvtv/scripts, you should get a fair idea as to how to run these\n+tests.  The plan is to convert these tests into proper dejangnu tests\n+sometime in the near future.\n+\n+\n+Aug. 30, 2013\n\\ No newline at end of file"}, {"sha": "4ffbe83acf7718130e0e09e2a05141a8ae60abab", "filename": "libvtv/testsuite/other-tests/dlopen.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fdlopen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fdlopen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Fdlopen.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/dlopen.cc"}, {"sha": "772e8a733ed13ca3796de488e295342493c60d4c", "filename": "libvtv/testsuite/other-tests/dlopen_mt.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fdlopen_mt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fdlopen_mt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Fdlopen_mt.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/dlopen_mt.cc"}, {"sha": "cac501652a78e1c917562d7fe39df43c38b9a8d3", "filename": "libvtv/testsuite/other-tests/environment-fail-32.s", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fenvironment-fail-32.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fenvironment-fail-32.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Fenvironment-fail-32.s?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/environment-fail-32.s"}, {"sha": "d75db248b0706196b7e0d7988699ddc0790d1a68", "filename": "libvtv/testsuite/other-tests/environment-fail-64.s", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fenvironment-fail-64.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fenvironment-fail-64.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Fenvironment-fail-64.s?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/environment-fail-64.s"}, {"sha": "b6f34bca02cd35e13ac3d52473c0635190b0d1b8", "filename": "libvtv/testsuite/other-tests/field-test.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ffield-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ffield-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Ffield-test.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/field-test.cc"}, {"sha": "2b4070eec77640212c7aa5b51dbd474e9167c1fc", "filename": "libvtv/testsuite/other-tests/replace-fail.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Freplace-fail.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Freplace-fail.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Freplace-fail.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/replace-fail.cc"}, {"sha": "3f0a346f1e8c71b57165a44ba8b6bce9c754fabb", "filename": "libvtv/testsuite/other-tests/so.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fso.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Fso.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Fso.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/so.cc"}, {"sha": "ca360c0bc9153afd6205c55d79bf6f29f9dd5b44", "filename": "libvtv/testsuite/other-tests/temp_deriv.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/temp_deriv.cc"}, {"sha": "78b43f8b08b3b2e2806bdf351adbdcc02dd0c1bb", "filename": "libvtv/testsuite/other-tests/temp_deriv2.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv2.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/temp_deriv2.cc"}, {"sha": "924c47e962810cc5f9d8ee8f34d8bb1af75b8cef", "filename": "libvtv/testsuite/other-tests/temp_deriv3.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e96dc8f0a700a440c7bb87fbbd1cc70271ff15/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fother-tests%2Ftemp_deriv3.cc?ref=41e96dc8f0a700a440c7bb87fbbd1cc70271ff15", "previous_filename": "libvtv/testsuite/temp_deriv3.cc"}, {"sha": "fdf95a8876c5aad31f2f644c702ce8cc91b43354", "filename": "libvtv/testsuite/parts-test.list", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fparts-test.list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fparts-test.list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fparts-test.list?ref=f085f27e124563b5cbede337426695c4ed43693b", "patch": "@@ -1 +0,0 @@\n-parts-test-main.cc parts-test-extra-parts.cc parts-test-extra-parts-views.cc"}, {"sha": "0759c472df15f384e2c152293cc59164dae37b31", "filename": "libvtv/testsuite/register_pair.cc", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fregister_pair.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fregister_pair.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fregister_pair.cc?ref=f085f27e124563b5cbede337426695c4ed43693b", "patch": "@@ -1,39 +0,0 @@\n-#include \"vtv_utils.h\"\n-#include \"vtv_rts.h\"\n-\n-/* This configuration will test mostly inserting of elements that are already inserted since \n-   the number of repeats is 200 */\n-\n-#define NUM_MAPS 4000\n-#define ELEMENTS_PER_MAP 100\n-#define NUM_REPEATS 200\n-\n-/* This variable has to be put in rel.ro */\n-void * maps[NUM_MAPS] VTV_PROTECTED_VAR;\n-\n-struct fake_vt {\n-  void * fake_vfp [4];\n-};\n-void * fake_vts [NUM_MAPS * ELEMENTS_PER_MAP];\n-\n-int main()\n-{\n-  __VLTChangePermission(__VLTP_READ_WRITE);\n-\n-  for (int k = 0; k < NUM_REPEATS; k++)\n-    {\n-      int curr_fake_vt = 0;\n-      for (int i = 0; i < NUM_MAPS; i++)\n-\tfor (int j = 0; j < ELEMENTS_PER_MAP; j++)\n-\t  {\n-#ifdef VTV_DEBUG\n-\t    __VLTRegisterPairDebug(&maps[i], &fake_vts[curr_fake_vt]);\n-#endif\n-\t    curr_fake_vt++;\n-\t  }\n-    }\n-\n-  __VLTChangePermission(__VLTP_READ_ONLY);\n-  \n-  return 0;\n-}"}, {"sha": "72d6d9684653df73a59e55c0c792f4bc046be03d", "filename": "libvtv/testsuite/register_pair_inserts.cc", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fregister_pair_inserts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f085f27e124563b5cbede337426695c4ed43693b/libvtv%2Ftestsuite%2Fregister_pair_inserts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libvtv%2Ftestsuite%2Fregister_pair_inserts.cc?ref=f085f27e124563b5cbede337426695c4ed43693b", "patch": "@@ -1,46 +0,0 @@\n-#include \"vtv_utils.h\"\n-#include \"vtv_rts.h\"\n-\n-/* This configuration will test mostly inserting of new elements since \n-   the number of repeats is 1. It should also do a lot of rehashing */\n-\n-/* This test case may fail depending on the system configuration.\n-   Check the value of  /proc/sys/vm/max_map_count and fix by doing\n-   Ex: sudo sh -c  \"echo 131060 > /proc/sys/vm/max_map_count\" */\n-\n-#define NUM_MAPS 40000\n-#define ELEMENTS_PER_MAP 100\n-#define NUM_REPEATS 1\n-\n-/* This variable has to be put in rel.ro */\n-void * maps[NUM_MAPS] VTV_PROTECTED_VAR;\n-\n-struct fake_vt {\n-  void * fake_vfp [4];\n-};\n-void * fake_vts [NUM_MAPS * ELEMENTS_PER_MAP];\n-\n-\n-int main()\n-{\n-  __VLTChangePermission(__VLTP_READ_WRITE);\n-\n-  for (int k = 0; k < NUM_REPEATS; k++)\n-    {\n-      int curr_fake_vt = 0;\n-      for (int i = 0; i < NUM_MAPS; i++)\n-\tfor (int j = 0; j < ELEMENTS_PER_MAP; j++)\n-\t  {\n-#ifdef VTV_DEBUG\n-\t    __VLTRegisterPairDebug(&maps[i], &fake_vts[curr_fake_vt], 0, 0, 0, 0);\n-#else\n-\t    __VLTRegisterPair(&maps[i], &fake_vts[curr_fake_vt]);\n-#endif\n-\t    curr_fake_vt++;\n-\t  }\n-    }\n-\n-  __VLTChangePermission(__VLTP_READ_ONLY);\n-\n-  return 0;\n-}"}]}