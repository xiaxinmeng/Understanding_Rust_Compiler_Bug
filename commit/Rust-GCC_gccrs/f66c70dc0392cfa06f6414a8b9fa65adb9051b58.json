{"sha": "f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY2YzcwZGMwMzkyY2ZhMDZmNjQxNGE4YjlmYTY1YWRiOTA1MWI1OA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-04-25T15:42:35Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-04-25T15:42:35Z"}, "message": "Add dg-line\n\nContext: there are currently two types of line number supported in\ndg-{error,warning,message,bogus} directives: absolute and relative.  With an\nabsolute line number, it's immediately clear what line number is meant, but\nwhen a line is added at the start of the file, the line number needs to be\nupdated.  With a relative line number, that problem is solved, but when relative\nline numbers become large, it becomes less clear what line it refers to, and\nwhen adding a line inbetween the directive using the relative line number and\nthe line it refers to, the relative line number still needs to be updated.\n\nAdd a directive dg-line with argument varname, that saves the line number\nof the directive in a variable varname, which can be used as line number in dg\ndirectives.\n\n2017-04-25  Tom de Vries  <tom@codesourcery.com>\n\n\t* lib/gcc-dg.exp (cleanup-after-saved-dg-test): Cleanup line number\n\tvariables.\n\t(dg-line): New proc.\n\t(process-message): Handle line number variables.\n\t* objc.dg/try-catch-12.m: Use dg-line.\n\nFrom-SVN: r247251", "tree": {"sha": "1f6f0efec21db9d11dae0106de406e04d193dd92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f6f0efec21db9d11dae0106de406e04d193dd92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/comments", "author": null, "committer": null, "parents": [{"sha": "77071af63c0fc02c377e2751946e6d5726906f6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77071af63c0fc02c377e2751946e6d5726906f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77071af63c0fc02c377e2751946e6d5726906f6f"}], "stats": {"total": 98, "additions": 89, "deletions": 9}, "files": [{"sha": "1bc68ac3a11bf444785e708810cffd4f6ec0554c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "patch": "@@ -1,3 +1,11 @@\n+2017-04-25  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* lib/gcc-dg.exp (cleanup-after-saved-dg-test): Cleanup line number\n+\tvariables.\n+\t(dg-line): New proc.\n+\t(process-message): Handle line number variables.\n+\t* objc.dg/try-catch-12.m: Use dg-line.\n+\n 2017-04-25  Bill Seurer  <seurer@linux.vnet.ibm.com>\n \n \tPR target/80482"}, {"sha": "f4b288a05c7e2b2fa2afb8361de4283202ae8924", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 77, "deletions": 5, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "patch": "@@ -902,6 +902,7 @@ if { [info procs saved-dg-test] == [list] } {\n \tglobal keep_saved_temps_suffixes\n \tglobal multiline_expected_outputs\n \tglobal freeform_regexps\n+\tglobal save_linenr_varnames\n \n \tset additional_files \"\"\n \tset additional_sources \"\"\n@@ -928,6 +929,27 @@ if { [info procs saved-dg-test] == [list] } {\n \t}\n \tset multiline_expected_outputs []\n \tset freeform_regexps []\n+\n+\tif { [info exists save_linenr_varnames] } {\n+\t    foreach varname $save_linenr_varnames {\n+\t\t# Cleanup varname\n+\t\teval global $varname\n+\t\teval unset $varname\n+\n+\t\t# Cleanup varname_used, or generate defined-but-not-used\n+\t\t# warning.\n+\t\tset varname_used used_$varname\n+\t\teval global $varname_used\n+\t\teval set used [info exists $varname_used]\n+\t\tif { $used } {\n+\t\t    eval unset $varname_used\n+\t\t} else {\n+\t\t    regsub {^saved_linenr_} $varname \"\" org_varname\n+\t\t    warning \"dg-line var $org_varname defined, but not used\"\n+\t\t}\n+\t    }\n+\t    unset save_linenr_varnames\n+\t}\n     }\n \n     proc dg-test { args } {\n@@ -979,6 +1001,32 @@ if { [info procs saved-dg-error] == [list] \\\n     }\n }\n \n+# Set variable VARNAME to LINENR\n+\n+proc dg-line { linenr varname } {\n+    set org_varname $varname\n+    set varname \"saved_linenr_$varname\"\n+    eval global $varname\n+\n+    # Generate defined-but-previously-defined error.\n+    eval set var_defined [info exists $varname]\n+    if { $var_defined } {\n+\teval set deflinenr \\$$varname\n+\terror \"dg-line var $org_varname defined at line $linenr, but previously defined at line $deflinenr\"\n+\treturn\n+    }\n+\n+    eval set $varname $linenr\n+\n+    # Schedule cleanup of varname by cleanup-after-saved-dg-test\n+    global save_linenr_varnames\n+    if { [info exists save_linenr_varnames] } {\n+\tlappend save_linenr_varnames $varname\n+    } else {\n+\tset save_linenr_varnames [list $varname]\n+    }\n+}\n+\n # Modify the regular expression saved by a DejaGnu message directive to\n # include a prefix and to force the expression to match a single line.\n # MSGPROC is the procedure to call.\n@@ -988,11 +1036,35 @@ if { [info procs saved-dg-error] == [list] \\\n proc process-message { msgproc msgprefix dgargs } {\n     upvar dg-messages dg-messages\n \n-    # Handle relative line specification, .+1 or .-1 etc.\n-    if { [llength $dgargs] == 5\n-\t && [regsub \"^\\.\\[+-\\](\\[0-9\\]+)$\" [lindex $dgargs 4] \"\\\\1\" num] } {\n-\tset num [expr [lindex $dgargs 0] [string index [lindex $dgargs 4] 1] $num]\n-\tset dgargs [lreplace $dgargs 4 4 $num]\n+    if { [llength $dgargs] == 5 } {\n+\tif { [regsub \"^\\.\\[+-\\](\\[0-9\\]+)$\" [lindex $dgargs 4] \"\\\\1\" num] } {\n+\t    # Handle relative line specification, .+1 or .-1 etc.\n+\t    set num [expr [lindex $dgargs 0] [string index [lindex $dgargs 4] 1] $num]\n+\t    set dgargs [lreplace $dgargs 4 4 $num]\n+\t} elseif { [regsub \"^(\\[a-zA-Z\\]\\[a-zA-Z0-9_\\]*)$\" [lindex $dgargs 4] \"\\\\1\" varname] } {\n+\t    # Handle linenr variable defined by dg-line\n+\n+\t    set org_varname $varname\n+\t    set varname \"saved_linenr_$varname\"\n+\t    eval global $varname\n+\n+\t    # Generate used-but-not-defined error.\n+\t    eval set var_defined [info exists $varname]\n+\t    if { ! $var_defined } {\n+\t\tset linenr [expr [lindex $dgargs 0]]\n+\t\terror \"dg-line var $org_varname used at line $linenr, but not defined\"\n+\t\treturn\n+\t    }\n+\n+\t    # Note that varname has been used.\n+\t    set varname_used \"used_$varname\"\n+\t    eval global $varname_used\n+\t    eval set $varname_used 1\n+\n+\t    # Get line number from var and use it.\n+\t    eval set num \\$$varname\n+\t    set dgargs [lreplace $dgargs 4 4 $num]\n+\t}\n     }\n \n     # Process the dg- directive, including adding the regular expression"}, {"sha": "ce26b32d32bbce27aacf23618eb7acda6d9a86ec", "filename": "gcc/testsuite/objc.dg/try-catch-12.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-12.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66c70dc0392cfa06f6414a8b9fa65adb9051b58/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-12.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftry-catch-12.m?ref=f66c70dc0392cfa06f6414a8b9fa65adb9051b58", "patch": "@@ -9,7 +9,7 @@ @interface TestMyTests\n - (void) testSpoon;\n @end\n \n-extern void some_func (int *);\n+extern void some_func (int *); /* { dg-line some_func_decl } */\n \n @implementation TestMyTests\n - (void) testSpoon {\n@@ -21,7 +21,7 @@ - (void) testSpoon {\n       typeof(i) j = 6;\n       typeof(q) k = 66;\n       some_func (&j); /* { dg-warning \"discards .volatile. qualifier from pointer target type\" } */\n-      /* { dg-message \"but argument is of type\" \"\" { target *-*-* } 12 } */\n+      /* { dg-message \"but argument is of type\" \"\" { target *-*-* } some_func_decl } */\n       some_func (&k);\n     }\n     @catch (id exc) {\n@@ -37,7 +37,7 @@ - (void) testSpoon {\n       some_func (&j); /* { dg-warning \"discards .volatile. qualifier from pointer target type\" } */\n       /* The following is disabled as it is already checked above and the testsuites seems \n \t to count multiple different identical errors on the same line only once */\n-      /* dg-message \"but argument is of type\" \"\" { target *-*-* } 12 */\n+      /* dg-message \"but argument is of type\" \"\" { target *-*-* } some_func_decl */\n     }\n     @catch (id exc) {\n       @throw;\n@@ -51,7 +51,7 @@ - (void) testSpoon {\n       some_func (&j); /* { dg-warning \"discards .volatile. qualifier from pointer target type\" } */\n       /* The following is disabled as it is already checked above and the testsuites seems \n \t to count multiple different identical errors on the same line only once */\n-      /* dg-message \"but argument is of type\" \"\" { target *-*-* } 12 */\n+      /* dg-message \"but argument is of type\" \"\" { target *-*-* } some_func_decl */\n       some_func (&k);\n     }\n     @catch (id exc) {"}]}