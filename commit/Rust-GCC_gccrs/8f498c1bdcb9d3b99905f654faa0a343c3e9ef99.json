{"sha": "8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY0OThjMWJkY2I5ZDNiOTk5MDVmNjU0ZmFhMGEzNDNjM2U5ZWY5OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-01-21T17:55:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-01-21T17:55:34Z"}, "message": "re PR tree-optimization/56051 (Wrong expression evaluation)\n\n\tPR tree-optimization/56051\n\t* fold-const.c (fold_binary_loc): Don't fold\n\tX < (cast) (1 << Y) into (X >> Y) != 0 if cast is either\n\ta narrowing conversion, or widening conversion from signed\n\tto unsigned.\n\n\t* gcc.c-torture/execute/pr56051.c: New test.\n\nFrom-SVN: r195343", "tree": {"sha": "a3bdef1e25a778da35e6160d0a5f3bf467d3ae9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3bdef1e25a778da35e6160d0a5f3bf467d3ae9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35d59da7f7e282a68589d8c857ee7f0503d588d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35d59da7f7e282a68589d8c857ee7f0503d588d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35d59da7f7e282a68589d8c857ee7f0503d588d2"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "8ec4ee2afa5e91ee01d4ef435ff87927446a1b02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "patch": "@@ -1,3 +1,11 @@\n+2013-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56051\n+\t* fold-const.c (fold_binary_loc): Don't fold\n+\tX < (cast) (1 << Y) into (X >> Y) != 0 if cast is either\n+\ta narrowing conversion, or widening conversion from signed\n+\tto unsigned.\n+\n 2012-01-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/56023"}, {"sha": "efad9a9d833d9b56ac2ae6cd2dd90a9dca8690f7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "patch": "@@ -13556,10 +13556,22 @@ fold_binary_loc (location_t loc,\n \t\t\t\t   TREE_OPERAND (arg1, 1)),\n \t\t\t   build_zero_cst (TREE_TYPE (arg0)));\n \n+      /* Similarly for X < (cast) (1 << Y).  But cast can't be narrowing,\n+\t otherwise Y might be >= # of bits in X's type and thus e.g.\n+\t (unsigned char) (1 << Y) for Y 15 might be 0.\n+\t If the cast is widening, then 1 << Y should have unsigned type,\n+\t otherwise if Y is number of bits in the signed shift type minus 1,\n+\t we can't optimize this.  E.g. (unsigned long long) (1 << Y) for Y\n+\t 31 might be 0xffffffff80000000.  */\n       if ((code == LT_EXPR || code == GE_EXPR)\n \t  && TYPE_UNSIGNED (TREE_TYPE (arg0))\n \t  && CONVERT_EXPR_P (arg1)\n \t  && TREE_CODE (TREE_OPERAND (arg1, 0)) == LSHIFT_EXPR\n+\t  && (TYPE_PRECISION (TREE_TYPE (arg1))\n+\t      >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg1, 0))))\n+\t  && (TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (arg1, 0)))\n+\t      || (TYPE_PRECISION (TREE_TYPE (arg1))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (arg1, 0)))))\n \t  && integer_onep (TREE_OPERAND (TREE_OPERAND (arg1, 0), 0)))\n \t{\n \t  tem = build2 (RSHIFT_EXPR, TREE_TYPE (arg0), arg0,"}, {"sha": "a88bfa86c1fcd97afd2c987b3b09aa7113b473ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "patch": "@@ -1,3 +1,8 @@\n+2013-01-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/56051\n+\t* gcc.c-torture/execute/pr56051.c: New test.\n+\n 2012-01-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/56023"}, {"sha": "4ff6b9e267b858cd1f3d22de8425dc76ddd0c638", "filename": "gcc/testsuite/gcc.c-torture/execute/pr56051.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56051.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f498c1bdcb9d3b99905f654faa0a343c3e9ef99/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56051.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr56051.c?ref=8f498c1bdcb9d3b99905f654faa0a343c3e9ef99", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/56051 */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+  unsigned char x1[1] = { 0 };\n+  unsigned int s1 = __CHAR_BIT__;\n+  int a1 = x1[0] < (unsigned char) (1 << s1);\n+  unsigned char y1 = (unsigned char) (1 << s1);\n+  int b1 = x1[0] < y1;\n+  if (a1 != b1)\n+    abort ();\n+#if __SIZEOF_LONG_LONG__ > __SIZEOF_INT__\n+  unsigned long long x2[1] = { 2ULL << (sizeof (int) * __CHAR_BIT__) };\n+  unsigned int s2 = sizeof (int) * __CHAR_BIT__ - 1;\n+  int a2 = x2[0] >= (unsigned long long) (1 << s2);\n+  unsigned long long y2 = 1 << s2;\n+  int b2 = x2[0] >= y2;\n+  if (a2 != b2)\n+    abort ();\n+  unsigned long long x3[1] = { 2ULL << (sizeof (int) * __CHAR_BIT__) };\n+  unsigned int s3 = sizeof (int) * __CHAR_BIT__ - 1;\n+  int a3 = x3[0] >= (unsigned long long) (1U << s3);\n+  unsigned long long y3 = 1U << s3;\n+  int b3 = x3[0] >= y3;\n+  if (a3 != b3)\n+    abort ();\n+#endif\n+  return 0;\n+}"}]}