{"sha": "e2559c3945a09521ffe4f59669bc4d902ae77adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1NTljMzk0NWEwOTUyMWZmZTRmNTk2NjliYzRkOTAyYWU3N2FkYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-16T08:21:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-01-16T08:21:52Z"}, "message": "match.pd: Optimize ((cst << x) & 1) [PR96669]\n\nWhile we had a ((1 << x) & 1) != 0 to x == 0 optimization already,\nthis patch adds ((cst << x) & 1) optimization too, this time the\nsecond constant must be 1 though, not some power of two, but the first\none can be any constant.  If it is even, the result is false, if it is\nodd, the result is x == 0.\n\n2021-01-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/96669\n\t* match.pd ((CST << x) & 1 -> x == 0): New simplification.\n\n\t* gcc.dg/tree-ssa/pr96669-1.c: Adjust regexp.\n\t* gcc.dg/tree-ssa/pr96669-2.c: New test.", "tree": {"sha": "0d9e7dc7f3ca5d311e691c467152a09b234733a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d9e7dc7f3ca5d311e691c467152a09b234733a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2559c3945a09521ffe4f59669bc4d902ae77adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2559c3945a09521ffe4f59669bc4d902ae77adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2559c3945a09521ffe4f59669bc4d902ae77adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2559c3945a09521ffe4f59669bc4d902ae77adb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b673e7547fb95d1f0d5cd17ae9e3874742cade66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b673e7547fb95d1f0d5cd17ae9e3874742cade66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b673e7547fb95d1f0d5cd17ae9e3874742cade66"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "7158e983d218a3dc13aaca28cba86513e2959e5d", "filename": "gcc/match.pd", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2559c3945a09521ffe4f59669bc4d902ae77adb/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2559c3945a09521ffe4f59669bc4d902ae77adb/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e2559c3945a09521ffe4f59669bc4d902ae77adb", "patch": "@@ -3117,6 +3117,13 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (op @0 { build_int_cst (TREE_TYPE (@1), low); })))))))\n \n \n+/* Simplify (CST << x) & 1 to 0 if CST is even or to x == 0 if it is odd.  */\n+(simplify\n+ (bit_and (lshift INTEGER_CST@1 @0) integer_onep)\n+  (if ((wi::to_wide (@1) & 1) != 0)\n+   (convert (eq:boolean_type_node @0 { build_zero_cst (TREE_TYPE (@0)); }))\n+   { build_zero_cst (type); }))\n+\n /* Simplify ((C << x) & D) != 0 where C and D are power of two constants,\n    either to false if D is smaller (unsigned comparison) than C, or to\n    x == log2 (D) - log2 (C).  Similarly for right shifts.  */"}, {"sha": "6a95a6ba8c17c62a67d8347cc60a5c345fa45155", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96669-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2559c3945a09521ffe4f59669bc4d902ae77adb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2559c3945a09521ffe4f59669bc4d902ae77adb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-1.c?ref=e2559c3945a09521ffe4f59669bc4d902ae77adb", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/96669 */\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-original\" } */\n-/* { dg-final { scan-tree-dump \"return a == 0;\" \"original\" } } */\n+/* { dg-final { scan-tree-dump \"a == 0\" \"original\" } } */\n /* { dg-final { scan-tree-dump \"return 1;\" \"original\" } } */\n /* { dg-final { scan-tree-dump \"return c == 3;\" \"original\" } } */\n /* { dg-final { scan-tree-dump \"return d != 1;\" \"original\" } } */"}, {"sha": "47b885f769fdcbce2866008c76dc7975b1fa0c6f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr96669-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2559c3945a09521ffe4f59669bc4d902ae77adb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2559c3945a09521ffe4f59669bc4d902ae77adb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr96669-2.c?ref=e2559c3945a09521ffe4f59669bc4d902ae77adb", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/96669 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+/* { dg-final { scan-tree-dump \"a == 0\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0;\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump \"c == 0\" \"original\" } } */\n+\n+int\n+f1 (int a)\n+{\n+  return ((1 << a) & 1);\n+}\n+\n+int\n+f2 (int b)\n+{\n+  return ((2 << b) & 1);\n+}\n+\n+int\n+f3 (int c)\n+{\n+  return ((35 << c) & 1);\n+}\n+\n+int\n+f4 (int d)\n+{\n+  return ((42 << d) & 1);\n+}"}]}