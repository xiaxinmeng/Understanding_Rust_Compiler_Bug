{"sha": "a9f6e019d15819f52b312e1b10cd460b59b57780", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlmNmUwMTlkMTU4MTlmNTJiMzEyZTFiMTBjZDQ2MGI1OWI1Nzc4MA==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-09-25T22:09:38Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-09-25T22:09:38Z"}, "message": "rs6000: Do not allow out of range immediate in vsplt[bhw] (PR86987)\n\nThe original AltiVec manuals had the immediate lane number in the\nsplat instructions as a 5-bit number, but anything too big has no\ndefined meaning, and gas will choke on it too.  This patch disallows\nit in the instruction patterns as well as in the builtins.  This\nsolves PR86987.\n\n\n\tPR target/86987\n\t* config/rs6000/altivec.md (altivec_vspltb): Use\n\tconst_0_to_15_operand instead of u5bit_cint_operand.\n\t(*altivec_vspltb_internal): Ditto.\n\t(altivec_vspltb_direct): Ditto.\n\t(altivec_vsplth): Use const_0_to_7_operand instead of\n\tu5bit_cint_operand.\n\t(*altivec_vsplth_internal): Ditto.\n\t(altivec_vsplth_direct): Ditto.\n\t(altivec_vspltw): Use const_0_to_3_operand instead of\n\tu5bit_cint_operand.\n\t(*altivec_vspltw_internal): Ditto.\n\t(altivec_vspltw_direct): Ditto.\n\t(altivec_vspltsf): Ditto.\n\t(*altivec_vspltsf_internal): Ditto.\n\t* config/rs6000/rs6000.c (rs6000_expand_binop_builtin): Handle the\n\tvarious splats with the proper size immediate.  Reorder the various\n\tcases by ascending size of immediate, and put all such together.\n\nFrom-SVN: r264584", "tree": {"sha": "a86f836eaece5938503f3dc5239a556155fc6117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a86f836eaece5938503f3dc5239a556155fc6117"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9f6e019d15819f52b312e1b10cd460b59b57780", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f6e019d15819f52b312e1b10cd460b59b57780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f6e019d15819f52b312e1b10cd460b59b57780", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f6e019d15819f52b312e1b10cd460b59b57780/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee8505183c50f850509bf52855488259c53544fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee8505183c50f850509bf52855488259c53544fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee8505183c50f850509bf52855488259c53544fc"}], "stats": {"total": 113, "additions": 82, "deletions": 31}, "files": [{"sha": "12e7789991ad1daa984b9e5af4c5d25f7d8beed3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f6e019d15819f52b312e1b10cd460b59b57780/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f6e019d15819f52b312e1b10cd460b59b57780/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9f6e019d15819f52b312e1b10cd460b59b57780", "patch": "@@ -1,3 +1,24 @@\n+2018-09-25  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/86987\n+\t* config/rs6000/altivec.md (altivec_vspltb): Use\n+\tconst_0_to_15_operand instead of u5bit_cint_operand.\n+\t(*altivec_vspltb_internal): Ditto.\n+\t(altivec_vspltb_direct): Ditto.\n+\t(altivec_vsplth): Use const_0_to_7_operand instead of\n+\tu5bit_cint_operand.\n+\t(*altivec_vsplth_internal): Ditto.\n+\t(altivec_vsplth_direct): Ditto.\n+\t(altivec_vspltw): Use const_0_to_3_operand instead of\n+\tu5bit_cint_operand.\n+\t(*altivec_vspltw_internal): Ditto.\n+\t(altivec_vspltw_direct): Ditto.\n+\t(altivec_vspltsf): Ditto.\n+\t(*altivec_vspltsf_internal): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_expand_binop_builtin): Handle the\n+\tvarious splats with the proper size immediate.  Reorder the various\n+\tcases by ascending size of immediate, and put all such together.\n+\n 2018-09-25  Richard Biener  <rguenther@suse.de>\n \n \tPR debug/83941"}, {"sha": "345be09ceff59aa177d12bd0624e9d7163e88881", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f6e019d15819f52b312e1b10cd460b59b57780/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f6e019d15819f52b312e1b10cd460b59b57780/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a9f6e019d15819f52b312e1b10cd460b59b57780", "patch": "@@ -1861,7 +1861,7 @@\n (define_expand \"altivec_vspltb\"\n   [(use (match_operand:V16QI 0 \"register_operand\"))\n    (use (match_operand:V16QI 1 \"register_operand\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n+   (use (match_operand:QI 2 \"const_0_to_15_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v = gen_rtvec (1, operands[2]);\n@@ -1877,7 +1877,7 @@\n         (vec_duplicate:V16QI\n \t (vec_select:QI (match_operand:V16QI 1 \"register_operand\" \"v\")\n \t\t\t(parallel\n-\t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"\")]))))]\n+\t\t\t [(match_operand:QI 2 \"const_0_to_15_operand\" \"\")]))))]\n   \"TARGET_ALTIVEC\"\n {\n   if (!BYTES_BIG_ENDIAN)\n@@ -1890,7 +1890,7 @@\n (define_insn \"altivec_vspltb_direct\"\n   [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n         (unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-\t               (match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]\n+\t               (match_operand:QI 2 \"const_0_to_15_operand\" \"i\")]\n                       UNSPEC_VSPLT_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"vspltb %0,%1,%2\"\n@@ -1899,7 +1899,7 @@\n (define_expand \"altivec_vsplth\"\n   [(use (match_operand:V8HI 0 \"register_operand\"))\n    (use (match_operand:V8HI 1 \"register_operand\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n+   (use (match_operand:QI 2 \"const_0_to_7_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v = gen_rtvec (1, operands[2]);\n@@ -1915,7 +1915,7 @@\n \t(vec_duplicate:V8HI\n \t (vec_select:HI (match_operand:V8HI 1 \"register_operand\" \"v\")\n \t\t\t(parallel\n-\t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"\")]))))]\n+\t\t\t [(match_operand:QI 2 \"const_0_to_7_operand\" \"\")]))))]\n   \"TARGET_ALTIVEC\"\n {\n   if (!BYTES_BIG_ENDIAN)\n@@ -1928,7 +1928,7 @@\n (define_insn \"altivec_vsplth_direct\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (unspec:V8HI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]\n+                      (match_operand:QI 2 \"const_0_to_7_operand\" \"i\")]\n                      UNSPEC_VSPLT_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"vsplth %0,%1,%2\"\n@@ -1937,7 +1937,7 @@\n (define_expand \"altivec_vspltw\"\n   [(use (match_operand:V4SI 0 \"register_operand\"))\n    (use (match_operand:V4SI 1 \"register_operand\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n+   (use (match_operand:QI 2 \"const_0_to_3_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v = gen_rtvec (1, operands[2]);\n@@ -1953,7 +1953,7 @@\n \t(vec_duplicate:V4SI\n \t (vec_select:SI (match_operand:V4SI 1 \"register_operand\" \"v\")\n \t\t\t(parallel\n-\t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]))))]\n+\t\t\t [(match_operand:QI 2 \"const_0_to_3_operand\" \"i\")]))))]\n   \"TARGET_ALTIVEC\"\n {\n   if (!BYTES_BIG_ENDIAN)\n@@ -1966,7 +1966,7 @@\n (define_insn \"altivec_vspltw_direct\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n         (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]\n+                      (match_operand:QI 2 \"const_0_to_3_operand\" \"i\")]\n                      UNSPEC_VSPLT_DIRECT))]\n   \"TARGET_ALTIVEC\"\n   \"vspltw %0,%1,%2\"\n@@ -1975,7 +1975,7 @@\n (define_expand \"altivec_vspltsf\"\n   [(use (match_operand:V4SF 0 \"register_operand\"))\n    (use (match_operand:V4SF 1 \"register_operand\"))\n-   (use (match_operand:QI 2 \"u5bit_cint_operand\"))]\n+   (use (match_operand:QI 2 \"const_0_to_3_operand\"))]\n   \"TARGET_ALTIVEC\"\n {\n   rtvec v = gen_rtvec (1, operands[2]);\n@@ -1991,7 +1991,7 @@\n \t(vec_duplicate:V4SF\n \t (vec_select:SF (match_operand:V4SF 1 \"register_operand\" \"v\")\n \t\t\t(parallel\n-\t\t\t [(match_operand:QI 2 \"u5bit_cint_operand\" \"i\")]))))]\n+\t\t\t [(match_operand:QI 2 \"const_0_to_3_operand\" \"i\")]))))]\n   \"VECTOR_UNIT_ALTIVEC_P (V4SFmode)\"\n {\n   if (!BYTES_BIG_ENDIAN)"}, {"sha": "baa585191b06da2ee0af24bba8edc8a7617cecd9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9f6e019d15819f52b312e1b10cd460b59b57780/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9f6e019d15819f52b312e1b10cd460b59b57780/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a9f6e019d15819f52b312e1b10cd460b59b57780", "patch": "@@ -13456,13 +13456,58 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n     return const0_rtx;\n \n-  if (icode == CODE_FOR_altivec_vcfux\n+  if (icode == CODE_FOR_unpackv1ti\n+\t   || icode == CODE_FOR_unpackkf\n+\t   || icode == CODE_FOR_unpacktf\n+\t   || icode == CODE_FOR_unpackif\n+\t   || icode == CODE_FOR_unpacktd)\n+    {\n+      /* Only allow 1-bit unsigned literals. */\n+      STRIP_NOPS (arg1);\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || !IN_RANGE (TREE_INT_CST_LOW (arg1), 0, 1))\n+\t{\n+\t  error (\"argument 2 must be a 1-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n+  else if (icode == CODE_FOR_altivec_vspltw)\n+    {\n+      /* Only allow 2-bit unsigned literals.  */\n+      STRIP_NOPS (arg1);\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg1) & ~3)\n+\t{\n+\t  error (\"argument 2 must be a 2-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n+  else if (icode == CODE_FOR_altivec_vsplth)\n+    {\n+      /* Only allow 3-bit unsigned literals.  */\n+      STRIP_NOPS (arg1);\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg1) & ~7)\n+\t{\n+\t  error (\"argument 2 must be a 3-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n+  else if (icode == CODE_FOR_altivec_vspltb)\n+    {\n+      /* Only allow 4-bit unsigned literals.  */\n+      STRIP_NOPS (arg1);\n+      if (TREE_CODE (arg1) != INTEGER_CST\n+\t  || TREE_INT_CST_LOW (arg1) & ~15)\n+\t{\n+\t  error (\"argument 2 must be a 4-bit unsigned literal\");\n+\t  return CONST0_RTX (tmode);\n+\t}\n+    }\n+  else if (icode == CODE_FOR_altivec_vcfux\n       || icode == CODE_FOR_altivec_vcfsx\n       || icode == CODE_FOR_altivec_vctsxs\n-      || icode == CODE_FOR_altivec_vctuxs\n-      || icode == CODE_FOR_altivec_vspltb\n-      || icode == CODE_FOR_altivec_vsplth\n-      || icode == CODE_FOR_altivec_vspltw)\n+      || icode == CODE_FOR_altivec_vctuxs)\n     {\n       /* Only allow 5-bit unsigned literals.  */\n       STRIP_NOPS (arg1);\n@@ -13507,21 +13552,6 @@ rs6000_expand_binop_builtin (enum insn_code icode, tree exp, rtx target)\n \t  return CONST0_RTX (tmode);\n \t}\n     }\n-  else if (icode == CODE_FOR_unpackv1ti\n-\t   || icode == CODE_FOR_unpackkf\n-\t   || icode == CODE_FOR_unpacktf\n-\t   || icode == CODE_FOR_unpackif\n-\t   || icode == CODE_FOR_unpacktd)\n-    {\n-      /* Only allow 1-bit unsigned literals. */\n-      STRIP_NOPS (arg1);\n-      if (TREE_CODE (arg1) != INTEGER_CST\n-\t  || !IN_RANGE (TREE_INT_CST_LOW (arg1), 0, 1))\n-\t{\n-\t  error (\"argument 2 must be a 1-bit unsigned literal\");\n-\t  return CONST0_RTX (tmode);\n-\t}\n-    }\n \n   if (target == 0\n       || GET_MODE (target) != tmode"}]}