{"sha": "4953b790255db56883969fde37ad9fc82d2d6772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk1M2I3OTAyNTVkYjU2ODgzOTY5ZmRlMzdhZDlmYzgyZDJkNjc3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-12-16T23:25:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-12-16T23:25:08Z"}, "message": "PR c++/91165 - verify_gimple ICE with cached constexpr.\n\nIt seems we need to unshare even non-CONSTRUCTOR expressions that we are\ngoing to stick in the constexpr_call_table, so we don't end up sharing the\nsame e.g. ADDR_EXPR between two different functions.  I now think I\nunderstand why unsharing CONSTRUCTOR arguments was improving memory\nperformance: separating the arguments from the caller function allows the\ncaller function to be GC'd better.  But it occurs to me that we don't need\nto unshare until we decide that we're evaluating and caching this call, so\nwe can avoid the CONSTRUCTOR unshare/free pair for tentative arguments.\nFreeing the tentative TREE_VEC still seems worth doing, so free_bindings\nisn't going away entirely.\n\n\t* constexpr.c (cxx_bind_parameters_in_call): Don't unshare.\n\t(cxx_eval_call_expression): Unshare all args if we're caching.\n\nFrom-SVN: r279447", "tree": {"sha": "c36979996f15c5fa2930bd6794a20373891e674d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c36979996f15c5fa2930bd6794a20373891e674d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4953b790255db56883969fde37ad9fc82d2d6772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4953b790255db56883969fde37ad9fc82d2d6772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4953b790255db56883969fde37ad9fc82d2d6772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4953b790255db56883969fde37ad9fc82d2d6772/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "126036359a27ee32a433d0404d88557bb0d15687", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/126036359a27ee32a433d0404d88557bb0d15687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/126036359a27ee32a433d0404d88557bb0d15687"}], "stats": {"total": 51, "additions": 35, "deletions": 16}, "files": [{"sha": "a64bb1646644a961e4337a7126730f766f360ebc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4953b790255db56883969fde37ad9fc82d2d6772/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4953b790255db56883969fde37ad9fc82d2d6772/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4953b790255db56883969fde37ad9fc82d2d6772", "patch": "@@ -1,3 +1,9 @@\n+2019-12-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91165 - verify_gimple ICE with cached constexpr.\n+\t* constexpr.c (cxx_bind_parameters_in_call): Don't unshare.\n+\t(cxx_eval_call_expression): Unshare all args if we're caching.\n+\n 2019-12-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/92496 - ICE with <=> and no #include <compare>."}, {"sha": "f3f03e7d6215ac46fb7e311a168ebe434e3cdc89", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4953b790255db56883969fde37ad9fc82d2d6772/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4953b790255db56883969fde37ad9fc82d2d6772/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4953b790255db56883969fde37ad9fc82d2d6772", "patch": "@@ -1441,9 +1441,6 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \n       if (!*non_constant_p)\n \t{\n-\t  /* Unsharing here isn't necessary for correctness, but it\n-\t     significantly improves memory performance for some reason.  */\n-\t  arg = unshare_constructor (arg);\n \t  /* Make sure the binding has the same type as the parm.  But\n \t     only for constant args.  */\n \t  if (!TYPE_REF_P (type))\n@@ -1959,19 +1956,11 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n      this function exits.  */\n   class free_bindings\n   {\n+    tree *bindings;\n   public:\n-    tree &bindings;\n-    bool do_free;\n-    free_bindings (tree &b): bindings (b), do_free(true) { }\n-    void preserve () { do_free = false; }\n-    ~free_bindings () {\n-      if (do_free)\n-\t{\n-\t  for (int i = 0; i < TREE_VEC_LENGTH (bindings); ++i)\n-\t    free_constructor (TREE_VEC_ELT (bindings, i));\n-\t  ggc_free (bindings);\n-\t}\n-    }\n+    free_bindings (tree &b): bindings (&b) { }\n+    ~free_bindings () { if (bindings) ggc_free (*bindings); }\n+    void preserve () { bindings = NULL; }\n   } fb (new_call.bindings);\n \n   if (*non_constant_p)\n@@ -2074,7 +2063,18 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  for (int i = 0; i < TREE_VEC_LENGTH (bound); ++i)\n \t    {\n \t      tree arg = TREE_VEC_ELT (bound, i);\n-\t      /* Don't share a CONSTRUCTOR that might be changed.  */\n+\t      if (entry)\n+\t\t{\n+\t\t  /* Unshare args going into the hash table to separate them\n+\t\t     from the caller's context, for better GC and to avoid\n+\t\t     problems with verify_gimple.  */\n+\t\t  arg = unshare_expr (arg);\n+\t\t  TREE_VEC_ELT (bound, i) = arg;\n+\t\t}\n+\t      /* Don't share a CONSTRUCTOR that might be changed.  This is not\n+\t\t redundant with the unshare just above; we also don't want to\n+\t\t change the argument values in the hash table.  XXX Could we\n+\t\t unshare lazily in cxx_eval_store_expression?  */\n \t      arg = unshare_constructor (arg);\n \t      if (TREE_CODE (arg) == CONSTRUCTOR)\n \t\tvec_safe_push (ctors, arg);"}, {"sha": "a64d815a7bab1a83b2ed35c3c89e3a0bb507349f", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-string2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4953b790255db56883969fde37ad9fc82d2d6772/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-string2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4953b790255db56883969fde37ad9fc82d2d6772/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-string2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-string2.C?ref=4953b790255db56883969fde37ad9fc82d2d6772", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/91165\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -O }\n+\n+template <typename T> constexpr T bar (T c) { return c; }\n+template <typename T, typename U> struct S {\n+  T f;\n+  U g;\n+};\n+template <typename T, typename U>\n+constexpr S<T, U> foo (T &&c, U h) { return S<T, U> {c, bar (h)}; }\n+void baz (int a) { foo (a, \"\"); }\n+void qux () { foo (0, \"\"); }"}]}