{"sha": "91a38e8a848c61b2e23ee277306dc8cd194d135b", "node_id": "C_kwDOANBUbNoAKDkxYTM4ZThhODQ4YzYxYjJlMjNlZTI3NzMwNmRjOGNkMTk0ZDEzNWI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-12T07:16:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-12T07:16:06Z"}, "message": "builtins: Fix up expand_builtin_int_roundingfn_2 [PR105211]\n\nThe expansion of __builtin_iround{,f,l} etc. builtins in some cases\nemits calls to a different fallback builtin.  To locate the right builtin\nit uses mathfn_built_in_1 with the type of the first argument.\nIf its TYPE_MAIN_VARIANT is {float,double,long_double}_type_node, all is\nfine, but on the following testcase, because GIMPLE considers scalar\nfloat conversions between types with the same mode as useless,\nTYPE_MAIN_VARIANT of the arg's type is float32_type_node and because there\nisn't __builtin_lroundf32 returns NULL and we ICE.\n\nThis patch will first try the type of the first argument of the builtin's\nprototype (so that say on sizeof(double)==sizeof(long double) target it honors\nwhether it was a *l or non-*l call; though even that can't be 100% trusted,\nuser could incorrectly prototype it) and as fallback the type argument.\nIf neither works, doesn't fallback.\n\n2022-04-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/105211\n\t* builtins.cc (expand_builtin_int_roundingfn_2): If mathfn_built_in_1\n\tfails for TREE_TYPE (arg), retry it with\n\tTREE_VALUE (TYPE_ARG_TYPES (TREE_TYPE (fndecl))) and if even that\n\tfails, emit call normally.\n\n\t* gcc.dg/pr105211.c: New test.", "tree": {"sha": "54a5fb5dbb406ecd4a19415005a090716b19149c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a5fb5dbb406ecd4a19415005a090716b19149c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91a38e8a848c61b2e23ee277306dc8cd194d135b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a38e8a848c61b2e23ee277306dc8cd194d135b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a38e8a848c61b2e23ee277306dc8cd194d135b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a38e8a848c61b2e23ee277306dc8cd194d135b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a4c5c704433249aa2adc89ef58b6b70e50c930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a4c5c704433249aa2adc89ef58b6b70e50c930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a4c5c704433249aa2adc89ef58b6b70e50c930"}], "stats": {"total": 41, "additions": 32, "deletions": 9}, "files": [{"sha": "5b085e3a14f5e48d99a0b09716bca22047e43e38", "filename": "gcc/builtins.cc", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a38e8a848c61b2e23ee277306dc8cd194d135b/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a38e8a848c61b2e23ee277306dc8cd194d135b/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=91a38e8a848c61b2e23ee277306dc8cd194d135b", "patch": "@@ -2967,16 +2967,28 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n \t BUILT_IN_IROUND and if __builtin_iround is called directly, emit\n \t a call to lround in the hope that the target provides at least some\n \t C99 functions.  This should result in the best user experience for\n-\t not full C99 targets.  */\n-      tree fallback_fndecl = mathfn_built_in_1\n-\t(TREE_TYPE (arg), as_combined_fn (fallback_fn), 0);\n-\n-      exp = build_call_nofold_loc (EXPR_LOCATION (exp),\n-\t\t\t\t   fallback_fndecl, 1, arg);\n+\t not full C99 targets.\n+\t As scalar float conversions with same mode are useless in GIMPLE,\n+\t we can end up e.g. with _Float32 argument passed to float builtin,\n+\t try to get the type from the builtin prototype first.  */\n+      tree fallback_fndecl = NULL_TREE;\n+      if (tree argtypes = TYPE_ARG_TYPES (TREE_TYPE (fndecl)))\n+        fallback_fndecl\n+          = mathfn_built_in_1 (TREE_VALUE (argtypes),\n+\t\t\t       as_combined_fn (fallback_fn), 0);\n+      if (fallback_fndecl == NULL_TREE)\n+\tfallback_fndecl\n+\t  = mathfn_built_in_1 (TREE_TYPE (arg),\n+\t\t\t       as_combined_fn (fallback_fn), 0);\n+      if (fallback_fndecl)\n+\t{\n+\t  exp = build_call_nofold_loc (EXPR_LOCATION (exp),\n+\t\t\t\t       fallback_fndecl, 1, arg);\n \n-      target = expand_call (exp, NULL_RTX, target == const0_rtx);\n-      target = maybe_emit_group_store (target, TREE_TYPE (exp));\n-      return convert_to_mode (mode, target, 0);\n+\t  target = expand_call (exp, NULL_RTX, target == const0_rtx);\n+\t  target = maybe_emit_group_store (target, TREE_TYPE (exp));\n+\t  return convert_to_mode (mode, target, 0);\n+\t}\n     }\n \n   return expand_call (exp, target, target == const0_rtx);"}, {"sha": "9bafe6feb1911501485df8081f47028c97d00daf", "filename": "gcc/testsuite/gcc.dg/pr105211.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91a38e8a848c61b2e23ee277306dc8cd194d135b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105211.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91a38e8a848c61b2e23ee277306dc8cd194d135b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105211.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr105211.c?ref=91a38e8a848c61b2e23ee277306dc8cd194d135b", "patch": "@@ -0,0 +1,11 @@\n+/* PR rtl-optimization/105211 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -ffast-math\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-require-effective-target float32 } */\n+\n+short\n+foo (_Float32 f)\n+{\n+  return __builtin_roundf (f);\n+}"}]}