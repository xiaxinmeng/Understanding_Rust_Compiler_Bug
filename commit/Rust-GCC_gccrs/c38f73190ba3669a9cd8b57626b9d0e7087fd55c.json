{"sha": "c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4ZjczMTkwYmEzNjY5YTljZDhiNTc2MjZiOWQwZTcwODdmZDU1Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-05-25T08:38:12Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-05-25T08:38:12Z"}, "message": "[AArch64] Add SVE support for integer division\n\nAfter the previous patch to prevent pessimisation of divisions\nby constants, this patch adds support for the SVE integer division\ninstructions.\n\n2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/iterators.md (SVE_INT_BINARY_SD): New code iterator.\n\t(optab, sve_int_op): Handle div and udiv.\n\t* config/aarch64/aarch64-sve.md (<optab><mode>3): New expander\n\tfor SVE_INT_BINARY_SD.\n\t(*<optab><mode>3): New insn for the same.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/div_1.c: New test.\n\t* gcc.target/aarch64/sve/div_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/mul_highpart_2.c: Likewise.\n\t* gcc.target/aarch64/sve/mul_highpart_2_run.c: Likewise.\n\nFrom-SVN: r260712", "tree": {"sha": "e3b7dc7cf92bd1d7eb18165d0f7a61b1ce89f84f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3b7dc7cf92bd1d7eb18165d0f7a61b1ce89f84f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/comments", "author": null, "committer": null, "parents": [{"sha": "8f76f377861b4195487416806c4a0eacabc433c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f76f377861b4195487416806c4a0eacabc433c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f76f377861b4195487416806c4a0eacabc433c9"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "0dcece5c219fba08e4cdb27528b6443c60c83547", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -1,3 +1,11 @@\n+2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/iterators.md (SVE_INT_BINARY_SD): New code iterator.\n+\t(optab, sve_int_op): Handle div and udiv.\n+\t* config/aarch64/aarch64-sve.md (<optab><mode>3): New expander\n+\tfor SVE_INT_BINARY_SD.\n+\t(*<optab><mode>3): New insn for the same.\n+\n 2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-patterns.c: Include predict.h."}, {"sha": "eac3ac97590060e46dba35061ca6d2747a81116e", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -1008,6 +1008,36 @@\n   \"<su>mulh\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n )\n \n+;; Unpredicated division.\n+(define_expand \"<optab><mode>3\"\n+  [(set (match_operand:SVE_SDI 0 \"register_operand\")\n+\t(unspec:SVE_SDI\n+\t  [(match_dup 3)\n+\t   (SVE_INT_BINARY_SD:SVE_SDI\n+\t     (match_operand:SVE_SDI 1 \"register_operand\")\n+\t     (match_operand:SVE_SDI 2 \"register_operand\"))]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE\"\n+  {\n+    operands[3] = force_reg (<VPRED>mode, CONSTM1_RTX (<VPRED>mode));\n+  }\n+)\n+\n+;; Division predicated with a PTRUE.\n+(define_insn \"*<optab><mode>3\"\n+  [(set (match_operand:SVE_SDI 0 \"register_operand\" \"=w, w\")\n+\t(unspec:SVE_SDI\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (SVE_INT_BINARY_SD:SVE_SDI\n+\t     (match_operand:SVE_SDI 2 \"register_operand\" \"0, w\")\n+\t     (match_operand:SVE_SDI 3 \"aarch64_sve_mul_operand\" \"w, 0\"))]\n+\t  UNSPEC_MERGE_PTRUE))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <sve_int_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   <sve_int_op>r\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n+)\n+\n ;; Unpredicated NEG, NOT and POPCOUNT.\n (define_expand \"<optab><mode>2\"\n   [(set (match_operand:SVE_I 0 \"register_operand\")"}, {"sha": "dad07e437f060e0df80099124f66b5c7317c6e88", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -1207,6 +1207,8 @@\n \n (define_code_iterator SVE_INT_BINARY_REV [minus])\n \n+(define_code_iterator SVE_INT_BINARY_SD [div udiv])\n+\n ;; SVE integer comparisons.\n (define_code_iterator SVE_INT_CMP [lt le eq ne ge gt ltu leu geu gtu])\n \n@@ -1237,6 +1239,8 @@\n \t\t\t (neg \"neg\")\n \t\t\t (plus \"add\")\n \t\t\t (minus \"sub\")\n+\t\t\t (div \"div\")\n+\t\t\t (udiv \"udiv\")\n \t\t\t (ss_plus \"qadd\")\n \t\t\t (us_plus \"qadd\")\n \t\t\t (ss_minus \"qsub\")\n@@ -1378,6 +1382,8 @@\n ;; The integer SVE instruction that implements an rtx code.\n (define_code_attr sve_int_op [(plus \"add\")\n \t\t\t      (minus \"sub\")\n+\t\t\t      (div \"sdiv\")\n+\t\t\t      (udiv \"udiv\")\n \t\t\t      (neg \"neg\")\n \t\t\t      (smin \"smin\")\n \t\t\t      (smax \"smax\")"}, {"sha": "c1e289a9bbf632efaabe02ba67e9acd8278c4892", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -1,3 +1,10 @@\n+2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/sve/div_1.c: New test.\n+\t* gcc.target/aarch64/sve/div_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/mul_highpart_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/mul_highpart_2_run.c: Likewise.\n+\n 2018-05-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc.dg/vect/bb-slp-div-1.c: New XFAILed test."}, {"sha": "ec51ce1092873d74a8dbcb539498b00d5bbe9524", "filename": "gcc/testsuite/gcc.target/aarch64/sve/div_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdiv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdiv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdiv_1.c?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\t\\\n+void __attribute__ ((noipa))\t\t\t\t\\\n+mod_##TYPE (TYPE *restrict dst, TYPE *restrict src1,\t\\\n+\t    TYPE *restrict src2, int count)\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\\\n+    dst[i] = src1[i] / src2[i];\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsdiv\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tudiv\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsdiv\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tudiv\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "8134837a5db4aa4a7e67a5c0e500cf74260fc651", "filename": "gcc/testsuite/gcc.target/aarch64/sve/div_1_run.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdiv_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdiv_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fdiv_1_run.c?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model --save-temps\" } */\n+\n+#include \"div_1.c\"\n+\n+#define N 79\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE dst[N], src1[N], src2[N];\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tsrc1[i] = i * 7 + i % 3;\t\t\\\n+\tif (i % 11 > 7)\t\t\t\t\\\n+\t  src1[i] = -src1[i];\t\t\t\\\n+\tsrc2[i] = 5 + (i % 5);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\\\n+      }\t\t\t\t\t\t\\\n+    mod_##TYPE (dst, src1, src2, N);\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      if (dst[i] != src1[i] / src2[i])\t\t\\\n+\t__builtin_abort ();\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}, {"sha": "d2d8b931d64b20a7217f6ae2398445f183e97eff", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_highpart_2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_2.c?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model --save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define DEF_LOOP(TYPE)\t\t\t\t\\\n+void __attribute__ ((noipa))\t\t\t\\\n+mod_##TYPE (TYPE *dst, TYPE *src, int count)\t\\\n+{\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\\\n+    dst[i] = src[i] / 17;\t\t\t\\\n+}\n+\n+#define TEST_ALL(T) \\\n+  T (int32_t) \\\n+  T (uint32_t) \\\n+  T (int64_t) \\\n+  T (uint64_t)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tsmulh\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tumulh\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "24f4a576c7cbe1a8295fcd789c6180ae65d4f83e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mul_highpart_2_run.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c38f73190ba3669a9cd8b57626b9d0e7087fd55c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmul_highpart_2_run.c?ref=c38f73190ba3669a9cd8b57626b9d0e7087fd55c", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model --save-temps\" } */\n+\n+#include \"mul_highpart_2.c\"\n+\n+#define N 79\n+\n+#define TEST_LOOP(TYPE)\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE dst[N], src[N];\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tsrc[i] = i * 7 + i % 3;\t\t\t\\\n+\tif (i % 11 > 7)\t\t\t\t\\\n+\t  src[i] = -src[i];\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\\\n+      }\t\t\t\t\t\t\\\n+    mod_##TYPE (dst, src, N);\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      if (dst[i] != src[i] / 17)\t\t\\\n+\t__builtin_abort ();\t\t\t\\\n+  }\n+\n+int\n+main (void)\n+{\n+  TEST_ALL (TEST_LOOP);\n+  return 0;\n+}"}]}