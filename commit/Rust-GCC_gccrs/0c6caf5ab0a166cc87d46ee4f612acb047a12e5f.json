{"sha": "0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM2Y2FmNWFiMGExNjZjYzg3ZDQ2ZWU0ZjYxMmFjYjA0N2ExMmU1Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-19T22:30:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-19T22:30:46Z"}, "message": "Change general statement method to always use backend interface.\n\nFrom-SVN: r172740", "tree": {"sha": "e5addaf682422d971c9a4eca40a9fb00f24cdd44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5addaf682422d971c9a4eca40a9fb00f24cdd44"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/comments", "author": null, "committer": null, "parents": [{"sha": "fee8b6dadd3847d6cdc5e48a467be48ce16fd71e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee8b6dadd3847d6cdc5e48a467be48ce16fd71e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee8b6dadd3847d6cdc5e48a467be48ce16fd71e"}], "stats": {"total": 297, "additions": 137, "deletions": 160}, "files": [{"sha": "af0084f36d4949ccf244887e6444d42583efcac4", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "patch": "@@ -1481,7 +1481,8 @@ Function::build_tree(Gogo* gogo, Named_object* named_function)\n \t    {\n \t      Translate_context dcontext(gogo, named_function, this->block_,\n \t\t\t\t\t tree_to_block(bind));\n-\t      defer_init = this->defer_stack_->get_tree(&dcontext);\n+\t      Bstatement* bdi = this->defer_stack_->get_backend(&dcontext);\n+\t      defer_init = stat_to_tree(bdi);\n \t    }\n \t}\n "}, {"sha": "94dcf6411a59f955203968777ae6e1a67e741848", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "patch": "@@ -3320,7 +3320,7 @@ Block::get_backend(Translate_context* context)\n   for (std::vector<Statement*>::const_iterator p = this->statements_.begin();\n        p != this->statements_.end();\n        ++p)\n-    bstatements.push_back(tree_to_stat((*p)->get_tree(&subcontext)));\n+    bstatements.push_back((*p)->get_backend(&subcontext));\n \n   context->backend()->block_add_statements(ret, bstatements);\n "}, {"sha": "30c7621798379ce1490c4108a9df8cb25ae7775f", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 104, "deletions": 128, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "patch": "@@ -151,13 +151,12 @@ Statement::thunk_statement()\n // Get a tree for a Statement.  This is really done by the child\n // class.\n \n-tree\n-Statement::get_tree(Translate_context* context)\n+Bstatement*\n+Statement::get_backend(Translate_context* context)\n {\n   if (this->classification_ == STATEMENT_ERROR)\n-    return error_mark_node;\n-\n-  return this->do_get_tree(context);\n+    return context->backend()->error_statement();\n+  return this->do_get_backend(context);\n }\n \n // Build tree nodes and set locations.\n@@ -204,8 +203,8 @@ class Error_statement : public Statement\n   do_traverse(Traverse*)\n   { return TRAVERSE_CONTINUE; }\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n };\n \n@@ -248,19 +247,18 @@ Variable_declaration_statement::do_traverse_assignments(\n \n // Return the tree for a variable declaration.\n \n-tree\n-Variable_declaration_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Variable_declaration_statement::do_get_backend(Translate_context* context)\n {\n   Variable* var = this->var_->var_value();\n   Bvariable* bvar = this->var_->get_backend_variable(context->gogo(),\n \t\t\t\t\t\t     context->function());\n   tree init = var->get_init_tree(context->gogo(), context->function());\n   Bexpression* binit = init == NULL_TREE ? NULL : tree_to_expr(init);\n-  Bstatement* ret;\n   if (!var->is_in_heap())\n     {\n       gcc_assert(binit != NULL);\n-      ret = context->backend()->init_statement(bvar, binit);\n+      return context->backend()->init_statement(bvar, binit);\n     }\n   else\n     {\n@@ -279,18 +277,17 @@ Variable_declaration_statement::do_get_tree(Translate_context* context)\n       Bstatement* s1 = context->backend()->init_statement(bvar,\n \t\t\t\t\t\t\t  tree_to_expr(space));\n       if (binit == NULL)\n-\tret = s1;\n+\treturn s1;\n       else\n \t{\n \t  tree indir = build_fold_indirect_ref_loc(loc, space);\n \t  Bexpression* bindir = tree_to_expr(indir);\n \t  Bstatement* s2 = context->backend()->assignment_statement(bindir,\n \t\t\t\t\t\t\t\t    binit,\n \t\t\t\t\t\t\t\t    loc);\n-\t  ret = context->backend()->compound_statement(s1, s2);\n+\t  return context->backend()->compound_statement(s1, s2);\n \t}\n     }\n-  return stat_to_tree(ret);\n }\n \n // Make a variable declaration.\n@@ -384,8 +381,8 @@ Temporary_statement::do_check_types(Gogo*)\n \n // Return a tree.\n \n-tree\n-Temporary_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Temporary_statement::do_get_backend(Translate_context* context)\n {\n   gcc_assert(this->bvariable_ == NULL);\n \n@@ -419,7 +416,7 @@ Temporary_statement::do_get_tree(Translate_context* context)\n \t\t\t\t\t   btype, binit,\n \t\t\t\t\t   this->is_address_taken_,\n \t\t\t\t\t   this->location(), &statement);\n-  return stat_to_tree(statement);\n+  return statement;\n }\n \n // Return the backend variable.\n@@ -468,8 +465,8 @@ class Assignment_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // Left hand side--the lvalue.\n@@ -540,30 +537,30 @@ Assignment_statement::do_check_types(Gogo*)\n \n // Build a tree for an assignment statement.\n \n-tree\n-Assignment_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Assignment_statement::do_get_backend(Translate_context* context)\n {\n   tree rhs_tree = this->rhs_->get_tree(context);\n+  if (rhs_tree == error_mark_node)\n+    return context->backend()->error_statement();\n \n   if (this->lhs_->is_sink_expression())\n-    return rhs_tree;\n+    return context->backend()->expression_statement(tree_to_expr(rhs_tree));\n \n   tree lhs_tree = this->lhs_->get_tree(context);\n \n-  if (lhs_tree == error_mark_node || rhs_tree == error_mark_node)\n-    return error_mark_node;\n+  if (lhs_tree == error_mark_node)\n+    return context->backend()->error_statement();\n \n   rhs_tree = Expression::convert_for_assignment(context, this->lhs_->type(),\n \t\t\t\t\t\tthis->rhs_->type(), rhs_tree,\n \t\t\t\t\t\tthis->location());\n   if (rhs_tree == error_mark_node)\n-    return error_mark_node;\n+    return context->backend()->error_statement();\n \n-  Bstatement* ret;\n-  ret = context->backend()->assignment_statement(tree_to_expr(lhs_tree),\n-\t\t\t\t\t\t tree_to_expr(rhs_tree),\n-\t\t\t\t\t\t this->location());\n-  return stat_to_tree(ret);\n+  return context->backend()->assignment_statement(tree_to_expr(lhs_tree),\n+\t\t\t\t\t\t  tree_to_expr(rhs_tree),\n+\t\t\t\t\t\t  this->location());\n }\n \n // Make an assignment statement.\n@@ -634,8 +631,8 @@ class Assignment_operation_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -761,8 +758,8 @@ class Tuple_assignment_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -888,8 +885,8 @@ class Tuple_map_assignment_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1015,8 +1012,8 @@ class Map_assignment_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1129,8 +1126,8 @@ class Tuple_receive_assignment_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1253,8 +1250,8 @@ class Tuple_type_guard_assignment_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1424,8 +1421,8 @@ class Expression_statement : public Statement\n   bool\n   do_may_fall_through() const;\n \n-  tree\n-  do_get_tree(Translate_context* context);\n+  Bstatement*\n+  do_get_backend(Translate_context* context);\n \n  private:\n   Expression* expr_;\n@@ -1464,13 +1461,11 @@ Expression_statement::do_may_fall_through() const\n \n // Convert to backend representation.\n \n-tree\n-Expression_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Expression_statement::do_get_backend(Translate_context* context)\n {\n   tree expr_tree = this->expr_->get_tree(context);\n-  Bexpression* bexpr = tree_to_expr(expr_tree);\n-  Bstatement* ret = context->backend()->expression_statement(bexpr);\n-  return stat_to_tree(ret);\n+  return context->backend()->expression_statement(tree_to_expr(expr_tree));\n }\n \n // Make an expression statement from an Expression.\n@@ -1505,21 +1500,20 @@ class Block_statement : public Statement\n   do_may_fall_through() const\n   { return this->block_->may_fall_through(); }\n \n-  tree\n-  do_get_tree(Translate_context* context);\n+  Bstatement*\n+  do_get_backend(Translate_context* context);\n \n  private:\n   Block* block_;\n };\n \n // Convert a block to the backend representation of a statement.\n \n-tree\n-Block_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Block_statement::do_get_backend(Translate_context* context)\n {\n   Bblock* bblock = this->block_->get_backend(context);\n-  Bstatement* ret = context->backend()->block_statement(bblock);\n-  return stat_to_tree(ret);\n+  return context->backend()->block_statement(bblock);\n }\n \n // Make a block statement.\n@@ -1552,8 +1546,8 @@ class Inc_dec_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -2222,20 +2216,19 @@ Thunk_statement::get_fn_and_arg(Expression** pfn, Expression** parg)\n \n // Class Go_statement.\n \n-tree\n-Go_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Go_statement::do_get_backend(Translate_context* context)\n {\n   Expression* fn;\n   Expression* arg;\n   if (!this->get_fn_and_arg(&fn, &arg))\n-    return error_mark_node;\n+    return context->backend()->error_statement();\n \n   Expression* call = Runtime::make_call(Runtime::GO, this->location(), 2,\n \t\t\t\t\tfn, arg);\n   tree call_tree = call->get_tree(context);\n   Bexpression* call_bexpr = tree_to_expr(call_tree);\n-  Bstatement* ret = context->backend()->expression_statement(call_bexpr);\n-  return stat_to_tree(ret);\n+  return context->backend()->expression_statement(call_bexpr);\n }\n \n // Make a go statement.\n@@ -2248,13 +2241,13 @@ Statement::make_go_statement(Call_expression* call, source_location location)\n \n // Class Defer_statement.\n \n-tree\n-Defer_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Defer_statement::do_get_backend(Translate_context* context)\n {\n   Expression* fn;\n   Expression* arg;\n   if (!this->get_fn_and_arg(&fn, &arg))\n-    return error_mark_node;\n+    return context->backend()->error_statement();\n \n   source_location loc = this->location();\n   Expression* ds = context->function()->func_value()->defer_stack(loc);\n@@ -2263,8 +2256,7 @@ Defer_statement::do_get_tree(Translate_context* context)\n \t\t\t\t\tds, fn, arg);\n   tree call_tree = call->get_tree(context);\n   Bexpression* call_bexpr = tree_to_expr(call_tree);\n-  Bstatement* ret = context->backend()->expression_statement(call_bexpr);\n-  return stat_to_tree(ret);\n+  return context->backend()->expression_statement(call_bexpr);\n }\n \n // Make a defer statement.\n@@ -2424,8 +2416,8 @@ Return_statement::do_lower(Gogo*, Named_object* function, Block* enclosing)\n \n // Convert a return statement to the backend representation.\n \n-tree\n-Return_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Return_statement::do_get_backend(Translate_context* context)\n {\n   source_location loc = this->location();\n \n@@ -2446,10 +2438,8 @@ Return_statement::do_get_tree(Translate_context* context)\n \t}\n     }\n \n-  Bstatement* ret;\n-  ret = context->backend()->return_statement(tree_to_function(fndecl),\n-\t\t\t\t\t     retvals, loc);\n-  return stat_to_tree(ret);\n+  return context->backend()->return_statement(tree_to_function(fndecl),\n+\t\t\t\t\t      retvals, loc);\n }\n \n // Make a return statement.\n@@ -2484,11 +2474,9 @@ class Bc_statement : public Statement\n   do_may_fall_through() const\n   { return false; }\n \n-  tree\n-  do_get_tree(Translate_context* context)\n-  {\n-    return stat_to_tree(this->label_->get_goto(context, this->location()));\n-  }\n+  Bstatement*\n+  do_get_backend(Translate_context* context)\n+  { return this->label_->get_goto(context, this->location()); }\n \n  private:\n   // The label that this branches to.\n@@ -2536,8 +2524,8 @@ class Goto_statement : public Statement\n   do_may_fall_through() const\n   { return false; }\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   Label* label_;\n@@ -2559,13 +2547,11 @@ Goto_statement::do_check_types(Gogo*)\n \n // Return the tree for the goto statement.\n \n-tree\n-Goto_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Goto_statement::do_get_backend(Translate_context* context)\n {\n   Blabel* blabel = this->label_->get_backend_label(context);\n-  Bstatement* statement = context->backend()->goto_statement(blabel,\n-\t\t\t\t\t\t\t     this->location());\n-  return stat_to_tree(statement);\n+  return context->backend()->goto_statement(blabel, this->location());\n }\n \n // Make a goto statement.\n@@ -2595,11 +2581,9 @@ class Goto_unnamed_statement : public Statement\n   do_may_fall_through() const\n   { return false; }\n \n-  tree\n-  do_get_tree(Translate_context* context)\n-  {\n-    return stat_to_tree(this->label_->get_goto(context, this->location()));\n-  }\n+  Bstatement*\n+  do_get_backend(Translate_context* context)\n+  { return this->label_->get_goto(context, this->location()); }\n \n  private:\n   Unnamed_label* label_;\n@@ -2626,13 +2610,11 @@ Label_statement::do_traverse(Traverse*)\n \n // Return a tree defining this label.\n \n-tree\n-Label_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Label_statement::do_get_backend(Translate_context* context)\n {\n   Blabel* blabel = this->label_->get_backend_label(context);\n-  Bstatement* statement;\n-  statement = context->backend()->label_definition_statement(blabel);\n-  return stat_to_tree(statement);\n+  return context->backend()->label_definition_statement(blabel);\n }\n \n // Make a label statement.\n@@ -2658,9 +2640,9 @@ class Unnamed_label_statement : public Statement\n   do_traverse(Traverse*)\n   { return TRAVERSE_CONTINUE; }\n \n-  tree\n-  do_get_tree(Translate_context* context)\n-  { return stat_to_tree(this->label_->get_definition(context)); }\n+  Bstatement*\n+  do_get_backend(Translate_context* context)\n+  { return this->label_->get_definition(context); }\n \n  private:\n   // The label.\n@@ -2699,8 +2681,8 @@ class If_statement : public Statement\n   bool\n   do_may_fall_through() const;\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   Expression* cond_;\n@@ -2758,22 +2740,19 @@ If_statement::do_may_fall_through() const\n \n // Get tree.\n \n-tree\n-If_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+If_statement::do_get_backend(Translate_context* context)\n {\n   gcc_assert(this->cond_->type()->is_boolean_type()\n \t     || this->cond_->type()->is_error());\n   tree cond_tree = this->cond_->get_tree(context);\n+  Bexpression* cond_expr = tree_to_expr(cond_tree);\n   Bblock* then_block = this->then_block_->get_backend(context);\n   Bblock* else_block = (this->else_block_ == NULL\n \t\t\t? NULL\n \t\t\t: this->else_block_->get_backend(context));\n-  Bexpression* cond_expr = tree_to_expr(cond_tree);\n-  \n-  Bstatement* ret = context->backend()->if_statement(cond_expr, then_block,\n-\t\t\t\t\t\t     else_block,\n-\t\t\t\t\t\t     this->location());\n-  return stat_to_tree(ret);\n+  return context->backend()->if_statement(cond_expr, then_block,\n+\t\t\t\t\t  else_block, this->location());\n }\n \n // Make an if statement.\n@@ -3255,8 +3234,8 @@ class Constant_switch_statement : public Statement\n   bool\n   do_may_fall_through() const;\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // The value to switch on.\n@@ -3313,8 +3292,8 @@ Constant_switch_statement::do_may_fall_through() const\n \n // Convert to GENERIC.\n \n-tree\n-Constant_switch_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Constant_switch_statement::do_get_backend(Translate_context* context)\n {\n   tree switch_val_tree = this->val_->get_tree(context);\n   Bexpression* switch_val_expr = tree_to_expr(switch_val_tree);\n@@ -3334,9 +3313,7 @@ Constant_switch_statement::do_get_tree(Translate_context* context)\n \t\t\t\t\t\t\t  all_statements,\n \t\t\t\t\t\t\t  this->location());\n   Bstatement* ldef = break_label->get_definition(context);\n-  Bstatement* ret = context->backend()->compound_statement(switch_statement,\n-\t\t\t\t\t\t\t   ldef);\n-  return stat_to_tree(ret);\n+  return context->backend()->compound_statement(switch_statement, ldef);\n }\n \n // Class Switch_statement.\n@@ -3775,8 +3752,8 @@ Send_statement::do_check_types(Gogo*)\n \n // Get a tree for a send statement.\n \n-tree\n-Send_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Send_statement::do_get_backend(Translate_context* context)\n {\n   source_location loc = this->location();\n \n@@ -3824,7 +3801,7 @@ Send_statement::do_get_tree(Translate_context* context)\n     case Type::TYPE_NAMED:\n     case Type::TYPE_FORWARD:\n       gcc_assert(saw_errors());\n-      return error_mark_node;\n+      return context->backend()->error_statement();\n     }\n \n   // Only try to take the address of a variable.  We have already\n@@ -3862,7 +3839,7 @@ Send_statement::do_get_tree(Translate_context* context)\n \t\t\t\t\t\t\t    val, loc);\n       Expression* ref = Expression::make_temporary_reference(temp, loc);\n       val = Expression::make_unary(OPERATOR_AND, ref, loc);\n-      btemp = tree_to_stat(temp->get_tree(context));\n+      btemp = temp->get_backend(context);\n     }\n \n   call = Runtime::make_call(code, loc, 3, this->channel_, val,\n@@ -3873,9 +3850,9 @@ Send_statement::do_get_tree(Translate_context* context)\n   Bstatement* s = context->backend()->expression_statement(bcall);\n \n   if (btemp == NULL)\n-    return stat_to_tree(s);\n+    return s;\n   else\n-    return stat_to_tree(context->backend()->compound_statement(btemp, s));\n+    return context->backend()->compound_statement(btemp, s);\n }\n \n // Make a send statement.\n@@ -4232,7 +4209,7 @@ Select_clauses::get_backend(Translate_context* context,\n   Temporary_statement* chan_temp = Statement::make_temporary(chan_array_type,\n \t\t\t\t\t\t\t     chans,\n \t\t\t\t\t\t\t     location);\n-  statements.push_back(tree_to_stat(chan_temp->get_tree(context)));\n+  statements.push_back(chan_temp->get_backend(context));\n \n   Type* is_send_array_type = Type::make_array_type(Type::lookup_bool_type(),\n \t\t\t\t\t\t   ecount->copy());\n@@ -4243,7 +4220,7 @@ Select_clauses::get_backend(Translate_context* context,\n   context->gogo()->lower_expression(context->function(), &is_sends);\n   Temporary_statement* is_send_temp =\n     Statement::make_temporary(is_send_array_type, is_sends, location);\n-  statements.push_back(tree_to_stat(is_send_temp->get_tree(context)));\n+  statements.push_back(is_send_temp->get_backend(context));\n \n   mpz_init_set_ui(ival, 0);\n   Expression* zero = Expression::make_integer(&ival, NULL, location);\n@@ -4375,12 +4352,11 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n \n // Return the tree for a select statement.\n \n-tree\n-Select_statement::do_get_tree(Translate_context* context)\n+Bstatement*\n+Select_statement::do_get_backend(Translate_context* context)\n {\n-  Bstatement* ret = this->clauses_->get_backend(context, this->break_label(),\n-\t\t\t\t\t\tthis->location());\n-  return stat_to_tree(ret);\n+  return this->clauses_->get_backend(context, this->break_label(),\n+\t\t\t\t     this->location());\n }\n \n // Make a select statement."}, {"sha": "d21154325f88c9f8f9c15d45a347b21952234ffe", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c6caf5ab0a166cc87d46ee4f612acb047a12e5f/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=0c6caf5ab0a166cc87d46ee4f612acb047a12e5f", "patch": "@@ -367,9 +367,9 @@ class Statement\n   may_fall_through() const\n   { return this->do_may_fall_through(); }\n \n-  // Return the tree for a statement.  BLOCK is the enclosing block.\n-  tree\n-  get_tree(Translate_context*);\n+  // Convert the statement to the backend representation.\n+  Bstatement*\n+  get_backend(Translate_context*);\n \n  protected:\n   // Implemented by child class: traverse the tree.\n@@ -407,9 +407,9 @@ class Statement\n   do_may_fall_through() const\n   { return true; }\n \n-  // Implemented by child class: return a tree.\n-  virtual tree\n-  do_get_tree(Translate_context*) = 0;\n+  // Implemented by child class: convert to backend representation.\n+  virtual Bstatement*\n+  do_get_backend(Translate_context*) = 0;\n \n   // Traverse an expression in a statement.\n   int\n@@ -507,8 +507,8 @@ class Temporary_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // The type of the temporary variable.\n@@ -541,8 +541,8 @@ class Variable_declaration_statement : public Statement\n   bool\n   do_traverse_assignments(Traverse_assignments*);\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   Named_object* var_;\n@@ -578,8 +578,8 @@ class Return_statement : public Statement\n   do_may_fall_through() const\n   { return false; }\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // Return values.  This may be NULL.\n@@ -614,8 +614,8 @@ class Send_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // The channel on which to send the value.\n@@ -822,8 +822,8 @@ class Select_statement : public Statement\n   do_may_fall_through() const\n   { return this->clauses_->may_fall_through(); }\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // The select clauses.\n@@ -912,8 +912,8 @@ class Go_statement : public Thunk_statement\n   { }\n \n  protected:\n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n };\n \n // A defer statement.\n@@ -926,8 +926,8 @@ class Defer_statement : public Thunk_statement\n   { }\n \n  protected:\n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n };\n \n // A label statement.\n@@ -949,8 +949,8 @@ class Label_statement : public Statement\n   int\n   do_traverse(Traverse*);\n \n-  tree\n-  do_get_tree(Translate_context*);\n+  Bstatement*\n+  do_get_backend(Translate_context*);\n \n  private:\n   // The label.\n@@ -1001,8 +1001,8 @@ class For_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1059,8 +1059,8 @@ class For_range_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1288,8 +1288,8 @@ class Switch_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:\n@@ -1434,8 +1434,8 @@ class Type_switch_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*);\n \n-  tree\n-  do_get_tree(Translate_context*)\n+  Bstatement*\n+  do_get_backend(Translate_context*)\n   { gcc_unreachable(); }\n \n  private:"}]}