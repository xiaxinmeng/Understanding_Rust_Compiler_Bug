{"sha": "765d7b5470cbf6e46d1982726e44c962d9c6516c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY1ZDdiNTQ3MGNiZjZlNDZkMTk4MjcyNmU0NGM5NjJkOWM2NTE2Yw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-06T09:52:35Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-06T09:52:35Z"}, "message": "re PR target/52933 (SH Target: Use div0s for integer sign comparisons)\n\ngcc/\n\tPR target/52933\n\t* config/sh/sh.md (*cmp_div0s_7, *cmp_div0s_8): Add div0s variants.\n\t* config/sh/sh.c (sh_rtx_costs): Add another div0s case.\n\ngcc/testsuite/\n\tPR target/52933\n\t* gcc.target/sh/pr52933-1.c (test_31, test_32, test_33, test_34,\n\ttest_35, test_36, test_37, test_38, test_39, test_40): New sub-tests.\n\tAdjust expected instruction counts.\n\t* gcc.target/sh/pr52933-2.c: Adjust expected instruction counts.\n\nFrom-SVN: r235952", "tree": {"sha": "321e082db475892c24122dedc28a608744f1f8f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/321e082db475892c24122dedc28a608744f1f8f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/765d7b5470cbf6e46d1982726e44c962d9c6516c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765d7b5470cbf6e46d1982726e44c962d9c6516c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/765d7b5470cbf6e46d1982726e44c962d9c6516c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/765d7b5470cbf6e46d1982726e44c962d9c6516c/comments", "author": null, "committer": null, "parents": [{"sha": "29c94e65e1be846e8a71a3d24450c4cf1d1d5b41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29c94e65e1be846e8a71a3d24450c4cf1d1d5b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29c94e65e1be846e8a71a3d24450c4cf1d1d5b41"}], "stats": {"total": 198, "additions": 192, "deletions": 6}, "files": [{"sha": "b575931ddb6914d6ceedb7b9045082edae6690c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=765d7b5470cbf6e46d1982726e44c962d9c6516c", "patch": "@@ -1,3 +1,9 @@\n+2016-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52933\n+\t* config/sh/sh.md (*cmp_div0s_7, *cmp_div0s_8): Add div0s variants.\n+\t* config/sh/sh.c (sh_rtx_costs): Add another div0s case.\n+\n 2016-05-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/70875"}, {"sha": "809f679f807162b23f2d6d1482bc4599d5c3ab56", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=765d7b5470cbf6e46d1982726e44c962d9c6516c", "patch": "@@ -3209,6 +3209,15 @@ sh_rtx_costs (rtx x, machine_mode mode ATTRIBUTE_UNUSED, int outer_code,\n \t  *total = 1; //COSTS_N_INSNS (1);\n \t  return true;\n \t}\n+\n+      /* div0s variant.  */\n+      if (GET_CODE (XEXP (x, 0)) == XOR\n+\t  && GET_CODE (XEXP (XEXP (x, 0), 0)) == XOR\n+\t  && CONST_INT_P (XEXP (XEXP (x, 0), 1)))\n+\t{\n+\t  *total = 1;\n+\t  return true;\n+\t}\n       return false;\n \n     /* The cost of a sign or zero extend depends on whether the source is a"}, {"sha": "e704e2ac3fdc3250d0079d8baa4ae14cd94c4d57", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=765d7b5470cbf6e46d1982726e44c962d9c6516c", "patch": "@@ -1103,6 +1103,97 @@\n \t(lshiftrt:SI (xor:SI (match_dup 0) (match_dup 1)) (const_int 31)))\n    (set (reg:SI T_REG) (xor:SI (reg:SI T_REG) (const_int 1)))])\n \n+;; In some cases, it might be shorter to get a tested bit into bit 31 and\n+;; use div0s.  Otherwise it's usually better to just leave the xor and tst\n+;; sequence.  The only thing we can try to do here is avoiding the large\n+;; tst constant.\n+(define_insn_and_split \"*cmp_div0s_7\"\n+  [(set (reg:SI T_REG)\n+\t(zero_extract:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\")\n+\t\t\t\t (match_operand:SI 1 \"arith_reg_operand\"))\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand 2 \"const_int_operand\")))]\n+  \"TARGET_SH1 && can_create_pseudo_p ()\n+   && (INTVAL (operands[2]) == 7 || INTVAL (operands[2]) == 15\n+       || INTVAL (operands[2]) == 23 || INTVAL (operands[2]) == 29\n+       || INTVAL (operands[2]) == 30 || INTVAL (operands[2]) == 31)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  const int bitpos = INTVAL (operands[2]);\n+\n+  rtx op0 = gen_reg_rtx (SImode);\n+  rtx op1 = gen_reg_rtx (SImode);\n+\n+  if (bitpos == 23 || bitpos == 30 || bitpos == 29)\n+    {\n+      emit_insn (gen_ashlsi3 (op0, operands[0], GEN_INT (31 - bitpos)));\n+      emit_insn (gen_ashlsi3 (op1, operands[1], GEN_INT (31 - bitpos)));\n+    }\n+  else if (bitpos == 15)\n+    {\n+      emit_insn (gen_extendhisi2 (op0, gen_lowpart (HImode, operands[0])));\n+      emit_insn (gen_extendhisi2 (op1, gen_lowpart (HImode, operands[1])));\n+    }\n+  else if (bitpos == 7)\n+    {\n+      emit_insn (gen_extendqisi2 (op0, gen_lowpart (QImode, operands[0])));\n+      emit_insn (gen_extendqisi2 (op1, gen_lowpart (QImode, operands[1])));\n+    }\n+  else if (bitpos == 31)\n+    {\n+      op0 = operands[0];\n+      op1 = operands[1];\n+    }\n+  else\n+    gcc_unreachable ();\n+\n+  emit_insn (gen_cmp_div0s (op0, op1));\n+  DONE;\n+})\n+\n+;; For bits 0..7 using a xor and tst #imm,r0 sequence seems to be better.\n+;; Thus allow the following patterns only for higher bit positions where\n+;; we it's more likely to save the large tst constant.\n+(define_insn_and_split \"*cmp_div0s_8\"\n+  [(set (reg:SI T_REG)\n+\t(eq:SI (zero_extract:SI (match_operand:SI 0 \"arith_reg_operand\")\n+\t\t\t\t(const_int 1)\n+\t\t\t\t(match_operand 2 \"const_int_operand\"))\n+\t       (zero_extract:SI (match_operand:SI 1 \"arith_reg_operand\")\n+\t\t\t\t(const_int 1)\n+\t\t\t\t(match_dup 2))))]\n+  \"TARGET_SH1 && can_create_pseudo_p ()\n+   && (INTVAL (operands[2]) == 15\n+       || INTVAL (operands[2]) == 23 || INTVAL (operands[2]) == 29\n+       || INTVAL (operands[2]) == 30 || INTVAL (operands[2]) == 31)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:SI T_REG)\n+\t(zero_extract:SI (xor:SI (match_dup 0) (match_dup 1))\n+\t\t\t (const_int 1) (match_dup 2)))\n+   (set (reg:SI T_REG) (xor:SI (reg:SI T_REG) (const_int 1)))])\n+\n+(define_insn_and_split \"*cmp_div0s_9\"\n+  [(set (reg:SI T_REG)\n+\t(zero_extract:SI (xor:SI (xor:SI (match_operand:SI 0 \"arith_reg_operand\")\n+\t\t\t\t\t (match_operand:SI 1 \"arith_reg_operand\"))\n+\t\t\t\t (match_operand 2 \"const_int_operand\"))\n+\t\t\t (const_int 1)\n+\t\t\t (match_operand 3 \"const_int_operand\")))]\n+  \"TARGET_SH1 && can_create_pseudo_p ()\n+   && (INTVAL (operands[2]) & 0xFFFFFFFF) == (1U << INTVAL (operands[3]))\n+   && (INTVAL (operands[3]) == 15\n+       || INTVAL (operands[3]) == 23 || INTVAL (operands[3]) == 29\n+       || INTVAL (operands[3]) == 30 || INTVAL (operands[3]) == 31)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (reg:SI T_REG)\n+\t(zero_extract:SI (xor:SI (match_dup 0) (match_dup 1))\n+\t\t\t (const_int 1) (match_dup 3)))\n+   (set (reg:SI T_REG) (xor:SI (reg:SI T_REG) (const_int 1)))])\n+\n ;; -------------------------------------------------------------------------\n ;; SImode compare and branch\n ;; -------------------------------------------------------------------------"}, {"sha": "762c2a8036748502d409a6e3119b3e7ecb3d0044", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=765d7b5470cbf6e46d1982726e44c962d9c6516c", "patch": "@@ -1,3 +1,11 @@\n+2016-05-06  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52933\n+\t* gcc.target/sh/pr52933-1.c (test_31, test_32, test_33, test_34,\n+\ttest_35, test_36, test_37, test_38, test_39, test_40): New sub-tests.\n+\tAdjust expected instruction counts.\n+\t* gcc.target/sh/pr52933-2.c: Adjust expected instruction counts.\n+\n 2016-05-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/70875"}, {"sha": "81aa94fc8f0de4ee42ca0fca06a1f62d0f137e3c", "filename": "gcc/testsuite/gcc.target/sh/pr52933-1.c", "status": "modified", "additions": 75, "deletions": 3, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-1.c?ref=765d7b5470cbf6e46d1982726e44c962d9c6516c", "patch": "@@ -4,13 +4,13 @@\n    logic usually show up as redundant tst insns.  */\n /* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-final { scan-assembler-times \"div0s\" 32 } } */\n+/* { dg-final { scan-assembler-times \"div0s\" 42 } } */\n /* { dg-final { scan-assembler-not \"tst\" } } */\n /* { dg-final { scan-assembler-not \"not\\t\" } }  */\n /* { dg-final { scan-assembler-not \"nott\" } }  */\n \n-/* { dg-final { scan-assembler-times \"negc\" 9 { target { ! sh2a } } } }  */\n-/* { dg-final { scan-assembler-times \"movrt\" 9 { target { sh2a } } } }  */\n+/* { dg-final { scan-assembler-times \"negc\" 10 { target { ! sh2a } } } }  */\n+/* { dg-final { scan-assembler-times \"movrt\" 10 { target { sh2a } } } }  */\n \n typedef unsigned char bool;\n \n@@ -212,3 +212,75 @@ test_30 (int a, int b)\n {\n   return ((a >> 31) ^ (b >> 31)) & 1;\n }\n+\n+// -------------------------------------------------------\n+\n+bool\n+test_31 (int a, int b)\n+{\n+  /* 2x exts.w, div0s  */\n+  return ((a & 0x8000) ^ (b & 0x8000)) != 0;\n+}\n+\n+bool\n+test_32 (int a, int b)\n+{\n+  /* 2x exts.w, div0s  */\n+  return (a & 0x8000) != (b & 0x8000);\n+}\n+\n+bool\n+test_33 (int a, int b)\n+{\n+  /* 2x add/shll, div0s  */\n+  return ((a & (1<<30)) ^ (b & (1<<30))) != 0;\n+}\n+\n+bool\n+test_34 (int a, int b)\n+{\n+  /* 2x exts.b, div0s  */\n+  return (a & 0x80) != (b & 0x80);\n+}\n+\n+bool\n+test_35 (signed char a, signed char b)\n+{\n+  /* 2x exts.b, div0s  */\n+  return (a < 0) != (b < 0);\n+}\n+\n+bool\n+test_36 (short a, short b)\n+{\n+  /* 2x exts.w, div0s  */\n+  return (a < 0) != (b < 0);\n+}\n+\n+int\n+test_37 (short a, short b)\n+{\n+  /* 2x exts.w, div0s  */\n+  return (a < 0) != (b < 0) ? 40 : -10;\n+}\n+\n+bool\n+test_38 (int a, int b)\n+{\n+  /* 2x shll8, div0s  */\n+  return ((a & (1<<23)) ^ (b & (1<<23))) != 0;\n+}\n+\n+bool\n+test_39 (int a, int b)\n+{\n+  /* 2x shll2, div0s  */\n+  return ((a & (1<<29)) ^ (b & (1<<29))) != 0;\n+}\n+\n+bool\n+test_40 (short a, short b)\n+{\n+  /* 2x exts.w, div0s, negc  */\n+  return (a < 0) == (b < 0);\n+}"}, {"sha": "2b5d09ad0bb74ad27197f8374edc975a84e3084c", "filename": "gcc/testsuite/gcc.target/sh/pr52933-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/765d7b5470cbf6e46d1982726e44c962d9c6516c/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52933-2.c?ref=765d7b5470cbf6e46d1982726e44c962d9c6516c", "patch": "@@ -5,12 +5,12 @@\n    logic usually show up as redundant tst insns.  */\n /* { dg-do compile }  */\n /* { dg-options \"-O2 -mpretend-cmove\" } */\n-/* { dg-final { scan-assembler-times \"div0s\" 32 } } */\n+/* { dg-final { scan-assembler-times \"div0s\" 42 } } */\n /* { dg-final { scan-assembler-not \"tst\" } } */\n /* { dg-final { scan-assembler-not \"not\\t\" } }  */\n /* { dg-final { scan-assembler-not \"nott\" } }  */\n \n-/* { dg-final { scan-assembler-times \"negc\" 9 { target { ! sh2a } } } }  */\n-/* { dg-final { scan-assembler-times \"movrt\" 9 { target { sh2a } } } }  */\n+/* { dg-final { scan-assembler-times \"negc\" 10 { target { ! sh2a } } } }  */\n+/* { dg-final { scan-assembler-times \"movrt\" 10 { target { sh2a } } } }  */\n \n #include \"pr52933-1.c\""}]}