{"sha": "522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyZTNkMjIyNjU5YTBmM2VhM2QwZmZjMWU3MmIzNWZlYWZlZDAxZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-05-07T20:43:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-05-07T20:43:10Z"}, "message": "configure.in: Add support for WindISS.\n\n\t* configure.in: Add support for WindISS.\n\t* configure: Regenerated.\n\t* configure.target: Add support for WindISS.\n\t* config/os/windiss/bits/ctype_base.h: New file.\n\t* config/os/windiss/bits/ctype_inline.h: Likewise.\n\t* config/os/windiss/bits/ctype_noninline.h: Likewise.\n\t* config/os/windiss/bits/os_defines.h: Likewise.\n\nFrom-SVN: r53269", "tree": {"sha": "c547e5d5b1232045b122388ffa1caf19b777b34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c547e5d5b1232045b122388ffa1caf19b777b34e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/comments", "author": null, "committer": null, "parents": [{"sha": "e9a6ff0c7070b35815cf279a9734f910226c6234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a6ff0c7070b35815cf279a9734f910226c6234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a6ff0c7070b35815cf279a9734f910226c6234"}], "stats": {"total": 1953, "additions": 1199, "deletions": 754}, "files": [{"sha": "acd05269d43fc40fd22b98027491d5ad519eb97d", "filename": "libstdc++-v3/config/os/windiss/bits/ctype_base.h", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_base.h?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "patch": "@@ -0,0 +1,55 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Default information, may not be appropriate for specific host.\n+\n+  struct ctype_base\n+  {\n+    // Non-standard typedefs.\n+    typedef const int* \t\t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef unsigned int \tmask;   \n+    static const mask upper    \t= _U;\n+    static const mask lower \t= _L;\n+    static const mask alpha \t= _U | _L;\n+    static const mask digit \t= _N;\n+    static const mask xdigit \t= _X;\n+    static const mask space \t= _S;\n+    static const mask print \t= _U | _L | _N | _P | _B;\n+    static const mask graph \t= _U | _L | _N | _P;\n+    static const mask cntrl \t= _C;\n+    static const mask punct \t= _P;\n+    static const mask alnum \t= _U | _L | _N;\n+  };"}, {"sha": "7acbc0adc1fac8258a677414acd32fa2041e8019", "filename": "libstdc++-v3/config/os/windiss/bits/ctype_inline.h", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_inline.h?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "patch": "@@ -0,0 +1,125 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+// The following definitions are portable, but insanely slow. If one\n+// cares at all about performance, then specialized ctype\n+// functionality should be added for the native os in question: see\n+// the config/os/bits/ctype_*.h files.\n+\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { \n+    bool __ret;\n+    switch (__m)\n+      {\n+      case space:\n+\t__ret = isspace(__c);\n+\tbreak;\n+      case print:\n+\t__ret = isprint(__c);\n+\tbreak;\n+      case cntrl:\n+\t__ret = iscntrl(__c);\n+\tbreak;\n+      case upper:\n+\t__ret = isupper(__c);\n+\tbreak;\n+      case lower:\n+\t__ret = islower(__c);\n+\tbreak;\n+      case alpha:\n+\t__ret = isalpha(__c);\n+\tbreak;\n+      case digit:\n+\t__ret = isdigit(__c);\n+\tbreak;\n+      case punct:\n+\t__ret = ispunct(__c);\n+\tbreak;\n+      case xdigit:\n+\t__ret = isxdigit(__c);\n+\tbreak;\n+      case alnum:\n+\t__ret = isalnum(__c);\n+\tbreak;\n+      case graph:\n+\t__ret = isgraph(__c);\n+\tbreak;\n+      default:\n+\t__ret = false;\n+\tbreak;\n+      }\n+    return __ret;\n+  }\n+   \n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    const int __bitmasksize = 11; // Highest bitmask in ctype_base == 10\n+    for (;__low < __high; ++__vec, ++__low)\n+      {\n+\tmask __m = 0;\n+\tint __i = 0; // Lowest bitmask in ctype_base == 0\n+\tfor (;__i < __bitmasksize; ++__i)\n+\t  {\n+\t    mask __bit = static_cast<mask>(1 << __i);\n+\t    if (this->is(__bit, *__low))\n+\t      __m |= __bit;\n+\t  }\n+\t*__vec = __m;\n+      }\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high && !this->is(__m, *__low))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high && this->is(__m, *__low) != 0)\n+      ++__low;\n+    return __low;\n+  }"}, {"sha": "9fec00b43d2bcddad2ce17626bce5020548eac7a", "filename": "libstdc++-v3/config/os/windiss/bits/ctype_noninline.h", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_noninline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_noninline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fctype_noninline.h?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "patch": "@@ -0,0 +1,82 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+//  Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h\n+\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return 0; }\n+\n+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del, \n+\t\t     size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table == 0 ? classic_table() : __table) \n+  { }\n+\n+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs) \n+  : __ctype_abstract_base<char>(__refs), _M_del(__table != 0 && __del), \n+  _M_toupper(NULL), _M_tolower(NULL), \n+  _M_table(__table == 0 ? classic_table() : __table) \n+  { }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return ::toupper((int) __c); }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::toupper((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return ::tolower((int) __c); }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = ::tolower((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }"}, {"sha": "dd8b00873116c5fc2e37a3b98298304085543922", "filename": "libstdc++-v3/config/os/windiss/bits/os_defines.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fwindiss%2Fbits%2Fos_defines.h?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "patch": "@@ -0,0 +1,37 @@\n+// Specific definitions for generic platforms  -*- C++ -*-\n+\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef _GLIBCPP_OS_DEFINES\n+#define _GLIBCPP_OS_DEFINES 1\n+\n+// System-specific #define, typedefs, corrections, etc, go here.  This\n+// file will come before all others.\n+\n+#endif"}, {"sha": "c62ae771fc109f8602152589903df7294e83e2da", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 868, "deletions": 754, "changes": 1622, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e"}, {"sha": "0f229bbe246059c4493677a3da7fc40332e58b44", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "patch": "@@ -152,6 +152,9 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n       GLIBCPP_CHECK_WCHAR_T_SUPPORT\n       os_include_dir=\"config/os/mingw32\"\n       ;;\n+    *-windiss*)\n+      os_include_dir=\"config/os/windiss\"\n+      ;;\n     *)\n       os_include_dir=\"config/os/newlib\"\n       AC_DEFINE(HAVE_HYPOT)\n@@ -161,6 +164,32 @@ if test -n \"$with_cross_host\" || test x\"$build\" != x\"$host\"; then\n   case \"$target_alias\" in\n     *-mingw32*)\n       ;;\n+    *-windiss*)\n+      AC_DEFINE(HAVE_ACOSF)\n+      AC_DEFINE(HAVE_ASINF)\n+      AC_DEFINE(HAVE_ATAN2F)\n+      AC_DEFINE(HAVE_ATANF)\n+      AC_DEFINE(HAVE_CEILF)\n+      AC_DEFINE(HAVE_COPYSIGN)\n+      AC_DEFINE(HAVE_COPYSIGNF)\n+      AC_DEFINE(HAVE_COSF)\n+      AC_DEFINE(HAVE_COSHF)\n+      AC_DEFINE(HAVE_EXPF)\n+      AC_DEFINE(HAVE_FABSF)\n+      AC_DEFINE(HAVE_FLOORF)\n+      AC_DEFINE(HAVE_FMODF)\n+      AC_DEFINE(HAVE_FREXPF)\n+      AC_DEFINE(HAVE_LDEXPF)\n+      AC_DEFINE(HAVE_LOG10F)\n+      AC_DEFINE(HAVE_LOGF)\n+      AC_DEFINE(HAVE_MODFF)\n+      AC_DEFINE(HAVE_POWF)\n+      AC_DEFINE(HAVE_SINF)\n+      AC_DEFINE(HAVE_SINHF)\n+      AC_DEFINE(HAVE_SQRTF)\n+      AC_DEFINE(HAVE_TANF)\n+      AC_DEFINE(HAVE_TANHF)\n+      ;;\n     *)\n       # GLIBCPP_CHECK_STDLIB_SUPPORT\n       AC_DEFINE(HAVE_STRTOF)        "}, {"sha": "35f944811cc32587f18bec70dbff604e1f72ddbc", "filename": "libstdc++-v3/configure.target", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfigure.target", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522e3d222659a0f3ea3d0ffc1e72b35feafed01e/libstdc%2B%2B-v3%2Fconfigure.target", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.target?ref=522e3d222659a0f3ea3d0ffc1e72b35feafed01e", "patch": "@@ -108,6 +108,9 @@ case \"${target_os}\" in\n   hpux*)\n     os_include_dir=\"config/os/hpux\"\n     ;;\n+  windiss*)\n+    os_include_dir=\"config/os/windiss\"\n+    ;;\n   *)\n     os_include_dir=\"config/os/generic\"\n     ;;"}]}