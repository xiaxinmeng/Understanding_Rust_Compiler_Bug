{"sha": "3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2NzBlY2YwYjRkNzMxMzBkMmU5MGFmMTQxM2Q0ZGE2OGY3YmI4Yw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-11T20:47:13Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2018-10-11T20:47:13Z"}, "message": "2018-10-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/forward_list\n\t(forward_list<>::before_begin()): Use C++11 direct initialization.\n\t(forward_list<>::begin()): Likewise.\n\t(forward_list<>::end()): Likewise.\n\t(forward_list<>::cbefore_begin()): Likewise.\n\t(forward_list<>::cbegin()): Likewise.\n\t(forward_list<>::cend()): Likewise.\n\t(forward_list<>::emplace_after<>(const_iterator, _Args&&...)): Likewise.\n\t(forward_list<>::insert_after(const_iterator, const _Tp&)): Likewise.\n\t(forward_list<>::insert_after(const_iterator, _Tp&&)): Likewise.\n\t(forward_list<>::insert_after(const_iterator, size_type, const _Tp&)):\n\tLikewise.\n\t(forward_list<>::insert_after(const_iterator, initializer_list<>)):\n\tLikewise.\n\t(forward_list<>::erase_after(const_iterator)): Likewise.\n\t(forward_list<>::erase_after(const_iterator, const_iterator)): Likewise\n\tand ensure consistent iterator comparison.\n\nFrom-SVN: r265061", "tree": {"sha": "398f71acb3cb2e20599448201f000aea1348209b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/398f71acb3cb2e20599448201f000aea1348209b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c/comments", "author": null, "committer": null, "parents": [{"sha": "91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91febb0e2bb8a0f891bcb17a142d952a689c5dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91febb0e2bb8a0f891bcb17a142d952a689c5dbb"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "93293c0631a4285747989d9187969450babe555a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "patch": "@@ -1,5 +1,23 @@\n 2018-10-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/debug/forward_list\n+\t(forward_list<>::before_begin()): Use C++11 direct initialization.\n+\t(forward_list<>::begin()): Likewise.\n+\t(forward_list<>::end()): Likewise.\n+\t(forward_list<>::cbefore_begin()): Likewise.\n+\t(forward_list<>::cbegin()): Likewise.\n+\t(forward_list<>::cend()): Likewise.\n+\t(forward_list<>::emplace_after<>(const_iterator, _Args&&...)): Likewise.\n+\t(forward_list<>::insert_after(const_iterator, const _Tp&)): Likewise.\n+\t(forward_list<>::insert_after(const_iterator, _Tp&&)): Likewise.\n+\t(forward_list<>::insert_after(const_iterator, size_type, const _Tp&)):\n+\tLikewise.\n+\t(forward_list<>::insert_after(const_iterator, initializer_list<>)):\n+\tLikewise.\n+\t(forward_list<>::erase_after(const_iterator)): Likewise.\n+\t(forward_list<>::erase_after(const_iterator, const_iterator)): Likewise\n+\tand ensure consistent iterator comparison.\n+\n \t* include/bits/forward_list.h\n \t(_Fwd_list_iterator<>::operator==): Replace member function with inline\n \tfriend."}, {"sha": "c9744eda55a086f4a91845c2903d9f7d652316a4", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "patch": "@@ -316,39 +316,39 @@ namespace __debug\n \n       iterator\n       before_begin() noexcept\n-      { return iterator(_Base::before_begin(), this); }\n+      { return { _Base::before_begin(), this }; }\n \n       const_iterator\n       before_begin() const noexcept\n-      { return const_iterator(_Base::before_begin(), this); }\n+      { return { _Base::before_begin(), this }; }\n \n       iterator\n       begin() noexcept\n-      { return iterator(_Base::begin(), this); }\n+      { return { _Base::begin(), this }; }\n \n       const_iterator\n       begin() const noexcept\n-      { return const_iterator(_Base::begin(), this); }\n+      { return { _Base::begin(), this }; }\n \n       iterator\n       end() noexcept\n-      { return iterator(_Base::end(), this); }\n+      { return { _Base::end(), this }; }\n \n       const_iterator\n       end() const noexcept\n-      { return const_iterator(_Base::end(), this); }\n+      { return { _Base::end(), this }; }\n \n       const_iterator\n       cbegin() const noexcept\n-      { return const_iterator(_Base::cbegin(), this); }\n+      { return { _Base::cbegin(), this }; }\n \n       const_iterator\n       cbefore_begin() const noexcept\n-      { return const_iterator(_Base::cbefore_begin(), this); }\n+      { return { _Base::cbefore_begin(), this }; }\n \n       const_iterator\n       cend() const noexcept\n-      { return const_iterator(_Base::cend(), this); }\n+      { return { _Base::cend(), this }; }\n \n       using _Base::empty;\n       using _Base::max_size;\n@@ -388,32 +388,30 @@ namespace __debug\n \templace_after(const_iterator __pos, _Args&&... __args)\n \t{\n \t  __glibcxx_check_insert_after(__pos);\n-\t  return iterator(_Base::emplace_after(__pos.base(),\n+\t  return { _Base::emplace_after(__pos.base(),\n \t\t\t\t\tstd::forward<_Args>(__args)...),\n-\t\t\t  this);\n+\t\t   this };\n        \t}\n \n       iterator\n       insert_after(const_iterator __pos, const _Tp& __val)\n       {\n \t__glibcxx_check_insert_after(__pos);\n-\treturn iterator(_Base::insert_after(__pos.base(), __val), this);\n+\treturn { _Base::insert_after(__pos.base(), __val), this };\n       }\n \n       iterator\n       insert_after(const_iterator __pos, _Tp&& __val)\n       {\n \t__glibcxx_check_insert_after(__pos);\n-\treturn iterator(_Base::insert_after(__pos.base(), std::move(__val)),\n-\t\t       \tthis);\n+\treturn { _Base::insert_after(__pos.base(), std::move(__val)), this };\n       }\n \n       iterator\n       insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n       {\n \t__glibcxx_check_insert_after(__pos);\n-\treturn iterator(_Base::insert_after(__pos.base(), __n, __val),\n-\t\t       \tthis);\n+\treturn { _Base::insert_after(__pos.base(), __n, __val), this };\n       }\n \n       template<typename _InputIterator,\n@@ -441,7 +439,7 @@ namespace __debug\n       insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n       {\n \t__glibcxx_check_insert_after(__pos);\n-\treturn iterator(_Base::insert_after(__pos.base(), __il), this);\n+\treturn { _Base::insert_after(__pos.base(), __il), this };\n       }\n \n     private:\n@@ -458,7 +456,7 @@ namespace __debug\n       erase_after(const_iterator __pos)\n       {\n \t__glibcxx_check_erase_after(__pos);\n-\treturn iterator(_M_erase_after(__pos.base()), this);\n+\treturn { _M_erase_after(__pos.base()), this };\n       }\n \n       iterator\n@@ -468,15 +466,16 @@ namespace __debug\n \tfor (_Base_const_iterator __victim = std::next(__pos.base());\n \t    __victim != __last.base(); ++__victim)\n \t  {\n-\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::end(),\n+\t    _GLIBCXX_DEBUG_VERIFY(__victim != _Base::cend(),\n \t\t\t\t  _M_message(__gnu_debug::__msg_valid_range2)\n \t\t\t\t  ._M_sequence(*this, \"this\")\n \t\t\t\t  ._M_iterator(__pos, \"pos\")\n \t\t\t\t  ._M_iterator(__last, \"last\"));\n \t    this->_M_invalidate_if([__victim](_Base_const_iterator __it)\n \t      { return __it == __victim; });\n \t  }\n-\treturn iterator(_Base::erase_after(__pos.base(), __last.base()), this);\n+\n+\treturn { _Base::erase_after(__pos.base(), __last.base()), this };\n       }\n \n       void"}]}