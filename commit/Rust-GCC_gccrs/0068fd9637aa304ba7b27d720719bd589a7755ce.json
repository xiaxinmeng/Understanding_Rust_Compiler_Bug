{"sha": "0068fd9637aa304ba7b27d720719bd589a7755ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA2OGZkOTYzN2FhMzA0YmE3YjI3ZDcyMDcxOWJkNTg5YTc3NTVjZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-29T17:01:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-07-29T17:01:53Z"}, "message": "basic-block.h (CLEANUP_PRE_LOOP): New.\n\n\t* basic-block.h (CLEANUP_PRE_LOOP): New.\n\t* except.c (finish_eh_generation): Update call of cleanup_cfg.\n\t* sibcall.c (optimize_sibling_calls): Likewise.\n\t* toplev.c (rest_of_compilation): Likewise.\n\t* flow.c (try_forward_edges): Take argument MODE;\n\tdo not forward over loop pre-headers if CLEANUP_PRE_LOOP.\n\t(try_optimize_cfg): Update call of try_forward_edges.\n\n\n\t* (validate_replace_rtx_1): Fix simplification of MINUS.\n\nFrom-SVN: r44458", "tree": {"sha": "ea95e3e09027651222c04624fd31922365dd2cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea95e3e09027651222c04624fd31922365dd2cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0068fd9637aa304ba7b27d720719bd589a7755ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0068fd9637aa304ba7b27d720719bd589a7755ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0068fd9637aa304ba7b27d720719bd589a7755ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0068fd9637aa304ba7b27d720719bd589a7755ce/comments", "author": null, "committer": null, "parents": [{"sha": "df07e07d1a0f83cc18efc5f901dfd4fb262d538a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df07e07d1a0f83cc18efc5f901dfd4fb262d538a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df07e07d1a0f83cc18efc5f901dfd4fb262d538a"}], "stats": {"total": 74, "additions": 58, "deletions": 16}, "files": [{"sha": "aa26118a252c7ed2d5cdc77679c3207aeaefb0a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -1,3 +1,18 @@\n+Sun Jul 29 18:59:13 CEST 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* basic-block.h (CLEANUP_PRE_LOOP): New.\n+\t* except.c (finish_eh_generation): Update call of cleanup_cfg.\n+\t* sibcall.c (optimize_sibling_calls): Likewise.\n+\t* toplev.c (rest_of_compilation): Likewise.\n+\t* flow.c (try_forward_edges): Take argument MODE;\n+\tdo not forward over loop pre-headers if CLEANUP_PRE_LOOP.\n+\t(try_optimize_cfg): Update call of try_forward_edges.\n+\n+Sun Jul 29 18:59:56 CEST 2001  Roman Zippel  <zippel@linux-m68k.org>\n+\t\t\t       Jan Hubicka  <jh@suse.cz>\n+\n+\t* (validate_replace_rtx_1): Fix simplification of MINUS.\n+\n 2001-07-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \tPR preprocessor/3669"}, {"sha": "7b467c2b431c395062b4a2ac981d6d74b8435832", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -551,6 +551,8 @@ enum update_life_extent\n \t\t\t\t\t   to care REG_DEAD notes.  */\n #define CLEANUP_PRE_SIBCALL\t8\t/* Do not get confused by code hidden\n \t\t\t\t\t   inside call_placeholders..  */\n+#define CLEANUP_PRE_LOOP\t16\t/* Take care to preserve syntactic loop\n+\t\t\t\t\t   notes.  */\n /* Flags for loop discovery.  */\n \n #define LOOP_TREE\t\t1 \t/* Build loop hierarchy tree.  */"}, {"sha": "49df0df55d73c9961993c9d091cb923c9954193e", "filename": "gcc/except.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -2348,7 +2348,7 @@ finish_eh_generation ()\n \n   rebuild_jump_labels (get_insns ());\n   find_basic_blocks (get_insns (), max_reg_num (), 0);\n-  cleanup_cfg (0);\n+  cleanup_cfg (CLEANUP_PRE_LOOP);\n \n   /* These registers are used by the landing pads.  Make sure they\n      have been generated.  */\n@@ -2371,7 +2371,7 @@ finish_eh_generation ()\n   find_exception_handler_labels ();\n   rebuild_jump_labels (get_insns ());\n   find_basic_blocks (get_insns (), max_reg_num (), 0);\n-  cleanup_cfg (0);\n+  cleanup_cfg (CLEANUP_PRE_LOOP);\n }\n \f\n /* This section handles removing dead code for flow.  */"}, {"sha": "992cac6584bf9c7f8c51be43b55a96655b40034c", "filename": "gcc/flow.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -396,7 +396,7 @@ static bool try_optimize_cfg\t\tPARAMS ((int));\n static bool can_fallthru\t\tPARAMS ((basic_block, basic_block));\n static bool try_redirect_by_replacing_jump PARAMS ((edge, basic_block));\n static bool try_simplify_condjump\tPARAMS ((basic_block));\n-static bool try_forward_edges\t\tPARAMS ((basic_block));\n+static bool try_forward_edges\t\tPARAMS ((int, basic_block));\n static void tidy_fallthru_edges\t\tPARAMS ((void));\n static int verify_wide_reg_1\t\tPARAMS ((rtx *, void *));\n static void verify_wide_reg\t\tPARAMS ((int, rtx, rtx));\n@@ -3182,8 +3182,9 @@ try_simplify_condjump (cbranch_block)\n    Return true if sucessful.  */\n \n static bool\n-try_forward_edges (b)\n+try_forward_edges (mode, b)\n      basic_block b;\n+     int mode;\n {\n   bool changed = false;\n   edge e, next;\n@@ -3216,6 +3217,30 @@ try_forward_edges (b)\n \t  /* Bypass trivial infinite loops.  */\n \t  if (target == target->succ->dest)\n \t    counter = n_basic_blocks;\n+\n+\t  /* Avoid killing of loop pre-headers, as it is the place loop\n+\t     optimizer wants to hoist code to.\n+\t \n+\t     For fallthru forwarders, the LOOP_BEG note must appear between\n+\t     the header of block and CODE_LABEL of the loop, for non forwarders\n+\t     it must appear before the JUMP_INSN.  */\n+\t  if (mode & CLEANUP_PRE_LOOP)\n+\t    {\n+\t      rtx insn = (target->succ->flags & EDGE_FALLTHRU \n+\t\t          ? target->head : prev_nonnote_insn (target->end));\n+\n+\t      if (GET_CODE (insn) != NOTE)\n+\t\tinsn = NEXT_INSN (insn);\n+\n+\t      for (;insn && GET_CODE (insn) != CODE_LABEL && !INSN_P (insn);\n+\t\t   insn = NEXT_INSN (insn))\n+\t\tif (GET_CODE (insn) == NOTE\n+\t\t    && NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG)\n+\t\t  break;\n+\n+\t      if (GET_CODE (insn) == NOTE)\n+\t\tbreak;\n+\t    }\n \t  target = target->succ->dest, counter++;\n \t}\n \n@@ -3953,7 +3978,7 @@ try_optimize_cfg (mode)\n \t    changed_here = true;\n \n \t  /* Simplify branch to branch.  */\n-\t  if (try_forward_edges (b))\n+\t  if (try_forward_edges (mode, b))\n \t    changed_here = true;\n \n \t  /* Look for shared code between blocks.  */"}, {"sha": "fc349ddaad2afc79d0dc1fcd1a2478d59e6f4db9", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -521,8 +521,8 @@ validate_replace_rtx_1 (loc, from, to, object)\n \t\t\t simplify_gen_binary\n \t\t\t (PLUS, GET_MODE (x), XEXP (x, 0),\n \t\t\t  simplify_gen_unary (NEG,\n-\t\t\t\t\t      op0_mode, XEXP (x, 1),\n-\t\t\t\t\t      op0_mode)), 1);\n+\t\t\t\t\t      GET_MODE (x), XEXP (x, 1),\n+\t\t\t\t\t      GET_MODE (x))), 1);\n       break;\n     case ZERO_EXTEND:\n     case SIGN_EXTEND:"}, {"sha": "1e3be76efe7c65898610509fea41885e372786db", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -569,7 +569,7 @@ optimize_sibling_and_tail_recursive_calls ()\n   /* We need cfg information to determine which blocks are succeeded\n      only by the epilogue.  */\n   find_basic_blocks (insns, max_reg_num (), 0);\n-  cleanup_cfg (CLEANUP_PRE_SIBCALL);\n+  cleanup_cfg (CLEANUP_PRE_SIBCALL | CLEANUP_PRE_LOOP);\n \n   /* If there are no basic blocks, then there is nothing to do.  */\n   if (n_basic_blocks == 0)"}, {"sha": "07de29ba4b1bf2b745b6bf306ca5de621d03e483", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0068fd9637aa304ba7b27d720719bd589a7755ce/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=0068fd9637aa304ba7b27d720719bd589a7755ce", "patch": "@@ -2737,7 +2737,7 @@ rest_of_compilation (decl)\n \t      rebuild_jump_labels (insns);\n \t      find_exception_handler_labels ();\n \t      find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-\t      cleanup_cfg (CLEANUP_PRE_SIBCALL);\n+\t      cleanup_cfg (CLEANUP_PRE_SIBCALL | CLEANUP_PRE_LOOP);\n \t      optimize = saved_optimize;\n \t    }\n \n@@ -2846,7 +2846,7 @@ rest_of_compilation (decl)\n   reg_scan (insns, max_reg_num (), 0);\n   rebuild_jump_labels (insns);\n   find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-  cleanup_cfg (optimize ? CLEANUP_EXPENSIVE : 0);\n+  cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0) | CLEANUP_PRE_LOOP);\n   copy_loop_headers (insns);\n   purge_line_number_notes (insns);\n \n@@ -2870,7 +2870,7 @@ rest_of_compilation (decl)\n       open_dump_file (DFI_ssa, decl);\n \n       find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-      cleanup_cfg (CLEANUP_EXPENSIVE);\n+      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n       convert_to_ssa ();\n \n       close_dump_file (DFI_ssa, print_rtl_with_bb, insns);\n@@ -2935,7 +2935,7 @@ rest_of_compilation (decl)\n   if (optimize > 0)\n     {\n       find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-      cleanup_cfg (CLEANUP_EXPENSIVE);\n+      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \n       /* ??? Run if-conversion before delete_null_pointer_checks,\n          since the later does not preserve the CFG.  This should\n@@ -2992,7 +2992,7 @@ rest_of_compilation (decl)\n \t  timevar_push (TV_JUMP);\n \t  rebuild_jump_labels (insns);\n \t  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-\t  cleanup_cfg (CLEANUP_EXPENSIVE);\n+\t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \t  timevar_pop (TV_JUMP);\n \t}\n \n@@ -3006,7 +3006,7 @@ rest_of_compilation (decl)\n \t  timevar_push (TV_JUMP);\n \t  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n \n-\t  cleanup_cfg (CLEANUP_EXPENSIVE);\n+\t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \n \t  delete_null_pointer_checks (insns);\n \t  timevar_pop (TV_JUMP);\n@@ -3040,7 +3040,7 @@ rest_of_compilation (decl)\n       open_dump_file (DFI_gcse, decl);\n \n       find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-      cleanup_cfg (CLEANUP_EXPENSIVE);\n+      cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n       tem = gcse_main (insns, rtl_dump_file);\n \n       save_csb = flag_cse_skip_blocks;\n@@ -3067,7 +3067,7 @@ rest_of_compilation (decl)\n \t  rebuild_jump_labels (insns);\n \t  delete_trivially_dead_insns (insns, max_reg_num (), 0);\n \t  find_basic_blocks (insns, max_reg_num (), rtl_dump_file);\n-\t  cleanup_cfg (CLEANUP_EXPENSIVE);\n+\t  cleanup_cfg (CLEANUP_EXPENSIVE | CLEANUP_PRE_LOOP);\n \t  timevar_pop (TV_JUMP);\n \n \t  if (flag_expensive_optimizations)"}]}