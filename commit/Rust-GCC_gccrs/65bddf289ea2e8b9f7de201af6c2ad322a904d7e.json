{"sha": "65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjViZGRmMjg5ZWEyZThiOWY3ZGUyMDFhZjZjMmFkMzIyYTkwNGQ3ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-14T20:14:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-14T20:14:49Z"}, "message": "re PR c++/70622 (auto specifier don't deduce value type and its pointer type within single declaration.)\n\n\tPR c++/70622\n\n\t* parser.c (cp_parser_init_declarator): Add auto_result parm.\n\t(cp_parser_simple_declaration): Pass it.\n\t(strip_declarator_types): New.\n\nFrom-SVN: r234991", "tree": {"sha": "e4bf4b8c4a8144e120461ac5c0a4b613ad2ebe8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4bf4b8c4a8144e120461ac5c0a4b613ad2ebe8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d25a101fe78834db307bb868056b0ff5152e0eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25a101fe78834db307bb868056b0ff5152e0eb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25a101fe78834db307bb868056b0ff5152e0eb3"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "6384ab890374b432b0e7b3034b187480ed099b35", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "patch": "@@ -1,5 +1,10 @@\n 2016-04-14  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70622\n+\t* parser.c (cp_parser_init_declarator): Add auto_result parm.\n+\t(cp_parser_simple_declaration): Pass it.\n+\t(strip_declarator_types): New.\n+\n \tPR c++/70543\n \t* pt.c (value_dependent_expression_p) [VAR_DECL]: A type-dependent\n \tinitializer also makes the variable value-dependent."}, {"sha": "cba2d6598a76ec52f6010a115a71172bb8b1cd62", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "patch": "@@ -2193,7 +2193,7 @@ static tree cp_parser_decltype\n \n static tree cp_parser_init_declarator\n   (cp_parser *, cp_decl_specifier_seq *, vec<deferred_access_check, va_gc> *,\n-   bool, bool, int, bool *, tree *, location_t *);\n+   bool, bool, int, bool *, tree *, location_t *, tree *);\n static cp_declarator *cp_parser_declarator\n   (cp_parser *, cp_parser_declarator_kind, int *, bool *, bool, bool);\n static cp_declarator *cp_parser_direct_declarator\n@@ -12337,10 +12337,9 @@ cp_parser_simple_declaration (cp_parser* parser,\n       && !cp_parser_error_occurred (parser))\n     cp_parser_commit_to_tentative_parse (parser);\n \n-  tree last_type, auto_node;\n+  tree last_type;\n \n   last_type = NULL_TREE;\n-  auto_node = type_uses_auto (decl_specifiers.type);\n \n   /* Keep going until we hit the `;' at the end of the simple\n      declaration.  */\n@@ -12351,6 +12350,7 @@ cp_parser_simple_declaration (cp_parser* parser,\n       cp_token *token;\n       bool function_definition_p;\n       tree decl;\n+      tree auto_result = NULL_TREE;\n \n       if (saw_declarator)\n \t{\n@@ -12376,29 +12376,31 @@ cp_parser_simple_declaration (cp_parser* parser,\n \t\t\t\t\tdeclares_class_or_enum,\n \t\t\t\t\t&function_definition_p,\n \t\t\t\t\tmaybe_range_for_decl,\n-\t\t\t\t\t&init_loc);\n+\t\t\t\t\t&init_loc,\n+\t\t\t\t\t&auto_result);\n       /* If an error occurred while parsing tentatively, exit quickly.\n \t (That usually happens when in the body of a function; each\n \t statement is treated as a declaration-statement until proven\n \t otherwise.)  */\n       if (cp_parser_error_occurred (parser))\n \tgoto done;\n \n-      if (auto_node)\n+      if (auto_result)\n \t{\n-\t  tree type = TREE_TYPE (decl);\n-\t  if (last_type && !same_type_p (type, last_type))\n+\t  if (last_type && last_type != error_mark_node\n+\t      && !same_type_p (auto_result, last_type))\n \t    {\n \t      /* If the list of declarators contains more than one declarator,\n \t\t the type of each declared variable is determined as described\n \t\t above. If the type deduced for the template parameter U is not\n \t\t the same in each deduction, the program is ill-formed.  */\n \t      error_at (decl_specifiers.locations[ds_type_spec],\n \t\t\t\"inconsistent deduction for %qT: %qT and then %qT\",\n-\t\t\tdecl_specifiers.type, last_type, type);\n-\t      auto_node = NULL_TREE;\n+\t\t\tdecl_specifiers.type, last_type, auto_result);\n+\t      last_type = error_mark_node;\n \t    }\n-\t  last_type = type;\n+\t  else\n+\t    last_type = auto_result;\n \t}\n \n       /* Handle function definitions specially.  */\n@@ -18221,6 +18223,31 @@ cp_parser_asm_definition (cp_parser* parser)\n     }\n }\n \n+/* Given the type TYPE of a declaration with declarator DECLARATOR, return the\n+   type that comes from the decl-specifier-seq.  */\n+\n+static tree\n+strip_declarator_types (tree type, cp_declarator *declarator)\n+{\n+  for (cp_declarator *d = declarator; d;)\n+    switch (d->kind)\n+      {\n+      case cdk_id:\n+      case cdk_error:\n+\td = NULL;\n+\tbreak;\n+\n+      default:\n+\tif (TYPE_PTRMEMFUNC_P (type))\n+\t  type = TYPE_PTRMEMFUNC_FN_TYPE (type);\n+\ttype = TREE_TYPE (type);\n+\td = d->declarator;\n+\tbreak;\n+      }\n+\n+  return type;\n+}\n+\n /* Declarators [gram.dcl.decl] */\n \n /* Parse an init-declarator.\n@@ -18286,7 +18313,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t\t   int declares_class_or_enum,\n \t\t\t   bool* function_definition_p,\n \t\t\t   tree* maybe_range_for_decl,\n-\t\t\t   location_t* init_loc)\n+\t\t\t   location_t* init_loc,\n+\t\t\t   tree* auto_result)\n {\n   cp_token *token = NULL, *asm_spec_start_token = NULL,\n            *attributes_start_token = NULL;\n@@ -18677,6 +18705,10 @@ cp_parser_init_declarator (cp_parser* parser,\n \tfinish_fully_implicit_template (parser, /*member_decl_opt=*/0);\n     }\n \n+  if (auto_result && is_initialized && decl_specifiers->type\n+      && type_uses_auto (decl_specifiers->type))\n+    *auto_result = strip_declarator_types (TREE_TYPE (decl), declarator);\n+\n   return decl;\n }\n \n@@ -25808,7 +25840,7 @@ cp_parser_single_declaration (cp_parser* parser,\n \t\t\t\t        member_p,\n \t\t\t\t        declares_class_or_enum,\n \t\t\t\t        &function_definition_p,\n-\t\t\t\t\tNULL, NULL);\n+\t\t\t\t\tNULL, NULL, NULL);\n \n     /* 7.1.1-1 [dcl.stc]\n "}, {"sha": "0d80be6d72f2e22fa1a402ccbb251a8886fdf953", "filename": "gcc/testsuite/g++.dg/cpp0x/auto47.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65bddf289ea2e8b9f7de201af6c2ad322a904d7e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto47.C?ref=65bddf289ea2e8b9f7de201af6c2ad322a904d7e", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/70622\n+// { dg-do compile { target c++11 } }\n+\n+int main()\n+{\n+    auto x = 0, *y = &x;\n+}"}]}