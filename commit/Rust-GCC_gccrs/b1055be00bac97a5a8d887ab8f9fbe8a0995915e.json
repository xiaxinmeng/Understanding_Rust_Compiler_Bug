{"sha": "b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwNTViZTAwYmFjOTdhNWE4ZDg4N2FiOGY5ZmJlOGEwOTk1OTE1ZQ==", "commit": {"author": {"name": "Sharad Singhai", "email": "singhai@google.com", "date": "2013-12-21T07:42:31Z"}, "committer": {"name": "Sharad Singhai", "email": "singhai@gcc.gnu.org", "date": "2013-12-21T07:42:31Z"}, "message": "Makefile.in: Add optinfo.texi.\n\n2013-12-20  Sharad Singhai  <singhai@google.com>\n\n\t* Makefile.in: Add optinfo.texi.\n\t* doc/invoke.texi: Fix typo.\n\t* doc/optinfo.texi: New documentation for optimization info.\n\t* doc/passes.texi: Add new node.\n\nFrom-SVN: r206161", "tree": {"sha": "8945622043f9dce7530c8b366e54ad48f519d02c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8945622043f9dce7530c8b366e54ad48f519d02c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/comments", "author": null, "committer": null, "parents": [{"sha": "56ca5680a064bd20a25a5c39d1f6b7040ec5059b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56ca5680a064bd20a25a5c39d1f6b7040ec5059b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56ca5680a064bd20a25a5c39d1f6b7040ec5059b"}], "stats": {"total": 245, "additions": 243, "deletions": 2}, "files": [{"sha": "529180a1ff46fbcb0b3d021662a8a291ab54ae8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "patch": "@@ -1,3 +1,10 @@\n+2013-12-20  Sharad Singhai  <singhai@google.com>\n+\n+\t* Makefile.in: Add optinfo.texi.\n+\t* doc/invoke.texi: Fix typo.\n+\t* doc/optinfo.texi: New documentation for optimization info.\n+\t* doc/passes.texi: Add new node.\n+\n 2013-12-20  Trevor saunders  <tsaunders@mozilla.com>\n \n \t* vec.h (stack_vec): Convert to a templaate specialization of"}, {"sha": "d824551b0810df66b10c8b3d1af7ad54e787446f", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "patch": "@@ -2808,7 +2808,7 @@ TEXI_GCCINT_FILES = gccint.texi gcc-common.texi gcc-vers.texi\t\t\\\n \t configfiles.texi collect2.texi headerdirs.texi funding.texi\t\\\n \t gnu.texi gpl_v3.texi fdl.texi contrib.texi languages.texi\t\\\n \t sourcebuild.texi gty.texi libgcc.texi cfg.texi tree-ssa.texi\t\\\n-\t loop.texi generic.texi gimple.texi plugins.texi\n+\t loop.texi generic.texi gimple.texi plugins.texi optinfo.texi\n \n TEXI_GCCINSTALL_FILES = install.texi install-old.texi fdl.texi\t\t\\\n \t gcc-common.texi gcc-vers.texi"}, {"sha": "93468a8e1b312fa35e5f742016ac0137110ff886", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "patch": "@@ -6507,7 +6507,7 @@ gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt\n Here the two output filenames @file{vec.miss} and @file{loop.opt} are\n in conflict since only one output file is allowed. In this case, only\n the first option takes effect and the subsequent options are\n-ignored. Thus only the @file{vec.miss} is produced which cotaints\n+ignored. Thus only the @file{vec.miss} is produced which contains\n dumps from the vectorizer about missed opportunities.\n \n @item -frandom-seed=@var{string}"}, {"sha": "983d653ddbd7e53f0e4cc28a85abd169b4dd71f0", "filename": "gcc/doc/optinfo.texi", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2Fdoc%2Foptinfo.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2Fdoc%2Foptinfo.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptinfo.texi?ref=b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "patch": "@@ -0,0 +1,228 @@\n+@c Copyright (C) 2013 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@cindex optimization dumps\n+\n+This section is describes dump infrastructure which is common to both\n+pass dumps as well as optimization dumps. The goal for this\n+infrastructure is to provide both gcc developers and users detailed\n+information about various compiler transformations and optimizations.\n+\n+@menu\n+* Dump setup::                         Setup of optimization dumps.\n+* Optimization groups::                Groups made up of optimization passes.\n+* Dump output verbosity::              How much information to dump.\n+* Dump files and streams::             Dump output file names and streams.\n+* Dump types::                         Various types of dump functions.\n+* Dump examples::                      Sample usage.\n+@end menu\n+\n+@node Dump setup\n+@subsection Dump setup\n+@cindex dump setup\n+\n+A dump_manager class is defined in @file{dumpfile.h}. Various passes\n+register dumping pass-specific information via @code{dump_register} in\n+@file{passes.c}. During the registration, an optimization pass can\n+select its optimization group (@pxref{Optimization groups}). After\n+that optimization information corresponding to the entire group\n+(presumably from multiple passes) can be output via command-line\n+switches. Note that if a pass does not fit into any of the pre-defined\n+groups, it can select @code{OPTGROUP_NONE}.\n+\n+Note that in general, a pass need not know its dump output file name,\n+whether certain flags are enabled, etc. However, for legacy reasons,\n+passes could also call @code{dump_begin} which returns a stream in\n+case the particular pass has optimization dumps enabled. A pass could\n+call @code{dump_end} when the dump has ended. These methods should go\n+away once all the passes are converted to use the new dump\n+infrastructure.\n+\n+The recommended way to setup the dump output is via @code{dump_start}\n+and @code{dump_end}.\n+\n+@node Optimization groups\n+@subsection Optimization groups\n+@cindex optimization groups\n+The optimization passes are grouped into several categories. Currently\n+defined categories in @file{dumpfile.h} are\n+\n+@ftable @code\n+\n+@item OPTGROUP_IPA\n+IPA optimization passes. Enabled by @option{-ipa}\n+\n+@item OPTGROUP_LOOP\n+Loop optimization passes. Enabled by @option{-loop}.\n+\n+@item OPTGROUP_INLINE\n+Inlining passes. Enabled by @option{-inline}.\n+\n+@item OPTGROUP_VEC\n+Vectorization passes. Enabled by @option{-vec}.\n+\n+@item OPTGROUP_OTHER\n+All other optimization passes which do not fall into one of the above.\n+\n+@item OPTGROUP_ALL\n+All optimization passes. Enabled by @option{-all}.\n+\n+@end ftable\n+\n+By using groups a user could selectively enable optimization\n+information only for a group of passes. By default, the optimization\n+information for all the passes is dumped.\n+\n+@node Dump files and streams\n+@subsection Dump files and streams\n+@cindex optimization info file names\n+\n+There are two separate output streams available for outputting\n+optimization information from passes. Note that both these streams\n+accept @code{stderr} and @code{stdout} as valid streams and thus it is\n+possible to dump output to standard output or error. This is specially\n+handy for outputting all available information in a single file by\n+redirecting @code{stderr}.\n+\n+@table @code\n+@item @code{pstream}\n+This stream is for pass-specific dump output. For example,\n+@option{-fdump-tree-vect=foo.v} dumps tree vectorization pass output\n+into the given file name @file{foo.v}. If the file name is not provided,\n+the default file name is based on the source file and pass number. Note\n+that one could also use special file names @code{stdout} and\n+@code{stderr} for dumping to standard output and standard error\n+respectively.\n+\n+@item @code{alt_stream}\n+This steam is used for printing optimization specific output in\n+response to the @option{-fopt-info}. Again a file name can be given. If\n+the file name is not given, it defaults to @code{stderr}.\n+@end table\n+\n+@node Dump output verbosity\n+@subsection Dump output verbosity\n+@cindex dump verbosity\n+\n+The dump verbosity has the following options\n+\n+@table @samp\n+@item optimized\n+Print information when an optimization is successfully applied. It is\n+up to a pass to decide which information is relevant. For example, the\n+vectorizer passes print the source location of loops which got\n+successfully vectorized.\n+\n+@item missed\n+Print information about missed optimizations. Individual passes\n+control which information to include in the output. For example,\n+\n+@smallexample\n+gcc -O2 -ftree-vectorize -fopt-info-vec-missed\n+@end smallexample\n+\n+will print information about missed optimization opportunities from\n+vectorization passes on stderr.\n+\n+@item note\n+Print verbose information about optimizations, such as certain\n+transformations, more detailed messages about decisions etc.\n+\n+@item all\n+Print detailed optimization information. This includes\n+@var{optimized}, @var{missed}, and @var{note}.\n+@end table\n+\n+@node Dump types\n+@subsection Dump types\n+@cindex dump types\n+\n+@ftable @code\n+\n+@item dump_printf\n+\n+This is a generic method for doing formatted output. It takes an\n+additional argument @code{dump_kind} which signifies the type of\n+dump. This method outputs information only when the dumps are enabled\n+for this particular @code{dump_kind}. Note that the caller doesn't\n+need to know if the particular dump is enabled or not, or even the\n+file name. The caller only needs to decide which dump output\n+information is relevant, and under what conditions. This determines\n+the associated flags.\n+\n+Consider the following example from @file{loop-unroll.c} where an\n+informative message about a loop (along with its location) is printed\n+when any of the following flags is enabled\n+@itemize @minus\n+\n+@item optimization messages\n+@item RTL dumps\n+@item detailed dumps\n+\n+@end itemize\n+\n+@example\n+int report_flags = MSG_OPTIMIZED_LOCATIONS | TDF_RTL | TDF_DETAILS;\n+dump_printf_loc (report_flags, locus,\n+                 \"loop turned into non-loop; it never loops.\\n\");\n+@end example\n+\n+@item dump_basic_block\n+Output basic block.\n+@item dump_generic_expr\n+Output generic expression.\n+@item dump_gimple_stmt\n+Output gimple statement.\n+\n+Note that the above methods also have variants prefixed with\n+@code{_loc}, such as @code{dump_printf_loc}, which are similar except\n+they also output the source location information.\n+\n+@end ftable\n+\n+@node Dump examples\n+@subsection Dump examples\n+@cindex dump examples\n+\n+@smallexample\n+gcc -O3 -fopt-info-missed=missed.all\n+@end smallexample\n+\n+outputs missed optimization report from all the passes into\n+@file{missed.all}.\n+\n+As another example,\n+@smallexample\n+gcc -O3 -fopt-info-inline-optimized-missed=inline.txt\n+@end smallexample\n+\n+will output information about missed optimizations as well as\n+optimized locations from all the inlining passes into\n+@file{inline.txt}.\n+\n+If the @var{filename} is provided, then the dumps from all the\n+applicable optimizations are concatenated into the @file{filename}.\n+Otherwise the dump is output onto @file{stderr}. If @var{options} is\n+omitted, it defaults to @option{all-all}, which means dump all\n+available optimization info from all the passes. In the following\n+example, all optimization info is output on to @file{stderr}.\n+\n+@smallexample\n+gcc -O3 -fopt-info\n+@end smallexample\n+\n+Note that @option{-fopt-info-vec-missed} behaves the same as\n+@option{-fopt-info-missed-vec}.\n+\n+As another example, consider\n+\n+@smallexample\n+gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt\n+@end smallexample\n+\n+Here the two output file names @file{vec.miss} and @file{loop.opt} are\n+in conflict since only one output file is allowed. In this case, only\n+the first option takes effect and the subsequent options are\n+ignored. Thus only the @file{vec.miss} is produced which containts\n+dumps from the vectorizer about missed opportunities."}, {"sha": "a1f57cc37012a5ec4c586c1bd50f95b6ebd4cf13", "filename": "gcc/doc/passes.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2Fdoc%2Fpasses.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1055be00bac97a5a8d887ab8f9fbe8a0995915e/gcc%2Fdoc%2Fpasses.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fpasses.texi?ref=b1055be00bac97a5a8d887ab8f9fbe8a0995915e", "patch": "@@ -9,6 +9,7 @@\n @cindex passes and files of the compiler\n @cindex files and passes of the compiler\n @cindex compiler passes and files\n+@cindex pass dumps\n \n This chapter is dedicated to giving an overview of the optimization and\n code generation passes of the compiler.  In the process, it describes\n@@ -22,6 +23,7 @@ where near complete.\n * Pass manager::         Sequencing the optimization passes.\n * Tree SSA passes::      Optimizations on a high-level representation.\n * RTL passes::           Optimizations on a low-level representation.\n+* Optimization info::    Dumping optimization information from passes.\n @end menu\n \n @node Parsing pass\n@@ -975,3 +977,7 @@ symbol table format, and @file{vmsdbgout.c} for VMS debug symbol table\n format.\n \n @end itemize\n+\n+@node Optimization info\n+@section Optimization info\n+@include optinfo.texi"}]}