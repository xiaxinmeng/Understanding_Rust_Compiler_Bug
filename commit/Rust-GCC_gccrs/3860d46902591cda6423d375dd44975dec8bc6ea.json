{"sha": "3860d46902591cda6423d375dd44975dec8bc6ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg2MGQ0NjkwMjU5MWNkYTY0MjNkMzc1ZGQ0NDk3NWRlYzhiYzZlYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-02-06T10:05:12Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-02-06T10:05:12Z"}, "message": "[multiple changes]\n\n2013-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_prag.adb, sem_ch3.adb, exp_attr.adb, sem_prag.adb, sem_ch6.adb,\n\texp_intr.adb, exp_dist.adb, sem_ch13.adb: Internal clean up for\n\tN_Pragma nodes.\n\n2013-02-06  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor text updates for pragma Warning.\n\n2013-02-06  Geert Bosch  <bosch@adacore.com>\n\n\t* s-multip.adb (Number_Of_CPUs): Short-circuit in case of\n\tCPU'Last = 1.\n\n2013-02-06  Vincent Celier  <celier@adacore.com>\n\n\t* clean.adb (Delete): On VMS use host notation to delete all files.\n\nFrom-SVN: r195788", "tree": {"sha": "ba6ad80f65710c956e813fc408176f8b4f30f087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba6ad80f65710c956e813fc408176f8b4f30f087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3860d46902591cda6423d375dd44975dec8bc6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3860d46902591cda6423d375dd44975dec8bc6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3860d46902591cda6423d375dd44975dec8bc6ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3860d46902591cda6423d375dd44975dec8bc6ea/comments", "author": null, "committer": null, "parents": [{"sha": "c4e1d59df2492f54adde30ca9bd541d1787695dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e1d59df2492f54adde30ca9bd541d1787695dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e1d59df2492f54adde30ca9bd541d1787695dd"}], "stats": {"total": 254, "additions": 157, "deletions": 97}, "files": [{"sha": "4ab64a9e923630031221c9b1363e0c1869601540", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -1,3 +1,22 @@\n+2013-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_prag.adb, sem_ch3.adb, exp_attr.adb, sem_prag.adb, sem_ch6.adb,\n+\texp_intr.adb, exp_dist.adb, sem_ch13.adb: Internal clean up for\n+\tN_Pragma nodes.\n+\n+2013-02-06  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor text updates for pragma Warning.\n+\n+2013-02-06  Geert Bosch  <bosch@adacore.com>\n+\n+\t* s-multip.adb (Number_Of_CPUs): Short-circuit in case of\n+\tCPU'Last = 1.\n+\n+2013-02-06  Vincent Celier  <celier@adacore.com>\n+\n+\t* clean.adb (Delete): On VMS use host notation to delete all files.\n+\n 2013-02-06  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb, sem_ch6.adb, prj-conf.adb, erroutc.adb: Minor"}, {"sha": "e2d2446e500f1f53313ea90eda80b9457ff46cb1", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2003-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2003-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1253,7 +1253,20 @@ package body Clean is\n             --  On VMS, we have to delete all versions of the file\n \n             if OpenVMS_On_Target then\n-               Delete_File (Full_Name (1 .. Last) & \";*\", Success);\n+               declare\n+                  Host_Full_Name : constant String_Access :=\n+                    To_Host_File_Spec (Full_Name (1 .. Last));\n+               begin\n+                  if Host_Full_Name = null\n+                    or else Host_Full_Name'Length = 0\n+                  then\n+                     Success := False;\n+\n+                  else\n+                     Delete_File\n+                       (Host_Full_Name.all & \";*\", Success);\n+                  end if;\n+               end;\n \n             --  Otherwise just delete the specified file\n "}, {"sha": "54442db72b4e7e899cc4fbaf4368b72178aa8103", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2120,7 +2120,7 @@ package body Exp_Attr is\n                     Defining_Unit_Name => Ent)),\n \n               Make_Pragma (Loc,\n-                Chars => Name_Import,\n+                Chars                        => Name_Import,\n                 Pragma_Argument_Associations => New_List (\n                   Make_Pragma_Argument_Association (Loc, Expression => Lang),\n "}, {"sha": "e0e7250a3b765153fad0895085d05f1e9b8efe58", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2176,7 +2176,7 @@ package body Exp_Dist is\n \n                Append_To (Decls,\n                  Make_Pragma (Loc,\n-                   Chars => Name_Import,\n+                   Chars                        => Name_Import,\n                    Pragma_Argument_Associations => New_List (\n                      Make_Pragma_Argument_Association (Loc,\n                        Chars      => Name_Convention,"}, {"sha": "2d0d817fc8a18ab217919c0ce3e569270ec5969f", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -454,7 +454,7 @@ package body Exp_Intr is\n             New_Occurrence_Of (Standard_Character, Loc)),\n \n         Make_Pragma (Loc,\n-          Chars => Name_Import,\n+          Chars                        => Name_Import,\n           Pragma_Argument_Associations => New_List (\n             Make_Pragma_Argument_Association (Loc,\n               Expression => Make_Identifier (Loc, Name_Ada)),"}, {"sha": "2ae1b5619076ad8519401711fe7dd894ce49bf38", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -513,7 +513,7 @@ package body Exp_Prag is\n \n       Insert_After_And_Analyze (N,\n          Make_Pragma (Loc,\n-           Chars => Name_Machine_Attribute,\n+           Chars                        => Name_Machine_Attribute,\n            Pragma_Argument_Associations => New_List (\n              Make_Pragma_Argument_Association (Iloc,\n                Expression => New_Copy_Tree (Internal)),\n@@ -644,44 +644,38 @@ package body Exp_Prag is\n                        (UI_To_Int (Exception_Code (Id)) / 8 * 8);\n \n                      Excep_Alias :=\n-                       Make_Pragma\n-                         (Loc,\n-                          Name_Linker_Alias,\n-                          New_List\n-                            (Make_Pragma_Argument_Association\n-                               (Sloc => Loc,\n-                                Expression =>\n-                                  New_Reference_To (Excep_Internal, Loc)),\n-\n-                             Make_Pragma_Argument_Association\n-                               (Sloc => Loc,\n-                                Expression =>\n-                                  Make_String_Literal\n-                                    (Sloc => Loc,\n-                                     Strval => End_String))));\n+                       Make_Pragma (Loc,\n+                         Chars                        => Name_Linker_Alias,\n+                         Pragma_Argument_Associations => New_List (\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression =>\n+                               New_Reference_To (Excep_Internal, Loc)),\n+\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression =>\n+                               Make_String_Literal (Loc, End_String))));\n \n                      Insert_Action (N, Excep_Alias);\n                      Analyze (Excep_Alias);\n \n                      Export_Pragma :=\n-                       Make_Pragma\n-                         (Loc,\n-                          Name_Export,\n-                          New_List\n-                            (Make_Pragma_Argument_Association (Loc,\n-                               Expression => Make_Identifier (Loc, Name_C)),\n-\n-                             Make_Pragma_Argument_Association (Loc,\n-                               Expression =>\n-                                 New_Reference_To (Excep_Internal, Loc)),\n-\n-                             Make_Pragma_Argument_Association (Loc,\n-                               Expression =>\n-                                 Make_String_Literal (Loc, Excep_Image)),\n-\n-                             Make_Pragma_Argument_Association (Loc,\n-                                Expression =>\n-                                  Make_String_Literal (Loc, Excep_Image))));\n+                       Make_Pragma (Loc,\n+                         Chars                        => Name_Export,\n+                         Pragma_Argument_Associations => New_List (\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression => Make_Identifier (Loc, Name_C)),\n+\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression =>\n+                               New_Reference_To (Excep_Internal, Loc)),\n+\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression =>\n+                               Make_String_Literal (Loc, Excep_Image)),\n+\n+                           Make_Pragma_Argument_Association (Loc,\n+                             Expression =>\n+                               Make_String_Literal (Loc, Excep_Image))));\n \n                      Insert_Action (N, Export_Pragma);\n                      Analyze (Export_Pragma);"}, {"sha": "b776ce7b0abdb25d46e627428fc2add1f69a0091", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6181,15 +6181,18 @@ message @code{warning: 960 bits of \"a\" unused}. No other regular\n expression notations are permitted. All characters other than asterisk in\n these three specific cases are treated as literal characters in the match.\n \n-@noindent\n-The fourth form also works for the additional warnings of the `GCC' back end,\n-but the string must again be a single full `-W' switch in this case. Note that\n-the message issued for these warnings explicitly lists the full `-W' switch\n-they are associated with.\n+The above use of patterns to match the message applies only to warning\n+messages generated by the front end. This form of the pragma with a\n+string argument can also be used to control back end warnings controlled\n+by a \"-Wxxx\" switch. Such warnings can be identified by the appearence\n+of a string of the form \"[-Wxxx]\" in the message which identifies the\n+\"-W\" switch that controls the message. By using the text of the\n+\"-W\" switch in the pragma, such back end warnings can be turned on and off.\n \n There are two ways to use the pragma in this form. The OFF form can be used as a\n configuration pragma. The effect is to suppress all warnings (if any)\n-that match the pattern string throughout the compilation.\n+that match the pattern string throughout the compilation (or match the\n+-W switch in the back end case).\n \n The second usage is to suppress a warning locally, and in this case, two\n pragmas must appear in sequence:"}, {"sha": "901cda0c6543f74d9163dee7c354e507d0812188", "filename": "gcc/ada/s-multip.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fs-multip.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fs-multip.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-multip.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---           Copyright (C) 2010, Free Software Foundation, Inc.             --\n+--         Copyright (C) 2010-2013, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -30,16 +30,22 @@ with Interfaces.C; use Interfaces.C;\n \n package body System.Multiprocessors is\n \n-   function Gnat_Number_Of_CPUs return int;\n-   pragma Import (C, Gnat_Number_Of_CPUs, \"__gnat_number_of_cpus\");\n-\n    --------------------\n    -- Number_Of_CPUs --\n    --------------------\n \n    function Number_Of_CPUs return CPU is\n    begin\n-      return CPU (Gnat_Number_Of_CPUs);\n+      if CPU'Last = 1 then\n+         return 1;\n+      else\n+         declare\n+            function Gnat_Number_Of_CPUs return int;\n+            pragma Import (C, Gnat_Number_Of_CPUs, \"__gnat_number_of_cpus\");\n+         begin\n+            return CPU (Gnat_Number_Of_CPUs);\n+         end;\n+      end if;\n    end Number_Of_CPUs;\n \n end System.Multiprocessors;"}, {"sha": "63c4d089006a1e7e3230a9a48b65996dd2049ecc", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 58, "deletions": 30, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -843,7 +843,9 @@ package body Sem_Ch13 is\n             Prag :=\n               Make_Pragma (Loc,\n                 Pragma_Argument_Associations => New_List (\n-                  New_Occurrence_Of (Ent, Sloc (Ident))),\n+                  Make_Pragma_Argument_Association (Sloc (Ident),\n+                    Expression => New_Occurrence_Of (Ent, Sloc (Ident)))),\n+\n                 Pragma_Identifier            =>\n                   Make_Identifier (Sloc (Ident), Chars (Ident)));\n \n@@ -1212,21 +1214,29 @@ package body Sem_Ch13 is\n                   Aitem :=\n                     Make_Pragma (Loc,\n                       Pragma_Argument_Associations => New_List (\n-                        New_Occurrence_Of (E, Loc),\n-                        Relocate_Node (Expr)),\n+                        Make_Pragma_Argument_Association (Loc,\n+                          Expression => New_Occurrence_Of (E, Loc)),\n+\n+                        Make_Pragma_Argument_Association (Sloc (Expr),\n+                          Expression => Relocate_Node (Expr))),\n+\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Chars (Id)));\n \n                when Aspect_Synchronization =>\n \n                   --  The aspect corresponds to pragma Implemented.\n-                  --  Construct the pragma\n+                  --  Construct the pragma.\n \n                   Aitem :=\n                     Make_Pragma (Loc,\n                       Pragma_Argument_Associations => New_List (\n-                        New_Occurrence_Of (E, Loc),\n-                        Relocate_Node (Expr)),\n+                        Make_Pragma_Argument_Association (Loc,\n+                          Expression => New_Occurrence_Of (E, Loc)),\n+\n+                        Make_Pragma_Argument_Association (Sloc (Expr),\n+                          Expression => Relocate_Node (Expr))),\n+\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Name_Implemented));\n \n@@ -1241,8 +1251,11 @@ package body Sem_Ch13 is\n                     Make_Pragma (Loc,\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Name_Attach_Handler),\n-                      Pragma_Argument_Associations =>\n-                        New_List (Ent, Relocate_Node (Expr)));\n+                          Pragma_Argument_Associations => New_List (\n+                            Make_Pragma_Argument_Association (Sloc (Ent),\n+                              Expression => Ent),\n+                            Make_Pragma_Argument_Association (Sloc (Expr),\n+                              Expression => Relocate_Node (Expr))));\n \n                when Aspect_Dynamic_Predicate |\n                     Aspect_Predicate         |\n@@ -1253,8 +1266,11 @@ package body Sem_Ch13 is\n \n                   Aitem :=\n                     Make_Pragma (Loc,\n-                      Pragma_Argument_Associations =>\n-                        New_List (Ent, Relocate_Node (Expr)),\n+                      Pragma_Argument_Associations => New_List (\n+                         Make_Pragma_Argument_Association (Sloc (Ent),\n+                           Expression => Ent),\n+                         Make_Pragma_Argument_Association (Sloc (Expr),\n+                           Expression => Relocate_Node (Expr))),\n                       Class_Present                => Class_Present (Aspect),\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Name_Predicate));\n@@ -1305,8 +1321,7 @@ package body Sem_Ch13 is\n                      while Present (A) loop\n                         A_Name := Chars (Identifier (A));\n \n-                        if A_Name = Name_Import\n-                             or else\n+                        if A_Name = Name_Import or else\n                            A_Name = Name_Export\n                         then\n                            if Found then\n@@ -1333,7 +1348,11 @@ package body Sem_Ch13 is\n                         Next (A);\n                      end loop;\n \n-                     Arg_List := New_List (Relocate_Node (Expr), Ent);\n+                     Arg_List := New_List (\n+                       Make_Pragma_Argument_Association (Sloc (Expr),\n+                         Expression => Relocate_Node (Expr)),\n+                       Make_Pragma_Argument_Association (Sloc (Ent),\n+                         Expression => Ent));\n \n                      if Present (L_Assoc) then\n                         Append_To (Arg_List, L_Assoc);\n@@ -1361,8 +1380,9 @@ package body Sem_Ch13 is\n                   if Nkind (N) = N_Subprogram_Body then\n                      Aitem :=\n                        Make_Pragma (Loc,\n-                         Pragma_Argument_Associations =>\n-                           New_List (Relocate_Node (Expr)),\n+                         Pragma_Argument_Associations => New_List (\n+                           Make_Pragma_Argument_Association (Sloc (Expr),\n+                             Expression => Relocate_Node (Expr))),\n                          Pragma_Identifier            =>\n                            Make_Identifier (Sloc (Id), Chars (Id)));\n                   else\n@@ -1380,8 +1400,10 @@ package body Sem_Ch13 is\n                   Aitem :=\n                     Make_Pragma (Loc,\n                       Pragma_Argument_Associations => New_List (\n-                        Relocate_Node (Expr),\n-                        New_Occurrence_Of (E, Loc)),\n+                        Make_Pragma_Argument_Association (Sloc (Expr),\n+                          Expression => Relocate_Node (Expr)),\n+                        Make_Pragma_Argument_Association (Loc,\n+                          Expression => New_Occurrence_Of (E, Loc))),\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Chars (Id)),\n                       Class_Present                => Class_Present (Aspect));\n@@ -1409,8 +1431,11 @@ package body Sem_Ch13 is\n \n                   Aitem :=\n                     Make_Pragma (Loc,\n-                      Pragma_Argument_Associations =>\n-                        New_List (Ent, Relocate_Node (Expr)),\n+                      Pragma_Argument_Associations => New_List (\n+                        Make_Pragma_Argument_Association (Sloc (Ent),\n+                          Expression => Ent),\n+                        Make_Pragma_Argument_Association (Sloc (Expr),\n+                          Expression => Relocate_Node (Expr))),\n                       Class_Present                => Class_Present (Aspect),\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Name_Invariant));\n@@ -1661,6 +1686,7 @@ package body Sem_Ch13 is\n \n                when Aspect_Contract_Case |\n                     Aspect_Test_Case     =>\n+\n                   declare\n                      Args      : List_Id;\n                      Comp_Expr : Node_Id;\n@@ -1692,10 +1718,9 @@ package body Sem_Ch13 is\n                      while Present (Comp_Expr) loop\n                         New_Expr := Relocate_Node (Comp_Expr);\n                         Set_Original_Node (New_Expr, Comp_Expr);\n-                        Append\n-                          (Make_Pragma_Argument_Association (Sloc (Comp_Expr),\n-                           Expression => New_Expr),\n-                           Args);\n+                        Append_To (Args,\n+                          Make_Pragma_Argument_Association (Sloc (Comp_Expr),\n+                            Expression => New_Expr));\n                         Next (Comp_Expr);\n                      end loop;\n \n@@ -1713,11 +1738,10 @@ package body Sem_Ch13 is\n \n                         New_Expr := Relocate_Node (Expression (Comp_Assn));\n                         Set_Original_Node (New_Expr, Expression (Comp_Assn));\n-                        Append (Make_Pragma_Argument_Association (\n-                          Sloc       => Sloc (Comp_Assn),\n+                        Append_To (Args,\n+                          Make_Pragma_Argument_Association (Sloc (Comp_Assn),\n                           Chars      => Chars (First (Choices (Comp_Assn))),\n-                          Expression => New_Expr),\n-                          Args);\n+                          Expression => New_Expr));\n                         Next (Comp_Assn);\n                      end loop;\n \n@@ -1893,7 +1917,9 @@ package body Sem_Ch13 is\n                   if No (Expr) then\n                      Aitem :=\n                        Make_Pragma (Loc,\n-                         Pragma_Argument_Associations => New_List (Ent),\n+                         Pragma_Argument_Associations => New_List (\n+                           Make_Pragma_Argument_Association (Sloc (Ent),\n+                             Expression => Ent)),\n                          Pragma_Identifier            =>\n                            Make_Identifier (Sloc (Id), Chars (Id)));\n \n@@ -1940,7 +1966,9 @@ package body Sem_Ch13 is\n                      if Is_True (Static_Boolean (Expr)) then\n                         Aitem :=\n                           Make_Pragma (Loc,\n-                            Pragma_Argument_Associations => New_List (Ent),\n+                            Pragma_Argument_Associations => New_List (\n+                              Make_Pragma_Argument_Association (Sloc (Ent),\n+                                Expression => Ent)),\n                             Pragma_Identifier            =>\n                               Make_Identifier (Sloc (Id), Chars (Id)));\n "}, {"sha": "532b2b2035d6c38b32e82a43cba7dab905f0fa8a", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -9060,17 +9060,16 @@ package body Sem_Ch3 is\n \n          Impl_Prag :=\n            Make_Pragma (Loc,\n-             Chars => Name_Implemented,\n+             Chars                        => Name_Implemented,\n              Pragma_Argument_Associations => New_List (\n                Make_Pragma_Argument_Association (Loc,\n-                 Expression =>\n-                   New_Reference_To (Subp, Loc)),\n+                 Expression => New_Reference_To (Subp, Loc)),\n \n                Make_Pragma_Argument_Association (Loc,\n                  Expression => Make_Identifier (Loc, Iface_Kind))));\n \n          --  The pragma doesn't need to be analyzed because it is internally\n-         --  build. It is safe to directly register it as a rep item since we\n+         --  built. It is safe to directly register it as a rep item since we\n          --  are only interested in the characters of the implementation kind.\n \n          Record_Rep_Item (Subp, Impl_Prag);"}, {"sha": "b6db1ce6be6261075f3590b8fff1064d6322c802", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -11763,7 +11763,7 @@ package body Sem_Ch6 is\n          if not Expander_Active then\n             CP :=\n               Make_Pragma (Loc,\n-                Chars => Name_Postcondition,\n+                Chars                        => Name_Postcondition,\n                 Pragma_Argument_Associations => New_List (\n                   Make_Pragma_Argument_Association (Loc,\n                     Chars      => Name_Check,"}, {"sha": "1bbd358f2a992cd77439fe155d597467f826e2ff", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3860d46902591cda6423d375dd44975dec8bc6ea/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=3860d46902591cda6423d375dd44975dec8bc6ea", "patch": "@@ -7289,8 +7289,7 @@ package body Sem_Prag is\n \n             Rewrite (N,\n               Make_Pragma (Loc,\n-                Chars => Name_Check_Policy,\n-\n+                Chars                        => Name_Check_Policy,\n                 Pragma_Argument_Associations => New_List (\n                   Make_Pragma_Argument_Association (Loc,\n                     Expression => Make_Identifier (Loc, Name_Assertion)),\n@@ -8436,11 +8435,10 @@ package body Sem_Prag is\n             Rewrite (N,\n               Make_Pragma (Loc,\n                 Chars                        => Name_Import,\n-                Pragma_Argument_Associations =>\n-                  New_List (\n-                    Make_Pragma_Argument_Association (Loc,\n-                      Expression => Make_Identifier (Loc, Name_CPP)),\n-                    New_Copy (First (Pragma_Argument_Associations (N))))));\n+                Pragma_Argument_Associations => New_List (\n+                  Make_Pragma_Argument_Association (Loc,\n+                    Expression => Make_Identifier (Loc, Name_CPP)),\n+                  New_Copy (First (Pragma_Argument_Associations (N))))));\n             Analyze (N);\n          end CPP_Class;\n \n@@ -13485,7 +13483,7 @@ package body Sem_Prag is\n             if In_Body then\n                Rewrite (N,\n                  Make_Pragma (Loc,\n-                   Chars => Name_Check,\n+                   Chars                        => Name_Check,\n                    Pragma_Argument_Associations => New_List (\n                      Make_Pragma_Argument_Association (Loc,\n                        Expression => Make_Identifier (Loc, Name_Precondition)),"}]}