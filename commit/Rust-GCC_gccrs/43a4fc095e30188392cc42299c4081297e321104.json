{"sha": "43a4fc095e30188392cc42299c4081297e321104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNhNGZjMDk1ZTMwMTg4MzkyY2M0MjI5OWM0MDgxMjk3ZTMyMTEwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-29T08:42:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-29T08:42:50Z"}, "message": "expander: Optimize store_expr from STRING_CST [PR95052]\n\nIn the following testcase, store_expr of e.g. 97 bytes long string literal\ninto 1MB long array is implemented by copying the 97 bytes from .rodata\nsection, followed by clearing the remaining bytes.  But, as the STRING_CST\nhas type char[1024*1024], we actually allocate whole 1MB in .rodata section\nfor it, even when we only use the first 97 bytes from that.\n\nThe following patch tweaks it so that if we are going to initialize only the\nsmall part from it, we don't emit all the zeros that we never use after it.\n\n2020-05-29  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/95052\n\t* expr.c (store_expr): If expr_size is constant and significantly\n\tlarger than TREE_STRING_LENGTH, set temp to just the\n\tTREE_STRING_LENGTH portion of the STRING_CST.\n\n\t* gcc.target/i386/pr95052.c: New test.", "tree": {"sha": "cd0e53fe7a69dc8af7e9a3faa9e09965cf413cb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd0e53fe7a69dc8af7e9a3faa9e09965cf413cb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43a4fc095e30188392cc42299c4081297e321104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a4fc095e30188392cc42299c4081297e321104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43a4fc095e30188392cc42299c4081297e321104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43a4fc095e30188392cc42299c4081297e321104/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07852a81f58532c63a57631d7c3757fc6bcea17d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07852a81f58532c63a57631d7c3757fc6bcea17d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07852a81f58532c63a57631d7c3757fc6bcea17d"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "049d3edf3ad5562cbe41111dbf3f94f22a226ac3", "filename": "gcc/expr.c", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a4fc095e30188392cc42299c4081297e321104/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a4fc095e30188392cc42299c4081297e321104/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=43a4fc095e30188392cc42299c4081297e321104", "patch": "@@ -5583,6 +5583,7 @@ store_expr (tree exp, rtx target, int call_param_p,\n   rtx temp;\n   rtx alt_rtl = NULL_RTX;\n   location_t loc = curr_insn_location ();\n+  bool shortened_string_cst = false;\n \n   if (VOID_TYPE_P (TREE_TYPE (exp)))\n     {\n@@ -5749,7 +5750,32 @@ store_expr (tree exp, rtx target, int call_param_p,\n       /* If we want to use a nontemporal or a reverse order store, force the\n \t value into a register first.  */\n       tmp_target = nontemporal || reverse ? NULL_RTX : target;\n-      temp = expand_expr_real (exp, tmp_target, GET_MODE (target),\n+      tree rexp = exp;\n+      if (TREE_CODE (exp) == STRING_CST\n+\t  && tmp_target == target\n+\t  && GET_MODE (target) == BLKmode\n+\t  && TYPE_MODE (TREE_TYPE (exp)) == BLKmode)\n+\t{\n+\t  rtx size = expr_size (exp);\n+\t  if (CONST_INT_P (size)\n+\t      && size != const0_rtx\n+\t      && (UINTVAL (size)\n+\t\t  > ((unsigned HOST_WIDE_INT) TREE_STRING_LENGTH (exp) + 32)))\n+\t    {\n+\t      /* If the STRING_CST has much larger array type than\n+\t\t TREE_STRING_LENGTH, only emit the TREE_STRING_LENGTH part of\n+\t\t it into the rodata section as the code later on will use\n+\t\t memset zero for the remainder anyway.  See PR95052.  */\n+\t      tmp_target = NULL_RTX;\n+\t      rexp = copy_node (exp);\n+\t      tree index\n+\t\t= build_index_type (size_int (TREE_STRING_LENGTH (exp) - 1));\n+\t      TREE_TYPE (rexp) = build_array_type (TREE_TYPE (TREE_TYPE (exp)),\n+\t\t\t\t\t\t   index);\n+\t      shortened_string_cst = true;\n+\t    }\n+\t}\n+      temp = expand_expr_real (rexp, tmp_target, GET_MODE (target),\n \t\t\t       (call_param_p\n \t\t\t\t? EXPAND_STACK_PARM : EXPAND_NORMAL),\n \t\t\t       &alt_rtl, false);\n@@ -5763,6 +5789,7 @@ store_expr (tree exp, rtx target, int call_param_p,\n       && TREE_CODE (exp) != ERROR_MARK\n       && GET_MODE (target) != TYPE_MODE (TREE_TYPE (exp)))\n     {\n+      gcc_assert (!shortened_string_cst);\n       if (GET_MODE_CLASS (GET_MODE (target))\n \t  != GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (exp)))\n \t  && known_eq (GET_MODE_BITSIZE (GET_MODE (target)),\n@@ -5815,6 +5842,7 @@ store_expr (tree exp, rtx target, int call_param_p,\n     {\n       if (GET_MODE (temp) != GET_MODE (target) && GET_MODE (temp) != VOIDmode)\n \t{\n+\t  gcc_assert (!shortened_string_cst);\n \t  if (GET_MODE (target) == BLKmode)\n \t    {\n \t      /* Handle calls that return BLKmode values in registers.  */\n@@ -5900,6 +5928,8 @@ store_expr (tree exp, rtx target, int call_param_p,\n \t\temit_label (label);\n \t    }\n \t}\n+      else if (shortened_string_cst)\n+\tgcc_unreachable ();\n       /* Handle calls that return values in multiple non-contiguous locations.\n \t The Irix 6 ABI has examples of this.  */\n       else if (GET_CODE (target) == PARALLEL)\n@@ -5929,6 +5959,8 @@ store_expr (tree exp, rtx target, int call_param_p,\n \t    emit_move_insn (target, temp);\n \t}\n     }\n+  else\n+    gcc_assert (!shortened_string_cst);\n \n   return NULL_RTX;\n }"}, {"sha": "1bbfd7ea305d36522e25859083e7f427e9dbea2f", "filename": "gcc/testsuite/gcc.target/i386/pr95052.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43a4fc095e30188392cc42299c4081297e321104/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95052.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43a4fc095e30188392cc42299c4081297e321104/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95052.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr95052.c?ref=43a4fc095e30188392cc42299c4081297e321104", "patch": "@@ -0,0 +1,20 @@\n+/* PR middle-end/95052 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mtune=skylake\" } */\n+/* Verify we don't waste almost 2 megabytes of .rodata.  */\n+/* { dg-final { scan-assembler-not \"\\.zero\\t1048\\[0-9]\\[0-9]\\[0-9]\" } } */\n+extern void foo (char *, unsigned);\n+\n+int\n+main ()\n+{\n+  char str[1024 * 1024] =\n+    \"fooiuhluhpiuhliuhliyfyukyfklyugkiuhpoipoipoipoipoipoipoipoipoipoipoipoipoimipoipiuhoulouihnliuhl\";\n+  char arr[1024 * 1024] =\n+    { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 6, 2, 3,\n+      4, 5, 6, 7, 8, 9, 0, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6,\n+      7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };\n+  foo (str, sizeof (str));\n+  foo (arr, sizeof (arr));\n+  return 0;\n+}"}]}