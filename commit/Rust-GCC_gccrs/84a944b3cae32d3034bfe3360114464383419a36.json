{"sha": "84a944b3cae32d3034bfe3360114464383419a36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRhOTQ0YjNjYWUzMmQzMDM0YmZlMzM2MDExNDQ2NDM4MzQxOWEzNg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-12-21T05:28:27Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-12-21T05:28:27Z"}, "message": "For PR java/4509:\n\n\t* parse.y (java_complete_lhs) [COMPOUND_EXPR]: Correctly compute\n\tCAN_COMPLETE_NORMALLY for the node.\n\t* jcf-write.c (generate_bytecode_insns) [COMPOUND_EXPR]: Don't\n\tgenerate code for second branch if first branch can't complete\n\tnormally.\n\t(generate_bytecode_insns) [LOOP_EXPR]: Don't generate `goto' to\n\tthe loop head if the loop body can't complete normally.\n\nFrom-SVN: r48233", "tree": {"sha": "1a6248da57443147f39004ede5f9ef11ca3d7cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a6248da57443147f39004ede5f9ef11ca3d7cde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84a944b3cae32d3034bfe3360114464383419a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a944b3cae32d3034bfe3360114464383419a36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84a944b3cae32d3034bfe3360114464383419a36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84a944b3cae32d3034bfe3360114464383419a36/comments", "author": null, "committer": null, "parents": [{"sha": "2d93b92445219f257ccb6bee1c132f28677275fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d93b92445219f257ccb6bee1c132f28677275fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d93b92445219f257ccb6bee1c132f28677275fe"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "09507d24f2cf1573ba447628b4cb6002e5efb940", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a944b3cae32d3034bfe3360114464383419a36/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a944b3cae32d3034bfe3360114464383419a36/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=84a944b3cae32d3034bfe3360114464383419a36", "patch": "@@ -1,3 +1,14 @@\n+2001-12-20  Tom Tromey  <tromey@redhat.com>\n+\n+\tFor PR java/4509:\n+\t* parse.y (java_complete_lhs) [COMPOUND_EXPR]: Correctly compute\n+\tCAN_COMPLETE_NORMALLY for the node.\n+\t* jcf-write.c (generate_bytecode_insns) [COMPOUND_EXPR]: Don't\n+\tgenerate code for second branch if first branch can't complete\n+\tnormally.\n+\t(generate_bytecode_insns) [LOOP_EXPR]: Don't generate `goto' to\n+\tthe loop head if the loop body can't complete normally.\n+\n 2001-12-20  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR java/4766:"}, {"sha": "334465e281fb015a7c7c2ddf2e9880808f7521d0", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a944b3cae32d3034bfe3360114464383419a36/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a944b3cae32d3034bfe3360114464383419a36/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=84a944b3cae32d3034bfe3360114464383419a36", "patch": "@@ -1483,7 +1483,11 @@ generate_bytecode_insns (exp, target, state)\n       break;\n     case COMPOUND_EXPR:\t\n       generate_bytecode_insns (TREE_OPERAND (exp, 0), IGNORE_TARGET, state);\n-      generate_bytecode_insns (TREE_OPERAND (exp, 1), target, state);\n+      /* Normally the first operand to a COMPOUND_EXPR must complete\n+\t normally.  However, in the special case of a do-while\n+\t statement this is not necessarily the case.  */\n+      if (CAN_COMPLETE_NORMALLY (TREE_OPERAND (exp, 0)))\n+\tgenerate_bytecode_insns (TREE_OPERAND (exp, 1), target, state);\n       break;\n     case EXPR_WITH_FILE_LOCATION:\n       {\n@@ -1880,7 +1884,8 @@ generate_bytecode_insns (exp, target, state)\n \t  {\n \t    struct jcf_block *head_label = get_jcf_label_here (state);\n \t    generate_bytecode_insns (body, IGNORE_TARGET, state);\n-\t    emit_goto (head_label, state);\n+\t    if (CAN_COMPLETE_NORMALLY (body))\n+\t      emit_goto (head_label, state);\n \t  }\n       }\n       break;"}, {"sha": "7c50c971a3439837d54c3b5f5c7a8cac64ee67b1", "filename": "gcc/java/parse.y", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84a944b3cae32d3034bfe3360114464383419a36/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84a944b3cae32d3034bfe3360114464383419a36/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=84a944b3cae32d3034bfe3360114464383419a36", "patch": "@@ -11776,8 +11776,12 @@ java_complete_lhs (node)\n \t  TREE_OPERAND (node, 1) = java_complete_tree (TREE_OPERAND (node, 1));\n \t  if (TREE_OPERAND (node, 1) == error_mark_node)\n \t    return error_mark_node;\n+\t  /* Even though we might allow the case where the first\n+\t     operand doesn't return normally, we still should compute\n+\t     CAN_COMPLETE_NORMALLY correctly.  */\n \t  CAN_COMPLETE_NORMALLY (node)\n-\t    = CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 1));\n+\t    = (CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 0))\n+\t       && CAN_COMPLETE_NORMALLY (TREE_OPERAND (node, 1)));\n \t}\n       TREE_TYPE (node) = TREE_TYPE (TREE_OPERAND (node, 1));\n       break;"}]}