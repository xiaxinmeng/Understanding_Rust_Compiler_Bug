{"sha": "f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyYjU5NThmMGRkYzlkYjVjYzlmMGFiY2JkZmU1MGJmZTgxNzBkMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-06T02:33:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-10-06T02:33:19Z"}, "message": "(make_node, case 'd'): Refine in which obstack PARM_DECLs are\nallocated.\n\nFrom-SVN: r5624", "tree": {"sha": "ec83e276609a7de9f896ef445638d287006f0b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec83e276609a7de9f896ef445638d287006f0b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3/comments", "author": null, "committer": null, "parents": [{"sha": "ba2e110c46d90b5c169383265a619b2284957472", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba2e110c46d90b5c169383265a619b2284957472", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba2e110c46d90b5c169383265a619b2284957472"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "aafc7576a16fbcac4e8af57244dc00e2c0104cfb", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f52b5958f0ddc9db5cc9f0abcbdfe50bfe8170d3", "patch": "@@ -792,25 +792,26 @@ make_node (code)\n       /* All decls in an inline function need to be saved.  */\n       if (obstack != &permanent_obstack)\n \tobstack = saveable_obstack;\n-      /* PARM_DECLs always go on saveable_obstack, not permanent,\n-\t even though we may make them before the function turns\n-\t on temporary allocation.  */\n-      else if (code == PARM_DECL)\n+\n+      /* PARM_DECLs go on the context of the parent. If this is a nested\n+\t function, then we must allocate the PARM_DECL on the parent's\n+\t obstack, so that they will live to the end of the parent's\n+\t closing brace.  This is neccesary in case we try to inline the\n+\t function into its parent.\n+\n+\t PARM_DECLs of top-level functions do not have this problem.  However,\n+\t we allocate them where we put the FUNCTION_DECL for languauges such as\n+\t Ada that need to consult some flags in the PARM_DECLs of the function\n+\t when calling it.  */\n+      else if (code == PARM_DECL && obstack != &permanent_obstack)\n \t{\n \t  tree context = 0;\n \t  if (current_function_decl)\n \t    context = decl_function_context (current_function_decl);\n-\t  /* If this is a nested function, then we must allocate the PARM_DECL\n-\t     on the parent's saveable_obstack, so that they will live to the\n-\t     end of the parent's closing brace.  This is neccesary in case we\n-\t     try to inline the function into its parent.  */\n+\n \t  if (context)\n-\t    {\n-\t      struct function *p = find_function_data (context);\n-\t      obstack = p->function_maybepermanent_obstack;\n-\t    }\n-\t  else\n-\t    obstack = function_maybepermanent_obstack;\n+\t    obstack\n+\t      = find_function_data (context)->function_obstack;\n \t}\n       break;\n "}]}