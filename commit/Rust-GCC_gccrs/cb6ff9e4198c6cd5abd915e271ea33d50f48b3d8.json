{"sha": "cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8", "node_id": "C_kwDOANBUbNoAKGNiNmZmOWU0MTk4YzZjZDVhYmQ5MTVlMjcxZWEzM2Q1MGY0OGIzZDg", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-07-27T00:17:17Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-05T07:21:06Z"}, "message": "[Ada] Single-element Append performance improvement\n\nAda.Containers.Vectors has two Append procedures that take an\nElement value; one takes a Count parameter and one does not\n(the count is implicitly one for the latter). For the former version,\nthere was code that took a faster path if certain conditions were met\nand otherwise took a slower path; one of the prerequisite conditions\nfor this was Count = 1. For the latter version, no such special-case\ndetection was performed; the more general code was always executed.\nMove the special-case detection/handling code from the former version into\nthe latter and change the former version to simply call the latter version\nif Count = 1. Also apply same change to Ada.Containers.Indefinite_Vectors.\n\ngcc/ada/\n\n\t* libgnat/a-coinve.adb, libgnat/a-convec.adb\n\t(Append): If the Append that takes an Element and a Count is\n\tcalled with Count = 1, then call the Append that does not take a\n\tCount parameter; otherwise call the code that handles the general\n\tcase. Move the special case detection/handling code that was\n\tformerly in that version of Append into the version that does not\n\ttake a Count parameter, so that now both versions get the\n\tperformance benefit.", "tree": {"sha": "04ab8aeaeb3d457f77b98ed7bc8cf065f4a4cbad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04ab8aeaeb3d457f77b98ed7bc8cf065f4a4cbad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66d4ff2658fc2d5115092da29249191feac75308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66d4ff2658fc2d5115092da29249191feac75308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66d4ff2658fc2d5115092da29249191feac75308"}], "stats": {"total": 88, "additions": 49, "deletions": 39}, "files": [{"sha": "46d6730ad55c5c055275c3db3e3625ec5fc86675", "filename": "gcc/ada/libgnat/a-coinve.adb", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.adb?ref=cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8", "patch": "@@ -197,12 +197,29 @@ is\n       Count     : Count_Type)\n    is\n    begin\n-      --  In the general case, we pass the buck to Insert, but for efficiency,\n-      --  we check for the usual case where Count = 1 and the vector has enough\n-      --  room for at least one more element.\n+      --  In the general case, we take the slow path; for efficiency,\n+      --  we check for the common case where Count = 1 .\n \n-      if Count = 1\n-        and then Container.Elements /= null\n+      if Count = 1 then\n+         Append (Container, New_Item);\n+      else\n+         Append_Slow_Path (Container, New_Item, Count);\n+      end if;\n+   end Append;\n+\n+   ------------\n+   -- Append --\n+   ------------\n+\n+   procedure Append (Container : in out Vector;\n+                     New_Item  :        Element_Type)\n+   is\n+   begin\n+      --  For performance, check for the common special case where the\n+      --  container already has room for at least one more element.\n+      --  In the general case, pass the buck to Insert.\n+\n+      if Container.Elements /= null\n         and then Container.Last /= Container.Elements.Last\n       then\n          TC_Check (Container.TC);\n@@ -223,23 +240,11 @@ is\n             Container.Elements.EA (New_Last) := new Element_Type'(New_Item);\n             Container.Last := New_Last;\n          end;\n-\n       else\n-         Append_Slow_Path (Container, New_Item, Count);\n+         Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n       end if;\n    end Append;\n \n-   ------------\n-   -- Append --\n-   ------------\n-\n-   procedure Append (Container : in out Vector;\n-                        New_Item   :        Element_Type)\n-   is\n-   begin\n-      Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n-   end Append;\n-\n    ----------------------\n    -- Append_Slow_Path --\n    ----------------------"}, {"sha": "751d468b1a3e04fda59be6ab7d8d8fc721bc3dd3", "filename": "gcc/ada/libgnat/a-convec.adb", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8/gcc%2Fada%2Flibgnat%2Fa-convec.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8/gcc%2Fada%2Flibgnat%2Fa-convec.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-convec.adb?ref=cb6ff9e4198c6cd5abd915e271ea33d50f48b3d8", "patch": "@@ -173,27 +173,11 @@ is\n       Count     : Count_Type)\n    is\n    begin\n-      --  In the general case, we pass the buck to Insert, but for efficiency,\n-      --  we check for the usual case where Count = 1 and the vector has enough\n-      --  room for at least one more element.\n-\n-      if Count = 1\n-        and then Container.Elements /= null\n-        and then Container.Last /= Container.Elements.Last\n-      then\n-         TC_Check (Container.TC);\n-\n-         --  Increment Container.Last after assigning the New_Item, so we\n-         --  leave the Container unmodified in case Finalize/Adjust raises\n-         --  an exception.\n-\n-         declare\n-            New_Last : constant Index_Type := Container.Last + 1;\n-         begin\n-            Container.Elements.EA (New_Last) := New_Item;\n-            Container.Last := New_Last;\n-         end;\n+      --  In the general case, we take the slow path; for efficiency,\n+      --  we check for the common case where Count = 1 .\n \n+      if Count = 1 then\n+         Append (Container, New_Item);\n       else\n          Append_Slow_Path (Container, New_Item, Count);\n       end if;\n@@ -222,7 +206,28 @@ is\n                      New_Item  :        Element_Type)\n    is\n    begin\n-      Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n+      --  For performance, check for the common special case where the\n+      --  container already has room for at least one more element.\n+      --  In the general case, pass the buck to Insert.\n+\n+      if Container.Elements /= null\n+        and then Container.Last /= Container.Elements.Last\n+      then\n+         TC_Check (Container.TC);\n+\n+         --  Increment Container.Last after assigning the New_Item, so we\n+         --  leave the Container unmodified in case Finalize/Adjust raises\n+         --  an exception.\n+\n+         declare\n+            New_Last : constant Index_Type := Container.Last + 1;\n+         begin\n+            Container.Elements.EA (New_Last) := New_Item;\n+            Container.Last := New_Last;\n+         end;\n+      else\n+         Insert (Container, Last_Index (Container) + 1, New_Item, 1);\n+      end if;\n    end Append;\n \n    ----------------------"}]}