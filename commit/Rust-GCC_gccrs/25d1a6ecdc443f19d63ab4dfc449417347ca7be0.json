{"sha": "25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVkMWE2ZWNkYzQ0M2YxOWQ2M2FiNGRmYzQ0OTQxNzM0N2NhN2JlMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:16Z"}, "message": "libcc1: use templates to unmarshall enums\n\nNow that C++11 can be used in GCC, libcc1 can be changed to use\ntemplates and type traits to handle unmarshalling all kinds of enums.\n\nlibcc1\n\n\t* marshall.hh (cc1_plugin::unmarshall): Use type traits.\n\t* marshall-cp.hh (cc1_plugin::unmarshall): Remove overloads.\n\t* marshall-c.hh: Remove.\n\t* libcc1plugin.cc: Update includes.\n\t* libcc1.cc: Update includes.", "tree": {"sha": "d7d7e3693096c36217f47ba8f9b0ebf8b0123203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d7e3693096c36217f47ba8f9b0ebf8b0123203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "523ca6403c68d580043af01485f2a8a8ce3a56d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523ca6403c68d580043af01485f2a8a8ce3a56d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/523ca6403c68d580043af01485f2a8a8ce3a56d1"}], "stats": {"total": 131, "additions": 25, "deletions": 106}, "files": [{"sha": "68d366a7287110955dfbe542be880bc5e95acbab", "filename": "libcc1/libcc1.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Flibcc1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Flibcc1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1.cc?ref=25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "patch": "@@ -29,7 +29,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <sys/stat.h>\n #include <stdlib.h>\n #include <sstream>\n-#include \"marshall-c.hh\"\n+#include \"marshall.hh\"\n #include \"rpc.hh\"\n #include \"connection.hh\"\n #include \"names.hh\"\n@@ -39,6 +39,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"findcomp.hh\"\n #include \"compiler-name.hh\"\n #include \"intl.h\"\n+#include \"gcc-c-interface.h\"\n \n struct libcc1;\n "}, {"sha": "59e4851064a211df324deef6ba1a0509f84b2671", "filename": "libcc1/libcc1plugin.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Flibcc1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Flibcc1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1plugin.cc?ref=25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "patch": "@@ -63,8 +63,9 @@\n \n #include \"callbacks.hh\"\n #include \"connection.hh\"\n-#include \"marshall-c.hh\"\n+#include \"marshall.hh\"\n #include \"rpc.hh\"\n+#include \"gcc-c-interface.h\"\n \n #ifdef __GNUC__\n #pragma GCC visibility push(default)"}, {"sha": "212603ebb819f5d533f25c9e090cd5be29113558", "filename": "libcc1/marshall-c.hh", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libcc1%2Fmarshall-c.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libcc1%2Fmarshall-c.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fmarshall-c.hh?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -1,59 +0,0 @@\n-/* Marshalling and unmarshalling of C-specific types.\n-   Copyright (C) 2014-2021 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#ifndef CC1_PLUGIN_MARSHALL_C_HH\n-#define CC1_PLUGIN_MARSHALL_C_HH\n-\n-#include \"marshall.hh\"\n-#include \"gcc-c-interface.h\"\n-\n-namespace cc1_plugin\n-{\n-  status\n-  unmarshall (connection *conn, enum gcc_c_symbol_kind *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_c_symbol_kind) p;\n-    return OK;\n-  }\n-\n-  status\n-  unmarshall (connection *conn, enum gcc_c_oracle_request *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_c_oracle_request) p;\n-    return OK;\n-  }\n-\n-  status\n-  unmarshall (connection *conn, enum gcc_qualifiers *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_qualifiers) p;\n-    return OK;\n-  }\n-}\n-\n-#endif // CC1_PLUGIN_MARSHALL_C_HH"}, {"sha": "3d6ae4126aee72f58a4a639384623ad53bb568c5", "filename": "libcc1/marshall-cp.hh", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Fmarshall-cp.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Fmarshall-cp.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fmarshall-cp.hh?ref=25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "patch": "@@ -25,46 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n \n namespace cc1_plugin\n {\n-  status\n-  unmarshall (connection *conn, enum gcc_cp_symbol_kind *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_cp_symbol_kind) p;\n-    return OK;\n-  }\n-\n-  status\n-  unmarshall (connection *conn, enum gcc_cp_oracle_request *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_cp_oracle_request) p;\n-    return OK;\n-  }\n-\n-  status\n-  unmarshall (connection *conn, enum gcc_cp_qualifiers *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_cp_qualifiers) p;\n-    return OK;\n-  }\n-\n-  status\n-  unmarshall (connection *conn, enum gcc_cp_ref_qualifiers *result)\n-  {\n-    protocol_int p;\n-    if (!unmarshall_intlike (conn, &p))\n-      return FAIL;\n-    *result = (enum gcc_cp_ref_qualifiers) p;\n-    return OK;\n-  }\n-\n   // Send a gcc_vbase_array marker followed by the array.\n   status\n   marshall (connection *conn, const gcc_vbase_array *a)"}, {"sha": "8d890eb9b6c73935a9cc3c21024988db9489e7e2", "filename": "libcc1/marshall.hh", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Fmarshall.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25d1a6ecdc443f19d63ab4dfc449417347ca7be0/libcc1%2Fmarshall.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fmarshall.hh?ref=25d1a6ecdc443f19d63ab4dfc449417347ca7be0", "patch": "@@ -20,6 +20,8 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef CC1_PLUGIN_MARSHALL_HH\n #define CC1_PLUGIN_MARSHALL_HH\n \n+#include <type_traits>\n+\n #include \"status.hh\"\n #include \"gcc-interface.h\"\n \n@@ -59,17 +61,31 @@ namespace cc1_plugin\n   }\n \n   // A template function that can handle unmarshalling various integer\n-  // objects from the connection.  Note that this can't be\n-  // instantiated for enum types.  Note also that there's no way at\n-  // the protocol level to distinguish different int types.\n+  // objects from the connection.  Note that there's no way at the\n+  // protocol level to distinguish different int types.\n+  template<typename T>\n+  status unmarshall (connection *conn, T *scalar,\n+\t\t     typename std::enable_if<std::is_integral<T>::value, T>::type * = 0)\n+  {\n+    protocol_int result;\n+\n+    if (!unmarshall_intlike (conn, &result))\n+      return FAIL;\n+    *scalar = (T) result;\n+    return OK;\n+  }\n+\n+  // A template function that can handle unmarshalling various enum\n+  // objects from the connection.\n   template<typename T>\n-  status unmarshall (connection *conn, T *scalar)\n+  status unmarshall (connection *conn, T *e_val,\n+\t\t     typename std::enable_if<std::is_enum<T>::value, T>::type * = 0)\n   {\n     protocol_int result;\n \n     if (!unmarshall_intlike (conn, &result))\n       return FAIL;\n-    *scalar = result;\n+    *e_val = (T) result;\n     return OK;\n   }\n "}]}