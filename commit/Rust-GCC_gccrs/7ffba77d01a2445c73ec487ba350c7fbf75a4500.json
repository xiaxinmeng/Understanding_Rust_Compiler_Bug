{"sha": "7ffba77d01a2445c73ec487ba350c7fbf75a4500", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmYmE3N2QwMWEyNDQ1YzczZWM0ODdiYTM1MGM3ZmJmNzVhNDUwMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-27T11:13:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-07-27T11:13:42Z"}, "message": "libstdc++: Adjust whitespace in <bits/cow_string.h>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/cow_string.h: Consistently use tab for\n\tindentation.", "tree": {"sha": "dd6a14411ec458c44faec2129bf4753b2ab82598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd6a14411ec458c44faec2129bf4753b2ab82598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffba77d01a2445c73ec487ba350c7fbf75a4500", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffba77d01a2445c73ec487ba350c7fbf75a4500", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffba77d01a2445c73ec487ba350c7fbf75a4500", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffba77d01a2445c73ec487ba350c7fbf75a4500/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b527614ddee5244dfaa1ba35daec596bfb346e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b527614ddee5244dfaa1ba35daec596bfb346e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b527614ddee5244dfaa1ba35daec596bfb346e9"}], "stats": {"total": 202, "additions": 101, "deletions": 101}, "files": [{"sha": "5b09cc2a8961a7f602e18758895917ab910415ea", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffba77d01a2445c73ec487ba350c7fbf75a4500/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffba77d01a2445c73ec487ba350c7fbf75a4500/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=7ffba77d01a2445c73ec487ba350c7fbf75a4500", "patch": "@@ -133,7 +133,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename _CharT_alloc_traits::const_pointer   const_pointer;\n       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;\n       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>\n-                                                            const_iterator;\n+\t\t\t\t\t\t\t    const_iterator;\n       typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n       typedef std::reverse_iterator<iterator>\t\t    reverse_iterator;\n \n@@ -186,55 +186,55 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tstatic const _CharT\t_S_terminal;\n \n \t// The following storage is init'd to 0 by the linker, resulting\n-        // (carefully) in an empty string with one reference.\n-        static size_type _S_empty_rep_storage[];\n+\t// (carefully) in an empty string with one reference.\n+\tstatic size_type _S_empty_rep_storage[];\n \n-        static _Rep&\n-        _S_empty_rep() _GLIBCXX_NOEXCEPT\n-        {\n+\tstatic _Rep&\n+\t_S_empty_rep() _GLIBCXX_NOEXCEPT\n+\t{\n \t  // NB: Mild hack to avoid strict-aliasing warnings.  Note that\n \t  // _S_empty_rep_storage is never modified and the punning should\n \t  // be reasonably safe in this case.\n \t  void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);\n \t  return *reinterpret_cast<_Rep*>(__p);\n \t}\n \n-        bool\n+\tbool\n \t_M_is_leaked() const _GLIBCXX_NOEXCEPT\n-        {\n+\t{\n #if defined(__GTHREADS)\n-          // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,\n-          // so we need to use an atomic load. However, _M_is_leaked\n-          // predicate does not change concurrently (i.e. the string is either\n-          // leaked or not), so a relaxed load is enough.\n-          return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;\n+\t  // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,\n+\t  // so we need to use an atomic load. However, _M_is_leaked\n+\t  // predicate does not change concurrently (i.e. the string is either\n+\t  // leaked or not), so a relaxed load is enough.\n+\t  return __atomic_load_n(&this->_M_refcount, __ATOMIC_RELAXED) < 0;\n #else\n-          return this->_M_refcount < 0;\n+\t  return this->_M_refcount < 0;\n #endif\n-        }\n+\t}\n \n-        bool\n+\tbool\n \t_M_is_shared() const _GLIBCXX_NOEXCEPT\n \t{\n #if defined(__GTHREADS)\n-          // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,\n-          // so we need to use an atomic load. Another thread can drop last\n-          // but one reference concurrently with this check, so we need this\n-          // load to be acquire to synchronize with release fetch_and_add in\n-          // _M_dispose.\n-          return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;\n+\t  // _M_refcount is mutated concurrently by _M_refcopy/_M_dispose,\n+\t  // so we need to use an atomic load. Another thread can drop last\n+\t  // but one reference concurrently with this check, so we need this\n+\t  // load to be acquire to synchronize with release fetch_and_add in\n+\t  // _M_dispose.\n+\t  return __atomic_load_n(&this->_M_refcount, __ATOMIC_ACQUIRE) > 0;\n #else\n-          return this->_M_refcount > 0;\n+\t  return this->_M_refcount > 0;\n #endif\n-        }\n+\t}\n \n-        void\n+\tvoid\n \t_M_set_leaked() _GLIBCXX_NOEXCEPT\n-        { this->_M_refcount = -1; }\n+\t{ this->_M_refcount = -1; }\n \n-        void\n+\tvoid\n \t_M_set_sharable() _GLIBCXX_NOEXCEPT\n-        { this->_M_refcount = 0; }\n+\t{ this->_M_refcount = 0; }\n \n \tvoid\n \t_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT\n@@ -259,7 +259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)\n \t{\n \t  return (!_M_is_leaked() && __alloc1 == __alloc2)\n-\t          ? _M_refcopy() : _M_clone(__alloc1);\n+\t\t  ? _M_refcopy() : _M_clone(__alloc1);\n \t}\n \n \t// Create & Destroy\n@@ -275,14 +275,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    {\n \t      // Be race-detector-friendly.  For more info see bits/c++config.\n \t      _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&this->_M_refcount);\n-              // Decrement of _M_refcount is acq_rel, because:\n-              // - all but last decrements need to release to synchronize with\n-              //   the last decrement that will delete the object.\n-              // - the last decrement needs to acquire to synchronize with\n-              //   all the previous decrements.\n-              // - last but one decrement needs to release to synchronize with\n-              //   the acquire load in _M_is_shared that will conclude that\n-              //   the object is not shared anymore.\n+\t      // Decrement of _M_refcount is acq_rel, because:\n+\t      // - all but last decrements need to release to synchronize with\n+\t      //   the last decrement that will delete the object.\n+\t      // - the last decrement needs to acquire to synchronize with\n+\t      //   all the previous decrements.\n+\t      // - last but one decrement needs to release to synchronize with\n+\t      //   the acquire load in _M_is_shared that will conclude that\n+\t      //   the object is not shared anymore.\n \t      if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,\n \t\t\t\t\t\t\t -1) <= 0)\n \t\t{\n@@ -301,7 +301,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n \t  if (__builtin_expect(this != &_S_empty_rep(), false))\n #endif\n-            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);\n+\t    __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);\n \t  return _M_refdata();\n \t}  // XXX MT\n \n@@ -423,9 +423,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _S_copy_chars is a separate template to permit specialization\n       // to optimize for the common case of pointers as iterators.\n       template<class _Iterator>\n-        static void\n-        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n-        {\n+\tstatic void\n+\t_S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n+\t{\n \t  for (; __k1 != __k2; ++__k1, (void)++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}\n@@ -669,7 +669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n       template<class _InputIterator>\n-        basic_string(_InputIterator __beg, _InputIterator __end,\n+\tbasic_string(_InputIterator __beg, _InputIterator __end,\n \t\t     const _Alloc& __a = _Alloc())\n \t: _M_dataplus(_S_construct(__beg, __end, __a), __a)\n \t{ }\n@@ -1044,10 +1044,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       reference\n       operator[](size_type __pos)\n       {\n-        // Allow pos == size() both in C++98 mode, as v3 extension,\n+\t// Allow pos == size() both in C++98 mode, as v3 extension,\n \t// and in C++11 mode.\n \t__glibcxx_assert(__pos <= size());\n-        // In pedantic mode be strict in C++98 mode.\n+\t// In pedantic mode be strict in C++98 mode.\n \t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());\n \t_M_leak();\n \treturn _M_data()[__pos];\n@@ -1273,9 +1273,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Appends characters in the range [__first,__last) to this string.\n        */\n       template<class _InputIterator>\n-        basic_string&\n-        append(_InputIterator __first, _InputIterator __last)\n-        { return this->replace(_M_iend(), _M_iend(), __first, __last); }\n+\tbasic_string&\n+\tappend(_InputIterator __first, _InputIterator __last)\n+\t{ return this->replace(_M_iend(), _M_iend(), __first, __last); }\n \n #if __cplusplus >= 201703L\n       /**\n@@ -1300,7 +1300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n-        _If_sv<_Tp, basic_string&>\n+\t_If_sv<_Tp, basic_string&>\n \tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n@@ -1420,9 +1420,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  Sets value of string to characters in the range [__first,__last).\n       */\n       template<class _InputIterator>\n-        basic_string&\n-        assign(_InputIterator __first, _InputIterator __last)\n-        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n+\tbasic_string&\n+\tassign(_InputIterator __first, _InputIterator __last)\n+\t{ return this->replace(_M_ibegin(), _M_iend(), __first, __last); }\n \n #if __cplusplus >= 201103L\n       /**\n@@ -1457,8 +1457,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n-        _If_sv<_Tp, basic_string&>\n-        assign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n+\t_If_sv<_Tp, basic_string&>\n+\tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n \t  return assign(__sv.data()\n@@ -1497,9 +1497,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  change if an error is thrown.\n       */\n       template<class _InputIterator>\n-        void\n-        insert(iterator __p, _InputIterator __beg, _InputIterator __end)\n-        { this->replace(__p, __p, __beg, __end); }\n+\tvoid\n+\tinsert(iterator __p, _InputIterator __beg, _InputIterator __end)\n+\t{ this->replace(__p, __p, __beg, __end); }\n \n #if __cplusplus >= 201103L\n       /**\n@@ -1666,8 +1666,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n-        _If_sv<_Tp, basic_string&>\n-        insert(size_type __pos1, const _Tp& __svt,\n+\t_If_sv<_Tp, basic_string&>\n+\tinsert(size_type __pos1, const _Tp& __svt,\n \t       size_type __pos2, size_type __n = npos)\n \t{\n \t  __sv_type __sv = __svt;\n@@ -1956,10 +1956,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  thrown.\n       */\n       template<class _InputIterator>\n-        basic_string&\n-        replace(iterator __i1, iterator __i2,\n+\tbasic_string&\n+\treplace(iterator __i1, iterator __i2,\n \t\t_InputIterator __k1, _InputIterator __k2)\n-        {\n+\t{\n \t  _GLIBCXX_DEBUG_PEDASSERT(_M_ibegin() <= __i1 && __i1 <= __i2\n \t\t\t\t   && __i2 <= _M_iend());\n \t  __glibcxx_requires_valid_range(__k1, __k2);\n@@ -2057,8 +2057,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n-        _If_sv<_Tp, basic_string&>\n-        replace(size_type __pos1, size_type __n1, const _Tp& __svt,\n+\t_If_sv<_Tp, basic_string&>\n+\treplace(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos)\n \t{\n \t  __sv_type __sv = __svt;\n@@ -2071,9 +2071,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /**\n        *  @brief  Replace range of characters with string_view.\n        *  @param __i1    An iterator referencing the start position\n-          to replace at.\n+       *  to replace at.\n        *  @param __i2    An iterator referencing the end position\n-          for the replace.\n+       *  for the replace.\n        *  @param __svt   The object convertible to string_view to insert from.\n        *  @return  Reference to this string.\n       */\n@@ -2091,7 +2091,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbasic_string&\n \t_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,\n \t\t\t    _Integer __val, __true_type)\n-        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }\n+\t{ return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }\n \n       template<class _InputIterator>\n \tbasic_string&\n@@ -2109,46 +2109,46 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // _S_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIter is an integral type\n       template<class _InIterator>\n-        static _CharT*\n-        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+\tstatic _CharT*\n+\t_S_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t const _Alloc& __a, __false_type)\n \t{\n-          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n-          return _S_construct(__beg, __end, __a, _Tag());\n+\t  typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n+\t  return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<class _Integer>\n-        static _CharT*\n-        _S_construct_aux(_Integer __beg, _Integer __end,\n+\tstatic _CharT*\n+\t_S_construct_aux(_Integer __beg, _Integer __end,\n \t\t\t const _Alloc& __a, __true_type)\n-        { return _S_construct_aux_2(static_cast<size_type>(__beg),\n+\t{ return _S_construct_aux_2(static_cast<size_type>(__beg),\n \t\t\t\t    __end, __a); }\n \n       static _CharT*\n       _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)\n       { return _S_construct(__req, __c, __a); }\n \n       template<class _InIterator>\n-        static _CharT*\n-        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n+\tstatic _CharT*\n+\t_S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)\n \t{\n \t  typedef typename std::__is_integer<_InIterator>::__type _Integral;\n \t  return _S_construct_aux(__beg, __end, __a, _Integral());\n-        }\n+\t}\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n       template<class _InIterator>\n-        static _CharT*\n-         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n+\tstatic _CharT*\n+\t _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n \t\t      input_iterator_tag);\n \n       // For forward_iterators up to random_access_iterators, used for\n       // string::iterator, _CharT*, etc.\n       template<class _FwdIterator>\n-        static _CharT*\n-        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n+\tstatic _CharT*\n+\t_S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,\n \t\t     forward_iterator_tag);\n \n       static _CharT*\n@@ -3268,26 +3268,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        _M_check(__pos, \"basic_string::insert\");\n        _M_check_length(size_type(0), __n, \"basic_string::insert\");\n        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())\n-         return _M_replace_safe(__pos, size_type(0), __s, __n);\n+\t return _M_replace_safe(__pos, size_type(0), __s, __n);\n        else\n-         {\n-           // Work in-place.\n-           const size_type __off = __s - _M_data();\n-           _M_mutate(__pos, 0, __n);\n-           __s = _M_data() + __off;\n-           _CharT* __p = _M_data() + __pos;\n-           if (__s  + __n <= __p)\n-             _M_copy(__p, __s, __n);\n-           else if (__s >= __p)\n-             _M_copy(__p, __s + __n, __n);\n-           else\n-             {\n+\t {\n+\t   // Work in-place.\n+\t   const size_type __off = __s - _M_data();\n+\t   _M_mutate(__pos, 0, __n);\n+\t   __s = _M_data() + __off;\n+\t   _CharT* __p = _M_data() + __pos;\n+\t   if (__s  + __n <= __p)\n+\t     _M_copy(__p, __s, __n);\n+\t   else if (__s >= __p)\n+\t     _M_copy(__p, __s + __n, __n);\n+\t   else\n+\t     {\n \t       const size_type __nleft = __p - __s;\n-               _M_copy(__p, __s, __nleft);\n-               _M_copy(__p + __nleft, __p + __n, __n - __nleft);\n-             }\n-           return *this;\n-         }\n+\t       _M_copy(__p, __s, __nleft);\n+\t       _M_copy(__p + __nleft, __p + __n, __n - __nleft);\n+\t     }\n+\t   return *this;\n+\t }\n      }\n \n    template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -3325,7 +3325,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        _M_check_length(__n1, __n2, \"basic_string::replace\");\n        bool __left;\n        if (_M_disjunct(__s) || _M_rep()->_M_is_shared())\n-         return _M_replace_safe(__pos, __n1, __s, __n2);\n+\t return _M_replace_safe(__pos, __n1, __s, __n2);\n        else if ((__left = __s + __n2 <= _M_data() + __pos)\n \t\t|| _M_data() + __pos + __n1 <= __s)\n \t {\n@@ -3349,8 +3349,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::_Rep::\n     _M_destroy(const _Alloc& __a) throw ()\n     {\n-      const size_type __size = sizeof(_Rep_base) +\n-\t                       (this->_M_capacity + 1) * sizeof(_CharT);\n+      const size_type __size = sizeof(_Rep_base)\n+\t\t\t       + (this->_M_capacity + 1) * sizeof(_CharT);\n       _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);\n     }\n "}]}