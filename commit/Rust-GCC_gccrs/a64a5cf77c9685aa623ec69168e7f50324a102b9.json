{"sha": "a64a5cf77c9685aa623ec69168e7f50324a102b9", "node_id": "C_kwDOANBUbNoAKGE2NGE1Y2Y3N2M5Njg1YWE2MjNlYzY5MTY4ZTdmNTAzMjRhMTAyYjk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-18T10:34:39Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-03-18T11:40:05Z"}, "message": "macros: Do not propagate parse errors in match repetitions\n\nSince parsing repetitions is very eager, the parser might accumulate\nbogus errors by trying to match more repetitions than there are. We can\navoid this by clearing the parsing errors if parsing repetitions\nreturned a valid result. This should not be an issue for previous\nmatchers erroring out, as they would immediately return upon failure and\nnot reach inside other match functions.", "tree": {"sha": "ba9b636d9a2a21c4abaa2410d5efd20ac724fe87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba9b636d9a2a21c4abaa2410d5efd20ac724fe87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64a5cf77c9685aa623ec69168e7f50324a102b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64a5cf77c9685aa623ec69168e7f50324a102b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64a5cf77c9685aa623ec69168e7f50324a102b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64a5cf77c9685aa623ec69168e7f50324a102b9/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb9a29688ab4ddfec7f8d36ca2cee63c5f258d2"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "6b26f98dede40841a5ca598f4efc35a5e92eb892", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=a64a5cf77c9685aa623ec69168e7f50324a102b9", "patch": "@@ -505,9 +505,6 @@ MacroExpander::match_fragment (Parser<MacroInvocLexer> &parser,\n       return false;\n     }\n \n-  for (const auto &error : parser.get_errors ())\n-    error.emit_error ();\n-\n   // it matches if the parser did not produce errors trying to parse that type\n   // of item\n   return !parser.has_errors ();\n@@ -714,7 +711,13 @@ MacroExpander::match_n_matches (Parser<MacroInvocLexer> &parser,\n   bool did_meet_lo_bound = match_amount >= lo_bound;\n   bool did_meet_hi_bound = hi_bound ? match_amount <= hi_bound : true;\n \n-  return did_meet_lo_bound && did_meet_hi_bound;\n+  // If the end-result is valid, then we can clear the parse errors: Since\n+  // repetitions are parsed eagerly, it is okay to fail in some cases\n+  auto res = did_meet_lo_bound && did_meet_hi_bound;\n+  if (res)\n+    parser.clear_errors ();\n+\n+  return res;\n }\n \n bool"}, {"sha": "9a31fb6d625d8b1236d117ebdb5a3ad4046181b9", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=a64a5cf77c9685aa623ec69168e7f50324a102b9", "patch": "@@ -649,7 +649,6 @@ template <typename ManagedTokenSource> class Parser\n   bool done_end_of_file ();\n \n   void add_error (Error error) { error_table.push_back (std::move (error)); }\n-  void clear_errors () { error_table.clear (); }\n \n public:\n   // Construct parser with specified \"managed\" token source.\n@@ -668,6 +667,8 @@ template <typename ManagedTokenSource> class Parser\n \n   // Returns whether any parsing errors have occurred.\n   bool has_errors () const { return !error_table.empty (); }\n+  // Remove all parsing errors from the table\n+  void clear_errors () { error_table.clear (); }\n \n   // Get a reference to the list of errors encountered\n   std::vector<Error> &get_errors () { return error_table; }"}, {"sha": "d92534c0747540ef275f8deeb24a68b7ab535254", "filename": "gcc/testsuite/rust/compile/macro25.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro25.rs?ref=a64a5cf77c9685aa623ec69168e7f50324a102b9", "patch": "@@ -0,0 +1,9 @@\n+macro_rules! valid {\n+    ($($a:literal)* $i:ident) => {{}};\n+}\n+\n+fn main() {\n+    valid!(1 one_lit);\n+    valid!(identifier_only);\n+    valid!(1 2 two_lits);\n+}"}, {"sha": "9a59089b1e4fe20dabf311eb418c1fb25e8b3363", "filename": "gcc/testsuite/rust/compile/macro9.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64a5cf77c9685aa623ec69168e7f50324a102b9/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro9.rs?ref=a64a5cf77c9685aa623ec69168e7f50324a102b9", "patch": "@@ -12,7 +12,6 @@ fn main() -> i32 {\n     let b = add!(15);\n     let b = add!(15 14); // { dg-error \"Failed to match any rule within macro\" }\n     let b = add!(15, 14,); // { dg-error \"Failed to match any rule within macro\" }\n-                           // { dg-error \"found unexpected token\" \"\" { target *-*-* } .-1 }\n \n     0\n }"}]}