{"sha": "da77eace90fd99b38cd89ce281033d86ebfda434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3N2VhY2U5MGZkOTliMzhjZDg5Y2UyODEwMzNkODZlYmZkYTQzNA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-12-20T21:41:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-12-20T21:41:48Z"}, "message": "C/C++: Add -Waddress-of-packed-member\n\nWhen address of packed member of struct or union is taken, it may result\nin an unaligned pointer value.  This patch adds -Waddress-of-packed-member\nto check alignment at pointer assignment and warn unaligned address as\nwell as unaligned pointer:\n\n$ cat x.i\nstruct pair_t\n{\n  char c;\n  int i;\n} __attribute__ ((packed));\n\nextern struct pair_t p;\nint *addr = &p.i;\n$ gcc -O2 -S x.i\nx.i:8:13: warning: taking address of packed member of \u2018struct pair_t\u2019 may result in an unaligned pointer value [-Waddress-of-packed-member]\n8 | int *addr = &p.i;\n  |             ^\n\n$ cat c.i\nstruct B { int i; };\nstruct C { struct B b; } __attribute__ ((packed));\n\nlong* g8 (struct C *p) { return p; }\n$ gcc -O2 -S c.i -Wno-incompatible-pointer-types\nc.i: In function \u2018g8\u2019:\nc.i:4:18: warning: converting a packed \u2018struct C *\u2019 pointer (alignment 1) to \u2018long int *\u2019 (alignment 8) may may result in an unaligned pointer value [-Waddress-of-packed-member]\n4 | long* g8 (struct C *p) { return p; }\n  |                  ^\nc.i:2:8: note: defined here\n2 | struct C { struct B b; } __attribute__ ((packed));\n  |        ^\n$\n\nThis warning is enabled by default.  Since read_encoded_value_with_base\nin unwind-pe.h has\n\n  union unaligned\n    {\n      void *ptr;\n      unsigned u2 __attribute__ ((mode (HI)));\n      unsigned u4 __attribute__ ((mode (SI)));\n      unsigned u8 __attribute__ ((mode (DI)));\n      signed s2 __attribute__ ((mode (HI)));\n      signed s4 __attribute__ ((mode (SI)));\n      signed s8 __attribute__ ((mode (DI)));\n    } __attribute__((__packed__));\n  _Unwind_Internal_Ptr result;\n\nand GCC warns:\n\ngcc/libgcc/unwind-pe.h:210:37: warning: taking address of packed member of 'union unaligned' may result in an unaligned pointer value [-Waddress-of-packed-member]\n    result = (_Unwind_Internal_Ptr) u->ptr;\n                                    ^\nwe need to add GCC pragma to ignore -Waddress-of-packed-member.\n\ngcc/\n\n\tPR c/51628\n\t* doc/invoke.texi: Document -Wno-address-of-packed-member.\n\ngcc/c-family/\n\n\tPR c/51628\n\t* c-common.h (warn_for_address_or_pointer_of_packed_member): New.\n\t* c-warn.c (check_alignment_of_packed_member): New function.\n\t(check_address_of_packed_member): Likewise.\n\t(check_and_warn_address_of_packed_member): Likewise.\n\t(warn_for_address_or_pointer_of_packed_member): Likewise.\n\t* c.opt: Add -Wno-address-of-packed-member.\n\ngcc/c/\n\n\tPR c/51628\n\t* c-typeck.c (convert_for_assignment): Call\n\twarn_for_address_or_pointer_of_packed_member.\n\ngcc/cp/\n\n\tPR c/51628\n\t* call.c (convert_for_arg_passing): Call\n\twarn_for_address_or_pointer_of_packed_member.\n\t* typeck.c (convert_for_assignment): Likewise.\n\ngcc/testsuite/\n\n\tPR c/51628\n\t* c-c++-common/pr51628-1.c: New test.\n\t* c-c++-common/pr51628-2.c: Likewise.\n\t* c-c++-common/pr51628-3.c: Likewise.\n\t* c-c++-common/pr51628-4.c: Likewise.\n\t* c-c++-common/pr51628-5.c: Likewise.\n\t* c-c++-common/pr51628-6.c: Likewise.\n\t* c-c++-common/pr51628-7.c: Likewise.\n\t* c-c++-common/pr51628-8.c: Likewise.\n\t* c-c++-common/pr51628-9.c: Likewise.\n\t* c-c++-common/pr51628-10.c: Likewise.\n\t* c-c++-common/pr51628-11.c: Likewise.\n\t* c-c++-common/pr51628-12.c: Likewise.\n\t* c-c++-common/pr51628-13.c: Likewise.\n\t* c-c++-common/pr51628-14.c: Likewise.\n\t* c-c++-common/pr51628-15.c: Likewise.\n\t* c-c++-common/pr51628-26.c: Likewise.\n\t* c-c++-common/pr51628-27.c: Likewise.\n\t* c-c++-common/pr51628-28.c: Likewise.\n\t* c-c++-common/pr51628-29.c: Likewise.\n\t* c-c++-common/pr51628-30.c: Likewise.\n\t* c-c++-common/pr51628-31.c: Likewise.\n\t* c-c++-common/pr51628-32.c: Likewise.\n\t* gcc.dg/pr51628-17.c: Likewise.\n\t* gcc.dg/pr51628-18.c: Likewise.\n\t* gcc.dg/pr51628-19.c: Likewise.\n\t* gcc.dg/pr51628-20.c: Likewise.\n\t* gcc.dg/pr51628-21.c: Likewise.\n\t* gcc.dg/pr51628-22.c: Likewise.\n\t* gcc.dg/pr51628-23.c: Likewise.\n\t* gcc.dg/pr51628-24.c: Likewise.\n\t* gcc.dg/pr51628-25.c: Likewise.\n\t* c-c++-common/asan/misalign-1.c: Add\n\t-Wno-address-of-packed-member.\n\t* c-c++-common/asan/misalign-2.c: Likewise.\n\t* c-c++-common/ubsan/align-2.c: Likewise.\n\t* c-c++-common/ubsan/align-4.c: Likewise.\n\t* c-c++-common/ubsan/align-6.c: Likewise.\n\t* c-c++-common/ubsan/align-7.c: Likewise.\n\t* c-c++-common/ubsan/align-8.c: Likewise.\n\t* c-c++-common/ubsan/align-10.c: Likewise.\n\t* g++.dg/ubsan/align-2.C: Likewise.\n\t* gcc.target/i386/avx512bw-vmovdqu16-2.c: Likewise.\n\t* gcc.target/i386/avx512f-vmovdqu32-2.c: Likewise.\n\t* gcc.target/i386/avx512f-vmovdqu64-2.c: Likewise.\n\t* gcc.target/i386/avx512vl-vmovdqu16-2.c: Likewise.\n\t* gcc.target/i386/avx512vl-vmovdqu32-2.c: Likewise.\n\t* gcc.target/i386/avx512vl-vmovdqu64-2.c: Likewise.\n\nlibgcc/\n\n\t* unwind-pe.h (read_encoded_value_with_base): Add GCC pragma\n\tto ignore -Waddress-of-packed-member.\n\nFrom-SVN: r267313", "tree": {"sha": "4db570f813ef0aad9843f5cfef17ee5b016fd147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4db570f813ef0aad9843f5cfef17ee5b016fd147"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da77eace90fd99b38cd89ce281033d86ebfda434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da77eace90fd99b38cd89ce281033d86ebfda434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da77eace90fd99b38cd89ce281033d86ebfda434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da77eace90fd99b38cd89ce281033d86ebfda434/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11e07fa4327e52771134fa41e3f32d800097e408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11e07fa4327e52771134fa41e3f32d800097e408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11e07fa4327e52771134fa41e3f32d800097e408"}], "stats": {"total": 989, "additions": 970, "deletions": 19}, "files": [{"sha": "acadee92ef3aee37e1077234b0c8bcf65824ac48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,3 +1,8 @@\n+2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\t* doc/invoke.texi: Document -Wno-address-of-packed-member.\n+\n 2018-12-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/88457"}, {"sha": "6f08e265803b179eda6a6ab578f5afa6ab18d18e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,3 +1,13 @@\n+2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\t* c-common.h (warn_for_address_or_pointer_of_packed_member): New.\n+\t* c-warn.c (check_alignment_of_packed_member): New function.\n+\t(check_address_of_packed_member): Likewise.\n+\t(check_and_warn_address_of_packed_member): Likewise.\n+\t(warn_for_address_or_pointer_of_packed_member): Likewise.\n+\t* c.opt: Add -Wno-address-of-packed-member.\n+\n 2018-12-20  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/87504"}, {"sha": "91f5ff4e44544df6dd92478d7077c226d2496e47", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1283,6 +1283,7 @@ extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool,\n \t\t\t\t  bool);\n extern void warn_for_omitted_condop (location_t, tree);\n extern bool warn_for_restrict (unsigned, tree *, unsigned);\n+extern void warn_for_address_or_pointer_of_packed_member (bool, tree, tree);\n \n /* Places where an lvalue, or modifiable lvalue, may be required.\n    Used to select diagnostic messages in lvalue_error and"}, {"sha": "8f402ee164ed8ea901fae581370060f5d712966d", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -2686,3 +2686,167 @@ warn_for_multistatement_macros (location_t body_loc, location_t next_loc,\n     inform (guard_loc, \"some parts of macro expansion are not guarded by \"\n \t    \"this %qs clause\", guard_tinfo_to_string (keyword));\n }\n+\n+/* Return struct or union type if the alignment of data memeber, FIELD,\n+   is less than the alignment of TYPE.  Otherwise, return NULL_TREE.  */\n+\n+static tree\n+check_alignment_of_packed_member (tree type, tree field)\n+{\n+  /* Check alignment of the data member.  */\n+  if (TREE_CODE (field) == FIELD_DECL\n+      && (DECL_PACKED (field)\n+\t  || TYPE_PACKED (TREE_TYPE (field))))\n+    {\n+      /* Check the expected alignment against the field alignment.  */\n+      unsigned int type_align = TYPE_ALIGN (type);\n+      tree context = DECL_CONTEXT (field);\n+      unsigned int record_align = TYPE_ALIGN (context);\n+      if ((record_align % type_align) != 0)\n+\treturn context;\n+      tree field_off = byte_position (field);\n+      if (!multiple_of_p (TREE_TYPE (field_off), field_off,\n+\t\t\t  size_int (type_align / BITS_PER_UNIT)))\n+\treturn context;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return struct or union type if the right hand value, RHS, takes the\n+   unaligned address of packed member of struct or union when assigning\n+   to TYPE.  Otherwise, return NULL_TREE.  */\n+\n+static tree\n+check_address_of_packed_member (tree type, tree rhs)\n+{\n+  if (INDIRECT_REF_P (rhs))\n+    rhs = TREE_OPERAND (rhs, 0);\n+\n+  if (TREE_CODE (rhs) == ADDR_EXPR)\n+    rhs = TREE_OPERAND (rhs, 0);\n+\n+  tree context = NULL_TREE;\n+\n+  /* Check alignment of the object.  */\n+  while (handled_component_p (rhs))\n+    {\n+      if (TREE_CODE (rhs) == COMPONENT_REF)\n+\t{\n+\t  tree field = TREE_OPERAND (rhs, 1);\n+\t  context = check_alignment_of_packed_member (type, field);\n+\t  if (context)\n+\t    break;\n+\t}\n+      rhs = TREE_OPERAND (rhs, 0);\n+    }\n+\n+  return context;\n+}\n+\n+/* Check and warn if the right hand value, RHS, takes the unaligned\n+   address of packed member of struct or union when assigning to TYPE.  */\n+\n+static void\n+check_and_warn_address_of_packed_member (tree type, tree rhs)\n+{\n+  if (TREE_CODE (rhs) != COND_EXPR)\n+    {\n+      while (TREE_CODE (rhs) == COMPOUND_EXPR)\n+\trhs = TREE_OPERAND (rhs, 1);\n+\n+      tree context = check_address_of_packed_member (type, rhs);\n+      if (context)\n+\t{\n+\t  location_t loc = EXPR_LOC_OR_LOC (rhs, input_location);\n+\t  warning_at (loc, OPT_Waddress_of_packed_member,\n+\t\t      \"taking address of packed member of %qT may result \"\n+\t\t      \"in an unaligned pointer value\",\n+\t\t      context);\n+\t}\n+      return;\n+    }\n+\n+  /* Check the THEN path.  */\n+  check_and_warn_address_of_packed_member (type, TREE_OPERAND (rhs, 1));\n+\n+  /* Check the ELSE path.  */\n+  check_and_warn_address_of_packed_member (type, TREE_OPERAND (rhs, 2));\n+}\n+\n+/* Warn if the right hand value, RHS:\n+   1. For CONVERT_P == true, is a pointer value which isn't aligned to a\n+      pointer type TYPE.\n+   2. For CONVERT_P == false, is an address which takes the unaligned\n+      address of packed member of struct or union when assigning to TYPE.\n+*/\n+\n+void\n+warn_for_address_or_pointer_of_packed_member (bool convert_p, tree type,\n+\t\t\t\t\t      tree rhs)\n+{\n+  if (!warn_address_of_packed_member)\n+    return;\n+\n+  /* Don't warn if we don't assign RHS to a pointer.  */\n+  if (!POINTER_TYPE_P (type))\n+    return;\n+\n+  while (TREE_CODE (rhs) == COMPOUND_EXPR)\n+    rhs = TREE_OPERAND (rhs, 1);\n+\n+  if (convert_p)\n+    {\n+      bool rhspointer_p;\n+      tree rhstype;\n+\n+      /* Check the original type of RHS.  */\n+      switch (TREE_CODE (rhs))\n+\t{\n+\tcase PARM_DECL:\n+\tcase VAR_DECL:\n+\t  rhstype = TREE_TYPE (rhs);\n+\t  rhspointer_p = POINTER_TYPE_P (rhstype);\n+\t  break;\n+\tcase NOP_EXPR:\n+\t  rhs = TREE_OPERAND (rhs, 0);\n+\t  if (TREE_CODE (rhs) == ADDR_EXPR)\n+\t    rhs = TREE_OPERAND (rhs, 0);\n+\t  rhstype = TREE_TYPE (rhs);\n+\t  rhspointer_p = TREE_CODE (rhstype) == ARRAY_TYPE;\n+\t  break;\n+\tdefault:\n+\t  return;\n+\t}\n+\n+      if (rhspointer_p && TYPE_PACKED (TREE_TYPE (rhstype)))\n+\t{\n+\t  unsigned int type_align = TYPE_ALIGN_UNIT (TREE_TYPE (type));\n+\t  unsigned int rhs_align = TYPE_ALIGN_UNIT (TREE_TYPE (rhstype));\n+\t  if ((rhs_align % type_align) != 0)\n+\t    {\n+\t      location_t location = EXPR_LOC_OR_LOC (rhs, input_location);\n+\t      warning_at (location, OPT_Waddress_of_packed_member,\n+\t\t\t  \"converting a packed %qT pointer (alignment %d) \"\n+\t\t\t  \"to %qT (alignment %d) may may result in an \"\n+\t\t\t  \"unaligned pointer value\",\n+\t\t\t  rhstype, rhs_align, type, type_align);\n+\t      tree decl = TYPE_STUB_DECL (TREE_TYPE (rhstype));\n+\t      inform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n+\t      decl = TYPE_STUB_DECL (TREE_TYPE (type));\n+\t      if (decl)\n+\t\tinform (DECL_SOURCE_LOCATION (decl), \"defined here\");\n+\t    }\n+\t}\n+    }\n+  else\n+    {\n+      /* Get the type of the pointer pointing to.  */\n+      type = TREE_TYPE (type);\n+\n+      if (TREE_CODE (rhs) == NOP_EXPR)\n+\trhs = TREE_OPERAND (rhs, 0);\n+\n+      check_and_warn_address_of_packed_member (type, rhs);\n+    }\n+}"}, {"sha": "22ccf910a8593e87d1853324f51e955333e0b2e9", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -625,6 +625,10 @@ Wincompatible-pointer-types\n C ObjC Var(warn_incompatible_pointer_types) Init(1) Warning\n Warn when there is a conversion between pointers that have incompatible types.\n \n+Waddress-of-packed-member\n+C ObjC C++ ObjC++ Var(warn_address_of_packed_member) Init(1) Warning\n+Warn when the address of packed member of struct or union is taken.\n+\n Winit-self\n C ObjC C++ ObjC++ Var(warn_init_self) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about variables which are initialized to themselves."}, {"sha": "8febd2570dfcf44858e034fa70cde0ff34324431", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,3 +1,9 @@\n+2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\t* c-typeck.c (convert_for_assignment): Call\n+\twarn_for_address_or_pointer_of_packed_member.\n+\n 2018-12-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* c-parser.c (c_parser_asm_statement) <RID_CONST, RID_RESTRICT>: Give"}, {"sha": "2fe3f64f455a9029a87b40429d7031d9bf24234e", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -6724,7 +6724,11 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n     }\n \n   if (TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (rhstype))\n-    return rhs;\n+    {\n+      warn_for_address_or_pointer_of_packed_member (false, type,\n+\t\t\t\t\t\t    orig_rhs);\n+      return rhs;\n+    }\n \n   if (coder == VOID_TYPE)\n     {\n@@ -7279,6 +7283,11 @@ convert_for_assignment (location_t location, location_t expr_loc, tree type,\n \t    }\n \t}\n \n+      /* If RHS is't an address, check pointer or array of packed\n+\t struct or union.  */\n+      warn_for_address_or_pointer_of_packed_member\n+\t(TREE_CODE (orig_rhs) != ADDR_EXPR, type, orig_rhs);\n+\n       return convert (type, rhs);\n     }\n   else if (codel == POINTER_TYPE && coder == ARRAY_TYPE)"}, {"sha": "f6e07a3afdba03c455a20e6edcc8f9681038fe42", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,3 +1,10 @@\n+2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\t* call.c (convert_for_arg_passing): Call\n+\twarn_for_address_or_pointer_of_packed_member.\n+\t* typeck.c (convert_for_assignment): Likewise.\n+\n 2018-12-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/88180"}, {"sha": "cd220d70df5909cc788e5165219e08c762c0b4d6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -7629,6 +7629,9 @@ convert_for_arg_passing (tree type, tree val, tsubst_flags_t complain)\n \t}\n       maybe_warn_parm_abi (type, cp_expr_loc_or_loc (val, input_location));\n     }\n+\n+  warn_for_address_or_pointer_of_packed_member (false, type, val);\n+\n   return val;\n }\n "}, {"sha": "d5d1115fd239dfada00a80d97efd98fe8647dabb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -9073,6 +9073,8 @@ convert_for_assignment (tree type, tree rhs,\n       TREE_NO_WARNING (rhs) = 1;\n     }\n \n+  warn_for_address_or_pointer_of_packed_member (false, type, rhs);\n+\n   return perform_implicit_conversion_flags (strip_top_quals (type), rhs,\n \t\t\t\t\t    complain, flags);\n }"}, {"sha": "14365fba501e29042a15202ba6c28c61ce2ffa6b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -281,7 +281,8 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{-fsyntax-only  -fmax-errors=@var{n}  -Wpedantic @gol\n -pedantic-errors @gol\n--w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Waligned-new @gol\n+-w  -Wextra  -Wall  -Waddress  -Waddress-of-packed-member @gol\n+-Waggregate-return  -Waligned-new @gol\n -Walloc-zero  -Walloc-size-larger-than=@var{byte-size} @gol\n -Walloca  -Walloca-larger-than=@var{byte-size} @gol\n -Wno-aggressive-loop-optimizations  -Warray-bounds  -Warray-bounds=@var{n} @gol\n@@ -310,7 +311,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wformat-y2k  -Wframe-address @gol\n -Wframe-larger-than=@var{byte-size}  -Wno-free-nonheap-object @gol\n -Wjump-misses-init @gol\n--Wif-not-aligned @gol\n+-Whsa  -Wif-not-aligned @gol\n -Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types @gol\n -Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=@var{n} @gol\n -Wimplicit-function-declaration  -Wimplicit-int @gol\n@@ -358,7 +359,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wuseless-cast  -Wvariadic-macros  -Wvector-operation-performance @gol\n -Wvla  -Wvla-larger-than=@var{byte-size}  -Wvolatile-register-var @gol\n -Wwrite-strings @gol\n--Wzero-as-null-pointer-constant  -Whsa}\n+-Wzero-as-null-pointer-constant}\n \n @item C and Objective-C-only Warning Options\n @gccoptlist{-Wbad-function-cast  -Wmissing-declarations @gol\n@@ -6981,6 +6982,13 @@ behavior and are not portable in C, so they usually indicate that the\n programmer intended to use @code{strcmp}.  This warning is enabled by\n @option{-Wall}.\n \n+@item -Waddress-of-packed-member\n+@opindex Waddress-of-packed-member\n+@opindex Wno-address-of-packed-member\n+Warn when the address of packed member of struct or union is taken,\n+which usually results in an unaligned pointer value.  This is\n+enabled by default.\n+\n @item -Wlogical-op\n @opindex Wlogical-op\n @opindex Wno-logical-op"}, {"sha": "8a32fa8998f539ecaf3ddff8647968f6f1ca581c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,3 +1,54 @@\n+2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR c/51628\n+\t* c-c++-common/pr51628-1.c: New test.\n+\t* c-c++-common/pr51628-2.c: Likewise.\n+\t* c-c++-common/pr51628-3.c: Likewise.\n+\t* c-c++-common/pr51628-4.c: Likewise.\n+\t* c-c++-common/pr51628-5.c: Likewise.\n+\t* c-c++-common/pr51628-6.c: Likewise.\n+\t* c-c++-common/pr51628-7.c: Likewise.\n+\t* c-c++-common/pr51628-8.c: Likewise.\n+\t* c-c++-common/pr51628-9.c: Likewise.\n+\t* c-c++-common/pr51628-10.c: Likewise.\n+\t* c-c++-common/pr51628-11.c: Likewise.\n+\t* c-c++-common/pr51628-12.c: Likewise.\n+\t* c-c++-common/pr51628-13.c: Likewise.\n+\t* c-c++-common/pr51628-14.c: Likewise.\n+\t* c-c++-common/pr51628-15.c: Likewise.\n+\t* c-c++-common/pr51628-26.c: Likewise.\n+\t* c-c++-common/pr51628-27.c: Likewise.\n+\t* c-c++-common/pr51628-28.c: Likewise.\n+\t* c-c++-common/pr51628-29.c: Likewise.\n+\t* c-c++-common/pr51628-30.c: Likewise.\n+\t* c-c++-common/pr51628-31.c: Likewise.\n+\t* c-c++-common/pr51628-32.c: Likewise.\n+\t* gcc.dg/pr51628-17.c: Likewise.\n+\t* gcc.dg/pr51628-18.c: Likewise.\n+\t* gcc.dg/pr51628-19.c: Likewise.\n+\t* gcc.dg/pr51628-20.c: Likewise.\n+\t* gcc.dg/pr51628-21.c: Likewise.\n+\t* gcc.dg/pr51628-22.c: Likewise.\n+\t* gcc.dg/pr51628-23.c: Likewise.\n+\t* gcc.dg/pr51628-24.c: Likewise.\n+\t* gcc.dg/pr51628-25.c: Likewise.\n+\t* c-c++-common/asan/misalign-1.c: Add\n+\t-Wno-address-of-packed-member.\n+\t* c-c++-common/asan/misalign-2.c: Likewise.\n+\t* c-c++-common/ubsan/align-2.c: Likewise.\n+\t* c-c++-common/ubsan/align-4.c: Likewise.\n+\t* c-c++-common/ubsan/align-6.c: Likewise.\n+\t* c-c++-common/ubsan/align-7.c: Likewise.\n+\t* c-c++-common/ubsan/align-8.c: Likewise.\n+\t* c-c++-common/ubsan/align-10.c: Likewise.\n+\t* g++.dg/ubsan/align-2.C: Likewise.\n+\t* gcc.target/i386/avx512bw-vmovdqu16-2.c: Likewise.\n+\t* gcc.target/i386/avx512f-vmovdqu32-2.c: Likewise.\n+\t* gcc.target/i386/avx512f-vmovdqu64-2.c: Likewise.\n+\t* gcc.target/i386/avx512vl-vmovdqu16-2.c: Likewise.\n+\t* gcc.target/i386/avx512vl-vmovdqu32-2.c: Likewise.\n+\t* gcc.target/i386/avx512vl-vmovdqu64-2.c: Likewise.\n+\n 2018-12-20  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/88457"}, {"sha": "ebeb03067063f65f58be2b49c3985a1e649a1972", "filename": "gcc/testsuite/c-c++-common/asan/misalign-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-1.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target { ilp32 || lp64 } } } */\n-/* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O2\" } } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O2 -Wno-address-of-packed-member\" } } */\n /* { dg-additional-options \"-fno-omit-frame-pointer\" { target *-*-darwin* } } */\n /* { dg-shouldfail \"asan\" } */\n "}, {"sha": "b27e22d35a821cf03785cbfba1a0a858794871f7", "filename": "gcc/testsuite/c-c++-common/asan/misalign-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fmisalign-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target { ilp32 || lp64 } } } */\n-/* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O2\" } } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"*\" } { \"-O2 -Wno-address-of-packed-member\" } } */\n /* { dg-additional-options \"-fno-omit-frame-pointer\" { target *-*-darwin* } } */\n /* { dg-shouldfail \"asan\" } */\n "}, {"sha": "5324f9cc9647111ba61c1c34ecae3556e0419be7", "filename": "gcc/testsuite/c-c++-common/pr51628-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-1.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  int x;\n+  int i;\n+} __attribute__((packed, aligned (4)));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = &p.i;\n+\n+int *\n+foo (void)\n+{\n+  struct pair_t arr[2] = { { 1, 10 }, { 2, 20 } };\n+  int *p0, *p1;\n+  p0 = &arr[0].i;\n+  bar (p0);\n+  p1 = &arr[1].i;\n+  bar (p1);\n+  bar (&p.i);\n+  x = &p.i;\n+  return &p.i;\n+}"}, {"sha": "085fe1608c420a11ec1064e7409fe23290af38c0", "filename": "gcc/testsuite/c-c++-common/pr51628-10.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-10.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,24 @@\n+/* PR c/51628.  */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+struct pair_t\n+{\n+  char c;\n+  __int128_t i;\n+} __attribute__ ((packed));\n+\n+typedef struct unaligned_int128_t_\n+{\n+  __int128_t value;\n+} __attribute__((packed)) unaligned_int128_t;\n+\n+struct pair_t p = {0, 1};\n+unaligned_int128_t *addr = (unaligned_int128_t *) &p.i;\n+\n+int \n+main() \n+{\n+  addr->value = ~(__int128_t)0;\n+  return (p.i != 1) ? 0 : 1;\n+}"}, {"sha": "7661232ac88074ee31cff1b063751f9f1dac208f", "filename": "gcc/testsuite/c-c++-common/pr51628-11.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-11.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,17 @@\n+/* PR c/51628.  */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O\" } */\n+\n+struct tuple_t\n+{\n+  char c[12];\n+  __int128_t i;\n+} __attribute__((packed, aligned (8)));\n+\n+typedef struct unaligned_int128_t_\n+{\n+  __int128_t value;\n+} __attribute__ ((packed, aligned(4))) unaligned_int128_t;\n+\n+struct tuple_t p = {{0}, 1};\n+unaligned_int128_t *addr = (unaligned_int128_t *)(&p.i);"}, {"sha": "bc221fa87eff7e903bf6282f7588964e83e8c1a4", "filename": "gcc/testsuite/c-c++-common/pr51628-12.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-12.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,18 @@\n+/* PR c/51628.  */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O\" } */\n+\n+struct tuple_t\n+{\n+  char c[10];\n+  __int128_t i;\n+} __attribute__((packed, aligned (8)));\n+\n+typedef struct unaligned_int128_t_\n+{\n+  __int128_t value;\n+} __attribute__ ((packed, aligned(4))) unaligned_int128_t;\n+\n+struct tuple_t p = {{0}, 1};\n+unaligned_int128_t *addr = (unaligned_int128_t *)(&p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "0edd5e7f84daa06b3a741a6fc9d0892e89a8777c", "filename": "gcc/testsuite/c-c++-common/pr51628-13.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-13.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct B { int i; };\n+struct C { struct B b; } __attribute__ ((packed));\n+\n+int* h4 (struct C *p) { return &p->b.i; }\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "f50378b8651d3b4aabe356ca4b4286a620377cc0", "filename": "gcc/testsuite/c-c++-common/pr51628-14.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-14.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A {\n+  int i;\n+} __attribute__ ((packed));\n+\n+void* f0 (struct A *p) { return &p->i; }"}, {"sha": "bcac6d70ad53c5e83717e7fc9ed66a8f247bb74a", "filename": "gcc/testsuite/c-c++-common/pr51628-15.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-15.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A {\n+  int i;\n+} __attribute__ ((packed));\n+\n+int*\n+f (struct A *p, int *q)\n+{\n+  return q ? q : &p->i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "cd502fe76b8b0cf60d47cd942e95980c588aad93", "filename": "gcc/testsuite/c-c++-common/pr51628-16.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-16.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,13 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct __attribute__ ((packed)) A { int i; };\n+struct B {\n+  struct A a;\n+} b;\n+\n+int *p = (int*)&b.a.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+int *q = (int*)&b.a;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "abfb84ddd0524a7e2cf71003c8a0192c6e1f45aa", "filename": "gcc/testsuite/c-c++-common/pr51628-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  int x;\n+  int i;\n+} __attribute__((packed, aligned (8)));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = &p.i;\n+\n+int *\n+foo (void)\n+{\n+  struct pair_t arr[2] = { { 1, 10 }, { 2, 20 } };\n+  int *p0, *p1;\n+  p0 = &arr[0].i;\n+  bar (p0);\n+  p1 = &arr[1].i;\n+  bar (p1);\n+  bar (&p.i);\n+  x = &p.i;\n+  return &p.i;\n+}"}, {"sha": "2042379860a6858c3858e2221a0dd853a6307a38", "filename": "gcc/testsuite/c-c++-common/pr51628-26.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-26.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,33 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A {\n+  int i;\n+} __attribute__ ((packed));\n+\n+struct A p = {1};\n+int *addr;\n+\n+int i, j;\n+\n+void\n+foo1 (void)\n+{\n+  addr = (i = -1, &p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void\n+foo2 (void)\n+{\n+  addr = (i = -1, j = -2, &p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+void\n+foo3 (void)\n+{\n+  addr = (i = -1, (j = -2, &p.i));\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "9ae1efd7afb8d380c7c934dafd1f1463a2172c5a", "filename": "gcc/testsuite/c-c++-common/pr51628-27.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-27.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A { int i; } __attribute__ ((packed));\n+struct B { struct A a; };\n+struct C { struct B b; };\n+\n+extern struct C *p;\n+\n+int* g8 (void) { return &p->b.a.i; }\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "3cc1fec1f71706a7337fcec5e2496bdf61291897", "filename": "gcc/testsuite/c-c++-common/pr51628-28.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-28.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,31 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A { \n+  int i;\n+} __attribute__ ((packed));\n+\n+int *\n+foo3 (struct A *p1, int *q1, int *q2, struct A *p2) \n+{\n+  return (q1 \n+\t  ? &p1->i\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\t  : (q2 ? &p2->i : q2));\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+int*\n+foo4 (struct A *p1, int **q1, int *q2, int *q3, struct A *p2)\n+{\n+  return (q1\n+\t  ? (*q1 = q2, &p1->i)\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\t  : (q2\n+\t     ? (*q1 = &p1->i,\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\t\t*q2 = 2, &p2->i)\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\t     : q2));\n+}"}, {"sha": "94b3722d2c8cdc12814dcb84f0f0fc99be84d3cf", "filename": "gcc/testsuite/c-c++-common/pr51628-29.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-29.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A { int i; };\n+struct B { struct A a; };\n+struct C { struct B b __attribute__ ((packed)); };\n+\n+extern struct C *p;\n+\n+int*\n+g8 (void)\n+{\n+  return &p->b.a.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "0ea94c845a07d7ca83973ee239aab34b1a52f6b4", "filename": "gcc/testsuite/c-c++-common/pr51628-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-3.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  int x;\n+  int i;\n+} __attribute__((packed, aligned (2)));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\n+int *\n+foo (void)\n+{\n+  struct pair_t arr[2] = { { 1, 10 }, { 2, 20 } };\n+  int *p0, *p1;\n+  p0 = &arr[0].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p0);\n+  p1 = &arr[1].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p1);\n+  bar (&p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  x = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  return &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "578edf4e8f934e004bdf60750c25f8d2e957b649", "filename": "gcc/testsuite/c-c++-common/pr51628-30.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-30.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,23 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A { __complex int i; };\n+struct B { struct A a; };\n+struct C { struct B b __attribute__ ((packed)); };\n+\n+extern struct C *p;\n+\n+int*\n+foo1 (void)\n+{\n+  return &__real(p->b.a.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}\n+\n+int*\n+foo2 (void)\n+{\n+  return &__imag(p->b.a.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "9730f53f58290b7e666494bd679f482659a88aa9", "filename": "gcc/testsuite/c-c++-common/pr51628-31.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-31.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,16 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+struct X\n+{\n+  v4si x;\n+} __attribute__((packed)) x;\n+\n+int *\n+foo()\n+{\n+  return &x.x[1];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "a62e57d5b464b207a2a129a77c0d1177d7669214", "filename": "gcc/testsuite/c-c++-common/pr51628-32.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-32.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,19 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct A\n+{\n+   int i;\n+};\n+\n+struct B\n+{\n+   char c;\n+   __attribute ((packed)) struct A ar[4];\n+};\n+\n+struct B b;\n+\n+int *p = &b.ar[1].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "c4c1fb72d6d2b33ed98a1d4c00bb81ad4df14c64", "filename": "gcc/testsuite/c-c++-common/pr51628-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-4.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  int x;\n+  int i;\n+} __attribute__((packed));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\n+int *\n+foo (void)\n+{\n+  struct pair_t arr[2] = { { 1, 10 }, { 2, 20 } };\n+  int *p0, *p1;\n+  p0 = &arr[0].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p0);\n+  p1 = &arr[1].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p1);\n+  bar (&p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  x = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  return &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "9d7c309a0efaf6e0ca1532212937940789920345", "filename": "gcc/testsuite/c-c++-common/pr51628-5.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-5.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  char x;\n+  int i;\n+} __attribute__((packed));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\n+int *\n+foo (void)\n+{\n+  struct pair_t arr[2] = { { 1, 10 }, { 2, 20 } };\n+  int *p0, *p1;\n+  p0 = &arr[0].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p0);\n+  p1 = &arr[1].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p1);\n+  bar (&p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  x = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  return &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "52aa07a4cf3f64160c13518a2035a092f44b095a", "filename": "gcc/testsuite/c-c++-common/pr51628-6.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-6.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  char x;\n+  int i;\n+} __attribute__((packed, aligned (4)));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\n+int *\n+foo (void)\n+{\n+  struct pair_t arr[2] = { { 1, 10 }, { 2, 20 } };\n+  int *p0, *p1;\n+  p0 = &arr[0].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p0);\n+  p1 = &arr[1].i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p1);\n+  bar (&p.i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  x = &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  return &p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "ae4a681f966644cedca8778d325693201cf3cb44", "filename": "gcc/testsuite/c-c++-common/pr51628-7.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-7.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,29 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  int x;\n+  int i[4];\n+} __attribute__((packed, aligned (4)));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = p.i;\n+\n+int *\n+foo (struct pair_t *p)\n+{\n+  int *p0, *p1;\n+  p0 = p->i;\n+  bar (p0);\n+  p1 = &p->i[1];\n+  bar (p1);\n+  bar (p->i);\n+  bar (&p->i[2]);\n+  x = p->i;\n+  return &p->i[3];\n+}"}, {"sha": "cc2dae096ae7e7c8ebf9fd0e5609397546178d2b", "filename": "gcc/testsuite/c-c++-common/pr51628-8.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-8.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  char x;\n+  int i[4];\n+} __attribute__ ((packed, aligned (4)));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\n+int *\n+foo (struct pair_t *p)\n+{\n+  int *p0, *p1;\n+  p0 = p->i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p0);\n+  p1 = &p->i[1];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p1);\n+  bar (p->i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (&p->i[2]);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  x = p->i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  return &p->i[3];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "0470aa3b93dc6270efba652886f417ef2fb26a75", "filename": "gcc/testsuite/c-c++-common/pr51628-9.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr51628-9.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,36 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+struct pair_t\n+{\n+  int x;\n+  int i[4];\n+} __attribute__ ((packed));\n+\n+extern struct pair_t p;\n+extern int *x;\n+extern void bar (int *);\n+\n+int *addr = p.i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+\n+int *\n+foo (struct pair_t *p)\n+{\n+  int *p0, *p1;\n+  p0 = p->i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p0);\n+  p1 = &p->i[1];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (p1);\n+  bar (p->i);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  bar (&p->i[2]);\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  x = p->i;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  return &p->i[3];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "6210533173c644076ec7417a7c851551e3e3095b", "filename": "gcc/testsuite/c-c++-common/ubsan/align-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-10.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n /* Limit this to known non-strict alignment targets.  */\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n-/* { dg-options \"-O -fsanitize=alignment -fsanitize-recover=alignment\" } */\n+/* { dg-options \"-O -fsanitize=alignment -fsanitize-recover=alignment -Wno-address-of-packed-member\" } */\n \n struct R { int a; } r;\n struct S { struct R a; char b; long long c; short d[10]; };"}, {"sha": "336b1c3c90775723a953f3df6fb9e12769287824", "filename": "gcc/testsuite/c-c++-common/ubsan/align-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n /* Limit this to known non-strict alignment targets.  */\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n-/* { dg-options \"-fsanitize=alignment\" } */\n+/* { dg-options \"-fsanitize=alignment -Wno-address-of-packed-member\" } */\n \n struct S { int a; char b; long long c; short d[10]; };\n struct T { char a; long long b; };"}, {"sha": "d5feeee29c6641de55460430051f4846c6b1ef72", "filename": "gcc/testsuite/c-c++-common/ubsan/align-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-4.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n /* Limit this to known non-strict alignment targets.  */\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n-/* { dg-options \"-fsanitize=null,alignment\" } */\n+/* { dg-options \"-fsanitize=null,alignment -Wno-address-of-packed-member\" } */\n \n #include \"align-2.c\"\n "}, {"sha": "0302b7b889468ba42fa6c2cd5f8bd848d399e555", "filename": "gcc/testsuite/c-c++-common/ubsan/align-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-6.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n /* Limit this to known non-strict alignment targets.  */\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n-/* { dg-options \"-O -fsanitize=alignment -fsanitize-recover=alignment\" } */\n+/* { dg-options \"-O -fsanitize=alignment -fsanitize-recover=alignment -Wno-address-of-packed-member\" } */\n \n struct S { int a; char b; long long c; short d[10]; };\n struct T { char a; long long b; };"}, {"sha": "dd1e8c91cefd88c55aeb34a56592336b47a7e2ad", "filename": "gcc/testsuite/c-c++-common/ubsan/align-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-7.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n /* Limit this to known non-strict alignment targets.  */\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n-/* { dg-options \"-O -fsanitize=alignment -fno-sanitize-recover=alignment -fdump-tree-sanopt-details\" } */\n+/* { dg-options \"-O -fsanitize=alignment -fno-sanitize-recover=alignment -Wno-address-of-packed-member -fdump-tree-sanopt-details\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto -fno-fat-lto-objects\" } } */\n /* { dg-shouldfail \"ubsan\" } */\n "}, {"sha": "5fe0e0fe9312b72c4af8c1d97126873e35a9c6d0", "filename": "gcc/testsuite/c-c++-common/ubsan/align-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Falign-8.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n /* Limit this to known non-strict alignment targets.  */\n /* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n-/* { dg-options \"-O -fsanitize=alignment -fsanitize-undefined-trap-on-error -fdump-tree-sanopt-details\" } */\n+/* { dg-options \"-O -fsanitize=alignment -fsanitize-undefined-trap-on-error -Wno-address-of-packed-member -fdump-tree-sanopt-details\" } */\n /* { dg-skip-if \"\" { *-*-* } { \"-flto -fno-fat-lto-objects\" } } */\n /* { dg-shouldfail \"ubsan\" } */\n "}, {"sha": "c97ede88392a3a0fc2b437a122f7390f670f1a7c", "filename": "gcc/testsuite/g++.dg/ubsan/align-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Falign-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Falign-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Falign-2.C?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,6 +1,6 @@\n // Limit this to known non-strict alignment targets.\n // { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } }\n-// { dg-options \"-fsanitize=alignment -Wall -Wno-unused-variable -std=c++11\" }\n+// { dg-options \"-fsanitize=alignment -Wall -Wno-unused-variable -Wno-address-of-packed-member -std=c++11\" }\n \n typedef const long int L;\n struct S { long int l; char buf[1 + sizeof (int) + sizeof (L)]; } s;"}, {"sha": "0be95b2294e2357929512fd06c6154c9b469e4cb", "filename": "gcc/testsuite/gcc.dg/pr51628-17.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-17.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct A {\n+  int i;\n+} __attribute__ ((packed));\n+\n+long* f8 (struct A *p) { return &p->i; }\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "03a04eff75cc29b24939a5eff91219330c73a26f", "filename": "gcc/testsuite/gcc.dg/pr51628-18.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-18.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,23 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+void foo (int *);\n+\n+int *\n+bar (int n, int k, void *ptr)\n+{\n+  struct A\n+  {\n+    int c[k];\n+    int x[n];\n+  } __attribute__ ((packed, aligned (4)));\n+  struct A *p = (struct A *) ptr;\n+\n+  int *p0, *p1;\n+  p0 = p->x;\n+  foo (p0);\n+  p1 = &p->x[1];\n+  foo (p1);\n+  return &p->x[1];\n+}"}, {"sha": "7ff03e85ceaf0f125c46327ff6c9bf900e0b82db", "filename": "gcc/testsuite/gcc.dg/pr51628-19.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-19.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,26 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+void foo (int *);\n+\n+int *\n+bar (int n, int k, void *ptr)\n+{\n+  struct A\n+  {\n+    char c[k];\n+    int x[n];\n+  } __attribute__ ((packed));\n+  struct A *p = (struct A *) ptr;\n+\n+  int *p0, *p1;\n+  p0 = p->x;\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  foo (p0);\n+  p1 = &p->x[1];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+  foo (p1);\n+  return &p->x[1];\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */\n+}"}, {"sha": "80888283b73ab80130086e4f72d3a3f53dd01219", "filename": "gcc/testsuite/gcc.dg/pr51628-20.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-20.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct B { int i; };\n+struct C { struct B b; } __attribute__ ((packed));\n+\n+extern struct C *p;\n+\n+long* g8 (void) { return p; }\n+/* { dg-warning \"may may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "3077e72c8d540d85707983e035bf3761254d93ae", "filename": "gcc/testsuite/gcc.dg/pr51628-21.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-21.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct B { int i; };\n+struct C { struct B b; } __attribute__ ((packed));\n+\n+extern struct C p[];\n+\n+long* g8 (void) { return p; }\n+/* { dg-warning \"may may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "1bd5d79163906fe382e16a11ce94b0b0adb8f228", "filename": "gcc/testsuite/gcc.dg/pr51628-22.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-22.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct B { int i; };\n+struct C { struct B b; } __attribute__ ((packed));\n+\n+int* g4 (struct C *p) { return &p->b; }\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "5709be60ac8a78bf9bdf25b7ea2965cd15bd3d95", "filename": "gcc/testsuite/gcc.dg/pr51628-23.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-23.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct A {\n+  int i;\n+} __attribute__ ((packed));\n+\n+char* f0 (struct A *p) { return &p->i; }"}, {"sha": "3ad99cd2f1620e1a16778ea00d20a2cec73ab74d", "filename": "gcc/testsuite/gcc.dg/pr51628-24.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-24.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,10 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct A {\n+  int i;\n+} __attribute__ ((packed));\n+\n+short* f2 (struct A *p) { return &p->i; }\n+/* { dg-warning \"may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "2fc5c02871156c277e06f6d141db2f67274cf737", "filename": "gcc/testsuite/gcc.dg/pr51628-25.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr51628-25.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/51628.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-incompatible-pointer-types\" } */\n+\n+struct B { int i; };\n+struct C { struct B b; } __attribute__ ((packed));\n+\n+long* g8 (struct C *p) { return p; }\n+/* { dg-warning \"may may result in an unaligned pointer value\" \"\" { target *-*-* } .-1 } */"}, {"sha": "c6e3ebdc507894dd0c63c77d715a48cf2c50cf90", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vmovdqu16-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vmovdqu16-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mavx512bw\" } */\n+/* { dg-options \"-O2 -mavx512bw -Wno-address-of-packed-member\" } */\n /* { dg-require-effective-target avx512bw } */\n \n #define AVX512BW"}, {"sha": "95a657fc5ff2b066bc219a2ffd75eb925dced6e1", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu32-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-options \"-O2 -mavx512f -Wno-address-of-packed-member\" } */\n /* { dg-require-effective-target avx512f } */\n \n #define AVX512F"}, {"sha": "954b091d9760f6febc719d8e863166286ebd1164", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu64-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu64-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-options \"-O2 -mavx512f -Wno-address-of-packed-member\" } */\n /* { dg-require-effective-target avx512f } */\n \n #define AVX512F"}, {"sha": "81465f8d9a0192d5fe7b18739aee1d3380343f30", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqu16-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu16-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mavx512bw -mavx512vl\" } */\n+/* { dg-options \"-O2 -mavx512bw -mavx512vl -Wno-address-of-packed-member\" } */\n /* { dg-require-effective-target avx512vl } */\n /* { dg-require-effective-target avx512bw } */\n "}, {"sha": "19390664bd090174208d446559517b0a50fa7d07", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqu32-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu32-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-options \"-O2 -mavx512vl -Wno-address-of-packed-member\" } */\n /* { dg-require-effective-target avx512vl } */\n \n #define AVX512VL"}, {"sha": "aea0c12a5ff2afd848d9dda0883966750f800972", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vmovdqu64-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vmovdqu64-2.c?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-options \"-O2 -mavx512vl -Wno-address-of-packed-member\" } */\n /* { dg-require-effective-target avx512vl } */\n \n #define AVX512VL"}, {"sha": "1d2dc17a1a6a06a5f45b52060841aa51c91ad494", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -1,3 +1,8 @@\n+2018-12-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* unwind-pe.h (read_encoded_value_with_base): Add GCC pragma\n+\tto ignore -Waddress-of-packed-member.\n+\n 2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n \n \t* /config/arm/lib1funcs.S (FUNC_START): Remove unused sp_section"}, {"sha": "05c2fb4dd5076587ed23dbe1aab90531c1e16e78", "filename": "libgcc/unwind-pe.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da77eace90fd99b38cd89ce281033d86ebfda434/libgcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da77eace90fd99b38cd89ce281033d86ebfda434/libgcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-pe.h?ref=da77eace90fd99b38cd89ce281033d86ebfda434", "patch": "@@ -177,6 +177,9 @@ read_sleb128 (const unsigned char *p, _sleb128_t *val)\n    The function returns P incremented past the value.  BASE is as given\n    by base_of_encoded_value for this encoding in the appropriate context.  */\n \n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Waddress-of-packed-member\"\n+\n static const unsigned char *\n read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n \t\t\t      const unsigned char *p, _Unwind_Ptr *val)\n@@ -270,6 +273,8 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n   return p;\n }\n \n+#pragma GCC diagnostic pop\n+\n #ifndef NO_BASE_OF_ENCODED_VALUE\n \n /* Like read_encoded_value_with_base, but get the base from the context"}]}