{"sha": "1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM4NThhZjU4ZmVlZWIxNzBlYjhhMWU4OGI0ZWE2NzBkZTJlMTZmMA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2013-07-16T10:41:30Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2013-07-16T10:41:30Z"}, "message": "re PR target/55654 (objc/obj-c++ failures present under darwin10)\n\ngcc/testsuite/\n\n\tPR target/55654\n\tPR target/55656\n\tPR target/55657\n\t* obj-c++.dg/cxx-ivars-3.mm: Use NSObject instead of Object.\n\t* obj-c++.dg/strings/const-cfstring-5.mm: Likewise.\n\t* obj-c++.dg/torture/strings/const-str-10.mm: Likewise.\n\t* obj-c++.dg/torture/strings/const-str-9.mm: Likewise.\n\t* objc.dg/image-info.m: Likewise.\n\t* objc.dg/symtab-1.m: Likewise.\n\t* objc.dg/torture/strings/const-str-10.m: Likewise.\n\t* objc.dg/torture/strings/const-str-11.m: Likewise.\n\t* objc.dg/torture/strings/const-str-9.m: Likewise.\n\t* objc.dg/zero-link-1.m: Likewise.\n\t* objc.dg/zero-link-2.m: Likewise.\n\t* objc.dg/no-extra-load.m: Avoid Foundation.h.\n\t* objc.dg/objc-foreach-4.m: Likewise.\n\t* objc.dg/objc-foreach-5.m: Likewise.\n\t* obj-c++.dg/proto-lossage-7.mm: Use NSObject instead of Object\n\t(for Darwin).\n\t* obj-c++.dg/strings/const-str-12.mm: Likewise.\n\t* obj-c++.dg/syntax-error-1.mm: Likewise.\n\t* objc.dg/method-6.m: Likewise.\n\t* objc.dg/pr23214.m: Likewise.\n\t* objc.dg/proto-lossage-7.m: Likewise.\n\t* objc.dg/strings/const-str-12b.m: Likewise.\n\t* objc.dg/zero-link-3.m: Likewise.\n\t* obj-c++.dg/method-12.mm: Skip on Darwin versions without 'Object'.\n\t* objc.dg/encode-7-next-64bit.m: Use NSObject instead of Object,\n\tadjust headers, interfaces and encoded types to reflect current system\n\tversions.  Add FIXME and outputs from current system compiler for\n\treference.\n\nFrom-SVN: r200977", "tree": {"sha": "62076bc7ebc97afdc50e12b5cd7b1ebf3ce729b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62076bc7ebc97afdc50e12b5cd7b1ebf3ce729b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc98bcc4aef4540a8a3d38da32c772a3f0bae6e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc98bcc4aef4540a8a3d38da32c772a3f0bae6e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc98bcc4aef4540a8a3d38da32c772a3f0bae6e2"}], "stats": {"total": 320, "additions": 210, "deletions": 110}, "files": [{"sha": "75f75de325b4365640707497691a4b355ddd6dca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -1,3 +1,37 @@\n+2013-07-16  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/55654\n+\tPR target/55656\n+\tPR target/55657\n+\t* obj-c++.dg/cxx-ivars-3.mm: Use NSObject instead of Object.\n+\t* obj-c++.dg/strings/const-cfstring-5.mm: Likewise.\n+\t* obj-c++.dg/torture/strings/const-str-10.mm: Likewise.\n+\t* obj-c++.dg/torture/strings/const-str-9.mm: Likewise.\n+\t* objc.dg/image-info.m: Likewise.\n+\t* objc.dg/symtab-1.m: Likewise.\n+\t* objc.dg/torture/strings/const-str-10.m: Likewise.\n+\t* objc.dg/torture/strings/const-str-11.m: Likewise.\n+\t* objc.dg/torture/strings/const-str-9.m: Likewise.\n+\t* objc.dg/zero-link-1.m: Likewise.\n+\t* objc.dg/zero-link-2.m: Likewise.\n+\t* objc.dg/no-extra-load.m: Avoid Foundation.h.\n+\t* objc.dg/objc-foreach-4.m: Likewise.\n+\t* objc.dg/objc-foreach-5.m: Likewise.\n+\t* obj-c++.dg/proto-lossage-7.mm: Use NSObject instead of Object\n+\t(for Darwin).\n+\t* obj-c++.dg/strings/const-str-12.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-1.mm: Likewise.\n+\t* objc.dg/method-6.m: Likewise.\n+\t* objc.dg/pr23214.m: Likewise.\n+\t* objc.dg/proto-lossage-7.m: Likewise.\n+\t* objc.dg/strings/const-str-12b.m: Likewise.\n+\t* objc.dg/zero-link-3.m: Likewise.\n+\t* obj-c++.dg/method-12.mm: Skip on Darwin versions without 'Object'.\n+\t* objc.dg/encode-7-next-64bit.m: Use NSObject instead of Object,\n+\tadjust headers, interfaces and encoded types to reflect current system\n+\tversions.  Add FIXME and outputs from current system compiler for\n+\treference.\n+\n 2013-07-15  Cong Hou  <congh@google.com>\n \n \t* gcc.target/i386/l_fma_float_1.c: Update the instruction to be"}, {"sha": "0098349cbceeefab32ba4a10437fcceb57d8401a", "filename": "gcc/testsuite/obj-c++.dg/cxx-ivars-3.mm", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fcxx-ivars-3.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -2,12 +2,15 @@\n \n // { dg-do run { target *-*-darwin* } }\n // { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } }\n-// { dg-options \"-fobjc-call-cxx-cdtors -mmacosx-version-min=10.4\" }\n+// { dg-additional-options \"-fobjc-call-cxx-cdtors -mmacosx-version-min=10.4 -framework Foundation\" }\n // This test has no equivalent or meaning for m64/ABI V2\n // { dg-xfail-run-if \"No Test Avail\" { *-*-darwin* && lp64 } { \"-fnext-runtime\" } { \"\" } }\n \n #include <objc/objc-runtime.h>\n #include <stdlib.h>\n+#include <Foundation/NSObject.h>\n+\n+//extern \"C\" { int printf(const char *,...); }\n #define CHECK_IF(expr) if(!(expr)) abort()\n \n #ifndef CLS_HAS_CXX_STRUCTORS\n@@ -19,7 +22,7 @@\n   cxx_struct (void) { a = b = 55; }\n };\n \n-@interface Foo {\n+@interface Foo: NSObject {\n   int c;\n   cxx_struct s;\n }\n@@ -42,9 +45,11 @@ int main (void)\n   Class cls;\n \n   cls = objc_getClass(\"Foo\");\n-  CHECK_IF(cls->info & CLS_HAS_CXX_STRUCTORS);\n+//  printf((const char *)\"Foo info %lx\\n\",cls->info);\n+  CHECK_IF((cls->info & CLS_HAS_CXX_STRUCTORS) != 0);\n   cls = objc_getClass(\"Bar\");\n-  CHECK_IF(!(cls->info & CLS_HAS_CXX_STRUCTORS));\n+//  printf((const char *)\"Bar info %lx\\n\",cls->info);\n+  CHECK_IF((cls->info & CLS_HAS_CXX_STRUCTORS) == 0);\n \n #else\n   /* No test needed or available.  */"}, {"sha": "6cdb0f9c810cb10075a616f178a4a51410f0631b", "filename": "gcc/testsuite/obj-c++.dg/method-12.mm", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fmethod-12.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -2,6 +2,7 @@\n /* Author: Ziemowit Laski <zlaski@apple.com>  */\n /* { dg-options \"-Wstrict-selector-match\" } */\n /* { dg-do compile } */\n+/* { dg-skip-if \"Object interface removed\" { *-*-darwin[1-2]* && { lp64 } } { \"-fnext-runtime\" } { \"\" } } */\n \n #include <objc/Protocol.h>\n \n@@ -19,13 +20,13 @@ void foo(void) {\n   Class receiver;\n \n   [receiver port];  /* { dg-warning \"multiple methods named .\\\\+port. found\" } */\n-       /* { dg-message \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 9 } */\n-       /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 14 } */\n+       /* { dg-message \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 10 } */\n+       /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 15 } */\n \n   [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 26 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 26 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 26 } */\n \n   [Class port];  /* { dg-error \".Class. is not an Objective\\\\-C class name or alias\" } */\n }"}, {"sha": "b32cfd8a0dd62403c06b3b3da167ca701bc5637a", "filename": "gcc/testsuite/obj-c++.dg/proto-lossage-7.mm", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproto-lossage-7.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -1,12 +1,19 @@\n /* Check that typedefs of ObjC classes preserve \n    any @protocol qualifiers.  */\n /* { dg-do compile } */\n+\n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n #include <objc/Object.h>\n+#define OBJECT Object\n+#endif\n \n @protocol CanDoStuff;\n \n-typedef Object<CanDoStuff> CanDoStuffType;\n-typedef Object<CanDoStuff> *CanDoStuffTypePtr;\n+typedef OBJECT<CanDoStuff> CanDoStuffType;\n+typedef OBJECT<CanDoStuff> *CanDoStuffTypePtr;\n \n @protocol CanDoStuff\n - (int) dostuff;"}, {"sha": "98bb7c5bddc1b57b5d696d580169bb1c32246694", "filename": "gcc/testsuite/obj-c++.dg/strings/const-cfstring-5.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-cfstring-5.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -6,16 +6,16 @@\n /* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mconstant-cfstrings\" } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n \n-@interface Foo: Object {\n+@interface Foo: NSObject {\n   char *cString;\n   unsigned int len;\n }\n + (Foo *)description;\n @end\n \n-@interface Bar: Object\n+@interface Bar: NSObject\n + (Foo *) getString: (int) which;\n @end\n "}, {"sha": "d0dfb668ea93b666077eedf3ffc9cfcdd3858100", "filename": "gcc/testsuite/obj-c++.dg/strings/const-str-12.mm", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fstrings%2Fconst-str-12.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -5,17 +5,23 @@\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n \n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n #include <objc/Object.h>\n+#define OBJECT Object\n+#endif\n #include \"../../objc-obj-c++-shared/objc-test-suite-types.h\"\n \n-@interface Foo: Object {\n+@interface Foo: OBJECT {\n   char *cString;\n   unsigned int len;\n }\n + (id)description;\n @end\n \n-@interface Bar: Object\n+@interface Bar: OBJECT\n + (Foo *) getString: (int) which;\n @end\n "}, {"sha": "1fe9ca3c4b0b159308dd0a3f55375f11c075550d", "filename": "gcc/testsuite/obj-c++.dg/syntax-error-1.mm", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-1.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-1.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-1.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -1,7 +1,13 @@\n /* Graceful handling of a syntax error.  */\n /* { dg-do compile } */\n \n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n #include <objc/Object.h>\n+#define OBJECT Object\n+#endif\n \n class foo {\n   public:\n@@ -12,7 +18,7 @@\n \n extern void NXLog(const char *, ...);\n \n-@interface Test2 : Object {\n+@interface Test2 : OBJECT {\n }\n - (void) foo2;\n @end\n@@ -23,4 +29,4 @@ - (void) foo2\n } /* { dg-error \"stray .\\}. between Objective\\\\-C\\\\+\\\\+ methods\" } */\n @end\n \n-/* { dg-error \"expected constructor, destructor, or type conversion before\" \"\" { target *-*-* } 22 } */\n+/* { dg-error \"expected constructor, destructor, or type conversion before\" \"\" { target *-*-* } 28 } */"}, {"sha": "f2e912beb0a02d03ab3ec667f658ac3157afedd4", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-10.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-10.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -6,10 +6,10 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n-@interface NSString: Object\n+@interface NSString: NSObject\n @end\n \n @interface NSSimpleCString : NSString {"}, {"sha": "7e5d9b61e71ac0b3c6fc3241fe49a4906f683151", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-11.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-11.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -7,10 +7,10 @@\n /* { dg-options \"-fconstant-string-class=XStr\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=XStr\" { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n-@interface XString: Object {\n+@interface XString: NSObject {\n @protected\n     char *bytes;\n }"}, {"sha": "d78dc73f9378e351b0ab910920f4458e58414618", "filename": "gcc/testsuite/obj-c++.dg/torture/strings/const-str-9.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Ftorture%2Fstrings%2Fconst-str-9.mm?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -5,10 +5,10 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n-@interface NSConstantString: Object {\n+@interface NSConstantString: NSObject {\n   char *cString;\n   unsigned int len;\n }"}, {"sha": "4a418fc92b1af0a16f6b3c5e54473ce574794ece", "filename": "gcc/testsuite/objc.dg/encode-7-next-64bit.m", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fencode-7-next-64bit.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -4,24 +4,25 @@\n /* { dg-require-effective-target lp64 } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-options \"-framework Foundation\" } */\n \n #include <stdbool.h>\n #include <string.h>\n #include <stdlib.h>\n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../objc-obj-c++-shared/runtime.h\"\n \n-#define CHECK_IF(E) if (!(E)) abort ()\n+extern int printf(char *,...);\n+void CHECK_IF(const char *s1, const char *s2)\n+{\n+ if (strcmp(s1,s2) != 0) {\n+ printf (\"'%s'\\n'%s'\\n\",s1,s2);\n+ abort ();\n+ }\n+}\n \n @class NSDictionary, NSFont, NSError, _NSATSTypesetterGuts, NSString, NSMenu, NSArray;\n \n-typedef unsigned char UInt8;\n-typedef const signed long OSStatus;\n-typedef unsigned long CFIndex;\n-typedef unsigned int UInt32;\n-typedef UInt32 FourCharCode;\n-typedef FourCharCode OSType;\n-\n struct FSRef {\n   UInt8 hidden[80];\n };\n@@ -99,10 +100,10 @@\n   unsigned int parameterMask;\n } NSErrorUserInfoFormatter;\n \n-typedef Object MyObj;\n-typedef Object *MyPtr;\n+typedef NSObject MyObj;\n+typedef NSObject *MyPtr;\n \n-@interface Foo: Object {\n+@interface Foo: NSObject {\n   NSATSGlyphStorageRun r;\n }\n - (NSError *)_errorWithOSStatus:(OSStatus)inOSStatus ref1:(const FSRef *)inRef1 ref2:(const struct FSRef *)inRef2\n@@ -114,7 +115,7 @@ - (const id)anotherMeth:(const SEL)sel and:(const Foo *)foo and:(const struct ob\n - (id)str1:(const char *)str1 str2:(char *)str2 str3:(char *const)str3 str4:(const char *const)str4;\n - (oneway void)foo1:(Foo *)foo1 foo2:(const Foo *)foo2 foo3:(Foo *const)foo3 foo4:(const Foo *const)foo4;\n - (in const char *)sel1:(const SEL)sel1 id1:(const id)id1;\n-- (inout id)obj1:(const MyPtr)obj1 obj2:(Object *const)obj2 obj3:(MyObj *const)obj3;\n+- (inout id)obj1:(const MyPtr)obj1 obj2:(NSObject *const)obj2 obj3:(MyObj *const)obj3;\n + (ComponentInstance)_defaultScriptingComponent;\n - (NSString *)_formatCocoaErrorString:(NSString *)formatString parameters:(const char *)parameters \n   applicableFormatters:(NSErrorUserInfoFormatter **)formatters count:(int)numFormatters;\n@@ -156,7 +157,7 @@ - (oneway void)foo1:(Foo *)foo1 foo2:(const Foo *)foo2 foo3:(Foo *const)foo3 foo\n - (in const char *)sel1:(const SEL)sel1 id1:(const id)id1 {\n   return \"Hello\";\n }  \n-- (inout id)obj1:(const MyPtr)obj1 obj2:(Object *const)obj2 obj3:(MyObj *const)obj3 {\n+- (inout id)obj1:(const MyPtr)obj1 obj2:(NSObject *const)obj2 obj3:(MyObj *const)obj3 {\n   return self;\n }\n + (ComponentInstance)_defaultScriptingComponent {\n@@ -191,6 +192,8 @@ + (BOOL)findVoiceByIdentifier:(NSString *)identifier returningCreator:(OSType *)\n }\n @end\n \n+/* FIXME: we produce different output c.f. the system compiler on OSX10.6+ */\n+\n int main(void) {\n   Class fooClass = objc_getClass (\"Foo\");\n   Method meth;\n@@ -199,72 +202,76 @@ int main(void) {\n   Ivar ivar;\n \n   meth = class_getInstanceMethod (fooClass, @selector(_errorWithOSStatus:ref1:ref2:reading:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding(meth), \"@44@0:8q16r^{FSRef=[80C]}24r^{FSRef=[80C]}32c40\"));\n+  CHECK_IF (method_getTypeEncoding(meth), \"@40@0:8i16r^{FSRef=[80C]}20r^{FSRef=[80C]}28c36\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(_attributeRunForCharacterAtIndex:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"r^{?=@@QQ^Qffff{_NSRect={_NSPoint=ff}{_NSSize=ff}}q^qQ^Q@@@:::****{?=b1b1b1b1b1b27}}24@0:8Q16\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"r^{?=@@qq^qffff{_NSRect={_NSPoint=ff}{_NSSize=ff}}q^qQ^Q@@@:::****{?=b1b1b1b1b1b27}}24@0:8q16\");\n+/* clang produces: r^{?=@@qq^qffff{_NSRect={_NSPoint=ff}{_NSSize=ff}}q^qQ^Q@@@::^{objc_selector}****{?=b1b1b1b1b1b27}}24@0:8q16 */\n \n   meth = class_getInstanceMethod (fooClass, @selector(_getATSTypesetterGuts:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"r@24@0:8r:16\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"r@24@0:8r:16\");\n+/* \"@24@0:8r^{objc_selector=}16\" */\n \n   meth = class_getInstanceMethod (fooClass, @selector(resumeWithSuspensionID:and:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"v32@0:8^{__NSAppleEventManagerSuspension=}16r^Q24\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"v32@0:8^{__NSAppleEventManagerSuspension=}16r^q24\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(anotherMeth:and:and:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"r@40@0:8r:16r@24r@32\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"r@40@0:8r:16r@24r@32\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(str1:str2:str3:str4:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"@48@0:8r*16*24*32r*40\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"@48@0:8r*16*24*32r*40\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(foo1:foo2:foo3:foo4:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"Vv48@0:8@16r@24@32r@40\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"Vv48@0:8@16r@24@32r@40\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(sel1:id1:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"rn*32@0:8r:16r@24\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"rn*32@0:8r:16r@24\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(obj1:obj2:obj3:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"N@40@0:8r@16@24^{Object=#}32\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"N@40@0:8r@16@24^{NSObject=#}32\");\n \n   meth = class_getClassMethod (fooClass, @selector(_defaultScriptingComponent));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"^{ComponentInstanceRecord=[1q]}16@0:8\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"^{ComponentInstanceRecord=[1q]}16@0:8\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(_formatCocoaErrorString:parameters:applicableFormatters:count:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"@44@0:8@16r*24^^{?}32i40\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"@44@0:8@16r*24^^{?}32i40\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(formatter_func:run:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"^{?=^?@I}32@0:8@16r^^{?}24\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"^{?=^?@I}32@0:8@16r^^{?}24\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(_forgetWord:inDictionary:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"c32@0:8nO@16nO@24\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"c32@0:8nO@16nO@24\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(_registerServicesMenu:withSendTypes:andReturnTypes:addToList:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"v44@0:8@16r^*24r^*32c40\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"v44@0:8@16r^*24r^*32c40\");\n \n   meth = class_getClassMethod (fooClass, @selector(_proxySharePointer));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"^^{__CFSet}16@0:8\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"^^{__CFSet}16@0:8\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(_checkGrammarInString:language:details:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"{_NSRange=II}40@0:8n@16nO@24oO^@32\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"{_NSRange=II}40@0:8n@16nO@24oO^@32\");\n \n   meth = class_getInstanceMethod (fooClass, @selector(_resolvePositionalStakeGlyphsForLineFragment:lineFragmentRect:minPosition:maxPosition:maxLineFragmentWidth:breakHint:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"B60@0:8^{__CTLine=}16{_NSRect={_NSPoint=ff}{_NSSize=ff}}24f40f44f48^Q52\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"B60@0:8^{__CTLine=}16{_NSRect={_NSPoint=ff}{_NSSize=ff}}24f40f44f48^q52\");\n \n   meth = class_getClassMethod (fooClass, @selector(findVoiceByIdentifier:returningCreator:returningID:));\n-  CHECK_IF (!strcmp (method_getTypeEncoding (meth), \"c40@0:8@16^I24^I32\"));\n+  CHECK_IF (method_getTypeEncoding (meth), \"c40@0:8@16^I24^I32\");\n \n   ivars = class_copyIvarList (fooClass, &ivar_count);\n-  CHECK_IF (ivar_count == 1);\n+  if (ivar_count != 1) {\n+    abort ();\n+  }\n \n   ivar = ivars[0];\n-  CHECK_IF (!strcmp (ivar_getName(ivar), \"r\"));\n-  CHECK_IF (!strcmp (ivar_getTypeEncoding(ivar),\n+  CHECK_IF (ivar_getName(ivar), \"r\");\n+  CHECK_IF (ivar_getTypeEncoding(ivar),\n    \"{?=\\\"_attributes\\\"@\\\"NSDictionary\\\"\\\"_font\\\"@\\\"NSFont\\\"\\\"_characterLength\\\"\"\n-    \"Q\\\"_nominalGlyphLocation\\\"Q\\\"p\\\"^Q\\\"_defaultLineHeight\\\"f\\\"_defaultBaselineOffset\\\"\"\n+    \"q\\\"_nominalGlyphLocation\\\"q\\\"p\\\"^q\\\"_defaultLineHeight\\\"f\\\"_defaultBaselineOffset\\\"\"\n     \"f\\\"_horizExpansion\\\"f\\\"_baselineDelta\\\"f\\\"_attachmentBBox\\\"{_NSRect=\\\"origin\\\"\"\n     \"{_NSPoint=\\\"x\\\"f\\\"y\\\"f}\\\"size\\\"{_NSSize=\\\"width\\\"f\\\"height\\\"f}}\\\"ll\\\"q\\\"llp\\\"^q\\\"ull\\\"\"\n     \"Q\\\"ullp\\\"^Q\\\"a\\\"@\\\"a1\\\"@\\\"a2\\\"@\\\"b\\\":\\\"b1\\\":\\\"b2\\\":\\\"str1\\\"*\\\"str2\\\"*\\\"str3\\\"*\\\"str4\\\"\"\n     \"*\\\"_rFlags\\\"{?=\\\"_isAttachmentRun\\\"b1\\\"_hasPositionalStake\\\"b1\\\"_isDefaultFace\\\"\"\n-    \"b1\\\"_hasCombiningMarks\\\"b1\\\"_isScreenFont\\\"b1\\\"_reserved\\\"b27}}\"));\n-\n+    \"b1\\\"_hasCombiningMarks\\\"b1\\\"_isScreenFont\\\"b1\\\"_reserved\\\"b27}}\");\n+/*\"{?=\\\"_attributes\\\"@\\\"NSDictionary\\\"\\\"_font\\\"@\\\"NSFont\\\"\\\"_characterLength\\\"q\\\"_nominalGlyphLocation\\\"q\\\"p\\\"^q\\\"_defaultLineHeight\\\"f\\\"_defaultBaselineOffset\\\"f\\\"_horizExpansion\\\"f\\\"_baselineDelta\\\"f\\\"_attachmentBBox\\\"{_NSRect=\\\"origin\\\"{_NSPoint=\\\"x\\\"f\\\"y\\\"f}\\\"size\\\"{_NSSize=\\\"width\\\"f\\\"height\\\"f}}\\\"ll\\\"q\\\"llp\\\"^q\\\"ull\\\"Q\\\"ullp\\\"^Q\\\"a\\\"@\\\"a1\\\"@\\\"a2\\\"@\\\"b\\\":\\\"b1\\\":\\\"b2\\\"^{objc_selector}\\\"str1\\\"*\\\"str2\\\"*\\\"str3\\\"*\\\"str4\\\"*\\\"_rFlags\\\"{?=\\\"_isAttachmentRun\\\"b1\\\"_hasPositionalStake\\\"b1\\\"_isDefaultFace\\\"b1\\\"_hasCombiningMarks\\\"b1\\\"_isScreenFont\\\"b1\\\"_reserved\\\"b27}}\"*/\n   return 0;\n }"}, {"sha": "09329130a7364fbbebeb938ea8519f1724ab143c", "filename": "gcc/testsuite/objc.dg/image-info.m", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fimage-info.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -7,20 +7,19 @@\n /* { dg-skip-if \"NeXT-only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-freplace-objc-classes\" } */\n \n-#include <objc/objc.h>\n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Object (TEST_SUITE_C1)\n+@interface NSObject (TEST_SUITE_C1)\n - init;\n @end\n-@implementation Object (TEST_SUITE_C1)\n+@implementation NSObject (TEST_SUITE_C1)\n - init {return self;}\n @end\n \n-@interface Base: Object {\n+@interface Base: NSObject {\n @public\n   int a;\n   float b;"}, {"sha": "a14c14d6d5c5a805a4fe956bfbfc8d0765af4e78", "filename": "gcc/testsuite/objc.dg/method-6.m", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fmethod-6.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -4,14 +4,21 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wstrict-selector-match\" } */\n \n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n+#include <objc/Object.h>\n #include <objc/Protocol.h>\n+#define OBJECT Object\n+#endif\n \n @interface Base\n - (unsigned)port;\n @end\n \n @interface Derived: Base\n-- (Object *)port;\n+- (OBJECT *)port;\n + (Protocol *)port;\n - (id)starboard;\n @end\n@@ -20,13 +27,13 @@ void foo(void) {\n   Class receiver;\n \n   [receiver port];  /* { dg-warning \"multiple methods named .\\\\+port. found\" } */\n-       /* { dg-message \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 10 } */\n-       /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 15 } */\n+       /* { dg-message \"using .\\\\-\\\\(unsigned( int)?\\\\)port.\" \"\" { target *-*-* } 17 } */\n+       /* { dg-message \"also found .\\\\+\\\\(Protocol \\\\*\\\\)port.\" \"\" { target *-*-* } 22 } */\n \n   [receiver starboard];  /* { dg-warning \"no .\\\\+starboard. method found\" } */\n-       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 26 } */\n-       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 26 } */\n-       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 26 } */\n+       /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 33 } */\n+       /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 33 } */\n+       /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 33 } */\n \n   [Class port];  /* { dg-error \".Class. is not an Objective\\\\-C class name or alias\" } */\n }"}, {"sha": "f5e1d74563d52f306b004a26bd4716f67255d0b5", "filename": "gcc/testsuite/objc.dg/no-extra-load.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fno-extra-load.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#import <Foundation/Foundation.h>\n+#include <Foundation/NSObject.h>\n main() { [NSObject new]; }\n \n /* { dg-final { scan-assembler-not \"L_objc_msgSend\\\\\\$non_lazy_ptr\" } } */"}, {"sha": "4d902f5588205b8c0faf0e9dcfa854efd36541a1", "filename": "gcc/testsuite/objc.dg/objc-foreach-4.m", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-foreach-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-foreach-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-foreach-4.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -1,17 +1,13 @@\n /* Test for valid objc objects used in a for-each statement. */\n /* FIXME: Run this test with the GNU runtime as well.  */\n-/* { dg-do compile { target *-*-darwin* } } */\n+/* { dg-do run { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-options \"-framework Foundation\" { target { *-*-darwin* } } } */\n \n-#include <objc/objc-api.h>\n-#include <Foundation/Foundation.h>\n-\n-#if defined (__NEXT_RUNTIME__) && defined (__LP64__)\n-/* Fudge the class reference until we implement the compiler-side \n-   const strings.  */\n-extern void *_NSConstantStringClassReference;\n-#endif\n+#include <Foundation/NSString.h>\n+#include <Foundation/NSAutoreleasePool.h>\n+#include <Foundation/NSArray.h>\n \n // gcc -o foo foo.m -framework Foundation\n "}, {"sha": "7113a7ac26266a3629a67962e4531e0eb44b2a63", "filename": "gcc/testsuite/objc.dg/objc-foreach-5.m", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-foreach-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-foreach-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fobjc-foreach-5.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -2,8 +2,10 @@\n /* { dg-do compile { target *-*-darwin* } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-skip-if \"No NeXT fast enum. pre-Darwin9\" { *-*-darwin[5-8]* } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-options \"-framework Foundation\" { target { *-*-darwin* } } } */\n \n-#import <Foundation/Foundation.h>\n+#include <Foundation/NSArray.h>\n+#include <Foundation/NSAutoreleasePool.h>\n \n NSArray * createTestVictim(unsigned capacity) {\n     NSMutableArray * arr = [[NSMutableArray alloc] initWithCapacity:capacity];"}, {"sha": "341a2837da5b9f45671a552c90a30dc379fcf29e", "filename": "gcc/testsuite/objc.dg/pr23214.m", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fpr23214.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -3,14 +3,24 @@\n \n /* { dg-do run } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-options \"-framework Foundation\" { target { { *-*-darwin* } && objc2 } } } */\n \n+#if defined (__NEXT_RUNTIME__) && defined(__OBJC2__) \\\n+    && defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) \\\n+    && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ >= 1070\n #include <objc/Protocol.h>\n- \n-@interface Object (TS_CAT)\n+#define OBJECT NSObject\n+#else\n+#include <objc/Object.h>\n+#define OBJECT Object\n+#include <objc/Protocol.h>\n+#endif\n+\n+@interface OBJECT (TS_CAT)\n - test;\n @end\n \n-@implementation Object (TS_CAT)\n+@implementation OBJECT (TS_CAT)\n - test { return self; }\n @end\n \n@@ -20,7 +30,7 @@ @protocol A\n @protocol B \n @end\n \n-@interface Dummy : Object <B>\n+@interface Dummy : OBJECT <B>\n @end\n \n int main ()"}, {"sha": "b32cfd8a0dd62403c06b3b3da167ca701bc5637a", "filename": "gcc/testsuite/objc.dg/proto-lossage-7.m", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproto-lossage-7.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -1,12 +1,19 @@\n /* Check that typedefs of ObjC classes preserve \n    any @protocol qualifiers.  */\n /* { dg-do compile } */\n+\n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n #include <objc/Object.h>\n+#define OBJECT Object\n+#endif\n \n @protocol CanDoStuff;\n \n-typedef Object<CanDoStuff> CanDoStuffType;\n-typedef Object<CanDoStuff> *CanDoStuffTypePtr;\n+typedef OBJECT<CanDoStuff> CanDoStuffType;\n+typedef OBJECT<CanDoStuff> *CanDoStuffTypePtr;\n \n @protocol CanDoStuff\n - (int) dostuff;"}, {"sha": "98bb7c5bddc1b57b5d696d580169bb1c32246694", "filename": "gcc/testsuite/objc.dg/strings/const-cfstring-5.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-cfstring-5.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -6,16 +6,16 @@\n /* { dg-skip-if \"NeXT only\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mconstant-cfstrings\" } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n \n-@interface Foo: Object {\n+@interface Foo: NSObject {\n   char *cString;\n   unsigned int len;\n }\n + (Foo *)description;\n @end\n \n-@interface Bar: Object\n+@interface Bar: NSObject\n + (Foo *) getString: (int) which;\n @end\n "}, {"sha": "d0dfb668ea93b666077eedf3ffc9cfcdd3858100", "filename": "gcc/testsuite/objc.dg/strings/const-str-12b.m", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fstrings%2Fconst-str-12b.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -5,17 +5,23 @@\n /* { dg-options \"-fconstant-string-class=Foo\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=Foo\" { target *-*-darwin* } } */\n \n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n #include <objc/Object.h>\n+#define OBJECT Object\n+#endif\n #include \"../../objc-obj-c++-shared/objc-test-suite-types.h\"\n \n-@interface Foo: Object {\n+@interface Foo: OBJECT {\n   char *cString;\n   unsigned int len;\n }\n + (id)description;\n @end\n \n-@interface Bar: Object\n+@interface Bar: OBJECT\n + (Foo *) getString: (int) which;\n @end\n "}, {"sha": "04d747dbce1650e0318cfbb634cedfd400a3887c", "filename": "gcc/testsuite/objc.dg/symtab-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fsymtab-1.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -4,9 +4,9 @@\n /* { dg-do compile { target { *-*-darwin* } } } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n \n-@interface Base: Object \n+@interface Base: NSObject \n - (void)setValues;\n @end\n "}, {"sha": "120bcd94c7bfff386b97da82ae2232e098d1012b", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-10.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-10.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -6,10 +6,10 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n-@interface NSString: Object\n+@interface NSString: NSObject\n @end\n \n @interface NSSimpleCString : NSString {"}, {"sha": "4c3f9eac893ebec626812108dba4daa08fd61484", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-11.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-11.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -7,10 +7,10 @@\n /* { dg-options \"-fconstant-string-class=XStr\" } */\n /* { dg-options \"-mno-constant-cfstrings -fconstant-string-class=XStr\" { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n-@interface XString: Object {\n+@interface XString: NSObject {\n @protected\n     char *bytes;\n }"}, {"sha": "d65aa01c044db8b5c8a128e093c37fb8a5ee897e", "filename": "gcc/testsuite/objc.dg/torture/strings/const-str-9.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fstrings%2Fconst-str-9.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -5,10 +5,10 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-mno-constant-cfstrings\" { target *-*-darwin* } } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n #include \"../../../objc-obj-c++-shared/runtime.h\" /* For NEXT_OBJC_USE_NEW_INTERFACE.  */\n \n-@interface NSConstantString: Object {\n+@interface NSConstantString: NSObject {\n   char *cString;\n   unsigned int len;\n }"}, {"sha": "812267bc376df32fe8b5fb24206494177f3d3ae0", "filename": "gcc/testsuite/objc.dg/zero-link-1.m", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-1.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -5,13 +5,12 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-fzero-link\" } */\n \n-#include <objc/Object.h>\n-#include <objc/objc.h>\n+#include <Foundation/NSObject.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Base: Object\n+@interface Base: NSObject\n + (int) getValue;\n @end\n "}, {"sha": "3bfe84d021d365de6b77c1e9098c8ac98ef10874", "filename": "gcc/testsuite/objc.dg/zero-link-2.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-2.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -5,12 +5,12 @@\n /* { dg-skip-if \"\" { *-*-* } { \"-fgnu-runtime\" } { \"\" } } */\n /* { dg-options \"-fno-zero-link\" } */\n \n-#include <objc/Object.h>\n+#include <Foundation/NSObject.h>\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Base: Object\n+@interface Base: NSObject\n + (int) getValue;\n @end\n "}, {"sha": "18f21db4e653d053123e374b361ccf7f7885c9cd", "filename": "gcc/testsuite/objc.dg/zero-link-3.m", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c858af58feeeb170eb8a1e88b4ea670de2e16f0/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fzero-link-3.m?ref=1c858af58feeeb170eb8a1e88b4ea670de2e16f0", "patch": "@@ -2,15 +2,23 @@\n /* Contributed by Ziemowit Laski <zlaski@apple.com>.  */\n \n /* { dg-do run { target *-*-darwin* } } */\n-/* { dg-options \"-fzero-link\" } */\n+/* { dg-additional-options \"-fzero-link\" } */\n+/* { dg-additional-options \"-framework Foundation\" { target { *-*-darwin* } } } */\n /* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n \n+#ifdef __NEXT_RUNTIME__\n+#include <Foundation/NSObject.h>\n+#define OBJECT NSObject\n+#else\n #include <objc/Object.h>\n+#include <objc/Protocol.h>\n+#define OBJECT Object\n+#endif\n \n extern void abort(void);\n #define CHECK_IF(expr) if(!(expr)) abort();\n \n-@interface Base: Object\n+@interface Base: OBJECT\n + (int) getValue;\n @end\n "}]}