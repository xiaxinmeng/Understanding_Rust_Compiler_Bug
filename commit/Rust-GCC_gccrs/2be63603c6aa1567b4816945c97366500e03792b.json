{"sha": "2be63603c6aa1567b4816945c97366500e03792b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJlNjM2MDNjNmFhMTU2N2I0ODE2OTQ1Yzk3MzY2NTAwZTAzNzkyYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-03-08T12:13:43Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-17T14:32:11Z"}, "message": "[Ada] Provide new function Uintp.UI_To_Unsigned_64\n\ngcc/ada/\n\n\t* uintp.ads, uintp.adb (UI_To_Unsigned_64): New.", "tree": {"sha": "92c3967a184ea3dd60c816766992f5fa44178f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92c3967a184ea3dd60c816766992f5fa44178f49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2be63603c6aa1567b4816945c97366500e03792b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be63603c6aa1567b4816945c97366500e03792b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2be63603c6aa1567b4816945c97366500e03792b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2be63603c6aa1567b4816945c97366500e03792b/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a76825d6c1f6667ac6a4d8cc4849d2426e107403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a76825d6c1f6667ac6a4d8cc4849d2426e107403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a76825d6c1f6667ac6a4d8cc4849d2426e107403"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "8183469ca9bfa98e9eae78cbda2d3c4fbdd133b7", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be63603c6aa1567b4816945c97366500e03792b/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be63603c6aa1567b4816945c97366500e03792b/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=2be63603c6aa1567b4816945c97366500e03792b", "patch": "@@ -2179,9 +2179,9 @@ package body Uintp is\n       end if;\n    end UI_To_CC;\n \n-   ----------------\n+   ---------------\n    -- UI_To_Int --\n-   ----------------\n+   ---------------\n \n    function UI_To_Int (Input : Uint) return Int is\n       pragma Assert (Input /= No_Uint);\n@@ -2230,6 +2230,46 @@ package body Uintp is\n       end if;\n    end UI_To_Int;\n \n+   -----------------\n+   -- UI_To_Uns64 --\n+   -----------------\n+\n+   function UI_To_Unsigned_64 (Input : Uint) return Unsigned_64 is\n+      pragma Assert (Input /= No_Uint);\n+\n+   begin\n+      if Input < Uint_0 then\n+         raise Constraint_Error;\n+      end if;\n+\n+      if Direct (Input) then\n+         return Unsigned_64 (Direct_Val (Input));\n+\n+      --  Case of input is more than one digit\n+\n+      else\n+         if Input >= Uint_2**Int'(64) then\n+            raise Constraint_Error;\n+         end if;\n+\n+         declare\n+            In_Length : constant Int := N_Digits (Input);\n+            In_Vec    : UI_Vector (1 .. In_Length);\n+            Ret_Int   : Unsigned_64 := 0;\n+\n+         begin\n+            Init_Operand (Input, In_Vec);\n+\n+            for Idx in In_Vec'Range loop\n+               Ret_Int :=\n+                 Ret_Int * Unsigned_64 (Base) + Unsigned_64 (In_Vec (Idx));\n+            end loop;\n+\n+            return Ret_Int;\n+         end;\n+      end if;\n+   end UI_To_Unsigned_64;\n+\n    --------------\n    -- UI_Write --\n    --------------"}, {"sha": "607e7ef95fa3056ad59027582f3738e336e1e97d", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2be63603c6aa1567b4816945c97366500e03792b/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2be63603c6aa1567b4816945c97366500e03792b/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=2be63603c6aa1567b4816945c97366500e03792b", "patch": "@@ -252,6 +252,11 @@ package Uintp is\n    --  Converts universal integer value to Int. Constraint_Error if value is\n    --  not in appropriate range.\n \n+   type Unsigned_64 is mod 2**64;\n+   function UI_To_Unsigned_64 (Input : Uint) return Unsigned_64;\n+   --  Converts universal integer value to Unsigned_64. Constraint_Error if\n+   --  value is not in appropriate range.\n+\n    function UI_To_CC (Input : Uint) return Char_Code;\n    --  Converts universal integer value to Char_Code. Constraint_Error if value\n    --  is not in Char_Code range."}]}