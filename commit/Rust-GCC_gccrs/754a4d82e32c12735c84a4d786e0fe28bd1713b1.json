{"sha": "754a4d82e32c12735c84a4d786e0fe28bd1713b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0YTRkODJlMzJjMTI3MzVjODRhNGQ3ODZlMGZlMjhiZDE3MTNiMQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-20T04:04:55Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-20T04:04:55Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1027", "tree": {"sha": "5828b605239145c8e5eceb606e705ca63c2d93cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5828b605239145c8e5eceb606e705ca63c2d93cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754a4d82e32c12735c84a4d786e0fe28bd1713b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754a4d82e32c12735c84a4d786e0fe28bd1713b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754a4d82e32c12735c84a4d786e0fe28bd1713b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754a4d82e32c12735c84a4d786e0fe28bd1713b1/comments", "author": null, "committer": null, "parents": [{"sha": "450446554518c3fb2b8aa64b41f8a11e9aca554b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/450446554518c3fb2b8aa64b41f8a11e9aca554b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/450446554518c3fb2b8aa64b41f8a11e9aca554b"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "53afdd07360125a5334c621072f1f5a49d237fd4", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a4d82e32c12735c84a4d786e0fe28bd1713b1/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a4d82e32c12735c84a4d786e0fe28bd1713b1/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=754a4d82e32c12735c84a4d786e0fe28bd1713b1", "patch": "@@ -1972,17 +1972,17 @@ convert_arguments (typelist, values, name)\n \n \t\t  if (TREE_CODE (type) != REAL_TYPE\n \t\t      && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n-\t\t    warning (\"floating argument converted to integer\");\n+\t\t    warn_for_assignment (\"%s as integer rather than floating due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t      && TREE_CODE (TREE_TYPE (val)) != REAL_TYPE)\n-\t\t    warning (\"integer argument converted to floating\");\n+\t\t    warn_for_assignment (\"%s as floating rather than integer due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t  else if (TREE_CODE (type) == REAL_TYPE\n \t\t\t   && TREE_CODE (TREE_TYPE (val)) == REAL_TYPE)\n \t\t    {\n \t\t      /* Warn if any argument is passed as `float',\n \t\t\t since without a prototype it would be `double'.  */\n \t\t      if (formal_prec == TYPE_PRECISION (float_type_node))\n-\t\t\twarning (\"floating argument passed as `float' rather than `double'\");\n+\t\t\twarn_for_assignment (\"%s as `float' rather than `double' due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t    }\n \t\t  /* Detect integer changing in width or signedness.  */\n \t\t  else if ((TREE_CODE (type) == INTEGER_TYPE\n@@ -1993,8 +1993,13 @@ convert_arguments (typelist, values, name)\n \t\t      tree would_have_been = default_conversion (val);\n \t\t      tree type1 = TREE_TYPE (would_have_been);\n \n-\t\t      if (formal_prec != TYPE_PRECISION (type))\n-\t\t\twarning (\"prototype changes width used for integer argument\");\n+\t\t      if (TREE_CODE (type) == ENUMERAL_TYPE\n+\t\t\t  && type == TREE_TYPE (val))\n+\t\t\t/* No warning if function asks for enum\n+\t\t\t   and the actual arg is that enum type.  */\n+\t\t\t;\n+\t\t      else if (formal_prec != TYPE_PRECISION (type1))\n+\t\t\twarn_for_assignment (\"%s with different width due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t      else if (TREE_UNSIGNED (type) == TREE_UNSIGNED (type1))\n \t\t\t;\n \t\t      else if (TREE_CODE (val) == INTEGER_CST\n@@ -2009,9 +2014,9 @@ convert_arguments (typelist, values, name)\n \t\t\t   if an enum value is unaffected.  */\n \t\t\t;\n \t\t      else if (TREE_UNSIGNED (type))\n-\t\t\twarning (\"argument passed as unsigned due to prototype\");\n+\t\t\twarn_for_assignment (\"%s as unsigned due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t      else\n-\t\t\twarning (\"argument passed as signed due to prototype\");\n+\t\t\twarn_for_assignment (\"%s as signed due to prototype\", (char *) 0, name, parmnum + 1);\n \t\t    }\n \t\t}\n "}]}