{"sha": "f790df6be014576524f55670a136eb622e595377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc5MGRmNmJlMDE0NTc2NTI0ZjU1NjcwYTEzNmViNjIyZTU5NTM3Nw==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2018-07-11T16:25:58Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2018-07-11T16:25:58Z"}, "message": "tree-ssa-threadupdate.c (thread_through_all_blocks): Do not jump thread twice from the same starting edge.\n\n        * tree-ssa-threadupdate.c (thread_through_all_blocks): Do not jump\n\tthread twice from the same starting edge.\n\nFrom-SVN: r262559", "tree": {"sha": "57bb8174db4eed98e1c999299ed25e43139a7969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57bb8174db4eed98e1c999299ed25e43139a7969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f790df6be014576524f55670a136eb622e595377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f790df6be014576524f55670a136eb622e595377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f790df6be014576524f55670a136eb622e595377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f790df6be014576524f55670a136eb622e595377/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "288aaa5f852b6f93078e15b7ac17af3b4930decd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288aaa5f852b6f93078e15b7ac17af3b4930decd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288aaa5f852b6f93078e15b7ac17af3b4930decd"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "ce4315b23acf7b6a9903cc308b3597aa4702cdf1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f790df6be014576524f55670a136eb622e595377/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f790df6be014576524f55670a136eb622e595377/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f790df6be014576524f55670a136eb622e595377", "patch": "@@ -1,3 +1,8 @@\n+2018-07-11  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * tree-ssa-threadupdate.c (thread_through_all_blocks): Do not jump\n+\tthread twice from the same starting edge.\n+\n 2018-07-11  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* vr-values.c (gimple_stmt_nonzero_p): Abstract common code to..."}, {"sha": "8080dff76d0800af8221ddbb6ec0c66a212ac458", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f790df6be014576524f55670a136eb622e595377/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f790df6be014576524f55670a136eb622e595377/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=f790df6be014576524f55670a136eb622e595377", "patch": "@@ -2428,6 +2428,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   unsigned int i;\n   struct loop *loop;\n   auto_bitmap threaded_blocks;\n+  hash_set<edge> visited_starting_edges;\n \n   if (!paths.exists ())\n     {\n@@ -2473,10 +2474,17 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \t  continue;\n \t}\n \n-      /* Do not jump-thread twice from the same block.  */\n-      if (bitmap_bit_p (threaded_blocks, entry->src->index)\n-\t  /* We may not want to realize this jump thread path\n-\t     for various reasons.  So check it first.  */\n+      /* Do not jump-thread twice from the same starting edge.\n+\n+\t Previously we only checked that we weren't threading twice\n+\t from the same BB, but that was too restrictive.  Imagine a\n+\t path that starts from GIMPLE_COND(x_123 == 0,...), where both\n+\t edges out of this conditional yield paths that can be\n+\t threaded (for example, both lead to an x_123==0 or x_123!=0\n+\t conditional further down the line.  */\n+      if (visited_starting_edges.contains (entry)\n+\t  /* We may not want to realize this jump thread path for\n+\t     various reasons.  So check it first.  */\n \t  || !valid_jump_thread_path (path))\n \t{\n \t  /* Remove invalid FSM jump-thread paths.  */\n@@ -2496,7 +2504,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \t{\n \t  /* We do not update dominance info.  */\n \t  free_dominance_info (CDI_DOMINATORS);\n-\t  bitmap_set_bit (threaded_blocks, entry->src->index);\n+\t  visited_starting_edges.add (entry);\n \t  retval = true;\n \t  thread_stats.num_threaded_edges++;\n \t}\n@@ -2514,7 +2522,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n       edge entry = (*path)[0]->e;\n \n       /* Do not jump-thread twice from the same block.  */\n-      if (bitmap_bit_p (threaded_blocks, entry->src->index))\n+      if (visited_starting_edges.contains (entry))\n \t{\n \t  delete_jump_thread_path (path);\n \t  paths.unordered_remove (i);\n@@ -2523,8 +2531,6 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \ti++;\n     }\n \n-  bitmap_clear (threaded_blocks);\n-\n   mark_threaded_blocks (threaded_blocks);\n \n   initialize_original_copy_tables ();"}]}