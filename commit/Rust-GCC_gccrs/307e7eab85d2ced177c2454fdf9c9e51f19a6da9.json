{"sha": "307e7eab85d2ced177c2454fdf9c9e51f19a6da9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3ZTdlYWI4NWQyY2VkMTc3YzI0NTRmZGY5YzllNTFmMTlhNmRhOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-04-29T10:55:25Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-04-29T10:55:25Z"}, "message": "bfin.c (bfin_optimize_loop): Unify handling of problematic last insns.\n\n\t* config/bfin/bfin.c (bfin_optimize_loop): Unify handling of\n\tproblematic last insns.  Test for TYPE_CALL rather than CALL_P.\n\tRemove special case testing for last insn of inner loops. Don't fail if\n\tthe loop ends with a jump, emit an extra nop instead.\n\nFrom-SVN: r146952", "tree": {"sha": "8420552b2acc6e4c396b99475fba77d7ea594f69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8420552b2acc6e4c396b99475fba77d7ea594f69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/307e7eab85d2ced177c2454fdf9c9e51f19a6da9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307e7eab85d2ced177c2454fdf9c9e51f19a6da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/307e7eab85d2ced177c2454fdf9c9e51f19a6da9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/307e7eab85d2ced177c2454fdf9c9e51f19a6da9/comments", "author": null, "committer": null, "parents": [{"sha": "9af094a198db7091b941610984126441ec78cf42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9af094a198db7091b941610984126441ec78cf42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9af094a198db7091b941610984126441ec78cf42"}], "stats": {"total": 59, "additions": 29, "deletions": 30}, "files": [{"sha": "39214fbc1728a14d4d583be6d2df73c5e7cc1568", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e7eab85d2ced177c2454fdf9c9e51f19a6da9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e7eab85d2ced177c2454fdf9c9e51f19a6da9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=307e7eab85d2ced177c2454fdf9c9e51f19a6da9", "patch": "@@ -1,3 +1,10 @@\n+2009-04-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\t\n+\t* config/bfin/bfin.c (bfin_optimize_loop): Unify handling of\n+\tproblematic last insns.  Test for TYPE_CALL rather than CALL_P.\n+\tRemove special case testing for last insn of inner loops. Don't fail if\n+\tthe loop ends with a jump, emit an extra nop instead.\n+\n 2009-04-29  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/39941"}, {"sha": "43682a3dd57cf69a633277e00cb8c33572c67e3b", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/307e7eab85d2ced177c2454fdf9c9e51f19a6da9/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/307e7eab85d2ced177c2454fdf9c9e51f19a6da9/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=307e7eab85d2ced177c2454fdf9c9e51f19a6da9", "patch": "@@ -3792,7 +3792,7 @@ bfin_optimize_loop (loop_info loop)\n {\n   basic_block bb;\n   loop_info inner;\n-  rtx insn, init_insn, last_insn, nop_insn;\n+  rtx insn, init_insn, last_insn;\n   rtx loop_init, start_label, end_label;\n   rtx reg_lc0, reg_lc1, reg_lt0, reg_lt1, reg_lb0, reg_lb1;\n   rtx iter_reg;\n@@ -4003,42 +4003,34 @@ bfin_optimize_loop (loop_info loop)\n       goto bad_loop;\n     }\n \n-  if (JUMP_P (last_insn))\n+  if (JUMP_P (last_insn) && !any_condjump_p (last_insn))\n     {\n-      loop_info inner = (loop_info) bb->aux;\n-      if (inner\n-\t  && inner->outer == loop\n-\t  && inner->loop_end == last_insn\n-\t  && inner->depth == 1)\n-\t/* This jump_insn is the exact loop_end of an inner loop\n-\t   and to be optimized away. So use the inner's last_insn.  */\n-\tlast_insn = inner->last_insn;\n-      else\n+      if (dump_file)\n+\tfprintf (dump_file, \";; loop %d has bad last instruction\\n\",\n+\t\t loop->loop_no);\n+      goto bad_loop;\n+    }\n+  /* In all other cases, try to replace a bad last insn with a nop.  */\n+  else if (JUMP_P (last_insn)\n+\t   || CALL_P (last_insn)\n+\t   || get_attr_type (last_insn) == TYPE_SYNC\n+\t   || get_attr_type (last_insn) == TYPE_CALL\n+\t   || get_attr_seq_insns (last_insn) == SEQ_INSNS_MULTI\n+\t   || recog_memoized (last_insn) == CODE_FOR_return_internal\n+\t   || GET_CODE (PATTERN (last_insn)) == ASM_INPUT\n+\t   || asm_noperands (PATTERN (last_insn)) >= 0)\n+    {\n+      if (loop->length + 2 > MAX_LOOP_LENGTH)\n \t{\n \t  if (dump_file)\n-\t    fprintf (dump_file, \";; loop %d has bad last instruction\\n\",\n-\t\t     loop->loop_no);\n+\t    fprintf (dump_file, \";; loop %d too long\\n\", loop->loop_no);\n \t  goto bad_loop;\n \t}\n-    }\n-  else if (CALL_P (last_insn)\n-\t   || (GET_CODE (PATTERN (last_insn)) != SEQUENCE\n-\t       && get_attr_type (last_insn) == TYPE_SYNC)\n-\t   || recog_memoized (last_insn) == CODE_FOR_return_internal)\n-    {\n       if (dump_file)\n-\tfprintf (dump_file, \";; loop %d has bad last instruction\\n\",\n+\tfprintf (dump_file, \";; loop %d has bad last insn; replace with nop\\n\",\n \t\t loop->loop_no);\n-      goto bad_loop;\n-    }\n \n-  if (GET_CODE (PATTERN (last_insn)) == ASM_INPUT\n-      || asm_noperands (PATTERN (last_insn)) >= 0\n-      || (GET_CODE (PATTERN (last_insn)) != SEQUENCE\n-\t  && get_attr_seq_insns (last_insn) == SEQ_INSNS_MULTI))\n-    {\n-      nop_insn = emit_insn_after (gen_nop (), last_insn);\n-      last_insn = nop_insn;\n+      last_insn = emit_insn_after (gen_forced_nop (), last_insn);\n     }\n \n   loop->last_insn = last_insn;\n@@ -4169,7 +4161,7 @@ bfin_optimize_loop (loop_info loop)\n \t    redirect_edge_succ (e, new_bb);\n \t}\n     }\n-  \n+\n   delete_insn (loop->loop_end);\n   /* Insert the loop end label before the last instruction of the loop.  */\n   emit_label_before (loop->end_label, loop->last_insn);"}]}