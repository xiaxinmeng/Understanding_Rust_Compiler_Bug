{"sha": "1a5c27b1b43a15ad7922311f00f0d176b580298e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE1YzI3YjFiNDNhMTVhZDc5MjIzMTFmMDBmMGQxNzZiNTgwMjk4ZQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-23T18:12:14Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-23T18:12:14Z"}, "message": "[ARM][GCC][12x]: MVE ACLE intrinsics to set and get vector lane.\n\nThis patch supports following MVE ACLE intrinsics to get and set vector lane.\n\nvsetq_lane_f16, vsetq_lane_f32, vsetq_lane_s16, vsetq_lane_s32, vsetq_lane_s8, vsetq_lane_s64, vsetq_lane_u8, vsetq_lane_u16, vsetq_lane_u32, vsetq_lane_u64, vgetq_lane_f16, vgetq_lane_f32, vgetq_lane_s16, vgetq_lane_s32, vgetq_lane_s8, vgetq_lane_s64, vgetq_lane_u8, vgetq_lane_u16, vgetq_lane_u32, vgetq_lane_u64.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm_mve.h (vsetq_lane_f16): Define macro.\n\t(vsetq_lane_f32): Likewise.\n\t(vsetq_lane_s16): Likewise.\n\t(vsetq_lane_s32): Likewise.\n\t(vsetq_lane_s8): Likewise.\n\t(vsetq_lane_s64): Likewise.\n\t(vsetq_lane_u8): Likewise.\n\t(vsetq_lane_u16): Likewise.\n\t(vsetq_lane_u32): Likewise.\n\t(vsetq_lane_u64): Likewise.\n\t(vgetq_lane_f16): Likewise.\n\t(vgetq_lane_f32): Likewise.\n\t(vgetq_lane_s16): Likewise.\n\t(vgetq_lane_s32): Likewise.\n\t(vgetq_lane_s8): Likewise.\n\t(vgetq_lane_s64): Likewise.\n\t(vgetq_lane_u8): Likewise.\n\t(vgetq_lane_u16): Likewise.\n\t(vgetq_lane_u32): Likewise.\n\t(vgetq_lane_u64): Likewise.\n\t(__ARM_NUM_LANES): Likewise.\n\t(__ARM_LANEQ): Likewise.\n\t(__ARM_CHECK_LANEQ): Likewise.\n\t(__arm_vsetq_lane_s16): Define intrinsic.\n\t(__arm_vsetq_lane_s32): Likewise.\n\t(__arm_vsetq_lane_s8): Likewise.\n\t(__arm_vsetq_lane_s64): Likewise.\n\t(__arm_vsetq_lane_u8): Likewise.\n\t(__arm_vsetq_lane_u16): Likewise.\n\t(__arm_vsetq_lane_u32): Likewise.\n\t(__arm_vsetq_lane_u64): Likewise.\n\t(__arm_vgetq_lane_s16): Likewise.\n\t(__arm_vgetq_lane_s32): Likewise.\n\t(__arm_vgetq_lane_s8): Likewise.\n\t(__arm_vgetq_lane_s64): Likewise.\n\t(__arm_vgetq_lane_u8): Likewise.\n\t(__arm_vgetq_lane_u16): Likewise.\n\t(__arm_vgetq_lane_u32): Likewise.\n\t(__arm_vgetq_lane_u64): Likewise.\n\t(__arm_vsetq_lane_f16): Likewise.\n\t(__arm_vsetq_lane_f32): Likewise.\n\t(__arm_vgetq_lane_f16): Likewise.\n\t(__arm_vgetq_lane_f32): Likewise.\n\t(vgetq_lane): Define polymorphic variant.\n\t(vsetq_lane): Likewise.\n\t* config/arm/mve.md (mve_vec_extract<mode><V_elem_l>): Define RTL\n\tpattern.\n\t(mve_vec_extractv2didi): Likewise.\n\t(mve_vec_extract_sext_internal<mode>): Likewise.\n\t(mve_vec_extract_zext_internal<mode>): Likewise.\n\t(mve_vec_set<mode>_internal): Likewise.\n\t(mve_vec_setv2di_internal): Likewise.\n\t* config/arm/neon.md (vec_set<mode>): Move RTL pattern to vec-common.md\n\tfile.\n\t(vec_extract<mode><V_elem_l>): Rename to\n\t\"neon_vec_extract<mode><V_elem_l>\".\n\t(vec_extractv2didi): Rename to \"neon_vec_extractv2didi\".\n\t* config/arm/vec-common.md (vec_extract<mode><V_elem_l>): Define RTL\n\tpattern common for MVE and NEON.\n\t(vec_set<mode>): Move RTL pattern from neon.md and modify to accept both\n\tMVE and NEON.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c: Likewise.", "tree": {"sha": "b53f366c8bf2eaedb8cc01f42e646fc09ccac87f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b53f366c8bf2eaedb8cc01f42e646fc09ccac87f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a5c27b1b43a15ad7922311f00f0d176b580298e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5c27b1b43a15ad7922311f00f0d176b580298e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5c27b1b43a15ad7922311f00f0d176b580298e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5c27b1b43a15ad7922311f00f0d176b580298e/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cd55f9d3afdc8d9220ef0cb20db61a3b86b4c8a"}], "stats": {"total": 894, "additions": 880, "deletions": 14}, "files": [{"sha": "f907c0e1b37da1eb52cec4d5aa6ae56aaf7c853c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -1,3 +1,69 @@\n+2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm_mve.h (vsetq_lane_f16): Define macro.\n+\t(vsetq_lane_f32): Likewise.\n+\t(vsetq_lane_s16): Likewise.\n+\t(vsetq_lane_s32): Likewise.\n+\t(vsetq_lane_s8): Likewise.\n+\t(vsetq_lane_s64): Likewise.\n+\t(vsetq_lane_u8): Likewise.\n+\t(vsetq_lane_u16): Likewise.\n+\t(vsetq_lane_u32): Likewise.\n+\t(vsetq_lane_u64): Likewise.\n+\t(vgetq_lane_f16): Likewise.\n+\t(vgetq_lane_f32): Likewise.\n+\t(vgetq_lane_s16): Likewise.\n+\t(vgetq_lane_s32): Likewise.\n+\t(vgetq_lane_s8): Likewise.\n+\t(vgetq_lane_s64): Likewise.\n+\t(vgetq_lane_u8): Likewise.\n+\t(vgetq_lane_u16): Likewise.\n+\t(vgetq_lane_u32): Likewise.\n+\t(vgetq_lane_u64): Likewise.\n+\t(__ARM_NUM_LANES): Likewise.\n+\t(__ARM_LANEQ): Likewise.\n+\t(__ARM_CHECK_LANEQ): Likewise.\n+\t(__arm_vsetq_lane_s16): Define intrinsic.\n+\t(__arm_vsetq_lane_s32): Likewise.\n+\t(__arm_vsetq_lane_s8): Likewise.\n+\t(__arm_vsetq_lane_s64): Likewise.\n+\t(__arm_vsetq_lane_u8): Likewise.\n+\t(__arm_vsetq_lane_u16): Likewise.\n+\t(__arm_vsetq_lane_u32): Likewise.\n+\t(__arm_vsetq_lane_u64): Likewise.\n+\t(__arm_vgetq_lane_s16): Likewise.\n+\t(__arm_vgetq_lane_s32): Likewise.\n+\t(__arm_vgetq_lane_s8): Likewise.\n+\t(__arm_vgetq_lane_s64): Likewise.\n+\t(__arm_vgetq_lane_u8): Likewise.\n+\t(__arm_vgetq_lane_u16): Likewise.\n+\t(__arm_vgetq_lane_u32): Likewise.\n+\t(__arm_vgetq_lane_u64): Likewise.\n+\t(__arm_vsetq_lane_f16): Likewise.\n+\t(__arm_vsetq_lane_f32): Likewise.\n+\t(__arm_vgetq_lane_f16): Likewise.\n+\t(__arm_vgetq_lane_f32): Likewise.\n+\t(vgetq_lane): Define polymorphic variant.\n+\t(vsetq_lane): Likewise.\n+\t* config/arm/mve.md (mve_vec_extract<mode><V_elem_l>): Define RTL\n+\tpattern.\n+\t(mve_vec_extractv2didi): Likewise.\n+\t(mve_vec_extract_sext_internal<mode>): Likewise.\n+\t(mve_vec_extract_zext_internal<mode>): Likewise.\n+\t(mve_vec_set<mode>_internal): Likewise.\n+\t(mve_vec_setv2di_internal): Likewise.\n+\t* config/arm/neon.md (vec_set<mode>): Move RTL pattern to vec-common.md\n+\tfile.\n+\t(vec_extract<mode><V_elem_l>): Rename to\n+\t\"neon_vec_extract<mode><V_elem_l>\".\n+\t(vec_extractv2didi): Rename to \"neon_vec_extractv2didi\".\n+\t* config/arm/vec-common.md (vec_extract<mode><V_elem_l>): Define RTL\n+\tpattern common for MVE and NEON.\n+\t(vec_set<mode>): Move RTL pattern from neon.md and modify to accept both\n+\tMVE and NEON.\n+\n 2020-03-23  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/mve.md (earlyclobber_32): New mode attribute."}, {"sha": "43520ee78e19f074912a6d965731465f1226986d", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -2506,8 +2506,40 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vld1q_z_f32(__base, __p) __arm_vld1q_z_f32(__base, __p)\n #define vst2q_f32(__addr, __value) __arm_vst2q_f32(__addr, __value)\n #define vst1q_p_f32(__addr, __value, __p) __arm_vst1q_p_f32(__addr, __value, __p)\n+#define vsetq_lane_f16(__a, __b,  __idx) __arm_vsetq_lane_f16(__a, __b,  __idx)\n+#define vsetq_lane_f32(__a, __b,  __idx) __arm_vsetq_lane_f32(__a, __b,  __idx)\n+#define vsetq_lane_s16(__a, __b,  __idx) __arm_vsetq_lane_s16(__a, __b,  __idx)\n+#define vsetq_lane_s32(__a, __b,  __idx) __arm_vsetq_lane_s32(__a, __b,  __idx)\n+#define vsetq_lane_s8(__a, __b,  __idx) __arm_vsetq_lane_s8(__a, __b,  __idx)\n+#define vsetq_lane_s64(__a, __b,  __idx) __arm_vsetq_lane_s64(__a, __b,  __idx)\n+#define vsetq_lane_u8(__a, __b,  __idx) __arm_vsetq_lane_u8(__a, __b,  __idx)\n+#define vsetq_lane_u16(__a, __b,  __idx) __arm_vsetq_lane_u16(__a, __b,  __idx)\n+#define vsetq_lane_u32(__a, __b,  __idx) __arm_vsetq_lane_u32(__a, __b,  __idx)\n+#define vsetq_lane_u64(__a, __b,  __idx) __arm_vsetq_lane_u64(__a, __b,  __idx)\n+#define vgetq_lane_f16(__a,  __idx) __arm_vgetq_lane_f16(__a,  __idx)\n+#define vgetq_lane_f32(__a,  __idx) __arm_vgetq_lane_f32(__a,  __idx)\n+#define vgetq_lane_s16(__a,  __idx) __arm_vgetq_lane_s16(__a,  __idx)\n+#define vgetq_lane_s32(__a,  __idx) __arm_vgetq_lane_s32(__a,  __idx)\n+#define vgetq_lane_s8(__a,  __idx) __arm_vgetq_lane_s8(__a,  __idx)\n+#define vgetq_lane_s64(__a,  __idx) __arm_vgetq_lane_s64(__a,  __idx)\n+#define vgetq_lane_u8(__a,  __idx) __arm_vgetq_lane_u8(__a,  __idx)\n+#define vgetq_lane_u16(__a,  __idx) __arm_vgetq_lane_u16(__a,  __idx)\n+#define vgetq_lane_u32(__a,  __idx) __arm_vgetq_lane_u32(__a,  __idx)\n+#define vgetq_lane_u64(__a,  __idx) __arm_vgetq_lane_u64(__a,  __idx)\n #endif\n \n+/* For big-endian, GCC's vector indices are reversed within each 64 bits\n+   compared to the architectural lane indices used by MVE intrinsics.  */\n+#define __ARM_NUM_LANES(__v) (sizeof (__v) / sizeof (__v[0]))\n+#ifdef __ARM_BIG_ENDIAN\n+#define __ARM_LANEQ(__vec, __idx) (__idx ^ (__ARM_NUM_LANES(__vec)/2 - 1))\n+#else\n+#define __ARM_LANEQ(__vec, __idx) __idx\n+#endif\n+#define __ARM_CHECK_LANEQ(__vec, __idx)\t\t \\\n+  __builtin_arm_lane_check (__ARM_NUM_LANES(__vec),     \\\n+\t\t\t    __ARM_LANEQ(__vec, __idx))\n+\n __extension__ extern __inline void\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n __arm_vst4q_s8 (int8_t * __addr, int8x16x4_t __value)\n@@ -16371,6 +16403,142 @@ __arm_vld4q_u32 (uint32_t const * __addr)\n   return __rv.__i;\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_s16 (int16_t __a, int16x8_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_s32 (int32_t __a, int32x4_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_s8 (int8_t __a, int8x16_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline int64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_s64 (int64_t __a, int64x2_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_u8 (uint8_t __a, uint8x16_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_u16 (uint16_t __a, uint16x8_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_u32 (uint32_t __a, uint32x4_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline uint64x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_u64 (uint64_t __a, uint64x2_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline int16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_s16 (int16x8_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_s32 (int32x4_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline int8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_s8 (int8x16_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_s64 (int64x2_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline uint8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_u8 (uint8x16_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline uint16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_u16 (uint16x8_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_u32 (uint32x4_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_u64 (uint64x2_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -19804,6 +19972,39 @@ __arm_vst1q_p_f32 (float32_t * __addr, float32x4_t __value, mve_pred16_t __p)\n   return vstrwq_p_f32 (__addr, __value, __p);\n }\n \n+__extension__ extern __inline float16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_f16 (float16_t __a, float16x8_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline float32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vsetq_lane_f32 (float32_t __a, float32x4_t __b, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__b, __idx);\n+  __b[__ARM_LANEQ(__b,__idx)] = __a;\n+  return __b;\n+}\n+\n+__extension__ extern __inline float16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_f16 (float16x8_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n+\n+__extension__ extern __inline float32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vgetq_lane_f32 (float32x4_t __a, const int __idx)\n+{\n+  __ARM_CHECK_LANEQ (__a, __idx);\n+  return __a[__ARM_LANEQ(__a,__idx)];\n+}\n #endif\n \n enum {\n@@ -23090,6 +23291,35 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16x8_t][__ARM_mve_type_float16x8_t]: __arm_vcmulq_rot90_x_f16 (__ARM_mve_coerce(__p1, float16x8_t), __ARM_mve_coerce(__p2, float16x8_t), p3), \\\n   int (*)[__ARM_mve_type_float32x4_t][__ARM_mve_type_float32x4_t]: __arm_vcmulq_rot90_x_f32 (__ARM_mve_coerce(__p1, float32x4_t), __ARM_mve_coerce(__p2, float32x4_t), p3));})\n \n+#define vgetq_lane(p0,p1) __arm_vgetq_lane(p0,p1)\n+#define __arm_vgetq_lane(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vgetq_lane_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vgetq_lane_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vgetq_lane_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vgetq_lane_s64 (__ARM_mve_coerce(__p0, int64x2_t), p1), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vgetq_lane_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vgetq_lane_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vgetq_lane_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vgetq_lane_u64 (__ARM_mve_coerce(__p0, uint64x2_t), p1), \\\n+  int (*)[__ARM_mve_type_float16x8_t]: __arm_vgetq_lane_f16 (__ARM_mve_coerce(__p0, float16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_float32x4_t]: __arm_vgetq_lane_f32 (__ARM_mve_coerce(__p0, float32x4_t), p1));})\n+\n+#define vsetq_lane(p0,p1,p2) __arm_vsetq_lane(p0,p1,p2)\n+#define __arm_vsetq_lane(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t][__ARM_mve_type_int8x16_t]: __arm_vsetq_lane_s8 (__ARM_mve_coerce(__p0, int8_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t][__ARM_mve_type_int16x8_t]: __arm_vsetq_lane_s16 (__ARM_mve_coerce(__p0, int16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32_t][__ARM_mve_type_int32x4_t]: __arm_vsetq_lane_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int64x2_t]: __arm_vsetq_lane_s64 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int64x2_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t][__ARM_mve_type_uint8x16_t]: __arm_vsetq_lane_u8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t][__ARM_mve_type_uint16x8_t]: __arm_vsetq_lane_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32_t][__ARM_mve_type_uint32x4_t]: __arm_vsetq_lane_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint64x2_t]: __arm_vsetq_lane_u64 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint64x2_t), p2), \\\n+  int (*)[__ARM_mve_type_float16_t][__ARM_mve_type_float16x8_t]: __arm_vsetq_lane_f16 (__ARM_mve_coerce(__p0, float16_t), __ARM_mve_coerce(__p1, float16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_float32_t][__ARM_mve_type_float32x4_t]: __arm_vsetq_lane_f32 (__ARM_mve_coerce(__p0, float32_t), __ARM_mve_coerce(__p1, float32x4_t), p2));})\n+\n #else /* MVE Integer.  */\n \n #define vstrwq_scatter_base_wb(p0,p1,p2) __arm_vstrwq_scatter_base_wb(p0,p1,p2)\n@@ -25885,6 +26115,31 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16_t_const_ptr]: __arm_vld4q_u16 (__ARM_mve_coerce(__p0, uint16_t const *)), \\\n   int (*)[__ARM_mve_type_uint32_t_const_ptr]: __arm_vld4q_u32 (__ARM_mve_coerce(__p0, uint32_t const *)));})\n \n+#define vgetq_lane(p0,p1) __arm_vgetq_lane(p0,p1)\n+#define __arm_vgetq_lane(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vgetq_lane_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vgetq_lane_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vgetq_lane_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_int64x2_t]: __arm_vgetq_lane_s64 (__ARM_mve_coerce(__p0, int64x2_t), p1), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vgetq_lane_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vgetq_lane_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vgetq_lane_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_uint64x2_t]: __arm_vgetq_lane_u64 (__ARM_mve_coerce(__p0, uint64x2_t), p1));})\n+\n+#define vsetq_lane(p0,p1,p2) __arm_vsetq_lane(p0,p1,p2)\n+#define __arm_vsetq_lane(p0,p1,p2) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t][__ARM_mve_type_int8x16_t]: __arm_vsetq_lane_s8 (__ARM_mve_coerce(__p0, int8_t), __ARM_mve_coerce(__p1, int8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_int16_t][__ARM_mve_type_int16x8_t]: __arm_vsetq_lane_s16 (__ARM_mve_coerce(__p0, int16_t), __ARM_mve_coerce(__p1, int16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_int32_t][__ARM_mve_type_int32x4_t]: __arm_vsetq_lane_s32 (__ARM_mve_coerce(__p0, int32_t), __ARM_mve_coerce(__p1, int32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_int64_t][__ARM_mve_type_int64x2_t]: __arm_vsetq_lane_s64 (__ARM_mve_coerce(__p0, int64_t), __ARM_mve_coerce(__p1, int64x2_t), p2), \\\n+  int (*)[__ARM_mve_type_uint8_t][__ARM_mve_type_uint8x16_t]: __arm_vsetq_lane_u8 (__ARM_mve_coerce(__p0, uint8_t), __ARM_mve_coerce(__p1, uint8x16_t), p2), \\\n+  int (*)[__ARM_mve_type_uint16_t][__ARM_mve_type_uint16x8_t]: __arm_vsetq_lane_u16 (__ARM_mve_coerce(__p0, uint16_t), __ARM_mve_coerce(__p1, uint16x8_t), p2), \\\n+  int (*)[__ARM_mve_type_uint32_t][__ARM_mve_type_uint32x4_t]: __arm_vsetq_lane_u32 (__ARM_mve_coerce(__p0, uint32_t), __ARM_mve_coerce(__p1, uint32x4_t), p2), \\\n+  int (*)[__ARM_mve_type_uint64_t][__ARM_mve_type_uint64x2_t]: __arm_vsetq_lane_u64 (__ARM_mve_coerce(__p0, uint64_t), __ARM_mve_coerce(__p1, uint64x2_t), p2));})\n+\n #endif /* MVE Integer.  */\n \n #define vmvnq_x(p1,p2) __arm_vmvnq_x(p1,p2)"}, {"sha": "e6b66eef3728122c87bd6ea68b8a643dd4552b00", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -129,6 +129,9 @@\n ;; Quad-width vector modes plus 64-bit elements.\n (define_mode_iterator VQX [V16QI V8HI V8HF V8BF V4SI V4SF V2DI])\n \n+;; Quad-width vector modes plus 64-bit elements.\n+(define_mode_iterator VQX_NOBF [V16QI V8HI V8HF V4SI V4SF V2DI])\n+\n ;; Quad-width vector modes plus 64-bit elements and V8BF.\n (define_mode_iterator VQXBF [V16QI V8HI V8HF (V8BF \"TARGET_BF16_SIMD\") V4SI V4SF V2DI])\n "}, {"sha": "f38514d906b71abcff652669fcfb9d6bfddcd355", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -411,6 +411,9 @@\n (define_mode_attr MVE_H_ELEM [ (V8HI \"V8HI\") (V4SI \"V4HI\")])\n (define_mode_attr V_sz_elem1 [(V16QI \"b\") (V8HI  \"h\") (V4SI \"w\") (V8HF \"h\")\n \t\t\t      (V4SF \"w\")])\n+(define_mode_attr V_extr_elem [(V16QI \"u8\") (V8HI \"u16\") (V4SI \"32\")\n+                              (V8HF \"u16\") (V4SF \"32\")])\n+\n (define_mode_attr earlyclobber_32 [(V16QI \"=w\") (V8HI \"=w\") (V4SI \"=&w\")\n \t\t\t\t\t\t(V8HF \"=w\") (V4SF \"=&w\")])\n \n@@ -10887,3 +10890,121 @@\n    return \"\";\n }\n   [(set_attr \"length\" \"16\")])\n+;;\n+;; [vgetq_lane_u, vgetq_lane_s, vgetq_lane_f])\n+;;\n+(define_insn \"mve_vec_extract<mode><V_elem_l>\"\n+ [(set (match_operand:<V_elem> 0 \"s_register_operand\" \"=r\")\n+   (vec_select:<V_elem>\n+    (match_operand:MVE_VLD_ST 1 \"s_register_operand\" \"w\")\n+    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])))]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      int elt = INTVAL (operands[2]);\n+      elt = GET_MODE_NUNITS (<MODE>mode) - 1 - elt;\n+      operands[2] = GEN_INT (elt);\n+    }\n+  return \"vmov.<V_extr_elem>\\t%0, %q1[%c2]\";\n+}\n+ [(set_attr \"type\" \"mve_move\")])\n+\n+(define_insn \"mve_vec_extractv2didi\"\n+ [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+   (vec_select:DI\n+    (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+    (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")])))]\n+  \"TARGET_HAVE_MVE\"\n+{\n+  int elt = INTVAL (operands[2]);\n+  if (BYTES_BIG_ENDIAN)\n+    elt = 1 - elt;\n+\n+  if (elt == 0)\n+   return \"vmov\\t%Q0, %R0, %e1\";\n+  else\n+   return \"vmov\\t%J0, %K0, %f1\";\n+}\n+ [(set_attr \"type\" \"mve_move\")])\n+\n+(define_insn \"*mve_vec_extract_sext_internal<mode>\"\n+ [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+   (sign_extend:SI\n+    (vec_select:<V_elem>\n+     (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+     (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      int elt = INTVAL (operands[2]);\n+      elt = GET_MODE_NUNITS (<MODE>mode) - 1 - elt;\n+      operands[2] = GEN_INT (elt);\n+    }\n+  return \"vmov.s<V_sz_elem>\\t%0, %q1[%c2]\";\n+}\n+ [(set_attr \"type\" \"mve_move\")])\n+\n+(define_insn \"*mve_vec_extract_zext_internal<mode>\"\n+ [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+   (zero_extend:SI\n+    (vec_select:<V_elem>\n+     (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+     (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      int elt = INTVAL (operands[2]);\n+      elt = GET_MODE_NUNITS (<MODE>mode) - 1 - elt;\n+      operands[2] = GEN_INT (elt);\n+    }\n+  return \"vmov.u<V_sz_elem>\\t%0, %q1[%c2]\";\n+}\n+ [(set_attr \"type\" \"mve_move\")])\n+\n+;;\n+;; [vsetq_lane_u, vsetq_lane_s, vsetq_lane_f])\n+;;\n+(define_insn \"mve_vec_set<mode>_internal\"\n+ [(set (match_operand:VQ2 0 \"s_register_operand\" \"=w\")\n+       (vec_merge:VQ2\n+\t(vec_duplicate:VQ2\n+\t  (match_operand:<V_elem> 1 \"nonimmediate_operand\" \"r\"))\n+\t(match_operand:VQ2 3 \"s_register_operand\" \"0\")\n+\t(match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+  \"(TARGET_HAVE_MVE && VALID_MVE_SI_MODE (<MODE>mode))\n+   || (TARGET_HAVE_MVE_FLOAT && VALID_MVE_SF_MODE (<MODE>mode))\"\n+{\n+  int elt = ffs ((int) INTVAL (operands[2])) - 1;\n+  if (BYTES_BIG_ENDIAN)\n+    elt = GET_MODE_NUNITS (<MODE>mode) - 1 - elt;\n+  operands[2] = GEN_INT (elt);\n+\n+  return \"vmov.<V_sz_elem>\\t%q0[%c2], %1\";\n+}\n+ [(set_attr \"type\" \"mve_move\")])\n+\n+(define_insn \"mve_vec_setv2di_internal\"\n+ [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+       (vec_merge:V2DI\n+\t(vec_duplicate:V2DI\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \"r\"))\n+\t(match_operand:V2DI 3 \"s_register_operand\" \"0\")\n+\t(match_operand:SI 2 \"immediate_operand\" \"i\")))]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  int elt = ffs ((int) INTVAL (operands[2])) - 1;\n+  if (BYTES_BIG_ENDIAN)\n+    elt = 1 - elt;\n+\n+  if (elt == 0)\n+   return \"vmov\\t%e0, %Q1, %R1\";\n+  else\n+   return \"vmov\\t%f0, %J1, %K1\";\n+}\n+ [(set_attr \"type\" \"mve_move\")])"}, {"sha": "3e7b51d8ab60007901392df0ca1cb09fead4d0e9", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -411,18 +411,6 @@\n   [(set_attr \"type\" \"neon_load1_all_lanes_q,neon_from_gp_q\")]\n )\n \n-(define_expand \"vec_set<mode>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\")\n-   (match_operand:<V_elem> 1 \"s_register_operand\")\n-   (match_operand:SI 2 \"immediate_operand\")]\n-  \"TARGET_NEON\"\n-{\n-  HOST_WIDE_INT elem = HOST_WIDE_INT_1 << INTVAL (operands[2]);\n-  emit_insn (gen_vec_set<mode>_internal (operands[0], operands[1],\n-\t\t\t\t\t GEN_INT (elem), operands[0]));\n-  DONE;\n-})\n-\n (define_insn \"vec_extract<mode><V_elem_l>\"\n   [(set (match_operand:<V_elem> 0 \"nonimmediate_operand\" \"=Um,r\")\n         (vec_select:<V_elem>\n@@ -445,7 +433,10 @@\n   [(set_attr \"type\" \"neon_store1_one_lane<q>,neon_to_gp<q>\")]\n )\n \n-(define_insn \"vec_extract<mode><V_elem_l>\"\n+;; This pattern is renamed from \"vec_extract<mode><V_elem_l>\" to\n+;; \"neon_vec_extract<mode><V_elem_l>\" and this pattern is called\n+;; by define_expand in vec-common.md file.\n+(define_insn \"neon_vec_extract<mode><V_elem_l>\"\n   [(set (match_operand:<V_elem> 0 \"nonimmediate_operand\" \"=Um,r\")\n \t(vec_select:<V_elem>\n           (match_operand:VQ2 1 \"s_register_operand\" \"w,w\")\n@@ -471,7 +462,9 @@\n   [(set_attr \"type\" \"neon_store1_one_lane<q>,neon_to_gp<q>\")]\n )\n \n-(define_insn \"vec_extractv2didi\"\n+;; This pattern is renamed from \"vec_extractv2didi\" to \"neon_vec_extractv2didi\"\n+;; and this pattern is called by define_expand in vec-common.md file.\n+(define_insn \"neon_vec_extractv2didi\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=Um,r\")\n \t(vec_select:DI\n           (match_operand:V2DI 1 \"s_register_operand\" \"w,w\")"}, {"sha": "b7e3619caf461063876654c54393d305147f7bf7", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -190,3 +190,36 @@\n   arm_expand_vec_perm (operands[0], operands[1], operands[2], operands[3]);\n   DONE;\n })\n+\n+(define_expand \"vec_extract<mode><V_elem_l>\"\n+ [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+  (match_operand:VQX_NOBF 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"immediate_operand\")]\n+ \"TARGET_NEON || TARGET_HAVE_MVE\"\n+{\n+  if (TARGET_NEON)\n+    emit_insn (gen_neon_vec_extract<mode><V_elem_l> (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2]));\n+  else if (TARGET_HAVE_MVE)\n+    emit_insn (gen_mve_vec_extract<mode><V_elem_l> (operands[0], operands[1],\n+\t\t\t\t\t\t     operands[2]));\n+  else\n+    gcc_unreachable ();\n+  DONE;\n+})\n+\n+(define_expand \"vec_set<mode>\"\n+  [(match_operand:VQX_NOBF 0 \"s_register_operand\" \"\")\n+   (match_operand:<V_elem> 1 \"s_register_operand\" \"\")\n+   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  \"TARGET_NEON || TARGET_HAVE_MVE\"\n+{\n+  HOST_WIDE_INT elem = HOST_WIDE_INT_1 << INTVAL (operands[2]);\n+  if (TARGET_NEON)\n+    emit_insn (gen_vec_set<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t   GEN_INT (elem), operands[0]));\n+  else\n+    emit_insn (gen_mve_vec_set<mode>_internal (operands[0], operands[1],\n+\t\t\t\t\t       GEN_INT (elem), operands[0]));\n+  DONE;\n+})"}, {"sha": "b97b3d2f22b0bcec981f7e35e74b07dd15b867ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -1,3 +1,28 @@\n+2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vgetq_lane_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c: Likewise.\n+\n 2020-03-23  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* jit.dg/all-non-failing-tests.h: Add test-long-string-literal.c."}, {"sha": "2a5aa63f4572a666e50d7825c8820d49eb9cd70e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_f16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f16.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16_t\n+foo (float16x8_t a)\n+{\n+  return vgetq_lane_f16 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.u16\"  }  } */\n+\n+float16_t\n+foo1 (float16x8_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.u16\"  }  } */"}, {"sha": "f1839cccffe1c34478f2372cd20b47761357b142", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_f32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_f32.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32_t\n+foo (float32x4_t a)\n+{\n+  return vgetq_lane_f32 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n+\n+float32_t\n+foo1 (float32x4_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */"}, {"sha": "ed1c2178839568dcc3eea3342606ba8eff57ea72", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s16.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16_t\n+foo (int16x8_t a)\n+{\n+  return vgetq_lane_s16 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.s16\"  }  } */\n+\n+int16_t\n+foo1 (int16x8_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.s16\"  }  } */"}, {"sha": "c87ed93e70def5bbf6b1055d99656f7386f97ea8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s32.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32_t\n+foo (int32x4_t a)\n+{\n+  return vgetq_lane_s32 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n+\n+int32_t\n+foo1 (int32x4_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */"}, {"sha": "a7457f86320b6277aba26236715a69bd05b60d89", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s64.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int64x2_t a)\n+{\n+  return vgetq_lane_s64 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler {vmov\\tr0, r1, d0}  }  } */\n+\n+int64_t\n+foo1 (int64x2_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler {vmov\\tr0, r1, d0}  }  } */"}, {"sha": "11242ff3bc090a11bf7f8f163f0348824158bed7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_s8.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8_t\n+foo (int8x16_t a)\n+{\n+  return vgetq_lane_s8 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.s8\"  }  } */\n+\n+int8_t\n+foo1 (int8x16_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.s8\"  }  } */"}, {"sha": "2788b585535c46a3271be65849b1ba058df1adcf", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u16.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16_t\n+foo (uint16x8_t a)\n+{\n+  return vgetq_lane_u16 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.u16\"  }  } */\n+\n+uint16_t\n+foo1 (uint16x8_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.u16\"  }  } */"}, {"sha": "721c5a5ffd77cd1ad038d44f32fa197fe2687311", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u32.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32_t\n+foo (uint32x4_t a)\n+{\n+  return vgetq_lane_u32 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n+\n+uint32_t\n+foo1 (uint32x4_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */"}, {"sha": "3cbbef520aee0731277883ae2449e9d2968c8683", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u64.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint64x2_t a)\n+{\n+  return vgetq_lane_u64 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler {vmov\\tr0, r1, d0}  }  } */\n+\n+uint64_t\n+foo1 (uint64x2_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler {vmov\\tr0, r1, d0}  }  } */"}, {"sha": "2bcaeac3fe1f5775f448d7f702ea139726fadcc3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vgetq_lane_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvgetq_lane_u8.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8_t\n+foo (uint8x16_t a)\n+{\n+  return vgetq_lane_u8 (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.u8\"  }  } */\n+\n+uint8_t\n+foo1 (uint8x16_t a)\n+{\n+  return vgetq_lane (a, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.u8\"  }  } */"}, {"sha": "e03e9620528b02d4e59d6365f0484c2478d70883", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_f16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f16.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16_t a, float16x8_t b)\n+{\n+    return vsetq_lane_f16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.16\"  }  } */\n+"}, {"sha": "2b9f1a7e6272629ef6310704a4769c478c7695fa", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_f32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_f32.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32_t a, float32x4_t b)\n+{\n+    return vsetq_lane_f32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n+"}, {"sha": "92ad0dd16a85d7b80645d9f54341dafbc760740b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s16.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16_t a, int16x8_t b)\n+{\n+    return vsetq_lane_s16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.16\"  }  } */\n+"}, {"sha": "e60c8f26700be36d299e2a2fd44a6224c39f02a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s32.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32_t a, int32x4_t b)\n+{\n+    return vsetq_lane_s32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n+"}, {"sha": "e487b73d417a2af5a35560fda19f0c40d05a4315", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s64.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64x2_t\n+foo (int64_t a, int64x2_t b)\n+{\n+    return vsetq_lane_s64 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler {vmov\\td0, r[1-9]*[0-9], r[1-9]*[0-9]}  }  } */\n+"}, {"sha": "d8ccbb524fd0bc2ffb6bd2fde3c27583fd0f4542", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_s8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_s8.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8_t a, int8x16_t b)\n+{\n+    return vsetq_lane_s8 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.8\"  }  } */\n+"}, {"sha": "156a5d1de1b51332b30cd818cabae6f89011cc12", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u16.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u16.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16_t a, uint16x8_t b)\n+{\n+    return vsetq_lane_u16 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.16\"  }  } */\n+"}, {"sha": "e9575483cc9b278268aa87238f27a8d743bb6398", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u32.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u32.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32_t a, uint32x4_t b)\n+{\n+    return vsetq_lane_u32 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.32\"  }  } */\n+"}, {"sha": "ae57b9c947c3e7ff878c9d6c36880dd42ebbe88d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u64.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u64.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64x2_t\n+foo (uint64_t a, uint64x2_t b)\n+{\n+    return vsetq_lane_u64 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler {vmov\\td0, r[1-9]*[0-9], r[1-9]*[0-9]}  }  } */\n+"}, {"sha": "668b3fea953f8144f797895376e3bb8a7a3e64d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsetq_lane_u8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a5c27b1b43a15ad7922311f00f0d176b580298e/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsetq_lane_u8.c?ref=1a5c27b1b43a15ad7922311f00f0d176b580298e", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-skip-if \"Incompatible float ABI\" { *-*-* } { \"-mfloat-abi=soft\" } {\"\"} } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8_t a, uint8x16_t b)\n+{\n+    return vsetq_lane_u8 (a, b, 0);\n+}\n+\n+/* { dg-final { scan-assembler \"vmov.8\"  }  } */\n+"}]}