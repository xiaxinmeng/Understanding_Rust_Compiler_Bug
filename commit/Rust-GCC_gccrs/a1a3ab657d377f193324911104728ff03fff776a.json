{"sha": "a1a3ab657d377f193324911104728ff03fff776a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhM2FiNjU3ZDM3N2YxOTMzMjQ5MTExMDQ3MjhmZjAzZmZmNzc2YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-11-27T21:46:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-11-27T21:46:32Z"}, "message": "i386.md (preferred_for_size): New attribute\n\n\t* config/i386/i386.md (preferred_for_size): New attribute\n\t(*pushxf): Split Yx*r constraints to r,*r.  Use preferred_for_size\n\tattribute to conditionally disable alternative 1.\n\t(*pushdf): Split Yd*r constraints to r,*r.  Use preferred_for_size\n\tand prefered_for_speed attributes to conditionally disable\n\talternative 1.\n\t(*movxf_internal): Split Yx*r constraints to r,*r.  Use\n\tpreferred_for_size attribute to conditionally disable\n\talternatives 3 and 4.\n\t(*movdf_internal): Split Yd*r constraints to r,*r.  Use\n\tpreferred_for_size and prefered_for_speed attributes to conditionally\n\tdisable alternatives 3 and 4.\n\t* config/i386/constraints.md (Yd, Yx): Remove register constraints.\n\nFrom-SVN: r218134", "tree": {"sha": "d29557af1f7ae48282ee15a275a97f85aee60ceb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29557af1f7ae48282ee15a275a97f85aee60ceb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a3ab657d377f193324911104728ff03fff776a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a3ab657d377f193324911104728ff03fff776a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a3ab657d377f193324911104728ff03fff776a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a3ab657d377f193324911104728ff03fff776a/comments", "author": null, "committer": null, "parents": [{"sha": "1a33633742ab03c950358ac987ff660c99620dcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a33633742ab03c950358ac987ff660c99620dcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a33633742ab03c950358ac987ff660c99620dcb"}], "stats": {"total": 150, "additions": 95, "deletions": 55}, "files": [{"sha": "242413c0f3cb6f3edf005639a7b48bb312823f76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a3ab657d377f193324911104728ff03fff776a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a3ab657d377f193324911104728ff03fff776a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1a3ab657d377f193324911104728ff03fff776a", "patch": "@@ -1,13 +1,29 @@\n+2014-11-27  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (preferred_for_size): New attribute\n+\t(*pushxf): Split Yx*r constraints to r,*r.  Use preferred_for_size\n+\tattribute to conditionally disable alternative 1.\n+\t(*pushdf): Split Yd*r constraints to r,*r.  Use preferred_for_size\n+\tand prefered_for_speed attributes to conditionally disable\n+\talternative 1.\n+\t(*movxf_internal): Split Yx*r constraints to r,*r.  Use\n+\tpreferred_for_size attribute to conditionally disable\n+\talternatives 3 and 4.\n+\t(*movdf_internal): Split Yd*r constraints to r,*r.  Use\n+\tpreferred_for_size and prefered_for_speed attributes to conditionally\n+\tdisable alternatives 3 and 4.\n+\t* config/i386/constraints.md (Yd, Yx): Remove register constraints.\n+\n 2014-11-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* dwarf2out.c (set_block_origin_self): Skip nested functions.\n \n 2014-11-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n-\t PR target/63833\n-\t * config/i386/i386.h (REAL_PIC_OFFSET_TABLE_REGNUM): Use\n-\t R15_REG for 64-bit.\n-\t * config/i386/rdos64.h (REAL_PIC_OFFSET_TABLE_REGNUM): Removed.\n+\tPR target/63833\n+\t* config/i386/i386.h (REAL_PIC_OFFSET_TABLE_REGNUM): Use\n+\tR15_REG for 64-bit.\n+\t* config/i386/rdos64.h (REAL_PIC_OFFSET_TABLE_REGNUM): Removed.\n \n 2014-11-27  Martin Liska  <mliska@suse.cz>\n \t    David Malcolm  <dmalcolm@redhat.com>"}, {"sha": "b7183a1a90fd7a7eac651559d4e9614452341a68", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a3ab657d377f193324911104728ff03fff776a/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a3ab657d377f193324911104728ff03fff776a/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=a1a3ab657d377f193324911104728ff03fff776a", "patch": "@@ -105,8 +105,6 @@\n ;;  n\tMMX inter-unit moves from MMX register enabled\n ;;  a\tInteger register when zero extensions with AND are disabled\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n-;;  d\tInteger register when integer DFmode moves are enabled\n-;;  x\tInteger register when integer XFmode moves are enabled\n ;;  f\tx87 register when 80387 floating point arithmetic is enabled\n \n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n@@ -137,15 +135,6 @@\n   ? NO_REGS : GENERAL_REGS\"\n  \"@internal Any integer register when zero extensions with AND are disabled.\")\n \n-(define_register_constraint \"Yd\"\n- \"TARGET_INTEGER_DFMODE_MOVES && optimize_function_for_speed_p (cfun)\n-  ? GENERAL_REGS : NO_REGS\"\n- \"@internal Any integer register when integer DFmode moves are enabled.\")\n-\n-(define_register_constraint \"Yx\"\n- \"optimize_function_for_speed_p (cfun) ? GENERAL_REGS : NO_REGS\"\n- \"@internal Any integer register when integer XFmode moves are enabled.\")\n-\n (define_register_constraint \"Yf\"\n  \"(ix86_fpmath & FPMATH_387) ? FLOAT_REGS : NO_REGS\"\n  \"@internal Any x87 register when 80387 FP arithmetic is enabled.\")"}, {"sha": "88435d6627b09af40cf52c457c0d590126a711e1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 75, "deletions": 40, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a3ab657d377f193324911104728ff03fff776a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a3ab657d377f193324911104728ff03fff776a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a1a3ab657d377f193324911104728ff03fff776a", "patch": "@@ -816,6 +816,7 @@\n \t]\n \t(const_int 1)))\n \n+(define_attr \"preferred_for_size\" \"\" (const_int 1))\n (define_attr \"preferred_for_speed\" \"\" (const_int 1))\n \n ;; Describe a user's asm statement.\n@@ -2811,22 +2812,26 @@\n })\n \n (define_insn \"*pushxf\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Yx*roF\"))]\n+  [(set (match_operand:XF 0 \"push_operand\" \"=<,<,<,<\")\n+\t(match_operand:XF 1 \"general_no_elim_operand\" \"f,r,*r,oF\"))]\n   \"\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n }\n   [(set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387,*\")\n+   (set_attr \"unit\" \"i387,*,*,*\")\n    (set (attr \"mode\")\n-\t(cond [(eq_attr \"alternative\" \"1\")\n+\t(cond [(eq_attr \"alternative\" \"1,2,3\")\n \t\t (if_then_else (match_test \"TARGET_64BIT\")\n \t\t   (const_string \"DI\")\n \t\t   (const_string \"SI\"))\n \t      ]\n-\t      (const_string \"XF\")))])\n+\t      (const_string \"XF\")))\n+   (set (attr \"preferred_for_size\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+              (symbol_ref \"false\")]\n+           (symbol_ref \"true\")))])\n \n ;; %%% Kill this when call knows how to work this out.\n (define_split\n@@ -2842,18 +2847,26 @@\n })\n \n (define_insn \"*pushdf\"\n-  [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<\")\n-\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,Yd*roF,rmF,x\"))]\n+  [(set (match_operand:DF 0 \"push_operand\" \"=<,<,<,<,<,<\")\n+\t(match_operand:DF 1 \"general_no_elim_operand\" \"f,r,*r,oF,rmF,x\"))]\n   \"\"\n {\n   /* This insn should be already split before reg-stack.  */\n   gcc_unreachable ();\n }\n-  [(set_attr \"isa\" \"*,nox64,x64,sse2\")\n+  [(set_attr \"isa\" \"*,nox64,nox64,nox64,x64,sse2\")\n    (set_attr \"type\" \"multi\")\n-   (set_attr \"unit\" \"i387,*,*,sse\")\n-   (set_attr \"mode\" \"DF,SI,DI,DF\")])\n-\n+   (set_attr \"unit\" \"i387,*,*,*,*,sse\")\n+   (set_attr \"mode\" \"DF,SI,SI,SI,DI,DF\")\n+   (set (attr \"preferred_for_size\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+              (symbol_ref \"false\")]\n+           (symbol_ref \"true\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+              (symbol_ref \"TARGET_INTEGER_DFMODE_MOVES\")]\n+           (symbol_ref \"true\")))])\n+   \n ;; %%% Kill this when call knows how to work this out.\n (define_split\n   [(set (match_operand:DF 0 \"push_operand\")\n@@ -3015,12 +3028,13 @@\n \t       ]\n \t       (const_string \"TI\")))])\n \n-;; Possible store forwarding (partial memory) stall in alternatives 4 and 5.\n+;; Possible store forwarding (partial memory) stall\n+;; in alternatives 4, 6, 7 and 8.\n (define_insn \"*movxf_internal\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\"\n-\t \"=f,m,f,?Yx*r ,!o   ,!o\")\n+\t \"=f,m,f,?r ,!o,?*r ,!o,!o,!o\")\n \t(match_operand:XF 1 \"general_operand\"\n-\t \"fm,f,G,Yx*roF,Yx*rF,Yx*rC\"))]\n+\t \"fm,f,G,roF,r , *roF,*r,F ,C\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3045,22 +3059,36 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"*,*,*,*,nox64,x64\")\n-   (set_attr \"type\" \"fmov,fmov,fmov,multi,multi,multi\")\n+  [(set (attr \"isa\")\n+\t(cond [(eq_attr \"alternative\" \"7\")\n+\t\t (const_string \"nox64\")\n+\t       (eq_attr \"alternative\" \"8\")\n+\t\t (const_string \"x64\")\n+\t      ]\n+\t      (const_string \"*\")))\n+   (set (attr \"type\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,8\")\n+\t\t (const_string \"multi\")\n+\t      ]\n+\t      (const_string \"fmov\")))\n    (set (attr \"mode\")\n-\t(cond [(eq_attr \"alternative\" \"3,4,5\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,8\")\n \t\t (if_then_else (match_test \"TARGET_64BIT\")\n \t\t   (const_string \"DI\")\n \t\t   (const_string \"SI\"))\n \t      ]\n-\t      (const_string \"XF\")))])\n-\n-;; Possible store forwarding (partial memory) stall in alternative 4.\n+\t      (const_string \"XF\")))\n+   (set (attr \"preferred_for_size\")\n+     (cond [(eq_attr \"alternative\" \"3,4\")\n+              (symbol_ref \"false\")]\n+           (symbol_ref \"true\")))])\n+   \n+;; Possible store forwarding (partial memory) stall in alternatives 4, 6 and 7.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-    \"=Yf*f,m   ,Yf*f,?Yd*r ,!o   ,?r,?m,?r,?r,v,v,v,m,*x,*x,*x,m ,r ,Yi\")\n+    \"=Yf*f,m   ,Yf*f,?r ,!o,?*r ,!o,!o,?r,?m,?r,?r,v,v,v,m,*x,*x,*x,m ,r ,Yi\")\n \t(match_operand:DF 1 \"general_operand\"\n-    \"Yf*fm,Yf*f,G   ,Yd*roF,Yd*rF,rm,rC,C ,F ,C,v,m,v,C ,*x,m ,*x,Yj,r\"))]\n+    \"Yf*fm,Yf*f,G   ,roF,r ,*roF,*r,F ,rm,rC,C ,F ,C,v,m,v,C ,*x,m ,*x,Yj,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3087,7 +3115,7 @@\n     case TYPE_IMOV:\n       if (get_attr_mode (insn) == MODE_SI)\n \treturn \"mov{l}\\t{%1, %k0|%k0, %1}\";\n-      else if (which_alternative == 8)\n+      else if (which_alternative == 11)\n \treturn \"movabs{q}\\t{%1, %0|%0, %1}\";\n       else\n \treturn \"mov{q}\\t{%1, %0|%0, %1}\";\n@@ -3133,31 +3161,31 @@\n     }\n }\n   [(set (attr \"isa\")\n-\t(cond [(eq_attr \"alternative\" \"3,4\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7\")\n \t\t (const_string \"nox64\")\n-\t       (eq_attr \"alternative\" \"5,6,7,8,17,18\")\n+\t       (eq_attr \"alternative\" \"8,9,10,11,20,21\")\n \t\t (const_string \"x64\")\n-\t       (eq_attr \"alternative\" \"9,10,11,12\")\n+\t       (eq_attr \"alternative\" \"12,13,14,15\")\n \t\t (const_string \"sse2\")\n \t      ]\n \t      (const_string \"*\")))\n    (set (attr \"type\")\n \t(cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"fmov\")\n-\t       (eq_attr \"alternative\" \"3,4\")\n+\t       (eq_attr \"alternative\" \"3,4,5,6,7\")\n \t\t (const_string \"multi\")\n-\t       (eq_attr \"alternative\" \"5,6,7,8\")\n+\t       (eq_attr \"alternative\" \"8,9,10,11\")\n \t\t (const_string \"imov\")\n-\t       (eq_attr \"alternative\" \"9,13\")\n+\t       (eq_attr \"alternative\" \"12,16\")\n \t\t (const_string \"sselog1\")\n \t      ]\n \t      (const_string \"ssemov\")))\n    (set (attr \"modrm\")\n-     (if_then_else (eq_attr \"alternative\" \"8\")\n+     (if_then_else (eq_attr \"alternative\" \"11\")\n        (const_string \"0\")\n        (const_string \"*\")))\n    (set (attr \"length_immediate\")\n-     (if_then_else (eq_attr \"alternative\" \"8\")\n+     (if_then_else (eq_attr \"alternative\" \"11\")\n        (const_string \"8\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n@@ -3171,13 +3199,13 @@\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"mode\")\n-\t(cond [(eq_attr \"alternative\" \"3,4,7\")\n+\t(cond [(eq_attr \"alternative\" \"3,4,5,6,7,10\")\n \t\t (const_string \"SI\")\n-\t       (eq_attr \"alternative\" \"5,6,8,17,18\")\n+\t       (eq_attr \"alternative\" \"8,9,11,20,21\")\n \t\t (const_string \"DI\")\n \n \t       /* xorps is one byte shorter for non-AVX targets.  */\n-\t       (eq_attr \"alternative\" \"9,13\")\n+\t       (eq_attr \"alternative\" \"12,16\")\n \t\t (cond [(not (match_test \"TARGET_SSE2\"))\n \t\t \t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_AVX512F\")\n@@ -3196,7 +3224,7 @@\n \t\t  chains, otherwise use short move to avoid extra work.  */\n \n \t       /* movaps is one byte shorter for non-AVX targets.  */\n-\t       (eq_attr \"alternative\" \"10,14\")\n+\t       (eq_attr \"alternative\" \"13,17\")\n \t\t (cond [(ior (match_operand 0 \"ext_sse_reg_operand\")\n \t\t\t     (match_operand 1 \"ext_sse_reg_operand\"))\n \t\t\t  (const_string \"V8DF\")\n@@ -3215,7 +3243,7 @@\n \t       /* For architectures resolving dependencies on register\n \t\t  parts we may avoid extra work to zero out upper part\n \t\t  of register.  */\n-\t       (eq_attr \"alternative\" \"11,15\")\n+\t       (eq_attr \"alternative\" \"14,18\")\n \t\t (cond [(not (match_test \"TARGET_SSE2\"))\n \t\t\t  (const_string \"V2SF\")\n \t\t\t(match_test \"TARGET_AVX\")\n@@ -3225,11 +3253,19 @@\n \t\t       ]\n \t\t       (const_string \"DF\"))\n \n-\t       (and (eq_attr \"alternative\" \"12,16\")\n+\t       (and (eq_attr \"alternative\" \"15,19\")\n \t\t    (not (match_test \"TARGET_SSE2\")))\n \t\t (const_string \"V2SF\")\n \t      ]\n-\t      (const_string \"DF\")))])\n+\t      (const_string \"DF\")))\n+   (set (attr \"preferred_for_size\")\n+     (cond [(eq_attr \"alternative\" \"3,4\")\n+              (symbol_ref \"false\")]\n+           (symbol_ref \"true\")))\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"3,4\")\n+              (symbol_ref \"TARGET_INTEGER_DFMODE_MOVES\")]\n+           (symbol_ref \"true\")))])\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n@@ -4858,8 +4894,7 @@\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"1\")\n               (symbol_ref \"TARGET_INTER_UNIT_CONVERSIONS\")]\n-           (symbol_ref \"true\")))\n-   ])\n+           (symbol_ref \"true\")))])\n \n (define_insn \"*float<SWI48x:mode><MODEF:mode>2_i387\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f\")"}]}