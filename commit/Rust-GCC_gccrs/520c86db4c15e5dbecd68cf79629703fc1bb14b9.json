{"sha": "520c86db4c15e5dbecd68cf79629703fc1bb14b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIwYzg2ZGI0YzE1ZTVkYmVjZDY4Y2Y3OTYyOTcwM2ZjMWJiMTRiOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-24T19:10:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-24T19:10:55Z"}, "message": "sse.md (sse4_1_<code>v8qiv8hi2<mask_name>): Limit first two alternatives to noavx...\n\n\t* config/i386/sse.md (sse4_1_<code>v8qiv8hi2<mask_name>): Limit\n\tfirst two alternatives to noavx, use *x instead of *v in the second\n\tone, add avx alternative without *.\n\t(sse4_1_<code>v4qiv4si2<mask_name>, sse4_1_<code>v4hiv4si2<mask_name>,\n\tsse4_1_<code>v2qiv2di2<mask_name>, sse4_1_<code>v2hiv2di2<mask_name>,\n\tsse4_1_<code>v2siv2di2<mask_name>): Likewise.\n\nFrom-SVN: r236659", "tree": {"sha": "cf423fd5ae14a32fe59ef3c9b46aeda324c59f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf423fd5ae14a32fe59ef3c9b46aeda324c59f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/520c86db4c15e5dbecd68cf79629703fc1bb14b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c86db4c15e5dbecd68cf79629703fc1bb14b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/520c86db4c15e5dbecd68cf79629703fc1bb14b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/520c86db4c15e5dbecd68cf79629703fc1bb14b9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a6f5ac7fd4bc1e1c8593bb78920a5918d9f6019f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f5ac7fd4bc1e1c8593bb78920a5918d9f6019f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f5ac7fd4bc1e1c8593bb78920a5918d9f6019f"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "f6bc9451c48470637e9835427c595b35b1edbd31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c86db4c15e5dbecd68cf79629703fc1bb14b9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c86db4c15e5dbecd68cf79629703fc1bb14b9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=520c86db4c15e5dbecd68cf79629703fc1bb14b9", "patch": "@@ -1,3 +1,12 @@\n+2016-05-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (sse4_1_<code>v8qiv8hi2<mask_name>): Limit\n+\tfirst two alternatives to noavx, use *x instead of *v in the second\n+\tone, add avx alternative without *.\n+\t(sse4_1_<code>v4qiv4si2<mask_name>, sse4_1_<code>v4hiv4si2<mask_name>,\n+\tsse4_1_<code>v2qiv2di2<mask_name>, sse4_1_<code>v2hiv2di2<mask_name>,\n+\tsse4_1_<code>v2siv2di2<mask_name>): Likewise.\n+\n 2016-05-24  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadbackwards.c (convert_and_register_jump_thread_path):"}, {"sha": "742c83ea13c07bbe52f16283bceb750c758c7859", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/520c86db4c15e5dbecd68cf79629703fc1bb14b9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/520c86db4c15e5dbecd68cf79629703fc1bb14b9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=520c86db4c15e5dbecd68cf79629703fc1bb14b9", "patch": "@@ -14748,19 +14748,20 @@\n    (set_attr \"mode\" \"XI\")])\n \n (define_insn \"sse4_1_<code>v8qiv8hi2<mask_name>\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*v\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V8HI\n \t  (vec_select:V8QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512bw_condition> && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>bw\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"<mask_codefor>avx512f_<code>v16qiv16si2<mask_name>\"\n@@ -14790,17 +14791,18 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v4qiv4si2<mask_name>\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*v\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n \t  (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>bd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx512f_<code>v16hiv16si2<mask_name>\"\n@@ -14825,17 +14827,18 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v4hiv4si2<mask_name>\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*v\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V4SI\n \t  (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n+\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>wd\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx512f_<code>v8qiv8di2<mask_name>\"\n@@ -14868,16 +14871,17 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v2qiv2di2<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %w1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx512f_<code>v8hiv8di2<mask_name>\"\n@@ -14905,16 +14909,17 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v2hiv2di2<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n+\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx512f_<code>v8siv8di2<mask_name>\"\n@@ -14939,16 +14944,17 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v2siv2di2<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n-  [(set_attr \"type\" \"ssemov\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n+   (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; ptestps/ptestpd are very similar to comiss and ucomiss when"}]}