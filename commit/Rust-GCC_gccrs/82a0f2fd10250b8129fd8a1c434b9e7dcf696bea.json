{"sha": "82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhMGYyZmQxMDI1MGI4MTI5ZmQ4YTFjNDM0YjllN2RjZjY5NmJlYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-10-16T16:12:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-10-16T16:12:32Z"}, "message": "Use autoconf to check for features needed by Networking TS\n\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* configure.ac: Check for headers used by Networking TS.\n\t* include/experimental/executor: Include <condition_variable>\n\tinstead of <mutex>.\n\t* include/experimental/internet: Use autoconf macros for available\n\theaders.  Include <sys/socket.h> for.  Remove <cstring> and use\n\t__builtin_memcpy and __builtin_strchr.\n\t(resolver_errc) [!_GLIBCXX_HAVE_NETDB_H]: Do not define.\n\t(address_v4::to_string, address_v6::to_string)\n\t[!_GLIBCXX_HAVE_ARPA_INET_H]: Likewise.\n\t(basic_resolver_results) [!_GLIBCXX_HAVE_NETDB_H]: Make private\n\tconstructors report errors.\n\t[!_GLIBCXX_HAVE_NETINET_TCP_H] (tcp::no_delay): Do not define.\n\t* include/experimental/io_context: Likewise.\n\t* include/experimental/socket: Likewise.\n\t[!_GLIBCXX_HAVE_SYS_SOCKET_H, !_GLIBCXX_HAVE_POLL_H] (socket_base): Do\n\tnot define nested types when relevant header not available.\n\t(__socket_impl::native_non_blocking) [!_GLIBCXX_HAVE_FCNTL_H]: Report\n\tan error.\n\t(__basic_socket_impl::open, __basic_socket_impl::local_endpoint)\n\t(__basic_socket_impl::bind) [!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n\t(__basic_socket_impl::io_control) [!_GLIBCXX_HAVE_SYS_IOCTL_H]:\n\tLikewise.\n\t(basic_socket::at_mark, basic_socket::shutdown)\n\t(basic_socket::remote_endpoint, basic_socket::connect)\n\t(basic_socket::async_connect) [!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n\t(basic_socket::available) [_GLIBCXX_HAVE_SYS_IOCTL_H]: Check macro\n\tfor <sys/ioctl.h> availability.\n\t(basic_socket::wait) [!_GLIBCXX_HAVE_POLL_H]: Likewise.\n\t(basic_datagram_socket::receive, basic_datagram_socket::async_receive)\n\t(basic_datagram_socket::receive_from)\n\t(basic_datagram_socket::async_receive_from)\n\t(basic_datagram_socket::send, basic_datagram_socket::async_send)\n\t(basic_datagram_socket::send_to, basic_datagram_socket::async_send_to)\n\t[!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n\t(basic_stream_socket::receive, basic_stream_socket::async_receive)\n\t(basic_stream_socket::send, basic_stream_socket::async_send)\n\t[!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n\t(basic_socket_acceptor::listen, basic_socket_acceptor::accept)\n\t(basic_socket_acceptor::async_accept) [!_GLIBCXX_HAVE_SYS_SOCKET_H]:\n\tLikewise.\n\t(basic_socket_acceptor::wait) [!_GLIBCXX_HAVE_POLL_H]: Likewise.\n\nFrom-SVN: r265203", "tree": {"sha": "64a5b23a49d4ebab3d743e62d8590714e1ab6489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a5b23a49d4ebab3d743e62d8590714e1ab6489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e8b87e9011d5928a16bfe89cdb40df472b3b925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e8b87e9011d5928a16bfe89cdb40df472b3b925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e8b87e9011d5928a16bfe89cdb40df472b3b925"}], "stats": {"total": 326, "additions": 290, "deletions": 36}, "files": [{"sha": "681e88cb3a284e1bf84528a6fd7e802d54ca1335", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -1,5 +1,49 @@\n 2018-10-16  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Check for headers used by Networking TS.\n+\t* include/experimental/executor: Include <condition_variable>\n+\tinstead of <mutex>.\n+\t* include/experimental/internet: Use autoconf macros for available\n+\theaders.  Include <sys/socket.h> for.  Remove <cstring> and use\n+\t__builtin_memcpy and __builtin_strchr.\n+\t(resolver_errc) [!_GLIBCXX_HAVE_NETDB_H]: Do not define.\n+\t(address_v4::to_string, address_v6::to_string)\n+\t[!_GLIBCXX_HAVE_ARPA_INET_H]: Likewise.\n+\t(basic_resolver_results) [!_GLIBCXX_HAVE_NETDB_H]: Make private\n+\tconstructors report errors.\n+\t[!_GLIBCXX_HAVE_NETINET_TCP_H] (tcp::no_delay): Do not define.\n+\t* include/experimental/io_context: Likewise.\n+\t* include/experimental/socket: Likewise.\n+\t[!_GLIBCXX_HAVE_SYS_SOCKET_H, !_GLIBCXX_HAVE_POLL_H] (socket_base): Do\n+\tnot define nested types when relevant header not available.\n+\t(__socket_impl::native_non_blocking) [!_GLIBCXX_HAVE_FCNTL_H]: Report\n+\tan error.\n+\t(__basic_socket_impl::open, __basic_socket_impl::local_endpoint)\n+\t(__basic_socket_impl::bind) [!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n+\t(__basic_socket_impl::io_control) [!_GLIBCXX_HAVE_SYS_IOCTL_H]:\n+\tLikewise.\n+\t(basic_socket::at_mark, basic_socket::shutdown)\n+\t(basic_socket::remote_endpoint, basic_socket::connect)\n+\t(basic_socket::async_connect) [!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n+\t(basic_socket::available) [_GLIBCXX_HAVE_SYS_IOCTL_H]: Check macro\n+\tfor <sys/ioctl.h> availability.\n+\t(basic_socket::wait) [!_GLIBCXX_HAVE_POLL_H]: Likewise.\n+\t(basic_datagram_socket::receive, basic_datagram_socket::async_receive)\n+\t(basic_datagram_socket::receive_from)\n+\t(basic_datagram_socket::async_receive_from)\n+\t(basic_datagram_socket::send, basic_datagram_socket::async_send)\n+\t(basic_datagram_socket::send_to, basic_datagram_socket::async_send_to)\n+\t[!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n+\t(basic_stream_socket::receive, basic_stream_socket::async_receive)\n+\t(basic_stream_socket::send, basic_stream_socket::async_send)\n+\t[!_GLIBCXX_HAVE_SYS_SOCKET_H]: Likewise.\n+\t(basic_socket_acceptor::listen, basic_socket_acceptor::accept)\n+\t(basic_socket_acceptor::async_accept) [!_GLIBCXX_HAVE_SYS_SOCKET_H]:\n+\tLikewise.\n+\t(basic_socket_acceptor::wait) [!_GLIBCXX_HAVE_POLL_H]: Likewise.\n+\n \t* testsuite/experimental/net/headers.cc: Remove dg-options.\n \t* testsuite/experimental/net/buffer/arithmetic.cc: Replace dg-options\n \twith dg-do using effective target."}, {"sha": "fa69b7a08955b55651106ab97ae3add9f63a58c9", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -9,6 +9,9 @@\n /* Define to 1 if you have the `aligned_alloc' function. */\n #undef HAVE_ALIGNED_ALLOC\n \n+/* Define to 1 if you have the <arpa/inet.h> header file. */\n+#undef HAVE_ARPA_INET_H\n+\n /* Define to 1 if you have the `asinf' function. */\n #undef HAVE_ASINF\n \n@@ -318,6 +321,15 @@\n /* Define to 1 if you have the <nan.h> header file. */\n #undef HAVE_NAN_H\n \n+/* Define to 1 if you have the <netdb.h> header file. */\n+#undef HAVE_NETDB_H\n+\n+/* Define to 1 if you have the <netinet/in.h> header file. */\n+#undef HAVE_NETINET_IN_H\n+\n+/* Define to 1 if you have the <netinet/tcp.h> header file. */\n+#undef HAVE_NETINET_TCP_H\n+\n /* Define if <math.h> defines obsolete isinf function. */\n #undef HAVE_OBSOLETE_ISINF\n \n@@ -327,6 +339,9 @@\n /* Define if poll is available in <poll.h>. */\n #undef HAVE_POLL\n \n+/* Define to 1 if you have the <poll.h> header file. */\n+#undef HAVE_POLL_H\n+\n /* Define to 1 if you have the `posix_memalign' function. */\n #undef HAVE_POSIX_MEMALIGN\n \n@@ -448,6 +463,9 @@\n /* Define to 1 if you have the <sys/sem.h> header file. */\n #undef HAVE_SYS_SEM_H\n \n+/* Define to 1 if you have the <sys/socket.h> header file. */\n+#undef HAVE_SYS_SOCKET_H\n+\n /* Define to 1 if you have the <sys/statvfs.h> header file. */\n #undef HAVE_SYS_STATVFS_H\n "}, {"sha": "12a6d4cf0efbaf6f1e0e49330630f47fc5336d35", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -80699,6 +80699,22 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n   fi\n \n \n+# For Networking TS.\n+for ac_header in fcntl.h sys/ioctl.h sys/socket.h sys/uio.h poll.h netdb.h arpa/inet.h netinet/in.h netinet/tcp.h\n+do :\n+  as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\n+eval as_val=\\$$as_ac_Header\n+   if test \"x$as_val\" = x\"\"yes; then :\n+  cat >>confdefs.h <<_ACEOF\n+#define `$as_echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+\n # For Transactional Memory TS\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking how size_t is mangled\" >&5"}, {"sha": "dbb7dbc137cfd31b893aa8c4e33c19372771d8fc", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -423,6 +423,9 @@ AC_CHECK_HEADERS([fcntl.h dirent.h sys/statvfs.h utime.h])\n GLIBCXX_ENABLE_FILESYSTEM_TS\n GLIBCXX_CHECK_FILESYSTEM_DEPS\n \n+# For Networking TS.\n+AC_CHECK_HEADERS([fcntl.h sys/ioctl.h sys/socket.h sys/uio.h poll.h netdb.h arpa/inet.h netinet/in.h netinet/tcp.h])\n+\n # For Transactional Memory TS\n GLIBCXX_CHECK_SIZE_T_MANGLING\n "}, {"sha": "db8df4b871bbbc6bea5b258353ed74930d1a307b", "filename": "libstdc++-v3/include/experimental/executor", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -34,10 +34,10 @@\n #if __cplusplus >= 201402L\n \n #include <algorithm>\n+#include <condition_variable>\n #include <functional>\n #include <future>\n #include <list>\n-#include <mutex>\n #include <queue>\n #include <thread>\n #include <tuple>"}, {"sha": "402a0474a9534dc01e28b1fba4a74aeeb0523fa0", "filename": "libstdc++-v3/include/experimental/internet", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Finternet?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -34,19 +34,28 @@\n #if __cplusplus >= 201402L\n \n #include <experimental/netfwd>\n+#include <experimental/io_context>\n+#include <experimental/bits/net.h>\n #include <array>\n #include <forward_list>\n #include <sstream>\n-#include <typeinfo>\n-#include <cstring>\n #include <cstdint>\n-#include <experimental/io_context>\n-#include <experimental/bits/net.h>\n #include <experimental/string_view>\n-#include <unistd.h>\n-#include <arpa/inet.h>\n-#include <netinet/tcp.h>\n-#include <netdb.h>\n+#ifdef _GLIBCXX_HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n+# include <sys/socket.h>\t// AF_INET, AF_INET6, SOCK_DGRAM, SOCK_STREAM\n+#endif\n+#ifdef _GLIBCXX_HAVE_ARPA_INET_H\n+# include <arpa/inet.h>\t\t// inet_ntop\n+#endif\n+#ifdef _GLIBCXX_HAVE_NETINET_TCP_H\n+# include <netinet/tcp.h>\t// TCP_NODELAY\n+#endif\n+#ifdef _GLIBCXX_HAVE_NETDB_H\n+# include <netdb.h>\t\t// getaddrinfo etc.\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -65,6 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    * @{\n    */\n \n+#ifdef _GLIBCXX_HAVE_NETDB_H\n   /** Error codes for resolver errors.\n    * @{\n    */\n@@ -95,6 +105,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return error_condition(static_cast<int>(__e), resolver_category()); }\n \n   /// @}\n+#endif\n \n   typedef uint_least16_t port_type;\t///< Type used for port numbers.\n   typedef uint_least32_t scope_id_type;\t///< Type used for IPv6 scope IDs.\n@@ -182,6 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     constexpr uint_type to_uint() const noexcept { return _S_ntoh(_M_addr); }\n \n+#ifdef _GLIBCXX_HAVE_ARPA_INET_H\n     template<typename _Allocator = allocator<char>>\n       __string_with<_Allocator>\n       to_string(const _Allocator& __a = _Allocator()) const\n@@ -194,6 +206,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __str.resize(0);\n \treturn __str;\n       }\n+#endif\n \n     // static members:\n     static constexpr address_v4 any() noexcept { return address_v4{}; }\n@@ -321,6 +334,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     constexpr bytes_type to_bytes() const noexcept { return _M_bytes; }\n \n+#ifdef _GLIBCXX_HAVE_ARPA_INET_H\n     template<typename _Allocator = allocator<char>>\n       __string_with<_Allocator>\n       to_string(const _Allocator& __a = _Allocator()) const\n@@ -333,21 +347,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __str.resize(0);\n \treturn __str;\n       }\n+#endif\n \n     // static members:\n     static constexpr address_v6\n     any() noexcept\n     {\n       address_v6 __addr;\n-      std::memcpy(&__addr._M_bytes, in6addr_any.s6_addr, 16);\n+      __builtin_memcpy(&__addr._M_bytes, in6addr_any.s6_addr, 16);\n       return __addr;\n     }\n \n     static constexpr address_v6\n     loopback() noexcept\n     {\n       address_v6 __addr;\n-      std::memcpy(&__addr._M_bytes, in6addr_loopback.s6_addr, 16);\n+      __builtin_memcpy(&__addr._M_bytes, in6addr_loopback.s6_addr, 16);\n       return __addr;\n     }\n \n@@ -717,7 +732,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline address_v6\n   make_address_v6(const char* __str, error_code& __ec) noexcept\n   {\n-    auto __p = std::strchr(__str, '%');\n+    auto __p = __builtin_strchr(__str, '%');\n     if (__p == nullptr)\n       return __make_address_v6(__str, nullptr, __ec);\n     char __buf[64];\n@@ -1400,8 +1415,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_data._M_v6 = {};\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n \t    _M_data._M_v6.sin6_port = address_v4::_S_hton(__port_num);\n-\t    std::memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n-\t\t\t__addr._M_v6._M_bytes.data(), 16);\n+\t    __builtin_memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n+\t\t\t     __addr._M_v6._M_bytes.data(), 16);\n \t    _M_data._M_v6.sin6_scope_id = __addr._M_v6._M_scope_id;\n \t  }\n       }\n@@ -1419,14 +1434,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tip::address __addr;\n \tif (protocol().family() == AF_INET6)\n \t  {\n-\t    std::memcpy(&__addr._M_v6._M_bytes,\n-\t\t\t_M_data._M_v6.sin6_addr.s6_addr, 16);\n+\t    __builtin_memcpy(&__addr._M_v6._M_bytes,\n+\t\t\t     _M_data._M_v6.sin6_addr.s6_addr, 16);\n \t    __addr._M_is_v4 = false;\n \t  }\n \telse\n \t  {\n-\t    std::memcpy(&__addr._M_v4._M_addr,\n-\t\t\t&_M_data._M_v4.sin_addr.s_addr, 4);\n+\t    __builtin_memcpy(&__addr._M_v4._M_addr,\n+\t\t\t     &_M_data._M_v4.sin_addr.s_addr, 4);\n \t  }\n \treturn __addr;\n       }\n@@ -1438,8 +1453,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    _M_data._M_v6 = {};\n \t    _M_data._M_v6.sin6_family = protocol_type::v6().family();\n-\t    std::memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n-\t\t\t__addr._M_v6._M_bytes.data(), 16);\n+\t    __builtin_memcpy(_M_data._M_v6.sin6_addr.s6_addr,\n+\t\t\t     __addr._M_v6._M_bytes.data(), 16);\n \t    _M_data._M_v6.sin6_scope_id = __addr._M_v6._M_scope_id;\n \t  }\n \telse\n@@ -1660,7 +1675,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   operator^=(resolver_base::flags& __f1, resolver_base::flags __f2)\n   { return __f1 = (__f1 ^ __f2); }\n \n-  // TODO define resolver_base::flags static constants\n+  // TODO define resolver_base::flags static constants for C++14 mode\n \n   // @}\n \n@@ -1898,6 +1913,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t   resolver_base::flags __f, error_code& __ec,\n \t\t\t   protocol_type* __protocol)\n     {\n+#ifdef _GLIBCXX_HAVE_NETDB_H\n       string __host;\n       const char* __h = __host_name.data()\n \t? (__host = __host_name.to_string()).c_str()\n@@ -1943,19 +1959,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__ai->ai_family == AF_INET || __ai->ai_family == AF_INET6)\n \t    {\n \t      if (__ai->ai_addrlen <= __ep.capacity())\n-\t\tstd::memcpy(__ep.data(), __ai->ai_addr, __ai->ai_addrlen);\n+\t\t__builtin_memcpy(__ep.data(), __ai->ai_addr, __ai->ai_addrlen);\n \t      __ep.resize(__ai->ai_addrlen);\n \t      __tail = _M_results.emplace_after(__tail, __ep, __host, __svc);\n \t      _M_size++;\n \t    }\n \t}\n+#else\n+      __ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n     }\n \n   /// Private constructor to synchronously resolve an endpoint.\n   template<typename _InternetProtocol>\n     basic_resolver_results<_InternetProtocol>::\n     basic_resolver_results(const endpoint_type& __ep, error_code& __ec)\n     {\n+#ifdef _GLIBCXX_HAVE_NETDB_H\n       char __host_name[256];\n       char __service_name[128];\n       int __flags = 0;\n@@ -1982,6 +2002,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_results.emplace_front(__ep, __host_name, __service_name);\n \t  _M_size = 1;\n \t}\n+#else\n+      __ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n     }\n \n   /** The name of the local host.\n@@ -2030,6 +2053,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typedef basic_socket_acceptor<tcp> acceptor; ///< A TCP acceptor.\n     typedef basic_socket_iostream<tcp> iostream; /// A TCP iostream.\n \n+#ifdef _GLIBCXX_HAVE_NETINET_TCP_H\n     /// Disable coalescing of small segments (i.e. the Nagle algorithm).\n     struct no_delay : __sockopt_crtp<no_delay, bool>\n     {\n@@ -2038,6 +2062,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static const int _S_level = IPPROTO_TCP;\n       static const int _S_name = TCP_NODELAY;\n     };\n+#endif\n \n     // static members:\n "}, {"sha": "b8d231f7e683da263246b44b9d6a9aa9359a93ba", "filename": "libstdc++-v3/include/experimental/io_context", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fio_context?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -41,9 +41,15 @@\n #include <thread>\n #include <experimental/netfwd>\n #include <experimental/executor>\n-#include <unistd.h>\n-#include <poll.h>\n-#include <fcntl.h>\n+#if _GLIBCXX_HAVE_UNISTD_H\n+# include <unistd.h>\n+#endif\n+#ifdef _GLIBCXX_HAVE_POLL_H\n+# include <poll.h>\n+#endif\n+#ifdef _GLIBCXX_HAVE_FCNTL_H\n+# include <fcntl.h>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -775,6 +781,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_notify();\n       }\n \n+# ifdef _GLIBCXX_HAVE_POLL_H\n       using __fdvec = vector<::pollfd>;\n \n       // Find first element p such that !(p.fd < __fd)\n@@ -823,6 +830,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       __fdvec _M_fds;\t// _M_fds.back() is the read end of the self-pipe\n+#endif\n       int _M_notify_wr;\t// write end of the self-pipe\n     };\n "}, {"sha": "e903eb824b28b8632e1ea0fdbe16d0536cddeb83", "filename": "libstdc++-v3/include/experimental/socket", "status": "modified", "additions": 151, "deletions": 11, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82a0f2fd10250b8129fd8a1c434b9e7dcf696bea/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fsocket?ref=82a0f2fd10250b8129fd8a1c434b9e7dcf696bea", "patch": "@@ -42,11 +42,21 @@\n #include <bits/unique_ptr.h>\n #if _GLIBCXX_HAVE_UNISTD_H\n # include <unistd.h>\n-# include <sys/socket.h>\n-# include <sys/ioctl.h>\n-# include <sys/fcntl.h>\n-# include <sys/uio.h>\n-# include <poll.h>\n+# ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n+#  include <sys/socket.h>\t// socket etc\n+# endif\n+# ifdef _GLIBCXX_HAVE_SYS_IOCTL_H\n+#  include <sys/ioctl.h>\t// ioctl\n+# endif\n+# ifdef _GLIBCXX_HAVE_SYS_UIO_H\n+#  include <sys/uio.h>\t\t// iovec\n+# endif\n+# ifdef _GLIBCXX_HAVE_POLL_H\n+#  include <poll.h>\t\t// poll, pollfd, POLLIN, POLLOUT, POLLERR\n+# endif\n+# ifdef _GLIBCXX_HAVE_FCNTL_H\n+#  include <fcntl.h>\t\t// fcntl, F_GETFL, F_SETFL\n+# endif\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -139,6 +149,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class socket_base\n   {\n   public:\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n     struct broadcast : __sockopt_crtp<broadcast, bool>\n     {\n       using __sockopt_crtp::__sockopt_crtp;\n@@ -261,6 +272,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static constexpr shutdown_type shutdown_send\t= __shutdown_send;\n     static constexpr shutdown_type shutdown_both\t= __shutdown_both;\n \n+#ifdef _GLIBCXX_HAVE_POLL_H\n     enum wait_type : int\n     {\n       __wait_read\t\t= POLLIN,\n@@ -270,6 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static constexpr wait_type wait_read\t\t= __wait_read;\n     static constexpr wait_type wait_write\t\t= __wait_write;\n     static constexpr wait_type wait_error\t\t= __wait_error;\n+#endif\n \n     enum message_flags : int\n     {\n@@ -282,11 +295,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static constexpr message_flags message_do_not_route\t= __message_dontroute;\n \n     static const int max_listen_connections = SOMAXCONN;\n+#endif\n \n   protected:\n     socket_base() = default;\n     ~socket_base() = default;\n \n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n     struct __msg_hdr : ::msghdr\n     {\n #ifdef IOV_MAX\n@@ -342,6 +357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->msg_namelen = __ep.size();\n \t}\n     };\n+#endif\n   };\n \n   constexpr socket_base::message_flags\n@@ -440,6 +456,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     native_non_blocking(bool __mode, error_code& __ec)\n     {\n+#ifdef _GLIBCXX_HAVE_FCNTL_H\n       int __flags = ::fcntl(_M_sockfd, F_GETFL, 0);\n       if (__flags >= 0)\n \t{\n@@ -456,11 +473,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __ec.clear();\n \t  _M_bits.native_non_blocking = __mode;\n \t}\n+#else\n+      __ec = std::make_error_code(std::errc::not_supported);\n+#endif\n     }\n \n     bool\n     native_non_blocking() const\n     {\n+#ifdef _GLIBCXX_HAVE_FCNTL_H\n       if (_M_bits.native_non_blocking == -1)\n \t{\n \t  const int __flags = ::fcntl(_M_sockfd, F_GETFL, 0);\n@@ -469,6 +490,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_bits.native_non_blocking = __flags & O_NONBLOCK;\n \t}\n       return _M_bits.native_non_blocking;\n+#else\n+      return false;\n+#endif\n     }\n \n     io_context*\t_M_ctx;\n@@ -517,6 +541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       open(const protocol_type& __protocol, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (is_open())\n \t  __ec = socket_errc::already_open;\n \telse\n@@ -532,6 +557,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    else\n \t      __ec.assign(errno, std::generic_category());\n \t  }\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       void\n@@ -588,18 +616,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tvoid\n \tio_control(_IoControlCommand& __command, error_code& __ec)\n \t{\n-\t  int __result = ::ioctl(_M_sockfd, __command.name(_M_protocol),\n-\t\t\t\t __command.data(_M_protocol));\n+#ifdef _GLIBCXX_HAVE_SYS_IOCTL_H\n+\t  int __result = ::ioctl(_M_sockfd, __command.name(),\n+\t\t\t\t __command.data());\n \t  if (__result == -1)\n \t    __ec.assign(errno, generic_category());\n \t  else\n \t    __ec.clear();\n+#else\n+\t  __ec = std::make_error_code(std::errc::not_supported);\n+#endif\n \t}\n \n       endpoint_type\n       local_endpoint(error_code& __ec) const\n       {\n \tendpoint_type __endpoint;\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tsocklen_t __endpoint_len = __endpoint.capacity();\n \tif (::getsockname(_M_sockfd, (sockaddr*)__endpoint.data(),\n                           &__endpoint_len) == -1)\n@@ -609,17 +642,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t__ec.clear();\n \t__endpoint.resize(__endpoint_len);\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \treturn __endpoint;\n       }\n \n       void\n       bind(const endpoint_type& __endpoint, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (::bind(_M_sockfd, (sockaddr*)__endpoint.data(), __endpoint.size())\n \t    == -1)\n \t  __ec.assign(errno, generic_category());\n \telse\n \t  __ec.clear();\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       _Protocol\t_M_protocol{ endpoint_type{}.protocol() };\n@@ -754,6 +794,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       at_mark(error_code& __ec) const\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tconst int __result = ::sockatmark(native_handle());\n \tif (__result == -1)\n \t  {\n@@ -762,6 +803,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t__ec.clear();\n \treturn (bool)__result;\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+\treturn false;\n+#endif\n       }\n \n       size_t\n@@ -776,7 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    __ec = std::make_error_code(errc::bad_file_descriptor);\n \t    return 0;\n \t  }\n-#ifdef FIONREAD\n+#if defined _GLIBCXX_HAVE_SYS_IOCTL_H && defined FIONREAD\n \tint __avail = 0;\n \tif (::ioctl(this->_M_sockfd, FIONREAD, &__avail) == -1)\n \t  {\n@@ -804,10 +849,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       shutdown(shutdown_type __what, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (::shutdown(native_handle(), static_cast<int>(__what)) == -1)\n \t  __ec.assign(errno, generic_category());\n \telse\n \t  __ec.clear();\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       endpoint_type\n@@ -832,6 +881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       remote_endpoint(error_code& __ec) const\n       {\n \tendpoint_type __endpoint;\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tsocklen_t __endpoint_len = __endpoint.capacity();\n \tif (::getpeername(this->_M_sockfd, (sockaddr*)__endpoint.data(),\n                           &__endpoint_len)\n@@ -842,6 +892,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n \t__ec.clear();\n \t__endpoint.resize(__endpoint_len);\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \treturn __endpoint;\n       }\n \n@@ -860,11 +913,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    if (__ec)\n \t      return;\n \t  }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (::connect(native_handle(), (const sockaddr*)__endpoint.data(),\n \t\t      __endpoint.size()) == -1)\n \t  __ec.assign(errno, generic_category());\n \telse\n \t  __ec.clear();\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       template<typename _CompletionToken>\n@@ -898,9 +955,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                __ep = std::move(__endpoint),\n                __fd = native_handle()]\n                (error_code __ec) mutable {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   if (!__ec && ::connect(__fd, (const sockaddr*)__ep.data(),\n \t\t\t\t\t __ep.size()) == -1)\n                     __ec.assign(errno, generic_category());\n+#else\n+\t\t  __ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \t\t  __h(__ec);\n \t      });\n \t  return __init.result.get();\n@@ -913,6 +974,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       wait(wait_type __w, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_POLL_H\n \t::pollfd __fd;\n \t__fd.fd = native_handle();\n \t__fd.events = static_cast<int>(__w);\n@@ -921,6 +983,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  __ec.assign(errno, generic_category());\n \telse\n \t  __ec.clear();\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       template<typename _CompletionToken>\n@@ -1060,6 +1125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treceive(const _MutableBufferSequence& __buffers,\n \t\tsocket_base::message_flags __flags, error_code& __ec)\n \t{\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t  socket_base::__msg_hdr __msg(__buffers);\n \t  ssize_t __result = ::recvmsg(this->native_handle(), &__msg,\n \t\t\t\t       static_cast<int>(__flags));\n@@ -1070,6 +1136,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n             }\n           __ec.clear();\n           return __result;\n+#else\n+\t  __ec = std::make_error_code(errc::operation_not_supported);\n+\t  return 0;\n+#endif\n \t}\n \n       template<typename _MutableBufferSequence, typename _CompletionToken>\n@@ -1101,6 +1171,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec);\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   socket_base::__msg_hdr __msg(__buffers);\n                   ssize_t __result = ::recvmsg(__fd, &__msg, __flags);\n                   if (__result == -1)\n@@ -1111,6 +1182,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                   else\n                     __ec.clear();\n \t\t  __h(__ec, __result);\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -1153,6 +1227,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t     socket_base::message_flags __flags,\n \t\t     error_code& __ec)\n \t{\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t  socket_base::__msg_hdr __msg(__buffers, __sender);\n \t  ssize_t __result = ::recvmsg(this->native_handle(), &__msg,\n \t\t\t\t       static_cast<int>(__flags));\n@@ -1164,6 +1239,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           __ec.clear();\n           __sender.resize(__msg.msg_namelen);\n           return __result;\n+#else\n+\t  __ec = std::make_error_code(errc::operation_not_supported);\n+\t  return 0;\n+#endif\n \t}\n \n       template<typename _MutableBufferSequence, typename _CompletionToken>\n@@ -1199,6 +1278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec);\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   socket_base::__msg_hdr __msg(__buffers, __sender);\n                   ssize_t __result = ::recvmsg(__fd, &__msg, __flags);\n                   if (__result == -1)\n@@ -1212,6 +1292,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __sender.resize(__msg.msg_namelen);\n                     }\n \t\t  __h(__ec, __result);\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -1243,6 +1326,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tsend(const _ConstBufferSequence& __buffers,\n \t     socket_base::message_flags __flags, error_code& __ec)\n \t{\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t  socket_base::__msg_hdr __msg(__buffers);\n \t  ssize_t __result = ::sendmsg(this->native_handle(), &__msg,\n \t\t\t\t       static_cast<int>(__flags));\n@@ -1253,6 +1337,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n             }\n           __ec.clear();\n           return __result;\n+#else\n+\t  __ec = std::make_error_code(errc::operation_not_supported);\n+\t  return 0;\n+#endif\n \t}\n \n       template<typename _ConstBufferSequence, typename _CompletionToken>\n@@ -1284,6 +1372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec);\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   socket_base::__msg_hdr __msg(__buffers);\n                   ssize_t __result = ::sendmsg(__fd, &__msg, __flags);\n                   if (__result == -1)\n@@ -1294,6 +1383,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                   else\n                     __ec.clear();\n \t\t  __h(__ec, __result);\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -1333,6 +1425,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t        const endpoint_type& __recipient,\n \t\tsocket_base::message_flags __flags, error_code& __ec)\n \t{\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t  socket_base::__msg_hdr __msg(__buffers, __recipient);\n \t  ssize_t __result = ::sendmsg(this->native_handle(), &__msg,\n \t\t\t\t       static_cast<int>(__flags));\n@@ -1344,6 +1437,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           __ec.clear();\n           __recipient.resize(__msg.msg_namelen);\n           return __result;\n+#else\n+\t  __ec = std::make_error_code(errc::operation_not_supported);\n+\t  return 0;\n+#endif\n \t}\n \n       template<typename _ConstBufferSequence, typename _CompletionToken>\n@@ -1379,6 +1476,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec);\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   socket_base::__msg_hdr __msg(__buffers, __recipient);\n                   ssize_t __result = ::sendmsg(__fd, &__msg, __flags);\n                   if (__result == -1)\n@@ -1392,6 +1490,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __recipient.resize(__msg.msg_namelen);\n                     }\n \t\t  __h(__ec, __result);\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -1482,7 +1583,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __ec.clear();\n \t      return 0;\n \t    }\n-\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t  socket_base::__msg_hdr __msg(__buffers);\n \t  ssize_t __result = ::recvmsg(this->native_handle(), &__msg,\n \t\t\t\t       static_cast<int>(__flags));\n@@ -1492,6 +1593,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return __result;\n \t    }\n \t  __ec.assign(errno, generic_category());\n+#else\n+\t  __ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \t  return 0;\n \t}\n \n@@ -1536,6 +1640,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec);\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   socket_base::__msg_hdr __msg(__buffers);\n                   ssize_t __result = ::recvmsg(__fd, &__msg, __flags);\n                   if (__result == -1)\n@@ -1546,6 +1651,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                   else\n                     __ec.clear();\n \t\t  __h(__ec, __result);\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -1582,7 +1690,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __ec.clear();\n \t      return 0;\n \t    }\n-\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \t  socket_base::__msg_hdr __msg(__buffers);\n \t  ssize_t __result = ::sendmsg(this->native_handle(), &__msg,\n \t\t\t\t       static_cast<int>(__flags));\n@@ -1592,6 +1700,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      return __result;\n \t    }\n \t  __ec.assign(errno, generic_category());\n+#else\n+\t  __ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \t  return 0;\n \t}\n \n@@ -1636,6 +1747,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec);\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   socket_base::__msg_hdr __msg(__buffers);\n                   ssize_t __result = ::sendmsg(__fd, &__msg, __flags);\n                   if (__result == -1)\n@@ -1646,6 +1758,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                   else\n                     __ec.clear();\n \t\t  __h(__ec, __result);\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -1889,12 +2004,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t      __throw_on_error{\"basic_socket_acceptor::listen\"});\n       }\n \n-      void listen(int __backlog, error_code& __ec)\n+      void\n+      listen(int __backlog, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tif (::listen(native_handle(), __backlog) == -1)\n \t  __ec.assign(errno, generic_category());\n \telse\n \t  __ec.clear();\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       endpoint_type\n@@ -1933,6 +2053,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       socket_type\n       accept(io_context& __ctx, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tdo\n \t  {\n \t    int __h = ::accept(native_handle(), nullptr, 0);\n@@ -1943,6 +2064,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      }\n \t  } while (errno == ECONNABORTED && enable_connection_aborted());\n \t__ec.assign(errno, generic_category());\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \treturn socket_type{__ctx};\n       }\n \n@@ -1975,6 +2099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec, socket_type(__ctx));\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   do\n                     {\n                       int __newfd = ::accept(__fd, nullptr, 0);\n@@ -1987,6 +2112,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                     } while (errno == ECONNABORTED && __connabort);\n                   __ec.assign(errno, generic_category());\n                   __h(__ec, socket_type(__ctx));\n+#else\n+\t\t  __h(std::make_error_code(errc::operation_not_supported), 0);\n+#endif\n \t      });\n \t  return __init.result.get();\n \t}\n@@ -2012,6 +2140,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       socket_type\n       accept(io_context& __ctx, endpoint_type& __endpoint, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n \tdo\n \t  {\n \t    socklen_t __len = __endpoint.capacity();\n@@ -2024,6 +2153,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      }\n \t  } while (errno == ECONNABORTED && enable_connection_aborted());\n \t__ec.assign(errno, generic_category());\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n \treturn socket_type{__ctx};\n       }\n \n@@ -2058,6 +2190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                       __h(__ec, socket_type(__ctx));\n                       return;\n                     }\n+#ifdef _GLIBCXX_HAVE_SYS_SOCKET_H\n                   do\n                     {\n                       socklen_t __len = __ep.capacity();\n@@ -2072,6 +2205,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                         }\n                     } while (errno == ECONNABORTED && __connabort);\n                   __ec.assign(errno, generic_category());\n+#else\n+\t\t  __ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n                   __h(__ec, socket_type(__ctx));\n \t      });\n \t  return __init.result.get();\n@@ -2084,13 +2220,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       wait(wait_type __w, error_code& __ec)\n       {\n+#ifdef _GLIBCXX_HAVE_POLL_H\n \t::pollfd __fds;\n \t__fds.fd = native_handle();\n \t__fds.events = __w; // __w | POLLIN;\n \tif (::poll(&__fds, 1, -1) == -1)\n \t  __ec.assign(errno, generic_category());\n \telse\n \t  __ec.clear();\n+#else\n+\t__ec = std::make_error_code(errc::operation_not_supported);\n+#endif\n       }\n \n       template<class _CompletionToken>"}]}