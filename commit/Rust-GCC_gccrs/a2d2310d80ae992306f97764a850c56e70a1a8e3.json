{"sha": "a2d2310d80ae992306f97764a850c56e70a1a8e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkMjMxMGQ4MGFlOTkyMzA2Zjk3NzY0YTg1MGM1NmU3MGExYThlMw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2021-02-18T16:09:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-16T08:42:58Z"}, "message": "[Ada] Implementation of AI12-0152: legality rules for Raise_Expression\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Raise_Expression): Apply Ada_2020 rules\n\tconcerning the need for parentheses around Raise_Expressions in\n\tvarious contexts.", "tree": {"sha": "4f68357e11759f9cb92000fd6f1f7327464582ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f68357e11759f9cb92000fd6f1f7327464582ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2d2310d80ae992306f97764a850c56e70a1a8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d2310d80ae992306f97764a850c56e70a1a8e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d2310d80ae992306f97764a850c56e70a1a8e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d2310d80ae992306f97764a850c56e70a1a8e3/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c50041b99bc621cc1e2c7b7dbb67c0600926072e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50041b99bc621cc1e2c7b7dbb67c0600926072e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50041b99bc621cc1e2c7b7dbb67c0600926072e"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "e043085fbb971046dc1ed579db5af14ac2802428", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d2310d80ae992306f97764a850c56e70a1a8e3/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d2310d80ae992306f97764a850c56e70a1a8e3/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a2d2310d80ae992306f97764a850c56e70a1a8e3", "patch": "@@ -10532,8 +10532,57 @@ package body Sem_Res is\n       if Typ = Raise_Type then\n          Error_Msg_N (\"cannot find unique type for raise expression\", N);\n          Set_Etype (N, Any_Type);\n+\n       else\n          Set_Etype (N, Typ);\n+\n+         --  Apply check for required parentheses in the enclosing\n+         --  context of raise_expressions (RM 11.3 (2)), including default\n+         --  expressions in contexts that can include aspect specifications,\n+         --  and ancestor parts of extension aggregates.\n+\n+         declare\n+            Par : Node_Id := Parent (N);\n+            Parentheses_Found : Boolean := Paren_Count (N) > 0;\n+\n+         begin\n+            while Present (Par)\n+              and then Nkind (Par) in N_Has_Etype\n+            loop\n+               if Paren_Count (Par) > 0 then\n+                  Parentheses_Found := True;\n+               end if;\n+\n+               if Nkind (Par) = N_Extension_Aggregate\n+                 and then N = Ancestor_Part (Par)\n+               then\n+                  exit;\n+               end if;\n+\n+               Par := Parent (Par);\n+            end loop;\n+\n+            if not Parentheses_Found\n+              and then Comes_From_Source (Par)\n+              and then\n+                ((Nkind (Par) in N_Modular_Type_Definition\n+                               | N_Floating_Point_Definition\n+                               | N_Ordinary_Fixed_Point_Definition\n+                               | N_Decimal_Fixed_Point_Definition\n+                               | N_Extension_Aggregate\n+                               | N_Discriminant_Specification\n+                               | N_Parameter_Specification\n+                               | N_Formal_Object_Declaration)\n+\n+                  or else (Nkind (Par) = N_Object_Declaration\n+                    and then\n+                      Nkind (Parent (Par)) /= N_Extended_Return_Statement))\n+            then\n+               Error_Msg_N\n+                 (\"raise_expression must be parenthesized in this context\",\n+                   N);\n+            end if;\n+         end;\n       end if;\n    end Resolve_Raise_Expression;\n "}]}