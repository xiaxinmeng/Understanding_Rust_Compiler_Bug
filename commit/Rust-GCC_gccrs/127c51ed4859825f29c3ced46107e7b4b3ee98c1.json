{"sha": "127c51ed4859825f29c3ced46107e7b4b3ee98c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI3YzUxZWQ0ODU5ODI1ZjI5YzNjZWQ0NjEwN2U3YjRiM2VlOThjMQ==", "commit": {"author": {"name": "David Billinghurst", "email": "billingd@gcc.gnu.org", "date": "2005-06-23T03:01:57Z"}, "committer": {"name": "David Billinghurst", "email": "billingd@gcc.gnu.org", "date": "2005-06-23T03:01:57Z"}, "message": "f2c_4.f90: Add tests for complex functions\n\n2005-06-23  David Billinghurst  <David.Billinghurst@riotinto.com>\n\n\t* gfortran.dg/f2c_4.f90:  Add tests for complex functions\n\t* gfortran.dg/f2c_4.c: Likewise\n\nFrom-SVN: r101261", "tree": {"sha": "254f56a0249882efc427fdf4bce2b4dcf9b7b4c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254f56a0249882efc427fdf4bce2b4dcf9b7b4c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/127c51ed4859825f29c3ced46107e7b4b3ee98c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127c51ed4859825f29c3ced46107e7b4b3ee98c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127c51ed4859825f29c3ced46107e7b4b3ee98c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127c51ed4859825f29c3ced46107e7b4b3ee98c1/comments", "author": null, "committer": null, "parents": [{"sha": "c08a3565c28b6790b163d00a4d312d231b599f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08a3565c28b6790b163d00a4d312d231b599f0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08a3565c28b6790b163d00a4d312d231b599f0f"}], "stats": {"total": 118, "additions": 116, "deletions": 2}, "files": [{"sha": "58f3ef1a2ab3adbe760cd9e744453b612accbc1c", "filename": "gcc/testsuite/gfortran.dg/f2c_4.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127c51ed4859825f29c3ced46107e7b4b3ee98c1/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127c51ed4859825f29c3ced46107e7b4b3ee98c1/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.c?ref=127c51ed4859825f29c3ced46107e7b4b3ee98c1", "patch": "@@ -1,4 +1,20 @@\n+/*  Check -ff2c calling conventions\n+    Return value of COMPLEX function is via an extra argument in the\n+     calling sequence that points to where to store the return value\n+    Additional underscore appended to function name\n+  \n+   Simplified from f2c output and tested with g77 */\n+\n+typedef float real;\n+typedef double doublereal;\n+typedef struct { real r, i; } complex;\n+typedef struct { doublereal r, i; } doublecomplex;\n+\n extern double f2c_4b__(double *);\n+extern void f2c_4d__( complex *, complex *);\n+extern void f2c_4f__( complex *, int *,complex *);\n+extern void f2c_4h__( doublecomplex *, doublecomplex *);\n+extern void f2c_4j__( doublecomplex *, int *, doublecomplex *);\n extern void abort (void);\n \n void f2c_4a__(void) {\n@@ -7,3 +23,57 @@ void f2c_4a__(void) {\n   b=f2c_4b__(&a);\n   if ( a != b ) abort();\n }\n+\n+void f2c_4c__(void) {\n+  complex x,ret_val;\n+  x.r = 1234;\n+  x.i = 5678;\n+  f2c_4d__(&ret_val,&x);\n+  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+}\n+\n+void f2c_4e__(void) {\n+  complex x,ret_val;\n+  int i=0;\n+  x.r = 1234;\n+  x.i = 5678;\n+  f2c_4f__(&ret_val,&i,&x);\n+  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+}\n+\n+void f2c_4g__(void) {\n+  doublecomplex x,ret_val;\n+  x.r = 1234;\n+  x.i = 5678.0f;\n+  f2c_4h__(&ret_val,&x);\n+  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+}\n+\n+void f2c_4i__(void) {\n+  doublecomplex x,ret_val;\n+  int i=0;\n+  x.r = 1234.0f;\n+  x.i = 5678.0f;\n+  f2c_4j__(&ret_val,&i,&x);\n+  if ( x.r != ret_val.r && x.i != ret_val.i ) abort();\n+}\n+\n+void f2c_4k__(complex *ret_val, complex *x) {\n+  ret_val->r = x->r;\n+  ret_val->i = x->i;\n+}\n+\n+void f2c_4l__(complex *ret_val, int *i, complex *x) {\n+  ret_val->r = x->r;\n+  ret_val->i = x->i;\n+}\n+\n+void f2c_4m__(doublecomplex *ret_val, doublecomplex *x) {\n+  ret_val->r = x->r;\n+  ret_val->i = x->i;\n+}\n+\n+void f2c_4n__(doublecomplex *ret_val, int *i, doublecomplex *x) {\n+  ret_val->r = x->r;\n+  ret_val->i = x->i;\n+}"}, {"sha": "a0d1909bf2f4a8cb1928608eaf96291184aed67e", "filename": "gcc/testsuite/gfortran.dg/f2c_4.f90", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/127c51ed4859825f29c3ced46107e7b4b3ee98c1/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/127c51ed4859825f29c3ced46107e7b4b3ee98c1/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ff2c_4.f90?ref=127c51ed4859825f29c3ced46107e7b4b3ee98c1", "patch": "@@ -4,11 +4,55 @@\n \n ! Check -ff2c calling conventions\n !   Return value of REAL function is promoted to C type double\n-!   Addional underscore appended to function name  \n-call f2c_4a()\n+!   Return value of COMPLEX function is via an extra argument in the\n+!    calling sequence that points to where to store the return value\n+!   Addional underscore appended to function name\n+program f2c_4\n+  complex c, f2c_4k, f2c_4l\n+  double complex z, f2c_4m, f2c_4n\n+  integer i\n+\n+  ! Promotion of REAL function\n+  call f2c_4a()\n+\n+  ! Return COMPLEX arg - call Fortran routines from C\n+  call f2c_4c()\n+  call f2c_4e()\n+  call f2c_4g()\n+  call f2c_4i()\n+\n+  !  Return COMPLEX arg - call C routines from Fortran \n+  c = cmplx(1234.0,5678.0)\n+  z = dcmplx(1234.0d0,5678.0d0)\n+  if ( c .ne. f2c_4k(c) )   call abort\n+  if ( c .ne. f2c_4l(i,c) ) call abort\n+  if ( z .ne. f2c_4m(z) )   call abort\n+  if ( z .ne. f2c_4n(i,z) ) call abort\n+\n end\n \n real function f2c_4b(x)\n   double precision x\n   f2c_4b = x\n end\n+\n+complex function f2c_4d(x)\n+  complex x\n+  f2c_4d = x\n+end\n+\n+complex function f2c_4f(i,x)\n+  complex x\n+  integer i\n+  f2c_4f = x\n+end\n+\n+double complex function f2c_4h(x)\n+  double complex x\n+  f2c_4h = x\n+end\n+\n+double complex function f2c_4j(i,x)\n+  double complex x\n+  f2c_4j = x\n+end"}]}