{"sha": "9e45112545521716df8d1569a00ff26ac320df56", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU0NTExMjU0NTUyMTcxNmRmOGQxNTY5YTAwZmYyNmFjMzIwZGY1Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-11-19T17:53:33Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-11-19T17:53:33Z"}, "message": "arm.c (arm_new_rtx_costs): Handle narrow mode add-shifts properly.\n\n\n\t* config/arm/arm.c (arm_new_rtx_costs):\n\tHandle narrow mode add-shifts properly.\n\t* config/arm/arm-common.c (arm_rtx_shift_left_p): Remove static.\n\t* config/arm/arm-common-protos.h (arm_rtx_shift_left_p):\n\tDeclare extern.\n\nFrom-SVN: r205051", "tree": {"sha": "9bf222f72be5ef0e007edbb62b4a5f9e52046dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf222f72be5ef0e007edbb62b4a5f9e52046dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e45112545521716df8d1569a00ff26ac320df56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e45112545521716df8d1569a00ff26ac320df56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e45112545521716df8d1569a00ff26ac320df56", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e45112545521716df8d1569a00ff26ac320df56/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5393d83e7492b33230a7b8167c985dc3eafb420e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5393d83e7492b33230a7b8167c985dc3eafb420e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5393d83e7492b33230a7b8167c985dc3eafb420e"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "e128ec3d794c5d387f45a1f002d1a7041e3f0bf8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e45112545521716df8d1569a00ff26ac320df56/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e45112545521716df8d1569a00ff26ac320df56/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e45112545521716df8d1569a00ff26ac320df56", "patch": "@@ -1,3 +1,11 @@\n+2013-11-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.c (arm_new_rtx_costs):\n+\tHandle narrow mode add-shifts properly.\n+\t* config/arm/arm-common.c (arm_rtx_shift_left_p): Remove static.\n+\t* config/arm/arm-common-protos.h (arm_rtx_shift_left_p):\n+\tDeclare extern.\n+\n 2013-11-19  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm.md (zero_extend<mode>di2): Add type attribute."}, {"sha": "c3652a72c819d4566a08e90f09f912137439e47c", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e45112545521716df8d1569a00ff26ac320df56/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e45112545521716df8d1569a00ff26ac320df56/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=9e45112545521716df8d1569a00ff26ac320df56", "patch": "@@ -31,6 +31,7 @@ extern int arm_no_early_alu_shift_dep (rtx, rtx);\n extern int arm_no_early_alu_shift_value_dep (rtx, rtx);\n extern int arm_no_early_mul_dep (rtx, rtx);\n extern int arm_no_early_store_addr_dep (rtx, rtx);\n+extern bool arm_rtx_shift_left_p (rtx);\n \n /* RTX cost table definitions.  These are used when tuning for speed rather\n    than for size and should reflect the _additional_ cost over the cost"}, {"sha": "a46e6751a7b84a7179295fe845297366a71e835b", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e45112545521716df8d1569a00ff26ac320df56/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e45112545521716df8d1569a00ff26ac320df56/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=9e45112545521716df8d1569a00ff26ac320df56", "patch": "@@ -40,7 +40,7 @@ typedef struct\n \n /* Return TRUE if X is either an arithmetic shift left, or\n    is a multiplication by a power of two.  */\n-static bool\n+bool\n arm_rtx_shift_left_p (rtx x)\n {\n   enum rtx_code code = GET_CODE (x);"}, {"sha": "3cd53b07ca22d9b24a8c78d3ae9fd31ec12185c7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e45112545521716df8d1569a00ff26ac320df56/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e45112545521716df8d1569a00ff26ac320df56/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9e45112545521716df8d1569a00ff26ac320df56", "patch": "@@ -8766,6 +8766,30 @@ arm_unspec_cost (rtx x, enum rtx_code /* outer_code */, bool speed_p, int *cost)\n    call (one insn for -Os) and then one for processing the result.  */\n #define LIBCALL_COST(N) COSTS_N_INSNS (N + (speed_p ? 18 : 2))\n \n+#define HANDLE_NARROW_SHIFT_ARITH(OP, IDX)\t\t\t\t\\\n+\tdo\t\t\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    shift_op = shifter_op_p (XEXP (x, IDX), &shift_reg);\t\\\n+\t    if (shift_op != NULL\t\t\t\t\t\\\n+\t        && arm_rtx_shift_left_p (XEXP (x, IDX)))\t\t\\\n+\t      {\t\t\t\t\t\t\t\t\\\n+\t        if (shift_reg)\t\t\t\t\t\t\\\n+\t\t  {\t\t\t\t\t\t\t\\\n+\t\t    if (speed_p)\t\t\t\t\t\\\n+\t\t      *cost += extra_cost->alu.arith_shift_reg;\t\\\n+\t\t    *cost += rtx_cost (shift_reg, ASHIFT, 1, speed_p);\t\\\n+\t\t  }\t\t\t\t\t\t\t\\\n+\t        else if (speed_p)\t\t\t\t\t\\\n+\t\t  *cost += extra_cost->alu.arith_shift;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t\t  *cost += (rtx_cost (shift_op, ASHIFT, 0, speed_p)\t\\\n+\t\t\t  + rtx_cost (XEXP (x, 1 - IDX),\t\t\\\n+\t\t\t              OP, 1, speed_p));\t\t\\\n+\t        return true;\t\t\t\t\t\t\\\n+\t      }\t\t\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\twhile (0);\n+\n /* RTX costs.  Make an estimate of the cost of executing the operation\n    X, which is contained with an operation with code OUTER_CODE.\n    SPEED_P indicates whether the cost desired is the performance cost,\n@@ -9122,6 +9146,15 @@ arm_new_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n       if (GET_MODE_CLASS (mode) == MODE_INT\n \t  && GET_MODE_SIZE (mode) < 4)\n \t{\n+\t  rtx shift_op, shift_reg;\n+\t  shift_reg = NULL;\n+\n+\t  /* We check both sides of the MINUS for shifter operands since,\n+\t     unlike PLUS, it's not commutative.  */\n+\n+\t  HANDLE_NARROW_SHIFT_ARITH (MINUS, 0)\n+\t  HANDLE_NARROW_SHIFT_ARITH (MINUS, 1)\n+\n \t  /* Slightly disparage, as we might need to widen the result.  */\n \t  *cost = 1 + COSTS_N_INSNS (1);\n \t  if (speed_p)\n@@ -9221,11 +9254,18 @@ arm_new_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \t  return false;\n \t}\n \n+\t/* Narrow modes can be synthesized in SImode, but the range\n+\t   of useful sub-operations is limited.  Check for shift operations\n+\t   on one of the operands.  Only left shifts can be used in the\n+\t   narrow modes.  */\n       if (GET_MODE_CLASS (mode) == MODE_INT\n \t  && GET_MODE_SIZE (mode) < 4)\n \t{\n-\t  /* Narrow modes can be synthesized in SImode, but the range\n-\t     of useful sub-operations is limited.  */\n+\t  rtx shift_op, shift_reg;\n+\t  shift_reg = NULL;\n+\n+\t  HANDLE_NARROW_SHIFT_ARITH (PLUS, 0)\n+\n \t  if (CONST_INT_P (XEXP (x, 1)))\n \t    {\n \t      int insns = arm_gen_constant (PLUS, SImode, NULL_RTX,\n@@ -10344,6 +10384,8 @@ arm_new_rtx_costs (rtx x, enum rtx_code code, enum rtx_code outer_code,\n     }\n }\n \n+#undef HANDLE_NARROW_SHIFT_ARITH\n+\n /* RTX costs when optimizing for size.  */\n static bool\n arm_rtx_costs (rtx x, int code, int outer_code, int opno ATTRIBUTE_UNUSED,"}]}