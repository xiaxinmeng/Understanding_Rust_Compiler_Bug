{"sha": "de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2ZjNmN2FiOGQwZmZkM2EwMWJkMDQ1YTkwMzE3ZDg0MDRjOTU5MQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2012-04-11T19:31:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2012-04-11T19:31:45Z"}, "message": "Check for incompatible pointer sign extension\n\ngcc/\n\n\tPR rtl-optimization/52876\n\t* emit-rtl.c (set_reg_attrs_from_value): Handle arbitrary value.\n\tDon't call mark_reg_pointer for incompatible pointer sign\n\textension.\n\n\t* reginfo.c (reg_scan_mark_refs): Call set_reg_attrs_from_value \n\tdirectly.\n\ngcc/testsuite\n\n\tPR rtl-optimization/52876\n\t* gcc.target/i386/pr52876.c: New.\n\nFrom-SVN: r186351", "tree": {"sha": "a22fa5858f537ac51f83ae37d539fb42a9c209ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22fa5858f537ac51f83ae37d539fb42a9c209ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3ea1dbdb267abe428d444f586af1fc724556898", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ea1dbdb267abe428d444f586af1fc724556898", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ea1dbdb267abe428d444f586af1fc724556898"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "f3fcfca006de4da5daa12f6c8d2f5e232b0dbde1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "patch": "@@ -1,3 +1,13 @@\n+2012-04-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/52876\n+\t* emit-rtl.c (set_reg_attrs_from_value): Handle arbitrary value.\n+\tDon't call mark_reg_pointer for incompatible pointer sign\n+\textension.\n+\n+\t* reginfo.c (reg_scan_mark_refs): Call set_reg_attrs_from_value \n+\tdirectly.\n+\n 2012-04-11  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* fold-const.c (fold_unary_loc): Use GET_MODE_PRECISION for"}, {"sha": "9da585c35a77a0780be3df4a104f1aa283ebceaa", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "patch": "@@ -970,6 +970,22 @@ void\n set_reg_attrs_from_value (rtx reg, rtx x)\n {\n   int offset;\n+  bool can_be_reg_pointer = true;\n+\n+  /* Don't call mark_reg_pointer for incompatible pointer sign\n+     extension.  */\n+  while (GET_CODE (x) == SIGN_EXTEND\n+\t || GET_CODE (x) == ZERO_EXTEND\n+\t || GET_CODE (x) == TRUNCATE\n+\t || (GET_CODE (x) == SUBREG && subreg_lowpart_p (x)))\n+    {\n+#if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n+      if ((GET_CODE (x) == SIGN_EXTEND && POINTERS_EXTEND_UNSIGNED)\n+\t  || (GET_CODE (x) != SIGN_EXTEND && ! POINTERS_EXTEND_UNSIGNED))\n+\tcan_be_reg_pointer = false;\n+#endif\n+      x = XEXP (x, 0);\n+    }\n \n   /* Hard registers can be reused for multiple purposes within the same\n      function, so setting REG_ATTRS, REG_POINTER and REG_POINTER_ALIGN\n@@ -983,14 +999,14 @@ set_reg_attrs_from_value (rtx reg, rtx x)\n       if (MEM_OFFSET_KNOWN_P (x))\n \tREG_ATTRS (reg) = get_reg_attrs (MEM_EXPR (x),\n \t\t\t\t\t MEM_OFFSET (x) + offset);\n-      if (MEM_POINTER (x))\n+      if (can_be_reg_pointer && MEM_POINTER (x))\n \tmark_reg_pointer (reg, 0);\n     }\n   else if (REG_P (x))\n     {\n       if (REG_ATTRS (x))\n \tupdate_reg_offset (reg, x, offset);\n-      if (REG_POINTER (x))\n+      if (can_be_reg_pointer && REG_POINTER (x))\n \tmark_reg_pointer (reg, REGNO_POINTER_ALIGN (REGNO (x)));\n     }\n }"}, {"sha": "f3a08f523c20c2457f52f4a9176ad75ca2b3abb4", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "patch": "@@ -1222,17 +1222,7 @@ reg_scan_mark_refs (rtx x, rtx insn)\n       /* If this is setting a register from a register or from a simple\n \t conversion of a register, propagate REG_EXPR.  */\n       if (REG_P (dest) && !REG_ATTRS (dest))\n-\t{\n-\t  rtx src = SET_SRC (x);\n-\n-\t  while (GET_CODE (src) == SIGN_EXTEND\n-\t\t || GET_CODE (src) == ZERO_EXTEND\n-\t\t || GET_CODE (src) == TRUNCATE\n-\t\t || (GET_CODE (src) == SUBREG && subreg_lowpart_p (src)))\n-\t    src = XEXP (src, 0);\n-\n-\t  set_reg_attrs_from_value (dest, src);\n-\t}\n+\tset_reg_attrs_from_value (dest, SET_SRC (x));\n \n       /* ... fall through ...  */\n "}, {"sha": "1a22457a1406ca92a60bbc417fe3e5257b4365ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "patch": "@@ -1,3 +1,8 @@\n+2012-04-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/52876\n+\t* gcc.target/i386/pr52876.c: New.\n+\n 2012-04-11  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* gcc.dg/c99-const-expr-9.c (old_offsetof): Insert a cast to"}, {"sha": "6d5e47a94d01e034fc641e8fa3441ecb22470005", "filename": "gcc/testsuite/gcc.target/i386/pr52876.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52876.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6f3f7ab8d0ffd3a01bd045a90317d8404c9591/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52876.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr52876.c?ref=de6f3f7ab8d0ffd3a01bd045a90317d8404c9591", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run { target { x32 } } } */\n+/* { dg-options \"-O2 -mx32 -maddress-mode=long\" } */\n+\n+extern void abort (void);\n+\n+long long li;\n+\n+long long \n+__attribute__ ((noinline))\n+testfunc (void* addr)\n+{\n+  li = (long long)(int)addr;\n+  li &= 0xffffffff;\n+  return li;\n+}\n+\n+int main (void)\n+{\n+  volatile long long rv_test;\n+  rv_test = testfunc((void*)0x87651234);\n+  if (rv_test != 0x87651234ULL)\n+    abort ();\n+\n+  return 0;\n+}"}]}