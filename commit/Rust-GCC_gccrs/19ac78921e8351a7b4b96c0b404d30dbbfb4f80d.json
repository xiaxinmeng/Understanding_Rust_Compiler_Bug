{"sha": "19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhYzc4OTIxZTgzNTFhN2I0Yjk2YzBiNDA0ZDMwZGJiZmI0ZjgwZA==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2011-04-08T13:25:29Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2011-04-08T13:25:29Z"}, "message": "re PR rtl-optimization/48272 (internal compiler error: in setup_insn_reg_pressure_info, at haifa-sched.c:1124)\n\n        PR rtl-optimization/48272\n\n        * sched-deps.c (setup_insn_reg_pressure_info): Export and rename to\n        init_insn_reg_pressure_info.  Adjust a caller.\n        * sched-int.h (init_insn_reg_pressure_info): Declare.\n        * haifa-sched.c (haifa_init_insn): Call init_insn_reg_pressure_info\n        when sched-pressure is enabled.\n\n        * g++.dg/opt/pr48272.C: New.\n\nFrom-SVN: r172183", "tree": {"sha": "e26fad5edf90e1aeb0033a2cc5dc5424c53f81bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e26fad5edf90e1aeb0033a2cc5dc5424c53f81bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f8c63cc10c27905f6d6fa553d3be08a416b2e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f8c63cc10c27905f6d6fa553d3be08a416b2e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f8c63cc10c27905f6d6fa553d3be08a416b2e1f"}], "stats": {"total": 154, "additions": 151, "deletions": 3}, "files": [{"sha": "107f79bf2ff61155533814b364066f4caf9fa949", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "patch": "@@ -1,3 +1,13 @@\n+2011-04-08  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/48272\n+\n+\t* sched-deps.c (setup_insn_reg_pressure_info): Export and rename to\n+\tinit_insn_reg_pressure_info.  Adjust a caller.\n+\t* sched-int.h (init_insn_reg_pressure_info): Declare.\n+\t* haifa-sched.c (haifa_init_insn): Call init_insn_reg_pressure_info\n+\twhen sched-pressure is enabled.\n+\n 2011-04-08  Richard Guenther  <rguenther@suse.de>\n \n \t* gimple.c (gimple_set_modified): Do not queue calls to"}, {"sha": "6908a113e634f401df5cc3dad882cdbd90353b71", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "patch": "@@ -5611,6 +5611,8 @@ haifa_init_insn (rtx insn)\n       /* Extend dependency caches by one element.  */\n       extend_dependency_caches (1, false);\n     }\n+  if (sched_pressure_p)\n+    init_insn_reg_pressure_info (insn);\n }\n \n /* Init data for the new basic block BB which comes after AFTER.  */"}, {"sha": "393e651f3df6c6d0d558f7c3579df60593954cf6", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "patch": "@@ -1991,8 +1991,8 @@ mark_insn_reg_clobber (rtx reg, const_rtx setter, void *data)\n }\n \n /* Set up reg pressure info related to INSN.  */\n-static void\n-setup_insn_reg_pressure_info (rtx insn)\n+void\n+init_insn_reg_pressure_info (rtx insn)\n {\n   int i, len;\n   enum reg_class cl;\n@@ -2774,7 +2774,7 @@ sched_analyze_insn (struct deps_desc *deps, rtx x, rtx insn)\n   if (sched_pressure_p)\n     {\n       setup_insn_reg_uses (deps, insn);\n-      setup_insn_reg_pressure_info (insn);\n+      init_insn_reg_pressure_info (insn);\n     }\n \n   /* Add register dependencies for insn.  */"}, {"sha": "d5c9509f61aa35ca53b748863ec1d5bca930c21b", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "patch": "@@ -1194,6 +1194,7 @@ extern void init_deps_global (void);\n extern void finish_deps_global (void);\n extern void deps_analyze_insn (struct deps_desc *, rtx);\n extern void remove_from_deps (struct deps_desc *, rtx);\n+extern void init_insn_reg_pressure_info (rtx);\n \n extern dw_t get_dep_weak_1 (ds_t, ds_t);\n extern dw_t get_dep_weak (ds_t, ds_t);"}, {"sha": "acd66d099de0dcb394578703ae5cdc8a1fab3749", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "patch": "@@ -1,3 +1,8 @@\n+2011-04-08  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/48272\n+\t* g++.dg/opt/pr48272.C: New.\n+\n 2011-04-08  Dmitry Melnik  <dm@ispras.ru>\n \n \tPR rtl-optimization/48235"}, {"sha": "cb28a1bb4e3a88c1a43309d080b5e6ebc348ab13", "filename": "gcc/testsuite/g++.dg/opt/pr48272.C", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr48272.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19ac78921e8351a7b4b96c0b404d30dbbfb4f80d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr48272.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr48272.C?ref=19ac78921e8351a7b4b96c0b404d30dbbfb4f80d", "patch": "@@ -0,0 +1,130 @@\n+// { dg-do compile }\n+// { dg-options \"-O3 -ftracer -fsched-pressure -Wno-unused-parameter -Wno-return-type\" }\n+\n+extern \"C\"\n+{\n+  namespace std\n+  {\n+    class exception\n+    {\n+      virtual const char *what () const throw ();\n+    };\n+  }\n+}\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+  template < typename _Alloc > class allocator;\n+  template < class _CharT > struct char_traits;\n+  template < typename _CharT, typename _Traits =\n+    char_traits < _CharT >, typename _Alloc =\n+    allocator < _CharT > >class basic_string;\n+  typedef basic_string < char >string;\n+  template < typename _CharT, typename _Traits =\n+    char_traits < _CharT > >class basic_ios;\n+  typedef basic_ios < char >ios;\n+}\n+\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\n+{\n+  template < typename _Tp > class new_allocator\n+  {\n+  };\n+}\n+\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+template < typename _Tp > class allocator:public __gnu_cxx::new_allocator <\n+    _Tp >\n+  {\n+  };\n+}\n+\n+typedef int _Atomic_word;\n+namespace __gnu_cxx __attribute__ ((__visibility__ (\"default\")))\n+{\n+  static inline _Atomic_word\n+    __attribute__ ((__unused__)) __exchange_and_add_dispatch (_Atomic_word *\n+\t\t\t\t\t\t\t      __mem,\n+\t\t\t\t\t\t\t      int __val)\n+  {\n+  }\n+}\n+\n+namespace std __attribute__ ((__visibility__ (\"default\")))\n+{\n+  template < typename _CharT, typename _Traits,\n+    typename _Alloc > class basic_string\n+  {\n+    typedef _Alloc allocator_type;\n+  private:struct _Rep_base\n+    {\n+      _Atomic_word _M_refcount;\n+    };\n+    struct _Rep:_Rep_base\n+    {\n+      void _M_dispose (const _Alloc & __a)\n+      {\n+\tif (__builtin_expect (this != &_S_empty_rep (), false))\n+\t  {\n+\t    if (__gnu_cxx::\n+\t\t__exchange_and_add_dispatch (&this->_M_refcount, -1) <= 0)\n+\t      {\n+\t\t_M_destroy (__a);\n+\t      }\n+\t  }\n+      }\n+      void _M_destroy (const _Alloc &) throw ();\n+    };\n+    struct _Alloc_hider:_Alloc\n+    {\n+      _CharT *_M_p;\n+    };\n+  private:mutable _Alloc_hider _M_dataplus;\n+    _CharT *_M_data () const\n+    {\n+      return _M_dataplus._M_p;\n+    }\n+    _Rep *_M_rep () const\n+    {\n+      return &((reinterpret_cast < _Rep * >(_M_data ()))[-1]);\n+    }\n+    static _Rep & _S_empty_rep ()\n+    {\n+    }\n+  public: basic_string ():_M_dataplus (_S_empty_rep ()._M_refdata (),\n+\t\t _Alloc ())\n+    {\n+    }\n+    basic_string (const _CharT * __s, const _Alloc & __a = _Alloc ());\n+    ~basic_string ()\n+    {\n+      _M_rep ()->_M_dispose (this->get_allocator ());\n+    }\n+    allocator_type get_allocator () const\n+    {\n+    }\n+  };\n+  class ios_base\n+  {\n+  public:class failure:public exception\n+    {\n+    public:explicit failure (const string & __str) throw ();\n+    };\n+  };\n+template < typename _CharT, typename _Traits > class basic_ios:public\n+    ios_base\n+  {\n+  };\n+  namespace iostreams\n+  {\n+    class zlib_error:public std::ios::failure\n+    {\n+    public:explicit zlib_error (int error);\n+    private:int error_;\n+    };\n+      zlib_error::zlib_error (int error):std::ios::failure (\"zlib error\"),\n+      error_ (error)\n+    {\n+    }\n+  }\n+}"}]}