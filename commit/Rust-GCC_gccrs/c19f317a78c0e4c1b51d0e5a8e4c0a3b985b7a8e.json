{"sha": "c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e", "node_id": "C_kwDOANBUbNoAKGMxOWYzMTdhNzhjMGU0YzFiNTFkMGU1YThlNGMwYTNiOTg1YjdhOGU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-16T17:41:35Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-16T17:41:35Z"}, "message": "c++: treat NON_DEPENDENT_EXPR as not potentially constant [PR104507]\n\nHere we're crashing from potential_constant_expression because it tries\nto perform trial evaluation of the first operand '(bool)__r' of the\nconjunction (which is overall wrapped in a NON_DEPENDENT_EXPR), but\ncxx_eval_constant_expression ICEs on unsupported trees (of which CAST_EXPR\nis one).  The sequence of events is:\n\n  1. build_non_dependent_expr for the array subscript yields\n     NON_DEPENDENT_EXPR<<<(bool)__r && __s>>> ? 1 : 2\n  2. cp_build_array_ref calls fold_non_dependent_expr on this subscript\n     (after this point, processing_template_decl is cleared)\n  3. during which, the COND_EXPR case of tsubst_copy_and_build calls\n     fold_non_dependent_expr on the first operand\n  4. during which, we crash from p_c_e_1 because it attempts trial\n     evaluation of the CAST_EXPR '(bool)__r'.\n\nNote that even if this crash didn't happen, fold_non_dependent_expr\nfrom cp_build_array_ref would still ultimately be one big no-op here\nsince neither constexpr evaluation nor tsubst handle NON_DEPENDENT_EXPR.\n\nIn light of this and of the observation that we should never see\nNON_DEPENDENT_EXPR in a context where a constant expression is needed\n(it's used primarily in the build_x_* family of functions), it seems\nfutile for p_c_e_1 to ever return true for NON_DEPENDENT_EXPR.  And the\notherwise inconsistent handling of NON_DEPENDENT_EXPR between p_c_e_1,\ncxx_evaluate_constexpr_expression and tsubst apparently leads to weird\nbugs such as this one.\n\n\tPR c++/104507\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (potential_constant_expression_1)\n\t<case NON_DEPENDENT_EXPR>: Return false instead of recursing.\n\tAssert tf_error isn't set.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/template/non-dependent21.C: New test.", "tree": {"sha": "28c4b2f885959305bf8383c03e90ab6d23a1728e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28c4b2f885959305bf8383c03e90ab6d23a1728e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e/comments", "author": null, "committer": null, "parents": [{"sha": "f9c4917f01692a10f122f5ad56e559ba27751ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c4917f01692a10f122f5ad56e559ba27751ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c4917f01692a10f122f5ad56e559ba27751ace"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "4716694cb710a946d25323e5e8725e4bfbca56a3", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e", "patch": "@@ -9065,14 +9065,21 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case BIND_EXPR:\n       return RECUR (BIND_EXPR_BODY (t), want_rval);\n \n+    case NON_DEPENDENT_EXPR:\n+      /* Treat NON_DEPENDENT_EXPR as non-constant: it's not handled by\n+\t constexpr evaluation or tsubst, so fold_non_dependent_expr can't\n+\t do anything useful with it.  And we shouldn't see it in a context\n+\t where a constant expression is strictly required, hence the assert.  */\n+      gcc_checking_assert (!(flags & tf_error));\n+      return false;\n+\n     case CLEANUP_POINT_EXPR:\n     case MUST_NOT_THROW_EXPR:\n     case TRY_CATCH_EXPR:\n     case TRY_BLOCK:\n     case EH_SPEC_BLOCK:\n     case EXPR_STMT:\n     case PAREN_EXPR:\n-    case NON_DEPENDENT_EXPR:\n       /* For convenience.  */\n     case LOOP_EXPR:\n     case EXIT_EXPR:"}, {"sha": "89900837b8b40c41c535efd9ae417fd9c8a7f6f1", "filename": "gcc/testsuite/g++.dg/template/non-dependent21.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent21.C?ref=c19f317a78c0e4c1b51d0e5a8e4c0a3b985b7a8e", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/104507\n+\n+extern const char *_k_errmsg[];\n+\n+template<class>\n+const char* DoFoo(int __r, int __s) {\n+  const char* n = _k_errmsg[(bool)__r && __s ? 1 : 2];\n+  return n;\n+}"}]}