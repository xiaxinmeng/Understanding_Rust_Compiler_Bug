{"sha": "ff15f019e014d1d41e4a78d289f4f61873d62bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYxNWYwMTllMDE0ZDFkNDFlNGE3OGQyODlmNGY2MTg3M2Q2MmJkOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-08-29T13:40:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-08-29T13:40:33Z"}, "message": "re PR libstdc++/50118 (node-based containers cannot use allocators with explicit constructor template)\n\n2011-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/50118\n\t* include/bits/stl_list.h (_List_base<>::\n\t_List_base(const allocator_type&)): Remove.\n\t(_List_base<>::_List_base(const _Node_alloc_type&)): Add.\n\t(list<>:list(const allocator_type&), list(size_type, const\n\tvalue_type&, const allocator_type&),\n\tlist(initializer_list<, const allocator_type&),\n\tlist(_InputIterator, _InputIterator, const allocator_type&),\n\tinsert(iterator, size_type, const value_type&),\n\tinsert(iterator, _InputIterator, _InputIterator)): Adjust.\n\t* include/bits/stl_tree.h (_Rb_tree<>::_Rb_tree(const _Compare&,\n\tconst allocator_type&)): Fix.\n\t* include/bits/stl_map.h (map<>::map(const _Compare&,\n \tconst allocator_type&), map(initializer_list<>,\n\tconst _Compare&, const allocator_type&), map(_InputIterator,\n\t_InputIterator, const _Compare&, const allocator_type&),\n\tget_allocator): Adjust.\n\t* include/bits/stl_set.h (set<>::set(const _Compare&,\n \tconst allocator_type&), set(initializer_list<>,\n\tconst _Compare&, const allocator_type&), set(_InputIterator,\n\t_InputIterator, const _Compare&, const allocator_type&),\n\tget_allocator): Likewise.\n\t* include/bits/stl_multimap.h (multimap<>::multimap(const _Compare&,\n \tconst allocator_type&), multimap(initializer_list<>,\n\tconst _Compare&, const allocator_type&), multimap(_InputIterator,\n\t_InputIterator, const _Compare&, const allocator_type&),\n\tget_allocator): Likewise.\n\t* include/bits/stl_multiset.h (multiset<>::multiset(const _Compare&,\n \tconst allocator_type&), multiset(initializer_list<>,\n\tconst _Compare&, const allocator_type&), multiset(_InputIterator,\n\t_InputIterator, const _Compare&, const allocator_type&),\n\tget_allocator): Likewise.\n\t* include/bits/forward_list.h (_Fwd_list_base<>::\n\t_Fwd_list_base(const _Alloc&), _Fwd_list_base(const _Fwd_list_base&,\n\tconst _Alloc&), _Fwd_list_base(_Fwd_list_base&&, const _Alloc&)):\n\tRemove.\n\t(_Fwd_list_base<>::_Fwd_list_base(const _Node_alloc_type&),\n\t_Fwd_list_base(const _Fwd_list_base&,\n\tconst _Node_alloc_type&), _Fwd_list_base(_Fwd_list_base&&,\n\tconst _Node_alloc_type&)): Add.\n\t(forward_list<>::forward_list(const _Alloc&),\n\tforward_list(const forward_list&, const _Alloc&),\n\tforward_list(forward_list&&, const _Alloc&),\n\tforward_list(size_type, const _Tp&, const _Alloc&),\n\tforward_list(_InputIterator, _InputIterator, const _Alloc&),\n\tforward_list(std::initializer_list<>, const _Alloc&),\n\tget_allocator): Adjust.\n\t* include/bits/forward_list.tcc\n\t* testsuite/util/testsuite_allocator.h (ExplicitConsAlloc): Add.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation/5.cc: New.\n\t* testsuite/23_containers/multimap/requirements/\n\texplicit_instantiation/5.cc: Likewise.\n\t* testsuite/23_containers/multimap/requirements/\n\texplicit_instantiation/5_c++0x.cc: Likewise.\n\t* testsuite/23_containers/set/requirements/explicit_instantiation/\n\t5.cc: Likewise.\n\t* testsuite/23_containers/set/requirements/explicit_instantiation/\n\t5_c++0x.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation/5.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/\n\texplicit_instantiation/5.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation/5.cc: Likewise.\n\ttestsuite/23_containers/multiset/requirements/explicit_instantiation/\n\t5.cc: Likewise.\n\t* testsuite/23_containers/multiset/requirements/\n\texplicit_instantiation/5_c++0x.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n\t5_c++0x.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n\t5.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation/5.cc: Likewise.\n\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n\t5.cc: Likewise.\n\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n\t5_c++0x.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line number.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n\tLikewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r178230", "tree": {"sha": "63892d459e80cab15f0999b4c5a9b049c29be247", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63892d459e80cab15f0999b4c5a9b049c29be247"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff15f019e014d1d41e4a78d289f4f61873d62bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff15f019e014d1d41e4a78d289f4f61873d62bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff15f019e014d1d41e4a78d289f4f61873d62bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff15f019e014d1d41e4a78d289f4f61873d62bd8/comments", "author": null, "committer": null, "parents": [{"sha": "9f0ee9886ac57341562e79ebb3008f414275701b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0ee9886ac57341562e79ebb3008f414275701b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0ee9886ac57341562e79ebb3008f414275701b"}], "stats": {"total": 665, "additions": 615, "deletions": 50}, "files": [{"sha": "e6c3db06a785d770be8c5eecb7729458225f89cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -1,3 +1,101 @@\n+2011-08-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/50118\n+\t* include/bits/stl_list.h (_List_base<>::\n+\t_List_base(const allocator_type&)): Remove.\n+\t(_List_base<>::_List_base(const _Node_alloc_type&)): Add.\n+\t(list<>:list(const allocator_type&), list(size_type, const\n+\tvalue_type&, const allocator_type&),\n+\tlist(initializer_list<, const allocator_type&),\n+\tlist(_InputIterator, _InputIterator, const allocator_type&),\n+\tinsert(iterator, size_type, const value_type&),\n+\tinsert(iterator, _InputIterator, _InputIterator)): Adjust.\n+\t* include/bits/stl_tree.h (_Rb_tree<>::_Rb_tree(const _Compare&,\n+\tconst allocator_type&)): Fix.\n+\t* include/bits/stl_map.h (map<>::map(const _Compare&,\n+ \tconst allocator_type&), map(initializer_list<>,\n+\tconst _Compare&, const allocator_type&), map(_InputIterator,\n+\t_InputIterator, const _Compare&, const allocator_type&),\n+\tget_allocator): Adjust.\n+\t* include/bits/stl_set.h (set<>::set(const _Compare&,\n+ \tconst allocator_type&), set(initializer_list<>,\n+\tconst _Compare&, const allocator_type&), set(_InputIterator,\n+\t_InputIterator, const _Compare&, const allocator_type&),\n+\tget_allocator): Likewise.\n+\t* include/bits/stl_multimap.h (multimap<>::multimap(const _Compare&,\n+ \tconst allocator_type&), multimap(initializer_list<>,\n+\tconst _Compare&, const allocator_type&), multimap(_InputIterator,\n+\t_InputIterator, const _Compare&, const allocator_type&),\n+\tget_allocator): Likewise.\n+\t* include/bits/stl_multiset.h (multiset<>::multiset(const _Compare&,\n+ \tconst allocator_type&), multiset(initializer_list<>,\n+\tconst _Compare&, const allocator_type&), multiset(_InputIterator,\n+\t_InputIterator, const _Compare&, const allocator_type&),\n+\tget_allocator): Likewise.\n+\t* include/bits/forward_list.h (_Fwd_list_base<>::\n+\t_Fwd_list_base(const _Alloc&), _Fwd_list_base(const _Fwd_list_base&,\n+\tconst _Alloc&), _Fwd_list_base(_Fwd_list_base&&, const _Alloc&)):\n+\tRemove.\n+\t(_Fwd_list_base<>::_Fwd_list_base(const _Node_alloc_type&),\n+\t_Fwd_list_base(const _Fwd_list_base&,\n+\tconst _Node_alloc_type&), _Fwd_list_base(_Fwd_list_base&&,\n+\tconst _Node_alloc_type&)): Add.\n+\t(forward_list<>::forward_list(const _Alloc&),\n+\tforward_list(const forward_list&, const _Alloc&),\n+\tforward_list(forward_list&&, const _Alloc&),\n+\tforward_list(size_type, const _Tp&, const _Alloc&),\n+\tforward_list(_InputIterator, _InputIterator, const _Alloc&),\n+\tforward_list(std::initializer_list<>, const _Alloc&),\n+\tget_allocator): Adjust.\n+\t* include/bits/forward_list.tcc\n+\t* testsuite/util/testsuite_allocator.h (ExplicitConsAlloc): Add.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation/5.cc: New.\n+\t* testsuite/23_containers/multimap/requirements/\n+\texplicit_instantiation/5.cc: Likewise.\n+\t* testsuite/23_containers/multimap/requirements/\n+\texplicit_instantiation/5_c++0x.cc: Likewise.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/\n+\t5.cc: Likewise.\n+\t* testsuite/23_containers/set/requirements/explicit_instantiation/\n+\t5_c++0x.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation/5.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/\n+\texplicit_instantiation/5.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation/5.cc: Likewise.\n+\ttestsuite/23_containers/multiset/requirements/explicit_instantiation/\n+\t5.cc: Likewise.\n+\t* testsuite/23_containers/multiset/requirements/\n+\texplicit_instantiation/5_c++0x.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n+\t5_c++0x.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/explicit_instantiation/\n+\t5.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation/5.cc: Likewise.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n+\t5.cc: Likewise.\n+\t* testsuite/23_containers/map/requirements/explicit_instantiation/\n+\t5_c++0x.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line number.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/insert_neg.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2011-08-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* acinclude.m4 (GLIBCXX_CHECK_MATH_PROTO)"}, {"sha": "c80ee508757272de9b01052cf15244ebd4388432", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -314,12 +314,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _Fwd_list_base()\n       : _M_impl() { }\n \n-      _Fwd_list_base(const _Alloc& __a)\n+      _Fwd_list_base(const _Node_alloc_type& __a)\n       : _M_impl(__a) { }\n \n-      _Fwd_list_base(const _Fwd_list_base& __lst, const _Alloc& __a);\n+      _Fwd_list_base(const _Fwd_list_base& __lst, const _Node_alloc_type& __a);\n \n-      _Fwd_list_base(_Fwd_list_base&& __lst, const _Alloc& __a)\n+      _Fwd_list_base(_Fwd_list_base&& __lst, const _Node_alloc_type& __a)\n       : _M_impl(__a)\n       {\n \tthis->_M_impl._M_head._M_next = __lst._M_impl._M_head._M_next;\n@@ -416,6 +416,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       typedef _Fwd_list_node<_Tp>                          _Node;\n       typedef _Fwd_list_node_base                          _Node_base;\n       typedef typename _Base::_Tp_alloc_type               _Tp_alloc_type;\n+      typedef typename _Base::_Node_alloc_type             _Node_alloc_type;\n \n     public:\n       // types:\n@@ -439,7 +440,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       explicit\n       forward_list(const _Alloc& __al = _Alloc())\n-      : _Base(__al)\n+      : _Base(_Node_alloc_type(__al))\n       { }\n \n       /**\n@@ -448,7 +449,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __al    An allocator object.\n        */\n       forward_list(const forward_list& __list, const _Alloc& __al)\n-      : _Base(__list, __al)\n+      : _Base(__list, _Node_alloc_type(__al))\n       { }\n \n       /**\n@@ -457,7 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  @param  __al    An allocator object.\n        */\n       forward_list(forward_list&& __list, const _Alloc& __al)\n-      : _Base(std::move(__list), __al)\n+      : _Base(std::move(__list), _Node_alloc_type(__al))\n       { }\n \n       /**\n@@ -483,7 +484,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       forward_list(size_type __n, const _Tp& __value,\n                    const _Alloc& __al = _Alloc())\n-      : _Base(__al)\n+      : _Base(_Node_alloc_type(__al))\n       { _M_fill_initialize(__n, __value); }\n \n       /**\n@@ -499,7 +500,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n         forward_list(_InputIterator __first, _InputIterator __last,\n                      const _Alloc& __al = _Alloc())\n-        : _Base(__al)\n+\t: _Base(_Node_alloc_type(__al))\n         {\n           // Check whether it's an integral type.  If so, it's not an iterator.\n           typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n@@ -540,7 +541,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       forward_list(std::initializer_list<_Tp> __il,\n                    const _Alloc& __al = _Alloc())\n-      : _Base(__al)\n+      : _Base(_Node_alloc_type(__al))\n       { _M_initialize_dispatch(__il.begin(), __il.end(), __false_type()); }\n \n       /**\n@@ -649,7 +650,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Get a copy of the memory allocation object.\n       allocator_type\n       get_allocator() const noexcept\n-      { return this->_M_get_Node_allocator(); }\n+      { return allocator_type(this->_M_get_Node_allocator()); }\n \n       // 23.2.3.2 iterators:\n "}, {"sha": "83f32c4e2990d33ab511a6b47643576a556f8087", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -36,7 +36,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n   template<typename _Tp, typename _Alloc>\n     _Fwd_list_base<_Tp, _Alloc>::\n-    _Fwd_list_base(const _Fwd_list_base& __lst, const _Alloc& __a)\n+    _Fwd_list_base(const _Fwd_list_base& __lst, const _Node_alloc_type& __a)\n     : _M_impl(__a)\n     {\n       this->_M_impl._M_head._M_next = 0;\n@@ -250,7 +250,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       if (__n)\n \t{\n-\t  forward_list __tmp(__n, __val, this->_M_get_Node_allocator());\n+\t  forward_list __tmp(__n, __val, get_allocator());\n \t  return _M_splice_after(__pos, std::move(__tmp));\n \t}\n       else\n@@ -264,7 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       insert_after(const_iterator __pos,\n \t\t   _InputIterator __first, _InputIterator __last)\n       {\n-\tforward_list __tmp(__first, __last, this->_M_get_Node_allocator());\n+\tforward_list __tmp(__first, __last, get_allocator());\n \tif (!__tmp.empty())\n \t  return _M_splice_after(__pos, std::move(__tmp));\n \telse\n@@ -278,7 +278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n     {\n       if (__il.size())\n \t{\n-\t  forward_list __tmp(__il, this->_M_get_Node_allocator());\n+\t  forward_list __tmp(__il, get_allocator());\n \t  return _M_splice_after(__pos, std::move(__tmp));\n \t}\n       else"}, {"sha": "91e39f3256c7211f1e66df17fd4da92c7053f77c", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -359,7 +359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       : _M_impl()\n       { _M_init(); }\n \n-      _List_base(const allocator_type& __a)\n+      _List_base(const _Node_alloc_type& __a)\n       : _M_impl(__a)\n       { _M_init(); }\n \n@@ -441,6 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       typedef _List_base<_Tp, _Alloc>                    _Base;\n       typedef typename _Base::_Tp_alloc_type\t\t _Tp_alloc_type;\n+      typedef typename _Base::_Node_alloc_type\t\t _Node_alloc_type;\n \n     public:\n       typedef _Tp                                        value_type;\n@@ -525,7 +526,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       explicit\n       list(const allocator_type& __a)\n-      : _Base(__a) { }\n+      : _Base(_Node_alloc_type(__a)) { }\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n       /**\n@@ -550,7 +551,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       list(size_type __n, const value_type& __value,\n \t   const allocator_type& __a = allocator_type())\n-      : _Base(__a)\n+      : _Base(_Node_alloc_type(__a))\n       { _M_fill_initialize(__n, __value); }\n #else\n       /**\n@@ -564,7 +565,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       explicit\n       list(size_type __n, const value_type& __value = value_type(),\n \t   const allocator_type& __a = allocator_type())\n-      : _Base(__a)\n+      : _Base(_Node_alloc_type(__a))\n       { _M_fill_initialize(__n, __value); }\n #endif\n \n@@ -600,7 +601,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       list(initializer_list<value_type> __l,\n            const allocator_type& __a = allocator_type())\n-      : _Base(__a)\n+      : _Base(_Node_alloc_type(__a))\n       { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }\n #endif\n \n@@ -617,7 +618,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       template<typename _InputIterator>\n         list(_InputIterator __first, _InputIterator __last,\n \t     const allocator_type& __a = allocator_type())\n-        : _Base(__a)\n+\t: _Base(_Node_alloc_type(__a))\n         { \n \t  // Check whether it's an integral type.  If so, it's not an iterator.\n \t  typedef typename std::__is_integer<_InputIterator>::__type _Integral;\n@@ -1100,8 +1101,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       insert(iterator __position, size_type __n, const value_type& __x)\n-      {  \n-\tlist __tmp(__n, __x, _M_get_Node_allocator());\n+      {\n+\tlist __tmp(__n, __x, get_allocator());\n \tsplice(__position, __tmp);\n       }\n \n@@ -1123,7 +1124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         insert(iterator __position, _InputIterator __first,\n \t       _InputIterator __last)\n         {\n-\t  list __tmp(__first, __last, _M_get_Node_allocator());\n+\t  list __tmp(__first, __last, get_allocator());\n \t  splice(__position, __tmp);\n \t}\n "}, {"sha": "889e52b388a9d6623b7eb9d3b66eb57c3fbb2e1a", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -160,7 +160,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       explicit\n       map(const _Compare& __comp,\n \t  const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a) { }\n+      : _M_t(__comp, _Pair_alloc_type(__a)) { }\n \n       /**\n        *  @brief  %Map copy constructor.\n@@ -198,7 +198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       map(initializer_list<value_type> __l,\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a)\n+      : _M_t(__comp, _Pair_alloc_type(__a))\n       { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n #endif\n \n@@ -233,7 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         map(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp,\n \t    const allocator_type& __a = allocator_type())\n-\t: _M_t(__comp, __a)\n+\t: _M_t(__comp, _Pair_alloc_type(__a))\n         { _M_t._M_insert_unique(__first, __last); }\n \n       // FIXME There is no dtor declared, but we should have something\n@@ -300,7 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Get a copy of the memory allocation object.\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n-      { return _M_t.get_allocator(); }\n+      { return allocator_type(_M_t.get_allocator()); }\n \n       // iterators\n       /**"}, {"sha": "6b74558948c2996a427aff7000ae3489bda124bd", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -158,7 +158,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       explicit\n       multimap(const _Compare& __comp,\n \t       const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a) { }\n+      : _M_t(__comp, _Pair_alloc_type(__a)) { }\n \n       /**\n        *  @brief  %Multimap copy constructor.\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       multimap(initializer_list<value_type> __l,\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a)\n+      : _M_t(__comp, _Pair_alloc_type(__a))\n       { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n #endif\n \n@@ -228,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         multimap(_InputIterator __first, _InputIterator __last,\n \t\t const _Compare& __comp,\n \t\t const allocator_type& __a = allocator_type())\n-        : _M_t(__comp, __a)\n+\t: _M_t(__comp, _Pair_alloc_type(__a))\n         { _M_t._M_insert_equal(__first, __last); }\n \n       // FIXME There is no dtor declared, but we should have something generated\n@@ -295,7 +295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /// Get a copy of the memory allocation object.\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT \n-      { return _M_t.get_allocator(); }\n+      { return allocator_type(_M_t.get_allocator()); }\n \n       // iterators\n       /**"}, {"sha": "8b25a97548041b932f651f16f78f19c93e583357", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -139,7 +139,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       explicit\n       multiset(const _Compare& __comp,\n \t       const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a) { }\n+      : _M_t(__comp, _Key_alloc_type(__a)) { }\n \n       /**\n        *  @brief  Builds a %multiset from a range.\n@@ -170,7 +170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         multiset(_InputIterator __first, _InputIterator __last,\n \t\t const _Compare& __comp,\n \t\t const allocator_type& __a = allocator_type())\n-\t: _M_t(__comp, __a)\n+\t: _M_t(__comp, _Key_alloc_type(__a))\n         { _M_t._M_insert_equal(__first, __last); }\n \n       /**\n@@ -208,7 +208,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       multiset(initializer_list<value_type> __l,\n \t       const _Compare& __comp = _Compare(),\n \t       const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a)\n+      : _M_t(__comp, _Key_alloc_type(__a))\n       { _M_t._M_insert_equal(__l.begin(), __l.end()); }\n #endif\n \n@@ -278,7 +278,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       ///  Returns the memory allocation object.\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n-      { return _M_t.get_allocator(); }\n+      { return allocator_type(_M_t.get_allocator()); }\n \n       /**\n        *  Returns a read-only (constant) iterator that points to the first"}, {"sha": "b30966a229222527517560d502d3134d2b7782fd", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -146,7 +146,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       explicit\n       set(const _Compare& __comp,\n \t  const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a) { }\n+      : _M_t(__comp, _Key_alloc_type(__a)) { }\n \n       /**\n        *  @brief  Builds a %set from a range.\n@@ -179,8 +179,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \tset(_InputIterator __first, _InputIterator __last,\n \t    const _Compare& __comp,\n \t    const allocator_type& __a = allocator_type())\n-\t: _M_t(__comp, __a)\n-\t{ _M_t._M_insert_unique(__first, __last); }\n+\t: _M_t(__comp, _Key_alloc_type(__a))\n+        { _M_t._M_insert_unique(__first, __last); }\n \n       /**\n        *  @brief  %Set copy constructor.\n@@ -217,7 +217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       set(initializer_list<value_type> __l,\n \t  const _Compare& __comp = _Compare(),\n \t  const allocator_type& __a = allocator_type())\n-      : _M_t(__comp, __a)\n+      : _M_t(__comp, _Key_alloc_type(__a))\n       { _M_t._M_insert_unique(__l.begin(), __l.end()); }\n #endif\n \n@@ -286,7 +286,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       ///  Returns the allocator object with which the %set was constructed.\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n-      { return _M_t.get_allocator(); }\n+      { return allocator_type(_M_t.get_allocator()); }\n \n       /**\n        *  Returns a read-only (constant) iterator that points to the first"}, {"sha": "8c5f0c30a0f55e04244fc0c2d0fce98e54700573", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -624,7 +624,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       _Rb_tree(const _Compare& __comp,\n \t       const allocator_type& __a = allocator_type())\n-      : _M_impl(__comp, __a) { }\n+      : _M_impl(__comp, _Node_allocator(__a)) { }\n \n       _Rb_tree(const _Rb_tree& __x)\n       : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())"}, {"sha": "7dd46e1fb4841cd7fb172d6cbe76939d70a8282c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -1,8 +1,8 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1211 }\n \n-// Copyright (C) 2009, 2010 Free Software Foundation\n+// Copyright (C) 2009, 2010, 2011 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "e8e4d5700190bd4ee6d9161a9fd6ae68f8864b24", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1211 }\n \n // Copyright (C) 2009, 2010, 2011 Free Software Foundation\n //"}, {"sha": "0ea7d2b7335990d12cf7dd03644d0c47fdabb063", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1211 }\n \n // Copyright (C) 2009, 2010, 2011 Free Software Foundation\n //"}, {"sha": "8d7844cabe4d7defaf8398a6cedf8c8cae67c926", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1210 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1211 }\n \n // Copyright (C) 2009, 2010, 2011 Free Software Foundation\n //"}, {"sha": "109057c973823f921a1d64845af1bbf64931debb", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <forward_list>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::forward_list<int, __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::forward_list<int, __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "f53082d1aa1331fc94451d28a5f1d0a8cf74bb8a", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1498 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1499 }\n \n #include <list>\n "}, {"sha": "f0af9715138cd8f4e67232920b1104054334826c", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1454 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1455 }\n \n #include <list>\n "}, {"sha": "168d592361d06e5d89b333add531dab5e4379494", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1454 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1455 }\n \n #include <list>\n #include <utility>"}, {"sha": "32bfd53e7c1bb11df52aa6ce0c9bd0d65a536e8d", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -18,7 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-do compile }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1454 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1455 }\n \n #include <list>\n "}, {"sha": "965eb9ef953564e43de20fb59e50b879bc0264ef", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,27 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <list>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::list<int, __gnu_test::ExplicitConsAlloc<int> >;\n+template class std::list<int, __gnu_test::ExplicitConsAlloc<char> >;"}, {"sha": "83f207c17f2ed050cc751ca8ef62124355d34e0a", "filename": "libstdc++-v3/testsuite/23_containers/list/requirements/explicit_instantiation/5_c++0x.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,29 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <list>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::list<int, __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::list<int, __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "b4fbfff56e0f8597f7c9002aed7b4ba6a4b7eaeb", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::map<int, int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<int> >;\n+template class std::map<int, int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<char> >;"}, {"sha": "3f9a7f8d70f0599fd1d7568eb8acd2a60d2f6147", "filename": "libstdc++-v3/testsuite/23_containers/map/requirements/explicit_instantiation/5_c++0x.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::map<int, int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<int>>;\n+template class std::map<int, int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "1d49e58806911d7085018631d6f097084330c9da", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::multimap<int, int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<int> >;\n+template class std::multimap<int, int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<char> >;"}, {"sha": "195f83b2d978b2d4adf5401dd3aba059d963364d", "filename": "libstdc++-v3/testsuite/23_containers/multimap/requirements/explicit_instantiation/5_c++0x.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::multimap<int, int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::multimap<int, int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "2cb307d470ff6e5cd1cfe900231c90ee5edb63e4", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::multiset<int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<int> >;\n+template class std::multiset<int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<char> >;"}, {"sha": "2eea2c90db1992abccbdb925cd793753919f3251", "filename": "libstdc++-v3/testsuite/23_containers/multiset/requirements/explicit_instantiation/5_c++0x.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::multiset<int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::multiset<int, std::less<int>,\n+\t\t\t     __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "32cd69555cd366f0fdad83331351c815844b4d14", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::set<int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<int> >;\n+template class std::set<int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<char> >;"}, {"sha": "2e44282a4cb0353cac665f3130d115a320ef1102", "filename": "libstdc++-v3/testsuite/23_containers/set/requirements/explicit_instantiation/5_c++0x.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Frequirements%2Fexplicit_instantiation%2F5_c%2B%2B0x.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::set<int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<int>>;\n+template class std::set<int, std::less<int>,\n+\t\t\t__gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "f2bd46dd0cc92414b437464508da1001f192c054", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_map>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::unordered_map<int, int, std::hash<int>, std::equal_to<int>,\n+\t\t\t\t  __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::unordered_map<int, int, std::hash<int>, std::equal_to<int>,\n+\t\t\t\t  __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "b8574b145422265f3c8731c4cc05bf0c54f268c4", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_map>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::unordered_multimap<int, int, std::hash<int>,\n+\t\t\t\t       std::equal_to<int>,\n+\t\t\t\t       __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::unordered_multimap<int, int, std::hash<int>,\n+\t\t\t\t       std::equal_to<int>,\n+\t\t\t\t       __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "20c6e9647934e72abec0ed6e93ca35fdebfe27ef", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_set>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::unordered_multiset<int, std::hash<int>, std::equal_to<int>,\n+\t\t\t\t       __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::unordered_multiset<int, std::hash<int>, std::equal_to<int>,\n+\t\t\t\t       __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "53ce07008d1c28764a1ea2f6f6536ef634f37a1f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation/5.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation%2F5.cc?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// This file tests explicit instantiation of library containers\n+\n+#include <unordered_set>\n+#include <testsuite_allocator.h>\n+\n+// { dg-do compile }\n+\n+// libstdc++/50118\n+template class std::unordered_set<int, std::hash<int>, std::equal_to<int>,\n+\t\t\t\t  __gnu_test::ExplicitConsAlloc<int>>;\n+template class std::unordered_set<int, std::hash<int>, std::equal_to<int>,\n+\t\t\t\t  __gnu_test::ExplicitConsAlloc<char>>;"}, {"sha": "279c42d1a30a1e29894c66468dbcc5eecd181c21", "filename": "libstdc++-v3/testsuite/util/testsuite_allocator.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff15f019e014d1d41e4a78d289f4f61873d62bd8/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_allocator.h?ref=ff15f019e014d1d41e4a78d289f4f61873d62bd8", "patch": "@@ -434,6 +434,20 @@ namespace __gnu_test\n \n #endif\n \n+  template<typename Tp>\n+    struct ExplicitConsAlloc : std::allocator<Tp>\n+    {\n+      ExplicitConsAlloc() { }\n+\n+      template<typename Up>\n+        explicit\n+        ExplicitConsAlloc(const ExplicitConsAlloc<Up>&) { }\n+\n+      template<typename Up>\n+        struct rebind\n+        { typedef ExplicitConsAlloc<Up> other; };\n+    };\n+\n } // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H"}]}