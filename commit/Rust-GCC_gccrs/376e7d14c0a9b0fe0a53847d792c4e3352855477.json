{"sha": "376e7d14c0a9b0fe0a53847d792c4e3352855477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc2ZTdkMTRjMGE5YjBmZTBhNTM4NDdkNzkyYzRlMzM1Mjg1NTQ3Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T11:58:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-21T11:58:20Z"}, "message": "[multiple changes]\n\n2014-01-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_ch5.adb: Fix comment.\n\t* switch-c.adb: Minor comment update.\n\t* exp_ch3.adb: Minor reformatting.\n\n2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n\n\t* back_end.adb (Scan_Compiler_Arguments): Do not store object\n\tfilename in gnatprove mode.\n\n2014-01-21  Thomas Quinot  <quinot@adacore.com>\n\n\t* sinfo.ads (No_Ctrl_Actions): Clarify documentation (flag also\n\tsuppresses usage of primitive _assign for tagged types).\n\t* exp_aggr.adb (Build_Array_Aggr_Code.Gen_Assign): Set\n\tNo_Ctrl_Actions for a tagged type that does not require\n\tfinalization, as we want to disable usage of _assign (which\n\tmay cause undesirable discriminant checks on an uninitialized,\n\tinvalid target).\n\n2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb: Reject invariant'class on completion.\n\nFrom-SVN: r206878", "tree": {"sha": "f73ec3fd30eacc8b47aef1f4811b12bc847f1755", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f73ec3fd30eacc8b47aef1f4811b12bc847f1755"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/376e7d14c0a9b0fe0a53847d792c4e3352855477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376e7d14c0a9b0fe0a53847d792c4e3352855477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/376e7d14c0a9b0fe0a53847d792c4e3352855477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/376e7d14c0a9b0fe0a53847d792c4e3352855477/comments", "author": null, "committer": null, "parents": [{"sha": "e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b37cb6d56df2dc6c3d2bb441fce227c3c5d254"}], "stats": {"total": 121, "additions": 81, "deletions": 40}, "files": [{"sha": "859e5e04fd617536e4a14389e8cde5d2c5df6c6e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -1,3 +1,28 @@\n+2014-01-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_ch5.adb: Fix comment.\n+\t* switch-c.adb: Minor comment update.\n+\t* exp_ch3.adb: Minor reformatting.\n+\n+2014-01-21  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* back_end.adb (Scan_Compiler_Arguments): Do not store object\n+\tfilename in gnatprove mode.\n+\n+2014-01-21  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sinfo.ads (No_Ctrl_Actions): Clarify documentation (flag also\n+\tsuppresses usage of primitive _assign for tagged types).\n+\t* exp_aggr.adb (Build_Array_Aggr_Code.Gen_Assign): Set\n+\tNo_Ctrl_Actions for a tagged type that does not require\n+\tfinalization, as we want to disable usage of _assign (which\n+\tmay cause undesirable discriminant checks on an uninitialized,\n+\tinvalid target).\n+\n+2014-01-21  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb: Reject invariant'class on completion.\n+\n 2014-01-21  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_ch3.adb (Build_Init_Procedure): For"}, {"sha": "89cf3031338b3b5c8940d10b6b7deab4b5a8917b", "filename": "gcc/ada/back_end.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fback_end.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fback_end.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fback_end.adb?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -295,6 +295,14 @@ package body Back_End is\n                if Is_Switch (Argv) then\n                   Fail (\"Object file name missing after -gnatO\");\n \n+               --  In GNATprove_Mode, such an object file is never written, and\n+               --  the call to Set_Output_Object_File_Name may fail (e.g. when\n+               --  the object file name does not have the expected suffix). So\n+               --  we skip that call when GNATprove_Mode is set.\n+\n+               elsif GNATprove_Mode then\n+                  Output_File_Name_Seen := True;\n+\n                else\n                   Set_Output_Object_File_Name (Argv);\n                   Output_File_Name_Seen := True;"}, {"sha": "1492650836859e8c664c231d8d77f642b9c63a17", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -1176,47 +1176,50 @@ package body Exp_Aggr is\n             end if;\n \n          else\n-            --  Now generate the assignment with no associated controlled\n-            --  actions since the target of the assignment may not have been\n-            --  initialized, it is not possible to Finalize it as expected by\n-            --  normal controlled assignment. The rest of the controlled\n-            --  actions are done manually with the proper finalization list\n-            --  coming from the context.\n-\n             A :=\n               Make_OK_Assignment_Statement (Loc,\n                 Name       => Indexed_Comp,\n                 Expression => New_Copy_Tree (Expr));\n \n-            if Present (Comp_Type) and then Needs_Finalization (Comp_Type) then\n-               Set_No_Ctrl_Actions (A);\n+            --  The target of the assignment may not have been initialized,\n+            --  so it is not possible to call Finalize as expected in normal\n+            --  controlled assignments. We must also avoid using the primitive\n+            --  _assign (which depends on a valid target, and may for example\n+            --  perform discriminant checks on it).\n \n-               --  If this is an aggregate for an array of arrays, each\n-               --  sub-aggregate will be expanded as well, and even with\n-               --  No_Ctrl_Actions the assignments of inner components will\n-               --  require attachment in their assignments to temporaries.\n-               --  These temporaries must be finalized for each subaggregate,\n-               --  to prevent multiple attachments of the same temporary\n-               --  location to same finalization chain (and consequently\n-               --  circular lists). To ensure that finalization takes place\n-               --  for each subaggregate we wrap the assignment in a block.\n+            --  Both Finalize and usage of _assign are disabled by setting\n+            --  No_Ctrl_Actions on the assignment. The rest of the controlled\n+            --  actions are done manually with the proper finalization list\n+            --  coming from the context.\n \n-               if Is_Array_Type (Comp_Type)\n-                 and then Nkind (Expr) = N_Aggregate\n-               then\n-                  A :=\n-                    Make_Block_Statement (Loc,\n+            Set_No_Ctrl_Actions (A);\n+\n+            --  If this is an aggregate for an array of arrays, each\n+            --  sub-aggregate will be expanded as well, and even with\n+            --  No_Ctrl_Actions the assignments of inner components will\n+            --  require attachment in their assignments to temporaries. These\n+            --  temporaries must be finalized for each subaggregate, to prevent\n+            --  multiple attachments of the same temporary location to same\n+            --  finalization chain (and consequently circular lists). To ensure\n+            --  that finalization takes place for each subaggregate we wrap the\n+            --  assignment in a block.\n+\n+            if Present (Comp_Type)\n+                 and then Needs_Finalization (Comp_Type)\n+                 and then Is_Array_Type (Comp_Type)\n+                 and then Present (Expr)\n+            then\n+               A := Make_Block_Statement (Loc,\n                       Handled_Statement_Sequence =>\n                         Make_Handled_Sequence_Of_Statements (Loc,\n                            Statements => New_List (A)));\n-               end if;\n             end if;\n \n             Append_To (L, A);\n \n             --  Adjust the tag if tagged (because of possible view\n-            --  conversions), unless compiling for a VM where\n-            --  tags are implicit.\n+            --  conversions), unless compiling for a VM where tags\n+            --  are implicit.\n \n             if Present (Comp_Type)\n               and then Is_Tagged_Type (Comp_Type)\n@@ -2465,9 +2468,9 @@ package body Exp_Aggr is\n                Ref := Convert_To (Init_Typ, New_Copy_Tree (Target));\n                Set_Assignment_OK (Ref);\n \n-               --  Make the assignment without usual controlled actions since\n-               --  we only want the post adjust but not the pre finalize here\n-               --  Add manual adjust when necessary.\n+               --  Make the assignment without usual controlled actions, since\n+               --  we only want to Adjust afterwards, but not to Finalize\n+               --  beforehand. Add manual Adjust when necessary.\n \n                Assign := New_List (\n                  Make_OK_Assignment_Statement (Loc,\n@@ -2530,10 +2533,10 @@ package body Exp_Aggr is\n             end if;\n          end;\n \n-         --  Generate assignments of hidden assignments. If the base type is an\n-         --  unchecked union, the discriminants are unknown to the back-end and\n-         --  absent from a value of the type, so assignments for them are not\n-         --  emitted.\n+         --  Generate assignments of hidden discriminants. If the base type is\n+         --  an unchecked union, the discriminants are unknown to the back-end\n+         --  and absent from a value of the type, so assignments for them are\n+         --  not emitted.\n \n          if Has_Discriminants (Typ)\n            and then not Is_Unchecked_Union (Base_Type (Typ))"}, {"sha": "4a0fdf67d73e85f50daae7454768ec7d32528a9c", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -1863,9 +1863,7 @@ package body Exp_Ch3 is\n          --  Suppress the tag adjustment when VM_Target because VM tags are\n          --  represented implicitly in objects.\n \n-         if Is_Tagged_Type (Typ)\n-           and then Tagged_Type_Expansion\n-         then\n+         if Is_Tagged_Type (Typ) and then Tagged_Type_Expansion then\n             Append_To (Res,\n               Make_Assignment_Statement (N_Loc,\n                 Name       =>"}, {"sha": "321086205194a4a8b49c3b8b71398633e1cf3ead", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -2082,7 +2082,7 @@ package body Exp_Ch5 is\n                --  by a dispatching call to _assign. It is suppressed in the\n                --  case of assignments created by the expander that correspond\n                --  to initializations, where we do want to copy the tag\n-               --  (Expand_Ctrl_Actions flag is set True in this case). It is\n+               --  (Expand_Ctrl_Actions flag is set False in this case). It is\n                --  also suppressed if restriction No_Dispatching_Calls is in\n                --  force because in that case predefined primitives are not\n                --  generated."}, {"sha": "399753a365eb977329596deef9989f5260d2d347", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -14497,6 +14497,8 @@ package body Sem_Prag is\n \n             --  An invariant must apply to a private type, or appear in the\n             --  private part of a package spec and apply to a completion.\n+            --  a class-wide invariant can only appear on a private declaration\n+            --  or private extension, not a completion.\n \n             elsif Ekind_In (Typ, E_Private_Type,\n                                  E_Record_Type_With_Private,\n@@ -14506,6 +14508,7 @@ package body Sem_Prag is\n \n             elsif In_Private_Part (Current_Scope)\n               and then Has_Private_Declaration (Typ)\n+              and then not Class_Present (N)\n             then\n                null;\n "}, {"sha": "e036c5fd1c833690d95d75039b52717a82886f90", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -1684,8 +1684,10 @@ package Sinfo is\n    --  No_Ctrl_Actions (Flag7-Sem)\n    --    Present in N_Assignment_Statement to indicate that no Finalize nor\n    --    Adjust should take place on this assignment even though the RHS is\n-   --    controlled. This is used in init procs and aggregate expansions where\n-   --    the generated assignments are initializations, not real assignments.\n+   --    controlled. Also indicates that the primitive _assign should not be\n+   --    used for a tagged assignment. This is used in init procs and aggregate\n+   --    expansions where the generated assignments are initializations, not\n+   --    real assignments.\n \n    --  No_Elaboration_Check (Flag14-Sem)\n    --    Present in N_Function_Call and N_Procedure_Call_Statement. Indicates"}, {"sha": "201a99d1619c220699c63261374d61b686403887", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/376e7d14c0a9b0fe0a53847d792c4e3352855477/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=376e7d14c0a9b0fe0a53847d792c4e3352855477", "patch": "@@ -686,7 +686,9 @@ package body Switch.C is\n                   --  -gnateS (generate SCO information)\n \n                   --  Include Source Coverage Obligation information in ALI\n-                  --  files for use by source coverage analysis tools (xcov).\n+                  --  files for use by source coverage analysis tools\n+                  --  (gnatcov) (equivalent to -fdump-scos, provided for\n+                  --  backwards compatibility).\n \n                   when 'S' =>\n                      Generate_SCO := True;"}]}