{"sha": "918e8b10a716ec720215afafb7baa1b9b75e4fa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4ZThiMTBhNzE2ZWM3MjAyMTVhZmFmYjdiYWExYjliNzVlNGZhMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T12:59:48Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-03T13:16:19Z"}, "message": "libcpp: dependency emission tidying\n\nThis patch cleans up the interface to the dependency generation a\nlittle.  We now only check the option in one place, and the\ncpp_get_deps function returns nullptr if there are no dependencies.  I\nalso reworded the -MT and -MQ help text to be make agnostic -- as\nthere are ideas about emitting, say, JSON.\n\n\tlibcpp/\n\t* include/mkdeps.h: Include cpplib.h\n\t(deps_write): Adjust first parm type.\n\t* mkdeps.c: Include internal.h\n\t(make_write): Adjust first parm type.  Check phony option\n\tdirectly.\n\t(deps_write): Adjust first parm type.\n\t* init.c (cpp_read_main_file): Use get_deps.\n\t* directives.c (cpp_get_deps): Check option before initializing.\n\tgcc/c-family/\n\t* c.opt (MQ,MT): Reword description to be make-agnostic.\n\tgcc/fortran/\n\t* cpp.c (gfc_cpp_add_dep): Only add dependency if we're recording\n\tthem.\n\t(gfc_cpp_init): Likewise for target.", "tree": {"sha": "48548ad8236285ceca1910f4a6413b1c99126891", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48548ad8236285ceca1910f4a6413b1c99126891"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918e8b10a716ec720215afafb7baa1b9b75e4fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918e8b10a716ec720215afafb7baa1b9b75e4fa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918e8b10a716ec720215afafb7baa1b9b75e4fa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918e8b10a716ec720215afafb7baa1b9b75e4fa1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7d6961126a7f06c8089d8a58bd21be43bc16806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7d6961126a7f06c8089d8a58bd21be43bc16806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7d6961126a7f06c8089d8a58bd21be43bc16806"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "426636be83956304535dbb61041c20b8b17fd8ce", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918e8b10a716ec720215afafb7baa1b9b75e4fa1/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918e8b10a716ec720215afafb7baa1b9b75e4fa1/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=918e8b10a716ec720215afafb7baa1b9b75e4fa1", "patch": "@@ -242,11 +242,11 @@ Generate phony targets for all headers.\n \n MQ\n C ObjC C++ ObjC++ Joined Separate MissingArgError(missing makefile target after %qs)\n--MQ <target>\tAdd a MAKE-quoted target.\n+-MQ <target>\tAdd a target that may require quoting.\n \n MT\n C ObjC C++ ObjC++ Joined Separate MissingArgError(missing makefile target after %qs)\n--MT <target>\tAdd an unquoted target.\n+-MT <target>\tAdd a target that does not require quoting.\n \n P\n C ObjC C++ ObjC++"}, {"sha": "51baf141711353079cef0a20b00cd277959349c1", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918e8b10a716ec720215afafb7baa1b9b75e4fa1/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918e8b10a716ec720215afafb7baa1b9b75e4fa1/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=918e8b10a716ec720215afafb7baa1b9b75e4fa1", "patch": "@@ -222,13 +222,15 @@ void\n gfc_cpp_add_dep (const char *name, bool system)\n {\n   if (!gfc_cpp_option.deps_skip_system || !system)\n-    deps_add_dep (cpp_get_deps (cpp_in), name);\n+    if (mkdeps *deps = cpp_get_deps (cpp_in))\n+      deps_add_dep (deps, name);\n }\n \n void\n gfc_cpp_add_target (const char *name)\n {\n-  deps_add_target (cpp_get_deps (cpp_in), name, 0);\n+  if (mkdeps *deps = cpp_get_deps (cpp_in))\n+    deps_add_target (deps, name, 0);\n }\n \n \n@@ -605,8 +607,8 @@ gfc_cpp_init (void)\n \t    cpp_assert (cpp_in, opt->arg);\n \t}\n       else if (opt->code == OPT_MT || opt->code == OPT_MQ)\n-\tdeps_add_target (cpp_get_deps (cpp_in),\n-\t\t\t opt->arg, opt->code == OPT_MQ);\n+\tif (mkdeps *deps = cpp_get_deps (cpp_in))\n+\t  deps_add_target (deps, opt->arg, opt->code == OPT_MQ);\n     }\n \n   /* Pre-defined macros for non-required INTEGER kind types.  */"}, {"sha": "4295a67f1e5de812e7c6281e221571fdf9075d69", "filename": "libcpp/directives.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=918e8b10a716ec720215afafb7baa1b9b75e4fa1", "patch": "@@ -2572,7 +2572,7 @@ cpp_set_callbacks (cpp_reader *pfile, cpp_callbacks *cb)\n class mkdeps *\n cpp_get_deps (cpp_reader *pfile)\n {\n-  if (!pfile->deps)\n+  if (!pfile->deps && CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n     pfile->deps = deps_init ();\n   return pfile->deps;\n }"}, {"sha": "593b718aaeb07238dab0abdcd3041b9435b52bb2", "filename": "libcpp/include/mkdeps.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Finclude%2Fmkdeps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Finclude%2Fmkdeps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fmkdeps.h?ref=918e8b10a716ec720215afafb7baa1b9b75e4fa1", "patch": "@@ -23,6 +23,8 @@ along with this program; see the file COPYING3.  If not see\n #ifndef LIBCPP_MKDEPS_H\n #define LIBCPP_MKDEPS_H\n \n+#include \"cpplib.h\"\n+\n /* This is the data structure used by all the functions in mkdeps.c.\n    It's quite straightforward, but should be treated as opaque.  */\n \n@@ -55,9 +57,9 @@ extern void deps_add_default_target (class mkdeps *, const char *);\n    dependency entered should be the primary source file.  */\n extern void deps_add_dep (class mkdeps *, const char *);\n \n-/* Write out a deps buffer to a specified file.  The third argument\n+/* Write out a deps buffer to a specified file.  The last argument\n    is the number of columns to word-wrap at (0 means don't wrap).  */\n-extern void deps_write (const class mkdeps *, FILE *, bool, unsigned int);\n+extern void deps_write (const cpp_reader *, FILE *, unsigned int);\n \n /* Write out a deps buffer to a file, in a form that can be read back\n    with deps_restore.  Returns nonzero on error, in which case the"}, {"sha": "5b2607e3767ee2dad7ae4c073055ceba0fba68e7", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=918e8b10a716ec720215afafb7baa1b9b75e4fa1", "patch": "@@ -667,14 +667,9 @@ cpp_post_options (cpp_reader *pfile)\n const char *\n cpp_read_main_file (cpp_reader *pfile, const char *fname, bool injecting)\n {\n-  if (CPP_OPTION (pfile, deps.style) != DEPS_NONE)\n-    {\n-      if (!pfile->deps)\n-\tpfile->deps = deps_init ();\n-\n-      /* Set the default target (if there is none already).  */\n-      deps_add_default_target (pfile->deps, fname);\n-    }\n+  if (mkdeps *deps = cpp_get_deps (pfile))\n+    /* Set the default target (if there is none already).  */\n+    deps_add_default_target (pfile->deps, fname);\n \n   pfile->main_file\n     = _cpp_find_file (pfile, fname, &pfile->no_search_path, /*angle=*/0,\n@@ -813,9 +808,8 @@ cpp_finish (cpp_reader *pfile, FILE *deps_stream)\n   while (pfile->buffer)\n     _cpp_pop_buffer (pfile);\n \n-  if (CPP_OPTION (pfile, deps.style) != DEPS_NONE && deps_stream)\n-    deps_write (pfile->deps, deps_stream,\n-\t\tCPP_OPTION (pfile, deps.phony_targets), 72);\n+  if (deps_stream)\n+    deps_write (pfile, deps_stream, 72);\n \n   /* Report on headers that could use multiple include guards.  */\n   if (CPP_OPTION (pfile, print_include_names))"}, {"sha": "ea5f060c380e3e0231bda11fefba2381b216a538", "filename": "libcpp/mkdeps.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918e8b10a716ec720215afafb7baa1b9b75e4fa1/libcpp%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmkdeps.c?ref=918e8b10a716ec720215afafb7baa1b9b75e4fa1", "patch": "@@ -23,6 +23,7 @@ along with this program; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"mkdeps.h\"\n+#include \"internal.h\"\n \n /* Not set up to just include std::vector et al, here's a simple\n    implementation.  */\n@@ -367,8 +368,10 @@ make_write_vec (const mkdeps::vec<const char *> &vec, FILE *fp,\n    .PHONY targets for all the dependencies too.  */\n \n static void\n-make_write (const class mkdeps *d, FILE *fp, bool phony, unsigned int colmax)\n+make_write (const cpp_reader *pfile, FILE *fp, unsigned int colmax)\n {\n+  const mkdeps *d = pfile->deps;\n+\n   unsigned column = 0;\n   if (colmax && colmax < 34)\n     colmax = 34;\n@@ -380,19 +383,20 @@ make_write (const class mkdeps *d, FILE *fp, bool phony, unsigned int colmax)\n       column++;\n       make_write_vec (d->deps, fp, column, colmax);\n       fputs (\"\\n\", fp);\n-      if (phony)\n+      if (CPP_OPTION (pfile, deps.phony_targets))\n \tfor (unsigned i = 1; i < d->deps.size (); i++)\n \t  fprintf (fp, \"%s:\\n\", munge (d->deps[i]));\n     }\n }\n \n /* Write out dependencies according to the selected format (which is\n    only Make at the moment).  */\n+/* Really we should be opening fp here.  */\n \n void\n-deps_write (const class mkdeps *d, FILE *fp, bool phony, unsigned int colmax)\n+deps_write (const cpp_reader *pfile, FILE *fp, unsigned int colmax)\n {\n-  make_write (d, fp, phony, colmax);\n+  make_write (pfile, fp, colmax);\n }\n \n /* Write out a deps buffer to a file, in a form that can be read back"}]}