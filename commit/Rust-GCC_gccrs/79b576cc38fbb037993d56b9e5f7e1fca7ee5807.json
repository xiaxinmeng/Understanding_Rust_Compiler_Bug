{"sha": "79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliNTc2Y2MzOGZiYjAzNzk5M2Q1NmI5ZTVmN2UxZmNhN2VlNTgwNw==", "commit": {"author": {"name": "Tim Shen", "email": "timshen@google.com", "date": "2014-11-13T07:40:01Z"}, "committer": {"name": "Tim Shen", "email": "timshen@gcc.gnu.org", "date": "2014-11-13T07:40:01Z"}, "message": "re PR libstdc++/63775 ([C++11] Regex range with leading dash (-) not working)\n\n\tPR libstdc++/63775\n\t* include/bits/regex_compiler.h (_Compiler<>::_M_expression_term,\n\t_BracketMatcher<>::_M_make_range): Throw regex_erorr on invalid range\n\tlike [z-a]. Change _M_expression_term interface.\n\t* include/bits/regex_compiler.tcc (\n\t_Compiler<>::_M_insert_bracket_matcher,\n\t_Compiler<>::_M_expression_term): Rewrite bracket expression parsing.\n\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n\tAdd testcases and move file out of extended.\n\nFrom-SVN: r217461", "tree": {"sha": "68d467d9153828b89fbe9883b742b813cd151326", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68d467d9153828b89fbe9883b742b813cd151326"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/comments", "author": {"login": "timshen91", "id": 1157432, "node_id": "MDQ6VXNlcjExNTc0MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/1157432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timshen91", "html_url": "https://github.com/timshen91", "followers_url": "https://api.github.com/users/timshen91/followers", "following_url": "https://api.github.com/users/timshen91/following{/other_user}", "gists_url": "https://api.github.com/users/timshen91/gists{/gist_id}", "starred_url": "https://api.github.com/users/timshen91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timshen91/subscriptions", "organizations_url": "https://api.github.com/users/timshen91/orgs", "repos_url": "https://api.github.com/users/timshen91/repos", "events_url": "https://api.github.com/users/timshen91/events{/privacy}", "received_events_url": "https://api.github.com/users/timshen91/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a134b2aa3328e3707774661c7b727a8270758c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a134b2aa3328e3707774661c7b727a8270758c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a134b2aa3328e3707774661c7b727a8270758c3"}], "stats": {"total": 133, "additions": 116, "deletions": 17}, "files": [{"sha": "58563cd75b74ae03304a10564ac3d240df0cbfdb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "patch": "@@ -1,3 +1,15 @@\n+2014-11-13  Tim Shen  <timshen@google.com>\n+\n+\tPR libstdc++/63775\n+\t* include/bits/regex_compiler.h (_Compiler<>::_M_expression_term,\n+\t_BracketMatcher<>::_M_make_range): Throw regex_erorr on invalid range\n+\tlike [z-a]. Change _M_expression_term interface.\n+\t* include/bits/regex_compiler.tcc (\n+\t_Compiler<>::_M_insert_bracket_matcher,\n+\t_Compiler<>::_M_expression_term): Rewrite bracket expression parsing.\n+\t* testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc:\n+\tAdd testcases and move file out of extended.\n+\n 2014-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/57250"}, {"sha": "d8880cc4794fab62df917fabdf8de07d746c07a2", "filename": "libstdc++-v3/include/bits/regex_compiler.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.h?ref=79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "patch": "@@ -118,7 +118,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<bool __icase, bool __collate>\n \tvoid\n-\t_M_expression_term(_BracketMatcher<_TraitsT, __icase, __collate>&\n+\t_M_expression_term(pair<bool, _CharT>& __last_char,\n+\t\t\t   _BracketMatcher<_TraitsT, __icase, __collate>&\n \t\t\t   __matcher);\n \n       int\n@@ -390,6 +391,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       _M_make_range(_CharT __l, _CharT __r)\n       {\n+\tif (__l > __r)\n+\t  __throw_regex_error(regex_constants::error_range);\n \t_M_range_set.push_back(make_pair(_M_translator._M_transform(__l),\n \t\t\t\t\t _M_translator._M_transform(__r)));\n #ifdef _GLIBCXX_DEBUG"}, {"sha": "f9598843751500ba35038c830c46da106d147481", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 49, "deletions": 16, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "patch": "@@ -415,8 +415,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_insert_bracket_matcher(bool __neg)\n     {\n       _BracketMatcher<_TraitsT, __icase, __collate> __matcher(__neg, _M_traits);\n+      pair<bool, _CharT> __last_char; // Optional<_CharT>\n+      __last_char.first = false;\n+      if (!(_M_flags & regex_constants::ECMAScript))\n+\tif (_M_try_char())\n+\t  {\n+\t    __matcher._M_add_char(_M_value[0]);\n+\t    __last_char.first = true;\n+\t    __last_char.second = _M_value[0];\n+\t  }\n       while (!_M_match_token(_ScannerT::_S_token_bracket_end))\n-\t_M_expression_term(__matcher);\n+\t_M_expression_term(__last_char, __matcher);\n       __matcher._M_ready();\n       _M_stack.push(_StateSeqT(\n \t\t      *_M_nfa,\n@@ -427,35 +436,59 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<bool __icase, bool __collate>\n     void\n     _Compiler<_TraitsT>::\n-    _M_expression_term(_BracketMatcher<_TraitsT, __icase, __collate>& __matcher)\n+    _M_expression_term(pair<bool, _CharT>& __last_char,\n+\t\t       _BracketMatcher<_TraitsT, __icase, __collate>& __matcher)\n     {\n       if (_M_match_token(_ScannerT::_S_token_collsymbol))\n \t__matcher._M_add_collating_element(_M_value);\n       else if (_M_match_token(_ScannerT::_S_token_equiv_class_name))\n \t__matcher._M_add_equivalence_class(_M_value);\n       else if (_M_match_token(_ScannerT::_S_token_char_class_name))\n \t__matcher._M_add_character_class(_M_value, false);\n-      else if (_M_try_char()) // [a\n+      // POSIX doesn't permit '-' as a start-range char (say [a-z--0]),\n+      // except when the '-' is the first character in the bracket expression\n+      // ([--0]). ECMAScript treats all '-' after a range as a normal character.\n+      // Also see above, where _M_expression_term gets called.\n+      //\n+      // As a result, POSIX rejects [-----], but ECMAScript doesn't.\n+      // Boost (1.57.0) always uses POSIX style even in its ECMAScript syntax.\n+      // Clang (3.5) always uses ECMAScript style even in its POSIX syntax.\n+      //\n+      // It turns out that no one reads BNFs ;)\n+      else if (_M_try_char())\n \t{\n-\t  auto __ch = _M_value[0];\n-\t  if (_M_try_char())\n+\t  if (!__last_char.first)\n+\t    {\n+\t      if (_M_value[0] == '-'\n+\t\t  && !(_M_flags & regex_constants::ECMAScript))\n+\t\t__throw_regex_error(regex_constants::error_range);\n+\t      __matcher._M_add_char(_M_value[0]);\n+\t      __last_char.first = true;\n+\t      __last_char.second = _M_value[0];\n+\t    }\n+\t  else\n \t    {\n-\t      if (_M_value[0] == '-') // [a-\n+\t      if (_M_value[0] == '-')\n \t\t{\n-\t\t  if (_M_try_char()) // [a-z]\n+\t\t  if (_M_try_char())\n \t\t    {\n-\t\t      __matcher._M_make_range(__ch, _M_value[0]);\n-\t\t      return;\n+\t\t      __matcher._M_make_range(__last_char.second , _M_value[0]);\n+\t\t      __last_char.first = false;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      if (_M_scanner._M_get_token()\n+\t\t\t  != _ScannerT::_S_token_bracket_end)\n+\t\t\t__throw_regex_error(regex_constants::error_range);\n+\t\t      __matcher._M_add_char(_M_value[0]);\n \t\t    }\n-\t\t  // If the dash is the last character in the bracket\n-\t\t  // expression, it is not special.\n-\t\t  if (_M_scanner._M_get_token()\n-\t\t      != _ScannerT::_S_token_bracket_end)\n-\t\t    __throw_regex_error(regex_constants::error_range);\n \t\t}\n-\t      __matcher._M_add_char(_M_value[0]);\n+\t      else\n+\t\t{\n+\t\t  __matcher._M_add_char(_M_value[0]);\n+\t\t  __last_char.second = _M_value[0];\n+\t\t}\n \t    }\n-\t  __matcher._M_add_char(__ch);\n \t}\n       else if (_M_match_token(_ScannerT::_S_token_quoted_class))\n \t__matcher._M_add_character_class(_M_value,"}, {"sha": "e5cffc72a2aa794e3b3b2edd04ccb9bd3682bb9b", "filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/cstring_bracket_01.cc", "status": "renamed", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79b576cc38fbb037993d56b9e5f7e1fca7ee5807/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Falgorithms%2Fregex_match%2Fcstring_bracket_01.cc?ref=79b576cc38fbb037993d56b9e5f7e1fca7ee5807", "patch": "@@ -67,9 +67,60 @@ test01()\n   }\n }\n \n+void\n+test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    std::regex re(\"[-----]\", std::regex::extended);\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+  std::regex re(\"[-----]\", std::regex::ECMAScript);\n+}\n+\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+  {\n+    std::regex re(\"[z-a]\", std::regex::extended);\n+    VERIFY(false);\n+  }\n+  catch (const std::regex_error& e)\n+  {\n+    VERIFY(e.code() == std::regex_constants::error_range);\n+  }\n+}\n+\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::regex re(\"[-0-9a-z]\");\n+  VERIFY(regex_match_debug(\"-\", re));\n+  VERIFY(regex_match_debug(\"1\", re));\n+  VERIFY(regex_match_debug(\"w\", re));\n+  re.assign(\"[-0-9a-z]\", regex_constants::basic);\n+  VERIFY(regex_match_debug(\"-\", re));\n+  VERIFY(regex_match_debug(\"1\", re));\n+  VERIFY(regex_match_debug(\"w\", re));\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n+  test03();\n+  test04();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/28_regex/algorithms/regex_match/extended/cstring_bracket_01.cc"}]}