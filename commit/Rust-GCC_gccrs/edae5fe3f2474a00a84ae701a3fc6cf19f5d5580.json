{"sha": "edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRhZTVmZTNmMjQ3NGEwMGE4NGFlNzAxYTNmYzZjZjE5ZjVkNTU4MA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-06-27T12:43:55Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-06-27T12:43:55Z"}, "message": "[multiple changes]\n\n2008-06-27  David Edelsohn  <edelsohn@gnu.org>\n\n        * config/rs6000/t-aix52: Append large data option to LDFLAGS for\n        genautomata.\n\n2008-06-27  Edmar Wienskoski  <edmar@freescale.com>\n\n        * config.gcc (powerpc*-*-*): Add new core e500mc.\n        * config/rs6000/e500mc.md: New file.\n        * config/rs6000/rs6000.c (processor_costs): Add new costs for\n        e500mc.\n        (rs6000_override_options): Add e500mc case to\n        processor_target_table. Altivec and Spe options not allowed\n        with e500mc. Add isel instruction to e500mc by\n        default. Initialize rs6000_cost for e500mc.\n        (rs6000_issue_rate): Set issue rate for e500mc.\n        * config/rs6000/rs6000.h (processor_type): Add\n        PROCESSOR_PPCE500MC.\n        (ASM_CPU_SPEC): Add e500mc.\n        Set TARGET_ISEL to rs6000_isel.\n        * config/rs6000/e500.h: Remove redefinition of TARGET_ISEL.\n        (CHECK_E500_OPTIONS): Remove TARGET_ISEL.\n        * config/rs6000/rs6000.md (define_attr \"cpu\"): Add ppce500mc..\n        Include e500mc.md.\n        * doc/invoke.texi: Add e500mc to list of cpus.\n\nFrom-SVN: r137176", "tree": {"sha": "7a3f411dbbfd0a9e2e8cef78c60581973eae14a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a3f411dbbfd0a9e2e8cef78c60581973eae14a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/comments", "author": null, "committer": null, "parents": [{"sha": "098b9c467c8ce7f342823f56a7d4d7fc029188e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098b9c467c8ce7f342823f56a7d4d7fc029188e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098b9c467c8ce7f342823f56a7d4d7fc029188e4"}], "stats": {"total": 289, "additions": 273, "deletions": 16}, "files": [{"sha": "394c9c0117b28e9f64956eea4a89b59620fbf234", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -1,3 +1,29 @@\n+2008-06-27  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/t-aix52: Append large data option to LDFLAGS for\n+\tgenautomata.\n+\n+2008-06-27  Edmar Wienskoski  <edmar@freescale.com>\n+\n+\t* config.gcc (powerpc*-*-*): Add new core e500mc.\n+\t* config/rs6000/e500mc.md: New file.\n+\t* config/rs6000/rs6000.c (processor_costs): Add new costs for\n+\te500mc.\n+\t(rs6000_override_options): Add e500mc case to\n+\tprocessor_target_table. Altivec and Spe options not allowed\n+\twith e500mc. Add isel instruction to e500mc by\n+\tdefault. Initialize rs6000_cost for e500mc.\n+\t(rs6000_issue_rate): Set issue rate for e500mc.\n+\t* config/rs6000/rs6000.h (processor_type): Add\n+\tPROCESSOR_PPCE500MC.\n+\t(ASM_CPU_SPEC): Add e500mc.\n+\tSet TARGET_ISEL to rs6000_isel.\n+\t* config/rs6000/e500.h: Remove redefinition of TARGET_ISEL.\n+\t(CHECK_E500_OPTIONS): Remove TARGET_ISEL.\n+\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add ppce500mc.\n+\tInclude e500mc.md.\n+\t* doc/invoke.texi: Add e500mc to list of cpus.\n+\n 2008-06-27  Laurynas Biveinis  <laurynas.biveinis@gmail.com>\n \n \tPR c/34867"}, {"sha": "f4f171e0c02939a99cabbff72eabbeaa2a70079f", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -2819,8 +2819,9 @@ case \"${target}\" in\n \t\t\t| rios | rios1 | rios2 | rsc | rsc1 | rs64a \\\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 464 | 464fp \\\n \t\t\t| 505 | 601 | 602 | 603 | 603e | ec603e | 604 \\\n-\t\t\t| 604e | 620 | 630 | 740 | 750 | 7400 | 7450 | e300c[23] \\\n-\t\t\t| 854[08] | 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n+\t\t\t| 604e | 620 | 630 | 740 | 750 | 7400 | 7450 \\\n+\t\t\t| e300c[23] | 854[08] | e500mc \\\n+\t\t\t| 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "c874f08f0ad4be93f8a89a6cfc314b0dac438148", "filename": "gcc/config/rs6000/e500.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Fe500.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Fe500.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500.h?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -19,7 +19,6 @@\n #undef TARGET_SPE_ABI\n #undef TARGET_SPE\n #undef TARGET_E500\n-#undef TARGET_ISEL\n #undef TARGET_FPRS\n #undef TARGET_E500_SINGLE\n #undef TARGET_E500_DOUBLE\n@@ -28,13 +27,12 @@\n #define TARGET_SPE_ABI rs6000_spe_abi\n #define TARGET_SPE rs6000_spe\n #define TARGET_E500 (rs6000_cpu == PROCESSOR_PPC8540)\n-#define TARGET_ISEL rs6000_isel\n #define TARGET_FPRS (rs6000_float_gprs == 0)\n #define TARGET_E500_SINGLE (TARGET_HARD_FLOAT && rs6000_float_gprs == 1)\n #define TARGET_E500_DOUBLE (TARGET_HARD_FLOAT && rs6000_float_gprs == 2)\n #define CHECK_E500_OPTIONS\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_E500 || TARGET_SPE || TARGET_SPE_ABI || TARGET_ISEL\t\\\n+    if (TARGET_E500 || TARGET_SPE || TARGET_SPE_ABI\t\t\t\\\n \t|| TARGET_E500_SINGLE || TARGET_E500_DOUBLE)\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tif (TARGET_ALTIVEC)\t\t\t\t\t\t\\"}, {"sha": "86434f95fe1d9823b1040e6dffc6b092c4985182", "filename": "gcc/config/rs6000/e500mc.md", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Fe500mc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Fe500mc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe500mc.md?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -0,0 +1,200 @@\n+;; Pipeline description for Motorola PowerPC e500mc core.\n+;;   Copyright (C) 2008 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e500mc 32-bit SU(2), LSU, FPU, BPU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+;; FP is half clocked, timings of other instructions are as in the e500v2.\n+\n+(define_automaton \"e500mc_most,e500mc_long,e500mc_retire\")\n+(define_cpu_unit \"e500mc_decode_0,e500mc_decode_1\" \"e500mc_most\")\n+(define_cpu_unit \"e500mc_issue_0,e500mc_issue_1\"   \"e500mc_most\")\n+(define_cpu_unit \"e500mc_retire_0,e500mc_retire_1\" \"e500mc_retire\")\n+\n+;; SU.\n+(define_cpu_unit \"e500mc_su0_stage0,e500mc_su1_stage0\" \"e500mc_most\")\n+\n+;; MU.\n+(define_cpu_unit \"e500mc_mu_stage0,e500mc_mu_stage1\" \"e500mc_most\")\n+(define_cpu_unit \"e500mc_mu_stage2,e500mc_mu_stage3\" \"e500mc_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e500mc_mu_div\" \"e500mc_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e500mc_lsu\" \"e500mc_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e500mc_fpu\" \"e500mc_most\")\n+\n+;; Branch unit.\n+(define_cpu_unit \"e500mc_bu\" \"e500mc_most\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e500mc_decode_0\" \"e500mc_most\")\n+(define_cpu_unit \"present_e500mc_issue_0\" \"e500mc_most\")\n+(define_cpu_unit \"present_e500mc_retire_0\" \"e500mc_retire\")\n+(define_cpu_unit \"present_e500mc_su0_stage0\" \"e500mc_most\")\n+\n+;; The following sets to make automata deterministic when option ndfa is used.\n+(presence_set \"present_e500mc_decode_0\" \"e500mc_decode_0\")\n+(presence_set \"present_e500mc_issue_0\" \"e500mc_issue_0\")\n+(presence_set \"present_e500mc_retire_0\" \"e500mc_retire_0\")\n+(presence_set \"present_e500mc_su0_stage0\" \"e500mc_su0_stage0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e500mc_decode\"\n+    \"e500mc_decode_0|e500mc_decode_1+present_e500mc_decode_0\")\n+(define_reservation \"e500mc_issue\"\n+    \"e500mc_issue_0|e500mc_issue_1+present_e500mc_issue_0\")\n+(define_reservation \"e500mc_retire\"\n+   \"e500mc_retire_0|e500mc_retire_1+present_e500mc_retire_0\")\n+(define_reservation \"e500mc_su_stage0\"\n+   \"e500mc_su0_stage0|e500mc_su1_stage0+present_e500mc_su0_stage0\")\n+\n+;; Simple SU insns.\n+(define_insn_reservation \"e500mc_su\" 1\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,cmp,compare,\\\n+                        delayed_compare,var_delayed_compare,fast_compare,\\\n+                        shift,trap,var_shift_rotate,cntlz,exts\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_two\" 1\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire,\\\n+   e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_three\" 1\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire,\\\n+   e500mc_issue+e500mc_su_stage0+e500mc_retire,\\\n+   e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+;; Multiply.\n+(define_insn_reservation \"e500mc_multiply\" 4\n+  (and (eq_attr \"type\" \"imul,imul2,imul3,imul_compare\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_mu_stage0,e500mc_mu_stage1,\\\n+   e500mc_mu_stage2,e500mc_mu_stage3+e500mc_retire\")\n+\n+;; Divide. We use the average latency time here.\n+(define_insn_reservation \"e500mc_divide\" 14\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_mu_stage0+e500mc_mu_div,\\\n+   e500mc_mu_div*13\")\n+\n+;; Branch.\n+(define_insn_reservation \"e500mc_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_bu,e500mc_retire\")\n+\n+;; CR logical.\n+(define_insn_reservation \"e500mc_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_bu,e500mc_retire\")\n+\n+;; Mfcr.\n+(define_insn_reservation \"e500mc_mfcr\" 1\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su1_stage0+e500mc_retire\")\n+\n+;; Mtcrf.\n+(define_insn_reservation \"e500mc_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su1_stage0+e500mc_retire\")\n+\n+;; Mtjmpr.\n+(define_insn_reservation \"e500mc_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+;; Brinc.\n+(define_insn_reservation \"e500mc_brinc\" 1\n+  (and (eq_attr \"type\" \"brinc\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_su_stage0+e500mc_retire\")\n+\n+;; Loads.\n+(define_insn_reservation \"e500mc_load\" 3\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,sync\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing*2,e500mc_retire\")\n+\n+;; Stores.\n+(define_insn_reservation \"e500mc_store\" 3\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_lsu,nothing,e500mc_retire\")\n+\n+;; The following ignores the retire unit to avoid a large automata.\n+\n+;; Simple FP.\n+(define_insn_reservation \"e500mc_simple_float\" 8\n+  (and (eq_attr \"type\" \"fpsimple\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+; \"e500mc_decode,e500mc_issue+e500mc_fpu,nothing*6,e500mc_retire\")\n+\n+;; FP.\n+(define_insn_reservation \"e500mc_float\" 8\n+  (and (eq_attr \"type\" \"fp\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+; \"e500mc_decode,e500mc_issue+e500mc_fpu,nothing*6,e500mc_retire\")\n+\n+(define_insn_reservation \"e500mc_fpcompare\" 8\n+  (and (eq_attr \"type\" \"fpcompare\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+\n+(define_insn_reservation \"e500mc_dmul\" 10\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu\")\n+\n+;; FP divides are not pipelined.\n+(define_insn_reservation \"e500mc_sdiv\" 36\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu,e500mc_fpu*35\")\n+\n+(define_insn_reservation \"e500mc_ddiv\" 66\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce500mc\"))\n+  \"e500mc_decode,e500mc_issue+e500mc_fpu,e500mc_fpu*65\")"}, {"sha": "904587d68dd540bb07bb8601ec30ecf8164669ee", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -694,6 +694,25 @@ struct processor_costs ppce300c2c3_cost = {\n   1,\t\t\t/* prefetch streams /*/\n };\n \n+/* Instruction costs on PPCE500MC processors.  */\n+static const\n+struct processor_costs ppce500mc_cost = {\n+  COSTS_N_INSNS (4),    /* mulsi */\n+  COSTS_N_INSNS (4),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (4),    /* muldi */\n+  COSTS_N_INSNS (14),   /* divsi */\n+  COSTS_N_INSNS (14),   /* divdi */\n+  COSTS_N_INSNS (8),    /* fp */\n+  COSTS_N_INSNS (10),   /* dmul */\n+  COSTS_N_INSNS (36),   /* sdiv */\n+  COSTS_N_INSNS (66),   /* ddiv */\n+  64,\t\t\t/* cache line size */\n+  32,\t\t\t/* l1 cache */\n+  128,\t\t\t/* l2 cache */\n+  1,\t\t\t/* prefetch streams /*/\n+};\n+\n /* Instruction costs on POWER4 and POWER5 processors.  */\n static const\n struct processor_costs power4_cost = {\n@@ -1456,6 +1475,7 @@ rs6000_override_options (const char *default_cpu)\n \t {\"8548\", PROCESSOR_PPC8540, POWERPC_BASE_MASK | MASK_STRICT_ALIGN},\n \t {\"e300c2\", PROCESSOR_PPCE300C2, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"e300c3\", PROCESSOR_PPCE300C3, POWERPC_BASE_MASK},\n+\t {\"e500mc\", PROCESSOR_PPCE500MC, POWERPC_BASE_MASK | MASK_PPC_GFXOPT},\n \t {\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT},\n \t {\"970\", PROCESSOR_POWER4,\n \t  POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64},\n@@ -1559,10 +1579,12 @@ rs6000_override_options (const char *default_cpu)\n \t}\n     }\n \n-  if (TARGET_E500 && !rs6000_explicit_options.isel)\n+  if ((TARGET_E500 || rs6000_cpu == PROCESSOR_PPCE500MC)\n+      && !rs6000_explicit_options.isel)\n     rs6000_isel = 1;\n \n-  if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3)\n+  if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3\n+      || rs6000_cpu == PROCESSOR_PPCE500MC)\n     {\n       if (TARGET_ALTIVEC)\n \terror (\"AltiVec not supported in this target\");\n@@ -1679,9 +1701,9 @@ rs6000_override_options (const char *default_cpu)\n   SUB3TARGET_OVERRIDE_OPTIONS;\n #endif\n \n-  if (TARGET_E500)\n+  if (TARGET_E500 || rs6000_cpu == PROCESSOR_PPCE500MC)\n     {\n-      /* The e500 does not have string instructions, and we set\n+      /* The e500 and e500mc do not have string instructions, and we set\n \t MASK_STRING above when optimizing for size.  */\n       if ((target_flags & MASK_STRING) != 0)\n \ttarget_flags = target_flags & ~MASK_STRING;\n@@ -1894,6 +1916,10 @@ rs6000_override_options (const char *default_cpu)\n \trs6000_cost = &ppce300c2c3_cost;\n \tbreak;\n \n+      case PROCESSOR_PPCE500MC:\n+\trs6000_cost = &ppce500mc_cost;\n+\tbreak;\n+\n       case PROCESSOR_POWER4:\n       case PROCESSOR_POWER5:\n \trs6000_cost = &power4_cost;\n@@ -19008,6 +19034,7 @@ rs6000_issue_rate (void)\n   case CPU_CELL:\n   case CPU_PPCE300C2:\n   case CPU_PPCE300C3:\n+  case CPU_PPCE500MC:\n     return 2;\n   case CPU_RIOS2:\n   case CPU_PPC604:"}, {"sha": "8a926e43c44a5d6d7a34f84569729de529a2fee2", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -133,6 +133,7 @@\n %{mcpu=8548: -me500} \\\n %{mcpu=e300c2: -me300} \\\n %{mcpu=e300c3: -me300} \\\n+%{mcpu=e500mc: -me500mc} \\\n %{maltivec: -maltivec} \\\n -many\"\n \n@@ -282,6 +283,7 @@ enum processor_type\n    PROCESSOR_PPC8540,\n    PROCESSOR_PPCE300C2,\n    PROCESSOR_PPCE300C3,\n+   PROCESSOR_PPCE500MC,\n    PROCESSOR_POWER4,\n    PROCESSOR_POWER5,\n    PROCESSOR_POWER6,\n@@ -400,7 +402,7 @@ extern enum rs6000_nop_insertion rs6000_sched_insert_nops;\n #define TARGET_SPE_ABI 0\n #define TARGET_SPE 0\n #define TARGET_E500 0\n-#define TARGET_ISEL 0\n+#define TARGET_ISEL rs6000_isel\n #define TARGET_FPRS 1\n #define TARGET_E500_SINGLE 0\n #define TARGET_E500_DOUBLE 0"}, {"sha": "5efde36de8d04dcbea61542f42decd45bf29361d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -133,7 +133,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,power4,power5,power6,cell\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppce300c2,ppce300c3,ppce500mc,power4,power5,power6,cell\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n \n@@ -167,6 +167,7 @@\n (include \"7450.md\")\n (include \"8540.md\")\n (include \"e300c2c3.md\")\n+(include \"e500mc.md\")\n (include \"power4.md\")\n (include \"power5.md\")\n (include \"power6.md\")"}, {"sha": "3b19cbcee449ef73a31ff301505ace8c137f9d49", "filename": "gcc/config/rs6000/t-aix52", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Ft-aix52", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fconfig%2Frs6000%2Ft-aix52", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix52?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -55,3 +55,5 @@ TARGET_LIBGCC2_CFLAGS = -mlong-double-128\n # Either 32-bit and 64-bit objects in archives.\n AR_FLAGS_FOR_TARGET = -X32_64\n \n+# genautomata requires more than 256MB of data\n+build/genautomata : override LDFLAGS += -Wl,-bmaxdata:0x20000000"}, {"sha": "c59d88e492db5d432e2a2105107b7cf1416e30cb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edae5fe3f2474a00a84ae701a3fc6cf19f5d5580/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=edae5fe3f2474a00a84ae701a3fc6cf19f5d5580", "patch": "@@ -13011,11 +13011,11 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{604e}, @samp{620}, @samp{630}, @samp{740}, @samp{7400},\n @samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n @samp{860}, @samp{970}, @samp{8540}, @samp{e300c2}, @samp{e300c3},\n-@samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5}, @samp{power},\n-@samp{power2}, @samp{power3}, @samp{power4}, @samp{power5},\n-@samp{power5+}, @samp{power6}, @samp{power6x}, @samp{common},\n-@samp{powerpc}, @samp{powerpc64}, @samp{rios}, @samp{rios1},\n-@samp{rios2}, @samp{rsc}, and @samp{rs64}.\n+@samp{e500mc}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n+@samp{power}, @samp{power2}, @samp{power3}, @samp{power4},\n+@samp{power5}, @samp{power5+}, @samp{power6}, @samp{power6x},\n+@samp{common}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},\n+@samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n generated under this option will run on any POWER or PowerPC processor."}]}