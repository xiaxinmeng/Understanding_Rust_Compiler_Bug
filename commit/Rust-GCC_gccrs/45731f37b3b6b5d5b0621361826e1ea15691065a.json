{"sha": "45731f37b3b6b5d5b0621361826e1ea15691065a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3MzFmMzdiM2I2YjVkNWIwNjIxMzYxODI2ZTFlYTE1NjkxMDY1YQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-03T17:47:27Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-05-03T17:47:27Z"}, "message": "sh-mem.cc: Use tabs instead of spaces.\n\n\t* config/sh/sh-mem.cc: Use tabs instead of spaces.\n\t(prob_unlikely, prob_likely): Make variables const.\n\nFrom-SVN: r210037", "tree": {"sha": "674fb5fabe2c45e27844e237010c16371e374d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/674fb5fabe2c45e27844e237010c16371e374d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45731f37b3b6b5d5b0621361826e1ea15691065a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45731f37b3b6b5d5b0621361826e1ea15691065a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45731f37b3b6b5d5b0621361826e1ea15691065a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45731f37b3b6b5d5b0621361826e1ea15691065a/comments", "author": null, "committer": null, "parents": [{"sha": "c61dfa63882b6fe1f5219b6ab4fb40ed2330d185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61dfa63882b6fe1f5219b6ab4fb40ed2330d185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61dfa63882b6fe1f5219b6ab4fb40ed2330d185"}], "stats": {"total": 300, "additions": 151, "deletions": 149}, "files": [{"sha": "75515c49ee8a379308e7cd0f728d94865565b635", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45731f37b3b6b5d5b0621361826e1ea15691065a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45731f37b3b6b5d5b0621361826e1ea15691065a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45731f37b3b6b5d5b0621361826e1ea15691065a", "patch": "@@ -1,3 +1,8 @@\n+2014-05-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh-mem.cc: Use tabs instead of spaces.\n+\t(prob_unlikely, prob_likely): Make variables const.\n+\n 2014-05-03  Denis Chertykov  <chertykov@gmail.com>\n \n \t* config/avr/avr.c (avr_adjust_insn_length): Handle JUMP_TABLE_DATA."}, {"sha": "0e38913b929b5bc15f7847c587a3228de8b7e209", "filename": "gcc/config/sh/sh-mem.cc", "status": "modified", "additions": 146, "deletions": 149, "changes": 295, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45731f37b3b6b5d5b0621361826e1ea15691065a/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45731f37b3b6b5d5b0621361826e1ea15691065a/gcc%2Fconfig%2Fsh%2Fsh-mem.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-mem.cc?ref=45731f37b3b6b5d5b0621361826e1ea15691065a", "patch": "@@ -179,8 +179,8 @@ expand_block_move (rtx *operands)\n   return false;\n }\n \n-static int prob_unlikely = REG_BR_PROB_BASE / 10;\n-static int prob_likely = REG_BR_PROB_BASE / 4;\n+static const int prob_unlikely = REG_BR_PROB_BASE / 10;\n+static const int prob_likely = REG_BR_PROB_BASE / 4;\n \n /* Emit code to perform a strcmp.\n \n@@ -226,7 +226,7 @@ sh_expand_cmpstr (rtx *operands)\n   emit_move_insn (tmp3, addr2);\n   emit_move_insn (s2_addr, plus_constant (Pmode, s2_addr, 4));\n \n-  /*start long loop.  */\n+  /* start long loop.  */\n   emit_label (L_loop_long);\n \n   emit_move_insn (tmp2, tmp3);\n@@ -335,7 +335,7 @@ sh_expand_cmpnstr (rtx *operands)\n   rtx len = force_reg (SImode, operands[3]);\n   int constp = CONST_INT_P (operands[3]);\n \n-  /* Loop on a register count. */\n+  /* Loop on a register count.  */\n   if (constp)\n     {\n       rtx tmp0 = gen_reg_rtx (SImode);\n@@ -350,134 +350,134 @@ sh_expand_cmpnstr (rtx *operands)\n       int witers = bytes / 4;\n \n       if (witers > 1)\n-        {\n-          addr1 = adjust_automodify_address (addr1, SImode, s1_addr, 0);\n-          addr2 = adjust_automodify_address (addr2, SImode, s2_addr, 0);\n-\n-          emit_move_insn (tmp0, const0_rtx);\n-\n-          if (align < 4)\n-            {\n-              emit_insn (gen_iorsi3 (tmp1, s1_addr, s2_addr));\n-              emit_insn (gen_tstsi_t (GEN_INT (3), tmp1));\n-              jump = emit_jump_insn (gen_branch_false (L_loop_byte));\n-              add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n-            }\n-\n-          /* word count. Do we have iterations ? */\n-          emit_insn (gen_lshrsi3 (lenw, len, GEN_INT (2)));\n-\n-          /*start long loop.  */\n-          emit_label (L_loop_long);\n-\n-          /* tmp2 is aligned, OK to load.  */\n-          emit_move_insn (tmp2, addr2);\n-          emit_move_insn (s2_addr, plus_constant (Pmode, s2_addr,\n-                                                  GET_MODE_SIZE (SImode)));\n-\n-          /* tmp1 is aligned, OK to load.  */\n-          emit_move_insn (tmp1, addr1);\n-          emit_move_insn (s1_addr, plus_constant (Pmode, s1_addr,\n-                                                  GET_MODE_SIZE (SImode)));\n-\n-          /* Is there a 0 byte ?  */\n-          emit_insn (gen_andsi3 (tmp3, tmp2, tmp1));\n-\n-          emit_insn (gen_cmpstr_t (tmp0, tmp3));\n-          jump = emit_jump_insn (gen_branch_true (L_end_loop_long));\n-          add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n-\n-          emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n-          jump = emit_jump_insn (gen_branch_false (L_end_loop_long));\n-          add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n-\n-          if (TARGET_SH2)\n-            emit_insn (gen_dect (lenw, lenw));\n-          else\n-            {\n-              emit_insn (gen_addsi3 (lenw, lenw, GEN_INT (-1)));\n-              emit_insn (gen_tstsi_t (lenw, lenw));\n-            }\n-\n-          jump = emit_jump_insn (gen_branch_false (L_loop_long));\n-          add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n-\n-         int sbytes = bytes % 4;\n-\n-          /* end loop.  Reached max iterations.  */\n-          if (! sbytes)\n-            {\n-              jump = emit_jump_insn (gen_jump_compact (L_return));\n-              emit_barrier_after (jump);\n-            }\n-          else\n-            {\n-              /* Remaining bytes to check.  */\n-\n-              addr1 = adjust_automodify_address (addr1, QImode, s1_addr, 0);\n-              addr2 = adjust_automodify_address (addr2, QImode, s2_addr, 0);\n-\n-              while (sbytes--)\n-                {\n-                  emit_insn (gen_extendqisi2 (tmp1, addr1));\n-                  emit_insn (gen_extendqisi2 (tmp2, addr2));\n-\n-                  emit_insn (gen_cmpeqsi_t (tmp2, const0_rtx));\n-                  jump = emit_jump_insn (gen_branch_true (L_end_loop_byte));\n-                  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n-\n-                  emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n-                  if (flag_delayed_branch)\n-                    emit_insn (gen_zero_extendqisi2 (tmp2,\n-                                                     gen_lowpart (QImode,\n-                                                                  tmp2)));\n-                  jump = emit_jump_insn (gen_branch_false (L_end_loop_byte));\n-                  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n-\n-                  addr1 = adjust_address (addr1, QImode,\n-                                          GET_MODE_SIZE (QImode));\n-                  addr2 = adjust_address (addr2, QImode,\n-                                          GET_MODE_SIZE (QImode));\n-                }\n-\n-              jump = emit_jump_insn (gen_jump_compact( L_end_loop_byte));\n-              emit_barrier_after (jump);\n-            }\n-\n-          emit_label (L_end_loop_long);\n-\n-          /* Found last word.  Restart it byte per byte. */\n-\n-          emit_move_insn (s1_addr, plus_constant (Pmode, s1_addr,\n-                                                  -GET_MODE_SIZE (SImode)));\n-          emit_move_insn (s2_addr, plus_constant (Pmode, s2_addr,\n-                                                  -GET_MODE_SIZE (SImode)));\n-\n-          /* fall thru.  */\n-        }\n+\t{\n+\t  addr1 = adjust_automodify_address (addr1, SImode, s1_addr, 0);\n+\t  addr2 = adjust_automodify_address (addr2, SImode, s2_addr, 0);\n+\n+\t  emit_move_insn (tmp0, const0_rtx);\n+\n+\t  if (align < 4)\n+\t    {\n+\t      emit_insn (gen_iorsi3 (tmp1, s1_addr, s2_addr));\n+\t      emit_insn (gen_tstsi_t (GEN_INT (3), tmp1));\n+\t      jump = emit_jump_insn (gen_branch_false (L_loop_byte));\n+\t      add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n+\t    }\n+\n+\t  /* word count. Do we have iterations ?  */\n+\t  emit_insn (gen_lshrsi3 (lenw, len, GEN_INT (2)));\n+\n+\t  /* start long loop.  */\n+\t  emit_label (L_loop_long);\n+\n+\t  /* tmp2 is aligned, OK to load.  */\n+\t  emit_move_insn (tmp2, addr2);\n+\t  emit_move_insn (s2_addr, plus_constant (Pmode, s2_addr,\n+\t\t\t\t\t\t  GET_MODE_SIZE (SImode)));\n+\n+\t  /* tmp1 is aligned, OK to load.  */\n+\t  emit_move_insn (tmp1, addr1);\n+\t  emit_move_insn (s1_addr, plus_constant (Pmode, s1_addr,\n+\t\t\t\t\t\t  GET_MODE_SIZE (SImode)));\n+\n+\t  /* Is there a 0 byte ?  */\n+\t  emit_insn (gen_andsi3 (tmp3, tmp2, tmp1));\n+\n+\t  emit_insn (gen_cmpstr_t (tmp0, tmp3));\n+\t  jump = emit_jump_insn (gen_branch_true (L_end_loop_long));\n+\t  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+\t  emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n+\t  jump = emit_jump_insn (gen_branch_false (L_end_loop_long));\n+\t  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+\t  if (TARGET_SH2)\n+\t    emit_insn (gen_dect (lenw, lenw));\n+\t  else\n+\t    {\n+\t      emit_insn (gen_addsi3 (lenw, lenw, GEN_INT (-1)));\n+\t      emit_insn (gen_tstsi_t (lenw, lenw));\n+\t    }\n+\n+\t  jump = emit_jump_insn (gen_branch_false (L_loop_long));\n+\t  add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n+\n+\t  int sbytes = bytes % 4;\n+\n+\t  /* end loop.  Reached max iterations.  */\n+\t  if (sbytes == 0)\n+\t    {\n+\t      jump = emit_jump_insn (gen_jump_compact (L_return));\n+\t      emit_barrier_after (jump);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Remaining bytes to check.  */\n+\n+\t      addr1 = adjust_automodify_address (addr1, QImode, s1_addr, 0);\n+\t      addr2 = adjust_automodify_address (addr2, QImode, s2_addr, 0);\n+\n+\t      while (sbytes--)\n+\t\t{\n+\t\t  emit_insn (gen_extendqisi2 (tmp1, addr1));\n+\t\t  emit_insn (gen_extendqisi2 (tmp2, addr2));\n+\n+\t\t  emit_insn (gen_cmpeqsi_t (tmp2, const0_rtx));\n+\t\t  jump = emit_jump_insn (gen_branch_true (L_end_loop_byte));\n+\t\t  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+\t\t  emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n+\t\t  if (flag_delayed_branch)\n+\t\t    emit_insn (gen_zero_extendqisi2 (tmp2,\n+\t\t\t\t\t\t     gen_lowpart (QImode,\n+\t\t\t\t\t\t\t\t  tmp2)));\n+\t\t  jump = emit_jump_insn (gen_branch_false (L_end_loop_byte));\n+\t\t  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+\t\t  addr1 = adjust_address (addr1, QImode,\n+\t\t\t\t\t  GET_MODE_SIZE (QImode));\n+\t\t  addr2 = adjust_address (addr2, QImode,\n+\t\t\t\t\t  GET_MODE_SIZE (QImode));\n+\t\t}\n+\n+\t      jump = emit_jump_insn (gen_jump_compact( L_end_loop_byte));\n+\t      emit_barrier_after (jump);\n+\t    }\n+\n+\t  emit_label (L_end_loop_long);\n+\n+\t  /* Found last word.  Restart it byte per byte.  */\n+\n+\t  emit_move_insn (s1_addr, plus_constant (Pmode, s1_addr,\n+\t\t\t\t\t\t  -GET_MODE_SIZE (SImode)));\n+\t  emit_move_insn (s2_addr, plus_constant (Pmode, s2_addr,\n+\t\t\t\t\t\t  -GET_MODE_SIZE (SImode)));\n+\n+\t  /* fall thru.  */\n+\t}\n \n       addr1 = adjust_automodify_address (addr1, QImode, s1_addr, 0);\n       addr2 = adjust_automodify_address (addr2, QImode, s2_addr, 0);\n \n       while (bytes--)\n-        {\n-          emit_insn (gen_extendqisi2 (tmp1, addr1));\n-          emit_insn (gen_extendqisi2 (tmp2, addr2));\n-\n-          emit_insn (gen_cmpeqsi_t (tmp2, const0_rtx));\n-          jump = emit_jump_insn (gen_branch_true (L_end_loop_byte));\n-          add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n-\n-          emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n-          if (flag_delayed_branch)\n-            emit_insn (gen_zero_extendqisi2 (tmp2,\n-                                             gen_lowpart (QImode, tmp2)));\n-          jump = emit_jump_insn (gen_branch_false (L_end_loop_byte));\n-          add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n-\n-          addr1 = adjust_address (addr1, QImode, GET_MODE_SIZE (QImode));\n-          addr2 = adjust_address (addr2, QImode, GET_MODE_SIZE (QImode));\n-        }\n+\t{\n+\t  emit_insn (gen_extendqisi2 (tmp1, addr1));\n+\t  emit_insn (gen_extendqisi2 (tmp2, addr2));\n+\n+\t  emit_insn (gen_cmpeqsi_t (tmp2, const0_rtx));\n+\t  jump = emit_jump_insn (gen_branch_true (L_end_loop_byte));\n+\t  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+\t  emit_insn (gen_cmpeqsi_t (tmp1, tmp2));\n+\t  if (flag_delayed_branch)\n+\t    emit_insn (gen_zero_extendqisi2 (tmp2,\n+\t\t\t\t\t     gen_lowpart (QImode, tmp2)));\n+\t  jump = emit_jump_insn (gen_branch_false (L_end_loop_byte));\n+\t  add_int_reg_note (jump, REG_BR_PROB, prob_unlikely);\n+\n+\t  addr1 = adjust_address (addr1, QImode, GET_MODE_SIZE (QImode));\n+\t  addr2 = adjust_address (addr2, QImode, GET_MODE_SIZE (QImode));\n+\t}\n \n       jump = emit_jump_insn (gen_jump_compact( L_end_loop_byte));\n       emit_barrier_after (jump);\n@@ -529,7 +529,7 @@ sh_expand_cmpnstr (rtx *operands)\n   return true;\n }\n \n-/* Emit code to perform a strlen\n+/* Emit code to perform a strlen.\n \n    OPERANDS[0] is the destination.\n    OPERANDS[1] is the string.\n@@ -635,7 +635,7 @@ sh_expand_strlen (rtx *operands)\n   return true;\n }\n \n-/* Emit code to perform a memset\n+/* Emit code to perform a memset.\n \n    OPERANDS[0] is the destination.\n    OPERANDS[1] is the size;\n@@ -652,27 +652,26 @@ sh_expand_setmem (rtx *operands)\n   rtx dest_addr = copy_addr_to_reg (XEXP (dest, 0));\n   rtx val = force_reg (SImode, operands[2]);\n   int align = INTVAL (operands[3]);\n-  int count = 0;\n   rtx len = force_reg (SImode, operands[1]);\n \n   if (! CONST_INT_P (operands[1]))\n     return;\n \n-  count = INTVAL (operands[1]);\n+  int count = INTVAL (operands[1]);\n \n   if (CONST_INT_P (operands[2])\n       && (INTVAL (operands[2]) == 0 || INTVAL (operands[2]) == -1) && count > 8)\n     {\n       rtx lenw = gen_reg_rtx (SImode);\n \n       if (align < 4)\n-        {\n-          emit_insn (gen_tstsi_t (GEN_INT (3), dest_addr));\n-          jump = emit_jump_insn (gen_branch_false (L_loop_byte));\n-          add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n-        }\n+\t{\n+\t  emit_insn (gen_tstsi_t (GEN_INT (3), dest_addr));\n+\t  jump = emit_jump_insn (gen_branch_false (L_loop_byte));\n+\t  add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n+\t}\n \n-      /* word count. Do we have iterations ? */\n+      /* word count. Do we have iterations ?  */\n       emit_insn (gen_lshrsi3 (lenw, len, GEN_INT (2)));\n \n       dest = adjust_automodify_address (dest, SImode, dest_addr, 0);\n@@ -683,14 +682,14 @@ sh_expand_setmem (rtx *operands)\n       if (TARGET_SH2)\n         emit_insn (gen_dect (lenw, lenw));\n       else\n-        {\n-          emit_insn (gen_addsi3 (lenw, lenw, GEN_INT (-1)));\n-          emit_insn (gen_tstsi_t (lenw, lenw));\n-        }\n+\t{\n+\t  emit_insn (gen_addsi3 (lenw, lenw, GEN_INT (-1)));\n+\t  emit_insn (gen_tstsi_t (lenw, lenw));\n+\t}\n \n       emit_move_insn (dest, val);\n       emit_move_insn (dest_addr, plus_constant (Pmode, dest_addr,\n-                                                GET_MODE_SIZE (SImode)));\n+\t\t\t\t\t\tGET_MODE_SIZE (SImode)));\n \n \n       jump = emit_jump_insn (gen_branch_false (L_loop_word));\n@@ -702,11 +701,11 @@ sh_expand_setmem (rtx *operands)\n       val = gen_lowpart (QImode, val);\n \n       while (count--)\n-        {\n-          emit_move_insn (dest, val);\n-          emit_move_insn (dest_addr, plus_constant (Pmode, dest_addr,\n-                                                    GET_MODE_SIZE (QImode)));\n-        }\n+\t{\n+\t  emit_move_insn (dest, val);\n+\t  emit_move_insn (dest_addr, plus_constant (Pmode, dest_addr,\n+\t\t\t\t\t\t    GET_MODE_SIZE (QImode)));\n+\t}\n \n       jump = emit_jump_insn (gen_jump_compact (L_return));\n       emit_barrier_after (jump);\n@@ -734,6 +733,4 @@ sh_expand_setmem (rtx *operands)\n   add_int_reg_note (jump, REG_BR_PROB, prob_likely);\n \n   emit_label (L_return);\n-\n-  return;\n }"}]}