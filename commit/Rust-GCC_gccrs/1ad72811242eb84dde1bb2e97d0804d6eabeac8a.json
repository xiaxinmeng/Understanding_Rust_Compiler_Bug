{"sha": "1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "node_id": "C_kwDOANBUbNoAKDFhZDcyODExMjQyZWI4NGRkZTFiYjJlOTdkMDgwNGQ2ZWFiZWFjOGE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-21T08:48:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-21T11:18:59Z"}, "message": "tree-optimization/104152 - add missing check for SLP constant build\n\nThis adds a missing check to verify we can actually build an\ninvariant vector from components when SLP vectorizing an associatable\nchain.\n\n2022-01-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104152\n\t* tree-vect-slp.cc (vect_build_slp_tree_2): Add missing\n\tcan_duplicate_and_interleave_p check.\n\n\t* gcc.dg/vect/pr104152.c: New testcase.", "tree": {"sha": "dd308fe38a2d0f3db5ca1a1bac0bec3fde89f7c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd308fe38a2d0f3db5ca1a1bac0bec3fde89f7c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ad72811242eb84dde1bb2e97d0804d6eabeac8a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e0b19f1d670aa37ac06d63d059c7277ae1188d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e0b19f1d670aa37ac06d63d059c7277ae1188d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e0b19f1d670aa37ac06d63d059c7277ae1188d8"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "3a313c32dc3b8d7702f362cb991a514fabbeccfa", "filename": "gcc/testsuite/gcc.dg/vect/pr104152.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad72811242eb84dde1bb2e97d0804d6eabeac8a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad72811242eb84dde1bb2e97d0804d6eabeac8a/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr104152.c?ref=1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-Ofast\" } */\n+/* { dg-additional-options \"-march=armv8.2-a+sve\" { target aarch64-*-* } } */\n+\n+#define M_PI 3.14f\n+#define NK 24\n+#define DIM 3\n+\n+typedef float rvec_ [3];\n+\n+static rvec_ v0[NK] = {\n+      { 1, 0, 0 },  { 0, 1, 0 },  { 0, 0, 1 },  { 1, 1, 0 },  { 1, -1, 0 },\n+      { 1, 0, 1 },  { 1, 0, -1 }, { 0, 1, 1 },  { 0, 1, -1 }, { 1, 1, 1 },\n+      { 1, 1, -1 }, { 1, -1, 1 }, { -1, 1, 1 }, { 2, 0, 0 },  { 0, 2, 0 },\n+      { 0, 0, 2 },  { 3, 0, 0 },  { 0, 3, 0 },  { 0, 0, 3 },  { 4, 0, 0 },\n+      { 0, 4, 0 },  { 0, 0, 4 } };\n+\n+static inline float iprod__(const rvec_ a, const rvec_ b)\n+{\n+  return (a[0] * b[0] + a[1] * b[1] + a[2] * b[2]);\n+}\n+\n+int badaboum(rvec_ cm_mol, float **tc)\n+{\n+  float              sx;\n+  int                k, d;\n+  rvec_              kfac[3];\n+\n+  for (k = 0; k < DIM; k++)\n+    for (d = 0; d < DIM; d++)\n+      kfac[k][d] = M_PI * v0[k][d] / v0[d][d];\n+\n+  for (k = 0; k < DIM; k++)\n+    {\n+      sx = __builtin_sinf(iprod__(kfac[k], cm_mol));\n+      tc[k][0] += sx * iprod__(v0[k], cm_mol);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "5ffb63689f268dd5af9bcd5397435a8e2d628464", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ad72811242eb84dde1bb2e97d0804d6eabeac8a/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ad72811242eb84dde1bb2e97d0804d6eabeac8a/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=1ad72811242eb84dde1bb2e97d0804d6eabeac8a", "patch": "@@ -1926,8 +1926,17 @@ vect_build_slp_tree_2 (vec_info *vinfo, slp_tree node,\n \t      if (dt == vect_constant_def\n \t\t  || dt == vect_external_def)\n \t\t{\n-\t\t  /* We can always build those.  Might want to sort last\n-\t\t     or defer building.  */\n+\t\t  /* Check whether we can build the invariant.  If we can't\n+\t\t     we never will be able to.  */\n+\t\t  tree type = TREE_TYPE (chains[0][n].op);\n+\t\t  if (!GET_MODE_SIZE (vinfo->vector_mode).is_constant ()\n+\t\t      && (TREE_CODE (type) == BOOLEAN_TYPE\n+\t\t\t  || !can_duplicate_and_interleave_p (vinfo, group_size,\n+\t\t\t\t\t\t\t      type)))\n+\t\t    {\n+\t\t      matches[0] = false;\n+\t\t      goto out;\n+\t\t    }\n \t\t  vec<tree> ops;\n \t\t  ops.create (group_size);\n \t\t  for (lane = 0; lane < group_size; ++lane)"}]}