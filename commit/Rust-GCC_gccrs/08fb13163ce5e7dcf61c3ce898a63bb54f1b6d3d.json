{"sha": "08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmYjEzMTYzY2U1ZTdkY2Y2MWMzY2U4OThhNjNiYjU0ZjFiNmQzZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-30T18:46:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-30T18:46:01Z"}, "message": "config-lang.in (gtfiles): Add cp/lex.c.\n\n\t* config-lang.in (gtfiles): Add cp/lex.c.\n\t* cp-tree.h (mangle_convop_name_for_type): Rename ...\n\t(make_conv_op_name): ... here.  Move to lex.\n\t* lambda.c (maybe_add_lambda_conv_op): Update.\n\t* parser.c (cp_parser_conversion_function_id): Update.\n\t* pt.c (tsubst_decl, tsubst_baselink, tsubst_copy,\n\ttsubst_copy_and_build): Update.\n\t* semantics.c (apply_deduced_return_type): Update.\n\t* mangle.c (conv_type_hasher, conv_type_names,\n\tmangle_conv_op_name_for_type): Move to ...\n\t* lex.c (conv_type_hasher, conv_type_names, make_convop_name):\n\t... here.  Rename.\n\n\t* libcp1plugin.cc (plugin_build_decl): Use make_conv_op_name.\n\t(plugin_build_dependent_expr): Likewise.\n\nFrom-SVN: r249852", "tree": {"sha": "f11884853ec0043f4c12eafc94bcc8d6898b162f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f11884853ec0043f4c12eafc94bcc8d6898b162f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "618400bc14b5c52a450e91d59632d5b08ae1a325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618400bc14b5c52a450e91d59632d5b08ae1a325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618400bc14b5c52a450e91d59632d5b08ae1a325"}], "stats": {"total": 181, "additions": 101, "deletions": 80}, "files": [{"sha": "ff57214535f00f6730b6d80dde9d997a6601b657", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -1,3 +1,18 @@\n+2017-06-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config-lang.in (gtfiles): Add cp/lex.c.\n+\t* cp-tree.h (mangle_convop_name_for_type): Rename ...\n+\t(make_conv_op_name): ... here.  Move to lex.\n+\t* lambda.c (maybe_add_lambda_conv_op): Update.\n+\t* parser.c (cp_parser_conversion_function_id): Update.\n+\t* pt.c (tsubst_decl, tsubst_baselink, tsubst_copy,\n+\ttsubst_copy_and_build): Update.\n+\t* semantics.c (apply_deduced_return_type): Update.\n+\t* mangle.c (conv_type_hasher, conv_type_names,\n+\tmangle_conv_op_name_for_type): Move to ...\n+\t* lex.c (conv_type_hasher, conv_type_names, make_convop_name):\n+\t... here.  Rename.\n+\n 2017-06-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/80014"}, {"sha": "c009570b63dccbc5a290ca614d9c8c4f4eab27d8", "filename": "gcc/cp/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconfig-lang.in?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -45,7 +45,7 @@ gtfiles=\"\\\n \\$(srcdir)/cp/except.c \\\n \\$(srcdir)/cp/friend.c \\\n \\$(srcdir)/cp/init.c \\\n-\\$(srcdir)/cp/lambda.c \\\n+\\$(srcdir)/cp/lambda.c \\$(srcdir)/cp/lex.c \\\n \\$(srcdir)/cp/mangle.c \\$(srcdir)/cp/method.c \\\n \\$(srcdir)/cp/name-lookup.c \\\n \\$(srcdir)/cp/parser.c \\$(srcdir)/cp/pt.c \\"}, {"sha": "abaef68fda967fd1dc618e3036f2f435ac60be74", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -6326,6 +6326,7 @@ extern void yyungetc\t\t\t\t(int, int);\n extern tree unqualified_name_lookup_error\t(tree,\n \t\t\t\t\t\t location_t = UNKNOWN_LOCATION);\n extern tree unqualified_fn_lookup_error\t\t(cp_expr);\n+extern tree make_conv_op_name\t\t\t(tree);\n extern tree build_lang_decl\t\t\t(enum tree_code, tree, tree);\n extern tree build_lang_decl_loc\t\t\t(location_t, enum tree_code, tree, tree);\n extern void retrofit_lang_decl\t\t\t(tree);\n@@ -7180,7 +7181,6 @@ extern tree mangle_vtbl_for_type\t\t(tree);\n extern tree mangle_vtt_for_type\t\t\t(tree);\n extern tree mangle_ctor_vtbl_for_type\t\t(tree, tree);\n extern tree mangle_thunk\t\t\t(tree, int, tree, tree, tree);\n-extern tree mangle_conv_op_name_for_type\t(tree);\n extern tree mangle_guard_variable\t\t(tree);\n extern tree mangle_tls_init_fn\t\t\t(tree);\n extern tree mangle_tls_wrapper_fn\t\t(tree);"}, {"sha": "0e02375fa1b3f8382450534425965d685582ce3b", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -1088,7 +1088,7 @@ maybe_add_lambda_conv_op (tree type)\n   /* First build up the conversion op.  */\n \n   tree rettype = build_pointer_type (stattype);\n-  tree name = mangle_conv_op_name_for_type (rettype);\n+  tree name = make_conv_op_name (rettype);\n   tree thistype = cp_build_qualified_type (type, TYPE_QUAL_CONST);\n   tree fntype = build_method_type_directly (thistype, rettype, void_list_node);\n   tree convfn = build_lang_decl (FUNCTION_DECL, name, fntype);"}, {"sha": "961b705a54682f4536a333fc7e6b79757cc7dba6", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -531,6 +531,74 @@ unqualified_fn_lookup_error (cp_expr name_expr)\n   return unqualified_name_lookup_error (name, loc);\n }\n \n+struct conv_type_hasher : ggc_ptr_hash<tree_node>\n+{\n+  static hashval_t hash (tree);\n+  static bool equal (tree, tree);\n+};\n+\n+/* This hash table maps TYPEs to the IDENTIFIER for a conversion\n+   operator to TYPE.  The nodes are IDENTIFIERs whose TREE_TYPE is the\n+   TYPE.  */\n+\n+static GTY (()) hash_table<conv_type_hasher> *conv_type_names;\n+\n+/* Hash a node (VAL1) in the table.  */\n+\n+hashval_t\n+conv_type_hasher::hash (tree val)\n+{\n+  return (hashval_t) TYPE_UID (TREE_TYPE (val));\n+}\n+\n+/* Compare VAL1 (a node in the table) with VAL2 (a TYPE).  */\n+\n+bool\n+conv_type_hasher::equal (tree val1, tree val2)\n+{\n+  return TREE_TYPE (val1) == val2;\n+}\n+\n+/* Return an identifier for a conversion operator to TYPE.  We can\n+   get from the returned identifier to the type.  */\n+\n+tree\n+make_conv_op_name (tree type)\n+{\n+  tree *slot;\n+  tree identifier;\n+\n+  if (type == error_mark_node)\n+    return error_mark_node;\n+\n+  if (conv_type_names == NULL)\n+    conv_type_names = hash_table<conv_type_hasher>::create_ggc (31);\n+\n+  slot = conv_type_names->find_slot_with_hash (type,\n+\t\t\t\t\t       (hashval_t) TYPE_UID (type),\n+\t\t\t\t\t       INSERT);\n+  identifier = *slot;\n+  if (!identifier)\n+    {\n+      char buffer[64];\n+\n+       /* Create a unique name corresponding to TYPE.  */\n+      sprintf (buffer, \"operator %lu\",\n+\t       (unsigned long) conv_type_names->elements ());\n+      identifier = get_identifier (buffer);\n+      *slot = identifier;\n+\n+      /* Hang TYPE off the identifier so it can be found easily later\n+\t when performing conversions.  */\n+      TREE_TYPE (identifier) = type;\n+\n+      /* Set the identifier kind so we know later it's a conversion.  */\n+      set_identifier_kind (identifier, cik_conv_op);\n+    }\n+\n+  return identifier;\n+}\n+\n /* Wrapper around build_lang_decl_loc(). Should gradually move to\n    build_lang_decl_loc() and then rename build_lang_decl_loc() back to\n    build_lang_decl().  */\n@@ -799,3 +867,5 @@ in_main_input_context (void)\n   else\n     return filename_cmp (main_input_filename, LOCATION_FILE (input_location)) == 0;\n }\n+\n+#include \"gt-cp-lex.h\""}, {"sha": "8bb26a9902b46023e8162c148ec0390031e1a1a1", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -4176,75 +4176,6 @@ mangle_thunk (tree fn_decl, const int this_adjusting, tree fixed_offset,\n   return result;\n }\n \n-struct conv_type_hasher : ggc_ptr_hash<tree_node>\n-{\n-  static hashval_t hash (tree);\n-  static bool equal (tree, tree);\n-};\n-\n-/* This hash table maps TYPEs to the IDENTIFIER for a conversion\n-   operator to TYPE.  The nodes are IDENTIFIERs whose TREE_TYPE is the\n-   TYPE.  */\n-\n-static GTY (()) hash_table<conv_type_hasher> *conv_type_names;\n-\n-/* Hash a node (VAL1) in the table.  */\n-\n-hashval_t\n-conv_type_hasher::hash (tree val)\n-{\n-  return (hashval_t) TYPE_UID (TREE_TYPE (val));\n-}\n-\n-/* Compare VAL1 (a node in the table) with VAL2 (a TYPE).  */\n-\n-bool\n-conv_type_hasher::equal (tree val1, tree val2)\n-{\n-  return TREE_TYPE (val1) == val2;\n-}\n-\n-/* Return an identifier for the mangled unqualified name for a\n-   conversion operator to TYPE.  This mangling is not specified by the\n-   ABI spec; it is only used internally.  */\n-\n-tree\n-mangle_conv_op_name_for_type (const tree type)\n-{\n-  tree *slot;\n-  tree identifier;\n-\n-  if (type == error_mark_node)\n-    return error_mark_node;\n-\n-  if (conv_type_names == NULL)\n-    conv_type_names = hash_table<conv_type_hasher>::create_ggc (31);\n-\n-  slot = conv_type_names->find_slot_with_hash (type,\n-\t\t\t\t\t       (hashval_t) TYPE_UID (type),\n-\t\t\t\t\t       INSERT);\n-  identifier = *slot;\n-  if (!identifier)\n-    {\n-      char buffer[64];\n-\n-       /* Create a unique name corresponding to TYPE.  */\n-      sprintf (buffer, \"operator %lu\",\n-\t       (unsigned long) conv_type_names->elements ());\n-      identifier = get_identifier (buffer);\n-      *slot = identifier;\n-\n-      /* Hang TYPE off the identifier so it can be found easily later\n-\t when performing conversions.  */\n-      TREE_TYPE (identifier) = type;\n-\n-      /* Set the identifier kind so we know later it's a conversion.  */\n-      set_identifier_kind (identifier, cik_conv_op);\n-    }\n-\n-  return identifier;\n-}\n-\n /* Handle ABI backwards compatibility for past bugs where we didn't call\n    check_abi_tags in places where it's needed: call check_abi_tags and warn if\n    it makes a difference.  If FOR_DECL is non-null, it's the declaration"}, {"sha": "ea5a5103565eb3e5596f6586a9216aeb4b3815f8", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -14081,7 +14081,7 @@ cp_parser_conversion_function_id (cp_parser* parser)\n   /* If the TYPE is invalid, indicate failure.  */\n   if (type == error_mark_node)\n     return error_mark_node;\n-  return mangle_conv_op_name_for_type (type);\n+  return make_conv_op_name (type);\n }\n \n /* Parse a conversion-type-id:"}, {"sha": "bd02951cb85136f8ef5f91d69c5439830d136c9e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -12385,7 +12385,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \tif (member && DECL_CONV_FN_P (r))\n \t  /* Type-conversion operator.  Reconstruct the name, in\n \t     case it's the name of one of the template's parameters.  */\n-\t  DECL_NAME (r) = mangle_conv_op_name_for_type (TREE_TYPE (type));\n+\t  DECL_NAME (r) = make_conv_op_name (TREE_TYPE (type));\n \n \tDECL_ARGUMENTS (r) = tsubst (DECL_ARGUMENTS (t), args,\n \t\t\t\t     complain, t);\n@@ -14242,7 +14242,7 @@ tsubst_baselink (tree baselink, tree object_type,\n \n   tree name = OVL_NAME (fns);\n   if (IDENTIFIER_CONV_OP_P (name))\n-    name = mangle_conv_op_name_for_type (optype);\n+    name = make_conv_op_name (optype);\n \n   baselink = lookup_fnfields (qualifying_scope, name, /*protect=*/1);\n   if (!baselink)\n@@ -15032,7 +15032,7 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       if (IDENTIFIER_CONV_OP_P (t))\n \t{\n \t  tree new_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n-\t  return mangle_conv_op_name_for_type (new_type);\n+\t  return make_conv_op_name (new_type);\n \t}\n       else\n \treturn t;\n@@ -16665,7 +16665,7 @@ tsubst_copy_and_build (tree t,\n \tif (IDENTIFIER_CONV_OP_P (t))\n \t  {\n \t    tree new_type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n-\t    t = mangle_conv_op_name_for_type (new_type);\n+\t    t = make_conv_op_name (new_type);\n \t  }\n \n \t/* Look up the name.  */"}, {"sha": "f6177b32a32f72ca8768a682b54e637d6413b555", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -9399,7 +9399,7 @@ apply_deduced_return_type (tree fco, tree return_type)\n     }\n \n   if (DECL_CONV_FN_P (fco))\n-    DECL_NAME (fco) = mangle_conv_op_name_for_type (return_type);\n+    DECL_NAME (fco) = make_conv_op_name (return_type);\n \n   TREE_TYPE (fco) = change_return_type (return_type, TREE_TYPE (fco));\n "}, {"sha": "ec795c78fcd564b5ba106d14538cc39cc294ef1f", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -1,3 +1,8 @@\n+2017-06-30  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_decl): Use make_conv_op_name.\n+\t(plugin_build_dependent_expr): Likewise.\n+\n 2017-06-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_decl): Don't set"}, {"sha": "7397888373b4a49f6178b8183abefddf7a2faaa7", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=08fb13163ce5e7dcf61c3ce898a63bb54f1b6d3d", "patch": "@@ -1321,7 +1321,7 @@ plugin_build_decl (cc1_plugin::connection *self,\n \t      opcode = ARRAY_REF;\n \t      break;\n \t    case CHARS2 ('c', 'v'): // operator <T> (conversion operator)\n-\t      identifier = mangle_conv_op_name_for_type (TREE_TYPE (sym_type));\n+\t      identifier = make_conv_op_name (TREE_TYPE (sym_type));\n \t      break;\n \t      // C++11-only:\n \t    case CHARS2 ('l', 'i'): // operator \"\" <id>\n@@ -2622,7 +2622,7 @@ plugin_build_dependent_expr (cc1_plugin::connection *self,\n \t  break;\n \tcase CHARS2 ('c', 'v'): // operator <T> (conversion operator)\n \t  convop = true;\n-\t  identifier = mangle_conv_op_name_for_type (conv_type);\n+\t  identifier = make_conv_op_name (conv_type);\n \t  break;\n \t  // C++11-only:\n \tcase CHARS2 ('l', 'i'): // operator \"\" <id>"}]}