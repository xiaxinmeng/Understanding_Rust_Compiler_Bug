{"sha": "ca68ea18621523e959e06361efd0e43abbe32dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2OGVhMTg2MjE1MjNlOTU5ZTA2MzYxZWZkMGU0M2FiYmUzMmRjOQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2000-11-09T01:26:21Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2000-11-09T01:26:21Z"}, "message": "Fix {u}mulsidi3adddi patterns in arm.md and add testcase to check that the\nfix stays in place.\n\nFrom-SVN: r37331", "tree": {"sha": "d61530d8b72c8a56e0e5ac78cf15ff84dca04362", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61530d8b72c8a56e0e5ac78cf15ff84dca04362"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca68ea18621523e959e06361efd0e43abbe32dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca68ea18621523e959e06361efd0e43abbe32dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca68ea18621523e959e06361efd0e43abbe32dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca68ea18621523e959e06361efd0e43abbe32dc9/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32e1e6fbc96ee261728dbbc5da6fd69619b15b8"}], "stats": {"total": 112, "additions": 83, "deletions": 29}, "files": [{"sha": "0dff2c268c5370e7777caa649782946fa15aca30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca68ea18621523e959e06361efd0e43abbe32dc9", "patch": "@@ -1,3 +1,10 @@\n+2000-11-08  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/arm/arm.md (mulsidi3adddi): Change output operand\n+\tconstraint from \"=&\" to \"=&\".\n+\t(umulsidi3adddi): Change output operand\tconstraint from \"=&\" to\n+\t\"=&\".\n+\n 2000-11-08  Richard Henderson  <rth@redhat.com>\n \n \t* flow.c (init_propagate_block_info): Protect the rtx stored in"}, {"sha": "1c0f0cd29f8d3ddabb1f8d3f1db2a45295565788", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 56, "deletions": 29, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ca68ea18621523e959e06361efd0e43abbe32dc9", "patch": "@@ -1,5 +1,6 @@\n ;;- Machine description for ARM for GNU compiler\n-;;  Copyright (C) 1991, 93-98, 1999 Free Software Foundation, Inc.\n+;;  Copyright 1991, 1993, 1994, 1995, 1996, 1996, 1997, 1998, 1999, 2000\n+;;  Free Software Foundation, Inc.\n ;;  Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n ;;  and Martin Simmons (@harleqn.co.uk).\n ;;  More major hacks by Richard Earnshaw (rearnsha@arm.com).\n@@ -339,7 +340,8 @@\n \t(plus:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n \t\t (match_operand:DI 2 \"s_register_operand\" \"\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_ARM && reload_completed\n+  \"\n   [(parallel [(set (reg:CC_C 24)\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n@@ -366,7 +368,8 @@\n \t(plus:DI (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))\n \t\t (match_operand:DI 1 \"s_register_operand\" \"\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_ARM && reload_completed\n+  \"\n   [(parallel [(set (reg:CC_C 24)\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n@@ -394,7 +397,8 @@\n \t(plus:DI (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))\n \t\t (match_operand:DI 1 \"s_register_operand\" \"\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM && reload_completed\"\n+  \"TARGET_ARM && reload_completed\n+  \"\n   [(parallel [(set (reg:CC_C 24)\n \t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n \t\t\t\t (match_dup 1)))\n@@ -447,7 +451,8 @@\n \t(plus:DI (match_operand:DI 1 \"s_register_operand\" \"%0, 0\")\n \t\t (match_operand:DI 2 \"s_register_operand\" \"r,  0\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+  \"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]\n@@ -459,7 +464,8 @@\n \t\t  (match_operand:SI 2 \"s_register_operand\" \"r,r\"))\n \t\t (match_operand:DI 1 \"s_register_operand\" \"r,0\")))\n    (clobber (reg:CC 24))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+  \"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]\n@@ -472,7 +478,8 @@\n \t\t (match_operand:DI 1 \"s_register_operand\" \"r,0\")))\n    (clobber (reg:CC 24))\n   ]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+  \"\n   \"#\"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]\n@@ -1256,7 +1263,7 @@\n ;; Unnamed template to match long long multiply-accumlate (smlal)\n \n (define_insn \"*mulsidi3adddi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"+&r,&r,&r\")\n \t(plus:DI\n \t (mult:DI\n \t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,0,1\"))\n@@ -1293,7 +1300,7 @@\n ;; Unnamed template to match long long unsigned multiply-accumlate (umlal)\n \n (define_insn \"*umulsidi3adddi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=&r,&r,&r\")\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"+&r,&r,&r\")\n \t(plus:DI\n \t (mult:DI\n \t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,0,1\"))\n@@ -2117,7 +2124,8 @@\n \t\t(match_operand:SI           1 \"s_register_operand\"  \"r\")))]\n   \"TARGET_ARM\"\n   \"bic%?\\\\t%0, %1, %2%S4\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   ]\n )\n \n (define_insn \"*andsi_notsi_si_compare0\"\n@@ -2607,7 +2615,8 @@\n \t  (match_operand:SI 2 \"reg_or_int_operand\" \"rM\")]))]\n   \"TARGET_ARM\"\n   \"mov%?\\\\t%0, %1%S3\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   ]\n )\n \n (define_insn \"*shiftsi3_compare0\"\n@@ -2620,7 +2629,8 @@\n \t(match_op_dup 3 [(match_dup 1) (match_dup 2)]))]\n   \"TARGET_ARM\"\n   \"mov%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*shiftsi3_compare0_scratch\"\n@@ -2632,7 +2642,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"mov%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*notsi_shiftsi\"\n@@ -2642,7 +2653,8 @@\n \t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")])))]\n   \"TARGET_ARM\"\n   \"mvn%?\\\\t%0, %1%S3\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   ]\n )\n \n (define_insn \"*notsi_shiftsi_compare0\"\n@@ -2655,7 +2667,8 @@\n \t(not:SI (match_op_dup 3 [(match_dup 1) (match_dup 2)])))]\n   \"TARGET_ARM\"\n   \"mvn%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*not_shiftsi_compare0_scratch\"\n@@ -2667,7 +2680,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"mvn%?s\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n ;; We don't really have extzv, but defining this using shifts helps\n@@ -3933,7 +3947,8 @@\n (define_insn \"*arm_movdi\"\n   [(set (match_operand:DI 0 \"nonimmediate_di_operand\" \"=r, r, o<>\")\n \t(match_operand:DI 1 \"di_operand\"              \"rIK,mi,r\"))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+  \"\n   \"*\n   return (output_move_double (operands));\n   \"\n@@ -4748,7 +4763,8 @@\n \t(match_operand:HI     1 \"register_operand\" \"l\"))\n    (clobber (match_operand:SI 2 \"register_operand\" \"=&l\"))]\n   \"TARGET_THUMB\"\n-  \"Hi Nick\"\n+  \"*\n+  abort ();\"\n )\n \t\n ;; We use a DImode scratch because we may occasionally need an additional\n@@ -5092,7 +5108,8 @@\n (define_insn \"*movdf_soft_insn\"\n   [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=r,r,m\")\n \t(match_operand:DF 1 \"soft_df_operand\" \"r,mF,r\"))]\n-  \"TARGET_ARM && TARGET_SOFT_FLOAT\"\n+  \"TARGET_ARM && TARGET_SOFT_FLOAT\n+  \"\n   \"* return output_move_double (operands);\"\n   [(set_attr \"length\" \"8,8,8\")\n    (set_attr \"type\" \"*,load,store2\")\n@@ -5553,7 +5570,8 @@\n \t\t      (match_operand:SI 2 \"arm_rhs_operand\"    \"rM\")])))]\n   \"TARGET_ARM\"\n   \"cmp%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*cmpsi_shiftsi_swp\"\n@@ -5564,7 +5582,8 @@\n \t\t\t(match_operand:SI 0 \"s_register_operand\" \"r\")))]\n   \"TARGET_ARM\"\n   \"cmp%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*cmpsi_neg_shiftsi\"\n@@ -5575,7 +5594,8 @@\n \t\t\t      (match_operand:SI 2 \"arm_rhs_operand\" \"rM\")]))))]\n   \"TARGET_ARM\"\n   \"cmn%?\\\\t%0, %1%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*cmpsf_insn\"\n@@ -6803,7 +6823,8 @@\n            (match_operand:SI 2 \"s_register_operand\" \"r\")]))]\n   \"TARGET_ARM\"\n   \"%i1%?\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   ]\n )\n \n (define_insn \"*arith_shiftsi_compare0\"\n@@ -6819,7 +6840,8 @@\n \t\t\t (match_dup 2)]))]\n   \"TARGET_ARM\"\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*arith_shiftsi_compare0_scratch\"\n@@ -6833,7 +6855,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"%i1%?s\\\\t%0, %2, %4%S3\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*sub_shiftsi\"\n@@ -6844,7 +6867,8 @@\n \t\t    (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])))]\n   \"TARGET_ARM\"\n   \"sub%?\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   ]\n )\n \n (define_insn \"*sub_shiftsi_compare0\"\n@@ -6860,7 +6884,8 @@\n \t\t\t\t\t\t (match_dup 4)])))]\n   \"TARGET_ARM\"\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n (define_insn \"*sub_shiftsi_compare0_scratch\"\n@@ -6874,7 +6899,8 @@\n    (clobber (match_scratch:SI 0 \"=r\"))]\n   \"TARGET_ARM\"\n   \"sub%?s\\\\t%0, %1, %3%S2\"\n-  [(set_attr \"conds\" \"set\")]\n+  [(set_attr \"conds\" \"set\")\n+   ]\n )\n \n ;; These variants of the above insns can occur if the first operand is the\n@@ -8387,7 +8413,8 @@\n \t(match_operand:SI 1 \"s_register_operand\" \"r\"))\n    (set (reg:CC 24)\n \t(compare:CC (match_dup 1) (const_int 0)))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM\n+  \"\n   \"sub%?s\\\\t%0, %1, #0\"\n   [(set_attr \"conds\" \"set\")]\n )"}, {"sha": "dff8531f4b15e7698a12f0c09a797a26b632859f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca68ea18621523e959e06361efd0e43abbe32dc9", "patch": "@@ -1,3 +1,8 @@\n+2000-11-08  Nick Clifton  <nickc@redhat.com>\n+\n+\t* gcc.c-torture/execute/20001108-1.c: New test case.  Checks\n+\tmulsidi3adddi patterns.\n+\n 2000-11-08  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.other/crash36.C: New test."}, {"sha": "35756fd142c9240a402b0e9cc65ac6299f68a5b2", "filename": "gcc/testsuite/gcc.c-torture/execute/20001108-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20001108-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca68ea18621523e959e06361efd0e43abbe32dc9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20001108-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20001108-1.c?ref=ca68ea18621523e959e06361efd0e43abbe32dc9", "patch": "@@ -0,0 +1,15 @@\n+long long\n+poly (long long sum, long x)\n+{\n+  sum += (long long) (long) sum * (long long) x;\n+  return sum;\n+}\n+\n+int\n+main (void)\n+{\n+  if (poly (2LL, 3) != 8LL)\n+    abort ();\n+\n+  exit (0);\n+}"}]}