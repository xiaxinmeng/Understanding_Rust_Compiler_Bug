{"sha": "a49c3e1607d7a9fd80d4899e68821e9ff8594015", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5YzNlMTYwN2Q3YTlmZDgwZDQ4OTllNjg4MjFlOWZmODU5NDAxNQ==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2005-06-16T08:38:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:38:39Z"}, "message": "fe.h: Add entry for Opt.Exception_Locations_Suppressed so that gigi can determine...\n\n2005-06-14  Jose Ruiz  <ruiz@adacore.com>\n\n\t* fe.h: Add entry for Opt.Exception_Locations_Suppressed so that gigi\n\tcan determine whether pragma Suppress_Exception_Locations is in effect.\n\n\t* utils2.c (build_call_raise): Do not pass the file name to the\n\texception handler if pragma Suppress_Exception_Locations is in effect.\n\t(build_allocator): Add and process arg IGNORE_INIT_TYPE.\n\nFrom-SVN: r101037", "tree": {"sha": "e582bd898c04036cc4635ef9aa0e7b401a21c7d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e582bd898c04036cc4635ef9aa0e7b401a21c7d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49c3e1607d7a9fd80d4899e68821e9ff8594015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49c3e1607d7a9fd80d4899e68821e9ff8594015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49c3e1607d7a9fd80d4899e68821e9ff8594015", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49c3e1607d7a9fd80d4899e68821e9ff8594015/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84f8ad69c8d065ce18acee11f7d091092ae0d907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f8ad69c8d065ce18acee11f7d091092ae0d907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f8ad69c8d065ce18acee11f7d091092ae0d907"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "39516a63c396303efd60c3ef7e489cc5c15bef84", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49c3e1607d7a9fd80d4899e68821e9ff8594015/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49c3e1607d7a9fd80d4899e68821e9ff8594015/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=a49c3e1607d7a9fd80d4899e68821e9ff8594015", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2004 Free Software Foundation, Inc.          *\n+ *          Copyright (C) 1992-2005 Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -150,13 +150,15 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n \n /* opt: */\n \n-#define Global_Discard_Names   opt__global_discard_names\n-#define Exception_Mechanism    opt__exception_mechanism\n-#define Back_Annotate_Rep_Info opt__back_annotate_rep_info\n+#define Global_Discard_Names           opt__global_discard_names\n+#define Exception_Locations_Suppressed opt__exception_locations_suppressed\n+#define Exception_Mechanism            opt__exception_mechanism\n+#define Back_Annotate_Rep_Info         opt__back_annotate_rep_info\n \n typedef enum {Setjmp_Longjmp, Front_End_ZCX, GCC_ZCX} Exception_Mechanism_Type;\n \n extern Boolean Global_Discard_Names;\n+extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;\n extern Boolean Back_Annotate_Rep_Info;\n "}, {"sha": "3611264fd3bb481f338b9431a9dc64b8a5d5e566", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49c3e1607d7a9fd80d4899e68821e9ff8594015/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49c3e1607d7a9fd80d4899e68821e9ff8594015/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=a49c3e1607d7a9fd80d4899e68821e9ff8594015", "patch": "@@ -1430,7 +1430,8 @@ tree\n build_call_raise (int msg)\n {\n   tree fndecl = gnat_raise_decls[msg];\n-  const char *str = Debug_Flag_NN ? \"\" : ref_filename;\n+  const char *str\n+    = (Debug_Flag_NN || Exception_Locations_Suppressed) ? \"\" : ref_filename;\n   int len = strlen (str) + 1;\n   tree filename = build_string (len, str);\n \n@@ -1751,11 +1752,15 @@ build_call_alloc_dealloc (tree gnu_obj, tree gnu_size, unsigned align,\n    initial value is INIT, if INIT is nonzero.  Convert the expression to\n    RESULT_TYPE, which must be some type of pointer.  Return the tree.\n    GNAT_PROC and GNAT_POOL optionally give the procedure to call and\n-   the storage pool to use.  */\n+   the storage pool to use.  GNAT_NODE is used to provide an error\n+   location for restriction violations messages.  If IGNORE_INIT_TYPE is\n+   true, ignore the type of INIT for the purpose of determining the size;\n+   this will cause the maximum size to be allocated if TYPE is of\n+   self-referential size.  */\n \n tree\n build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n-                 Entity_Id gnat_pool, Node_Id gnat_node)\n+                 Entity_Id gnat_pool, Node_Id gnat_node, bool ignore_init_type)\n {\n   tree size = TYPE_SIZE_UNIT (type);\n   tree result;\n@@ -1839,7 +1844,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \n   /* If we have an initializing expression, see if its size is simpler\n      than the size from the type.  */\n-  if (init && TYPE_SIZE_UNIT (TREE_TYPE (init))\n+  if (!ignore_init_type && init && TYPE_SIZE_UNIT (TREE_TYPE (init))\n       && (TREE_CODE (TYPE_SIZE_UNIT (TREE_TYPE (init))) == INTEGER_CST\n \t  || CONTAINS_PLACEHOLDER_P (size)))\n     size = TYPE_SIZE_UNIT (TREE_TYPE (init));\n@@ -1850,7 +1855,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n      the maximum size.  */\n   if (CONTAINS_PLACEHOLDER_P (size))\n     {\n-      if (init)\n+      if (!ignore_init_type && init)\n \tsize = substitute_placeholder_in_expr (size, init);\n       else\n \tsize = max_size (size, true);"}]}