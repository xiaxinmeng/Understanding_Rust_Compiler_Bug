{"sha": "0d7afaa749574e40058b94bb762fe90e96c12896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ3YWZhYTc0OTU3NGU0MDA1OGI5NGJiNzYyZmU5MGU5NmMxMjg5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-06-07T00:55:20Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-06-07T00:55:20Z"}, "message": "runtime: Use dl_iterate_phdr to get TLS size.\n\nFrom-SVN: r188290", "tree": {"sha": "df3ab096fe1132c25cca2f3c18db4ac5133baf52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df3ab096fe1132c25cca2f3c18db4ac5133baf52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d7afaa749574e40058b94bb762fe90e96c12896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7afaa749574e40058b94bb762fe90e96c12896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7afaa749574e40058b94bb762fe90e96c12896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7afaa749574e40058b94bb762fe90e96c12896/comments", "author": null, "committer": null, "parents": [{"sha": "079d26b9d6ddf88d63fe435952c7f8a6f262141c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079d26b9d6ddf88d63fe435952c7f8a6f262141c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079d26b9d6ddf88d63fe435952c7f8a6f262141c"}], "stats": {"total": 99, "additions": 63, "deletions": 36}, "files": [{"sha": "0aef2ce7b075940514beba2cdde645375f86496f", "filename": "libgo/config.h.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfig.h.in?ref=0d7afaa749574e40058b94bb762fe90e96c12896", "patch": "@@ -21,6 +21,9 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n+/* Define to 1 if you have the `dl_iterate_phdr' function. */\n+#undef HAVE_DL_ITERATE_PHDR\n+\n /* Define to 1 if you have the `epoll_create1' function. */\n #undef HAVE_EPOLL_CREATE1\n \n@@ -286,9 +289,6 @@\n /* Define to 1 if you have the `wait4' function. */\n #undef HAVE_WAIT4\n \n-/* Define to 1 if you have the `_dl_get_tls_static_info' function. */\n-#undef HAVE__DL_GET_TLS_STATIC_INFO\n-\n /* Define if the C++ compiler is configured for setjmp/longjmp exceptions. */\n #undef LIBGO_SJLJ_EXCEPTIONS\n "}, {"sha": "dc85ccfa9db7be3de4775de2fe4876ece657992c", "filename": "libgo/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=0d7afaa749574e40058b94bb762fe90e96c12896", "patch": "@@ -14584,7 +14584,7 @@ else\n fi\n \n \n-for ac_func in strerror_r strsignal wait4 mincore setenv _dl_get_tls_static_info\n+for ac_func in strerror_r strsignal wait4 mincore setenv dl_iterate_phdr\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\""}, {"sha": "0c0dbdd46a96b5fcfbacb4f70a85e176b8432b44", "filename": "libgo/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=0d7afaa749574e40058b94bb762fe90e96c12896", "patch": "@@ -481,7 +481,7 @@ fi\n \n AM_CONDITIONAL(HAVE_SYS_MMAN_H, test \"$ac_cv_header_sys_mman_h\" = yes)\n \n-AC_CHECK_FUNCS(strerror_r strsignal wait4 mincore setenv _dl_get_tls_static_info)\n+AC_CHECK_FUNCS(strerror_r strsignal wait4 mincore setenv dl_iterate_phdr)\n AM_CONDITIONAL(HAVE_STRERROR_R, test \"$ac_cv_func_strerror_r\" = yes)\n AM_CONDITIONAL(HAVE_WAIT4, test \"$ac_cv_func_wait4\" = yes)\n "}, {"sha": "e3befbec996dd3fac404ac1813c4ce8df759db10", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 58, "deletions": 31, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d7afaa749574e40058b94bb762fe90e96c12896/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=0d7afaa749574e40058b94bb762fe90e96c12896", "patch": "@@ -8,6 +8,11 @@\n #include <unistd.h>\n \n #include \"config.h\"\n+\n+#ifdef HAVE_DL_ITERATE_PHDR\n+#include <link.h>\n+#endif\n+\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"defs.h\"\n@@ -36,12 +41,12 @@ extern void __splitstack_block_signals_context (void *context[10], int *,\n \n #endif\n \n+#ifndef PTHREAD_STACK_MIN\n+# define PTHREAD_STACK_MIN 8192\n+#endif\n+\n #if defined(USING_SPLIT_STACK) && defined(LINKER_SUPPORTS_SPLIT_STACK)\n-# ifdef PTHREAD_STACK_MIN\n-#  define StackMin PTHREAD_STACK_MIN\n-# else\n-#  define StackMin 8192\n-# endif\n+# define StackMin PTHREAD_STACK_MIN\n #else\n # define StackMin 2 * 1024 * 1024\n #endif\n@@ -138,6 +143,46 @@ runtime_m(void)\n \n int32\truntime_gcwaiting;\n \n+// The static TLS size.  See runtime_newm.\n+static int tlssize;\n+\n+#ifdef HAVE_DL_ITERATE_PHDR\n+\n+// Called via dl_iterate_phdr.\n+\n+static int\n+addtls(struct dl_phdr_info* info, size_t size __attribute__ ((unused)), void *data)\n+{\n+\tsize_t *total = (size_t *)data;\n+\tunsigned int i;\n+\n+\tfor(i = 0; i < info->dlpi_phnum; ++i) {\n+\t\tif(info->dlpi_phdr[i].p_type == PT_TLS)\n+\t\t\t*total += info->dlpi_phdr[i].p_memsz;\n+\t}\n+\treturn 0;\n+}\n+\n+// Set the total TLS size.\n+\n+static void\n+inittlssize()\n+{\n+\tsize_t total = 0;\n+\n+\tdl_iterate_phdr(addtls, (void *)&total);\n+\ttlssize = total;\n+}\n+\n+#else\n+\n+static void\n+inittlssize()\n+{\n+}\n+\n+#endif\n+\n // Go scheduler\n //\n // The go scheduler's job is to match ready-to-run goroutines (`g's)\n@@ -393,6 +438,7 @@ runtime_schedinit(void)\n \tg->m = m;\n \n \tinitcontext();\n+\tinittlssize();\n \n \tm->nomemprof++;\n \truntime_mallocinit();\n@@ -1116,34 +1162,15 @@ runtime_newm(void)\n \tif(pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED) != 0)\n \t\truntime_throw(\"pthread_attr_setdetachstate\");\n \n-#ifndef PTHREAD_STACK_MIN\n-#define PTHREAD_STACK_MIN 8192\n-#endif\n-\n \tstacksize = PTHREAD_STACK_MIN;\n \n-#if 0\n-#ifdef HAVE__DL_GET_TLS_STATIC_INFO\n-\t{\n-\t\t/* On GNU/Linux the static TLS size is taken out of\n-\t\t   the stack size, and we get an error or a crash if\n-\t\t   there is not enough stack space left.  Add it back\n-\t\t   in if we can, in case the program uses a lot of TLS\n-\t\t   space.  */\n-#ifndef internal_function\n-#ifdef __i386__\n-#define internal_function __attribute__ ((regparm (3), stdcall))\n-#else\n-#define internal_function\n-#endif\n-#endif\n-\t\textern void _dl_get_tls_static_info(size_t*, size_t*) internal_function;\n-\t\tsize_t tlssize, tlsalign;\n-\t\t_dl_get_tls_static_info(&tlssize, &tlsalign);\n-\t\tstacksize += tlssize;\n-\t}\n-#endif\n-#endif\n+\t// With glibc before version 2.16 the static TLS size is taken\n+\t// out of the stack size, and we get an error or a crash if\n+\t// there is not enough stack space left.  Add it back in if we\n+\t// can, in case the program uses a lot of TLS space.  FIXME:\n+\t// This can be disabled in glibc 2.16 and later, if the bug is\n+\t// indeed fixed then.\n+\tstacksize += tlssize;\n \n \tif(pthread_attr_setstacksize(&attr, stacksize) != 0)\n \t\truntime_throw(\"pthread_attr_setstacksize\");"}]}