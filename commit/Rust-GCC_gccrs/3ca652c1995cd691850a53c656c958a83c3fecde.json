{"sha": "3ca652c1995cd691850a53c656c958a83c3fecde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NhNjUyYzE5OTVjZDY5MTg1MGE1M2M2NTZjOTU4YTgzYzNmZWNkZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-12-13T17:02:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-12-13T17:02:14Z"}, "message": "PR libstdc++/59568 fix error handling for std::complex stream extraction\n\n\tPR libstdc++/59568\n\t* include/std/complex (operator>>): Implement proposed resolution to\n\tLWG 2714. Use putback if and only if a character has been successfully\n\textracted but isn't a delimiter. Use ctype::widen and traits::eq when\n\ttesting if extracted characters match delimiters.\n\t* testsuite/26_numerics/complex/dr2714.cc: New test.\n\nFrom-SVN: r255608", "tree": {"sha": "6c85c79c6bd41d1703c081e063e3a6db5195e718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c85c79c6bd41d1703c081e063e3a6db5195e718"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ca652c1995cd691850a53c656c958a83c3fecde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca652c1995cd691850a53c656c958a83c3fecde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ca652c1995cd691850a53c656c958a83c3fecde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ca652c1995cd691850a53c656c958a83c3fecde/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8041c629555ad2cbe8740d3a645332efcbd4e8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8041c629555ad2cbe8740d3a645332efcbd4e8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8041c629555ad2cbe8740d3a645332efcbd4e8d6"}], "stats": {"total": 236, "additions": 217, "deletions": 19}, "files": [{"sha": "e4e435dccee18c592f40ff3f44a3fbfddef080dc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca652c1995cd691850a53c656c958a83c3fecde/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca652c1995cd691850a53c656c958a83c3fecde/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ca652c1995cd691850a53c656c958a83c3fecde", "patch": "@@ -1,3 +1,12 @@\n+2017-12-13  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/59568\n+\t* include/std/complex (operator>>): Implement proposed resolution to\n+\tLWG 2714. Use putback if and only if a character has been successfully\n+\textracted but isn't a delimiter. Use ctype::widen and traits::eq when\n+\ttesting if extracted characters match delimiters.\n+\t* testsuite/26_numerics/complex/dr2714.cc: New test.\n+\n 2017-12-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/83395"}, {"sha": "bfe10347bd3788b12e701fc68b3a6216a0cc7925", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca652c1995cd691850a53c656c958a83c3fecde/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca652c1995cd691850a53c656c958a83c3fecde/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=3ca652c1995cd691850a53c656c958a83c3fecde", "patch": "@@ -492,31 +492,52 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_istream<_CharT, _Traits>&\n     operator>>(basic_istream<_CharT, _Traits>& __is, complex<_Tp>& __x)\n     {\n-      _Tp __re_x, __im_x;\n+      bool __fail = true;\n       _CharT __ch;\n-      __is >> __ch;\n-      if (__ch == '(')\n+      if (__is >> __ch)\n \t{\n-\t  __is >> __re_x >> __ch;\n-\t  if (__ch == ',')\n+\t  if (_Traits::eq(__ch, __is.widen('(')))\n \t    {\n-\t      __is >> __im_x >> __ch;\n-\t      if (__ch == ')')\n-\t\t__x = complex<_Tp>(__re_x, __im_x);\n-\t      else\n-\t\t__is.setstate(ios_base::failbit);\n+\t      _Tp __u;\n+\t      if (__is >> __u >> __ch)\n+\t\t{\n+\t\t  const _CharT __rparen = __is.widen(')');\n+\t\t  if (_Traits::eq(__ch, __rparen))\n+\t\t    {\n+\t\t      __x = __u;\n+\t\t      __fail = false;\n+\t\t    }\n+\t\t  else if (_Traits::eq(__ch, __is.widen(',')))\n+\t\t    {\n+\t\t      _Tp __v;\n+\t\t      if (__is >> __v >> __ch)\n+\t\t\t{\n+\t\t\t  if (_Traits::eq(__ch, __rparen))\n+\t\t\t    {\n+\t\t\t      __x = complex<_Tp>(__u, __v);\n+\t\t\t      __fail = false;\n+\t\t\t    }\n+\t\t\t  else\n+\t\t\t    __is.putback(__ch);\n+\t\t\t}\n+\t\t    }\n+\t\t  else\n+\t\t    __is.putback(__ch);\n+\t\t}\n \t    }\n-\t  else if (__ch == ')')\n-\t    __x = __re_x;\n \t  else\n-\t    __is.setstate(ios_base::failbit);\n-\t}\n-      else\n-\t{\n-\t  __is.putback(__ch);\n-\t  __is >> __re_x;\n-\t  __x = __re_x;\n+\t    {\n+\t      __is.putback(__ch);\n+\t      _Tp __u;\n+\t      if (__is >> __u)\n+\t\t{\n+\t\t  __x = __u;\n+\t\t  __fail = false;\n+\t\t}\n+\t    }\n \t}\n+      if (__fail)\n+\t__is.setstate(ios_base::failbit);\n       return __is;\n     }\n "}, {"sha": "6b35e8adcf91f8302954f6d636d5e335aa4b9160", "filename": "libstdc++-v3/testsuite/26_numerics/complex/dr2714.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ca652c1995cd691850a53c656c958a83c3fecde/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr2714.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ca652c1995cd691850a53c656c958a83c3fecde/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr2714.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr2714.cc?ref=3ca652c1995cd691850a53c656c958a83c3fecde", "patch": "@@ -0,0 +1,168 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++98\" }\n+\n+#include <complex>\n+#include <sstream>\n+#include <complex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istringstream in(\" 1 (2) ( 2.0 , 0.5 ) \");\n+  std::complex<double> c1, c2, c3;\n+  in >> c1 >> c2 >> c3;\n+  VERIFY( in.good() );\n+  VERIFY( c1.real() == 1 && c1.imag() == 0 );\n+  VERIFY( c2.real() == 2 && c2.imag() == 0 );\n+  VERIFY( c3.real() == 2 && c3.imag() == 0.5 );\n+}\n+\n+void\n+test02()\n+{\n+  std::wistringstream in(L\" ( 2.0 , 0.5 ) \");\n+  std::complex<double> c;\n+  in >> c;\n+  VERIFY( in.good() );\n+  VERIFY( c.real() == 2.0 && c.imag() == 0.5 );\n+}\n+\n+void\n+test03()\n+{\n+  std::istringstream in;\n+  std::complex<double> c(-1, -1);\n+  const std::complex<double> c0 = c;\n+\n+  in.str(\"a\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+\n+  in.str(\" ( ) \");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == ')' );\n+\n+  in.str(\"(,\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == ',' );\n+\n+  in.str(\"(b)\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+\n+  in.clear();\n+  VERIFY( in.get() == 'b' );\n+  in.str(\"( c)\");\n+\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == 'c' );\n+\n+  in.str(\"(99d\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == 'd' );\n+\n+  in.str(\"(99 e\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == 'e' );\n+\n+  in.str(\"(99, f\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == 'f' );\n+\n+  in.str(\"(99, 88g\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == 'g' );\n+\n+  in.str(\"(99, 88 h\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == 'h' );\n+\n+  in.str(\"(99, )\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  in.clear();\n+  VERIFY( in.get() == ')' );\n+\n+  VERIFY( c == c0 );\n+}\n+\n+void\n+test04()\n+{\n+  // PR libstdc++/59568\n+  std::istringstream in;\n+  std::complex<double> c;\n+\n+  in.str(\"\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  VERIFY( in.eof() );\n+  in.clear();\n+\n+  in.str(\" \");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  VERIFY( in.eof() );\n+  in.clear();\n+\n+  in.str(\"(99\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  VERIFY( in.eof() );\n+  in.clear();\n+\n+  in.str(\"(99,\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  VERIFY( in.eof() );\n+  in.clear();\n+\n+  in.str(\"(99,99\");\n+  in >> c;\n+  VERIFY( in.fail() );\n+  VERIFY( in.eof() );\n+  in.clear();\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}]}