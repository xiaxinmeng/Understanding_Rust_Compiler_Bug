{"sha": "e82ee4ccb6c344f5525e0c640e9f279d7d1013c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgyZWU0Y2NiNmMzNDRmNTUyNWUwYzY0MGU5ZjI3OWQ3ZDEwMTNjMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T12:06:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T12:06:43Z"}, "message": "(load_multiple insn): If address register is among regs...\n\n(load_multiple insn): If address register is among regs, don't load it\nwith a lwsi instruction, which is undefined on PowerPC.\n\nFrom-SVN: r10512", "tree": {"sha": "2cf38fbcf9cffd6d8a7d936931d80790cb067d9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cf38fbcf9cffd6d8a7d936931d80790cb067d9f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e82ee4ccb6c344f5525e0c640e9f279d7d1013c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82ee4ccb6c344f5525e0c640e9f279d7d1013c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e82ee4ccb6c344f5525e0c640e9f279d7d1013c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e82ee4ccb6c344f5525e0c640e9f279d7d1013c0/comments", "author": null, "committer": null, "parents": [{"sha": "c7eee2df1d729c52112e5388f6d4146780ae77d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7eee2df1d729c52112e5388f6d4146780ae77d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7eee2df1d729c52112e5388f6d4146780ae77d5"}], "stats": {"total": 56, "additions": 41, "deletions": 15}, "files": [{"sha": "ccea4dc81e0f0c14860aeeb887f9f30cbf685441", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e82ee4ccb6c344f5525e0c640e9f279d7d1013c0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e82ee4ccb6c344f5525e0c640e9f279d7d1013c0/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e82ee4ccb6c344f5525e0c640e9f279d7d1013c0", "patch": "@@ -4706,29 +4706,55 @@\n   \"*\n {\n   /* We have to handle the case where the pseudo used to contain the address\n-     is assigned to one of the output registers.  In that case, do the\n-     lsi, but then load the correct value.  This is a bit of a mess, but is\n-     the best we can do.\n-     We set the length attribute to the maximum possible size (8 bytes).  */\n-  static char result[100];\n-  char newload[40];\n-  int i;\n+     is assigned to one of the output registers.  */\n+  int i, j;\n+  int words = XVECLEN (operands[0], 0);\n+  rtx xop[10];\n+\n+  if (XVECLEN (operands[0], 0) == 1)\n+    return \\\"{l|lwz} %1,0(%2)\\\";\n \n-  strcpy (result, \\\"{lsi|lswi} %1,%2,%N0\\\");\n-  for (i = 0; i < XVECLEN (operands[0], 0); i++)\n+  for (i = 0; i < words; i++)\n     if (refers_to_regno_p (REGNO (operands[1]) + i,\n \t\t\t   REGNO (operands[1]) + i + 1, operands[2], 0))\n       {\n-\tsprintf (newload, \\\"\\;{l|lwz} %d,%d(%d)\\\",\n-\t\t REGNO (operands[1]) + i,\n-\t\t i * 4, REGNO (operands[2]));\n-\tstrcat (result, newload);\n+\tif (i == words-1)\n+\t  {\n+\t    xop[0] = operands[1];\n+\t    xop[1] = operands[2];\n+\t    xop[2] = GEN_INT (4 * (words-1));\n+\t    output_asm_insn (\\\"{lsi|lswi} %0,%1,%2\\;lwz %1,%2(%1)\\\", xop);\n+\t    return \\\"\\\";\n+\t  }\n+\telse if (i == 0)\n+\t  {\n+\t    xop[0] = operands[1];\n+\t    xop[1] = gen_rtx (REG, SImode, REGNO (operands[1]) + 1);\n+\t    xop[2] = GEN_INT (4 * (words-1));\n+\t    output_asm_insn (\\\"{cal %0,4(%0)|addi %0,%0,4}\\;{lsi|lswi} %1,%0,%2\\;{l|lwz} %0,-4(%0)\\\", xop);\n+\t    return \\\"\\\";\n+\t  }\n+\telse\n+\t  {\n+\t    for (j = 0; j < words; j++)\n+\t      if (j != i)\n+\t\t{\n+\t\t  xop[0] = gen_rtx (REG, SImode, REGNO (operands[1]) + j);\n+\t\t  xop[1] = operands[2];\n+\t\t  xop[2] = GEN_INT (j * 4);\n+\t\t  output_asm_insn (\\\"{l|lwz} %0,%2(%1)\\\", xop);\n+\t\t}\n+\t    xop[0] = operands[2];\n+\t    xop[1] = GEN_INT (i * 4);\n+\t    output_asm_insn (\\\"{l|lwz} %0,%1(%0)\\\", xop);\n+\t    return \\\"\\\";\n+\t  }\n       }\n \n-  return result;\n+  return \\\"{lsi|lswi} %1,%2,%N0\\\";\n }\"\n   [(set_attr \"type\" \"load\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"32\")])\n \f\n \n (define_expand \"store_multiple\""}]}