{"sha": "fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8", "node_id": "C_kwDOANBUbNoAKGZlNzA1ZGNlMmUxZTNlNGU1ZTBjNjlkN2Y5YWRhZjdmMjc3N2NkYzg", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-25T13:31:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-03-25T14:26:29Z"}, "message": "tree-optimization/105053 - fix reduction chain epilogue generation\n\nWhen we optimize permutations in a reduction chain we have to\nbe careful to select the correct live-out stmt, otherwise the\nreduction result will be unused and the retained scalar code will\nexecute only the number of vector iterations.\n\n2022-03-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/105053\n\t* tree-vect-loop.cc (vect_create_epilog_for_reduction): Pick\n\tthe correct live-out stmt for a reduction chain.\n\n\t* g++.dg/vect/pr105053.cc: New testcase.", "tree": {"sha": "ab50e8c9b7f804a24763220dd91f3e68dfc899de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab50e8c9b7f804a24763220dd91f3e68dfc899de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b938a7612fb7acf1f181da9577235c83ede59e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b938a7612fb7acf1f181da9577235c83ede59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b938a7612fb7acf1f181da9577235c83ede59e"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "6deef8458fc859b6b10606c6a6e814b65926c4ba", "filename": "gcc/testsuite/g++.dg/vect/pr105053.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr105053.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr105053.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr105053.cc?ref=fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8", "patch": "@@ -0,0 +1,25 @@\n+// { dg-require-effective-target c++11 }\n+// { dg-require-effective-target int32plus }\n+\n+#include <vector>\n+#include <tuple>\n+#include <algorithm>\n+\n+int main()\n+{\n+  const int n = 4;\n+  std::vector<std::tuple<int,int,double>> vec\n+      = { { 1597201307, 1817606674, 0. },\n+            { 1380347796, 1721941769, 0.},\n+            {837975613, 1032707773, 0.},\n+            {1173654292, 2020064272, 0.} } ;\n+  int sup1 = 0;\n+  for(int i=0;i<n;++i)\n+    sup1=std::max(sup1,std::max(std::get<0>(vec[i]),std::get<1>(vec[i])));\n+  int sup2 = 0;\n+  for(int i=0;i<n;++i)\n+    sup2=std::max(std::max(sup2,std::get<0>(vec[i])),std::get<1>(vec[i]));\n+  if (sup1 != sup2)\n+    std::abort ();\n+  return 0;\n+}"}, {"sha": "d7bc34636bd52b2f67cdecd3dc16fcff684dba07", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8", "patch": "@@ -5271,9 +5271,17 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n     /* All statements produce live-out values.  */\n     live_out_stmts = SLP_TREE_SCALAR_STMTS (slp_node);\n   else if (slp_node)\n-    /* The last statement in the reduction chain produces the live-out\n-       value.  */\n-    single_live_out_stmt[0] = SLP_TREE_SCALAR_STMTS (slp_node)[group_size - 1];\n+    {\n+      /* The last statement in the reduction chain produces the live-out\n+\t value.  Note SLP optimization can shuffle scalar stmts to\n+\t optimize permutations so we have to search for the last stmt.  */\n+      for (k = 0; k < group_size; ++k)\n+\tif (!REDUC_GROUP_NEXT_ELEMENT (SLP_TREE_SCALAR_STMTS (slp_node)[k]))\n+\t  {\n+\t    single_live_out_stmt[0] = SLP_TREE_SCALAR_STMTS (slp_node)[k];\n+\t    break;\n+\t  }\n+    }\n \n   unsigned vec_num;\n   int ncopies;"}]}