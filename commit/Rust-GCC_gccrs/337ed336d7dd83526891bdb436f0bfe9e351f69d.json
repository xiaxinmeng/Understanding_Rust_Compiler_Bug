{"sha": "337ed336d7dd83526891bdb436f0bfe9e351f69d", "node_id": "C_kwDOANBUbNoAKDMzN2VkMzM2ZDdkZDgzNTI2ODkxYmRiNDM2ZjBiZmU5ZTM1MWY2OWQ", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-02-17T13:18:57Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-03-12T12:02:55Z"}, "message": "OpenACC 'kernels' decomposition: Mark variables used in 'present' clauses as addressable [PR100280, PR104086]\n\n... like in recent commit 9b32c1669aad5459dd053424f9967011348add83\n\"OpenACC 'kernels' decomposition: Mark variables used in synthesized\ndata clauses as addressable [PR100280]\".  Otherwise, we may run into\n'gcc/omp-low.cc:lower_omp_target':\n\n    13125                       else if (is_gimple_reg (var))\n    13126                         {\n    13127                           gcc_assert (offloaded);\n\n\tPR middle-end/100280\n\tPR middle-end/104086\n\tgcc/\n\t* omp-oacc-kernels-decompose.cc (omp_oacc_kernels_decompose_1):\n\tMark variables used in 'present' clauses as addressable.\n\t* omp-low.cc (scan_sharing_clauses) <OMP_CLAUSE_MAP>: Gracefully\n\thandle duplicate 'OMP_CLAUSE_MAP_DECL_MAKE_ADDRESSABLE'.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/kernels-decompose-pr104086-1.c: Adjust,\n\textend.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c:\n\tMerge this...\n\t* testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose.c:\n\t..., and this...\n\t* testsuite/libgomp.oacc-c-c++-common/declare-vla.c: ... into\n\tthis, and adjust.\n\t* testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c:\n\tExtend.", "tree": {"sha": "ef92ff9720d1eae8d1db3391b3f3be4c5f6a789c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef92ff9720d1eae8d1db3391b3f3be4c5f6a789c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/337ed336d7dd83526891bdb436f0bfe9e351f69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337ed336d7dd83526891bdb436f0bfe9e351f69d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337ed336d7dd83526891bdb436f0bfe9e351f69d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337ed336d7dd83526891bdb436f0bfe9e351f69d/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9781ae3a254a8c17ef4ffa70f21ed1728ff3c707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9781ae3a254a8c17ef4ffa70f21ed1728ff3c707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9781ae3a254a8c17ef4ffa70f21ed1728ff3c707"}], "stats": {"total": 251, "additions": 168, "deletions": 83}, "files": [{"sha": "cfc63d6a104ad491640fe58e1a0a8a0f727a3aa6", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed336d7dd83526891bdb436f0bfe9e351f69d/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed336d7dd83526891bdb436f0bfe9e351f69d/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=337ed336d7dd83526891bdb436f0bfe9e351f69d", "patch": "@@ -1501,11 +1501,14 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n \t    {\n \t      gcc_checking_assert (DECL_P (decl));\n \n-\t      gcc_checking_assert (!TREE_ADDRESSABLE (decl));\n-\t      if (!make_addressable_vars)\n-\t\tmake_addressable_vars = BITMAP_ALLOC (NULL);\n-\t      bitmap_set_bit (make_addressable_vars, DECL_UID (decl));\n-\t      TREE_ADDRESSABLE (decl) = 1;\n+\t      bool decl_addressable = TREE_ADDRESSABLE (decl);\n+\t      if (!decl_addressable)\n+\t\t{\n+\t\t  if (!make_addressable_vars)\n+\t\t    make_addressable_vars = BITMAP_ALLOC (NULL);\n+\t\t  bitmap_set_bit (make_addressable_vars, DECL_UID (decl));\n+\t\t  TREE_ADDRESSABLE (decl) = 1;\n+\t\t}\n \n \t      if (dump_enabled_p ())\n \t\t{\n@@ -1517,10 +1520,16 @@ scan_sharing_clauses (tree clauses, omp_context *ctx)\n # pragma GCC diagnostic push\n # pragma GCC diagnostic ignored \"-Wformat\"\n #endif\n-\t\t  dump_printf_loc (MSG_NOTE, d_u_loc,\n-\t\t\t\t   \"variable %<%T%>\"\n-\t\t\t\t   \" made addressable\\n\",\n-\t\t\t\t   decl);\n+\t\t  if (!decl_addressable)\n+\t\t    dump_printf_loc (MSG_NOTE, d_u_loc,\n+\t\t\t\t     \"variable %<%T%>\"\n+\t\t\t\t     \" made addressable\\n\",\n+\t\t\t\t     decl);\n+\t\t  else\n+\t\t    dump_printf_loc (MSG_NOTE, d_u_loc,\n+\t\t\t\t     \"variable %<%T%>\"\n+\t\t\t\t     \" already made addressable\\n\",\n+\t\t\t\t     decl);\n #if __GNUC__ >= 10\n # pragma GCC diagnostic pop\n #endif"}, {"sha": "40b045398945ee677bac6367e8730944aeb72b9c", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed336d7dd83526891bdb436f0bfe9e351f69d/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed336d7dd83526891bdb436f0bfe9e351f69d/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=337ed336d7dd83526891bdb436f0bfe9e351f69d", "patch": "@@ -1468,6 +1468,38 @@ omp_oacc_kernels_decompose_1 (gimple *kernels_stmt)\n \t\t  /* Now that this data is mapped, turn the data clause on the\n \t\t     inner OpenACC 'kernels' into a 'present' clause.  */\n \t\t  OMP_CLAUSE_SET_MAP_KIND (c, GOMP_MAP_FORCE_PRESENT);\n+\n+\t\t  /* See <https://gcc.gnu.org/PR100280>,\n+\t\t     <https://gcc.gnu.org/PR104086>.  */\n+\t\t  if (DECL_P (decl)\n+\t\t      && !TREE_ADDRESSABLE (decl))\n+\t\t    {\n+\t\t      /* Request that OMP lowering make 'decl' addressable.  */\n+\t\t      OMP_CLAUSE_MAP_DECL_MAKE_ADDRESSABLE (new_clause) = 1;\n+\n+\t\t      if (dump_enabled_p ())\n+\t\t\t{\n+\t\t\t  location_t loc = OMP_CLAUSE_LOCATION (new_clause);\n+\t\t\t  const dump_user_location_t d_u_loc\n+\t\t\t    = dump_user_location_t::from_location_t (loc);\n+\t\t\t  /* PR100695 \"Format decoder, quoting in 'dump_printf'\n+\t\t\t     etc.\" */\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic push\n+# pragma GCC diagnostic ignored \"-Wformat\"\n+#endif\n+\t\t\t  dump_printf_loc\n+\t\t\t    (MSG_NOTE, d_u_loc,\n+\t\t\t     \"OpenACC %<kernels%> decomposition:\"\n+\t\t\t     \" variable %<%T%> in %qs clause\"\n+\t\t\t     \" requested to be made addressable\\n\",\n+\t\t\t     decl,\n+\t\t\t     user_omp_clause_code_name (new_clause, true));\n+#if __GNUC__ >= 10\n+# pragma GCC diagnostic pop\n+#endif\n+\t\t\t}\n+\t\t    }\n \t\t}\n \t      break;\n "}, {"sha": "83fb75e28b2931476e9ee76331538225b576ba2b", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-pr104086-1.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed336d7dd83526891bdb436f0bfe9e351f69d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104086-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed336d7dd83526891bdb436f0bfe9e351f69d/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104086-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-pr104086-1.c?ref=337ed336d7dd83526891bdb436f0bfe9e351f69d", "patch": "@@ -1,8 +1,5 @@\n-/* Reduced from 'libgomp.oacc-c-c++-common/declare-vla.c'.  */\n-\n-/* { dg-additional-options \"-fchecking\" }\n-   { dg-ice TODO }\n-   { dg-prune-output {during GIMPLE pass: omplower} } */\n+/* Reduced from 'libgomp.oacc-c-c++-common/declare-vla.c', and then\n+   extended.  */\n \n /* { dg-additional-options \"--param openacc-kernels=decompose\" } */\n \n@@ -14,12 +11,38 @@ void\n foo (void)\n {\n #pragma acc data /* { dg-line l_data1 } */\n-  /* { dg-bogus {note: variable 'i' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {TODO 'data'} { xfail *-*-* } l_data1 } */\n+  /* { dg-bogus {note: variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {TODO 'data'} { xfail *-*-* } l_data1 } */\n   {\n     int i;\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-line l_compute1 } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute1 }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute1 } */\n     /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     i = 0;\n+\n+#pragma acc kernels /* { dg-line l_compute2 } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute2 }\n+       { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute2 } */\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+    i = -1;\n   }\n }\n+\n+void\n+foo2 (void)\n+{\n+  int i[1];\n+\n+#pragma acc kernels /* { dg-line l2_compute1 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l2_compute1 }\n+     { dg-note {variable 'i' made addressable} {} { target *-*-* } l2_compute1 } */\n+  /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+  i[0] = 0;\n+\n+#pragma acc kernels /* { dg-line l2_compute2 } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l2_compute2 }\n+     { dg-note {variable 'i' already made addressable} {} { target *-*-* } l2_compute2 } */\n+  /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+  i[0] = -1;\n+}"}, {"sha": "3e5b6bab2339b44f735f0f6ec59b2e3cdc5c1a1b", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose-ice-1.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9781ae3a254a8c17ef4ffa70f21ed1728ff3c707/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose-ice-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9781ae3a254a8c17ef4ffa70f21ed1728ff3c707/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose-ice-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose-ice-1.c?ref=9781ae3a254a8c17ef4ffa70f21ed1728ff3c707", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n-/* ICE similar to PR100280, but not the same.\n-   { dg-ice \"TODO\" }\n-   TODO { dg-prune-output \"during GIMPLE pass: omplower\" }\n-   TODO { dg-do link } */\n-\n-/* { dg-additional-options \"-fopt-info-omp-all\" }\n-   { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n-\n-/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n-   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n-   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n-   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n-\n-#undef KERNELS_DECOMPOSE_ICE_HACK\n-#include \"declare-vla.c\"\n-\n-/* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } 27 } */\n-\n-/* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } 61 } */\n-\n-/* { dg-bogus {note: variable [^\\n\\r]+ candidate for adjusting OpenACC privatization level} {TODO 'data'} { xfail *-*-* } 42 } */"}, {"sha": "142aceec9cd4e99a8a0c759576f44586680c90f7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-vla-kernels-decompose.c", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9781ae3a254a8c17ef4ffa70f21ed1728ff3c707/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9781ae3a254a8c17ef4ffa70f21ed1728ff3c707/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla-kernels-decompose.c?ref=9781ae3a254a8c17ef4ffa70f21ed1728ff3c707", "patch": "@@ -1,29 +0,0 @@\n-/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n-\n-/* See also 'declare-vla-kernels-decompose-ice-1.c'.  */\n-\n-/* { dg-additional-options \"-fopt-info-omp-all\" }\n-   { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n-\n-/* { dg-additional-options \"--param=openacc-privatization=noisy\" }\n-   { dg-additional-options \"-foffload=--param=openacc-privatization=noisy\" }\n-   Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n-   { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n-\n-#define KERNELS_DECOMPOSE_ICE_HACK\n-#include \"declare-vla.c\"\n-\n-/* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } 27 } */\n-\n-/* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } 61 } */\n-\n-/* { dg-bogus {note: variable [^\\n\\r]+ candidate for adjusting OpenACC privatization level} {TODO 'data'} { xfail *-*-* } 42 } */\n-\n-/* { dg-note {variable 'i\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } 58 }\n-   { dg-note {variable 'N\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} {} { target *-*-* } 58 } */\n-\n-/* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } 24 }\n-   { dg-optimized {assigned OpenACC gang loop parallelism} {} { target { __OPTIMIZE__ } } 24 } */\n-\n-/* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } 58 }\n-   { dg-optimized {assigned OpenACC gang loop parallelism} {} { target { __OPTIMIZE__ } } 58 } */"}, {"sha": "f6fc3ffefa4063cffc94cc2e3aa8eb0030c22823", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/declare-vla.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed336d7dd83526891bdb436f0bfe9e351f69d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed336d7dd83526891bdb436f0bfe9e351f69d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fdeclare-vla.c?ref=337ed336d7dd83526891bdb436f0bfe9e351f69d", "patch": "@@ -1,5 +1,7 @@\n /* Verify OpenACC 'declare' with VLAs.  */\n \n+/* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n+\n /* { dg-additional-options \"-fopt-info-omp-all\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */\n \n@@ -8,6 +10,15 @@\n    Prune a few: uninteresting, and potentially varying depending on GCC configuration (data types):\n    { dg-prune-output {note: variable 'D\\.[0-9]+' declared in block isn't candidate for adjusting OpenACC privatization level: not addressable} } */\n \n+/* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n+   passed to 'incr' may be unset, and in that case, it will be set to [...]\",\n+   so to maintain compatibility with earlier Tcl releases, we manually\n+   initialize counter variables:\n+   { dg-line l_dummy[variable c_compute 0] }\n+   { dg-message \"dummy\" \"\" { target iN-VAl-Id } l_dummy } to avoid\n+   \"WARNING: dg-line var l_dummy defined, but not used\".  */\n+\n+\n #include <assert.h>\n \n \n@@ -21,9 +32,10 @@ f (void)\n   for (i = 0; i < N; i++)\n     A[i] = -i;\n \n-#pragma acc kernels\n-  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } .-1 }\n-     { dg-optimized {assigned OpenACC gang loop parallelism} {} { target { __OPTIMIZE__ } } .-2 } */\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n+     { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n+  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n   for (i = 0; i < N; i++)\n     A[i] = i;\n \n@@ -49,15 +61,14 @@ f_data (void)\n     for (i = 0; i < N; i++)\n       A[i] = -i;\n \n-    /* See 'declare-vla-kernels-decompose.c'.  */\n-#ifdef KERNELS_DECOMPOSE_ICE_HACK\n-    (volatile int *) &i;\n-    (volatile int *) &N;\n-#endif\n-\n-# pragma acc kernels\n-  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } .-1 }\n-     { dg-optimized {assigned OpenACC gang loop parallelism} {} { target { __OPTIMIZE__ } } .-2 } */\n+# pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'N' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'N' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target { ! __OPTIMIZE__ } } l_compute$c_compute }\n+       { dg-optimized {assigned OpenACC gang loop parallelism} {} { target __OPTIMIZE__ } l_compute$c_compute } */\n+    /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n     for (i = 0; i < N; i++)\n       A[i] = i;\n \n@@ -78,6 +89,3 @@ main ()\n \n   return 0;\n }\n-\n-\n-/* { dg-note dummy \"\" { target n-on-e } } to disable 'prune_notes'.  */"}, {"sha": "eb424776b6bfdc5d1590fa9aadbf9c5436fbaff0", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/kernels-decompose-1.c", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/337ed336d7dd83526891bdb436f0bfe9e351f69d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/337ed336d7dd83526891bdb436f0bfe9e351f69d/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fkernels-decompose-1.c?ref=337ed336d7dd83526891bdb436f0bfe9e351f69d", "patch": "@@ -24,7 +24,9 @@\n static int g1;\n static int g2;\n \n-int main()\n+/* PR100280, etc. */\n+\n+static void f1 ()\n {\n   int a = 0;\n   /*TODO Without making 'a' addressable, for GCN offloading we will not see the expected value copied out.  (But it does work for nvptx offloading, strange...)  */\n@@ -153,5 +155,67 @@ int main()\n   assert (g2 == N * (N + 1) / 2);\n   assert (f1 == 2432902008176640000ULL);\n \n+#undef N\n+}\n+\n+\n+/* PR104086 */\n+\n+static void f2 ()\n+{\n+#pragma acc data\n+  /* { dg-bogus {note: variable [^\\n\\r]+ candidate for adjusting OpenACC privatization level} {TODO 'data'} { xfail *-*-* } .-1 } */\n+  {\n+    int i;\n+\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+    i = 1;\n+\n+    assert (i == 1);\n+\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+    /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+       { dg-note {variable 'i' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+    /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+    i = -1;\n+\n+    assert (i == -1);\n+  }\n+\n+\n+  int ia[1];\n+\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'ia' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'ia' made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {beginning 'gang-single' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+  ia[0] = -2;\n+\n+  assert (ia[0] == -2);\n+\n+#pragma acc kernels /* { dg-line l_compute[incr c_compute] } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'ia' in 'copy' clause requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'ia' already made addressable} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {OpenACC 'kernels' decomposition: variable 'i' declared in block requested to be made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'i' made addressable} {} { target *-*-* } l_compute$c_compute }\n+     { dg-note {variable 'i' declared in block is candidate for adjusting OpenACC privatization level} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-optimized {assigned OpenACC seq loop parallelism} {} { target *-*-* } l_compute$c_compute } */\n+  /* { dg-note {beginning 'parloops' part in OpenACC 'kernels' region} {} { target *-*-* } .+1 } */\n+  for (int i = 0; i < 100; ++i)\n+    ++ia[0];\n+\n+  assert (ia[0] == -2 + 100);\n+}\n+\n+\n+int main()\n+{\n+  f1 ();\n+\n+  f2 ();\n+\n   return 0;\n }"}]}