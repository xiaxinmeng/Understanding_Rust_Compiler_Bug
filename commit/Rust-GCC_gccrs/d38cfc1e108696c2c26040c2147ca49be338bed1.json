{"sha": "d38cfc1e108696c2c26040c2147ca49be338bed1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM4Y2ZjMWUxMDg2OTZjMmMyNjA0MGMyMTQ3Y2E0OWJlMzM4YmVkMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-03T23:36:58Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-03T23:36:58Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r387", "tree": {"sha": "83f98795f1cd1a3fc322d727889dd2b74a4decbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83f98795f1cd1a3fc322d727889dd2b74a4decbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d38cfc1e108696c2c26040c2147ca49be338bed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38cfc1e108696c2c26040c2147ca49be338bed1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d38cfc1e108696c2c26040c2147ca49be338bed1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d38cfc1e108696c2c26040c2147ca49be338bed1/comments", "author": null, "committer": null, "parents": [{"sha": "bbf6f052d786c206b8d5f802650fa52b7a8583f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf6f052d786c206b8d5f802650fa52b7a8583f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf6f052d786c206b8d5f802650fa52b7a8583f7"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "9b8cf5c23b475b0c7d1116f3a67b774e2e54e6ef", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cfc1e108696c2c26040c2147ca49be338bed1/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cfc1e108696c2c26040c2147ca49be338bed1/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=d38cfc1e108696c2c26040c2147ca49be338bed1", "patch": "@@ -283,6 +283,16 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \t\t || (VALUE) == CONST0_RTX (SFmode))\t\\\n    : 0)\n \n+/* Optional extra constraints for this machine.\n+\n+   For the VAX, `Q' means that OP is a MEM that does not have a mode-dependent\n+   address.  */\n+\n+#define EXTRA_CONSTRAINT(OP, C) \\\n+  ((C) == 'Q'\t\t\t\t\t\t\t\t\\\n+   ? GET_CODE (OP) == MEM && ! mode_dependent_address_p (XEXP (OP, 0))\t\\\n+   : 0)\n+\n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n    In general this is just CLASS; but on some machines"}, {"sha": "e17c8cadb91830cb4b1d7f246faafe1a343b0958", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d38cfc1e108696c2c26040c2147ca49be338bed1/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d38cfc1e108696c2c26040c2147ca49be338bed1/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=d38cfc1e108696c2c26040c2147ca49be338bed1", "patch": "@@ -1465,13 +1465,14 @@\n   \"j%C0 %l1\") ; %C0 negates condition\n \f\n ;; Recognize jbs, jlbs, jbc and jlbc instructions.  Note that the operand\n-;; if this insn is SImode in the hardware.  However, if it is memory,\n-;; we use QImode.  So we can't allow the memory address to be indexed.\n+;; of jlbs and jlbc insns are SImode in the hardware.  However, if it is\n+;; memory, we use QImode in the insn.  So we can't use those instructions\n+;; for mode-dependent addresses.\n \n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ne (zero_extract:SI (match_operand:QI 0 \"reg_or_nxmem_operand\" \"g,g\")\n+\t (ne (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"rQ,g\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:SI 1 \"general_operand\" \"I,g\"))\n \t     (const_int 0))\n@@ -1485,7 +1486,7 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (eq (zero_extract:SI (match_operand:QI 0 \"reg_or_nxmem_operand\" \"g,g\")\n+\t (eq (zero_extract:SI (match_operand:QI 0 \"nonimmediate_operand\" \"rQ,g\")\n \t\t\t      (const_int 1)\n \t\t\t      (match_operand:SI 1 \"general_operand\" \"I,g\"))\n \t     (const_int 0))"}]}