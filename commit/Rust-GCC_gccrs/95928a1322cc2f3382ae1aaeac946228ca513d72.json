{"sha": "95928a1322cc2f3382ae1aaeac946228ca513d72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5MjhhMTMyMmNjMmYzMzgyYWUxYWFlYWM5NDYyMjhjYTUxM2Q3Mg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-09-10T14:06:57Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-09-10T14:06:57Z"}, "message": "re PR fortran/49479 (reshape / optionals / zero sized arrays)\n\n2011-09-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/49479\n\t* generated/m4/ifunction.m4:  Always call internal_malloc_size\n\teven when there is a zero-sized return array.\n\t* generated/generated/maxloc1_16_i16.c: Regenerated.\n\t* generated/generated/maxloc1_16_i1.c: Regenerated.\n\t* generated/generated/maxloc1_16_i2.c: Regenerated.\n\t* generated/generated/maxloc1_16_i4.c: Regenerated.\n\t* generated/generated/maxloc1_16_i8.c: Regenerated.\n\t* generated/generated/maxloc1_16_r10.c: Regenerated.\n\t* generated/generated/maxloc1_16_r16.c: Regenerated.\n\t* generated/generated/maxloc1_16_r4.c: Regenerated.\n\t* generated/generated/maxloc1_16_r8.c: Regenerated.\n\t* generated/generated/maxloc1_4_i16.c: Regenerated.\n\t* generated/generated/maxloc1_4_i1.c: Regenerated.\n\t* generated/generated/maxloc1_4_i2.c: Regenerated.\n\t* generated/generated/maxloc1_4_i4.c: Regenerated.\n\t* generated/generated/maxloc1_4_i8.c: Regenerated.\n\t* generated/generated/maxloc1_4_r10.c: Regenerated.\n\t* generated/generated/maxloc1_4_r16.c: Regenerated.\n\t* generated/generated/maxloc1_4_r4.c: Regenerated.\n\t* generated/generated/maxloc1_4_r8.c: Regenerated.\n\t* generated/generated/maxloc1_8_i16.c: Regenerated.\n\t* generated/generated/maxloc1_8_i1.c: Regenerated.\n\t* generated/generated/maxloc1_8_i2.c: Regenerated.\n\t* generated/generated/maxloc1_8_i4.c: Regenerated.\n\t* generated/generated/maxloc1_8_i8.c: Regenerated.\n\t* generated/generated/maxloc1_8_r10.c: Regenerated.\n\t* generated/generated/maxloc1_8_r16.c: Regenerated.\n\t* generated/generated/maxloc1_8_r4.c: Regenerated.\n\t* generated/generated/maxloc1_8_r8.c: Regenerated.\n\t* generated/generated/maxval_i16.c: Regenerated.\n\t* generated/generated/maxval_i1.c: Regenerated.\n\t* generated/generated/maxval_i2.c: Regenerated.\n\t* generated/generated/maxval_i4.c: Regenerated.\n\t* generated/generated/maxval_i8.c: Regenerated.\n\t* generated/generated/maxval_r10.c: Regenerated.\n\t* generated/generated/maxval_r16.c: Regenerated.\n\t* generated/generated/maxval_r4.c: Regenerated.\n\t* generated/generated/maxval_r8.c: Regenerated.\n\t* generated/generated/minloc1_16_i16.c: Regenerated.\n\t* generated/generated/minloc1_16_i1.c: Regenerated.\n\t* generated/generated/minloc1_16_i2.c: Regenerated.\n\t* generated/generated/minloc1_16_i4.c: Regenerated.\n\t* generated/generated/minloc1_16_i8.c: Regenerated.\n\t* generated/generated/minloc1_16_r10.c: Regenerated.\n\t* generated/generated/minloc1_16_r16.c: Regenerated.\n\t* generated/generated/minloc1_16_r4.c: Regenerated.\n\t* generated/generated/minloc1_16_r8.c: Regenerated.\n\t* generated/generated/minloc1_4_i16.c: Regenerated.\n\t* generated/generated/minloc1_4_i1.c: Regenerated.\n\t* generated/generated/minloc1_4_i2.c: Regenerated.\n\t* generated/generated/minloc1_4_i4.c: Regenerated.\n\t* generated/generated/minloc1_4_i8.c: Regenerated.\n\t* generated/generated/minloc1_4_r10.c: Regenerated.\n\t* generated/generated/minloc1_4_r16.c: Regenerated.\n\t* generated/generated/minloc1_4_r4.c: Regenerated.\n\t* generated/generated/minloc1_4_r8.c: Regenerated.\n\t* generated/generated/minloc1_8_i16.c: Regenerated.\n\t* generated/generated/minloc1_8_i1.c: Regenerated.\n\t* generated/generated/minloc1_8_i2.c: Regenerated.\n\t* generated/generated/minloc1_8_i4.c: Regenerated.\n\t* generated/generated/minloc1_8_i8.c: Regenerated.\n\t* generated/generated/minloc1_8_r10.c: Regenerated.\n\t* generated/generated/minloc1_8_r16.c: Regenerated.\n\t* generated/generated/minloc1_8_r4.c: Regenerated.\n\t* generated/generated/minloc1_8_r8.c: Regenerated.\n\t* generated/generated/minval_i16.c: Regenerated.\n\t* generated/generated/minval_i1.c: Regenerated.\n\t* generated/generated/minval_i2.c: Regenerated.\n\t* generated/generated/minval_i4.c: Regenerated.\n\t* generated/generated/minval_i8.c: Regenerated.\n\t* generated/generated/minval_r10.c: Regenerated.\n\t* generated/generated/minval_r16.c: Regenerated.\n\t* generated/generated/minval_r4.c: Regenerated.\n\t* generated/generated/minval_r8.c: Regenerated.\n\t* generated/generated/product_c10.c: Regenerated.\n\t* generated/generated/product_c16.c: Regenerated.\n\t* generated/generated/product_c4.c: Regenerated.\n\t* generated/generated/product_c8.c: Regenerated.\n\t* generated/generated/product_i16.c: Regenerated.\n\t* generated/generated/product_i1.c: Regenerated.\n\t* generated/generated/product_i2.c: Regenerated.\n\t* generated/generated/product_i4.c: Regenerated.\n\t* generated/generated/product_i8.c: Regenerated.\n\t* generated/generated/product_r10.c: Regenerated.\n\t* generated/generated/product_r16.c: Regenerated.\n\t* generated/generated/product_r4.c: Regenerated.\n\t* generated/generated/product_r8.c: Regenerated.\n\t* generated/generated/sum_c10.c: Regenerated.\n\t* generated/generated/sum_c16.c: Regenerated.\n\t* generated/generated/sum_c4.c: Regenerated.\n\t* generated/generated/sum_c8.c: Regenerated.\n\t* generated/generated/sum_i16.c: Regenerated.\n\t* generated/generated/sum_i1.c: Regenerated.\n\t* generated/generated/sum_i2.c: Regenerated.\n\t* generated/generated/sum_i4.c: Regenerated.\n\t* generated/generated/sum_i8.c: Regenerated.\n\t* generated/generated/sum_r10.c: Regenerated.\n\t* generated/generated/sum_r16.c: Regenerated.\n\t* generated/generated/sum_r4.c: Regenerated.\n\t* generated/generated/sum_r8.c: Regenerated.\n\nFrom-SVN: r178748", "tree": {"sha": "303ef4034482868b0cf815e63a86849b0dc556b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/303ef4034482868b0cf815e63a86849b0dc556b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95928a1322cc2f3382ae1aaeac946228ca513d72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95928a1322cc2f3382ae1aaeac946228ca513d72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95928a1322cc2f3382ae1aaeac946228ca513d72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95928a1322cc2f3382ae1aaeac946228ca513d72/comments", "author": null, "committer": null, "parents": [{"sha": "93d83339d55749adabcb634ebf6ac452bfc495a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d83339d55749adabcb634ebf6ac452bfc495a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d83339d55749adabcb634ebf6ac452bfc495a3"}], "stats": {"total": 401, "additions": 203, "deletions": 198}, "files": [{"sha": "4546c276dfaea31dfcf845b996b25cf8b53a863e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -1,3 +1,107 @@\n+2011-09-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/49479\n+\t* generated/m4/ifunction.m4:  Always call internal_malloc_size\n+\teven when there is a zero-sized return array.\n+\t* generated/generated/maxloc1_16_i16.c: Regenerated.\n+\t* generated/generated/maxloc1_16_i1.c: Regenerated.\n+\t* generated/generated/maxloc1_16_i2.c: Regenerated.\n+\t* generated/generated/maxloc1_16_i4.c: Regenerated.\n+\t* generated/generated/maxloc1_16_i8.c: Regenerated.\n+\t* generated/generated/maxloc1_16_r10.c: Regenerated.\n+\t* generated/generated/maxloc1_16_r16.c: Regenerated.\n+\t* generated/generated/maxloc1_16_r4.c: Regenerated.\n+\t* generated/generated/maxloc1_16_r8.c: Regenerated.\n+\t* generated/generated/maxloc1_4_i16.c: Regenerated.\n+\t* generated/generated/maxloc1_4_i1.c: Regenerated.\n+\t* generated/generated/maxloc1_4_i2.c: Regenerated.\n+\t* generated/generated/maxloc1_4_i4.c: Regenerated.\n+\t* generated/generated/maxloc1_4_i8.c: Regenerated.\n+\t* generated/generated/maxloc1_4_r10.c: Regenerated.\n+\t* generated/generated/maxloc1_4_r16.c: Regenerated.\n+\t* generated/generated/maxloc1_4_r4.c: Regenerated.\n+\t* generated/generated/maxloc1_4_r8.c: Regenerated.\n+\t* generated/generated/maxloc1_8_i16.c: Regenerated.\n+\t* generated/generated/maxloc1_8_i1.c: Regenerated.\n+\t* generated/generated/maxloc1_8_i2.c: Regenerated.\n+\t* generated/generated/maxloc1_8_i4.c: Regenerated.\n+\t* generated/generated/maxloc1_8_i8.c: Regenerated.\n+\t* generated/generated/maxloc1_8_r10.c: Regenerated.\n+\t* generated/generated/maxloc1_8_r16.c: Regenerated.\n+\t* generated/generated/maxloc1_8_r4.c: Regenerated.\n+\t* generated/generated/maxloc1_8_r8.c: Regenerated.\n+\t* generated/generated/maxval_i16.c: Regenerated.\n+\t* generated/generated/maxval_i1.c: Regenerated.\n+\t* generated/generated/maxval_i2.c: Regenerated.\n+\t* generated/generated/maxval_i4.c: Regenerated.\n+\t* generated/generated/maxval_i8.c: Regenerated.\n+\t* generated/generated/maxval_r10.c: Regenerated.\n+\t* generated/generated/maxval_r16.c: Regenerated.\n+\t* generated/generated/maxval_r4.c: Regenerated.\n+\t* generated/generated/maxval_r8.c: Regenerated.\n+\t* generated/generated/minloc1_16_i16.c: Regenerated.\n+\t* generated/generated/minloc1_16_i1.c: Regenerated.\n+\t* generated/generated/minloc1_16_i2.c: Regenerated.\n+\t* generated/generated/minloc1_16_i4.c: Regenerated.\n+\t* generated/generated/minloc1_16_i8.c: Regenerated.\n+\t* generated/generated/minloc1_16_r10.c: Regenerated.\n+\t* generated/generated/minloc1_16_r16.c: Regenerated.\n+\t* generated/generated/minloc1_16_r4.c: Regenerated.\n+\t* generated/generated/minloc1_16_r8.c: Regenerated.\n+\t* generated/generated/minloc1_4_i16.c: Regenerated.\n+\t* generated/generated/minloc1_4_i1.c: Regenerated.\n+\t* generated/generated/minloc1_4_i2.c: Regenerated.\n+\t* generated/generated/minloc1_4_i4.c: Regenerated.\n+\t* generated/generated/minloc1_4_i8.c: Regenerated.\n+\t* generated/generated/minloc1_4_r10.c: Regenerated.\n+\t* generated/generated/minloc1_4_r16.c: Regenerated.\n+\t* generated/generated/minloc1_4_r4.c: Regenerated.\n+\t* generated/generated/minloc1_4_r8.c: Regenerated.\n+\t* generated/generated/minloc1_8_i16.c: Regenerated.\n+\t* generated/generated/minloc1_8_i1.c: Regenerated.\n+\t* generated/generated/minloc1_8_i2.c: Regenerated.\n+\t* generated/generated/minloc1_8_i4.c: Regenerated.\n+\t* generated/generated/minloc1_8_i8.c: Regenerated.\n+\t* generated/generated/minloc1_8_r10.c: Regenerated.\n+\t* generated/generated/minloc1_8_r16.c: Regenerated.\n+\t* generated/generated/minloc1_8_r4.c: Regenerated.\n+\t* generated/generated/minloc1_8_r8.c: Regenerated.\n+\t* generated/generated/minval_i16.c: Regenerated.\n+\t* generated/generated/minval_i1.c: Regenerated.\n+\t* generated/generated/minval_i2.c: Regenerated.\n+\t* generated/generated/minval_i4.c: Regenerated.\n+\t* generated/generated/minval_i8.c: Regenerated.\n+\t* generated/generated/minval_r10.c: Regenerated.\n+\t* generated/generated/minval_r16.c: Regenerated.\n+\t* generated/generated/minval_r4.c: Regenerated.\n+\t* generated/generated/minval_r8.c: Regenerated.\n+\t* generated/generated/product_c10.c: Regenerated.\n+\t* generated/generated/product_c16.c: Regenerated.\n+\t* generated/generated/product_c4.c: Regenerated.\n+\t* generated/generated/product_c8.c: Regenerated.\n+\t* generated/generated/product_i16.c: Regenerated.\n+\t* generated/generated/product_i1.c: Regenerated.\n+\t* generated/generated/product_i2.c: Regenerated.\n+\t* generated/generated/product_i4.c: Regenerated.\n+\t* generated/generated/product_i8.c: Regenerated.\n+\t* generated/generated/product_r10.c: Regenerated.\n+\t* generated/generated/product_r16.c: Regenerated.\n+\t* generated/generated/product_r4.c: Regenerated.\n+\t* generated/generated/product_r8.c: Regenerated.\n+\t* generated/generated/sum_c10.c: Regenerated.\n+\t* generated/generated/sum_c16.c: Regenerated.\n+\t* generated/generated/sum_c4.c: Regenerated.\n+\t* generated/generated/sum_c8.c: Regenerated.\n+\t* generated/generated/sum_i16.c: Regenerated.\n+\t* generated/generated/sum_i1.c: Regenerated.\n+\t* generated/generated/sum_i2.c: Regenerated.\n+\t* generated/generated/sum_i4.c: Regenerated.\n+\t* generated/generated/sum_i8.c: Regenerated.\n+\t* generated/generated/sum_r10.c: Regenerated.\n+\t* generated/generated/sum_r16.c: Regenerated.\n+\t* generated/generated/sum_r4.c: Regenerated.\n+\t* generated/generated/sum_r8.c: Regenerated.\n+\n 2011-09-01  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* generated/bessel_r4.c: Regenerated."}, {"sha": "3e4246311539a17aa798fbd50e04b7e6f4442474", "filename": "libgfortran/generated/maxloc1_16_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "d6819aa713e4b45a148ac50e02e5edce385b264a", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "691d034866abb3d7782fca095aa3add9d740891e", "filename": "libgfortran/generated/maxloc1_16_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "1e5b87cab3b24fb369ce883578bc3e1e1a4ab702", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "c6a73d8335fa44401bfb7f2a6b4e02f495f098a1", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "d954000c8eeb06eecc880411b3fd59afa9772958", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "4ecb78418c18eb73f5a9fdc8e90cf48764afa71e", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e5cd29156f3e4ed37f4b1d0c73b59a0bff78f5ef", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "2d209d7869113a9bc867d8f6dbe47869c4cacace", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "efd6958072efdf229eb650defa6c3669c0249313", "filename": "libgfortran/generated/maxloc1_4_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "71850fcf8a61024fd78e65529d017ac40032b68f", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "d825039e8d5124c14d8f90e11dcc26c13d704697", "filename": "libgfortran/generated/maxloc1_4_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "f70b5aa10be9278d89c9fd583c174f9779a2861b", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "cda4a99ca75056996f93b69dfd0ea30b5296ed56", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "7901a4b15ddcb02a099abea02df8c1971a016439", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "f06d7b2bb2ee44579fd16aea6b7ade46789e73d7", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e6837aa61ff0716f49d737493cf15fc9dd772fbe", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "26c10c7b93746b3a388a780087c521e18a7df5c3", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "c9dc6102056add2c86360030e2920cddf55c162a", "filename": "libgfortran/generated/maxloc1_8_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "7cd62ac3a909add2c17248c9f508ae11bb5b5458", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "fd0cc21724814f8a26fd9e504df1ab8d0ae072e5", "filename": "libgfortran/generated/maxloc1_8_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "97cd54bb550e630c11ebb9816ab4dd11bdb32ff3", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "f9c455cb03058d490b22adeadca1a127da77d50f", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "ab1173c6c377aec2912d78c199184b318a770f74", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "9a02e1273bae7e0c5b396e7cef61b1667c7a057b", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "584bdb81f543a2eda5bac50b495c842af7ae46f3", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "c6f3efd7054a63e447fc1de8a231c9213d3b8eb7", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "5b676827d440e26cfb111f3de7a6f59fde4cec53", "filename": "libgfortran/generated/maxval_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "148319d6210c7276acc8b5ddd33b76b3ce3404ca", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "f87f3edf3eacf613eccf978e0a210647ac086e2c", "filename": "libgfortran/generated/maxval_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "51f2511b4cc3865ce3053749d69da59af922d098", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "74aca03cf1b2dac087f67fea00e032aec8725517", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "3eaaa4c475cdb70d3570e135c0b60d80b4cedee0", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "bc4cf27bb37c6339d6033e6d057cd93236318d8b", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "d7e25ee7a9d55a8516c708c3f95a5ea891062d65", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "21c08e9ef1ae8e80b1d4fa133f178969933754c7", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "8b4b53f81a7d07d7ea1e96592b9db0776874f356", "filename": "libgfortran/generated/minloc1_16_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "3a18e8c3672018d6ccd4f2449288d36401068f83", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "bc13bee9edabce361b08b76c5c94cb9dfd0f9ba5", "filename": "libgfortran/generated/minloc1_16_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "84d131a7aecbc0807b80e6381487aa81f6428ed6", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "1f3e0549da1b4c9138f3de165a547ec9288e5290", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "6bda151ae4c9e0363bc5db2069a985c55ecae2c3", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "c31cf4bcbbd89f4e63baa61efbafc29f9d035ba1", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "52ec2b078cf1bc110cafa90966c65169e941b3e6", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "a53ed3452ce4120d73a097daac0ba1f73636aed2", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e8af36127422da8d4512b0f53aa44e0726037e6c", "filename": "libgfortran/generated/minloc1_4_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "8d3da2059d14eb87d2f23ec819833893a79f87f5", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e7f24491f5f404112d3795ebf719df7ea6f8f5f6", "filename": "libgfortran/generated/minloc1_4_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "94d45c92d667cff2bfed30adb7e10bde45bbd90f", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "fa07bcb8789b64588a3e77fea8cba0f47040e049", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "5cb23a6b6949a2005d2779c78cabd7a9a4be2834", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "40854a12b8bf72166c51806def3f1e5023d96b3f", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "4231d180d5d2763a229d935848e9498e527df594", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "8e5e5ddc41b61870dbab85497944f37c7da5388b", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "9a54335c8e216d986da00cb361e1f1486750260f", "filename": "libgfortran/generated/minloc1_8_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "f0b477ebd830288040d6be932f062bc3ca9547be", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "9d3d14ee5c908556fac4aeb5e9e0491e5b9fb1c3", "filename": "libgfortran/generated/minloc1_8_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "edac05ccd58766692126217aa46ab0cd199b5bd4", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "3c0f44127cab38cd91c7fc46a921477e270b3f81", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "a9239d28cbd977b43433e1816894a304a68f58bd", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "953ada7ef98a0222e98f157f31f0bfb11a50c5cb", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "3882000168b2f23593ff0c4a6fcba0dd95edf121", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "c8d181277daeb89c52cdf7138b883fa6a45a8493", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -101,15 +101,14 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "d9ee1d7546536bd03ed5464aaa277008dc00f2d1", "filename": "libgfortran/generated/minval_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "8394547568d630db36d6af24d888876138977fd7", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "9cffe844d8005de4c7d68e648928b2fa384e2ff9", "filename": "libgfortran/generated/minval_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "993116a83452f7860f72fa53a9fd144fa556aa4f", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "3a52b4b7e2103386ed96ca37cc694449110ab212", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "b490b3beec02a54fdd473570c74422f7a2048c22", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "701191f4041bacdab43b53930a5e5ddc0b7f5844", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e69376590aafb56821fc46baccd063289b42c9ce", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "611ee57968c37625a9034046b67bed210ae2b653", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "140aa305f66ed7e8e9a82bb9af91c665c90a2f3b", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "d59510248b586b589334755fc38aadf5541bf3d7", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "34c1bde263eb39b4eea80f8600623e50446f0c50", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "6e3487489e87ffcd2664bbcf74e3a81f94adaf99", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "2e0428718898831fb5bc599c7512230468bd81d7", "filename": "libgfortran/generated/product_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e487ddfeda6323d2c5d1c065a9d11923d0ba660f", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "b4b0a4ce736879e54511c918a610a47923c0b909", "filename": "libgfortran/generated/product_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "a0164a1615baa9614fb70a075eab1db3ac7cc690", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "64c648774a98153a381cca05370164b5f2668dfd", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "71a70da966f58ef62df09c1a9f3f5efbf3f23313", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "0028ba1f861411f865e36290e8133a89b0774ba6", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "492980e676978a28b2d2b53893d0af3f2f9703f1", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "cf05af1faaf39f237ec49c95f59c7868831d2b70", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "b982bfea04af490403943d5f4d8dfabd83a73548", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "0bf2b69d79dd1f3c8a6754e9c27b59b91f7ad3c7", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "a34e63cdd89d176fbd7556a1dba2d259159426d0", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "42dea7b2810ae704c16a59b6e956ed1c9f525322", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n       alloc_size = sizeof (GFC_COMPLEX_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "4eb6d642008acbd62e7b9cae1a394eb873f4d753", "filename": "libgfortran/generated/sum_i1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i1.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_i1 (gfc_array_i1 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_1) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "8e2c7b3aeb7cae3a755440de11a75cb54a175f68", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "12ef64d3523fd9f626c4017ccd2466053fef24a8", "filename": "libgfortran/generated/sum_i2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i2.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_i2 (gfc_array_i2 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_2) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "645ef436bffa7e0440a3ee817e92d58d26e280d4", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "adb29b51c73971a86efa0651a0251f3d64093141", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n       alloc_size = sizeof (GFC_INTEGER_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "9f588a5da51adb4c65dfa88bef35a89d777b0c12", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_10) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "292e66f711751d879633a2ef3ae6ecf6819d592d", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_16) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "8fd563fc9d5bd8e4dff53c411e5c05769a0f3957", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_4) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "e58398060544654d448e7965ac89b6737d31be38", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -100,15 +100,14 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n       alloc_size = sizeof (GFC_REAL_8) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}, {"sha": "68e1c5e18a378cb696764ac51de12c1a96994bf5", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95928a1322cc2f3382ae1aaeac946228ca513d72/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=95928a1322cc2f3382ae1aaeac946228ca513d72", "patch": "@@ -88,15 +88,14 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n       alloc_size = sizeof (rtype_name) * GFC_DESCRIPTOR_STRIDE(retarray,rank-1)\n     \t\t   * extent[rank-1];\n \n+      retarray->data = internal_malloc_size (alloc_size);\n       if (alloc_size == 0)\n \t{\n \t  /* Make sure we have a zero-sized array.  */\n \t  GFC_DIMENSION_SET(retarray->dim[0], 0, -1, 1);\n \t  return;\n \n \t}\n-      else\n-\tretarray->data = internal_malloc_size (alloc_size);\n     }\n   else\n     {"}]}