{"sha": "aae6da83564549a6f8700407df50cdd52d411727", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlNmRhODM1NjQ1NDlhNmY4NzAwNDA3ZGY1MGNkZDUyZDQxMTcyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-05-13T11:22:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-05-13T11:22:21Z"}, "message": "re PR tree-optimization/90316 (large compile time increase in opt / alias stmt walking for Go example)\n\n2019-05-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/90316\n\t* tree-ssa-pre.c (insert_aux): Fold into ...\n\t(insert): ... this function.  Use a RPO walk to reduce the\n\tnumber of required iterations.\n\nFrom-SVN: r271124", "tree": {"sha": "14bb4b854b89d63b5f92078d76068a9ae44ff7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14bb4b854b89d63b5f92078d76068a9ae44ff7cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae6da83564549a6f8700407df50cdd52d411727", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae6da83564549a6f8700407df50cdd52d411727", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae6da83564549a6f8700407df50cdd52d411727", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae6da83564549a6f8700407df50cdd52d411727/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "abac7fbe4ac07f72a5ee37e5748ed9a286647c4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abac7fbe4ac07f72a5ee37e5748ed9a286647c4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abac7fbe4ac07f72a5ee37e5748ed9a286647c4e"}], "stats": {"total": 127, "additions": 61, "deletions": 66}, "files": [{"sha": "42448f5ef85efd0079ea408650cefff4511edeee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae6da83564549a6f8700407df50cdd52d411727/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae6da83564549a6f8700407df50cdd52d411727/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aae6da83564549a6f8700407df50cdd52d411727", "patch": "@@ -1,3 +1,10 @@\n+2019-05-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/90316\n+\t* tree-ssa-pre.c (insert_aux): Fold into ...\n+\t(insert): ... this function.  Use a RPO walk to reduce the\n+\tnumber of required iterations.\n+\n 2019-05-13  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/90416"}, {"sha": "469199fa21321c218e4b24324f91a4afcb81e0eb", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 54, "deletions": 66, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae6da83564549a6f8700407df50cdd52d411727/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae6da83564549a6f8700407df50cdd52d411727/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=aae6da83564549a6f8700407df50cdd52d411727", "patch": "@@ -3601,92 +3601,80 @@ do_hoist_insertion (basic_block block)\n   return new_stuff;\n }\n \n-/* Do a dominator walk on the control flow graph, and insert computations\n-   of values as necessary for PRE and hoisting.  */\n-\n-static bool\n-insert_aux (basic_block block, bool do_pre, bool do_hoist)\n-{\n-  basic_block son;\n-  bool new_stuff = false;\n-\n-  if (block)\n-    {\n-      basic_block dom;\n-      dom = get_immediate_dominator (CDI_DOMINATORS, block);\n-      if (dom)\n-\t{\n-\t  unsigned i;\n-\t  bitmap_iterator bi;\n-\t  bitmap_set_t newset;\n-\n-\t  /* First, update the AVAIL_OUT set with anything we may have\n-\t     inserted higher up in the dominator tree.  */\n-\t  newset = NEW_SETS (dom);\n-\t  if (newset)\n-\t    {\n-\t      /* Note that we need to value_replace both NEW_SETS, and\n-\t\t AVAIL_OUT. For both the case of NEW_SETS, the value may be\n-\t\t represented by some non-simple expression here that we want\n-\t\t to replace it with.  */\n-\t      FOR_EACH_EXPR_ID_IN_SET (newset, i, bi)\n-\t\t{\n-\t\t  pre_expr expr = expression_for_id (i);\n-\t\t  bitmap_value_replace_in_set (NEW_SETS (block), expr);\n-\t\t  bitmap_value_replace_in_set (AVAIL_OUT (block), expr);\n-\t\t}\n-\t    }\n-\n-\t  /* Insert expressions for partial redundancies.  */\n-\t  if (do_pre && !single_pred_p (block))\n-\t    {\n-\t      new_stuff |= do_pre_regular_insertion (block, dom);\n-\t      if (do_partial_partial)\n-\t\tnew_stuff |= do_pre_partial_partial_insertion (block, dom);\n-\t    }\n-\n-\t  /* Insert expressions for hoisting.  */\n-\t  if (do_hoist && EDGE_COUNT (block->succs) >= 2)\n-\t    new_stuff |= do_hoist_insertion (block);\n-\t}\n-    }\n-  for (son = first_dom_son (CDI_DOMINATORS, block);\n-       son;\n-       son = next_dom_son (CDI_DOMINATORS, son))\n-    {\n-      new_stuff |= insert_aux (son, do_pre, do_hoist);\n-    }\n-\n-  return new_stuff;\n-}\n-\n /* Perform insertion of partially redundant and hoistable values.  */\n \n static void\n insert (void)\n {\n-  bool new_stuff = true;\n   basic_block bb;\n-  int num_iterations = 0;\n \n   FOR_ALL_BB_FN (bb, cfun)\n     NEW_SETS (bb) = bitmap_set_new ();\n \n-  while (new_stuff)\n+  int *rpo = XNEWVEC (int, n_basic_blocks_for_fn (cfun));\n+  int rpo_num = pre_and_rev_post_order_compute (NULL, rpo, false);\n+\n+  int num_iterations = 0;\n+  bool changed;\n+  do\n     {\n       num_iterations++;\n       if (dump_file && dump_flags & TDF_DETAILS)\n \tfprintf (dump_file, \"Starting insert iteration %d\\n\", num_iterations);\n-      new_stuff = insert_aux (ENTRY_BLOCK_PTR_FOR_FN (cfun), flag_tree_pre,\n-\t\t\t      flag_code_hoisting);\n+\n+      changed = false;\n+      for (int idx = 0; idx < rpo_num; ++idx)\n+\t{\n+\t  basic_block block = BASIC_BLOCK_FOR_FN (cfun, rpo[idx]);\n+\t  basic_block dom = get_immediate_dominator (CDI_DOMINATORS, block);\n+\t  if (dom)\n+\t    {\n+\t      unsigned i;\n+\t      bitmap_iterator bi;\n+\t      bitmap_set_t newset;\n+\n+\t      /* First, update the AVAIL_OUT set with anything we may have\n+\t\t inserted higher up in the dominator tree.  */\n+\t      newset = NEW_SETS (dom);\n+\t      if (newset)\n+\t\t{\n+\t\t  /* Note that we need to value_replace both NEW_SETS, and\n+\t\t     AVAIL_OUT. For both the case of NEW_SETS, the value may be\n+\t\t     represented by some non-simple expression here that we want\n+\t\t     to replace it with.  */\n+\t\t  FOR_EACH_EXPR_ID_IN_SET (newset, i, bi)\n+\t\t    {\n+\t\t      pre_expr expr = expression_for_id (i);\n+\t\t      bitmap_value_replace_in_set (NEW_SETS (block), expr);\n+\t\t      bitmap_value_replace_in_set (AVAIL_OUT (block), expr);\n+\t\t    }\n+\t\t}\n+\n+\t      /* Insert expressions for partial redundancies.  */\n+\t      if (flag_tree_pre && !single_pred_p (block))\n+\t\t{\n+\t\t  changed |= do_pre_regular_insertion (block, dom);\n+\t\t  if (do_partial_partial)\n+\t\t    changed |= do_pre_partial_partial_insertion (block, dom);\n+\t\t}\n+\n+\t      /* Insert expressions for hoisting.  */\n+\t      if (flag_code_hoisting && EDGE_COUNT (block->succs) >= 2)\n+\t\tchanged |= do_hoist_insertion (block);\n+\t    }\n+\t}\n \n       /* Clear the NEW sets before the next iteration.  We have already\n-         fully propagated its contents.  */\n-      if (new_stuff)\n+\t fully propagated its contents.  */\n+      if (changed)\n \tFOR_ALL_BB_FN (bb, cfun)\n \t  bitmap_set_free (NEW_SETS (bb));\n     }\n+  while (changed);\n+\n   statistics_histogram_event (cfun, \"insert iterations\", num_iterations);\n+\n+  free (rpo);\n }\n \n "}]}