{"sha": "88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhhNTZjMmViMWNmMDRjYjgyOGM2YzE5MTg3YThmOWI2NzJlOWQyNg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2000-02-16T14:44:19Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-02-16T14:44:19Z"}, "message": "md.texi (Simple Constraints): Add item about whitespace.\n\n\t* md.texi (Simple Constraints): Add item about whitespace.\n\t* genoutput.c (strip_whitespace): New.\n\t(scan_operands) [MATCH_OPERAND, MATCH_SCRATCH]: Call\n\tstrip_whitespace for constraints.\n\tTest pointer using NULL, not 0.\n\nCo-Authored-By: Michael Meissner <meissner@cygnus.com>\n\nFrom-SVN: r32008", "tree": {"sha": "f65654b8ee4287eb5ff18168ad859bb200b62378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f65654b8ee4287eb5ff18168ad859bb200b62378"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/comments", "author": null, "committer": null, "parents": [{"sha": "1efa676d959734b3f89b174b861895b33da776e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efa676d959734b3f89b174b861895b33da776e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1efa676d959734b3f89b174b861895b33da776e8"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "9b9dd6ea123d76661df04a3fb260da2d55337e74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "patch": "@@ -1,3 +1,12 @@\n+Wed Feb 16 15:04:49 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n+\t\t\t  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* md.texi (Simple Constraints): Add item about whitespace.\n+\t* genoutput.c (strip_whitespace): New.\n+\t(scan_operands) [MATCH_OPERAND, MATCH_SCRATCH]: Call\n+\tstrip_whitespace for constraints.\n+\tTest pointer using NULL, not 0.\n+\n 2000-02-16  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* cpplib.c (do_line): Pedwarn for #line > 32767."}, {"sha": "022d67637e74ca1f1bfb0ea4f3eb027e5f54dbe4", "filename": "gcc/genoutput.c", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "patch": "@@ -104,6 +104,7 @@ struct obstack *rtl_obstack = &obstack;\n #define obstack_chunk_free free\n \n static int n_occurrences PARAMS ((int, char *));\n+static void strip_whitespace PARAMS ((char *));\n \n /* insns in the machine description are assigned sequential code numbers\n    that are used by insn-recog.c (produced by genrecog) to communicate\n@@ -439,9 +440,12 @@ scan_operands (d, part, this_address_p, this_strict_low)\n       d->operand[opno].strict_low = this_strict_low;\n       d->operand[opno].predicate = XSTR (part, 1);\n       d->operand[opno].constraint = XSTR (part, 2);\n-      if (XSTR (part, 2) != 0 && *XSTR (part, 2) != 0)\n-\td->operand[opno].n_alternatives\n-\t  = n_occurrences (',', XSTR (part, 2)) + 1;\n+      if (XSTR (part, 2) != NULL && *XSTR (part, 2) != 0)\n+\t{\n+\t  strip_whitespace (XSTR (part, 2));\n+\t  d->operand[opno].n_alternatives\n+\t    = n_occurrences (',', XSTR (part, 2)) + 1;\n+\t}\n       d->operand[opno].address_p = this_address_p;\n       d->operand[opno].eliminable = 1;\n       return;\n@@ -464,9 +468,12 @@ scan_operands (d, part, this_address_p, this_strict_low)\n       d->operand[opno].strict_low = 0;\n       d->operand[opno].predicate = \"scratch_operand\";\n       d->operand[opno].constraint = XSTR (part, 1);\n-      if (XSTR (part, 1) != 0 && *XSTR (part, 1) != 0)\n-\td->operand[opno].n_alternatives\n-\t  = n_occurrences (',', XSTR (part, 1)) + 1;\n+      if (XSTR (part, 1) != NULL && *XSTR (part, 1) != 0)\n+\t{\n+\t  strip_whitespace (XSTR (part, 1));\n+\t  d->operand[opno].n_alternatives\n+\t    = n_occurrences (',', XSTR (part, 1)) + 1;\n+\t}\n       d->operand[opno].address_p = 0;\n       d->operand[opno].eliminable = 0;\n       return;\n@@ -969,3 +976,18 @@ n_occurrences (c, s)\n     n += (*s++ == c);\n   return n;\n }\n+\n+/* Remove whitespace in `s' by moving up characters until the end.  */\n+static void\n+strip_whitespace (s)\n+     char *s;\n+{\n+  char *p = s;\n+  int ch;\n+\n+  while ((ch = *s++) != '\\0')\n+    if (! ISSPACE (ch))\n+      *p++ = ch;\n+\n+  *p = '\\0';\n+}"}, {"sha": "faec1126ca3d80d517dc59263734749eb59c064f", "filename": "gcc/md.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88a56c2eb1cf04cb828c6c19187a8f9b672e9d26/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=88a56c2eb1cf04cb828c6c19187a8f9b672e9d26", "patch": "@@ -665,6 +665,12 @@ which describes one kind of operand that is permitted.  Here are\n the letters that are allowed:\n \n @table @asis\n+@item whitespace\n+Whitespace characters are ignored and can be inserted at any position\n+except the first.  This enables each alternative for different operands to\n+be visually aligned in the machine description even if they have different\n+number of constraints and modifiers.\n+\n @cindex @samp{m} in constraint\n @cindex memory references in constraints\n @item @samp{m}"}]}