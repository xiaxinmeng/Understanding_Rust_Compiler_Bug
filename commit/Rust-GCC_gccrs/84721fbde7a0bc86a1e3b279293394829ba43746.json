{"sha": "84721fbde7a0bc86a1e3b279293394829ba43746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ3MjFmYmRlN2EwYmM4NmExZTNiMjc5MjkzMzk0ODI5YmE0Mzc0Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-04-05T00:07:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-04-05T00:07:08Z"}, "message": "pa.h (EXTRA_CONSTRAINT): Refine 'T' constraint to not accept pseudos which did not get hard registers.\n\n\t* pa.h (EXTRA_CONSTRAINT): Refine 'T' constraint to not accept\n\tpseudos which did not get hard registers.  Do not use\n\tshort_memory_operand.\n\nFrom-SVN: r4013", "tree": {"sha": "73d14f0d3248866b08ce2a734ed59388cf064889", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73d14f0d3248866b08ce2a734ed59388cf064889"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84721fbde7a0bc86a1e3b279293394829ba43746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84721fbde7a0bc86a1e3b279293394829ba43746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84721fbde7a0bc86a1e3b279293394829ba43746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84721fbde7a0bc86a1e3b279293394829ba43746/comments", "author": null, "committer": null, "parents": [{"sha": "64a483047afac29c0c6dbf0b8855d39df2fbc176", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64a483047afac29c0c6dbf0b8855d39df2fbc176", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64a483047afac29c0c6dbf0b8855d39df2fbc176"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "8a65f7484de7b8b3a9a5386db839fd814d0a685f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84721fbde7a0bc86a1e3b279293394829ba43746/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84721fbde7a0bc86a1e3b279293394829ba43746/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=84721fbde7a0bc86a1e3b279293394829ba43746", "patch": "@@ -1095,7 +1095,7 @@ extern union tree_node *current_function_decl;\n \n    `S' handles constraints for calls.\n \n-   `T' is for fp load and store addresses.*/\n+   `T' is for fp loads and stores.  */\n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n   ((C) == 'Q' ?\t\t\t\t\t\t\\\n    (IS_RELOADING_PSEUDO_P (OP)\t\t\t\t\\\n@@ -1105,9 +1105,10 @@ extern union tree_node *current_function_decl;\n \t&& memory_address_p (GET_MODE (OP), XEXP (OP, 0))\\\n \t&& ! symbolic_memory_operand (OP, VOIDmode)))\t\\\n    : ((C) == 'T' ? \t\t\t\t\t\\\n-      (IS_RELOADING_PSEUDO_P (OP)\t\t\t\\\n-       || (GET_CODE (OP) == MEM\t\t\t\t\\\n-\t   && short_memory_operand (OP, VOIDmode)))\t\\\n+      (GET_CODE (OP) == MEM\t\t\t\t\\\n+       /* Using DFmode forces only short displacements\t\\\n+\t  to be recognized as valid in reg+d addresses.  */\\\n+       && memory_address_p (DFmode, XEXP (OP, 0)))\t\\\n    : ((C) == 'S' ?\t\t\t\t\t\\\n       ((CONSTANT_P (OP) && ! TARGET_LONG_CALLS)\t\t\\\n         || (reload_in_progress \t\t\t\t\\"}]}