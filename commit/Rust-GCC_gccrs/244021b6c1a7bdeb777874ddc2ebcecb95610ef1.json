{"sha": "244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "node_id": "C_kwDOANBUbNoAKDI0NDAyMWI2YzFhN2JkZWI3Nzc4NzRkZGMyZWJjZWNiOTU2MTBlZjE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-20T17:51:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-10-24T20:28:03Z"}, "message": "tree: add build_string_literal overloads\n\nSimplify several calls to build_string_literal by not requiring redundant\nstrlen or IDENTIFIER_* in the caller.\n\nI also corrected a wrong comment on IDENTIFIER_LENGTH.\n\ngcc/ChangeLog:\n\n\t* tree.h (build_string_literal): New one-argument overloads that\n\ttake tree (identifier) and const char *.\n\t* builtins.cc (fold_builtin_FILE)\n\t(fold_builtin_FUNCTION)\n\t* gimplify.cc (gimple_add_init_for_auto_var)\n\t* vtable-verify.cc (verify_bb_vtables): Simplify calls.\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (fold_builtin_source_location)\n\t* vtable-class-hierarchy.cc (register_all_pairs): Simplify calls to\n\tbuild_string_literal.\n\t(build_string_from_id): Remove.", "tree": {"sha": "c6b4c10a0916da733a3fc55f3bb726d5b7286dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6b4c10a0916da733a3fc55f3bb726d5b7286dc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205538832b7033699047900cf25928f5920d8b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205538832b7033699047900cf25928f5920d8b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205538832b7033699047900cf25928f5920d8b93"}], "stats": {"total": 59, "additions": 21, "deletions": 38}, "files": [{"sha": "26898d7e27ea4798631d7cd1cb25a77d28595f79", "filename": "gcc/builtins.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fbuiltins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fbuiltins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.cc?ref=244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "patch": "@@ -9521,10 +9521,10 @@ fold_builtin_FILE (location_t loc)\n \t __FILE__ macro so it appears appropriate to use the same file prefix\n \t mappings.  */\n       fname = remap_macro_filename (fname);\n-    return build_string_literal (strlen (fname) + 1, fname);\n+      return build_string_literal (fname);\n     }\n \n-  return build_string_literal (1, \"\");\n+  return build_string_literal (\"\");\n }\n \n /* Fold a call to __builtin_FUNCTION to a constant string.  */\n@@ -9537,7 +9537,7 @@ fold_builtin_FUNCTION ()\n   if (current_function_decl)\n     name = lang_hooks.decl_printable_name (current_function_decl, 0);\n \n-  return build_string_literal (strlen (name) + 1, name);\n+  return build_string_literal (name);\n }\n \n /* Fold a call to __builtin_LINE to an integer constant.  */"}, {"sha": "cc8bfada5afc533054a29f1290106d2043b612d9", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "patch": "@@ -3378,10 +3378,10 @@ fold_builtin_source_location (location_t loc)\n \t      if (const char *fname = LOCATION_FILE (loc))\n \t\t{\n \t\t  fname = remap_macro_filename (fname);\n-\t\t  val = build_string_literal (strlen (fname) + 1, fname);\n+\t\t  val = build_string_literal (fname);\n \t\t}\n \t      else\n-\t\tval = build_string_literal (1, \"\");\n+\t\tval = build_string_literal (\"\");\n \t    }\n \t  else if (strcmp (n, \"_M_function_name\") == 0)\n \t    {\n@@ -3390,7 +3390,7 @@ fold_builtin_source_location (location_t loc)\n \t      if (current_function_decl)\n \t\tname = cxx_printable_name (current_function_decl, 2);\n \n-\t      val = build_string_literal (strlen (name) + 1, name);\n+\t      val = build_string_literal (name);\n \t    }\n \t  else if (strcmp (n, \"_M_line\") == 0)\n \t    val = build_int_cst (TREE_TYPE (field), LOCATION_LINE (loc));"}, {"sha": "1e180ea61dca06a0e753ca22261906450961c917", "filename": "gcc/cp/vtable-class-hierarchy.cc", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fcp%2Fvtable-class-hierarchy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fcp%2Fvtable-class-hierarchy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvtable-class-hierarchy.cc?ref=244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "patch": "@@ -467,19 +467,6 @@ check_and_record_registered_pairs (tree vtable_decl, tree vptr_address,\n   return !inserted_something;\n }\n \n-/* Given an IDENTIFIER_NODE, build and return a string literal based on it.  */\n-\n-static tree\n-build_string_from_id (tree identifier)\n-{\n-  int len;\n-\n-  gcc_assert (TREE_CODE (identifier) == IDENTIFIER_NODE);\n-\n-  len = IDENTIFIER_LENGTH (identifier);\n-  return build_string_literal (len + 1, IDENTIFIER_POINTER (identifier));\n-}\n-\n /* A class may contain secondary vtables in it, for various reasons.\n    This function goes through the decl chain of a class record looking\n    for any fields that point to secondary vtables, and adding calls to\n@@ -920,7 +907,7 @@ register_all_pairs (tree body)\n \n \n       if (flag_vtv_debug)\n-        str1 = build_string_from_id (DECL_NAME (base_ptr_var_decl));\n+\tstr1 = build_string_literal (DECL_NAME (base_ptr_var_decl));\n \n       new_type = build_pointer_type (TREE_TYPE (base_ptr_var_decl));\n       arg1 = build1 (ADDR_EXPR, new_type, base_ptr_var_decl);\n@@ -953,7 +940,7 @@ register_all_pairs (tree body)\n                 if (vtable_decl)\n                   {\n                     vtable_should_be_output = TREE_ASM_WRITTEN (vtable_decl);\n-                    str2 = build_string_from_id (DECL_NAME (vtable_decl));\n+\t\t    str2 = build_string_literal (DECL_NAME (vtable_decl));\n                   }\n \n                 if (vtable_decl && vtable_should_be_output)\n@@ -1009,8 +996,7 @@ register_all_pairs (tree body)\n       arg2 = build_key_buffer_arg (base_ptr_var_decl);\n \n       if (str2 == NULL_TREE)\n-        str2 = build_string_literal (strlen (\"unknown\") + 1,\n-                                     \"unknown\");\n+\tstr2 = build_string_literal (\"unknown\");\n \n       if (flag_vtv_debug)\n         output_set_info (current->class_info->class_type,"}, {"sha": "69bad340d2edea470647654a74d48d1aa730d694", "filename": "gcc/gimplify.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fgimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fgimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.cc?ref=244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "patch": "@@ -1771,14 +1771,12 @@ gimple_add_init_for_auto_var (tree decl,\n   tree decl_name = NULL_TREE;\n   if (DECL_NAME (decl))\n \n-    decl_name = build_string_literal (IDENTIFIER_LENGTH (DECL_NAME (decl)) + 1,\n-\t\t\t\t      IDENTIFIER_POINTER (DECL_NAME (decl)));\n+    decl_name = build_string_literal (DECL_NAME (decl));\n \n   else\n     {\n       char *decl_name_anonymous = xasprintf (\"D.%u\", DECL_UID (decl));\n-      decl_name = build_string_literal (strlen (decl_name_anonymous) + 1,\n-\t\t\t\t\tdecl_name_anonymous);\n+      decl_name = build_string_literal (decl_name_anonymous);\n       free (decl_name_anonymous);\n     }\n "}, {"sha": "a50f7b2be9d024a3a0915d1515c6481cddd51968", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "patch": "@@ -1135,7 +1135,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \n /* Define fields and accessors for some special-purpose tree nodes.  */\n \n-/* As with STRING_CST, in C terms this is sizeof, not strlen.  */\n+/* Unlike STRING_CST, in C terms this is strlen, not sizeof.  */\n #define IDENTIFIER_LENGTH(NODE) \\\n   (IDENTIFIER_NODE_CHECK (NODE)->identifier.id.len)\n #define IDENTIFIER_POINTER(NODE) \\\n@@ -4706,6 +4706,13 @@ extern tree build_alloca_call_expr (tree, unsigned int, HOST_WIDE_INT);\n extern tree build_string_literal (unsigned, const char * = NULL,\n \t\t\t\t  tree = char_type_node,\n \t\t\t\t  unsigned HOST_WIDE_INT = HOST_WIDE_INT_M1U);\n+inline tree build_string_literal (const char *p)\n+{ return build_string_literal (strlen (p) + 1, p); }\n+inline tree build_string_literal (tree t)\n+{\n+  return build_string_literal (IDENTIFIER_LENGTH (t) + 1,\n+\t\t\t       IDENTIFIER_POINTER (t));\n+}\n \n /* Construct various nodes representing data types.  */\n "}, {"sha": "f01058e541218339dd420d60e1b2530626bb10bb", "filename": "gcc/vtable-verify.cc", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fvtable-verify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/244021b6c1a7bdeb777874ddc2ebcecb95610ef1/gcc%2Fvtable-verify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.cc?ref=244021b6c1a7bdeb777874ddc2ebcecb95610ef1", "patch": "@@ -725,10 +725,6 @@ verify_bb_vtables (basic_block bb)\n                      trace information to debug problems.  */\n                   if (flag_vtv_debug)\n                     {\n-                      int len1 = IDENTIFIER_LENGTH\n-                                                 (DECL_NAME (vtbl_var_decl));\n-                      int len2 = strlen (vtable_name);\n-\n                       call_stmt = gimple_build_call\n                                      (verify_vtbl_ptr_fndecl, 4,\n                                       build1 (ADDR_EXPR,\n@@ -737,12 +733,8 @@ verify_bb_vtables (basic_block bb)\n                                               vtbl_var_decl),\n                                       lhs,\n                                       build_string_literal\n-                                                  (len1 + 1,\n-                                                   IDENTIFIER_POINTER\n-                                                       (DECL_NAME\n-                                                            (vtbl_var_decl))),\n-                                      build_string_literal (len2 + 1,\n-                                                            vtable_name));\n+\t\t\t\t\t\t  (DECL_NAME (vtbl_var_decl)),\n+\t\t\t\t      build_string_literal (vtable_name));\n                     }\n                   else\n                     call_stmt = gimple_build_call"}]}