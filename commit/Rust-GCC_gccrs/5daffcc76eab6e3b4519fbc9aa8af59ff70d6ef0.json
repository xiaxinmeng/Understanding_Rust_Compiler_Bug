{"sha": "5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhZmZjYzc2ZWFiNmUzYjQ1MTlmYmM5YWE4YWY1OWZmNzBkNmVmMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-07T12:54:09Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-07T12:54:09Z"}, "message": "tree-vrp.c (compare_values): Short circuit INTEGER_CST...\n\n\t* tree-vrp.c (compare_values): Short circuit INTEGER_CST;\n\tuse fold_constant_to_binary; tolerate wrong type constants.\n\t(value_intersect_p): Do just two tests.\n\nFrom-SVN: r119619", "tree": {"sha": "0497c34bbec6df88f11ebc345173a927e791df5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0497c34bbec6df88f11ebc345173a927e791df5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0/comments", "author": null, "committer": null, "parents": [{"sha": "58f76679659f6d1e107bf9d2072a2f7bca63c763", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58f76679659f6d1e107bf9d2072a2f7bca63c763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58f76679659f6d1e107bf9d2072a2f7bca63c763"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "aac2bb13e2908e74a08c03557121650bd8b48f37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0", "patch": "@@ -1,3 +1,9 @@\n+2006-12-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-vrp.c (compare_values): Short circuit INTEGER_CST;\n+\tuse fold_constant_to_binary; tolerate wrong type constants.\n+\t(value_intersect_p): Do just two tests.\n+\n 2006-12-07  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.c (print_operand): New modifier 'N' for constants."}, {"sha": "eb28ca9cb5c57516f74df0bbe51c0ffd82bb65fe", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=5daffcc76eab6e3b4519fbc9aa8af59ff70d6ef0", "patch": "@@ -620,10 +620,17 @@ compare_values (tree val1, tree val2)\n       if (operand_less_p (val2, val1) == 1)\n \treturn 1;\n \n-      /* If VAL1 is different than VAL2, return +2.  */\n-      t = fold_binary (NE_EXPR, boolean_type_node, val1, val2);\n-      if (t == boolean_true_node)\n-\treturn 2;\n+      /* If VAL1 is different than VAL2, return +2.\n+\t For integer constants we either have already returned -1 or 1\n+\t or they are equivalent.  We still might suceed prove something\n+\t about non-trivial operands.  */\n+      if (TREE_CODE (val1) != INTEGER_CST\n+\t  || TREE_CODE (val2) != INTEGER_CST)\n+\t{\n+          t = fold_binary_to_constant (NE_EXPR, boolean_type_node, val1, val2);\n+\t  if (t && tree_expr_nonzero_p (t))\n+\t    return 2;\n+\t}\n \n       return -2;\n     }\n@@ -682,10 +689,14 @@ value_inside_range (tree val, value_range_t * vr)\n static inline bool\n value_ranges_intersect_p (value_range_t *vr0, value_range_t *vr1)\n {\n-  return (value_inside_range (vr1->min, vr0) == 1\n-\t  || value_inside_range (vr1->max, vr0) == 1\n-\t  || value_inside_range (vr0->min, vr1) == 1\n-\t  || value_inside_range (vr0->max, vr1) == 1);\n+  /* The value ranges do not intersect if the maximum of the first range is\n+     less than the minimum of the second range or vice versa.\n+     When those relations are unknown, we can't do any better.  */\n+  if (operand_less_p (vr0->max, vr1->min) != 0)\n+    return false;\n+  if (operand_less_p (vr1->max, vr0->min) != 0)\n+    return false;\n+  return true;\n }\n \n "}]}