{"sha": "b4d1725b5481fd693f078bd06e1e5b8209a89269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkMTcyNWI1NDgxZmQ2OTNmMDc4YmQwNmUxZTViODIwOWE4OTI2OQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-04-29T06:52:23Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-04-29T06:52:23Z"}, "message": "re PR target/64835 (-fno-ipa-cp is inconsitently supported when attributes optimize or target are used)\n\n2015-04-29  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/64835\n\t* config/i386/i386.c (ix86_default_align): New function.\n\t(ix86_override_options_after_change): Call ix86_default_align.\n\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New hook.\n\t(ix86_override_options_after_change): New function.\n\nFrom-SVN: r222559", "tree": {"sha": "c94c951e50eb98e0a6ac0473e1eadb1e36e80027", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c94c951e50eb98e0a6ac0473e1eadb1e36e80027"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d1725b5481fd693f078bd06e1e5b8209a89269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d1725b5481fd693f078bd06e1e5b8209a89269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d1725b5481fd693f078bd06e1e5b8209a89269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d1725b5481fd693f078bd06e1e5b8209a89269/comments", "author": null, "committer": null, "parents": [{"sha": "874ef163cf31b1d045e2538a46937d457630f37d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/874ef163cf31b1d045e2538a46937d457630f37d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/874ef163cf31b1d045e2538a46937d457630f37d"}], "stats": {"total": 117, "additions": 103, "deletions": 14}, "files": [{"sha": "9a58cbe9b26ec7207a28a9153f0d5d8fc6c084e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4d1725b5481fd693f078bd06e1e5b8209a89269", "patch": "@@ -1,3 +1,11 @@\n+2015-04-29  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/64835\n+\t* config/i386/i386.c (ix86_default_align): New function.\n+\t(ix86_override_options_after_change): Call ix86_default_align.\n+\t(TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE): New hook.\n+\t(ix86_override_options_after_change): New function.\n+\n 2015-04-28  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (record_equality); Fix comment typos."}, {"sha": "0e8477d20fd4db06ef80c060ea796e188ea05699", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b4d1725b5481fd693f078bd06e1e5b8209a89269", "patch": "@@ -3106,6 +3106,35 @@ set_ix86_tune_features (enum processor_type ix86_tune, bool dump)\n }\n \n \n+/* Default align_* from the processor table.  */\n+\n+static void\n+ix86_default_align (struct gcc_options *opts)\n+{\n+  if (opts->x_align_loops == 0)\n+    {\n+      opts->x_align_loops = processor_target_table[ix86_tune].align_loop;\n+      align_loops_max_skip = processor_target_table[ix86_tune].align_loop_max_skip;\n+    }\n+  if (opts->x_align_jumps == 0)\n+    {\n+      opts->x_align_jumps = processor_target_table[ix86_tune].align_jump;\n+      align_jumps_max_skip = processor_target_table[ix86_tune].align_jump_max_skip;\n+    }\n+  if (opts->x_align_functions == 0)\n+    {\n+      opts->x_align_functions = processor_target_table[ix86_tune].align_func;\n+    }\n+}\n+\n+/* Implement TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE hook.  */\n+\n+static void\n+ix86_override_options_after_change (void)\n+{\n+  ix86_default_align (&global_options);\n+}\n+\n /* Override various settings based on options.  If MAIN_ARGS_P, the\n    options are from the command line, otherwise they are from\n    attributes.  */\n@@ -3903,20 +3932,7 @@ ix86_option_override_internal (bool main_args_p,\n     opts->x_ix86_regparm = REGPARM_MAX;\n \n   /* Default align_* from the processor table.  */\n-  if (opts->x_align_loops == 0)\n-    {\n-      opts->x_align_loops = processor_target_table[ix86_tune].align_loop;\n-      align_loops_max_skip = processor_target_table[ix86_tune].align_loop_max_skip;\n-    }\n-  if (opts->x_align_jumps == 0)\n-    {\n-      opts->x_align_jumps = processor_target_table[ix86_tune].align_jump;\n-      align_jumps_max_skip = processor_target_table[ix86_tune].align_jump_max_skip;\n-    }\n-  if (opts->x_align_functions == 0)\n-    {\n-      opts->x_align_functions = processor_target_table[ix86_tune].align_func;\n-    }\n+  ix86_default_align (opts);\n \n   /* Provide default for -mbranch-cost= value.  */\n   if (!opts_set->x_ix86_branch_cost)\n@@ -52098,6 +52114,9 @@ ix86_operands_ok_for_move_multiple (rtx *operands, bool load,\n #undef TARGET_PROMOTE_FUNCTION_MODE\n #define TARGET_PROMOTE_FUNCTION_MODE ix86_promote_function_mode\n \n+#undef  TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n+#define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE ix86_override_options_after_change\n+\n #undef TARGET_MEMBER_TYPE_FORCES_BLK\n #define TARGET_MEMBER_TYPE_FORCES_BLK ix86_member_type_forces_blk\n "}, {"sha": "71ef124c2631057479f49112ef3e7b25e897c8e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4d1725b5481fd693f078bd06e1e5b8209a89269", "patch": "@@ -1,3 +1,9 @@\n+2015-04-29  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/64835\n+\t* gcc.dg/ipa/iinline-attr.c: New test.\n+\t* gcc.target/i386/iinline-attr-2.c: New test.\n+\n 2015-04-28  Andre Vehreschild  <vehre@gmx.de>\n \n \t* gfortran.dg/implicit_class_1.f90: Adding flag to check, if"}, {"sha": "119d61f43d4f526ae7ffc40c7082d73cee0f8632", "filename": "gcc/testsuite/gcc.dg/ipa/iinline-attr.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-attr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-attr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fiinline-attr.c?ref=b4d1725b5481fd693f078bd06e1e5b8209a89269", "patch": "@@ -0,0 +1,27 @@\n+/* Verify that simple indirect calls are inlined even when\n+   attribute __optimize is used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-ipa-inline\"  } */\n+\n+extern void non_existent(int);\n+\n+static void hooray ()\n+{\n+  non_existent (1);\n+}\n+\n+__attribute__ ((__optimize__ (\"O2\")))\n+static void hiphip (void (*f)())\n+{\n+  non_existent (2);\n+  f ();\n+}\n+\n+int test (void)\n+{\n+  hiphip (hooray);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"hooray\\[^\\\\n\\]*inline copy in test\"  \"inline\"  } } */\n+/* { dg-final { cleanup-ipa-dump \"inline\" } } */"}, {"sha": "4b390cae0ef735cfa37c4abb3f1bb30f673b274a", "filename": "gcc/testsuite/gcc.target/i386/iinline-attr-2.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fiinline-attr-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d1725b5481fd693f078bd06e1e5b8209a89269/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fiinline-attr-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fiinline-attr-2.c?ref=b4d1725b5481fd693f078bd06e1e5b8209a89269", "patch": "@@ -0,0 +1,29 @@\n+/* Verify that alignment flags are set when  attribute __optimize is used.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\"  } */\n+\n+extern void non_existent(int);\n+\n+__attribute__ ((__optimize__ (\"O2\")))\n+static void hooray ()\n+{\n+  non_existent (1);\n+}\n+\n+__attribute__ ((__optimize__ (\"O2\")))\n+static void hiphip (void (*f)())\n+{\n+  non_existent (2);\n+  f ();\n+}\n+\n+__attribute__ ((__optimize__ (\"O2\")))\n+int test (void)\n+{\n+  hiphip (hooray);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"p2align\" } } */\n+\n+"}]}