{"sha": "1312c276d64f91c4b44072d37bbef0b817ae2ee2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxMmMyNzZkNjRmOTFjNGI0NDA3MmQzN2JiZWYwYjgxN2FlMmVlMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-07-19T18:53:35Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-07-19T18:53:35Z"}, "message": "ia64: Update vector multiply pattern names; delete dot_prod\n\nWith the even/odd v4hi multiply pattern names, we'll automatically\ngenerate the same code for dot_prodv4hi.  The dot_prodv8qi pattern\nwas actively incorrect wrt output mode.\n\n        * config/ia64/vect.md (smulv4hi3_highpart): New.\n        (umulv4hi3_highpart): New.\n        (vec_widen_smult_even_v4hi): Rename from pmpy2_even.\n        (vec_widen_smult_odd_v4hi): Rename from pmpy2_odd.\n        (udot_prodv8qi, sdot_prodv8qi): Remove.\n        (sdot_prodv4hi, udot_prodv4hi): Remove.\n        * config/ia64/ia64.c (ia64_expand_dot_prod_v8qi): Remove.\n        * config/ia64/ia64-protos.h: Update.\n\nFrom-SVN: r189674", "tree": {"sha": "0f8cd8e45e69e5cc2ee75ca19ed7257082706639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f8cd8e45e69e5cc2ee75ca19ed7257082706639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1312c276d64f91c4b44072d37bbef0b817ae2ee2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1312c276d64f91c4b44072d37bbef0b817ae2ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1312c276d64f91c4b44072d37bbef0b817ae2ee2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1312c276d64f91c4b44072d37bbef0b817ae2ee2/comments", "author": null, "committer": null, "parents": [{"sha": "e6d4f8f5e5b2bbb8981526d478b333f22516dba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d4f8f5e5b2bbb8981526d478b333f22516dba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d4f8f5e5b2bbb8981526d478b333f22516dba9"}], "stats": {"total": 138, "additions": 33, "deletions": 105}, "files": [{"sha": "817a222d0715cc1ba357e2a7c15801eeaf8c41f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1312c276d64f91c4b44072d37bbef0b817ae2ee2", "patch": "@@ -1,5 +1,14 @@\n 2012-07-19  Richard Henderson  <rth@redhat.com>\n \n+\t* config/ia64/vect.md (smulv4hi3_highpart): New.\n+\t(umulv4hi3_highpart): New.\n+\t(vec_widen_smult_even_v4hi): Rename from pmpy2_even.\n+\t(vec_widen_smult_odd_v4hi): Rename from pmpy2_odd.\n+\t(udot_prodv8qi, sdot_prodv8qi): Remove.\n+\t(sdot_prodv4hi, udot_prodv4hi): Remove.\n+\t* config/ia64/ia64.c (ia64_expand_dot_prod_v8qi): Remove.\n+\t* config/ia64/ia64-protos.h: Update.\n+\n \t* tree-vect-patterns.c (vect_recog_divmod_pattern): Do not require\n \tvectors larger than UNITS_PER_WORD.\n "}, {"sha": "39d34d41594685ff8021dfec766797d84ea7cd41", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=1312c276d64f91c4b44072d37bbef0b817ae2ee2", "patch": "@@ -43,7 +43,6 @@ extern bool ia64_expand_vecint_minmax (enum rtx_code, enum machine_mode, rtx[]);\n extern void ia64_unpack_assemble (rtx, rtx, rtx, bool);\n extern void ia64_expand_unpack (rtx [], bool, bool);\n extern void ia64_expand_widen_sum (rtx[], bool);\n-extern void ia64_expand_dot_prod_v8qi (rtx[], bool);\n extern void ia64_expand_call (rtx, rtx, rtx, int);\n extern void ia64_split_call (rtx, rtx, rtx, rtx, rtx, int, int);\n extern void ia64_reload_gp (void);"}, {"sha": "c7fb559c2535d708daae56acf480ea1d03998067", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=1312c276d64f91c4b44072d37bbef0b817ae2ee2", "patch": "@@ -2096,46 +2096,6 @@ ia64_expand_widen_sum (rtx operands[3], bool unsignedp)\n     emit_move_insn (operands[0], t);\n }\n \n-/* Emit a signed or unsigned V8QI dot product operation.  */\n-\n-void\n-ia64_expand_dot_prod_v8qi (rtx operands[4], bool unsignedp)\n-{\n-  rtx op1, op2, sn1, sn2, l1, l2, h1, h2;\n-  rtx p1, p2, p3, p4, s1, s2, s3;\n-\n-  op1 = operands[1];\n-  op2 = operands[2];\n-  sn1 = ia64_unpack_sign (op1, unsignedp);\n-  sn2 = ia64_unpack_sign (op2, unsignedp);\n-\n-  l1 = gen_reg_rtx (V4HImode);\n-  l2 = gen_reg_rtx (V4HImode);\n-  h1 = gen_reg_rtx (V4HImode);\n-  h2 = gen_reg_rtx (V4HImode);\n-  ia64_unpack_assemble (l1, op1, sn1, false);\n-  ia64_unpack_assemble (l2, op2, sn2, false);\n-  ia64_unpack_assemble (h1, op1, sn1, true);\n-  ia64_unpack_assemble (h2, op2, sn2, true);\n-\n-  p1 = gen_reg_rtx (V2SImode);\n-  p2 = gen_reg_rtx (V2SImode);\n-  p3 = gen_reg_rtx (V2SImode);\n-  p4 = gen_reg_rtx (V2SImode);\n-  emit_insn (gen_pmpy2_even (p1, l1, l2));\n-  emit_insn (gen_pmpy2_even (p2, h1, h2));\n-  emit_insn (gen_pmpy2_odd (p3, l1, l2));\n-  emit_insn (gen_pmpy2_odd (p4, h1, h2));\n-\n-  s1 = gen_reg_rtx (V2SImode);\n-  s2 = gen_reg_rtx (V2SImode);\n-  s3 = gen_reg_rtx (V2SImode);\n-  emit_insn (gen_addv2si3 (s1, p1, p2));\n-  emit_insn (gen_addv2si3 (s2, p3, p4));\n-  emit_insn (gen_addv2si3 (s3, s1, operands[3]));\n-  emit_insn (gen_addv2si3 (operands[0], s2, s3));\n-}\n-\n /* Emit the appropriate sequence for a call.  */\n \n void"}, {"sha": "4d85aa01815a72b029027a8457852318eb03567d", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 24, "deletions": 64, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1312c276d64f91c4b44072d37bbef0b817ae2ee2/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=1312c276d64f91c4b44072d37bbef0b817ae2ee2", "patch": "@@ -278,7 +278,29 @@\n   \"pmpyshr2.u %0 = %1, %2, %3\"\n   [(set_attr \"itanium_class\" \"mmmul\")])\n \n-(define_insn \"pmpy2_even\"\n+(define_expand \"smulv4hi3_highpart\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\")\n+   (match_operand:V4HI 1 \"gr_register_operand\")\n+   (match_operand:V4HI 2 \"gr_register_operand\")]\n+  \"\"\n+{\n+  emit_insn (gen_pmpyshr2 (operands[0], operands[1],\n+\t\t\t   operands[2], GEN_INT (16)));\n+  DONE;\n+})\n+\n+(define_expand \"umulv4hi3_highpart\"\n+  [(match_operand:V4HI 0 \"gr_register_operand\")\n+   (match_operand:V4HI 1 \"gr_register_operand\")\n+   (match_operand:V4HI 2 \"gr_register_operand\")]\n+  \"\"\n+{\n+  emit_insn (gen_pmpyshr2_u (operands[0], operands[1],\n+\t\t\t     operands[2], GEN_INT (16)));\n+  DONE;\n+})\n+\n+(define_insn \"vec_widen_smult_even_v4hi\"\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n \t(mult:V2SI\n \t  (vec_select:V2SI\n@@ -299,7 +321,7 @@\n }\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n-(define_insn \"pmpy2_odd\"\n+(define_insn \"vec_widen_smult_odd_v4hi\"\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"=r\")\n \t(mult:V2SI\n \t  (vec_select:V2SI\n@@ -602,68 +624,6 @@\n   DONE;\n })\n \n-(define_expand \"udot_prodv8qi\"\n-  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n-   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n-   (match_operand:V8QI 2 \"gr_register_operand\" \"\")\n-   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n-  \"\"\n-{\n-  ia64_expand_dot_prod_v8qi (operands, true);\n-  DONE;\n-})\n-\n-(define_expand \"sdot_prodv8qi\"\n-  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n-   (match_operand:V8QI 1 \"gr_register_operand\" \"\")\n-   (match_operand:V8QI 2 \"gr_register_operand\" \"\")\n-   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n-  \"\"\n-{\n-  ia64_expand_dot_prod_v8qi (operands, false);\n-  DONE;\n-})\n-\n-(define_expand \"sdot_prodv4hi\"\n-  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n-   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n-   (match_operand:V4HI 2 \"gr_register_operand\" \"\")\n-   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n-  \"\"\n-{\n-  rtx e, o, t;\n-\n-  e = gen_reg_rtx (V2SImode);\n-  o = gen_reg_rtx (V2SImode);\n-  t = gen_reg_rtx (V2SImode);\n-\n-  emit_insn (gen_pmpy2_even (e, operands[1], operands[2]));\n-  emit_insn (gen_pmpy2_odd (o, operands[1], operands[2]));\n-  emit_insn (gen_addv2si3 (t, e, operands[3]));\n-  emit_insn (gen_addv2si3 (operands[0], t, o));\n-  DONE;\n-})\n-\n-(define_expand \"udot_prodv4hi\"\n-  [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n-   (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n-   (match_operand:V4HI 2 \"gr_register_operand\" \"\")\n-   (match_operand:V2SI 3 \"gr_register_operand\" \"\")]\n-  \"\"\n-{\n-  rtx l, h, t;\n-\n-  l = gen_reg_rtx (V2SImode);\n-  h = gen_reg_rtx (V2SImode);\n-  t = gen_reg_rtx (V2SImode);\n-\n-  emit_insn (gen_vec_widen_umult_lo_v4hi (l, operands[1], operands[2]));\n-  emit_insn (gen_vec_widen_umult_hi_v4hi (h, operands[1], operands[2]));\n-  emit_insn (gen_addv2si3 (t, l, operands[3]));\n-  emit_insn (gen_addv2si3 (operands[0], t, h));\n-  DONE;\n-})\n-\n (define_expand \"vcond<mode><mode>\"\n   [(set (match_operand:VECINT 0 \"gr_register_operand\" \"\")\n \t(if_then_else:VECINT"}]}