{"sha": "c86e69b2f952249f97b562c25050613fe0be40c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg2ZTY5YjJmOTUyMjQ5Zjk3YjU2MmMyNTA1MDYxM2ZlMGJlNDBjMQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-04-08T11:57:28Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-04-08T11:57:28Z"}, "message": "Long.java (parseLong): Corrected overflow detection code.\n\n\t* java/lang/Long.java (parseLong): Corrected overflow detection\n\tcode.\n\t* java/lang/Integer.java (parseInt): Corrected overflow detection\n\tcode.\n\nFrom-SVN: r26295", "tree": {"sha": "d02ba7850a2e25d68af2379a03ee626da087d1a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d02ba7850a2e25d68af2379a03ee626da087d1a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c86e69b2f952249f97b562c25050613fe0be40c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86e69b2f952249f97b562c25050613fe0be40c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c86e69b2f952249f97b562c25050613fe0be40c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c86e69b2f952249f97b562c25050613fe0be40c1/comments", "author": null, "committer": null, "parents": [{"sha": "e086449d2a918858b784ccc0032d5a87b3e55d06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e086449d2a918858b784ccc0032d5a87b3e55d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e086449d2a918858b784ccc0032d5a87b3e55d06"}], "stats": {"total": 55, "additions": 25, "deletions": 30}, "files": [{"sha": "c97368a77352ba3cd2bc30d8e5060905d698a04b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86e69b2f952249f97b562c25050613fe0be40c1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86e69b2f952249f97b562c25050613fe0be40c1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c86e69b2f952249f97b562c25050613fe0be40c1", "patch": "@@ -1,5 +1,10 @@\n 1999-04-08  Tom Tromey  <tromey@cygnus.com>\n \n+\t* java/lang/Long.java (parseLong): Corrected overflow detection\n+\tcode.\n+\t* java/lang/Integer.java (parseInt): Corrected overflow detection\n+\tcode.\n+\n \t* java/io/PrintStream.java (print): Handle null string argument.\n \t(println): Likewise.\n "}, {"sha": "b4a4fc2a2ceb5b3af4d0a60474299912c0d5e04b", "filename": "libjava/java/lang/Integer.java", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86e69b2f952249f97b562c25050613fe0be40c1/libjava%2Fjava%2Flang%2FInteger.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86e69b2f952249f97b562c25050613fe0be40c1/libjava%2Fjava%2Flang%2FInteger.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FInteger.java?ref=c86e69b2f952249f97b562c25050613fe0be40c1", "patch": "@@ -203,30 +203,25 @@ private static int parseInt(String str, int index, int len, boolean isNeg,\n     int val = 0;\n     int digval;\n \n+    int max = MAX_VALUE / radix;\n+    // We can't directly write `max = (MAX_VALUE + 1) / radix'.\n+    // So instead we fake it.\n+    if (isNeg && MAX_VALUE % radix == radix - 1)\n+      ++max;\n+\n     for ( ; index < len; index++)\n       {\n-\t// The the previous loop iteration left us with a negative\n-\t// value (which can only be the most negative value, but we\n-\t// don't check that), then having more digits is wrong.\n-\tif (val == MIN_VALUE)\n+\tif (val < 0 || val > max)\n \t  throw new NumberFormatException();\n \n         if ((digval = Character.digit(str.charAt(index), radix)) < 0)\n           throw new NumberFormatException();\n \n         // Throw an exception for overflow if result is negative.\n \t// However, we special-case the most negative value.\n-\tval *= radix;\n-\tif (val < 0 || val + digval < 0)\n-\t  {\n-\t    if (isNeg && val + digval == MIN_VALUE)\n-\t      {\n-\t\t// Ok.\n-\t      }\n-\t    else\n-\t      throw new NumberFormatException();\n-\t  }\n-\tval += digval;\n+\tval = val * radix + digval;\n+\tif (val < 0 && (! isNeg || val != MIN_VALUE))\n+\t  throw new NumberFormatException();\n       }\n \n     return isNeg ? -(val) : val;"}, {"sha": "f79ee7b78b2f13c21e2128a9e25881ce0b5ae0ca", "filename": "libjava/java/lang/Long.java", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c86e69b2f952249f97b562c25050613fe0be40c1/libjava%2Fjava%2Flang%2FLong.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c86e69b2f952249f97b562c25050613fe0be40c1/libjava%2Fjava%2Flang%2FLong.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FLong.java?ref=c86e69b2f952249f97b562c25050613fe0be40c1", "patch": "@@ -205,30 +205,25 @@ private static long parseLong(String str, int index, int len, boolean isNeg,\n     long val = 0;\n     int digval;\n \n+    long max = MAX_VALUE / radix;\n+    // We can't directly write `max = (MAX_VALUE + 1) / radix'.\n+    // So instead we fake it.\n+    if (isNeg && MAX_VALUE % radix == radix - 1)\n+      ++max;\n+\n     for ( ; index < len; index++)\n       {\n-\t// The the previous loop iteration left us with a negative\n-\t// value (which can only be the most negative value, but we\n-\t// don't check that), then having more digits is wrong.\n-\tif (val == MIN_VALUE)\n+\tif (val < 0 || val > max)\n \t  throw new NumberFormatException();\n \n         if ((digval = Character.digit(str.charAt(index), radix)) < 0)\n           throw new NumberFormatException();\n \n         // Throw an exception for overflow if result is negative.\n \t// However, we special-case the most negative value.\n-\tval *= radix;\n-\tif (val < 0 || val + digval < 0)\n-\t  {\n-\t    if (isNeg && val + digval == MIN_VALUE)\n-\t      {\n-\t\t// Ok.\n-\t      }\n-\t    else\n-\t      throw new NumberFormatException();\n-\t  }\n-\tval += digval;\n+\tval = val * radix + digval;\n+\tif (val < 0 && (! isNeg || val != MIN_VALUE))\n+\t  throw new NumberFormatException();\n       }\n \n     return isNeg ? -(val) : val;"}]}