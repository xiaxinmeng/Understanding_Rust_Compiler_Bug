{"sha": "7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzczODI3MGIwY2VkYTA3Zjg5YzFkZDJkNzVlMzFhZTdiYjRmMjA1Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:38:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T12:38:24Z"}, "message": "[multiple changes]\n\n2017-04-25  Yannick Moy  <moy@adacore.com>\n\n\t* freeze.adb (Freeze_Record_Type): Remove obsolete\n\trule on volatile tagged record restriction on SPARK code.\n\n2017-04-25  Yannick Moy  <moy@adacore.com>\n\n\t* sem_prag.adb (minor) Fix SPARK RM reference.\n\n2017-04-25  Yannick Moy  <moy@adacore.com>\n\n\t* sem_util.adb, sem_util.ads (Unique_Defining_Entity): Update\n\tcomment to reflect which entity is chosen as unique entity.\n\t(Unique_Entity): Return full view instead of private spec for\n\tprotected type or task type. Fix possible incorrect access when\n\tcalled on entry.\n\n2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_res.adb (Set_Slice_Subtype): Treat specially bit-packed\n\tarray types only instead of all packed array types.\n\n2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Conforming_Types): If type of formal as a specified\n\tdimension system, verify that dimensions of both match.\n\t(Check_Conformance): Add error message in case of dimension\n\tmismatch.\n\t* sem_dim.ads, sem_dim.adb (Dimensions_Match): New utility\n\tpredicate.\n\n2017-04-25  Arnaud Charlet  <charlet@adacore.com trojanek>\n\n\t* gnatxref.adb, gnatfind.adb: Avoid using the term project file,\n\tconfusing.\n\nFrom-SVN: r247212", "tree": {"sha": "48a728f8d6b7f74f502ff87995064330d1bcdc13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48a728f8d6b7f74f502ff87995064330d1bcdc13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/comments", "author": null, "committer": null, "parents": [{"sha": "e4b1cd76560d70923fbcbc52b2be32e4c760ba49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b1cd76560d70923fbcbc52b2be32e4c760ba49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b1cd76560d70923fbcbc52b2be32e4c760ba49"}], "stats": {"total": 193, "additions": 140, "deletions": 53}, "files": [{"sha": "1cb5c4d13293f3cb8ffb530a775359cf88408fa6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -1,3 +1,39 @@\n+2017-04-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* freeze.adb (Freeze_Record_Type): Remove obsolete\n+\trule on volatile tagged record restriction on SPARK code.\n+\n+2017-04-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_prag.adb (minor) Fix SPARK RM reference.\n+\n+2017-04-25  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb, sem_util.ads (Unique_Defining_Entity): Update\n+\tcomment to reflect which entity is chosen as unique entity.\n+\t(Unique_Entity): Return full view instead of private spec for\n+\tprotected type or task type. Fix possible incorrect access when\n+\tcalled on entry.\n+\n+2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Set_Slice_Subtype): Treat specially bit-packed\n+\tarray types only instead of all packed array types.\n+\n+2017-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Conforming_Types): If type of formal as a specified\n+\tdimension system, verify that dimensions of both match.\n+\t(Check_Conformance): Add error message in case of dimension\n+\tmismatch.\n+\t* sem_dim.ads, sem_dim.adb (Dimensions_Match): New utility\n+\tpredicate.\n+\n+2017-04-25  Arnaud Charlet  <charlet@adacore.com trojanek>\n+\n+\t* gnatxref.adb, gnatfind.adb: Avoid using the term project file,\n+\tconfusing.\n+\n 2017-04-25  Yannick Moy  <moy@adacore.com>\n \n \t* sem_util.adb: Minor refactoring."}, {"sha": "571f4968a7915e2536be7feee9fa772e81961b9a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -4622,21 +4622,13 @@ package body Freeze is\n          --  they are not standard Ada legality rules.\n \n          if SPARK_Mode = On then\n-            if Is_Effectively_Volatile (Rec) then\n \n-               --  A discriminated type cannot be effectively volatile\n-               --  (SPARK RM 7.1.3(5)).\n+            --  A discriminated type cannot be effectively volatile\n+            --  (SPARK RM 7.1.3(5)).\n \n-               if Has_Discriminants (Rec)\n-                 and then not Is_Protected_Type (Rec)\n-               then\n+            if Is_Effectively_Volatile (Rec) then\n+               if Has_Discriminants (Rec) then\n                   Error_Msg_N (\"discriminated type & cannot be volatile\", Rec);\n-\n-               --  A tagged type cannot be effectively volatile\n-               --  (SPARK RM C.6(5)).\n-\n-               elsif Is_Tagged_Type (Rec) then\n-                  Error_Msg_N (\"tagged type & cannot be volatile\", Rec);\n                end if;\n \n             --  A non-effectively volatile record type cannot contain"}, {"sha": "0d030be6f00f8a70a091f686770411db2d6b0a4b", "filename": "gcc/ada/gnatfind.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fgnatfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fgnatfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatfind.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -322,7 +322,7 @@ procedure Gnatfind is\n       Put_Line (\"   --ext=xxx Specify alternate ali file extension\");\n       Put_Line (\"   --RTS=dir specify the default source and object search\"\n                 & \" path\");\n-      Put_Line (\"   -p file   Use file as the default project file\");\n+      Put_Line (\"   -p file   Use file as the configuration file\");\n       Put_Line (\"   -r        Find all references (default to find declaration\"\n                 & \" only)\");\n       Put_Line (\"   -s        Print source line\");"}, {"sha": "c24fd49341a7c5a70d0dc5405f48fdf684a38292", "filename": "gcc/ada/gnatxref.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fgnatxref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fgnatxref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatxref.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -278,7 +278,7 @@ procedure Gnatxref is\n       Put_Line (\"   --ext=xxx Specify alternate ali file extension\");\n       Put_Line (\"   --RTS=dir specify the default source and object search\"\n                 & \" path\");\n-      Put_Line (\"   -p file   Use file as the default project file\");\n+      Put_Line (\"   -p file   Use file as the configuration file\");\n       Put_Line (\"   -u        List unused entities\");\n       Put_Line (\"   -v        Print a 'tags' file for vi\");\n       New_Line;"}, {"sha": "da261e9107f6b9917fcf5e2cc5958fabb3fe6d2f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -5300,6 +5300,11 @@ package body Sem_Ch6 is\n                else\n                   Conformance_Error\n                     (\"\\type of & does not match!\", New_Formal);\n+\n+                  if not Dimensions_Match (Old_Formal_Base, New_Formal_Base)\n+                  then\n+                     Error_Msg_N (\"\\dimensions mismatch!\", New_Formal);\n+                  end if;\n                end if;\n             end if;\n \n@@ -7410,30 +7415,39 @@ package body Sem_Ch6 is\n          return True;\n \n       elsif Base_Types_Match (Type_1, Type_2) then\n-         return Ctype <= Mode_Conformant\n-           or else Subtypes_Statically_Match (Type_1, Type_2);\n+         if Ctype <= Mode_Conformant then\n+            return True;\n+\n+         else\n+            return\n+              Subtypes_Statically_Match (Type_1, Type_2)\n+                and then Dimensions_Match (Type_1, Type_2);\n+         end if;\n \n       elsif Is_Incomplete_Or_Private_Type (Type_1)\n         and then Present (Full_View (Type_1))\n         and then Base_Types_Match (Full_View (Type_1), Type_2)\n       then\n-         return Ctype <= Mode_Conformant\n-           or else Subtypes_Statically_Match (Full_View (Type_1), Type_2);\n+         return\n+           Ctype <= Mode_Conformant\n+             or else Subtypes_Statically_Match (Full_View (Type_1), Type_2);\n \n       elsif Ekind (Type_2) = E_Incomplete_Type\n         and then Present (Full_View (Type_2))\n         and then Base_Types_Match (Type_1, Full_View (Type_2))\n       then\n-         return Ctype <= Mode_Conformant\n-           or else Subtypes_Statically_Match (Type_1, Full_View (Type_2));\n+         return\n+           Ctype <= Mode_Conformant\n+             or else Subtypes_Statically_Match (Type_1, Full_View (Type_2));\n \n       elsif Is_Private_Type (Type_2)\n         and then In_Instance\n         and then Present (Full_View (Type_2))\n         and then Base_Types_Match (Type_1, Full_View (Type_2))\n       then\n-         return Ctype <= Mode_Conformant\n-           or else Subtypes_Statically_Match (Type_1, Full_View (Type_2));\n+         return\n+           Ctype <= Mode_Conformant\n+             or else Subtypes_Statically_Match (Type_1, Full_View (Type_2));\n \n       --  Another confusion between views in a nested instance with an\n       --  actual private type whose full view is not in scope.\n@@ -7527,9 +7541,9 @@ package body Sem_Ch6 is\n \n             elsif Are_Anonymous_Access_To_Subprogram_Types then\n                if Ada_Version < Ada_2005 then\n-                  return Ctype = Type_Conformant\n-                    or else\n-                      Subtypes_Statically_Match (Desig_1, Desig_2);\n+                  return\n+                    Ctype = Type_Conformant\n+                      or else Subtypes_Statically_Match (Desig_1, Desig_2);\n \n                --  We must check the conformance of the signatures themselves\n "}, {"sha": "c5eda0c4f32988c5b7679b7e3b61044e615be1ce", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -2347,7 +2347,7 @@ package body Sem_Dim is\n    -- Copy_Dimensions --\n    ---------------------\n \n-   procedure Copy_Dimensions (From, To : Node_Id) is\n+   procedure Copy_Dimensions (From : Node_Id; To : Node_Id) is\n       Dims_Of_From : constant Dimension_Type := Dimensions_Of (From);\n \n    begin\n@@ -2593,6 +2593,17 @@ package body Sem_Dim is\n       Error_Msg_N (\"assumed to be%%??\", N);\n    end Dim_Warning_For_Numeric_Literal;\n \n+   ----------------------\n+   -- Dimensions_Match --\n+   ----------------------\n+\n+   function Dimensions_Match (T1 : Entity_Id; T2 : Entity_Id) return Boolean is\n+   begin\n+      return\n+        not Has_Dimension_System (Base_Type (T1))\n+          or else Dimensions_Of (T1) = Dimensions_Of (T2);\n+   end Dimensions_Match;\n+\n    ----------------------------------------\n    -- Eval_Op_Expon_For_Dimensioned_Type --\n    ----------------------------------------"}, {"sha": "fc484eaffdbb176a62d5e6ca199d1ed2a0c2a397", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -174,11 +174,15 @@ package Sem_Dim is\n    --  resolution of the ultimate components to a separate phase, which forces\n    --  this separate dimension verification.\n \n-   procedure Copy_Dimensions (From, To : Node_Id);\n+   procedure Copy_Dimensions (From : Node_Id; To : Node_Id);\n    --  Copy dimension vector of node From to node To. Note that To must be a\n    --  node that is allowed to contain a dimension (see OK_For_Dimension in\n    --  body of Sem_Dim).\n \n+   function Dimensions_Match (T1 : Entity_Id; T2 : Entity_Id) return Boolean;\n+   --  If the common base type has a dimension system, verify that two\n+   --  subtypes have the same dimensions. Used for conformance checking.\n+\n    procedure Eval_Op_Expon_For_Dimensioned_Type\n      (N    : Node_Id;\n       Btyp : Entity_Id);"}, {"sha": "03da2473285b5e850c16b0b3ca59c91d558cf9e2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -7084,7 +7084,7 @@ package body Sem_Prag is\n          --  The following check is only relevant when SPARK_Mode is on as\n          --  this is not a standard Ada legality rule. Pragma Volatile can\n          --  only apply to a full type declaration or an object declaration\n-         --  (SPARK RM C.6(1)). Original_Node is necessary to account for\n+         --  (SPARK RM 7.1.3(2)). Original_Node is necessary to account for\n          --  untagged derived types that are rewritten as subtypes of their\n          --  respective root types.\n "}, {"sha": "683686f5caa879fb93d5235939fa69f34d8a0807", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -11529,11 +11529,11 @@ package body Sem_Res is\n \n       Set_Etype (N, Slice_Subtype);\n \n-      --  For packed slice subtypes, freeze immediately (except in the case of\n-      --  being in a \"spec expression\" where we never freeze when we first see\n-      --  the expression).\n+      --  For bit-packed slice subtypes, freeze immediately (except in the case\n+      --  of being in a \"spec expression\" where we never freeze when we first\n+      --  see the expression).\n \n-      if Is_Packed (Slice_Subtype) and not In_Spec_Expression then\n+      if Is_Bit_Packed_Array (Slice_Subtype) and not In_Spec_Expression then\n          Freeze_Itype (Slice_Subtype, N);\n \n       --  For all other cases insert an itype reference in the slice's actions"}, {"sha": "7f80ba6cb19775ed71d7ba2a821a7cc6a135d6ff", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -21320,22 +21320,35 @@ package body Sem_Util is\n                      Prot_Type := Scope (Scope (E));\n                   end if;\n \n-                  pragma Assert (Ekind (Prot_Type) = E_Protected_Type);\n+                  --  A protected type may be declared as a private type, in\n+                  --  which case we need to get its full view.\n \n-                  --  Traverse the entity list of the protected type and locate\n-                  --  an entry declaration which matches the entry body.\n+                  if Is_Private_Type (Prot_Type) then\n+                     Prot_Type := Full_View (Prot_Type);\n+                  end if;\n \n-                  Prot_Item := First_Entity (Prot_Type);\n-                  while Present (Prot_Item) loop\n-                     if Ekind (Prot_Item) in Entry_Kind\n-                       and then Corresponding_Body (Parent (Prot_Item)) = E\n-                     then\n-                        U := Prot_Item;\n-                        exit;\n-                     end if;\n+                  --  Full view may not be present on error, in which case\n+                  --  return E by default.\n \n-                     Next_Entity (Prot_Item);\n-                  end loop;\n+                  if Present (Prot_Type) then\n+                     pragma Assert (Ekind (Prot_Type) = E_Protected_Type);\n+\n+                     --  Traverse the entity list of the protected type and\n+                     --  locate an entry declaration which matches the entry\n+                     --  body.\n+\n+                     Prot_Item := First_Entity (Prot_Type);\n+                     while Present (Prot_Item) loop\n+                        if Ekind (Prot_Item) in Entry_Kind\n+                          and then Corresponding_Body (Parent (Prot_Item)) = E\n+                        then\n+                           U := Prot_Item;\n+                           exit;\n+                        end if;\n+\n+                        Next_Entity (Prot_Item);\n+                     end loop;\n+                  end if;\n                end;\n             end if;\n \n@@ -21380,6 +21393,10 @@ package body Sem_Util is\n                end if;\n             end if;\n \n+            if Is_Private_Type (U) then\n+               U := Full_View (U);\n+            end if;\n+\n          when E_Subprogram_Body =>\n             P := Parent (E);\n \n@@ -21421,6 +21438,10 @@ package body Sem_Util is\n                end if;\n             end if;\n \n+            if Is_Private_Type (U) then\n+               U := Full_View (U);\n+            end if;\n+\n          when Type_Kind =>\n             if Present (Full_View (E)) then\n                U := Full_View (E);"}, {"sha": "a1787554ac21433526d91b41bbb227934ce66d93", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7738270b0ceda07f89c1dd2d75e31ae7bb4f2053/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7738270b0ceda07f89c1dd2d75e31ae7bb4f2053", "patch": "@@ -2425,13 +2425,22 @@ package Sem_Util is\n    function Unique_Defining_Entity (N : Node_Id) return Entity_Id;\n    --  Return the entity which represents declaration N, so that different\n    --  views of the same entity have the same unique defining entity:\n-   --    * entry declaration and entry body\n-   --    * package spec, package body, and package body stub\n-   --    * protected type declaration, protected body, and protected body stub\n    --    * private view and full view of a deferred constant\n-   --    * private view and full view of a type\n-   --    * subprogram declaration, subprogram, and subprogram body stub\n-   --    * task type declaration, task body, and task body stub\n+   --        --> full view\n+   --    * entry spec and entry body\n+   --        --> entry spec\n+   --    * formal parameter on spec and body\n+   --        --> formal parameter on spec\n+   --    * package spec, body, and body stub\n+   --        --> package spec\n+   --    * protected type, protected body, and protected body stub\n+   --        --> protected type (full view if private)\n+   --    * subprogram spec, body, and body stub\n+   --        --> subprogram spec\n+   --    * task type, task body, and task body stub\n+   --        --> task type (full view if private)\n+   --    * private or incomplete view and full view of a type\n+   --        --> full view\n    --  In other cases, return the defining entity for N.\n \n    function Unique_Entity (E : Entity_Id) return Entity_Id;"}]}