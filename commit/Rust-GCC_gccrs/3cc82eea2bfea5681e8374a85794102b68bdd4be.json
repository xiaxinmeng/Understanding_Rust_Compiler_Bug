{"sha": "3cc82eea2bfea5681e8374a85794102b68bdd4be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NjODJlZWEyYmZlYTU2ODFlODM3NGE4NTc5NDEwMmI2OGJkZDRiZQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@ispras.ru", "date": "2006-03-28T17:33:41Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2006-03-28T17:33:41Z"}, "message": "2006-03-28  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n\n\tRevert my 2006-03-27 patches.\n\nFrom-SVN: r112456", "tree": {"sha": "a1d6247fcff33a23c3d09e0f5da5f44d6739551d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1d6247fcff33a23c3d09e0f5da5f44d6739551d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cc82eea2bfea5681e8374a85794102b68bdd4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc82eea2bfea5681e8374a85794102b68bdd4be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc82eea2bfea5681e8374a85794102b68bdd4be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc82eea2bfea5681e8374a85794102b68bdd4be/comments", "author": null, "committer": null, "parents": [{"sha": "e8206491f015e63752c9db55d1b887a69d45b6af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8206491f015e63752c9db55d1b887a69d45b6af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8206491f015e63752c9db55d1b887a69d45b6af"}], "stats": {"total": 87, "additions": 34, "deletions": 53}, "files": [{"sha": "12d43d44e02590d6e9b5eb13d2095fba6826af14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -1,3 +1,7 @@\n+2006-03-28  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n+\n+\tRevert my 2006-03-27 patches.\n+\n 2006-03-28  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold_unary) <NOP_EXPR>: Fold (T1)(~(T2)X) as"}, {"sha": "56abcda64e2539a21064294ef541e00c8028c379", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -1,7 +1,6 @@\n /* Instruction scheduling pass.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n \n@@ -3056,6 +3055,16 @@ try_ready (rtx next)\n \t      || !RECOVERY_BLOCK (next)\n \t      || RECOVERY_BLOCK (next) == EXIT_BLOCK_PTR);\n   \n+  if (*ts == 0 && ORIG_PAT (next) && !RECOVERY_BLOCK (next))\n+    /* We should change pattern of every previously speculative \n+       instruction - and we determine if NEXT was speculative by using\n+       ORIG_PAT field.  Except one case - simple checks have ORIG_PAT\n+       pat too, hence we also check for the RECOVERY_BLOCK.  */\n+    {\n+      change_pattern (next, ORIG_PAT (next));\n+      ORIG_PAT (next) = 0;\n+    }\n+\n   if (*ts & HARD_DEP)\n     {\n       /* We can't assert (QUEUE_INDEX (next) == QUEUE_NOWHERE) here because\n@@ -3066,15 +3075,6 @@ try_ready (rtx next)\n       change_queue_index (next, QUEUE_NOWHERE);\n       return -1;\n     }\n-  else if (!(*ts & BEGIN_SPEC) && ORIG_PAT (next) && !RECOVERY_BLOCK (next))\n-    /* We should change pattern of every previously speculative \n-       instruction - and we determine if NEXT was speculative by using\n-       ORIG_PAT field.  Except one case - simple checks have ORIG_PAT\n-       pat too, hence we also check for the RECOVERY_BLOCK.  */\n-    {\n-      change_pattern (next, ORIG_PAT (next));\n-      ORIG_PAT (next) = 0;\n-    }\n \n   if (sched_verbose >= 2)\n     {\t      \n@@ -3312,30 +3312,8 @@ process_insn_depend_be_in_spec (rtx link, rtx twin, ds_t fs)\n \n       ds = DEP_STATUS (link);\n \n-      if (/* If we want to create speculative dep.  */\n-\t  fs\n-\t  /* And we can do that because this is a true dep.  */\n-\t  && (ds & DEP_TYPES) == DEP_TRUE)\n-\t{\n-\t  gcc_assert (!(ds & BE_IN_SPEC));\n-\n-\t  if (/* If this dep can be overcomed with 'begin speculation'.  */\n-\t      ds & BEGIN_SPEC)\n-\t    /* Then we have a choice: keep the dep 'begin speculative'\n-\t       or transform it into 'be in speculative'.  */\n-\t    {\n-\t      if (/* In try_ready we assert that if insn once became ready\n-\t\t     it can be removed from the ready (or queue) list only\n-\t\t     due to backend decision.  Hence we can't let the\n-\t\t     probability of the speculative dep to decrease.  */\n-\t\t  dep_weak (ds) <= dep_weak (fs))\n-\t\t/* Transform it to be in speculative.  */\n-\t\tds = (ds & ~BEGIN_SPEC) | fs;\n-\t    }\n-\t  else\n-\t    /* Mark the dep as 'be in speculative'.  */\n-\t    ds |= fs;\n-\t}\n+      if (fs && (ds & DEP_TYPES) == DEP_TRUE)\n+\tds = (ds & ~BEGIN_SPEC) | fs;\n \n       add_back_forw_dep (consumer, twin, REG_NOTE_KIND (link), ds);\n     }"}, {"sha": "907ccf5ef2b44b949350cdd6b42c9cad774b8f9a", "filename": "gcc/lists.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Flists.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Flists.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flists.c?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -1,6 +1,6 @@\n /* List management for the GCC expander.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   1999, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -159,7 +159,7 @@ alloc_EXPR_LIST (int kind, rtx val, rtx next)\n    node available, we'll use it, otherwise a call to gen_rtx_DEPS_LIST\n    is made.  */\n rtx\n-alloc_DEPS_LIST (rtx val, rtx next, int ds)\n+alloc_DEPS_LIST (rtx val, rtx next, HOST_WIDE_INT ds)\n {\n   rtx r;\n \n@@ -169,7 +169,7 @@ alloc_DEPS_LIST (rtx val, rtx next, int ds)\n       unused_deps_list = XEXP (r, 1);\n       XEXP (r, 0) = val;\n       XEXP (r, 1) = next;\n-      XINT (r, 2) = ds;\n+      XWINT (r, 2) = ds;\n       PUT_REG_NOTE_KIND (r, VOIDmode);\n \n       gcc_assert (GET_CODE (r) == DEPS_LIST);\n@@ -257,7 +257,7 @@ copy_DEPS_LIST_list (rtx list)\n \n   while (list)\n     {\n-      *resp = alloc_DEPS_LIST (XEXP (list, 0), 0, XINT (list, 2));\n+      *resp = alloc_DEPS_LIST (XEXP (list, 0), 0, XWINT (list, 2));\n       PUT_REG_NOTE_KIND (*resp, REG_NOTE_KIND (list));\n       resp = &XEXP (*resp, 1);\n       list = XEXP (list, 1);"}, {"sha": "078f4af67ac262fbf2a83f50950c0d35ac5ef0bb", "filename": "gcc/rtl.def", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -2,7 +2,7 @@\n    Register Transfer Expressions (rtx's) that make up the\n    Register Transfer Language (rtl) used in the Back End of the GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1994, 1995, 1997, 1998, 1999, 2000, 2004,\n-   2005, 2006\n+   2005\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -95,8 +95,9 @@ DEF_RTL_EXPR(INSN_LIST, \"insn_list\", \"ue\", RTX_EXTRA)\n \n /* a linked list of dependencies. \n    The insns are represented in print by their uids. \n-   Operand 2 is the status of a dependence (see sched-int.h for more).  */\n-DEF_RTL_EXPR(DEPS_LIST, \"deps_list\", \"uei\", RTX_EXTRA)\n+   Operand 2 is a degree of speculativeness of the dependence.\n+   Operand 3 is a degree of weakness of the dependence.  */\n+DEF_RTL_EXPR(DEPS_LIST, \"deps_list\", \"uew\", RTX_EXTRA)\n \n /* SEQUENCE appears in the result of a `gen_...' function\n    for a DEFINE_EXPAND that wants to make several insns."}, {"sha": "989bea8dc55047a9830d36f1820cf545c67bbe59", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -1,7 +1,6 @@\n /* Register Transfer Language (RTL) definitions for GCC\n    Copyright (C) 1987, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -1758,7 +1757,7 @@ void free_INSN_LIST_node\t\t(rtx);\n rtx alloc_INSN_LIST\t\t\t(rtx, rtx);\n rtx alloc_EXPR_LIST\t\t\t(int, rtx, rtx);\n void free_DEPS_LIST_list (rtx *);\n-rtx alloc_DEPS_LIST (rtx, rtx, int);\n+rtx alloc_DEPS_LIST (rtx, rtx, HOST_WIDE_INT);\n void remove_free_DEPS_LIST_elem (rtx, rtx *);\n void remove_free_INSN_LIST_elem (rtx, rtx *);\n rtx remove_list_elem (rtx, rtx *);"}, {"sha": "175bd69dd5aead28c39aa73b36544d779ab7a0e3", "filename": "gcc/sched-int.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -1,7 +1,7 @@\n /* Instruction scheduling pass.  This file contains definitions used\n    internally in the scheduler.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -36,8 +36,8 @@ extern state_t curr_state;\n /* Forward declaration.  */\n struct ready_list;\n \n-/* Type to represent status of a dependence.  */\n-typedef int ds_t;\n+/* Type to represent status of a dependence.  A convinient short alias.  */\n+typedef HOST_WIDE_INT ds_t;\n \n /* Type to represent weakness of speculative dependence.  */\n typedef int dw_t;\n@@ -377,10 +377,10 @@ extern regset *glat_start, *glat_end;\n    for using to describe instruction's status.  It is set whenever instuction\n    has at least one dependence, that cannot be overcome.\n    See also: check_dep_status () in sched-deps.c .  */\n-#define DEP_STATUS(LINK) XINT (LINK, 2)\n+#define DEP_STATUS(LINK) XWINT (LINK, 2)\n \n /* We exclude sign bit.  */\n-#define BITS_PER_DEP_STATUS (HOST_BITS_PER_INT - 1)\n+#define BITS_PER_DEP_STATUS (HOST_BITS_PER_WIDE_INT - 1)\n \n /* First '4' stands for 3 dep type bits and HARD_DEP bit.\n    Second '4' stands for BEGIN_{DATA, CONTROL}, BE_IN_{DATA, CONTROL}"}, {"sha": "1b768e4f49c7c35a2df721497b5b727ac54ad580", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc82eea2bfea5681e8374a85794102b68bdd4be/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3cc82eea2bfea5681e8374a85794102b68bdd4be", "patch": "@@ -1,6 +1,5 @@\n /* Data structure definitions for a generic GCC target.\n-   Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -330,7 +329,7 @@ struct gcc_target\n        0, if current pattern satisfies the requested speculation type,\n        1, if pattern of the instruction should be changed to the newly\n        generated one.  */\n-    int (* speculate_insn) (rtx, int, rtx *);\n+    int (* speculate_insn) (rtx, HOST_WIDE_INT, rtx *);\n \n     /* The following member value is a pointer to a function called\n        by the insn scheduler.  It should return true if the check instruction"}]}