{"sha": "09a0affdb0598a54835ac4bb0dd6b54122c12916", "node_id": "C_kwDOANBUbNoAKDA5YTBhZmZkYjA1OThhNTQ4MzVhYzRiYjBkZDZiNTQxMjJjMTI5MTY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-11T14:06:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-10-11T14:20:19Z"}, "message": "middle-end/101480 - overloaded global new/delete\n\nThe following fixes the issue of ignoring side-effects on memory\nfrom overloaded global new/delete operators by not marking them\nas effectively 'const' apart from other explicitely specified\nside-effects.\n\nThis will cause\n\nFAIL: g++.dg/warn/Warray-bounds-16.C  -std=gnu++1? (test for excess errors)\n\nbecause we now no longer statically see the initialization loop\nnever executes because the call to operator new can now clobber 'a.m'.\nThis seems to be an issue with the warning code and/or ranger so\nI'm leaving this FAIL to be addressed as followup.\n\n2021-10-11  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/101480\n\t* gimple.c (gimple_call_fnspec): Do not mark operator new/delete\n\tas const.\n\n\t* g++.dg/torture/pr10148.C: New testcase.", "tree": {"sha": "d2ee960aa768dae7aebeea68d2dac57dd1880141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ee960aa768dae7aebeea68d2dac57dd1880141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09a0affdb0598a54835ac4bb0dd6b54122c12916", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a0affdb0598a54835ac4bb0dd6b54122c12916", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09a0affdb0598a54835ac4bb0dd6b54122c12916", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09a0affdb0598a54835ac4bb0dd6b54122c12916/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a40970cf043553f0ca09a3b7be1c5a949623d915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40970cf043553f0ca09a3b7be1c5a949623d915", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40970cf043553f0ca09a3b7be1c5a949623d915"}], "stats": {"total": 56, "additions": 54, "deletions": 2}, "files": [{"sha": "cc7a88e822b1f859512c6da86896d73d5a94bd39", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a0affdb0598a54835ac4bb0dd6b54122c12916/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a0affdb0598a54835ac4bb0dd6b54122c12916/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=09a0affdb0598a54835ac4bb0dd6b54122c12916", "patch": "@@ -1549,12 +1549,12 @@ gimple_call_fnspec (const gcall *stmt)\n       && DECL_IS_OPERATOR_DELETE_P (fndecl)\n       && DECL_IS_REPLACEABLE_OPERATOR (fndecl)\n       && gimple_call_from_new_or_delete (stmt))\n-    return \".co \";\n+    return \". o \";\n   /* Similarly operator new can be treated as malloc.  */\n   if (fndecl\n       && DECL_IS_REPLACEABLE_OPERATOR_NEW_P (fndecl)\n       && gimple_call_from_new_or_delete (stmt))\n-    return \"mC\";\n+    return \"m \";\n   return \"\";\n }\n "}, {"sha": "ed278f9f8d85933a99f71ee372d80cf10d46de35", "filename": "gcc/testsuite/g++.dg/torture/pr10148.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09a0affdb0598a54835ac4bb0dd6b54122c12916/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr10148.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09a0affdb0598a54835ac4bb0dd6b54122c12916/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr10148.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr10148.C?ref=09a0affdb0598a54835ac4bb0dd6b54122c12916", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+\n+static bool flag = false;\n+\n+class C\n+{\n+  bool prev;\n+\n+public:\n+  C() : prev(flag)\n+  {\n+    flag = true;\n+  }\n+\n+  ~C() {\n+    flag = prev;\n+  }\n+};\n+\n+void* operator new(size_t size)\n+{\n+  assert(flag);\n+  return malloc(size);\n+}\n+\n+void operator delete(void *p)\n+{\n+  free(p);\n+}\n+\n+void g(int* p)\n+{\n+  delete p;\n+}\n+\n+void f()\n+{\n+  int* p;\n+  {\n+    C c;\n+    p = new int;\n+  }\n+  g(p);\n+}\n+\n+int main(int, char**)\n+{\n+  f();\n+}"}]}