{"sha": "ab82e126e749c99f77a0fa7230ee104fe47660d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI4MmUxMjZlNzQ5Yzk5Zjc3YTBmYTcyMzBlZTEwNGZlNDc2NjBkOQ==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2017-06-02T14:21:55Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2017-06-02T14:21:55Z"}, "message": "rs6000.c (rs6000_gimple_fold_builtin): Add handling for early expansion of vector absolute builtins.\n\n[gcc]\n\n2017-05-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling\n\tfor early expansion of vector absolute builtins.\n\n[gcc/testsuite]\n\n2017-05-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-abs-char.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-floatdouble.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-short.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-char-fwrapv.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.c: New.\n\t* gcc.target/powerpc/fold-vec-abs-short-fwrapv.c: New.\n\nFrom-SVN: r248830", "tree": {"sha": "e1f4b2806b0abd4d407a401fe795d7dfe94f6627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1f4b2806b0abd4d407a401fe795d7dfe94f6627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab82e126e749c99f77a0fa7230ee104fe47660d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab82e126e749c99f77a0fa7230ee104fe47660d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab82e126e749c99f77a0fa7230ee104fe47660d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab82e126e749c99f77a0fa7230ee104fe47660d9/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fb3a2657b2e571534871e38e5ed16395544a5f13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb3a2657b2e571534871e38e5ed16395544a5f13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb3a2657b2e571534871e38e5ed16395544a5f13"}], "stats": {"total": 202, "additions": 202, "deletions": 0}, "files": [{"sha": "7c75984ddced77dcff6923c6efed1c08bc75e8d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -1,3 +1,8 @@\n+2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_gimple_fold_builtin): Add handling\n+\tfor early expansion of vector absolute builtins.\n+\n 2017-06-02  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-slp.c (vect_detect_hybrid_slp_2): Match up"}, {"sha": "96bd6e069c3f18dee04581ad773bdf2e600950a2", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -17329,6 +17329,24 @@ rs6000_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \tgsi_replace (gsi, g, true);\n \treturn true;\n       }\n+    /* flavors of vec_abs.  */\n+    case ALTIVEC_BUILTIN_ABS_V16QI:\n+    case ALTIVEC_BUILTIN_ABS_V8HI:\n+    case ALTIVEC_BUILTIN_ABS_V4SI:\n+    case ALTIVEC_BUILTIN_ABS_V4SF:\n+    case P8V_BUILTIN_ABS_V2DI:\n+    case VSX_BUILTIN_XVABSDP:\n+      {\n+\targ0 = gimple_call_arg (stmt, 0);\n+\tif (INTEGRAL_TYPE_P (TREE_TYPE (TREE_TYPE (arg0)))\n+\t    && !TYPE_OVERFLOW_WRAPS (TREE_TYPE (TREE_TYPE (arg0))))\n+\t      return false;\n+\tlhs = gimple_call_lhs (stmt);\n+\tgimple *g = gimple_build_assign (lhs, ABS_EXPR, arg0);\n+\tgimple_set_location (g, gimple_location (stmt));\n+\tgsi_replace (gsi, g, true);\n+\treturn true;\n+      }\n     default:\n       break;\n     }"}, {"sha": "611a851a99b02ef0ced7c0cd6f451044b1b2918f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -1,3 +1,15 @@\n+2017-06-02  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-abs-char.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-floatdouble.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-short.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-char-fwrapv.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-int-fwrapv.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.c: New.\n+\t* gcc.target/powerpc/fold-vec-abs-short-fwrapv.c: New.\n+\n 2017-06-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* g++.dg/pr45330.C: Adjust.  Check breadth-firstness."}, {"sha": "739f06e0fe540c1d2d186769b3f73a82dc31ebee", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-char-fwrapv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-char-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-char-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-char-fwrapv.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -fwrapv\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+test2 (vector signed char x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsububm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsb\" 1 } } */"}, {"sha": "239c91934644405109a70808d43ee59371fd7076", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-char.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-char.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with char\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed char\n+test2 (vector signed char x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsububm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsb\" 1 } } */"}, {"sha": "1a08618b367483d304416e572963540e4de0cf9e", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-floatdouble.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-floatdouble.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,23 @@\n+/* Verify that overloaded built-ins for vec_abs with float and\n+   double inputs for VSX produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector float\n+test1 (vector float x)\n+{\n+  return vec_abs (x);\n+}\n+\n+vector double\n+test2 (vector double x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"xvabssp\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xvabsdp\" 1 } } */"}, {"sha": "34dead4e916f3e7e3661d8edc2c446a03324bc36", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int-fwrapv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int-fwrapv.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -fwrapv\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */"}, {"sha": "77d9ca5c26b1bd49675056a013929d7fe4e77d0b", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-int.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-int.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with int\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed int\n+test1 (vector signed int x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuwm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsw\" 1 } } */"}, {"sha": "934618b91b2481d5cd0cab6dbc27cfd5fb120423", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong-fwrapv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong-fwrapv.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2 -fwrapv\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */"}, {"sha": "5b59d19346def79baa7ea7d64c4bba8a5bebb2ad", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-longlong.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-longlong.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with long long\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed long long\n+test3 (vector signed long long x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubudm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsd\" 1 } } */"}, {"sha": "2562179af72ecebefbe46dacd4a05be74fd8488b", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-short-fwrapv.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-short-fwrapv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-short-fwrapv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-short-fwrapv.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -fwrapv\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test3 (vector signed short x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuhm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsh\" 1 } } */"}, {"sha": "d3120002b3320c2e9927856285ce76bc31f24ca4", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-abs-short.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab82e126e749c99f77a0fa7230ee104fe47660d9/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-abs-short.c?ref=ab82e126e749c99f77a0fa7230ee104fe47660d9", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that overloaded built-ins for vec_abs with short\n+   inputs produce the right results.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2\" } */\n+\n+#include <altivec.h>\n+\n+vector signed short\n+test3 (vector signed short x)\n+{\n+  return vec_abs (x);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vspltisw|vxor\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubuhm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmaxsh\" 1 } } */"}]}