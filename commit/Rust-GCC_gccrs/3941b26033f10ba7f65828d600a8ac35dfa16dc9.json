{"sha": "3941b26033f10ba7f65828d600a8ac35dfa16dc9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0MWIyNjAzM2YxMGJhN2Y2NTgyOGQ2MDBhOGFjMzVkZmExNmRjOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-03-27T18:07:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-03-27T18:07:25Z"}, "message": "re PR libstdc++/60612 (Throwing exception, catching and rethrowing (std::exception_ptr) in destructor leads to segfault)\n\n\tPR libstdc++/60612\n\t* libsupc++/eh_ptr.cc: Assert __cxa_dependent_exception layout is\n\tcompatible with __cxa_exception.\n\t* libsupc++/unwind-cxx.h (__cxa_dependent_exception): Add padding.\n\tFix typos in comments.\n\t* testsuite/18_support/exception_ptr/60612-terminate.cc: New.\n\t* testsuite/18_support/exception_ptr/60612-unexpected.cc: New.\n\nFrom-SVN: r208871", "tree": {"sha": "c69ac28addcd7b8735559fb38475984fa75e7e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c69ac28addcd7b8735559fb38475984fa75e7e49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3941b26033f10ba7f65828d600a8ac35dfa16dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3941b26033f10ba7f65828d600a8ac35dfa16dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3941b26033f10ba7f65828d600a8ac35dfa16dc9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3941b26033f10ba7f65828d600a8ac35dfa16dc9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "324dc401fe695443909a8dcdf7e25fa9b5661fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/324dc401fe695443909a8dcdf7e25fa9b5661fb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/324dc401fe695443909a8dcdf7e25fa9b5661fb4"}], "stats": {"total": 127, "additions": 125, "deletions": 2}, "files": [{"sha": "9a360993b06bc5f5bb926a17196254bb2a2f2698", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3941b26033f10ba7f65828d600a8ac35dfa16dc9", "patch": "@@ -1,3 +1,13 @@\n+2014-03-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60612\n+\t* libsupc++/eh_ptr.cc: Assert __cxa_dependent_exception layout is\n+\tcompatible with __cxa_exception.\n+\t* libsupc++/unwind-cxx.h (__cxa_dependent_exception): Add padding.\n+\tFix typos in comments.\n+\t* testsuite/18_support/exception_ptr/60612-terminate.cc: New.\n+\t* testsuite/18_support/exception_ptr/60612-unexpected.cc: New.\n+\n 2014-03-25  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/60658"}, {"sha": "8c25a81ae4a97a24028bf5c08d0be192721844d6", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=3941b26033f10ba7f65828d600a8ac35dfa16dc9", "patch": "@@ -35,6 +35,32 @@\n \n using namespace __cxxabiv1;\n \n+// Verify assumptions about member layout in exception types\n+namespace\n+{\n+template<typename Ex>\n+  constexpr std::size_t unwindhdr()\n+  { return offsetof(Ex, unwindHeader); }\n+\n+template<typename Ex>\n+  constexpr std::size_t termHandler()\n+  { return unwindhdr<Ex>() - offsetof(Ex, terminateHandler); }\n+\n+static_assert( termHandler<__cxa_exception>()\n+\t       == termHandler<__cxa_dependent_exception>(),\n+\t       \"__cxa_dependent_exception::termHandler layout is correct\" );\n+\n+#ifndef __ARM_EABI_UNWINDER__\n+template<typename Ex>\n+  constexpr std::ptrdiff_t adjptr()\n+  { return unwindhdr<Ex>() - offsetof(Ex, adjustedPtr); }\n+\n+static_assert( adjptr<__cxa_exception>()\n+\t       == adjptr<__cxa_dependent_exception>(),\n+\t       \"__cxa_dependent_exception::adjustedPtr layout is correct\" );\n+#endif\n+}\n+\n std::__exception_ptr::exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT\n : _M_exception_object(0) { }\n "}, {"sha": "f57c53637cf3495e9e5b161c6fc2acaa03e97557", "filename": "libstdc++-v3/libsupc++/unwind-cxx.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Funwind-cxx.h?ref=3941b26033f10ba7f65828d600a8ac35dfa16dc9", "patch": "@@ -81,7 +81,7 @@ struct __cxa_exception\n   // Stack of exceptions in cleanups.\n   __cxa_exception* nextPropagatingException;\n \n-  // The nuber of active cleanup handlers for this exception.\n+  // The number of active cleanup handlers for this exception.\n   int propagationCount;\n #else\n   // Cache parsed handler data from the personality routine Phase 1\n@@ -114,6 +114,11 @@ struct __cxa_dependent_exception\n   // The primary exception this thing depends on.\n   void *primaryException;\n \n+  // Unused member to get similar layout to __cxa_exception, otherwise the\n+  // alignment requirements of _Unwind_Exception would require padding bytes\n+  // before the unwindHeader member.\n+  void (_GLIBCXX_CDTOR_CALLABI *__padding)(void *);\n+\n   // The C++ standard has entertaining rules wrt calling set_terminate\n   // and set_unexpected in the middle of the exception cleanup process.\n   std::unexpected_handler unexpectedHandler;\n@@ -130,7 +135,7 @@ struct __cxa_dependent_exception\n   // Stack of exceptions in cleanups.\n   __cxa_exception* nextPropagatingException;\n \n-  // The nuber of active cleanup handlers for this exception.\n+  // The number of active cleanup handlers for this exception.\n   int propagationCount;\n #else\n   // Cache parsed handler data from the personality routine Phase 1"}, {"sha": "ec5940d6b2173ca9de9d6ee689a1493f66f3a193", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/60612-terminate.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-terminate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-terminate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-terminate.cc?ref=3941b26033f10ba7f65828d600a8ac35dfa16dc9", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/60612\n+\n+#include <exception>\n+#include <stdlib.h>\n+\n+void terminate() { _Exit(0); }\n+\n+void f() noexcept\n+{\n+  try {\n+    throw 1;\n+  } catch (...) {\n+    std::set_terminate(terminate);\n+    std::rethrow_exception(std::current_exception());\n+  }\n+}\n+\n+int main()\n+{\n+  f();\n+}"}, {"sha": "3f7e2cf379de218835aed081282be2a03ae29a46", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/60612-unexpected.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-unexpected.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3941b26033f10ba7f65828d600a8ac35dfa16dc9/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-unexpected.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2F60612-unexpected.cc?ref=3941b26033f10ba7f65828d600a8ac35dfa16dc9", "patch": "@@ -0,0 +1,41 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// PR libstdc++/60612\n+\n+#include <exception>\n+#include <stdlib.h>\n+\n+void unexpected() { _Exit(0); }\n+\n+void f() throw()\n+{\n+  try {\n+    throw 1;\n+  } catch (...) {\n+    std::set_unexpected(unexpected);\n+    std::rethrow_exception(std::current_exception());\n+  }\n+}\n+\n+int main()\n+{\n+  f();\n+}"}]}