{"sha": "fabe0ede9db9fa95832b2329d3d6156711905e20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFiZTBlZGU5ZGI5ZmE5NTgzMmIyMzI5ZDNkNjE1NjcxMTkwNWUyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-04T09:31:44Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-04T09:31:44Z"}, "message": "gimple-fold: Fix ICE in maybe_canonicalize_mem_ref_addr on debug stmt [PR96354]\n\nIn debug stmts, we are less strict about what is and what is not accepted\nthere, so this patch just punts on optimization of a debug stmt rather than\nICEing.\n\n2020-08-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR debug/96354\n\t* gimple-fold.c (maybe_canonicalize_mem_ref_addr): Add IS_DEBUG\n\targument.  Return false instead of gcc_unreachable if it is true and\n\tget_addr_base_and_unit_offset returns NULL.\n\t(fold_stmt_1) <case GIMPLE_DEBUG>: Adjust caller.\n\n\t* g++.dg/opt/pr96354.C: New test.", "tree": {"sha": "b59578cbcce2710686dd48ab104a570cd247d2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b59578cbcce2710686dd48ab104a570cd247d2f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fabe0ede9db9fa95832b2329d3d6156711905e20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabe0ede9db9fa95832b2329d3d6156711905e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabe0ede9db9fa95832b2329d3d6156711905e20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabe0ede9db9fa95832b2329d3d6156711905e20/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79d9445d69a20a0e0361fb47584bbb8f5c6e84b"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "436881728887bc4dc30556cdd1ecae4d19f5ccaf", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabe0ede9db9fa95832b2329d3d6156711905e20/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabe0ede9db9fa95832b2329d3d6156711905e20/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=fabe0ede9db9fa95832b2329d3d6156711905e20", "patch": "@@ -4875,7 +4875,7 @@ replace_stmt_with_simplification (gimple_stmt_iterator *gsi,\n /* Canonicalize MEM_REFs invariant address operand after propagation.  */\n \n static bool\n-maybe_canonicalize_mem_ref_addr (tree *t)\n+maybe_canonicalize_mem_ref_addr (tree *t, bool is_debug = false)\n {\n   bool res = false;\n   tree *orig_t = t;\n@@ -4939,7 +4939,11 @@ maybe_canonicalize_mem_ref_addr (tree *t)\n \t  base = get_addr_base_and_unit_offset (TREE_OPERAND (addr, 0),\n \t\t\t\t\t\t&coffset);\n \t  if (!base)\n-\t    gcc_unreachable ();\n+\t    {\n+\t      if (is_debug)\n+\t\treturn false;\n+\t      gcc_unreachable ();\n+\t    }\n \n \t  TREE_OPERAND (*t, 0) = build_fold_addr_expr (base);\n \t  TREE_OPERAND (*t, 1) = int_const_binop (PLUS_EXPR,\n@@ -5119,7 +5123,7 @@ fold_stmt_1 (gimple_stmt_iterator *gsi, bool inplace, tree (*valueize) (tree))\n \t  if (*val\n \t      && (REFERENCE_CLASS_P (*val)\n \t\t  || TREE_CODE (*val) == ADDR_EXPR)\n-\t      && maybe_canonicalize_mem_ref_addr (val))\n+\t      && maybe_canonicalize_mem_ref_addr (val, true))\n \t    changed = true;\n \t}\n       break;"}, {"sha": "601ce2a94443178d438947c10ea16040e13e503d", "filename": "gcc/testsuite/g++.dg/opt/pr96354.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fabe0ede9db9fa95832b2329d3d6156711905e20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96354.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fabe0ede9db9fa95832b2329d3d6156711905e20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96354.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr96354.C?ref=fabe0ede9db9fa95832b2329d3d6156711905e20", "patch": "@@ -0,0 +1,24 @@\n+// PR debug/96354\n+// { dg-do compile }\n+// { dg-options \"-O2 -g -fopenmp-simd\" }\n+\n+template <int N> struct A { typedef double T[N]; };\n+template <int N> struct B { typename A<N>::T b; double *baz () { return b; } };\n+template <int N> struct C { B<N> d; C (); };\n+template <int N> C<N>::C () { double c = *d.baz (); }\n+template <int N> void operator- (C<N>, const C<N> &);\n+template <int> struct D {};\n+template <int N, int M> C<N> foo (D<N>, C<M>) { C<N> t; return t; }\n+int e;\n+struct E { D<3> d; void bar (); };\n+\n+void\n+E::bar ()\n+{\n+#pragma omp simd\n+  for (int i = 0; i < e; i++)\n+    {\n+      C<3> f, g;\n+      g - foo (d, f);\n+    }\n+}"}]}