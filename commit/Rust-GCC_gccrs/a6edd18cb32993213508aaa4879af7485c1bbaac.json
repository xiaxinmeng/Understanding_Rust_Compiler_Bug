{"sha": "a6edd18cb32993213508aaa4879af7485c1bbaac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlZGQxOGNiMzI5OTMyMTM1MDhhYWE0ODc5YWY3NDg1YzFiYmFhYw==", "commit": {"author": {"name": "Barnaby Wilks", "email": "barnaby.wilks@arm.com", "date": "2019-09-09T12:05:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-09T12:05:36Z"}, "message": "match.pd: Add flag_unsafe_math_optimizations check before deciding on the widest type in...\n\n2019-09-09  Barnaby Wilks  <barnaby.wilks@arm.com>\n\n\t* match.pd: Add flag_unsafe_math_optimizations check\n\tbefore deciding on the widest type in a binary math operation.\n\n\t* gcc.dg/fold-binary-math-casts.c: New test.\n\nFrom-SVN: r275518", "tree": {"sha": "55532c779ab56965c8989e0f6e4c2c47b0fba1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55532c779ab56965c8989e0f6e4c2c47b0fba1b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6edd18cb32993213508aaa4879af7485c1bbaac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6edd18cb32993213508aaa4879af7485c1bbaac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6edd18cb32993213508aaa4879af7485c1bbaac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6edd18cb32993213508aaa4879af7485c1bbaac/comments", "author": null, "committer": null, "parents": [{"sha": "f48ef52e40171a47221401a0f7b4e8648b6c541f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48ef52e40171a47221401a0f7b4e8648b6c541f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48ef52e40171a47221401a0f7b4e8648b6c541f"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "b58b92ad114524f61f71be10032c4bbd2fce03a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6edd18cb32993213508aaa4879af7485c1bbaac", "patch": "@@ -1,3 +1,8 @@\n+2019-09-09  Barnaby Wilks  <barnaby.wilks@arm.com>\n+\n+\t* match.pd: Add flag_unsafe_math_optimizations check\n+\tbefore deciding on the widest type in a binary math operation.\n+\n 2019-09-09  Martin Liska  <mliska@suse.cz>\n \n \t* config/i386/i386.opt: Update comment of removed"}, {"sha": "5b2d95dfa9d8feef7e7248c0364909fc061da3ab", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=a6edd18cb32993213508aaa4879af7485c1bbaac", "patch": "@@ -5040,10 +5040,18 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t      && newtype == type\n \t      && types_match (newtype, type))\n \t    (op (convert:newtype @1) (convert:newtype @2))\n-\t    (with { if (TYPE_PRECISION (ty1) > TYPE_PRECISION (newtype))\n+\t    (with\n+\t      {\n+\t\tif (!flag_unsafe_math_optimizations)\n+\t\t  {\n+\t\t    if (TYPE_PRECISION (ty1) > TYPE_PRECISION (newtype))\n \t\t      newtype = ty1;\n+\n \t\t    if (TYPE_PRECISION (ty2) > TYPE_PRECISION (newtype))\n-\t\t      newtype = ty2; }\n+\t\t      newtype = ty2;\n+\t\t  }\n+\t      }\n+\n \t       /* Sometimes this transformation is safe (cannot\n \t\t  change results through affecting double rounding\n \t\t  cases) and sometimes it is not.  If NEWTYPE is"}, {"sha": "6129f911f31e8e180988a01ee9e799829d2e920e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6edd18cb32993213508aaa4879af7485c1bbaac", "patch": "@@ -1,3 +1,7 @@\n+2019-09-09  Barnaby Wilks  <barnaby.wilks@arm.com>\n+\n+\t* gcc.dg/fold-binary-math-casts.c: New test.\n+\n 2019-09-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87853"}, {"sha": "53c247fa14360c9e5719b432aa213f899caa2d25", "filename": "gcc/testsuite/gcc.dg/fold-binary-math-casts.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-binary-math-casts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6edd18cb32993213508aaa4879af7485c1bbaac/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-binary-math-casts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-binary-math-casts.c?ref=a6edd18cb32993213508aaa4879af7485c1bbaac", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -fdump-tree-optimized\" } */\n+\n+#include <math.h>\n+\n+float\n+f (float x, float y)\n+{\n+  double z = 1.0 / x;\n+  return z * y;\n+}\n+\n+float\n+g (float x, float y)\n+{\n+  double a = 1.0 / x;\n+  double b = 1.0 / y;\n+  long double k = x*x*x*x*x*x;\n+\n+  return a + b - k;\n+}\n+\n+float\n+h (float x)\n+{\n+  double a = x * 2.0;\n+  double b = a / 3.5f;\n+  return a + b;\n+}\n+\n+float\n+i (float y, float z)\n+{\n+  return pow (y, 2.0) / (double) (y + z);\n+}\n+\n+float\n+j (float x, float y)\n+{\n+  double t = 4.0 * x;\n+  double z = t + y;\n+  return z;\n+}\n+\n+float\n+k (float a)\n+{\n+  return 1.0 / sqrtf (a);\n+}\n+\n+float\n+l (float a)\n+{\n+  return (double) a * (a / 2.0);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\(double\\\\)\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\(float\\\\)\" \"optimized\" } } */"}]}