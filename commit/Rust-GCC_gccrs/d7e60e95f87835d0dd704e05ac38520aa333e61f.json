{"sha": "d7e60e95f87835d0dd704e05ac38520aa333e61f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdlNjBlOTVmODc4MzVkMGRkNzA0ZTA1YWMzODUyMGFhMzMzZTYxZg==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2002-03-26T21:27:12Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2002-03-26T21:27:12Z"}, "message": "linux.h (MD_FALLBACK_FRAME_STATE_FOR): Restore more of the signal context.\n\n\t* config/ia64/linux.h (MD_FALLBACK_FRAME_STATE_FOR):\n\tRestore more of the signal context.  Set no_reg_stack_frame.\n\t* config/ia64/unwind-ia64.c (unw_state_record):\n\tAdd no_reg_stack_frame, comments.\n\t(uw_frame_state_for): Initialize when field to UNW_WHEN_NEVER.\n\t(uw_update_context): Adjust bsp when unwinding from leaf,\n\tbut not signal frame.\n\nFrom-SVN: r51407", "tree": {"sha": "01f993857ea63fb867e361ce496881729f4c71fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f993857ea63fb867e361ce496881729f4c71fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7e60e95f87835d0dd704e05ac38520aa333e61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e60e95f87835d0dd704e05ac38520aa333e61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7e60e95f87835d0dd704e05ac38520aa333e61f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7e60e95f87835d0dd704e05ac38520aa333e61f/comments", "author": null, "committer": null, "parents": [{"sha": "ef83161cd8c6e5cb95bb621d1ed2b3831f2648be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef83161cd8c6e5cb95bb621d1ed2b3831f2648be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef83161cd8c6e5cb95bb621d1ed2b3831f2648be"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "df46d034965e51596c971501feaa03d4ec804264", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e60e95f87835d0dd704e05ac38520aa333e61f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e60e95f87835d0dd704e05ac38520aa333e61f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7e60e95f87835d0dd704e05ac38520aa333e61f", "patch": "@@ -1,3 +1,12 @@\n+2002-03-26  Hans Boehm <Hans_Boehm@hp.com>\n+\t* config/ia64/linux.h (MD_FALLBACK_FRAME_STATE_FOR):\n+\tRestore more of the signal context.  Set no_reg_stack_frame.\n+\t* config/ia64/unwind-ia64.c (unw_state_record):\n+\tAdd no_reg_stack_frame, comments.\n+\t(uw_frame_state_for): Initialize when field to UNW_WHEN_NEVER.\n+\t(uw_update_context): Adjust bsp when unwinding from leaf,\n+\tbut not signal frame.\n+\n 2002-03-26  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/aix51.h (WCHAR_TYPE): Define."}, {"sha": "ac77af2e01bac07bf1d11ce30ff780b551b3fcd9", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e60e95f87835d0dd704e05ac38520aa333e61f/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e60e95f87835d0dd704e05ac38520aa333e61f/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=d7e60e95f87835d0dd704e05ac38520aa333e61f", "patch": "@@ -98,10 +98,16 @@\n       (CONTEXT)->pfs_loc = &(sc_->sc_ar_pfs);\t\t\t\t\\\n       (CONTEXT)->lc_loc = &(sc_->sc_ar_lc);\t\t\t\t\\\n       (CONTEXT)->unat_loc = &(sc_->sc_ar_unat);\t\t\t\t\\\n+      (CONTEXT)->br_loc[0] = &(sc_->sc_br[0]);\t\t\t\t\\\n+      (CONTEXT)->bsp = sc_->sc_ar_bsp;\t\t\t\t\t\\\n       (CONTEXT)->pr = sc_->sc_pr;\t\t\t\t\t\\\n       (CONTEXT)->psp = sc_->sc_gr[12];\t\t\t\t\t\\\n+      (CONTEXT)->gp = sc_->sc_gr[1];\t\t\t\t\t\\\n+      /* Signal frame doesn't have an associated reg. stack frame \t\\\n+         other than what we adjust for below.\t  */\t\t\t\\\n+      (FS) -> no_reg_stack_frame = 1;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      /* Don't touch the branch registers.  The kernel doesn't\t\t\\\n+      /* Don't touch the branch registers o.t. b0.  The kernel doesn't\t\\\n \t pass the preserved branch registers in the sigcontext but\t\\\n \t leaves them intact, so there's no need to do anything\t\t\\\n \t with them here.  */\t\t\t\t\t\t\\"}, {"sha": "52db9ac6aea966953081ed2266726039e9b05b51", "filename": "gcc/config/ia64/unwind-ia64.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7e60e95f87835d0dd704e05ac38520aa333e61f/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7e60e95f87835d0dd704e05ac38520aa333e61f/gcc%2Fconfig%2Fia64%2Funwind-ia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Funwind-ia64.c?ref=d7e60e95f87835d0dd704e05ac38520aa333e61f", "patch": "@@ -138,7 +138,7 @@ typedef struct unw_state_record\n   unsigned int done : 1;\t\t/* are we done scanning descriptors? */\n   unsigned int any_spills : 1;\t\t/* got any register spills? */\n   unsigned int in_body : 1;\t/* are we inside a body? */\n-\n+  unsigned int no_reg_stack_frame : 1;\t/* Don't adjust bsp for i&l regs */\n   unsigned char *imask;\t\t/* imask of of spill_mask record or NULL */\n   unsigned long pr_val;\t\t/* predicate values */\n   unsigned long pr_mask;\t/* predicate mask */\n@@ -192,9 +192,12 @@ struct _Unwind_Context\n   void *lsda;\t\t\t/* language specific data area */\n \n   /* Preserved state.  */\n-  unsigned long *bsp_loc;\t/* previous bsp save location */\n+  unsigned long *bsp_loc;\t/* previous bsp save location\n+  \t\t\t\t   Appears to be write-only?\t*/\n   unsigned long *bspstore_loc;\n-  unsigned long *pfs_loc;\n+  unsigned long *pfs_loc;\t/* Save location for pfs in current\n+  \t\t\t\t   (corr. to sp) frame.  Target\n+  \t\t\t\t   contains cfm for caller.\t*/\n   unsigned long *pri_unat_loc;\n   unsigned long *unat_loc;\n   unsigned long *lc_loc;\n@@ -1510,8 +1513,11 @@ uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   unsigned long *unw, header, length;\n   unsigned char *insn, *insn_end;\n   unsigned long segment_base;\n+  struct unw_reg_info *r;\n \n   memset (fs, 0, sizeof (*fs));\n+  for (r = fs->curr.reg; r < fs->curr.reg + UNW_NUM_REGS; ++r)\n+    r->when = UNW_WHEN_NEVER;\n   context->lsda = 0;\n \n   ent = _Unwind_FindTableEntry ((void *) context->rp,\n@@ -1769,7 +1775,10 @@ uw_update_context (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n \n   /* Unwind BSP for the local registers allocated this frame.  */\n   /* ??? What to do with stored BSP or BSPSTORE registers.  */\n-  if (fs->when_target > fs->curr.reg[UNW_REG_PFS].when)\n+  /* We assert that we are either at a call site, or we have\n+     just unwound through a signal frame.  In either case\n+     pfs_loc is valid.\t*/\n+  if (!(fs -> no_reg_stack_frame))\n     {\n       unsigned long pfs = *context->pfs_loc;\n       unsigned long sol = (pfs >> 7) & 0x7f;"}]}