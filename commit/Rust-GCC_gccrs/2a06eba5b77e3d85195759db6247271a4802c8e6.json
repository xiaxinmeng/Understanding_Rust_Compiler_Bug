{"sha": "2a06eba5b77e3d85195759db6247271a4802c8e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwNmViYTViNzdlM2Q4NTE5NTc1OWRiNjI0NzI3MWE0ODAyYzhlNg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2019-01-28T13:14:37Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2019-01-28T13:14:37Z"}, "message": "c-warn.c (check_address_or_pointer_of_packed_member): Handle the case when rhs is of array type correctly.\n\n2019-01-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-warn.c (check_address_or_pointer_of_packed_member): Handle the case\n        when rhs is of array type correctly.  Fix handling of nested structures.\n        Fix handling of indirect_ref together with nop_expr and/or addr_expr.\n        (check_and_warn_address_or_pointer_of_packed_member): Fix handling of\n        type casts within nested compound expressions.\n\ntestsuite:\n2019-01-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        * c-c++-common/Waddress-of-packed-member-1.c: Extended test case.\n        * c-c++-common/Waddress-of-packed-member-2.c: New test case.\n\nFrom-SVN: r268337", "tree": {"sha": "d24e7597ebf8116f073230e2b3637991f496139a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d24e7597ebf8116f073230e2b3637991f496139a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a06eba5b77e3d85195759db6247271a4802c8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a06eba5b77e3d85195759db6247271a4802c8e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a06eba5b77e3d85195759db6247271a4802c8e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a06eba5b77e3d85195759db6247271a4802c8e6/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ebfd62be840165392d2cbdbc98f0f971cd91300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ebfd62be840165392d2cbdbc98f0f971cd91300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ebfd62be840165392d2cbdbc98f0f971cd91300"}], "stats": {"total": 126, "additions": 117, "deletions": 9}, "files": [{"sha": "f955449ec1c9b95293479a04209c9300365fcc3b", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2a06eba5b77e3d85195759db6247271a4802c8e6", "patch": "@@ -1,3 +1,11 @@\n+2019-01-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-warn.c (check_address_or_pointer_of_packed_member): Handle the case\n+\twhen rhs is of array type correctly.  Fix handling of nested structures.\n+\tFix handling of indirect_ref together with nop_expr and/or addr_expr.\n+\t(check_and_warn_address_or_pointer_of_packed_member): Fix handling of\n+\ttype casts within nested compound expressions.\n+\n 2019-01-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/88968"}, {"sha": "e2f3449e69420364361766d524f9030dbf70ba82", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=2a06eba5b77e3d85195759db6247271a4802c8e6", "patch": "@@ -2725,14 +2725,19 @@ static tree\n check_address_or_pointer_of_packed_member (tree type, tree rhs)\n {\n   bool rvalue = true;\n+  bool indirect = false;\n \n   if (INDIRECT_REF_P (rhs))\n-    rhs = TREE_OPERAND (rhs, 0);\n+    {\n+      rhs = TREE_OPERAND (rhs, 0);\n+      STRIP_NOPS (rhs);\n+      indirect = true;\n+    }\n \n   if (TREE_CODE (rhs) == ADDR_EXPR)\n     {\n       rhs = TREE_OPERAND (rhs, 0);\n-      rvalue = false;\n+      rvalue = indirect;\n     }\n \n   if (!POINTER_TYPE_P (type))\n@@ -2796,6 +2801,10 @@ check_address_or_pointer_of_packed_member (tree type, tree rhs)\n \t  if (context)\n \t    break;\n \t}\n+      if (TREE_CODE (TREE_TYPE (rhs)) == ARRAY_TYPE)\n+\trvalue = false;\n+      if (rvalue)\n+\treturn NULL_TREE;\n       rhs = TREE_OPERAND (rhs, 0);\n     }\n \n@@ -2811,14 +2820,18 @@ check_address_or_pointer_of_packed_member (tree type, tree rhs)\n static void\n check_and_warn_address_or_pointer_of_packed_member (tree type, tree rhs)\n {\n-  bool nop_p;\n-\n-  while (TREE_CODE (rhs) == COMPOUND_EXPR)\n-    rhs = TREE_OPERAND (rhs, 1);\n+  bool nop_p = false;\n+  tree orig_rhs;\n \n-  tree orig_rhs = rhs;\n-  STRIP_NOPS (rhs);\n-  nop_p = orig_rhs != rhs;\n+  do\n+    {\n+      while (TREE_CODE (rhs) == COMPOUND_EXPR)\n+\trhs = TREE_OPERAND (rhs, 1);\n+      orig_rhs = rhs;\n+      STRIP_NOPS (rhs);\n+      nop_p |= orig_rhs != rhs;\n+    }\n+  while (orig_rhs != rhs);\n \n   if (TREE_CODE (rhs) == COND_EXPR)\n     {"}, {"sha": "ab61b302a6dfaf9c39be242f9d3cac39e2b9b347", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a06eba5b77e3d85195759db6247271a4802c8e6", "patch": "@@ -1,3 +1,8 @@\n+2019-01-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* c-c++-common/Waddress-of-packed-member-1.c: Extended test case.\n+\t* c-c++-common/Waddress-of-packed-member-2.c: New test case.\n+\n 2019-01-28  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.dg/Wattribute-alias.c: Add test for #pragma GCC diagnostic ignored"}, {"sha": "afad603dfa249bdd9fadbd51dcd2558119e23415", "filename": "gcc/testsuite/c-c++-common/Waddress-of-packed-member-1.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-1.c?ref=2a06eba5b77e3d85195759db6247271a4802c8e6", "patch": "@@ -6,6 +6,8 @@ struct t {\n   int b;\n   int *c;\n   int d[10];\n+  int *e[1];\n+  _Complex float f;\n } __attribute__((packed));\n \n struct t t0;\n@@ -17,6 +19,8 @@ struct t *bar();\n struct t (*baz())[10];\n struct t (*bazz())[10][10];\n int *i1;\n+int **i2;\n+float f0, *f1;\n __UINTPTR_TYPE__ u1;\n __UINTPTR_TYPE__ baa();\n \n@@ -40,6 +44,14 @@ void foo (void)\n   i1 = t10[0].c;               /* { dg-bogus \"may result in an unaligned pointer value\" } */\n   u1 = (__UINTPTR_TYPE__) &t0; /* { dg-bogus \"may result in an unaligned pointer value\" } */\n   u1 = (__UINTPTR_TYPE__) t1;  /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = t10[0].e[0];            /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = *&t0.c;                 /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = *&*&t0.c;               /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  f0 = __real__ t0.f;          /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  f0 = __imag__ t0.f;          /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  f0 = *&__real__ t0.f;        /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  f0 = *&__imag__ t0.f;        /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i1 = (&t0.c, (int*) 0);      /* { dg-bogus \"may result in an unaligned pointer value\" } */\n   t2 = (struct t**) t10;     /* { dg-warning \"may result in an unaligned pointer value\" } */\n   t2 = (struct t**) t100;    /* { dg-warning \"may result in an unaligned pointer value\" } */\n   t2 = (struct t**) t1;      /* { dg-warning \"may result in an unaligned pointer value\" } */\n@@ -52,4 +64,16 @@ void foo (void)\n   i1 = t0.d;                 /* { dg-warning \"may result in an unaligned pointer value\" } */\n   i1 = t1->d;                /* { dg-warning \"may result in an unaligned pointer value\" } */\n   i1 = t10[0].d;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = (int*) &t10[0].e[0];  /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = (int*) t10[0].e;      /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i2 = &t10[0].e[0];         /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i2 = t10[0].e;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i2 = &*&t0.c;              /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i2 = &*&*&t0.c;            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  f1 = &__real__ t0.f;       /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  f1 = &__imag__ t0.f;       /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = (0, (int*) &t0.c);    /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = (int*) (0, &t0.c);    /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = (0, (int*)(0, &t0.c));/* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i1 = (int*)(0, 1, (void*)(2, 3, (int*)(4, 5, &t0.c)));/* { dg-warning \"may result in an unaligned pointer value\" } */\n }"}, {"sha": "65ec5140c9c3ec1f493b46bf1258b5eb6b91c23e", "filename": "gcc/testsuite/c-c++-common/Waddress-of-packed-member-2.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a06eba5b77e3d85195759db6247271a4802c8e6/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-of-packed-member-2.c?ref=2a06eba5b77e3d85195759db6247271a4802c8e6", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Waddress-of-packed-member\" } */\n+\n+struct r {\n+  int a[10];\n+  int b[10][10];\n+  int ****i4;\n+};\n+\n+struct s {\n+  char c;\n+  struct r p;\n+} __attribute__((packed));\n+\n+struct t {\n+  char c;\n+  struct r p __attribute__((packed));\n+  struct r u;\n+};\n+\n+struct s s0;\n+struct t t0;\n+int *i0;\n+\n+void foo (void)\n+{\n+  i0 = s0.p.a;               /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = t0.p.a;               /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = s0.p.b[0];            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = t0.p.b[0];            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &s0.p.a[0];           /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &t0.p.a[0];           /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &s0.p.b[0][0];        /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &t0.p.b[0][0];        /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = *s0.p.b;              /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = *t0.p.b;              /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &**s0.p.b;            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &**t0.p.b;            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = **&s0.p.b;            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = **&t0.p.b;            /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &*s0.p.a;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = &*t0.p.a;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = *&s0.p.a;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = *&t0.p.a;             /* { dg-warning \"may result in an unaligned pointer value\" } */\n+  i0 = t0.u.a;                 /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = t0.u.b[0];              /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = &t0.u.a[0];             /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = &t0.u.b[0][0];          /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = *t0.u.b;                /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = &*t0.u.a;               /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = &**t0.u.b;              /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = ***s0.p.i4;             /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = ***t0.p.i4;             /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = ****&s0.p.i4;           /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = ****&t0.p.i4;           /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = &****s0.p.i4;           /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+  i0 = &****t0.p.i4;           /* { dg-bogus \"may result in an unaligned pointer value\" } */\n+}"}]}