{"sha": "2ab1fc7a322e2582772f0e4ed916508c890175e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFiMWZjN2EzMjJlMjU4Mjc3MmYwZTRlZDkxNjUwOGM4OTAxNzVlMw==", "commit": {"author": {"name": "Nikhil Benesch", "email": "nikhil.benesch@gmail.com", "date": "2020-10-10T00:06:36Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-10-21T23:57:59Z"}, "message": "syscall: import upstream code for BSD sockets and sysctls\n\nImport some missing upstream code for BSD sockets and sysctls and\nadapt it for gccgo.\n\nUpdates golang/go#38538.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/261137", "tree": {"sha": "a3c3c4cef165b2ec33f3bd8b5df5d4849fd3316a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3c3c4cef165b2ec33f3bd8b5df5d4849fd3316a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ab1fc7a322e2582772f0e4ed916508c890175e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab1fc7a322e2582772f0e4ed916508c890175e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab1fc7a322e2582772f0e4ed916508c890175e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab1fc7a322e2582772f0e4ed916508c890175e3/comments", "author": {"login": "benesch", "id": 882976, "node_id": "MDQ6VXNlcjg4Mjk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/882976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/benesch", "html_url": "https://github.com/benesch", "followers_url": "https://api.github.com/users/benesch/followers", "following_url": "https://api.github.com/users/benesch/following{/other_user}", "gists_url": "https://api.github.com/users/benesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/benesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/benesch/subscriptions", "organizations_url": "https://api.github.com/users/benesch/orgs", "repos_url": "https://api.github.com/users/benesch/repos", "events_url": "https://api.github.com/users/benesch/events{/privacy}", "received_events_url": "https://api.github.com/users/benesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fd5876793ddf882994acafc9c5b28e3be8897bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fd5876793ddf882994acafc9c5b28e3be8897bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fd5876793ddf882994acafc9c5b28e3be8897bd"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "aedaf4664d554972b372b202249a062be4a6cdd5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab1fc7a322e2582772f0e4ed916508c890175e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab1fc7a322e2582772f0e4ed916508c890175e3/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=2ab1fc7a322e2582772f0e4ed916508c890175e3", "patch": "@@ -1,4 +1,4 @@\n-b2be94556bbc98f565fc277e30a038c742bf28a4\n+64c25b2365f7125a32b3146618b627f26a78c1fc\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "0c32594783c2b2e589dd55a77b766a2ba0aad0f8", "filename": "libgo/go/syscall/route_bsd.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab1fc7a322e2582772f0e4ed916508c890175e3/libgo%2Fgo%2Fsyscall%2Froute_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab1fc7a322e2582772f0e4ed916508c890175e3/libgo%2Fgo%2Fsyscall%2Froute_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Froute_bsd.go?ref=2ab1fc7a322e2582772f0e4ed916508c890175e3", "patch": "@@ -18,7 +18,7 @@ var (\n \n // Round the length of a raw sockaddr up to align it properly.\n func rsaAlignOf(salen int) int {\n-\tsalign := sizeofPtr\n+\tsalign := int(sizeofPtr)\n \tif darwin64Bit {\n \t\t// Darwin kernels require 32-bit aligned access to\n \t\t// routing facilities."}, {"sha": "b230a3212e629b5deff2727052e7c10e55bc92f7", "filename": "libgo/go/syscall/socket_bsd.go", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab1fc7a322e2582772f0e4ed916508c890175e3/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab1fc7a322e2582772f0e4ed916508c890175e3/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsocket_bsd.go?ref=2ab1fc7a322e2582772f0e4ed916508c890175e3", "patch": "@@ -13,6 +13,7 @@ import \"unsafe\"\n const SizeofSockaddrInet4 = 16\n const SizeofSockaddrInet6 = 28\n const SizeofSockaddrUnix = 110\n+const SizeofSockaddrDatalink = 20\n \n type RawSockaddrInet4 struct {\n \tLen    uint8\n@@ -76,6 +77,46 @@ func (sa *RawSockaddrUnix) adjustAbstract(sl Socklen_t) Socklen_t {\n \treturn sl\n }\n \n+type SockaddrDatalink struct {\n+\tLen    uint8\n+\tFamily uint8\n+\tIndex  uint16\n+\tType   uint8\n+\tNlen   uint8\n+\tAlen   uint8\n+\tSlen   uint8\n+\tData   [12]int8\n+\traw    RawSockaddrDatalink\n+}\n+\n+func (sa *SockaddrDatalink) sockaddr() (*RawSockaddrAny, Socklen_t, error) {\n+\tif sa.Index == 0 {\n+\t\treturn nil, 0, EINVAL\n+\t}\n+\tsa.raw.Len = sa.Len\n+\tsa.raw.Family = AF_LINK\n+\tsa.raw.Index = sa.Index\n+\tsa.raw.Type = sa.Type\n+\tsa.raw.Nlen = sa.Nlen\n+\tsa.raw.Alen = sa.Alen\n+\tsa.raw.Slen = sa.Slen\n+\tfor i := 0; i < len(sa.raw.Data); i++ {\n+\t\tsa.raw.Data[i] = sa.Data[i]\n+\t}\n+\treturn (*RawSockaddrAny)(unsafe.Pointer(&sa.raw)), SizeofSockaddrDatalink, nil\n+}\n+\n+type RawSockaddrDatalink struct {\n+\tLen    uint8\n+\tFamily uint8\n+\tIndex  uint16\n+\tType   uint8\n+\tNlen   uint8\n+\tAlen   uint8\n+\tSlen   uint8\n+\tData   [12]int8\n+}\n+\n type RawSockaddr struct {\n \tLen    uint8\n \tFamily uint8"}, {"sha": "bbc6799e3e6bb4f2705f9a3cff248920cf0b0bb2", "filename": "libgo/go/syscall/syscall_netbsd.go", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ab1fc7a322e2582772f0e4ed916508c890175e3/libgo%2Fgo%2Fsyscall%2Fsyscall_netbsd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ab1fc7a322e2582772f0e4ed916508c890175e3/libgo%2Fgo%2Fsyscall%2Fsyscall_netbsd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_netbsd.go?ref=2ab1fc7a322e2582772f0e4ed916508c890175e3", "patch": "@@ -17,3 +17,64 @@ func direntReclen(buf []byte) (uint64, bool) {\n func direntNamlen(buf []byte) (uint64, bool) {\n \treturn readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))\n }\n+\n+func sysctlNodes(mib []_C_int) (nodes []Sysctlnode, err error) {\n+\tvar olen uintptr\n+\n+\t// Get a list of all sysctl nodes below the given MIB by performing\n+\t// a sysctl for the given MIB with CTL_QUERY appended.\n+\tmib = append(mib, CTL_QUERY)\n+\tqnode := Sysctlnode{Flags: SYSCTL_VERS_1}\n+\tqp := (*byte)(unsafe.Pointer(&qnode))\n+\tsz := unsafe.Sizeof(qnode)\n+\tif err = sysctl(mib, nil, &olen, qp, sz); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\t// Now that we know the size, get the actual nodes.\n+\tnodes = make([]Sysctlnode, olen/sz)\n+\tnp := (*byte)(unsafe.Pointer(&nodes[0]))\n+\tif err = sysctl(mib, np, &olen, qp, sz); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn nodes, nil\n+}\n+\n+func nametomib(name string) (mib []_C_int, err error) {\n+\t// Split name into components.\n+\tvar parts []string\n+\tlast := 0\n+\tfor i := 0; i < len(name); i++ {\n+\t\tif name[i] == '.' {\n+\t\t\tparts = append(parts, name[last:i])\n+\t\t\tlast = i + 1\n+\t\t}\n+\t}\n+\tparts = append(parts, name[last:])\n+\n+\t// Discover the nodes and construct the MIB OID.\n+\tfor partno, part := range parts {\n+\t\tnodes, err := sysctlNodes(mib)\n+\t\tif err != nil {\n+\t\t\treturn nil, err\n+\t\t}\n+\t\tfor _, node := range nodes {\n+\t\t\tn := make([]byte, 0)\n+\t\t\tfor i := range node.Name {\n+\t\t\t\tif node.Name[i] != 0 {\n+\t\t\t\t\tn = append(n, byte(node.Name[i]))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif string(n) == part {\n+\t\t\t\tmib = append(mib, _C_int(node.Num))\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\tif len(mib) != partno+1 {\n+\t\t\treturn nil, EINVAL\n+\t\t}\n+\t}\n+\n+\treturn mib, nil\n+}"}]}