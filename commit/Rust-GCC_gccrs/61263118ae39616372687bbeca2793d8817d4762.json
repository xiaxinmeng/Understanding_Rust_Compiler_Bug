{"sha": "61263118ae39616372687bbeca2793d8817d4762", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEyNjMxMThhZTM5NjE2MzcyNjg3YmJlY2EyNzkzZDg4MTdkNDc2Mg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-07-17T10:37:48Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-07-17T10:37:48Z"}, "message": "[AArch64] Handle fcvta[su] and frint in RTX cost function.\n\n\t* config/aarch64/aarch64.c (aarch64_frint_unspec_p): New function.\n\t(aarch64_rtx_costs): Handle FIX, UNSIGNED_FIX, UNSPEC.\n\nFrom-SVN: r212753", "tree": {"sha": "a11c795e6fb0d1725bfe6995f6303f2d10ce8f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11c795e6fb0d1725bfe6995f6303f2d10ce8f81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61263118ae39616372687bbeca2793d8817d4762", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61263118ae39616372687bbeca2793d8817d4762", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61263118ae39616372687bbeca2793d8817d4762", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61263118ae39616372687bbeca2793d8817d4762/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec454483617259df71121e809472f7caeb13b34a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec454483617259df71121e809472f7caeb13b34a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec454483617259df71121e809472f7caeb13b34a"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "335dfc13b04ca9db29d750b1e305bd932ec003d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61263118ae39616372687bbeca2793d8817d4762/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61263118ae39616372687bbeca2793d8817d4762/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61263118ae39616372687bbeca2793d8817d4762", "patch": "@@ -1,3 +1,8 @@\n+2014-07-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_frint_unspec_p): New function.\n+\t(aarch64_rtx_costs): Handle FIX, UNSIGNED_FIX, UNSPEC.\n+\n 2014-07-17  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/arm_neon.h (vmlal_high_lane_s16): Fix type."}, {"sha": "5f8db1dc01ede6c45d4867c704fe06cb7b7c78b4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 61, "deletions": 7, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61263118ae39616372687bbeca2793d8817d4762/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61263118ae39616372687bbeca2793d8817d4762/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=61263118ae39616372687bbeca2793d8817d4762", "patch": "@@ -4838,6 +4838,25 @@ aarch64_rtx_arith_op_extract_p (rtx x, enum machine_mode mode)\n   return false;\n }\n \n+static bool\n+aarch64_frint_unspec_p (unsigned int u)\n+{\n+  switch (u)\n+    {\n+      case UNSPEC_FRINTZ:\n+      case UNSPEC_FRINTP:\n+      case UNSPEC_FRINTM:\n+      case UNSPEC_FRINTA:\n+      case UNSPEC_FRINTN:\n+      case UNSPEC_FRINTX:\n+      case UNSPEC_FRINTI:\n+        return true;\n+\n+      default:\n+        return false;\n+    }\n+}\n+\n /* Calculate the cost of calculating (if_then_else (OP0) (OP1) (OP2)),\n    storing it in *COST.  Result is true if the total cost of the operation\n    has now been calculated.  */\n@@ -5018,7 +5037,7 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \tdefault:\n \t  /* We can't make sense of this, assume default cost.  */\n           *cost = COSTS_N_INSNS (1);\n-\t  break;\n+\t  return false;\n \t}\n       return false;\n \n@@ -5716,6 +5735,29 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t*cost += extra_cost->fp[mode == DFmode].narrow;\n       return false;\n \n+    case FIX:\n+    case UNSIGNED_FIX:\n+      x = XEXP (x, 0);\n+      /* Strip the rounding part.  They will all be implemented\n+         by the fcvt* family of instructions anyway.  */\n+      if (GET_CODE (x) == UNSPEC)\n+        {\n+          unsigned int uns_code = XINT (x, 1);\n+\n+          if (uns_code == UNSPEC_FRINTA\n+              || uns_code == UNSPEC_FRINTM\n+              || uns_code == UNSPEC_FRINTN\n+              || uns_code == UNSPEC_FRINTP\n+              || uns_code == UNSPEC_FRINTZ)\n+            x = XVECEXP (x, 0, 0);\n+        }\n+\n+      if (speed)\n+        *cost += extra_cost->fp[GET_MODE (x) == DFmode].toint;\n+\n+      *cost += rtx_cost (x, (enum rtx_code) code, 0, speed);\n+      return true;\n+\n     case ABS:\n       if (GET_MODE_CLASS (mode) == MODE_FLOAT)\n \t{\n@@ -5745,6 +5787,17 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \t}\n       return false;\n \n+    case UNSPEC:\n+      /* The floating point round to integer frint* instructions.  */\n+      if (aarch64_frint_unspec_p (XINT (x, 1)))\n+        {\n+          if (speed)\n+            *cost += extra_cost->fp[mode == DFmode].roundint;\n+\n+          return false;\n+        }\n+      break;\n+\n     case TRUNCATE:\n \n       /* Decompose <su>muldi3_highpart.  */\n@@ -5779,13 +5832,14 @@ aarch64_rtx_costs (rtx x, int code, int outer ATTRIBUTE_UNUSED,\n \n       /* Fall through.  */\n     default:\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file,\n-\t\t \"\\nFailed to cost RTX.  Assuming default cost.\\n\");\n-\n-      return true;\n+      break;\n     }\n-  return false;\n+\n+  if (dump_file && (dump_flags & TDF_DETAILS))\n+    fprintf (dump_file,\n+      \"\\nFailed to cost RTX.  Assuming default cost.\\n\");\n+\n+  return true;\n }\n \n /* Wrapper around aarch64_rtx_costs, dumps the partial, or total cost"}]}