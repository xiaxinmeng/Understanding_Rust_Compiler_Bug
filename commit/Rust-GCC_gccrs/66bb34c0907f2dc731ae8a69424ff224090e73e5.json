{"sha": "66bb34c0907f2dc731ae8a69424ff224090e73e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZiYjM0YzA5MDdmMmRjNzMxYWU4YTY5NDI0ZmYyMjQwOTBlNzNlNQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-08T12:25:35Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-08T12:25:35Z"}, "message": "Remove SF_SIZE etc. target macros.\n\ngcc:\n\t* config/i386/cygming.h (TF_SIZE): Remove.\n\t* config/i386/darwin.h (TF_SIZE): Remove.\n\t* config/i386/dragonfly.h (TF_SIZE): Remove.\n\t* config/i386/freebsd.h (TF_SIZE): Remove.\n\t* config/i386/gnu-user-common.h (TF_SIZE): Remove.\n\t* config/i386/openbsdelf.h (TF_SIZE): Remove.\n\t* config/i386/sol2.h (TF_SIZE): Remove.\n\t* config/ia64/hpux.h (XF_SIZE, TF_SIZE): Remove.\n\t* config/ia64/linux.h (TF_SIZE): Remove.\n\t* doc/tm.texi.in (SF_SIZE, DF_SIZE, XF_SIZE, TF_SIZE): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (SF_SIZE, DF_SIZE, XF_SIZE, TF_SIZE): Poison.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (c_cpp_builtins): Define macros for mantissa\n\tdigits of floating-point modes if -fbuilding-libgcc.\n\nlibgcc:\n\t* libgcc2.c (SF_SIZE): Change all uses to __LIBGCC_SF_MANT_DIG__.\n\t(DF_SIZE): Change all uses to __LIBGCC_DF_MANT_DIG__.\n\t(XF_SIZE): Change all uses to __LIBGCC_XF_MANT_DIG__.\n\t(TF_SIZE): Change all uses to __LIBGCC_TF_MANT_DIG__.\n\t* libgcc2.h (SF_SIZE): Change to __LIBGCC_SF_MANT_DIG__.  Give\n\terror if not defined and LIBGCC2_HAS_SF_MODE is defined.\n\t(DF_SIZE): Change to __LIBGCC_DF_MANT_DIG__.  Give error if not\n\tdefined and LIBGCC2_HAS_DF_MODE is defined.\n\t(XF_SIZE): Change to __LIBGCC_XF_MANT_DIG__.  Give error if not\n\tdefined and LIBGCC2_HAS_XF_MODE is defined.\n\t(TF_SIZE): Change to __LIBGCC_TF_MANT_DIG__.  Give error if not\n\tdefined and LIBGCC2_HAS_TF_MODE is defined.\n\nFrom-SVN: r215014", "tree": {"sha": "e1ade5d91e8aa1cba8b8bc27ce1506044e9c2dcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ade5d91e8aa1cba8b8bc27ce1506044e9c2dcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66bb34c0907f2dc731ae8a69424ff224090e73e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66bb34c0907f2dc731ae8a69424ff224090e73e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66bb34c0907f2dc731ae8a69424ff224090e73e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66bb34c0907f2dc731ae8a69424ff224090e73e5/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9686a2e668aad033ef12b48c2d1e7f1ce6796838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9686a2e668aad033ef12b48c2d1e7f1ce6796838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9686a2e668aad033ef12b48c2d1e7f1ce6796838"}], "stats": {"total": 171, "additions": 88, "deletions": 83}, "files": [{"sha": "33b106b6296684ed136aba2eeb50f7c137d047e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -1,3 +1,18 @@\n+2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/i386/cygming.h (TF_SIZE): Remove.\n+\t* config/i386/darwin.h (TF_SIZE): Remove.\n+\t* config/i386/dragonfly.h (TF_SIZE): Remove.\n+\t* config/i386/freebsd.h (TF_SIZE): Remove.\n+\t* config/i386/gnu-user-common.h (TF_SIZE): Remove.\n+\t* config/i386/openbsdelf.h (TF_SIZE): Remove.\n+\t* config/i386/sol2.h (TF_SIZE): Remove.\n+\t* config/ia64/hpux.h (XF_SIZE, TF_SIZE): Remove.\n+\t* config/ia64/linux.h (TF_SIZE): Remove.\n+\t* doc/tm.texi.in (SF_SIZE, DF_SIZE, XF_SIZE, TF_SIZE): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (SF_SIZE, DF_SIZE, XF_SIZE, TF_SIZE): Poison.\n+\n 2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* defaults.h (LARGEST_EXPONENT_IS_NORMAL, ROUND_TOWARDS_ZERO):"}, {"sha": "7768555e473cc525ac6d10c485c25ccf13d07356", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -1,3 +1,8 @@\n+2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Define macros for mantissa\n+\tdigits of floating-point modes if -fbuilding-libgcc.\n+\n 2014-09-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-cppbuiltin.c (c_cpp_builtins): Also define"}, {"sha": "411ca194adae075ea489cccf8c6afd380ca84b18", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -944,6 +944,20 @@ c_cpp_builtins (cpp_reader *pfile)\n   /* For libgcc-internal use only.  */\n   if (flag_building_libgcc)\n     {\n+      /* Properties of floating-point modes for libgcc2.c.  */\n+      for (enum machine_mode mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n+\t   mode != VOIDmode;\n+\t   mode = GET_MODE_WIDER_MODE (mode))\n+\t{\n+\t  const char *name = GET_MODE_NAME (mode);\n+\t  char *macro_name\n+\t    = (char *) alloca (strlen (name)\n+\t\t\t       + sizeof (\"__LIBGCC__MANT_DIG__\"));\n+\t  sprintf (macro_name, \"__LIBGCC_%s_MANT_DIG__\", name);\n+\t  builtin_define_with_int_value (macro_name,\n+\t\t\t\t\t REAL_MODE_FORMAT (mode)->p);\n+\t}\n+\n       /* For libgcc crtstuff.c and libgcc2.c.  */\n       builtin_define_with_int_value (\"__LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__\",\n \t\t\t\t     EH_TABLES_CAN_BE_READ_ONLY);"}, {"sha": "98d652be5ee331678e65760236836906f7634715", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -343,7 +343,6 @@ do {\t\t\t\t\t\t\\\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n \n /* Output function declarations at the end of the file.  */\n #undef TARGET_ASM_FILE_END"}, {"sha": "f6a5b6b0e97e65c4b7ecaea747ea5619603cc59c", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -157,7 +157,6 @@ extern int darwin_emit_branch_islands;\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n \n #undef TARGET_ASM_FILE_END\n #define TARGET_ASM_FILE_END darwin_file_end"}, {"sha": "ed5f508f7ed18e6450e5ef488b500f3470b88ef6", "filename": "gcc/config/i386/dragonfly.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fdragonfly.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdragonfly.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -93,7 +93,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n \n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1"}, {"sha": "25ab5468d99332e7aa54fd5b7fcbcf1e4b348a17", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -135,7 +135,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n \n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1"}, {"sha": "e01491a4737e1d7a504ecc33638214d1380b7add", "filename": "gcc/config/i386/gnu-user-common.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgnu-user-common.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -61,7 +61,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n \n #define TARGET_ASM_FILE_END file_end_indicate_exec_stack\n "}, {"sha": "06913eb2b2e155694204148653e474098d2cc751", "filename": "gcc/config/i386/openbsdelf.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fopenbsdelf.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -116,4 +116,3 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113"}, {"sha": "5c9232360d15601049cb5e01ce9fae47fd91df4e", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -241,4 +241,3 @@ along with GCC; see the file COPYING3.  If not see\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113"}, {"sha": "f19e6b38dc19cbdb2b206041be060940628e3574", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -192,12 +192,10 @@ do {\t\t\t\t\t\t\t\t\\\n /* Put all *xf routines in libgcc, regardless of long double size.  */\n #undef LIBGCC2_HAS_XF_MODE\n #define LIBGCC2_HAS_XF_MODE 1\n-#define XF_SIZE 64\n \n /* Put all *tf routines in libgcc, regardless of long double size.  */\n #undef LIBGCC2_HAS_TF_MODE\n #define LIBGCC2_HAS_TF_MODE 1\n-#define TF_SIZE 113\n \n /* HP-UX headers are C++-compatible.  */\n #define NO_IMPLICIT_EXTERN_C"}, {"sha": "61138c828f39e99601bd7a82240d94f012714f47", "filename": "gcc/config/ia64/linux.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fia64%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fconfig%2Fia64%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Flinux.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -81,7 +81,6 @@ do {\t\t\t\t\t\t\\\n #define LIBGCC2_HAS_TF_MODE 1\n #undef LIBGCC2_TF_CEXT\n #define LIBGCC2_TF_CEXT q\n-#define TF_SIZE 113\n \n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS ia64_soft_fp_init_libfuncs"}, {"sha": "53c33e50a580453ad9f54dadb6417f5f04c5a288", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -1581,20 +1581,6 @@ uses this macro should also arrange to use @file{t-gnu-prefix} in\n the libgcc @file{config.host}.\n @end defmac\n \n-@defmac SF_SIZE\n-@defmacx DF_SIZE\n-@defmacx XF_SIZE\n-@defmacx TF_SIZE\n-Define these macros to be the size in bits of the mantissa of\n-@code{SFmode}, @code{DFmode}, @code{XFmode} and @code{TFmode} values,\n-if the defaults in @file{libgcc2.h} are inappropriate.  By default,\n-@code{FLT_MANT_DIG} is used for @code{SF_SIZE}, @code{LDBL_MANT_DIG}\n-for @code{XF_SIZE} and @code{TF_SIZE}, and @code{DBL_MANT_DIG} or\n-@code{LDBL_MANT_DIG} for @code{DF_SIZE} according to whether\n-@code{DOUBLE_TYPE_SIZE} or\n-@code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is 64.\n-@end defmac\n-\n @defmac TARGET_FLT_EVAL_METHOD\n A C expression for the value for @code{FLT_EVAL_METHOD} in @file{float.h},\n assuming, if applicable, that the floating-point control word is in its"}, {"sha": "57cf92b90fe02707ebfdfaad714c91d19f769e04", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -1423,20 +1423,6 @@ uses this macro should also arrange to use @file{t-gnu-prefix} in\n the libgcc @file{config.host}.\n @end defmac\n \n-@defmac SF_SIZE\n-@defmacx DF_SIZE\n-@defmacx XF_SIZE\n-@defmacx TF_SIZE\n-Define these macros to be the size in bits of the mantissa of\n-@code{SFmode}, @code{DFmode}, @code{XFmode} and @code{TFmode} values,\n-if the defaults in @file{libgcc2.h} are inappropriate.  By default,\n-@code{FLT_MANT_DIG} is used for @code{SF_SIZE}, @code{LDBL_MANT_DIG}\n-for @code{XF_SIZE} and @code{TF_SIZE}, and @code{DBL_MANT_DIG} or\n-@code{LDBL_MANT_DIG} for @code{DF_SIZE} according to whether\n-@code{DOUBLE_TYPE_SIZE} or\n-@code{LIBGCC2_LONG_DOUBLE_TYPE_SIZE} is 64.\n-@end defmac\n-\n @defmac TARGET_FLT_EVAL_METHOD\n A C expression for the value for @code{FLT_EVAL_METHOD} in @file{float.h},\n assuming, if applicable, that the floating-point control word is in its"}, {"sha": "692e67e42154bc93ce4233a24de96cf1e5058a7c", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -935,7 +935,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tEXTRA_CONSTRAINT_STR EXTRA_MEMORY_CONSTRAINT\t\t\t   \\\n \tEXTRA_ADDRESS_CONSTRAINT CONST_DOUBLE_OK_FOR_CONSTRAINT_P\t   \\\n \tCALLER_SAVE_PROFITABLE LARGEST_EXPONENT_IS_NORMAL\t\t   \\\n-\tROUND_TOWARDS_ZERO\n+\tROUND_TOWARDS_ZERO SF_SIZE DF_SIZE XF_SIZE TF_SIZE\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "b53f2e824732d7461133f0fa35dc6c008e902458", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -1,3 +1,18 @@\n+2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* libgcc2.c (SF_SIZE): Change all uses to __LIBGCC_SF_MANT_DIG__.\n+\t(DF_SIZE): Change all uses to __LIBGCC_DF_MANT_DIG__.\n+\t(XF_SIZE): Change all uses to __LIBGCC_XF_MANT_DIG__.\n+\t(TF_SIZE): Change all uses to __LIBGCC_TF_MANT_DIG__.\n+\t* libgcc2.h (SF_SIZE): Change to __LIBGCC_SF_MANT_DIG__.  Give\n+\terror if not defined and LIBGCC2_HAS_SF_MODE is defined.\n+\t(DF_SIZE): Change to __LIBGCC_DF_MANT_DIG__.  Give error if not\n+\tdefined and LIBGCC2_HAS_DF_MODE is defined.\n+\t(XF_SIZE): Change to __LIBGCC_XF_MANT_DIG__.  Give error if not\n+\tdefined and LIBGCC2_HAS_XF_MODE is defined.\n+\t(TF_SIZE): Change to __LIBGCC_TF_MANT_DIG__.  Give error if not\n+\tdefined and LIBGCC2_HAS_TF_MODE is defined.\n+\n 2014-09-08  Joseph Myers  <joseph@codesourcery.com>\n \n \t* fp-bit.c (pack_d, unpack_d): Remove LARGEST_EXPONENT_IS_NORMAL"}, {"sha": "2800fe949e2a682bba695147d63d7ac453fa67ca", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -1506,7 +1506,7 @@ __fixsfdi (SFtype a)\n XFtype\n __floatdixf (DWtype u)\n {\n-#if W_TYPE_SIZE > XF_SIZE\n+#if W_TYPE_SIZE > __LIBGCC_XF_MANT_DIG__\n # error\n #endif\n   XFtype d = (Wtype) (u >> W_TYPE_SIZE);\n@@ -1520,7 +1520,7 @@ __floatdixf (DWtype u)\n XFtype\n __floatundixf (UDWtype u)\n {\n-#if W_TYPE_SIZE > XF_SIZE\n+#if W_TYPE_SIZE > __LIBGCC_XF_MANT_DIG__\n # error\n #endif\n   XFtype d = (UWtype) (u >> W_TYPE_SIZE);\n@@ -1534,7 +1534,7 @@ __floatundixf (UDWtype u)\n TFtype\n __floatditf (DWtype u)\n {\n-#if W_TYPE_SIZE > TF_SIZE\n+#if W_TYPE_SIZE > __LIBGCC_TF_MANT_DIG__\n # error\n #endif\n   TFtype d = (Wtype) (u >> W_TYPE_SIZE);\n@@ -1548,7 +1548,7 @@ __floatditf (DWtype u)\n TFtype\n __floatunditf (UDWtype u)\n {\n-#if W_TYPE_SIZE > TF_SIZE\n+#if W_TYPE_SIZE > __LIBGCC_TF_MANT_DIG__\n # error\n #endif\n   TFtype d = (UWtype) (u >> W_TYPE_SIZE);\n@@ -1568,11 +1568,11 @@ __floatunditf (UDWtype u)\n #if defined(L_floatdisf)\n #define FUNC __floatdisf\n #define FSTYPE SFtype\n-#define FSSIZE SF_SIZE\n+#define FSSIZE __LIBGCC_SF_MANT_DIG__\n #else\n #define FUNC __floatdidf\n #define FSTYPE DFtype\n-#define FSSIZE DF_SIZE\n+#define FSSIZE __LIBGCC_DF_MANT_DIG__\n #endif\n \n FSTYPE\n@@ -1584,18 +1584,18 @@ FUNC (DWtype u)\n   f *= Wtype_MAXp1_F;\n   f += (UWtype)u;\n   return f;\n-#elif (LIBGCC2_HAS_DF_MODE && F_MODE_OK (DF_SIZE))\t\\\n-     || (LIBGCC2_HAS_XF_MODE && F_MODE_OK (XF_SIZE))\t\\\n-     || (LIBGCC2_HAS_TF_MODE && F_MODE_OK (TF_SIZE))\n+#elif (LIBGCC2_HAS_DF_MODE && F_MODE_OK (__LIBGCC_DF_MANT_DIG__))\t\\\n+     || (LIBGCC2_HAS_XF_MODE && F_MODE_OK (__LIBGCC_XF_MANT_DIG__))\t\\\n+     || (LIBGCC2_HAS_TF_MODE && F_MODE_OK (__LIBGCC_TF_MANT_DIG__))\n \n-#if (LIBGCC2_HAS_DF_MODE && F_MODE_OK (DF_SIZE))\n-# define FSIZE DF_SIZE\n+#if (LIBGCC2_HAS_DF_MODE && F_MODE_OK (__LIBGCC_DF_MANT_DIG__))\n+# define FSIZE __LIBGCC_DF_MANT_DIG__\n # define FTYPE DFtype\n-#elif (LIBGCC2_HAS_XF_MODE && F_MODE_OK (XF_SIZE))\n-# define FSIZE XF_SIZE\n+#elif (LIBGCC2_HAS_XF_MODE && F_MODE_OK (__LIBGCC_XF_MANT_DIG__))\n+# define FSIZE __LIBGCC_XF_MANT_DIG__\n # define FTYPE XFtype\n-#elif (LIBGCC2_HAS_TF_MODE && F_MODE_OK (TF_SIZE))\n-# define FSIZE TF_SIZE\n+#elif (LIBGCC2_HAS_TF_MODE && F_MODE_OK (__LIBGCC_TF_MANT_DIG__))\n+# define FSIZE __LIBGCC_TF_MANT_DIG__\n # define FTYPE TFtype\n #else\n # error\n@@ -1684,11 +1684,11 @@ FUNC (DWtype u)\n #if defined(L_floatundisf)\n #define FUNC __floatundisf\n #define FSTYPE SFtype\n-#define FSSIZE SF_SIZE\n+#define FSSIZE __LIBGCC_SF_MANT_DIG__\n #else\n #define FUNC __floatundidf\n #define FSTYPE DFtype\n-#define FSSIZE DF_SIZE\n+#define FSSIZE __LIBGCC_DF_MANT_DIG__\n #endif\n \n FSTYPE\n@@ -1700,18 +1700,18 @@ FUNC (UDWtype u)\n   f *= Wtype_MAXp1_F;\n   f += (UWtype)u;\n   return f;\n-#elif (LIBGCC2_HAS_DF_MODE && F_MODE_OK (DF_SIZE))\t\\\n-     || (LIBGCC2_HAS_XF_MODE && F_MODE_OK (XF_SIZE))\t\\\n-     || (LIBGCC2_HAS_TF_MODE && F_MODE_OK (TF_SIZE))\n+#elif (LIBGCC2_HAS_DF_MODE && F_MODE_OK (__LIBGCC_DF_MANT_DIG__))\t\\\n+     || (LIBGCC2_HAS_XF_MODE && F_MODE_OK (__LIBGCC_XF_MANT_DIG__))\t\\\n+     || (LIBGCC2_HAS_TF_MODE && F_MODE_OK (__LIBGCC_TF_MANT_DIG__))\n \n-#if (LIBGCC2_HAS_DF_MODE && F_MODE_OK (DF_SIZE))\n-# define FSIZE DF_SIZE\n+#if (LIBGCC2_HAS_DF_MODE && F_MODE_OK (__LIBGCC_DF_MANT_DIG__))\n+# define FSIZE __LIBGCC_DF_MANT_DIG__\n # define FTYPE DFtype\n-#elif (LIBGCC2_HAS_XF_MODE && F_MODE_OK (XF_SIZE))\n-# define FSIZE XF_SIZE\n+#elif (LIBGCC2_HAS_XF_MODE && F_MODE_OK (__LIBGCC_XF_MANT_DIG__))\n+# define FSIZE __LIBGCC_XF_MANT_DIG__\n # define FTYPE XFtype\n-#elif (LIBGCC2_HAS_TF_MODE && F_MODE_OK (TF_SIZE))\n-# define FSIZE TF_SIZE\n+#elif (LIBGCC2_HAS_TF_MODE && F_MODE_OK (__LIBGCC_TF_MANT_DIG__))\n+# define FSIZE __LIBGCC_TF_MANT_DIG__\n # define FTYPE TFtype\n #else\n # error"}, {"sha": "8abd0b7f8bcd6466b65a1b510222429de0e21999", "filename": "libgcc/libgcc2.h", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66bb34c0907f2dc731ae8a69424ff224090e73e5/libgcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66bb34c0907f2dc731ae8a69424ff224090e73e5/libgcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.h?ref=66bb34c0907f2dc731ae8a69424ff224090e73e5", "patch": "@@ -59,41 +59,35 @@ extern void __eprintf (const char *, const char *, unsigned int, const char *)\n   (BITS_PER_UNIT == 8 && LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 128)\n #endif\n \n-#ifndef SF_SIZE\n+#ifndef __LIBGCC_SF_MANT_DIG__\n #if LIBGCC2_HAS_SF_MODE\n-#define SF_SIZE FLT_MANT_DIG\n+#error __LIBGCC_SF_MANT_DIG__ not defined\n #else\n-#define SF_SIZE 0\n+#define __LIBGCC_SF_MANT_DIG__ 0\n #endif\n #endif\n \n-#ifndef DF_SIZE\n+#ifndef __LIBGCC_DF_MANT_DIG__\n #if LIBGCC2_HAS_DF_MODE\n-#if __SIZEOF_DOUBLE__ * __CHAR_BIT__ == 64\n-#define DF_SIZE DBL_MANT_DIG\n-#elif LIBGCC2_LONG_DOUBLE_TYPE_SIZE == 64\n-#define DF_SIZE LDBL_MANT_DIG\n+#error __LIBGCC_DF_MANT_DIG__ not defined\n #else\n-#define DF_SIZE 0\n-#endif\n-#else\n-#define DF_SIZE 0\n+#define __LIBGCC_DF_MANT_DIG__ 0\n #endif\n #endif\n \n-#ifndef XF_SIZE\n+#ifndef __LIBGCC_XF_MANT_DIG__\n #if LIBGCC2_HAS_XF_MODE\n-#define XF_SIZE LDBL_MANT_DIG\n+#error __LIBGCC_XF_MANT_DIG__ not defined\n #else\n-#define XF_SIZE 0\n+#define __LIBGCC_XF_MANT_DIG__ 0\n #endif\n #endif\n \n-#ifndef TF_SIZE\n+#ifndef __LIBGCC_TF_MANT_DIG__\n #if LIBGCC2_HAS_TF_MODE\n-#define TF_SIZE LDBL_MANT_DIG\n+#error __LIBGCC_TF_MANT_DIG__ not defined\n #else\n-#define TF_SIZE 0\n+#define __LIBGCC_TF_MANT_DIG__ 0\n #endif\n #endif\n "}]}