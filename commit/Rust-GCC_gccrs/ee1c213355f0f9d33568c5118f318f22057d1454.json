{"sha": "ee1c213355f0f9d33568c5118f318f22057d1454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxYzIxMzM1NWYwZjlkMzM1NjhjNTExOGYzMThmMjIwNTdkMTQ1NA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2017-11-20T19:08:38Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-11-20T19:08:38Z"}, "message": "RISC-V: Implement __umulsidi3, umul_ppmm and __muluw3\n\n2017-11-20  Kito Cheng  <kito.cheng@gmail.com>\n\n        * longlong.h [__riscv] (__umulsidi3): Define.\n        [__riscv] (umul_ppmm): Likewise.\n        [__riscv] (__muluw3): Likewise.\n\nFrom-SVN: r254965", "tree": {"sha": "3bd8236b9b97b36874d35eb0831ec0e8cdf2dce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bd8236b9b97b36874d35eb0831ec0e8cdf2dce2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee1c213355f0f9d33568c5118f318f22057d1454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1c213355f0f9d33568c5118f318f22057d1454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee1c213355f0f9d33568c5118f318f22057d1454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee1c213355f0f9d33568c5118f318f22057d1454/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d68ddd2b35078ab61f164b268bac63767b2a8e6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d68ddd2b35078ab61f164b268bac63767b2a8e6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d68ddd2b35078ab61f164b268bac63767b2a8e6a"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "33b3d4cde56c5bb19cc70121d955065f6771cbca", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1c213355f0f9d33568c5118f318f22057d1454/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1c213355f0f9d33568c5118f318f22057d1454/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=ee1c213355f0f9d33568c5118f318f22057d1454", "patch": "@@ -1,3 +1,9 @@\n+2017-11-20  Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* longlong.h [__riscv] (__umulsidi3): Define.\n+\t[__riscv] (umul_ppmm): Likewise.\n+\t[__riscv] (__muluw3): Likewise.\n+\n 2017-11-10  Stephen Crane <sjc@immunant.com>\n \n \t* plugin-api.h: Add plugin API for processing plugin-added"}, {"sha": "946d5c8fc44e98a69eabea0736e9669d11a954d1", "filename": "include/longlong.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee1c213355f0f9d33568c5118f318f22057d1454/include%2Flonglong.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee1c213355f0f9d33568c5118f318f22057d1454/include%2Flonglong.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flonglong.h?ref=ee1c213355f0f9d33568c5118f318f22057d1454", "patch": "@@ -1050,6 +1050,56 @@ extern UDItype __umulsidi3 (USItype, USItype);\n   } while (0)\n #endif\n \n+#if defined(__riscv)\n+#ifdef __riscv_mul\n+#define __umulsidi3(u,v) ((UDWtype)(UWtype)(u) * (UWtype)(v))\n+#define __muluw3(a, b) ((UWtype)(a) * (UWtype)(b))\n+#else\n+#if __riscv_xlen == 32\n+  #define MULUW3 \"call __mulsi3\"\n+#elif __riscv_xlen == 64\n+  #define MULUW3 \"call __muldi3\"\n+#else\n+#error unsupport xlen\n+#endif /* __riscv_xlen */\n+/* We rely on the fact that MULUW3 doesn't clobber the t-registers.\n+   It can get better register allocation result.  */\n+#define __muluw3(a, b) \\\n+  ({ \\\n+    register UWtype __op0 asm (\"a0\") = a; \\\n+    register UWtype __op1 asm (\"a1\") = b; \\\n+    asm volatile (MULUW3 \\\n+                  : \"+r\" (__op0), \"+r\" (__op1) \\\n+                  : \\\n+                  : \"ra\", \"a2\", \"a3\"); \\\n+    __op0; \\\n+  })\n+#endif /* __riscv_mul */\n+#define umul_ppmm(w1, w0, u, v) \\\n+  do { \\\n+    UWtype __x0, __x1, __x2, __x3; \\\n+    UHWtype __ul, __vl, __uh, __vh; \\\n+ \\\n+    __ul = __ll_lowpart (u); \\\n+    __uh = __ll_highpart (u); \\\n+    __vl = __ll_lowpart (v); \\\n+    __vh = __ll_highpart (v); \\\n+ \\\n+    __x0 = __muluw3 (__ul, __vl); \\\n+    __x1 = __muluw3 (__ul, __vh); \\\n+    __x2 = __muluw3 (__uh, __vl); \\\n+    __x3 = __muluw3 (__uh, __vh); \\\n+ \\\n+    __x1 += __ll_highpart (__x0);/* this can't give carry */ \\\n+    __x1 += __x2; /* but this indeed can */ \\\n+    if (__x1 < __x2) /* did we get it? */ \\\n+      __x3 += __ll_B; /* yes, add it in the proper pos.  */ \\\n+ \\\n+    (w1) = __x3 + __ll_highpart (__x1); \\\n+    (w0) = __ll_lowpart (__x1) * __ll_B + __ll_lowpart (__x0); \\\n+  } while (0)\n+#endif /* __riscv */\n+\n #if defined(__sh__) && W_TYPE_SIZE == 32\n #ifndef __sh1__\n #define umul_ppmm(w1, w0, u, v) \\"}]}