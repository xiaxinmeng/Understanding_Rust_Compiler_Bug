{"sha": "1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZkZjc0YzdjOWNmNjM3NDUzNzgzNjY5YWUwYjVmNmZmNmFmM2IxOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2016-10-11T21:41:51Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2016-10-11T21:41:51Z"}, "message": "re PR tree-optimization/77424 (Identical statements in if-else branches)\n\n\tPR tree-optimization/77424\n\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Remove\n\tdead conditionals.  Assert that all e->aux fields are NULL.\n\nFrom-SVN: r241009", "tree": {"sha": "f2f3b88708a7e871b16a8f994536d239f88d22ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2f3b88708a7e871b16a8f994536d239f88d22ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19/comments", "author": null, "committer": null, "parents": [{"sha": "f6cf4810e942f05e2cc3afe2513001af53ffa1dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cf4810e942f05e2cc3afe2513001af53ffa1dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6cf4810e942f05e2cc3afe2513001af53ffa1dd"}], "stats": {"total": 58, "additions": 12, "deletions": 46}, "files": [{"sha": "e7b5b0bbaa8664a33413426028a0da8a936a8b6e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "patch": "@@ -1,3 +1,9 @@\n+2016-10-11  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/77424\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Remove\n+\tdead conditionals.  Assert that all e->aux fields are NULL.\n+\n 2016-10-11  David Malcolm  <dmalcolm@redhat.com>\n \n \t* print-rtl.c (print_rtx): Rename \"i\" to \"idx\".  Split out the"}, {"sha": "325cb0be8fc77cae780f0fb61c34534315357b60", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 6, "deletions": 46, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "patch": "@@ -2550,55 +2550,15 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n       retval |= thread_through_loop_header (loop, may_peel_loop_headers);\n     }\n \n-  /* Any jump threading paths that are still attached to edges at this\n-     point must be one of two cases.\n-\n-     First, we could have a jump threading path which went from outside\n-     a loop to inside a loop that was ignored because a prior jump thread\n-     across a backedge was realized (which indirectly causes the loop\n-     above to ignore the latter thread).  We can detect these because the\n-     loop structures will be different and we do not currently try to\n-     optimize this case.\n-\n-     Second, we could be threading across a backedge to a point within the\n-     same loop.  This occurrs for the FSA/FSM optimization and we would\n-     like to optimize it.  However, we have to be very careful as this\n-     may completely scramble the loop structures, with the result being\n-     irreducible loops causing us to throw away our loop structure.\n-\n-     As a compromise for the latter case, if the thread path ends in\n-     a block where the last statement is a multiway branch, then go\n-     ahead and thread it, else ignore it.  */\n+  /* All jump threading paths should have been resolved at this\n+     point.  Verify that is the case.  */\n   basic_block bb;\n-  edge e;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      /* If we do end up threading here, we can remove elements from\n-\t BB->preds.  Thus we can not use the FOR_EACH_EDGE iterator.  */\n-      for (edge_iterator ei = ei_start (bb->preds);\n-\t   (e = ei_safe_edge (ei));)\n-\tif (e->aux)\n-\t  {\n-\t    vec<jump_thread_edge *> *path = THREAD_PATH (e);\n-\n-\t    /* Case 1, threading from outside to inside the loop\n-\t       after we'd already threaded through the header.  */\n-\t    if ((*path)[0]->e->dest->loop_father\n-\t\t!= path->last ()->e->src->loop_father)\n-\t      {\n-\t\tdelete_jump_thread_path (path);\n-\t\te->aux = NULL;\n-\t\tei_next (&ei);\n-\t      }\n-\t    else\n-\t      {\n-\t\tdelete_jump_thread_path (path);\n-\t\te->aux = NULL;\n-\t\tei_next (&ei);\n-\t      }\n- \t  }\n-\telse\n-\t  ei_next (&ei);\n+      edge_iterator ei;\n+      edge e;\n+      FOR_EACH_EDGE (e, ei, bb->preds)\n+\tgcc_assert (e->aux == NULL);\n     }\n \n   statistics_counter_event (cfun, \"Jumps threaded\","}]}