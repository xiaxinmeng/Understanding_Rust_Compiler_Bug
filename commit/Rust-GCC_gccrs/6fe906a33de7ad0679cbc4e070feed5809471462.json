{"sha": "6fe906a33de7ad0679cbc4e070feed5809471462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZlOTA2YTMzZGU3YWQwNjc5Y2JjNGUwNzBmZWVkNTgwOTQ3MTQ2Mg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2017-05-03T16:48:20Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2017-05-03T16:48:20Z"}, "message": "Use call_summary in ipa-prop and ipa-cp\n\n2017-05-03  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.h (ipa_edge_args): Make a class.  Mark with for_user GTY\n\ttag.  Added a default constructor and a destructor.\n\t(ipa_edge_args_sum_t): New class;\n\t(ipa_edge_args_sum): Declare.\n\t(ipa_edge_args_vector): Remove declaration.\n\t(IPA_EDGE_REF): Use ipa_edge_args_sum.\n\t(ipa_free_edge_args_substructures): Remove declaration.\n\t(ipa_check_create_edge_args): Use ipa_edge_args_sum.\n\t(ipa_edge_args_info_available_for_edge_p): Likewise.\n\t* ipa-prop.c (ipa_edge_args_vector): Removed.\n\t(edge_removal_hook_holder): Likewise.\n\t(edge_duplication_hook_holder): Likewise.\n\t(ipa_edge_args_sum): New variable.\n\t(ipa_propagate_indirect_call_infos): Test ipa_edge_args_sum instead of\n\tipa_edge_args_vector.\n\t(ipa_free_edge_args_substructures): Likewise.\n\t(ipa_free_all_edge_args): Free ipa_edge_args_sum instead of\n\tipa_edge_args_vector.\n\t(ipa_edge_removal_hook): Turned into method\n\tipa_edge_args_sum_t::remove.\n\t(ipa_edge_duplication_hook): Turned into method\n\tipa_edge_args_sum_t::duplicate.\n\t(ipa_register_cgraph_hooks): Create ipa_edge_args_sum instead of\n\tregistering edge hooks.\n\t(ipa_unregister_cgraph_hooks): Do not unregister edge hooks.\n\t* ipa-inline-analysis.c (estimate_function_body_sizes): Test\n\tipa_edge_args_sum instead of ipa_edge_args_vector.\n\t* ipa-profile.c (ipa_profile): Likewise.\n\nFrom-SVN: r247558", "tree": {"sha": "19839085eb16d54e65060d080eded79c6f3293ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19839085eb16d54e65060d080eded79c6f3293ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fe906a33de7ad0679cbc4e070feed5809471462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe906a33de7ad0679cbc4e070feed5809471462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fe906a33de7ad0679cbc4e070feed5809471462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe906a33de7ad0679cbc4e070feed5809471462/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57e563ac847e869fbe565e48c16183511a6c5863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e563ac847e869fbe565e48c16183511a6c5863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e563ac847e869fbe565e48c16183511a6c5863"}], "stats": {"total": 156, "additions": 95, "deletions": 61}, "files": [{"sha": "95aa18845fc7c24b7a8a79525ae7e38ae72b1829", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fe906a33de7ad0679cbc4e070feed5809471462", "patch": "@@ -1,3 +1,34 @@\n+2017-05-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.h (ipa_edge_args): Make a class.  Mark with for_user GTY\n+\ttag.  Added a default constructor and a destructor.\n+\t(ipa_edge_args_sum_t): New class;\n+\t(ipa_edge_args_sum): Declare.\n+\t(ipa_edge_args_vector): Remove declaration.\n+\t(IPA_EDGE_REF): Use ipa_edge_args_sum.\n+\t(ipa_free_edge_args_substructures): Remove declaration.\n+\t(ipa_check_create_edge_args): Use ipa_edge_args_sum.\n+\t(ipa_edge_args_info_available_for_edge_p): Likewise.\n+\t* ipa-prop.c (ipa_edge_args_vector): Removed.\n+\t(edge_removal_hook_holder): Likewise.\n+\t(edge_duplication_hook_holder): Likewise.\n+\t(ipa_edge_args_sum): New variable.\n+\t(ipa_propagate_indirect_call_infos): Test ipa_edge_args_sum instead of\n+\tipa_edge_args_vector.\n+\t(ipa_free_edge_args_substructures): Likewise.\n+\t(ipa_free_all_edge_args): Free ipa_edge_args_sum instead of\n+\tipa_edge_args_vector.\n+\t(ipa_edge_removal_hook): Turned into method\n+\tipa_edge_args_sum_t::remove.\n+\t(ipa_edge_duplication_hook): Turned into method\n+\tipa_edge_args_sum_t::duplicate.\n+\t(ipa_register_cgraph_hooks): Create ipa_edge_args_sum instead of\n+\tregistering edge hooks.\n+\t(ipa_unregister_cgraph_hooks): Do not unregister edge hooks.\n+\t* ipa-inline-analysis.c (estimate_function_body_sizes): Test\n+\tipa_edge_args_sum instead of ipa_edge_args_vector.\n+\t* ipa-profile.c (ipa_profile): Likewise.\n+\n 2017-05-03  Martin Jambor  <mjambor@suse.cz>\n \n \t* symbol-summary.h (function_summary): New method exists."}, {"sha": "47d50507f94fd9ff98f2631447e37edcb8200bd6", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=6fe906a33de7ad0679cbc4e070feed5809471462", "patch": "@@ -2998,7 +2998,7 @@ estimate_function_body_sizes (struct cgraph_node *node, bool early)\n     {\n       if (!early)\n         loop_optimizer_finalize ();\n-      else if (!ipa_edge_args_vector)\n+      else if (!ipa_edge_args_sum)\n \tipa_free_all_node_params ();\n       free_dominance_info (CDI_DOMINATORS);\n     }"}, {"sha": "0bfbfa1e4478d25a5a0965d0e2bd5207648f3132", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=6fe906a33de7ad0679cbc4e070feed5809471462", "patch": "@@ -620,7 +620,7 @@ ipa_profile (void)\n \t\t\t\t \"Not speculating: target is overwritable \"\n \t\t\t\t \"and can be discarded.\\n\");\n \t\t    }\n-\t\t  else if (ipa_node_params_sum && ipa_edge_args_vector\n+\t\t  else if (ipa_node_params_sum && ipa_edge_args_sum\n \t\t\t   && (!vec_safe_is_empty\n \t\t\t       (IPA_NODE_REF (n2)->descriptors))\n \t\t\t   && ipa_get_param_count (IPA_NODE_REF (n2))"}, {"sha": "70990d6000bcd48f4bcdf30720623cd305f15647", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 21, "deletions": 49, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=6fe906a33de7ad0679cbc4e070feed5809471462", "patch": "@@ -57,8 +57,8 @@ along with GCC; see the file COPYING3.  If not see\n ipa_node_params_t *ipa_node_params_sum = NULL;\n /* Vector of IPA-CP transformation data for each clone.  */\n vec<ipcp_transformation_summary, va_gc> *ipcp_transformations;\n-/* Vector where the parameter infos are actually stored. */\n-vec<ipa_edge_args, va_gc> *ipa_edge_args_vector;\n+/* Edge summary for IPA-CP edge information.  */\n+ipa_edge_args_sum_t *ipa_edge_args_sum;\n \n /* Traits for a hash table for reusing already existing ipa_bits. */\n \n@@ -148,8 +148,6 @@ struct ipa_vr_ggc_hash_traits : public ggc_cache_remove <value_range *>\n static GTY ((cache)) hash_table<ipa_vr_ggc_hash_traits> *ipa_vr_hash_table;\n \n /* Holders of ipa cgraph hooks: */\n-static struct cgraph_edge_hook_list *edge_removal_hook_holder;\n-static struct cgraph_2edge_hook_list *edge_duplication_hook_holder;\n static struct cgraph_node_hook_list *function_insertion_hook_holder;\n \n /* Description of a reference to an IPA constant.  */\n@@ -3700,7 +3698,7 @@ ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n      (i.e. during early inlining).  */\n   if (!ipa_node_params_sum)\n     return false;\n-  gcc_assert (ipa_edge_args_vector);\n+  gcc_assert (ipa_edge_args_sum);\n \n   propagate_controlled_uses (cs);\n   changed = propagate_info_to_inlined_callees (cs, cs->callee, new_edges);\n@@ -3715,9 +3713,10 @@ ipa_propagate_indirect_call_infos (struct cgraph_edge *cs,\n void\n ipa_check_create_edge_args (void)\n {\n-  if (vec_safe_length (ipa_edge_args_vector)\n-      <= (unsigned) symtab->edges_max_uid)\n-    vec_safe_grow_cleared (ipa_edge_args_vector, symtab->edges_max_uid + 1);\n+  if (!ipa_edge_args_sum)\n+    ipa_edge_args_sum\n+      = (new (ggc_cleared_alloc <ipa_edge_args_sum_t> ())\n+\t ipa_edge_args_sum_t (symtab, true));\n   if (!ipa_bits_hash_table)\n     ipa_bits_hash_table = hash_table<ipa_bit_ggc_hash_traits>::create_ggc (37);\n   if (!ipa_vr_hash_table)\n@@ -3739,16 +3738,11 @@ ipa_free_edge_args_substructures (struct ipa_edge_args *args)\n void\n ipa_free_all_edge_args (void)\n {\n-  int i;\n-  struct ipa_edge_args *args;\n-\n-  if (!ipa_edge_args_vector)\n+  if (!ipa_edge_args_sum)\n     return;\n \n-  FOR_EACH_VEC_ELT (*ipa_edge_args_vector, i, args)\n-    ipa_free_edge_args_substructures (args);\n-\n-  vec_free (ipa_edge_args_vector);\n+  ipa_edge_args_sum->release ();\n+  ipa_edge_args_sum = NULL;\n }\n \n /* Free all ipa_node_params structures.  */\n@@ -3785,18 +3779,12 @@ ipa_set_node_agg_value_chain (struct cgraph_node *node,\n   (*ipcp_transformations)[node->uid].agg_values = aggvals;\n }\n \n-/* Hook that is called by cgraph.c when an edge is removed.  */\n+/* Hook that is called by cgraph.c when an edge is removed.  Adjust reference\n+   count data structures accordingly.  */\n \n-static void\n-ipa_edge_removal_hook (struct cgraph_edge *cs, void *data ATTRIBUTE_UNUSED)\n+void\n+ipa_edge_args_sum_t::remove (cgraph_edge *cs, ipa_edge_args *args)\n {\n-  struct ipa_edge_args *args;\n-\n-  /* During IPA-CP updating we can be called on not-yet analyzed clones.  */\n-  if (vec_safe_length (ipa_edge_args_vector) <= (unsigned)cs->uid)\n-    return;\n-\n-  args = IPA_EDGE_REF (cs);\n   if (args->jump_functions)\n     {\n       struct ipa_jump_func *jf;\n@@ -3811,24 +3799,17 @@ ipa_edge_removal_hook (struct cgraph_edge *cs, void *data ATTRIBUTE_UNUSED)\n \t    rdesc->cs = NULL;\n \t}\n     }\n-\n-  ipa_free_edge_args_substructures (IPA_EDGE_REF (cs));\n }\n \n-/* Hook that is called by cgraph.c when an edge is duplicated.  */\n+/* Method invoked when an edge is duplicated.  Copy ipa_edge_args and adjust\n+   reference count data strucutres accordingly.  */\n \n-static void\n-ipa_edge_duplication_hook (struct cgraph_edge *src, struct cgraph_edge *dst,\n-\t\t\t   void *)\n+void\n+ipa_edge_args_sum_t::duplicate (cgraph_edge *src, cgraph_edge *dst,\n+\t\t\t\tipa_edge_args *old_args, ipa_edge_args *new_args)\n {\n-  struct ipa_edge_args *old_args, *new_args;\n   unsigned int i;\n \n-  ipa_check_create_edge_args ();\n-\n-  old_args = IPA_EDGE_REF (src);\n-  new_args = IPA_EDGE_REF (dst);\n-\n   new_args->jump_functions = vec_safe_copy (old_args->jump_functions);\n   if (old_args->polymorphic_call_contexts)\n     new_args->polymorphic_call_contexts\n@@ -3989,13 +3970,8 @@ void\n ipa_register_cgraph_hooks (void)\n {\n   ipa_check_create_node_params ();\n+  ipa_check_create_edge_args ();\n \n-  if (!edge_removal_hook_holder)\n-    edge_removal_hook_holder =\n-      symtab->add_edge_removal_hook (&ipa_edge_removal_hook, NULL);\n-  if (!edge_duplication_hook_holder)\n-    edge_duplication_hook_holder =\n-      symtab->add_edge_duplication_hook (&ipa_edge_duplication_hook, NULL);\n   function_insertion_hook_holder =\n       symtab->add_cgraph_insertion_hook (&ipa_add_new_function, NULL);\n }\n@@ -4005,10 +3981,6 @@ ipa_register_cgraph_hooks (void)\n static void\n ipa_unregister_cgraph_hooks (void)\n {\n-  symtab->remove_edge_removal_hook (edge_removal_hook_holder);\n-  edge_removal_hook_holder = NULL;\n-  symtab->remove_edge_duplication_hook (edge_duplication_hook_holder);\n-  edge_duplication_hook_holder = NULL;\n   symtab->remove_cgraph_insertion_hook (function_insertion_hook_holder);\n   function_insertion_hook_holder = NULL;\n }\n@@ -5218,7 +5190,7 @@ ipa_prop_write_jump_functions (void)\n   lto_symtab_encoder_iterator lsei;\n   lto_symtab_encoder_t encoder;\n \n-  if (!ipa_node_params_sum || !ipa_edge_args_vector)\n+  if (!ipa_node_params_sum || !ipa_edge_args_sum)\n     return;\n \n   ob = create_output_block (LTO_section_jump_functions);"}, {"sha": "db8f378acc7e49a3c9b64f2baeb749811ff661dd", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fe906a33de7ad0679cbc4e070feed5809471462/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=6fe906a33de7ad0679cbc4e070feed5809471462", "patch": "@@ -559,9 +559,24 @@ void ipcp_grow_transformations_if_necessary (void);\n \n /* ipa_edge_args stores information related to a callsite and particularly its\n    arguments.  It can be accessed by the IPA_EDGE_REF macro.  */\n-struct GTY(()) ipa_edge_args\n+\n+class GTY((for_user)) ipa_edge_args\n {\n-  /* Vector of the callsite's jump function of each parameter.  */\n+ public:\n+\n+  /* Default constructor.  */\n+  ipa_edge_args () : jump_functions (NULL), polymorphic_call_contexts (NULL)\n+    {}\n+\n+  /* Destructor.  */\n+  ~ipa_edge_args ()\n+    {\n+      vec_free (jump_functions);\n+      vec_free (polymorphic_call_contexts);\n+    }\n+\n+  /* Vectors of the callsite's jump function and polymorphic context\n+     information of each parameter.  */\n   vec<ipa_jump_func, va_gc> *jump_functions;\n   vec<ipa_polymorphic_call_context, va_gc> *polymorphic_call_contexts;\n };\n@@ -611,19 +626,35 @@ class GTY((user)) ipa_node_params_t: public function_summary <ipa_node_params *>\n \t\t\t  ipa_node_params *data2);\n };\n \n+/* Summary to manange ipa_edge_args structures.  */\n+\n+class GTY((user)) ipa_edge_args_sum_t : public call_summary <ipa_edge_args *>\n+{\n+ public:\n+  ipa_edge_args_sum_t (symbol_table *table, bool ggc)\n+    : call_summary<ipa_edge_args *> (table, ggc) { }\n+\n+  /* Hook that is called by summary when an edge is duplicated.  */\n+  virtual void remove (cgraph_edge *cs, ipa_edge_args *args);\n+  /* Hook that is called by summary when an edge is duplicated.  */\n+  virtual void duplicate (cgraph_edge *src,\n+\t\t\t  cgraph_edge *dst,\n+\t\t\t  ipa_edge_args *old_args,\n+\t\t\t  ipa_edge_args *new_args);\n+};\n+\n /* Function summary where the parameter infos are actually stored. */\n extern GTY(()) ipa_node_params_t * ipa_node_params_sum;\n+/* Call summary to store information about edges such as jump functions.  */\n+extern GTY(()) ipa_edge_args_sum_t *ipa_edge_args_sum;\n \n /* Vector of IPA-CP transformation data for each clone.  */\n extern GTY(()) vec<ipcp_transformation_summary, va_gc> *ipcp_transformations;\n-/* Vector where the parameter infos are actually stored. */\n-extern GTY(()) vec<ipa_edge_args, va_gc> *ipa_edge_args_vector;\n-\n \n /* Return the associated parameter/argument info corresponding to the given\n    node/edge.  */\n #define IPA_NODE_REF(NODE) (ipa_node_params_sum->get (NODE))\n-#define IPA_EDGE_REF(EDGE) (&(*ipa_edge_args_vector)[(EDGE)->uid])\n+#define IPA_EDGE_REF(EDGE) (ipa_edge_args_sum->get (EDGE))\n /* This macro checks validity of index returned by\n    ipa_get_param_decl_index function.  */\n #define IS_VALID_JUMP_FUNC_INDEX(I) ((I) != -1)\n@@ -653,14 +684,14 @@ ipa_check_create_node_params (void)\n \t ipa_node_params_t (symtab, true));\n }\n \n-/* Returns true if the array of edge infos is large enough to accommodate an\n-   info for EDGE.  The main purpose of this function is that debug dumping\n-   function can check info availability without causing reallocations.  */\n+/* Returns true if edge summary contains a record for EDGE.  The main purpose\n+   of this function is that debug dumping function can check info availability\n+   without causing allocations.  */\n \n static inline bool\n ipa_edge_args_info_available_for_edge_p (struct cgraph_edge *edge)\n {\n-  return ((unsigned) edge->uid < vec_safe_length (ipa_edge_args_vector));\n+  return ipa_edge_args_sum->exists (edge);\n }\n \n static inline ipcp_transformation_summary *"}]}