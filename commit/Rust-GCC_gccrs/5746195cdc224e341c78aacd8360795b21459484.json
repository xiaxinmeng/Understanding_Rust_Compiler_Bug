{"sha": "5746195cdc224e341c78aacd8360795b21459484", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc0NjE5NWNkYzIyNGUzNDFjNzhhYWNkODM2MDc5NWIyMTQ1OTQ4NA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-10-11T20:59:15Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-10-11T20:59:15Z"}, "message": "fold-vec-mergeeo-floatdouble.c: New.\n\n[testsuite]\n\n2018-10-09  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\t* gcc.target/powerpc/fold-vec-mergeeo-floatdouble.c: New.\n\t* gcc.target/powerpc/fold-vec-mergeeo-int.c: New.\n\t* gcc.target/powerpc/fold-vec-mergeeo-longlong.c: New.\n\nFrom-SVN: r265062", "tree": {"sha": "d746a3f1ea1d345430d07eefa2c3ca6d4047faa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d746a3f1ea1d345430d07eefa2c3ca6d4047faa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5746195cdc224e341c78aacd8360795b21459484", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5746195cdc224e341c78aacd8360795b21459484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5746195cdc224e341c78aacd8360795b21459484", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5746195cdc224e341c78aacd8360795b21459484/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e670ecf0b4d73130d2e90af1413d4da68f7bb8c"}], "stats": {"total": 151, "additions": 151, "deletions": 0}, "files": [{"sha": "3b19068fcd59db72a094e190f794494436e9dbbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5746195cdc224e341c78aacd8360795b21459484", "patch": "@@ -1,3 +1,9 @@\n+2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/fold-vec-mergeeo-floatdouble.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergeeo-int.c: New.\n+\t* gcc.target/powerpc/fold-vec-mergeeo-longlong.c: New.\n+\n 2018-10-11  Tobias Burnus <burnus@net-b.de>\n \n \tRevert:"}, {"sha": "5fe509a38ff466a5165b5c75be5fc5aa124e6ba3", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergeeo-floatdouble.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-floatdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-floatdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-floatdouble.c?ref=5746195cdc224e341c78aacd8360795b21459484", "patch": "@@ -0,0 +1,46 @@\n+/* Verify that overloaded built-ins for vec_mergee and vec_mergeo\n+ with float and double inputs produce the right codegen.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mcpu=power8 -mpower8-vector \" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+\n+/*\n+\tvector float foo = vec_mergee (vector float, vector float);\n+\tvector float foo = vec_mergeo (vector float, vector float);\n+\tvector double foo = vec_mergee (vector double , vector double);\n+\tvector double foo = vec_mergeo (vector double , vector double);\n+*/\n+\n+vector float\n+testf_ee (vector float vf1, vector float vf2)\n+{\n+  return vec_mergee (vf1, vf2);\n+}\n+\n+vector float\n+testf_eo (vector float vf1, vector float vf2)\n+{\n+  return vec_mergeo (vf1, vf2);\n+}\n+\n+vector double\n+testd_ee ( vector double vd1, vector double vd2)\n+{\n+  return vec_mergee (vd1, vd2);\n+}\n+\n+vector double\n+testd_eo ( vector double vd1, vector double vd2)\n+{\n+  return vec_mergeo (vd1, vd2);\n+}\n+/* Doubles will generate vmrg*w instructions.  */\n+/* { dg-final { scan-assembler-times \"vmrgow\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmrgew\" 1 } } */\n+/* Floats will generate some number of xxpermdi instructions.  Ensure we get at least one. */\n+/* { dg-final { scan-assembler \"xxpermdi\" } } */\n+"}, {"sha": "bf171242964c1b6fabab4f5a82cb6fb1af447fd5", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergeeo-int.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-int.c?ref=5746195cdc224e341c78aacd8360795b21459484", "patch": "@@ -0,0 +1,48 @@\n+/* Verify that overloaded built-ins for vec_mergee and vec_mergeo\n+ with int inputs produce the right codegen.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -mcpu=power8\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+\n+vector bool int\n+testbi_ee (vector bool int v1, vector bool int v2)\n+{\n+  return vec_mergee (v1, v2);\n+}\n+\n+vector signed int\n+testsi_ee (vector signed int v1, vector signed int v2)\n+{\n+  return vec_mergee (v1, v2);\n+}\n+\n+vector unsigned int\n+testui_ee (vector unsigned int v1, vector unsigned int v2)\n+{\n+  return vec_mergee (v1, v2);\n+}\n+\n+vector bool int\n+testbi_eo (vector bool int v1, vector bool int v2)\n+{\n+  return vec_mergeo (v1, v2);\n+}\n+\n+vector signed int\n+testsi_eo (vector signed int v1, vector signed int v2)\n+{\n+  return vec_mergeo (v1, v2);\n+}\n+\n+vector unsigned int\n+testui_eo (vector unsigned int v1, vector unsigned int v2)\n+{\n+  return vec_mergeo (v1, v2);\n+}\n+/* { dg-final { scan-assembler-times \"vmrgew\" 3 } } */\n+/* { dg-final { scan-assembler-times \"vmrgow\" 3 } } */\n+"}, {"sha": "c8317084bb883c37cdfaf39644104d4fbf553a2d", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-mergeeo-longlong.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5746195cdc224e341c78aacd8360795b21459484/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-mergeeo-longlong.c?ref=5746195cdc224e341c78aacd8360795b21459484", "patch": "@@ -0,0 +1,51 @@\n+/* Verify that overloaded built-ins for vec_mergee and vec_mergeo\n+ with long long inputs produce the right codegen.  */\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mpower8-vector -mcpu=power8\" } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+\n+#include <altivec.h>\n+\n+vector bool long long\n+testbi_ee (vector bool long long v1, vector bool long long v2)\n+{\n+  return vec_mergee (v1, v2);\n+}\n+\n+vector bool long long\n+testbi_eo (vector bool long long v1, vector bool long long v2)\n+{\n+  return vec_mergeo (v1, v2);\n+}\n+\n+vector signed long long\n+testsi_ee (vector signed long long v1, vector signed long long v2)\n+{\n+  return vec_mergee (v1, v2);\n+}\n+\n+vector signed long long\n+testsi_eo (vector signed long long v1, vector signed long long v2)\n+{\n+  return vec_mergeo (v1, v2);\n+}\n+\n+vector unsigned long long\n+testui_ee (vector unsigned long long v1, vector unsigned long long v2)\n+{\n+  return vec_mergee (v1, v2);\n+}\n+\n+vector unsigned long long\n+testui_eo (vector unsigned long long v1, vector unsigned long long v2)\n+{\n+  return vec_mergeo (v1, v2);\n+}\n+\n+/* long long ...   */\n+/* vec_mergee and vec_mergeo codegen will consist of some number of\n+ xxpermdi instructions that will vary.  Ensure we get at least one. */\n+/* { dg-final { scan-assembler \"xxpermdi\" } } */\n+"}]}