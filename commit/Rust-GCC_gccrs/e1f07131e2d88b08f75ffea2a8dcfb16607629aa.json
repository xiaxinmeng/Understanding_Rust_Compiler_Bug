{"sha": "e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmMDcxMzFlMmQ4OGIwOGY3NWZmZWEyYThkY2ZiMTY2MDc2MjlhYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T16:55:01Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-11-19T17:56:30Z"}, "message": "config: Add tests for modules-desired features\n\nthis adds configure tests for features that modules can take advantage\nof -- and if they are not present has reduced or fallback functionality.\n\n\tgcc/\n\t* configure.ac: Add tests for fstatat, sighandler_t, O_CLOEXEC,\n\tunix-domain and ipv6 sockets.\n\t* config.in: Rebuilt.\n\t* configure: Rebuilt.", "tree": {"sha": "a8da3fe5a6d4bd977d72ad7b96a080b1def9ed96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8da3fe5a6d4bd977d72ad7b96a080b1def9ed96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "255483e5b70beade63efdf1f3efa6b814831da08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255483e5b70beade63efdf1f3efa6b814831da08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255483e5b70beade63efdf1f3efa6b814831da08"}], "stats": {"total": 286, "additions": 268, "deletions": 18}, "files": [{"sha": "3221dae411c78d3c9f475518f5502e650042c555", "filename": "gcc/config.in", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "patch": "@@ -302,6 +302,18 @@\n #endif\n \n \n+/* Define if AF_INET6 supported. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AF_INET6\n+#endif\n+\n+\n+/* Define if AF_UNIX supported. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AF_UNIX\n+#endif\n+\n+\n /* Define if your assembler supports architecture modifiers. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_ARCHITECTURE_MODIFIERS\n@@ -564,12 +576,24 @@\n #endif\n \n \n+/* Define if the assembler understands -march=rv*_zifencei. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_MARCH_ZIFENCEI\n+#endif\n+\n+\n /* Define if your assembler supports mfcr field. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_MFCRF\n #endif\n \n \n+/* Define if the assembler understands -misa-spec=. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_MISA_SPEC\n+#endif\n+\n+\n /* Define if your Mac OS X assembler supports the -mmacos-version-min option.\n    */\n #ifndef USED_FOR_TARGET\n@@ -643,18 +667,6 @@\n #endif\n \n \n-/* Define if your assembler supports -misa-spec=. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_MISA_SPEC\n-#endif\n-\n-\n-/* Define if your assembler supports -march=rv*_zifencei. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_MARCH_ZIFENCEI\n-#endif\n-\n-\n /* Define if your assembler supports relocs needed by -fpic. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_SMALL_PIC_RELOCS\n@@ -1265,6 +1277,12 @@\n #endif\n \n \n+/* Define to 1 if you have the `fstatat' function. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_FSTATAT\n+#endif\n+\n+\n /* Define to 1 if you have the <ftw.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_FTW_H\n@@ -1770,6 +1788,12 @@\n #endif\n \n \n+/* Define to 1 if you have the `posix_fallocate' function. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_POSIX_FALLOCATE\n+#endif\n+\n+\n /* Define to 1 if you have the `putchar_unlocked' function. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_PUTCHAR_UNLOCKED\n@@ -1794,6 +1818,12 @@\n #endif\n \n \n+/* Define if <sys/signal.h> defines sighandler_t */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_SIGHANDLER_T\n+#endif\n+\n+\n /* Define if the system-provided CRTs are present on Solaris. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_SOLARIS_CRTS\n@@ -2033,6 +2063,12 @@\n #endif\n \n \n+/* Define if O_CLOEXEC supported by fcntl. */\n+#ifndef USED_FOR_TARGET\n+#undef HOST_HAS_O_CLOEXEC\n+#endif\n+\n+\n /* Define as const if the declaration of iconv() needs const. */\n #ifndef USED_FOR_TARGET\n #undef ICONV_CONST"}, {"sha": "9c70db2e6c3d46769295b5f9f7c13e74cf91e2d2", "filename": "gcc/configure", "status": "modified", "additions": 148, "deletions": 4, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "patch": "@@ -10142,8 +10142,8 @@ fi\n \n for ac_func in times clock kill getrlimit setrlimit atoq \\\n \tpopen sysconf strsignal getrusage nl_langinfo \\\n-\tgettimeofday mbstowcs wcswidth mmap setlocale \\\n-\tclearerr_unlocked feof_unlocked   ferror_unlocked fflush_unlocked fgetc_unlocked fgets_unlocked   fileno_unlocked fprintf_unlocked fputc_unlocked fputs_unlocked   fread_unlocked fwrite_unlocked getchar_unlocked getc_unlocked   putchar_unlocked putc_unlocked madvise mallinfo mallinfo2\n+\tgettimeofday mbstowcs wcswidth mmap posix_fallocate setlocale \\\n+\tclearerr_unlocked feof_unlocked   ferror_unlocked fflush_unlocked fgetc_unlocked fgets_unlocked   fileno_unlocked fprintf_unlocked fputc_unlocked fputs_unlocked   fread_unlocked fwrite_unlocked getchar_unlocked getc_unlocked   putchar_unlocked putc_unlocked madvise mallinfo mallinfo2 fstatat\n do :\n   as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n ac_fn_cxx_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\n@@ -10215,6 +10215,14 @@ _ACEOF\n \n fi\n \n+ac_fn_cxx_check_type \"$LINENO\" \"sighander_t\" \"ac_cv_type_sighander_t\" \"signal.h\n+\"\n+if test \"x$ac_cv_type_sighander_t\" = xyes; then :\n+\n+$as_echo \"#define HAVE_SIGHANDLER_T 1\" >>confdefs.h\n+\n+fi\n+\n \n \n ac_fn_cxx_check_header_preproc \"$LINENO\" \"sys/mman.h\" \"ac_cv_header_sys_mman_h\"\n@@ -11938,6 +11946,142 @@ $as_echo \"#define HOST_HAS_F_SETLKW 1\" >>confdefs.h\n \n fi\n \n+# Check if O_CLOEXEC is defined by fcntl\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for O_CLOEXEC\" >&5\n+$as_echo_n \"checking for O_CLOEXEC... \" >&6; }\n+if ${ac_cv_o_cloexec+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <fcntl.h>\n+int\n+main ()\n+{\n+\n+return open (\"/dev/null\", O_RDONLY | O_CLOEXEC);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_cv_o_cloexec=yes\n+else\n+  ac_cv_o_cloexec=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_o_cloexec\" >&5\n+$as_echo \"$ac_cv_o_cloexec\" >&6; }\n+if test $ac_cv_o_cloexec = yes; then\n+\n+$as_echo \"#define HOST_HAS_O_CLOEXEC 1\" >>confdefs.h\n+\n+fi\n+\n+# C++ Modules would like some networking features to provide the mapping\n+# server.  You can still use modules without them though.\n+# The following network-related checks could probably do with some\n+# Windows and other non-linux defenses and checking.\n+\n+# Local socket connectivity wants AF_UNIX networking\n+# Check for AF_UNIX networking\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for AF_UNIX\" >&5\n+$as_echo_n \"checking for AF_UNIX... \" >&6; }\n+if ${ac_cv_af_unix+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <sys/types.h>\n+#include <sys/socket.h>\n+#include <sys/un.h>\n+#include <netinet/in.h>\n+int\n+main ()\n+{\n+\n+sockaddr_un un;\n+un.sun_family = AF_UNSPEC;\n+int fd = socket (AF_UNIX, SOCK_STREAM, 0);\n+connect (fd, (sockaddr *)&un, sizeof (un));\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_cv_af_unix=yes\n+else\n+  ac_cv_af_unix=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_af_unix\" >&5\n+$as_echo \"$ac_cv_af_unix\" >&6; }\n+if test $ac_cv_af_unix = yes; then\n+\n+$as_echo \"#define HAVE_AF_UNIX 1\" >>confdefs.h\n+\n+fi\n+\n+# Remote socket connectivity wants AF_INET6 networking\n+# Check for AF_INET6 networking\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for AF_INET6\" >&5\n+$as_echo_n \"checking for AF_INET6... \" >&6; }\n+if ${ac_cv_af_inet6+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+#include <sys/types.h>\n+#include <sys/socket.h>\n+#include <netinet/in.h>\n+#include <netdb.h>\n+int\n+main ()\n+{\n+\n+sockaddr_in6 in6;\n+in6.sin6_family = AF_UNSPEC;\n+struct addrinfo *addrs = 0;\n+struct addrinfo hints;\n+hints.ai_flags = 0;\n+hints.ai_family = AF_INET6;\n+hints.ai_socktype = SOCK_STREAM;\n+hints.ai_protocol = 0;\n+hints.ai_canonname = 0;\n+hints.ai_addr = 0;\n+hints.ai_next = 0;\n+int e = getaddrinfo (\"localhost\", 0, &hints, &addrs);\n+const char *str = gai_strerror (e);\n+freeaddrinfo (addrs);\n+int fd = socket (AF_INET6, SOCK_STREAM, 0);\n+connect (fd, (sockaddr *)&in6, sizeof (in6));\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_cv_af_inet6=yes\n+else\n+  ac_cv_af_inet6=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_af_inet6\" >&5\n+$as_echo \"$ac_cv_af_inet6\" >&6; }\n+if test $ac_cv_af_inet6 = yes; then\n+\n+$as_echo \"#define HAVE_AF_INET6 1\" >>confdefs.h\n+\n+fi\n+\n # Restore CFLAGS, CXXFLAGS from before the gcc_AC_NEED_DECLARATIONS tests.\n CFLAGS=\"$saved_CFLAGS\"\n CXXFLAGS=\"$saved_CXXFLAGS\"\n@@ -19036,7 +19180,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19039 \"configure\"\n+#line 19183 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19142,7 +19286,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19145 \"configure\"\n+#line 19289 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "1cce371a9e1815a7139d39a7f49fe49a87f21819", "filename": "gcc/configure.ac", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f07131e2d88b08f75ffea2a8dcfb16607629aa/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e1f07131e2d88b08f75ffea2a8dcfb16607629aa", "patch": "@@ -1417,8 +1417,8 @@ define(gcc_UNLOCKED_FUNCS, clearerr_unlocked feof_unlocked dnl\n   putchar_unlocked putc_unlocked)\n AC_CHECK_FUNCS(times clock kill getrlimit setrlimit atoq \\\n \tpopen sysconf strsignal getrusage nl_langinfo \\\n-\tgettimeofday mbstowcs wcswidth mmap setlocale \\\n-\tgcc_UNLOCKED_FUNCS madvise mallinfo mallinfo2)\n+\tgettimeofday mbstowcs wcswidth mmap posix_fallocate setlocale \\\n+\tgcc_UNLOCKED_FUNCS madvise mallinfo mallinfo2 fstatat)\n \n if test x$ac_cv_func_mbstowcs = xyes; then\n   AC_CACHE_CHECK(whether mbstowcs works, gcc_cv_func_mbstowcs_works,\n@@ -1440,6 +1440,10 @@ fi\n \n AC_CHECK_TYPE(ssize_t, int)\n AC_CHECK_TYPE(caddr_t, char *)\n+AC_CHECK_TYPE(sighander_t,\n+  AC_DEFINE(HAVE_SIGHANDLER_T, 1,\n+    [Define if <sys/signal.h> defines sighandler_t]),\n+    ,signal.h)\n \n GCC_AC_FUNC_MMAP_BLACKLIST\n \n@@ -1585,6 +1589,72 @@ if test $ac_cv_f_setlkw = yes; then\n   [Define if F_SETLKW supported by fcntl.])\n fi\n \n+# Check if O_CLOEXEC is defined by fcntl\n+AC_CACHE_CHECK(for O_CLOEXEC, ac_cv_o_cloexec, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#include <fcntl.h>]], [[\n+return open (\"/dev/null\", O_RDONLY | O_CLOEXEC);]])],\n+[ac_cv_o_cloexec=yes],[ac_cv_o_cloexec=no])])\n+if test $ac_cv_o_cloexec = yes; then\n+  AC_DEFINE(HOST_HAS_O_CLOEXEC, 1,\n+  [Define if O_CLOEXEC supported by fcntl.])\n+fi\n+\n+# C++ Modules would like some networking features to provide the mapping\n+# server.  You can still use modules without them though.\n+# The following network-related checks could probably do with some\n+# Windows and other non-linux defenses and checking.\n+\n+# Local socket connectivity wants AF_UNIX networking\n+# Check for AF_UNIX networking\n+AC_CACHE_CHECK(for AF_UNIX, ac_cv_af_unix, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#include <sys/types.h>\n+#include <sys/socket.h>\n+#include <sys/un.h>\n+#include <netinet/in.h>]],[[\n+sockaddr_un un;\n+un.sun_family = AF_UNSPEC;\n+int fd = socket (AF_UNIX, SOCK_STREAM, 0);\n+connect (fd, (sockaddr *)&un, sizeof (un));]])],\n+[ac_cv_af_unix=yes],\n+[ac_cv_af_unix=no])])\n+if test $ac_cv_af_unix = yes; then\n+  AC_DEFINE(HAVE_AF_UNIX, 1,\n+  [Define if AF_UNIX supported.])\n+fi\n+\n+# Remote socket connectivity wants AF_INET6 networking\n+# Check for AF_INET6 networking\n+AC_CACHE_CHECK(for AF_INET6, ac_cv_af_inet6, [\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+#include <sys/types.h>\n+#include <sys/socket.h>\n+#include <netinet/in.h>\n+#include <netdb.h>]],[[\n+sockaddr_in6 in6;\n+in6.sin6_family = AF_UNSPEC;\n+struct addrinfo *addrs = 0;\n+struct addrinfo hints;\n+hints.ai_flags = 0;\n+hints.ai_family = AF_INET6;\n+hints.ai_socktype = SOCK_STREAM;\n+hints.ai_protocol = 0;\n+hints.ai_canonname = 0;\n+hints.ai_addr = 0;\n+hints.ai_next = 0;\n+int e = getaddrinfo (\"localhost\", 0, &hints, &addrs);\n+const char *str = gai_strerror (e);\n+freeaddrinfo (addrs);\n+int fd = socket (AF_INET6, SOCK_STREAM, 0);\n+connect (fd, (sockaddr *)&in6, sizeof (in6));]])],\n+[ac_cv_af_inet6=yes],\n+[ac_cv_af_inet6=no])])\n+if test $ac_cv_af_inet6 = yes; then\n+  AC_DEFINE(HAVE_AF_INET6, 1,\n+  [Define if AF_INET6 supported.])\n+fi\n+\n # Restore CFLAGS, CXXFLAGS from before the gcc_AC_NEED_DECLARATIONS tests.\n CFLAGS=\"$saved_CFLAGS\"\n CXXFLAGS=\"$saved_CXXFLAGS\""}]}