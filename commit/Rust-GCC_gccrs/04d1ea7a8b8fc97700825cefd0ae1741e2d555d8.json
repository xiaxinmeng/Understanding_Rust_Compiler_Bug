{"sha": "04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkMWVhN2E4YjhmYzk3NzAwODI1Y2VmZDBhZTE3NDFlMmQ1NTVkOA==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-28T17:59:39Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-28T17:59:39Z"}, "message": "Enable VBMI2 support [5/7]\n\ngcc/\n\t* config/i386/avx512vbmi2intrin.h (_mm512_shrdi_epi16,\n\t_mm512_mask_shrdi_epi16, _mm512_maskz_shrdi_epi16, _mm512_shrdi_epi32,\n\t_mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32, _mm512_shrdi_epi64,\n\t_mm512_mask_shrdi_epi64, _mm512_maskz_shrdi_epi64): New intrinsics.\n\t* config/i386/avx512vbmi2vlintrin.h (_mm256_shrdi_epi16,\n\t_mm256_mask_shrdi_epi16, _mm256_maskz_shrdi_epi16,\n\t_mm256_mask_shrdi_epi32, _mm256_maskz_shrdi_epi32, _mm256_shrdi_epi32,\n\t_mm256_mask_shrdi_epi64, _mm256_maskz_shrdi_epi64, _mm256_shrdi_epi64,\n\t_mm_mask_shrdi_epi16, _mm_maskz_shrdi_epi16, _mm_shrdi_epi16,\n\t_mm_mask_shrdi_epi32, _mm_maskz_shrdi_epi32, _mm_shrdi_epi32,\n\t_mm_mask_shrdi_epi64, _mm_maskz_shrdi_epi64, _mm_shrdi_epi64): Ditto.\n\t* config/i386/i386-builtin.def (__builtin_ia32_vpshrd_v32hi,\n\t__builtin_ia32_vpshrd_v32hi_mask, __builtin_ia32_vpshrd_v16hi,\n\t__builtin_ia32_vpshrd_v16hi_mask, __builtin_ia32_vpshrd_v8hi,\n\t__builtin_ia32_vpshrd_v8hi_mask, __builtin_ia32_vpshrd_v16si,\n\t__builtin_ia32_vpshrd_v16si_mask, __builtin_ia32_vpshrd_v8si,\n\t__builtin_ia32_vpshrd_v8si_mask, __builtin_ia32_vpshrd_v4si,\n\t__builtin_ia32_vpshrd_v4si_mask, __builtin_ia32_vpshrd_v8di,\n\t__builtin_ia32_vpshrd_v8di_mask, __builtin_ia32_vpshrd_v4di,\n\t__builtin_ia32_vpshrd_v4di_mask, __builtin_ia32_vpshrd_v2di,\n\t__builtin_ia32_vpshrd_v2di_mask): New builtins.\n\t* config/i386/sse.md (vpshrd_<mode><mask_name>): New pattern.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx-1.c: Handle new intrinsics.\n\t* gcc.target/i386/sse-13.c: Ditto.\n\t* gcc.target/i386/sse-23.c: Ditto.\n\t* gcc.target/i386/avx512f-vpshrdd-2.c: New.\n\t* gcc.target/i386/avx512f-vpshrdq-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrd-1.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdd-2.c: Ditto.\n\t* gcc.target/i386/avx512vl-vpshrdq-2.c: Ditto.\n\nFrom-SVN: r255209", "tree": {"sha": "fc410fcaa86530d0f33293ff5770d29dcc86021a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc410fcaa86530d0f33293ff5770d29dcc86021a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2794892aa501666e233bb3ce267031ea60d6bbcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2794892aa501666e233bb3ce267031ea60d6bbcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2794892aa501666e233bb3ce267031ea60d6bbcc"}], "stats": {"total": 669, "additions": 654, "deletions": 15}, "files": [{"sha": "ca6748592929ffaa8350b8b412c5d1b7ec13dd31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -1,17 +1,42 @@\n 2017-11-28  Julia Koval  <julia.koval@intel.com>\n \n-\tconfig/i386/avx512vbmi2intrin.h (_mm512_shldi_epi16,\n+\t* config/i386/avx512vbmi2intrin.h (_mm512_shrdi_epi16,\n+\t_mm512_mask_shrdi_epi16, _mm512_maskz_shrdi_epi16, _mm512_shrdi_epi32,\n+\t_mm512_mask_shrdi_epi32, _mm512_maskz_shrdi_epi32, _mm512_shrdi_epi64,\n+\t_mm512_mask_shrdi_epi64, _mm512_maskz_shrdi_epi64): New intrinsics.\n+\t* config/i386/avx512vbmi2vlintrin.h (_mm256_shrdi_epi16,\n+\t_mm256_mask_shrdi_epi16, _mm256_maskz_shrdi_epi16,\n+\t_mm256_mask_shrdi_epi32, _mm256_maskz_shrdi_epi32, _mm256_shrdi_epi32,\n+\t_mm256_mask_shrdi_epi64, _mm256_maskz_shrdi_epi64, _mm256_shrdi_epi64,\n+\t_mm_mask_shrdi_epi16, _mm_maskz_shrdi_epi16, _mm_shrdi_epi16,\n+\t_mm_mask_shrdi_epi32, _mm_maskz_shrdi_epi32, _mm_shrdi_epi32,\n+\t_mm_mask_shrdi_epi64, _mm_maskz_shrdi_epi64, _mm_shrdi_epi64): Ditto.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vpshrd_v32hi,\n+\t__builtin_ia32_vpshrd_v32hi_mask, __builtin_ia32_vpshrd_v16hi,\n+\t__builtin_ia32_vpshrd_v16hi_mask, __builtin_ia32_vpshrd_v8hi,\n+\t__builtin_ia32_vpshrd_v8hi_mask, __builtin_ia32_vpshrd_v16si,\n+\t__builtin_ia32_vpshrd_v16si_mask, __builtin_ia32_vpshrd_v8si,\n+\t__builtin_ia32_vpshrd_v8si_mask, __builtin_ia32_vpshrd_v4si,\n+\t__builtin_ia32_vpshrd_v4si_mask, __builtin_ia32_vpshrd_v8di,\n+\t__builtin_ia32_vpshrd_v8di_mask, __builtin_ia32_vpshrd_v4di,\n+\t__builtin_ia32_vpshrd_v4di_mask, __builtin_ia32_vpshrd_v2di,\n+\t__builtin_ia32_vpshrd_v2di_mask): New builtins.\n+\t* config/i386/sse.md (vpshrd_<mode><mask_name>): New pattern.\n+\n+2017-11-28  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512vbmi2intrin.h (_mm512_shldi_epi16,\n \t_mm512_mask_shldi_epi16, _mm512_maskz_shldi_epi16, _mm512_shldi_epi32,\n \t_mm512_mask_shldi_epi32, _mm512_maskz_shldi_epi32, _mm512_shldi_epi64,\n \t_mm512_mask_shldi_epi64, _mm512_maskz_shldi_epi64): New intrinsics.\n-\tconfig/i386/avx512vbmi2vlintrin.h (_mm256_shldi_epi16,\n+\t* config/i386/avx512vbmi2vlintrin.h (_mm256_shldi_epi16,\n \t_mm256_mask_shldi_epi16, _mm256_maskz_shldi_epi16,\n \t_mm256_mask_shldi_epi32, _mm256_maskz_shldi_epi32, _mm256_shldi_epi32,\n \t_mm256_mask_shldi_epi64, _mm256_maskz_shldi_epi64, _mm256_shldi_epi64,\n \t_mm_mask_shldi_epi16, _mm_maskz_shldi_epi16, _mm_shldi_epi16,\n \t_mm_mask_shldi_epi32, _mm_maskz_shldi_epi32, _mm_shldi_epi32,\n \t_mm_mask_shldi_epi64, _mm_maskz_shldi_epi64, _mm_shldi_epi64): Ditto.\n-\tconfig/i386/i386-builtin-types.def (V32HI_FTYPE_V32HI_V32HI_INT,\n+\t* config/i386/i386-builtin-types.def (V32HI_FTYPE_V32HI_V32HI_INT,\n \tV32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT, V16SI_FTYPE_V16SI_V16SI_INT,\n \tV16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT,\n \tV8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT, V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT,\n@@ -20,7 +45,7 @@\n \tV8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT,\n \tV4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT,\n \tV2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT): New types.\n-\tconfig/i386/i386-builtin.def (__builtin_ia32_vpshld_v32hi,\n+\t* config/i386/i386-builtin.def (__builtin_ia32_vpshld_v32hi,\n \t__builtin_ia32_vpshld_v32hi_mask, __builtin_ia32_vpshld_v16hi,\n \t__builtin_ia32_vpshld_v16hi_mask, __builtin_ia32_vpshld_v8hi,\n \t__builtin_ia32_vpshld_v8hi_mask, __builtin_ia32_vpshld_v16si,\n@@ -30,8 +55,8 @@\n \t__builtin_ia32_vpshld_v8di_mask, __builtin_ia32_vpshld_v4di,\n \t__builtin_ia32_vpshld_v4di_mask, __builtin_ia32_vpshld_v2di,\n \t__builtin_ia32_vpshld_v2di_mask): New builtins.\n-\tconfig/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n-\tconfig/i386/sse.md (vpshld_<mode><mask_name>): New pattern.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n+\t* config/i386/sse.md (vpshld_<mode><mask_name>): New pattern.\n \n 2017-11-28  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "0a7c2b9c412ebe31f76a65149b008e341acd4f55", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -151,6 +151,80 @@ _mm512_maskz_expandloadu_epi16 (__mmask32 __A, const void * __B)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shrdi_epi16 (__m512i __A, __m512i __B, int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshrd_v32hi ((__v32hi)__A, (__v32hi) __B,\n+\t\t\t\t\t\t\t\t\t__C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdi_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask ((__v32hi)__C,\n+\t\t\t(__v32hi) __D, __E, (__v32hi) __A, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask ((__v32hi)__B,\n+\t(__v32hi) __C, __D, (__v32hi) _mm512_setzero_si512 (), (__mmask32)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shrdi_epi32 (__m512i __A, __m512i __B, int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshrd_v16si ((__v16si)__A, (__v16si) __B,\n+\t\t\t\t\t\t\t\t\t__C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdi_epi32 (__m512i __A, __mmask16 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v16si_mask ((__v16si)__C,\n+\t\t\t(__v16si) __D, __E, (__v16si) __A, (__mmask16)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdi_epi32 (__mmask16 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v16si_mask ((__v16si)__B,\n+\t(__v16si) __C, __D, (__v16si) _mm512_setzero_si512 (), (__mmask16)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shrdi_epi64 (__m512i __A, __m512i __B, int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshrd_v8di ((__v8di)__A, (__v8di) __B, __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shrdi_epi64 (__m512i __A, __mmask8 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v8di_mask ((__v8di)__C, (__v8di) __D,\n+\t\t\t\t\t__E, (__v8di) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shrdi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshrd_v8di_mask ((__v8di)__B, (__v8di) __C,\n+\t\t\t__D, (__v8di) _mm512_setzero_si512 (), (__mmask8)__A);\n+}\n+\n extern __inline __m512i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_shldi_epi16 (__m512i __A, __m512i __B, int __C)\n@@ -225,6 +299,36 @@ _mm512_maskz_shldi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n \t\t\t__D, (__v8di) _mm512_setzero_si512 (), (__mmask8)__A);\n }\n #else\n+#define _mm512_shrdi_epi16(A, B, C) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v32hi ((__v32hi)(__m512i)(A), \\\n+\t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))\n+#define _mm512_mask_shrdi_epi16(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(C), \\\n+\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n+#define _mm512_maskz_shrdi_epi16(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v32hi_mask ((__v32hi)(__m512i)(B), \\\n+\t(__v32hi)(__m512i)(C),(int)(D), \\\n+\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n+#define _mm512_shrdi_epi32(A, B, C) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v16si ((__v16si)(__m512i)(A), \\\n+\t(__v16si)(__m512i)(B),(int)(C))\n+#define _mm512_mask_shrdi_epi32(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v16si_mask ((__v16si)(__m512i)(C), \\\n+\t(__v16si)(__m512i)(D), (int)(E), (__v16si)(__m512i)(A),(__mmask16)(B))\n+#define _mm512_maskz_shrdi_epi32(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v16si_mask ((__v16si)(__m512i)(B), \\\n+\t(__v16si)(__m512i)(C),(int)(D), \\\n+\t(__v16si)(__m512i)_mm512_setzero_si512 (), (__mmask16)(A))\n+#define _mm512_shrdi_epi64(A, B, C) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v8di ((__v8di)(__m512i)(A), \\\n+\t(__v8di)(__m512i)(B),(int)(C))\n+#define _mm512_mask_shrdi_epi64(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v8di_mask ((__v8di)(__m512i)(C), \\\n+\t(__v8di)(__m512i)(D), (int)(E), (__v8di)(__m512i)(A),(__mmask8)(B))\n+#define _mm512_maskz_shrdi_epi64(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshrd_v8di_mask ((__v8di)(__m512i)(B), \\\n+\t(__v8di)(__m512i)(C),(int)(D), \\\n+\t(__v8di)(__m512i)_mm512_setzero_si512 (), (__mmask8)(A))\n #define _mm512_shldi_epi16(A, B, C) \\\n   ((__m512i) __builtin_ia32_vpshld_v32hi ((__v32hi)(__m512i)(A), \\\n \t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))"}, {"sha": "5d8d88c7009ab5faa481ec1d242439074092908e", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "modified", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -206,6 +206,151 @@ _mm256_maskz_expandloadu_epi16 (__mmask16 __A, const void * __B)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shrdi_epi16 (__m256i __A, __m256i __B, int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshrd_v16hi ((__v16hi)__A, (__v16hi) __B,\n+\t\t\t\t\t\t\t\t\t__C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shrdi_epi16 (__m256i __A, __mmask16 __B, __m256i __C, __m256i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m256i)__builtin_ia32_vpshrd_v16hi_mask ((__v16hi)__C,\n+\t\t\t(__v16hi) __D, __E, (__v16hi) __A, (__mmask16)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shrdi_epi16 (__mmask16 __A, __m256i __B, __m256i __C, int __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrd_v16hi_mask ((__v16hi)__B,\n+\t(__v16hi) __C, __D, (__v16hi) _mm256_setzero_si256 (), (__mmask16)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shrdi_epi32 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m256i)__builtin_ia32_vpshrd_v8si_mask ((__v8si)__C, (__v8si) __D,\n+\t\t\t\t\t__E, (__v8si) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shrdi_epi32 (__mmask8 __A, __m256i __B, __m256i __C, int __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrd_v8si_mask ((__v8si)__B, (__v8si) __C,\n+\t\t\t__D, (__v8si) _mm256_setzero_si256 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shrdi_epi32 (__m256i __A, __m256i __B, int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshrd_v8si ((__v8si)__A, (__v8si) __B, __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shrdi_epi64 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m256i)__builtin_ia32_vpshrd_v4di_mask ((__v4di)__C, (__v4di) __D,\n+\t\t\t\t\t__E, (__v4di) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shrdi_epi64 (__mmask8 __A, __m256i __B, __m256i __C, int __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshrd_v4di_mask ((__v4di)__B, (__v4di) __C,\n+\t\t\t__D, (__v4di) _mm256_setzero_si256 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shrdi_epi64 (__m256i __A, __m256i __B, int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshrd_v4di ((__v4di)__A, (__v4di) __B, __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shrdi_epi16 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m128i)__builtin_ia32_vpshrd_v8hi_mask ((__v8hi)__C, (__v8hi) __D,\n+\t\t\t\t\t__E, (__v8hi) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shrdi_epi16 (__mmask8 __A, __m128i __B, __m128i __C, int __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrd_v8hi_mask ((__v8hi)__B, (__v8hi) __C,\n+\t\t\t__D, (__v8hi) _mm_setzero_si128 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shrdi_epi16 (__m128i __A, __m128i __B, int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshrd_v8hi ((__v8hi)__A, (__v8hi) __B, __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shrdi_epi32 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m128i)__builtin_ia32_vpshrd_v4si_mask ((__v4si)__C, (__v4si) __D,\n+\t\t\t\t\t__E, (__v4si) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shrdi_epi32 (__mmask8 __A, __m128i __B, __m128i __C, int __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrd_v4si_mask ((__v4si)__B, (__v4si) __C,\n+\t\t\t__D, (__v4si) _mm_setzero_si128 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shrdi_epi32 (__m128i __A, __m128i __B, int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshrd_v4si ((__v4si)__A, (__v4si) __B, __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shrdi_epi64 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m128i)__builtin_ia32_vpshrd_v2di_mask ((__v2di)__C, (__v2di) __D,\n+\t\t\t\t\t__E, (__v2di) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shrdi_epi64 (__mmask8 __A, __m128i __B, __m128i __C, int __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshrd_v2di_mask ((__v2di)__B, (__v2di) __C,\n+\t\t\t__D, (__v2di) _mm_setzero_si128 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shrdi_epi64 (__m128i __A, __m128i __B, int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshrd_v2di ((__v2di)__A, (__v2di) __B, __C);\n+}\n+\n extern __inline __m256i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_shldi_epi16 (__m256i __A, __m256i __B, int __C)\n@@ -351,6 +496,66 @@ _mm_shldi_epi64 (__m128i __A, __m128i __B, int __C)\n   return (__m128i) __builtin_ia32_vpshld_v2di ((__v2di)__A, (__v2di) __B, __C);\n }\n #else\n+#define _mm256_shrdi_epi16(A, B, C) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v16hi ((__v16hi)(__m256i)(A), \\\n+\t(__v16hi)(__m256i)(B),(int)(C))\n+#define _mm256_mask_shrdi_epi16(A, B, C, D, E) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v16hi_mask ((__v16hi)(__m256i)(C), \\\n+\t(__v16hi)(__m256i)(D), (int)(E), (__v16hi)(__m256i)(A),(__mmask16)(B))\n+#define _mm256_maskz_shrdi_epi16(A, B, C, D) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v16hi_mask ((__v16hi)(__m256i)(B), \\\n+\t(__v16hi)(__m256i)(C),(int)(D), \\\n+\t(__v16hi)(__m256i)_mm256_setzero_si256 (), (__mmask16)(A))\n+#define _mm256_shrdi_epi32(A, B, C) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v8si ((__v8si)(__m256i)(A), \\\n+\t(__v8si)(__m256i)(B),(int)(C))\n+#define _mm256_mask_shrdi_epi32(A, B, C, D, E) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v8si_mask ((__v8si)(__m256i)(C), \\\n+\t(__v8si)(__m256i)(D), (int)(E), (__v8si)(__m256i)(A),(__mmask8)(B))\n+#define _mm256_maskz_shrdi_epi32(A, B, C, D) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v8si_mask ((__v8si)(__m256i)(B), \\\n+\t(__v8si)(__m256i)(C),(int)(D), \\\n+\t(__v8si)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+#define _mm256_shrdi_epi64(A, B, C) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v4di ((__v4di)(__m256i)(A), \\\n+\t(__v4di)(__m256i)(B),(int)(C))\n+#define _mm256_mask_shrdi_epi64(A, B, C, D, E) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v4di_mask ((__v4di)(__m256i)(C), \\\n+\t(__v4di)(__m256i)(D), (int)(E), (__v4di)(__m256i)(A),(__mmask8)(B))\n+#define _mm256_maskz_shrdi_epi64(A, B, C, D) \\\n+  ((__m256i) __builtin_ia32_vpshrd_v4di_mask ((__v4di)(__m256i)(B), \\\n+\t(__v4di)(__m256i)(C),(int)(D), \\\n+\t(__v4di)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+#define _mm_shrdi_epi16(A, B, C) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v8hi ((__v8hi)(__m128i)(A), \\\n+\t(__v8hi)(__m128i)(B),(int)(C))\n+#define _mm_mask_shrdi_epi16(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v8hi_mask ((__v8hi)(__m128i)(C), \\\n+\t(__v8hi)(__m128i)(D), (int)(E), (__v8hi)(__m128i)(A),(__mmask8)(B))\n+#define _mm_maskz_shrdi_epi16(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v8hi_mask ((__v8hi)(__m128i)(B), \\\n+\t(__v8hi)(__m128i)(C),(int)(D), \\\n+\t(__v8hi)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+#define _mm_shrdi_epi32(A, B, C) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v4si ((__v4si)(__m128i)(A), \\\n+\t(__v4si)(__m128i)(B),(int)(C))\n+#define _mm_mask_shrdi_epi32(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(C), \\\n+\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask16)(B))\n+#define _mm_maskz_shrdi_epi32(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v4si_mask ((__v4si)(__m128i)(B), \\\n+\t(__v4si)(__m128i)(C),(int)(D), \\\n+\t(__v4si)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+#define _mm_shrdi_epi64(A, B, C) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v2di ((__v2di)(__m128i)(A), \\\n+\t(__v2di)(__m128i)(B),(int)(C))\n+#define _mm_mask_shrdi_epi64(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v2di_mask ((__v2di)(__m128i)(C), \\\n+\t(__v2di)(__m128i)(D), (int)(E), (__v2di)(__m128i)(A),(__mmask8)(B))\n+#define _mm_maskz_shrdi_epi64(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vpshrd_v2di_mask ((__v2di)(__m128i)(B), \\\n+\t(__v2di)(__m128i)(C),(int)(D), \\\n+\t(__v2di)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n #define _mm256_shldi_epi16(A, B, C) \\\n   ((__m256i) __builtin_ia32_vpshld_v16hi ((__v16hi)(__m256i)(A), \\\n \t\t\t\t\t\t(__v16hi)(__m256i)(B),(int)(C))"}, {"sha": "8a4466ea02d867ca0fad9b4e352ead683f0e02bf", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -2628,6 +2628,24 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv1\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16hi_maskz, \"__builtin_ia32_expandhi256_maskz\", IX86_BUILTIN_PEXPANDW256Z, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_mask, \"__builtin_ia32_expandhi128_mask\", IX86_BUILTIN_PEXPANDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_maskz, \"__builtin_ia32_expandhi128_maskz\", IX86_BUILTIN_PEXPANDW128Z, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v32hi, \"__builtin_ia32_vpshrd_v32hi\", IX86_BUILTIN_VPSHRDV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v32hi_mask, \"__builtin_ia32_vpshrd_v32hi_mask\", IX86_BUILTIN_VPSHRDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16hi, \"__builtin_ia32_vpshrd_v16hi\", IX86_BUILTIN_VPSHRDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16hi_mask, \"__builtin_ia32_vpshrd_v16hi_mask\", IX86_BUILTIN_VPSHRDV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8hi, \"__builtin_ia32_vpshrd_v8hi\", IX86_BUILTIN_VPSHRDV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8hi_mask, \"__builtin_ia32_vpshrd_v8hi_mask\", IX86_BUILTIN_VPSHRDV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16si, \"__builtin_ia32_vpshrd_v16si\", IX86_BUILTIN_VPSHRDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v16si_mask, \"__builtin_ia32_vpshrd_v16si_mask\", IX86_BUILTIN_VPSHRDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8si, \"__builtin_ia32_vpshrd_v8si\", IX86_BUILTIN_VPSHRDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8si_mask, \"__builtin_ia32_vpshrd_v8si_mask\", IX86_BUILTIN_VPSHRDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4si, \"__builtin_ia32_vpshrd_v4si\", IX86_BUILTIN_VPSHRDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4si_mask, \"__builtin_ia32_vpshrd_v4si_mask\", IX86_BUILTIN_VPSHRDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8di, \"__builtin_ia32_vpshrd_v8di\", IX86_BUILTIN_VPSHRDV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v8di_mask, \"__builtin_ia32_vpshrd_v8di_mask\", IX86_BUILTIN_VPSHRDV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4di, \"__builtin_ia32_vpshrd_v4di\", IX86_BUILTIN_VPSHRDV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v4di_mask, \"__builtin_ia32_vpshrd_v4di_mask\", IX86_BUILTIN_VPSHRDV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v2di, \"__builtin_ia32_vpshrd_v2di\", IX86_BUILTIN_VPSHRDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshrd_v2di_mask, \"__builtin_ia32_vpshrd_v2di_mask\", IX86_BUILTIN_VPSHRDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v32hi, \"__builtin_ia32_vpshld_v32hi\", IX86_BUILTIN_VPSHLDV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v32hi_mask, \"__builtin_ia32_vpshld_v32hi_mask\", IX86_BUILTIN_VPSHLDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16hi, \"__builtin_ia32_vpshld_v16hi\", IX86_BUILTIN_VPSHLDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)"}, {"sha": "2147baa7049f20152ddfd11d94199edd026217b7", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -163,6 +163,7 @@\n \n   ;; For AVX512VBMI2 support\n   UNSPEC_VPSHLD\n+  UNSPEC_VPSHRD\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -20092,6 +20093,17 @@\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn \"vpshrd_<mode><mask_name>\"\n+  [(set (match_operand:VI248_VLBW 0 \"register_operand\" \"=v\")\n+\t(unspec:VI248_VLBW\n+\t  [(match_operand:VI248_VLBW 1 \"register_operand\" \"v\")\n+\t(match_operand:VI248_VLBW 2 \"nonimmediate_operand\" \"vm\")\n+\t(match_operand:SI 3 \"const_0_to_255_operand\" \"n\")\n+] UNSPEC_VPSHRD))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpshrd<ssemodesuffix>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])\n+\n (define_insn \"vpshld_<mode><mask_name>\"\n   [(set (match_operand:VI248_VLBW 0 \"register_operand\" \"=v\")\n \t(unspec:VI248_VLBW"}, {"sha": "db8d9784a5dd7ff2aa86442398ac15788b8182ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -1,14 +1,25 @@\n 2017-11-28  Julia Koval  <julia.koval@intel.com>\n \n-\tgcc.target/i386/avx-1.c: Handle new intrinics.\n-\tgcc.target/i386/sse-13.c: Ditto.\n-\tgcc.target/i386/sse-23.c: Ditto.\n-\tgcc.target/i386/avx512f-vpshld-1.c: New test.\n-\tgcc.target/i386/avx512f-vpshldd-2.c: Ditto.\n-\tgcc.target/i386/avx512f-vpshldq-2.c: Ditto.\n-\tgcc.target/i386/avx512vl-vpshld-1.c: Ditto.\n-\tgcc.target/i386/avx512vl-vpshldd-2.c: Ditto.\n-\tgcc.target/i386/avx512vl-vpshldq-2.c: Ditto.\n+\t* gcc.target/i386/avx-1.c: Handle new intrinsics.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshrdd-2.c: New.\n+\t* gcc.target/i386/avx512f-vpshrdq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshrdq-2.c: Ditto.\n+\n+2017-11-28  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx-1.c: Handle new intrinics.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshld-1.c: New test.\n+\t* gcc.target/i386/avx512f-vpshldd-2.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpshldq-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshld-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshldd-2.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpshldq-2.c: Ditto.\n \n 2017-11-28  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "bbb4ae2a24a0b308c82c152c31b6233533368a5d", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -618,6 +618,24 @@\n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n /* avx512vbmi2intrin.h */\n+#define __builtin_ia32_vpshrd_v32hi(A, B, C) __builtin_ia32_vpshrd_v32hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v32hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v16si(A, B, C) __builtin_ia32_vpshrd_v16si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v16si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v16si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8di(A, B, C) __builtin_ia32_vpshrd_v8di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v16hi(A, B, C) __builtin_ia32_vpshrd_v16hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v16hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v16hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8si(A, B, C) __builtin_ia32_vpshrd_v8si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v4di(A, B, C) __builtin_ia32_vpshrd_v4di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v4di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v4di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8hi(A, B, C) __builtin_ia32_vpshrd_v8hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v4si(A, B, C) __builtin_ia32_vpshrd_v4si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v4si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v4si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v2di(A, B, C) __builtin_ia32_vpshrd_v2di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v2di_mask(A, B, 1, D, E)\n #define __builtin_ia32_vpshld_v32hi(A, B, C) __builtin_ia32_vpshld_v32hi(A, B, 1)\n #define __builtin_ia32_vpshld_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v32hi_mask(A, B, 1, D, E)\n #define __builtin_ia32_vpshld_v16si(A, B, C) __builtin_ia32_vpshld_v16si(A, B, 1)"}, {"sha": "54dd369942b0ad502104390306c92be034554a82", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdd-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdd-2.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *r, int *dst, int *s1, int *s2, int imm)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (s1[i] >> (imm & 31)) | (s2[i] << (32 - (imm & 31)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a, DEFAULT_VALUE);\n+\n+  res1.x = INTRINSIC (_shrdi_epi32) (src1.x, src2.x, DEFAULT_VALUE);\n+  res2.x = INTRINSIC (_mask_shrdi_epi32) (res2.x, mask, src1.x, src2.x, DEFAULT_VALUE);\n+  res3.x = INTRINSIC (_maskz_shrdi_epi32) (mask, src1.x, src2.x, DEFAULT_VALUE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "4997c70a7b627a9ba58793822293ed0a05646f0e", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshrdq-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshrdq-2.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (long long *r, long long *dst, long long *s1, long long *s2, int imm)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (s1[i] >> (imm & 63)) | (s2[i] << (64 - (imm & 63)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a, DEFAULT_VALUE);\n+\n+  res1.x = INTRINSIC (_shrdi_epi64) (src1.x, src2.x, DEFAULT_VALUE);\n+  res2.x = INTRINSIC (_mask_shrdi_epi64) (res2.x, mask, src1.x, src2.x, DEFAULT_VALUE);\n+  res3.x = INTRINSIC (_maskz_shrdi_epi64) (mask, src1.x, src2.x, DEFAULT_VALUE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "923b954ac38e7a730fce33315688442acccd8f69", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrd-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrd-1.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshrdq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y;\n+volatile __m128i z1,z2;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm256_shrdi_epi16 (x, y, 3);\n+  x = _mm256_maskz_shrdi_epi16 (m, x, y, 3);\n+  x = _mm256_mask_shrdi_epi16 (x, m, y, x, 3);\n+\n+  x = _mm256_shrdi_epi32 (x, y, 3);\n+  x = _mm256_maskz_shrdi_epi32 (m, x, y, 3);\n+  x = _mm256_mask_shrdi_epi32 (x, m, y, x, 3);\n+\n+  x = _mm256_shrdi_epi64 (x, y, 3);\n+  x = _mm256_maskz_shrdi_epi64 (m, x, y, 3);\n+  x = _mm256_mask_shrdi_epi64 (x, m, y, x, 3);\n+\n+  z1 = _mm_shrdi_epi16 (z1, z2, 3);\n+  z1 = _mm_maskz_shrdi_epi16 (m, z1, z2, 3);\n+  z1 = _mm_mask_shrdi_epi16 (z1, m, z2, z1, 3);\n+\n+  z1 = _mm_shrdi_epi32 (z1, z2, 3);\n+  z1 = _mm_maskz_shrdi_epi32 (m, z1, z2, 3);\n+  z1 = _mm_mask_shrdi_epi32 (z1, m, z2, z1, 3);\n+\n+  z1 = _mm_shrdi_epi64 (z1, z2, 3);\n+  z1 = _mm_maskz_shrdi_epi64 (m, z1, z2, 3);\n+  z1 = _mm_mask_shrdi_epi64 (z1, m, z2, z1, 3);\n+}"}, {"sha": "bf229155a0274f58cfa82cb26348ca7e8ea8e2fc", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdd-2.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdd-2.c\""}, {"sha": "61e0708797bb9cda03c409bb059fdc6c439f7938", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshrdq-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshrdq-2.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshrdq-2.c\""}, {"sha": "89feeca7d3fb1f7b44afc86545199aeac372477d", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -635,6 +635,24 @@\n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n /* avx512vbmi2intrin.h */\n+#define __builtin_ia32_vpshrd_v32hi(A, B, C) __builtin_ia32_vpshrd_v32hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v32hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v16si(A, B, C) __builtin_ia32_vpshrd_v16si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v16si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v16si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8di(A, B, C) __builtin_ia32_vpshrd_v8di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v16hi(A, B, C) __builtin_ia32_vpshrd_v16hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v16hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v16hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8si(A, B, C) __builtin_ia32_vpshrd_v8si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v4di(A, B, C) __builtin_ia32_vpshrd_v4di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v4di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v4di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8hi(A, B, C) __builtin_ia32_vpshrd_v8hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v4si(A, B, C) __builtin_ia32_vpshrd_v4si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v4si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v4si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v2di(A, B, C) __builtin_ia32_vpshrd_v2di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v2di_mask(A, B, 1, D, E)\n #define __builtin_ia32_vpshld_v32hi(A, B, C) __builtin_ia32_vpshld_v32hi(A, B, 1)\n #define __builtin_ia32_vpshld_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v32hi_mask(A, B, 1, D, E)\n #define __builtin_ia32_vpshld_v16si(A, B, C) __builtin_ia32_vpshld_v16si(A, B, 1)"}, {"sha": "c1ae48b87d9a78848218cbbb6d6e89e0a892a17c", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04d1ea7a8b8fc97700825cefd0ae1741e2d555d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=04d1ea7a8b8fc97700825cefd0ae1741e2d555d8", "patch": "@@ -635,6 +635,24 @@\n \n \n /* avx512vbmi2intrin.h */\n+#define __builtin_ia32_vpshrd_v32hi(A, B, C) __builtin_ia32_vpshrd_v32hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v32hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v16si(A, B, C) __builtin_ia32_vpshrd_v16si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v16si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v16si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8di(A, B, C) __builtin_ia32_vpshrd_v8di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v16hi(A, B, C) __builtin_ia32_vpshrd_v16hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v16hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v16hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8si(A, B, C) __builtin_ia32_vpshrd_v8si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v4di(A, B, C) __builtin_ia32_vpshrd_v4di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v4di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v4di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v8hi(A, B, C) __builtin_ia32_vpshrd_v8hi(A, B, 1)\n+#define __builtin_ia32_vpshrd_v8hi_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v8hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v4si(A, B, C) __builtin_ia32_vpshrd_v4si(A, B, 1)\n+#define __builtin_ia32_vpshrd_v4si_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v4si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshrd_v2di(A, B, C) __builtin_ia32_vpshrd_v2di(A, B, 1)\n+#define __builtin_ia32_vpshrd_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshrd_v2di_mask(A, B, 1, D, E)\n #define __builtin_ia32_vpshld_v32hi(A, B, C) __builtin_ia32_vpshld_v32hi(A, B, 1)\n #define __builtin_ia32_vpshld_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v32hi_mask(A, B, 1, D, E)\n #define __builtin_ia32_vpshld_v16si(A, B, C) __builtin_ia32_vpshld_v16si(A, B, 1)"}]}