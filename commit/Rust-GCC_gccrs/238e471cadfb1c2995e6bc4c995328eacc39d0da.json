{"sha": "238e471cadfb1c2995e6bc4c995328eacc39d0da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM4ZTQ3MWNhZGZiMWMyOTk1ZTZiYzRjOTk1MzI4ZWFjYzM5ZDBkYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2011-12-05T15:49:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-12-05T15:49:25Z"}, "message": "Implement C++11 delegating constructors.\n\n\t* cp-tree.h (enum cpp0x_warn_str): Add CPP0X_DELEGATING_CTORS.\n\t* error.c (maybe_warn_cpp0x): Adjust.\n\t* parser.c (cp_parser_mem_initializer_list): Use it.  Diagnose\n\tmultiple initializers if a delegating initializer is present.\n\t* call.c (build_special_member_call): Convert an assert into an if.\n\t* init.c (perform_target_ctor): New.\n\t(emit_mem_initializers): Use it.\n\t(expand_member_init, expand_default_init): Adjust.\n\nCo-Authored-By: Pedro Lamar\u00e3o <pedro.lamarao@gmail.com>\n\nFrom-SVN: r182012", "tree": {"sha": "34698b82ecd5ca13de0629ef51d816a609fbb6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34698b82ecd5ca13de0629ef51d816a609fbb6ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/238e471cadfb1c2995e6bc4c995328eacc39d0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238e471cadfb1c2995e6bc4c995328eacc39d0da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238e471cadfb1c2995e6bc4c995328eacc39d0da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238e471cadfb1c2995e6bc4c995328eacc39d0da/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12c574caf6f0766266813fef7be8a2367a9d0700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c574caf6f0766266813fef7be8a2367a9d0700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c574caf6f0766266813fef7be8a2367a9d0700"}], "stats": {"total": 301, "additions": 287, "deletions": 14}, "files": [{"sha": "be5ebea1a3d4beb42d90f94cc8f87b271c780664", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -1,3 +1,16 @@\n+2011-12-05  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\t    Pedro Lamar\u00e3o  <pedro.lamarao@gmail.com>\n+\n+\tImplement C++11 delegating constructors.\n+\t* cp-tree.h (enum cpp0x_warn_str): Add CPP0X_DELEGATING_CTORS.\n+\t* error.c (maybe_warn_cpp0x): Adjust.\n+\t* parser.c (cp_parser_mem_initializer_list): Use it.  Diagnose\n+\tmultiple initializers if a delegating initializer is present.\n+\t* call.c (build_special_member_call): Convert an assert into an if.\n+\t* init.c (perform_target_ctor): New.\n+\t(emit_mem_initializers): Use it.\n+\t(expand_member_init, expand_default_init): Adjust.\n+\n 2011-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51404"}, {"sha": "d8fc4f1d2d57f7adf84c1917ac1c7d28e737bb9a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -6978,8 +6978,10 @@ build_special_member_call (tree instance, tree name, VEC(tree,gc) **args,\n \t\t\t    current_in_charge_parm, integer_zero_node),\n \t\t    current_vtt_parm,\n \t\t    vtt);\n-      gcc_assert (BINFO_SUBVTT_INDEX (binfo));\n-      sub_vtt = fold_build_pointer_plus (vtt, BINFO_SUBVTT_INDEX (binfo));\n+      if (BINFO_SUBVTT_INDEX (binfo))\n+\tsub_vtt = fold_build_pointer_plus (vtt, BINFO_SUBVTT_INDEX (binfo));\n+      else\n+\tsub_vtt = vtt;\n \n       if (args == NULL)\n \t{"}, {"sha": "dccf485a60fe5f64bec73dfbad930434b1cec85b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -404,7 +404,9 @@ typedef enum cpp0x_warn_str\n   /* non-static data member initializers */\n   CPP0X_NSDMI,\n   /* user defined literals */\n-  CPP0X_USER_DEFINED_LITERALS\n+  CPP0X_USER_DEFINED_LITERALS,\n+  /* delegating constructors */\n+  CPP0X_DELEGATING_CTORS\n } cpp0x_warn_str;\n   \n /* The various kinds of operation used by composite_pointer_type. */"}, {"sha": "21d6781567ee21af52dfdcf2cd8ee017f86f7407", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -3304,6 +3304,11 @@ maybe_warn_cpp0x (cpp0x_warn_str str)\n \t\t \"user-defined literals \"\n \t\t \"only available with -std=c++11 or -std=gnu++11\");\n \tbreak;\n+      case CPP0X_DELEGATING_CTORS:\n+\tpedwarn (input_location, 0,\n+\t\t \"delegating constructors \"\n+\t\t \"only available with -std=c++11 or -std=gnu++11\");\n+        break;\n       default:\n \tgcc_unreachable ();\n       }"}, {"sha": "94bd34a2ce9cd0caa64621dc3bd82fa10c47c0d5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 64, "deletions": 9, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -485,6 +485,30 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n   return build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n }\n \n+/* Initialize current class with INIT, a TREE_LIST of\n+   arguments for a target constructor. If TREE_LIST is void_type_node,\n+   an empty initializer list was given.  */\n+\n+static void\n+perform_target_ctor (tree init)\n+{\n+  tree decl = current_class_ref;\n+  tree type = current_class_type;\n+\n+  finish_expr_stmt (build_aggr_init (decl, init, LOOKUP_NORMAL,\n+                                     tf_warning_or_error));\n+  if (TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n+    {\n+      tree expr = build_delete (type, decl, sfk_complete_destructor,\n+\t\t\t\tLOOKUP_NORMAL\n+\t\t\t\t|LOOKUP_NONVIRTUAL\n+\t\t\t\t|LOOKUP_DESTRUCTOR,\n+\t\t\t\t0, tf_warning_or_error);\n+      if (expr != error_mark_node)\n+\tfinish_eh_cleanup (expr);\n+    }\n+}\n+\n /* Initialize MEMBER, a FIELD_DECL, with INIT, a TREE_LIST of\n    arguments.  If TREE_LIST is void_type_node, an empty initializer\n    list was given; if NULL_TREE no initializer was given.  */\n@@ -988,6 +1012,16 @@ emit_mem_initializers (tree mem_inits)\n   if (!COMPLETE_TYPE_P (current_class_type))\n     return;\n \n+  if (mem_inits\n+      && TYPE_P (TREE_PURPOSE (mem_inits))\n+      && same_type_p (TREE_PURPOSE (mem_inits), current_class_type))\n+    {\n+      /* Delegating constructor. */\n+      gcc_assert (TREE_CHAIN (mem_inits) == NULL_TREE);\n+      perform_target_ctor (TREE_VALUE (mem_inits));\n+      return;\n+    }\n+\n   if (DECL_DEFAULTED_FN (current_function_decl))\n     flags |= LOOKUP_DEFAULTED;\n \n@@ -1318,8 +1352,9 @@ expand_member_init (tree name)\n       tree virtual_binfo;\n       int i;\n \n-      if (current_template_parms)\n-\treturn basetype;\n+      if (same_type_p (basetype, current_class_type)\n+\t  || current_template_parms)\n+\t  return basetype;\n \n       class_binfo = TYPE_BINFO (current_class_type);\n       direct_binfo = NULL_TREE;\n@@ -1578,13 +1613,33 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n   else\n     parms = make_tree_vector_single (init);\n \n-  if (true_exp == exp)\n-    ctor_name = complete_ctor_identifier;\n-  else\n-    ctor_name = base_ctor_identifier;\n-\n-  rval = build_special_member_call (exp, ctor_name, &parms, binfo, flags,\n-                                    complain);\n+  if (exp == current_class_ref && current_function_decl\n+      && DECL_HAS_IN_CHARGE_PARM_P (current_function_decl))\n+    {\n+      /* Delegating constructor. */\n+      tree complete;\n+      tree base;\n+      complete = build_special_member_call (exp, complete_ctor_identifier,\n+\t\t\t\t\t&parms, binfo, flags,\n+\t\t\t\t\tcomplain);\n+      base = build_special_member_call (exp, base_ctor_identifier,\n+\t\t\t\t\t&parms, binfo, flags,\n+\t\t\t\t\tcomplain);\n+      rval = build3 (COND_EXPR, TREE_TYPE (complete),\n+\t\t    build2 (EQ_EXPR, boolean_type_node,\n+\t\t\t    current_in_charge_parm, integer_zero_node),\n+\t\t    base,\n+\t\t    complete);\n+    }\n+   else\n+    {\n+      if (true_exp == exp)\n+\tctor_name = complete_ctor_identifier;\n+      else\n+\tctor_name = base_ctor_identifier;\n+      rval = build_special_member_call (exp, ctor_name, &parms, binfo, flags,\n+\t\t\t\t\tcomplain);\n+  }\n \n   if (parms != NULL)\n     release_tree_vector (parms);"}, {"sha": "9e7a398cb3f8a45a9cca9a8ce96e6f1a91c2ed11", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -11321,6 +11321,7 @@ static void\n cp_parser_mem_initializer_list (cp_parser* parser)\n {\n   tree mem_initializer_list = NULL_TREE;\n+  tree target_ctor = error_mark_node;\n   cp_token *token = cp_lexer_peek_token (parser->lexer);\n \n   /* Let the semantic analysis code know that we are starting the\n@@ -11358,6 +11359,27 @@ cp_parser_mem_initializer_list (cp_parser* parser)\n           if (mem_initializer != error_mark_node)\n             mem_initializer = make_pack_expansion (mem_initializer);\n         }\n+      if (target_ctor != error_mark_node\n+\t  && mem_initializer != error_mark_node)\n+\t{\n+\t  error (\"mem-initializer for %qD follows constructor delegation\",\n+\t\t TREE_PURPOSE (mem_initializer));\n+\t  mem_initializer = error_mark_node;\n+\t}\n+      /* Look for a target constructor. */\n+      if (mem_initializer != error_mark_node\n+\t  && TYPE_P (TREE_PURPOSE (mem_initializer))\n+\t  && same_type_p (TREE_PURPOSE (mem_initializer), current_class_type))\n+\t{\n+\t  maybe_warn_cpp0x (CPP0X_DELEGATING_CTORS);\n+\t  if (mem_initializer_list)\n+\t    {\n+\t      error (\"constructor delegation follows mem-initializer for %qD\",\n+\t\t     TREE_PURPOSE (mem_initializer_list));\n+\t      mem_initializer = error_mark_node;\n+\t    }\n+\t  target_ctor = mem_initializer;\n+\t}\n       /* Add it to the list, unless it was erroneous.  */\n       if (mem_initializer != error_mark_node)\n \t{"}, {"sha": "3bda000ffccb987b143ca2f78e7767a11559c286", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -1,3 +1,13 @@\n+2011-12-05  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\t    Pedro Lamar\u00e3o <pedro.lamarao@gmail.com>\n+\n+\t* g++.dg/cpp0x/dc1.C: New test.\n+\t* g++.dg/cpp0x/dc2.C: New test.\n+\t* g++.dg/cpp0x/dc3.C: New test.\n+\t* g++.dg/cpp0x/dc4.C: New test.\n+\t* g++.dg/cpp0x/dc5.C: New test.\n+\t* g++.dg/template/meminit1.C: Adjust expected error.\n+\n 2011-12-05  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/51404"}, {"sha": "ba2e4f4fd05e185697b84b97edcf5e555ff3310a", "filename": "gcc/testsuite/g++.dg/cpp0x/dc1.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc1.C?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// { dg-options --std=c++0x }\n+\n+struct B {\n+\tint i;\n+\tB (int _i) : i(_i) { }\n+\t~B () { i = 0; }\n+};\n+\n+struct A : public B {\n+\tA () : B(-1) { }\n+\tA (int i) : A() { }\n+\tA (double b) : A(static_cast<int>(b)) { }\n+\tA (double b, double b2) : A(b2) { }\n+\t~A () { }\n+};\n+\n+void f_A () { A a(2.0, 3.0); }\n+\n+struct C {\n+\tC () { }\n+\tvirtual ~C() { }\n+\tvirtual int f () = 0;\n+};\n+\n+struct D : public C {\n+\tint i;\n+\tD (int _i) : C(), i(_i) { }\n+\tD () : D(-1) { }\n+\tvirtual ~D() { }\n+\tvirtual int f () { }\n+};\n+\n+void f_D () { C* c = new D(); }\n+\n+template <typename T>\n+struct E {\n+\tT t;\n+\tE () : E(T()) { }\n+\tE (T _t) : t(_t) { }\n+};\n+\n+void f_E () { E<int> e; }"}, {"sha": "dda0b9fc697ebb7f135f7533877d9d0cee5bfd65", "filename": "gcc/testsuite/g++.dg/cpp0x/dc2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc2.C?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options --std=c++0x }\n+\n+struct A {\n+\tint i, j;\n+\tA () : A(0), j(0) { } // { dg-error \"constructor delegation\" }\n+\tA (int _i) : i(_i) { }\n+};\n+\n+struct B {\n+\tint i, j;\n+\tB () : i(0), B(0) { } // { dg-error \"constructor delegation\" }\n+\tB (int _j) : j(_j) { }\n+\n+};\n+\n+struct C {};\n+\n+struct D : public C {\n+\tD () : C() { }\n+\tD (float) : D(), C() { } // { dg-error \"constructor delegation\" }\n+\tD (float, float): C(), D() { } // { dg-error \"constructor delegation\" }\n+};"}, {"sha": "b411c997d8fc6ab40c06a83cd556aeebb9b8c7f3", "filename": "gcc/testsuite/g++.dg/cpp0x/dc3.C", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc3.C?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -0,0 +1,63 @@\n+// { dg-do compile }\n+// { dg-options --std=c++0x }\n+\n+struct X {};\n+\n+struct B {\n+\tint i;\n+\tB (int _i) : i(_i) { }\n+\t~B () { i = 0; }\n+};\n+\n+template <typename T>\n+struct A : public B {\n+\tA () : B(-1) { }\n+\t~A () { }\n+};\n+\n+template <typename T>\n+struct A<T*> : public B {\n+\tA () : B(-1) { }\n+\tA (int i) : A() { }\n+\tA (double b) : A(static_cast<int>(b)) { }\n+\tA (double b, double b2) : A(b2) { }\n+\t~A () { }\n+};\n+\n+void f_A () { A<X*> a(2.0, 3.0); }\n+\n+struct C {\n+\tC () { }\n+\tvirtual ~C() { }\n+\tvirtual int f () = 0;\n+};\n+\n+template <typename T>\n+struct D : public C {\n+\tint i;\n+\tD (int _i) : C(), i(_i) { }\n+};\n+\n+template <>\n+struct D<X> : public C {\n+\tint i;\n+\tD (int _i) : C(), i(_i) { }\n+\tD () : D(-1) { }\n+\tvirtual ~D() { }\n+\tvirtual int f () { }\n+};\n+\n+void f_D () { D<X>* d = new D<X>(); }\n+\n+template <typename T>\n+struct E {\n+};\n+\n+template <>\n+struct E<int> {\n+\tint i;\n+\tE () : E(0) { }\n+\tE (int _i) : i(_i) { }\n+};\n+\n+void f_E () { E<int> e; }"}, {"sha": "634b5498de86957e21285e00ec972ce0fbbaff68", "filename": "gcc/testsuite/g++.dg/cpp0x/dc4.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc4.C?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do compile }\n+// { dg-options \"--std=c++98\" }\n+\n+struct X {\n+  X() {}\n+  X(int) : X() {} // { dg-warning \"delegating constructors\" }\n+};"}, {"sha": "0052b32111392fc3e60e11abba124f1bfb20ed20", "filename": "gcc/testsuite/g++.dg/cpp0x/dc5.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdc5.C?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run }\n+// { dg-options \"--std=c++0x\" }\n+\n+#include <cassert>\n+\n+int count = 0;\n+struct VB\n+{\n+  VB() {++count;}\n+};\n+\n+struct B : virtual VB\n+{\n+  B() : B(42) {}\n+  B(int)  {}\n+};\n+\n+struct D : B\n+{\n+  D() {}\n+  D(int) : D() {}\n+};\n+\n+int main()\n+{\n+  D d{42};\n+  assert(count == 1);\n+}"}, {"sha": "19a1e546d525a32b548eec7e62d1a7faab1edd7b", "filename": "gcc/testsuite/g++.dg/template/meminit1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/238e471cadfb1c2995e6bc4c995328eacc39d0da/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fmeminit1.C?ref=238e471cadfb1c2995e6bc4c995328eacc39d0da", "patch": "@@ -2,7 +2,7 @@\n template <class T >\n struct S\n {\n-  S() : S() {} // { dg-error \"base\" }\n+  S() : S() {} // { dg-message \"delegating constructors\" }\n };\n \n-S<int> s; // { dg-message \"required\" }\n+S<int> s;"}]}