{"sha": "bd9f1972b943614a89c72e9fa5a79aa330f11e98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5ZjE5NzJiOTQzNjE0YTg5YzcyZTlmYTVhNzlhYTMzMGYxMWU5OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-09-23T17:46:23Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-09-23T17:46:23Z"}, "message": "abi64.h (mips_function_value): Add prototype arguments.\n\n\t* abi64.h (mips_function_value): Add prototype arguments.\n\n\t* mips-protos.h: New file with mips prototypes.\n\n\t* mips.c: Include \"tm_p.h\".\n\t(mktemp, lookup_name): Add prototype arguments.\n\t(extern_list, string_constant, mips_fill_delay_slot,\n\tmips_output_external, mips_output_external_libcall,\n\tmips_output_filename, mips_declare_object, function_prologue,\n\tmips_expand_prologue, function_epilogue, mips16_constant,\n\tbuild_mips16_function_stub, mips_output_conditional_branch):\n\tConstify a char*.\n\t(mips_va_start): Remove unused variable `u'.\n\t(mips_va_arg): Cast value to unsigned when comparing against one.\n\t(trace): Delete.\n\t(save_restore_insns, mips_expand_prologue): Add missing arg in\n\tcall to `large_int'.\n\n\t* mips.h: Move prototypes to mips-protos.h.\n\t(data_section, memory_address_p, rdata_section,\n\treadonly_data_section, simple_epilogue_p, text_section): Delete\n\tprototypes delcared elsewhere.\n\t(mips_epilogue_delay_slots, print_options): Delete unused decls.\n\t(trace): Delete.\n\t(GO_PRINTF, GO_PRINTF2): Call fprintf, not trace.\n\n\t* mips.md: Delete extra args in call to `mips_move_2words'.\n\n\t* xm-iris6.h (alloca): Add prototype argument.\n\n\t* genpeep.c: Include \"tm_p.h\" in generated output file.\n\nFrom-SVN: r29623", "tree": {"sha": "6a3e5c955ee1b31c47bf9bb630cdff3bb0a31f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a3e5c955ee1b31c47bf9bb630cdff3bb0a31f0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd9f1972b943614a89c72e9fa5a79aa330f11e98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9f1972b943614a89c72e9fa5a79aa330f11e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd9f1972b943614a89c72e9fa5a79aa330f11e98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd9f1972b943614a89c72e9fa5a79aa330f11e98/comments", "author": null, "committer": null, "parents": [{"sha": "d675a4262012debbb72991c3a6ca1d20dabde9a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d675a4262012debbb72991c3a6ca1d20dabde9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d675a4262012debbb72991c3a6ca1d20dabde9a8"}], "stats": {"total": 420, "additions": 239, "deletions": 181}, "files": [{"sha": "b36356b856025cbaa3fe8391687efd351b341139", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -1,3 +1,37 @@\n+Thu Sep 23 13:40:23 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* abi64.h (mips_function_value): Add prototype arguments.\n+\n+\t* mips-protos.h: New file with mips prototypes.\n+\n+\t* mips.c: Include \"tm_p.h\".\n+\t(mktemp, lookup_name): Add prototype arguments.\n+\t(extern_list, string_constant, mips_fill_delay_slot,\n+\tmips_output_external, mips_output_external_libcall,\n+\tmips_output_filename, mips_declare_object, function_prologue,\n+\tmips_expand_prologue, function_epilogue, mips16_constant,\n+\tbuild_mips16_function_stub, mips_output_conditional_branch):\n+\tConstify a char*.\n+\t(mips_va_start): Remove unused variable `u'.\n+\t(mips_va_arg): Cast value to unsigned when comparing against one.\n+\t(trace): Delete.\n+\t(save_restore_insns, mips_expand_prologue): Add missing arg in\n+\tcall to `large_int'.\n+\n+\t* mips.h: Move prototypes to mips-protos.h.\n+\t(data_section, memory_address_p, rdata_section,\n+\treadonly_data_section, simple_epilogue_p, text_section): Delete\n+\tprototypes delcared elsewhere.\n+\t(mips_epilogue_delay_slots, print_options): Delete unused decls.\n+\t(trace): Delete.\n+\t(GO_PRINTF, GO_PRINTF2): Call fprintf, not trace.\n+\n+\t* mips.md: Delete extra args in call to `mips_move_2words'.\n+\n+\t* xm-iris6.h (alloca): Add prototype argument.\n+\n+\t* genpeep.c: Include \"tm_p.h\" in generated output file.\n+\n Thu Sep 23 10:36:55 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n \n \t* basic-block.h (find_edge_index): Change parameters."}, {"sha": "e74e2f4b32d19d3a85b5a8791e7d362cad404e30", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -93,7 +93,10 @@ Boston, MA 02111-1307, USA.  */\n    : (int_size_in_bytes (TYPE)\t\t\t\t\t\t\\\n       > (mips_abi == ABI_EABI ? 2 * UNITS_PER_WORD : 16)))\n \n-extern struct rtx_def *mips_function_value ();\n+#ifdef ANSI_PROTOTYPES\n+union tree_node;\n+#endif\n+extern struct rtx_def *mips_function_value PARAMS ((union tree_node *, union tree_node *));\n #undef FUNCTION_VALUE\n #define FUNCTION_VALUE(VALTYPE, FUNC)\tmips_function_value (VALTYPE, FUNC)\n "}, {"sha": "72129d350c5cc9584ad9a2cfad39c0732f808c23", "filename": "gcc/config/mips/mips-protos.h", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -0,0 +1,154 @@\n+/* Prototypes of target machine for GNU compiler.  MIPS version.\n+   Copyright (C) 1989, 90-98, 1999 Free Software Foundation, Inc.\n+   Contributed by A. Lichnewsky (lich@inria.inria.fr).\n+   Changed by Michael Meissner\t(meissner@osf.org).\n+   64 bit r4000 support by Ian Lance Taylor (ian@cygnus.com) and\n+   Brendan Eich (brendan@microunity.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifndef __MIPS_PROTOS_H__\n+#define __MIPS_PROTOS_H__\n+\n+extern HOST_WIDE_INT\tcompute_frame_size PARAMS ((HOST_WIDE_INT));\n+extern void\t\tfunction_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+extern void\t\tfunction_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n+extern void\t\tmips_asm_file_end PARAMS ((FILE *));\n+extern void\t\tmips_asm_file_start PARAMS ((FILE *));\n+extern int\t\tmips_can_use_return_insn PARAMS ((void));\n+extern void\t\tmips_declare_object PARAMS ((FILE *, const char *, const char *, const char *, int));\n+extern void\t\tmips_expand_epilogue PARAMS ((void));\n+extern void\t\tmips_expand_prologue PARAMS ((void));\n+#ifdef REAL_VALUE_TYPE\n+extern void\t\tmips_output_double PARAMS ((FILE *, REAL_VALUE_TYPE));\n+extern void\t\tmips_output_float PARAMS ((FILE *, REAL_VALUE_TYPE));\n+#endif /* REAL_VALUE_TYPE */\n+extern void\t\tmips_output_filename PARAMS ((FILE *, const char *));\n+extern void\t\tmips_output_lineno PARAMS ((FILE *, int));\n+extern void\t\tmips_order_regs_for_local_alloc PARAMS ((void));\n+extern struct rtx_def *\tmips16_gp_pseudo_reg PARAMS ((void));\n+#ifdef ASM_OUTPUT_UNDEF_FUNCTION\n+extern int\t\tmips_output_external_libcall PARAMS ((FILE *, const char *));\n+#endif /* ASM_OUTPUT_UNDEF_FUNCTION */\n+\n+\n+#ifdef TREE_CODE\n+extern struct rtx_def *\tfunction_arg PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern void\t\tfunction_arg_advance PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern int\t\tfunction_arg_partial_nregs PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern int\t\tfunction_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int));\n+extern int\t\tmips16_constant_after_function_p PARAMS ((tree));\n+extern int\t\tmips_output_external PARAMS ((FILE *, tree, const char *));\n+extern tree\t\tmips_build_va_list PARAMS ((void));\n+#ifdef RTX_CODE\n+extern void\t\tmips_va_start PARAMS ((int, tree, rtx));\n+#endif /* RTX_CODE */\n+extern struct rtx_def  *mips_va_arg PARAMS ((tree, tree));\n+extern void\t\tmips_select_section PARAMS ((tree, int));\n+#endif /* TREE_CODE */\n+\n+#ifdef RTX_CODE\n+extern int\t\tarith32_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tarith_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tcmp_op PARAMS ((rtx, enum machine_mode));\n+extern int\t\tconst_float_1_operand PARAMS ((rtx, enum machine_mode));\n+extern void\t\texpand_block_move PARAMS ((rtx []));\n+extern int\t\tequality_op PARAMS ((rtx, enum machine_mode));\n+extern void\t\tfinal_prescan_insn PARAMS ((rtx, rtx [], int));\n+extern struct rtx_def * gen_int_relational PARAMS ((enum rtx_code, rtx, rtx, rtx,int *));\n+#ifdef TREE_CODE\n+extern void\t\tinit_cumulative_args PARAMS ((CUMULATIVE_ARGS *c, tree, rtx));\n+#endif /* TREE_CODE */\n+extern void\t\tgen_conditional_branch PARAMS ((rtx[], enum rtx_code));\n+extern void\t\tgen_conditional_move PARAMS ((rtx *));\n+extern int\t\tlarge_int PARAMS ((rtx, enum machine_mode));\n+extern void\t\tmachine_dependent_reorg PARAMS ((rtx));\n+extern int\t\tmips_address_cost PARAMS ((rtx));\n+extern int\t\tmips_const_double_ok PARAMS ((rtx, enum machine_mode));\n+extern void\t\tmips_count_memory_refs PARAMS ((rtx, int));\n+extern HOST_WIDE_INT\tmips_debugger_offset PARAMS ((rtx, HOST_WIDE_INT));\n+extern int\t\tmips_check_split PARAMS ((rtx, enum machine_mode));\n+extern const char      *mips_fill_delay_slot PARAMS ((const char *, enum delay_type, rtx[], rtx));\n+extern const char      *mips_move_1word PARAMS ((rtx[], rtx, int));\n+extern const char      *mips_move_2words PARAMS ((rtx[], rtx));\n+extern const char      *output_block_move PARAMS ((rtx, rtx[], int, enum block_move_type));\n+extern void\t\toverride_options PARAMS ((void));\n+extern int\t\tpc_or_label_operand PARAMS ((rtx, enum machine_mode));\n+extern void\t\tprint_operand_address PARAMS ((FILE *, rtx));\n+extern void\t\tprint_operand PARAMS ((FILE *, rtx, int));\n+extern int\t\treg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\ttrue_reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tsimple_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tdouble_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tsmall_int PARAMS ((rtx, enum machine_mode));\n+extern int\t\tuns_arith_operand PARAMS ((rtx, enum machine_mode));\n+extern struct rtx_def *\tembedded_pic_offset PARAMS ((rtx));\n+extern struct rtx_def * mips16_gp_offset PARAMS ((rtx));\n+extern int\t\tmips16_gp_offset_p PARAMS ((rtx));\n+extern int\t\tmips16_constant PARAMS ((rtx, enum machine_mode, int, int));\n+extern int\t\tbuild_mips16_call_stub PARAMS ((rtx, rtx, rtx, int));\n+extern char  \t       *mips_output_conditional_branch PARAMS ((rtx, rtx *, int, int, int, int));\n+extern int              mips_adjust_insn_length PARAMS ((rtx, int));\n+extern enum reg_class\tmips_secondary_reload_class PARAMS ((enum reg_class, enum machine_mode, rtx, int));\n+extern void\t\tmips_select_rtx_section PARAMS ((enum machine_mode, rtx));\n+\n+/* Recognition functions that return if a condition is true.  */\n+extern int\t\taddress_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tcall_insn_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tconst_double_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tconst_int_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tconsttable_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tgeneral_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\timmediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tmemory_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tnonimmediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tnonmemory_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tpic_address_needs_scratch PARAMS ((rtx));\n+extern int\t\tregister_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tscratch_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tmove_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tmovdi_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tse_register_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tse_reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tse_uns_arith_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tse_arith_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tse_nonmemory_operand PARAMS ((rtx, enum machine_mode));\n+extern int\t\tse_nonimmediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int              extend_operator PARAMS ((rtx, enum machine_mode));\n+extern int              highpart_shift_operator PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_uimm3_b PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_simm4_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nsimm4_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_simm5_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nsimm5_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_uimm5_4 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nuimm5_4 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_simm8_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nsimm8_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_uimm8_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nuimm8_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_uimm8_m1_1 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_uimm8_4 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nuimm8_4 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_simm8_8 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_nsimm8_8 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_usym8_4 PARAMS ((rtx, enum machine_mode));\n+extern int\t\tm16_usym5_4 PARAMS ((rtx, enum machine_mode));\n+#endif /* RTX_CODE */\n+\n+#endif /* __MIPS_PROTOS_H__ */"}, {"sha": "a5792059c4f929059a1326338f52c9345822c702", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -48,6 +48,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"reload.h\"\n #include \"output.h\"\n+#include \"tm_p.h\"\n #include \"ggc.h\"\n \n #if defined(USG) || !defined(HAVE_STAB_H)\n@@ -62,8 +63,8 @@ Boston, MA 02111-1307, USA.  */\n #define STAB_CODE_TYPE int\n #endif\n \n-extern char  *mktemp ();\n-extern tree   lookup_name ();\n+extern char  *mktemp PARAMS ((char *));\n+extern tree   lookup_name PARAMS ((tree));\n \n /* Enumeration for all of the relational tests, so that we can build\n    arrays indexed by the test type, and not worry about the order\n@@ -145,7 +146,7 @@ FILE *asm_out_text_file;\n struct extern_list\n {\n   struct extern_list *next;\t/* next external */\n-  char *name;\t\t\t/* name of the external */\n+  const char *name;\t\t/* name of the external */\n   int size;\t\t\t/* size in bytes */\n } *extern_head = 0;\n \n@@ -289,7 +290,7 @@ rtx mips16_gp_pseudo_rtx;\n struct string_constant\n {\n   struct string_constant *next;\n-  char *label;\n+  const char *label;\n };\n \n static struct string_constant *string_constants;\n@@ -1425,9 +1426,9 @@ m16_usym5_4 (op, mode)\n /* ??? This function no longer does anything useful, because final_prescan_insn\n    now will never emit a nop.  */\n \n-char *\n+const char *\n mips_fill_delay_slot (ret, type, operands, cur_insn)\n-     char *ret;\t\t\t/* normal string to return */\n+     const char *ret;\t\t/* normal string to return */\n      enum delay_type type;\t/* type of delay */\n      rtx operands[];\t\t/* operands to use */\n      rtx cur_insn;\t\t/* current insn */\n@@ -4033,7 +4034,7 @@ mips_va_start (stdarg_p, valist, nextarg)\n      rtx nextarg;\n {\n   int arg_words, fp_arg_words;\n-  tree t, u;\n+  tree t;\n \n   arg_words = current_function_args_info.arg_words;\n   fp_arg_words = current_function_args_info.fp_arg_words;\n@@ -4196,7 +4197,7 @@ mips_va_arg (valist, type)\n \n       if (! indirect\n \t  && ! TARGET_64BIT\n-\t  && TYPE_ALIGN (type) > BITS_PER_WORD)\n+\t  && TYPE_ALIGN (type) > (unsigned) BITS_PER_WORD)\n \t{\n \t  t = build (PLUS_EXPR, TREE_TYPE (gpr), gpr,\n \t\t     build_int_2 (2*UNITS_PER_WORD - 1, 0));\n@@ -4266,16 +4267,6 @@ abort_with_insn (insn, reason)\n   debug_rtx (insn);\n   abort ();\n }\n-\n-/* Write a message to stderr (for use in macros expanded in files that do not\n-   include stdio.h).  */\n-\n-void\n-trace (s, s1, s2)\n-     char *s, *s1, *s2;\n-{\n-  fprintf (stderr, s, s1, s2);\n-}\n \f\n /* Set up the threshold for data to go into the small data area, instead\n    of the normal data area, and detect any conflicts in the switches.  */\n@@ -5318,7 +5309,7 @@ int\n mips_output_external (file, decl, name)\n      FILE *file ATTRIBUTE_UNUSED;\n      tree decl;\n-     char *name;\n+     const char *name;\n {\n   register struct extern_list *p;\n   int len;\n@@ -5362,7 +5353,7 @@ mips_output_external (file, decl, name)\n int\n mips_output_external_libcall (file, name)\n      FILE *file;\n-     char *name;\n+     const char *name;\n {\n   register struct extern_list *p;\n \n@@ -5436,7 +5427,7 @@ make_temp_file ()\n void\n mips_output_filename (stream, name)\n      FILE *stream;\n-     char *name;\n+     const char *name;\n {\n   static int first_time = 1;\n   char ltext_label_name[100];\n@@ -5692,9 +5683,9 @@ mips_asm_file_end (file)\n void\n mips_declare_object (stream, name, init_string, final_string, size)\n      FILE *stream;\n-     char *name;\n-     char *init_string;\n-     char *final_string;\n+     const char *name;\n+     const char *init_string;\n+     const char *final_string;\n      int size;\n {\n   fputs (init_string, stream);\t\t/* \"\", \"\\t.comm\\t\", or \"\\t.lcomm\\t\" */\n@@ -6081,7 +6072,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t split.  */\n \t      /* ??? There is no DImode ori immediate pattern, so we can only\n \t\t do this for 32 bit code.  */\n-\t      if (large_int (gp_offset_rtx)\n+\t      if (large_int (gp_offset_rtx, GET_MODE (gp_offset_rtx))\n \t\t  && GET_MODE (base_reg_rtx) == SImode)\n \t\t{\n \t\t  insn = emit_move_insn (base_reg_rtx,\n@@ -6299,7 +6290,7 @@ save_restore_insns (store_p, large_reg, large_offset, file)\n \t\t split.  */\n \t      /* ??? There is no DImode ori immediate pattern, so we can only\n \t\t do this for 32 bit code.  */\n-\t      if (large_int (fp_offset_rtx)\n+\t      if (large_int (fp_offset_rtx, GET_MODE (fp_offset_rtx))\n \t\t  && GET_MODE (base_reg_rtx) == SImode)\n \t\t{\n \t\t  insn = emit_move_insn (base_reg_rtx,\n@@ -6393,7 +6384,7 @@ function_prologue (file, size)\n      int size ATTRIBUTE_UNUSED;\n {\n #ifndef FUNCTION_NAME_ALREADY_DECLARED\n-  char *fnname;\n+  const char *fnname;\n #endif\n   long tsize = current_frame_info.total_size;\n \n@@ -6577,7 +6568,7 @@ function_prologue (file, size)\n \n   if (TARGET_ABICALLS && (mips_abi == ABI_32 || mips_abi == ABI_O64))\n     {\n-      char *sp_str = reg_names[STACK_POINTER_REGNUM];\n+      const char *const sp_str = reg_names[STACK_POINTER_REGNUM];\n \n       fprintf (file, \"\\t.set\\tnoreorder\\n\\t.cpload\\t%s\\n\\t.set\\treorder\\n\",\n \t       reg_names[PIC_FUNCTION_ADDR_REGNUM]);\n@@ -6602,7 +6593,7 @@ mips_expand_prologue ()\n   int regno;\n   HOST_WIDE_INT tsize;\n   rtx tmp_rtx = 0;\n-  char *arg_name = 0;\n+  const char *arg_name = 0;\n   tree fndecl = current_function_decl;\n   tree fntype = TREE_TYPE (fndecl);\n   tree fnargs = DECL_ARGUMENTS (fndecl);\n@@ -6830,7 +6821,8 @@ mips_expand_prologue ()\n \t\t split.  */\n \t      /* ??? There is no DImode ori immediate pattern, so we can only\n \t\t do this for 32 bit code.  */\n-\t      if (large_int (tsize_rtx) && GET_MODE (tmp_rtx) == SImode)\n+\t      if (large_int (tsize_rtx, GET_MODE (tsize_rtx))\n+\t\t  && GET_MODE (tmp_rtx) == SImode)\n \t\t{\n \t\t  insn = emit_move_insn (tmp_rtx,\n \t\t\t\t\t GEN_INT (tsize & 0xffff0000));\n@@ -6960,7 +6952,7 @@ function_epilogue (file, size)\n      FILE *file ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n {\n-  char *fnname;\n+  const char *fnname;\n \n #ifndef FUNCTION_NAME_ALREADY_DECLARED\n   /* Get the function name the same way that toplev.c does before calling\n@@ -6981,7 +6973,7 @@ function_epilogue (file, size)\n       int num_gp_regs = current_frame_info.gp_reg_size / 4;\n       int num_fp_regs = current_frame_info.fp_reg_size / 8;\n       int num_regs = num_gp_regs + num_fp_regs;\n-      char *name = fnname;\n+      const char *name = fnname;\n \n       if (name[0] == '*')\n \tname++;\n@@ -7803,7 +7795,7 @@ mips16_constant (x, mode, addr, addend)\n          ASM_GENERATE_INTERNAL_LABEL as called by output_constant_def.  */\n       if (SYMBOL_REF_FLAG (x))\n \t{\n-\t  char *name = XSTR (x, 0);\n+\t  const char *name = XSTR (x, 0);\n \n \t  return (name[0] == '*'\n \t\t  && strncmp (name + 1, LOCAL_LABEL_PREFIX,\n@@ -7902,7 +7894,7 @@ static void\n build_mips16_function_stub (file)\n      FILE *file;\n {\n-  char *fnname;\n+  const char *fnname;\n   char *secname, *stubname;\n   tree stubid, stubdecl;\n   int need_comma;\n@@ -8014,7 +8006,8 @@ build_mips16_call_stub (retval, fnmem, arg_size, fp_code)\n {\n   int fpret;\n   rtx fn;\n-  char *fnname, *secname, *stubname;\n+  const char *fnname;\n+  char *secname, *stubname;\n   struct mips16_stub *l;\n   tree stubid, stubdecl;\n   int need_comma;\n@@ -8958,15 +8951,15 @@ mips_output_conditional_branch (insn,\n   int need_z_p;\n   /* A string to use in the assembly output to represent the first\n      operand.  */\n-  char *op1 = \"%z2\";\n+  const char *op1 = \"%z2\";\n   /* A string to use in the assembly output to represent the second\n      operand.  Use the hard-wired zero register if there's no second\n      operand.  */\n-  char *op2 = (two_operands_p ? \",%z3\" : \",%.\");\n+  const char *op2 = (two_operands_p ? \",%z3\" : \",%.\");\n   /* The operand-printing string for the comparison.  */\n-  char *comp = (float_p ? \"%F0\" : \"%C0\");\n+  const char *comp = (float_p ? \"%F0\" : \"%C0\");\n   /* The operand-printing string for the inverted comparison.  */\n-  char *inverted_comp = (float_p ? \"%W0\" : \"%N0\");\n+  const char *inverted_comp = (float_p ? \"%W0\" : \"%N0\");\n \n   /* The MIPS processors (for levels of the ISA at least two), have\n      \"likely\" variants of each branch instruction.  These instructions\n@@ -9067,7 +9060,7 @@ mips_output_conditional_branch (insn,\n \t   would otherwise; that way we skip the annulled instruction\n \t   in the delay slot.  */\n \n-\tchar *target \n+\tconst char *target \n \t  = ((mips_branch_likely || length == 16) ? \".+16\" : \".+12\");\n \tchar *c;\n \n@@ -9144,10 +9137,10 @@ mips_output_conditional_branch (insn,\n \t   anything.  */\n \n \t/* The target of the reversed branch.  */\n-\tchar *target \n+\tconst char *target \n \t  = ((mips_branch_likely || length == 20) ? \".+20\" : \".+16\");\n-\tchar *at_register = mips_reg_names[ASSEMBLER_SCRATCH_REGNUM];\n-\tchar *gp_register = mips_reg_names[PIC_OFFSET_TABLE_REGNUM];\n+\tconst char *at_register = mips_reg_names[ASSEMBLER_SCRATCH_REGNUM];\n+\tconst char *gp_register = mips_reg_names[PIC_OFFSET_TABLE_REGNUM];\n \tchar *c;\n \n \tstrcpy (buffer, \"%(%<%[\");"}, {"sha": "af23615ef506f579120bae09a8294425f1838795", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 4, "deletions": 135, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -160,132 +160,9 @@ extern struct rtx_def *embedded_pic_fnaddr_rtx;\t/* function address */\n extern int mips_string_length;\t\t/* length of strings for mips16 */\n extern struct rtx_def *mips16_gp_pseudo_rtx; /* psuedo reg holding $gp */\n \n-/* Functions within mips.c that we reference.  Some of these return\n-   type HOST_WIDE_INT, so define that here.  */\n-\n-#include \"hwint.h\"\n-\n-extern int\t\tarith32_operand ();\n-extern int\t\tarith_operand ();\n-extern int\t\tcmp_op ();\n-#ifdef HOST_WIDE_INT\n-extern HOST_WIDE_INT\tcompute_frame_size ();\n-#endif\n-extern int\t\tconst_float_1_operand ();\n-extern void\t\texpand_block_move ();\n-extern int\t\tequality_op ();\n-extern void\t\tfinal_prescan_insn ();\n-extern struct rtx_def *\tfunction_arg ();\n-extern void\t\tfunction_arg_advance ();\n-extern int\t\tfunction_arg_partial_nregs ();\n-extern int\t\tfunction_arg_pass_by_reference ();\n-extern void\t\tfunction_epilogue ();\n-extern void\t\tfunction_prologue ();\n-extern void\t\tgen_conditional_branch ();\n-extern void\t\tgen_conditional_move ();\n-extern struct rtx_def * gen_int_relational ();\n-extern void\t\tinit_cumulative_args ();\n-extern int\t\tlarge_int ();\n-extern void\t\tmachine_dependent_reorg ();\n-extern int\t\tmips_address_cost ();\n-extern void\t\tmips_asm_file_end ();\n-extern void\t\tmips_asm_file_start ();\n-extern int\t\tmips_can_use_return_insn ();\n-extern int\t\tmips_const_double_ok ();\n-extern void\t\tmips_count_memory_refs ();\n-#ifdef HOST_WIDE_INT\n-extern HOST_WIDE_INT\tmips_debugger_offset ();\n-#endif\n-extern void\t\tmips_declare_object ();\n-extern int\t\tmips_epilogue_delay_slots ();\n-extern void\t\tmips_expand_epilogue ();\n-extern void\t\tmips_expand_prologue ();\n-extern int\t\tmips_check_split ();\n-extern char\t       *mips_fill_delay_slot ();\n-extern const char       *mips_move_1word ();\n-extern const char       *mips_move_2words ();\n-extern void\t\tmips_output_double ();\n-extern int\t\tmips_output_external ();\n-extern void\t\tmips_output_float ();\n-extern void\t\tmips_output_filename ();\n-extern void\t\tmips_output_lineno ();\n-extern const char       *output_block_move ();\n-extern void\t\toverride_options ();\n-extern int\t\tpc_or_label_operand ();\n-extern void\t\tprint_operand_address ();\n-extern void\t\tprint_operand ();\n-extern void\t\tprint_options ();\n-extern int\t\treg_or_0_operand ();\n-extern int\t\ttrue_reg_or_0_operand ();\n-extern int\t\tsimple_epilogue_p ();\n-extern int\t\tsimple_memory_operand ();\n-extern int\t\tdouble_memory_operand ();\n-extern int\t\tsmall_int ();\n-extern void\t\ttrace ();\n-extern int\t\tuns_arith_operand ();\n-extern struct rtx_def *\tembedded_pic_offset ();\n-extern void\t\tmips_order_regs_for_local_alloc ();\n-extern struct rtx_def *\tmips16_gp_pseudo_reg ();\n-extern struct rtx_def * mips16_gp_offset ();\n-extern int\t\tmips16_gp_offset_p ();\n-extern int\t\tmips16_constant ();\n-extern int\t\tmips16_constant_after_function_p ();\n-extern int\t\tbuild_mips16_call_stub ();\n-extern char  \t       *mips_output_conditional_branch ();\n-extern int              mips_adjust_insn_length ();\n-\n-/* Recognition functions that return if a condition is true.  */\n-extern int\t\taddress_operand ();\n-extern int\t\tcall_insn_operand ();\n-extern int\t\tconst_double_operand ();\n-extern int\t\tconst_int_operand ();\n-extern int\t\tconsttable_operand ();\n-extern int\t\tgeneral_operand ();\n-extern int\t\timmediate_operand ();\n-extern int\t\tmemory_address_p ();\n-extern int\t\tmemory_operand ();\n-extern int\t\tnonimmediate_operand ();\n-extern int\t\tnonmemory_operand ();\n-extern int\t\tpic_address_needs_scratch ();\n-extern int\t\tregister_operand ();\n-extern int\t\tscratch_operand ();\n-extern int\t\tmove_operand ();\n-extern int\t\tmovdi_operand ();\n-extern int\t\tse_register_operand ();\n-extern int\t\tse_reg_or_0_operand ();\n-extern int\t\tse_uns_arith_operand ();\n-extern int\t\tse_arith_operand ();\n-extern int\t\tse_nonmemory_operand ();\n-extern int\t\tse_nonimmediate_operand ();\n-extern int              extend_operator ();\n-extern int              highpart_shift_operator ();\n-extern int\t\tm16_uimm3_b ();\n-extern int\t\tm16_simm4_1 ();\n-extern int\t\tm16_nsimm4_1 ();\n-extern int\t\tm16_simm5_1 ();\n-extern int\t\tm16_nsimm5_1 ();\n-extern int\t\tm16_uimm5_4 ();\n-extern int\t\tm16_nuimm5_4 ();\n-extern int\t\tm16_simm8_1 ();\n-extern int\t\tm16_nsimm8_1 ();\n-extern int\t\tm16_uimm8_1 ();\n-extern int\t\tm16_nuimm8_1 ();\n-extern int\t\tm16_uimm8_m1_1 ();\n-extern int\t\tm16_uimm8_4 ();\n-extern int\t\tm16_nuimm8_4 ();\n-extern int\t\tm16_simm8_8 ();\n-extern int\t\tm16_nsimm8_8 ();\n-extern int\t\tm16_usym8_4 ();\n-extern int\t\tm16_usym5_4 ();\n-\n /* Functions to change what output section we are using.  */\n-extern void\t\tdata_section ();\n-extern void\t\trdata_section ();\n-extern void\t\treadonly_data_section ();\n-extern void\t\tsdata_section ();\n-extern void\t\ttext_section ();\n-extern void\t\tmips_select_rtx_section ();\n-extern void\t\tmips_select_section ();\n+extern void\t\trdata_section PARAMS ((void));\n+extern void\t\tsdata_section PARAMS ((void));\n \n /* Stubs for half-pic support if not OSF/1 reference platform.  */\n \n@@ -2072,10 +1949,6 @@ extern enum reg_class mips_char_to_class[];\n #define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, X)\t\t\t\\\n   mips_secondary_reload_class (CLASS, MODE, X, 0)\n \n-/* Not declared above, with the other functions, because enum\n-   reg_class is not declared yet.  */\n-extern enum reg_class\tmips_secondary_reload_class ();\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n \n@@ -2623,10 +2496,6 @@ typedef struct mips_args {\n /* Implement `va_arg'.  */\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   mips_va_arg (valist, type)\n-\n-extern union tree_node *mips_build_va_list ();\n-extern void mips_va_start ();\n-extern struct rtx_def *mips_va_arg ();\n \f\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n@@ -2861,8 +2730,8 @@ extern struct rtx_def *mips_va_arg ();\n    the `symbol_ref' in order to determine the section.  */\n \n #if 1\n-#define GO_PRINTF(x)\ttrace(x)\n-#define GO_PRINTF2(x,y)\ttrace(x,y)\n+#define GO_PRINTF(x)\tfprintf(stderr, (x))\n+#define GO_PRINTF2(x,y)\tfprintf(stderr, (x), (y))\n #define GO_DEBUG_RTX(x) debug_rtx(x)\n \n #else"}, {"sha": "c269bcd787eabb502ea6a7f3c4c098ca73a210af", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -4140,7 +4140,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n   xoperands[0] = operands[0];\n   xoperands[1] = operands[2];\n-  output_asm_insn (mips_move_2words (xoperands, insn, FALSE), xoperands);\n+  output_asm_insn (mips_move_2words (xoperands, insn), xoperands);\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"fcvt\")\n@@ -4167,7 +4167,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \n   xoperands[0] = operands[0];\n   xoperands[1] = operands[2];\n-  output_asm_insn (mips_move_2words (xoperands, insn, FALSE), xoperands);\n+  output_asm_insn (mips_move_2words (xoperands, insn), xoperands);\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\"\t\"fcvt\")"}, {"sha": "d42089f08aee2652ef7cbf5ac301eb64e9f3ab3d", "filename": "gcc/config/mips/xm-iris6.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fxm-iris6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fconfig%2Fmips%2Fxm-iris6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-iris6.h?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -2,7 +2,11 @@\n #ifndef __GNUC__\n #include <alloca.h>\n #else\n+# ifdef __SIZE_TYPE__\n+extern void *alloca (__SIZE_TYPE__);\n+# else\n extern void *alloca ();\n+# endif /* __SIZE_TYPE__ */\n #endif\n \n #include \"mips/xm-mips.h\""}, {"sha": "5d6a4925e3a8b9f7d802b1713f9edcdaaaf8e6f7", "filename": "gcc/genpeep.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fgenpeep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd9f1972b943614a89c72e9fa5a79aa330f11e98/gcc%2Fgenpeep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpeep.c?ref=bd9f1972b943614a89c72e9fa5a79aa330f11e98", "patch": "@@ -432,6 +432,7 @@ from the machine description file `md'.  */\\n\\n\");\n   printf (\"#include \\\"system.h\\\"\\n\");\n   printf (\"#include \\\"insn-config.h\\\"\\n\");\n   printf (\"#include \\\"rtl.h\\\"\\n\");\n+  printf (\"#include \\\"tm_p.h\\\"\\n\");\n   printf (\"#include \\\"regs.h\\\"\\n\");\n   printf (\"#include \\\"output.h\\\"\\n\");\n   printf (\"#include \\\"real.h\\\"\\n\");"}]}