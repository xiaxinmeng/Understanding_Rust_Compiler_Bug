{"sha": "2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2NmFlYjNhYmNiZmFiYTliZWZmZDRhOGEwOTIzZDI3ZDU1MWY2Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-04-07T18:09:55Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-04-07T18:09:55Z"}, "message": "re PR c++/80095 (ICE with this pointer in NSDMI)\n\n\tPR c++/80095\n\t* call.c (build_over_call): Don't check cxx_dialect.\n\t* cp-gimplify.c (cp_gimplify_init_expr): Don't check cxx_dialect nor\n\twhether SUB is a CONSTRUCTOR.\n\t* init.c (build_new_1): Don't check cxx_dialect.\n\t* tree.c (replace_placeholders): Add a function comment.  Return if\n\tnot in C++14, or if the object isn't a (member of a) class.\n\t* typeck2.c (store_init_value): Don't check cxx_dialect nor whether\n\tTYPE is CLASS_TYPE_P.\n\n\t* g++.dg/cpp1y/nsdmi-aggr8.C: New test.\n\nFrom-SVN: r246772", "tree": {"sha": "5e6e09cee58eb9f9d7eacc47fb47f9ffd755b985", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e6e09cee58eb9f9d7eacc47fb47f9ffd755b985"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ef532f452a10223cf9cd8f6955f066149d78498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef532f452a10223cf9cd8f6955f066149d78498", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef532f452a10223cf9cd8f6955f066149d78498"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "a31d114374f29aea0b4442c33e6634e22b76eada", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -3,6 +3,16 @@\n \tPR sanitizer/80348\n \t* typeck.c (cp_build_binary_op): Convert COP[01] to ORIG_TYPE.\n \n+\tPR c++/80095\n+\t* call.c (build_over_call): Don't check cxx_dialect.\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Don't check cxx_dialect nor\n+\twhether SUB is a CONSTRUCTOR.\n+\t* init.c (build_new_1): Don't check cxx_dialect.\n+\t* tree.c (replace_placeholders): Add a function comment.  Return if\n+\tnot in C++14, or if the object isn't a (member of a) class.\n+\t* typeck2.c (store_init_value): Don't check cxx_dialect nor whether\n+\tTYPE is CLASS_TYPE_P.\n+\n 2017-04-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/80309"}, {"sha": "c15b8e46f34b93bb1d16ebb68e35e0e1759b6c7f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -8047,9 +8047,8 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t{\n \t  arg = cp_build_indirect_ref (arg, RO_NULL, complain);\n \t  val = build2 (MODIFY_EXPR, TREE_TYPE (to), to, arg);\n-\t  if (cxx_dialect >= cxx14)\n-\t    /* Handle NSDMI that refer to the object being initialized.  */\n-\t    replace_placeholders (arg, to);\n+\t  /* Handle NSDMI that refer to the object being initialized.  */\n+\t  replace_placeholders (arg, to);\n \t}\n       else\n \t{"}, {"sha": "f2c52963a9fceb1adbaf744ad715474cbd0dc7a4", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -496,9 +496,8 @@ cp_gimplify_init_expr (tree *expr_p)\n \t    TREE_TYPE (from) = void_type_node;\n \t}\n \n-      if (cxx_dialect >= cxx14 && TREE_CODE (sub) == CONSTRUCTOR)\n-\t/* Handle aggregate NSDMI.  */\n-\treplace_placeholders (sub, to);\n+      /* Handle aggregate NSDMI.  */\n+      replace_placeholders (sub, to);\n \n       if (t == sub)\n \tbreak;"}, {"sha": "bfa902050cbbed0b03168a66832bcb777e2f2f7d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -3373,8 +3373,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t     object being initialized, replace them now and don't try to\n \t     preevaluate.  */\n \t  bool had_placeholder = false;\n-\t  if (cxx_dialect >= cxx14\n-\t      && !processing_template_decl\n+\t  if (!processing_template_decl\n \t      && TREE_CODE (init_expr) == INIT_EXPR)\n \t    TREE_OPERAND (init_expr, 1)\n \t      = replace_placeholders (TREE_OPERAND (init_expr, 1),"}, {"sha": "99391352e3a2072422258d1b6d04a540267dd1d1", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -2813,9 +2813,23 @@ replace_placeholders_r (tree* t, int* walk_subtrees, void* data_)\n   return NULL_TREE;\n }\n \n+/* Replace PLACEHOLDER_EXPRs in EXP with object OBJ.  SEEN_P is set if\n+   a PLACEHOLDER_EXPR has been encountered.  */\n+\n tree\n replace_placeholders (tree exp, tree obj, bool *seen_p)\n {\n+  /* This is only relevant for C++14.  */\n+  if (cxx_dialect < cxx14)\n+    return exp;\n+\n+  /* If the object isn't a (member of a) class, do nothing.  */\n+  tree op0 = obj;\n+  while (TREE_CODE (op0) == COMPONENT_REF)\n+    op0 = TREE_OPERAND (op0, 0);\n+  if (!CLASS_TYPE_P (strip_array_types (TREE_TYPE (op0))))\n+    return exp;\n+\n   tree *tp = &exp;\n   replace_placeholders_t data = { obj, false };\n   if (TREE_CODE (exp) == TARGET_EXPR)"}, {"sha": "1f0eb454754bcf55a4250e11158f36b94a8c2efd", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -840,9 +840,8 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n     }\n   value = cp_fully_fold (value);\n \n-  if (cxx_dialect >= cxx14 && CLASS_TYPE_P (strip_array_types (type)))\n-    /* Handle aggregate NSDMI in non-constant initializers, too.  */\n-    value = replace_placeholders (value, decl);\n+  /* Handle aggregate NSDMI in non-constant initializers, too.  */\n+  value = replace_placeholders (value, decl);\n \n   /* DECL may change value; purge caches.  */\n   clear_cv_and_fold_caches ();"}, {"sha": "6150f74622961865054cb4b4201568da34a5c613", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -3,6 +3,9 @@\n \tPR sanitizer/80348\n \t* g++.dg/ubsan/div-by-zero-2.C: New test.\n \n+\tPR c++/80095\n+\t* g++.dg/cpp1y/nsdmi-aggr8.C: New test.\n+\n 2017-04-07  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/70478"}, {"sha": "8c99ffbc4c11ef3ca0f09ae42b8b759b9d3fecba", "filename": "gcc/testsuite/g++.dg/cpp1y/nsdmi-aggr8.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2166aeb3abcbfaba9beffd4a8a0923d27d551f6c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fnsdmi-aggr8.C?ref=2166aeb3abcbfaba9beffd4a8a0923d27d551f6c", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/80095\n+// { dg-do compile { target c++14 } }\n+\n+struct A\n+{\n+  void* p = this;\n+};\n+\n+void\n+foo ()\n+{\n+  const A& a = A{};\n+  A&& a2 = A{};\n+  const A& a3{};\n+  A&& a4{};\n+}"}]}