{"sha": "fcc13d6fc31441b5672b68a5e3b247687724218f", "node_id": "C_kwDOANBUbNoAKGZjYzEzZDZmYzMxNDQxYjU2NzJiNjhhNWUzYjI0NzY4NzcyNDIxOGY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-07T18:58:07Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-08T11:19:19Z"}, "message": "libstdc++: Implement ostream insertion for chrono::duration\n\nThis is a missing piece of the C++20 <chrono> header.\n\nIt would be good to move the code into the compiled library, so that we\ndon't need <sstream> in <chrono>. It could also use spanstream in C++20,\nto avoid memory allocations. That can be changed at a later date.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/chrono (__detail::__units_suffix_misc): New\n\thelper function.\n\t(__detail::__units_suffix): Likewise.\n\t(chrono::operator<<(basic_ostream&, const duration&)): Define.\n\t* testsuite/20_util/duration/io.cc: New test.", "tree": {"sha": "e4c9c43b0ef1e43c52b5781938dad73a8e9aef70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4c9c43b0ef1e43c52b5781938dad73a8e9aef70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcc13d6fc31441b5672b68a5e3b247687724218f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc13d6fc31441b5672b68a5e3b247687724218f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc13d6fc31441b5672b68a5e3b247687724218f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc13d6fc31441b5672b68a5e3b247687724218f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3d7270b42fe27fb05664c4fdf524ab7ad13a75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3d7270b42fe27fb05664c4fdf524ab7ad13a75"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "0662e26348f9d0aab5353e4fce36a65ae59e66a2", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc13d6fc31441b5672b68a5e3b247687724218f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc13d6fc31441b5672b68a5e3b247687724218f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=fcc13d6fc31441b5672b68a5e3b247687724218f", "patch": "@@ -37,6 +37,10 @@\n #else\n \n #include <bits/chrono.h>\n+#if __cplusplus > 201703L\n+# include <sstream> // ostringstream\n+# include <bits/charconv.h>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n@@ -2077,6 +2081,101 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// @}\n   } // inline namespace chrono_literals\n   } // inline namespace literals\n+\n+  namespace chrono\n+  {\n+    /// @addtogroup chrono\n+    /// @{\n+\n+    /// @cond undocumented\n+    namespace __detail\n+    {\n+      template<typename _Period>\n+\tconst char*\n+\t__units_suffix_misc(char* __buf, size_t __n) noexcept\n+\t{\n+\t  namespace __tc = std::__detail;\n+\t  char* __p = __buf;\n+\t  __p[0] = '[';\n+\t  unsigned __nlen = __tc::__to_chars_len((uintmax_t)_Period::num);\n+\t  __tc::__to_chars_10_impl(__p + 1, __nlen, (uintmax_t)_Period::num);\n+\t  __p += 1 + __nlen;\n+\t  if constexpr (_Period::den != 1)\n+\t    {\n+\t      __p[0] = '/';\n+\t      unsigned __dlen = __tc::__to_chars_len((uintmax_t)_Period::den);\n+\t      __tc::__to_chars_10_impl(__p + 1, __dlen, (uintmax_t)_Period::den);\n+\t      __p += 1 + __dlen;\n+\t    }\n+\t  __p[0] = ']';\n+\t  __p[1] = 's';\n+\t  __p[2] = '\\0';\n+\t  return __buf;\n+\t}\n+\n+      template<typename _Period, typename _CharT>\n+\tauto\n+\t__units_suffix(char* __buf, size_t __n) noexcept\n+\t{\n+#define _GLIBCXX_UNITS_SUFFIX(period, suffix) \\\n+\tif constexpr (is_same_v<_Period, period>)\t\\\n+\t  {\t\t\t\t\t\t\\\n+\t    if constexpr (is_same_v<_CharT, wchar_t>)\t\\\n+\t      return L##suffix;\t\t\t\t\\\n+\t    else\t\t\t\t\t\\\n+\t      return suffix;\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\\\n+\telse\n+\n+\t  _GLIBCXX_UNITS_SUFFIX(atto, \"as\")\n+\t  _GLIBCXX_UNITS_SUFFIX(femto, \"fs\")\n+\t  _GLIBCXX_UNITS_SUFFIX(pico, \"ps\")\n+\t  _GLIBCXX_UNITS_SUFFIX(nano, \"ns\")\n+\t  _GLIBCXX_UNITS_SUFFIX(micro, \"\\u00b5s\")\n+\t  _GLIBCXX_UNITS_SUFFIX(milli, \"ms\")\n+\t  _GLIBCXX_UNITS_SUFFIX(centi, \"cs\")\n+\t  _GLIBCXX_UNITS_SUFFIX(deci, \"ds\")\n+\t  _GLIBCXX_UNITS_SUFFIX(ratio<1>, \"s\")\n+\t  _GLIBCXX_UNITS_SUFFIX(deca, \"das\")\n+\t  _GLIBCXX_UNITS_SUFFIX(hecto, \"hs\")\n+\t  _GLIBCXX_UNITS_SUFFIX(kilo, \"ks\")\n+\t  _GLIBCXX_UNITS_SUFFIX(mega, \"Ms\")\n+\t  _GLIBCXX_UNITS_SUFFIX(giga, \"Gs\")\n+\t  _GLIBCXX_UNITS_SUFFIX(tera, \"Ts\")\n+\t  _GLIBCXX_UNITS_SUFFIX(tera, \"Ts\")\n+\t  _GLIBCXX_UNITS_SUFFIX(peta, \"Ps\")\n+\t  _GLIBCXX_UNITS_SUFFIX(exa, \"Es\")\n+\t  _GLIBCXX_UNITS_SUFFIX(ratio<60>, \"min\")\n+\t  _GLIBCXX_UNITS_SUFFIX(ratio<3600>, \"h\")\n+\t  _GLIBCXX_UNITS_SUFFIX(ratio<86400>, \"d\")\n+#undef _GLIBCXX_UNITS_SUFFIX\n+\t  return __detail::__units_suffix_misc<_Period>(__buf, __n);\n+\t}\n+    } // namespace __detail\n+    /// @endcond\n+\n+    template<typename _CharT, typename _Traits,\n+\t     typename _Rep, typename _Period>\n+      inline basic_ostream<_CharT, _Traits>&\n+      operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n+\t\tconst duration<_Rep, _Period>& __d)\n+      {\n+\tusing period = typename _Period::type;\n+\tchar __buf[sizeof(\"[/]s\") + 2 * numeric_limits<intmax_t>::digits10];\n+\tstd::basic_ostringstream<_CharT, _Traits> __s;\n+\t__s.flags(__os.flags());\n+\t__s.imbue(__os.getloc());\n+\t__s.precision(__os.precision());\n+\t__s << __d.count();\n+\t__s << __detail::__units_suffix<period, _CharT>(__buf, sizeof(__buf));\n+\t__os << std::move(__s).str();\n+\treturn __os;\n+      }\n+\n+    // TODO: from_stream for duration\n+\n+    /// @} group chrono\n+  } // namespace chrono\n #endif // C++20\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "405e1afa44066f3d7357b013cc05e02a6a25e995", "filename": "libstdc++-v3/testsuite/20_util/duration/io.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc13d6fc31441b5672b68a5e3b247687724218f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc13d6fc31441b5672b68a5e3b247687724218f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fduration%2Fio.cc?ref=fcc13d6fc31441b5672b68a5e3b247687724218f", "patch": "@@ -0,0 +1,54 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do run { target c++20 } }\n+\n+#include <chrono>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::chrono;\n+  std::stringstream ss;\n+  ss << 0s << '\\n';\n+  ss << 3h + 5min << '\\n';\n+  ss << duration<long, std::ratio<2>>(3) << '\\n';\n+  ss << duration<long, std::ratio<2, 3>>(9) << '\\n';\n+  std::string s;\n+  std::getline(ss, s);\n+  VERIFY( s == \"0s\" );\n+  std::getline(ss, s);\n+  VERIFY( s == \"185min\" );\n+  std::getline(ss, s);\n+  VERIFY( s == \"3[2]s\" );\n+  std::getline(ss, s);\n+  VERIFY( s == \"9[2/3]s\" );\n+}\n+\n+void\n+test02()\n+{\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using namespace std::chrono;\n+  std::wstringstream ss;\n+  ss << 0s << L'\\n';\n+  ss << 3h + 5min << L'\\n';\n+  ss << duration<long, std::ratio<2>>(3) << L'\\n';\n+  ss << duration<long, std::ratio<2, 3>>(9) << L'\\n';\n+  std::wstring s;\n+  std::getline(ss, s);\n+  VERIFY( s == L\"0s\" );\n+  std::getline(ss, s);\n+  VERIFY( s == L\"185min\" );\n+  std::getline(ss, s);\n+  VERIFY( s == L\"3[2]s\" );\n+  std::getline(ss, s);\n+  VERIFY( s == L\"9[2/3]s\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}