{"sha": "48749dbcc461753861059d1fc48c40d2e0aefaa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3NDlkYmNjNDYxNzUzODYxMDU5ZDFmYzQ4YzQwZDJlMGFlZmFhMg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-03T17:50:06Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-12-03T17:50:06Z"}, "message": "re PR fortran/44054 (Handle -Werror, -Werror=, -fdiagnostics-show-option, !GCC$ diagnostic (pragmas) and color)\n\ngcc/testsuite/ChangeLog:\n\n2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* gfortran.dg/warnings_are_errors_1.f90: Update warnings to errors.\n\t* gfortran.dg/warnings_are_errors_1.f: Likewise.\n\ngcc/fortran/ChangeLog:\n\n2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* gfortran.h (gfc_warning): Now returns bool. Add overload that\n\taccepts opt.\n\t(gfc_warning_1): Declare.\n\t* error.c\n\t(pp_warning_buffer,warningcount_buffered,werrorcount_buffered):\tNew.\n\t(gfc_buffer_error): Set pp_warning_buffer.flush_p.\n\t(gfc_clear_pp_buffer): New.\n\t(gfc_warning_1): Renamed from gfc_warning.\n\t(gfc_warning): Add three new overloads. One that takes just a\n\tformat string and ellipsis, another that takes also a warning\n\toption, and another that takes also va_list instead of ellipsis.\n\t(gfc_clear_warning): Clear pp_warning_buffer.\n\t(gfc_warning_check): Flush pp_warning_buffer and update warning\n\tand werror counters.\n\t(gfc_diagnostics_init): Init pp_warning_buffer.\n\n\t* Update all gfc_warning calls that do not multiple\n\tlocations to use %qs and OPT_W*, otherwise use gfc_warning_1.\n\ngcc/ChangeLog:\n\n2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/44054\n\t* pretty-print.c (output_buffer::output_buffer): Init flush_p to true.\n\t(pp_flush): Flush only if flush_p.\n\t(pp_really_flush): New.\n\t* pretty-print.h (struct output_buffer): Add flush_p.\n\t(pp_really_flush): Declare.\n\nFrom-SVN: r218326", "tree": {"sha": "ffa63d8c289a7c4e01689478d728abff9b4c33ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa63d8c289a7c4e01689478d728abff9b4c33ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48749dbcc461753861059d1fc48c40d2e0aefaa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48749dbcc461753861059d1fc48c40d2e0aefaa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48749dbcc461753861059d1fc48c40d2e0aefaa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48749dbcc461753861059d1fc48c40d2e0aefaa2/comments", "author": null, "committer": null, "parents": [{"sha": "d6d34aa9133afdee0ca74b354a72cb720f431c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6d34aa9133afdee0ca74b354a72cb720f431c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6d34aa9133afdee0ca74b354a72cb720f431c1a"}], "stats": {"total": 453, "additions": 342, "deletions": 111}, "files": [{"sha": "42a55e15a3cc108c66ed2a45cd57edac49c848e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1,3 +1,12 @@\n+2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* pretty-print.c (output_buffer::output_buffer): Init flush_p to true.\n+\t(pp_flush): Flush only if flush_p.\n+\t(pp_really_flush): New.\n+\t* pretty-print.h (struct output_buffer): Add flush_p.\n+\t(pp_really_flush): Declare.\n+\n 2014-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in (ALL_HOST_BACKEND_OBJS): Add $(GENGTYPE_OBJS),"}, {"sha": "c645b6fd401faee185411b09cdf82882a0bcbe1d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1,3 +1,25 @@\n+2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.h (gfc_warning): Now returns bool. Add overload that\n+\taccepts opt.\n+\t(gfc_warning_1): Declare.\n+\t* error.c\n+\t(pp_warning_buffer,warningcount_buffered,werrorcount_buffered):\tNew.\n+\t(gfc_buffer_error): Set pp_warning_buffer.flush_p.\n+\t(gfc_clear_pp_buffer): New.\n+\t(gfc_warning_1): Renamed from gfc_warning.\n+\t(gfc_warning): Add three new overloads. One that takes just a\n+\tformat string and ellipsis, another that takes also a warning\n+\toption, and another that takes also va_list instead of ellipsis.\n+\t(gfc_clear_warning): Clear pp_warning_buffer.\n+\t(gfc_warning_check): Flush pp_warning_buffer and update warning\n+\tand werror counters.\n+\t(gfc_diagnostics_init): Init pp_warning_buffer.\n+\n+\t* Update all gfc_warning calls that do not use multiple\n+\tlocations to use %qs and OPT_W*, otherwise use gfc_warning_1.\n+\n 2014-12-02  Tobias Burnus  <burnus@net-b.de>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "c692e623349d1a1ad4e41cad405b170999ae5696", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -545,7 +545,7 @@ check_result (arith rc, gfc_expr *x, gfc_expr *r, gfc_expr **rp)\n   if (val == ARITH_UNDERFLOW)\n     {\n       if (warn_underflow)\n-\tgfc_warning (gfc_arith_error (val), &x->where);\n+\tgfc_warning (OPT_Wunderflow, gfc_arith_error (val), &x->where);\n       val = ARITH_OK;\n     }\n \n@@ -2078,7 +2078,7 @@ gfc_real2real (gfc_expr *src, int kind)\n   if (rc == ARITH_UNDERFLOW)\n     {\n       if (warn_underflow)\n-\tgfc_warning (gfc_arith_error (rc), &src->where);\n+\tgfc_warning (OPT_Woverflow, gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n@@ -2109,7 +2109,7 @@ gfc_real2complex (gfc_expr *src, int kind)\n   if (rc == ARITH_UNDERFLOW)\n     {\n       if (warn_underflow)\n-\tgfc_warning (gfc_arith_error (rc), &src->where);\n+\tgfc_warning (OPT_Woverflow, gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (mpc_realref (result->value.complex), 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n@@ -2164,7 +2164,7 @@ gfc_complex2real (gfc_expr *src, int kind)\n   if (rc == ARITH_UNDERFLOW)\n     {\n       if (warn_underflow)\n-\tgfc_warning (gfc_arith_error (rc), &src->where);\n+\tgfc_warning (OPT_Woverflow, gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n     }\n   if (rc != ARITH_OK)\n@@ -2195,7 +2195,7 @@ gfc_complex2complex (gfc_expr *src, int kind)\n   if (rc == ARITH_UNDERFLOW)\n     {\n       if (warn_underflow)\n-\tgfc_warning (gfc_arith_error (rc), &src->where);\n+\tgfc_warning (OPT_Woverflow, gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (mpc_realref (result->value.complex), 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n@@ -2210,7 +2210,7 @@ gfc_complex2complex (gfc_expr *src, int kind)\n   if (rc == ARITH_UNDERFLOW)\n     {\n       if (warn_underflow)\n-\tgfc_warning (gfc_arith_error (rc), &src->where);\n+\tgfc_warning (OPT_Woverflow, gfc_arith_error (rc), &src->where);\n       mpfr_set_ui (mpc_imagref (result->value.complex), 0, GFC_RND_MODE);\n     }\n   else if (rc != ARITH_OK)\n@@ -2280,7 +2280,7 @@ hollerith2representation (gfc_expr *result, gfc_expr *src)\n \n   if (src_len > result_len)\n     {\n-      gfc_warning (\"The Hollerith constant at %L is too long to convert to %s\",\n+      gfc_warning (\"The Hollerith constant at %L is too long to convert to %qs\",\n \t\t   &src->where, gfc_typename(&result->ts));\n     }\n "}, {"sha": "c3f78e1c24805c2610e61c037aab0d690b34ba78", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -5081,9 +5081,9 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n     return true;\n \n   if (source_size < result_size)\n-    gfc_warning(\"Intrinsic TRANSFER at %L has partly undefined result: \"\n-\t\t\"source size %ld < result size %ld\", &source->where,\n-\t\t(long) source_size, (long) result_size);\n+    gfc_warning (\"Intrinsic TRANSFER at %L has partly undefined result: \"\n+\t\t \"source size %ld < result size %ld\", &source->where,\n+\t\t (long) source_size, (long) result_size);\n \n   return true;\n }"}, {"sha": "f374b9a245cc57badf6b64e9854fd5ea92e45ad5", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1030,8 +1030,9 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t\t\t   sym->name, &(sym->declared_at),\n \t\t\t   sym->ns->proc_name->name);\n \t      else if (warn_c_binding_type)\n-\t\tgfc_warning (\"Variable '%s' at %L is a dummy argument of the \"\n-\t\t\t     \"BIND(C) procedure '%s' but may not be C \"\n+\t\tgfc_warning (OPT_Wc_binding_type,\n+\t\t\t     \"Variable %qs at %L is a dummy argument of the \"\n+\t\t\t     \"BIND(C) procedure %qs but may not be C \"\n \t\t\t     \"interoperable\",\n \t\t\t     sym->name, &(sym->declared_at),\n \t\t\t     sym->ns->proc_name->name);\n@@ -3294,8 +3295,8 @@ gfc_match_import (void)\n \n \t  if (gfc_find_symtree (gfc_current_ns->sym_root, name))\n \t    {\n-\t      gfc_warning (\"'%s' is already IMPORTed from host scoping unit \"\n-\t\t\t   \"at %C.\", name);\n+\t      gfc_warning (\"%qs is already IMPORTed from host scoping unit \"\n+\t\t\t   \"at %C\", name);\n \t      goto next_item;\n \t    }\n \n@@ -4031,7 +4032,8 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n       /* Make sure it wasn't an implicitly typed result.  */\n       if (tmp_sym->attr.implicit_type && warn_c_binding_type)\n \t{\n-\t  gfc_warning (\"Implicitly declared BIND(C) function '%s' at \"\n+\t  gfc_warning (OPT_Wc_binding_type,\n+\t\t       \"Implicitly declared BIND(C) function %qs at \"\n                        \"%L may not be C interoperable\", tmp_sym->name,\n                        &tmp_sym->declared_at);\n \t  tmp_sym->ts.f90_type = tmp_sym->ts.type;\n@@ -4052,9 +4054,10 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n \t  /* See if we're dealing with a sym in a common block or not.\t*/\n \t  if (is_in_common == 1 && warn_c_binding_type)\n \t    {\n-\t      gfc_warning (\"Variable '%s' in common block '%s' at %L \"\n+\t      gfc_warning (OPT_Wc_binding_type,\n+\t\t\t   \"Variable %qs in common block %qs at %L \"\n                            \"may not be a C interoperable \"\n-                           \"kind though common block '%s' is BIND(C)\",\n+                           \"kind though common block %qs is BIND(C)\",\n                            tmp_sym->name, com_block->name,\n                            &(tmp_sym->declared_at), com_block->name);\n \t    }\n@@ -4065,7 +4068,7 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n                            \"interoperable but it is BIND(C)\",\n                            tmp_sym->name, &(tmp_sym->declared_at));\n               else if (warn_c_binding_type)\n-                gfc_warning (\"Variable '%s' at %L \"\n+                gfc_warning (OPT_Wc_binding_type, \"Variable %qs at %L \"\n                              \"may not be a C interoperable \"\n                              \"kind but it is bind(c)\",\n                              tmp_sym->name, &(tmp_sym->declared_at));"}, {"sha": "420ca705496b5b5c4540d208679714f3f392b88e", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -956,7 +956,7 @@ gfc_check_argument_var_dependency (gfc_expr *var, sym_intent intent,\n \t\t     If a dependency is found in the case\n \t\t     elemental == ELEM_CHECK_VARIABLE, we will generate\n \t\t     a temporary, so we don't need to bother the user.  */\n-\t\t  gfc_warning (\"INTENT(%s) actual argument at %L might \"\n+\t\t  gfc_warning_1 (\"INTENT(%s) actual argument at %L might \"\n \t\t\t       \"interfere with actual argument at %L.\",\n \t\t   \t       intent == INTENT_OUT ? \"OUT\" : \"INOUT\",\n \t\t   \t       &var->where, &expr->where);"}, {"sha": "d6475f37248fa6da45873ba71d36d8aad9d8c04e", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 123, "deletions": 1, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -50,6 +50,10 @@ static int terminal_width, buffer_flag, errors, warnings;\n \n static gfc_error_buf error_buffer, warning_buffer, *cur_error_buffer;\n \n+static output_buffer pp_warning_buffer;\n+static int warningcount_buffered, werrorcount_buffered;\n+\n+#include <new> /* For placement-new */\n \n /* Go one level deeper suppressing errors.  */\n \n@@ -122,6 +126,7 @@ void\n gfc_buffer_error (int flag)\n {\n   buffer_flag = flag;\n+  pp_warning_buffer.flush_p = !flag;\n }\n \n \n@@ -804,10 +809,25 @@ gfc_increment_error_count (void)\n }\n \n \n+/* Clear any output buffered in a pretty-print output_buffer.  */\n+\n+static void\n+gfc_clear_pp_buffer (output_buffer *this_buffer)\n+{\n+  pretty_printer *pp = global_dc->printer;\n+  output_buffer *tmp_buffer = pp->buffer;\n+  pp->buffer = this_buffer;\n+  pp_clear_output_area (pp);\n+  pp->buffer = tmp_buffer;\n+}\n+\n+\n /* Issue a warning.  */\n+/* Use gfc_warning instead, unless two locations are used in the same\n+   warning or for scanner.c, if the location is not properly set up.  */\n \n void\n-gfc_warning (const char *gmsgid, ...)\n+gfc_warning_1 (const char *gmsgid, ...)\n {\n   va_list argp;\n \n@@ -833,6 +853,88 @@ gfc_warning (const char *gmsgid, ...)\n }\n \n \n+/* This is just a helper function to avoid duplicating the logic of\n+   gfc_warning.  */\n+\n+static bool\n+gfc_warning (int opt, const char *gmsgid, va_list ap) ATTRIBUTE_GCC_GFC(2,0);\n+\n+static bool\n+gfc_warning (int opt, const char *gmsgid, va_list ap)\n+{\n+  va_list argp;\n+  va_copy (argp, ap);\n+\n+  diagnostic_info diagnostic;\n+  bool fatal_errors = global_dc->fatal_errors;\n+  pretty_printer *pp = global_dc->printer;\n+  output_buffer *tmp_buffer = pp->buffer;\n+  bool buffered_p = !pp_warning_buffer.flush_p;\n+\n+  gfc_clear_pp_buffer (&pp_warning_buffer);\n+\n+  if (buffered_p)\n+    {\n+      pp->buffer = &pp_warning_buffer;\n+      global_dc->fatal_errors = false;\n+      /* To prevent -fmax-errors= triggering.  */\n+      --werrorcount;\n+    }\n+\n+  diagnostic_set_info (&diagnostic, gmsgid, &argp, UNKNOWN_LOCATION,\n+\t\t       DK_WARNING);\n+  diagnostic.option_index = opt;\n+  bool ret = report_diagnostic (&diagnostic);\n+\n+  if (buffered_p)\n+    {\n+      pp->buffer = tmp_buffer;\n+      global_dc->fatal_errors = fatal_errors;\n+\n+      warningcount_buffered = 0;\n+      werrorcount_buffered = 0;\n+      /* Undo the above --werrorcount if not Werror, otherwise\n+\t werrorcount is correct already.  */\n+      if (!ret)\n+\t++werrorcount;\n+      else if (diagnostic.kind == DK_ERROR)\n+\t++werrorcount_buffered;\n+      else \n+\t++werrorcount, --warningcount, ++warningcount_buffered;\n+    }\n+  \n+  va_end (argp);\n+  return ret;\n+}\n+\n+/* Issue a warning.  */\n+/* This function uses the common diagnostics, but does not support\n+   two locations; when being used in scanner.c, ensure that the location\n+   is properly setup. Otherwise, use gfc_warning_1.   */\n+\n+bool\n+gfc_warning (int opt, const char *gmsgid, ...)\n+{\n+  va_list argp;\n+\n+  va_start (argp, gmsgid);\n+  bool ret = gfc_warning (opt, gmsgid, argp);\n+  va_end (argp);\n+  return ret;\n+}\n+\n+bool\n+gfc_warning (const char *gmsgid, ...)\n+{\n+  va_list argp;\n+\n+  va_start (argp, gmsgid);\n+  bool ret = gfc_warning (0, gmsgid, argp);\n+  va_end (argp);\n+  return ret;\n+}\n+\n+\n /* Whether, for a feature included in a given standard set (GFC_STD_*),\n    we should issue an error or a warning, or be quiet.  */\n \n@@ -1176,6 +1278,11 @@ void\n gfc_clear_warning (void)\n {\n   warning_buffer.flag = 0;\n+\n+  gfc_clear_pp_buffer (&pp_warning_buffer);\n+  warningcount_buffered = 0;\n+  werrorcount_buffered = 0;\n+  pp_warning_buffer.flush_p = false;\n }\n \n \n@@ -1192,6 +1299,20 @@ gfc_warning_check (void)\n \tfputs (warning_buffer.message, stderr);\n       warning_buffer.flag = 0;\n     }\n+\n+  /* This is for the new diagnostics machinery.  */\n+  pretty_printer *pp = global_dc->printer;\n+  output_buffer *tmp_buffer = pp->buffer;\n+  pp->buffer = &pp_warning_buffer;\n+  if (pp_last_position_in_text (pp) != NULL)\n+    {\n+      pp_really_flush (pp);\n+      pp_warning_buffer.flush_p = true;\n+      warningcount += warningcount_buffered;\n+      werrorcount += werrorcount_buffered;\n+    }\n+\n+  pp->buffer = tmp_buffer;\n }\n \n \n@@ -1407,6 +1528,7 @@ gfc_diagnostics_init (void)\n   diagnostic_finalizer (global_dc) = gfc_diagnostic_finalizer;\n   diagnostic_format_decoder (global_dc) = gfc_format_decoder;\n   global_dc->caret_char = '^';\n+  new (&pp_warning_buffer) output_buffer ();\n }\n \n void"}, {"sha": "edf83363ba63fd4520777ed9c2a8557f8e27084b", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -3173,7 +3173,8 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n   /* This is possibly a typo: x = f() instead of x => f().  */\n   if (warn_surprising\n       && rvalue->expr_type == EXPR_FUNCTION && gfc_expr_attr (rvalue).pointer)\n-    gfc_warning (\"POINTER-valued function appears on right-hand side of \"\n+    gfc_warning (OPT_Wsurprising,\n+\t\t \"POINTER-valued function appears on right-hand side of \"\n \t\t \"assignment at %L\", &rvalue->where);\n \n   /* Check size of array assignments.  */\n@@ -3198,9 +3199,10 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n     {\n       int rc;\n       if (warn_surprising)\n-        gfc_warning (\"BOZ literal at %L is bitwise transferred \"\n-                     \"non-integer symbol '%s'\", &rvalue->where,\n-                     lvalue->symtree->n.sym->name);\n+\tgfc_warning (OPT_Wsurprising,\n+\t\t     \"BOZ literal at %L is bitwise transferred \"\n+\t\t     \"non-integer symbol %qs\", &rvalue->where,\n+\t\t     lvalue->symtree->n.sym->name);\n       if (!gfc_convert_boz (rvalue, &lvalue->ts))\n \treturn false;\n       if ((rc = gfc_range_check (rvalue)) != ARITH_OK)\n@@ -3246,22 +3248,25 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n \t      mpfr_sub (diff, rv, rvalue->value.real, GFC_RND_MODE);\n \n \t      if (!mpfr_zero_p (diff))\n-\t\tgfc_warning (\"Change of value in conversion from \"\n-\t\t\t     \" %s to %s at %L\", gfc_typename (&rvalue->ts),\n+\t\tgfc_warning (OPT_Wconversion, \n+\t\t\t     \"Change of value in conversion from \"\n+\t\t\t     \" %qs to %qs at %L\", gfc_typename (&rvalue->ts),\n \t\t\t     gfc_typename (&lvalue->ts), &rvalue->where);\n \n \t      mpfr_clear (rv);\n \t      mpfr_clear (diff);\n \t    }\n \t  else\n-\t    gfc_warning (\"Possible change of value in conversion from %s \"\n-\t\t\t \"to %s at %L\",gfc_typename (&rvalue->ts),\n+\t    gfc_warning (OPT_Wconversion,\n+\t\t\t \"Possible change of value in conversion from %qs \"\n+\t\t\t \"to %qs at %L\", gfc_typename (&rvalue->ts),\n \t\t\t gfc_typename (&lvalue->ts), &rvalue->where);\n \n \t}\n       else if (warn_conversion_extra && lvalue->ts.kind > rvalue->ts.kind)\n \t{\n-\t  gfc_warning (\"Conversion from %s to %s at %L\",\n+\t  gfc_warning (OPT_Wconversion_extra,\n+\t\t       \"Conversion from %qs to %qs at %L\",\n \t\t       gfc_typename (&rvalue->ts),\n \t\t       gfc_typename (&lvalue->ts), &rvalue->where);\n \t}\n@@ -3783,7 +3788,8 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n \t  }\n \n       if (warn)\n-\tgfc_warning (\"Pointer at %L in pointer assignment might outlive the \"\n+\tgfc_warning (OPT_Wtarget_lifetime,\n+\t\t     \"Pointer at %L in pointer assignment might outlive the \"\n \t\t     \"pointer target\", &lvalue->where);\n     }\n "}, {"sha": "5485cd14761d0d5848fd700853cffe97b524672f", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -547,7 +547,8 @@ create_var (gfc_expr * e)\n       result->ref->u.ar.as = symbol->ts.type == BT_CLASS\n \t\t\t     ? CLASS_DATA (symbol)->as : symbol->as;\n       if (warn_array_temporaries)\n-\tgfc_warning (\"Creating array temporary at %L\", &(e->where));\n+\tgfc_warning (OPT_Warray_temporaries,\n+\t\t     \"Creating array temporary at %L\", &(e->where));\n     }\n \n   /* Generate the new assignment.  */\n@@ -570,10 +571,10 @@ do_warn_function_elimination (gfc_expr *e)\n   if (e->expr_type != EXPR_FUNCTION)\n     return;\n   if (e->value.function.esym)\n-    gfc_warning (\"Removing call to function '%s' at %L\",\n+    gfc_warning (\"Removing call to function %qs at %L\",\n \t\t e->value.function.esym->name, &(e->where));\n   else if (e->value.function.isym)\n-    gfc_warning (\"Removing call to function '%s' at %L\",\n+    gfc_warning (\"Removing call to function %qs at %L\",\n \t\t e->value.function.isym->name, &(e->where));\n }\n /* Callback function for the code walker for doing common function"}, {"sha": "0baf041641e72c182fec4e51a272f2f9ed169b72", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -2672,7 +2672,9 @@ void gfc_buffer_error (int);\n \n const char *gfc_print_wide_char (gfc_char_t);\n \n-void gfc_warning (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+void gfc_warning_1 (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+bool gfc_warning (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n+bool gfc_warning (int opt, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);\n void gfc_warning_now_1 (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n bool gfc_warning_now (const char *, ...) ATTRIBUTE_GCC_GFC(1,2);\n bool gfc_warning_now (int opt, const char *, ...) ATTRIBUTE_GCC_GFC(2,3);"}, {"sha": "bf07d43d3b7668292a612a0e03343293f059a3fe", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1178,7 +1178,7 @@ check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \n \tcase -2:\n \t  /* FIXME: Implement a warning for this case.\n-\t  gfc_warning (\"Possible character length mismatch in argument '%s'\",\n+\t  gfc_warning (\"Possible character length mismatch in argument %qs\",\n \t\t       s1->name);*/\n \t  break;\n \n@@ -1649,11 +1649,11 @@ check_interface1 (gfc_interface *p, gfc_interface *q0,\n \t\t\t p->sym->name, q->sym->name, interface_name,\n \t\t\t &p->where);\n \t    else if (!p->sym->attr.use_assoc && q->sym->attr.use_assoc)\n-\t      gfc_warning (\"Ambiguous interfaces '%s' and '%s' in %s at %L\",\n+\t      gfc_warning (\"Ambiguous interfaces %qs and %qs in %s at %L\",\n \t\t\t   p->sym->name, q->sym->name, interface_name,\n \t\t\t   &p->where);\n \t    else\n-\t      gfc_warning (\"Although not referenced, '%s' has ambiguous \"\n+\t      gfc_warning (\"Although not referenced, %qs has ambiguous \"\n \t\t\t   \"interfaces at %L\", interface_name, &p->where);\n \t    return 1;\n \t  }\n@@ -2147,8 +2147,9 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t    return 0;\n \t}\n       else if (warn_surprising && where && formal->attr.intent != INTENT_IN)\n-\tgfc_warning (\"Passing coarray at %L to allocatable, noncoarray dummy \"\n-\t\t     \"argument '%s', which is invalid if the allocation status\"\n+\tgfc_warning (OPT_Wsurprising,\n+\t\t     \"Passing coarray at %L to allocatable, noncoarray dummy \"\n+\t\t     \"argument %qs, which is invalid if the allocation status\"\n \t\t     \" is modified\",  &actual->where, formal->name);\n     }\n \n@@ -2673,13 +2674,13 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t   if (where && (f->sym->attr.pointer || f->sym->attr.allocatable))\n \t     gfc_warning (\"Character length mismatch (%ld/%ld) between actual \"\n \t\t\t  \"argument and pointer or allocatable dummy argument \"\n-\t\t\t  \"'%s' at %L\",\n+\t\t\t  \"%qs at %L\",\n \t\t\t  mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n \t\t\t  mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n \t\t\t  f->sym->name, &a->expr->where);\n \t   else if (where)\n \t     gfc_warning (\"Character length mismatch (%ld/%ld) between actual \"\n-\t\t\t  \"argument and assumed-shape dummy argument '%s' \"\n+\t\t\t  \"argument and assumed-shape dummy argument %qs \"\n \t\t\t  \"at %L\",\n \t\t\t  mpz_get_si (a->expr->ts.u.cl->length->value.integer),\n \t\t\t  mpz_get_si (f->sym->ts.u.cl->length->value.integer),\n@@ -2710,12 +2711,12 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t{\n \t  if (a->expr->ts.type == BT_CHARACTER && !f->sym->as && where)\n \t    gfc_warning (\"Character length of actual argument shorter \"\n-\t\t\t \"than of dummy argument '%s' (%lu/%lu) at %L\",\n+\t\t\t \"than of dummy argument %qs (%lu/%lu) at %L\",\n \t\t\t f->sym->name, actual_size, formal_size,\n \t\t\t &a->expr->where);\n           else if (where)\n \t    gfc_warning (\"Actual argument contains too few \"\n-\t\t\t \"elements for dummy argument '%s' (%lu/%lu) at %L\",\n+\t\t\t \"elements for dummy argument %qs (%lu/%lu) at %L\",\n \t\t\t f->sym->name, actual_size, formal_size,\n \t\t\t &a->expr->where);\n \t  return  0;\n@@ -3146,7 +3147,7 @@ check_some_aliasing (gfc_formal_arglist *f, gfc_actual_arglist *a)\n \t      || (f1_intent == INTENT_OUT && f2_intent == INTENT_OUT))\n \t    {\n \t      gfc_warning (\"Same actual argument associated with INTENT(%s) \"\n-\t\t\t   \"argument '%s' and INTENT(%s) argument '%s' at %L\",\n+\t\t\t   \"argument %qs and INTENT(%s) argument %qs at %L\",\n \t\t\t   gfc_intent_string (f1_intent), p[i].f->sym->name,\n \t\t\t   gfc_intent_string (f2_intent), p[j].f->sym->name,\n \t\t\t   &p[i].a->expr->where);\n@@ -3261,10 +3262,12 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \t  return false;\n \t}\n       if (warn_implicit_interface)\n-\tgfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n+\tgfc_warning (OPT_Wimplicit_interface,\n+\t\t     \"Procedure %qs called with an implicit interface at %L\",\n \t\t     sym->name, where);\n       else if (warn_implicit_procedure && sym->attr.proc == PROC_UNKNOWN)\n-\tgfc_warning (\"Procedure '%s' called at %L is not explicitly declared\",\n+\tgfc_warning (OPT_Wimplicit_procedure,\n+\t\t     \"Procedure %qs called at %L is not explicitly declared\",\n \t\t     sym->name, where);\n     }\n \n@@ -3376,7 +3379,8 @@ gfc_ppc_use (gfc_component *comp, gfc_actual_arglist **ap, locus *where)\n   if (warn_implicit_interface\n       && comp->attr.if_source == IFSRC_UNKNOWN\n       && !comp->attr.is_iso_c)\n-    gfc_warning (\"Procedure pointer component '%s' called with an implicit \"\n+    gfc_warning (OPT_Wimplicit_interface,\n+\t\t \"Procedure pointer component %qs called with an implicit \"\n \t\t \"interface at %L\", comp->name, where);\n \n   if (comp->attr.if_source == IFSRC_UNKNOWN)"}, {"sha": "baaa05a43b1976664417993946b576564f3f82d7", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -4316,7 +4316,7 @@ gfc_check_intrinsic_standard (const gfc_intrinsic_sym* isym,\n     {\n       /* Do only print a warning if not a GNU extension.  */\n       if (!silent && isym->standard != GFC_STD_GNU)\n-\tgfc_warning (\"Intrinsic '%s' (is %s) is used at %L\",\n+\tgfc_warning (\"Intrinsic %qs (is %s) is used at %L\",\n \t\t     isym->name, _(symstd_msg), &where);\n \n       return true;\n@@ -4824,12 +4824,14 @@ gfc_warn_intrinsic_shadow (const gfc_symbol* sym, bool in_module, bool func)\n \n   /* Emit the warning.  */\n   if (in_module || sym->ns->proc_name)\n-    gfc_warning (\"'%s' declared at %L may shadow the intrinsic of the same\"\n+    gfc_warning (OPT_Wintrinsic_shadow,\n+\t\t \"%qs declared at %L may shadow the intrinsic of the same\"\n \t\t \" name.  In order to call the intrinsic, explicit INTRINSIC\"\n \t\t \" declarations may be required.\",\n \t\t sym->name, &sym->declared_at);\n   else\n-    gfc_warning (\"'%s' declared at %L is also the name of an intrinsic.  It can\"\n+    gfc_warning (OPT_Wintrinsic_shadow,\n+\t\t \"%qs declared at %L is also the name of an intrinsic.  It can\"\n \t\t \" only be called via an explicit interface or if declared\"\n \t\t \" EXTERNAL.\", sym->name, &sym->declared_at);\n }"}, {"sha": "de8254ae92bef514554994156c330a6229ee9421", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1721,7 +1721,7 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n \tif (n == WARNING || (warn && n == ERROR))\n \t  {\n \t    gfc_warning (\"Fortran 2003: %s specifier in %s statement at %C \"\n-\t\t\t \"has value '%s'\", specifier, statement,\n+\t\t\t \"has value %qs\", specifier, statement,\n \t\t\t allowed_f2003[i]);\n \t    return 1;\n \t  }\n@@ -1748,7 +1748,7 @@ compare_to_allowed_values (const char *specifier, const char *allowed[],\n \tif (n == WARNING || (warn && n == ERROR))\n \t  {\n \t    gfc_warning (\"Extension: %s specifier in %s statement at %C \"\n-\t\t\t \"has value '%s'\", specifier, statement,\n+\t\t\t \"has value %qs\", specifier, statement,\n \t\t\t allowed_gnu[i]);\n \t    return 1;\n \t  }"}, {"sha": "10ea61af3064a2f149180b687f688d7fed717fe5", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -558,8 +558,9 @@ match_real_constant (gfc_expr **result, int signflag)\n \t\t\t   \"real-literal-constant at %C\"))\n \treturn MATCH_ERROR;\n       else if (warn_real_q_constant)\n-\tgfc_warning(\"Extension: exponent-letter 'q' in real-literal-constant \"\n-\t\t    \"at %C\");\n+\tgfc_warning (OPT_Wreal_q_constant,\n+\t\t     \"Extension: exponent-letter %<q%> in real-literal-constant \"\n+\t\t     \"at %C\");\n     }\n \n   /* Scan exponent.  */\n@@ -727,7 +728,7 @@ match_real_constant (gfc_expr **result, int signflag)\n \n     case ARITH_UNDERFLOW:\n       if (warn_underflow)\n-\tgfc_warning (\"Real constant underflows its kind at %C\");\n+\tgfc_warning (OPT_Wunderflow, \"Real constant underflows its kind at %C\");\n       mpfr_set_ui (e->value.real, 0, GFC_RND_MODE);\n       break;\n \n@@ -1072,7 +1073,7 @@ match_string_constant (gfc_expr **result)\n   /* We disable the warning for the following loop as the warning has already\n      been printed in the loop above.  */\n   save_warn_ampersand = warn_ampersand;\n-  warn_ampersand = 0;\n+  warn_ampersand = false;\n \n   p = e->value.character.string;\n   for (i = 0; i < length; i++)"}, {"sha": "6571578ecac9b60c8e842343da1ba532f78a6cc1", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1645,7 +1645,8 @@ gfc_resolve_intrinsic (gfc_symbol *sym, locus *loc)\n     {\n       if (sym->ts.type != BT_UNKNOWN && warn_surprising\n \t  && !sym->attr.implicit_type)\n-\tgfc_warning (\"Type specified for intrinsic function '%s' at %L is\"\n+\tgfc_warning (OPT_Wsurprising,\n+\t\t     \"Type specified for intrinsic function %qs at %L is\"\n \t\t      \" ignored\", sym->name, &sym->declared_at);\n \n       if (!sym->attr.function &&\n@@ -1718,9 +1719,9 @@ resolve_procedure_expression (gfc_expr* expr)\n   /* A non-RECURSIVE procedure that is used as procedure expression within its\n      own body is in danger of being called recursively.  */\n   if (is_illegal_recursion (sym, gfc_current_ns))\n-    gfc_warning (\"Non-RECURSIVE procedure '%s' at %L is possibly calling\"\n+    gfc_warning (\"Non-RECURSIVE procedure %qs at %L is possibly calling\"\n \t\t \" itself recursively.  Declare it RECURSIVE or use\"\n-\t\t \" -frecursive\", sym->name, &expr->where);\n+\t\t \" %<-frecursive%>\", sym->name, &expr->where);\n \n   return true;\n }\n@@ -2101,7 +2102,7 @@ resolve_elemental_actual (gfc_expr *expr, gfc_code *c)\n \t  && (set_by_optional || arg->expr->rank != rank)\n \t  && !(isym && isym->id == GFC_ISYM_CONVERSION))\n \t{\n-\t  gfc_warning (\"'%s' at %L is an array and OPTIONAL; IF IT IS \"\n+\t  gfc_warning (\"%qs at %L is an array and OPTIONAL; IF IT IS \"\n \t\t       \"MISSING, it cannot be the actual argument of an \"\n \t\t       \"ELEMENTAL procedure unless there is a non-optional \"\n \t\t       \"argument with the same rank (12.4.1.5)\",\n@@ -6332,8 +6333,8 @@ gfc_resolve_iterator (gfc_iterator *iter, bool real_ok, bool own_scope)\n \t  cmp = mpfr_cmp (iter->end->value.real, iter->start->value.real);\n \t}\n       if (warn_zerotrip && ((sgn > 0 && cmp < 0) || (sgn < 0 && cmp > 0)))\n-\tgfc_warning (\"DO loop at %L will be executed zero times\"\n-\t\t     \" (use -Wno-zerotrip to suppress)\",\n+\tgfc_warning (OPT_Wzerotrip,\n+\t\t     \"DO loop at %L will be executed zero times\",\n \t\t     &iter->step->where);\n     }\n \n@@ -7709,8 +7710,9 @@ resolve_select (gfc_code *code, bool select_type)\n \t      && gfc_compare_expr (cp->low, cp->high, INTRINSIC_GT) > 0)\n \t    {\n \t      if (warn_surprising)\n-\t\tgfc_warning (\"Range specification at %L can never \"\n-\t\t\t     \"be matched\", &cp->where);\n+\t\tgfc_warning (OPT_Wsurprising,\n+\t\t\t     \"Range specification at %L can never be matched\",\n+\t\t\t     &cp->where);\n \n \t      cp->unreachable = 1;\n \t      seen_unreachable = 1;\n@@ -7811,7 +7813,8 @@ resolve_select (gfc_code *code, bool select_type)\n   /* More than two cases is legal but insane for logical selects.\n      Issue a warning for it.  */\n   if (warn_surprising && type == BT_LOGICAL && ncases > 2)\n-    gfc_warning (\"Logical SELECT CASE block at %L has more that two cases\",\n+    gfc_warning (OPT_Wsurprising,\n+\t\t \"Logical SELECT CASE block at %L has more that two cases\",\n \t\t &code->loc);\n }\n \n@@ -8799,7 +8802,7 @@ gfc_resolve_assign_in_forall (gfc_code *code, int nvar, gfc_expr **var_expr)\n \t     assignment.  Emit a warning rather than an error because the\n \t     mask could be resolving this problem.  */\n \t  if (!find_forall_index (code->expr1, forall_index, 0))\n-\t    gfc_warning (\"The FORALL with index '%s' is not used on the \"\n+\t    gfc_warning (\"The FORALL with index %qs is not used on the \"\n \t\t\t \"left side of the assignment at %L and so might \"\n \t\t\t \"cause multiple assignment to this object\",\n \t\t\t var_expr[n]->symtree->name, &code->expr1->where);\n@@ -9181,8 +9184,9 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n     {\n       int rc;\n       if (warn_surprising)\n-\tgfc_warning (\"BOZ literal at %L is bitwise transferred \"\n-\t\t     \"non-integer symbol '%s'\", &code->loc,\n+\tgfc_warning (OPT_Wsurprising,\n+\t\t     \"BOZ literal at %L is bitwise transferred \"\n+\t\t     \"non-integer symbol %qs\", &code->loc,\n \t\t     lhs->symtree->n.sym->name);\n \n       if (!gfc_convert_boz (rhs, &lhs->ts))\n@@ -10482,7 +10486,8 @@ resolve_charlen (gfc_charlen *cl)\n   if (cl->length && !gfc_extract_int (cl->length, &i) && i < 0)\n     {\n       if (warn_surprising)\n-\tgfc_warning_now (\"CHARACTER variable at %L has negative length %d,\"\n+\tgfc_warning_now (OPT_Wsurprising,\n+\t\t\t \"CHARACTER variable at %L has negative length %d,\"\n \t\t\t \" the length has been set to zero\",\n \t\t\t &cl->length->where, i);\n       gfc_replace_expr (cl->length,\n@@ -11499,7 +11504,8 @@ gfc_resolve_finalizers (gfc_symbol* derived, bool *finalizable)\n       /* Warn if the procedure is non-scalar and not assumed shape.  */\n       if (warn_surprising && arg->as && arg->as->rank != 0\n \t  && arg->as->type != AS_ASSUMED_SHAPE)\n-\tgfc_warning (\"Non-scalar FINAL procedure at %L should have assumed\"\n+\tgfc_warning (OPT_Wsurprising,\n+\t\t     \"Non-scalar FINAL procedure at %L should have assumed\"\n \t\t     \" shape argument\", &arg->declared_at);\n \n       /* Check that it does not match in kind and rank with a FINAL procedure\n@@ -11557,7 +11563,8 @@ gfc_resolve_finalizers (gfc_symbol* derived, bool *finalizable)\n      were nodes in the list, must have been for arrays.  It is surely a good\n      idea to have a scalar version there if there's something to finalize.  */\n   if (warn_surprising && result && !seen_scalar)\n-    gfc_warning (\"Only array FINAL procedures declared for derived type '%s'\"\n+    gfc_warning (OPT_Wsurprising,\n+\t\t \"Only array FINAL procedures declared for derived type %qs\"\n \t\t \" defined at %L, suggest also scalar one\",\n \t\t derived->name, &derived->declared_at);\n "}, {"sha": "0de09983c23349164122c1fa6f10f2c7b28cfd7d", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1155,7 +1155,8 @@ gfc_next_char_literal (gfc_instring in_string)\n \t    {\n \t      gfc_current_locus.nextc--;\n \t      if (warn_ampersand && in_string == INSTRING_WARN)\n-\t\tgfc_warning (\"Missing '&' in continued character \"\n+\t\tgfc_warning (OPT_Wampersand, \n+\t\t\t     \"Missing %<&%> in continued character \"\n \t\t\t     \"constant at %C\");\n \t    }\n \t  /* Both !$omp and !$ -fopenmp continuation lines have & on the"}, {"sha": "095de6b25a217c59e06d1d6a5f8427e69cfcdbc7", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -716,7 +716,8 @@ simplify_achar_char (gfc_expr *e, gfc_expr *k, const char *name, bool ascii)\n     }\n \n   if (ascii && warn_surprising && mpz_cmp_si (e->value.integer, 127) > 0)\n-    gfc_warning (\"Argument of %s function at %L outside of range [0,127]\",\n+    gfc_warning (OPT_Wsurprising,\n+\t\t \"Argument of %s function at %L outside of range [0,127]\",\n \t\t name, &e->where);\n \n   if (kind == 1 && mpz_cmp_si (e->value.integer, 255) > 0)\n@@ -2505,7 +2506,8 @@ gfc_simplify_iachar (gfc_expr *e, gfc_expr *kind)\n   index = e->value.character.string[0];\n \n   if (warn_surprising && index > 127)\n-    gfc_warning (\"Argument of IACHAR function at %L outside of range 0..127\",\n+    gfc_warning (OPT_Wsurprising,\n+\t\t \"Argument of IACHAR function at %L outside of range 0..127\",\n \t\t &e->where);\n \n   k = get_kind (BT_INTEGER, kind, \"IACHAR\", gfc_default_integer_kind);"}, {"sha": "92a15d06c868d65bf2811e62e7dae0514dea04b9", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -3874,7 +3874,7 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n   */\n   if (curr_comp == NULL)\n     {\n-      gfc_warning (\"Derived type '%s' with BIND(C) attribute at %L is empty, \"\n+      gfc_warning (\"Derived type %qs with BIND(C) attribute at %L is empty, \"\n \t\t   \"and may be inaccessible by the C companion processor\",\n \t\t   derived_sym->name, &(derived_sym->declared_at));\n       derived_sym->ts.is_c_interop = 1;\n@@ -3954,16 +3954,18 @@ verify_bind_c_derived_type (gfc_symbol *derived_sym)\n \t      if (derived_sym->attr.is_bind_c == 1 && warn_c_binding_type)\n \t\t/* If the derived type is bind(c), all fields must be\n \t\t   interop.  */\n-\t\tgfc_warning (\"Component '%s' in derived type '%s' at %L \"\n+\t\tgfc_warning (OPT_Wc_binding_type,\n+\t\t\t     \"Component %qs in derived type %qs at %L \"\n                              \"may not be C interoperable, even though \"\n-                             \"derived type '%s' is BIND(C)\",\n+                             \"derived type %qs is BIND(C)\",\n                              curr_comp->name, derived_sym->name,\n                              &(curr_comp->loc), derived_sym->name);\n \t      else if (warn_c_binding_type)\n \t\t/* If derived type is param to bind(c) routine, or to one\n \t\t   of the iso_c_binding procs, it must be interoperable, so\n \t\t   all fields must interop too.\t */\n-\t\tgfc_warning (\"Component '%s' in derived type '%s' at %L \"\n+\t\tgfc_warning (OPT_Wc_binding_type,\n+\t\t\t     \"Component %qs in derived type %qs at %L \"\n                              \"may not be C interoperable\",\n                              curr_comp->name, derived_sym->name,\n                              &(curr_comp->loc));"}, {"sha": "f02ff32247a0a1c15440d19c45ae91ef53f153c5", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1042,7 +1042,8 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post, gfc_ss * ss,\n   gcc_assert (ss->loop->dimen == ss->dimen);\n \n   if (warn_array_temporaries && where)\n-    gfc_warning (\"Creating array temporary at %L\", where);\n+    gfc_warning (OPT_Warray_temporaries,\n+\t\t \"Creating array temporary at %L\", where);\n \n   /* Set the lower bound to zero.  */\n   for (s = ss; s; s = s->parent)\n@@ -5922,7 +5923,8 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc,\n       stride = gfc_index_one_node;\n \n       if (warn_array_temporaries)\n-\tgfc_warning (\"Creating array temporary at %L\", &loc);\n+\tgfc_warning (OPT_Warray_temporaries,\n+\t\t     \"Creating array temporary at %L\", &loc);\n     }\n \n   /* This is for the case where the array data is used directly without\n@@ -7205,10 +7207,12 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, bool g77,\n       if (warn_array_temporaries)\n \t{\n \t  if (fsym)\n-\t    gfc_warning (\"Creating array temporary at %L for argument '%s'\",\n+\t    gfc_warning (OPT_Warray_temporaries,\n+\t\t\t \"Creating array temporary at %L for argument %qs\",\n \t\t\t &expr->where, fsym->name);\n \t  else\n-\t    gfc_warning (\"Creating array temporary at %L\", &expr->where);\n+\t    gfc_warning (OPT_Warray_temporaries,\n+\t\t\t \"Creating array temporary at %L\", &expr->where);\n \t}\n \n       ptr = build_call_expr_loc (input_location,"}, {"sha": "f5d831f31b162508cf7c4a0cc4500094368fbf6f", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -397,7 +397,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n \t blank common blocks may be of different sizes.  */\n       if (!tree_int_cst_equal (DECL_SIZE_UNIT (decl), size)\n \t  && strcmp (com->name, BLANK_COMMON_NAME))\n-\tgfc_warning (\"Named COMMON block '%s' at %L shall be of the \"\n+\tgfc_warning (\"Named COMMON block %qs at %L shall be of the \"\n \t\t     \"same size as elsewhere (%lu vs %lu bytes)\", com->name,\n \t\t     &com->where,\n \t\t     (unsigned long) TREE_INT_CST_LOW (size),\n@@ -1136,12 +1136,12 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n \t      if (warn_align_commons)\n \t\t{\n \t\t  if (strcmp (common->name, BLANK_COMMON_NAME))\n-\t\t    gfc_warning (\"Padding of %d bytes required before '%s' in \"\n-\t\t\t\t \"COMMON '%s' at %L; reorder elements or use \"\n+\t\t    gfc_warning (\"Padding of %d bytes required before %qs in \"\n+\t\t\t\t \"COMMON %qs at %L; reorder elements or use \"\n \t\t\t\t \"-fno-align-commons\", (int)offset,\n \t\t\t\t s->sym->name, common->name, &common->where);\n \t\t  else\n-\t\t    gfc_warning (\"Padding of %d bytes required before '%s' in \"\n+\t\t    gfc_warning (\"Padding of %d bytes required before %qs in \"\n \t\t\t\t \"COMMON at %L; reorder elements or use \"\n \t\t\t\t \"-fno-align-commons\", (int)offset,\n \t\t\t\t s->sym->name, &common->where);\n@@ -1170,12 +1170,14 @@ translate_common (gfc_common_head *common, gfc_symbol *var_list)\n   if (common_segment->offset != 0 && warn_align_commons)\n     {\n       if (strcmp (common->name, BLANK_COMMON_NAME))\n-\tgfc_warning (\"COMMON '%s' at %L requires %d bytes of padding; \"\n-\t\t     \"reorder elements or use -fno-align-commons\",\n+\tgfc_warning (OPT_Walign_commons,\n+\t\t     \"COMMON %qs at %L requires %d bytes of padding; \"\n+\t\t     \"reorder elements or use %<-fno-align-commons%>\",\n \t\t     common->name, &common->where, (int)common_segment->offset);\n       else\n-\tgfc_warning (\"COMMON at %L requires %d bytes of padding; \"\n-\t\t     \"reorder elements or use -fno-align-commons\",\n+\tgfc_warning (OPT_Walign_commons,\n+\t\t     \"COMMON at %L requires %d bytes of padding; \"\n+\t\t     \"reorder elements or use %<-fno-align-commons%>\",\n \t\t     &common->where, (int)common_segment->offset);\n     }\n "}, {"sha": "780d350e31dc0076b7779bc7398e924403ed0464", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -3795,7 +3795,8 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t    }\n \t  /* TODO: move to the appropriate place in resolve.c.  */\n \t  if (warn_return_type && el == NULL)\n-\t    gfc_warning (\"Return value of function '%s' at %L not set\",\n+\t    gfc_warning (OPT_Wreturn_type,\n+\t\t\t \"Return value of function %qs at %L not set\",\n \t\t\t proc_sym->name, &proc_sym->declared_at);\n \t}\n       else if (proc_sym->as)\n@@ -4430,7 +4431,8 @@ gfc_create_module_variable (gfc_symbol * sym)\n \n   if (warn_unused_variable && !sym->attr.referenced\n       && sym->attr.access == ACCESS_PRIVATE)\n-    gfc_warning (\"Unused PRIVATE module variable '%s' declared at %L\",\n+    gfc_warning (OPT_Wunused_value,\n+\t\t \"Unused PRIVATE module variable %qs declared at %L\",\n \t\t sym->name, &sym->declared_at);\n \n   /* We always want module variables to be created.  */\n@@ -4992,12 +4994,14 @@ generate_local_decl (gfc_symbol * sym)\n \t  if (warn_unused_dummy_argument && sym->attr.intent == INTENT_OUT)\n \t    {\n \t      if (sym->ts.type != BT_DERIVED)\n-\t\tgfc_warning (\"Dummy argument '%s' at %L was declared \"\n+\t\tgfc_warning (OPT_Wunused_dummy_argument,\n+\t\t\t     \"Dummy argument %qs at %L was declared \"\n \t\t\t     \"INTENT(OUT) but was not set\",  sym->name,\n \t\t\t     &sym->declared_at);\n \t      else if (!gfc_has_default_initializer (sym->ts.u.derived)\n \t\t       && !sym->ts.u.derived->attr.zero_comp)\n-\t\tgfc_warning (\"Derived-type dummy argument '%s' at %L was \"\n+\t\tgfc_warning (OPT_Wunused_dummy_argument,\n+\t\t\t     \"Derived-type dummy argument %qs at %L was \"\n \t\t\t     \"declared INTENT(OUT) but was not set and \"\n \t\t\t     \"does not have a default initializer\",\n \t\t\t     sym->name, &sym->declared_at);\n@@ -5006,8 +5010,9 @@ generate_local_decl (gfc_symbol * sym)\n \t    }\n \t  else if (warn_unused_dummy_argument)\n \t    {\n-\t      gfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n-\t\t\t &sym->declared_at);\n+\t      gfc_warning (OPT_Wunused_dummy_argument,\n+\t\t\t   \"Unused dummy argument %qs at %L\", sym->name,\n+\t\t\t   &sym->declared_at);\n \t      if (sym->backend_decl != NULL_TREE)\n \t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n \t    }\n@@ -5020,15 +5025,17 @@ generate_local_decl (gfc_symbol * sym)\n \t{\n \t  if (sym->attr.use_only)\n \t    {\n-\t      gfc_warning (\"Unused module variable '%s' which has been \"\n+\t      gfc_warning (OPT_Wunused_variable,\n+\t\t\t   \"Unused module variable %qs which has been \"\n \t\t\t   \"explicitly imported at %L\", sym->name,\n \t\t\t   &sym->declared_at);\n \t      if (sym->backend_decl != NULL_TREE)\n \t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n \t    }\n \t  else if (!sym->attr.use_assoc)\n \t    {\n-\t      gfc_warning (\"Unused variable '%s' declared at %L\",\n+\t      gfc_warning (OPT_Wunused_variable,\n+\t\t\t   \"Unused variable %qs declared at %L\",\n \t\t\t   sym->name, &sym->declared_at);\n \t      if (sym->backend_decl != NULL_TREE)\n \t\tTREE_NO_WARNING(sym->backend_decl) = 1;\n@@ -5076,10 +5083,12 @@ generate_local_decl (gfc_symbol * sym)\n            && !sym->attr.referenced)\n \t{\n            if (!sym->attr.use_assoc)\n-\t     gfc_warning (\"Unused parameter '%s' declared at %L\", sym->name,\n+\t     gfc_warning (OPT_Wunused_parameter,\n+\t\t\t  \"Unused parameter %qs declared at %L\", sym->name,\n \t\t\t  &sym->declared_at);\n \t   else if (sym->attr.use_only)\n-\t     gfc_warning (\"Unused parameter '%s' which has been explicitly \"\n+\t     gfc_warning (OPT_Wunused_parameter,\n+\t\t\t  \"Unused parameter %qs which has been explicitly \"\n \t\t\t  \"imported at %L\", sym->name, &sym->declared_at);\n \t}\n     }\n@@ -5094,7 +5103,8 @@ generate_local_decl (gfc_symbol * sym)\n \t  && !sym->attr.use_assoc\n \t  && sym->attr.if_source != IFSRC_IFBODY)\n \t{\n-\t  gfc_warning (\"Return value '%s' of function '%s' declared at \"\n+\t  gfc_warning (OPT_Wreturn_type,\n+\t\t       \"Return value %qs of function %qs declared at \"\n \t\t       \"%L not set\", sym->result->name, sym->name,\n \t\t        &sym->result->declared_at);\n \n@@ -5121,7 +5131,8 @@ generate_local_decl (gfc_symbol * sym)\n \t  if (!sym->attr.referenced)\n \t    {\n \t      if (warn_unused_dummy_argument)\n-\t\tgfc_warning (\"Unused dummy argument '%s' at %L\", sym->name,\n+\t\tgfc_warning (OPT_Wunused_dummy_argument,\n+\t\t\t     \"Unused dummy argument %qs at %L\", sym->name,\n \t\t\t     &sym->declared_at);\n \t    }\n \n@@ -5801,7 +5812,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t{\n \t  /* TODO: move to the appropriate place in resolve.c.  */\n \t  if (warn_return_type && sym == sym->result)\n-\t    gfc_warning (\"Return value of function '%s' at %L not set\",\n+\t    gfc_warning (OPT_Wreturn_type,\n+\t\t\t \"Return value of function %qs at %L not set\",\n \t\t\t sym->name, &sym->declared_at);\n \t  if (warn_return_type)\n \t    TREE_NO_WARNING(sym->backend_decl) = 1;"}, {"sha": "7bdcc724935226868b541c422b470893ab99f893", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1112,10 +1112,12 @@ static void\n realloc_lhs_warning (bt type, bool array, locus *where)\n {\n   if (array && type != BT_CLASS && type != BT_DERIVED && warn_realloc_lhs)\n-    gfc_warning (\"Code for reallocating the allocatable array at %L will \"\n+    gfc_warning (OPT_Wrealloc_lhs,\n+\t\t \"Code for reallocating the allocatable array at %L will \"\n \t\t \"be added\", where);\n   else if (warn_realloc_lhs_all)\n-    gfc_warning (\"Code for reallocating the allocatable variable at %L \"\n+    gfc_warning (OPT_Wrealloc_lhs_all,\n+\t\t \"Code for reallocating the allocatable variable at %L \"\n \t\t \"will be added\", where);\n }\n "}, {"sha": "4ebe492d536feaf5935404d46704d3d9f0651bca", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -6147,7 +6147,8 @@ gfc_conv_intrinsic_transfer (gfc_se * se, gfc_expr * expr)\n \t  tmp = gfc_build_addr_expr (NULL_TREE, argse.expr);\n \n \t  if (warn_array_temporaries)\n-\t    gfc_warning (\"Creating array temporary at %L\", &expr->where);\n+\t    gfc_warning (OPT_Warray_temporaries,\n+\t\t\t \"Creating array temporary at %L\", &expr->where);\n \n \t  source = build_call_expr_loc (input_location,\n \t\t\t\t    gfor_fndecl_in_pack, 1, tmp);"}, {"sha": "d28d67bc82cc6e218838a20574a6db83b377cd44", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -540,7 +540,7 @@ gfc_trans_return (gfc_code * code)\n       if (!result)\n \t{\n \t  gfc_warning (\"An alternate return at %L without a * dummy argument\",\n-\t\t\t&code->expr1->where);\n+\t\t       &code->expr1->where);\n \t  return gfc_generate_return ();\n \t}\n "}, {"sha": "92912ca3efd78b0d0f7d55c2e7c99d885cecf635", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -40,7 +40,8 @@ output_buffer::output_buffer ()\n     cur_chunk_array (),\n     stream (stderr),\n     line_length (),\n-    digit_buffer ()\n+    digit_buffer (),\n+    flush_p (true)\n {\n   obstack_init (&formatted_obstack);\n   obstack_init (&chunk_obstack);\n@@ -679,12 +680,25 @@ pp_format_verbatim (pretty_printer *pp, text_info *text)\n   pp_wrapping_mode (pp) = oldmode;\n }\n \n-/* Flush the content of BUFFER onto the attached stream.  */\n+/* Flush the content of BUFFER onto the attached stream.  This\n+   function does nothing unless pp->output_buffer->flush_p.  */\n void\n pp_flush (pretty_printer *pp)\n {\n+  pp_clear_state (pp);\n+  if (!pp->buffer->flush_p)\n+    return;\n   pp_write_text_to_stream (pp);\n+  fflush (pp_buffer (pp)->stream);\n+}\n+\n+/* Flush the content of BUFFER onto the attached stream independently\n+   of the value of pp->output_buffer->flush_p.  */\n+void\n+pp_really_flush (pretty_printer *pp)\n+{\n   pp_clear_state (pp);\n+  pp_write_text_to_stream (pp);\n   fflush (pp_buffer (pp)->stream);\n }\n "}, {"sha": "d9e49be99280840fbbd81654abf8308f972f0429", "filename": "gcc/pretty-print.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Fpretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Fpretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.h?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -100,6 +100,11 @@ struct output_buffer\n   /* This must be large enough to hold any printed integer or\n      floating-point value.  */\n   char digit_buffer[128];\n+\n+  /* Nonzero means that text should be flushed when\n+     appropriate. Otherwise, text is buffered until either\n+     pp_really_flush or pp_clear_output_area are called.  */\n+  bool flush_p;\n };\n \n /* The type of pretty-printer flags passed to clients.  */\n@@ -314,6 +319,7 @@ extern void pp_printf (pretty_printer *, const char *, ...)\n extern void pp_verbatim (pretty_printer *, const char *, ...)\n      ATTRIBUTE_GCC_PPDIAG(2,3);\n extern void pp_flush (pretty_printer *);\n+extern void pp_really_flush (pretty_printer *);\n extern void pp_format (pretty_printer *, text_info *);\n extern void pp_output_formatted_text (pretty_printer *);\n extern void pp_format_verbatim (pretty_printer *, text_info *);"}, {"sha": "f39ea80ed4a84c3d8a840c3f9778d7c2d780f65e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -1,3 +1,9 @@\n+2014-12-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/44054\n+\t* gfortran.dg/warnings_are_errors_1.f90: Update warnings to errors.\n+\t* gfortran.dg/warnings_are_errors_1.f: Likewise.\n+\n 2014-12-03  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/ext/visibility/anon[12].C: Require visibility support."}, {"sha": "510f93e55503e7e69fd407ede4ef33b5b401a5b8", "filename": "gcc/testsuite/gfortran.dg/warnings_are_errors_1.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -18,7 +18,7 @@ program warnings_are_errors_1\n        end do\n        call foo j bar\n ! gfc_warning:\n-       r2(4) = 0 ! { dg-warning \"is out of bounds\" }\n+       r2(4) = 0 ! { dg-error \"is out of bounds\" }\n        \n        goto 3 45\n        end"}, {"sha": "efb450854bf91c82ce9cf40be8fbffe6f01ba9e2", "filename": "gcc/testsuite/gfortran.dg/warnings_are_errors_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48749dbcc461753861059d1fc48c40d2e0aefaa2/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarnings_are_errors_1.f90?ref=48749dbcc461753861059d1fc48c40d2e0aefaa2", "patch": "@@ -17,7 +17,7 @@ end function char_\n \n        implicit none\n ! gfc_warning:\n-1234  complex :: cplx ! { dg-warning \"defined but cannot be used\" }\n+1234  complex :: cplx ! { dg-error \"defined but cannot be used\" }\n       cplx = 20.\n \n ! gfc_warning_now:"}]}