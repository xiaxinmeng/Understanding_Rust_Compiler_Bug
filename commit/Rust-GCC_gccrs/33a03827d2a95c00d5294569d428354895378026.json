{"sha": "33a03827d2a95c00d5294569d428354895378026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNhMDM4MjdkMmE5NWMwMGQ1Mjk0NTY5ZDQyODM1NDg5NTM3ODAyNg==", "commit": {"author": {"name": "Torvald Riegel", "email": "triegel@redhat.com", "date": "2012-02-20T20:56:42Z"}, "committer": {"name": "Torvald Riegel", "email": "torvald@gcc.gnu.org", "date": "2012-02-20T20:56:42Z"}, "message": "libitm: Add missing undo-logging of RfW src regions in gl_wt memtransfer.\n\n\tlibitm/\n\t* method-gl.cc (gl_wt_dispatch::memtransfer_static): Add missing undo\n\tfor RfW src.  Optimize number of calls to gtm_thr.\n\nFrom-SVN: r184399", "tree": {"sha": "8d332dc3c72d2b1f08fe4acadbb1af927094cbc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d332dc3c72d2b1f08fe4acadbb1af927094cbc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33a03827d2a95c00d5294569d428354895378026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a03827d2a95c00d5294569d428354895378026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33a03827d2a95c00d5294569d428354895378026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33a03827d2a95c00d5294569d428354895378026/comments", "author": {"login": "triegelrh", "id": 62400967, "node_id": "MDQ6VXNlcjYyNDAwOTY3", "avatar_url": "https://avatars.githubusercontent.com/u/62400967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/triegelrh", "html_url": "https://github.com/triegelrh", "followers_url": "https://api.github.com/users/triegelrh/followers", "following_url": "https://api.github.com/users/triegelrh/following{/other_user}", "gists_url": "https://api.github.com/users/triegelrh/gists{/gist_id}", "starred_url": "https://api.github.com/users/triegelrh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/triegelrh/subscriptions", "organizations_url": "https://api.github.com/users/triegelrh/orgs", "repos_url": "https://api.github.com/users/triegelrh/repos", "events_url": "https://api.github.com/users/triegelrh/events{/privacy}", "received_events_url": "https://api.github.com/users/triegelrh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95d65553deba5235c11df47b28f150573bf43ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95d65553deba5235c11df47b28f150573bf43ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95d65553deba5235c11df47b28f150573bf43ba7"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "75410f52ed1c34e4549e6671aed06ead72cfb74c", "filename": "libitm/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a03827d2a95c00d5294569d428354895378026/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a03827d2a95c00d5294569d428354895378026/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=33a03827d2a95c00d5294569d428354895378026", "patch": "@@ -1,3 +1,8 @@\n+2012-02-20  Torvald Riegel  <triegel@redhat.com>\n+\n+\t* method-gl.cc (gl_wt_dispatch::memtransfer_static): Add missing undo\n+\tfor RfW src.  Optimize number of calls to gtm_thr.\n+\n 2012-02-20  Torvald Riegel  <triegel@redhat.com>\n \n \t* beginend.cc (GTM::gtm_thread::begin_transaction): Move serial lock"}, {"sha": "4a18b62d740d09e82fc6c322dfb95a2326aa5a88", "filename": "libitm/method-gl.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33a03827d2a95c00d5294569d428354895378026/libitm%2Fmethod-gl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33a03827d2a95c00d5294569d428354895378026/libitm%2Fmethod-gl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fmethod-gl.cc?ref=33a03827d2a95c00d5294569d428354895378026", "patch": "@@ -85,9 +85,9 @@ static gl_mg o_gl_mg;\n class gl_wt_dispatch : public abi_dispatch\n {\n protected:\n-  static void pre_write(const void *addr, size_t len)\n+  static void pre_write(const void *addr, size_t len,\n+      gtm_thread *tx = gtm_thr())\n   {\n-    gtm_thread *tx = gtm_thr();\n     gtm_word v = tx->shared_state.load(memory_order_relaxed);\n     if (unlikely(!gl_mg::is_locked(v)))\n       {\n@@ -123,7 +123,7 @@ class gl_wt_dispatch : public abi_dispatch\n     tx->undolog.log(addr, len);\n   }\n \n-  static void validate()\n+  static void validate(gtm_thread *tx = gtm_thr())\n   {\n     // Check that snapshot is consistent.  We expect the previous data load to\n     // have acquire memory order, or be atomic and followed by an acquire\n@@ -137,7 +137,6 @@ class gl_wt_dispatch : public abi_dispatch\n     // or read an orec value that was written after the data had been written.\n     // Either will allow us to detect inconsistent reads because it will have\n     // a higher/different value.\n-    gtm_thread *tx = gtm_thr();\n     gtm_word l = o_gl_mg.orec.load(memory_order_relaxed);\n     if (l != tx->shared_state.load(memory_order_relaxed))\n       tx->restart(RESTART_VALIDATE_READ);\n@@ -198,9 +197,13 @@ class gl_wt_dispatch : public abi_dispatch\n   static void memtransfer_static(void *dst, const void* src, size_t size,\n       bool may_overlap, ls_modifier dst_mod, ls_modifier src_mod)\n   {\n-    if ((dst_mod != WaW && src_mod != RaW)\n-\t&& (dst_mod != NONTXNAL || src_mod == RfW))\n-      pre_write(dst, size);\n+    gtm_thread *tx = gtm_thr();\n+    if (dst_mod != WaW && dst_mod != NONTXNAL)\n+      pre_write(dst, size, tx);\n+    // We need at least undo-logging for an RfW src region because we might\n+    // subsequently write there with WaW.\n+    if (src_mod == RfW)\n+      pre_write(src, size, tx);\n \n     // FIXME We should use atomics here (see store()).  Let's just hope that\n     // memcpy/memmove are good enough.\n@@ -211,7 +214,7 @@ class gl_wt_dispatch : public abi_dispatch\n \n     if (src_mod != RfW && src_mod != RaW && src_mod != NONTXNAL\n \t&& dst_mod != WaW)\n-      validate();\n+      validate(tx);\n   }\n \n   static void memset_static(void *dst, int c, size_t size, ls_modifier mod)"}]}