{"sha": "5b19c351a4f1dc42504e2867883f71f7bd122cbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIxOWMzNTFhNGYxZGM0MjUwNGUyODY3ODgzZjcxZjdiZDEyMmNiYg==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@tele2.fr", "date": "2008-11-24T12:37:25Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2008-11-24T12:37:25Z"}, "message": "re PR fortran/35681 (wrong result for vector subscripted array expression in MVBITS)\n\n2008-11-24  Mikael Morin <mikael.morin@tele2.fr>\n\n\tPR fortran/35681\n\t* gfortran.dg/elemental_dependency_1.f90: Really commit it.\n\nFrom-SVN: r142155", "tree": {"sha": "483cc327075a03c6a738cc67d06944510fec6e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/483cc327075a03c6a738cc67d06944510fec6e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b19c351a4f1dc42504e2867883f71f7bd122cbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b19c351a4f1dc42504e2867883f71f7bd122cbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b19c351a4f1dc42504e2867883f71f7bd122cbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b19c351a4f1dc42504e2867883f71f7bd122cbb/comments", "author": null, "committer": null, "parents": [{"sha": "c32f57c054225a1fd2a83e498cb6131a5bfdabea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32f57c054225a1fd2a83e498cb6131a5bfdabea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32f57c054225a1fd2a83e498cb6131a5bfdabea"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "734759df2a5506dc05bf4217d8629d26c477574e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b19c351a4f1dc42504e2867883f71f7bd122cbb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b19c351a4f1dc42504e2867883f71f7bd122cbb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b19c351a4f1dc42504e2867883f71f7bd122cbb", "patch": "@@ -1,3 +1,8 @@\n+2008-11-24  Mikael Morin <mikael.morin@tele2.fr>\n+\n+\tPR fortran/35681\n+\t* gfortran.dg/elemental_dependency_1.f90: Really commit it.\n+\n 2008-11-24  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34820"}, {"sha": "3e1f67b9a7169b3ee8fa23bb378265e57056576a", "filename": "gcc/testsuite/gfortran.dg/elemental_dependency_1.f90", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b19c351a4f1dc42504e2867883f71f7bd122cbb/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b19c351a4f1dc42504e2867883f71f7bd122cbb/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_1.f90?ref=5b19c351a4f1dc42504e2867883f71f7bd122cbb", "patch": "@@ -0,0 +1,83 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! PR fortran/35681\n+! Test the use of temporaries in case of elemental subroutines.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+  INTEGER, PARAMETER :: sz = 5\n+  INTEGER :: i\n+  INTEGER :: a(sz) = (/ (i, i=1,sz) /)\n+  INTEGER :: b(sz)\n+\n+  b = a\n+  CALL double(a(sz-b+1), a) ! { dg-warning \"might interfere with actual\" }\n+  ! Don't check the result, as the above is invalid \n+  ! and might produce unexpected results (overlapping vector subscripts).\n+\n+\n+  b = a\n+  CALL double (a, a)               ! same range, no temporary\n+  IF (ANY(a /= 2*b)) CALL abort\n+\n+\n+  b = a\n+  CALL double (a+1, a)             ! same range, no temporary\n+  IF (ANY(a /= 2*b+2)) CALL abort \n+\n+\n+  b = a\n+  CALL double ((a(1:sz)), a(1:sz)) ! same range, no temporary\n+  IF (ANY(a /= 2*b)) CALL abort\n+\n+\n+  b = a\n+  CALL double(a(1:sz-1), a(2:sz)) ! { dg-warning \"might interfere with actual\" }\n+  ! Don't check the result, as the above is invalid, \n+  ! and might produce unexpected results (arguments overlap). \n+\n+\n+  b = a\n+  CALL double((a(1:sz-1)), a(2:sz))     ! paren expression, temporary created\n+! { dg-final { scan-tree-dump-times \"A\\.17\\\\\\[4\\\\\\]\" 1 \"original\" } }\n+\n+  IF (ANY(a /= (/ b(1), (2*b(i), i=1,sz-1) /))) CALL abort \n+\n+\n+  b = a\n+  CALL double(a(1:sz-1)+1, a(2:sz))     ! op expression, temporary created\n+! { dg-final { scan-tree-dump-times \"A\\.26\\\\\\[4\\\\\\]\" 1 \"original\" } }\n+\n+  IF (ANY(a /= (/ b(1), (2*b(i)+2, i=1,sz-1) /))) CALL abort \n+\n+\n+  b = a\n+  CALL double(self(a), a) ! same range, no temporary\n+  IF (ANY(a /= 2*b)) CALL abort\n+\n+\n+  b = a\n+  CALL double(self(a(1:sz-1)), a(2:sz))  ! function expr, temporary created\n+! { dg-final { scan-tree-dump-times \"A\\.38\\\\\\[4\\\\\\]\" 1 \"original\" } }\n+\n+  IF (ANY(a /= (/ b(1), (2*b(i), i=1,sz-1) /))) CALL abort \n+\n+\n+CONTAINS\n+  ELEMENTAL SUBROUTINE double(a, b)\n+    IMPLICIT NONE\n+    INTEGER, INTENT(IN) :: a\n+    INTEGER, INTENT(OUT) :: b\n+    b = 2 * a\n+  END SUBROUTINE double\n+  ELEMENTAL FUNCTION self(a)\n+    IMPLICIT NONE\n+    INTEGER, INTENT(IN) :: a\n+    INTEGER :: self\n+    self = a\n+  END FUNCTION self\n+END PROGRAM main\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_unpack\" 3 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}