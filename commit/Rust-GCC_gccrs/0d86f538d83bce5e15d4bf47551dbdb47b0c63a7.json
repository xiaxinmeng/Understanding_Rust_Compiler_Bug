{"sha": "0d86f538d83bce5e15d4bf47551dbdb47b0c63a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4NmY1MzhkODNiY2U1ZTE1ZDRiZjQ3NTUxZGJkYjQ3YjBjNjNhNw==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-09-04T01:42:27Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-09-04T01:42:27Z"}, "message": "rs6000.h: Update various comments about XER_REGNO.\n\n\t* config/rs6000/rs6000.h: Update various comments about XER_REGNO.\n\t(REGNO_REG_CLASS): Use symbolic register\n\tnames.\n\nFrom-SVN: r36123", "tree": {"sha": "a1c2ade41d7ec665fab1515f115da8eb1795ee52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c2ade41d7ec665fab1515f115da8eb1795ee52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7/comments", "author": null, "committer": null, "parents": [{"sha": "3c809ba45bfc40851f7a2484c42394e370a31cbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c809ba45bfc40851f7a2484c42394e370a31cbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c809ba45bfc40851f7a2484c42394e370a31cbc"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "e2d2ad72e04abb46bb7cb7fef11118866a5f6ca0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d86f538d83bce5e15d4bf47551dbdb47b0c63a7", "patch": "@@ -1,3 +1,9 @@\n+2000-09-03  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* config/rs6000/rs6000.h: Update various comments about XER_REGNO.\n+\t(REGNO_REG_CLASS): Use symbolic register\n+\tnames.\n+\n 2000-09-03  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.c (final_prescan_insn): If the form of a jump insn isn't "}, {"sha": "cb8795f5eff7e3beb01a7a47b08f524a30eb4a0b", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d86f538d83bce5e15d4bf47551dbdb47b0c63a7/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0d86f538d83bce5e15d4bf47551dbdb47b0c63a7", "patch": "@@ -742,8 +742,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n /* True if register is an integer register.  */\n #define INT_REGNO_P(N) ((N) <= 31 || (N) == ARG_POINTER_REGNUM)\n \n-/* True if register is the temporary memory location used for int/float\n-   conversion.  */\n+/* True if register is the XER register.  */\n #define XER_REGNO_P(N) ((N) == XER_REGNO)\n \n /* Return number of consecutive hard regs needed starting at reg REGNO\n@@ -930,14 +929,7 @@ extern int rs6000_debug_arg;\t\t/* debug argument handling */\n    So make a class for registers valid as base registers.\n \n    Also, cr0 is the only condition code register that can be used in\n-   arithmetic insns, so make a separate class for it.\n-\n-   There is a special 'register' (76), which is not a register, but a\n-   placeholder for memory allocated to convert between floating point and\n-   integral types.  This works around a problem where if we allocate memory\n-   with allocate_stack_{local,temp} and the function is an inline function, the\n-   memory allocated will clobber memory in the caller.  So we use a special\n-   register, and if that is used, we allocate stack space for it.  */\n+   arithmetic insns, so make a separate class for it.  */\n \n enum reg_class\n {\n@@ -1013,17 +1005,17 @@ enum reg_class\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO)\t\t\\\n- ((REGNO) == 0 ? GENERAL_REGS\t\t\\\n-  : (REGNO) < 32 ? BASE_REGS\t\t\\\n-  : FP_REGNO_P (REGNO) ? FLOAT_REGS\t\\\n-  : (REGNO) == 68 ? CR0_REGS\t\t\\\n-  : CR_REGNO_P (REGNO) ? CR_REGS\t\\\n-  : (REGNO) == 64 ? MQ_REGS\t\t\\\n-  : (REGNO) == 65 ? LINK_REGS\t\t\\\n-  : (REGNO) == 66 ? CTR_REGS\t\t\\\n-  : (REGNO) == 67 ? BASE_REGS\t\t\\\n-  : (REGNO) == 76 ? XER_REGS\t\t\\\n+#define REGNO_REG_CLASS(REGNO)\t\t\t\\\n+ ((REGNO) == 0 ? GENERAL_REGS\t\t\t\\\n+  : (REGNO) < 32 ? BASE_REGS\t\t\t\\\n+  : FP_REGNO_P (REGNO) ? FLOAT_REGS\t\t\\\n+  : (REGNO) == CR0_REGNO ? CR0_REGS\t\t\\\n+  : CR_REGNO_P (REGNO) ? CR_REGS\t\t\\\n+  : (REGNO) == MQ_REGNO ? MQ_REGS\t\t\\\n+  : (REGNO) == LINK_REGISTER_REGNUM ? LINK_REGS\t\\\n+  : (REGNO) == COUNT_REGISTER_REGNUM ? CTR_REGS\t\\\n+  : (REGNO) == ARG_POINTER_REGNUM ? BASE_REGS\t\\\n+  : (REGNO) == XER_REGNO ? XER_REGS\t\t\\\n   : NO_REGS)\n \n /* The class value for index registers, and the one for base regs.  */"}]}