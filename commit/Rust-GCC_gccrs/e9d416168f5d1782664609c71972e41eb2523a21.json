{"sha": "e9d416168f5d1782664609c71972e41eb2523a21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkNDE2MTY4ZjVkMTc4MjY2NDYwOWM3MTk3MmU0MWViMjUyM2EyMQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-19T19:19:08Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-05-19T19:19:08Z"}, "message": "sfp-machine.h (FP_EX_INVALID, [...]): New constants.\n\n        * config/i386/sfp-machine.h (FP_EX_INVALID, FP_EX_DENORM,\n        FP_EXP_DIVZERO, FP_EX_OVERFLOW, FP_EX_UNDERFLOW, FP_EX_INEXACT):\n        New constants.\n        (struct fenv): New structure.\n        (FP_HANDLE_EXCEPTIONS): New define.\n        (FP_RND_NEAREST, FP_RND_ZERO, FP_RND_PINF, FP_RND_MINF): New constants.\n        (_FP_DECL_EXP): New define.\n        (FP_INIT_ROUNDMODE): New define.\n        (FP_ROUNDMODE): New define.\n\nFrom-SVN: r124857", "tree": {"sha": "08728cd0fea3aded65bcd316bff0c701fb67097e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08728cd0fea3aded65bcd316bff0c701fb67097e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d416168f5d1782664609c71972e41eb2523a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d416168f5d1782664609c71972e41eb2523a21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d416168f5d1782664609c71972e41eb2523a21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d416168f5d1782664609c71972e41eb2523a21/comments", "author": null, "committer": null, "parents": [{"sha": "7060db96db1a93b956a065ab05fc2995d5af17f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7060db96db1a93b956a065ab05fc2995d5af17f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7060db96db1a93b956a065ab05fc2995d5af17f1"}], "stats": {"total": 92, "additions": 90, "deletions": 2}, "files": [{"sha": "dc0ed0790e7ef454722aba8e04ff4d781e891215", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d416168f5d1782664609c71972e41eb2523a21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d416168f5d1782664609c71972e41eb2523a21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9d416168f5d1782664609c71972e41eb2523a21", "patch": "@@ -1,3 +1,15 @@\n+2007-05-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sfp-machine.h (FP_EX_INVALID, FP_EX_DENORM,\n+\tFP_EXP_DIVZERO, FP_EX_OVERFLOW, FP_EX_UNDERFLOW, FP_EX_INEXACT):\n+\tNew constants.\n+\t(struct fenv): New structure.\n+\t(FP_HANDLE_EXCEPTIONS): New define.\n+\t(FP_RND_NEAREST, FP_RND_ZERO, FP_RND_PINF, FP_RND_MINF): New constants.\n+\t(_FP_DECL_EXP): New define.\n+\t(FP_INIT_ROUNDMODE): New define.\n+\t(FP_ROUNDMODE): New define.\n+\n 2007-05-19  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* doc/invoke.texi (Warning Options): Add -Wconversion-sign.\n@@ -13,13 +25,13 @@\n \t(convert_and_check): Don't check warnings if the conversion failed.\n \n 2007-05-19 Andy Hutchinson <HutchinsonAndy@netscape.net>\n-           Anatoly Sokolov <aesok@dol.ru>\n+\t   Anatoly Sokolov <aesok@dol.ru>\n \n \t* config/avr/avr-protos.h (expand_prologue, expand_epilogue, \n \tavr_epilogue_uses) : Add declaration.\n \t* config/avr/predicates.md (avr_sp_immediate_operand): New predicate.\n \t* config/avr/constraints.md (R): New constraint.\n-\tconfig/avr/avr.md (SREG_ADDR,  UNSPEC_SEI, UNSPEC_CLI, \n+\tconfig/avr/avr.md (SREG_ADDR, UNSPEC_SEI, UNSPEC_CLI, \n \tUNSPECV_PROLOGUE_SAVES, UNSPECV_EPILOGUE_RESTORES): New constants.\n \t(*pop1, *pop2, *pop3, *pop4, *pop5): Combine into ...\n \t(*addhi3_sp_R_pc2, *addhi3_sp_R_pc3): ... these patterns."}, {"sha": "4a4e354303d1e4dbe5948383dcda8b91452a248d", "filename": "gcc/config/i386/sfp-machine.h", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d416168f5d1782664609c71972e41eb2523a21/gcc%2Fconfig%2Fi386%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d416168f5d1782664609c71972e41eb2523a21/gcc%2Fconfig%2Fi386%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsfp-machine.h?ref=e9d416168f5d1782664609c71972e41eb2523a21", "patch": "@@ -44,6 +44,82 @@ typedef unsigned int UTItype __attribute__((mode(TI)));\n     R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n   } while (0)\n \n+#define FP_EX_INVALID\t\t0x01\n+#define FP_EX_DENORM\t\t0x02\n+#define FP_EX_DIVZERO\t\t0x04\n+#define FP_EX_OVERFLOW\t\t0x08\n+#define FP_EX_UNDERFLOW\t\t0x10\n+#define FP_EX_INEXACT\t\t0x20\n+\n+struct fenv\n+{\n+  unsigned short int __control_word;\n+  unsigned short int __unused1;\n+  unsigned short int __status_word;\n+  unsigned short int __unused2;\n+  unsigned short int __tags;\n+  unsigned short int __unused3;\n+  unsigned int __eip;\n+  unsigned short int __cs_selector;\n+  unsigned int __opcode:11;\n+  unsigned int __unused4:5;\n+  unsigned int __data_offset;\n+  unsigned short int __data_selector;\n+  unsigned short int __unused5;\n+};\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INVALID)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfloat f = 0.0;\t\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"divss %0, %0 \" : : \"x\" (f));\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_DIVZERO)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tfloat f = 1.0, g = 0.0;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"divss %1, %0\" : : \"x\" (f), \"x\" (g));\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_OVERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_OVERFLOW;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_UNDERFLOW)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_UNDERFLOW;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+    if (_fex & FP_EX_INEXACT)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tstruct fenv temp;\t\t\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fnstenv %0\" : \"=m\" (temp));\t\t\\\n+\ttemp.__status_word |= FP_EX_INEXACT;\t\t\t\t\\\n+\t__asm__ __volatile__ (\"fldenv %0\" : : \"m\" (temp));\t\t\\\n+\t__asm__ __volatile__ (\"fwait\");\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define FP_RND_NEAREST\t\t0\n+#define FP_RND_ZERO\t\t0xc00\n+#define FP_RND_PINF\t\t0x800\n+#define FP_RND_MINF\t\t0x400\n+\n+#define _FP_DECL_EX \\\n+  unsigned short _fcw __attribute__ ((unused)) = FP_RND_NEAREST\n+\n+#define FP_INIT_ROUNDMODE\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    __asm__ (\"fnstcw %0\" : \"=m\" (_fcw));\t\\\n+  } while (0)\n+\n+#define FP_ROUNDMODE\t\t(_fcw & 0xc00)\n \n #define\t__LITTLE_ENDIAN\t1234\n #define\t__BIG_ENDIAN\t4321"}]}