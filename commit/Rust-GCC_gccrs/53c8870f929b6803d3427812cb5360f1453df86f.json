{"sha": "53c8870f929b6803d3427812cb5360f1453df86f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjODg3MGY5MjliNjgwM2QzNDI3ODEyY2I1MzYwZjE0NTNkZjg2Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T13:44:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-07-29T13:44:07Z"}, "message": "(SUBREG_OK_FOR_INDEX_P): New macro.\n\n(INDEX_REGISTER_RTX_P): Use it.\n\nFrom-SVN: r10198", "tree": {"sha": "bfa1d4e8d5dda64c9db143d6074e33743cfe5037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfa1d4e8d5dda64c9db143d6074e33743cfe5037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53c8870f929b6803d3427812cb5360f1453df86f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c8870f929b6803d3427812cb5360f1453df86f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53c8870f929b6803d3427812cb5360f1453df86f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53c8870f929b6803d3427812cb5360f1453df86f/comments", "author": null, "committer": null, "parents": [{"sha": "922db4bb4e54b4d3b2b65fb7e6242bbb86080275", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922db4bb4e54b4d3b2b65fb7e6242bbb86080275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922db4bb4e54b4d3b2b65fb7e6242bbb86080275"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "38e7caab419c6e1ab877234e872b61cb40c137eb", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53c8870f929b6803d3427812cb5360f1453df86f/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53c8870f929b6803d3427812cb5360f1453df86f/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=53c8870f929b6803d3427812cb5360f1453df86f", "patch": "@@ -798,22 +798,31 @@ extern int current_function_anonymous_args;\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-  (REGNO (X) <= 16 || REGNO(X) >= FIRST_PSEUDO_REGISTER)\n+  (REGNO (X) <= 16 || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_INDEX_P(X) \\\n-  (REGNO (X) == 0 || REGNO(X) >= FIRST_PSEUDO_REGISTER)\n+  (REGNO (X) == 0 || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n+\n+/* Nonzero if X/OFFSET is a hard reg that can be used as an index\n+   or if X is a pseudo reg.  */\n+#define SUBREG_OK_FOR_INDEX_P(X, OFFSET) \\\n+  ((REGNO (X) == 0 && OFFSET == 0) || REGNO (X) >= FIRST_PSEUDO_REGISTER)\n \n #else\n \n /* Nonzero if X is a hard reg that can be used as a base reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-\tREGNO_OK_FOR_BASE_P (REGNO (X))\n+  REGNO_OK_FOR_BASE_P (REGNO (X))\n \n /* Nonzero if X is a hard reg that can be used as an index.  */\n #define REG_OK_FOR_INDEX_P(X) \\\n-  \tREGNO_OK_FOR_INDEX_P (REGNO (X))\n+  REGNO_OK_FOR_INDEX_P (REGNO (X))\n+\n+/* Nonzero if X/OFFSET is a hard reg that can be used as an index.  */\n+#define SUBREG_OK_FOR_INDEX_P(X, OFFSET) \\\n+  (REGNO_OK_FOR_INDEX_P (REGNO (X)) && OFFSET == 0)\n \n #endif\n \n@@ -843,11 +852,14 @@ extern int current_function_anonymous_args;\n        && GET_CODE (SUBREG_REG (X)) == REG\t\t\\\n        && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n \n+/* Since this must be r0, which is a single register class, we must check\n+   SUBREGs more carefully, to be sure that we don't accept one that extends\n+   outside the class.  */\n #define INDEX_REGISTER_RTX_P(X)\t\t\t\t\\\n   ((GET_CODE (X) == REG && REG_OK_FOR_INDEX_P (X))\t\\\n    || (GET_CODE (X) == SUBREG\t\t\t\t\\\n        && GET_CODE (SUBREG_REG (X)) == REG\t\t\\\n-       && REG_OK_FOR_INDEX_P (SUBREG_REG (X))))\n+       && SUBREG_OK_FOR_INDEX_P (SUBREG_REG (X), SUBREG_WORD (X))))\n \n /* Jump to LABEL if X is a valid address RTX.  This must also take\n    REG_OK_STRICT into account when deciding about valid registers, but it uses"}]}