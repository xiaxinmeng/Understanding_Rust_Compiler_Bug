{"sha": "0a0ef2387cc1561d537d8d949aef9479ef17ba35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEwZWYyMzg3Y2MxNTYxZDUzN2Q4ZDk0OWFlZjk0NzllZjE3YmEzNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T14:45:49Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T14:45:49Z"}, "message": "Add build_truth_vector_type_for_mode\n\nCallers of vect_halve_mask_nunits and vect_double_mask_nunits\nalready know what mode the resulting vector type should have,\nso we might as well create the vector type directly with that mode,\njust like build_vector_type_for_mode lets us build normal vectors\nwith a known mode.  This avoids the current awkwardness of having\nto recompute the mode starting from vec_info::vector_size, which\nhard-codes the assumption that all vectors have to be the same size.\n\nA later patch gets rid of build_truth_vector_type and\nbuild_same_sized_truth_vector_type, so the net effect of the\nseries is to reduce the number of type functions by one.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree.h (build_truth_vector_type_for_mode): Declare.\n\t* tree.c (build_truth_vector_type_for_mode): New function,\n\tsplit out from...\n\t(build_truth_vector_type): ...here.\n\t(build_opaque_vector_type): Fix head comment.\n\t* tree-vectorizer.h (supportable_narrowing_operation): Remove\n\tvec_info parameter.\n\t(vect_halve_mask_nunits): Replace vec_info parameter with the\n\tmode of the new vector.\n\t(vect_double_mask_nunits): Likewise.\n\t* tree-vect-loop.c (vect_halve_mask_nunits): Likewise.\n\t(vect_double_mask_nunits): Likewise.\n\t* tree-vect-loop-manip.c: Include insn-config.h, rtl.h and recog.h.\n\t(vect_maybe_permute_loop_masks): Remove vinfo parameter.  Update call\n\tto vect_halve_mask_nunits, getting the required mode from the unpack\n\tpatterns.\n\t(vect_set_loop_condition_masked): Update call accordingly.\n\t* tree-vect-stmts.c (supportable_narrowing_operation): Remove vec_info\n\tparameter and update call to vect_double_mask_nunits.\n\t(vectorizable_conversion): Update call accordingly.\n\t(simple_integer_narrowing): Likewise.  Remove vec_info parameter.\n\t(vectorizable_call): Update call accordingly.\n\t(supportable_widening_operation): Update call to\n\tvect_halve_mask_nunits.\n\t* config/aarch64/aarch64-sve-builtins.cc (register_builtin_types):\n\tUse build_truth_vector_type_mode instead of build_truth_vector_type.\n\nFrom-SVN: r278231", "tree": {"sha": "9c5d882c792520fd488d9020641474564b6e62de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5d882c792520fd488d9020641474564b6e62de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a0ef2387cc1561d537d8d949aef9479ef17ba35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0ef2387cc1561d537d8d949aef9479ef17ba35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a0ef2387cc1561d537d8d949aef9479ef17ba35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a0ef2387cc1561d537d8d949aef9479ef17ba35/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d083ee47a9828236016841356fc7207e7c90bbbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d083ee47a9828236016841356fc7207e7c90bbbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d083ee47a9828236016841356fc7207e7c90bbbd"}], "stats": {"total": 149, "additions": 95, "deletions": 54}, "files": [{"sha": "79c8042b46e25354773e62209d334de98ff8258f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -1,3 +1,32 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree.h (build_truth_vector_type_for_mode): Declare.\n+\t* tree.c (build_truth_vector_type_for_mode): New function,\n+\tsplit out from...\n+\t(build_truth_vector_type): ...here.\n+\t(build_opaque_vector_type): Fix head comment.\n+\t* tree-vectorizer.h (supportable_narrowing_operation): Remove\n+\tvec_info parameter.\n+\t(vect_halve_mask_nunits): Replace vec_info parameter with the\n+\tmode of the new vector.\n+\t(vect_double_mask_nunits): Likewise.\n+\t* tree-vect-loop.c (vect_halve_mask_nunits): Likewise.\n+\t(vect_double_mask_nunits): Likewise.\n+\t* tree-vect-loop-manip.c: Include insn-config.h, rtl.h and recog.h.\n+\t(vect_maybe_permute_loop_masks): Remove vinfo parameter.  Update call\n+\tto vect_halve_mask_nunits, getting the required mode from the unpack\n+\tpatterns.\n+\t(vect_set_loop_condition_masked): Update call accordingly.\n+\t* tree-vect-stmts.c (supportable_narrowing_operation): Remove vec_info\n+\tparameter and update call to vect_double_mask_nunits.\n+\t(vectorizable_conversion): Update call accordingly.\n+\t(simple_integer_narrowing): Likewise.  Remove vec_info parameter.\n+\t(vectorizable_call): Update call accordingly.\n+\t(supportable_widening_operation): Update call to\n+\tvect_halve_mask_nunits.\n+\t* config/aarch64/aarch64-sve-builtins.cc (register_builtin_types):\n+\tUse build_truth_vector_type_mode instead of build_truth_vector_type.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* machmode.h (mode_for_int_vector): Delete."}, {"sha": "2dc2cea875bbaf65779bfaa10de1fc983131465f", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -2973,8 +2973,8 @@ register_builtin_types ()\n       tree vectype;\n       if (eltype == boolean_type_node)\n \t{\n-\t  vectype = build_truth_vector_type (BYTES_PER_SVE_VECTOR,\n-\t\t\t\t\t     BYTES_PER_SVE_VECTOR);\n+\t  vectype = build_truth_vector_type_for_mode (BYTES_PER_SVE_VECTOR,\n+\t\t\t\t\t\t      VNx16BImode);\n \t  gcc_assert (TYPE_MODE (vectype) == VNx16BImode\n \t\t      && TYPE_MODE (vectype) == TYPE_MODE_RAW (vectype)\n \t\t      && TYPE_ALIGN (vectype) == 16"}, {"sha": "f49d9803223a8c3cbb62c8f0e0f7bcb626ec5ee9", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -47,6 +47,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"optabs-query.h\"\n #include \"vec-perm-indices.h\"\n+#include \"insn-config.h\"\n+#include \"rtl.h\"\n+#include \"recog.h\"\n \n /*************************************************************************\n   Simple Loop Peeling Utilities\n@@ -317,20 +320,24 @@ interleave_supported_p (vec_perm_indices *indices, tree vectype,\n    latter.  Return true on success, adding any new statements to SEQ.  */\n \n static bool\n-vect_maybe_permute_loop_masks (loop_vec_info loop_vinfo, gimple_seq *seq,\n-\t\t\t       rgroup_masks *dest_rgm,\n+vect_maybe_permute_loop_masks (gimple_seq *seq, rgroup_masks *dest_rgm,\n \t\t\t       rgroup_masks *src_rgm)\n {\n   tree src_masktype = src_rgm->mask_type;\n   tree dest_masktype = dest_rgm->mask_type;\n   machine_mode src_mode = TYPE_MODE (src_masktype);\n+  insn_code icode1, icode2;\n   if (dest_rgm->max_nscalars_per_iter <= src_rgm->max_nscalars_per_iter\n-      && optab_handler (vec_unpacku_hi_optab, src_mode) != CODE_FOR_nothing\n-      && optab_handler (vec_unpacku_lo_optab, src_mode) != CODE_FOR_nothing)\n+      && (icode1 = optab_handler (vec_unpacku_hi_optab,\n+\t\t\t\t  src_mode)) != CODE_FOR_nothing\n+      && (icode2 = optab_handler (vec_unpacku_lo_optab,\n+\t\t\t\t  src_mode)) != CODE_FOR_nothing)\n     {\n       /* Unpacking the source masks gives at least as many mask bits as\n \t we need.  We can then VIEW_CONVERT any excess bits away.  */\n-      tree unpack_masktype = vect_halve_mask_nunits (loop_vinfo, src_masktype);\n+      machine_mode dest_mode = insn_data[icode1].operand[0].mode;\n+      gcc_assert (dest_mode == insn_data[icode2].operand[0].mode);\n+      tree unpack_masktype = vect_halve_mask_nunits (src_masktype, dest_mode);\n       for (unsigned int i = 0; i < dest_rgm->masks.length (); ++i)\n \t{\n \t  tree src = src_rgm->masks[i / 2];\n@@ -690,8 +697,7 @@ vect_set_loop_condition_masked (class loop *loop, loop_vec_info loop_vinfo,\n \t  {\n \t    rgroup_masks *half_rgm = &(*masks)[nmasks / 2 - 1];\n \t    if (!half_rgm->masks.is_empty ()\n-\t\t&& vect_maybe_permute_loop_masks (loop_vinfo, &header_seq,\n-\t\t\t\t\t\t  rgm, half_rgm))\n+\t\t&& vect_maybe_permute_loop_masks (&header_seq, rgm, half_rgm))\n \t      continue;\n \t  }\n "}, {"sha": "5cc2f8a240e9b91cbcf69b6cf442f4845939dd00", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -7900,22 +7900,24 @@ loop_niters_no_overflow (loop_vec_info loop_vinfo)\n   return false;\n }\n \n-/* Return a mask type with half the number of elements as TYPE.  */\n+/* Return a mask type with half the number of elements as OLD_TYPE,\n+   given that it should have mode NEW_MODE.  */\n \n tree\n-vect_halve_mask_nunits (vec_info *vinfo, tree type)\n+vect_halve_mask_nunits (tree old_type, machine_mode new_mode)\n {\n-  poly_uint64 nunits = exact_div (TYPE_VECTOR_SUBPARTS (type), 2);\n-  return build_truth_vector_type (nunits, vinfo->vector_size);\n+  poly_uint64 nunits = exact_div (TYPE_VECTOR_SUBPARTS (old_type), 2);\n+  return build_truth_vector_type_for_mode (nunits, new_mode);\n }\n \n-/* Return a mask type with twice as many elements as TYPE.  */\n+/* Return a mask type with twice as many elements as OLD_TYPE,\n+   given that it should have mode NEW_MODE.  */\n \n tree\n-vect_double_mask_nunits (vec_info *vinfo, tree type)\n+vect_double_mask_nunits (tree old_type, machine_mode new_mode)\n {\n-  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (type) * 2;\n-  return build_truth_vector_type (nunits, vinfo->vector_size);\n+  poly_uint64 nunits = TYPE_VECTOR_SUBPARTS (old_type) * 2;\n+  return build_truth_vector_type_for_mode (nunits, new_mode);\n }\n \n /* Record that a fully-masked version of LOOP_VINFO would need MASKS to"}, {"sha": "9668643d20b8d2606eb9df3fe3bcdd295726c4aa", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -3153,7 +3153,7 @@ vectorizable_bswap (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n    *CONVERT_CODE.  */\n \n static bool\n-simple_integer_narrowing (vec_info *vinfo, tree vectype_out, tree vectype_in,\n+simple_integer_narrowing (tree vectype_out, tree vectype_in,\n \t\t\t  tree_code *convert_code)\n {\n   if (!INTEGRAL_TYPE_P (TREE_TYPE (vectype_out))\n@@ -3163,9 +3163,8 @@ simple_integer_narrowing (vec_info *vinfo, tree vectype_out, tree vectype_in,\n   tree_code code;\n   int multi_step_cvt = 0;\n   auto_vec <tree, 8> interm_types;\n-  if (!supportable_narrowing_operation (vinfo, NOP_EXPR, vectype_out,\n-\t\t\t\t\tvectype_in, &code, &multi_step_cvt,\n-\t\t\t\t\t&interm_types)\n+  if (!supportable_narrowing_operation (NOP_EXPR, vectype_out, vectype_in,\n+\t\t\t\t\t&code, &multi_step_cvt, &interm_types)\n       || multi_step_cvt)\n     return false;\n \n@@ -3347,7 +3346,7 @@ vectorizable_call (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   if (cfn != CFN_LAST\n       && (modifier == NONE\n \t  || (modifier == NARROW\n-\t      && simple_integer_narrowing (vinfo, vectype_out, vectype_in,\n+\t      && simple_integer_narrowing (vectype_out, vectype_in,\n \t\t\t\t\t   &convert_code))))\n     ifn = vectorizable_internal_function (cfn, callee, vectype_out,\n \t\t\t\t\t  vectype_in);\n@@ -4931,8 +4930,8 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \n     case NARROW:\n       gcc_assert (op_type == unary_op);\n-      if (supportable_narrowing_operation (vinfo, code, vectype_out,\n-\t\t\t\t\t   vectype_in, &code1, &multi_step_cvt,\n+      if (supportable_narrowing_operation (code, vectype_out, vectype_in,\n+\t\t\t\t\t   &code1, &multi_step_cvt,\n \t\t\t\t\t   &interm_types))\n \tbreak;\n \n@@ -4948,8 +4947,8 @@ vectorizable_conversion (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n       if (!supportable_convert_operation (code, cvt_type, vectype_in,\n \t\t\t\t\t  &decl1, &codecvt1))\n \tgoto unsupported;\n-      if (supportable_narrowing_operation (vinfo, NOP_EXPR, vectype_out,\n-\t\t\t\t\t   cvt_type, &code1, &multi_step_cvt,\n+      if (supportable_narrowing_operation (NOP_EXPR, vectype_out, cvt_type,\n+\t\t\t\t\t   &code1, &multi_step_cvt,\n \t\t\t\t\t   &interm_types))\n \tbreak;\n       goto unsupported;\n@@ -11454,7 +11453,6 @@ supportable_widening_operation (enum tree_code code, stmt_vec_info stmt_info,\n                                 int *multi_step_cvt,\n                                 vec<tree> *interm_types)\n {\n-  vec_info *vinfo = stmt_info->vinfo;\n   loop_vec_info loop_info = STMT_VINFO_LOOP_VINFO (stmt_info);\n   class loop *vect_loop = NULL;\n   machine_mode vec_mode;\n@@ -11639,11 +11637,8 @@ supportable_widening_operation (enum tree_code code, stmt_vec_info stmt_info,\n     {\n       intermediate_mode = insn_data[icode1].operand[0].mode;\n       if (VECTOR_BOOLEAN_TYPE_P (prev_type))\n-\t{\n-\t  intermediate_type = vect_halve_mask_nunits (vinfo, prev_type);\n-\t  if (intermediate_mode != TYPE_MODE (intermediate_type))\n-\t    return false;\n-\t}\n+\tintermediate_type\n+\t  = vect_halve_mask_nunits (prev_type, intermediate_mode);\n       else\n \tintermediate_type\n \t  = lang_hooks.types.type_for_mode (intermediate_mode,\n@@ -11719,7 +11714,7 @@ supportable_widening_operation (enum tree_code code, stmt_vec_info stmt_info,\n    narrowing operation (short in the above example).   */\n \n bool\n-supportable_narrowing_operation (vec_info *vinfo, enum tree_code code,\n+supportable_narrowing_operation (enum tree_code code,\n \t\t\t\t tree vectype_out, tree vectype_in,\n \t\t\t\t enum tree_code *code1, int *multi_step_cvt,\n                                  vec<tree> *interm_types)\n@@ -11827,11 +11822,8 @@ supportable_narrowing_operation (vec_info *vinfo, enum tree_code code,\n     {\n       intermediate_mode = insn_data[icode1].operand[0].mode;\n       if (VECTOR_BOOLEAN_TYPE_P (prev_type))\n-\t{\n-\t  intermediate_type = vect_double_mask_nunits (vinfo, prev_type);\n-\t  if (intermediate_mode != TYPE_MODE (intermediate_type))\n-\t    return false;\n-\t}\n+\tintermediate_type\n+\t  = vect_double_mask_nunits (prev_type, intermediate_mode);\n       else\n \tintermediate_type\n \t  = lang_hooks.types.type_for_mode (intermediate_mode, uns);"}, {"sha": "a6ddaafd38c383b679bde168516015daed06df33", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -1638,9 +1638,9 @@ extern bool supportable_widening_operation (enum tree_code, stmt_vec_info,\n \t\t\t\t\t    tree, tree, enum tree_code *,\n \t\t\t\t\t    enum tree_code *, int *,\n \t\t\t\t\t    vec<tree> *);\n-extern bool supportable_narrowing_operation (vec_info *, enum tree_code, tree,\n-\t\t\t\t\t     tree, enum tree_code *,\n-\t\t\t\t\t     int *, vec<tree> *);\n+extern bool supportable_narrowing_operation (enum tree_code, tree, tree,\n+\t\t\t\t\t     enum tree_code *, int *,\n+\t\t\t\t\t     vec<tree> *);\n extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n \t\t\t\t  enum vect_cost_for_stmt, stmt_vec_info,\n \t\t\t\t  int, enum vect_cost_model_location);\n@@ -1741,8 +1741,8 @@ extern opt_loop_vec_info vect_analyze_loop (class loop *, vec_info_shared *);\n extern tree vect_build_loop_niters (loop_vec_info, bool * = NULL);\n extern void vect_gen_vector_loop_niters (loop_vec_info, tree, tree *,\n \t\t\t\t\t tree *, bool);\n-extern tree vect_halve_mask_nunits (vec_info *, tree);\n-extern tree vect_double_mask_nunits (vec_info *, tree);\n+extern tree vect_halve_mask_nunits (tree, machine_mode);\n+extern tree vect_double_mask_nunits (tree, machine_mode);\n extern void vect_record_loop_mask (loop_vec_info, vec_loop_masks *,\n \t\t\t\t   unsigned int, tree, tree);\n extern tree vect_get_loop_mask (gimple_stmt_iterator *, vec_loop_masks *,"}, {"sha": "2375bf85c2daa5e7105acca22e8e20a88e0c8cd6", "filename": "gcc/tree.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -10873,25 +10873,35 @@ build_vector_type (tree innertype, poly_int64 nunits)\n   return make_vector_type (innertype, nunits, VOIDmode);\n }\n \n+/* Build a truth vector with NUNITS units, giving it mode MASK_MODE.  */\n+\n+tree\n+build_truth_vector_type_for_mode (poly_uint64 nunits, machine_mode mask_mode)\n+{\n+  gcc_assert (mask_mode != BLKmode);\n+\n+  poly_uint64 vsize = GET_MODE_BITSIZE (mask_mode);\n+  unsigned HOST_WIDE_INT esize = vector_element_size (vsize, nunits);\n+  tree bool_type = build_nonstandard_boolean_type (esize);\n+\n+  return make_vector_type (bool_type, nunits, mask_mode);\n+}\n+\n /* Build truth vector with specified length and number of units.  */\n \n tree\n build_truth_vector_type (poly_uint64 nunits, poly_uint64 vector_size)\n {\n-  machine_mode mask_mode\n-    = targetm.vectorize.get_mask_mode (nunits, vector_size).else_blk ();\n-\n-  poly_uint64 vsize;\n-  if (mask_mode == BLKmode)\n-    vsize = vector_size * BITS_PER_UNIT;\n-  else\n-    vsize = GET_MODE_BITSIZE (mask_mode);\n+  machine_mode mask_mode;\n+  if (targetm.vectorize.get_mask_mode (nunits,\n+\t\t\t\t       vector_size).exists (&mask_mode))\n+    return build_truth_vector_type_for_mode (nunits, mask_mode);\n \n+  poly_uint64 vsize = vector_size * BITS_PER_UNIT;\n   unsigned HOST_WIDE_INT esize = vector_element_size (vsize, nunits);\n-\n   tree bool_type = build_nonstandard_boolean_type (esize);\n \n-  return make_vector_type (bool_type, nunits, mask_mode);\n+  return make_vector_type (bool_type, nunits, BLKmode);\n }\n \n /* Returns a vector type corresponding to a comparison of VECTYPE.  */\n@@ -10910,7 +10920,8 @@ build_same_sized_truth_vector_type (tree vectype)\n   return build_truth_vector_type (TYPE_VECTOR_SUBPARTS (vectype), size);\n }\n \n-/* Similarly, but builds a variant type with TYPE_VECTOR_OPAQUE set.  */\n+/* Like build_vector_type, but builds a variant type with TYPE_VECTOR_OPAQUE\n+   set.  */\n \n tree\n build_opaque_vector_type (tree innertype, poly_int64 nunits)"}, {"sha": "93ccbf7fa86b6388d18fb984c6618d8e696c3e71", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a0ef2387cc1561d537d8d949aef9479ef17ba35/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0a0ef2387cc1561d537d8d949aef9479ef17ba35", "patch": "@@ -4443,6 +4443,7 @@ extern tree build_reference_type_for_mode (tree, machine_mode, bool);\n extern tree build_reference_type (tree);\n extern tree build_vector_type_for_mode (tree, machine_mode);\n extern tree build_vector_type (tree, poly_int64);\n+extern tree build_truth_vector_type_for_mode (poly_uint64, machine_mode);\n extern tree build_truth_vector_type (poly_uint64, poly_uint64);\n extern tree build_same_sized_truth_vector_type (tree vectype);\n extern tree build_opaque_vector_type (tree, poly_int64);"}]}