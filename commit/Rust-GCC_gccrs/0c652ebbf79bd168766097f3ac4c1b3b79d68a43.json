{"sha": "0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "node_id": "C_kwDOANBUbNoAKDBjNjUyZWJiZjc5YmQxNjg3NjYwOTdmM2FjNGMxYjNiNzlkNjhhNDM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-22T12:40:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-22T12:40:34Z"}, "message": "analyzer: fix false +ves from -Wanalyzer-deref-before-check due to inlining [PR109239]\n\nThe patch has this effect on my integration tests of -fanalyzer:\n\n  Comparison:\n    GOOD: 129        (17.70% -> 17.92%)\n     BAD: 600 -> 591 (-9)\n\nwhich is purely due to improvements to -Wanalyzer-deref-before-check\non the Linux kernel:\n\n  -Wanalyzer-deref-before-check:\n    GOOD: 1        (4.55% -> 7.69%)\n     BAD: 21 -> 12 (-9)\n     Known false positives: 16 -> 10 (-6)\n       linux-5.10.162: 7 -> 1 (-6)\n     Suspected false positives: 3 -> 0 (-3)\n       linux-5.10.162: 3 -> 0 (-3)\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/109239\n\t* program-point.cc: Include \"analyzer/inlining-iterator.h\".\n\t(program_point::effectively_intraprocedural_p): New function.\n\t* program-point.h (program_point::effectively_intraprocedural_p):\n\tNew decl.\n\t* sm-malloc.cc (deref_before_check::emit): Use it when rejecting\n\tinterprocedural cases, so that we reject interprocedural cases\n\tthat have become intraprocedural due to inlining.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/109239\n\t* gcc.dg/analyzer/deref-before-check-pr109239-linux-bus.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "820aef7492def9c7de3fc8740cb0606222aa4e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/820aef7492def9c7de3fc8740cb0606222aa4e39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bde3acee77c171117dfb988998daa8197c73b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bde3acee77c171117dfb988998daa8197c73b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bde3acee77c171117dfb988998daa8197c73b34"}], "stats": {"total": 207, "additions": 203, "deletions": 4}, "files": [{"sha": "f2d6490f0c04407775d488a0e7752e3f35738f8c", "filename": "gcc/analyzer/program-point.cc", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Fanalyzer%2Fprogram-point.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Fanalyzer%2Fprogram-point.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-point.cc?ref=0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"shortest-paths.h\"\n #include \"analyzer/exploded-graph.h\"\n #include \"analyzer/analysis-plan.h\"\n+#include \"analyzer/inlining-iterator.h\"\n \n #if ENABLE_ANALYZER\n \n@@ -719,6 +720,47 @@ program_point::get_next () const\n     }\n }\n \n+/* Return true iff POINT_A and POINT_B share the same function and\n+   call_string, both directly, and when attempting to undo inlining\n+   information.  */\n+\n+bool\n+program_point::effectively_intraprocedural_p (const program_point &point_a,\n+\t\t\t\t\t      const program_point &point_b)\n+{\n+  /* First, compare without considering inlining info.  */\n+  if (point_a.get_function ()\n+      != point_b.get_function ())\n+    return false;\n+  if (&point_a.get_call_string ()\n+      != &point_b.get_call_string ())\n+    return false;\n+\n+  /* Consider inlining info; they must have originally come from\n+     the same function and have been inlined in the same way.  */\n+  location_t loc_a = point_a.get_location ();\n+  location_t loc_b = point_b.get_location ();\n+  inlining_iterator iter_a (loc_a);\n+  inlining_iterator iter_b (loc_b);\n+  while (!(iter_a.done_p () || iter_b.done_p ()))\n+    {\n+      if (iter_a.done_p () || iter_b.done_p ())\n+\treturn false;\n+\n+      if (iter_a.get_fndecl () != iter_b.get_fndecl ())\n+\treturn false;\n+      if (iter_a.get_callsite () != iter_b.get_callsite ())\n+\treturn false;\n+      if (iter_a.get_block () != iter_b.get_block ())\n+\treturn false;\n+\n+      iter_a.next ();\n+      iter_b.next ();\n+    }\n+\n+  return true;\n+}\n+\n #if CHECKING_P\n \n namespace selftest {"}, {"sha": "7df3b69c513502d747d5dcca6472f925cb263a7c", "filename": "gcc/analyzer/program-point.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Fanalyzer%2Fprogram-point.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Fanalyzer%2Fprogram-point.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-point.h?ref=0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "patch": "@@ -299,6 +299,9 @@ class program_point\n \n   program_point get_next () const;\n \n+  static bool effectively_intraprocedural_p (const program_point &point_a,\n+\t\t\t\t\t     const program_point &point_b);\n+\n  private:\n   program_point (const function_point &fn_point)\n   : m_function_point (fn_point),"}, {"sha": "74701375409d214cb239a292a52e89705832e1ee", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "patch": "@@ -1520,10 +1520,11 @@ class deref_before_check : public malloc_diagnostic\n     if (!m_check_enode)\n       return false;\n     /* Only emit the warning for intraprocedural cases.  */\n-    if (m_deref_enode->get_function () != m_check_enode->get_function ())\n-      return false;\n-    if (&m_deref_enode->get_point ().get_call_string ()\n-\t!= &m_check_enode->get_point ().get_call_string ())\n+    const program_point &deref_point = m_deref_enode->get_point ();\n+    const program_point &check_point = m_check_enode->get_point ();\n+\n+    if (!program_point::effectively_intraprocedural_p (deref_point,\n+\t\t\t\t\t\t       check_point))\n       return false;\n \n     /* Reject the warning if the check occurs within a macro defintion."}, {"sha": "49b6420cc6b530d5e6c0ddb1fd61df8450d5a74d", "filename": "gcc/testsuite/gcc.dg/analyzer/deref-before-check-pr109239-linux-bus.c", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-pr109239-linux-bus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c652ebbf79bd168766097f3ac4c1b3b79d68a43/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-pr109239-linux-bus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fderef-before-check-pr109239-linux-bus.c?ref=0c652ebbf79bd168766097f3ac4c1b3b79d68a43", "patch": "@@ -0,0 +1,153 @@\n+/* Reduced from linux-5.10.162's drivers-base-bus.c  */\n+/* { dg-additional-options \"-fno-delete-null-pointer-checks -O2\" } */\n+\n+#define NULL ((void*)0)\n+\n+typedef unsigned int __kernel_size_t;\n+typedef int __kernel_ssize_t;\n+typedef __kernel_size_t size_t;\n+typedef __kernel_ssize_t ssize_t;\n+\n+struct list_head\n+{\n+  struct list_head *next, *prev;\n+};\n+\n+struct kobject\n+{\n+  /* [...snip...] */\n+};\n+\n+struct attribute\n+{\n+  /* [...snip...] */\n+};\n+\n+static inline\n+void\n+sysfs_remove_file_ns(struct kobject* kobj,\n+                     const struct attribute* attr,\n+                     const void* ns)\n+{\n+}\n+\n+static inline\n+void\n+sysfs_remove_file(struct kobject* kobj, const struct attribute* attr)\n+{\n+  sysfs_remove_file_ns(kobj, attr, NULL);\n+}\n+\n+extern struct kobject*\n+kobject_get(struct kobject* kobj);\n+\n+extern void\n+kobject_put(struct kobject* kobj);\n+\n+struct kset\n+{\n+  struct list_head list;\n+  /* [...snip...] */\n+  struct kobject kobj;\n+  /* [...snip...] */\n+} __attribute__((__designated_init__));\n+\n+static inline\n+struct kset*\n+to_kset(struct kobject* kobj)\n+{\n+  return kobj ? ({\n+    void* __mptr = (void*)(kobj);\n+    ((struct kset*)(__mptr - __builtin_offsetof(struct kset, kobj)));\n+  }) : NULL;\n+}\n+\n+static inline\n+struct kset*\n+kset_get(struct kset* k)\n+{\n+  return k ? to_kset(kobject_get(&k->kobj)) : NULL;\n+}\n+\n+static inline\n+void\n+kset_put(struct kset* k)\n+{\n+  kobject_put(&k->kobj);\n+}\n+\n+struct bus_type\n+{\n+  /* [...snip...] */\n+  struct device* dev_root;\n+  /* [...snip...] */\n+  struct subsys_private* p;\n+  /* [...snip...] */\n+};\n+\n+struct bus_attribute\n+{\n+  struct attribute attr;\n+  /* [...snip...] */\n+};\n+\n+extern void\n+device_unregister(struct device* dev);\n+\n+struct subsys_private\n+{\n+  struct kset subsys;\n+  /* [...snip...] */\n+};\n+\n+static struct bus_type*\n+bus_get(struct bus_type* bus)\n+{\n+  if (bus) { /* { dg-bogus \"check of 'bus' for NULL after already dereferencing it\" } */\n+    kset_get(&bus->p->subsys);\n+    return bus;\n+  }\n+  return NULL;\n+}\n+\n+static void\n+bus_put(struct bus_type* bus)\n+{\n+  if (bus)\n+    kset_put(&bus->p->subsys);\n+}\n+\n+void\n+bus_remove_file(struct bus_type* bus, struct bus_attribute* attr)\n+{\n+  if (bus_get(bus)) {\n+    sysfs_remove_file(&bus->p->subsys.kobj, &attr->attr);\n+    bus_put(bus);\n+  }\n+}\n+\n+extern ssize_t\n+drivers_autoprobe_show(struct bus_type* bus, char* buf);\n+\n+extern ssize_t\n+drivers_autoprobe_store(struct bus_type* bus, const char* buf, size_t count);\n+\n+extern struct bus_attribute bus_attr_drivers_autoprobe;\n+\n+static void\n+remove_probe_files(struct bus_type* bus)\n+{\n+  bus_remove_file(bus, &bus_attr_drivers_autoprobe);\n+  /* [...snip...] */\n+}\n+\n+void\n+bus_unregister(struct bus_type* bus)\n+{\n+  /* [...snip...] */\n+  if (bus->dev_root) /* { dg-bogus \"pointer 'bus' is dereferenced here\" } */\n+    device_unregister(bus->dev_root);\n+  /* [...snip...] */\n+  remove_probe_files(bus);\n+  /* [...snip...] */\n+}"}]}