{"sha": "995d4d1cb5556ae6355234619cfbe187b2ec8d30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk1ZDRkMWNiNTU1NmFlNjM1NTIzNDYxOWNmYmUxODdiMmVjOGQzMA==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2010-12-04T09:27:17Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2010-12-04T09:27:17Z"}, "message": "re PR fortran/46794 (ICE on valid code involving power of small integer kinds)\n\n2010-12-04  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/46794\n\t* trans-expr.c (gfc_conv_power_op): Handle kind of result expression\n\tcorrectly for integer kind 1 and 2 operands.\n\n2010-12-04  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/46794\n\t* gfortran.dg/power2.f90: New test.\n\nFrom-SVN: r167453", "tree": {"sha": "22ca52b12eba47e7c8d2c8d561065cbb8a2309cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ca52b12eba47e7c8d2c8d561065cbb8a2309cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/995d4d1cb5556ae6355234619cfbe187b2ec8d30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995d4d1cb5556ae6355234619cfbe187b2ec8d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/995d4d1cb5556ae6355234619cfbe187b2ec8d30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/995d4d1cb5556ae6355234619cfbe187b2ec8d30/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b2b801af5011d6b1f92899f682107776019766c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b801af5011d6b1f92899f682107776019766c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2b801af5011d6b1f92899f682107776019766c"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "a1d06c5872fed8979b78b9f93a29c465af3ee0ed", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=995d4d1cb5556ae6355234619cfbe187b2ec8d30", "patch": "@@ -1,3 +1,9 @@\n+2010-12-04  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/46794\n+\t* trans-expr.c (gfc_conv_power_op): Handle kind of result expression\n+\tcorrectly for integer kind 1 and 2 operands.\n+\n 2010-12-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/44352"}, {"sha": "46f80f7fb1733b3e7a0e4f2c2fb9afdfd1a11be2", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=995d4d1cb5556ae6355234619cfbe187b2ec8d30", "patch": "@@ -976,6 +976,7 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n   tree gfc_int4_type_node;\n   int kind;\n   int ikind;\n+  int res_ikind_1, res_ikind_2;\n   gfc_se lse;\n   gfc_se rse;\n   tree fndecl = NULL;\n@@ -996,6 +997,13 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \n   gfc_int4_type_node = gfc_get_int_type (4);\n \n+  /* In case of integer operands with kinds 1 or 2, we call the integer kind 4\n+     library routine.  But in the end, we have to convert the result back\n+     if this case applies -- with res_ikind_K, we keep track whether operand K\n+     falls into this case.  */\n+  res_ikind_1 = -1;\n+  res_ikind_2 = -1;\n+\n   kind = expr->value.op.op1->ts.kind;\n   switch (expr->value.op.op2->ts.type)\n     {\n@@ -1006,6 +1014,7 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \tcase 1:\n \tcase 2:\n \t  rse.expr = convert (gfc_int4_type_node, rse.expr);\n+\t  res_ikind_2 = ikind;\n \t  /* Fall through.  */\n \n \tcase 4:\n@@ -1028,7 +1037,10 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \tcase 1:\n \tcase 2:\n \t  if (expr->value.op.op1->ts.type == BT_INTEGER)\n-\t    lse.expr = convert (gfc_int4_type_node, lse.expr);\n+\t    {\n+\t      lse.expr = convert (gfc_int4_type_node, lse.expr);\n+\t      res_ikind_1 = kind;\n+\t    }\n \t  else\n \t    gcc_unreachable ();\n \t  /* Fall through.  */\n@@ -1121,6 +1133,15 @@ gfc_conv_power_op (gfc_se * se, gfc_expr * expr)\n \n   se->expr = build_call_expr_loc (input_location,\n \t\t\t      fndecl, 2, lse.expr, rse.expr);\n+\n+  /* Convert the result back if it is of wrong integer kind.  */\n+  if (res_ikind_1 != -1 && res_ikind_2 != -1)\n+    {\n+      /* We want the maximum of both operand kinds as result.  */\n+      if (res_ikind_1 < res_ikind_2)\n+\tres_ikind_1 = res_ikind_2;\n+      se->expr = convert (gfc_get_int_type (res_ikind_1), se->expr);\n+    }\n }\n \n "}, {"sha": "e48bf7818cf2c4802d67dc140613626cab2af28e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=995d4d1cb5556ae6355234619cfbe187b2ec8d30", "patch": "@@ -1,3 +1,8 @@\n+2010-12-04  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/46794\n+\t* gfortran.dg/power2.f90: New test.\n+\n 2010-12-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/46123"}, {"sha": "01954cb6832ec4cfd4b3e190a14773e4238d8e33", "filename": "gcc/testsuite/gfortran.dg/power2.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/995d4d1cb5556ae6355234619cfbe187b2ec8d30/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpower2.f90?ref=995d4d1cb5556ae6355234619cfbe187b2ec8d30", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! PR fortran/46794\n+\n+! Check that results of powers of integers with kinds 1 and 2 are\n+! correctly converted back; this used to ICE because a conversion\n+! from kind 4 to the correct one was missing.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+  INTEGER(KIND=1) :: k1\n+  INTEGER(KIND=2) :: k2\n+\n+  k1 = 1_1 + 1_1**k1\n+  k2 = 1_2 + 1_2**k2\n+\n+  k2 = 1_1 + 1_1**k2\n+  k2 = 1_1 + 1_2**k1\n+  k2 = 1_1 + 1_2**k2\n+END PROGRAM main"}]}