{"sha": "f200c56787f2c6f93ffb739d57d01a294ab72f68", "node_id": "C_kwDOANBUbNoAKGYyMDBjNTY3ODdmMmM2ZjkzZmZiNzM5ZDU3ZDAxYTI5NGFiNzJmNjg", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2023-03-23T18:47:57Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2023-04-17T10:15:04Z"}, "message": "aarch64: disable LDP via tuning structure for -mcpu=ampere1\n\nAmpereOne (-mcpu=ampere1) breaks LDP instructions into two uops.\nGiven the chance that this causes instructions to slip into the next\ndecoding cycle and the additional overheads when handling\ncacheline-crossing LDP instructions, we disable the generation of LDP\nisntructions through the tuning structure from instruction combining\n(such as in peephole2).\n\nGiven the code-density benefits in builtins and prologue/epilogue\nexpansion, we allow LDPs there.\n\nThis commit:\n * adds a new tuning option AARCH64_EXTRA_TUNE_NO_LDP_COMBINE\n * allows -moverride=tune=... to override this\n\nThese changes are benchmark-driven, yielding the following changes\n(with a net-overall improvement):\n   503.bwaves_r.      -0.88%\n   507.cactuBSSN_r     0.35%\n   508.namd_r          3.09%\n   510.parest_r       -2.99%\n   511.povray_r        5.54%\n   519.lbm_r          15.83%\n   521.wrf_r           0.56%\n   526.blender_r       2.47%\n   527.cam4_r          0.70%\n   538.imagick_r       0.00%\n   544.nab_r          -0.33%\n   549.fotonik3d_r.   -0.42%\n   554.roms_r          0.00%\n   -------------------------\n   = total             1.79%\n\nSigned-off-by: Philipp Tomsich <philipp.tomsich@vrull.eu>\nCo-Authored-By: Di Zhao <di.zhao@amperecomputing.com>\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-tuning-flags.def (AARCH64_EXTRA_TUNING_OPTION):\n\tAdd AARCH64_EXTRA_TUNE_NO_LDP_COMBINE.\n\t* config/aarch64/aarch64.cc (aarch64_operands_ok_for_ldpstp):\n\tCheck for the above tuning option when processing loads.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/ampere1-no_ldp_combine.c: New test.", "tree": {"sha": "f46e03114871217a86a231c7ee9e5d20d9e203e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f46e03114871217a86a231c7ee9e5d20d9e203e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f200c56787f2c6f93ffb739d57d01a294ab72f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f200c56787f2c6f93ffb739d57d01a294ab72f68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f200c56787f2c6f93ffb739d57d01a294ab72f68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f200c56787f2c6f93ffb739d57d01a294ab72f68/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec03c41de320fb747fa2a90f5d3b6db3aa4dde1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec03c41de320fb747fa2a90f5d3b6db3aa4dde1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec03c41de320fb747fa2a90f5d3b6db3aa4dde1"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "52112ba7c489e55ccc65bea5b181d74f4a785c3b", "filename": "gcc/config/aarch64/aarch64-tuning-flags.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200c56787f2c6f93ffb739d57d01a294ab72f68/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200c56787f2c6f93ffb739d57d01a294ab72f68/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tuning-flags.def?ref=f200c56787f2c6f93ffb739d57d01a294ab72f68", "patch": "@@ -44,6 +44,9 @@ AARCH64_EXTRA_TUNING_OPTION (\"cheap_shift_extend\", CHEAP_SHIFT_EXTEND)\n /* Disallow load/store pair instructions on Q-registers.  */\n AARCH64_EXTRA_TUNING_OPTION (\"no_ldp_stp_qregs\", NO_LDP_STP_QREGS)\n \n+/* Disallow load-pair instructions to be formed in combine/peephole.  */\n+AARCH64_EXTRA_TUNING_OPTION (\"no_ldp_combine\", NO_LDP_COMBINE)\n+\n AARCH64_EXTRA_TUNING_OPTION (\"rename_load_regs\", RENAME_LOAD_REGS)\n \n AARCH64_EXTRA_TUNING_OPTION (\"cse_sve_vl_constants\", CSE_SVE_VL_CONSTANTS)"}, {"sha": "0f04ab9fba025c5f8a76da87c521dc90127a48fd", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200c56787f2c6f93ffb739d57d01a294ab72f68/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200c56787f2c6f93ffb739d57d01a294ab72f68/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=f200c56787f2c6f93ffb739d57d01a294ab72f68", "patch": "@@ -1933,7 +1933,7 @@ static const struct tune_params ampere1_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NO_LDP_COMBINE),\t/* tune_flags.  */\n   &ampere1_prefetch_tune\n };\n \n@@ -1971,7 +1971,7 @@ static const struct tune_params ampere1a_tunings =\n   2,\t/* min_div_recip_mul_df.  */\n   0,\t/* max_case_values.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n-  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  (AARCH64_EXTRA_TUNE_NO_LDP_COMBINE),\t/* tune_flags.  */\n   &ampere1_prefetch_tune\n };\n \n@@ -26053,6 +26053,20 @@ aarch64_operands_ok_for_ldpstp (rtx *operands, bool load,\n   enum reg_class rclass_1, rclass_2;\n   rtx mem_1, mem_2, reg_1, reg_2;\n \n+  /* Allow the tuning structure to disable LDP instruction formation\n+     from combining instructions (e.g., in peephole2).\n+     TODO: Implement fine-grained tuning control for LDP and STP:\n+\t   1. control policies for load and store separately;\n+\t   2. support the following policies:\n+\t      - default (use what is in the tuning structure)\n+\t      - always\n+\t      - never\n+\t      - aligned (only if the compiler can prove that the\n+\t\tload will be aligned to 2 * element_size)  */\n+  if (load && (aarch64_tune_params.extra_tuning_flags\n+\t       & AARCH64_EXTRA_TUNE_NO_LDP_COMBINE))\n+    return false;\n+\n   if (load)\n     {\n       mem_1 = operands[1];"}, {"sha": "bc871f4481d1706fb2fe852602adf56b41499a98", "filename": "gcc/testsuite/gcc.target/aarch64/ampere1-no_ldp_combine.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f200c56787f2c6f93ffb739d57d01a294ab72f68/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fampere1-no_ldp_combine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f200c56787f2c6f93ffb739d57d01a294ab72f68/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fampere1-no_ldp_combine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fampere1-no_ldp_combine.c?ref=f200c56787f2c6f93ffb739d57d01a294ab72f68", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-options \"-O3 -mtune=ampere1\" } */\n+\n+long\n+foo (long a[])\n+{\n+  return a[0] + a[1];\n+}\n+\n+/* We should see two ldrs instead of one ldp. */\n+/* { dg-final { scan-assembler {\\tldr\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tldp\\t} } } */"}]}