{"sha": "7094a69bd62a14dfa311eaa2fea468f221c7c9f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA5NGE2OWJkNjJhMTRkZmEzMTFlYWEyZmVhNDY4ZjIyMWM3YzlmMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-15T16:53:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-15T16:53:20Z"}, "message": "c++: Optimize away NULLPTR_TYPE comparisons [PR101443]\n\nComparisons of NULLPTR_TYPE operands cause all kinds of problems in the\nmiddle-end and in fold-const.c, various optimizations assume that if they\nsee e.g. a non-equality comparison with one of the operands being\nINTEGER_CST and it is not INTEGRAL_TYPE_P (which has TYPE_{MIN,MAX}_VALUE),\nthey can build_int_cst (type, 1) to find a successor.\n\nThe following patch fixes it by making sure they don't appear in the IL,\noptimize them away at cp_fold time as all can be folded.\n\nThough, I've just noticed that clang++ rejects the non-equality comparisons\ninstead, foo () > 0 with\ninvalid operands to binary expression ('decltype(nullptr)' (aka 'nullptr_t') and 'int')\nand foo () > nullptr with\ninvalid operands to binary expression ('decltype(nullptr)' (aka 'nullptr_t') and 'nullptr_t')\n\nShall we reject those too, in addition or instead of parts of this patch?\nIf so, wouldn't this patch be still useful for backports, I bet we don't\nwant to start reject it on the release branches when we used to accept it.\n\n2021-07-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101443\n\t* cp-gimplify.c (cp_fold): For comparisons with NULLPTR_TYPE\n\toperands, fold them right away to true or false.\n\n\t* g++.dg/cpp0x/nullptr46.C: New test.", "tree": {"sha": "e035f180ebf7d79e731b6efed4f7e0efebd37a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e035f180ebf7d79e731b6efed4f7e0efebd37a4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7094a69bd62a14dfa311eaa2fea468f221c7c9f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7094a69bd62a14dfa311eaa2fea468f221c7c9f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7094a69bd62a14dfa311eaa2fea468f221c7c9f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7094a69bd62a14dfa311eaa2fea468f221c7c9f3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25edf6e6feeadc6a5aa337b8c725786227162dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b25edf6e6feeadc6a5aa337b8c725786227162dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b25edf6e6feeadc6a5aa337b8c725786227162dd"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "ff0bff771df69fa2092ea63571e6f45537bd7c7e", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7094a69bd62a14dfa311eaa2fea468f221c7c9f3/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7094a69bd62a14dfa311eaa2fea468f221c7c9f3/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=7094a69bd62a14dfa311eaa2fea468f221c7c9f3", "patch": "@@ -2423,6 +2423,32 @@ cp_fold (tree x)\n       op0 = cp_fold_maybe_rvalue (TREE_OPERAND (x, 0), rval_ops);\n       op1 = cp_fold_rvalue (TREE_OPERAND (x, 1));\n \n+      /* decltype(nullptr) has only one value, so optimize away all comparisons\n+\t with that type right away, keeping them in the IL causes troubles for\n+\t various optimizations.  */\n+      if (COMPARISON_CLASS_P (org_x)\n+\t  && TREE_CODE (TREE_TYPE (op0)) == NULLPTR_TYPE\n+\t  && TREE_CODE (TREE_TYPE (op1)) == NULLPTR_TYPE)\n+\t{\n+\t  switch (code)\n+\t    {\n+\t    case EQ_EXPR:\n+\t    case LE_EXPR:\n+\t    case GE_EXPR:\n+\t      x = constant_boolean_node (true, TREE_TYPE (x));\n+\t      break;\n+\t    case NE_EXPR:\n+\t    case LT_EXPR:\n+\t    case GT_EXPR:\n+\t      x = constant_boolean_node (false, TREE_TYPE (x));\n+\t      break;\n+\t    default:\n+\t      gcc_unreachable ();\n+\t    }\n+\t  return omit_two_operands_loc (loc, TREE_TYPE (x), x,\n+\t\t\t\t\top0, op1);\n+\t}\n+\n       if (op0 != TREE_OPERAND (x, 0) || op1 != TREE_OPERAND (x, 1))\n \t{\n \t  if (op0 == error_mark_node || op1 == error_mark_node)"}, {"sha": "1514cee3c3bbf9e48e4a1472a3daa2b96cc9ce77", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr46.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7094a69bd62a14dfa311eaa2fea468f221c7c9f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7094a69bd62a14dfa311eaa2fea468f221c7c9f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr46.C?ref=7094a69bd62a14dfa311eaa2fea468f221c7c9f3", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/101443\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-O2\" }\n+\n+decltype(nullptr) foo ();\n+\n+bool\n+bar ()\n+{\n+  return foo () > nullptr || foo () < nullptr;\n+}"}]}