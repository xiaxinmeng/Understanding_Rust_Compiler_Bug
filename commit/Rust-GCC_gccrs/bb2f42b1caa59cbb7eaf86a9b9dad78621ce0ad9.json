{"sha": "bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmIyZjQyYjFjYWE1OWNiYjdlYWY4NmE5YjlkYWQ3ODYyMWNlMGFkOQ==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-09-29T01:29:31Z"}, "committer": {"name": "Paul Eggert", "email": "eggert@gnu.org", "date": "1993-09-29T01:29:31Z"}, "message": "(quote_string): New function.\n\n(special_symbol): Use it to properly quote special chars in __FILE__.\n\nFrom-SVN: r5526", "tree": {"sha": "68ae2015706ed8b5f1b7657425960ecf497a9476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ae2015706ed8b5f1b7657425960ecf497a9476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9/comments", "author": null, "committer": null, "parents": [{"sha": "db6b21866df8c448eb783b015cb92106a3ab750a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db6b21866df8c448eb783b015cb92106a3ab750a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db6b21866df8c448eb783b015cb92106a3ab750a"}], "stats": {"total": 30, "additions": 28, "deletions": 2}, "files": [{"sha": "a73ef1b786d17ca2a815ec66faffec04146d3e90", "filename": "gcc/cccp.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=bb2f42b1caa59cbb7eaf86a9b9dad78621ce0ad9", "patch": "@@ -308,6 +308,7 @@ static char *macarg ();\n static U_CHAR *skip_to_end_of_comment ();\n static U_CHAR *skip_quoted_string ();\n static U_CHAR *skip_paren_group ();\n+static void quote_string ();\n \n static char *check_precompiled ();\n /* static struct macrodef create_definition ();\t[moved below] */\n@@ -3663,8 +3664,8 @@ special_symbol (hp, op)\n \n       if (string)\n \t{\n-\t  buf = (char *) alloca (3 + strlen (string));\n-\t  sprintf (buf, \"\\\"%s\\\"\", string);\n+\t  buf = (char *) alloca (3 + 2 * strlen (string));\n+\t  quote_string (buf, string);\n \t}\n       else\n \tbuf = \"\\\"\\\"\";\n@@ -6907,6 +6908,31 @@ skip_quoted_string (bp, limit, start_line, count_newlines, backslash_newlines_p,\n   return bp;\n }\n \n+/* Place into DST a quoted string representing the string SRC.  */\n+static void\n+quote_string (dst, src)\n+     char *dst, *src;\n+{\n+  char c;\n+\n+  for (*dst++ = '\\\"'; ; *dst++ = c)\n+    switch ((c = *src++))\n+      {\n+      case '\\n':\n+\tc = 'n';\n+\t/* fall through */\n+      case '\\\"':\n+      case '\\\\':\n+\t*dst++ = '\\\\';\n+\tbreak;\n+      \n+      case '\\0':\n+\t*dst++ = '\\\"';\n+\t*dst = '\\0';\n+\treturn;\n+      }\n+}\n+\n /* Skip across a group of balanced parens, starting from IP->bufp.\n    IP->bufp is updated.  Use this with IP->bufp pointing at an open-paren.\n "}]}