{"sha": "7b5925a816f6548e4e49a7947ecedc612d260947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I1OTI1YTgxNmY2NTQ4ZTRlNDlhNzk0N2VjZWRjNjEyZDI2MDk0Nw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2018-02-09T14:02:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-02-09T14:02:37Z"}, "message": "DWARF: no location for non-definition DECLs with non-trivial DECL_VALUE_EXPR\n\nThis patch restricts the set of cases in which we allow the generation of\nlocation attributes for variables that are not defined in the current unit.\nFor such variables with complex DECL_VALUE_EXPR trees, generating a location\nattribute can end up creating relocations to text symbols in the debug section\nof LTO object files, which is not valid.\n\ngcc/\n\tPR lto/84213\n\t* dwarf2out.c (is_trivial_indirect_ref): New function.\n\t(dwarf2out_late_global_decl): Do not generate a location\n\tattribute for variables that have a non-trivial DECL_VALUE_EXPR\n\tand that are not defined in the current unit.\n\nFrom-SVN: r257526", "tree": {"sha": "b3fb490ac6baef11283d7211c48c6779825d82cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3fb490ac6baef11283d7211c48c6779825d82cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b5925a816f6548e4e49a7947ecedc612d260947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5925a816f6548e4e49a7947ecedc612d260947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b5925a816f6548e4e49a7947ecedc612d260947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b5925a816f6548e4e49a7947ecedc612d260947/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "183187053d0222477cff678be5360597a57ccc6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183187053d0222477cff678be5360597a57ccc6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183187053d0222477cff678be5360597a57ccc6f"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "1d4a3eed64406a94d0ea86ed2dd793a3d2b038de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5925a816f6548e4e49a7947ecedc612d260947/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5925a816f6548e4e49a7947ecedc612d260947/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b5925a816f6548e4e49a7947ecedc612d260947", "patch": "@@ -1,3 +1,11 @@\n+2018-02-09  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\tPR lto/84213\n+\t* dwarf2out.c (is_trivial_indirect_ref): New function.\n+\t(dwarf2out_late_global_decl): Do not generate a location\n+\tattribute for variables that have a non-trivial DECL_VALUE_EXPR\n+\tand that are not defined in the current unit.\n+\n 2018-02-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* optabs.c (prepare_cmp_insn): Try harder to emit a direct comparison"}, {"sha": "984df9fe4e9adf8febf9cfc7f72af67af961f946", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b5925a816f6548e4e49a7947ecedc612d260947/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b5925a816f6548e4e49a7947ecedc612d260947/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7b5925a816f6548e4e49a7947ecedc612d260947", "patch": "@@ -26235,6 +26235,23 @@ dwarf2out_early_global_decl (tree decl)\n   symtab->global_info_ready = save;\n }\n \n+/* Return whether EXPR is an expression with the following pattern:\n+   INDIRECT_REF (NOP_EXPR (INTEGER_CST)).  */\n+\n+static bool\n+is_trivial_indirect_ref (tree expr)\n+{\n+  if (expr == NULL_TREE || TREE_CODE (expr) != INDIRECT_REF)\n+    return false;\n+\n+  tree nop = TREE_OPERAND (expr, 0);\n+  if (nop == NULL_TREE || TREE_CODE (nop) != NOP_EXPR)\n+    return false;\n+\n+  tree int_cst = TREE_OPERAND (nop, 0);\n+  return int_cst != NULL_TREE && TREE_CODE (int_cst) == INTEGER_CST;\n+}\n+\n /* Output debug information for global decl DECL.  Called from\n    toplev.c after compilation proper has finished.  */\n \n@@ -26259,11 +26276,17 @@ dwarf2out_late_global_decl (tree decl)\n       if (die)\n \t{\n \t  /* We get called via the symtab code invoking late_global_decl\n-\t     for symbols that are optimized out.  Do not add locations\n-\t     for those, except if they have a DECL_VALUE_EXPR, in which case\n-\t     they are relevant for debuggers.  */\n+\t     for symbols that are optimized out.\n+\n+\t     Do not add locations for those, except if they have a\n+\t     DECL_VALUE_EXPR, in which case they are relevant for debuggers.\n+\t     Still don't add a location if the DECL_VALUE_EXPR is not a trivial\n+\t     INDIRECT_REF expression, as this could generate relocations to\n+\t     text symbols in LTO object files, which is invalid.  */\n \t  varpool_node *node = varpool_node::get (decl);\n-\t  if ((! node || ! node->definition) && ! DECL_HAS_VALUE_EXPR_P (decl))\n+\t  if ((! node || ! node->definition)\n+\t      && ! (DECL_HAS_VALUE_EXPR_P (decl)\n+\t\t    && is_trivial_indirect_ref (DECL_VALUE_EXPR (decl))))\n \t    tree_add_const_value_attribute_for_decl (die, decl);\n \t  else\n \t    add_location_or_const_value_attribute (die, decl, false);"}]}