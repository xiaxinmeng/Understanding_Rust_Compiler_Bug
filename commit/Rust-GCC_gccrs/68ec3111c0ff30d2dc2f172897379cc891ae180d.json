{"sha": "68ec3111c0ff30d2dc2f172897379cc891ae180d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhlYzMxMTFjMGZmMzBkMmRjMmYxNzI4OTczNzljYzg5MWFlMTgwZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-03-31T14:53:17Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-03-31T14:53:17Z"}, "message": "collect2.c (lderrout): New variable.\n\n\t* collect2.c (lderrout): New variable.\n\t(collect_exit): Dump ldout to stdout.  Dump and unlink lderrout,\n\tif it is set, to stderr.\n\t(handler): Unlink lderrout if it is set.\n\t(dump_file): Add \"to\" parameter.  Change all callers.\n\t(main): Initialize lderrout.\n\t(collect_execute): Add errname parameter.  Change all callers.\n\tRename redir parameter to outname.  Never pass\n\tPEX_STDERR_TO_STDOUT to pex_run.\n\t* collect2.h (collect_execute, dump_file): Update declarations.\n\t* tlink.c (tlink_execute): Add errname parameter.  Change all\n\tcallers.\n\t(do_tlink): Check lderrout as well as ldout.\n\nFrom-SVN: r97321", "tree": {"sha": "e6f523f2e9436b46ac2af93fec13e0d9253901a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6f523f2e9436b46ac2af93fec13e0d9253901a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68ec3111c0ff30d2dc2f172897379cc891ae180d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ec3111c0ff30d2dc2f172897379cc891ae180d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ec3111c0ff30d2dc2f172897379cc891ae180d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ec3111c0ff30d2dc2f172897379cc891ae180d/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0992247bffbe06f3bab081ca27fa3699950a28f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0992247bffbe06f3bab081ca27fa3699950a28f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0992247bffbe06f3bab081ca27fa3699950a28f8"}], "stats": {"total": 87, "additions": 61, "deletions": 26}, "files": [{"sha": "c651077ce6f34b6675a829a6688b40ecc1259c77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68ec3111c0ff30d2dc2f172897379cc891ae180d", "patch": "@@ -1,3 +1,19 @@\n+2005-03-31  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* collect2.c (lderrout): New variable.\n+\t(collect_exit): Dump ldout to stdout.  Dump and unlink lderrout,\n+\tif it is set, to stderr.\n+\t(handler): Unlink lderrout if it is set.\n+\t(dump_file): Add \"to\" parameter.  Change all callers.\n+\t(main): Initialize lderrout.\n+\t(collect_execute): Add errname parameter.  Change all callers.\n+\tRename redir parameter to outname.  Never pass\n+\tPEX_STDERR_TO_STDOUT to pex_run.\n+\t* collect2.h (collect_execute, dump_file): Update declarations.\n+\t* tlink.c (tlink_execute): Add errname parameter.  Change all\n+\tcallers.\n+\t(do_tlink): Check lderrout as well as ldout.\n+\n 2005-03-31  Olivier Hainque  <hainque@adacore.com>\n \n         * dwarf2out.c (dwarf2out_frame_finish): Honor DWARF2_FRAME_INFO"}, {"sha": "f95fe4dbbf4776c285393e9de1a2b8c9911f914e", "filename": "gcc/collect2.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=68ec3111c0ff30d2dc2f172897379cc891ae180d", "patch": "@@ -184,7 +184,8 @@ static const char *o_file;\t\t/* <xxx>.o for constructor/destructor list.  */\n #ifdef COLLECT_EXPORT_LIST\n static const char *export_file;\t        /* <xxx>.x for AIX export list.  */\n #endif\n-const char *ldout;\t\t\t/* File for ld errors.  */\n+const char *ldout;\t\t\t/* File for ld stdout.  */\n+const char *lderrout;\t\t\t/* File for ld stderr.  */\n static const char *output_file;\t\t/* Output file for ld.  */\n static const char *nm_file_name;\t/* pathname of nm */\n #ifdef LDD_SUFFIX\n@@ -308,10 +309,16 @@ collect_exit (int status)\n \n   if (ldout != 0 && ldout[0])\n     {\n-      dump_file (ldout);\n+      dump_file (ldout, stdout);\n       maybe_unlink (ldout);\n     }\n \n+  if (lderrout != 0 && lderrout[0])\n+    {\n+      dump_file (lderrout, stderr);\n+      maybe_unlink (lderrout);\n+    }\n+\n   if (status != 0 && output_file != 0 && output_file[0])\n     maybe_unlink (output_file);\n \n@@ -398,6 +405,9 @@ handler (int signo)\n   if (ldout != 0 && ldout[0])\n     maybe_unlink (ldout);\n \n+  if (lderrout != 0 && lderrout[0])\n+    maybe_unlink (lderrout);\n+\n #ifdef COLLECT_EXPORT_LIST\n   if (export_file != 0 && export_file[0])\n     maybe_unlink (export_file);\n@@ -447,7 +457,7 @@ extract_string (const char **pp)\n }\n \f\n void\n-dump_file (const char *name)\n+dump_file (const char *name, FILE *to)\n {\n   FILE *stream = fopen (name, \"r\");\n \n@@ -467,7 +477,7 @@ dump_file (const char *name)\n \t  word = obstack_finish (&temporary_obstack);\n \n \t  if (*word == '.')\n-\t    ++word, putc ('.', stderr);\n+\t    ++word, putc ('.', to);\n \t  p = word;\n \t  if (!strncmp (p, USER_LABEL_PREFIX, strlen (USER_LABEL_PREFIX)))\n \t    p += strlen (USER_LABEL_PREFIX);\n@@ -484,25 +494,25 @@ dump_file (const char *name)\n \t  if (result)\n \t    {\n \t      int diff;\n-\t      fputs (result, stderr);\n+\t      fputs (result, to);\n \n \t      diff = strlen (word) - strlen (result);\n \t      while (diff > 0 && c == ' ')\n-\t\t--diff, putc (' ', stderr);\n+\t\t--diff, putc (' ', to);\n \t      while (diff < 0 && c == ' ')\n \t\t++diff, c = getc (stream);\n \n \t      free (result);\n \t    }\n \t  else\n-\t    fputs (word, stderr);\n+\t    fputs (word, to);\n \n-\t  fflush (stderr);\n+\t  fflush (to);\n \t  obstack_free (&temporary_obstack, temporary_firstobj);\n \t}\n       if (c == EOF)\n \tbreak;\n-      putc (c, stderr);\n+      putc (c, to);\n     }\n   fclose (stream);\n }\n@@ -990,6 +1000,7 @@ main (int argc, char **argv)\n   export_file = make_temp_file (\".x\");\n #endif\n   ldout = make_temp_file (\".ld\");\n+  lderrout = make_temp_file (\".le\");\n   *c_ptr++ = c_file_name;\n   *c_ptr++ = \"-x\";\n   *c_ptr++ = \"c\";\n@@ -1525,7 +1536,8 @@ do_wait (const char *prog, struct pex_obj *pex)\n /* Execute a program, and wait for the reply.  */\n \n struct pex_obj *\n-collect_execute (const char *prog, char **argv, const char *redir)\n+collect_execute (const char *prog, char **argv, const char *outname,\n+\t\t const char *errname)\n {\n   struct pex_obj *pex;\n   const char *errmsg;\n@@ -1560,10 +1572,8 @@ collect_execute (const char *prog, char **argv, const char *redir)\n   if (pex == NULL)\n     fatal_perror (\"pex_init failed\");\n \n-  errmsg = pex_run (pex,\n-\t\t    (PEX_LAST | PEX_SEARCH\n-\t\t     | (redir ? PEX_STDERR_TO_STDOUT : 0)),\n-\t\t    argv[0], argv, redir, NULL, &err);\n+  errmsg = pex_run (pex, PEX_LAST | PEX_SEARCH, argv[0], argv, outname,\n+\t\t    errname, &err);\n   if (errmsg != NULL)\n     {\n       if (err != 0)\n@@ -1583,7 +1593,7 @@ fork_execute (const char *prog, char **argv)\n {\n   struct pex_obj *pex;\n \n-  pex = collect_execute (prog, argv, NULL);\n+  pex = collect_execute (prog, argv, NULL, NULL);\n   do_wait (prog, pex);\n }\n \f"}, {"sha": "7a8f51cacb3fc7924c0cb5746b62a6cea1b75f49", "filename": "gcc/collect2.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2Fcollect2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2Fcollect2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.h?ref=68ec3111c0ff30d2dc2f172897379cc891ae180d", "patch": "@@ -23,17 +23,19 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n extern void do_tlink (char **, char **);\n \n-extern struct pex_obj *collect_execute (const char *, char **, const char *);\n+extern struct pex_obj *collect_execute (const char *, char **, const char *,\n+\t\t\t\t\tconst char *);\n \n extern void collect_exit (int) ATTRIBUTE_NORETURN;\n \n extern int collect_wait (const char *, struct pex_obj *);\n \n-extern void dump_file (const char *);\n+extern void dump_file (const char *, FILE *);\n \n extern int file_exists (const char *);\n \n extern const char *ldout;\n+extern const char *lderrout;\n extern const char *c_file_name;\n extern struct obstack temporary_obstack;\n extern char *temporary_firstobj;"}, {"sha": "44e516ba0e85640108a3b0d1b8baed26fcb339ca", "filename": "gcc/tlink.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68ec3111c0ff30d2dc2f172897379cc891ae180d/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=68ec3111c0ff30d2dc2f172897379cc891ae180d", "patch": "@@ -98,7 +98,7 @@ static symbol * symbol_pop (void);\n static void file_push (file *);\n static file * file_pop (void);\n static void tlink_init (void);\n-static int tlink_execute (const char *, char **, const char *);\n+static int tlink_execute (const char *, char **, const char *, const char *);\n static char * frob_extension (const char *, const char *);\n static char * obstack_fgets (FILE *, struct obstack *);\n static char * tfgets (FILE *);\n@@ -279,11 +279,12 @@ tlink_init (void)\n }\n \n static int\n-tlink_execute (const char *prog, char **argv, const char *redir)\n+tlink_execute (const char *prog, char **argv, const char *outname,\n+\t       const char *errname)\n {\n   struct pex_obj *pex;\n \n-  pex = collect_execute (prog, argv, redir);\n+  pex = collect_execute (prog, argv, outname, errname);\n   return collect_wait (prog, pex);\n }\n \n@@ -533,7 +534,7 @@ recompile_files (void)\n \tfprintf (stderr, _(\"collect: recompiling %s\\n\"), f->main);\n \n       if (chdir (f->dir) != 0\n-\t  || tlink_execute (c_file_name, argv, NULL) != 0\n+\t  || tlink_execute (c_file_name, argv, NULL, NULL) != 0\n \t  || chdir (initial_cwd) != 0)\n \treturn 0;\n \n@@ -735,7 +736,7 @@ scan_linker_output (const char *fname)\n void\n do_tlink (char **ld_argv, char **object_lst ATTRIBUTE_UNUSED)\n {\n-  int exit = tlink_execute (\"ld\", ld_argv, ldout);\n+  int exit = tlink_execute (\"ld\", ld_argv, ldout, lderrout);\n \n   tlink_init ();\n \n@@ -749,20 +750,26 @@ do_tlink (char **ld_argv, char **object_lst ATTRIBUTE_UNUSED)\n \twhile (exit && i++ < MAX_ITERATIONS)\n \t  {\n \t    if (tlink_verbose >= 3)\n-\t      dump_file (ldout);\n+\t      {\n+\t\tdump_file (ldout, stdout);\n+\t\tdump_file (lderrout, stderr);\n+\t      }\n \t    demangle_new_symbols ();\n-\t    if (! scan_linker_output (ldout))\n+\t    if (! scan_linker_output (ldout)\n+\t\t&& ! scan_linker_output (lderrout))\n \t      break;\n \t    if (! recompile_files ())\n \t      break;\n \t    if (tlink_verbose)\n \t      fprintf (stderr, _(\"collect: relinking\\n\"));\n-\t    exit = tlink_execute (\"ld\", ld_argv, ldout);\n+\t    exit = tlink_execute (\"ld\", ld_argv, ldout, lderrout);\n \t  }\n     }\n \n-  dump_file (ldout);\n+  dump_file (ldout, stdout);\n   unlink (ldout);\n+  dump_file (lderrout, stderr);\n+  unlink (lderrout);\n   if (exit)\n     {\n       error (\"ld returned %d exit status\", exit);"}]}