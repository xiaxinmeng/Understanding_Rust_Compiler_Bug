{"sha": "e428b937a2fe945e08b36be77ab1767dc9f104e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQyOGI5MzdhMmZlOTQ1ZTA4YjM2YmU3N2FiMTc2N2RjOWYxMDRlMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-01-02T02:53:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-01-02T02:53:47Z"}, "message": "config.gcc (sparc64-wrs-vxworks*): New case.\n\n\t* config.gcc (sparc64-wrs-vxworks*): New case.\n\t* config/sparc/vxsparc64.h, config/sparc/t-vxsparc64: New files.\n\nFrom-SVN: r38609", "tree": {"sha": "5517ee55900e6ac13310765cb6436b84c08de651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5517ee55900e6ac13310765cb6436b84c08de651"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e428b937a2fe945e08b36be77ab1767dc9f104e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e428b937a2fe945e08b36be77ab1767dc9f104e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e428b937a2fe945e08b36be77ab1767dc9f104e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e428b937a2fe945e08b36be77ab1767dc9f104e2/comments", "author": null, "committer": null, "parents": [{"sha": "3276910d993a463455cbd3017e8579da518ebcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3276910d993a463455cbd3017e8579da518ebcaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3276910d993a463455cbd3017e8579da518ebcaa"}], "stats": {"total": 137, "additions": 136, "deletions": 1}, "files": [{"sha": "04c810fa7ff3c64e2335f20247cdca4867e9843e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e428b937a2fe945e08b36be77ab1767dc9f104e2", "patch": "@@ -1,5 +1,8 @@\n Mon Jan  1 21:28:29 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* config.gcc (sparc64-wrs-vxworks*): New case.\n+\t* config/sparc/vxsparc64.h, config/sparc/t-vxsparc64: New files.\n+\n \t* config/sparc/sparc.c (sparc_override_options): Do support different\n \tpointer and architecture size.\n \t* config/sparc/sparc.h (MIN_UNITS_PER_WORD): Always 4."}, {"sha": "5a2ea13b52a60f1529f844dcb0fba42973f96abd", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=e428b937a2fe945e08b36be77ab1767dc9f104e2", "patch": "@@ -1,5 +1,5 @@\n # GCC build-, host- and target-specific configuration file.\n-# Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+# Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n #This file is part of GNU CC.\n \n@@ -2950,6 +2950,11 @@ sparc-tti-*)\n \txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \t;;\n+sparc64-wrs-vxworks*)\n+        tm_file=\"sparc/sol2.h sparc/elf.h sparc/vxsparc64.h\"\n+        tmake_file=sparc/t-vxsparc64\n+        use_collect2=yes\n+        ;;\n sparc-wrs-vxworks* | sparclite-wrs-vxworks*)\n \ttm_file=sparc/vxsparc.h\n \ttmake_file=sparc/t-vxsparc"}, {"sha": "23efb37126880fb0481a774828ab0b2606144934", "filename": "gcc/config/sparc/t-vxsparc64", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2Fconfig%2Fsparc%2Ft-vxsparc64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2Fconfig%2Fsparc%2Ft-vxsparc64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-vxsparc64?ref=e428b937a2fe945e08b36be77ab1767dc9f104e2", "patch": "@@ -0,0 +1,32 @@\n+LIBGCC1 =\n+CROSS_LIBGCC1 =\n+\n+# We don't want to build .umul, etc., because VxWorks provides them,\n+# which means that libgcc1-test will fail.\n+LIBGCC1_TEST =\n+\n+# We don't want to put exit in libgcc.a for VxWorks, because VxWorks\n+# does not have _exit.\n+TARGET_LIBGCC2_CFLAGS = -Dexit=unused_exit\n+\n+# fp-bit and dp-bit are really part of libgcc1, but this will cause\n+# them to be built correctly, so... [taken from t-sparclite]\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' > dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c\n+\n+MULTILIB_OPTIONS=O0\n+MULTILIB_DIRNAMES=O0\n+MULTILIB_MATCHES=\n+MULTILIB_EXCEPTIONS=\n+MULTILIB_EXTRA_OPTS=m64 mcpu=ultrasparc\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "e3ce9c38c41a4a9b722486ccff75a2dc4bb5bfd4", "filename": "gcc/config/sparc/vxsparc64.h", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e428b937a2fe945e08b36be77ab1767dc9f104e2/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvxsparc64.h?ref=e428b937a2fe945e08b36be77ab1767dc9f104e2", "patch": "@@ -0,0 +1,95 @@\n+/* Definitions of target machine for GNU compiler.\n+   64-bit VxWorks Sparc version.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Specify this in a cover file to provide bi-architecture (32/64) support.  */\n+#define SPARC_BI_ARCH\n+\n+/* Specify what to link with.  */\n+/* VxWorks does all the library stuff itself.  */\n+#undef\tLIB_SPEC\n+#define\tLIB_SPEC \"-r\"\n+\n+/* VxWorks provides the functionality of crt0.o and friends itself.  */\n+#undef  STARTFILE_SPEC\n+#undef\tENDFILE_SPEC\n+#define\tSTARTFILE_SPEC \"\"\n+#define\tENDFILE_SPEC \"\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\"\n+\n+/* We need to prohibit dots in constructor labels so that we can build a\n+   table of { string, address } entries for each non-static name in a\n+   program.  The address, being of the form &name, it cannot contain a dot or\n+   C will try to parse it as a &struct.field phrase. */\n+#undef NO_DOLLAR_IN_LABEL\n+#undef DOLLARS_IN_IDENTIFIERS\n+#define DOLLARS_IN_IDENTIFIERS 1\n+#define NO_DOT_IN_LABEL\n+\n+/* Enable #pragma pack(n) */\n+#define HANDLE_SYSV_PRAGMA\n+\n+/* We use stabs for debugging */\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* Longs are still only 32bits for vxWorks, even for UltraSPARC */\n+#undef LONG_TYPE_SIZE\n+#define LONG_TYPE_SIZE          32\n+\n+#undef CPP_ARCH32_SPEC\n+#define CPP_ARCH32_SPEC \"-Acpu(sparc) -Amachine(sparc)\"\n+#undef CPP_ARCH64_SPEC\n+#define CPP_ARCH64_SPEC \\\n+\"-Dsparc64 -D__arch64__ -Acpu(sparc64) -Amachine(sparc64)\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-D__vxworks -D__sparc__ -Dsparc -D__GCC_NEW_VARARGS__\"\n+\n+/* Note that we define CPU here even if the user has specified -ansi.\n+   This violates user namespace, but the VxWorks headers, and potentially\n+   user code, all explicitly rely upon the definition of CPU in order to get\n+   the proper processor information.  */\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%(cpp_cpu) %(cpp_arch) -DCPU=ULTRASPARC -D__CPU__=CPU\"\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_APP_REGS | MASK_EPILOGUE | MASK_FPU \\\n+\t\t\t| MASK_LONG_DOUBLE_128 | MASK_64BIT)\n+\n+#undef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_MEDLOW\n+\n+#undef PTRDIFF_TYPE\n+#undef SIZE_TYPE\n+#undef WCHAR_TYPE\n+#undef WCHAR_TYPE_SIZE\n+\n+#define PTRDIFF_TYPE \"long int\"\n+#define SIZE_TYPE \"unsigned int\"\n+#define WCHAR_TYPE \"char\"\n+#define WCHAR_TYPE_SIZE 8\n+\n+/* US Software GOFAST library support.  */\n+#include \"gofast.h\"\n+#undef INIT_SUBTARGET_OPTABS\n+#define INIT_SUBTARGET_OPTABS INIT_GOFAST_OPTABS"}]}