{"sha": "67fa7880729adbe567fd578151060e3a4a8873e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdmYTc4ODA3MjlhZGJlNTY3ZmQ1NzgxNTEwNjBlM2E0YTg4NzNlOA==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-10-10T20:30:08Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-10-10T20:30:08Z"}, "message": "predict.c (tree_estimate_probability): Add new parameter for estimate_bb_frequencies.\n\n2013-10-10  Teresa Johnson  <tejohnson@google.com>\n\n\t* predict.c (tree_estimate_probability): Add new parameter\n\tfor estimate_bb_frequencies.\n\t(estimate_bb_frequencies): Add new parameter to force estimation.\n\t(rebuild_frequencies): When max frequency in function is small,\n\trecompute counts from frequencies.\n\t* predict.h (estimate_bb_frequencies): New parameter.\n\nFrom-SVN: r203395", "tree": {"sha": "ee44642551d3ee1b05cabe70b04747b7d739f6bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee44642551d3ee1b05cabe70b04747b7d739f6bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67fa7880729adbe567fd578151060e3a4a8873e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fa7880729adbe567fd578151060e3a4a8873e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67fa7880729adbe567fd578151060e3a4a8873e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67fa7880729adbe567fd578151060e3a4a8873e8/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "58b2a3585302ca85e06c5957e307f292c61036d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b2a3585302ca85e06c5957e307f292c61036d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b2a3585302ca85e06c5957e307f292c61036d9"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "00ef1a8d8b07312c3ff9a748d41e105cee612ed3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fa7880729adbe567fd578151060e3a4a8873e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fa7880729adbe567fd578151060e3a4a8873e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67fa7880729adbe567fd578151060e3a4a8873e8", "patch": "@@ -1,3 +1,12 @@\n+2013-10-10  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* predict.c (tree_estimate_probability): Add new parameter\n+\tfor estimate_bb_frequencies.\n+\t(estimate_bb_frequencies): Add new parameter to force estimation.\n+\t(rebuild_frequencies): When max frequency in function is small,\n+\trecompute counts from frequencies.\n+\t* predict.h (estimate_bb_frequencies): New parameter.\n+\n 2013-10-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* ipa-inline.c (ipa_inline): Fix leak of \"order\" when"}, {"sha": "ca1a0c9802c8f420346eeb0b943b36bbf7507f48", "filename": "gcc/predict.c", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fa7880729adbe567fd578151060e3a4a8873e8/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fa7880729adbe567fd578151060e3a4a8873e8/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=67fa7880729adbe567fd578151060e3a4a8873e8", "patch": "@@ -2389,7 +2389,7 @@ tree_estimate_probability (void)\n   pointer_map_destroy (bb_predictions);\n   bb_predictions = NULL;\n \n-  estimate_bb_frequencies ();\n+  estimate_bb_frequencies (false);\n   free_dominance_info (CDI_POST_DOMINATORS);\n   remove_fake_exit_edges ();\n }\n@@ -2692,7 +2692,7 @@ propagate_freq (basic_block head, bitmap tovisit)\n     }\n }\n \n-/* Estimate probabilities of loopback edges in loops at same nest level.  */\n+/* Estimate frequencies in loops at same nest level.  */\n \n static void\n estimate_loops_at_level (struct loop *first_loop)\n@@ -2801,15 +2801,17 @@ expensive_function_p (int threshold)\n   return false;\n }\n \n-/* Estimate basic blocks frequency by given branch probabilities.  */\n+/* Estimate and propagate basic block frequencies using the given branch\n+   probabilities.  If FORCE is true, the frequencies are used to estimate\n+   the counts even when there are already non-zero profile counts.  */\n \n void\n-estimate_bb_frequencies (void)\n+estimate_bb_frequencies (bool force)\n {\n   basic_block bb;\n   sreal freq_max;\n \n-  if (profile_status != PROFILE_READ || !counts_to_freqs ())\n+  if (force || profile_status != PROFILE_READ || !counts_to_freqs ())\n     {\n       static int real_values_initialized = 0;\n \n@@ -2846,8 +2848,8 @@ estimate_bb_frequencies (void)\n \t    }\n \t}\n \n-      /* First compute probabilities locally for each loop from innermost\n-         to outermost to examine probabilities for back edges.  */\n+      /* First compute frequencies locally for each loop from innermost\n+         to outermost to examine frequencies for back edges.  */\n       estimate_loops ();\n \n       memcpy (&freq_max, &real_zero, sizeof (real_zero));\n@@ -3028,13 +3030,29 @@ void\n rebuild_frequencies (void)\n {\n   timevar_push (TV_REBUILD_FREQUENCIES);\n-  if (profile_status == PROFILE_GUESSED)\n+\n+  /* When the max bb count in the function is small, there is a higher\n+     chance that there were truncation errors in the integer scaling\n+     of counts by inlining and other optimizations. This could lead\n+     to incorrect classification of code as being cold when it isn't.\n+     In that case, force the estimation of bb counts/frequencies from the\n+     branch probabilities, rather than computing frequencies from counts,\n+     which may also lead to frequencies incorrectly reduced to 0. There\n+     is less precision in the probabilities, so we only do this for small\n+     max counts.  */\n+  gcov_type count_max = 0;\n+  basic_block bb;\n+  FOR_BB_BETWEEN (bb, ENTRY_BLOCK_PTR, NULL, next_bb)\n+    count_max = MAX (bb->count, count_max);\n+\n+  if (profile_status == PROFILE_GUESSED\n+      || (profile_status == PROFILE_READ && count_max < REG_BR_PROB_BASE/10))\n     {\n       loop_optimizer_init (0);\n       add_noreturn_fake_exit_edges ();\n       mark_irreducible_loops ();\n       connect_infinite_loops_to_exit ();\n-      estimate_bb_frequencies ();\n+      estimate_bb_frequencies (true);\n       remove_fake_exit_edges ();\n       loop_optimizer_finalize ();\n     }"}, {"sha": "02650e2d55cbb8d9d7c717957a9e4826419397cf", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67fa7880729adbe567fd578151060e3a4a8873e8/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67fa7880729adbe567fd578151060e3a4a8873e8/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=67fa7880729adbe567fd578151060e3a4a8873e8", "patch": "@@ -37,7 +37,7 @@ enum prediction\n \n extern void predict_insn_def (rtx, enum br_predictor, enum prediction);\n extern int counts_to_freqs (void);\n-extern void estimate_bb_frequencies (void);\n+extern void estimate_bb_frequencies (bool);\n extern const char *predictor_name (enum br_predictor);\n extern tree build_predict_expr (enum br_predictor, enum prediction);\n extern void tree_estimate_probability (void);"}]}