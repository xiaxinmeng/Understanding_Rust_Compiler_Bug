{"sha": "23e4c4eec25ab452a0a191f5fdf1d4e89e10adff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNlNGM0ZWVjMjVhYjQ1MmEwYTE5MWY1ZmRmMWQ0ZTg5ZTEwYWRmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-23T23:03:42Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-23T23:03:42Z"}, "message": "streambuf_iterator.h: Use noexcept per the FDIS.\n\n2011-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/streambuf_iterator.h: Use noexcept per the FDIS.\n\t(istreambuf_iterator<>::istreambuf_iterator(const\n\tistreambuf_iterator&),  ~istreambuf_iterator()): Add defaulted\n\tin C++0x mode.\n\nFrom-SVN: r174094", "tree": {"sha": "590070c1f75a70b8fd2f8d824b595408a81f6e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/590070c1f75a70b8fd2f8d824b595408a81f6e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff/comments", "author": null, "committer": null, "parents": [{"sha": "8e3fb544446fca2bcdc68618b36cd3d3b2cf46c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3fb544446fca2bcdc68618b36cd3d3b2cf46c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e3fb544446fca2bcdc68618b36cd3d3b2cf46c5"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "76afc47d46fd1fd8fde26c0165276c087358ab1a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=23e4c4eec25ab452a0a191f5fdf1d4e89e10adff", "patch": "@@ -1,3 +1,10 @@\n+2011-05-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/streambuf_iterator.h: Use noexcept per the FDIS.\n+\t(istreambuf_iterator<>::istreambuf_iterator(const\n+\tistreambuf_iterator&),  ~istreambuf_iterator()): Add defaulted\n+\tin C++0x mode.\n+\n 2011-05-23  Jason Merrill  <jason@redhat.com>\n \n \t* libsupc++/exception_ptr.h: Fix compilation in C++0x mode."}, {"sha": "5540ca146b0d153cf344bdf7a15f897e378d47f8", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e4c4eec25ab452a0a191f5fdf1d4e89e10adff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=23e4c4eec25ab452a0a191f5fdf1d4e89e10adff", "patch": "@@ -95,15 +95,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       ///  Construct end of input stream iterator.\n-      _GLIBCXX_CONSTEXPR istreambuf_iterator() throw()\n+      _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(0), _M_c(traits_type::eof()) { }\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;\n+\n+      ~istreambuf_iterator() = default;\n+#endif\n+\n       ///  Construct start of input stream iterator.\n-      istreambuf_iterator(istream_type& __s) throw()\n+      istreambuf_iterator(istream_type& __s) _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }\n \n       ///  Construct start of streambuf iterator.\n-      istreambuf_iterator(streambuf_type* __s) throw()\n+      istreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(__s), _M_c(traits_type::eof()) { }\n \n       ///  Return the current character pointed to by iterator.  This returns\n@@ -228,11 +234,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     public:\n       ///  Construct output iterator from ostream.\n-      ostreambuf_iterator(ostream_type& __s) throw ()\n+      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }\n \n       ///  Construct output iterator from streambuf.\n-      ostreambuf_iterator(streambuf_type* __s) throw ()\n+      ostreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(__s), _M_failed(!_M_sbuf) { }\n \n       ///  Write character to streambuf.  Calls streambuf.sputc().\n@@ -262,7 +268,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /// Return true if previous operator=() failed.\n       bool\n-      failed() const throw()\n+      failed() const _GLIBCXX_USE_NOEXCEPT\n       { return _M_failed; }\n \n       ostreambuf_iterator&"}]}