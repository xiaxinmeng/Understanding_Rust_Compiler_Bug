{"sha": "9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1OWYzMDcxZmUyY2ZhMDg5NjAwNjNiMGQxYzc4Zjg2ZDRiNWUwZQ==", "commit": {"author": {"name": "Gerald Pfeifer", "email": "pfeifer@dbai.tuwien.ac.at", "date": "1999-07-05T10:22:15Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@gcc.gnu.org", "date": "1999-07-05T10:22:15Z"}, "message": "egcs_update (touch_files, [...]): New functions.\n\n        * egcs_update (touch_files, apply_patch): New functions.\n        Use them.  New command-line option --patch.  Split test of local\n        tree into two parts.  Add comments.\n\nCo-Authored-By: Jerry Quinn <jquinn@nortelnetworks.com>\n\nFrom-SVN: r27946", "tree": {"sha": "db0eede5663a4957a266d49075654ec6c29ed822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db0eede5663a4957a266d49075654ec6c29ed822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e/comments", "author": null, "committer": null, "parents": [{"sha": "af076391718fc76aa651c641e67663f8e295b395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af076391718fc76aa651c641e67663f8e295b395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af076391718fc76aa651c641e67663f8e295b395"}], "stats": {"total": 127, "additions": 88, "deletions": 39}, "files": [{"sha": "935ba290b8f50b4a2aeac3be78b5f757f3f4318f", "filename": "contrib/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e", "patch": "@@ -1,3 +1,10 @@\n+1999-07-05  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n+            Jerry Quinn <jquinn@nortelnetworks.com>\n+\n+\t* egcs_update (touch_files, apply_patch): New functions.\n+\tUse them.  New command-line option --patch.  Split test of local\n+\ttree into two parts.  Add comments.\n+\n 1999-07-03  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* test_summary: If Target is `unix{*}', append the Target variants "}, {"sha": "169b2aafb30a3a16e5b0119c5a471435e1b753a9", "filename": "contrib/egcs_update", "status": "modified", "additions": 81, "deletions": 39, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e/contrib%2Fegcs_update", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e/contrib%2Fegcs_update", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fegcs_update?ref=9d59f3071fe2cfa08960063b0d1c78f86d4b5e0e", "patch": "@@ -9,37 +9,111 @@\n # reads --nostdflags, $UPDATE_OPTIONS as well as this parameter itself\n # are omitted. \n # \n+# If the first parameter reads --patch, the second parameter is considered\n+# a patch file.\n+# \n # Examples:\n #\n # contrib/egcs_update -r egcs_latest_snapshot\n # contrib/egcs_update -A\n # contrib/egcs_update --nostdflags -P -r egcs_1_1_branch gcc/testsuite\n+# contrib/egcs_update --patch some-patch\n #\n #\n-# (C) 1998 Free Software Foundation\n+# (C) 1998-1999 Free Software Foundation\n # Originally by Gerald Pfeifer <pfeifer@dbai.tuwien.ac.at>, August 1998.\n #\n # This script is Free Software, and it can be copied, distributed and\n # modified as defined in the GNU General Public License.  A copy of\n # its license can be downloaded from http://www.gnu.org/copyleft/gpl.html\n \n \n+# Default options used when updating via CVS.\n UPDATE_OPTIONS=-P\n # Add -d to create any directories that exist in the repository but not\n #        locally.\n # Add -A to reset any sticky tags, dates, or `-k' options.\n \n \n+# This function touches generated files such that the ``end'' user does\n+# not have to rebuild them.\n+#\n+# Please also update the FAQ accordingly if you change the list of\n+# files below.  Note that generated files should be touched only\n+# after the corresponding *.y files.\n+touch_files()\n+{\n+    touch `find . -name configure -print`\n+    touch `find texinfo -name Makefile.in -print`\n+    touch `find texinfo -name \\*.pot -print`\n+    touch `find texinfo -name \\*.gmo -print`\n+    for f in gcc/c-parse.y \\\n+\t     gcc/c-parse.h \\\n+\t     gcc/c-parse.c \\\n+\t     gcc/cstamp-h.in \\\n+\t     gcc/c-gperf.h \\\n+\t     gcc/cexp.c \\\n+\t     gcc/cp/parse.c \\\n+\t     gcc/cp/parse.h \\\n+\t     gcc/objc/objc-parse.y \\\n+\t     gcc/objc/objc-parse.c \\\n+\t     gcc/java/parse.h \\\n+\t     gcc/java/parse.c \\\n+\t     gcc/java/parse-scan.c \\\n+\t     libf2c/libU77/stamp-h.in \\\n+\t     contrib/fixinc/fixincl.x \\\n+\t     contrib/fixinc/inclhack.sh \\\n+\t     contrib/fixinc/fixincl.sh \\\n+\t     gcc/fixinc/fixincl.x \\\n+\t     gcc/fixinc/inclhack.sh \\\n+\t     gcc/fixinc/fixincl.sh\n+    do\n+\tif [ -f $f ]; then\n+\t    touch $f\n+\tfi\n+    done\n+}\n+\n+\n+# This functions applies a patch to an existing tree.\n+apply_patch()\n+{\n+    if [ -f $1 ]; then\n+\techo \"Applying patch file $1\"\n+\tcase \"$1\" in\n+\t*gz)\n+\t    gzip -d -c $1 | patch -p1 ;;\n+\t*)\n+\t    cat $1 | patch -p1 ;;\n+\tesac\n+    fi\n+    echo \"Updating file timestamps\"\n+    touch_files\n+}\n+\n+\n+# This is where the actual processing starts.\n echo \"Current directory is `pwd`.\"\n \n-# First of all, check whether this indeed looks like a local CVS of egcs.\n-if [ ! -d CVS ] || [ ! -f gcc/version.c ]; then\n-\techo \"This does not seem to be an egcs CVS tree!\"\n-\texit\n+# Check whether this indeed looks like a local tree.\n+if [ ! -f gcc/version.c ]; then\n+    echo \"This does not seem to be an egcs tree!\"\n+    exit\n fi\n \n-# Check command-line options\n+# First of all, check whether we are going to process a patch.\n+if [ x\"${1}\"x = x\"--patch\"x ]; then\n+    apply_patch ${2}\n+    exit 0\n+fi\n+\n+# Check whether this indeed looks like a local CVS tree.\n+if [ ! -d CVS ]; then\n+    echo \"This does not seem to be an egcs CVS tree!\"\n+    exit\n+fi\n \n+# Check command-line options\n if [ x\"${1}\"x = x\"--nostdflags\"x ]; then\n     shift\n else\n@@ -63,7 +137,6 @@ if [ $? -ne 0 ]; then\n     exit 1\n fi\n \n-\n echo \"Pass 2: Updating full tree\"\n cvs -q update ${1+\"$@\"}\n if [ $? -ne 0 ]; then \n@@ -72,35 +145,4 @@ if [ $? -ne 0 ]; then\n fi\n \n echo \"Pass 3: Fixing local tree\"\n-# Please also update the FAQ accordingly if you change the list of\n-# files below. Note that generated files should be touched only\n-# after the corresponding *.y files.\n-touch `find . -name configure -print`\n-touch `find texinfo -name Makefile.in -print`\n-touch `find texinfo -name \\*.pot -print`\n-touch `find texinfo -name \\*.gmo -print`\n-for f in gcc/c-parse.y \\\n-\t gcc/c-parse.h \\\n-\t gcc/c-parse.c \\\n-\t gcc/cstamp-h.in \\\n-\t gcc/c-gperf.h \\\n-\t gcc/cexp.c \\\n-\t gcc/cp/parse.c \\\n-\t gcc/cp/parse.h \\\n-\t gcc/objc/objc-parse.y \\\n-\t gcc/objc/objc-parse.c \\\n-\t gcc/java/parse.h \\\n-\t gcc/java/parse.c \\\n-\t gcc/java/parse-scan.c \\\n-\t libf2c/libU77/stamp-h.in \\\n-\t contrib/fixinc/fixincl.x \\\n-\t contrib/fixinc/inclhack.sh \\\n-\t contrib/fixinc/fixincl.sh \\\n-\t gcc/fixinc/fixincl.x \\\n-\t gcc/fixinc/inclhack.sh \\\n-\t gcc/fixinc/fixincl.sh\n-do\n-\tif [ -f $f ]; then\n-\t\ttouch $f\n-\tfi\n-done\n+touch_files"}]}