{"sha": "aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a", "node_id": "C_kwDOANBUbNoAKGFhMTFkOTViZWEyMmJlYjJkOWY0ZWNlMmI0YmYzMWZhNTVkYzE5NGE", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-09T11:39:57Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-11-11T15:34:50Z"}, "message": "aarch64: Use type-qualified builtins for UHSUB Neon intrinsics\n\nDeclare unsigned type-qualified builtins and use them to implement\nhalving-subtract Neon intrinsics. This removes the need for many\ncasts in arm_neon.h.\n\ngcc/ChangeLog:\n\n2021-11-09  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use BINOPU type\n\tqualifiers in generator macros for uhsub builtins.\n\t* config/aarch64/arm_neon.h (vhsub_s8): Remove unnecessary\n\tcast.\n\t(vhsub_s16): Likewise.\n\t(vhsub_s32): Likewise.\n\t(vhsub_u8): Use type-qualified builtin and remove casts.\n\t(vhsub_u16): Likewise.\n\t(vhsub_u32): Likewise.\n\t(vhsubq_s8): Remove unnecessary cast.\n\t(vhsubq_s16): Likewise.\n\t(vhsubq_s32): Likewise.\n\t(vhsubq_u8): Use type-qualified builtin and remove casts.\n\t(vhsubq_u16): Likewise.\n\t(vhsubq_u32): Likewise.", "tree": {"sha": "7efca21e0fd2f3fa9af095967142343d6a4906ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7efca21e0fd2f3fa9af095967142343d6a4906ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e35924cf19b7e45b7fa6f294b8122ba12a8725c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e35924cf19b7e45b7fa6f294b8122ba12a8725c"}], "stats": {"total": 32, "additions": 13, "deletions": 19}, "files": [{"sha": "0d5d22e11e2d68ea5cf01551a66b778ea650fd1d", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a", "patch": "@@ -179,7 +179,7 @@\n   BUILTIN_VDQ_BHSI (BINOP, shadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, shsub, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOPU, uhadd, 0, NONE)\n-  BUILTIN_VDQ_BHSI (BINOP, uhsub, 0, NONE)\n+  BUILTIN_VDQ_BHSI (BINOPU, uhsub, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOPU, urhadd, 0, NONE)\n "}, {"sha": "05af357f9d5a9db75ed4202fcd704499b692bedc", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=aa11d95bea22beb2d9f4ece2b4bf31fa55dc194a", "patch": "@@ -1956,90 +1956,84 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsub_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  return (int8x8_t)__builtin_aarch64_shsubv8qi (__a, __b);\n+  return __builtin_aarch64_shsubv8qi (__a, __b);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsub_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_shsubv4hi (__a, __b);\n+  return __builtin_aarch64_shsubv4hi (__a, __b);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsub_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_shsubv2si (__a, __b);\n+  return __builtin_aarch64_shsubv2si (__a, __b);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsub_u8 (uint8x8_t __a, uint8x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_uhsubv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t  (int8x8_t) __b);\n+  return __builtin_aarch64_uhsubv8qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsub_u16 (uint16x4_t __a, uint16x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_uhsubv4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t   (int16x4_t) __b);\n+  return __builtin_aarch64_uhsubv4hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsub_u32 (uint32x2_t __a, uint32x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_uhsubv2si ((int32x2_t) __a,\n-\t\t\t\t\t\t   (int32x2_t) __b);\n+  return __builtin_aarch64_uhsubv2si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsubq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return (int8x16_t) __builtin_aarch64_shsubv16qi (__a, __b);\n+  return __builtin_aarch64_shsubv16qi (__a, __b);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsubq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_shsubv8hi (__a, __b);\n+  return __builtin_aarch64_shsubv8hi (__a, __b);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsubq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_shsubv4si (__a, __b);\n+  return __builtin_aarch64_shsubv4si (__a, __b);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsubq_u8 (uint8x16_t __a, uint8x16_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_uhsubv16qi ((int8x16_t) __a,\n-\t\t\t\t\t\t    (int8x16_t) __b);\n+  return __builtin_aarch64_uhsubv16qi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsubq_u16 (uint16x8_t __a, uint16x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_uhsubv8hi ((int16x8_t) __a,\n-\t\t\t\t\t\t   (int16x8_t) __b);\n+  return __builtin_aarch64_uhsubv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vhsubq_u32 (uint32x4_t __a, uint32x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_uhsubv4si ((int32x4_t) __a,\n-\t\t\t\t\t\t   (int32x4_t) __b);\n+  return __builtin_aarch64_uhsubv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline int8x8_t"}]}