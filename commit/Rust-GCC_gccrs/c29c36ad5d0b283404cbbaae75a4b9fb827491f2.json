{"sha": "c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI5YzM2YWQ1ZDBiMjgzNDA0Y2JiYWFlNzVhNGI5ZmI4Mjc0OTFmMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2015-11-18T22:13:44Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2015-11-18T22:13:44Z"}, "message": "Add out-of-line versions of some <stdatomic.h> functions (PR c/65083).\n\nPR c/65083 notes that some functions in <stdatomic.h> are normal\nfunctions, not generic functions, and so need to have out-of-line\ncopies that can be called when macro expansion is suppressed (unlike\nthe generic functions where DR#419 makes it undefined if you suppress\na macro expansion).\n\nThis patch adds such out-of-line definitions in libatomic for those\nsix functions, at a new LIBATOMIC_1.2 symbol version, as trivial\nwrappers to the <stdatomic.h> macros, along with declarations of those\nfunctions in <stdatomic.h>.  Tests are added that are based on the\ncorresponding tests for the macros, but with parentheses around the\nfunction names to force the out-of-line functions to be used.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\ngcc:\n\t* ginclude/stdatomic.h (atomic_thread_fence, atomic_signal_fence)\n\t(atomic_flag_test_and_set, atomic_flag_test_and_set_explicit)\n\t(atomic_flag_clear, atomic_flag_clear_explicit): Declare as\n\tfunctions before defining as macros.\n\ngcc/testsuite:\n\t* gcc.dg/atomic/stdatomic-fence-2.c,\n\tgcc.dg/atomic/stdatomic-flag-2.c: New tests.\n\nlibatomic:\n\t* fence.c, flag.c: New files.\n\t* Makefile.am (libatomic_la_SOURCES): Add fence.c and flag.c.\n\t* Makefile.in: Regenerate.\n\t* configure.ac (libtool_VERSION): Change to 3:0:2.\n\t* configure: Regenerate.\n\t* libatomic.map (LIBATOMIC_1.2): New symbol version.\n\nFrom-SVN: r230578", "tree": {"sha": "08274b8bbbefd907bbf6dbb3658d87467546b2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/08274b8bbbefd907bbf6dbb3658d87467546b2a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2a2e9e1eb75ccb1adabaa2a65716c17707a7b9"}], "stats": {"total": 229, "additions": 223, "deletions": 6}, "files": [{"sha": "4b788d331e221aa7c44cbc7b62e46b935d60acef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -1,3 +1,11 @@\n+2015-11-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/65083\n+\t* ginclude/stdatomic.h (atomic_thread_fence, atomic_signal_fence)\n+\t(atomic_flag_test_and_set, atomic_flag_test_and_set_explicit)\n+\t(atomic_flag_clear, atomic_flag_clear_explicit): Declare as\n+\tfunctions before defining as macros.\n+\n 2015-11-18  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.c (nvptx_process_pars): Fix whitespace."}, {"sha": "eb3b4d6f115ca820398a67a5a8a55b8b87182d9a", "filename": "gcc/ginclude/stdatomic.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Fginclude%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Fginclude%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Fstdatomic.h?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -91,7 +91,9 @@ typedef _Atomic __UINTMAX_TYPE__ atomic_uintmax_t;\n     __kill_dependency_tmp;\t\t\t\\\n   })\n \n+extern void atomic_thread_fence (memory_order);\n #define atomic_thread_fence(MO)\t__atomic_thread_fence (MO)\n+extern void atomic_signal_fence (memory_order);\n #define atomic_signal_fence(MO)\t__atomic_signal_fence  (MO)\n #define atomic_is_lock_free(OBJ) __atomic_is_lock_free (sizeof (*(OBJ)), (OBJ))\n \n@@ -227,12 +229,17 @@ typedef _Atomic struct\n #define ATOMIC_FLAG_INIT\t{ 0 }\n \n \n+extern _Bool atomic_flag_test_and_set (volatile atomic_flag *);\n #define atomic_flag_test_and_set(PTR) \t\t\t\t\t\\\n \t\t\t__atomic_test_and_set ((PTR), __ATOMIC_SEQ_CST)\n+extern _Bool atomic_flag_test_and_set_explicit (volatile atomic_flag *,\n+\t\t\t\t\t\tmemory_order);\n #define atomic_flag_test_and_set_explicit(PTR, MO)\t\t\t\\\n \t\t\t__atomic_test_and_set ((PTR), (MO))\n \n+extern void atomic_flag_clear (volatile atomic_flag *);\n #define atomic_flag_clear(PTR)\t__atomic_clear ((PTR), __ATOMIC_SEQ_CST)\n+extern void atomic_flag_clear_explicit (volatile atomic_flag *, memory_order);\n #define atomic_flag_clear_explicit(PTR, MO)   __atomic_clear ((PTR), (MO))\n \n #endif  /* _STDATOMIC_H */"}, {"sha": "3ac9cb864739b23696058c8892b699972d1aef51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -1,3 +1,9 @@\n+2015-11-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/65083\n+\t* gcc.dg/atomic/stdatomic-fence-2.c,\n+\tgcc.dg/atomic/stdatomic-flag-2.c: New tests.\n+\n 2015-11-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/loop_optimization19.adb: New test."}, {"sha": "6916e89576c370aff16c705dbee507355a0a3672", "filename": "gcc/testsuite/gcc.dg/atomic/stdatomic-fence-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-fence-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-fence-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-fence-2.c?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -0,0 +1,26 @@\n+/* Test atomic_*_fence routines for existence and execution with each\n+   valid memory model.  Out-of-line function calls.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <stdatomic.h>\n+\n+int\n+main ()\n+{\n+  (atomic_thread_fence) (memory_order_relaxed);\n+  (atomic_thread_fence) (memory_order_consume);\n+  (atomic_thread_fence) (memory_order_acquire);\n+  (atomic_thread_fence) (memory_order_release);\n+  (atomic_thread_fence) (memory_order_acq_rel);\n+  (atomic_thread_fence) (memory_order_seq_cst);\n+\n+  (atomic_signal_fence) (memory_order_relaxed);\n+  (atomic_signal_fence) (memory_order_consume);\n+  (atomic_signal_fence) (memory_order_acquire);\n+  (atomic_signal_fence) (memory_order_release);\n+  (atomic_signal_fence) (memory_order_acq_rel);\n+  (atomic_signal_fence) (memory_order_seq_cst);\n+\n+  return 0;\n+}"}, {"sha": "aeae6b7b5ad592fe9b0a880d6a0097344c802a60", "filename": "gcc/testsuite/gcc.dg/atomic/stdatomic-flag-2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-flag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-flag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fstdatomic-flag-2.c?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -0,0 +1,40 @@\n+/* Test atomic_flag routines for existence and execution.  Out-of-line\n+   function calls.  */\n+/* The test needs a lockless atomic implementation.  */\n+/* { dg-do run { xfail hppa*-*-hpux* } } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+#include <stdatomic.h>\n+\n+extern void abort (void);\n+atomic_flag a = ATOMIC_FLAG_INIT;\n+\n+int\n+main ()\n+{\n+  int b;\n+\n+  if (!atomic_is_lock_free (&a))\n+    abort ();\n+\n+  if ((atomic_flag_test_and_set) (&a))\n+    abort ();\n+  (atomic_flag_clear_explicit) (&a, memory_order_relaxed);\n+  if ((atomic_flag_test_and_set) (&a))\n+    abort ();\n+  (atomic_flag_clear) (&a);\n+\n+  b = (atomic_flag_test_and_set_explicit) (&a, memory_order_seq_cst);\n+  if (!(atomic_flag_test_and_set) (&a) || b != 0)\n+    abort ();\n+\n+  b = (atomic_flag_test_and_set_explicit) (&a, memory_order_acq_rel);\n+  if (!(atomic_flag_test_and_set) (&a) || b != 1)\n+    abort ();\n+\n+  (atomic_flag_clear_explicit) (&a, memory_order_seq_cst);\n+  if ((atomic_flag_test_and_set) (&a))\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "fadb79f1af4035074aa2027ffd322a145feccc82", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -1,3 +1,13 @@\n+2015-11-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR c/65083\n+\t* fence.c, flag.c: New files.\n+\t* Makefile.am (libatomic_la_SOURCES): Add fence.c and flag.c.\n+\t* Makefile.in: Regenerate.\n+\t* configure.ac (libtool_VERSION): Change to 3:0:2.\n+\t* configure: Regenerate.\n+\t* libatomic.map (LIBATOMIC_1.2): New symbol version.\n+\n 2015-10-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* testsuite/lib/libatomic.exp: Load multiline.exp before"}, {"sha": "bd0ab293131f090a6bc00f2714f0d6c0f5d5c201", "filename": "libatomic/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.am?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -68,7 +68,7 @@ libatomic_version_info = -version-info $(libtool_VERSION)\n \n libatomic_la_LDFLAGS = $(libatomic_version_info) $(libatomic_version_script) $(lt_host_flags)\n libatomic_la_SOURCES = gload.c gstore.c gcas.c gexch.c glfree.c lock.c init.c \\\n-\tfenv.c\n+\tfenv.c fence.c flag.c\n \n SIZEOBJS = load store cas exch fadd fsub fand fior fxor fnand tas\n SIZES = @SIZES@"}, {"sha": "b696d554777744276891d76bd820156f0f36f1cd", "filename": "libatomic/Makefile.in", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FMakefile.in?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -114,14 +114,14 @@ am__uninstall_files_from_dir = { \\\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(noinst_LTLIBRARIES) $(toolexeclib_LTLIBRARIES)\n am_libatomic_la_OBJECTS = gload.lo gstore.lo gcas.lo gexch.lo \\\n-\tglfree.lo lock.lo init.lo fenv.lo\n+\tglfree.lo lock.lo init.lo fenv.lo fence.lo flag.lo\n libatomic_la_OBJECTS = $(am_libatomic_la_OBJECTS)\n libatomic_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n \t$(libatomic_la_LDFLAGS) $(LDFLAGS) -o $@\n libatomic_convenience_la_DEPENDENCIES = $(libatomic_la_LIBADD)\n am__objects_1 = gload.lo gstore.lo gcas.lo gexch.lo glfree.lo lock.lo \\\n-\tinit.lo fenv.lo\n+\tinit.lo fenv.lo fence.lo flag.lo\n am_libatomic_convenience_la_OBJECTS = $(am__objects_1)\n libatomic_convenience_la_OBJECTS =  \\\n \t$(am_libatomic_convenience_la_OBJECTS)\n@@ -317,7 +317,7 @@ noinst_LTLIBRARIES = libatomic_convenience.la\n libatomic_version_info = -version-info $(libtool_VERSION)\n libatomic_la_LDFLAGS = $(libatomic_version_info) $(libatomic_version_script) $(lt_host_flags)\n libatomic_la_SOURCES = gload.c gstore.c gcas.c gexch.c glfree.c lock.c init.c \\\n-\tfenv.c\n+\tfenv.c fence.c flag.c\n \n SIZEOBJS = load store cas exch fadd fsub fand fior fxor fnand tas\n EXTRA_libatomic_la_SOURCES = $(addsuffix _n.c,$(SIZEOBJS))\n@@ -456,7 +456,9 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fence.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fenv.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/flag.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gcas.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gexch.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/glfree.Plo@am__quote@"}, {"sha": "8526abff90f2ba1d379eda40bcc62fa85421da6d", "filename": "libatomic/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -11503,7 +11503,7 @@ fi\n \n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=2:0:1\n+libtool_VERSION=3:0:2\n \n \n # Check for used threading-model"}, {"sha": "bdbf825e0cbc490cfb0df984ed7597b7215c2886", "filename": "libatomic/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fconfigure.ac?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -149,7 +149,7 @@ AC_SUBST(enable_static)\n AM_MAINTAINER_MODE\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=2:0:1\n+libtool_VERSION=3:0:2\n AC_SUBST(libtool_VERSION)\n \n # Check for used threading-model"}, {"sha": "a4152f1a469166c7882f29bb10ec5024e66ff5c5", "filename": "libatomic/fence.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Ffence.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Ffence.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Ffence.c?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -0,0 +1,45 @@\n+/* Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"libatomic_i.h\"\n+\n+#include <stdatomic.h>\n+\n+/* Out-of-line versions of <stdatomic.h> fence functions.  */\n+\n+/* Fence as specified by ORDER.  */\n+\n+void\n+(atomic_thread_fence) (memory_order order)\n+{\n+  atomic_thread_fence (order);\n+}\n+\n+/* Fence as specified by ORDER but only establishing ordering between\n+   a thread and a signal handler executed in that thread.  */\n+\n+void\n+(atomic_signal_fence) (memory_order order)\n+{\n+  atomic_signal_fence (order);\n+}"}, {"sha": "bc8cc14a6c379ff4901ecd56a51f33b93119e41e", "filename": "libatomic/flag.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Fflag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Fflag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Fflag.c?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -0,0 +1,64 @@\n+/* Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Atomic Library (libatomic).\n+\n+   Libatomic is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libatomic is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"libatomic_i.h\"\n+\n+#include <stdatomic.h>\n+\n+/* Out-of-line versions of <stdatomic.h> flag functions.  */\n+\n+/* Atomically set *OBJECT to true, returning the previous value.  */\n+\n+_Bool\n+(atomic_flag_test_and_set) (volatile atomic_flag *object)\n+{\n+  return atomic_flag_test_and_set (object);\n+}\n+\n+/* Atomically set *OBJECT to true, returning the previous value, with\n+   memory affected according to ORDER.  */\n+\n+_Bool\n+(atomic_flag_test_and_set_explicit) (volatile atomic_flag *object,\n+\t\t\t\t     memory_order order)\n+{\n+  return atomic_flag_test_and_set_explicit (object, order);\n+}\n+\n+/* Atomically set *OBJECT to false.  */\n+\n+void\n+(atomic_flag_clear) (volatile atomic_flag *object)\n+{\n+  atomic_flag_clear (object);\n+}\n+\n+/* Atomically set *OBJECT to false, with memory affected according to\n+   ORDER.  */\n+\n+void\n+(atomic_flag_clear_explicit) (volatile atomic_flag *object,\n+\t\t\t      memory_order order)\n+{\n+  return atomic_flag_clear_explicit (object, order);\n+}"}, {"sha": "39e7c2c6b9a70121b5f4031da346a27ae6c1be98", "filename": "libatomic/libatomic.map", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Flibatomic.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c29c36ad5d0b283404cbbaae75a4b9fb827491f2/libatomic%2Flibatomic.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2Flibatomic.map?ref=c29c36ad5d0b283404cbbaae75a4b9fb827491f2", "patch": "@@ -99,3 +99,12 @@ LIBATOMIC_1.1 {\n   global:\n \t__atomic_feraiseexcept;\n } LIBATOMIC_1.0;\n+LIBATOMIC_1.2 {\n+  global:\n+\tatomic_thread_fence;\n+\tatomic_signal_fence;\n+\tatomic_flag_test_and_set;\n+\tatomic_flag_test_and_set_explicit;\n+\tatomic_flag_clear;\n+\tatomic_flag_clear_explicit;\n+} LIBATOMIC_1.1;"}]}