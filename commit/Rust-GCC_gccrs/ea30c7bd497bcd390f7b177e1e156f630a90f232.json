{"sha": "ea30c7bd497bcd390f7b177e1e156f630a90f232", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEzMGM3YmQ0OTdiY2QzOTBmN2IxNzdlMWUxNTZmNjMwYTkwZjIzMg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-19T07:57:29Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-19T07:58:29Z"}, "message": "i386: Allow 64bit vector modes in general registers\n\nAllow V8QI, V4HI and V2SI modes in 64bit general registers for\nTARGET_64BIT and add alternatives using general registers\nto 64bit vector logic instructions.\n\n2021-05-19  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\t* config/i386/i386.h (VALID_INT_MODE_P):\n\tAdd V8QI, V4HI and V2SI modes for TARGET_64BIT.\n\t* config/i386/i386.md (isa): Add x64_bmi.\n\t(enabled): Handle x64_bmi.\n\t* config/i386/mmx.md (mmx_andnot<MMXMODEI:mode>3):\n\tAdd alternative using 64bit general registers.\n\t(*mmx_<any_logic:code><MMXMODEI:mode>3): Ditto.", "tree": {"sha": "00bb3be1f69645f8d219cd7e36ed85ccd840c659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00bb3be1f69645f8d219cd7e36ed85ccd840c659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea30c7bd497bcd390f7b177e1e156f630a90f232", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea30c7bd497bcd390f7b177e1e156f630a90f232", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea30c7bd497bcd390f7b177e1e156f630a90f232", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea30c7bd497bcd390f7b177e1e156f630a90f232/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51cfa55431c38f3c29c7b72833337ad8a2da5c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51cfa55431c38f3c29c7b72833337ad8a2da5c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51cfa55431c38f3c29c7b72833337ad8a2da5c06"}], "stats": {"total": 54, "additions": 32, "deletions": 22}, "files": [{"sha": "53d503fc6e09812aa62562f0ced78bbfe3b63ce1", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea30c7bd497bcd390f7b177e1e156f630a90f232/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea30c7bd497bcd390f7b177e1e156f630a90f232/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=ea30c7bd497bcd390f7b177e1e156f630a90f232", "patch": "@@ -1039,10 +1039,12 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n    || (MODE) == SImode || (MODE) == DImode\t\t\t\t\\\n    || (MODE) == CQImode || (MODE) == CHImode\t\t\t\t\\\n    || (MODE) == CSImode || (MODE) == CDImode\t\t\t\t\\\n+   || (MODE) == V4QImode || (MODE) == V2HImode\t\t\t\t\\\n    || (TARGET_64BIT\t\t\t\t\t\t\t\\\n        && ((MODE) == TImode || (MODE) == CTImode\t\t\t\\\n-\t   || (MODE) == TFmode || (MODE) == TCmode))\t\t\t\\\n-   || (MODE) == V4QImode || (MODE) == V2HImode)\n+\t   || (MODE) == TFmode || (MODE) == TCmode\t\t\t\\\n+\t   || (MODE) == V8QImode || (MODE) == V4HImode\t\t\t\\\n+\t   || (MODE) == V2SImode)))\n \n /* Return true for modes passed in SSE registers.  */\n #define SSE_REG_MODE_P(MODE)\t\t\t\t\t\t\\"}, {"sha": "2fc8fae30f310b59f67e23c4f59f49be94d8369e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea30c7bd497bcd390f7b177e1e156f630a90f232/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea30c7bd497bcd390f7b177e1e156f630a90f232/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ea30c7bd497bcd390f7b177e1e156f630a90f232", "patch": "@@ -815,11 +815,12 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,x64,x64_sse2,x64_sse4,x64_sse4_noavx,x64_avx,nox64,\n+(define_attr \"isa\" \"base,x64,nox64,x64_bmi,x64_sse2,x64_sse4,x64_sse4_noavx,\n+\t\t    x64_avx,x64_avx512bw,x64_avx512dq,\n \t\t    sse_noavx,sse2,sse2_noavx,sse3,sse3_noavx,sse4,sse4_noavx,\n \t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n \t\t    avx512bw,noavx512bw,avx512dq,noavx512dq,\n-\t\t    avx512vl,noavx512vl,x64_avx512dq,x64_avx512bw,\n+\t\t    avx512vl,noavx512vl,\n \t\t    avxvnni,avx512vnnivl\"\n   (const_string \"base\"))\n \n@@ -829,6 +830,9 @@\n \n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"x64\") (symbol_ref \"TARGET_64BIT\")\n+\t (eq_attr \"isa\" \"nox64\") (symbol_ref \"!TARGET_64BIT\")\n+\t (eq_attr \"isa\" \"x64_bmi\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_BMI\")\n \t (eq_attr \"isa\" \"x64_sse2\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_SSE2\")\n \t (eq_attr \"isa\" \"x64_sse4\")\n@@ -837,14 +841,13 @@\n \t   (symbol_ref \"TARGET_64BIT && TARGET_SSE4_1 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"x64_avx\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_AVX\")\n-\t (eq_attr \"isa\" \"x64_avx512dq\")\n-\t   (symbol_ref \"TARGET_64BIT && TARGET_AVX512DQ\")\n \t (eq_attr \"isa\" \"x64_avx512bw\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_AVX512BW\")\n-\t (eq_attr \"isa\" \"nox64\") (symbol_ref \"!TARGET_64BIT\")\n-\t (eq_attr \"isa\" \"sse2\") (symbol_ref \"TARGET_SSE2\")\n+\t (eq_attr \"isa\" \"x64_avx512dq\")\n+\t   (symbol_ref \"TARGET_64BIT && TARGET_AVX512DQ\")\n \t (eq_attr \"isa\" \"sse_noavx\")\n \t   (symbol_ref \"TARGET_SSE && !TARGET_AVX\")\n+\t (eq_attr \"isa\" \"sse2\") (symbol_ref \"TARGET_SSE2\")\n \t (eq_attr \"isa\" \"sse2_noavx\")\n \t   (symbol_ref \"TARGET_SSE2 && !TARGET_AVX\")\n \t (eq_attr \"isa\" \"sse3\") (symbol_ref \"TARGET_SSE3\")"}, {"sha": "d8479782e90c79dc10ba1b6583960ca64c087531", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea30c7bd497bcd390f7b177e1e156f630a90f232/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea30c7bd497bcd390f7b177e1e156f630a90f232/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=ea30c7bd497bcd390f7b177e1e156f630a90f232", "patch": "@@ -1987,20 +1987,24 @@\n   \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n \n (define_insn \"mmx_andnot<mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x,v\")\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,r,x,x,v\")\n \t(and:MMXMODEI\n-\t  (not:MMXMODEI (match_operand:MMXMODEI 1 \"register_operand\" \"0,0,x,v\"))\n-\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\" \"ym,x,x,v\")))]\n+\t  (not:MMXMODEI (match_operand:MMXMODEI 1 \"register_operand\"\n+\t    \"0,r,0,x,v\"))\n+\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\"\n+\t    \"ym,r,x,x,v\")))]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"@\n    pandn\\t{%2, %0|%0, %2}\n+   andn\\t{%2, %1, %0|%0, %1, %2}\n    pandn\\t{%2, %0|%0, %2}\n    vpandn\\t{%2, %1, %0|%0, %1, %2}\n    vpandnd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,sse2_noavx,avx,avx512vl\")\n-   (set_attr \"mmx_isa\" \"native,*,*,*\")\n-   (set_attr \"type\" \"mmxadd,sselog,sselog,sselog\")\n-   (set_attr \"mode\" \"DI,TI,TI,TI\")])\n+  [(set_attr \"isa\" \"*,x64_bmi,sse2_noavx,avx,avx512vl\")\n+   (set_attr \"mmx_isa\" \"native,*,*,*,*\")\n+   (set_attr \"type\" \"mmxadd,bitmanip,sselog,sselog,sselog\")\n+   (set_attr \"btver2_decode\" \"*,direct,*,*,*\")\n+   (set_attr \"mode\" \"DI,DI,TI,TI,TI\")])\n \n (define_insn \"*andnot<mode>3\"\n   [(set (match_operand:VI_32 0 \"register_operand\" \"=r,x,x,v\")\n@@ -2035,21 +2039,22 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*mmx_<code><mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x,v\")\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,r,x,x,v\")\n         (any_logic:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"register_mmxmem_operand\" \"%0,0,x,v\")\n-\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\" \"ym,x,x,v\")))]\n+\t  (match_operand:MMXMODEI 1 \"register_mmxmem_operand\" \"%0,0,0,x,v\")\n+\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\" \"ym,r,x,x,v\")))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<logic>\\t{%2, %0|%0, %2}\n+   <logic>\\t{%2, %0|%0, %2}\n    p<logic>\\t{%2, %0|%0, %2}\n    vp<logic>\\t{%2, %1, %0|%0, %1, %2}\n    vp<logic>d\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,sse2_noavx,avx,avx512vl\")\n-   (set_attr \"mmx_isa\" \"native,*,*,*\")\n-   (set_attr \"type\" \"mmxadd,sselog,sselog,sselog\")\n-   (set_attr \"mode\" \"DI,TI,TI,TI\")])\n+  [(set_attr \"isa\" \"*,x64,sse2_noavx,avx,avx512vl\")\n+   (set_attr \"mmx_isa\" \"native,*,*,*,*\")\n+   (set_attr \"type\" \"mmxadd,alu,sselog,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,DI,TI,TI,TI\")])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI_32 0 \"register_operand\")"}]}