{"sha": "8d71d3a317236ab4a69f441cf867a43aeb448150", "node_id": "C_kwDOANBUbNoAKDhkNzFkM2EzMTcyMzZhYjRhNjlmNDQxY2Y4NjdhNDNhZWI0NDgxNTA", "commit": {"author": {"name": "Raphael Moreira Zinsly", "email": "rzinsly@linux.ibm.com", "date": "2021-11-11T14:40:10Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2021-11-11T15:29:25Z"}, "message": "libgcc: Fix backtrace fallback on PowerPC Big-endian\n\nAt the end of the backtrace stream _Unwind_Find_FDE() may not be able\nto find the frame unwind info and will later call the backtrace fallback\ninstead of finishing. This occurs when using an old libc on ppc64 due to\ndl_iterate_phdr() not being able to set the fde in the last trace.\nWhen this occurs the cfa of the trace will be behind of context's cfa.\nAlso, libgo\u2019s probestackmaps() calls the backtrace with a null pointer\nand can get to the backchain fallback with the same problem, in this case\nwe are only interested in find a stack map, we don't need nor can do a\nbackchain.\n_Unwind_ForcedUnwind_Phase2() can hit the same issue as it uses\nuw_frame_state_for(), so we need to treat _URC_NORMAL_STOP.\n\nlibgcc/ChangeLog:\n\tPR libgcc/103044\n\t* config/rs6000/linux-unwind.h (ppc_backchain_fallback): Check if it's\n\tcalled with a null argument or at the end of the backtrace and return.\n\t* unwind.inc (_Unwind_ForcedUnwind_Phase2): Treat _URC_NORMAL_STOP.", "tree": {"sha": "2faac06ced47961dc0f913bdac9cab9d91992537", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2faac06ced47961dc0f913bdac9cab9d91992537"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d71d3a317236ab4a69f441cf867a43aeb448150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d71d3a317236ab4a69f441cf867a43aeb448150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d71d3a317236ab4a69f441cf867a43aeb448150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d71d3a317236ab4a69f441cf867a43aeb448150/comments", "author": {"login": "rzinsly", "id": 6718397, "node_id": "MDQ6VXNlcjY3MTgzOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/6718397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rzinsly", "html_url": "https://github.com/rzinsly", "followers_url": "https://api.github.com/users/rzinsly/followers", "following_url": "https://api.github.com/users/rzinsly/following{/other_user}", "gists_url": "https://api.github.com/users/rzinsly/gists{/gist_id}", "starred_url": "https://api.github.com/users/rzinsly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rzinsly/subscriptions", "organizations_url": "https://api.github.com/users/rzinsly/orgs", "repos_url": "https://api.github.com/users/rzinsly/repos", "events_url": "https://api.github.com/users/rzinsly/events{/privacy}", "received_events_url": "https://api.github.com/users/rzinsly/received_events", "type": "User", "site_admin": false}, "committer": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d3abf42d5c2ccd5c5e879088fdf6e071c3d1b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3abf42d5c2ccd5c5e879088fdf6e071c3d1b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3abf42d5c2ccd5c5e879088fdf6e071c3d1b9e"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "5ef9c1aa0d1f30a1b8ba9e41a023b4615bad62b1", "filename": "libgcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d71d3a317236ab4a69f441cf867a43aeb448150/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d71d3a317236ab4a69f441cf867a43aeb448150/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=8d71d3a317236ab4a69f441cf867a43aeb448150", "patch": "@@ -402,8 +402,14 @@ ppc_backchain_fallback (struct _Unwind_Context *context, void *a)\n   struct trace_arg *arg = a;\n   int count;\n \n-  /* Get the last address computed and start with the next.  */\n+  /* Get the last address computed.  */\n   current = context->cfa;\n+\n+  /* If the trace CFA is not the context CFA the backtrace is done.  */\n+  if (arg == NULL || arg->cfa != current)\n+\treturn;\n+\n+  /* Start with next address.  */\n   current = current->backchain;\n \n   for (count = arg->count; current != NULL; current = current->backchain)"}, {"sha": "dc2f9c13e97d6a406ac9e2395c5ff4147f4c00ad", "filename": "libgcc/unwind.inc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d71d3a317236ab4a69f441cf867a43aeb448150/libgcc%2Funwind.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d71d3a317236ab4a69f441cf867a43aeb448150/libgcc%2Funwind.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind.inc?ref=8d71d3a317236ab4a69f441cf867a43aeb448150", "patch": "@@ -160,12 +160,13 @@ _Unwind_ForcedUnwind_Phase2 (struct _Unwind_Exception *exc,\n \n       /* Set up fs to describe the FDE for the caller of cur_context.  */\n       code = uw_frame_state_for (context, &fs);\n-      if (code != _URC_NO_REASON && code != _URC_END_OF_STACK)\n+      if (code != _URC_NO_REASON && code != _URC_END_OF_STACK\n+\t  && code != _URC_NORMAL_STOP)\n \treturn _URC_FATAL_PHASE2_ERROR;\n \n       /* Unwind successful.  */\n       action = _UA_FORCE_UNWIND | _UA_CLEANUP_PHASE;\n-      if (code == _URC_END_OF_STACK)\n+      if (code == _URC_END_OF_STACK || code == _URC_NORMAL_STOP)\n \taction |= _UA_END_OF_STACK;\n       stop_code = (*stop) (1, action, exc->exception_class, exc,\n \t\t\t   context, stop_argument);"}]}