{"sha": "0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlNmFiY2EyMjBiNzVhYTVhMzM5NGZjMWY4OTcwNWFhMzdjMGViZg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2001-10-07T14:45:04Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2001-10-07T14:45:04Z"}, "message": "demangle.h (demangler_engine): Const-ify.\n\ninclude:\n\t* demangle.h (demangler_engine): Const-ify.\n\t* libiberty.h (buildargv): Likewise.\n\nlibiberty:\n\t* argv.c (buildargv, tests, main): Const-ify.\n\t* cp-demangle.c (operator_code): Likewise.\n\t* cplus-dem.c (optable, libiberty_demanglers,\n\tcplus_demangle_set_style, cplus_demangle_name_to_style,\n\tprint_demangler_list): Likewise.\n\t* hashtab.c (higher_prime_number): Likewise.\n\t* strcasecmp.c (charmap): Likewise.\n\t* strerror.c (error_info, strerror, main): Likewise.\n\t* strncasecmp.c (charmap): Likewise.\n\t* strsignal.c (signal_info): Likewise.\n\nFrom-SVN: r46060", "tree": {"sha": "a0690de0f4f882e39e15d7ffb604d61ec38915f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0690de0f4f882e39e15d7ffb604d61ec38915f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/comments", "author": null, "committer": null, "parents": [{"sha": "59d42021f94fd5aa07147cb63d9187c93f4f13b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59d42021f94fd5aa07147cb63d9187c93f4f13b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59d42021f94fd5aa07147cb63d9187c93f4f13b9"}], "stats": {"total": 89, "additions": 54, "deletions": 35}, "files": [{"sha": "391e17770134cfe1a515cf3c82a3a2a4499deee8", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -1,3 +1,8 @@\n+2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* demangle.h (demangler_engine): Const-ify.\n+\t* libiberty.h (buildargv): Likewise.\n+\n 2001-09-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h (reconcat): New function."}, {"sha": "a314a2410cd110c710797a1d26196f335fab7362", "filename": "include/demangle.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -1,5 +1,5 @@\n /* Defs for interface to demanglers.\n-   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000\n+   Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2001\n    Free Software Foundation, Inc.\n    \n    This program is free software; you can redistribute it and/or modify\n@@ -94,11 +94,11 @@ extern enum demangling_styles\n /* Provide information about the available demangle styles. This code is\n    pulled from gdb into libiberty because it is useful to binutils also.  */\n \n-extern struct demangler_engine\n+extern const struct demangler_engine\n {\n-  const char *demangling_style_name;\n-  enum demangling_styles demangling_style;\n-  const char *demangling_style_doc;\n+  const char *const demangling_style_name;\n+  const enum demangling_styles demangling_style;\n+  const char *const demangling_style_doc;\n } libiberty_demanglers[];\n \n extern char *"}, {"sha": "9501365c6ee46d7d84f6c68eaafe78590820c4e8", "filename": "include/libiberty.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -51,7 +51,7 @@ extern \"C\" {\n /* Build an argument vector from a string.  Allocates memory using\n    malloc.  Use freeargv to free the vector.  */\n \n-extern char **buildargv PARAMS ((char *)) ATTRIBUTE_MALLOC;\n+extern char **buildargv PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n \n /* Free a vector returned by buildargv.  */\n "}, {"sha": "98c091698cdb1d476febff328b3ce5b72d549060", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -1,3 +1,16 @@\n+2001-10-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* argv.c (buildargv, tests, main): Const-ify.\n+\t* cp-demangle.c (operator_code): Likewise.\n+\t* cplus-dem.c (optable, libiberty_demanglers,\n+\tcplus_demangle_set_style, cplus_demangle_name_to_style,\n+\tprint_demangler_list): Likewise.\n+\t* hashtab.c (higher_prime_number): Likewise.\n+\t* strcasecmp.c (charmap): Likewise.\n+\t* strerror.c (error_info, strerror, main): Likewise.\n+\t* strncasecmp.c (charmap): Likewise.\n+\t* strsignal.c (signal_info): Likewise.\n+\n 2001-09-29  DJ Delorie  <dj@redhat.com>\n \n \t* configure: Regenerate."}, {"sha": "5d848ad2a9880dee8cdd8cfe83241ce1dc09a183", "filename": "libiberty/argv.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -1,5 +1,5 @@\n /* Create and destroy argument vectors (argv's)\n-   Copyright (C) 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 2001 Free Software Foundation, Inc.\n    Written by Fred Fish @ Cygnus Support\n \n This file is part of the libiberty library.\n@@ -203,7 +203,7 @@ NOTES\n */\n \n char **buildargv (input)\n-char *input;\n+     const char *input;\n {\n   char *arg;\n   char *copybuf;\n@@ -336,7 +336,7 @@ char *input;\n \n /* Simple little test driver. */\n \n-static char *tests[] =\n+static const char *const tests[] =\n {\n   \"a simple command line\",\n   \"arg 'foo' is single quoted\",\n@@ -353,10 +353,10 @@ static char *tests[] =\n   NULL\n };\n \n-main ()\n+int main ()\n {\n   char **argv;\n-  char **test;\n+  const char *const *test;\n   char **targs;\n \n   for (test = tests; *test != NULL; test++)\n@@ -377,6 +377,7 @@ main ()\n       freeargv (argv);\n     }\n \n+  return 0;\n }\n \n #endif\t/* MAIN */"}, {"sha": "b61ff2c2c5737f186a384053da0f004cc70e5388", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -1557,11 +1557,11 @@ demangle_operator_name (dm, short_name, num_args)\n   struct operator_code\n   {\n     /* The mangled code for this operator.  */\n-    const char *code;\n+    const char *const code;\n     /* The source name of this operator.  */\n-    const char *name;\n+    const char *const name;\n     /* The number of arguments this operator takes.  */\n-    int num_args;\n+    const int num_args;\n   };\n \n   static const struct operator_code operators[] = "}, {"sha": "a464f45e151d6fee1db23e4cd1074a07db4f1acb", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -157,9 +157,9 @@ struct work_stuff\n \n static const struct optable\n {\n-  const char *in;\n-  const char *out;\n-  int flags;\n+  const char *const in;\n+  const char *const out;\n+  const int flags;\n } optable[] = {\n   {\"nw\",\t  \" new\",\tDMGL_ANSI},\t/* new (1.92,\t ansi) */\n   {\"dl\",\t  \" delete\",\tDMGL_ANSI},\t/* new (1.92,\t ansi) */\n@@ -256,7 +256,7 @@ typedef enum type_kind_t\n   tk_real\n } type_kind_t;\n \n-struct demangler_engine libiberty_demanglers[] =\n+const struct demangler_engine libiberty_demanglers[] =\n {\n   {\n     AUTO_DEMANGLING_STYLE_STRING,\n@@ -847,7 +847,7 @@ enum demangling_styles\n cplus_demangle_set_style (style)\n      enum demangling_styles style;\n {\n-  struct demangler_engine *demangler = libiberty_demanglers; \n+  const struct demangler_engine *demangler = libiberty_demanglers; \n \n   for (; demangler->demangling_style != unknown_demangling; ++demangler)\n     if (style == demangler->demangling_style)\n@@ -865,7 +865,7 @@ enum demangling_styles\n cplus_demangle_name_to_style (name)\n      const char *name;\n {\n-  struct demangler_engine *demangler = libiberty_demanglers; \n+  const struct demangler_engine *demangler = libiberty_demanglers; \n \n   for (; demangler->demangling_style != unknown_demangling; ++demangler)\n     if (strcmp (name, demangler->demangling_style_name) == 0)\n@@ -4909,7 +4909,7 @@ static void\n print_demangler_list (stream)\n      FILE *stream;\n {\n-  struct demangler_engine *demangler; \n+  const struct demangler_engine *demangler; \n \n   fprintf (stream, \"{%s\", libiberty_demanglers->demangling_style_name);\n   "}, {"sha": "36ad6e4940b6373070375a100005f5d34c983872", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -80,7 +80,7 @@ higher_prime_number (n)\n {\n   /* These are primes that are near, but slightly smaller than, a\n      power of two.  */\n-  static unsigned long primes[] = {\n+  static const unsigned long primes[] = {\n     (unsigned long) 2,\n     (unsigned long) 7,\n     (unsigned long) 13,\n@@ -115,12 +115,12 @@ higher_prime_number (n)\n     ((unsigned long) 2147483647) + ((unsigned long) 2147483644),\n   };\n \n-  unsigned long* low = &primes[0];\n-  unsigned long* high = &primes[sizeof(primes) / sizeof(primes[0])];\n+  const unsigned long *low = &primes[0];\n+  const unsigned long *high = &primes[sizeof(primes) / sizeof(primes[0])];\n \n   while (low != high)\n     {\n-      unsigned long* mid = low + (high - low) / 2;\n+      const unsigned long *mid = low + (high - low) / 2;\n       if (n > *mid)\n \tlow = mid + 1;\n       else"}, {"sha": "4bfe65077121e45612e38bd42b8e90ffcb93315c", "filename": "libiberty/strcasecmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrcasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrcasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrcasecmp.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -37,7 +37,7 @@ static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n  * based upon ascii character sequences.\n  */\n typedef unsigned char uc;\n-static unsigned char charmap[] = {\n+static const unsigned char charmap[] = {\n \t(uc)'\\000',(uc)'\\001',(uc)'\\002',(uc)'\\003',(uc)'\\004',(uc)'\\005',(uc)'\\006',(uc)'\\007',\n \t(uc)'\\010',(uc)'\\011',(uc)'\\012',(uc)'\\013',(uc)'\\014',(uc)'\\015',(uc)'\\016',(uc)'\\017',\n \t(uc)'\\020',(uc)'\\021',(uc)'\\022',(uc)'\\023',(uc)'\\024',(uc)'\\025',(uc)'\\026',(uc)'\\027',"}, {"sha": "046ffe6a1b74870851e467f85d450d969f9103dd", "filename": "libiberty/strerror.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrerror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrerror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrerror.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -58,10 +58,10 @@ static void init_error_tables PARAMS ((void));\n \n struct error_info\n {\n-  int value;\t\t/* The numeric value from <errno.h> */\n-  const char *name;\t/* The equivalent symbolic value */\n+  const int value;\t\t/* The numeric value from <errno.h> */\n+  const char *const name;\t/* The equivalent symbolic value */\n #ifndef HAVE_SYS_ERRLIST\n-  const char *msg;\t/* Short message about this value */\n+  const char *const msg;\t/* Short message about this value */\n #endif\n };\n \n@@ -625,7 +625,7 @@ char *\n strerror (errnoval)\n   int errnoval;\n {\n-  char *msg;\n+  const char *msg;\n   static char buf[32];\n \n #ifndef HAVE_SYS_ERRLIST\n@@ -783,7 +783,7 @@ main ()\n   int errn;\n   int errnmax;\n   const char *name;\n-  char *msg;\n+  const char *msg;\n   char *strerror ();\n \n   errnmax = errno_max ();"}, {"sha": "77cb421770194f1ac948f15706c1709c82363198", "filename": "libiberty/strncasecmp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrncasecmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrncasecmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrncasecmp.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -36,7 +36,7 @@ static char sccsid[] = \"@(#)strcasecmp.c\t5.5 (Berkeley) 11/24/87\";\n  * together for a case independent comparison.  The mappings are\n  * based upon ascii character sequences.\n  */\n-static unsigned char charmap[] = {\n+static const unsigned char charmap[] = {\n \t'\\000', '\\001', '\\002', '\\003', '\\004', '\\005', '\\006', '\\007',\n \t'\\010', '\\011', '\\012', '\\013', '\\014', '\\015', '\\016', '\\017',\n \t'\\020', '\\021', '\\022', '\\023', '\\024', '\\025', '\\026', '\\027',"}, {"sha": "85639f98814c43d55586bcdad94fba6f7fbb5158", "filename": "libiberty/strsignal.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrsignal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be6abca220b75aa5a3394fc1f89705aa37c0ebf/libiberty%2Fstrsignal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fstrsignal.c?ref=0be6abca220b75aa5a3394fc1f89705aa37c0ebf", "patch": "@@ -67,10 +67,10 @@ static void init_signal_tables PARAMS ((void));\n \n struct signal_info\n {\n-  int value;\t\t/* The numeric value from <signal.h> */\n-  const char *name;\t/* The equivalent symbolic value */\n+  const int value;\t\t/* The numeric value from <signal.h> */\n+  const char *const name;\t/* The equivalent symbolic value */\n #ifndef HAVE_SYS_SIGLIST\n-  const char *msg;\t/* Short message about this value */\n+  const char *const msg;\t/* Short message about this value */\n #endif\n };\n "}]}