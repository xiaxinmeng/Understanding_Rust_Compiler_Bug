{"sha": "da78a067694a5bee1394a4bb2e7272214cb419bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE3OGEwNjc2OTRhNWJlZTEzOTRhNGJiMmU3MjcyMjE0Y2I0MTliYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-02-01T18:50:41Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-02-01T18:50:41Z"}, "message": "re PR fortran/59906 (error: size of variable '<anonymous>' is too large)\n\n2014-02-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/59906\n\t* trans-stmt.c (gfc_add_loop_ss_code): In the case of character\n\tSS_REFERENCE, use gfc_conv_string_parameter to ensure that a\n\tpointer to the string is stored.\n\t* trans-expr.c (gfc_conv_expr_reference): Likewise, use\n\tgfc_conv_string_parameter to ensure that a pointer to is passed\n\tto the elemental function.\n\n2014-02-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/59906\n\t* gfortran.dg/elemental_subroutine_9.f90 : New test\n\nFrom-SVN: r207389", "tree": {"sha": "0754839255200a09b43ee9c4cd2f13648314144e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0754839255200a09b43ee9c4cd2f13648314144e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da78a067694a5bee1394a4bb2e7272214cb419bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da78a067694a5bee1394a4bb2e7272214cb419bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da78a067694a5bee1394a4bb2e7272214cb419bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da78a067694a5bee1394a4bb2e7272214cb419bb/comments", "author": null, "committer": null, "parents": [{"sha": "bca420ed5f40d58e929e1da497785ea2d745ebfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca420ed5f40d58e929e1da497785ea2d745ebfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca420ed5f40d58e929e1da497785ea2d745ebfb"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "5e3a48a65d79f2784474716b9b87b72b1e5daa01", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da78a067694a5bee1394a4bb2e7272214cb419bb", "patch": "@@ -1,3 +1,13 @@\n+2014-02-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59906\n+\t* trans-stmt.c (gfc_add_loop_ss_code): In the case of character\n+\tSS_REFERENCE, use gfc_conv_string_parameter to ensure that a\n+\tpointer to the string is stored.\n+\t* trans-expr.c (gfc_conv_expr_reference): Likewise, use\n+\tgfc_conv_string_parameter to ensure that a pointer to is passed\n+\tto the elemental function.\n+\n 2014-01-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/59414"}, {"sha": "8e7b75ed601f6b39338771ff9027c88302e9d610", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=da78a067694a5bee1394a4bb2e7272214cb419bb", "patch": "@@ -2491,6 +2491,11 @@ gfc_add_loop_ss_code (gfc_loopinfo * loop, gfc_ss * ss, bool subscript,\n \t\t a reference to the value.  */\n \t      gfc_conv_expr (&se, expr);\n \t    }\n+\n+\t  /* Ensure that a pointer to the string is stored.  */\n+\t  if (expr->ts.type == BT_CHARACTER)\n+\t    gfc_conv_string_parameter (&se);\n+\n \t  gfc_add_block_to_block (&outer_loop->pre, &se.pre);\n \t  gfc_add_block_to_block (&outer_loop->post, &se.post);\n \t  if (gfc_is_class_scalar_expr (expr))"}, {"sha": "12da0a0025e4d80fd21f721facf9310be0df435b", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=da78a067694a5bee1394a4bb2e7272214cb419bb", "patch": "@@ -6350,7 +6350,13 @@ gfc_conv_expr_reference (gfc_se * se, gfc_expr * expr)\n       /* Returns a reference to the scalar evaluated outside the loop\n \t for this case.  */\n       gfc_conv_expr (se, expr);\n-      se->expr = gfc_build_addr_expr (NULL_TREE, se->expr);\n+\n+      if (expr->ts.type == BT_CHARACTER\n+\t  && expr->expr_type != EXPR_FUNCTION)\n+\tgfc_conv_string_parameter (se);\n+      else\n+\tse->expr = gfc_build_addr_expr (NULL_TREE, se->expr);\n+\n       return;\n     }\n "}, {"sha": "8af85b50c0e3e77c9f048ca9bbb2a8957e31a5dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da78a067694a5bee1394a4bb2e7272214cb419bb", "patch": "@@ -1,3 +1,8 @@\n+2014-02-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/59906\n+\t* gfortran.dg/elemental_subroutine_9.f90 : New test\n+\n 2014-02-01  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.dg/tree-ssa/ssa-dom-thread-4.c: Adjust expected MIPS output."}, {"sha": "8f574bf595e82d6787239914bc886711a530200a", "filename": "gcc/testsuite/gfortran.dg/elemental_subroutine_9.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da78a067694a5bee1394a4bb2e7272214cb419bb/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_subroutine_9.f90?ref=da78a067694a5bee1394a4bb2e7272214cb419bb", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+!\n+! PR fortran/59906\n+!\n+! Contributed by H Anlauf  <anlauf@gmx.de>\n+!\n+! Failed generate character scalar for scalarized loop for elemantal call.\n+!\n+program x\n+  implicit none\n+  call y('bbb')\n+contains\n+\n+  subroutine y(str)\n+    character(len=*), intent(in) :: str\n+    character(len=len_trim(str)) :: str_aux\n+    character(len=3) :: str3 = 'abc'\n+\n+    str_aux = str\n+\n+    ! Compiled but did not give correct result\n+    if (any (str_cmp((/'aaa','bbb'/), str) .neqv. [.FALSE.,.TRUE.])) call abort\n+\n+    ! Did not compile\n+    if (any (str_cmp((/'bbb', 'aaa'/), str_aux) .neqv. [.TRUE.,.FALSE.])) call abort\n+\n+    ! Verify patch\n+    if (any (str_cmp((/'bbb', 'aaa'/), str3) .neqv. [.FALSE.,.FALSE.])) call abort\n+    if (any (str_cmp((/'bbb', 'aaa'/), 'aaa') .neqv. [.FALSE.,.TRUE.])) call abort\n+\n+  end subroutine y\n+\n+  elemental logical function str_cmp(str1, str2)\n+    character(len=*), intent(in) :: str1\n+    character(len=*), intent(in) :: str2\n+    str_cmp = (str1 == str2)\n+  end function str_cmp\n+\n+end program x"}]}