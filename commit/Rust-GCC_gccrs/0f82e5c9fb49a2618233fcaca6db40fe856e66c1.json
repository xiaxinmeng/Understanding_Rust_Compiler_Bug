{"sha": "0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY4MmU1YzlmYjQ5YTI2MTgyMzNmY2FjYTZkYjQwZmU4NTZlNjZjMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T00:54:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T00:54:22Z"}, "message": "Split NEXT_INSN/PREV_INSN into lvalue and rvalue forms\n\n/\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtx-classes-status.txt: Add SET_NEXT_INSN, SET_PREV_INSN.\n\ngcc/\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtl.h (PREV_INSN): Split macro in two: the existing one,\n\tfor rvalues, and...\n\t(SET_PREV_INSN): New macro, for use as an lvalue.\n\t(NEXT_INSN, SET_NEXT_INSN): Likewise.\n\n\t* caller-save.c (save_call_clobbered_regs): Convert lvalue use of\n\tPREV_INSN/NEXT_INSN into SET_PREV_INSN/SET_NEXT_INSN.\n\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise.\n\t(fixup_abnormal_edges): Likewise.\n\t(unlink_insn_chain): Likewise.\n\t(fixup_reorder_chain): Likewise.\n\t(cfg_layout_delete_block): Likewise.\n\t(cfg_layout_merge_blocks): Likewise.\n\t* combine.c (update_cfg_for_uncondjump): Likewise.\n\t* emit-rtl.c (link_insn_into_chain): Likewise.\n\t(remove_insn): Likewise.\n\t(delete_insns_since): Likewise.\n\t(reorder_insns_nobb): Likewise.\n\t(emit_insn_after_1): Likewise.\n\t* final.c (rest_of_clean_state): Likewise.\n\t(final_scan_insn): Likewise.\n\t* gcse.c (can_assign_to_reg_without_clobbers_p): Likewise.\n\t* haifa-sched.c (concat_note_lists): Likewise.\n\t(remove_notes): Likewise.\n\t(restore_other_notes): Likewise.\n\t(move_insn): Likewise.\n\t(unlink_bb_notes): Likewise.\n\t(restore_bb_notes): Likewise.\n\t* jump.c (delete_for_peephole): Likewise.\n\t* optabs.c (emit_libcall_block_1): Likewise.\n\t* reorg.c (emit_delay_sequence): Likewise.\n\t(fill_simple_delay_slots): Likewise.\n\t* sel-sched-ir.c (sel_move_insn): Likewise.\n\t(sel_remove_insn): Likewise.\n\t(get_bb_note_from_pool): Likewise.\n\t* sel-sched.c (move_nop_to_previous_block): Likewise.\n\n\t* config/bfin/bfin.c (reorder_var_tracking_notes): Likewise.\n\t* config/c6x/c6x.c (gen_one_bundle): Likewise.\n\t(c6x_gen_bundles): Likewise.\n\t(hwloop_optimize): Likewise.\n\t* config/frv/frv.c (frv_function_prologue): Likewise.\n\t(frv_register_nop): Likewise.\n\t* config/ia64/ia64.c (ia64_init_dfa_pre_cycle_insn): Likewise.\n\t(ia64_reorg): Likewise.\n\t* config/mep/mep.c (mep_reorg_addcombine): Likewise.\n\t(mep_make_bundle): Likewise.\n\t(mep_bundle_insns): Likewise.\n\t* config/picochip/picochip.c (reorder_var_tracking_notes): Likewise.\n\t* config/tilegx/tilegx.c (reorder_var_tracking_notes): Likewise.\n\t* config/tilepro/tilepro.c (reorder_var_tracking_notes): Likewise.\n\nFrom-SVN: r214128", "tree": {"sha": "03e829aeeea83ad9c7386f8e4821c145e377edbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03e829aeeea83ad9c7386f8e4821c145e377edbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c9afb6905bfc13e8ba14474fed4b476b0e7f837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c9afb6905bfc13e8ba14474fed4b476b0e7f837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c9afb6905bfc13e8ba14474fed4b476b0e7f837"}], "stats": {"total": 476, "additions": 271, "deletions": 205}, "files": [{"sha": "68a89d627540c299a541b2493cdc0a305166c813", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -1,3 +1,7 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtx-classes-status.txt: Add SET_NEXT_INSN, SET_PREV_INSN.\n+\n 2014-08-18  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "f2258a748132bf5bec5a23cf7a3af6835cfc7709", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -1,3 +1,57 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtl.h (PREV_INSN): Split macro in two: the existing one,\n+\tfor rvalues, and...\n+\t(SET_PREV_INSN): New macro, for use as an lvalue.\n+\t(NEXT_INSN, SET_NEXT_INSN): Likewise.\n+\n+\t* caller-save.c (save_call_clobbered_regs): Convert lvalue use of\n+\tPREV_INSN/NEXT_INSN into SET_PREV_INSN/SET_NEXT_INSN.\n+\t* cfgrtl.c (try_redirect_by_replacing_jump): Likewise.\n+\t(fixup_abnormal_edges): Likewise.\n+\t(unlink_insn_chain): Likewise.\n+\t(fixup_reorder_chain): Likewise.\n+\t(cfg_layout_delete_block): Likewise.\n+\t(cfg_layout_merge_blocks): Likewise.\n+\t* combine.c (update_cfg_for_uncondjump): Likewise.\n+\t* emit-rtl.c (link_insn_into_chain): Likewise.\n+\t(remove_insn): Likewise.\n+\t(delete_insns_since): Likewise.\n+\t(reorder_insns_nobb): Likewise.\n+\t(emit_insn_after_1): Likewise.\n+\t* final.c (rest_of_clean_state): Likewise.\n+\t(final_scan_insn): Likewise.\n+\t* gcse.c (can_assign_to_reg_without_clobbers_p): Likewise.\n+\t* haifa-sched.c (concat_note_lists): Likewise.\n+\t(remove_notes): Likewise.\n+\t(restore_other_notes): Likewise.\n+\t(move_insn): Likewise.\n+\t(unlink_bb_notes): Likewise.\n+\t(restore_bb_notes): Likewise.\n+\t* jump.c (delete_for_peephole): Likewise.\n+\t* optabs.c (emit_libcall_block_1): Likewise.\n+\t* reorg.c (emit_delay_sequence): Likewise.\n+\t(fill_simple_delay_slots): Likewise.\n+\t* sel-sched-ir.c (sel_move_insn): Likewise.\n+\t(sel_remove_insn): Likewise.\n+\t(get_bb_note_from_pool): Likewise.\n+\t* sel-sched.c (move_nop_to_previous_block): Likewise.\n+\n+\t* config/bfin/bfin.c (reorder_var_tracking_notes): Likewise.\n+\t* config/c6x/c6x.c (gen_one_bundle): Likewise.\n+\t(c6x_gen_bundles): Likewise.\n+\t(hwloop_optimize): Likewise.\n+\t* config/frv/frv.c (frv_function_prologue): Likewise.\n+\t(frv_register_nop): Likewise.\n+\t* config/ia64/ia64.c (ia64_init_dfa_pre_cycle_insn): Likewise.\n+\t(ia64_reorg): Likewise.\n+\t* config/mep/mep.c (mep_reorg_addcombine): Likewise.\n+\t(mep_make_bundle): Likewise.\n+\t(mep_bundle_insns): Likewise.\n+\t* config/picochip/picochip.c (reorder_var_tracking_notes): Likewise.\n+\t* config/tilegx/tilegx.c (reorder_var_tracking_notes): Likewise.\n+\t* config/tilepro/tilepro.c (reorder_var_tracking_notes): Likewise.\n+\n 2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (BB_HEAD): Convert to a function.  Strengthen the"}, {"sha": "b1ef3a9773f0e825c6023f17c6733219287dc641", "filename": "gcc/caller-save.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -913,13 +913,13 @@ save_call_clobbered_regs (void)\n \t\t  prev = PREV_INSN (ins);\n \t\t  if (NOTE_P (ins))\n \t\t    {\n-\t\t      NEXT_INSN (prev) = NEXT_INSN (ins);\n-\t\t      PREV_INSN (NEXT_INSN (ins)) = prev;\n-\t\t      PREV_INSN (ins) = insn;\n-\t\t      NEXT_INSN (ins) = NEXT_INSN (insn);\n-\t\t      NEXT_INSN (insn) = ins;\n+\t\t      SET_NEXT_INSN (prev) = NEXT_INSN (ins);\n+\t\t      SET_PREV_INSN (NEXT_INSN (ins)) = prev;\n+\t\t      SET_PREV_INSN (ins) = insn;\n+\t\t      SET_NEXT_INSN (ins) = NEXT_INSN (insn);\n+\t\t      SET_NEXT_INSN (insn) = ins;\n \t\t      if (NEXT_INSN (ins))\n-\t\t\tPREV_INSN (NEXT_INSN (ins)) = ins;\n+\t\t\tSET_PREV_INSN (NEXT_INSN (ins)) = ins;\n                       if (BB_END (bb) == insn)\n \t\t\tSET_BB_END (bb) = ins;\n \t\t    }"}, {"sha": "cb07f0bcf0b3cd7d0c74995360c6cabb349fb1ff", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -1060,11 +1060,11 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n \t      if (BARRIER_P (insn))\n \t\t{\n \t\t  if (PREV_INSN (insn))\n-\t\t    NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n+\t\t    SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n \t\t  else\n \t\t    SET_BB_FOOTER (src) = NEXT_INSN (insn);\n \t\t  if (NEXT_INSN (insn))\n-\t\t    PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n+\t\t    SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n \t\t}\n \t      if (LABEL_P (insn))\n \t\tbreak;\n@@ -1132,14 +1132,14 @@ try_redirect_by_replacing_jump (edge e, basic_block target, bool in_cfglayout)\n \t      update_bb_for_insn_chain (NEXT_INSN (BB_END (src)),\n \t\t\t\t        PREV_INSN (barrier), src);\n \n-\t      NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);\n-\t      PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);\n+\t      SET_NEXT_INSN (PREV_INSN (new_insn)) = NEXT_INSN (new_insn);\n+\t      SET_PREV_INSN (NEXT_INSN (new_insn)) = PREV_INSN (new_insn);\n \n-\t      NEXT_INSN (new_insn) = barrier;\n-\t      NEXT_INSN (PREV_INSN (barrier)) = new_insn;\n+\t      SET_NEXT_INSN (new_insn) = barrier;\n+\t      SET_NEXT_INSN (PREV_INSN (barrier)) = new_insn;\n \n-\t      PREV_INSN (new_insn) = PREV_INSN (barrier);\n-\t      PREV_INSN (barrier) = new_insn;\n+\t      SET_PREV_INSN (new_insn) = PREV_INSN (barrier);\n+\t      SET_PREV_INSN (barrier) = new_insn;\n \t    }\n \t}\n     }\n@@ -3270,8 +3270,8 @@ fixup_abnormal_edges (void)\n \t\t\t{\n \t\t\t  /* We're not deleting it, we're moving it.  */\n \t\t\t  INSN_DELETED_P (insn) = 0;\n-\t\t\t  PREV_INSN (insn) = NULL_RTX;\n-\t\t\t  NEXT_INSN (insn) = NULL_RTX;\n+\t\t\t  SET_PREV_INSN (insn) = NULL_RTX;\n+\t\t\t  SET_NEXT_INSN (insn) = NULL_RTX;\n \n \t\t\t  insert_insn_on_edge (insn, e);\n \t\t\t  inserted = true;\n@@ -3302,12 +3302,12 @@ unlink_insn_chain (rtx first, rtx last)\n   rtx prevfirst = PREV_INSN (first);\n   rtx nextlast = NEXT_INSN (last);\n \n-  PREV_INSN (first) = NULL;\n-  NEXT_INSN (last) = NULL;\n+  SET_PREV_INSN (first) = NULL;\n+  SET_NEXT_INSN (last) = NULL;\n   if (prevfirst)\n-    NEXT_INSN (prevfirst) = nextlast;\n+    SET_NEXT_INSN (prevfirst) = nextlast;\n   if (nextlast)\n-    PREV_INSN (nextlast) = prevfirst;\n+    SET_PREV_INSN (nextlast) = prevfirst;\n   else\n     set_last_insn (prevfirst);\n   if (!prevfirst)\n@@ -3650,32 +3650,32 @@ fixup_reorder_chain (void)\n       if (BB_HEADER (bb))\n \t{\n \t  if (insn)\n-\t    NEXT_INSN (insn) = BB_HEADER (bb);\n+\t    SET_NEXT_INSN (insn) = BB_HEADER (bb);\n \t  else\n \t    set_first_insn (BB_HEADER (bb));\n-\t  PREV_INSN (BB_HEADER (bb)) = insn;\n+\t  SET_PREV_INSN (BB_HEADER (bb)) = insn;\n \t  insn = BB_HEADER (bb);\n \t  while (NEXT_INSN (insn))\n \t    insn = NEXT_INSN (insn);\n \t}\n       if (insn)\n-\tNEXT_INSN (insn) = BB_HEAD (bb);\n+\tSET_NEXT_INSN (insn) = BB_HEAD (bb);\n       else\n \tset_first_insn (BB_HEAD (bb));\n-      PREV_INSN (BB_HEAD (bb)) = insn;\n+      SET_PREV_INSN (BB_HEAD (bb)) = insn;\n       insn = BB_END (bb);\n       if (BB_FOOTER (bb))\n \t{\n-\t  NEXT_INSN (insn) = BB_FOOTER (bb);\n-\t  PREV_INSN (BB_FOOTER (bb)) = insn;\n+\t  SET_NEXT_INSN (insn) = BB_FOOTER (bb);\n+\t  SET_PREV_INSN (BB_FOOTER (bb)) = insn;\n \t  while (NEXT_INSN (insn))\n \t    insn = NEXT_INSN (insn);\n \t}\n     }\n \n-  NEXT_INSN (insn) = cfg_layout_function_footer;\n+  SET_NEXT_INSN (insn) = cfg_layout_function_footer;\n   if (cfg_layout_function_footer)\n-    PREV_INSN (cfg_layout_function_footer) = insn;\n+    SET_PREV_INSN (cfg_layout_function_footer) = insn;\n \n   while (NEXT_INSN (insn))\n     insn = NEXT_INSN (insn);\n@@ -4410,15 +4410,15 @@ cfg_layout_delete_block (basic_block bb)\n     {\n       next = BB_HEAD (bb);\n       if (prev)\n-\tNEXT_INSN (prev) = BB_HEADER (bb);\n+\tSET_NEXT_INSN (prev) = BB_HEADER (bb);\n       else\n \tset_first_insn (BB_HEADER (bb));\n-      PREV_INSN (BB_HEADER (bb)) = prev;\n+      SET_PREV_INSN (BB_HEADER (bb)) = prev;\n       insn = BB_HEADER (bb);\n       while (NEXT_INSN (insn))\n \tinsn = NEXT_INSN (insn);\n-      NEXT_INSN (insn) = next;\n-      PREV_INSN (next) = insn;\n+      SET_NEXT_INSN (insn) = next;\n+      SET_PREV_INSN (next) = insn;\n     }\n   next = NEXT_INSN (BB_END (bb));\n   if (BB_FOOTER (bb))\n@@ -4429,11 +4429,11 @@ cfg_layout_delete_block (basic_block bb)\n \t  if (BARRIER_P (insn))\n \t    {\n \t      if (PREV_INSN (insn))\n-\t\tNEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n+\t\tSET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n \t      else\n \t\tSET_BB_FOOTER (bb) = NEXT_INSN (insn);\n \t      if (NEXT_INSN (insn))\n-\t\tPREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n+\t\tSET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n \t    }\n \t  if (LABEL_P (insn))\n \t    break;\n@@ -4442,13 +4442,13 @@ cfg_layout_delete_block (basic_block bb)\n       if (BB_FOOTER (bb))\n \t{\n \t  insn = BB_END (bb);\n-\t  NEXT_INSN (insn) = BB_FOOTER (bb);\n-\t  PREV_INSN (BB_FOOTER (bb)) = insn;\n+\t  SET_NEXT_INSN (insn) = BB_FOOTER (bb);\n+\t  SET_PREV_INSN (BB_FOOTER (bb)) = insn;\n \t  while (NEXT_INSN (insn))\n \t    insn = NEXT_INSN (insn);\n-\t  NEXT_INSN (insn) = next;\n+\t  SET_NEXT_INSN (insn) = next;\n \t  if (next)\n-\t    PREV_INSN (next) = insn;\n+\t    SET_PREV_INSN (next) = insn;\n \t  else\n \t    set_last_insn (insn);\n \t}\n@@ -4475,9 +4475,9 @@ cfg_layout_delete_block (basic_block bb)\n       insn = remaints;\n       while (NEXT_INSN (insn))\n \tinsn = NEXT_INSN (insn);\n-      NEXT_INSN (insn) = *to;\n+      SET_NEXT_INSN (insn) = *to;\n       if (*to)\n-\tPREV_INSN (*to) = insn;\n+\tSET_PREV_INSN (*to) = insn;\n       *to = remaints;\n     }\n }\n@@ -4573,8 +4573,8 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n \n \t  while (NEXT_INSN (last))\n \t    last = NEXT_INSN (last);\n-\t  NEXT_INSN (last) = BB_FOOTER (b);\n-\t  PREV_INSN (BB_FOOTER (b)) = last;\n+\t  SET_NEXT_INSN (last) = BB_FOOTER (b);\n+\t  SET_PREV_INSN (BB_FOOTER (b)) = last;\n \t}\n       SET_BB_FOOTER (b) = NULL;\n     }\n@@ -4592,8 +4592,8 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n  \n \t  while (NEXT_INSN (last))\n \t    last = NEXT_INSN (last);\n-\t  NEXT_INSN (last) = BB_FOOTER (a);\n-\t  PREV_INSN (BB_FOOTER (a)) = last;\n+\t  SET_NEXT_INSN (last) = BB_FOOTER (a);\n+\t  SET_PREV_INSN (BB_FOOTER (a)) = last;\n \t  SET_BB_FOOTER (a) = BB_HEADER (b);\n \t}\n       SET_BB_HEADER (b) = NULL;"}, {"sha": "8c82efc207e0c7791b55f703267faab3e93b1e85", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -2420,11 +2420,11 @@ update_cfg_for_uncondjump (rtx insn)\n \tif (BARRIER_P (insn))\n \t  {\n \t    if (PREV_INSN (insn))\n-\t      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n+\t      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n \t    else\n \t      SET_BB_FOOTER (bb) = NEXT_INSN (insn);\n \t    if (NEXT_INSN (insn))\n-\t      PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n+\t      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n \t  }\n \telse if (LABEL_P (insn))\n \t  break;"}, {"sha": "5800ad5ae8e417bef21ca36635861e8348d5edc3", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -4058,10 +4058,10 @@ reorder_var_tracking_notes (void)\n \t\t  while (queue)\n \t\t    {\n \t\t      rtx next_queue = PREV_INSN (queue);\n-\t\t      PREV_INSN (NEXT_INSN (insn)) = queue;\n-\t\t      NEXT_INSN (queue) = NEXT_INSN (insn);\n-\t\t      NEXT_INSN (insn) = queue;\n-\t\t      PREV_INSN (queue) = insn;\n+\t\t      SET_PREV_INSN (NEXT_INSN (insn)) = queue;\n+\t\t      SET_NEXT_INSN (queue) = NEXT_INSN (insn);\n+\t\t      SET_NEXT_INSN (insn) = queue;\n+\t\t      SET_PREV_INSN (queue) = insn;\n \t\t      queue = next_queue;\n \t\t    }\n \t\t  in_bundle = false;\n@@ -4074,10 +4074,10 @@ reorder_var_tracking_notes (void)\n \t      if (in_bundle)\n \t\t{\n \t\t  rtx prev = PREV_INSN (insn);\n-\t\t  PREV_INSN (next) = prev;\n-\t\t  NEXT_INSN (prev) = next;\n+\t\t  SET_PREV_INSN (next) = prev;\n+\t\t  SET_NEXT_INSN (prev) = next;\n \n-\t\t  PREV_INSN (insn) = queue;\n+\t\t  SET_PREV_INSN (insn) = queue;\n \t\t  queue = insn;\n \t\t}\n \t    }"}, {"sha": "889031ac9daf8428a1709000e756f4ef4ae8f275", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -4599,26 +4599,26 @@ gen_one_bundle (rtx *slot, int n_filled, int real_first)\n   bundle = make_insn_raw (bundle);\n   BLOCK_FOR_INSN (bundle) = BLOCK_FOR_INSN (slot[0]);\n   INSN_LOCATION (bundle) = INSN_LOCATION (slot[0]);\n-  PREV_INSN (bundle) = PREV_INSN (slot[real_first]);\n+  SET_PREV_INSN (bundle) = SET_PREV_INSN (slot[real_first]);\n \n   t = NULL_RTX;\n \n   for (i = 0; i < n_filled; i++)\n     {\n       rtx insn = slot[i];\n       remove_insn (insn);\n-      PREV_INSN (insn) = t ? t : PREV_INSN (bundle);\n+      SET_PREV_INSN (insn) = t ? t : PREV_INSN (bundle);\n       if (t != NULL_RTX)\n-\tNEXT_INSN (t) = insn;\n+\tSET_NEXT_INSN (t) = insn;\n       t = insn;\n       if (i > 0)\n \tINSN_LOCATION (slot[i]) = INSN_LOCATION (bundle);\n     }\n \n-  NEXT_INSN (bundle) = NEXT_INSN (PREV_INSN (bundle));\n-  NEXT_INSN (t) = NEXT_INSN (bundle);\n-  NEXT_INSN (PREV_INSN (bundle)) = bundle;\n-  PREV_INSN (NEXT_INSN (bundle)) = bundle;\n+  SET_NEXT_INSN (bundle) = NEXT_INSN (PREV_INSN (bundle));\n+  SET_NEXT_INSN (t) = NEXT_INSN (bundle);\n+  SET_NEXT_INSN (PREV_INSN (bundle)) = bundle;\n+  SET_PREV_INSN (NEXT_INSN (bundle)) = bundle;\n }\n \n /* Move all parallel instructions into SEQUENCEs, so that no subsequent passes\n@@ -4710,12 +4710,12 @@ c6x_gen_bundles (void)\n \tcontinue;\n       if (NEXT_INSN (last_call) == insn)\n \tcontinue;\n-      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n-      PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n-      PREV_INSN (insn) = last_call;\n-      NEXT_INSN (insn) = NEXT_INSN (last_call);\n-      PREV_INSN (NEXT_INSN (insn)) = insn;\n-      NEXT_INSN (PREV_INSN (insn)) = insn;\n+      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n+      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n+      SET_PREV_INSN (insn) = last_call;\n+      SET_NEXT_INSN (insn) = NEXT_INSN (last_call);\n+      SET_PREV_INSN (NEXT_INSN (insn)) = insn;\n+      SET_NEXT_INSN (PREV_INSN (insn)) = insn;\n       last_call = insn;\n     }\n }\n@@ -5698,8 +5698,8 @@ hwloop_optimize (hwloop_info loop)\n      reservations of the instructions contained in it to the corresponding\n      instructions from iteration 0, which are the only ones we'll keep.  */\n   assign_reservations (BB_HEAD (bb), ss.last_scheduled_insn);\n-  PREV_INSN (BB_END (bb)) = ss.last_scheduled_iter0;\n-  NEXT_INSN (ss.last_scheduled_iter0) = BB_END (bb);\n+  SET_PREV_INSN (BB_END (bb)) = ss.last_scheduled_iter0;\n+  SET_NEXT_INSN (ss.last_scheduled_iter0) = BB_END (bb);\n   filter_insns_above (bb, sploop_max_uid_iter0);\n \n   for (i = 0; i < n_real_insns; i++)\n@@ -5821,13 +5821,13 @@ hwloop_optimize (hwloop_info loop)\n \n   for (i = 1; i < n_insns; i++)\n     {\n-      NEXT_INSN (orig_vec[i - 1]) = orig_vec[i];\n-      PREV_INSN (orig_vec[i]) = orig_vec[i - 1];\n+      SET_NEXT_INSN (orig_vec[i - 1]) = orig_vec[i];\n+      SET_PREV_INSN (orig_vec[i]) = orig_vec[i - 1];\n     }\n-  PREV_INSN (orig_vec[0]) = PREV_INSN (BB_HEAD (bb));\n-  NEXT_INSN (PREV_INSN (BB_HEAD (bb))) = orig_vec[0];\n-  NEXT_INSN (orig_vec[n_insns - 1]) = NEXT_INSN (BB_END (bb));\n-  PREV_INSN (NEXT_INSN (BB_END (bb))) = orig_vec[n_insns - 1];\n+  SET_PREV_INSN (orig_vec[0]) = PREV_INSN (BB_HEAD (bb));\n+  SET_NEXT_INSN (PREV_INSN (BB_HEAD (bb))) = orig_vec[0];\n+  SET_NEXT_INSN (orig_vec[n_insns - 1]) = NEXT_INSN (BB_END (bb));\n+  SET_PREV_INSN (NEXT_INSN (BB_END (bb))) = orig_vec[n_insns - 1];\n   SET_BB_HEAD (bb) = orig_vec[0];\n   SET_BB_END (bb) = orig_vec[n_insns - 1];\n  undo_splits:"}, {"sha": "1ed8f74c66711c5c7ba47fccd477e9db3049fe2a", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -1465,12 +1465,12 @@ frv_function_prologue (FILE *file, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n       if (NEXT_INSN (last_call) == insn)\n \tcontinue;\n \n-      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n-      PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n-      PREV_INSN (insn) = last_call;\n-      NEXT_INSN (insn) = NEXT_INSN (last_call);\n-      PREV_INSN (NEXT_INSN (insn)) = insn;\n-      NEXT_INSN (PREV_INSN (insn)) = insn;\n+      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n+      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n+      SET_PREV_INSN (insn) = last_call;\n+      SET_NEXT_INSN (insn) = NEXT_INSN (last_call);\n+      SET_PREV_INSN (NEXT_INSN (insn)) = insn;\n+      SET_NEXT_INSN (PREV_INSN (insn)) = insn;\n       last_call = insn;\n     }\n }\n@@ -8162,8 +8162,8 @@ static void\n frv_register_nop (rtx nop)\n {\n   nop = make_insn_raw (nop);\n-  NEXT_INSN (nop) = 0;\n-  PREV_INSN (nop) = 0;\n+  SET_NEXT_INSN (nop) = 0;\n+  SET_PREV_INSN (nop) = 0;\n   frv_nops[frv_num_nops++] = nop;\n }\n "}, {"sha": "1b2146d0bbb515b35acda96ceb4472da54a19a19", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -9489,10 +9489,10 @@ ia64_init_dfa_pre_cycle_insn (void)\n       prev_cycle_state = xmalloc (dfa_state_size);\n     }\n   dfa_pre_cycle_insn = make_insn_raw (gen_pre_cycle ());\n-  PREV_INSN (dfa_pre_cycle_insn) = NEXT_INSN (dfa_pre_cycle_insn) = NULL_RTX;\n+  SET_PREV_INSN (dfa_pre_cycle_insn) = SET_NEXT_INSN (dfa_pre_cycle_insn) = NULL_RTX;\n   recog_memoized (dfa_pre_cycle_insn);\n   dfa_stop_insn = make_insn_raw (gen_insn_group_barrier (GEN_INT (3)));\n-  PREV_INSN (dfa_stop_insn) = NEXT_INSN (dfa_stop_insn) = NULL_RTX;\n+  SET_PREV_INSN (dfa_stop_insn) = SET_NEXT_INSN (dfa_stop_insn) = NULL_RTX;\n   recog_memoized (dfa_stop_insn);\n }\n \n@@ -9679,7 +9679,7 @@ ia64_reorg (void)\n \n       initiate_bundle_states ();\n       ia64_nop = make_insn_raw (gen_nop ());\n-      PREV_INSN (ia64_nop) = NEXT_INSN (ia64_nop) = NULL_RTX;\n+      SET_PREV_INSN (ia64_nop) = SET_NEXT_INSN (ia64_nop) = NULL_RTX;\n       recog_memoized (ia64_nop);\n       clocks_length = get_max_uid () + 1;\n       stops_p = XCNEWVEC (char, clocks_length);"}, {"sha": "abd8e5cd3ce98770c322cefb3b4a28b499e490d5", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -5695,9 +5695,9 @@ mep_reorg_addcombine (rtx insns)\n \t\t&& ic + nc > -32768)\n \t      {\n \t\tXEXP (SET_SRC (PATTERN (i)), 1) = GEN_INT (ic + nc);\n-\t\tNEXT_INSN (i) = NEXT_INSN (n);\n+\t\tSET_NEXT_INSN (i) = NEXT_INSN (n);\n \t\tif (NEXT_INSN (i))\n-\t\t  PREV_INSN (NEXT_INSN (i)) = i;\n+\t\t  SET_PREV_INSN (NEXT_INSN (i)) = i;\n \t      }\n \t  }\n       }\n@@ -6812,10 +6812,10 @@ mep_make_bundle (rtx core, rtx cop)\n   remove_insn (cop);\n \n   /* Set up the links of the insns inside the SEQUENCE.  */\n-  PREV_INSN (core) = PREV_INSN (insn);\n-  NEXT_INSN (core) = cop;\n-  PREV_INSN (cop) = core;\n-  NEXT_INSN (cop) = NEXT_INSN (insn);\n+  SET_PREV_INSN (core) = PREV_INSN (insn);\n+  SET_NEXT_INSN (core) = cop;\n+  SET_PREV_INSN (cop) = core;\n+  SET_NEXT_INSN (cop) = NEXT_INSN (insn);\n \n   /* Set the VLIW flag for the coprocessor instruction.  */\n   PUT_MODE (core, VOIDmode);\n@@ -6933,13 +6933,13 @@ mep_bundle_insns (rtx insns)\n \t      if (NOTE_P (note))\n \t\t{\n \t\t  /* Remove NOTE from here... */\n-\t\t  PREV_INSN (NEXT_INSN (note)) = PREV_INSN (note);\n-\t\t  NEXT_INSN (PREV_INSN (note)) = NEXT_INSN (note);\n+\t\t  SET_PREV_INSN (NEXT_INSN (note)) = PREV_INSN (note);\n+\t\t  SET_NEXT_INSN (PREV_INSN (note)) = NEXT_INSN (note);\n \t\t  /* ...and put it in here.  */\n-\t\t  NEXT_INSN (note) = first;\n-\t\t  PREV_INSN (note) = PREV_INSN (first);\n-\t\t  NEXT_INSN (PREV_INSN (note)) = note;\n-\t\t  PREV_INSN (NEXT_INSN (note)) = note;\n+\t\t  SET_NEXT_INSN (note) = first;\n+\t\t  SET_PREV_INSN (note) = PREV_INSN (first);\n+\t\t  SET_NEXT_INSN (PREV_INSN (note)) = note;\n+\t\t  SET_PREV_INSN (NEXT_INSN (note)) = note;\n \t\t}\n \n \t      note = prev;\n@@ -7001,17 +7001,17 @@ mep_bundle_insns (rtx insns)\n \n \t\t  /* Remove core insn.  */\n \t\t  if (PREV_INSN (core_insn))\n-\t\t    NEXT_INSN (PREV_INSN (core_insn)) = NEXT_INSN (core_insn);\n+\t\t    SET_NEXT_INSN (PREV_INSN (core_insn)) = NEXT_INSN (core_insn);\n \t\t  if (NEXT_INSN (core_insn))\n-\t\t    PREV_INSN (NEXT_INSN (core_insn)) = PREV_INSN (core_insn);\n+\t\t    SET_PREV_INSN (NEXT_INSN (core_insn)) = PREV_INSN (core_insn);\n \n \t\t  /* Re-insert core insn.  */\n-\t\t  PREV_INSN (core_insn) = PREV_INSN (insn);\n-\t\t  NEXT_INSN (core_insn) = insn;\n+\t\t  SET_PREV_INSN (core_insn) = PREV_INSN (insn);\n+\t\t  SET_NEXT_INSN (core_insn) = insn;\n \n \t\t  if (PREV_INSN (core_insn))\n-\t\t    NEXT_INSN (PREV_INSN (core_insn)) = core_insn;\n-\t\t  PREV_INSN (insn) = core_insn;\n+\t\t    SET_NEXT_INSN (PREV_INSN (core_insn)) = core_insn;\n+\t\t  SET_PREV_INSN (insn) = core_insn;\n \n \t\t  PUT_MODE (core_insn, TImode);\n \t\t  PUT_MODE (insn, VOIDmode);"}, {"sha": "1894fadf9ced7b9de90f4addec3428e11c6c01d7", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -3199,10 +3199,10 @@ reorder_var_tracking_notes (void)\n               while (queue)\n                 {\n                   rtx next_queue = PREV_INSN (queue);\n-                  PREV_INSN (NEXT_INSN(insn)) = queue;\n-                  NEXT_INSN(queue) = NEXT_INSN(insn);\n-                  PREV_INSN(queue) = insn;\n-                  NEXT_INSN(insn) = queue;\n+                  SET_PREV_INSN (NEXT_INSN(insn)) = queue;\n+                  SET_NEXT_INSN(queue) = NEXT_INSN(insn);\n+                  SET_PREV_INSN(queue) = insn;\n+                  SET_NEXT_INSN(insn) = queue;\n                   queue = next_queue;\n                 }\n               /* There is no more to do for this bb. break*/\n@@ -3216,26 +3216,26 @@ reorder_var_tracking_notes (void)\n                   while (queue)\n                     {\n                       rtx next_queue = PREV_INSN (queue);\n-                      NEXT_INSN (PREV_INSN(insn)) = queue;\n-                      PREV_INSN (queue) = PREV_INSN(insn);\n-                      PREV_INSN (insn) = queue;\n-                      NEXT_INSN (queue) = insn;\n+                      SET_NEXT_INSN (PREV_INSN(insn)) = queue;\n+                      SET_PREV_INSN (queue) = PREV_INSN(insn);\n+                      SET_PREV_INSN (insn) = queue;\n+                      SET_NEXT_INSN (queue) = insn;\n                       queue = next_queue;\n                     }\n                 }\n             }\n           else if (NOTE_P (insn))\n             {\n                rtx prev = PREV_INSN (insn);\n-               PREV_INSN (next) = prev;\n-               NEXT_INSN (prev) = next;\n+               SET_PREV_INSN (next) = prev;\n+               SET_NEXT_INSN (prev) = next;\n                /* Ignore call_arg notes. They are expected to be just after the\n                   call insn. If the call is start of a long VLIW, labels are\n                   emitted in the middle of a VLIW, which our assembler can not\n                   handle. */\n                if (NOTE_KIND (insn) != NOTE_INSN_CALL_ARG_LOCATION)\n                  {\n-                   PREV_INSN (insn) = queue;\n+                   SET_PREV_INSN (insn) = queue;\n                    queue = insn;\n                  }\n             }"}, {"sha": "ebdcb7bf09f49081cf10a505adc3166e85eefc5f", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -4827,10 +4827,10 @@ reorder_var_tracking_notes (void)\n \t\twhile (queue)\n \t\t  {\n \t\t    rtx next_queue = PREV_INSN (queue);\n-\t\t    PREV_INSN (NEXT_INSN (insn)) = queue;\n-\t\t    NEXT_INSN (queue) = NEXT_INSN (insn);\n-\t\t    NEXT_INSN (insn) = queue;\n-\t\t    PREV_INSN (queue) = insn;\n+\t\t    SET_PREV_INSN (NEXT_INSN (insn)) = queue;\n+\t\t    SET_NEXT_INSN (queue) = NEXT_INSN (insn);\n+\t\t    SET_NEXT_INSN (insn) = queue;\n+\t\t    SET_PREV_INSN (queue) = insn;\n \t\t    queue = next_queue;\n \t\t  }\n \t\tin_bundle = false;\n@@ -4843,10 +4843,10 @@ reorder_var_tracking_notes (void)\n \t    if (in_bundle)\n \t      {\n \t\trtx prev = PREV_INSN (insn);\n-\t\tPREV_INSN (next) = prev;\n-\t\tNEXT_INSN (prev) = next;\n+\t\tSET_PREV_INSN (next) = prev;\n+\t\tSET_NEXT_INSN (prev) = next;\n \n-\t\tPREV_INSN (insn) = queue;\n+\t\tSET_PREV_INSN (insn) = queue;\n \t\tqueue = insn;\n \t      }\n \t  }"}, {"sha": "c27aca949ecb62d499d6571bc92de374c856eb75", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -4283,10 +4283,10 @@ reorder_var_tracking_notes (void)\n \t\twhile (queue)\n \t\t  {\n \t\t    rtx next_queue = PREV_INSN (queue);\n-\t\t    PREV_INSN (NEXT_INSN (insn)) = queue;\n-\t\t    NEXT_INSN (queue) = NEXT_INSN (insn);\n-\t\t    NEXT_INSN (insn) = queue;\n-\t\t    PREV_INSN (queue) = insn;\n+\t\t    SET_PREV_INSN (NEXT_INSN (insn)) = queue;\n+\t\t    SET_NEXT_INSN (queue) = NEXT_INSN (insn);\n+\t\t    SET_NEXT_INSN (insn) = queue;\n+\t\t    SET_PREV_INSN (queue) = insn;\n \t\t    queue = next_queue;\n \t\t  }\n \t\tin_bundle = false;\n@@ -4299,10 +4299,10 @@ reorder_var_tracking_notes (void)\n \t    if (in_bundle)\n \t      {\n \t\trtx prev = PREV_INSN (insn);\n-\t\tPREV_INSN (next) = prev;\n-\t\tNEXT_INSN (prev) = next;\n+\t\tSET_PREV_INSN (next) = prev;\n+\t\tSET_NEXT_INSN (prev) = next;\n \n-\t\tPREV_INSN (insn) = queue;\n+\t\tSET_PREV_INSN (insn) = queue;\n \t\tqueue = insn;\n \t      }\n \t  }"}, {"sha": "0b537d02cd9966b6173a6135a54becd09a32292a", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -3874,29 +3874,29 @@ make_note_raw (enum insn_note subtype)\n static inline void\n link_insn_into_chain (rtx insn, rtx prev, rtx next)\n {\n-  PREV_INSN (insn) = prev;\n-  NEXT_INSN (insn) = next;\n+  SET_PREV_INSN (insn) = prev;\n+  SET_NEXT_INSN (insn) = next;\n   if (prev != NULL)\n     {\n-      NEXT_INSN (prev) = insn;\n+      SET_NEXT_INSN (prev) = insn;\n       if (NONJUMP_INSN_P (prev) && GET_CODE (PATTERN (prev)) == SEQUENCE)\n \t{\n \t  rtx sequence = PATTERN (prev);\n-\t  NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;\n+\t  SET_NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = insn;\n \t}\n     }\n   if (next != NULL)\n     {\n-      PREV_INSN (next) = insn;\n+      SET_PREV_INSN (next) = insn;\n       if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n-\tPREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;\n+\tSET_PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = insn;\n     }\n \n   if (NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == SEQUENCE)\n     {\n       rtx sequence = PATTERN (insn);\n-      PREV_INSN (XVECEXP (sequence, 0, 0)) = prev;\n-      NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n+      SET_PREV_INSN (XVECEXP (sequence, 0, 0)) = prev;\n+      SET_NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n     }\n }\n \n@@ -4068,17 +4068,17 @@ remove_insn (rtx insn)\n \n   if (prev)\n     {\n-      NEXT_INSN (prev) = next;\n+      SET_NEXT_INSN (prev) = next;\n       if (NONJUMP_INSN_P (prev) && GET_CODE (PATTERN (prev)) == SEQUENCE)\n \t{\n \t  rtx sequence = PATTERN (prev);\n-\t  NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n+\t  SET_NEXT_INSN (XVECEXP (sequence, 0, XVECLEN (sequence, 0) - 1)) = next;\n \t}\n     }\n   else if (get_insns () == insn)\n     {\n       if (next)\n-        PREV_INSN (next) = NULL;\n+        SET_PREV_INSN (next) = NULL;\n       set_first_insn (next);\n     }\n   else\n@@ -4097,9 +4097,9 @@ remove_insn (rtx insn)\n \n   if (next)\n     {\n-      PREV_INSN (next) = prev;\n+      SET_PREV_INSN (next) = prev;\n       if (NONJUMP_INSN_P (next) && GET_CODE (PATTERN (next)) == SEQUENCE)\n-\tPREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;\n+\tSET_PREV_INSN (XVECEXP (PATTERN (next), 0, 0)) = prev;\n     }\n   else if (get_last_insn () == insn)\n     set_last_insn (prev);\n@@ -4165,7 +4165,7 @@ delete_insns_since (rtx from)\n   if (from == 0)\n     set_first_insn (0);\n   else\n-    NEXT_INSN (from) = 0;\n+    SET_NEXT_INSN (from) = 0;\n   set_last_insn (from);\n }\n \n@@ -4191,21 +4191,21 @@ reorder_insns_nobb (rtx from, rtx to, rtx after)\n \n   /* Splice this bunch out of where it is now.  */\n   if (PREV_INSN (from))\n-    NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);\n+    SET_NEXT_INSN (PREV_INSN (from)) = NEXT_INSN (to);\n   if (NEXT_INSN (to))\n-    PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);\n+    SET_PREV_INSN (NEXT_INSN (to)) = PREV_INSN (from);\n   if (get_last_insn () == to)\n     set_last_insn (PREV_INSN (from));\n   if (get_insns () == from)\n     set_first_insn (NEXT_INSN (to));\n \n   /* Make the new neighbors point to it and it to them.  */\n   if (NEXT_INSN (after))\n-    PREV_INSN (NEXT_INSN (after)) = to;\n+    SET_PREV_INSN (NEXT_INSN (after)) = to;\n \n-  NEXT_INSN (to) = NEXT_INSN (after);\n-  PREV_INSN (from) = after;\n-  NEXT_INSN (after) = from;\n+  SET_NEXT_INSN (to) = NEXT_INSN (after);\n+  SET_PREV_INSN (from) = after;\n+  SET_NEXT_INSN (after) = from;\n   if (after == get_last_insn ())\n     set_last_insn (to);\n }\n@@ -4410,11 +4410,11 @@ emit_insn_after_1 (rtx first, rtx after, basic_block bb)\n \n   after_after = NEXT_INSN (after);\n \n-  NEXT_INSN (after) = first;\n-  PREV_INSN (first) = after;\n-  NEXT_INSN (last) = after_after;\n+  SET_NEXT_INSN (after) = first;\n+  SET_PREV_INSN (first) = after;\n+  SET_NEXT_INSN (last) = after_after;\n   if (after_after)\n-    PREV_INSN (after_after) = last;\n+    SET_PREV_INSN (after_after) = last;\n \n   if (after == get_last_insn ())\n     set_last_insn (last);"}, {"sha": "6cfc0b94a5aff17fc287000577e6dee6bcf2ec33", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -2856,12 +2856,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t\t   when generating a far jump in a delayed branch\n \t\t   sequence.  */\n \t\tnote = NEXT_INSN (insn);\n-\t\tPREV_INSN (note) = prev;\n-\t\tNEXT_INSN (prev) = note;\n-\t\tNEXT_INSN (PREV_INSN (next)) = insn;\n-\t\tPREV_INSN (insn) = PREV_INSN (next);\n-\t\tNEXT_INSN (insn) = next;\n-\t\tPREV_INSN (next) = insn;\n+\t\tSET_PREV_INSN (note) = prev;\n+\t\tSET_NEXT_INSN (prev) = note;\n+\t\tSET_NEXT_INSN (PREV_INSN (next)) = insn;\n+\t\tSET_PREV_INSN (insn) = PREV_INSN (next);\n+\t\tSET_NEXT_INSN (insn) = next;\n+\t\tSET_PREV_INSN (next) = insn;\n \t      }\n \n \t    /* PEEPHOLE might have changed this.  */\n@@ -4628,8 +4628,8 @@ rest_of_clean_state (void)\n   for (insn = get_insns (); insn; insn = next)\n     {\n       next = NEXT_INSN (insn);\n-      NEXT_INSN (insn) = NULL;\n-      PREV_INSN (insn) = NULL;\n+      SET_NEXT_INSN (insn) = NULL;\n+      SET_PREV_INSN (insn) = NULL;\n \n       if (final_output\n \t  && (!NOTE_P (insn) ||"}, {"sha": "406a3ec11066da796469bf4718a23407823556da", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -866,7 +866,7 @@ can_assign_to_reg_without_clobbers_p (rtx x)\n \t\t\t\t      gen_rtx_REG (word_mode,\n \t\t\t\t\t\t   FIRST_PSEUDO_REGISTER * 2),\n \t\t\t\t      const0_rtx));\n-      NEXT_INSN (test_insn) = PREV_INSN (test_insn) = 0;\n+      SET_NEXT_INSN (test_insn) = SET_PREV_INSN (test_insn) = 0;\n       INSN_LOCATION (test_insn) = UNKNOWN_LOCATION;\n     }\n "}, {"sha": "32b1adf5bd986bb0819fd4bce93c2036df034bdf", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -4024,8 +4024,8 @@ concat_note_lists (rtx from_end, rtx *to_endp)\n   while (PREV_INSN (from_start) != NULL)\n     from_start = PREV_INSN (from_start);\n \n-  PREV_INSN (from_start) = *to_endp;\n-  NEXT_INSN (*to_endp) = from_start;\n+  SET_PREV_INSN (from_start) = *to_endp;\n+  SET_NEXT_INSN (*to_endp) = from_start;\n   *to_endp = from_end;\n }\n \n@@ -4066,10 +4066,10 @@ remove_notes (rtx head, rtx tail)\n \t  remove_insn (insn);\n \n \t  /* Add the note to list that ends at NOTE_LIST.  */\n-\t  PREV_INSN (insn) = note_list;\n-\t  NEXT_INSN (insn) = NULL_RTX;\n+\t  SET_PREV_INSN (insn) = note_list;\n+\t  SET_NEXT_INSN (insn) = NULL_RTX;\n \t  if (note_list)\n-\t    NEXT_INSN (note_list) = insn;\n+\t    SET_NEXT_INSN (note_list) = insn;\n \t  note_list = insn;\n \t  break;\n \t}\n@@ -4862,10 +4862,10 @@ restore_other_notes (rtx head, basic_block head_bb)\n       /* In the above cycle we've missed this note.  */\n       set_block_for_insn (note_head, head_bb);\n \n-      PREV_INSN (note_head) = PREV_INSN (head);\n-      NEXT_INSN (PREV_INSN (head)) = note_head;\n-      PREV_INSN (head) = note_list;\n-      NEXT_INSN (note_list) = head;\n+      SET_PREV_INSN (note_head) = PREV_INSN (head);\n+      SET_NEXT_INSN (PREV_INSN (head)) = note_head;\n+      SET_PREV_INSN (head) = note_list;\n+      SET_NEXT_INSN (note_list) = head;\n \n       if (BLOCK_FOR_INSN (head) != head_bb)\n \tSET_BB_END (head_bb) = note_list;\n@@ -5291,14 +5291,14 @@ move_insn (rtx insn, rtx last, rtx nt)\n       else\n \tnote = insn;\n \n-      NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (note);\n-      PREV_INSN (NEXT_INSN (note)) = PREV_INSN (insn);\n+      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (note);\n+      SET_PREV_INSN (NEXT_INSN (note)) = PREV_INSN (insn);\n \n-      NEXT_INSN (note) = NEXT_INSN (last);\n-      PREV_INSN (NEXT_INSN (last)) = note;\n+      SET_NEXT_INSN (note) = NEXT_INSN (last);\n+      SET_PREV_INSN (NEXT_INSN (last)) = note;\n \n-      NEXT_INSN (last) = insn;\n-      PREV_INSN (insn) = last;\n+      SET_NEXT_INSN (last) = insn;\n+      SET_PREV_INSN (insn) = last;\n \n       bb = BLOCK_FOR_INSN (last);\n \n@@ -8227,8 +8227,8 @@ unlink_bb_notes (basic_block first, basic_block last)\n       next = NEXT_INSN (note);\n       gcc_assert (prev && next);\n \n-      NEXT_INSN (prev) = next;\n-      PREV_INSN (next) = prev;\n+      SET_NEXT_INSN (prev) = next;\n+      SET_PREV_INSN (next) = prev;\n \n       bb_header[last->index] = label;\n \n@@ -8269,9 +8269,9 @@ restore_bb_notes (basic_block first)\n \n       bb_header[first->index] = 0;\n \n-      NEXT_INSN (prev) = label;\n-      NEXT_INSN (note) = next;\n-      PREV_INSN (next) = note;\n+      SET_NEXT_INSN (prev) = label;\n+      SET_NEXT_INSN (note) = next;\n+      SET_PREV_INSN (next) = note;\n \n       first = first->next_bb;\n     }"}, {"sha": "87091a36e05cda1f441a1fdce67bb6e61721184c", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -1414,10 +1414,10 @@ delete_for_peephole (rtx from, rtx to)\n \t  /* We don't do this all at once, because we\n \t     must preserve all NOTEs.  */\n \t  if (prev)\n-\t    NEXT_INSN (prev) = next;\n+\t    SET_NEXT_INSN (prev) = next;\n \n \t  if (next)\n-\t    PREV_INSN (next) = prev;\n+\t    SET_PREV_INSN (next) = prev;\n \t}\n \n       if (insn == to)"}, {"sha": "60228d3bcd166fc0819237510d7ed1cbe3c037a3", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -3959,12 +3959,12 @@ emit_libcall_block_1 (rtx insns, rtx target, rtx result, rtx equiv,\n \t  if (! data.must_stay)\n \t    {\n \t      if (PREV_INSN (insn))\n-\t\tNEXT_INSN (PREV_INSN (insn)) = next;\n+\t\tSET_NEXT_INSN (PREV_INSN (insn)) = next;\n \t      else\n \t\tinsns = next;\n \n \t      if (next)\n-\t\tPREV_INSN (next) = PREV_INSN (insn);\n+\t\tSET_PREV_INSN (next) = PREV_INSN (insn);\n \n \t      add_insn (insn);\n \t    }"}, {"sha": "18908457ecd6b8468bf56bc4f2881e609dc5b667", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -516,7 +516,7 @@ emit_delay_sequence (rtx insn, rtx list, int length)\n      the SEQUENCE.   Remember where we want to emit SEQUENCE in AFTER.  */\n   rtx after = PREV_INSN (insn);\n   remove_insn (insn);\n-  NEXT_INSN (insn) = PREV_INSN (insn) = NULL;\n+  SET_NEXT_INSN (insn) = SET_PREV_INSN (insn) = NULL;\n \n   /* Build our SEQUENCE and rebuild the insn chain.  */\n   int i = 1;\n@@ -532,7 +532,7 @@ emit_delay_sequence (rtx insn, rtx list, int length)\n \n       /* Unlink insn from its original place, and re-emit it into\n \t the sequence.  */\n-      NEXT_INSN (tem) = PREV_INSN (tem) = NULL;\n+      SET_NEXT_INSN (tem) = SET_PREV_INSN (tem) = NULL;\n       XVECEXP (seq, 0, i) = emit_insn (tem);\n \n       /* SPARC assembler, for instance, emit warning when debug info is output\n@@ -2015,9 +2015,9 @@ fill_simple_delay_slots (int non_jumps_p)\n \t    rtx next = NEXT_INSN (trial);\n \t    rtx prev = PREV_INSN (trial);\n \t    if (prev)\n-\t      NEXT_INSN (prev) = next;\n+\t      SET_NEXT_INSN (prev) = next;\n \t    if (next)\n-\t      PREV_INSN (next) = prev;\n+\t      SET_PREV_INSN (next) = prev;\n \t  }\n \t}\n "}, {"sha": "93bce91f4fc25629f7eb1f08eab4ff65fead90df", "filename": "gcc/rtl.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -972,8 +972,15 @@ extern void rtl_check_failed_flag (const char *, const_rtx, const char *,\n   (RTL_INSN_CHAIN_FLAG_CHECK (\"INSN_UID\", (INSN))->u2.insn_uid)\n \n /* Chain insns together in sequence.  */\n-#define PREV_INSN(INSN)\tXEXP (INSN, 0)\n-#define NEXT_INSN(INSN)\tXEXP (INSN, 1)\n+/* For now these are split in two: an rvalue form:\n+     PREV_INSN/NEXT_INSN\n+   and an lvalue form:\n+     SET_NEXT_INSN/SET_PREV_INSN.  */\n+\n+#define PREV_INSN(INSN)      XEXP ((const_rtx)(INSN), 0)\n+#define SET_PREV_INSN(INSN)  XEXP (INSN, 0)\n+#define NEXT_INSN(INSN)      XEXP ((const_rtx)(INSN), 1)\n+#define SET_NEXT_INSN(INSN)  XEXP (INSN, 1)\n \n #define BLOCK_FOR_INSN(INSN) XBBDEF (INSN, 2)\n "}, {"sha": "062452067289c1575b13f7240460ff7a2a29b474", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -1423,11 +1423,11 @@ sel_move_insn (expr_t expr, int seqno, insn_t after)\n \n   /* Assert that in move_op we disconnected this insn properly.  */\n   gcc_assert (EXPR_VINSN (INSN_EXPR (insn)) != NULL);\n-  PREV_INSN (insn) = after;\n-  NEXT_INSN (insn) = next;\n+  SET_PREV_INSN (insn) = after;\n+  SET_NEXT_INSN (insn) = next;\n \n-  NEXT_INSN (after) = insn;\n-  PREV_INSN (next) = insn;\n+  SET_NEXT_INSN (after) = insn;\n+  SET_PREV_INSN (next) = insn;\n \n   /* Update links from insn to bb and vice versa.  */\n   df_insn_change_bb (insn, bb);\n@@ -3942,8 +3942,8 @@ sel_remove_insn (insn_t insn, bool only_disconnect, bool full_tidying)\n   /* It is necessary to NULL these fields in case we are going to re-insert\n      INSN into the insns stream, as will usually happen in the ONLY_DISCONNECT\n      case, but also for NOPs that we will return to the nop pool.  */\n-  PREV_INSN (insn) = NULL_RTX;\n-  NEXT_INSN (insn) = NULL_RTX;\n+  SET_PREV_INSN (insn) = NULL_RTX;\n+  SET_NEXT_INSN (insn) = NULL_RTX;\n   set_block_for_insn (insn, NULL);\n \n   return tidy_control_flow (bb, full_tidying);\n@@ -4985,8 +4985,8 @@ get_bb_note_from_pool (void)\n     {\n       rtx note = bb_note_pool.pop ();\n \n-      PREV_INSN (note) = NULL_RTX;\n-      NEXT_INSN (note) = NULL_RTX;\n+      SET_PREV_INSN (note) = NULL_RTX;\n+      SET_NEXT_INSN (note) = NULL_RTX;\n \n       return note;\n     }"}, {"sha": "7b3c43303b789c93d899d183cd8495d55092bc10", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -5193,14 +5193,14 @@ move_nop_to_previous_block (insn_t nop, basic_block prev_bb)\n   gcc_assert (prev_insn != NULL_RTX\n               && PREV_INSN (note) == prev_insn);\n \n-  NEXT_INSN (prev_insn) = nop;\n-  PREV_INSN (nop) = prev_insn;\n+  SET_NEXT_INSN (prev_insn) = nop;\n+  SET_PREV_INSN (nop) = prev_insn;\n \n-  PREV_INSN (note) = nop;\n-  NEXT_INSN (note) = next_insn;\n+  SET_PREV_INSN (note) = nop;\n+  SET_NEXT_INSN (note) = next_insn;\n \n-  NEXT_INSN (nop) = note;\n-  PREV_INSN (next_insn) = note;\n+  SET_NEXT_INSN (nop) = note;\n+  SET_PREV_INSN (next_insn) = note;\n \n   SET_BB_END (prev_bb) = nop;\n   BLOCK_FOR_INSN (nop) = prev_bb;"}, {"sha": "042eee294d0b225d7e31cf0fba4d1f773e158dd3", "filename": "rtx-classes-status.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/rtx-classes-status.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f82e5c9fb49a2618233fcaca6db40fe856e66c1/rtx-classes-status.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/rtx-classes-status.txt?ref=0f82e5c9fb49a2618233fcaca6db40fe856e66c1", "patch": "@@ -15,3 +15,4 @@ Phase 6: use extra rtx_def subclasses:             TODO\n TODO: \"Scaffolding\" to be removed\n =================================\n * SET_BB_HEAD, SET_BB_END, SET_BB_HEADER, SET_BB_FOOTER\n+* SET_NEXT_INSN, SET_PREV_INSN"}]}