{"sha": "19c1ef85c3f9be7c78682135ed1f59cd093b4684", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTljMWVmODVjM2Y5YmU3Yzc4NjgyMTM1ZWQxZjU5Y2QwOTNiNDY4NA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-08T10:07:25Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-12-08T10:07:25Z"}, "message": "contrib: modernize filter-clang-warnings.py\n\ncontrib/ChangeLog:\n\n\t* filter-clang-warnings.py: Modernize and filter 2 more\n\tpatterns.", "tree": {"sha": "bd5a43a7d949a28a85f0f15badc5b6eb643dc1d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd5a43a7d949a28a85f0f15badc5b6eb643dc1d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19c1ef85c3f9be7c78682135ed1f59cd093b4684", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c1ef85c3f9be7c78682135ed1f59cd093b4684", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19c1ef85c3f9be7c78682135ed1f59cd093b4684", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19c1ef85c3f9be7c78682135ed1f59cd093b4684/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31007091b10944c358e5038a6271d7e2744cde37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31007091b10944c358e5038a6271d7e2744cde37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31007091b10944c358e5038a6271d7e2744cde37"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "2b7b42fd099ea041c3e85becde79629d466396e2", "filename": "contrib/filter-clang-warnings.py", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19c1ef85c3f9be7c78682135ed1f59cd093b4684/contrib%2Ffilter-clang-warnings.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19c1ef85c3f9be7c78682135ed1f59cd093b4684/contrib%2Ffilter-clang-warnings.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Ffilter-clang-warnings.py?ref=19c1ef85c3f9be7c78682135ed1f59cd093b4684", "patch": "@@ -21,17 +21,24 @@\n #\n #\n \n-import sys\n import argparse\n \n+\n def skip_warning(filename, message):\n     ignores = {\n-            '': ['-Warray-bounds', '-Wmismatched-tags', 'gcc_gfc: -Wignored-attributes', '-Wchar-subscripts',\n-                'string literal (potentially insecure): -Wformat-security', '-Wdeprecated-register',\n-                '-Wvarargs', 'keyword is hidden by macro definition', \"but the argument has type 'char *': -Wformat-pedantic\",\n-                '-Wnested-anon-types', 'qualifier in explicit instantiation of', 'attribute argument not supported: asm_fprintf',\n-                'when in C++ mode, this behavior is deprecated', '-Wignored-attributes', '-Wgnu-zero-variadic-macro-arguments',\n-                '-Wformat-security'],\n+            '': ['-Warray-bounds', '-Wmismatched-tags',\n+                 'gcc_gfc: -Wignored-attributes', '-Wchar-subscripts',\n+                 'string literal (potentially insecure): -Wformat-security',\n+                 '-Wdeprecated-register',\n+                 '-Wvarargs', 'keyword is hidden by macro definition',\n+                 \"but the argument has type 'char *': -Wformat-pedantic\",\n+                 '-Wnested-anon-types',\n+                 'qualifier in explicit instantiation of',\n+                 'attribute argument not supported: asm_fprintf',\n+                 'when in C++ mode, this behavior is deprecated',\n+                 '-Wignored-attributes', '-Wgnu-zero-variadic-macro-arguments',\n+                 '-Wformat-security', '-Wundefined-internal',\n+                 '-Wunknown-warning-option'],\n             'insn-modes.c': ['-Wshift-count-overflow'],\n             'insn-emit.c': ['-Wtautological-compare'],\n             'insn-attrtab.c': ['-Wparentheses-equality'],\n@@ -47,26 +54,26 @@ def skip_warning(filename, message):\n         for i in ignores:\n             if name in filename and i in message:\n                 return True\n-\n     return False\n \n+\n parser = argparse.ArgumentParser()\n-parser.add_argument('log', help = 'Log file with clang warnings')\n+parser.add_argument('log', help='Log file with clang warnings')\n args = parser.parse_args()\n \n-lines = [l.strip() for l in open(args.log)]\n+lines = [line.strip() for line in open(args.log)]\n total = 0\n messages = []\n-for l in lines:\n+for line in lines:\n     token = ': warning: '\n-    i = l.find(token)\n+    i = line.find(token)\n     if i != -1:\n-        location = l[:i]\n-        message = l[i + len(token):]\n+        location = line[:i]\n+        message = line[i + len(token):]\n         if not skip_warning(location, message):\n             total += 1\n-            messages.append(l)\n+            messages.append(line)\n \n-for l in sorted(messages):\n-    print(l)\n+for line in sorted(messages):\n+    print(line)\n print('\\nTotal warnings: %d' % total)"}]}