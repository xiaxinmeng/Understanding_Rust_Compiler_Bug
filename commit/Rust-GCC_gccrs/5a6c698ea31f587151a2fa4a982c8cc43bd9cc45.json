{"sha": "5a6c698ea31f587151a2fa4a982c8cc43bd9cc45", "node_id": "C_kwDOANBUbNoAKDVhNmM2OThlYTMxZjU4NzE1MWEyZmE0YTk4MmM4Y2M0M2JkOWNjNDU", "commit": {"author": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2022-11-17T20:40:53Z"}, "committer": {"name": "Bernhard Reutner-Fischer", "email": "aldot@gcc.gnu.org", "date": "2022-11-19T11:17:48Z"}, "message": "libcpp: Add missing config for --enable-valgrind-annotations [PR107691]\n\nr7-912 copied (parts of) the valgrind annotation checks from gcc\nto libcpp. The above copies the missing pieces to libcpp to diagnose\nwhen libcpp is configured with --enable-valgrind-annotations but\nvalgrind is not installed.\n\nlibcpp/ChangeLog:\n\n\tPR preprocessor/107691\n\t* configure.ac: Add valgrind header checks.\n\t* configure: Regenerate.", "tree": {"sha": "c35f99fbfd9f230b031665aa823fa0470c9e3aff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c35f99fbfd9f230b031665aa823fa0470c9e3aff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45/comments", "author": null, "committer": null, "parents": [{"sha": "0a62889c7a155f8ed971860d68870dc9c46bb004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a62889c7a155f8ed971860d68870dc9c46bb004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a62889c7a155f8ed971860d68870dc9c46bb004"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "e9937cde3303f9918ffaf1521406879d2f5247d1", "filename": "libcpp/configure", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=5a6c698ea31f587151a2fa4a982c8cc43bd9cc45", "patch": "@@ -7835,6 +7835,62 @@ case x$enable_languages in\n esac\n \n \n+ac_fn_c_check_header_mongrel \"$LINENO\" \"valgrind.h\" \"ac_cv_header_valgrind_h\" \"$ac_includes_default\"\n+if test \"x$ac_cv_header_valgrind_h\" = xyes; then :\n+  have_valgrind_h=yes\n+else\n+  have_valgrind_h=no\n+fi\n+\n+\n+\n+# It is certainly possible that there's valgrind but no valgrind.h.\n+# GCC relies on making annotations so we must have both.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for VALGRIND_DISCARD in <valgrind/memcheck.h>\" >&5\n+$as_echo_n \"checking for VALGRIND_DISCARD in <valgrind/memcheck.h>... \" >&6; }\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <valgrind/memcheck.h>\n+#ifndef VALGRIND_DISCARD\n+#error VALGRIND_DISCARD not defined\n+#endif\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+  gcc_cv_header_valgrind_memcheck_h=yes\n+else\n+  gcc_cv_header_valgrind_memcheck_h=no\n+fi\n+rm -f conftest.err conftest.i conftest.$ac_ext\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_valgrind_memcheck_h\" >&5\n+$as_echo \"$gcc_cv_header_valgrind_memcheck_h\" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for VALGRIND_DISCARD in <memcheck.h>\" >&5\n+$as_echo_n \"checking for VALGRIND_DISCARD in <memcheck.h>... \" >&6; }\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <memcheck.h>\n+#ifndef VALGRIND_DISCARD\n+#error VALGRIND_DISCARD not defined\n+#endif\n+_ACEOF\n+if ac_fn_c_try_cpp \"$LINENO\"; then :\n+  gcc_cv_header_memcheck_h=yes\n+else\n+  gcc_cv_header_memcheck_h=no\n+fi\n+rm -f conftest.err conftest.i conftest.$ac_ext\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_header_memcheck_h\" >&5\n+$as_echo \"$gcc_cv_header_memcheck_h\" >&6; }\n+if test $gcc_cv_header_valgrind_memcheck_h = yes; then\n+\n+$as_echo \"#define HAVE_VALGRIND_MEMCHECK_H 1\" >>confdefs.h\n+\n+fi\n+if test $gcc_cv_header_memcheck_h = yes; then\n+\n+$as_echo \"#define HAVE_MEMCHECK_H 1\" >>confdefs.h\n+\n+fi\n+\n # Check whether --enable-valgrind-annotations was given.\n if test \"${enable_valgrind_annotations+set}\" = set; then :\n   enableval=$enable_valgrind_annotations;\n@@ -7847,6 +7903,7 @@ if test x$enable_valgrind_annotations != xno \\\n   if (test $have_valgrind_h = no \\\n       && test $gcc_cv_header_memcheck_h = no \\\n       && test $gcc_cv_header_valgrind_memcheck_h = no); then\n+    as_fn_error $? \"*** valgrind annotations requested, but\" \"$LINENO\" 5\n     as_fn_error $? \"*** Can't find valgrind/memcheck.h, memcheck.h or valgrind.h\" \"$LINENO\" 5\n   fi\n "}, {"sha": "89ac99b04bdb21f851174acb98d3b75d5e838350", "filename": "libcpp/configure.ac", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6c698ea31f587151a2fa4a982c8cc43bd9cc45/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=5a6c698ea31f587151a2fa4a982c8cc43bd9cc45", "patch": "@@ -226,6 +226,40 @@ case x$enable_languages in\n esac\n AC_SUBST(CET_HOST_FLAGS)\n \n+dnl # This check AC_REQUIREs various stuff, so it *must not* be inside\n+dnl # an if statement.  This was the source of very frustrating bugs\n+dnl # in converting to autoconf 2.5x!\n+AC_CHECK_HEADER(valgrind.h, have_valgrind_h=yes, have_valgrind_h=no)\n+\n+# It is certainly possible that there's valgrind but no valgrind.h.\n+# GCC relies on making annotations so we must have both.\n+AC_MSG_CHECKING(for VALGRIND_DISCARD in <valgrind/memcheck.h>)\n+AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n+  [[#include <valgrind/memcheck.h>\n+#ifndef VALGRIND_DISCARD\n+#error VALGRIND_DISCARD not defined\n+#endif]])],\n+  [gcc_cv_header_valgrind_memcheck_h=yes],\n+  [gcc_cv_header_valgrind_memcheck_h=no])\n+AC_MSG_RESULT($gcc_cv_header_valgrind_memcheck_h)\n+AC_MSG_CHECKING(for VALGRIND_DISCARD in <memcheck.h>)\n+AC_PREPROC_IFELSE([AC_LANG_SOURCE(\n+  [[#include <memcheck.h>\n+#ifndef VALGRIND_DISCARD\n+#error VALGRIND_DISCARD not defined\n+#endif]])],\n+  [gcc_cv_header_memcheck_h=yes],\n+  [gcc_cv_header_memcheck_h=no])\n+AC_MSG_RESULT($gcc_cv_header_memcheck_h)\n+if test $gcc_cv_header_valgrind_memcheck_h = yes; then\n+  AC_DEFINE(HAVE_VALGRIND_MEMCHECK_H, 1,\n+\t[Define if valgrind's valgrind/memcheck.h header is installed.])\n+fi\n+if test $gcc_cv_header_memcheck_h = yes; then\n+  AC_DEFINE(HAVE_MEMCHECK_H, 1,\n+\t[Define if valgrind's memcheck.h header is installed.])\n+fi\n+\n AC_ARG_ENABLE(valgrind-annotations,\n [AS_HELP_STRING([--enable-valgrind-annotations],\n \t\t[enable valgrind runtime interaction])], [],\n@@ -235,6 +269,7 @@ if test x$enable_valgrind_annotations != xno \\\n   if (test $have_valgrind_h = no \\\n       && test $gcc_cv_header_memcheck_h = no \\\n       && test $gcc_cv_header_valgrind_memcheck_h = no); then\n+    AC_MSG_ERROR([*** valgrind annotations requested, but])\n     AC_MSG_ERROR([*** Can't find valgrind/memcheck.h, memcheck.h or valgrind.h])\n   fi\n   AC_DEFINE(ENABLE_VALGRIND_ANNOTATIONS, 1,"}]}