{"sha": "8d21ff9f66a20e551d52b0759c926660dccb49cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyMWZmOWY2NmEyMGU1NTFkNTJiMDc1OWM5MjY2NjBkY2NiNDljZA==", "commit": {"author": {"name": "Robin Dapp", "email": "rdapp@linux.vnet.ibm.com", "date": "2017-05-30T10:53:25Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-05-30T10:53:25Z"}, "message": "Vector peeling cost model 1/6\n\ngcc/ChangeLog:\n\n2017-05-30  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n\n\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Create\n\tDR_HAS_NEGATIVE_STEP.\n\t(vect_update_misalignment_for_peel): Define DR_MISALIGNMENT.\n\t(vect_enhance_data_refs_alignment): Use.\n\t(vect_duplicate_ssa_name_ptr_info): Use.\n\t* tree-vectorizer.h (dr_misalignment): Use.\n\t(known_alignment_for_access_p): Use.\n\nFrom-SVN: r248675", "tree": {"sha": "225f2197a7c58add5f9169f0d8be919797c48a9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225f2197a7c58add5f9169f0d8be919797c48a9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d21ff9f66a20e551d52b0759c926660dccb49cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d21ff9f66a20e551d52b0759c926660dccb49cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d21ff9f66a20e551d52b0759c926660dccb49cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d21ff9f66a20e551d52b0759c926660dccb49cd/comments", "author": {"login": "rdapp1", "id": 22046046, "node_id": "MDQ6VXNlcjIyMDQ2MDQ2", "avatar_url": "https://avatars.githubusercontent.com/u/22046046?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rdapp1", "html_url": "https://github.com/rdapp1", "followers_url": "https://api.github.com/users/rdapp1/followers", "following_url": "https://api.github.com/users/rdapp1/following{/other_user}", "gists_url": "https://api.github.com/users/rdapp1/gists{/gist_id}", "starred_url": "https://api.github.com/users/rdapp1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rdapp1/subscriptions", "organizations_url": "https://api.github.com/users/rdapp1/orgs", "repos_url": "https://api.github.com/users/rdapp1/repos", "events_url": "https://api.github.com/users/rdapp1/events{/privacy}", "received_events_url": "https://api.github.com/users/rdapp1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3125625df0b0895b0acbc2949d2a03dc4971145", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3125625df0b0895b0acbc2949d2a03dc4971145", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3125625df0b0895b0acbc2949d2a03dc4971145"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "585129bdd5e974edebbf554344ca0bc147c71988", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d21ff9f66a20e551d52b0759c926660dccb49cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d21ff9f66a20e551d52b0759c926660dccb49cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d21ff9f66a20e551d52b0759c926660dccb49cd", "patch": "@@ -1,3 +1,13 @@\n+2017-05-30  Robin Dapp  <rdapp@linux.vnet.ibm.com>\n+\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment): Create\n+\tDR_HAS_NEGATIVE_STEP.\n+\t(vect_update_misalignment_for_peel): Define DR_MISALIGNMENT.\n+\t(vect_enhance_data_refs_alignment): Use.\n+\t(vect_duplicate_ssa_name_ptr_info): Use.\n+\t* tree-vectorizer.h (dr_misalignment): Use.\n+\t(known_alignment_for_access_p): Use.\n+\n 2017-05-30  Jozef Lawrynowicz  <jozef.l@somniumtech.com>\n \n \tPR target/78838"}, {"sha": "c683fb1ecba6a2c7721db758d902f7da2b7581d5", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d21ff9f66a20e551d52b0759c926660dccb49cd/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d21ff9f66a20e551d52b0759c926660dccb49cd/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=8d21ff9f66a20e551d52b0759c926660dccb49cd", "patch": "@@ -717,7 +717,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n     loop = LOOP_VINFO_LOOP (loop_vinfo);\n \n   /* Initialize misalignment to unknown.  */\n-  SET_DR_MISALIGNMENT (dr, -1);\n+  SET_DR_MISALIGNMENT (dr, DR_MISALIGNMENT_UNKNOWN);\n \n   if (tree_fits_shwi_p (DR_STEP (dr)))\n     misalign = DR_INIT (dr);\n@@ -957,8 +957,9 @@ vect_update_misalignment_for_peel (struct data_reference *dr,\n     }\n \n   if (dump_enabled_p ())\n-    dump_printf_loc (MSG_NOTE, vect_location, \"Setting misalignment to -1.\\n\");\n-  SET_DR_MISALIGNMENT (dr, -1);\n+    dump_printf_loc (MSG_NOTE, vect_location, \"Setting misalignment \" \\\n+\t\t     \"to unknown (-1).\\n\");\n+  SET_DR_MISALIGNMENT (dr, DR_MISALIGNMENT_UNKNOWN);\n }\n \n \n@@ -1526,50 +1527,47 @@ vect_enhance_data_refs_alignment (loop_vec_info loop_vinfo)\n         {\n           if (known_alignment_for_access_p (dr))\n             {\n-              unsigned int npeel_tmp;\n+              unsigned int npeel_tmp = 0;\n \t      bool negative = tree_int_cst_compare (DR_STEP (dr),\n \t\t\t\t\t\t    size_zero_node) < 0;\n \n-              /* Save info about DR in the hash table.  */\n               vectype = STMT_VINFO_VECTYPE (stmt_info);\n               nelements = TYPE_VECTOR_SUBPARTS (vectype);\n               mis = DR_MISALIGNMENT (dr) / GET_MODE_SIZE (TYPE_MODE (\n                                                 TREE_TYPE (DR_REF (dr))));\n-              npeel_tmp = (negative\n-\t\t\t   ? (mis - nelements) : (nelements - mis))\n-\t\t  & (nelements - 1);\n+\t      if (DR_MISALIGNMENT (dr) != 0)\n+\t\tnpeel_tmp = (negative ? (mis - nelements)\n+\t\t\t     : (nelements - mis)) & (nelements - 1);\n \n               /* For multiple types, it is possible that the bigger type access\n                  will have more than one peeling option.  E.g., a loop with two\n                  types: one of size (vector size / 4), and the other one of\n                  size (vector size / 8).  Vectorization factor will 8.  If both\n-                 access are misaligned by 3, the first one needs one scalar\n+                 accesses are misaligned by 3, the first one needs one scalar\n                  iteration to be aligned, and the second one needs 5.  But the\n \t\t first one will be aligned also by peeling 5 scalar\n                  iterations, and in that case both accesses will be aligned.\n                  Hence, except for the immediate peeling amount, we also want\n                  to try to add full vector size, while we don't exceed\n                  vectorization factor.\n-                 We do this automatically for cost model, since we calculate cost\n-                 for every peeling option.  */\n+                 We do this automatically for cost model, since we calculate\n+\t\t cost for every peeling option.  */\n               if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n \t\t{\n \t\t  if (STMT_SLP_TYPE (stmt_info))\n \t\t    possible_npeel_number\n \t\t      = (vf * GROUP_SIZE (stmt_info)) / nelements;\n \t\t  else\n \t\t    possible_npeel_number = vf / nelements;\n-\t\t}\n \n-              /* Handle the aligned case. We may decide to align some other\n-                 access, making DR unaligned.  */\n-              if (DR_MISALIGNMENT (dr) == 0)\n-                {\n-                  npeel_tmp = 0;\n-                  if (unlimited_cost_model (LOOP_VINFO_LOOP (loop_vinfo)))\n-                    possible_npeel_number++;\n-                }\n+\t\t  /* NPEEL_TMP is 0 when there is no misalignment, increment\n+\t\t     the peeling amount by one in order to ...  */\n+\t\t  if (DR_MISALIGNMENT (dr) == 0)\n+\t\t    possible_npeel_number++;\n+\t\t}\n \n+\t      /* Save info about DR in the hash table.  Also include peeling\n+\t         amounts according to the explanation above.  */\n               for (j = 0; j < possible_npeel_number; j++)\n                 {\n                   vect_peeling_hash_insert (&peeling_htab, loop_vinfo,\n@@ -3884,7 +3882,7 @@ vect_duplicate_ssa_name_ptr_info (tree name, data_reference *dr,\n   duplicate_ssa_name_ptr_info (name, DR_PTR_INFO (dr));\n   unsigned int align = TYPE_ALIGN_UNIT (STMT_VINFO_VECTYPE (stmt_info));\n   int misalign = DR_MISALIGNMENT (dr);\n-  if (misalign == -1)\n+  if (misalign == DR_MISALIGNMENT_UNKNOWN)\n     mark_ptr_info_alignment_unknown (SSA_NAME_PTR_INFO (name));\n   else\n     set_ptr_info_alignment (SSA_NAME_PTR_INFO (name), align, misalign);"}, {"sha": "dfbe59eb10d68b9c3d6b75bf2a33bc040c3105a3", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d21ff9f66a20e551d52b0759c926660dccb49cd/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d21ff9f66a20e551d52b0759c926660dccb49cd/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=8d21ff9f66a20e551d52b0759c926660dccb49cd", "patch": "@@ -984,6 +984,7 @@ dr_misalignment (struct data_reference *dr)\n    taking into account peeling/versioning if applied.  */\n #define DR_MISALIGNMENT(DR) dr_misalignment (DR)\n #define SET_DR_MISALIGNMENT(DR, VAL) set_dr_misalignment (DR, VAL)\n+#define DR_MISALIGNMENT_UNKNOWN (-1)\n \n /* Return TRUE if the data access is aligned, and FALSE otherwise.  */\n \n@@ -999,7 +1000,7 @@ aligned_access_p (struct data_reference *data_ref_info)\n static inline bool\n known_alignment_for_access_p (struct data_reference *data_ref_info)\n {\n-  return (DR_MISALIGNMENT (data_ref_info) != -1);\n+  return (DR_MISALIGNMENT (data_ref_info) != DR_MISALIGNMENT_UNKNOWN);\n }\n \n "}]}