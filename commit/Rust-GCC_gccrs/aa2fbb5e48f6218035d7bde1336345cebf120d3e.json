{"sha": "aa2fbb5e48f6218035d7bde1336345cebf120d3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyZmJiNWU0OGY2MjE4MDM1ZDdiZGUxMzM2MzQ1Y2ViZjEyMGQzZQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-12-21T18:32:15Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2020-12-23T13:04:50Z"}, "message": "Bring conditionals back since the HIR change.", "tree": {"sha": "e69dd540813c69f43fc05a76d33395a896791292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e69dd540813c69f43fc05a76d33395a896791292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2fbb5e48f6218035d7bde1336345cebf120d3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2fbb5e48f6218035d7bde1336345cebf120d3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2fbb5e48f6218035d7bde1336345cebf120d3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2fbb5e48f6218035d7bde1336345cebf120d3e/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b021811ab700156e1e3d56200d585b3180264f4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b021811ab700156e1e3d56200d585b3180264f4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b021811ab700156e1e3d56200d585b3180264f4f"}], "stats": {"total": 774, "additions": 733, "deletions": 41}, "files": [{"sha": "8e60557bbdfbb7499d65910af05f9551f01162e1", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -550,6 +550,8 @@ class ComparisonExpr : public OperatorExpr\n     return right_expr;\n   }\n \n+  ExprType get_kind () { return expr_type; }\n+\n   /* TODO: implement via a function call to std::cmp::PartialEq::eq(&op1, &op2)\n    * maybe? */\n protected:\n@@ -628,6 +630,8 @@ class LazyBooleanExpr : public OperatorExpr\n     return right_expr;\n   }\n \n+  ExprType get_kind () { return expr_type; }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "b17fb05cabde6e6881be91de73e5c9a0b46a785f", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -0,0 +1,112 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_COMPILE_BLOCK\n+#define RUST_COMPILE_BLOCK\n+\n+#include \"rust-compile-base.h\"\n+#include \"rust-compile-tyty.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+class CompileBlock : public HIRCompileBase\n+{\n+public:\n+  static Bblock *compile (HIR::BlockExpr *expr, Context *ctx)\n+  {\n+    CompileBlock compiler (ctx);\n+    expr->accept_vis (compiler);\n+    return compiler.translated;\n+  }\n+\n+  ~CompileBlock () {}\n+\n+  void visit (HIR::BlockExpr &expr);\n+\n+private:\n+  CompileBlock (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n+\n+  Bblock *translated;\n+};\n+\n+class CompileConditionalBlocks : public HIRCompileBase\n+{\n+public:\n+  static Bstatement *compile (HIR::IfExpr *expr, Context *ctx)\n+  {\n+    CompileConditionalBlocks resolver (ctx);\n+    expr->accept_vis (resolver);\n+    return resolver.translated;\n+  }\n+\n+  ~CompileConditionalBlocks () {}\n+\n+  void visit (HIR::IfExpr &expr);\n+\n+  void visit (HIR::IfExprConseqElse &expr);\n+\n+  void visit (HIR::IfExprConseqIf &expr);\n+\n+private:\n+  CompileConditionalBlocks (Context *ctx)\n+    : HIRCompileBase (ctx), translated (nullptr)\n+  {}\n+\n+  Bstatement *translated;\n+};\n+\n+class CompileExprWithBlock : public HIRCompileBase\n+{\n+public:\n+  static Bstatement *compile (HIR::ExprWithBlock *expr, Context *ctx)\n+  {\n+    CompileExprWithBlock resolver (ctx);\n+    expr->accept_vis (resolver);\n+    return resolver.translated;\n+  }\n+\n+  ~CompileExprWithBlock () {}\n+\n+  void visit (HIR::IfExpr &expr)\n+  {\n+    translated = CompileConditionalBlocks::compile (&expr, ctx);\n+  }\n+\n+  void visit (HIR::IfExprConseqElse &expr)\n+  {\n+    translated = CompileConditionalBlocks::compile (&expr, ctx);\n+  }\n+\n+  void visit (HIR::IfExprConseqIf &expr)\n+  {\n+    translated = CompileConditionalBlocks::compile (&expr, ctx);\n+  }\n+\n+private:\n+  CompileExprWithBlock (Context *ctx)\n+    : HIRCompileBase (ctx), translated (nullptr)\n+  {}\n+\n+  Bstatement *translated;\n+};\n+\n+} // namespace Compile\n+} // namespace Rust\n+\n+#endif // RUST_COMPILE_BLOCK"}, {"sha": "854fe5e03d98f50bf322ec06e7c056e71187268c", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-compile-base.h\"\n #include \"rust-compile-tyty.h\"\n #include \"rust-compile-resolve-path.h\"\n+#include \"rust-compile-block.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -273,6 +274,31 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t\t expr.get_locus ());\n   }\n \n+  void visit (HIR::IfExpr &expr)\n+  {\n+    auto stmt = CompileConditionalBlocks::compile (&expr, ctx);\n+    ctx->add_statement (stmt);\n+  }\n+\n+  void visit (HIR::IfExprConseqElse &expr)\n+  {\n+    auto stmt = CompileConditionalBlocks::compile (&expr, ctx);\n+    ctx->add_statement (stmt);\n+  }\n+\n+  void visit (HIR::IfExprConseqIf &expr)\n+  {\n+    auto stmt = CompileConditionalBlocks::compile (&expr, ctx);\n+    ctx->add_statement (stmt);\n+  }\n+\n+  void visit (HIR::BlockExpr &expr)\n+  {\n+    auto code_block = CompileBlock::compile (&expr, ctx);\n+    auto block_stmt = ctx->get_backend ()->block_statement (code_block);\n+    ctx->add_statement (block_stmt);\n+  }\n+\n private:\n   CompileExpr (Context *ctx) : HIRCompileBase (ctx), translated (nullptr) {}\n "}, {"sha": "5f7decb7d3e49156a9c1452b1f8f25c02de415da", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -38,6 +38,18 @@ class CompileStmt : public HIRCompileBase\n \n   virtual ~CompileStmt () {}\n \n+  void visit (HIR::ExprStmtWithBlock &stmt)\n+  {\n+    ok = true;\n+    auto translated = CompileExpr::Compile (stmt.get_expr (), ctx);\n+\n+    // these can be null\n+    if (translated == nullptr)\n+      return;\n+\n+    gcc_unreachable ();\n+  }\n+\n   void visit (HIR::ExprStmtWithoutBlock &stmt)\n   {\n     ok = true;"}, {"sha": "02fa3a0de10bd470c3d36ef563bfd6028cf0e2c3", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -18,6 +18,7 @@\n \n #include \"rust-compile.h\"\n #include \"rust-compile-item.h\"\n+#include \"rust-compile-expr.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -43,5 +44,113 @@ CompileCrate::go ()\n     CompileItem::compile (it->get (), ctx);\n }\n \n+// rust-compile-block.h\n+\n+void\n+CompileBlock::visit (HIR::BlockExpr &expr)\n+{\n+  fncontext fnctx = ctx->peek_fn ();\n+  Bfunction *fndecl = fnctx.fndecl;\n+  Location start_location = expr.get_locus ();\n+  Location end_location = expr.get_closing_locus ();\n+  auto body_mappings = expr.get_mappings ();\n+\n+  Resolver::Rib *rib = nullptr;\n+  if (!ctx->get_resolver ()->find_name_rib (body_mappings.get_nodeid (), &rib))\n+    {\n+      rust_fatal_error (expr.get_locus (), \"failed to setup locals per block\");\n+      return;\n+    }\n+\n+  std::vector<Bvariable *> locals;\n+  rib->iterate_decls ([&] (NodeId n) mutable -> bool {\n+    Resolver::Definition d;\n+    bool ok = ctx->get_resolver ()->lookup_definition (n, &d);\n+    rust_assert (ok);\n+\n+    HIR::Stmt *decl = nullptr;\n+    ok = ctx->get_mappings ()->resolve_nodeid_to_stmt (d.parent, &decl);\n+    rust_assert (ok);\n+\n+    Bvariable *compiled = CompileVarDecl::compile (fndecl, decl, ctx);\n+    locals.push_back (compiled);\n+\n+    return true;\n+  });\n+\n+  Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+  Bblock *new_block\n+    = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n+\t\t\t\t  start_location, end_location);\n+  ctx->push_block (new_block);\n+\n+  expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n+    CompileStmt::Compile (s, ctx);\n+    return true;\n+  });\n+\n+  ctx->pop_block ();\n+  translated = new_block;\n+}\n+\n+void\n+CompileConditionalBlocks::visit (HIR::IfExpr &expr)\n+{\n+  fncontext fnctx = ctx->peek_fn ();\n+  Bfunction *fndecl = fnctx.fndecl;\n+  Bexpression *condition_expr\n+    = CompileExpr::Compile (expr.get_if_condition (), ctx);\n+  Bblock *then_block = CompileBlock::compile (expr.get_if_block (), ctx);\n+\n+  translated\n+    = ctx->get_backend ()->if_statement (fndecl, condition_expr, then_block,\n+\t\t\t\t\t NULL, expr.get_locus ());\n+}\n+\n+void\n+CompileConditionalBlocks::visit (HIR::IfExprConseqElse &expr)\n+{\n+  fncontext fnctx = ctx->peek_fn ();\n+  Bfunction *fndecl = fnctx.fndecl;\n+  Bexpression *condition_expr\n+    = CompileExpr::Compile (expr.get_if_condition (), ctx);\n+  Bblock *then_block = CompileBlock::compile (expr.get_if_block (), ctx);\n+  Bblock *else_block = CompileBlock::compile (expr.get_else_block (), ctx);\n+\n+  translated\n+    = ctx->get_backend ()->if_statement (fndecl, condition_expr, then_block,\n+\t\t\t\t\t else_block, expr.get_locus ());\n+}\n+\n+void\n+CompileConditionalBlocks::visit (HIR::IfExprConseqIf &expr)\n+{\n+  fncontext fnctx = ctx->peek_fn ();\n+  Bfunction *fndecl = fnctx.fndecl;\n+  Bexpression *condition_expr\n+    = CompileExpr::Compile (expr.get_if_condition (), ctx);\n+  Bblock *then_block = CompileBlock::compile (expr.get_if_block (), ctx);\n+\n+  // else block\n+  std::vector<Bvariable *> locals;\n+  Location start_location = expr.get_conseq_if_expr ()->get_locus ();\n+  Location end_location = expr.get_conseq_if_expr ()->get_locus (); // FIXME\n+  Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+  Bblock *else_block\n+    = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n+\t\t\t\t  start_location, end_location);\n+  ctx->push_block (else_block);\n+\n+  Bstatement *else_stmt_decl\n+    = CompileConditionalBlocks::compile (expr.get_conseq_if_expr (), ctx);\n+  ctx->add_statement (else_stmt_decl);\n+\n+  ctx->pop_block ();\n+\n+  translated\n+    = ctx->get_backend ()->if_statement (fndecl, condition_expr, then_block,\n+\t\t\t\t\t else_block, expr.get_locus ());\n+}\n+\n } // namespace Compile\n } // namespace Rust"}, {"sha": "11f1ab8875ad414873acdf16604359b8512ba3cf", "filename": "gcc/rust/hir/rust-ast-lower-block.h", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-block.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -0,0 +1,132 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_AST_LOWER_BLOCK\n+#define RUST_AST_LOWER_BLOCK\n+\n+#include \"rust-diagnostics.h\"\n+#include \"rust-ast-lower-base.h\"\n+\n+namespace Rust {\n+namespace HIR {\n+\n+class ASTLoweringBlock : public ASTLoweringBase\n+{\n+public:\n+  static HIR::BlockExpr *translate (AST::BlockExpr *expr)\n+  {\n+    ASTLoweringBlock resolver;\n+    expr->accept_vis (resolver);\n+    if (resolver.translated != nullptr)\n+      {\n+\tresolver.mappings->insert_hir_expr (\n+\t  resolver.translated->get_mappings ().get_crate_num (),\n+\t  resolver.translated->get_mappings ().get_hirid (),\n+\t  resolver.translated);\n+      }\n+\n+    return resolver.translated;\n+  }\n+\n+  ~ASTLoweringBlock () {}\n+\n+  void visit (AST::BlockExpr &expr);\n+\n+private:\n+  ASTLoweringBlock () : ASTLoweringBase (), translated (nullptr) {}\n+\n+  HIR::BlockExpr *translated;\n+};\n+\n+class ASTLoweringIfBlock : public ASTLoweringBase\n+{\n+public:\n+  static HIR::IfExpr *translate (AST::IfExpr *expr)\n+  {\n+    ASTLoweringIfBlock resolver;\n+    expr->accept_vis (resolver);\n+    if (resolver.translated != nullptr)\n+      {\n+\tresolver.mappings->insert_hir_expr (\n+\t  resolver.translated->get_mappings ().get_crate_num (),\n+\t  resolver.translated->get_mappings ().get_hirid (),\n+\t  resolver.translated);\n+      }\n+\n+    return resolver.translated;\n+  }\n+\n+  ~ASTLoweringIfBlock () {}\n+\n+  void visit (AST::IfExpr &expr);\n+\n+  void visit (AST::IfExprConseqElse &expr);\n+\n+  void visit (AST::IfExprConseqIf &expr);\n+\n+private:\n+  ASTLoweringIfBlock () : ASTLoweringBase (), translated (nullptr) {}\n+\n+  HIR::IfExpr *translated;\n+};\n+\n+class ASTLoweringExprWithBlock : public ASTLoweringBase\n+{\n+public:\n+  static HIR::ExprWithBlock *translate (AST::ExprWithBlock *expr)\n+  {\n+    ASTLoweringExprWithBlock resolver;\n+    expr->accept_vis (resolver);\n+    if (resolver.translated != nullptr)\n+      {\n+\tresolver.mappings->insert_hir_expr (\n+\t  resolver.translated->get_mappings ().get_crate_num (),\n+\t  resolver.translated->get_mappings ().get_hirid (),\n+\t  resolver.translated);\n+      }\n+\n+    return resolver.translated;\n+  }\n+\n+  ~ASTLoweringExprWithBlock () {}\n+\n+  void visit (AST::IfExpr &expr)\n+  {\n+    translated = ASTLoweringIfBlock::translate (&expr);\n+  }\n+\n+  void visit (AST::IfExprConseqElse &expr)\n+  {\n+    translated = ASTLoweringIfBlock::translate (&expr);\n+  }\n+\n+  void visit (AST::IfExprConseqIf &expr)\n+  {\n+    translated = ASTLoweringIfBlock::translate (&expr);\n+  }\n+\n+private:\n+  ASTLoweringExprWithBlock () : ASTLoweringBase (), translated (nullptr) {}\n+\n+  HIR::ExprWithBlock *translated;\n+};\n+\n+} // namespace HIR\n+} // namespace Rust\n+\n+#endif // RUST_AST_LOWER_BLOCK"}, {"sha": "19d599a570fe1d1c857609ac8b7ddbbe53c6f4f3", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 99, "deletions": 6, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -20,8 +20,8 @@\n #define RUST_AST_LOWER_EXPR\n \n #include \"rust-diagnostics.h\"\n-\n #include \"rust-ast-lower-base.h\"\n+#include \"rust-ast-lower-block.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -33,19 +33,42 @@ class ASTLoweringExpr : public ASTLoweringBase\n   {\n     ASTLoweringExpr resolver;\n     expr->accept_vis (resolver);\n-    if (resolver.translated != nullptr)\n+    if (resolver.translated == nullptr)\n       {\n-\tresolver.mappings->insert_hir_expr (\n-\t  resolver.translated->get_mappings ().get_crate_num (),\n-\t  resolver.translated->get_mappings ().get_hirid (),\n-\t  resolver.translated);\n+\trust_fatal_error (expr->get_locus_slow (), \"Failed to lower expr: [%s]\",\n+\t\t\t  expr->as_string ().c_str ());\n+\treturn nullptr;\n       }\n \n+    resolver.mappings->insert_hir_expr (\n+      resolver.translated->get_mappings ().get_crate_num (),\n+      resolver.translated->get_mappings ().get_hirid (), resolver.translated);\n+\n     return resolver.translated;\n   }\n \n   virtual ~ASTLoweringExpr () {}\n \n+  void visit (AST::IfExpr &expr)\n+  {\n+    translated = ASTLoweringIfBlock::translate (&expr);\n+  }\n+\n+  void visit (AST::IfExprConseqElse &expr)\n+  {\n+    translated = ASTLoweringIfBlock::translate (&expr);\n+  }\n+\n+  void visit (AST::IfExprConseqIf &expr)\n+  {\n+    translated = ASTLoweringIfBlock::translate (&expr);\n+  }\n+\n+  void visit (AST::BlockExpr &expr)\n+  {\n+    translated = ASTLoweringBlock::translate (&expr);\n+  }\n+\n   void visit (AST::PathInExpression &expr)\n   {\n     std::vector<HIR::PathExprSegment> path_segments;\n@@ -230,6 +253,76 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t\t  kind, expr.get_locus ());\n   }\n \n+  void visit (AST::ComparisonExpr &expr)\n+  {\n+    HIR::ComparisonExpr::ExprType kind;\n+    switch (expr.get_kind ())\n+      {\n+      case AST::ComparisonExpr::ExprType::EQUAL:\n+\tkind = HIR::ComparisonExpr::ExprType::EQUAL;\n+\tbreak;\n+      case AST::ComparisonExpr::ExprType::NOT_EQUAL:\n+\tkind = HIR::ComparisonExpr::ExprType::NOT_EQUAL;\n+\tbreak;\n+      case AST::ComparisonExpr::ExprType::GREATER_THAN:\n+\tkind = HIR::ComparisonExpr::ExprType::GREATER_THAN;\n+\tbreak;\n+      case AST::ComparisonExpr::ExprType::LESS_THAN:\n+\tkind = HIR::ComparisonExpr::ExprType::LESS_THAN;\n+\tbreak;\n+      case AST::ComparisonExpr::ExprType::GREATER_OR_EQUAL:\n+\tkind = HIR::ComparisonExpr::ExprType::GREATER_OR_EQUAL;\n+\tbreak;\n+      case AST::ComparisonExpr::ExprType::LESS_OR_EQUAL:\n+\tkind = HIR::ComparisonExpr::ExprType::LESS_OR_EQUAL;\n+\tbreak;\n+      }\n+\n+    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+    rust_assert (lhs != nullptr);\n+    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+    rust_assert (rhs != nullptr);\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::ComparisonExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t\t std::unique_ptr<HIR::Expr> (rhs), kind,\n+\t\t\t\t expr.get_locus ());\n+  }\n+\n+  void visit (AST::LazyBooleanExpr &expr)\n+  {\n+    HIR::LazyBooleanExpr::ExprType kind;\n+    switch (expr.get_kind ())\n+      {\n+      case AST::LazyBooleanExpr::ExprType::LOGICAL_AND:\n+\tkind = HIR::LazyBooleanExpr::ExprType::LOGICAL_AND;\n+\tbreak;\n+      case AST::LazyBooleanExpr::ExprType::LOGICAL_OR:\n+\tkind = HIR::LazyBooleanExpr::ExprType::LOGICAL_OR;\n+\tbreak;\n+      }\n+\n+    HIR::Expr *lhs = ASTLoweringExpr::translate (expr.get_left_expr ().get ());\n+    rust_assert (lhs != nullptr);\n+    HIR::Expr *rhs = ASTLoweringExpr::translate (expr.get_right_expr ().get ());\n+    rust_assert (rhs != nullptr);\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+\n+    translated\n+      = new HIR::LazyBooleanExpr (mapping, std::unique_ptr<HIR::Expr> (lhs),\n+\t\t\t\t  std::unique_ptr<HIR::Expr> (rhs), kind,\n+\t\t\t\t  expr.get_locus ());\n+  }\n+\n private:\n   ASTLoweringExpr () : translated (nullptr) {}\n "}, {"sha": "f57ac8634881d1e45622511b2738e70b06002a48", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -25,6 +25,7 @@\n #include \"rust-ast-lower-type.h\"\n #include \"rust-ast-lower-stmt.h\"\n #include \"rust-ast-lower-pattern.h\"\n+#include \"rust-ast-lower-block.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -83,7 +84,7 @@ class ASTLoweringItem : public ASTLoweringBase\n \n     std::unique_ptr<HIR::BlockExpr> function_body\n       = std::unique_ptr<HIR::BlockExpr> (\n-\ttranslate (function.get_definition ().get ()));\n+\tASTLoweringBlock::translate (function.get_definition ().get ()));\n \n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, function.get_node_id (),\n@@ -116,33 +117,6 @@ class ASTLoweringItem : public ASTLoweringBase\n     translated = fn;\n   }\n \n-  // Helpers\n-\n-  HIR::BlockExpr *translate (AST::BlockExpr *function_body)\n-  {\n-    std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n-    std::unique_ptr<HIR::ExprWithoutBlock> block_expr;\n-    std::vector<HIR::Attribute> inner_attribs;\n-    std::vector<HIR::Attribute> outer_attribs;\n-\n-    function_body->iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n-      auto translated_stmt = ASTLoweringStmt::translate (s);\n-      block_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n-      return true;\n-    });\n-\n-    auto crate_num = mappings->get_current_crate ();\n-    Analysis::NodeMapping mapping (crate_num, function_body->get_node_id (),\n-\t\t\t\t   mappings->get_next_hir_id (crate_num),\n-\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n-\n-    return new HIR::BlockExpr (mapping, std::move (block_stmts),\n-\t\t\t       std::move (block_expr),\n-\t\t\t       std::move (inner_attribs),\n-\t\t\t       std::move (outer_attribs),\n-\t\t\t       function_body->get_locus ());\n-  }\n-\n private:\n   ASTLoweringItem () : translated (nullptr) {}\n "}, {"sha": "f4ecd8ec2c1040f5fba2e4764d272314d880c891", "filename": "gcc/rust/hir/rust-ast-lower-stmt.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-stmt.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -23,6 +23,7 @@\n \n #include \"rust-ast-lower-base.h\"\n #include \"rust-ast-lower-type.h\"\n+#include \"rust-ast-lower-block.h\"\n #include \"rust-ast-lower-expr.h\"\n #include \"rust-ast-lower-pattern.h\"\n \n@@ -46,6 +47,24 @@ class ASTLoweringStmt : public ASTLoweringBase\n \n   virtual ~ASTLoweringStmt () {}\n \n+  void visit (AST::ExprStmtWithBlock &stmt)\n+  {\n+    HIR::ExprWithBlock *expr\n+      = ASTLoweringExprWithBlock::translate (stmt.get_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, stmt.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+    translated\n+      = new HIR::ExprStmtWithBlock (mapping,\n+\t\t\t\t    std::unique_ptr<HIR::ExprWithBlock> (expr),\n+\t\t\t\t    stmt.get_locus ());\n+    mappings->insert_location (crate_num, mapping.get_hirid (),\n+\t\t\t       stmt.get_locus ());\n+    mappings->insert_hir_stmt (crate_num, mapping.get_hirid (), translated);\n+  }\n+\n   void visit (AST::ExprStmtWithoutBlock &stmt)\n   {\n     HIR::Expr *expr = ASTLoweringExpr::translate (stmt.get_expr ().get ());"}, {"sha": "93288c37286dc26763391dc4643b5fcd37fe3753", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -18,6 +18,8 @@\n \n #include \"rust-ast-lower.h\"\n #include \"rust-ast-lower-item.h\"\n+#include \"rust-ast-lower-expr.h\"\n+#include \"rust-ast-lower-block.h\"\n \n namespace Rust {\n namespace HIR {\n@@ -58,5 +60,94 @@ ASTLowering::go ()\n \t\t     has_utf8bom, has_shebang);\n }\n \n+// rust-ast-lower-block.h\n+void\n+ASTLoweringBlock::visit (AST::BlockExpr &expr)\n+{\n+  std::vector<std::unique_ptr<HIR::Stmt> > block_stmts;\n+  std::unique_ptr<HIR::ExprWithoutBlock> block_expr;\n+  std::vector<HIR::Attribute> inner_attribs;\n+  std::vector<HIR::Attribute> outer_attribs;\n+\n+  expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n+    auto translated_stmt = ASTLoweringStmt::translate (s);\n+    block_stmts.push_back (std::unique_ptr<HIR::Stmt> (translated_stmt));\n+    return true;\n+  });\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::BlockExpr (mapping, std::move (block_stmts),\n+\t\t\t  std::move (block_expr), std::move (inner_attribs),\n+\t\t\t  std::move (outer_attribs), expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringIfBlock::visit (AST::IfExpr &expr)\n+{\n+  HIR::Expr *condition\n+    = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+  HIR::BlockExpr *block\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated = new HIR::IfExpr (mapping, std::unique_ptr<HIR::Expr> (condition),\n+\t\t\t\tstd::unique_ptr<HIR::BlockExpr> (block),\n+\t\t\t\texpr.get_locus ());\n+}\n+\n+void\n+ASTLoweringIfBlock::visit (AST::IfExprConseqElse &expr)\n+{\n+  HIR::Expr *condition\n+    = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+  HIR::BlockExpr *if_block\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+  HIR::BlockExpr *else_block\n+    = ASTLoweringBlock::translate (expr.get_else_block ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::IfExprConseqElse (mapping,\n+\t\t\t\t std::unique_ptr<HIR::Expr> (condition),\n+\t\t\t\t std::unique_ptr<HIR::BlockExpr> (if_block),\n+\t\t\t\t std::unique_ptr<HIR::BlockExpr> (else_block),\n+\t\t\t\t expr.get_locus ());\n+}\n+\n+void\n+ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n+{\n+  HIR::Expr *condition\n+    = ASTLoweringExpr::translate (expr.get_condition_expr ().get ());\n+  HIR::BlockExpr *block\n+    = ASTLoweringBlock::translate (expr.get_if_block ().get ());\n+  HIR::IfExpr *conseq_if_expr\n+    = ASTLoweringIfBlock::translate (expr.get_conseq_if_expr ().get ());\n+\n+  auto crate_num = mappings->get_current_crate ();\n+  Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t mappings->get_next_hir_id (crate_num),\n+\t\t\t\t UNKNOWN_LOCAL_DEFID);\n+\n+  translated\n+    = new HIR::IfExprConseqIf (mapping, std::unique_ptr<HIR::Expr> (condition),\n+\t\t\t       std::unique_ptr<HIR::BlockExpr> (block),\n+\t\t\t       std::unique_ptr<HIR::IfExpr> (conseq_if_expr),\n+\t\t\t       expr.get_locus ());\n+}\n+\n } // namespace HIR\n } // namespace Rust"}, {"sha": "7e1c76ba9a3554f47efe7c070d3471f5c7b3290e", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -538,6 +538,8 @@ class ComparisonExpr : public OperatorExpr\n   Expr *get_lhs () { return main_or_left_expr.get (); }\n   Expr *get_rhs () { return right_expr.get (); }\n \n+  ExprType get_kind () { return expr_type; }\n+\n   /* TODO: implement via a function call to std::cmp::PartialEq::eq(&op1, &op2)\n    * maybe? */\n protected:\n@@ -3647,6 +3649,8 @@ class IfExprConseqElse : public IfExpr\n \n   void vis_else_block (HIRVisitor &vis) { else_block->accept_vis (vis); }\n \n+  BlockExpr *get_else_block () { return else_block.get (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -3715,6 +3719,8 @@ class IfExprConseqIf : public IfExpr\n     conseq_if_expr->accept_vis (vis);\n   }\n \n+  IfExpr *get_conseq_if_expr () { return conseq_if_expr.get (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "be4ff7da6851fff0c4ccffe2f3a28436e2994e82", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -192,13 +192,11 @@ class ExprStmtWithoutBlock : public ExprStmt\n // Statement containing an expression with a block\n class ExprStmtWithBlock : public ExprStmt\n {\n-public:\n   std::unique_ptr<ExprWithBlock> expr;\n \n+public:\n   std::string as_string () const override;\n \n-  std::vector<LetStmt *> locals;\n-\n   ExprStmtWithBlock (Analysis::NodeMapping mappings,\n \t\t     std::unique_ptr<ExprWithBlock> expr, Location locus)\n     : ExprStmt (std::move (mappings), locus), expr (std::move (expr))\n@@ -224,6 +222,8 @@ class ExprStmtWithBlock : public ExprStmt\n \n   void accept_vis (HIRVisitor &vis) override;\n \n+  ExprWithBlock *get_expr () { return expr.get (); }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}, {"sha": "3316b2af1d55e7a68922cf59505f2bc8470fae1a", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -95,6 +95,40 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::ComparisonExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::LazyBooleanExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_left_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::IfExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_if_block ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::IfExprConseqElse &expr)\n+  {\n+    ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_if_block ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_else_block ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::IfExprConseqIf &expr)\n+  {\n+    ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_if_block ().get (), expr.get_node_id ());\n+    ResolveExpr::go (expr.get_conseq_if_expr ().get (), expr.get_node_id ());\n+  }\n+\n+  void visit (AST::BlockExpr &expr);\n+\n private:\n   ResolveExpr (NodeId parent) : ResolverBase (parent) {}\n };"}, {"sha": "87b3cf339cb47c9436a61fef49953acd506d9c92", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -39,6 +39,11 @@ class ResolveStmt : public ResolverBase\n \n   ~ResolveStmt () {}\n \n+  void visit (AST::ExprStmtWithBlock &stmt)\n+  {\n+    ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());\n+  }\n+\n   void visit (AST::ExprStmtWithoutBlock &stmt)\n   {\n     ResolveExpr::go (stmt.get_expr ().get (), stmt.get_node_id ());"}, {"sha": "8370a5b97e0b8958a96f5985cb4010865ac49f56", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -17,10 +17,11 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-ast-resolve.h\"\n-#include \"rust-ast-resolve-toplevel.h\"\n-#include \"rust-ast-resolve-item.h\"\n #include \"rust-ast-full.h\"\n #include \"rust-tyty.h\"\n+#include \"rust-ast-resolve-toplevel.h\"\n+#include \"rust-ast-resolve-item.h\"\n+#include \"rust-ast-resolve-expr.h\"\n \n #define MKBUILTIN_TYPE(_X, _R, _TY)                                            \\\n   do                                                                           \\\n@@ -250,5 +251,25 @@ NameResolution::go (AST::Crate &crate)\n     ResolveItem::go (it->get ());\n }\n \n+// rust-ast-resolve-expr.h\n+\n+void\n+ResolveExpr::visit (AST::BlockExpr &expr)\n+{\n+  NodeId scope_node_id = expr.get_node_id ();\n+  resolver->get_name_scope ().push (scope_node_id);\n+  resolver->get_type_scope ().push (scope_node_id);\n+  resolver->push_new_name_rib (resolver->get_name_scope ().peek ());\n+  resolver->push_new_type_rib (resolver->get_type_scope ().peek ());\n+\n+  expr.iterate_stmts ([&] (AST::Stmt *s) mutable -> bool {\n+    ResolveStmt::go (s, s->get_node_id ());\n+    return true;\n+  });\n+\n+  resolver->get_name_scope ().pop ();\n+  resolver->get_type_scope ().pop ();\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "8be2dbf21a28ffec54da2b56fdb1a73a97e3f2d3", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -179,6 +179,46 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = lhs->combine (rhs);\n   }\n \n+  void visit (HIR::ComparisonExpr &expr)\n+  {\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+\n+    infered = lhs->combine (rhs);\n+    // FIXME this will need to turn into bool\n+  }\n+\n+  void visit (HIR::LazyBooleanExpr &expr)\n+  {\n+    auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n+    auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n+\n+    infered = lhs->combine (rhs);\n+    // FIXME this will need to turn into bool\n+  }\n+\n+  void visit (HIR::IfExpr &expr)\n+  {\n+    TypeCheckExpr::Resolve (expr.get_if_condition ());\n+    TypeCheckExpr::Resolve (expr.get_if_block ());\n+  }\n+\n+  void visit (HIR::IfExprConseqElse &expr)\n+  {\n+    TypeCheckExpr::Resolve (expr.get_if_condition ());\n+    TypeCheckExpr::Resolve (expr.get_if_block ());\n+    TypeCheckExpr::Resolve (expr.get_else_block ());\n+  }\n+\n+  void visit (HIR::IfExprConseqIf &expr)\n+  {\n+    TypeCheckExpr::Resolve (expr.get_if_condition ());\n+    TypeCheckExpr::Resolve (expr.get_if_block ());\n+    TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n+  }\n+\n+  void visit (HIR::BlockExpr &expr);\n+\n private:\n   TypeCheckExpr () : TypeCheckBase (), infered (nullptr) {}\n "}, {"sha": "d3189ccaf6603fccdf03d0e80d8d28253608dad5", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -36,6 +36,11 @@ class TypeCheckStmt : public TypeCheckBase\n     stmt->accept_vis (resolver);\n   }\n \n+  void visit (HIR::ExprStmtWithBlock &stmt)\n+  {\n+    TypeCheckExpr::Resolve (stmt.get_expr ());\n+  }\n+\n   void visit (HIR::ExprStmtWithoutBlock &stmt)\n   {\n     TypeCheckExpr::Resolve (stmt.get_expr ());"}, {"sha": "79e0190a31d654a80dff1a3e1aff8b54f2c39b16", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -20,6 +20,7 @@\n #include \"rust-hir-full.h\"\n #include \"rust-hir-type-check-toplevel.h\"\n #include \"rust-hir-type-check-item.h\"\n+#include \"rust-hir-type-check-expr.h\"\n \n namespace Rust {\n namespace Resolver {\n@@ -34,5 +35,15 @@ TypeResolution::Resolve (HIR::Crate &crate)\n     TypeCheckItem::Resolve (it->get ());\n }\n \n+// RUST_HIR_TYPE_CHECK_EXPR\n+void\n+TypeCheckExpr::visit (HIR::BlockExpr &expr)\n+{\n+  expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n+    TypeCheckStmt::Resolve (s);\n+    return true;\n+  });\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "238689c37a3b61242883f062f65ff617204c270c", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2fbb5e48f6218035d7bde1336345cebf120d3e/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=aa2fbb5e48f6218035d7bde1336345cebf120d3e", "patch": "@@ -260,8 +260,6 @@ Mappings::lookup_hir_item (CrateNum crateNum, HirId id)\n void\n Mappings::insert_hir_expr (CrateNum crateNum, HirId id, HIR::Expr *expr)\n {\n-  rust_assert (lookup_hir_expr (crateNum, id) == nullptr);\n-\n   hirExprMappings[crateNum][id] = expr;\n   nodeIdToHirMappings[crateNum][expr->get_mappings ().get_nodeid ()] = id;\n   insert_location (crateNum, id, expr->get_locus_slow ());"}]}