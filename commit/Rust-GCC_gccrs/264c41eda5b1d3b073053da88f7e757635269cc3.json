{"sha": "264c41eda5b1d3b073053da88f7e757635269cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY0YzQxZWRhNWIxZDNiMDczMDUzZGE4OGY3ZTc1NzYzNTI2OWNjMw==", "commit": {"author": {"name": "Carlos O'Donell", "email": "carlos@codesourcery.com", "date": "2005-12-13T05:12:32Z"}, "committer": {"name": "Carlos O'Donell", "email": "carlos@gcc.gnu.org", "date": "2005-12-13T05:12:32Z"}, "message": "c-cppbuiltin.c (builtin_define_float_constants): Add fp_cast parameter, pass to builtin_define_with_hex_fp_value.\n\n2005-12-13  Carlos O'Donell <carlos@codesourcery.com>\n\ngcc/\n\n\t* c-cppbuiltin.c (builtin_define_float_constants): Add\n\tfp_cast parameter, pass to builtin_define_with_hex_fp_value.\n\tDefine __FLT_HAS_DENORM__, __DBL_HAS_DENORM__, __LDBL_HAS_DENORM__.\n\t(builtin_define_with_hex_fp_value): Use fp_cast when building macro.\n\t(c_cpp_builtins): If flag_single_precision_constant then set fp_cast\n\tto \"((double)%sL)\" otherwise \"%s\".\n\ngcc/testsuite/\n\n\t* gcc.dg/single-precision-constant.c: New test.\n\nlibstdc++-v3/\n\n\t* include/std/std_limits.h (struct numeric_limits):\n\tUse __DBL_HAS_DENORM__, __FLT_HAS_DENORM__, __LDBL_HAS_DENORM__.\n\nFrom-SVN: r108458", "tree": {"sha": "2fbb2e1fb7c42f4f00f870ff2ee039017a5bdcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fbb2e1fb7c42f4f00f870ff2ee039017a5bdcaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/264c41eda5b1d3b073053da88f7e757635269cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264c41eda5b1d3b073053da88f7e757635269cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264c41eda5b1d3b073053da88f7e757635269cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264c41eda5b1d3b073053da88f7e757635269cc3/comments", "author": null, "committer": null, "parents": [{"sha": "65b1344e310ec930d82b17551ff5cd63e7724761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65b1344e310ec930d82b17551ff5cd63e7724761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65b1344e310ec930d82b17551ff5cd63e7724761"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "222bda496232fd646a1def6e1d4394b8c79266cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=264c41eda5b1d3b073053da88f7e757635269cc3", "patch": "@@ -1,3 +1,12 @@\n+2005-12-13  Carlos O'Donell <carlos@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (builtin_define_float_constants): Add\n+\tfp_cast parameter, pass to builtin_define_with_hex_fp_value.\n+\tDefine __FLT_HAS_DENORM__, __DBL_HAS_DENORM__, __LDBL_HAS_DENORM__.\n+\t(builtin_define_with_hex_fp_value): Use fp_cast when building macro.\n+\t(c_cpp_builtins): If flag_single_precision_constant then set fp_cast\n+\tto \"((double)%sL)\" otherwise \"%s\".\n+\n 2005-12-13  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/bpabi.h (SUBTARGET_EXTRA_ASM_SPEC): Pass -meabi=gnu for"}, {"sha": "dc87980df1925e00e726c67c90866a626dcaf440", "filename": "gcc/c-cppbuiltin.c", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-cppbuiltin.c?ref=264c41eda5b1d3b073053da88f7e757635269cc3", "patch": "@@ -53,11 +53,14 @@ static void builtin_define_with_value_n (const char *, const char *,\n static void builtin_define_with_int_value (const char *, HOST_WIDE_INT);\n static void builtin_define_with_hex_fp_value (const char *, tree,\n \t\t\t\t\t      int, const char *,\n+\t\t\t\t\t      const char *,\n \t\t\t\t\t      const char *);\n static void builtin_define_stdint_macros (void);\n static void builtin_define_type_max (const char *, tree, int);\n static void builtin_define_type_precision (const char *, tree);\n-static void builtin_define_float_constants (const char *, const char *,\n+static void builtin_define_float_constants (const char *, \n+\t\t\t\t\t    const char *,\n+\t\t\t\t\t    const char *,\n \t\t\t\t\t    tree);\n static void define__GNUC__ (void);\n \n@@ -68,9 +71,13 @@ builtin_define_type_precision (const char *name, tree type)\n   builtin_define_with_int_value (name, TYPE_PRECISION (type));\n }\n \n-/* Define the float.h constants for TYPE using NAME_PREFIX and FP_SUFFIX.  */\n+/* Define the float.h constants for TYPE using NAME_PREFIX, FP_SUFFIX,\n+   and FP_CAST. */\n static void\n-builtin_define_float_constants (const char *name_prefix, const char *fp_suffix, tree type)\n+builtin_define_float_constants (const char *name_prefix, \n+\t\t                const char *fp_suffix, \n+\t\t\t\tconst char *fp_cast, \n+\t\t\t\ttree type)\n {\n   /* Used to convert radix-based values to base 10 values in several cases.\n \n@@ -208,13 +215,13 @@ builtin_define_float_constants (const char *name_prefix, const char *fp_suffix,\n       }\n   }\n   sprintf (name, \"__%s_MAX__\", name_prefix);\n-  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix);\n+  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n \n   /* The minimum normalized positive floating-point number,\n      b**(emin-1).  */\n   sprintf (name, \"__%s_MIN__\", name_prefix);\n   sprintf (buf, \"0x1p%d\", (fmt->emin - 1) * fmt->log2_b);\n-  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix);\n+  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n \n   /* The difference between 1 and the least value greater than 1 that is\n      representable in the given floating point type, b**(1-p).  */\n@@ -225,7 +232,7 @@ builtin_define_float_constants (const char *name_prefix, const char *fp_suffix,\n       sprintf (buf, \"0x1p%d\", (fmt->emin - fmt->p) * fmt->log2_b);\n     else      \n       sprintf (buf, \"0x1p%d\", (1 - fmt->p) * fmt->log2_b);\n-  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix);\n+  builtin_define_with_hex_fp_value (name, type, decimal_dig, buf, fp_suffix, fp_cast);\n \n   /* For C++ std::numeric_limits<T>::denorm_min.  The minimum denormalized\n      positive floating-point number, b**(emin-p).  Zero for formats that\n@@ -235,14 +242,17 @@ builtin_define_float_constants (const char *name_prefix, const char *fp_suffix,\n     {\n       sprintf (buf, \"0x1p%d\", (fmt->emin - fmt->p) * fmt->log2_b);\n       builtin_define_with_hex_fp_value (name, type, decimal_dig,\n-\t\t\t\t\tbuf, fp_suffix);\n+\t\t\t\t\tbuf, fp_suffix, fp_cast);\n     }\n   else\n     {\n       sprintf (buf, \"0.0%s\", fp_suffix);\n       builtin_define_with_value (name, buf, 0);\n     }\n \n+  sprintf (name, \"__%s_HAS_DENORM__\", name_prefix);\n+  builtin_define_with_value (name, fmt->has_denorm ? \"1\" : \"0\", 0);\n+\n   /* For C++ std::numeric_limits<T>::has_infinity.  */\n   sprintf (name, \"__%s_HAS_INFINITY__\", name_prefix);\n   builtin_define_with_int_value (name,\n@@ -382,9 +392,16 @@ c_cpp_builtins (cpp_reader *pfile)\n   builtin_define_with_int_value (\"__FLT_EVAL_METHOD__\",\n \t\t\t\t TARGET_FLT_EVAL_METHOD);\n \n-  builtin_define_float_constants (\"FLT\", \"F\", float_type_node);\n-  builtin_define_float_constants (\"DBL\", \"\", double_type_node);\n-  builtin_define_float_constants (\"LDBL\", \"L\", long_double_type_node);\n+  builtin_define_float_constants (\"FLT\", \"F\", \"%s\", float_type_node);\n+  /* Cast the double precision constants when single precision constants are\n+     specified. The correct result is computed by the compiler when using \n+     macros that include a cast. This has the side-effect of making the value \n+     unusable in const expressions. */\n+  if (flag_single_precision_constant)\n+    builtin_define_float_constants (\"DBL\", \"L\", \"((double)%s)\", double_type_node);\n+  else\n+    builtin_define_float_constants (\"DBL\", \"\", \"%s\", double_type_node);\n+  builtin_define_float_constants (\"LDBL\", \"L\", \"%s\", long_double_type_node);\n \n   /* For use in assembly language.  */\n   builtin_define_with_value (\"__REGISTER_PREFIX__\", REGISTER_PREFIX, 0);\n@@ -580,10 +597,12 @@ builtin_define_with_int_value (const char *macro, HOST_WIDE_INT value)\n static void\n builtin_define_with_hex_fp_value (const char *macro,\n \t\t\t\t  tree type ATTRIBUTE_UNUSED, int digits,\n-\t\t\t\t  const char *hex_str, const char *fp_suffix)\n+\t\t\t\t  const char *hex_str, \n+\t\t\t\t  const char *fp_suffix,\n+\t\t\t\t  const char *fp_cast)\n {\n   REAL_VALUE_TYPE real;\n-  char dec_str[64], buf[256];\n+  char dec_str[64], buf1[256], buf2[256];\n \n   /* Hex values are really cool and convenient, except that they're\n      not supported in strict ISO C90 mode.  First, the \"p-\" sequence\n@@ -598,8 +617,13 @@ builtin_define_with_hex_fp_value (const char *macro,\n   real_from_string (&real, hex_str);\n   real_to_decimal (dec_str, &real, sizeof (dec_str), digits, 0);\n \n-  sprintf (buf, \"%s=%s%s\", macro, dec_str, fp_suffix);\n-  cpp_define (parse_in, buf);\n+  /* Assemble the macro in the following fashion\n+     macro = fp_cast [dec_str fp_suffix] */\n+  sprintf (buf1, \"%s%s\", dec_str, fp_suffix);\n+  sprintf (buf2, fp_cast, buf1);\n+  sprintf (buf1, \"%s=%s\", macro, buf2);\n+  \n+  cpp_define (parse_in, buf1);\n }\n \n /* Define MAX for TYPE based on the precision of the type.  IS_LONG is"}, {"sha": "2bd0541e453b362b1215b19dde9ac9eef1e33112", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=264c41eda5b1d3b073053da88f7e757635269cc3", "patch": "@@ -1,3 +1,7 @@\n+2005-12-13  Carlos O'Donell <carlos@codesourcery.com>\n+\n+\t* gcc.dg/single-precision-constant.c: New test.\n+\n 2005-12-13  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcc.dg/980523-1.c, gcc.dg/980526-1.c, gcc.dg/20020103-1.c,"}, {"sha": "877e4d74d67b60bf7671f8cc89612e4865c20de5", "filename": "gcc/testsuite/gcc.dg/single-precision-constant.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2Ftestsuite%2Fgcc.dg%2Fsingle-precision-constant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264c41eda5b1d3b073053da88f7e757635269cc3/gcc%2Ftestsuite%2Fgcc.dg%2Fsingle-precision-constant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsingle-precision-constant.c?ref=264c41eda5b1d3b073053da88f7e757635269cc3", "patch": "@@ -0,0 +1,19 @@\n+/* Test that double precision constants are correctly handled \n+   when code is compiled with -fsingle-precision-constant */\n+/* Origin: Carlos O'Donell <carlos@codesourcery.com> */\n+/* { dg-do run } */\n+/* { dg-options \"-fsingle-precision-constant\" } */\n+#include <math.h>\n+#include <float.h>\n+\n+int main (void)\n+{\n+  int result = 0;\n+  double local_DBL_MAX = DBL_MAX; \n+  double local_DBL_MIN = DBL_MIN;\n+  if (isinf (local_DBL_MAX))\n+    result |= 1;\n+  if (local_DBL_MIN <= 0.0)\n+    result |= 1;\n+  return result;\n+}"}, {"sha": "92111797df6ea05bf78cd216992ecc51cce0bfac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264c41eda5b1d3b073053da88f7e757635269cc3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264c41eda5b1d3b073053da88f7e757635269cc3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=264c41eda5b1d3b073053da88f7e757635269cc3", "patch": "@@ -1,3 +1,8 @@\n+2005-12-13  Carlos O'Donell <carlos@codesourcery.com>\n+\n+\t* include/std/std_limits.h (struct numeric_limits):\n+\tUse __DBL_HAS_DENORM__, __FLT_HAS_DENORM__, __LDBL_HAS_DENORM__.\n+\n 2005-12-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/ext/sso_string_base.h (__sso_string_base<>::_M_compare):"}, {"sha": "7643dcfe230ca54eb955ba73a25bbc0bbf7e05bc", "filename": "libstdc++-v3/include/std/std_limits.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/264c41eda5b1d3b073053da88f7e757635269cc3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/264c41eda5b1d3b073053da88f7e757635269cc3/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_limits.h?ref=264c41eda5b1d3b073053da88f7e757635269cc3", "patch": "@@ -1,6 +1,7 @@\n // The template and inlines for the -*- C++ -*- numeric_limits classes.\n \n-// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2005 \n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -1007,7 +1008,7 @@ namespace std\n       static const bool has_quiet_NaN = __FLT_HAS_QUIET_NAN__;\n       static const bool has_signaling_NaN = has_quiet_NaN;\n       static const float_denorm_style has_denorm\n-\t= bool(__FLT_DENORM_MIN__) ? denorm_present : denorm_absent;\n+\t= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;\n       static const bool has_denorm_loss = __glibcxx_float_has_denorm_loss;\n \n       static float infinity() throw()\n@@ -1064,7 +1065,7 @@ namespace std\n       static const bool has_quiet_NaN = __DBL_HAS_QUIET_NAN__;\n       static const bool has_signaling_NaN = has_quiet_NaN;\n       static const float_denorm_style has_denorm\n-\t= bool(__DBL_DENORM_MIN__) ? denorm_present : denorm_absent;\n+\t= bool(__DBL_HAS_DENORM__) ? denorm_present : denorm_absent;\n       static const bool has_denorm_loss = __glibcxx_double_has_denorm_loss;\n \n       static double infinity() throw()\n@@ -1121,7 +1122,7 @@ namespace std\n       static const bool has_quiet_NaN = __LDBL_HAS_QUIET_NAN__;\n       static const bool has_signaling_NaN = has_quiet_NaN;\n       static const float_denorm_style has_denorm\n-\t= bool(__LDBL_DENORM_MIN__) ? denorm_present : denorm_absent;\n+\t= bool(__LDBL_HAS_DENORM__) ? denorm_present : denorm_absent;\n       static const bool has_denorm_loss\n \t= __glibcxx_long_double_has_denorm_loss;\n "}]}