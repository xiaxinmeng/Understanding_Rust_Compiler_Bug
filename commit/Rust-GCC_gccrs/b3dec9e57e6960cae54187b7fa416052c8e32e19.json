{"sha": "b3dec9e57e6960cae54187b7fa416052c8e32e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNkZWM5ZTU3ZTY5NjBjYWU1NDE4N2I3ZmE0MTYwNTJjOGUzMmUxOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-24T16:45:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-24T16:45:31Z"}, "message": "Implement DR resolutions for filesystem::copy\n\n\t* src/filesystem/ops.cc (do_copy_file): Return an error if either\n\tsource or destination is not a regular file.\n\t(copy): Update comment to refer to LWG 2681. Implement 2682 and 2683\n\tresolutions.\n\t(read_symlink): Add missing ec.clear().\n\t* testsuite/experimental/filesystem/operations/copy.cc: Update\n\texpected behaviour for copying directories with create_symlinks.\n\tVerify that error_code arguments are cleared if there's no error.\n\t* testsuite/experimental/filesystem/operations/read_symlink.cc: New.\n\nFrom-SVN: r241484", "tree": {"sha": "31de0b552bad0b485a556d5796112652b9f67fa2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31de0b552bad0b485a556d5796112652b9f67fa2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3dec9e57e6960cae54187b7fa416052c8e32e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dec9e57e6960cae54187b7fa416052c8e32e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3dec9e57e6960cae54187b7fa416052c8e32e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3dec9e57e6960cae54187b7fa416052c8e32e19/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38000825cd37c3f132cd02edc4e8eb79aff4d3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38000825cd37c3f132cd02edc4e8eb79aff4d3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38000825cd37c3f132cd02edc4e8eb79aff4d3a6"}], "stats": {"total": 114, "additions": 105, "deletions": 9}, "files": [{"sha": "112e9415c7fd4766070de4039e1dde2986ad43a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b3dec9e57e6960cae54187b7fa416052c8e32e19", "patch": "@@ -1,3 +1,15 @@\n+2016-10-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/filesystem/ops.cc (do_copy_file): Return an error if either\n+\tsource or destination is not a regular file.\n+\t(copy): Update comment to refer to LWG 2681. Implement 2682 and 2683\n+\tresolutions.\n+\t(read_symlink): Add missing ec.clear().\n+\t* testsuite/experimental/filesystem/operations/copy.cc: Update\n+\texpected behaviour for copying directories with create_symlinks.\n+\tVerify that error_code arguments are cleared if there's no error.\n+\t* testsuite/experimental/filesystem/operations/read_symlink.cc: New.\n+\n 2016-10-24  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tCross-port exception-safety and move fixes of std::any to"}, {"sha": "6f76053d57177cbbb9cee6b1b9db4213fe46e925", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=b3dec9e57e6960cae54187b7fa416052c8e32e19", "patch": "@@ -361,6 +361,11 @@ namespace\n \t  from_st = &st2;\n       }\n     f = make_file_status(*from_st);\n+    if (!is_regular_file(f))\n+      {\n+\tec = std::make_error_code(std::errc::not_supported);\n+\treturn false;\n+      }\n \n     using opts = fs::copy_options;\n \n@@ -392,6 +397,11 @@ namespace\n \t    ec = std::make_error_code(std::errc::file_exists);\n \t    return false;\n \t  }\n+\telse if (!is_regular_file(t))\n+\t  {\n+\t    ec = std::make_error_code(std::errc::not_supported);\n+\t    return false;\n+\t  }\n       }\n \n     struct CloseFD {\n@@ -489,7 +499,8 @@ fs::copy(const path& from, const path& to, copy_options options,\n \n   file_status f, t;\n   stat_type from_st, to_st;\n-  // N4099 doesn't check copy_symlinks here, but I think that's a defect.\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2681. filesystem::copy() cannot copy symlinks\n   if (use_lstat || copy_symlinks\n       ? ::lstat(from.c_str(), &from_st)\n       : ::stat(from.c_str(), &from_st))\n@@ -556,6 +567,10 @@ fs::copy(const path& from, const path& to, copy_options options,\n \t  do_copy_file(from, to, options, &from_st, ptr,  ec);\n \t}\n     }\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2682. filesystem::copy() won't create a symlink to a directory\n+  else if (is_directory(f) && create_symlinks)\n+    ec = std::make_error_code(errc::is_a_directory);\n   else if (is_directory(f) && (is_set(options, copy_options::recursive)\n \t\t\t       || options == copy_options::none))\n     {\n@@ -568,7 +583,10 @@ fs::copy(const path& from, const path& to, copy_options options,\n       for (const directory_entry& x : directory_iterator(from))\n \tcopy(x.path(), to/x.path().filename(), options, ec);\n     }\n-  // \"Otherwise no effects.\" (should ec.clear() be called?)\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2683. filesystem::copy() says \"no effects\"\n+  else\n+    ec.clear();\n }\n \n bool\n@@ -1168,6 +1186,7 @@ fs::path fs::read_symlink(const path& p, error_code& ec)\n       ec.assign(errno, std::generic_category());\n       return {};\n     }\n+  ec.clear();\n   return path{buf.data(), buf.data()+len};\n #else\n   ec = std::make_error_code(std::errc::not_supported);"}, {"sha": "2cfb1c1fea4e0981b5685d637eade03072bf3b13", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/copy.cc", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fcopy.cc?ref=b3dec9e57e6960cae54187b7fa416052c8e32e19", "patch": "@@ -22,7 +22,6 @@\n // 15.3 Copy [fs.op.copy]\n \n #include <experimental/filesystem>\n-#include <fstream>\n #include <testsuite_fs.h>\n #include <testsuite_hooks.h>\n \n@@ -43,14 +42,25 @@ test01()\n   fs::copy(\".\", \".\", fs::copy_options::none, ec);\n   VERIFY( ec );\n \n-  std::ofstream{p.native()};\n+  __gnu_test::scoped_file f(p);\n   VERIFY( fs::is_directory(\".\") );\n   VERIFY( fs::is_regular_file(p) );\n   ec.clear();\n   fs::copy(\".\", p, fs::copy_options::none, ec);\n   VERIFY( ec );\n \n-  remove(p, ec);\n+  auto to = __gnu_test::nonexistent_path();\n+  ec.clear();\n+  auto opts = fs::copy_options::create_symlinks;\n+  fs::copy(\"/\", to, opts, ec);\n+  VERIFY( ec == std::make_error_code(std::errc::is_a_directory) );\n+  VERIFY( !exists(to) );\n+\n+  ec.clear();\n+  opts != fs::copy_options::recursive;\n+  fs::copy(\"/\", to, opts, ec);\n+  VERIFY( ec == std::make_error_code(std::errc::is_a_directory) );\n+  VERIFY( !exists(to) );\n }\n \n // Test is_symlink(f) case.\n@@ -59,29 +69,35 @@ test02()\n {\n   auto from = __gnu_test::nonexistent_path();\n   auto to = __gnu_test::nonexistent_path();\n-  std::error_code ec;\n+  std::error_code ec, bad = std::make_error_code(std::errc::invalid_argument);\n \n+  ec = bad;\n   fs::create_symlink(\".\", from, ec);\n   VERIFY( !ec );\n   VERIFY( fs::exists(from) );\n \n+  ec = bad;\n   fs::copy(from, to, fs::copy_options::skip_symlinks, ec);\n   VERIFY( !ec );\n   VERIFY( !fs::exists(to) );\n \n+  ec = bad;\n   fs::copy(from, to, fs::copy_options::skip_symlinks, ec);\n   VERIFY( !ec );\n   VERIFY( !fs::exists(to) );\n \n+  ec = bad;\n   fs::copy(from, to,\n            fs::copy_options::skip_symlinks|fs::copy_options::copy_symlinks,\n            ec);\n   VERIFY( !ec );\n   VERIFY( !fs::exists(to) );\n \n+  ec = bad;\n   fs::copy(from, to, fs::copy_options::copy_symlinks, ec);\n   VERIFY( !ec );\n   VERIFY( fs::exists(to) );\n+  VERIFY( is_symlink(to) );\n \n   fs::copy(from, to, fs::copy_options::copy_symlinks, ec);\n   VERIFY( ec );\n@@ -129,10 +145,10 @@ void\n test05()\n {\n   auto to = __gnu_test::nonexistent_path();\n-  std::error_code ec;\n+  std::error_code ec = std::make_error_code(std::errc::invalid_argument);\n \n-  fs::copy(\"/\", to, fs::copy_options::create_symlinks, ec);\n-  VERIFY( !ec );\n+  fs::copy(\"/\", to, fs::copy_options::copy_symlinks, ec);\n+  VERIFY( !ec );  // Previous value should be cleared (LWG 2683)\n }\n \n int"}, {"sha": "c4137bd9369f09cc293bec74285e75996d353166", "filename": "libstdc++-v3/testsuite/experimental/filesystem/operations/read_symlink.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3dec9e57e6960cae54187b7fa416052c8e32e19/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Ffilesystem%2Foperations%2Fread_symlink.cc?ref=b3dec9e57e6960cae54187b7fa416052c8e32e19", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-lstdc++fs\" }\n+// { dg-do run { target c++11 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+#include <experimental/filesystem>\n+#include <testsuite_hooks.h>\n+#include <testsuite_fs.h>\n+\n+namespace fs = std::experimental::filesystem;\n+\n+void\n+test01()\n+{\n+  auto p = __gnu_test::nonexistent_path();\n+  std::error_code ec;\n+\n+  read_symlink(p, ec);\n+  VERIFY( ec );\n+\n+  fs::path tgt = \".\";\n+  create_symlink(tgt, p);\n+\n+  auto result = read_symlink(p, ec);\n+  VERIFY( !ec );\n+  VERIFY( result == tgt );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}