{"sha": "f51618f301664d02cc41205f1386c0c9b9a29a54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUxNjE4ZjMwMTY2NGQwMmNjNDEyMDVmMTM4NmMwYzliOWEyOWE1NA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-04-29T10:27:09Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-06-22T01:35:16Z"}, "message": "Optimize vpexpand* to mask mov when mask have all ones in it's lower part (including 0 and -1).\n\ngcc/ChangeLog:\n\n\tPR target/100267\n\t* config/i386/i386-builtin.def (BDESC): Adjust builtin name.\n\t* config/i386/sse.md (<avx512>_expand<mode>_mask): Rename to ..\n\t(expand<mode>_mask): this ..\n\t(*expand<mode>_mask): New pre_reload splitter to transform\n\tv{,p}expand* to vmov* when mask is zero, all ones, or has all\n\tones in it's lower part, otherwise still generate\n\tv{,p}expand*.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/100267\n\t* gcc.target/i386/avx512bw-pr100267-1.c: New test.\n\t* gcc.target/i386/avx512bw-pr100267-b-2.c: New test.\n\t* gcc.target/i386/avx512bw-pr100267-d-2.c: New test.\n\t* gcc.target/i386/avx512bw-pr100267-q-2.c: New test.\n\t* gcc.target/i386/avx512bw-pr100267-w-2.c: New test.\n\t* gcc.target/i386/avx512f-pr100267-1.c: New test.\n\t* gcc.target/i386/avx512f-pr100267-pd-2.c: New test.\n\t* gcc.target/i386/avx512f-pr100267-ps-2.c: New test.\n\t* gcc.target/i386/avx512vl-pr100267-1.c: New test.\n\t* gcc.target/i386/avx512vl-pr100267-pd-2.c: New test.\n\t* gcc.target/i386/avx512vl-pr100267-ps-2.c: New test.\n\t* gcc.target/i386/avx512vlbw-pr100267-1.c: New test.\n\t* gcc.target/i386/avx512vlbw-pr100267-b-2.c: New test.\n\t* gcc.target/i386/avx512vlbw-pr100267-d-2.c: New test.\n\t* gcc.target/i386/avx512vlbw-pr100267-q-2.c: New test.\n\t* gcc.target/i386/avx512vlbw-pr100267-w-2.c: New test.", "tree": {"sha": "2a091bc0e684c4cbb1bc40941c31fdac76fb40ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a091bc0e684c4cbb1bc40941c31fdac76fb40ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f51618f301664d02cc41205f1386c0c9b9a29a54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51618f301664d02cc41205f1386c0c9b9a29a54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f51618f301664d02cc41205f1386c0c9b9a29a54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f51618f301664d02cc41205f1386c0c9b9a29a54/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6efffa552cee6a20a58c91e5f41466c5715d73d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6efffa552cee6a20a58c91e5f41466c5715d73d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6efffa552cee6a20a58c91e5f41466c5715d73d"}], "stats": {"total": 945, "additions": 920, "deletions": 25}, "files": [{"sha": "31df3a613dd3fd361d96229d324aaab57f2a4bf4", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -204,13 +204,13 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressstorev16sf_mask, \"__\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressstorev16si_mask, \"__builtin_ia32_compressstoresi512_mask\", IX86_BUILTIN_PCOMPRESSDSTORE512, UNKNOWN, (int) VOID_FTYPE_PV16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressstorev8df_mask, \"__builtin_ia32_compressstoredf512_mask\", IX86_BUILTIN_COMPRESSPDSTORE512, UNKNOWN, (int) VOID_FTYPE_PV8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressstorev8di_mask, \"__builtin_ia32_compressstoredi512_mask\", IX86_BUILTIN_PCOMPRESSQSTORE512, UNKNOWN, (int) VOID_FTYPE_PV8DI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16sf_mask, \"__builtin_ia32_expandloadsf512_mask\", IX86_BUILTIN_EXPANDPSLOAD512, UNKNOWN, (int) V16SF_FTYPE_PCV16SF_V16SF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv16sf_mask, \"__builtin_ia32_expandloadsf512_mask\", IX86_BUILTIN_EXPANDPSLOAD512, UNKNOWN, (int) V16SF_FTYPE_PCV16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16sf_maskz, \"__builtin_ia32_expandloadsf512_maskz\", IX86_BUILTIN_EXPANDPSLOAD512Z, UNKNOWN, (int) V16SF_FTYPE_PCV16SF_V16SF_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16si_mask, \"__builtin_ia32_expandloadsi512_mask\", IX86_BUILTIN_PEXPANDDLOAD512, UNKNOWN, (int) V16SI_FTYPE_PCV16SI_V16SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv16si_mask, \"__builtin_ia32_expandloadsi512_mask\", IX86_BUILTIN_PEXPANDDLOAD512, UNKNOWN, (int) V16SI_FTYPE_PCV16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16si_maskz, \"__builtin_ia32_expandloadsi512_maskz\", IX86_BUILTIN_PEXPANDDLOAD512Z, UNKNOWN, (int) V16SI_FTYPE_PCV16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8df_mask, \"__builtin_ia32_expandloaddf512_mask\", IX86_BUILTIN_EXPANDPDLOAD512, UNKNOWN, (int) V8DF_FTYPE_PCV8DF_V8DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv8df_mask, \"__builtin_ia32_expandloaddf512_mask\", IX86_BUILTIN_EXPANDPDLOAD512, UNKNOWN, (int) V8DF_FTYPE_PCV8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8df_maskz, \"__builtin_ia32_expandloaddf512_maskz\", IX86_BUILTIN_EXPANDPDLOAD512Z, UNKNOWN, (int) V8DF_FTYPE_PCV8DF_V8DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8di_mask, \"__builtin_ia32_expandloaddi512_mask\", IX86_BUILTIN_PEXPANDQLOAD512, UNKNOWN, (int) V8DI_FTYPE_PCV8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv8di_mask, \"__builtin_ia32_expandloaddi512_mask\", IX86_BUILTIN_PEXPANDQLOAD512, UNKNOWN, (int) V8DI_FTYPE_PCV8DI_V8DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8di_maskz, \"__builtin_ia32_expandloaddi512_maskz\", IX86_BUILTIN_PEXPANDQLOAD512Z, UNKNOWN, (int) V8DI_FTYPE_PCV8DI_V8DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_loadv16si_mask, \"__builtin_ia32_loaddqusi512_mask\", IX86_BUILTIN_LOADDQUSI512, UNKNOWN, (int) V16SI_FTYPE_PCINT_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_loadv8di_mask, \"__builtin_ia32_loaddqudi512_mask\", IX86_BUILTIN_LOADDQUDI512, UNKNOWN, (int) V8DI_FTYPE_PCINT64_V8DI_UQI)\n@@ -337,14 +337,14 @@ BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressstorev4di_mask, \"_\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressstorev2di_mask, \"__builtin_ia32_compressstoredi128_mask\", IX86_BUILTIN_PCOMPRESSQSTORE128, UNKNOWN, (int) VOID_FTYPE_PV2DI_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressstorev8si_mask, \"__builtin_ia32_compressstoresi256_mask\", IX86_BUILTIN_PCOMPRESSDSTORE256, UNKNOWN, (int) VOID_FTYPE_PV8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressstorev4si_mask, \"__builtin_ia32_compressstoresi128_mask\", IX86_BUILTIN_PCOMPRESSDSTORE128, UNKNOWN, (int) VOID_FTYPE_PV4SI_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4df_mask, \"__builtin_ia32_expandloaddf256_mask\", IX86_BUILTIN_EXPANDPDLOAD256, UNKNOWN, (int) V4DF_FTYPE_PCV4DF_V4DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2df_mask, \"__builtin_ia32_expandloaddf128_mask\", IX86_BUILTIN_EXPANDPDLOAD128, UNKNOWN, (int) V2DF_FTYPE_PCV2DF_V2DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8sf_mask, \"__builtin_ia32_expandloadsf256_mask\", IX86_BUILTIN_EXPANDPSLOAD256, UNKNOWN, (int) V8SF_FTYPE_PCV8SF_V8SF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4sf_mask, \"__builtin_ia32_expandloadsf128_mask\", IX86_BUILTIN_EXPANDPSLOAD128, UNKNOWN, (int) V4SF_FTYPE_PCV4SF_V4SF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4di_mask, \"__builtin_ia32_expandloaddi256_mask\", IX86_BUILTIN_PEXPANDQLOAD256, UNKNOWN, (int) V4DI_FTYPE_PCV4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2di_mask, \"__builtin_ia32_expandloaddi128_mask\", IX86_BUILTIN_PEXPANDQLOAD128, UNKNOWN, (int) V2DI_FTYPE_PCV2DI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8si_mask, \"__builtin_ia32_expandloadsi256_mask\", IX86_BUILTIN_PEXPANDDLOAD256, UNKNOWN, (int) V8SI_FTYPE_PCV8SI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4si_mask, \"__builtin_ia32_expandloadsi128_mask\", IX86_BUILTIN_PEXPANDDLOAD128, UNKNOWN, (int) V4SI_FTYPE_PCV4SI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4df_mask, \"__builtin_ia32_expandloaddf256_mask\", IX86_BUILTIN_EXPANDPDLOAD256, UNKNOWN, (int) V4DF_FTYPE_PCV4DF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv2df_mask, \"__builtin_ia32_expandloaddf128_mask\", IX86_BUILTIN_EXPANDPDLOAD128, UNKNOWN, (int) V2DF_FTYPE_PCV2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv8sf_mask, \"__builtin_ia32_expandloadsf256_mask\", IX86_BUILTIN_EXPANDPSLOAD256, UNKNOWN, (int) V8SF_FTYPE_PCV8SF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4sf_mask, \"__builtin_ia32_expandloadsf128_mask\", IX86_BUILTIN_EXPANDPSLOAD128, UNKNOWN, (int) V4SF_FTYPE_PCV4SF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4di_mask, \"__builtin_ia32_expandloaddi256_mask\", IX86_BUILTIN_PEXPANDQLOAD256, UNKNOWN, (int) V4DI_FTYPE_PCV4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv2di_mask, \"__builtin_ia32_expandloaddi128_mask\", IX86_BUILTIN_PEXPANDQLOAD128, UNKNOWN, (int) V2DI_FTYPE_PCV2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv8si_mask, \"__builtin_ia32_expandloadsi256_mask\", IX86_BUILTIN_PEXPANDDLOAD256, UNKNOWN, (int) V8SI_FTYPE_PCV8SI_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4si_mask, \"__builtin_ia32_expandloadsi128_mask\", IX86_BUILTIN_PEXPANDDLOAD128, UNKNOWN, (int) V4SI_FTYPE_PCV4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4df_maskz, \"__builtin_ia32_expandloaddf256_maskz\", IX86_BUILTIN_EXPANDPDLOAD256Z, UNKNOWN, (int) V4DF_FTYPE_PCV4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2df_maskz, \"__builtin_ia32_expandloaddf128_maskz\", IX86_BUILTIN_EXPANDPDLOAD128Z, UNKNOWN, (int) V2DF_FTYPE_PCV2DF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8sf_maskz, \"__builtin_ia32_expandloadsf256_maskz\", IX86_BUILTIN_EXPANDPSLOAD256Z, UNKNOWN, (int) V8SF_FTYPE_PCV8SF_V8SF_UQI)\n@@ -1342,9 +1342,9 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_floatv8siv8df2_mask, \"__builtin_ia32\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vcvtps2ph512_mask,  \"__builtin_ia32_vcvtps2ph512_mask\", IX86_BUILTIN_CVTPS2PH512, UNKNOWN, (int) V16HI_FTYPE_V16SF_INT_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_ufloatv8siv8df2_mask, \"__builtin_ia32_cvtudq2pd512_mask\", IX86_BUILTIN_CVTUDQ2PD512, UNKNOWN, (int) V8DF_FTYPE_V8SI_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_cvtusi2sd32, \"__builtin_ia32_cvtusi2sd32\", IX86_BUILTIN_CVTUSI2SD32, UNKNOWN, (int) V2DF_FTYPE_V2DF_UINT)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv8df_mask, \"__builtin_ia32_expanddf512_mask\", IX86_BUILTIN_EXPANDPD512, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8df_maskz, \"__builtin_ia32_expanddf512_maskz\", IX86_BUILTIN_EXPANDPD512Z, UNKNOWN, (int) V8DF_FTYPE_V8DF_V8DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16sf_mask, \"__builtin_ia32_expandsf512_mask\", IX86_BUILTIN_EXPANDPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv16sf_mask, \"__builtin_ia32_expandsf512_mask\", IX86_BUILTIN_EXPANDPS512, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16sf_maskz, \"__builtin_ia32_expandsf512_maskz\", IX86_BUILTIN_EXPANDPS512Z, UNKNOWN, (int) V16SF_FTYPE_V16SF_V16SF_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vextractf32x4_mask, \"__builtin_ia32_extractf32x4_mask\", IX86_BUILTIN_EXTRACTF32X4, UNKNOWN, (int) V4SF_FTYPE_V16SF_INT_V4SF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_vextractf64x4_mask, \"__builtin_ia32_extractf64x4_mask\", IX86_BUILTIN_EXTRACTF64X4, UNKNOWN, (int) V4DF_FTYPE_V8DF_INT_V4DF_UQI)\n@@ -1381,9 +1381,9 @@ BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_gtv16si3_mask, \"__builtin_ia\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_gtv8di3_mask, \"__builtin_ia32_pcmpgtq512_mask\", IX86_BUILTIN_PCMPGTQ512_MASK, UNKNOWN, (int) UQI_FTYPE_V8DI_V8DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressv16si_mask, \"__builtin_ia32_compresssi512_mask\", IX86_BUILTIN_PCOMPRESSD512, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_compressv8di_mask, \"__builtin_ia32_compressdi512_mask\", IX86_BUILTIN_PCOMPRESSQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16si_mask, \"__builtin_ia32_expandsi512_mask\", IX86_BUILTIN_PEXPANDD512, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv16si_mask, \"__builtin_ia32_expandsi512_mask\", IX86_BUILTIN_PEXPANDD512, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv16si_maskz, \"__builtin_ia32_expandsi512_maskz\", IX86_BUILTIN_PEXPANDD512Z, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_UHI)\n-BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8di_mask, \"__builtin_ia32_expanddi512_mask\", IX86_BUILTIN_PEXPANDQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_expandv8di_mask, \"__builtin_ia32_expanddi512_mask\", IX86_BUILTIN_PEXPANDQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_avx512f_expandv8di_maskz, \"__builtin_ia32_expanddi512_maskz\", IX86_BUILTIN_PEXPANDQ512Z, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_smaxv16si3_mask, \"__builtin_ia32_pmaxsd512_mask\", IX86_BUILTIN_PMAXSD512, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_V16SI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512F, 0, CODE_FOR_smaxv8di3_mask, \"__builtin_ia32_pmaxsq512_mask\", IX86_BUILTIN_PMAXSQ512, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_V8DI_UQI)\n@@ -2187,14 +2187,14 @@ BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressv4di_mask, \"__buil\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressv2di_mask, \"__builtin_ia32_compressdi128_mask\", IX86_BUILTIN_PCOMPRESSQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressv8si_mask, \"__builtin_ia32_compresssi256_mask\", IX86_BUILTIN_PCOMPRESSD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_compressv4si_mask, \"__builtin_ia32_compresssi128_mask\", IX86_BUILTIN_PCOMPRESSD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4df_mask, \"__builtin_ia32_expanddf256_mask\", IX86_BUILTIN_EXPANDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2df_mask, \"__builtin_ia32_expanddf128_mask\", IX86_BUILTIN_EXPANDPD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8sf_mask, \"__builtin_ia32_expandsf256_mask\", IX86_BUILTIN_EXPANDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4sf_mask, \"__builtin_ia32_expandsf128_mask\", IX86_BUILTIN_EXPANDPS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4di_mask, \"__builtin_ia32_expanddi256_mask\", IX86_BUILTIN_PEXPANDQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2di_mask, \"__builtin_ia32_expanddi128_mask\", IX86_BUILTIN_PEXPANDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8si_mask, \"__builtin_ia32_expandsi256_mask\", IX86_BUILTIN_PEXPANDD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UQI)\n-BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4si_mask, \"__builtin_ia32_expandsi128_mask\", IX86_BUILTIN_PEXPANDD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4df_mask, \"__builtin_ia32_expanddf256_mask\", IX86_BUILTIN_EXPANDPD256, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv2df_mask, \"__builtin_ia32_expanddf128_mask\", IX86_BUILTIN_EXPANDPD128, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv8sf_mask, \"__builtin_ia32_expandsf256_mask\", IX86_BUILTIN_EXPANDPS256, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4sf_mask, \"__builtin_ia32_expandsf128_mask\", IX86_BUILTIN_EXPANDPS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4di_mask, \"__builtin_ia32_expanddi256_mask\", IX86_BUILTIN_PEXPANDQ256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv2di_mask, \"__builtin_ia32_expanddi128_mask\", IX86_BUILTIN_PEXPANDQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv8si_mask, \"__builtin_ia32_expandsi256_mask\", IX86_BUILTIN_PEXPANDD256, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_expandv4si_mask, \"__builtin_ia32_expandsi128_mask\", IX86_BUILTIN_PEXPANDD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv4df_maskz, \"__builtin_ia32_expanddf256_maskz\", IX86_BUILTIN_EXPANDPD256Z, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv2df_maskz, \"__builtin_ia32_expanddf128_maskz\", IX86_BUILTIN_EXPANDPD128Z, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, 0, CODE_FOR_avx512vl_expandv8sf_maskz, \"__builtin_ia32_expandsf256_maskz\", IX86_BUILTIN_EXPANDPS256Z, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_UQI)"}, {"sha": "f5f9403db4411eceb24cd9aac3d975906ba63272", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -699,6 +699,17 @@\n    (V4DI \"TARGET_AVX512VL\") (V4DF \"TARGET_AVX512VL\")\n    (V4SI \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n    (V2DI \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")])\n+(define_mode_iterator VI12_VI48F_AVX512VLBW\n+  [(V16SI \"TARGET_AVX512F\") (V16SF \"TARGET_AVX512F\")\n+   (V8DI \"TARGET_AVX512F\") (V8DF \"TARGET_AVX512F\")\n+   (V8SI \"TARGET_AVX512VL\") (V8SF \"TARGET_AVX512VL\")\n+   (V4DI \"TARGET_AVX512VL\") (V4DF \"TARGET_AVX512VL\")\n+   (V4SI \"TARGET_AVX512VL\") (V4SF \"TARGET_AVX512VL\")\n+   (V2DI \"TARGET_AVX512VL\") (V2DF \"TARGET_AVX512VL\")\n+   (V64QI \"TARGET_AVX512BW\") (V16QI \"TARGET_AVX512VL\")\n+   (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\") (V32HI \"TARGET_AVX512BW\")\n+   (V16HI \"TARGET_AVX512VL\") (V8HI \"TARGET_AVX512VL\")])\n+\n (define_mode_iterator VI48F_256 [V8SI V8SF V4DI V4DF])\n \n (define_mode_iterator VF_AVX512\n@@ -23009,7 +23020,7 @@\n   \"TARGET_AVX512F\"\n   \"operands[2] = CONST0_RTX (<MODE>mode);\")\n \n-(define_insn \"<avx512>_expand<mode>_mask\"\n+(define_insn \"expand<mode>_mask\"\n   [(set (match_operand:VI48F 0 \"register_operand\" \"=v,v\")\n \t(unspec:VI48F\n \t  [(match_operand:VI48F 1 \"nonimmediate_operand\" \"v,m\")\n@@ -23037,6 +23048,62 @@\n    (set_attr \"memory\" \"none,load\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*expand<mode>_mask\"\n+  [(set (match_operand:VI12_VI48F_AVX512VLBW 0 \"register_operand\")\n+\t(unspec:VI12_VI48F_AVX512VLBW\n+\t  [(match_operand:VI12_VI48F_AVX512VLBW 1 \"nonimmediate_operand\")\n+\t   (match_operand:VI12_VI48F_AVX512VLBW 2 \"nonimm_or_0_operand\")\n+\t   (match_operand 3 \"const_int_operand\")]\n+\t  UNSPEC_EXPAND))]\n+  \"ix86_pre_reload_split ()\n+   && (TARGET_AVX512VBMI2 || GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) >= 4)\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  unsigned HOST_WIDE_INT mask = INTVAL (operands[3]);\n+  bool has_zero = false;\n+  unsigned n = GET_MODE_NUNITS (<MODE>mode), i;\n+  unsigned ones = 0;\n+\n+  /* If all ones bits is in mask's lower part,\n+     get number of ones and assign it to ONES.  */\n+  for (i = 0; i != n; i++)\n+    {\n+      if ((mask & HOST_WIDE_INT_1U << i) && has_zero)\n+\tbreak;\n+\n+      /* Record first zero bit.  */\n+      if (!(mask & HOST_WIDE_INT_1U << i) && !has_zero)\n+\t{\n+\t  has_zero = true;\n+\t  ones = i;\n+\t}\n+    }\n+\n+  if (!has_zero)\n+    ones = n;\n+\n+  if (i != n || (ones != 0 && ones != n))\n+    {\n+      rtx reg = gen_reg_rtx (<avx512fmaskmode>mode);\n+      emit_move_insn (reg, operands[3]);\n+      enum insn_code icode;\n+      if (i == n)\n+      /* For masks with all one bits in it's lower part,\n+\t we can transform v{,p}expand* to vmovdq* with\n+\t mask operand.  */\n+\ticode = CODE_FOR_<avx512>_load<mode>_mask;\n+      else\n+\ticode = CODE_FOR_expand<mode>_mask;\n+      emit_insn (GEN_FCN (icode) (operands[0], operands[1], operands[2], reg));\n+    }\n+  else\n+    /* For ALL_MASK_ONES or CONST0_RTX mask, transform it to simple mov.  */\n+    emit_move_insn (operands[0], ones ? operands[1] : operands[2]);\n+  DONE;\n+})\n+\n (define_expand \"expand<mode>_maskz\"\n   [(set (match_operand:VI12_AVX512VLBW 0 \"register_operand\")\n \t(unspec:VI12_AVX512VLBW"}, {"sha": "ce83d63bc73ca27fc4672831ff1ed8bba20c401f", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr100267-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-1.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vbmi2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+#include <immintrin.h>\n+\n+char *pi8;\n+short *pi16;\n+volatile __m512i xi16, xi8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  xi8 = _mm512_mask_expand_epi8 (xi8, 0, xi8);\n+  xi8 = _mm512_mask_expand_epi8 (xi8, -1, xi8);\n+  xi8 = _mm512_mask_expand_epi8 (xi8, (1 << 8) - 1, xi8);\n+  xi8 = _mm512_mask_expand_epi8 (xi8, (1 << 8) + 1, xi8);\n+\n+  xi8 = _mm512_mask_expandloadu_epi8 (xi8, 0, pi8);\n+  xi8 = _mm512_mask_expandloadu_epi8 (xi8, -1, pi8);\n+  xi8 = _mm512_mask_expandloadu_epi8 (xi8, (1 << 6) - 1, pi8);\n+  xi8 = _mm512_mask_expandloadu_epi8 (xi8, (1 << 6) + 3, pi8);\n+\n+  xi16 = _mm512_mask_expand_epi16 (xi16, 0, xi16);\n+  xi16 = _mm512_mask_expand_epi16 (xi16, -1, xi16);\n+  xi16 = _mm512_mask_expand_epi16 (xi16, (1 << 3) - 1, xi16);\n+  xi16 = _mm512_mask_expand_epi16 (xi16, (1 << 3) + 2, xi16);\n+\n+  xi16 = _mm512_mask_expandloadu_epi16 (xi16, 0, pi16);\n+  xi16 = _mm512_mask_expandloadu_epi16 (xi16,  -1, pi16);\n+  xi16 = _mm512_mask_expandloadu_epi16 (xi16, (1 << 7) - 1, pi16);\n+  xi16 = _mm512_mask_expandloadu_epi16 (xi16, (1 << 7) + 7, pi16);\n+}"}, {"sha": "424b485a203d8c27968a8fd695b151867c6f8783", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr100267-b-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-b-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 8)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (char *s, char *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_b) s1, res1, res2, res3, res4, res5, res6, res7, res8;\n+  MASK_TYPE mask = (1 << (SIZE >> 2) - 1) - 1;\n+  char s2[SIZE];\n+  char res_ref1[SIZE];\n+  char res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 12345 * (i + 200) * sign;\n+      s2[i] = 67890 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res2.x = INTRINSIC (_mask_expand_epi8) (res1.x, MASK_ALL_ONES, s1.x);\n+  res3.x = INTRINSIC (_mask_expand_epi8) (res1.x, 0, s1.x);\n+  res4.x = INTRINSIC (_mask_expand_epi8) (res1.x, mask, s1.x);\n+  res6.x = INTRINSIC (_mask_expandloadu_epi8) (res5.x, MASK_ALL_ONES, s2);\n+  res7.x = INTRINSIC (_mask_expandloadu_epi8) (res5.x, 0, s2);\n+  res8.x = INTRINSIC (_mask_expandloadu_epi8) (res5.x, mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res2, s1.a))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res3, res1.a))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res4, res_ref1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res6, s2))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res7, res5.a))\n+    abort ();\n+\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_b) (res8, res_ref2))\n+    abort ();\n+}"}, {"sha": "24790b20cf15f442958737c15dd26f8cb060710a", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr100267-d-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-d-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *s, int *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_d) s1, res1, res2, res3, res4, res5, res6, res7, res8;\n+  MASK_TYPE mask = (1 << SIZE - 1) - 1;\n+  int s2[SIZE];\n+  int res_ref1[SIZE];\n+  int res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 12345 * (i + 200) * sign;\n+      s2[i] = 67890 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res2.x = INTRINSIC (_mask_expand_epi32) (res1.x, MASK_ALL_ONES, s1.x);\n+  res3.x = INTRINSIC (_mask_expand_epi32) (res1.x, 0, s1.x);\n+  res4.x = INTRINSIC (_mask_expand_epi32) (res1.x, mask, s1.x);\n+  res6.x = INTRINSIC (_mask_expandloadu_epi32) (res5.x, MASK_ALL_ONES, s2);\n+  res7.x = INTRINSIC (_mask_expandloadu_epi32) (res5.x, 0, s2);\n+  res8.x = INTRINSIC (_mask_expandloadu_epi32) (res5.x, mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, s1.a))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res1.a))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res4, res_ref1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res6, s2))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res7, res5.a))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res8, res_ref2))\n+    abort ();\n+}"}, {"sha": "119b50e6f7946b0027de59f7d54f43de86bd22fc", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr100267-q-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-q-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (long long *s, long long *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_q) s1, res1, res2, res3, res4, res5, res6, res7, res8;\n+  MASK_TYPE mask = (1 << SIZE - 1) - 1;\n+  long long s2[SIZE];\n+  long long res_ref1[SIZE];\n+  long long res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 12345 * (i + 200) * sign;\n+      s2[i] = 67890 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res2.x = INTRINSIC (_mask_expand_epi64) (res1.x, MASK_ALL_ONES, s1.x);\n+  res3.x = INTRINSIC (_mask_expand_epi64) (res1.x, 0, s1.x);\n+  res4.x = INTRINSIC (_mask_expand_epi64) (res1.x, mask, s1.x);\n+  res6.x = INTRINSIC (_mask_expandloadu_epi64) (res5.x, MASK_ALL_ONES, s2);\n+  res7.x = INTRINSIC (_mask_expandloadu_epi64) (res5.x, 0, s2);\n+  res8.x = INTRINSIC (_mask_expandloadu_epi64) (res5.x, mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, s1.a))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res1.a))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res4, res_ref1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res6, s2))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res7, res5.a))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res8, res_ref2))\n+    abort ();\n+}"}, {"sha": "926e04d4df6ac5b343aae244fc2e4cef69f8b142", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr100267-w-2.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr100267-w-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (short *s, short *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & ((long long)1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, i_w) s1, res1, res2, res3, res4, res5, res6, res7, res8;\n+  MASK_TYPE mask = (1 << (SIZE >> 2) - 1) - 1;\n+  short s2[SIZE];\n+  short res_ref1[SIZE];\n+  short res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 12345 * (i + 200) * sign;\n+      s2[i] = 67890 * (i + 300) * sign;\n+      res1.a[i] = DEFAULT_VALUE;\n+      res5.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res2.x = INTRINSIC (_mask_expand_epi16) (res1.x, MASK_ALL_ONES, s1.x);\n+  res3.x = INTRINSIC (_mask_expand_epi16) (res1.x, 0, s1.x);\n+  res4.x = INTRINSIC (_mask_expand_epi16) (res1.x, mask, s1.x);\n+  res6.x = INTRINSIC (_mask_expandloadu_epi16) (res5.x, MASK_ALL_ONES, s2);\n+  res7.x = INTRINSIC (_mask_expandloadu_epi16) (res5.x, 0, s2);\n+  res8.x = INTRINSIC (_mask_expandloadu_epi16) (res5.x, mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res2, s1.a))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res3, res1.a))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res4, res_ref1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res6, s2))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res7, res5.a))\n+    abort ();\n+\n+  MASK_MERGE (i_w) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_w) (res8, res_ref2))\n+    abort ();\n+}"}, {"sha": "5eb6de531c21b3c1d30d14a918aae51c1b2978be", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr100267-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-1.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandd\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandq\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+#include <immintrin.h>\n+\n+int *pi32;\n+long long *pi64;\n+double *pd;\n+float *pf;\n+volatile __m512i xi32, xi64;\n+volatile __m512d xd;\n+volatile __m512 xf;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  xi32 = _mm512_mask_expand_epi32 (xi32, 0, xi32);\n+  xi32 = _mm512_mask_expand_epi32 (xi32, -1, xi32);\n+  xi32 = _mm512_mask_expand_epi32 (xi32, (1 << 8) - 1, xi32);\n+  xi32 = _mm512_mask_expand_epi32 (xi32, (1 << 8) + 1, xi32);\n+\n+  xi32 = _mm512_mask_expandloadu_epi32 (xi32, 0, pi32);\n+  xi32 = _mm512_mask_expandloadu_epi32 (xi32, (1 << 16) - 1, pi32);\n+  xi32 = _mm512_mask_expandloadu_epi32 (xi32, (1 << 6) - 1, pi32);\n+  xi32 = _mm512_mask_expandloadu_epi32 (xi32, (1 << 6) + 3, pi32);\n+\n+  xi64 = _mm512_mask_expand_epi64 (xi64, 0, xi64);\n+  xi64 = _mm512_mask_expand_epi64 (xi64, -1, xi64);\n+  xi64 = _mm512_mask_expand_epi64 (xi64, (1 << 3) - 1, xi64);\n+  xi64 = _mm512_mask_expand_epi64 (xi64, (1 << 3) + 2, xi64);\n+\n+  xi64 = _mm512_mask_expandloadu_epi64 (xi64, 0, pi64);\n+  xi64 = _mm512_mask_expandloadu_epi64 (xi64, (1 << 8) - 1, pi64);\n+  xi64 = _mm512_mask_expandloadu_epi64 (xi64, (1 << 7) - 1, pi64);\n+  xi64 = _mm512_mask_expandloadu_epi64 (xi64, (1 << 7) + 7, pi64);\n+\n+  xf = _mm512_mask_expand_ps (xf, 0, xf);\n+  xf = _mm512_mask_expand_ps (xf, (1 << 16) - 1, xf);\n+  xf = _mm512_mask_expand_ps (xf, (1 << 15) - 1, xf);\n+  xf = _mm512_mask_expand_ps (xf, (1 << 14) + 3, xf);\n+\n+  xf = _mm512_mask_expandloadu_ps (xf, 0, pf);\n+  xf = _mm512_mask_expandloadu_ps (xf, -1, pf);\n+  xf = _mm512_mask_expandloadu_ps (xf, (1 << 13) - 1, pf);\n+  xf = _mm512_mask_expandloadu_ps (xf, (1 << 13) + 5, pf);\n+\n+  xd = _mm512_mask_expand_pd (xd, 0, xd);\n+  xd = _mm512_mask_expand_pd (xd, (1 << 8) - 1, xd);\n+  xd = _mm512_mask_expand_pd (xd, (1 << 4) - 1, xd);\n+  xd = _mm512_mask_expand_pd (xd, (1 << 4) + 1, xd);\n+\n+  xd = _mm512_mask_expandloadu_pd (xd, 0, pd);\n+  xd = _mm512_mask_expandloadu_pd (xd, -1, pd);\n+  xd = _mm512_mask_expandloadu_pd (xd, (1 << 5) - 1, pd);\n+  xd = _mm512_mask_expandloadu_pd (xd, (1 << 5), pd);\n+}"}, {"sha": "7d653e8e853e13d27e4ebf64ef9ddc64ba833ee2", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr100267-pd-2.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-pd-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (double *s, double *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, d) s1, res2, res3, res4, res5, res6, res7, res8, res9;\n+  MASK_TYPE mask = (1 << SIZE - 1) - 1;\n+  double s2[SIZE];\n+  double res_ref1[SIZE];\n+  double res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 123.456 * (i + 200) * sign;\n+      s2[i] = 789.012 * (i + 300) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res3.x = INTRINSIC (_mask_expand_pd) (res2.x, MASK_ALL_ONES, s1.x);\n+  res4.x = INTRINSIC (_mask_expand_pd) (res2.x, 0, s1.x);\n+  res5.x = INTRINSIC (_mask_expand_pd) (res2.x, mask, s1.x);\n+\n+  res7.x = INTRINSIC (_mask_expandloadu_pd) (res6.x, MASK_ALL_ONES, s2);\n+  res8.x = INTRINSIC (_mask_expandloadu_pd) (res6.x, 0, s2);\n+  res9.x = INTRINSIC (_mask_expandloadu_pd) (res6.x, mask, s2);\n+\n+\n+  /* no mask is the same as all ones mask.  */\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res3, s1.a))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res4, res2.a))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res5, res_ref1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res7, s2))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, d) (res8, res6.a))\n+    abort ();\n+\n+  MASK_MERGE (d) (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, d) (res9, res_ref2))\n+    abort ();\n+\n+}"}, {"sha": "40f0dde0c88de8cd052db2a2b68bb5c1125cc836", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr100267-ps-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr100267-ps-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#define AVX512F\n+\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (float *s, float *r, MASK_TYPE mask)\n+{\n+  int i, k;\n+\n+  for (i = 0, k = 0; i < SIZE; i++)\n+    {\n+      if (mask & (1 << i))\n+\tr[i] = s[k++];\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  UNION_TYPE (AVX512F_LEN, ) s1, res2, res3, res4, res5, res6, res7, res8, res9;\n+  MASK_TYPE mask = (1 << SIZE - 1) - 1;\n+  float s2[SIZE];\n+  float res_ref1[SIZE];\n+  float res_ref2[SIZE];\n+  int i, sign = 1;\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      s1.a[i] = 123.456 * (i + 200) * sign;\n+      s2[i] = 789.012 * (i + 300) * sign;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res6.a[i] = DEFAULT_VALUE;\n+      sign = -sign;\n+    }\n+\n+  res3.x = INTRINSIC (_mask_expand_ps) (res2.x, MASK_ALL_ONES, s1.x);\n+  res4.x = INTRINSIC (_mask_expand_ps) (res2.x, 0, s1.x);\n+  res5.x = INTRINSIC (_mask_expand_ps) (res2.x, mask, s1.x);\n+  res7.x = INTRINSIC (_mask_expandloadu_ps) (res6.x, MASK_ALL_ONES, s2);\n+  res8.x = INTRINSIC (_mask_expandloadu_ps) (res6.x, 0, s2);\n+  res9.x = INTRINSIC (_mask_expandloadu_ps) (res6.x, mask, s2);\n+\n+  CALC (s1.a, res_ref1, mask);\n+  CALC (s2, res_ref2, mask);\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res3, s1.a))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res4, res2.a))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref1, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res5, res_ref1))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res7, s2))\n+    abort ();\n+\n+  if (UNION_CHECK (AVX512F_LEN, ) (res8, res6.a))\n+    abort ();\n+\n+  MASK_MERGE () (res_ref2, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, ) (res9, res_ref2))\n+    abort ();\n+}"}, {"sha": "9ffd381f6c43cc37ca520029e9536ef606e5f743", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr100267-1.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-1.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandd\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandq\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+/* { dg-final { scan-assembler-times \"(?:vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}|blend\\[a-z]+\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+)(?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandd\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandq\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandpd\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vexpandps\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+/* { dg-final { scan-assembler-times \"(?:vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}|(?:blend\\[a-z]+|movsd)\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+)(?:\\n|\\[ \\\\t\\]+#)\"  4 } } */\n+\n+#include <immintrin.h>\n+\n+int *pi32;\n+long long *pi64;\n+double *pd;\n+float *pf;\n+volatile __m256i xi32, xi64;\n+volatile __m256d xd;\n+volatile __m256 xf;\n+\n+volatile __m128i xi32_128, xi64_128;\n+volatile __m128d xd_128;\n+volatile __m128 xf_128;\n+\n+void extern\n+avx512vl_test (void)\n+{\n+  xi32 = _mm256_mask_expand_epi32 (xi32, 0, xi32);\n+  xi32 = _mm256_mask_expand_epi32 (xi32, -1, xi32);\n+  xi32 = _mm256_mask_expand_epi32 (xi32, (1 << 4) - 1, xi32);\n+  xi32 = _mm256_mask_expand_epi32 (xi32, (1 << 4) + 1, xi32);\n+\n+  xi32 = _mm256_mask_expandloadu_epi32 (xi32, 0, pi32);\n+  xi32 = _mm256_mask_expandloadu_epi32 (xi32, (1 << 8) - 1, pi32);\n+  xi32 = _mm256_mask_expandloadu_epi32 (xi32, (1 << 6) - 1, pi32);\n+  xi32 = _mm256_mask_expandloadu_epi32 (xi32, (1 << 6) + 3, pi32);\n+\n+  xi64 = _mm256_mask_expand_epi64 (xi64, 0, xi64);\n+  xi64 = _mm256_mask_expand_epi64 (xi64, -1, xi64);\n+  xi64 = _mm256_mask_expand_epi64 (xi64, (1 << 3) - 1, xi64);\n+  xi64 = _mm256_mask_expand_epi64 (xi64, (1 << 3) + 2, xi64);\n+\n+  xi64 = _mm256_mask_expandloadu_epi64 (xi64, 0, pi64);\n+  xi64 = _mm256_mask_expandloadu_epi64 (xi64, (1 << 4) - 1, pi64);\n+  xi64 = _mm256_mask_expandloadu_epi64 (xi64, (1 << 2) - 1, pi64);\n+  xi64 = _mm256_mask_expandloadu_epi64 (xi64, (1 << 2), pi64);\n+\n+  xf = _mm256_mask_expand_ps (xf, 0, xf);\n+  xf = _mm256_mask_expand_ps (xf, (1 << 8) - 1, xf);\n+  xf = _mm256_mask_expand_ps (xf, (1 << 6) - 1, xf);\n+  xf = _mm256_mask_expand_ps (xf, (1 << 6) + 3, xf);\n+\n+  xf = _mm256_mask_expandloadu_ps (xf, 0, pf);\n+  xf = _mm256_mask_expandloadu_ps (xf, -1, pf);\n+  xf = _mm256_mask_expandloadu_ps (xf, (1 << 7) - 1, pf);\n+  xf = _mm256_mask_expandloadu_ps (xf, (1 << 7) + 5, pf);\n+\n+  xd = _mm256_mask_expand_pd (xd, 0, xd);\n+  xd = _mm256_mask_expand_pd (xd, (1 << 4) - 1, xd);\n+  xd = _mm256_mask_expand_pd (xd, (1 << 2) - 1, xd);\n+  xd = _mm256_mask_expand_pd (xd, (1 << 2), xd);\n+\n+  xd = _mm256_mask_expandloadu_pd (xd, 0, pd);\n+  xd = _mm256_mask_expandloadu_pd (xd, -1, pd);\n+  xd = _mm256_mask_expandloadu_pd (xd, (1 << 2) - 1, pd);\n+  xd = _mm256_mask_expandloadu_pd (xd, (1 << 2), pd);\n+\n+  xi32_128 = _mm_mask_expand_epi32 (xi32_128, 0, xi32_128);\n+  xi32_128 = _mm_mask_expand_epi32 (xi32_128, -1, xi32_128);\n+  xi32_128 = _mm_mask_expand_epi32 (xi32_128, (1 << 3) - 1, xi32_128);\n+  xi32_128 = _mm_mask_expand_epi32 (xi32_128, (1 << 3) + 1, xi32_128);\n+\n+  xi32_128 = _mm_mask_expandloadu_epi32 (xi32_128, 0, pi32);\n+  xi32_128 = _mm_mask_expandloadu_epi32 (xi32_128, (1 << 4) - 1, pi32);\n+  xi32_128 = _mm_mask_expandloadu_epi32 (xi32_128, (1 << 2) - 1, pi32);\n+  xi32_128 = _mm_mask_expandloadu_epi32 (xi32_128, (1 << 1) + 3, pi32);\n+\n+  xi64_128 = _mm_mask_expand_epi64 (xi64_128, 0, xi64_128);\n+  xi64_128 = _mm_mask_expand_epi64 (xi64_128, -1, xi64_128);\n+  xi64_128 = _mm_mask_expand_epi64 (xi64_128, (1 << 1) - 1, xi64_128);\n+  xi64_128 = _mm_mask_expand_epi64 (xi64_128, 2, xi64_128);\n+\n+  xi64_128 = _mm_mask_expandloadu_epi64 (xi64_128, 0, pi64);\n+  xi64_128 = _mm_mask_expandloadu_epi64 (xi64_128, 3, pi64);\n+  xi64_128 = _mm_mask_expandloadu_epi64 (xi64_128, 1, pi64);\n+  xi64_128 = _mm_mask_expandloadu_epi64 (xi64_128, 2, pi64);\n+\n+  xf_128 = _mm_mask_expand_ps (xf_128, 0, xf_128);\n+  xf_128 = _mm_mask_expand_ps (xf_128, (1 << 4) - 1, xf_128);\n+  xf_128 = _mm_mask_expand_ps (xf_128, (1 << 3) - 1, xf_128);\n+  xf_128 = _mm_mask_expand_ps (xf_128, (1 << 2), xf_128);\n+\n+  xf_128 = _mm_mask_expandloadu_ps (xf_128, 0, pf);\n+  xf_128 = _mm_mask_expandloadu_ps (xf_128, -1, pf);\n+  xf_128 = _mm_mask_expandloadu_ps (xf_128, (1 << 3) - 1, pf);\n+  xf_128 = _mm_mask_expandloadu_ps (xf_128, (1 << 1), pf);\n+\n+  xd_128 = _mm_mask_expand_pd (xd_128, 0, xd_128);\n+  xd_128 = _mm_mask_expand_pd (xd_128, (1 << 2) - 1, xd_128);\n+  xd_128 = _mm_mask_expand_pd (xd_128, 1, xd_128);\n+  xd_128 = _mm_mask_expand_pd (xd_128, 2, xd_128);\n+\n+  xd_128 = _mm_mask_expandloadu_pd (xd_128, 0, pd);\n+  xd_128 = _mm_mask_expandloadu_pd (xd_128, -1, pd);\n+  xd_128 = _mm_mask_expandloadu_pd (xd_128, 1, pd);\n+  xd_128 = _mm_mask_expandloadu_pd (xd_128, 2, pd);\n+}"}, {"sha": "e5f30374b519a58cdb105689f5df583548cc6ded", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr100267-pd-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-pd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-pd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-pd-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-pr100267-pd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-pr100267-pd-2.c\""}, {"sha": "0149a8aaa55e73695910e467d88133dcc668d459", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-pr100267-ps-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-ps-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-ps-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-pr100267-ps-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-pr100267-ps-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-pr100267-ps-2.c\""}, {"sha": "135dbd7577ebf3bb4b22d0c82ed7d28f50a5efee", "filename": "gcc/testsuite/gcc.target/i386/avx512vlbw-pr100267-1.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-1.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vbmi2 -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandb\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+/* { dg-final { scan-assembler-times \"vpexpandw\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n+\n+/* { dg-final { scan-assembler-times \"vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\(\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+/* { dg-final { scan-assembler-times \"(?:vmov\\[a-z0-9\\]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}|blend\\[a-z]*\\[ \\\\t\\]+\\[^\\{\\n\\(]*%xmm\\[0-9\\]+)(?:\\n|\\[ \\\\t\\]+#)\"  2 } } */\n+#include <immintrin.h>\n+\n+char *pi8;\n+short *pi16;\n+volatile __m256i xi16, xi8;\n+volatile __m128i xi16_xmm, xi8_xmm;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  xi8 = _mm256_mask_expand_epi8 (xi8, 0, xi8);\n+  xi8 = _mm256_mask_expand_epi8 (xi8, -1, xi8);\n+  xi8 = _mm256_mask_expand_epi8 (xi8, (1 << 30) - 1, xi8);\n+  xi8 = _mm256_mask_expand_epi8 (xi8, (1 << 16) + 1, xi8);\n+\n+  xi8 = _mm256_mask_expandloadu_epi8 (xi8, 0, pi8);\n+  xi8 = _mm256_mask_expandloadu_epi8 (xi8, -1, pi8);\n+  xi8 = _mm256_mask_expandloadu_epi8 (xi8, (1 << 28) - 1, pi8);\n+  xi8 = _mm256_mask_expandloadu_epi8 (xi8, (1 << 15) + 3, pi8);\n+\n+  xi16 = _mm256_mask_expand_epi16 (xi16, 0, xi16);\n+  xi16 = _mm256_mask_expand_epi16 (xi16, -1, xi16);\n+  xi16 = _mm256_mask_expand_epi16 (xi16, (1 << 15) - 1, xi16);\n+  xi16 = _mm256_mask_expand_epi16 (xi16, (1 << 14) + 2, xi16);\n+\n+  xi16 = _mm256_mask_expandloadu_epi16 (xi16, 0, pi16);\n+  xi16 = _mm256_mask_expandloadu_epi16 (xi16, (1 << 16) - 1, pi16);\n+  xi16 = _mm256_mask_expandloadu_epi16 (xi16, (1 << 14) - 1, pi16);\n+  xi16 = _mm256_mask_expandloadu_epi16 (xi16, (1 << 13) + 7, pi16);\n+\n+  xi8_xmm = _mm_mask_expand_epi8 (xi8_xmm, 0, xi8_xmm);\n+  xi8_xmm = _mm_mask_expand_epi8 (xi8_xmm, -1, xi8_xmm);\n+  xi8_xmm = _mm_mask_expand_epi8 (xi8_xmm, (1 << 13) - 1, xi8_xmm);\n+  xi8_xmm = _mm_mask_expand_epi8 (xi8_xmm, (1 << 12) + 1, xi8_xmm);\n+\n+  xi8_xmm = _mm_mask_expandloadu_epi8 (xi8_xmm, 0, pi8);\n+  xi8_xmm = _mm_mask_expandloadu_epi8 (xi8_xmm, (1 << 16) - 1, pi8);\n+  xi8_xmm = _mm_mask_expandloadu_epi8 (xi8_xmm, (1 << 12) - 1, pi8);\n+  xi8_xmm = _mm_mask_expandloadu_epi8 (xi8_xmm, (1 << 11) + 3, pi8);\n+\n+  xi16_xmm = _mm_mask_expand_epi16 (xi16_xmm, 0, xi16_xmm);\n+  xi16_xmm = _mm_mask_expand_epi16 (xi16_xmm, -1, xi16_xmm);\n+  xi16_xmm = _mm_mask_expand_epi16 (xi16_xmm, (1 << 7) - 1, xi16_xmm);\n+  xi16_xmm = _mm_mask_expand_epi16 (xi16_xmm, (1 << 4) + 2, xi16_xmm);\n+\n+  xi16_xmm = _mm_mask_expandloadu_epi16 (xi16_xmm, 0, pi16);\n+  xi16_xmm = _mm_mask_expandloadu_epi16 (xi16_xmm, (1 << 8) - 1, pi16);\n+  xi16_xmm = _mm_mask_expandloadu_epi16 (xi16_xmm, (1 << 3) - 1, pi16);\n+  xi16_xmm = _mm_mask_expandloadu_epi16 (xi16_xmm, (1 << 6) + 7, pi16);\n+}"}, {"sha": "d54e8033a25816d5891e752c69195964693f3d7b", "filename": "gcc/testsuite/gcc.target/i386/avx512vlbw-pr100267-b-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-b-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-b-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-b-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-b-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-b-2.c\""}, {"sha": "1e604cfb1aa60abd32d5bb333d0ffd877cc2b32a", "filename": "gcc/testsuite/gcc.target/i386/avx512vlbw-pr100267-d-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-d-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-d-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-d-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-d-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-d-2.c\""}, {"sha": "1f9fe65ad16470e5d9e72e94e2662ba6dc726e0e", "filename": "gcc/testsuite/gcc.target/i386/avx512vlbw-pr100267-q-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-q-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-q-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-q-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-q-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-q-2.c\""}, {"sha": "a46ca78a62187a19cede90dbeffe9c55340f9315", "filename": "gcc/testsuite/gcc.target/i386/avx512vlbw-pr100267-w-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f51618f301664d02cc41205f1386c0c9b9a29a54/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vlbw-pr100267-w-2.c?ref=f51618f301664d02cc41205f1386c0c9b9a29a54", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-w-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512bw-pr100267-w-2.c\""}]}