{"sha": "20921e5333ab7f3e2c233c20cf23bed943bf88ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA5MjFlNTMzM2FiN2YzZTJjMjMzYzIwY2YyM2JlZDk0M2JmODhhYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-26T11:29:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-26T11:29:20Z"}, "message": "cfenv: New.\n\n2006-01-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cfenv: New.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cfenv/functions.cc: New.\n\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Likewise.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <fenv.h> checks.\n\t* docs/html/ext/tr1.html: Update; add note.\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\t\n\n\t* testsuite/tr1/8_c_compatibility/complex/functions.cc: Tweak.\n\t* testsuite/tr1/8_c_compatibility/cctype/functions.cc: Likewise.\n\n\t* docs/html/faq/index.html: Fix link to tr1.html text; fix\n\tformatting.\n\nFrom-SVN: r110252", "tree": {"sha": "393627f2ed1e560bf65118cc438da81fa46d3429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/393627f2ed1e560bf65118cc438da81fa46d3429"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20921e5333ab7f3e2c233c20cf23bed943bf88ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20921e5333ab7f3e2c233c20cf23bed943bf88ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20921e5333ab7f3e2c233c20cf23bed943bf88ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20921e5333ab7f3e2c233c20cf23bed943bf88ab/comments", "author": null, "committer": null, "parents": [{"sha": "5e922d66a7351e37cda6a0e2c587e6844ea6d0c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e922d66a7351e37cda6a0e2c587e6844ea6d0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e922d66a7351e37cda6a0e2c587e6844ea6d0c9"}], "stats": {"total": 584, "additions": 526, "deletions": 58}, "files": [{"sha": "3c38e854cc5920e51c5087c00fe5bf6853a2b92a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -1,3 +1,21 @@\n+2006-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cfenv: New.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cfenv/functions.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Likewise.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <fenv.h> checks.\n+\t* docs/html/ext/tr1.html: Update; add note.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\t\n+\n+\t* testsuite/tr1/8_c_compatibility/complex/functions.cc: Tweak.\n+\t* testsuite/tr1/8_c_compatibility/cctype/functions.cc: Likewise.\n+\n+\t* docs/html/faq/index.html: Fix link to tr1.html text; fix\n+\tformatting.\n+\n 2006-01-25  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/cctype: New."}, {"sha": "981fc920cd089e0d4b153e3337117afac08f8ecb", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -1098,7 +1098,8 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   AC_MSG_CHECKING([for ISO C99 support to TR1 in <ctype.h>])\n   AC_CACHE_VAL(ac_c99_ctype_tr1, [\n   AC_TRY_COMPILE([#include <ctype.h>],\n-\t         [isblank(0);\n+\t         [int ch;\n+\t          isblank(ch);\n \t\t ],[ac_c99_ctype_tr1=yes], [ac_c99_ctype_tr1=no])\n   ])\n   AC_MSG_RESULT($ac_c99_ctype_tr1)\n@@ -1108,6 +1109,35 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n \t      <tr1/cctype> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of <fenv.h> functions.\n+  AC_CHECK_HEADERS(fenv.h, ac_has_fenv_h=yes, ac_has_fenv_h=no)\n+  ac_c99_fenv_tr1=no;\n+  if test x\"$ac_has_fenv_h\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for ISO C99 support to TR1 in <fenv.h>])\n+    AC_TRY_COMPILE([#include <fenv.h>],\n+\t           [int except, mode;\n+\t            fexcept_t* pflag;\n+                    fenv_t* penv;\n+\t            feclearexcept(except);\n+                    fegetexceptflag(pflag, except);\n+\t            feraiseexcept(except);\n+\t            fesetexceptflag(pflag, except);\n+\t            fetestexcept(except);\n+\t            fegetround();\n+\t            fesetround(mode);\n+\t            fegetenv(penv);\n+\t            feholdexcept(penv);\n+\t            fesetenv(penv);\n+\t            feupdateenv(penv);\n+\t\t   ],[ac_c99_fenv_tr1=yes], [ac_c99_fenv_tr1=no])\n+  fi\n+  AC_MSG_RESULT($ac_c99_fenv_tr1)\n+  if test x\"$ac_c99_fenv_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_FENV_TR1, 1,\n+              [Define if C99 functions in <fenv.h> should be imported in\n+\t      <tr1/cfenv> in namespace std::tr1.])\n+  fi\n+\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "2184c2d1bd121e94ef4e89b8faefc0012966123a", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -69,6 +69,9 @@\n /* Define to 1 if you have the `fabsl' function. */\n #undef HAVE_FABSL\n \n+/* Define to 1 if you have the <fenv.h> header file. */\n+#undef HAVE_FENV_H\n+\n /* Define to 1 if you have the `finite' function. */\n #undef HAVE_FINITE\n \n@@ -700,6 +703,10 @@\n    namespace std::tr1. */\n #undef _GLIBCXX_USE_C99_CTYPE_TR1\n \n+/* Define if C99 functions in <fenv.h> should be imported in <tr1/cfenv> in\n+   namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_FENV_TR1\n+\n /* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n    in namespace std. */\n #undef _GLIBCXX_USE_C99_MATH"}, {"sha": "6cb8dd72d5e3ef3e10a136d9a11bf3c273ce50a9", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 229, "deletions": 1, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -30238,7 +30238,8 @@ cat >>conftest.$ac_ext <<_ACEOF\n int\n main ()\n {\n-isblank(0);\n+int ch;\n+\t          isblank(ch);\n \n   ;\n   return 0;\n@@ -30287,6 +30288,233 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of <fenv.h> functions.\n+\n+for ac_header in fenv.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+ ac_has_fenv_h=yes\n+else\n+  ac_has_fenv_h=no\n+fi\n+\n+done\n+\n+  ac_c99_fenv_tr1=no;\n+  if test x\"$ac_has_fenv_h\" = x\"yes\"; then\n+    echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <fenv.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <fenv.h>... $ECHO_C\" >&6\n+    cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <fenv.h>\n+int\n+main ()\n+{\n+int except, mode;\n+\t            fexcept_t* pflag;\n+                    fenv_t* penv;\n+\t            feclearexcept(except);\n+                    fegetexceptflag(pflag, except);\n+\t            feraiseexcept(except);\n+\t            fesetexceptflag(pflag, except);\n+\t            fetestexcept(except);\n+\t            fegetround();\n+\t            fesetround(mode);\n+\t            fegetenv(penv);\n+\t            feholdexcept(penv);\n+\t            fesetenv(penv);\n+\t            feupdateenv(penv);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_fenv_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_fenv_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+  echo \"$as_me:$LINENO: result: $ac_c99_fenv_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_fenv_tr1\" >&6\n+  if test x\"$ac_c99_fenv_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_FENV_TR1 1\n+_ACEOF\n+\n+  fi\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "0eeb8928bd571968eb7ea4349a642911a30e2e04", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -30,7 +30,14 @@ <h1 align=\"center\">\n </p>\n \n <p>\n-This page describes the TR1 support in mainline GCC CVS, not in any particular release.\n+In this implementation the header names are prefixed by\n+<code>tr1/</code>, for instance <code>&lt;tr1/functional&gt;</code>,\n+<code>&lt;tr1/memory&gt;</code>, and so on.\n+</p>\n+\n+<p>\n+This page describes the TR1 support in mainline GCC CVS, not in any particular\n+release.\n </p>\n \n <table border=\"1\">\n@@ -1796,25 +1803,25 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.4</td>\n       <td>Additions to header <code>&lt;cctype&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.4.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.4.2</td>\n       <td>Function <code>isblank</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -1828,25 +1835,25 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.6</td>\n       <td>Header <code>&lt;cfenv&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.6.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.6.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n@@ -2259,7 +2266,8 @@ <h3>Footnotes</h3>\n   <li>\n     <a name=\"1\"/>\n     The shared_ptr implementation uses some code from the\n-    <a href=\"http://www.boost.org/libs/smart_ptr/shared_ptr.htm\">Boost shared_ptr</a> library.\n+    <a href=\"http://www.boost.org/libs/smart_ptr/shared_ptr.htm\">Boost \n+    shared_ptr</a> library.\n   </li>\n \n </ol>"}, {"sha": "4d0f922efcf5c22de021258adcef386101f15513", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -982,64 +982,73 @@ <h2><a name=\"5_4\">5.4 Extensions and Backward Compatibility</a></h2>\n <hr />\n    <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n \n-      <p>The C++ Standard Library Technical Report adds many new features to the library.\n-         The latest version of this effort is described in\n-         <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\">\n+      <p>The C++ Standard Library Technical Report adds many new features to \n+         the library.  The latest version of this effort is described in\n+         <a href=\n+\t \"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf\">\n          Technical Report 1</a>.\n       </p>\n \n       <p>libstdc++ strives to implement all of TR1.\n-         The libstdc++ implementation status of the TR1 draft is listed in\n-         <a href=\"../ext/tr1.html\">this page</a>.\n+         An <a href=\"../ext/tr1.html\">overview</a> of the implementation status\n+\t is available.\n       </p>\n \n       <p>Briefly, the features of TR1 and the current status are:\n       </p>\n \n       <p><strong>Unordered containers - Complete -</strong>\n-         The unordered_set, unordered_map, unordered_multiset, and unordered_multimap containers\n-         are hashed versions of the map, set, multimap, and multiset containers respectively.\n-         These classes are suitable replacements for the SGI STL hash_map and hash_set extensions.\n+         The unordered_set, unordered_map, unordered_multiset, and\n+\t unordered_multimap containers are hashed versions of the map, set,\n+\t multimap, and multiset containers respectively.  These classes are\n+\t suitable replacements for the SGI STL hash_map and hash_set\n+\t extensions.\n       </p>\n \n       <p><strong>Reference-counted smart pointers - Complete -</strong>\n-         The shared_ptr and weak_ptr allow several object to know about a pointer and whether it is valid.\n-         When the last reference to the pointer is destroyed the pointer is freed.\n+         The shared_ptr and weak_ptr allow several object to know about a\n+\t pointer and whether it is valid.  When the last reference to the\n+\t pointer is destroyed the pointer is freed.\n       </p>\n \n       <p><strong>Type traits - Complete -</strong>\n-         The type_traits class gives templates the ability to probe information about the input type\n-         and enable type-dependent logic to be performed without the need of template specializations.\n+         The type_traits class gives templates the ability to probe\n+\t information about the input type and enable type-dependent logic\n+\t to be performed without the need of template specializations.\n       </p>\n \n       <p><strong>Fixed-size arrays - Complete -</strong>\n-         The array class implements small fixed-sized arrays with container semantics.\n+         The array class implements small fixed-sized arrays with container\n+\t semantics.\n       </p>\n \n       <p><strong>Tuples - Complete -</strong>\n-         The tuple class implements small heterogeneous arrays.  This is an enhanced pair.\n-         In fact, the standard pair is enhanced with a tuple interface.\n+         The tuple class implements small heterogeneous arrays.  This is an\n+\t enhanced pair.  In fact, the standard pair is enhanced with a tuple\n+\t interface.\n       </p>\n \n       <p><strong>A regular expression engine</strong>\n-         This library provides for regular expression objects with traversal of\n-         text with return of subexpressions.\n+         This library provides for regular expression objects with traversal\n+\t of text with return of subexpressions.\n       </p>\n \n       <p><strong>A random number engine</strong>\n-         This library contains randow number generators with several different choices\n-         of distribution.\n+         This library contains randow number generators with several different\n+\t choices of distribution.\n       </p>\n \n       <p><strong>Special functions - Under construction - </strong>\n-         Twenty-three mathematical functions familiar to physicists and engineers are included:\n-         cylindrical and spherical Bessel and Neumann functions, hypergeometric functions,\n-         Laguerre polynomials, Legendre functions, elliptic integrals, exponential integrals\n-         and the Riemann zeta function all for your computing pleasure.\n+         Twenty-three mathematical functions familiar to physicists and\n+\t engineers are included:  cylindrical and spherical Bessel and Neumann\n+\t functions, hypergeometric functions, Laguerre polynomials, Legendre\n+\t functions, elliptic integrals, exponential integrals and the Riemann\n+\t zeta function all for your computing pleasure.\n       </p>\n \n       <p><strong>C99 compatibility - Under construction - </strong>\n-         There are many features designed to minimize the divergence of the C and the C++ languages.\n+         There are many features designed to minimize the divergence of the C\n+\t and the C++ languages.\n       </p>\n \n <hr />"}, {"sha": "2766df628aeb8c3aaa0df23a59f3d802b73e7dba", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -485,6 +485,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n \t${tr1_srcdir}/cctype \\\n+\t${tr1_srcdir}/cfenv \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/functional \\"}, {"sha": "b76fec729daa92bb0dd09f7a6ef82ff6e37eb8bf", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -702,6 +702,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n \t${tr1_srcdir}/cctype \\\n+\t${tr1_srcdir}/cfenv \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/functional \\"}, {"sha": "d4e925a8bc3988ec34d1e9f9ac899156aead9b2b", "filename": "libstdc++-v3/include/tr1/cfenv", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcfenv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcfenv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcfenv?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -0,0 +1,86 @@\n+// TR1 cctype -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CFENV\n+#define _TR1_CFENV 1\n+\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_HAVE_FENV_H\n+#include <fenv.h>\n+#endif\n+\n+#if _GLIBCXX_USE_C99_FENV_TR1\n+\n+#undef feclearexcept\n+#undef fegetexceptflag\n+#undef feraiseexcept\n+#undef fesetexceptflag\n+#undef fetestexcept\n+#undef fegetround\n+#undef fesetround\n+#undef fegetenv\n+#undef feholdexcept\n+#undef fesetenv\n+#undef feupdateenv\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  // types\n+  using ::fenv_t;\n+  using ::fexcept_t;\n+\n+  // functions\n+  using ::feclearexcept;\n+  using ::fegetexceptflag;\n+  using ::feraiseexcept;\n+  using ::fesetexceptflag;\n+  using ::fetestexcept;\n+\n+  using ::fegetround;\n+  using ::fesetround;\n+\n+  using ::fegetenv;\n+  using ::feholdexcept;\n+  using ::fesetenv;\n+  using ::feupdateenv;\n+  \n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "57d81f1ffc9fad2bd60a91e89ecd0b4c125ca88e", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cctype/functions.cc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do compile }\n+\n // 2006-01-25  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2006 Free Software Foundation, Inc.\n@@ -22,17 +24,12 @@\n \n #include <tr1/cctype>\n \n-void test01(int r = 0)\n+void test01()\n {\n #if _GLIBCXX_USE_C99_CTYPE_TR1\n-  r = std::tr1::isblank(0);\n-#else\n-  r = 0;\n-#endif\n-}\n \n-int main()\n-{\n-  test01();\n-  return 0;\n+  int ch = 0, r;\n+  r = std::tr1::isblank(ch);\n+\n+#endif\n }"}, {"sha": "9f3769fd91c76dcf6473445e32e81108613d0396", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/functions.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ffunctions.cc?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -0,0 +1,52 @@\n+// { dg-do compile }\n+\n+// 2006-01-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.6 Header <cfenv>\n+\n+#include <tr1/cfenv>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_FENV_TR1\n+\n+  int except = 0, mode = 0;\n+  std::tr1::fexcept_t* pflag = 0;\n+  std::tr1::fenv_t* penv = 0;\n+\n+  int r;\n+\n+  r = std::tr1::feclearexcept(except);\n+  r = std::tr1::fegetexceptflag(pflag, except);\n+  r = std::tr1::feraiseexcept(except);\n+  r = std::tr1::fesetexceptflag(pflag, except);\n+  r = std::tr1::fetestexcept(except);\n+\n+  r = std::tr1::fegetround();\n+  r = std::tr1::fesetround(mode);\n+\n+  r = std::tr1::fegetenv(penv);\n+  r = std::tr1::feholdexcept(penv);\n+  r = std::tr1::fesetenv(penv);\n+  r = std::tr1::feupdateenv(penv);\n+\n+#endif\n+}"}, {"sha": "66186cdea28edc9dc73b4c4684eef83d5730212e", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/types.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+\n+// 2006-01-26  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.6 Header <cfenv>\n+\n+#include <tr1/cfenv>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_FENV_TR1\n+\n+  // Check for required typedefs\n+  typedef std::tr1::fenv_t    fenv_t_type;\n+  typedef std::tr1::fexcept_t fexcept_t_type;\n+  \n+#endif\n+}"}, {"sha": "c4749e9a3735a6ab915960ec7d3347b8ce5184e0", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/complex/functions.cc", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20921e5333ab7f3e2c233c20cf23bed943bf88ab/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcomplex%2Ffunctions.cc?ref=20921e5333ab7f3e2c233c20cf23bed943bf88ab", "patch": "@@ -1,3 +1,5 @@\n+// { dg-do compile }\n+\n // 2006-01-10  Paolo Carlini  <pcarlini@suse.de>\n //\n // Copyright (C) 2006 Free Software Foundation, Inc.\n@@ -25,19 +27,18 @@\n template<typename T>\n   void test01_do()\n   {\n-    using namespace std::tr1;\n     typedef std::complex<T> cmplx_type;\n \n     cmplx_type ans;\n \n-    ans = acos(cmplx_type(1.0, 1.0));\n-    ans = asin(cmplx_type(1.0, 1.0));\n-    ans = atan(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::acos(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::asin(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::atan(cmplx_type(1.0, 1.0));\n \n-    ans = acosh(cmplx_type(1.0, 1.0));\n-    ans = asinh(cmplx_type(1.0, 1.0));\n-    ans = atanh(cmplx_type(1.0, 1.0));\n-    ans = fabs(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::acosh(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::asinh(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::atanh(cmplx_type(1.0, 1.0));\n+    ans = std::tr1::fabs(cmplx_type(1.0, 1.0));\n   }\n     \n void test01()\n@@ -46,9 +47,3 @@ void test01()\n   test01_do<double>();\n   test01_do<long double>();\n }\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}]}