{"sha": "0034cf7299679aa804e365e087d390b9cabb646c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAzNGNmNzI5OTY3OWFhODA0ZTM2NWUwODdkMzkwYjljYWJiNjQ2Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-01-26T02:33:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-01-26T02:33:46Z"}, "message": "tree.c (equal_functions): Fix name in prototype.\n\n\t* tree.c (equal_functions): Fix name in prototype.\n\t* decl.c (push_local_binding): Add FLAGS argument.\n\t(pushdecl, push_overloaded_decl): Pass it.\n\t* decl2.c (do_local_using_decl): Likewise.\n\t* cp-tree.h: Adjust prototype.\n\t* decl.c (poplevel): Fix logic.\n\nFrom-SVN: r24869", "tree": {"sha": "cc106c8c9a941c950605f1f240cd3bde24d864d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc106c8c9a941c950605f1f240cd3bde24d864d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0034cf7299679aa804e365e087d390b9cabb646c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0034cf7299679aa804e365e087d390b9cabb646c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0034cf7299679aa804e365e087d390b9cabb646c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0034cf7299679aa804e365e087d390b9cabb646c/comments", "author": null, "committer": null, "parents": [{"sha": "4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a6330ac06a5c1756bf44aa043fd8e0d519beacc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a6330ac06a5c1756bf44aa043fd8e0d519beacc"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "edffd63980d09804126afc1f7a61dec0b12639ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0034cf7299679aa804e365e087d390b9cabb646c", "patch": "@@ -1,5 +1,13 @@\n 1999-01-26  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* tree.c (equal_functions): Fix name in prototype.\n+\n+\t* decl.c (push_local_binding): Add FLAGS argument.\n+\t(pushdecl, push_overloaded_decl): Pass it.\n+\t* decl2.c (do_local_using_decl): Likewise.\n+\t* cp-tree.h: Adjust prototype.\n+\t* decl.c (poplevel): Fix logic.\n+\n \t* decl.c (push_local_binding): Also wrap used decls in a TREE_LIST.\n \t(poplevel): Handle that.  Fix logic for removing TREE_LISTs.\n \t(cat_namespace_levels): Don't loop forever."}, {"sha": "534fadc06087c68b6888c602de9a2bc519e9d29a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0034cf7299679aa804e365e087d390b9cabb646c", "patch": "@@ -2822,7 +2822,7 @@ extern void revert_static_member_fn             PROTO((tree*, tree*, tree*));\n extern void cat_namespace_levels                PROTO((void));\n extern void fixup_anonymous_union               PROTO((tree));\n extern int check_static_variable_definition     PROTO((tree, tree));\n-extern void push_local_binding                  PROTO((tree, tree));\n+extern void push_local_binding                  PROTO((tree, tree, int));\n extern void push_class_binding                  PROTO((tree, tree));\n extern tree check_default_argument              PROTO((tree, tree));\n extern tree push_overloaded_decl\t\tPROTO((tree, int));"}, {"sha": "401158192879d765b251c9de1fde18b7493df393", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0034cf7299679aa804e365e087d390b9cabb646c", "patch": "@@ -1117,12 +1117,15 @@ add_binding (id, decl)\n     }\n }\n \n-/* Bind DECL to ID in the current_binding_level.  */\n+/* Bind DECL to ID in the current_binding_level.\n+   If PUSH_USING is set in FLAGS, we know that DECL doesn't really belong\n+   to this binding level, that it got here through a using-declaration.  */\n \n void\n-push_local_binding (id, decl)\n+push_local_binding (id, decl, flags)\n      tree id;\n      tree decl;\n+     int flags;\n {\n   tree d = decl;\n \n@@ -1133,8 +1136,7 @@ push_local_binding (id, decl)\n     /* Create a new binding.  */\n     push_binding (id, d, current_binding_level);\n \n-  if (TREE_CODE (decl) == OVERLOAD\n-      || (DECL_P (decl) && DECL_NAMESPACE_SCOPE_P (decl)))\n+  if (TREE_CODE (decl) == OVERLOAD || (flags & PUSH_USING))\n     /* We must put the OVERLOAD into a TREE_LIST since the\n        TREE_CHAIN of an OVERLOAD is already used.  Similarly for\n        decls that got here through a using-declaration.  */\n@@ -1425,12 +1427,13 @@ poplevel (keep, reverse, functionbody)\n       else \n \t{\n \t  /* Remove the binding.  */\n-\t  if (TREE_CODE (link) == TREE_LIST)\n-\t    link = TREE_VALUE (link);\n-\t  if (TREE_CODE_CLASS (TREE_CODE (link)) == 'd')\n-\t    pop_binding (DECL_NAME (link), link);\n-\t  else if (TREE_CODE (link) == OVERLOAD)\n-\t    pop_binding (DECL_NAME (OVL_FUNCTION (link)), link);\n+\t  decl = link;\n+\t  if (TREE_CODE (decl) == TREE_LIST)\n+\t    decl = TREE_VALUE (decl);\n+\t  if (TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+\t    pop_binding (DECL_NAME (decl), decl);\n+\t  else if (TREE_CODE (decl) == OVERLOAD)\n+\t    pop_binding (DECL_NAME (OVL_FUNCTION (decl)), decl);\n \t  else \n \t    my_friendly_abort (0);\n \t}\n@@ -3798,7 +3801,7 @@ pushdecl (x)\n \n \t  if (need_new_binding)\n \t    {\n-\t      push_local_binding (name, x);\n+\t      push_local_binding (name, x, 0);\n \t      /* Because push_local_binding will hook X on to the\n \t\t current_binding_level's name list, we don't want to\n \t\t do that again below.  */\n@@ -4296,7 +4299,7 @@ push_overloaded_decl (decl, flags)\n \t}\n \n       /* Install the new binding.  */\n-      push_local_binding (name, new_binding);\n+      push_local_binding (name, new_binding, flags);\n     }\n \n   return decl;"}, {"sha": "5c1cb4c26de59f6a202f3a3d8d2cadcf2b71eed3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0034cf7299679aa804e365e087d390b9cabb646c", "patch": "@@ -4900,7 +4900,7 @@ do_local_using_decl (decl)\n \t\t\t\t  PUSH_LOCAL | PUSH_USING);\n \t}\n       else\n-\tpush_local_binding (name, newval);\n+\tpush_local_binding (name, newval, PUSH_USING);\n     }\n   if (newtype)\n     set_identifier_type_value (name, newtype);"}, {"sha": "3e5048f9f10b33ed74911f2305f4c30076b2ebf7", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0034cf7299679aa804e365e087d390b9cabb646c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0034cf7299679aa804e365e087d390b9cabb646c", "patch": "@@ -41,7 +41,7 @@ static tree list_hash_lookup PROTO((int, int, int, int, tree, tree,\n static void propagate_binfo_offsets PROTO((tree, tree));\n static int avoid_overlap PROTO((tree, tree));\n static int lvalue_p_1 PROTO((tree, int));\n-static int equal_function PROTO((tree, tree));\n+static int equal_functions PROTO((tree, tree));\n \n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n "}]}