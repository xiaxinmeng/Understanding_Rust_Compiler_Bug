{"sha": "e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkN2IxODBjMmVjMzdmM2E4NWU1YTYzYjE5NmU2MTg1NGM3ZWIyMA==", "commit": {"author": {"name": "Jeroen Dobbelaere", "email": "jeroen.dobbelaere@acunia.com", "date": "2002-07-17T09:54:11Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2002-07-17T09:54:11Z"}, "message": "From Jeroen Dobbelaere <jeroen.dobbelaere@acunia.com>\n* arm.h (ARM_NUM_INTS, ARM_NUM_REGS, ARM_NUM_REGS2): Renamed from\nNUM_INTS, NUM_REGS and ARM_NUM_REGS2 respectively.  All uses changed.\n* arm.c: Similarly.\n\nFrom-SVN: r55515", "tree": {"sha": "7b748053cccb7bd4ddd0b7c3434b6df07e70bdba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b748053cccb7bd4ddd0b7c3434b6df07e70bdba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/comments", "author": null, "committer": null, "parents": [{"sha": "8214bf98d2177d333ce6ac401789b444ccf43658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8214bf98d2177d333ce6ac401789b444ccf43658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8214bf98d2177d333ce6ac401789b444ccf43658"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "49ff07c84741274b916a220b969d3ded47216850", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "patch": "@@ -1,3 +1,9 @@\n+2002-07-17  Jeroen Dobbelaere  <jeroen.dobbelaere@acunia.com>\n+\n+\t* arm.h (ARM_NUM_INTS, ARM_NUM_REGS, ARM_NUM_REGS2): Renamed from\n+\tNUM_INTS, NUM_REGS and ARM_NUM_REGS2 respectively.  All uses changed.\n+\t* arm.c: Similarly.\n+\n 2002-07-17  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips-protos.h (mips_sign_extend): Declare."}, {"sha": "cd75a6b7071838241fc59ae8798cbea3a61aa22a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "patch": "@@ -4449,7 +4449,7 @@ arm_gen_movstrqi (operands)\n   fin_dst = dst = copy_to_mode_reg (SImode, st_dst);\n   fin_src = src = copy_to_mode_reg (SImode, st_src);\n \n-  in_words_to_go = NUM_INTS (INTVAL (operands[2]));\n+  in_words_to_go = ARM_NUM_INTS (INTVAL (operands[2]));\n   out_words_to_go = INTVAL (operands[2]) / 4;\n   last_bytes = INTVAL (operands[2]) & 3;\n \n@@ -8563,7 +8563,7 @@ arm_print_operand (stream, x, code)\n     case 'M':\n       asm_fprintf (stream, \"{%r-%r}\",\n \t\t   REGNO (x),\n-\t\t   REGNO (x) + NUM_REGS (GET_MODE (x)) - 1);\n+\t\t   REGNO (x) + ARM_NUM_REGS (GET_MODE (x)) - 1);\n       return;\n \n     case 'd':\n@@ -9164,7 +9164,7 @@ arm_hard_regno_mode_ok (regno, mode)\n        register available to hold the upper part of the value.\n        We probably we ought to ensure that the register is the\n        start of an even numbered register pair.  */\n-    return (NUM_REGS (mode) < 2) || (regno < LAST_LO_REGNUM);\n+    return (ARM_NUM_REGS (mode) < 2) || (regno < LAST_LO_REGNUM);\n \n   if (regno <= LAST_ARM_REGNUM)\n     /* We allow any value to be stored in the general regisetrs.  */\n@@ -10309,7 +10309,7 @@ thumb_output_function_prologue (f, size)\n \t  \n \t  asm_fprintf (f, \"\\tpush\\t{\");\n \n-\t  num_pushes = NUM_INTS (current_function_pretend_args_size);\n+\t  num_pushes = ARM_NUM_INTS (current_function_pretend_args_size);\n \t  \n \t  for (regno = LAST_ARG_REGNUM + 1 - num_pushes;\n \t       regno <= LAST_ARG_REGNUM;"}, {"sha": "aee648434336d4e24bb87a1aff0ad43cde62fc32", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9d7b180c2ec37f3a85e5a63b196e61854c7eb20/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e9d7b180c2ec37f3a85e5a63b196e61854c7eb20", "patch": "@@ -855,15 +855,15 @@ extern const char * structure_size_string;\n #define ROUND_UP(X) (((X) + 3) & ~3)\n \n /* Convert fron bytes to ints.  */\n-#define NUM_INTS(X) (((X) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+#define ARM_NUM_INTS(X) (((X) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n /* The number of (integer) registers required to hold a quantity of type MODE.  */\n-#define NUM_REGS(MODE)\t\t\t\t\\\n-  NUM_INTS (GET_MODE_SIZE (MODE))\n+#define ARM_NUM_REGS(MODE)\t\t\t\t\\\n+  ARM_NUM_INTS (GET_MODE_SIZE (MODE))\n \n /* The number of (integer) registers required to hold a quantity of TYPE MODE.  */\n-#define NUM_REGS2(MODE, TYPE)                   \\\n-  NUM_INTS ((MODE) == BLKmode ? \t\t\\\n+#define ARM_NUM_REGS2(MODE, TYPE)                   \\\n+  ARM_NUM_INTS ((MODE) == BLKmode ? \t\t\\\n   int_size_in_bytes (TYPE) : GET_MODE_SIZE (MODE))\n \n /* The number of (integer) argument register available.  */\n@@ -967,7 +967,7 @@ extern const char * structure_size_string;\n     && REGNO >= FIRST_ARM_FP_REGNUM\t\\\n     && REGNO != FRAME_POINTER_REGNUM\t\\\n     && REGNO != ARG_POINTER_REGNUM)\t\\\n-   ? 1 : NUM_REGS (MODE))\n+   ? 1 : ARM_NUM_REGS (MODE))\n \n /* Return true if REGNO is suitable for holding a quantity of type MODE.  */\n #define HARD_REGNO_MODE_OK(REGNO, MODE)\t\t\t\t\t\\\n@@ -1288,7 +1288,7 @@ enum reg_class\n    needed to represent mode MODE in a register of class CLASS.\n    ARM regs are UNITS_PER_WORD bits while FPU regs can hold any FP mode */\n #define CLASS_MAX_NREGS(CLASS, MODE)  \\\n-  ((CLASS) == FPU_REGS ? 1 : NUM_REGS (MODE))\n+  ((CLASS) == FPU_REGS ? 1 : ARM_NUM_REGS (MODE))\n \n /* Moves between FPU_REGS and GENERAL_REGS are two memory insns.  */\n #define REGISTER_MOVE_COST(MODE, FROM, TO)\t\t\\\n@@ -1467,7 +1467,7 @@ typedef struct\n    For args passed entirely in registers or entirely in memory, zero.  */\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED)\t\\\n   (    NUM_ARG_REGS > (CUM).nregs\t\t\t\t\\\n-   && (NUM_ARG_REGS < ((CUM).nregs + NUM_REGS2 (MODE, TYPE)))\t\\\n+   && (NUM_ARG_REGS < ((CUM).nregs + ARM_NUM_REGS2 (MODE, TYPE)))\t\\\n    ?   NUM_ARG_REGS - (CUM).nregs : 0)\n \n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n@@ -1481,7 +1481,7 @@ typedef struct\n    of mode MODE and data type TYPE.\n    (TYPE is null for libcalls where that information may not be available.)  */\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n-  (CUM).nregs += NUM_REGS2 (MODE, TYPE)\n+  (CUM).nregs += ARM_NUM_REGS2 (MODE, TYPE)\n \n /* 1 if N is a possible register number for function argument passing.\n    On the ARM, r0-r3 are used to pass args.  */"}]}