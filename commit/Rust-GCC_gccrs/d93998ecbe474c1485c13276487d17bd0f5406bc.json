{"sha": "d93998ecbe474c1485c13276487d17bd0f5406bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzOTk4ZWNiZTQ3NGMxNDg1YzEzMjc2NDg3ZDE3YmQwZjU0MDZiYw==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "2000-09-07T05:44:46Z"}, "committer": {"name": "Alex Samuel", "email": "samuel@gcc.gnu.org", "date": "2000-09-07T05:44:46Z"}, "message": "cp-demangle.c (status_allocation_failed): Rearrange whitespace.\n\n\t* cp-demangle.c (status_allocation_failed): Rearrange whitespace.\n\t(demangle_type): Handle substitution candidates correctly in the\n\tface of special substitutions.\n\nFrom-SVN: r36228", "tree": {"sha": "33bfc3b5bf05d6271f9b145c5b079f77463f2001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33bfc3b5bf05d6271f9b145c5b079f77463f2001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d93998ecbe474c1485c13276487d17bd0f5406bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93998ecbe474c1485c13276487d17bd0f5406bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93998ecbe474c1485c13276487d17bd0f5406bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93998ecbe474c1485c13276487d17bd0f5406bc/comments", "author": null, "committer": null, "parents": [{"sha": "93ca1662a221cdb8a2545b496433e665f85ef720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93ca1662a221cdb8a2545b496433e665f85ef720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93ca1662a221cdb8a2545b496433e665f85ef720"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "597e840e0dc98748e616e1eb72a40ea35fc7e59a", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93998ecbe474c1485c13276487d17bd0f5406bc/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93998ecbe474c1485c13276487d17bd0f5406bc/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d93998ecbe474c1485c13276487d17bd0f5406bc", "patch": "@@ -1,3 +1,9 @@\n+2000-09-06  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* cp-demangle.c (status_allocation_failed): Rearrange whitespace.\n+\t(demangle_type): Handle substitution candidates correctly in the\n+\tface of special substitutions.\n+\n 2000-09-05  Alex Samuel  <samuel@codesourcery.com>\n \n \t* cp-demangle.c (demangle_encoding): Rename variable."}, {"sha": "5b16c4e35075651d77302dec0c4b2cd6b52ef50c", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93998ecbe474c1485c13276487d17bd0f5406bc/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93998ecbe474c1485c13276487d17bd0f5406bc/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=d93998ecbe474c1485c13276487d17bd0f5406bc", "patch": "@@ -170,7 +170,7 @@ typedef const char *status_t;\n #define STATUS_INTERNAL_ERROR           \"Internal error.\"\n \n /* This status code indicates a failure in malloc or realloc.  */\n-static const char* const status_allocation_failed = \"Allocation failed.\";\n+static const char *const status_allocation_failed = \"Allocation failed.\";\n #define STATUS_ALLOCATION_FAILED        status_allocation_failed\n \n /* Non-zero if STATUS indicates that no error has occurred.  */\n@@ -2284,10 +2284,31 @@ demangle_type (dm)\n \t      is_substitution_candidate = 0;\n \t  }\n \telse\n-\t  /* While the special substitution token itself is not a\n-\t     substitution candidate, the <class-enum-type> is, so\n-\t     don't clear is_substitution_candidate.  */\n-\t  RETURN_IF_ERROR (demangle_class_enum_type (dm, &encode_return_type));\n+\t  {\n+\t    /* Now some trickiness.  We have a special substitution\n+\t       here.  Often, the special substitution provides the\n+\t       name of a template that's subsequently instantiated,\n+\t       for instance `SaIcE' => std::allocator<char>.  In these\n+\t       cases we need to add a substitution candidate for the\n+\t       entire <class-enum-type> and thus don't want to clear\n+\t       the is_substitution_candidate flag.\n+\n+\t       However, it's possible that what we have here is a\n+\t       substitution token representing an entire type, such as\n+\t       `Ss' => std::string.  In this case, we mustn't add a\n+\t       new substitution candidate for this substitution token.\n+\t       To detect this case, remember where the start of the\n+\t       substitution token is.  */\n+ \t    const char *next = dm->next;\n+\t    /* Now demangle the <class-enum-type>.  */\n+\t    RETURN_IF_ERROR \n+\t      (demangle_class_enum_type (dm, &encode_return_type));\n+\t    /* If all that was just demangled is the two-character\n+\t       special substitution token, supress the addition of a\n+\t       new candidate for it.  */\n+\t    if (dm->next == next + 2)\n+\t      is_substitution_candidate = 0;\n+\t  }\n \n \tbreak;\n "}]}