{"sha": "e53ca51f94aea5a90e6326d634c2286982359166", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzY2E1MWY5NGFlYTVhOTBlNjMyNmQ2MzRjMjI4Njk4MjM1OTE2Ng==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-08-27T21:54:56Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-08-27T21:54:56Z"}, "message": "In gcc: 2000-08-27 Geoff Keating <geoffk@cygnus.com>\n\nIn gcc:\n2000-08-27  Geoff Keating  <geoffk@cygnus.com>\n\n\t* config/rs6000/rs6000.md (movdi_internal64+5): Make SUBREG-safe\n\tby using gen_lowpart_common.\n\t(movdi_internal64+6): Likewise.\n\nIn gcc/testsuite:\n2000-08-27  Geoff Keating  <geoffk@cygnus.com>\n\n\t* gcc.c-torture/compile/20000825-1.c: New test.\n\nFrom-SVN: r36005", "tree": {"sha": "3380d3c43229668c919a48d461e9ee9a8a1b1b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3380d3c43229668c919a48d461e9ee9a8a1b1b82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e53ca51f94aea5a90e6326d634c2286982359166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53ca51f94aea5a90e6326d634c2286982359166", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53ca51f94aea5a90e6326d634c2286982359166", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53ca51f94aea5a90e6326d634c2286982359166/comments", "author": null, "committer": null, "parents": [{"sha": "cb0112489477f3f20e6c257638acbfa2a1d8f7a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb0112489477f3f20e6c257638acbfa2a1d8f7a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb0112489477f3f20e6c257638acbfa2a1d8f7a4"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "62d0ebf2c6a206c1df2b04908cefbf7a93d0c6e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e53ca51f94aea5a90e6326d634c2286982359166", "patch": "@@ -1,3 +1,9 @@\n+2000-08-27  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* config/rs6000/rs6000.md (movdi_internal64+5): Make SUBREG-safe\n+\tby using gen_lowpart_common.\n+\t(movdi_internal64+6): Likewise.\n+\n 2000-08-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* tm.texi (FINI_SECTION_ASM_OP, CRT_CALL_STATIC_FUNCTION):"}, {"sha": "5ea5bc864ebf6339d9906a4f39f23c062cd9e00f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e53ca51f94aea5a90e6326d634c2286982359166", "patch": "@@ -8087,9 +8087,12 @@\n   [(set (match_dup 0)\n \t(match_dup 2))\n    (set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (match_dup 0) 0)))]\n+\t(zero_extend:DI (match_dup 3)))]\n   \"\n-{ operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[1])); }\")\n+{ \n+  operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[1])); \n+  operands[3] = gen_lowpart_common (SImode, operands[0]);\n+}\")\n \n (define_split\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n@@ -8102,12 +8105,13 @@\n   [(set (match_dup 0)\n \t(match_dup 2))\n    (set (match_dup 0)\n-\t(zero_extend:DI (subreg:SI (match_dup 0) 0)))]\n+\t(zero_extend:DI (match_dup 3)))]\n   \"\n {\n #if HOST_BITS_PER_WIDE_INT != 32\n-operands[2] = GEN_INT ((INTVAL (operands[1]) << 32) >> 32);\n+  operands[2] = GEN_INT ((INTVAL (operands[1]) << 32) >> 32);\n #endif\n+  operands[3] = gen_lowpart_common (SImode, operands[0]);\n }\")\n \n ;; 32-bit value in upper half of doubleword"}, {"sha": "5f478db13cf7c858f35618dcb86c463419a5af0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e53ca51f94aea5a90e6326d634c2286982359166", "patch": "@@ -1,3 +1,7 @@\n+2000-08-27  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* gcc.c-torture/compile/20000825-1.c: New test.\n+\n 2000-08-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* gcc.dg/dwarf2-2.c: New test."}, {"sha": "3c2e5bda75a8fffa849e2696b2da67fea6022088", "filename": "gcc/testsuite/gcc.c-torture/compile/20000825-1.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000825-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e53ca51f94aea5a90e6326d634c2286982359166/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000825-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000825-1.c?ref=e53ca51f94aea5a90e6326d634c2286982359166", "patch": "@@ -0,0 +1,31 @@\n+typedef signed int      s32;\n+typedef signed long     s64;\n+typedef unsigned int    u32;\n+typedef unsigned long   u64;\n+\n+extern __inline__ u32 foobar(int logmask)\n+{\n+        u32 ret = ~(1 << logmask);      // fails\n+        // s32 ret = ~(1 << logmask);   // ok\n+        // u64 ret = ~(1 << logmask);   // ok\n+        // s64 ret = ~(1 << logmask);   // ok\n+        return ret;\n+}\n+\n+// This procedure compiles fine...\n+u32 good(u32 var)\n+{\n+        var = foobar(0);\n+        return var;\n+}\n+\n+// This procedure does not compile...\n+// Same as above, but formal parameter is a pointer\n+// Both good() and fails() compile ok if we choose\n+// a different type for \"ret\" in foobar().\n+u32 fails(u32 *var)\n+{\n+        *var = foobar(0);\n+        return *var;\n+}\n+"}]}