{"sha": "79a27f32df8eab0add722f75332f78fe20d94da3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhMjdmMzJkZjhlYWIwYWRkNzIyZjc1MzMyZjc4ZmUyMGQ5NGRhMw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-05-10T06:49:35Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2021-05-10T06:57:54Z"}, "message": "arc: Improve vector support for ARCv2.\n\nAdd vector negate, reduc_plus_scal, vec_duplicate, vector\nmin/max/mult/div patterns.  Besides vector negate and reduction\npatterns, all the others are emulated using scalar instructions. The\nreason is taking advantage of the double load/store instructions as\nwell as enabling the autovectorizer to further analize a loop.\n\ngcc/\n2021-05-10  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc.md (UNSPEC_ARC_DMPYWH): Define.\n\t* config/arc/simdext.md (VCT): Add predicates for iterator\n\telements.\n\t(EMUVEC): Define.\n\t(voptab): Likewise.\n\t(vec_widen_<V_US>mult_hi_v4hi): Change pattern predicate.\n\t(<voptab>v2si3): New patterns.\n\t(neg): Likewise.\n\t(reduc_plus_scal_v4hi): Likewise.\n\t(reduc_plus_scal_v2si): Likewise.\n\t(vec_duplicatev2si): Likewise.\n\t(vec_duplicatev4hi): Likewise.\n\nSigned-off-by: Claudiu Zissulescu <claziss@synopsys.com>", "tree": {"sha": "936182eb06c128b5851bbc371e3765926d32d62b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/936182eb06c128b5851bbc371e3765926d32d62b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a27f32df8eab0add722f75332f78fe20d94da3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a27f32df8eab0add722f75332f78fe20d94da3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a27f32df8eab0add722f75332f78fe20d94da3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a27f32df8eab0add722f75332f78fe20d94da3/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ae0f6c3ee0612012a67df4387d55efa19b8cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09ae0f6c3ee0612012a67df4387d55efa19b8cad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09ae0f6c3ee0612012a67df4387d55efa19b8cad"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "b6f2d8e28bec981ada5f79c2a56f48113b5090ef", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=79a27f32df8eab0add722f75332f78fe20d94da3", "patch": "@@ -128,6 +128,7 @@\n   UNSPEC_ARC_DMACHU\n   UNSPEC_ARC_DMACWH\n   UNSPEC_ARC_DMACWHU\n+  UNSPEC_ARC_DMPYWH\n   UNSPEC_ARC_QMACH\n   UNSPEC_ARC_QMACHU\n   UNSPEC_ARC_QMPYH"}, {"sha": "c7ca306a08135038e54e1e97bc54c387ba2b5d09", "filename": "gcc/config/arc/simdext.md", "status": "modified", "additions": 110, "deletions": 2, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fconfig%2Farc%2Fsimdext.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a27f32df8eab0add722f75332f78fe20d94da3/gcc%2Fconfig%2Farc%2Fsimdext.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fsimdext.md?ref=79a27f32df8eab0add722f75332f78fe20d94da3", "patch": "@@ -1395,9 +1395,20 @@\n (define_mode_attr V_addsub_suffix [(V2HI \"2h\") (V2SI \"\")])\n \n ;;all vectors\n-(define_mode_iterator VCT [V2HI V4HI V2SI])\n+(define_mode_iterator VCT [(V2HI \"TARGET_PLUS_DMPY\")\n+\t\t\t   (V4HI \"TARGET_PLUS_QMACW\")\n+\t\t\t   (V2SI \"TARGET_PLUS_QMACW\")])\n (define_mode_attr V_suffix [(V2HI \"2h\") (V4HI \"4h\") (V2SI \"2\")])\n \n+(define_code_iterator EMUVEC [(mult \"TARGET_MPYW\")\n+\t\t\t      (div \"TARGET_DIVREM\")\n+\t\t\t      smax smin])\n+\n+(define_code_attr voptab [(mult \"mul\")\n+\t\t\t  (div \"div\")\n+\t\t\t  (smin \"smin\")\n+\t\t\t  (smax \"smax\")])\n+\n ;; Widening operations.\n (define_code_iterator SE [sign_extend zero_extend])\n (define_code_attr V_US [(sign_extend \"s\") (zero_extend \"u\")])\n@@ -1805,7 +1816,7 @@\n \t\t  (SE:V2SI (vec_select:V2HI\n \t\t\t    (match_operand:V4HI 2 \"even_register_operand\")\n \t\t\t    (parallel [(const_int 2) (const_int 3)])))))]\n-  \"TARGET_PLUS_MACD\"\n+  \"TARGET_PLUS_QMACW\"\n   {\n      emit_insn (gen_arc_vec_<V_US>mult_hi_v4hi (operands[0],\n \t\t\t\t\t\toperands[1],\n@@ -2011,3 +2022,100 @@\n    (set_attr \"type\" \"multi\")\n    (set_attr \"predicable\" \"yes,no\")\n    (set_attr \"cond\" \"canuse,nocond\")])\n+\n+;; Emulated vector instructions.\n+(define_insn_and_split \"<voptab>v2si3\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=r\")\n+\t(EMUVEC:V2SI (match_operand:V2SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:V2SI 2 \"nonmemory_operand\" \"ri\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+   rtx high_dest = gen_highpart (SImode, operands[0]);\n+   rtx low_dest = gen_lowpart (SImode, operands[0]);\n+   rtx high_op1 = gen_highpart (SImode, operands[1]);\n+   rtx low_op1 = gen_lowpart (SImode, operands[1]);\n+   rtx high_op2 = gen_highpart (SImode, operands[2]);\n+   rtx low_op2 = gen_lowpart (SImode, operands[2]);\n+   emit_insn (gen_<voptab>si3 (low_dest, low_op1, low_op2));\n+   emit_insn (gen_<voptab>si3 (high_dest, high_op1, high_op2));\n+   DONE;\n+  }\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multi\")])\n+\n+(define_expand \"neg<mode>2\"\n+  [(set (match_operand:VCT 0 \"register_operand\")\n+\t(neg:VCT (match_operand:VCT 1 \"register_operand\")))]\n+  \"TARGET_PLUS_DMPY\"\n+  \"\")\n+\n+(define_insn \"*neg<mode>2\"\n+  [(set (match_operand:VCT 0 \"register_operand\" \"=r\")\n+\t(neg:VCT (match_operand:VCT 1 \"register_operand\" \"r\")))]\n+  \"TARGET_PLUS_DMPY\"\n+  \"vsub<V_suffix)>\\\\t%0,0,%1\"\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multi\")])\n+\n+(define_insn \"reduc_plus_scal_v4hi\"\n+  [(set (match_operand:HI 0 \"even_register_operand\" \"=r\")\n+\t(unspec:HI [(match_operand:V4HI 1 \"even_register_operand\" \"r\")]\n+\t\t   UNSPEC_ARC_QMPYH))\n+   (clobber (reg:DI ARCV2_ACC))]\n+  \"TARGET_PLUS_QMACW\"\n+  \"qmpyh\\\\t%0,%1,1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multi\")])\n+\n+(define_insn \"reduc_plus_scal_v2si\"\n+  [(set (match_operand:SI 0 \"even_register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:V2SI 1 \"even_register_operand\" \"r\")]\n+\t\t   UNSPEC_ARC_DMPYWH))\n+   (clobber (reg:DI ARCV2_ACC))]\n+  \"TARGET_PLUS_DMPY\"\n+  \"dmpywh\\\\t%0,%1,1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"multi\")])\n+\n+(define_insn_and_split \"vec_duplicatev2si\"\n+  [(set (match_operand:V2SI 0 \"register_operand\" \"=r\")\n+\t(vec_duplicate:V2SI\n+\t (match_operand:SI 1 \"nonmemory_operand\" \"ri\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+   rtx high_dest = gen_highpart (SImode, operands[0]);\n+   rtx low_dest = gen_lowpart (SImode, operands[0]);\n+   emit_move_insn (high_dest, operands[1]);\n+   emit_move_insn (low_dest, operands[1]);\n+   DONE;\n+  }\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multi\")])\n+\n+(define_insn_and_split \"vec_duplicatev4hi\"\n+  [(set (match_operand:V4HI 0 \"register_operand\" \"=r\")\n+\t(vec_duplicate:V4HI\n+\t (match_operand:HI 1 \"nonmemory_operand\" \"ri\")))]\n+  \"TARGET_BARREL_SHIFTER\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  {\n+   rtx high_dest = gen_highpart (SImode, operands[0]);\n+   rtx low_dest = gen_lowpart (SImode, operands[0]);\n+   rtx tmp = gen_lowpart (SImode, operands[1]);\n+   emit_insn (gen_rtx_SET (high_dest,\n+\t\t\t   gen_rtx_ASHIFT (SImode, tmp, GEN_INT (16))));\n+   emit_insn (gen_rtx_SET (low_dest,\n+\t\t\t   gen_rtx_IOR (SImode, high_dest, tmp)));\n+   emit_move_insn (high_dest, low_dest);\n+   DONE;\n+  }\n+  [(set_attr \"length\" \"12\")\n+   (set_attr \"type\" \"multi\")])"}]}