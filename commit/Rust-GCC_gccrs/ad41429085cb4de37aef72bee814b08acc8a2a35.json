{"sha": "ad41429085cb4de37aef72bee814b08acc8a2a35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0MTQyOTA4NWNiNGRlMzdhZWY3MmJlZTgxNGIwOGFjYzhhMmEzNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-04-28T21:03:19Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-04-28T21:03:19Z"}, "message": "configure.in: Test for libintl.h.\n\n2003-04-28  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* configure.in:  Test for libintl.h.\n\t* include/bits/c++config:  Define __N for everybody.\n\t* include/bits/basic_string.h, include/bits/stl_bvector.h,\n\tinclude/bits/stl_deque.h, include/bits/stl_vector.h,\n\tinclude/std/std_bitset.h:  Wrap all __throw* text with __N.\n\t* po/Makefile.am (pot):  New rule, mostly working.\n\t* src/functexcept.cc:  Call gettext on all __throw* arguments when\n\t-fexceptions is in effect.\n\t* po/Makefile.in, config.h.in, configure:  Regenerate.\n\nFrom-SVN: r66185", "tree": {"sha": "db642b3ece0d8017bf8bdb4a94cf4955d8443427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db642b3ece0d8017bf8bdb4a94cf4955d8443427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad41429085cb4de37aef72bee814b08acc8a2a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad41429085cb4de37aef72bee814b08acc8a2a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad41429085cb4de37aef72bee814b08acc8a2a35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad41429085cb4de37aef72bee814b08acc8a2a35/comments", "author": null, "committer": null, "parents": [{"sha": "e83a44d21dee4842b268c8a113c02dd11983ebf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e83a44d21dee4842b268c8a113c02dd11983ebf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e83a44d21dee4842b268c8a113c02dd11983ebf0"}], "stats": {"total": 219, "additions": 125, "deletions": 94}, "files": [{"sha": "75c88010ff0168c4963bd0c253b44ce3b4eb9cc6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -1,3 +1,15 @@\n+2003-04-28  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* configure.in:  Test for libintl.h.\n+\t* include/bits/c++config:  Define __N for everybody.\n+\t* include/bits/basic_string.h, include/bits/stl_bvector.h,\n+\tinclude/bits/stl_deque.h, include/bits/stl_vector.h,\n+\tinclude/std/std_bitset.h:  Wrap all __throw* text with __N.\n+\t* po/Makefile.am (pot):  New rule, mostly working.\n+\t* src/functexcept.cc:  Call gettext on all __throw* arguments when\n+\t-fexceptions is in effect.\n+\t* po/Makefile.in, config.h.in, configure:  Regenerate.\n+\n 2003-04-28  Petur Runolfsson  <peturr02@ru.is>\n  \n         PR libstdc++/9523"}, {"sha": "efcda87839f17691e72d515e0592be55cfa00c30", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -731,6 +731,9 @@\n /* Define if you have the <inttypes.h> header file.  */\n #undef HAVE_INTTYPES_H\n \n+/* Define if you have the <libintl.h> header file.  */\n+#undef HAVE_LIBINTL_H\n+\n /* Define if you have the <locale.h> header file.  */\n #undef HAVE_LOCALE_H\n "}, {"sha": "d97826ef282a4bb67de6c3e7c128916e31bd5231", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 37, "deletions": 50, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -840,7 +840,7 @@ test \"$ac_cv_mingw32\" = yes && MINGW32=yes\n \n     \n \n-  for ac_prog in gawk mawk nawk awk\n+  for ac_prog in mawk gawk nawk awk\n do\n # Extract the first word of \"$ac_prog\", so it can be a program name with args.\n set dummy $ac_prog; ac_word=$2\n@@ -1468,7 +1468,7 @@ else\n   if { (eval echo configure:1469: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; }; then\n     for file in conftest.*; do\n       case $file in\n-      *.c | *.o | *.obj) ;;\n+      *.$ac_ext | *.c | *.o | *.obj) ;;\n       *) ac_cv_exeext=`echo $file | sed -e s/conftest//` ;;\n       esac\n     done\n@@ -10527,7 +10527,7 @@ else\n   # Check for available headers.\n   for ac_hdr in nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n   machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h \\\n-  sys/types.h\n+  sys/types.h libintl.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -22992,7 +22992,7 @@ else\n fi\n rm -f conftest*\n \n-  for ac_hdr in stdlib.h unistd.h sys/stat.h sys/types.h\n+  for ac_hdr in unistd.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n@@ -23124,24 +23124,11 @@ else\n #include <fcntl.h>\n #include <sys/mman.h>\n \n-#if HAVE_SYS_TYPES_H\n-# include <sys/types.h>\n-#endif\n-\n-#if HAVE_STDLIB_H\n-# include <stdlib.h>\n-#endif\n-\n-#if HAVE_SYS_STAT_H\n-# include <sys/stat.h>\n-#endif\n-\n-#if HAVE_UNISTD_H\n-# include <unistd.h>\n-#endif\n-\n /* This mess was copied from the GNU getpagesize.h.  */\n #ifndef HAVE_GETPAGESIZE\n+# ifdef HAVE_UNISTD_H\n+#  include <unistd.h>\n+# endif\n \n /* Assume that all systems that can run configure have sys/param.h.  */\n # ifndef HAVE_SYS_PARAM_H\n@@ -23249,7 +23236,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:23253: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:23240: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -23280,17 +23267,17 @@ fi\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:23284: checking for $ac_hdr\" >&5\n+echo \"configure:23271: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 23289 \"configure\"\n+#line 23276 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:23294: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:23281: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -23323,7 +23310,7 @@ done\n     # Can't do these in a loop, else the resulting syntax is wrong.\n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23327 \"configure\"\n+#line 23314 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23333,7 +23320,7 @@ int main() {\n  int f = RLIMIT_DATA ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23337: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23324: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23350,7 +23337,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23354 \"configure\"\n+#line 23341 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23360,7 +23347,7 @@ int main() {\n  int f = RLIMIT_RSS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23364: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23351: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23377,7 +23364,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23381 \"configure\"\n+#line 23368 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23387,7 +23374,7 @@ int main() {\n  int f = RLIMIT_VMEM ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23391: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23378: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23404,7 +23391,7 @@ EOF\n \n     \n   cat > conftest.$ac_ext <<EOF\n-#line 23408 \"configure\"\n+#line 23395 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23414,7 +23401,7 @@ int main() {\n  int f = RLIMIT_AS ; \n ; return 0; }\n EOF\n-if { (eval echo configure:23418: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23405: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_mresult=1\n else\n@@ -23436,7 +23423,7 @@ EOF\n else\n   \n       cat > conftest.$ac_ext <<EOF\n-#line 23440 \"configure\"\n+#line 23427 \"configure\"\n #include \"confdefs.h\"\n #include <unistd.h>\n                   #include <sys/time.h>\n@@ -23446,7 +23433,7 @@ int main() {\n  struct rlimit r; setrlimit(0, &r);\n ; return 0; }\n EOF\n-if { (eval echo configure:23450: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23437: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   ac_setrlimit=yes\n else\n@@ -23462,7 +23449,7 @@ fi\n   fi\n \n   echo $ac_n \"checking for testsuite memory limit support\"\"... $ac_c\" 1>&6\n-echo \"configure:23466: checking for testsuite memory limit support\" >&5\n+echo \"configure:23453: checking for testsuite memory limit support\" >&5\n   if test $setrlimit_have_headers = yes && test $ac_setrlimit = yes; then\n     ac_mem_limits=yes\n     cat >> confdefs.h <<\\EOF\n@@ -23478,7 +23465,7 @@ EOF\n   # Look for setenv, so that extended locale tests can be performed.\n   \n   echo $ac_n \"checking for setenv declaration\"\"... $ac_c\" 1>&6\n-echo \"configure:23482: checking for setenv declaration\" >&5\n+echo \"configure:23469: checking for setenv declaration\" >&5\n   if test x${glibcpp_cv_func_setenv_use+set} != xset; then\n     if eval \"test \\\"`echo '$''{'glibcpp_cv_func_setenv_use'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n@@ -23493,14 +23480,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n \n       cat > conftest.$ac_ext <<EOF\n-#line 23497 \"configure\"\n+#line 23484 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n int main() {\n  setenv(0, 0, 0);\n ; return 0; }\n EOF\n-if { (eval echo configure:23504: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:23491: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   glibcpp_cv_func_setenv_use=yes\n else\n@@ -23526,12 +23513,12 @@ fi\n     for ac_func in setenv\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:23530: checking for $ac_func\" >&5\n+echo \"configure:23517: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 23535 \"configure\"\n+#line 23522 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -23554,7 +23541,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:23558: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:23545: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -23631,18 +23618,18 @@ fi\n # Check to see if libgcc_s exists, indicating that shared libgcc is possible.\n if test $enable_symvers != no; then\n   echo $ac_n \"checking for shared libgcc\"\"... $ac_c\" 1>&6\n-echo \"configure:23635: checking for shared libgcc\" >&5\n+echo \"configure:23622: checking for shared libgcc\" >&5\n   ac_save_CFLAGS=\"$CFLAGS\"\n   CFLAGS=' -lgcc_s'\n   cat > conftest.$ac_ext <<EOF\n-#line 23639 \"configure\"\n+#line 23626 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n return 0\n ; return 0; }\n EOF\n-if { (eval echo configure:23646: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:23633: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   glibcpp_shared_libgcc=yes\n else\n@@ -23677,14 +23664,14 @@ if test $enable_symvers = yes ; then\n       echo 'FOO { global: f[a-z]o; local: *; };' > conftest.map\n       \n       cat > conftest.$ac_ext <<EOF\n-#line 23681 \"configure\"\n+#line 23668 \"configure\"\n #include \"confdefs.h\"\n int foo;\n int main() {\n \n ; return 0; }\n EOF\n-if { (eval echo configure:23688: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:23675: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   enable_symvers=gnu\n else\n@@ -23730,7 +23717,7 @@ else\n   GLIBCPP_BUILD_VERSIONED_SHLIB_FALSE=\n fi\n echo $ac_n \"checking versioning on shared library symbols\"\"... $ac_c\" 1>&6\n-echo \"configure:23734: checking versioning on shared library symbols\" >&5\n+echo \"configure:23721: checking versioning on shared library symbols\" >&5\n echo \"$ac_t\"\"$enable_symvers\" 1>&6\n \n \n@@ -23817,7 +23804,7 @@ glibcpp_prefixdir=${prefix}\n \n # Process the option --with-gxx-include-dir=<path to include-files directory>\n echo $ac_n \"checking for --with-gxx-include-dir\"\"... $ac_c\" 1>&6\n-echo \"configure:23821: checking for --with-gxx-include-dir\" >&5\n+echo \"configure:23808: checking for --with-gxx-include-dir\" >&5\n # Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.\n if test \"${with_gxx_include_dir+set}\" = set; then\n   withval=\"$with_gxx_include_dir\"\n@@ -23841,7 +23828,7 @@ echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n # Process the option \"--enable-version-specific-runtime-libs\"\n echo $ac_n \"checking for --enable-version-specific-runtime-libs\"\"... $ac_c\" 1>&6\n-echo \"configure:23845: checking for --enable-version-specific-runtime-libs\" >&5\n+echo \"configure:23832: checking for --enable-version-specific-runtime-libs\" >&5\n # Check whether --enable-version-specific-runtime-libs or --disable-version-specific-runtime-libs was given.\n if test \"${enable_version_specific_runtime_libs+set}\" = set; then\n   enableval=\"$enable_version_specific_runtime_libs\"\n@@ -23892,7 +23879,7 @@ if test x\"$glibcpp_toolexecdir\" = x\"no\"; then\n fi\n \n echo $ac_n \"checking for install location\"\"... $ac_c\" 1>&6\n-echo \"configure:23896: checking for install location\" >&5\n+echo \"configure:23883: checking for install location\" >&5\n echo \"$ac_t\"\"$gxx_include_dir\" 1>&6\n \n "}, {"sha": "09285aa28aa56ea99b5c4f97b274bdcec4d138ee", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -401,7 +401,7 @@ else\n   # Check for available headers.\n   AC_CHECK_HEADERS([nan.h ieeefp.h endian.h sys/isa_defs.h machine/endian.h \\\n   machine/param.h sys/machine.h fp.h locale.h float.h inttypes.h gconv.h \\\n-  sys/types.h])\n+  sys/types.h libintl.h])\n \n   GLIBCPP_CHECK_COMPILER_FEATURES\n   GLIBCPP_CHECK_LINKER_FEATURES"}, {"sha": "bdbd2ddb18d591945cfde3000d6ca27da1e822a4", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -275,7 +275,7 @@ namespace std\n       _M_check(size_type __pos) const\n       {\n \tif (__pos > this->size())\n-\t  __throw_out_of_range(\"basic_string::_M_check\");\n+\t  __throw_out_of_range(__N(\"basic_string::_M_check\"));\n \treturn _M_ibegin() + __pos;\n       }\n \n@@ -447,15 +447,15 @@ namespace std\n       at(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  __throw_out_of_range(\"basic_string::at\");\n+\t  __throw_out_of_range(__N(\"basic_string::at\"));\n \treturn _M_data()[__n];\n       }\n \n       reference\n       at(size_type __n)\n       {\n \tif (__n >= size())\n-\t  __throw_out_of_range(\"basic_string::at\");\n+\t  __throw_out_of_range(__N(\"basic_string::at\"));\n \t_M_leak();\n \treturn _M_data()[__n];\n       }\n@@ -818,7 +818,7 @@ namespace std\n       substr(size_type __pos = 0, size_type __n = npos) const\n       {\n \tif (__pos > this->size())\n-\t  __throw_out_of_range(\"basic_string::substr\");\n+\t  __throw_out_of_range(__N(\"basic_string::substr\"));\n \treturn basic_string(*this, __pos, __n);\n       }\n "}, {"sha": "21c1067111880dcd848f709b9e8f9435c113c684", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -97,4 +97,10 @@\n # define _GLIBCPP_FAST_MATH 0\n #endif\n \n+// This marks string literals in header files to be extracted for eventual\n+// translation.  It is primarily used for messages in thrown exceptions; see\n+// src/functexcept.cc.  We use __N because the more traditional _N is used\n+// for something else under certain OSes (see BADNAMES).\n+#define __N(msgid)     (msgid)\n+\n // End of prewritten config; the discovered settings follow."}, {"sha": "29fd692235d81a796000e68147c32efddfb3826b", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -480,7 +480,7 @@ template <typename _Alloc>\n   \n     void _M_range_check(size_type __n) const {\n       if (__n >= this->size())\n-        __throw_out_of_range(\"vector<bool>\");\n+        __throw_out_of_range(__N(\"vector<bool>\"));\n     }\n   \n     reference at(size_type __n)\n@@ -607,7 +607,7 @@ template <typename _Alloc>\n   \n     void reserve(size_type __n) {\n       if (__n > this->max_size())\n-\t__throw_length_error(\"vector::reserve\");\n+\t__throw_length_error(__N(\"vector::reserve\"));\n       if (this->capacity() < __n) {\n         _Bit_type * __q = _M_bit_alloc(__n);\n         this->_M_finish = copy(begin(), end(), iterator(__q, 0));"}, {"sha": "63257e2dd8fa7d2fd35d62bc4fac1540bdb090cf", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -940,7 +940,7 @@ namespace std\n     _M_range_check(size_type __n) const\n     {\n       if (__n >= this->size())\n-        __throw_out_of_range(\"deque [] access out of range\");\n+        __throw_out_of_range(__N(\"std::deque [] access out of range\"));\n     }\n   \n   public:"}, {"sha": "bf2881395c084ffc27fddee5ac6190b364814eb9", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -524,7 +524,7 @@ namespace std\n       _M_range_check(size_type __n) const\n       {\n \tif (__n >= this->size())\n-\t  __throw_out_of_range(\"vector [] access out of range\");\n+\t  __throw_out_of_range(__N(\"std::vector [] access out of range\"));\n       }\n       \n     public:"}, {"sha": "4292a4472dc409c4282885281768e233142a6efb", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -264,7 +264,7 @@ namespace std\n     {\n       for (size_t __i = 1; __i < _Nw; ++__i)\n \tif (_M_w[__i])\n-\t  __throw_overflow_error(\"bitset -- too large to fit in unsigned long\");\n+\t  __throw_overflow_error(__N(\"bitset value is too large to fit in unsigned long\"));\n       return _M_w[0];\n     }\n \n@@ -466,7 +466,7 @@ namespace std\n       // localized to this single should-never-get-this-far function.\n       _WordT&\n       _M_getword(size_t) const\n-      { __throw_out_of_range(\"bitset -- zero-length\"); return *new _WordT; }\n+      { __throw_out_of_range(__N(\"bitset is zero-length\")); return *new _WordT; }\n \n       _WordT\n       _M_hiword() const { return 0; }\n@@ -862,7 +862,7 @@ namespace std\n     set(size_t __pos, bool __val = true)\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(\"bitset -- set() argument too large\");\n+\t__throw_out_of_range(__N(\"bitset::set() argument too large\"));\n       return _Unchecked_set(__pos, __val);\n     }\n \n@@ -887,7 +887,7 @@ namespace std\n     reset(size_t __pos)\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(\"bitset -- reset() argument too large\");\n+\t__throw_out_of_range(__N(\"bitset::reset() argument too large\"));\n       return _Unchecked_reset(__pos);\n     }\n \n@@ -911,7 +911,7 @@ namespace std\n     flip(size_t __pos)\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(\"bitset -- flip() argument too large\");\n+\t__throw_out_of_range(__N(\"bitset::flip() argument too large\"));\n       return _Unchecked_flip(__pos);\n     }\n \n@@ -1014,7 +1014,7 @@ namespace std\n     test(size_t __pos) const\n     {\n       if (__pos >= _Nb)\n-\t__throw_out_of_range(\"bitset -- test() argument too large\");\n+\t__throw_out_of_range(__N(\"bitset::test() argument too large\"));\n       return _Unchecked_test(__pos);\n     }\n "}, {"sha": "9065757c32bbbbd08f71b3810a1461e590bf8fb1", "filename": "libstdc++-v3/po/Makefile.am", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fpo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.am?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -22,6 +22,7 @@\n ## USA.\n \n PACKAGE = @PACKAGE@\n+glibcpp_srcdir = @glibcpp_srcdir@\n \n # Location of installation directories.\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n@@ -77,5 +78,13 @@ install-data-local-yes: all-local-yes\n \t  $(INSTALL_DATA) $$cat $$install_dir/$(PACKAGE).mo; \\\n \tdone\n \n+# Maintainence of the .po template file.  This rule is never run automatically,\n+# and updates the source directory.\n+pot:\n+\tcd $(glibcpp_srcdir); \\\n+\txgettext --default-domain=$(PACKAGE) --add-comments --c++ --debug \\\n+\t  --join-existing -o po/$(PACKAGE).pot --keyword=__N \\\n+\t  `grep -r -l '__N(\".*\")' .`\n+\n # Specify what gets cleaned up on a 'make clean'\n CLEANFILES = $(LOCALE_OUT) "}, {"sha": "a579970ce3c407e93f53c35deccc8d78618d686d", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated automatically by automake 1.4-p5 from Makefile.am\n+# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am\n \n # Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n # This Makefile.in is free software; the Free Software Foundation\n@@ -133,7 +133,6 @@ glibcpp_basedir = @glibcpp_basedir@\n glibcpp_builddir = @glibcpp_builddir@\n glibcpp_localedir = @glibcpp_localedir@\n glibcpp_prefixdir = @glibcpp_prefixdir@\n-glibcpp_srcdir = @glibcpp_srcdir@\n glibcpp_thread_h = @glibcpp_thread_h@\n glibcpp_toolexecdir = @glibcpp_toolexecdir@\n glibcpp_toolexeclibdir = @glibcpp_toolexeclibdir@\n@@ -144,6 +143,7 @@ libtool_VERSION = @libtool_VERSION@\n toplevel_srcdir = @toplevel_srcdir@\n \n PACKAGE = @PACKAGE@\n+glibcpp_srcdir = @glibcpp_srcdir@\n \n # Location of installation directories.\n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n@@ -159,9 +159,7 @@ LOCALE_OUT = @glibcpp_MOFILES@\n MSGFMT = msgfmt\n \n # Necessary files.\n-DISTFILES = \\\n-\tMakefile.am Makefile.in string_literals.cc POTFILES.in $(PACKAGE).pot \\\n-\t$(LOCALE_IN) \n+DISTFILES =  \tMakefile.am Makefile.in string_literals.cc POTFILES.in $(PACKAGE).pot \t$(LOCALE_IN) \n \n \n # Specify what gets cleaned up on a 'make clean'\n@@ -176,15 +174,15 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DIST_COMMON =  Makefile.am Makefile.in\n \n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n all: all-redirect\n .SUFFIXES:\n .SUFFIXES: .mo .po\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) \n-\tcd $(top_srcdir) && $(AUTOMAKE) --cygnus po/Makefile\n+\tcd $(top_srcdir) && $(AUTOMAKE) --gnu po/Makefile\n \n-Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status\n+Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)\n \tcd $(top_builddir) \\\n \t  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n@@ -197,8 +195,13 @@ distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)\n subdir = po\n \n distdir: $(DISTFILES)\n+\there=`cd $(top_builddir) && pwd`; \\\n+\ttop_distdir=`cd $(top_distdir) && pwd`; \\\n+\tdistdir=`cd $(distdir) && pwd`; \\\n+\tcd $(top_srcdir) \\\n+\t  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu po/Makefile\n \t@for file in $(DISTFILES); do \\\n-\t  if test -f $$file; then d=.; else d=$(srcdir); fi; \\\n+\t  d=$(srcdir); \\\n \t  if test -d $$d/$$file; then \\\n \t    cp -pr $$d/$$file $(distdir)/$$file; \\\n \t  else \\\n@@ -211,12 +214,10 @@ info-am:\n info: info-am\n dvi-am:\n dvi: dvi-am\n-check-am:\n+check-am: all-am\n check: check-am\n installcheck-am:\n installcheck: installcheck-am\n-install-info-am: \n-install-info: install-info-am\n install-exec-am:\n install-exec: install-exec-am\n \n@@ -265,12 +266,11 @@ maintainer-clean-am:  maintainer-clean-generic distclean-am\n maintainer-clean: maintainer-clean-am\n \n .PHONY: tags distdir info-am info dvi-am dvi check check-am \\\n-installcheck-am installcheck install-info-am install-info \\\n-install-exec-am install-exec install-data-local install-data-am \\\n-install-data install-am install uninstall-am uninstall all-local \\\n-all-redirect all-am all installdirs mostlyclean-generic \\\n-distclean-generic clean-generic maintainer-clean-generic clean \\\n-mostlyclean distclean maintainer-clean\n+installcheck-am installcheck install-exec-am install-exec \\\n+install-data-local install-data-am install-data install-am install \\\n+uninstall-am uninstall all-local all-redirect all-am all installdirs \\\n+mostlyclean-generic distclean-generic clean-generic \\\n+maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n .po.mo:\n@@ -309,6 +309,14 @@ install-data-local-yes: all-local-yes\n \t  $(INSTALL_DATA) $$cat $$install_dir/$(PACKAGE).mo; \\\n \tdone\n \n+# Maintainence of the .po template file.  This rule is never run automatically,\n+# and updates the source directory.\n+pot:\n+\tcd $(glibcpp_srcdir); \\\n+\txgettext --default-domain=$(PACKAGE) --add-comments --c++ --debug \\\n+\t  --join-existing -o po/$(PACKAGE).pot --keyword=__N \\\n+\t  `grep -r -l '__N(\".*\")' .`\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}, {"sha": "82a0e881e3f676404e33c953e8d4b40ffcb66b1c", "filename": "libstdc++-v3/src/functexcept.cc", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad41429085cb4de37aef72bee814b08acc8a2a35/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffunctexcept.cc?ref=ad41429085cb4de37aef72bee814b08acc8a2a35", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,6 +32,12 @@\n #include <new>\n #include <typeinfo>\n #include <ios>\n+#ifdef _GLIBCPP_HAVE_LIBINTL_H\n+# include <libintl.h>\n+# define _(msgid)   gettext (msgid)\n+#else\n+# define _(msgid)   (msgid)\n+#endif\n \n namespace std \n {\n@@ -54,43 +60,43 @@ namespace std\n \n   void\n   __throw_logic_error(const char* __s)\n-  { throw logic_error(__s); }\n+  { throw logic_error(_(__s)); }\n \n   void\n   __throw_domain_error(const char* __s)\n-  { throw domain_error(__s); }\n+  { throw domain_error(_(__s)); }\n \n   void\n   __throw_invalid_argument(const char* __s)\n-  { throw invalid_argument(__s); }\n+  { throw invalid_argument(_(__s)); }\n \n   void\n   __throw_length_error(const char* __s)\n-  { throw length_error(__s); }\n+  { throw length_error(_(__s)); }\n \n   void\n   __throw_out_of_range(const char* __s)\n-  { throw out_of_range(__s); }\n+  { throw out_of_range(_(__s)); }\n \n   void\n   __throw_runtime_error(const char* __s)\n-  { throw runtime_error(__s); }\n+  { throw runtime_error(_(__s)); }\n \n   void\n   __throw_range_error(const char* __s)\n-  { throw range_error(__s); }\n+  { throw range_error(_(__s)); }\n \n   void\n   __throw_overflow_error(const char* __s)\n-  { throw overflow_error(__s); }\n+  { throw overflow_error(_(__s)); }\n \n   void\n   __throw_underflow_error(const char* __s)\n-  { throw underflow_error(__s); }\n+  { throw underflow_error(_(__s)); }\n \n   void\n   __throw_ios_failure(const char* __s)\n-  { throw ios_base::failure(__s); }\n+  { throw ios_base::failure(_(__s)); }\n #else\n   void\n   __throw_bad_exception(void)"}]}