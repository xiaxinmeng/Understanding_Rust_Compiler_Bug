{"sha": "3c1cbf58a609a29362ed15c322d588797f3f4cc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MxY2JmNThhNjA5YTI5MzYyZWQxNWMzMjJkNTg4Nzk3ZjNmNGNjNQ==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2004-08-28T00:41:41Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2004-08-28T00:41:41Z"}, "message": "backgraph.c, gc_priv.h (GC_traverse_back_graph, [...]): split GC_traverse_back_graph.\n\n\t* backgraph.c, gc_priv.h (GC_traverse_back_graph,\n\tGC_print_back_graph_stats): split GC_traverse_back_graph.\n\t* backgraph.c: Dynamically grow in_progress_space.\n\t* finalize.c (GC_notify_or_invoke_finalizers): also call\n\tGC_print_back_graph_stats.\n\t* alloc.c, finalize.c, gc_priv.h (GC_generate_random_backtrace_no_gc,\n\tGC_print_back_height): Move delarations to header file.\n\t* configure.ac: rename --enable-full-debug to --enable-gc-debug.\n\t* configure: Regenerate.\n\nFrom-SVN: r86685", "tree": {"sha": "1700d39f175d8dd7078f737fd9bd0459c9a9f3f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1700d39f175d8dd7078f737fd9bd0459c9a9f3f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c1cbf58a609a29362ed15c322d588797f3f4cc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1cbf58a609a29362ed15c322d588797f3f4cc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1cbf58a609a29362ed15c322d588797f3f4cc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1cbf58a609a29362ed15c322d588797f3f4cc5/comments", "author": null, "committer": null, "parents": [{"sha": "5dc50f2714548eae49af060e8e03414ed94dcf0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc50f2714548eae49af060e8e03414ed94dcf0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc50f2714548eae49af060e8e03414ed94dcf0c"}], "stats": {"total": 117, "additions": 77, "deletions": 40}, "files": [{"sha": "4d48b580265607dbed74f292a599ca5143cdfa3d", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -1,3 +1,15 @@\n+2004-08-27  Hans Boehm  <Hans.Boehm@hp.com>\n+\n+\t* backgraph.c, gc_priv.h (GC_traverse_back_graph,\n+\tGC_print_back_graph_stats): split GC_traverse_back_graph.\n+\t* backgraph.c: Dynamically grow in_progress_space.\n+\t* finalize.c (GC_notify_or_invoke_finalizers): also call\n+\tGC_print_back_graph_stats.\n+\t* alloc.c, finalize.c, gc_priv.h (GC_generate_random_backtrace_no_gc,\n+\tGC_print_back_height): Move delarations to header file.\n+\t* configure.ac: rename --enable-full-debug to --enable-gc-debug.\n+\t* configure: Regenerate.\n+\t\n 2004-08-23  Hans Boehm  <Hans.Boehm@hp.com>\n \n \t* aix_irix_threads.c: Move _THREADS checks after gc_priv.h include."}, {"sha": "45c71d3fd06dce6267b0d4a7d9c9ac08e71dd7f9", "filename": "boehm-gc/alloc.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Falloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Falloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Falloc.c?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -104,8 +104,6 @@ word GC_free_space_divisor = 3;\n extern GC_bool GC_collection_in_progress();\n \t\t/* Collection is in progress, or was abandoned.\t*/\n \n-extern GC_bool GC_print_back_height;\n-\n int GC_never_stop_func GC_PROTO((void)) { return(0); }\n \n unsigned long GC_time_limit = TIME_LIMIT;"}, {"sha": "94757c89158a573669b0875ecf212dc26eeaa7da", "filename": "boehm-gc/backgraph.c", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Fbackgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Fbackgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fbackgraph.c?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -87,7 +87,7 @@ static back_edges * new_back_edges(void)\n {\n   if (0 == back_edge_space) {\n     back_edge_space = (back_edges *)\n-\t    \t\tsbrk(MAX_BACK_EDGE_STRUCTS*sizeof(back_edges));\n+\t    \t\tGET_MEM(MAX_BACK_EDGE_STRUCTS*sizeof(back_edges));\n   }\n   if (0 != avail_back_edges) {\n     back_edges * result = avail_back_edges;\n@@ -115,17 +115,31 @@ static void deallocate_back_edges(back_edges *p)\n /* Table of objects that are currently on the depth-first search\t*/\n /* stack.  Only objects with in-degree one are in this table.\t\t*/\n /* Other objects are identified using HEIGHT_IN_PROGRESS.\t\t*/\n-/* This data structure NEEDS IMPROVEMENT.\t\t\t\t*/\n-#define MAX_IN_PROGRESS 10000\n+/* FIXME: This data structure NEEDS IMPROVEMENT.\t\t\t*/\n+#define INITIAL_IN_PROGRESS 10000\n static ptr_t * in_progress_space = 0;\n-static int n_in_progress = 0;\n+static size_t in_progress_size = 0;\n+static size_t n_in_progress = 0;\n \n static void push_in_progress(ptr_t p)\n {\n+  if (n_in_progress >= in_progress_size) \n+    if (in_progress_size == 0) {\n+      in_progress_size = INITIAL_IN_PROGRESS;\n+      in_progress_space = (ptr_t *)GET_MEM(in_progress_size * sizeof(ptr_t));\n+    } else {\n+      ptr_t * new_in_progress_space;\n+      in_progress_size *= 2;\n+      new_in_progress_space = (ptr_t *)\n+\t      \t\t\tGET_MEM(in_progress_size * sizeof(ptr_t));\n+      BCOPY(in_progress_space, new_in_progress_space,\n+\t    n_in_progress * sizeof(ptr_t));\n+      in_progress_space = new_in_progress_space;\n+      /* FIXME: This just drops the old space.\t*/\n+    }\n   if (in_progress_space == 0)\n-      in_progress_space = sbrk(MAX_IN_PROGRESS * sizeof(ptr_t));\n-  if (n_in_progress == MAX_IN_PROGRESS)\n-      ABORT(\"Exceeded MAX_IN_PROGRESS\");\n+      ABORT(\"MAKE_BACK_GRAPH: Out of in-progress space: \"\n+\t    \"Huge linear data structure?\");\n   in_progress_space[n_in_progress++] = p;\n }\n \n@@ -320,8 +334,8 @@ static void add_back_edges(ptr_t p, word n_words, word gc_descr)\n   }\n }\n \n-/* Rebuild the reprentation of the backward reachability graph.\t*/\n-/* Does not examine mark bits.  Can be called before GC.\t*/\n+/* Rebuild the representation of the backward reachability graph.\t*/\n+/* Does not examine mark bits.  Can be called before GC.\t\t*/\n void GC_build_back_graph(void)\n {\n   GC_apply_to_each_object(add_back_edges);\n@@ -426,15 +440,20 @@ static void update_max_height(ptr_t p, word n_words, word gc_descr)\n   }\n }\n \n+word GC_max_max_height = 0;\n+\n void GC_traverse_back_graph(void)\n {\n-  static word max_max_height = 0;\n   GC_max_height = 0;\n   GC_apply_to_each_object(update_max_height);\n+}\n+\n+void GC_print_back_graph_stats(void)\n+{\n   GC_printf2(\"Maximum backwards height of reachable objects at GC %lu is %ld\\n\",\n \t     (unsigned long) GC_gc_no, GC_max_height);\n-  if (GC_max_height > max_max_height) {\n-    max_max_height = GC_max_height;\n+  if (GC_max_height > GC_max_max_height) {\n+    GC_max_max_height = GC_max_height;\n     GC_printf0(\"The following unreachable object is last in a longest chain \"\n \t       \"of unreachable objects:\\n\");\n     GC_print_heap_obj(GC_deepest_obj);"}, {"sha": "7cbcb5f2ac01bac87eeab9e7caf7187764ab5980", "filename": "boehm-gc/configure", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -852,7 +852,7 @@ Optional Features:\n   --enable-fast-install=PKGS  optimize for fast installation default=yes\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --enable-parallel-mark\tparallelize marking and free list construction\n-  --enable-full-debug\tinclude full support for pointer backtracing etc.\n+  --enable-gc-debug\tinclude full support for pointer backtracing etc.\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -6495,10 +6495,10 @@ _ACEOF\n \n fi\n \n-# Check whether --enable-full-debug or --disable-full-debug was given.\n-if test \"${enable_full_debug+set}\" = set; then\n-  enableval=\"$enable_full_debug\"\n-   if test \"$enable_full_debug\" = \"yes\"; then\n+# Check whether --enable-gc-debug or --disable-gc-debug was given.\n+if test \"${enable_gc_debug+set}\" = set; then\n+  enableval=\"$enable_gc_debug\"\n+   if test \"$enable_gc_debug\" = \"yes\"; then\n     { echo \"$as_me:$LINENO: WARNING: \\\"Must define GC_DEBUG and use debug alloc. in clients.\\\"\" >&5\n echo \"$as_me: WARNING: \\\"Must define GC_DEBUG and use debug alloc. in clients.\\\"\" >&2;}\n     cat >>confdefs.h <<\\_ACEOF"}, {"sha": "b98d8fbbc008051869e64867a532af5351e5f5e1", "filename": "boehm-gc/configure.ac", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.ac?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -426,9 +426,9 @@ if test -n \"${with_cross_host}\"; then\n    AC_DEFINE(NO_DEBUGGING)\n fi\n \n-AC_ARG_ENABLE(full-debug,\n-[  --enable-full-debug\tinclude full support for pointer backtracing etc.],\n-[ if test \"$enable_full_debug\" = \"yes\"; then\n+AC_ARG_ENABLE(gc-debug,\n+[  --enable-gc-debug\tinclude full support for pointer backtracing etc.],\n+[ if test \"$enable_gc_debug\" = \"yes\"; then\n     AC_MSG_WARN(\"Must define GC_DEBUG and use debug alloc. in clients.\")\n     AC_DEFINE(KEEP_BACK_PTRS)\n     AC_DEFINE(DBG_HDRS_ALL)\n@@ -444,8 +444,8 @@ AC_ARG_ENABLE(full-debug,\n       i[3456]86-*-dgux*)\n \tAC_DEFINE(MAKE_BACK_GRAPH)\n       ;;\n-    esac ]\n-  fi)\n+    esac \n+  fi])\n \n if test -n \"$with_cross_host\" &&\n    test x\"$with_cross_host\" != x\"no\"; then"}, {"sha": "893f825976f65e9f0493a8178d86524c2b2dabbc", "filename": "boehm-gc/finalize.c", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Ffinalize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Ffinalize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Ffinalize.c?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -807,35 +807,36 @@ void (* GC_finalizer_notifier)() = (void (*) GC_PROTO((void)))0;\n \n static GC_word last_finalizer_notification = 0;\n \n-#ifdef KEEP_BACK_PTRS\n-void GC_generate_random_backtrace_no_gc(void);\n-#endif\n-\n void GC_notify_or_invoke_finalizers GC_PROTO((void))\n {\n     /* This is a convenient place to generate backtraces if appropriate, */\n     /* since that code is not callable with the allocation lock.\t */\n-#   ifdef KEEP_BACK_PTRS\n-      if (GC_backtraces > 0) {\n-\tstatic word last_back_trace_gc_no = 3;\t/* Skip early ones. */\n-\tlong i;\n+#   if defined(KEEP_BACK_PTRS) || defined(MAKE_BACK_GRAPH)\n+      static word last_back_trace_gc_no = 1;\t/* Skip first one. */\n \n-\tLOCK();\n-\tif (GC_gc_no > last_back_trace_gc_no) {\n+      if (GC_gc_no > last_back_trace_gc_no) {\n+\tword i;\n+\n+#\tifdef KEEP_BACK_PTRS\n+\t  LOCK();\n \t  /* Stops when GC_gc_no wraps; that's OK.\t*/\n-\t    last_back_trace_gc_no = (word)(-1);  /* disable others. */\n-\t    for (i = 0; i < GC_backtraces; ++i) {\n+\t  last_back_trace_gc_no = (word)(-1);  /* disable others. */\n+\t  for (i = 0; i < GC_backtraces; ++i) {\n \t      /* FIXME: This tolerates concurrent heap mutation,\t*/\n \t      /* which may cause occasional mysterious results.\t\t*/\n \t      /* We need to release the GC lock, since GC_print_callers\t*/\n \t      /* acquires it.  It probably shouldn't.\t\t\t*/\n \t      UNLOCK();\n \t      GC_generate_random_backtrace_no_gc();\n \t      LOCK();\n-\t    }\n-\t    last_back_trace_gc_no = GC_gc_no;\n-\t}\n-\tUNLOCK();\n+\t  }\n+\t  last_back_trace_gc_no = GC_gc_no;\n+\t  UNLOCK();\n+#\tendif\n+#       ifdef MAKE_BACK_GRAPH\n+\t  if (GC_print_back_height)\n+            GC_print_back_graph_stats();\n+#\tendif\n       }\n #   endif\n     if (GC_finalize_now == 0) return;"}, {"sha": "561e40326282ded2cb3925c2b902b628b283ee10", "filename": "boehm-gc/include/private/gc_priv.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c1cbf58a609a29362ed15c322d588797f3f4cc5/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgc_priv.h?ref=3c1cbf58a609a29362ed15c322d588797f3f4cc5", "patch": "@@ -1725,6 +1725,13 @@ extern GC_bool GC_print_stats;\t/* Produce at least some logging output\t*/\n \n #ifdef KEEP_BACK_PTRS\n   extern long GC_backtraces;\n+  void GC_generate_random_backtrace_no_gc(void);\n+#endif\n+\n+extern GC_bool GC_print_back_height;\n+\n+#ifdef MAKE_BACK_GRAPH\n+  void GC_print_back_graph_stats(void);\n #endif\n \n /* Macros used for collector internal allocation.\t*/"}]}