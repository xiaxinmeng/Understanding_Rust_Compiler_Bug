{"sha": "91f9b2e0f7054c64e56053993de41b14c5e02226", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmOWIyZTBmNzA1NGM2NGU1NjA1Mzk5M2RlNDFiMTRjNWUwMjIyNg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2018-10-17T19:58:58Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2018-10-17T19:58:58Z"}, "message": "Fix select-type regression\n\n        PR fortran/87632\n        * resolve.c (resolve_select_type): Use correct variable.\n\n        PR fortran/87632\n        * gfortran.dg/select_type_47.f90: New.\n\nFrom-SVN: r265248", "tree": {"sha": "1b775bb502ec341d64250fa025d0c96f01492905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b775bb502ec341d64250fa025d0c96f01492905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f9b2e0f7054c64e56053993de41b14c5e02226", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f9b2e0f7054c64e56053993de41b14c5e02226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f9b2e0f7054c64e56053993de41b14c5e02226", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f9b2e0f7054c64e56053993de41b14c5e02226/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4026227f21e6c06cbadfa3ac3ab8699719b2bc65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4026227f21e6c06cbadfa3ac3ab8699719b2bc65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4026227f21e6c06cbadfa3ac3ab8699719b2bc65"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "4f216d94cae4c65c2630897e4c6c29ea968c81a8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=91f9b2e0f7054c64e56053993de41b14c5e02226", "patch": "@@ -1,3 +1,8 @@\n+2018-10-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/87632\n+\t* resolve.c (resolve_select_type): Use correct variable.\n+\n 2018-10-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* Make-lang.in (selftest-fortran): New."}, {"sha": "7ec9e969c71e0f1a38b72d821bc1a3317492c588", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=91f9b2e0f7054c64e56053993de41b14c5e02226", "patch": "@@ -8914,7 +8914,7 @@ resolve_select_type (gfc_code *code, gfc_namespace *old_ns)\n       if (ref2)\n \t{\n \t  if (code->expr1->symtree->n.sym->attr.untyped)\n-\t    code->expr1->symtree->n.sym->ts = ref->u.c.component->ts;\n+\t    code->expr1->symtree->n.sym->ts = ref2->u.c.component->ts;\n \t  selector_type = CLASS_DATA (ref2->u.c.component)->ts.u.derived;\n \t}\n       else"}, {"sha": "9cb109ef0346295138f25efc4f462daf4835f3eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91f9b2e0f7054c64e56053993de41b14c5e02226", "patch": "@@ -1,3 +1,8 @@\n+2018-10-17  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/87632\n+\t* gfortran.dg/select_type_47.f90: New.\n+\n 2018-10-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/pr87623.c: New test."}, {"sha": "c7a750e35acb53b9f72aae135dfd86fc86f2124e", "filename": "gcc/testsuite/gfortran.dg/select_type_47.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_47.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f9b2e0f7054c64e56053993de41b14c5e02226/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_47.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselect_type_47.f90?ref=91f9b2e0f7054c64e56053993de41b14c5e02226", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do compile }\n+!\n+! PR fortran/87632\n+!\n+! Contributed by J\u00fcrgen Reuter\n+!\n+module m\n+type t\n+  integer :: i\n+end type t\n+type t2\n+  type(t) :: phs_config\n+end type t2\n+end module m\n+\n+module m2\n+use m\n+implicit none\n+type t3\n+end type t3\n+\n+type process_t\n+  private\n+  type(t2), allocatable :: component(:)\n+contains\n+  procedure :: get_phs_config => process_get_phs_config\n+end type process_t\n+\n+contains\n+  subroutine process_extract_resonance_history_set &\n+       (process, include_trivial, i_component)\n+    class(process_t), intent(in), target :: process\n+    logical, intent(in), optional :: include_trivial\n+    integer, intent(in), optional :: i_component\n+    integer :: i\n+    i = 1;  if (present (i_component))  i = i_component\n+    select type (phs_config => process%get_phs_config (i))\n+    class is (t)\n+       call foo()\n+    class default\n+       call bar()\n+    end select\n+  end subroutine process_extract_resonance_history_set\n+\n+  function process_get_phs_config (process, i_component) result (phs_config)\n+    class(t), pointer :: phs_config\n+    class(process_t), intent(in), target :: process\n+    integer, intent(in) :: i_component\n+    if (allocated (process%component)) then\n+       phs_config => process%component(i_component)%phs_config\n+    else\n+       phs_config => null ()\n+    end if\n+  end function process_get_phs_config\n+end module m2\n+\n+program main\n+  use m2\n+end program main"}]}