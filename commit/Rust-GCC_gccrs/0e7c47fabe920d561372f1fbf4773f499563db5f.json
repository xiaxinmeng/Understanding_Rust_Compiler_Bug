{"sha": "0e7c47fabe920d561372f1fbf4773f499563db5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU3YzQ3ZmFiZTkyMGQ1NjEzNzJmMWZiZjQ3NzNmNDk5NTYzZGI1Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T23:21:34Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-03-30T23:21:34Z"}, "message": "(internal_build_compound_expr): Warn if LHS of comma expression has no side effects...\n\n(internal_build_compound_expr): Warn if LHS of comma expression has no\nside effects, or computes value which is not used.\n\nFrom-SVN: r9264", "tree": {"sha": "c0c4e5d0eea22a70753b3b2b09f7e9dea653746e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0c4e5d0eea22a70753b3b2b09f7e9dea653746e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e7c47fabe920d561372f1fbf4773f499563db5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7c47fabe920d561372f1fbf4773f499563db5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7c47fabe920d561372f1fbf4773f499563db5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7c47fabe920d561372f1fbf4773f499563db5f/comments", "author": null, "committer": null, "parents": [{"sha": "515a7242ff3435dc83e8a5ea31660156f7fdc33f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515a7242ff3435dc83e8a5ea31660156f7fdc33f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515a7242ff3435dc83e8a5ea31660156f7fdc33f"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "e4cfd45c2ba03bc55647fd69fe070fbcf1a9e8c6", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e7c47fabe920d561372f1fbf4773f499563db5f/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e7c47fabe920d561372f1fbf4773f499563db5f/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0e7c47fabe920d561372f1fbf4773f499563db5f", "patch": "@@ -3478,10 +3478,28 @@ internal_build_compound_expr (list, first_p)\n \n   rest = internal_build_compound_expr (TREE_CHAIN (list), FALSE);\n \n-  /* When pedantic, a compound expression can be neither an lvalue\n-     nor an integer constant expression.  */\n-  if (! TREE_SIDE_EFFECTS (TREE_VALUE (list)) && ! pedantic)\n-    return rest;\n+  if (! TREE_SIDE_EFFECTS (TREE_VALUE (list)))\n+    {\n+      /* The left-hand operand of a comma expression is like an expression\n+         statement: with -W or -Wunused, we should warn if it doesn't have\n+\t any side-effects, unless it was explicitly cast to (void).  */\n+      if ((extra_warnings || warn_unused)\n+           && ! (TREE_CODE (TREE_VALUE (list)) == CONVERT_EXPR\n+                && TREE_TYPE (TREE_VALUE (list)) == void_type_node))\n+        warning (\"left-hand operand of comma expression has no effect\");\n+\n+      /* When pedantic, a compound expression can be neither an lvalue\n+         nor an integer constant expression.  */\n+      if (! pedantic)\n+        return rest;\n+    }\n+\n+  /* With -Wunused, we should also warn if the left-hand operand does have\n+     side-effects, but computes a value which is not used.  For example, in\n+     `foo() + bar(), baz()' the result of the `+' operator is not used,\n+     so we should issue a warning.  */\n+  else if (warn_unused)\n+    warn_if_unused_value (TREE_VALUE (list));\n \n   return build (COMPOUND_EXPR, TREE_TYPE (rest), TREE_VALUE (list), rest);\n }"}]}