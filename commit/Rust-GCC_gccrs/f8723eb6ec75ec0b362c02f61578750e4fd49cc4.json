{"sha": "f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg3MjNlYjZlYzc1ZWMwYjM2MmMwMmY2MTU3ODc1MGU0ZmQ0OWNjNA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-03-04T03:01:21Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-03-04T03:01:21Z"}, "message": "doc: normalize 3DNow! spelling and spacing.\n\ngcc/:\n\t* doc/extend.texi (Vector Extensions, X86 Built-in Functions):\n\tUse '3DNow!' for the extension of that name, ensure normal space\n\tafter the string.\n\t* doc/invoke.texi (i386 and x86-64 Options): Likewise.\n\nFrom-SVN: r157215", "tree": {"sha": "a5e0e66a99d403f9bfb21f7e0fd10e5a811cc762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5e0e66a99d403f9bfb21f7e0fd10e5a811cc762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/comments", "author": null, "committer": null, "parents": [{"sha": "0f752f4435e6cd73d253d3aaa534c0d7836e67b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f752f4435e6cd73d253d3aaa534c0d7836e67b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f752f4435e6cd73d253d3aaa534c0d7836e67b2"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "d68800760d3b95a2315a2a1a0b49f0a187a762d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "patch": "@@ -1,3 +1,10 @@\n+2010-03-04  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/extend.texi (Vector Extensions, X86 Built-in Functions):\n+\tUse '3DNow!' for the extension of that name, ensure normal space\n+\tafter the string.\n+\t* doc/invoke.texi (i386 and x86-64 Options): Likewise.\n+\n 2010-03-03  Jeff Law  <law@redhat.com>\n \n \t* PR middle-end/32693"}, {"sha": "62a57a92b0ae690ee55ed8fc3f747fddb93a7d22", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "patch": "@@ -6056,7 +6056,7 @@ purposes.\n \n On some targets, the instruction set contains SIMD vector instructions that\n operate on multiple values contained in one large register at the same time.\n-For example, on the i386 the MMX, 3Dnow! and SSE extensions can be used\n+For example, on the i386 the MMX, 3DNow!@: and SSE extensions can be used\n this way.\n \n The first step in using these extensions is to provide the necessary data\n@@ -8201,7 +8201,7 @@ The following machine modes are available for use with MMX built-in functions\n vector of eight 8-bit integers.  Some of the built-in functions operate on\n MMX registers as a whole 64-bit entity, these use @code{V1DI} as their mode.\n \n-If 3Dnow extensions are enabled, @code{V2SF} is used as a mode for a vector\n+If 3DNow!@: extensions are enabled, @code{V2SF} is used as a mode for a vector\n of two 32-bit floating point values.\n \n If SSE extensions are enabled, @code{V4SF} is used for a vector of four 32-bit"}, {"sha": "060be884e0ca8c08de142b0eded973d670ad6425", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8723eb6ec75ec0b362c02f61578750e4fd49cc4/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f8723eb6ec75ec0b362c02f61578750e4fd49cc4", "patch": "@@ -11715,36 +11715,36 @@ instruction set support.\n @item k6\n AMD K6 CPU with MMX instruction set support.\n @item k6-2, k6-3\n-Improved versions of AMD K6 CPU with MMX and 3dNOW!@: instruction set support.\n+Improved versions of AMD K6 CPU with MMX and 3DNow!@: instruction set support.\n @item athlon, athlon-tbird\n-AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW!@: and SSE prefetch instructions\n+AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow!@: and SSE prefetch instructions\n support.\n @item athlon-4, athlon-xp, athlon-mp\n-Improved AMD Athlon CPU with MMX, 3dNOW!, enhanced 3dNOW!@: and full SSE\n+Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow!@: and full SSE\n instruction set support.\n @item k8, opteron, athlon64, athlon-fx\n AMD K8 core based CPUs with x86-64 instruction set support.  (This supersets\n-MMX, SSE, SSE2, 3dNOW!, enhanced 3dNOW!@: and 64-bit instruction set extensions.)\n+MMX, SSE, SSE2, 3DNow!, enhanced 3DNow!@: and 64-bit instruction set extensions.)\n @item k8-sse3, opteron-sse3, athlon64-sse3\n Improved versions of k8, opteron and athlon64 with SSE3 instruction set support.\n @item amdfam10, barcelona\n AMD Family 10h core based CPUs with x86-64 instruction set support.  (This\n-supersets MMX, SSE, SSE2, SSE3, SSE4A, 3dNOW!, enhanced 3dNOW!, ABM and 64-bit\n+supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit\n instruction set extensions.)\n @item winchip-c6\n IDT Winchip C6 CPU, dealt in same way as i486 with additional MMX instruction\n set support.\n @item winchip2\n-IDT Winchip2 CPU, dealt in same way as i486 with additional MMX and 3dNOW!@:\n+IDT Winchip2 CPU, dealt in same way as i486 with additional MMX and 3DNow!@:\n instruction set support.\n @item c3\n-Via C3 CPU with MMX and 3dNOW!@: instruction set support.  (No scheduling is\n+Via C3 CPU with MMX and 3DNow!@: instruction set support.  (No scheduling is\n implemented for this chip.)\n @item c3-2\n Via C3-2 CPU with MMX and SSE instruction set support.  (No scheduling is\n implemented for this chip.)\n @item geode\n-Embedded AMD CPU with MMX and 3dNOW! instruction set support.\n+Embedded AMD CPU with MMX and 3DNow!@: instruction set support.\n @end table\n \n While picking a specific @var{cpu-type} will schedule things appropriately"}]}