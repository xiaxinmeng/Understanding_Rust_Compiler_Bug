{"sha": "a5f65cf7ad640ae398eba7a45c712322ce841809", "node_id": "C_kwDOANBUbNoAKGE1ZjY1Y2Y3YWQ2NDBhZTM5OGViYTdhNDVjNzEyMzIyY2U4NDE4MDk", "commit": {"author": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2021-12-10T10:26:42Z"}, "committer": {"name": "Joel Hutton", "email": "joel.hutton@arm.com", "date": "2021-12-10T10:28:01Z"}, "message": "pr103523: Check for PLUS/MINUS support\n\nCheck for PLUS_EXPR/MINUS_EXPR support in vectorizable_induction.\nPR103523 is an ICE on valid code:\n\nvoid d(float *a, float b, int c) {\n    float e;\n    for (; c; c--, e += b)\n      a[c] = e;\n}\n\nThis is due to not checking for PLUS_EXPR support, which is missing in\nVNx2sf mode. This causes an ICE at expand time. This patch adds a check\nfor support in vectorizable_induction.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103523\n\t* tree-vect-loop.c (vectorizable_induction): Check for\n\tPLUS_EXPR/MINUS_EXPR support.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/pr103523.c: New test.", "tree": {"sha": "ab066b3b66409b732938c03d21ac6c918132246e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab066b3b66409b732938c03d21ac6c918132246e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5f65cf7ad640ae398eba7a45c712322ce841809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f65cf7ad640ae398eba7a45c712322ce841809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5f65cf7ad640ae398eba7a45c712322ce841809", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5f65cf7ad640ae398eba7a45c712322ce841809/comments", "author": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoelHutton", "id": 4455754, "node_id": "MDQ6VXNlcjQ0NTU3NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4455754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoelHutton", "html_url": "https://github.com/JoelHutton", "followers_url": "https://api.github.com/users/JoelHutton/followers", "following_url": "https://api.github.com/users/JoelHutton/following{/other_user}", "gists_url": "https://api.github.com/users/JoelHutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoelHutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoelHutton/subscriptions", "organizations_url": "https://api.github.com/users/JoelHutton/orgs", "repos_url": "https://api.github.com/users/JoelHutton/repos", "events_url": "https://api.github.com/users/JoelHutton/events{/privacy}", "received_events_url": "https://api.github.com/users/JoelHutton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db184a3453b6fe810e2d9765ef8ed9028f96e968", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db184a3453b6fe810e2d9765ef8ed9028f96e968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db184a3453b6fe810e2d9765ef8ed9028f96e968"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "736e8936c5f6768bdf098ddc37b2c21ab74ee0df", "filename": "gcc/testsuite/gcc.target/aarch64/pr103523.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f65cf7ad640ae398eba7a45c712322ce841809/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103523.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f65cf7ad640ae398eba7a45c712322ce841809/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103523.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103523.c?ref=a5f65cf7ad640ae398eba7a45c712322ce841809", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+sve -mtune=neoverse-v1 -Ofast\" } */\n+\n+void d(float *a, float b, int c) {\n+    float e;\n+    for (; c; c--, e += b)\n+      a[c] = e;\n+}"}, {"sha": "f700d5e7ac2c05402407a46113320f79359906fa", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5f65cf7ad640ae398eba7a45c712322ce841809/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5f65cf7ad640ae398eba7a45c712322ce841809/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=a5f65cf7ad640ae398eba7a45c712322ce841809", "patch": "@@ -8065,6 +8065,15 @@ vectorizable_induction (loop_vec_info loop_vinfo,\n       return false;\n     }\n \n+  step_expr = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_info);\n+  gcc_assert (step_expr != NULL_TREE);\n+  tree step_vectype = get_same_sized_vectype (TREE_TYPE (step_expr), vectype);\n+\n+  /* Check for backend support of PLUS/MINUS_EXPR. */\n+  if (!directly_supported_p (PLUS_EXPR, step_vectype)\n+      || !directly_supported_p (MINUS_EXPR, step_vectype))\n+    return false;\n+\n   if (!vec_stmt) /* transformation not required.  */\n     {\n       unsigned inside_cost = 0, prologue_cost = 0;\n@@ -8124,10 +8133,6 @@ vectorizable_induction (loop_vec_info loop_vinfo,\n   if (dump_enabled_p ())\n     dump_printf_loc (MSG_NOTE, vect_location, \"transform induction phi.\\n\");\n \n-  step_expr = STMT_VINFO_LOOP_PHI_EVOLUTION_PART (stmt_info);\n-  gcc_assert (step_expr != NULL_TREE);\n-  tree step_vectype = get_same_sized_vectype (TREE_TYPE (step_expr), vectype);\n-\n   pe = loop_preheader_edge (iv_loop);\n   /* Find the first insertion point in the BB.  */\n   basic_block bb = gimple_bb (phi);"}]}