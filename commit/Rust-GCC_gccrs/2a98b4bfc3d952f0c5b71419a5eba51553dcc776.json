{"sha": "2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5OGI0YmZjM2Q5NTJmMGM1YjcxNDE5YTVlYmE1MTU1M2RjYzc3Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-11-06T10:26:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-11-06T10:26:44Z"}, "message": "tbaa-1.c: New testcase.\n\n\n\t* gcc.dg/lto/tbaa-1.c: New testcase.\n\n\t* tree.c (fld_type_variant): Copy canonical type.\n\t(fld_incomplete_type_of): Check that canonical types looks sane;\n\tcopy canonical type.\n\t(verify_type): Accept when incomplete type has complete canonical type.\n\nFrom-SVN: r265835", "tree": {"sha": "b886c9b6ac6a5824c39d4a0eee6707238ee10274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b886c9b6ac6a5824c39d4a0eee6707238ee10274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/comments", "author": null, "committer": null, "parents": [{"sha": "23cab40dba566b17e1d05157c33b78030cfc175a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cab40dba566b17e1d05157c33b78030cfc175a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cab40dba566b17e1d05157c33b78030cfc175a"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "90b4699237a186fe45593630b577b42e9a29bbd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "patch": "@@ -1,3 +1,10 @@\n+018-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (fld_type_variant): Copy canonical type.\n+\t(fld_incomplete_type_of): Check that canonical types looks sane;\n+\tcopy canonical type.\n+\t(verify_type): Accept when incomplete type has complete canonical type.\n+\n 2018-11-06  Jan Hubicka  <jh@suse.cz>\n \n \t* tree.c (free_lang_data): Reset overwite_assembler_name,"}, {"sha": "1ba1eaf13efc70e1fb480d7f84cfcb67a64ebc97", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "patch": "@@ -1,3 +1,7 @@\n+2018-11-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/lto/tbaa-1.c: New testcase.\n+\n 2018-11-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87889"}, {"sha": "74c0496711330758e2b944fe60808273cb7dc7e6", "filename": "gcc/testsuite/gcc.dg/lto/tbaa-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftbaa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftbaa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Ftbaa-1.c?ref=2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flto -fdump-tree-evrp\" } */\n+typedef struct rtx_def *rtx;\n+typedef struct cselib_val_struct\n+{\n+  union\n+  {\n+  } u;\n+  struct elt_loc_list *locs;\n+}\n+cselib_val;\n+struct elt_loc_list\n+{\n+  struct elt_loc_list *next;\n+  rtx loc;\n+};\n+static int n_useless_values;\n+unchain_one_elt_loc_list (pl)\n+     struct elt_loc_list **pl;\n+{\n+  struct elt_loc_list *l = *pl;\n+  *pl = l->next;\n+}\n+\n+discard_useless_locs (x, info)\n+     void **x;\n+{\n+  cselib_val *v = (cselib_val *) * x;\n+  struct elt_loc_list **p = &v->locs;\n+  int had_locs = v->locs != 0;\n+  while (*p)\n+    {\n+      unchain_one_elt_loc_list (p);\n+      p = &(*p)->next;\n+    }\n+  if (had_locs && v->locs == 0)\n+    {\n+      n_useless_values++;\n+    }\n+}\n+/* { dg-final { scan-tree-dump-times \"n_useless_values\" 2 \"evrp\" } } */                 "}, {"sha": "f3fce961bedf971e1d4d38a1e2b0db04ec7d57ab", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a98b4bfc3d952f0c5b71419a5eba51553dcc776/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=2a98b4bfc3d952f0c5b71419a5eba51553dcc776", "patch": "@@ -5118,6 +5118,7 @@ fld_type_variant (tree first, tree t, struct free_lang_data_d *fld)\n   TYPE_ADDR_SPACE (v) = TYPE_ADDR_SPACE (t);\n   TYPE_NAME (v) = TYPE_NAME (t);\n   TYPE_ATTRIBUTES (v) = TYPE_ATTRIBUTES (t);\n+  TYPE_CANONICAL (v) = TYPE_CANONICAL (t);\n   add_tree_to_fld_list (v, fld);\n   return v;\n }\n@@ -5146,6 +5147,8 @@ fld_incomplete_type_of (tree t, struct free_lang_data_d *fld)\n \t  else\n \t    first = build_reference_type_for_mode (t2, TYPE_MODE (t),\n \t\t\t\t\t\tTYPE_REF_CAN_ALIAS_ALL (t));\n+\t  gcc_assert (TYPE_CANONICAL (t2) != t2\n+\t\t      && TYPE_CANONICAL (t2) == TYPE_CANONICAL (TREE_TYPE (t)));\n \t  add_tree_to_fld_list (first, fld);\n \t  return fld_type_variant (first, t, fld);\n \t}\n@@ -5169,6 +5172,7 @@ fld_incomplete_type_of (tree t, struct free_lang_data_d *fld)\n \t  SET_TYPE_MODE (copy, VOIDmode);\n \t  SET_TYPE_ALIGN (copy, BITS_PER_UNIT);\n \t  TYPE_SIZE_UNIT (copy) = NULL;\n+\t  TYPE_CANONICAL (copy) = TYPE_CANONICAL (t);\n \t  if (AGGREGATE_TYPE_P (t))\n \t    {\n \t      TYPE_FIELDS (copy) = NULL;\n@@ -13887,7 +13891,8 @@ verify_type (const_tree t)\n \t      with variably sized arrays because their sizes possibly\n \t      gimplified to different variables.  */\n \t   && !variably_modified_type_p (ct, NULL)\n-\t   && !gimple_canonical_types_compatible_p (t, ct, false))\n+\t   && !gimple_canonical_types_compatible_p (t, ct, false)\n+\t   && COMPLETE_TYPE_P (t))\n     {\n       error (\"TYPE_CANONICAL is not compatible\");\n       debug_tree (ct);"}]}