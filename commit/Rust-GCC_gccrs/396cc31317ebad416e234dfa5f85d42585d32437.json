{"sha": "396cc31317ebad416e234dfa5f85d42585d32437", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2Y2MzMTMxN2ViYWQ0MTZlMjM0ZGZhNWY4NWQ0MjU4NWQzMjQzNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-09T10:59:06Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-09T12:06:55Z"}, "message": "Fix O(region-size) unwind in VN\n\nThis fixes the currently O(region-size) unwinding of avail info\nto be O(unwind-size) by tracking a linked-list stack of pushed\navails.  This reduces the compile-time spent in complete unrolling\nfor WRF.\n\n2021-02-09  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98863\n\t* tree-ssa-sccvn.h (vn_avail::next_undo): Add.\n\t* tree-ssa-sccvn.c (last_pushed_avail): New global.\n\t(rpo_elim::eliminate_push_avail): Chain pushed avails.\n\t(unwind_state::avail_top): Add.\n\t(do_unwind): Rewrite unwinding of avail entries.\n\t(do_rpo_vn): Initialize last_pushed_avail and\n\tavail_top of the undo state.", "tree": {"sha": "90973acdc77a92ed5a5630f73b6b0075c6b4e310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90973acdc77a92ed5a5630f73b6b0075c6b4e310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396cc31317ebad416e234dfa5f85d42585d32437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396cc31317ebad416e234dfa5f85d42585d32437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396cc31317ebad416e234dfa5f85d42585d32437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396cc31317ebad416e234dfa5f85d42585d32437/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14ea108faa6eba6a60a45ff0ca3099ce6ae45c2"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "65b3967b9e15501f60ba2bb8486d0bf76aea851f", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396cc31317ebad416e234dfa5f85d42585d32437/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396cc31317ebad416e234dfa5f85d42585d32437/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=396cc31317ebad416e234dfa5f85d42585d32437", "patch": "@@ -298,6 +298,7 @@ static obstack vn_tables_insert_obstack;\n static vn_reference_t last_inserted_ref;\n static vn_phi_t last_inserted_phi;\n static vn_nary_op_t last_inserted_nary;\n+static vn_ssa_aux_t last_pushed_avail;\n \n /* Valid hashtables storing information we have proven to be\n    correct.  */\n@@ -6898,6 +6899,8 @@ rpo_elim::eliminate_push_avail (basic_block bb, tree leader)\n   av->location = bb->index;\n   av->leader = SSA_NAME_VERSION (leader);\n   av->next = value->avail;\n+  av->next_undo = last_pushed_avail;\n+  last_pushed_avail = value;\n   value->avail = av;\n }\n \n@@ -7338,12 +7341,13 @@ struct unwind_state\n   vn_reference_t ref_top;\n   vn_phi_t phi_top;\n   vn_nary_op_t nary_top;\n+  vn_avail *avail_top;\n };\n \n /* Unwind the RPO VN state for iteration.  */\n \n static void\n-do_unwind (unwind_state *to, int rpo_idx, rpo_elim &avail, int *bb_to_rpo)\n+do_unwind (unwind_state *to, rpo_elim &avail)\n {\n   gcc_assert (to->iterate);\n   for (; last_inserted_nary != to->nary_top;\n@@ -7378,20 +7382,14 @@ do_unwind (unwind_state *to, int rpo_idx, rpo_elim &avail, int *bb_to_rpo)\n   obstack_free (&vn_tables_obstack, to->ob_top);\n \n   /* Prune [rpo_idx, ] from avail.  */\n-  /* ???  This is O(number-of-values-in-region) which is\n-     O(region-size) rather than O(iteration-piece).  */\n-  for (hash_table<vn_ssa_aux_hasher>::iterator i = vn_ssa_aux_hash->begin ();\n-       i != vn_ssa_aux_hash->end (); ++i)\n+  for (; last_pushed_avail && last_pushed_avail->avail != to->avail_top;)\n     {\n-      while ((*i)->avail)\n-\t{\n-\t  if (bb_to_rpo[(*i)->avail->location] < rpo_idx)\n-\t    break;\n-\t  vn_avail *av = (*i)->avail;\n-\t  (*i)->avail = (*i)->avail->next;\n-\t  av->next = avail.m_avail_freelist;\n-\t  avail.m_avail_freelist = av;\n-\t}\n+      vn_ssa_aux_t val = last_pushed_avail;\n+      vn_avail *av = val->avail;\n+      val->avail = av->next;\n+      last_pushed_avail = av->next_undo;\n+      av->next = avail.m_avail_freelist;\n+      avail.m_avail_freelist = av;\n     }\n }\n \n@@ -7505,6 +7503,7 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n   last_inserted_ref = NULL;\n   last_inserted_phi = NULL;\n   last_inserted_nary = NULL;\n+  last_pushed_avail = NULL;\n \n   vn_valueize = rpo_vn_valueize;\n \n@@ -7598,6 +7597,8 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n \t    rpo_state[idx].ref_top = last_inserted_ref;\n \t    rpo_state[idx].phi_top = last_inserted_phi;\n \t    rpo_state[idx].nary_top = last_inserted_nary;\n+\t    rpo_state[idx].avail_top\n+\t      = last_pushed_avail ? last_pushed_avail->avail : NULL;\n \t  }\n \n \tif (!(bb->flags & BB_EXECUTABLE))\n@@ -7675,7 +7676,7 @@ do_rpo_vn (function *fn, edge entry, bitmap exit_bbs,\n \t    }\n \tif (iterate_to != -1)\n \t  {\n-\t    do_unwind (&rpo_state[iterate_to], iterate_to, avail, bb_to_rpo);\n+\t    do_unwind (&rpo_state[iterate_to], avail);\n \t    idx = iterate_to;\n \t    if (dump_file && (dump_flags & TDF_DETAILS))\n \t      fprintf (dump_file, \"Iterating to %d BB%d\\n\","}, {"sha": "e4f1ff1eb20932e1eefa986f2d850f24630b90dd", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396cc31317ebad416e234dfa5f85d42585d32437/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396cc31317ebad416e234dfa5f85d42585d32437/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=396cc31317ebad416e234dfa5f85d42585d32437", "patch": "@@ -212,6 +212,8 @@ struct vn_avail\n   int location;\n   /* The LEADER for the value we are chained on.  */\n   int leader;\n+  /* The previous value we pushed a avail record to.  */\n+  struct vn_ssa_aux *next_undo;\n };\n \n typedef struct vn_ssa_aux"}]}