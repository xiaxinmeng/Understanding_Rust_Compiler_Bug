{"sha": "3de69514c3f04c875510f9e3fbc2aeeccf80087c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlNjk1MTRjM2YwNGM4NzU1MTBmOWUzZmJjMmFlZWNjZjgwMDg3Yw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2011-07-22T16:04:02Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2011-07-22T16:04:02Z"}, "message": "Disallow MS ABI in x32 mode.\n\ngcc/\n\n2011-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_option_override_internal): Disallow\n\tMS ABI in x32 mode.\n\t(ix86_init_builtins): Call ix86_init_builtins_va_builtins_abi\n\tonly for TARGET_LP64.\n\t(ix86_handle_abi_attribute): Check TARGET_LP64 instead of\n\tTARGET_64BIT.\n\ngcc/testsuite/\n\n2011-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-16.c: Only run\n\ton lp64 targets.\n\t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-17.c: Likewise.\n\t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-18.c: Likewise.\n\t* gcc/testsuite/gcc.target/i386/pr43662.c: Likewise.\n\t* gcc/testsuite/gcc.target/i386/pr43869.c: Likewise.\n\n\t* gcc.target/x86_64/abi/callabi/callabi.exp: Check ilp32\n\tinstead of ia32.\n\nFrom-SVN: r176634", "tree": {"sha": "84442df1d2fb6496750b81ecaf17b6160c110a8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84442df1d2fb6496750b81ecaf17b6160c110a8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3de69514c3f04c875510f9e3fbc2aeeccf80087c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de69514c3f04c875510f9e3fbc2aeeccf80087c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de69514c3f04c875510f9e3fbc2aeeccf80087c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de69514c3f04c875510f9e3fbc2aeeccf80087c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49f6f4f7e8aa947b360cd4e4574fc1becd494ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49f6f4f7e8aa947b360cd4e4574fc1becd494ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49f6f4f7e8aa947b360cd4e4574fc1becd494ce9"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "6ec4ecd18ee0b2f527bc7b961b8c1a4b31d33280", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,3 +1,12 @@\n+2011-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_option_override_internal): Disallow\n+\tMS ABI in x32 mode.\n+\t(ix86_init_builtins): Call ix86_init_builtins_va_builtins_abi\n+\tonly for TARGET_LP64.\n+\t(ix86_handle_abi_attribute): Check TARGET_LP64 instead of\n+\tTARGET_64BIT.\n+\n 2011-07-22  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_xcoff_strip_dollar): Rewrite to"}, {"sha": "96263ed9835253b8d56904905e7fd55ce7550a74", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -3133,6 +3133,9 @@ ix86_option_override_internal (bool main_args_p)\n   if (!global_options_set.x_ix86_abi)\n     ix86_abi = DEFAULT_ABI;\n \n+  if (ix86_abi == MS_ABI && TARGET_X32)\n+    error (\"MS ABI not supported in x32 mode\");\n+\n   if (global_options_set.x_ix86_cmodel)\n     {\n       switch (ix86_cmodel)\n@@ -25493,7 +25496,7 @@ ix86_init_builtins (void)\n \n   ix86_init_mmx_sse_builtins ();\n \n-  if (TARGET_64BIT)\n+  if (TARGET_LP64)\n     ix86_init_builtins_va_builtins_abi ();\n \n #ifdef SUBTARGET_INIT_BUILTINS\n@@ -29313,7 +29316,7 @@ ix86_handle_abi_attribute (tree *node, tree name,\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n-  if (!TARGET_64BIT)\n+  if (!TARGET_LP64)\n     {\n       warning (OPT_Wattributes, \"%qE attribute only available for 64-bit\",\n \t       name);"}, {"sha": "61a244017ce6bc38e564730c3018a1730a32590c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,3 +1,15 @@\n+2011-07-22  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-16.c: Only run\n+\ton lp64 targets.\n+\t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-17.c: Likewise.\n+\t* gcc/testsuite/gcc.target/i386/avx-vzeroupper-18.c: Likewise.\n+\t* gcc/testsuite/gcc.target/i386/pr43662.c: Likewise.\n+\t* gcc/testsuite/gcc.target/i386/pr43869.c: Likewise.\n+\n+\t* gcc.target/x86_64/abi/callabi/callabi.exp: Check ilp32\n+\tinstead of ia32.\n+\n 2011-07-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45819"}, {"sha": "bc6e0d23c7d19ed2fa9b6b384f06238f90d2f008", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-16.c?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-options \"-O2 -mavx -mabi=ms -mtune=generic -dp\" } */\n \n typedef float __m256 __attribute__ ((__vector_size__ (32), __may_alias__));"}, {"sha": "5d3aa48397c89ae89a91a0f6f11a2e344ad02b64", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-17.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-17.c?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-options \"-O2 -mavx -mabi=ms -mtune=generic -dp\" } */\n \n typedef float __m256 __attribute__ ((__vector_size__ (32), __may_alias__));"}, {"sha": "06307525d4614cf91816fb321aac7165f9f1f41c", "filename": "gcc/testsuite/gcc.target/i386/avx-vzeroupper-18.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vzeroupper-18.c?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-options \"-O0 -mavx -mabi=ms -mtune=generic -dp\" } */\n \n typedef float __m256 __attribute__ ((__vector_size__ (32), __may_alias__));"}, {"sha": "2896a1a52c37ed69055c17f5646f7cc881887dbe", "filename": "gcc/testsuite/gcc.target/i386/pr43662.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43662.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43662.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43662.c?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-do compile { target lp64 } } */\n /* { dg-options \"-O2\" } */\n \n void __attribute__ ((ms_abi)) foo (void)"}, {"sha": "4157db1d16854248e0b3cb638e6c9d5283eeac6c", "filename": "gcc/testsuite/gcc.target/i386/pr43869.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43869.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43869.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr43869.c?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target { ! { ia32 } } } } */\n+/* { dg-do compile { target lp64 } } */\n \n int __attribute__((__noinline__))\n bugged(float f1, float f2, float f3, float f4,"}, {"sha": "e76d0c101508b9d2329da4b666e681a22699f855", "filename": "gcc/testsuite/gcc.target/x86_64/abi/callabi/callabi.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fcallabi.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3de69514c3f04c875510f9e3fbc2aeeccf80087c/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fcallabi.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fcallabi%2Fcallabi.exp?ref=3de69514c3f04c875510f9e3fbc2aeeccf80087c", "patch": "@@ -20,7 +20,7 @@\n load_lib gcc-dg.exp\n \n if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n-     || [is-effective-target ia32] } then {\n+     || [is-effective-target ilp32] } then {\n   return\n }\n "}]}