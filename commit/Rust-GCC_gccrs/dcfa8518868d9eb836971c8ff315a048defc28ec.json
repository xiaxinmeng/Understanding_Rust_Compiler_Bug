{"sha": "dcfa8518868d9eb836971c8ff315a048defc28ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNmYTg1MTg4NjhkOWViODM2OTcxYzhmZjMxNWEwNDhkZWZjMjhlYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-03-13T23:34:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-03-13T23:34:51Z"}, "message": "PR c++/86521 - C++17 copy elision in initialization by constructor.\n\nThis is an overlooked case in C++17 mandatory copy elision: We want overload\nresolution to reflect that initializing an object from a prvalue does not\ninvolve a copy or move constructor even when [over.match.ctor] says that\nonly constructors are candidates.  Here I implement that by looking through\nthe copy/move constructor in joust.\n\n\t* call.c (joust_maybe_elide_copy): New.\n\t(joust): Call it.\n\nFrom-SVN: r269667", "tree": {"sha": "dcdcbd95fecd3558c0a89bba2765aa3605b3a022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcdcbd95fecd3558c0a89bba2765aa3605b3a022"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcfa8518868d9eb836971c8ff315a048defc28ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfa8518868d9eb836971c8ff315a048defc28ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfa8518868d9eb836971c8ff315a048defc28ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfa8518868d9eb836971c8ff315a048defc28ec/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "edaff7c9448c4e4bdc4e4a42f5813ee543a1df31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edaff7c9448c4e4bdc4e4a42f5813ee543a1df31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edaff7c9448c4e4bdc4e4a42f5813ee543a1df31"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "1164652268f36d81a107b500ab5adc8b3d6b6b2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dcfa8518868d9eb836971c8ff315a048defc28ec", "patch": "@@ -1,3 +1,9 @@\n+2019-03-13  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86521 - C++17 copy elision in initialization by constructor.\n+\t* call.c (joust_maybe_elide_copy): New.\n+\t(joust): Call it.\n+\n 2019-03-13  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88979 - further P0634 fix for constructors."}, {"sha": "d1f50551cd3623693c9d45237f54772922778b6f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=dcfa8518868d9eb836971c8ff315a048defc28ec", "patch": "@@ -10508,6 +10508,33 @@ add_warning (struct z_candidate *winner, struct z_candidate *loser)\n   winner->warnings = cw;\n }\n \n+/* CAND is a constructor candidate in joust in C++17 and up.  If it copies a\n+   prvalue returned from a conversion function, replace CAND with the candidate\n+   for the conversion and return true.  Otherwise, return false.  */\n+\n+static bool\n+joust_maybe_elide_copy (z_candidate *&cand)\n+{\n+  tree fn = cand->fn;\n+  if (!DECL_COPY_CONSTRUCTOR_P (fn) && !DECL_MOVE_CONSTRUCTOR_P (fn))\n+    return false;\n+  conversion *conv = cand->convs[0];\n+  gcc_checking_assert (conv->kind == ck_ref_bind);\n+  conv = next_conversion (conv);\n+  if (conv->kind == ck_user && !TYPE_REF_P (conv->type))\n+    {\n+      gcc_checking_assert (same_type_ignoring_top_level_qualifiers_p\n+\t\t\t   (conv->type, DECL_CONTEXT (fn)));\n+      z_candidate *uc = conv->cand;\n+      if (DECL_CONV_FN_P (uc->fn))\n+\t{\n+\t  cand = uc;\n+\t  return true;\n+\t}\n+    }\n+  return false;\n+}\n+\n /* Compare two candidates for overloading as described in\n    [over.match.best].  Return values:\n \n@@ -10588,6 +10615,27 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n \t}\n     }\n \n+  /* Handle C++17 copy elision in [over.match.ctor] (direct-init) context.  The\n+     standard currently says that only constructors are candidates, but if one\n+     copies a prvalue returned by a conversion function we want to treat the\n+     conversion as the candidate instead.\n+\n+     Clang does something similar, as discussed at\n+     http://lists.isocpp.org/core/2017/10/3166.php\n+     http://lists.isocpp.org/core/2019/03/5721.php  */\n+  int elided_tiebreaker = 0;\n+  if (len == 1 && cxx_dialect >= cxx17\n+      && DECL_P (cand1->fn)\n+      && DECL_COMPLETE_CONSTRUCTOR_P (cand1->fn)\n+      && !(cand1->flags & LOOKUP_ONLYCONVERTING))\n+    {\n+      bool elided1 = joust_maybe_elide_copy (cand1);\n+      bool elided2 = joust_maybe_elide_copy (cand2);\n+      /* As a tiebreaker below we will prefer a constructor to a conversion\n+\t operator exposed this way.  */\n+      elided_tiebreaker = elided2 - elided1;\n+    }\n+\n   for (i = 0; i < len; ++i)\n     {\n       conversion *t1 = cand1->convs[i + off1];\n@@ -10697,6 +10745,11 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n   if (winner)\n     return winner;\n \n+  /* Put this tiebreaker first, so that we don't try to look at second_conv of\n+     a constructor candidate that doesn't have one.  */\n+  if (elided_tiebreaker)\n+    return elided_tiebreaker;\n+\n   /* DR 495 moved this tiebreaker above the template ones.  */\n   /* or, if not that,\n      the  context  is  an  initialization by user-defined conversion (see"}, {"sha": "ae587f9673b1398cf692349f21c800aaf47a9f74", "filename": "gcc/testsuite/g++.dg/cpp0x/overload-conv-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverload-conv-3.C?ref=dcfa8518868d9eb836971c8ff315a048defc28ec", "patch": "@@ -17,5 +17,5 @@ struct Source {\n \n int main() {\n   Source x;\n-  Dest d(move(x));\t\t// { dg-error \"ambiguous\" }\n+  Dest d(move(x));\t   // { dg-error \"ambiguous\" \"\" { target c++14_down } }\n }"}, {"sha": "cc5ebe786194c5d879fd2c51b6ffc7397a99d7d1", "filename": "gcc/testsuite/g++.dg/overload/conv-op2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcfa8518868d9eb836971c8ff315a048defc28ec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fconv-op2.C?ref=dcfa8518868d9eb836971c8ff315a048defc28ec", "patch": "@@ -1,5 +1,5 @@\n // PR c++/81311\n-// { dg-do link }\n+// { dg-do compile { target c++11 } }\n \n struct function\n {\n@@ -8,12 +8,12 @@ struct function\n \n struct ref\n {\n-  operator function&() const;\n+  operator function&() const = delete;\n } r;\n \n struct val\n {\n-  operator function() const;\n+  operator function() const = delete;\n } v;\n \n int main()"}]}