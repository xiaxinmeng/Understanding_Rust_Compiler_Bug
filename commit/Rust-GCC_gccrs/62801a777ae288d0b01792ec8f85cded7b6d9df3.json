{"sha": "62801a777ae288d0b01792ec8f85cded7b6d9df3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI4MDFhNzc3YWUyODhkMGIwMTc5MmVjOGY4NWNkZWQ3YjZkOWRmMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-06T09:44:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-06T09:44:11Z"}, "message": "utils2.c (build_call_alloc_dealloc): Do not substitute placeholder expressions here but...\n\n\t* gcc-interface/utils2.c (build_call_alloc_dealloc): Do not substitute\n\tplaceholder expressions here but...\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Free_Statement>: ...here.\n\tMake an exception to the protection of a CALL_EXPR result with an\n\tunconstrained type only in the same cases as Call_to_gnu.\n\nFrom-SVN: r237125", "tree": {"sha": "d8b7d032b53a272332300754ebabd26c255b7dfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b7d032b53a272332300754ebabd26c255b7dfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62801a777ae288d0b01792ec8f85cded7b6d9df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62801a777ae288d0b01792ec8f85cded7b6d9df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62801a777ae288d0b01792ec8f85cded7b6d9df3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62801a777ae288d0b01792ec8f85cded7b6d9df3/comments", "author": null, "committer": null, "parents": [{"sha": "f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ff07ec096c3b59ef3d883e00dd4a840314eaf8"}], "stats": {"total": 39, "additions": 26, "deletions": 13}, "files": [{"sha": "f4ce3153aed943733d5e025e045110705b71c366", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62801a777ae288d0b01792ec8f85cded7b6d9df3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62801a777ae288d0b01792ec8f85cded7b6d9df3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=62801a777ae288d0b01792ec8f85cded7b6d9df3", "patch": "@@ -1,3 +1,11 @@\n+2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (build_call_alloc_dealloc): Do not substitute\n+\tplaceholder expressions here but...\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Free_Statement>: ...here.\n+\tMake an exception to the protection of a CALL_EXPR result with an\n+\tunconstrained type only in the same cases as Call_to_gnu.\n+\n 2016-06-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (gnat_to_gnu): Rework special code dealing"}, {"sha": "5f4d3a633521a5fe9d4a7290d1253f891ce5d0ba", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62801a777ae288d0b01792ec8f85cded7b6d9df3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62801a777ae288d0b01792ec8f85cded7b6d9df3/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=62801a777ae288d0b01792ec8f85cded7b6d9df3", "patch": "@@ -7640,10 +7640,11 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  else\n \t    gnu_actual_obj_type = gnu_obj_type;\n \n+\t  tree gnu_size = TYPE_SIZE_UNIT (gnu_actual_obj_type);\n+\t  gnu_size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (gnu_size, gnu_ptr);\n+\n \t  gnu_result\n-\t      = build_call_alloc_dealloc (gnu_ptr,\n-\t\t\t\t\t  TYPE_SIZE_UNIT (gnu_actual_obj_type),\n-\t\t\t\t\t  gnu_obj_type,\n+\t      = build_call_alloc_dealloc (gnu_ptr, gnu_size, gnu_obj_type,\n \t\t\t\t\t  Procedure_To_Call (gnat_node),\n \t\t\t\t\t  Storage_Pool (gnat_node),\n \t\t\t\t\t  gnat_node);\n@@ -7729,16 +7730,22 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t\t\t    N_Raise_Constraint_Error));\n     }\n \n-  /* If the result has side-effects and is of an unconstrained type, make a\n-     SAVE_EXPR so that we can be sure it will only be referenced once.  But\n-     this is useless for a call to a function that returns an unconstrained\n-     type with default discriminant, as we cannot compute the size of the\n-     actual returned object.  We must do this before any conversions.  */\n+  /* If the result has side-effects and is of an unconstrained type, protect\n+     the expression in case it will be referenced multiple times, i.e. for\n+     its value and to compute the size of an object.  But do it neither for\n+     an object nor a renaming declaration, nor a return statement of a call\n+     to a function that returns an unconstrained record type with default\n+     discriminant, because there is no size to be computed in these cases\n+     and this will create a useless temporary.  We must do this before any\n+     conversions.  */\n   if (TREE_SIDE_EFFECTS (gnu_result)\n-      && !(TREE_CODE (gnu_result) == CALL_EXPR\n-\t   && type_is_padding_self_referential (TREE_TYPE (gnu_result)))\n       && (TREE_CODE (gnu_result_type) == UNCONSTRAINED_ARRAY_TYPE\n-\t  || CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_result_type))))\n+\t  || CONTAINS_PLACEHOLDER_P (TYPE_SIZE (gnu_result_type)))\n+      && !(TREE_CODE (gnu_result) == CALL_EXPR\n+\t   && type_is_padding_self_referential (TREE_TYPE (gnu_result))\n+\t   && (Nkind (Parent (gnat_node)) == N_Object_Declaration\n+\t       || Nkind (Parent (gnat_node)) == N_Object_Renaming_Declaration\n+\t       || Nkind (Parent (gnat_node)) == N_Simple_Return_Statement)))\n     gnu_result = gnat_protect_expr (gnu_result);\n \n   /* Now convert the result to the result type, unless we are in one of the"}, {"sha": "a0804e8e86dfb7d0cc5c3d3ad656fa42085ca6ad", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62801a777ae288d0b01792ec8f85cded7b6d9df3/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62801a777ae288d0b01792ec8f85cded7b6d9df3/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=62801a777ae288d0b01792ec8f85cded7b6d9df3", "patch": "@@ -2268,8 +2268,6 @@ build_call_alloc_dealloc (tree gnu_obj, tree gnu_size, tree gnu_type,\n                           Entity_Id gnat_proc, Entity_Id gnat_pool,\n                           Node_Id gnat_node)\n {\n-  gnu_size = SUBSTITUTE_PLACEHOLDER_IN_EXPR (gnu_size, gnu_obj);\n-\n   /* Explicit proc to call ?  This one is assumed to deal with the type\n      alignment constraints.  */\n   if (Present (gnat_proc))"}]}