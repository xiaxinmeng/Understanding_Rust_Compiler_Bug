{"sha": "c256f14362ccf94cbb302145e85fab84531ca61d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1NmYxNDM2MmNjZjk0Y2JiMzAyMTQ1ZTg1ZmFiODQ1MzFjYTYxZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-11T22:31:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-11T22:31:09Z"}, "message": "* reorg.c (fill_slots_from_thread): Do not copy frame-related insns.\n\nFrom-SVN: r217381", "tree": {"sha": "ee8b6b52468db04eed505d869c587476dfb57aef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8b6b52468db04eed505d869c587476dfb57aef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c256f14362ccf94cbb302145e85fab84531ca61d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c256f14362ccf94cbb302145e85fab84531ca61d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c256f14362ccf94cbb302145e85fab84531ca61d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c256f14362ccf94cbb302145e85fab84531ca61d/comments", "author": null, "committer": null, "parents": [{"sha": "059e92fd1aec76aab5d1c92238c78823cdf90ad1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059e92fd1aec76aab5d1c92238c78823cdf90ad1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059e92fd1aec76aab5d1c92238c78823cdf90ad1"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "350f21d0af216eeb89a349475d9ef51d99574925", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256f14362ccf94cbb302145e85fab84531ca61d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256f14362ccf94cbb302145e85fab84531ca61d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c256f14362ccf94cbb302145e85fab84531ca61d", "patch": "@@ -1,3 +1,7 @@\n+2014-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* reorg.c (fill_slots_from_thread): Do not copy frame-related insns.\n+\n 2014-11-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/61535"}, {"sha": "e8d29a4ab1e484c5dedb48590bbd2f49de14bd56", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c256f14362ccf94cbb302145e85fab84531ca61d/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c256f14362ccf94cbb302145e85fab84531ca61d/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=c256f14362ccf94cbb302145e85fab84531ca61d", "patch": "@@ -2501,9 +2501,11 @@ fill_slots_from_thread (rtx_insn *insn, rtx condition, rtx thread_or_return,\n \n \t  /* There are two ways we can win:  If TRIAL doesn't set anything\n \t     needed at the opposite thread and can't trap, or if it can\n-\t     go into an annulled delay slot.  */\n+\t     go into an annulled delay slot.  But we want neither to copy\n+\t     nor to speculate frame-related insns.  */\n \t  if (!must_annul\n-\t      && (condition == const_true_rtx\n+\t      && ((condition == const_true_rtx\n+\t\t   && (own_thread || !RTX_FRAME_RELATED_P (trial)))\n \t          || (! insn_sets_resource_p (trial, &opposite_needed, true)\n \t\t      && ! may_trap_or_fault_p (pat)\n \t\t      && ! RTX_FRAME_RELATED_P (trial))))"}]}