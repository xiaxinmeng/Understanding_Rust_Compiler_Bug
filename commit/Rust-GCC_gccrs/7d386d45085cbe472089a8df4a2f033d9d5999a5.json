{"sha": "7d386d45085cbe472089a8df4a2f033d9d5999a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QzODZkNDUwODVjYmU0NzIwODlhOGRmNGEyZjAzM2Q5ZDU5OTlhNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-29T17:45:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-29T17:45:32Z"}, "message": "c-attribs.c (handle_packed_attribute): Test DECL_C_BIT_FIELD rather than DECL_INITIAL.\n\nc-family/\n\t* c-attribs.c (handle_packed_attribute): Test DECL_C_BIT_FIELD\n\trather than DECL_INITIAL.\n\t(common_handle_aligned_attribute): Likewise.\nc/\n\t* c-decl.c (grokfield): Use SET_DECL_C_BIT_FIELD here if\n\twidth is non-NULL.\n\t(finish_struct): Test DECL_C_BIT_FIELD instead of DECL_INITIAL,\n\tdon't SET_DECL_C_BIT_FIELD here.\ncp/\n\t* class.c (check_bitfield_decl): Retrieve and clear width from\n\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n\t(check_field_decls): Test DECL_BIT_FIELD_REPRESENTATIVE rather than\n\tDECL_INITIAL.\n\t(remove_zero_width_bit_fields): Adjust comment.\n\t* decl2.c (grokbitfield): Stash width into\n\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n\t* pt.c (tsubst_decl): For DECL_C_BIT_FIELD, tsubst_expr\n\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL for width.\nobjc/\n\t* objc-act.c (check_ivars, gen_declaration): For OBJCPLUS look at\n\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n\nFrom-SVN: r253301", "tree": {"sha": "7fde43d4b5e2b75bed04151a1e9b955665eb7325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fde43d4b5e2b75bed04151a1e9b955665eb7325"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d386d45085cbe472089a8df4a2f033d9d5999a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d386d45085cbe472089a8df4a2f033d9d5999a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d386d45085cbe472089a8df4a2f033d9d5999a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d386d45085cbe472089a8df4a2f033d9d5999a5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9129a561984472bfc7a076742ac7e3ee9117c197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9129a561984472bfc7a076742ac7e3ee9117c197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9129a561984472bfc7a076742ac7e3ee9117c197"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "6a9137ffa4f2ad76b5911bae44cb762525cda8ea", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -1,3 +1,9 @@\n+2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-attribs.c (handle_packed_attribute): Test DECL_C_BIT_FIELD\n+\trather than DECL_INITIAL.\n+\t(common_handle_aligned_attribute): Likewise.\n+\n 2017-09-20  Alexandre Oliva <aoliva@redhat.com>\n \n \t* c.opt (gen-decls): Add RejectNegative."}, {"sha": "1821d3e52bccde54e5d950aea13add447d61ab25", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -426,7 +426,7 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     {\n       if (TYPE_ALIGN (TREE_TYPE (*node)) <= BITS_PER_UNIT\n \t  /* Still pack bitfields.  */\n-\t  && ! DECL_INITIAL (*node))\n+\t  && ! DECL_C_BIT_FIELD (*node))\n \twarning (OPT_Wattributes,\n \t\t \"%qE attribute ignored for field of type %qT\",\n \t\t name, TREE_TYPE (*node));\n@@ -1773,7 +1773,7 @@ common_handle_aligned_attribute (tree *node, tree args, int flags,\n     {\n       if (warn_if_not_aligned_p)\n \t{\n-\t  if (TREE_CODE (decl) == FIELD_DECL && !DECL_INITIAL (decl))\n+\t  if (TREE_CODE (decl) == FIELD_DECL && !DECL_C_BIT_FIELD (decl))\n \t    {\n \t      SET_DECL_WARN_IF_NOT_ALIGN (decl, (1U << i) * BITS_PER_UNIT);\n \t      warn_if_not_aligned_p = false;"}, {"sha": "87d6c0aaca6df7044edb93b404544327471fc019", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -1,5 +1,10 @@\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-decl.c (grokfield): Use SET_DECL_C_BIT_FIELD here if\n+\twidth is non-NULL.\n+\t(finish_struct): Test DECL_C_BIT_FIELD instead of DECL_INITIAL,\n+\tdon't SET_DECL_C_BIT_FIELD here.\n+\n \tPR c/82340\n \t* c-decl.c (build_compound_literal): Use c_apply_type_quals_to_decl\n \tinstead of trying to set just TREE_READONLY manually."}, {"sha": "a6b7c2041915fa90029e52bd4a618279a1e8240d", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -7600,6 +7600,8 @@ grokfield (location_t loc,\n \n   finish_decl (value, loc, NULL_TREE, NULL_TREE, NULL_TREE);\n   DECL_INITIAL (value) = width;\n+  if (width)\n+    SET_DECL_C_BIT_FIELD (value);\n \n   if (warn_cxx_compat && DECL_NAME (value) != NULL_TREE)\n     {\n@@ -7944,12 +7946,11 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n       if (C_DECL_VARIABLE_SIZE (x))\n \tC_TYPE_VARIABLE_SIZE (t) = 1;\n \n-      if (DECL_INITIAL (x))\n+      if (DECL_C_BIT_FIELD (x))\n \t{\n \t  unsigned HOST_WIDE_INT width = tree_to_uhwi (DECL_INITIAL (x));\n \t  DECL_SIZE (x) = bitsize_int (width);\n \t  DECL_BIT_FIELD (x) = 1;\n-\t  SET_DECL_C_BIT_FIELD (x);\n \t}\n \n       if (TYPE_PACKED (t)"}, {"sha": "fe73935eea2fbcb8eb32828c450cf003ae97b144", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -1,5 +1,15 @@\n 2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* class.c (check_bitfield_decl): Retrieve and clear width from\n+\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n+\t(check_field_decls): Test DECL_BIT_FIELD_REPRESENTATIVE rather than\n+\tDECL_INITIAL.\n+\t(remove_zero_width_bit_fields): Adjust comment.\n+\t* decl2.c (grokbitfield): Stash width into\n+\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n+\t* pt.c (tsubst_decl): For DECL_C_BIT_FIELD, tsubst_expr\n+\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL for width.\n+\n \t* parser.c (cp_parser_member_declaration): Parse attributes before\n \tcolon of a bitfield in addition to after colon.\n "}, {"sha": "687ddaa5c8f2f410bd1147a6028474a093448152", "filename": "gcc/cp/class.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -3231,12 +3231,12 @@ check_bitfield_decl (tree field)\n   tree w;\n \n   /* Extract the declared width of the bitfield, which has been\n-     temporarily stashed in DECL_INITIAL.  */\n-  w = DECL_INITIAL (field);\n+     temporarily stashed in DECL_BIT_FIELD_REPRESENTATIVE by grokbitfield.  */\n+  w = DECL_BIT_FIELD_REPRESENTATIVE (field);\n   gcc_assert (w != NULL_TREE);\n   /* Remove the bit-field width indicator so that the rest of the\n-     compiler does not treat that value as an initializer.  */\n-  DECL_INITIAL (field) = NULL_TREE;\n+     compiler does not treat that value as a qualifier.  */\n+  DECL_BIT_FIELD_REPRESENTATIVE (field) = NULL_TREE;\n \n   /* Detect invalid bit-field type.  */\n   if (!INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n@@ -3571,7 +3571,8 @@ check_field_decls (tree t, tree *access_decls,\n \t    DECL_PACKED (x) = 1;\n \t}\n \n-      if (DECL_C_BIT_FIELD (x) && integer_zerop (DECL_INITIAL (x)))\n+      if (DECL_C_BIT_FIELD (x)\n+\t  && integer_zerop (DECL_BIT_FIELD_REPRESENTATIVE (x)))\n \t/* We don't treat zero-width bitfields as making a class\n \t   non-empty.  */\n \t;\n@@ -5268,9 +5269,9 @@ remove_zero_width_bit_fields (tree t)\n     {\n       if (TREE_CODE (*fieldsp) == FIELD_DECL\n \t  && DECL_C_BIT_FIELD (*fieldsp)\n-          /* We should not be confused by the fact that grokbitfield\n+\t  /* We should not be confused by the fact that grokbitfield\n \t     temporarily sets the width of the bit field into\n-\t     DECL_INITIAL (*fieldsp).\n+\t     DECL_BIT_FIELD_REPRESENTATIVE (*fieldsp).\n \t     check_bitfield_decl eventually sets DECL_SIZE (*fieldsp)\n \t     to that width.  */\n \t  && (DECL_SIZE (*fieldsp) == NULL_TREE"}, {"sha": "107ce7bc882ffdfd9a3703da5bb8a2b061bba862", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -1047,7 +1047,10 @@ grokbitfield (const cp_declarator *declarator,\n \t       TREE_TYPE (width));\n       else\n \t{\n-\t  DECL_INITIAL (value) = width;\n+\t  /* Temporarily stash the width in DECL_BIT_FIELD_REPRESENTATIVE.\n+\t     check_bitfield_decl picks it from there later and sets DECL_SIZE\n+\t     accordingly.  */\n+\t  DECL_BIT_FIELD_REPRESENTATIVE (value) = width;\n \t  SET_DECL_C_BIT_FIELD (value);\n \t}\n     }"}, {"sha": "70cfc9aac8a4523d09f63e7f71a3a8a494fe0fbd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -12835,11 +12835,10 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t    cp_apply_type_quals_to_decl (cp_type_quals (type), r);\n \n \t    if (DECL_C_BIT_FIELD (r))\n-\t      /* For bit-fields, DECL_INITIAL gives the number of bits.  For\n-\t\t non-bit-fields DECL_INITIAL is a non-static data member\n-\t\t initializer, which gets deferred instantiation.  */\n-\t      DECL_INITIAL (r)\n-\t\t= tsubst_expr (DECL_INITIAL (t), args,\n+\t      /* For bit-fields, DECL_BIT_FIELD_REPRESENTATIVE gives the\n+\t\t number of bits.  */\n+\t      DECL_BIT_FIELD_REPRESENTATIVE (r)\n+\t\t= tsubst_expr (DECL_BIT_FIELD_REPRESENTATIVE (t), args,\n \t\t\t       complain, in_decl,\n \t\t\t       /*integral_constant_expression_p=*/true);\n \t    else if (DECL_INITIAL (t))"}, {"sha": "ddfdb1c8c9011e46f0130ba5272fa013c6e5f8ab", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -1,3 +1,8 @@\n+2017-09-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* objc-act.c (check_ivars, gen_declaration): For OBJCPLUS look at\n+\tDECL_BIT_FIELD_REPRESENTATIVE rather than DECL_INITIAL.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "5d81af7fbd6b8df7b34dad33d884e8aa542d337a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d386d45085cbe472089a8df4a2f033d9d5999a5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=7d386d45085cbe472089a8df4a2f033d9d5999a5", "patch": "@@ -4602,8 +4602,14 @@ check_ivars (tree inter, tree imp)\n       t1 = TREE_TYPE (intdecls); t2 = TREE_TYPE (impdecls);\n \n       if (!comptypes (t1, t2)\n+#ifdef OBJCPLUS\n+\t  || !tree_int_cst_equal (DECL_BIT_FIELD_REPRESENTATIVE (intdecls),\n+\t\t\t\t  DECL_BIT_FIELD_REPRESENTATIVE (impdecls))\n+#else\n \t  || !tree_int_cst_equal (DECL_INITIAL (intdecls),\n-\t\t\t\t  DECL_INITIAL (impdecls)))\n+\t\t\t\t  DECL_INITIAL (impdecls))\n+#endif\n+\t )\n \t{\n \t  if (DECL_NAME (intdecls) == DECL_NAME (impdecls))\n \t    {\n@@ -8895,10 +8901,14 @@ gen_declaration (tree decl)\n \t  strcat (errbuf, IDENTIFIER_POINTER (DECL_NAME (decl)));\n \t}\n \n-      if (DECL_INITIAL (decl)\n-\t  && TREE_CODE (DECL_INITIAL (decl)) == INTEGER_CST)\n+#ifdef OBJCPLUS\n+      tree w = DECL_BIT_FIELD_REPRESENTATIVE (decl);\n+#else\n+      tree w = DECL_INITIAL (decl);\n+#endif\n+      if (w && TREE_CODE (w) == INTEGER_CST)\n \tsprintf (errbuf + strlen (errbuf), \": \" HOST_WIDE_INT_PRINT_DEC,\n-\t\t TREE_INT_CST_LOW (DECL_INITIAL (decl)));\n+\t\t TREE_INT_CST_LOW (w));\n     }\n \n   return errbuf;"}]}