{"sha": "7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I0NWI1OWJjNWY5YmQ3OTlhNzE5YzY4ZGIyOGVhMGY1YjVmZTJjOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-26T23:59:56Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-26T23:59:56Z"}, "message": "m68k: Implement CAS and TAS patterns.\n\n        * config/m68k/m68k.md (UNSPECV_CAS_1, UNSPECV_CAS_2): New.\n        (UNSPECV_TAS_1, UNSPECV_TAS_2): New.\n        (I): New mode iterator.\n        (xz): New mode attribute.\n        * config/m68k/sync.md: New file.\n\nFrom-SVN: r181747", "tree": {"sha": "552b09d3dc9f6ad7b7c536c115b98ac9094a5b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/552b09d3dc9f6ad7b7c536c115b98ac9094a5b7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/comments", "author": null, "committer": null, "parents": [{"sha": "8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b281334a0bf4bce28d0f877cf0bbddd41ac25ea"}], "stats": {"total": 95, "additions": 95, "deletions": 0}, "files": [{"sha": "7b81a0e1d9edce530b241b6d57db0b2509538185", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "patch": "@@ -1,5 +1,11 @@\n 2011-11-26  Richard Henderson  <rth@redhat.com>\n \n+\t* config/m68k/m68k.md (UNSPECV_CAS_1, UNSPECV_CAS_2): New.\n+\t(UNSPECV_TAS_1, UNSPECV_TAS_2): New.\n+\t(I): New mode iterator.\n+\t(xz): New mode attribute.\n+\t* config/m68k/sync.md: New file.\n+\n \t* config/m68k/linux.h (TARGET_INIT_LIBFUNCS): New.\n \t* config/m68k/m68k.c (m68k_init_sync_libfuncs): New.\n "}, {"sha": "e4b4b59afc29d2fb86603612ccfaae3af8c82d3c", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "patch": "@@ -124,6 +124,10 @@\n \n (define_constants\n   [(UNSPECV_BLOCKAGE\t0)\n+   (UNSPECV_CAS_1\t1)\n+   (UNSPECV_CAS_2\t2)\n+   (UNSPECV_TAS_1\t3)\n+   (UNSPECV_TAS_2\t4)\n   ])\n \n ;; Registers by name.\n@@ -255,6 +259,10 @@\n \t (const_int 0)]\n  \t(const_int 1)))\n \f\n+;; Mode macros for integer operations.\n+(define_mode_iterator I [QI HI SI])\n+(define_mode_attr sz [(QI \"%.b\") (HI \"%.w\") (SI \"%.l\")])\n+\n ;; Mode macros for floating point operations.\n ;; Valid floating point modes\n (define_mode_iterator FP [SF DF (XF \"TARGET_68881\")])\n@@ -7806,3 +7814,4 @@\n   [(set_attr \"type\" \"ib\")])\n \n (include \"cf.md\")\n+(include \"sync.md\")"}, {"sha": "9a5bcda4c040fe83e8bf4d5f68a375e806a446f0", "filename": "gcc/config/m68k/sync.md", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/gcc%2Fconfig%2Fm68k%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9/gcc%2Fconfig%2Fm68k%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsync.md?ref=7b45b59bc5f9bd799a719c68db28ea0f5b5fe2c9", "patch": "@@ -0,0 +1,80 @@\n+;; GCC machine description for m68k synchronization instructions.\n+;; Copyright (C) 2011\n+;; Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+(define_expand \"atomic_compare_and_swap<mode>\"\n+  [(match_operand:QI 0 \"register_operand\" \"\")\t\t;; bool success output\n+   (match_operand:I 1 \"register_operand\" \"\")\t\t;; oldval output\n+   (match_operand:I 2 \"memory_operand\" \"\")\t\t;; memory\n+   (match_operand:I 3 \"register_operand\" \"\")\t\t;; expected input\n+   (match_operand:I 4 \"register_operand\" \"\")\t\t;; newval input\n+   (match_operand:SI 5 \"const_int_operand\" \"\")\t\t;; is_weak\n+   (match_operand:SI 6 \"const_int_operand\" \"\")\t\t;; success model\n+   (match_operand:SI 7 \"const_int_operand\" \"\")]\t\t;; failure model\n+  \"TARGET_68020 || TARGET_68040\"\n+{\n+  emit_insn (gen_atomic_compare_and_swap<mode>_1\n+\t     (operands[0], operands[1], operands[2],\n+\t      operands[3], operands[4]));\n+  emit_insn (gen_negqi2 (operands[0], operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"atomic_compare_and_swap<mode>_1\"\n+  [(set (match_operand:I 1 \"register_operand\" \"=d\")\n+\t(unspec_volatile:I\n+\t  [(match_operand:I 2 \"memory_operand\" \"+m\")\n+\t   (match_operand:I 3 \"register_operand\" \"0\")\n+\t   (match_operand:I 4 \"register_operand\" \"d\")]\n+\t  UNSPECV_CAS_1))\n+   (set (match_dup 2)\n+\t(unspec_volatile:I\n+\t  [(match_dup 2) (match_dup 3) (match_dup 4)]\n+\t  UNSPECV_CAS_2))\n+   (set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(unspec_volatile:QI\n+\t  [(match_dup 2) (match_dup 3) (match_dup 4)]\n+\t  UNSPECV_CAS_2))]\n+  \"TARGET_68020 || TARGET_68040\"\n+  ;; Elide the seq if operands[0] is dead.\n+  \"cas<sz> %1,%4,%2\\;seq %0\")\n+\n+(define_expand \"sync_test_and_setqi\"\n+  [(match_operand:QI 0 \"register_operand\" \"\")\n+   (match_operand:QI 1 \"memory_operand\" \"\")\n+   (match_operand:QI 2 \"general_operand\" \"\")]\n+  \"!(TARGET_68020 || TARGET_68040)\"\n+{\n+  if (operands[2] != const1_rtx)\n+    FAIL;\n+  emit_insn (gen_sync_test_and_setqi_1 (operands[0], operands[1]));\n+  emit_insn (gen_negqi2 (operands[0], operands[0]));\n+  DONE;\n+})\n+\n+(define_insn \"sync_test_and_setqi_1\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=d\")\n+\t(unspec_volatile:QI\n+\t  [(match_operand:QI 1 \"memory_operand\" \"+m\")]\n+\t  UNSPECV_TAS_1))\n+   (set (match_dup 1)\n+\t(unspec_volatile:QI [(match_dup 1)] UNSPECV_TAS_2))]\n+  \"!(TARGET_68020 || TARGET_68040)\"\n+  \"tas %1\\;sne %0\")"}]}