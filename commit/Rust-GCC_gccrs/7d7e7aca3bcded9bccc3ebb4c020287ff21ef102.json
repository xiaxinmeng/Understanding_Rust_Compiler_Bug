{"sha": "7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3ZTdhY2EzYmNkZWQ5YmNjYzNlYmI0YzAyMDI4N2ZmMjFlZjEwMg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-11-19T00:33:27Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-11-19T00:33:27Z"}, "message": "[PATCH][PR tree-optimization/68198] Avoid CFG explosion due to threading\n\n\tPR tree-optimization/68198\n\t* tree-ssa-threadupdate.c (valid_jump_thread_path): Distinguish\n\tbetween threading a multi-way branch and a thread path that contains\n\ta multi-way branch.  Disallow the case where a path contains a\n\tmulti-way branch and does not thread a multi-way branch.\n\t(thread_through_all_blocks): Update comment.\n\n        PR tree-optimization/68198\n\t* gcc.dg/tree-ssa/pr66752-3.c: Update expected output for VRP1.\n\t* gcc.dg/tree-ssa/pr68198.c: New test.\n\nFrom-SVN: r230586", "tree": {"sha": "cdce52b09099f2ec47842495fd8697f9d46bc078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdce52b09099f2ec47842495fd8697f9d46bc078"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/comments", "author": null, "committer": null, "parents": [{"sha": "3ebf5a30cf7ef66b150a6a217636744329fcfe2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebf5a30cf7ef66b150a6a217636744329fcfe2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebf5a30cf7ef66b150a6a217636744329fcfe2b"}], "stats": {"total": 113, "additions": 101, "deletions": 12}, "files": [{"sha": "26ddcccfbd493b865ec0ddaee6595ba9c3ff2215", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "patch": "@@ -1,3 +1,12 @@\n+2015-11-18  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/68198\n+\t* tree-ssa-threadupdate.c (valid_jump_thread_path): Distinguish\n+\tbetween threading a multi-way branch and a thread path that contains\n+\ta multi-way branch.  Disallow the case where a path contains a\n+\tmulti-way branch and does not thread a multi-way branch.\n+\t(thread_through_all_blocks): Update comment.\n+\n 2015-11-18  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/65083"}, {"sha": "48f536fc61056acc7c9adfab0ee3cfa51e1c0bf9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "patch": "@@ -1,3 +1,9 @@\n+2015-11-18  Jeff Law  <law@redhat.com>\n+\n+        PR tree-optimization/68198\n+\t* gcc.dg/tree-ssa/pr66752-3.c: Update expected output for VRP1.\n+\t* gcc.dg/tree-ssa/pr68198.c: New test.\n+\n 2015-11-18  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/59910"}, {"sha": "1f27b1a4c48b1dad93f37dbf77af044a03896b8e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr66752-3.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr66752-3.c?ref=7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "patch": "@@ -32,8 +32,10 @@ foo (int N, int c, int b, int *a)\n    pt--;\n }\n \n-/* There are 3 FSM jump threading opportunities.  */\n-/* { dg-final { scan-tree-dump-times \"FSM\" 3 \"vrp1\"} } */\n+/* There are 3 FSM jump threading opportunities, one of which will\n+   get cancelled.  */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM\" 3 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Cancelling FSM\" 1 \"vrp1\"} } */\n \n /* There should be no assignments or references to FLAG.  */\n /* { dg-final { scan-tree-dump-not \"flag\" \"optimized\"} } */"}, {"sha": "ddd3c76103e86ba1b5c3b3cb3fc34c4d93b00f51", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr68198.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr68198.c?ref=7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1-details\" } */\n+\n+extern void abort (void);\n+\n+typedef union tree_node *tree;\n+union tree_node\n+{\n+  int code;\n+  tree chain;\n+  int omp_code;\n+}\n+bitmap_head;\n+\n+extern int c_omp_predetermined_sharing (tree);\n+\n+tree\n+c_finish_omp_clauses (tree clauses)\n+{\n+  tree c, t, *pc = &clauses;\n+  for (pc = &clauses, c = clauses; c; c = *pc)\n+    {\n+      unsigned char remove = 0;\n+      switch (((c->omp_code)))\n+\t{\n+\tcase 1:\n+\t  if (t->code != 42)\n+\t    remove = 1;\n+\t  switch (c_omp_predetermined_sharing (t))\n+\t    {\n+\t    case 2:\n+\t      abort ();\n+\t    }\n+\t}\n+      if (remove)\n+\t*pc = c->chain;\n+    }\n+}\n+\n+/* There are 3 FSM jump threading opportunities, two of which will\n+  get cancelled.  */\n+/* { dg-final { scan-tree-dump-times \"Registering FSM\" 3 \"vrp1\"} } */\n+/* { dg-final { scan-tree-dump-times \"Cancelling FSM\" 2 \"vrp1\"} } */"}, {"sha": "3dd0e4f5fe6309aafdcccf281b00c97a6f6974ad", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 39, "deletions": 10, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7e7aca3bcded9bccc3ebb4c020287ff21ef102/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=7d7e7aca3bcded9bccc3ebb4c020287ff21ef102", "patch": "@@ -2370,11 +2370,13 @@ static bool\n valid_jump_thread_path (vec<jump_thread_edge *> *path)\n {\n   unsigned len = path->length ();\n-  bool multiway_branch = false;\n+  bool threaded_multiway_branch = false;\n+  bool multiway_branch_in_path = false;\n   bool threaded_through_latch = false;\n \n   /* Check that the path is connected and see if there's a multi-way\n-     branch on the path.  */\n+     branch on the path and whether or not a multi-way branch\n+     is threaded.  */\n   for (unsigned int j = 0; j < len - 1; j++)\n     {\n       edge e = (*path)[j]->e;\n@@ -2394,16 +2396,46 @@ valid_jump_thread_path (vec<jump_thread_edge *> *path)\n \tthreaded_through_latch = true;\n \n       gimple *last = last_stmt (e->dest);\n-      multiway_branch |= (last && gimple_code (last) == GIMPLE_SWITCH);\n+      if (j == len - 2)\n+\tthreaded_multiway_branch\n+\t  |= (last && gimple_code (last) == GIMPLE_SWITCH);\n+      else\n+\tmultiway_branch_in_path\n+\t  |= (last && gimple_code (last) == GIMPLE_SWITCH);\n     }\n \n   /* If we are trying to thread through the loop latch to a block in the\n      loop that does not dominate the loop latch, then that will create an\n      irreducible loop.  We avoid that unless the jump thread has a multi-way\n      branch, in which case we have deemed it worth losing other\n      loop optimizations later if we can eliminate the multi-way branch.  */\n-  if (!multiway_branch && threaded_through_latch)\n-    return false;\n+  if (!threaded_multiway_branch && threaded_through_latch)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"Thread through latch without threading a multiway \"\n+\t\t   \"branch.\\n\");\n+\t  dump_jump_thread_path (dump_file, *path, false);\n+\t}\n+      return false;\n+    }\n+\n+  /* When there is a multi-way branch on the path, then threading can\n+     explode the CFG due to duplicating the edges for that multi-way\n+     branch.  So like above, only allow a multi-way branch on the path\n+     if we actually thread a multi-way branch.  */\n+  if (!threaded_multiway_branch && multiway_branch_in_path)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file,\n+\t\t   \"Thread through multiway branch without threading \"\n+\t\t   \"a multiway branch.\\n\");\n+\t  dump_jump_thread_path (dump_file, *path, false);\n+\t}\n+      return false;\n+    }\n \n   return true;\n }\n@@ -2494,11 +2526,8 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \n       /* Do not jump-thread twice from the same block.  */\n       if (bitmap_bit_p (threaded_blocks, entry->src->index)\n-\t  /* Verify that the jump thread path is still valid: a\n-\t     previous jump-thread may have changed the CFG, and\n-\t     invalidated the current path or the requested jump\n-\t     thread might create irreducible loops which should\n-\t     generally be avoided.  */\n+\t  /* We may not want to realize this jump thread path\n+\t     for various reasons.  So check it first.  */\n \t  || !valid_jump_thread_path (path))\n \t{\n \t  /* Remove invalid FSM jump-thread paths.  */"}]}