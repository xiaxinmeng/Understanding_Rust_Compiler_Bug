{"sha": "9c88061824631d4fc318c57b72cfd1913007d50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM4ODA2MTgyNDYzMWQ0ZmMzMThjNTdiNzJjZmQxOTEzMDA3ZDUwYw==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-10-14T15:03:51Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-10-14T15:03:51Z"}, "message": "re PR c++/37553 (ICE in build_c_cast)\n\n2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/37553\n       * tree.c (build_type_attribute_qual_variant): Hash on the\n       unqualified type, and don't overwrite an existing\n       (type_hash_eq): Make the TYPE_NAME of the types significant, to\n       allow distinguishing between wchar_t and its underlying type. This\n       also means that we'll retain a little more typedef information.\n\n2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n\n       PR c++/37553\n       * g++.dg/ext/alias-canon2.C: New.\n\nFrom-SVN: r141111", "tree": {"sha": "4041d69622227f0600a435b713937d1aef6b5444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4041d69622227f0600a435b713937d1aef6b5444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c88061824631d4fc318c57b72cfd1913007d50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c88061824631d4fc318c57b72cfd1913007d50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c88061824631d4fc318c57b72cfd1913007d50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c88061824631d4fc318c57b72cfd1913007d50c/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fea874e7a0868d3d77c06286226c974237c45e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fea874e7a0868d3d77c06286226c974237c45e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fea874e7a0868d3d77c06286226c974237c45e9"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "6bbf5c252f768d9d729b9f86cdbf42b3801cd683", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c88061824631d4fc318c57b72cfd1913007d50c", "patch": "@@ -1,3 +1,12 @@\n+2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/37553\n+       * tree.c (build_type_attribute_qual_variant): Hash on the\n+       unqualified type, and don't overwrite an existing\n+       (type_hash_eq): Make the TYPE_NAME of the types significant, to\n+       allow distinguishing between wchar_t and its underlying type. This\n+       also means that we'll retain a little more typedef information.\n+\n 2008-10-14  Andrey Belevantsev  <abel@ispras.ru>\n \t    Dmitry Melnik  <dm@ispras.ru>\n \t    Dmitry Zhurikhin  <zhur@ispras.ru>"}, {"sha": "e4f3da8c6fed354b66e677a977fd1eed2b0a82a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c88061824631d4fc318c57b72cfd1913007d50c", "patch": "@@ -1,3 +1,8 @@\n+2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+       PR c++/37553\n+       * g++.dg/ext/alias-canon2.C: New.\n+\n 2008-10-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org\n \n \tPR libfortran/37083"}, {"sha": "4833db852d3338acb560bbe5872e5a51da259579", "filename": "gcc/testsuite/g++.dg/ext/alias-canon2.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Falias-canon2.C?ref=9c88061824631d4fc318c57b72cfd1913007d50c", "patch": "@@ -0,0 +1,36 @@\n+// { dg-do compile }\n+// PR c++/37553\n+typedef unsigned int ui32;\n+__extension__ typedef unsigned long long int ui64;\n+\n+typedef ui32 __attribute__ ((__may_alias__)) ui32a;\n+typedef ui64 __attribute__ ((__may_alias__)) ui64a;\n+\n+union u_u32\n+{\n+  ui32a v;\n+} __attribute__ ((__may_alias__));\n+\n+union u_u64\n+{\n+  ui64a v;\n+  struct\n+  {\n+    union u_u32 lo32, hi32;\n+  } u;\n+} __attribute__ ((__may_alias__));\n+\n+void\n+out_long (ui64 longVal)\n+{\n+  if ((*(union u_u64 *) &longVal).u.lo32.v < 0x10000000ul)\n+    {\n+      if ((ui32) ((*(union u_u64 *) &longVal).u.lo32.v) < 0x4000u)\n+        {\n+          /* do something useful */\n+        }\n+    }\n+}\n+\n+void f(ui32 *) { }\n+void f(ui32a *) { }"}, {"sha": "b131a20875c5eae4f366e081159da1d7c84fa733", "filename": "gcc/tree.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c88061824631d4fc318c57b72cfd1913007d50c/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9c88061824631d4fc318c57b72cfd1913007d50c", "patch": "@@ -3704,10 +3704,10 @@ build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n \t  return build_qualified_type (ttype, quals);\n \t}\n \n+      ttype = build_qualified_type (ttype, TYPE_UNQUALIFIED);\n       ntype = build_distinct_type_copy (ttype);\n \n       TYPE_ATTRIBUTES (ntype) = attribute;\n-      set_type_quals (ntype, TYPE_UNQUALIFIED);\n \n       hashcode = iterative_hash_object (code, hashcode);\n       if (TREE_TYPE (ntype))\n@@ -3746,12 +3746,11 @@ build_type_attribute_qual_variant (tree ttype, tree attribute, int quals)\n \n       /* If the target-dependent attributes make NTYPE different from\n \t its canonical type, we will need to use structural equality\n-\t checks for this qualified type. */\n-      ttype = build_qualified_type (ttype, TYPE_UNQUALIFIED);\n+\t checks for this type. */\n       if (TYPE_STRUCTURAL_EQUALITY_P (ttype)\n           || !targetm.comp_type_attributes (ntype, ttype))\n \tSET_TYPE_STRUCTURAL_EQUALITY (ntype);\n-      else\n+      else if (TYPE_CANONICAL (ntype) == ntype)\n \tTYPE_CANONICAL (ntype) = TYPE_CANONICAL (ttype);\n \n       ttype = build_qualified_type (ntype, quals);\n@@ -4585,7 +4584,9 @@ type_hash_eq (const void *va, const void *vb)\n       || !attribute_list_equal (TYPE_ATTRIBUTES (a->type),\n \t\t\t\t TYPE_ATTRIBUTES (b->type))\n       || TYPE_ALIGN (a->type) != TYPE_ALIGN (b->type)\n-      || TYPE_MODE (a->type) != TYPE_MODE (b->type))\n+      || TYPE_MODE (a->type) != TYPE_MODE (b->type)\n+      || (TREE_CODE (a->type) != COMPLEX_TYPE \n+          && TYPE_NAME (a->type) != TYPE_NAME (b->type)))\n     return 0;\n \n   switch (TREE_CODE (a->type))"}]}