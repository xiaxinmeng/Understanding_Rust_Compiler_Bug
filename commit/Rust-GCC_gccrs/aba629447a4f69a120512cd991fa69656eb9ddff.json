{"sha": "aba629447a4f69a120512cd991fa69656eb9ddff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJhNjI5NDQ3YTRmNjlhMTIwNTEyY2Q5OTFmYTY5NjU2ZWI5ZGRmZg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-05T17:23:44Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-01-05T17:23:44Z"}, "message": "Add -mcpu={505,821,860} support; Fixup common mode support; Make eabi not rely on GLD\n\nFrom-SVN: r10943", "tree": {"sha": "b2aff64a5e1b90bc23afbab49ebd20a91248f324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2aff64a5e1b90bc23afbab49ebd20a91248f324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aba629447a4f69a120512cd991fa69656eb9ddff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba629447a4f69a120512cd991fa69656eb9ddff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba629447a4f69a120512cd991fa69656eb9ddff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba629447a4f69a120512cd991fa69656eb9ddff/comments", "author": null, "committer": null, "parents": [{"sha": "cf27b46744aec5430b81bf763171239bba0f4abb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf27b46744aec5430b81bf763171239bba0f4abb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf27b46744aec5430b81bf763171239bba0f4abb"}], "stats": {"total": 101, "additions": 92, "deletions": 9}, "files": [{"sha": "23199980ec695f0c2d2d78b394aa7a0f6ff77f53", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 92, "deletions": 9, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba629447a4f69a120512cd991fa69656eb9ddff/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba629447a4f69a120512cd991fa69656eb9ddff/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=aba629447a4f69a120512cd991fa69656eb9ddff", "patch": "@@ -1,3 +1,39 @@\n+/*\n+ * special support for eabi\n+ *\n+ *   Copyright (C) 1995, 1996 Free Software Foundation, Inc.\n+ *   Written By Michael Meissner\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */ \n+\n /* Do any initializations needed for the eabi environment */\n \n \t.file\t\"eabi.asm\"\n@@ -15,22 +51,34 @@\n \t.long\t_GLOBAL_OFFSET_TABLE_\t\t/* normal GOT address */\n \n .Lgots = .-.LCTOC1\n-\t.long\t_GOT_START_\t\t\t/* start of .got section */\n+\t.long\t__GOT_START__\t\t\t/* start of .got section */\n \n .Lgote = .-.LCTOC1\n-\t.long\t_GOT_END_\t\t\t/* end of .got section */\n+\t.long\t__GOT_END__\t\t\t/* end of .got section */\n \n .Lgot2s = .-.LCTOC1\n-\t.long\t_GOT2_START_\t\t\t/* -mrelocatable GOT pointers start */\n+\t.long\t__GOT2_START__\t\t\t/* -mrelocatable GOT pointers start */\n \n .Lgot2e = .-.LCTOC1\n-\t.long\t_GOT2_END_\t\t\t/* -mrelocatable GOT pointers end */\n+\t.long\t__GOT2_END__\t\t\t/* -mrelocatable GOT pointers end */\n \n .Lfixups = .-.LCTOC1\n-\t.long\t_FIXUP_START_\t\t\t/* start of .fixup section */\n+\t.long\t__FIXUP_START__\t\t\t/* start of .fixup section */\n \n .Lfixupe = .-.LCTOC1\n-\t.long\t_FIXUP_END_\t\t\t/* end of .fixup section */\n+\t.long\t__FIXUP_END__\t\t\t/* end of .fixup section */\n+\n+.Lctors = .-.LCTOC1\n+\t.long\t__CTOR_LIST__\t\t\t/* start of .ctor section */\n+\n+.Lctore = .-.LCTOC1\n+\t.long\t__CTOR_END__\t\t\t/* end of .ctor section */\n+\n+.Ldtors = .-.LCTOC1\n+\t.long\t__DTOR_LIST__\t\t\t/* start of .dtor section */\n+\n+.Ldtore = .-.LCTOC1\n+\t.long\t__DTOR_END__\t\t\t/* end of .dtor section */\n \n \t.text\n .Lptr:\n@@ -70,7 +118,7 @@ FUNC_START(__eabi)\n \tadd\t4,12,4\n \n \tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n-\tbc\t12,6,.Lfix\n+\tbc\t12,6,.Lctor\n \n .Lloop:\n \tlwz\t5,0(3)\t\t\t\t/* next pointer */\n@@ -80,9 +128,42 @@ FUNC_START(__eabi)\n \tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n \tbc\t4,6,.Lloop\n \n+/* Fixup the .ctor section for static constructors */\n+\n+.Lctor:\n+\tlwz\t3,.Lctors(11)\t\t\t/* constructors pointers start */\n+\tlwz\t4,.Lctore(11)\t\t\t/* constructors pointers end */\n+\n+\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n+\tbc\t12,6,.Ldtor\n+\n+.Lcloop:\n+\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n+\tadd\t5,5,12\t\t\t\t/* adjust */\n+\tstw\t5,0(3)\n+\taddi\t3,3,4\t\t\t\t/* bump to next word */\n+\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n+\tbc\t4,6,.Lcloop\n+\n+/* Fixup the .dtor section for static destructors */\n+\n+.Ldtor:\n+\tlwz\t3,.Ldtors(11)\t\t\t/* destructors pointers start */\n+\tlwz\t4,.Ldtore(11)\t\t\t/* destructors pointers end */\n+\n+\tcmpw\t1,3,4\t\t\t\t/* any pointers to adjust */\n+\tbc\t12,6,.Lfix\n+\n+.Ldloop:\n+\tlwz\t5,0(3)\t\t\t\t/* next pointer */\n+\tadd\t5,5,12\t\t\t\t/* adjust */\n+\tstw\t5,0(3)\n+\taddi\t3,3,4\t\t\t\t/* bump to next word */\n+\tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n+\tbc\t4,6,.Ldloop\n+\n /* Fixup any user initialized pointers now (the compiler drops pointers to */\n-/* each of the relocs that it does in the .fixup section).  Note, the pointers */\n-/* themselves have already been fixed up by the previous loop. */\n+/* each of the relocs that it does in the .fixup section).  */\n \n .Lfix:\n \tlwz\t3,.Lfixups(11)\t\t\t/* fixup pointers start */\n@@ -93,7 +174,9 @@ FUNC_START(__eabi)\n \n .Lfloop:\n \tlwz\t5,0(3)\t\t\t\t/* next pointer */\n+\tadd\t5,5,12\t\t\t\t/* adjust pointer */\n \tlwz\t6,0(5)\t\t\t\t/* get the pointer it points to */\n+\tstw\t5,0(3)\t\t\t\t/* store adjusted pointer */\n \tadd\t6,6,12\t\t\t\t/* adjust */\n \tstw\t6,0(5)\n \taddi\t3,3,4\t\t\t\t/* bump to next word */"}]}