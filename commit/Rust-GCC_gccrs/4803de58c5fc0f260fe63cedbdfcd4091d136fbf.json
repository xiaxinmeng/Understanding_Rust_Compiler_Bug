{"sha": "4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgwM2RlNThjNWZjMGYyNjBmZTYzY2VkYmRmY2Q0MDkxZDEzNmZiZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-11T22:22:38Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-11T22:22:38Z"}, "message": "sparc.c (emit_scc_insn): Remove direct support for EQ and GEU in DImode if TARGET_SUBXC.\n\n\t* config/sparc/sparc.c (emit_scc_insn): Remove direct support for EQ\n\tand GEU in DImode if TARGET_SUBXC.\n\t* config/sparc/sparc.md (seqdi<W:mode>_zero): Remove TARGET_SUBXC.\n\t(seqdi<W:mode>_zero_subxc): Delete.\n\t(neg_seqdi<W:mode>_zero): Remove TARGET_VIS3.\n\t(neg_seqdi<W:mode>_zero_vis3): Delete.\n\t(plus_seqdi<W:mode>_zero): Likewise.\n\t(minus_seqdi<W:mode>_zero): Likewise.\n\t(plus_plus_sltu<W:mode>): Accept only register.\n\t(addx<W:mode>): Likewise.\n\t(plus_sltu<W:mode>_vis3): Likewise.\n\t(plus_plus_sltu<W:mode>_vis3): Likewise.\n\t(neg_sgeu<W:mode>_vis3): Delete.\n\t(minus_sgeu<W:mode>_vis3): Likewise.\n\t(addxc<W:mode>): Accept only registers.\n\t(neg_sltu<W:mode>_subxc): Write %%g0 instead of 0.\n\t(minus_neg_sltu<W:mode>_subxc): Accept only register.\n\t(neg_plus_sltu<W:mode>_subxc): Likewise.\n\t(minus_sltu<W:mode>_subxc): Write %%g0 instead of 0.\n\t(minus_minus_sltu<W:mode>_subxc): Accept only register.\n\t(sgeu<W:mode>_insn_subxc): Delete.\n\t(plus_sgeu<W:mode>_subxc): Likewise.\n\t(subxc<W:mode>): Accept only register.\n\t(scc splitter): Split always GEU again.\n\nFrom-SVN: r241012", "tree": {"sha": "d91cc90f8e063d1eb578969bd4aeacc4fe41f96e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d91cc90f8e063d1eb578969bd4aeacc4fe41f96e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/comments", "author": null, "committer": null, "parents": [{"sha": "0a4613f0c53a129aedcc1296a031b761b444e5d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4613f0c53a129aedcc1296a031b761b444e5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4613f0c53a129aedcc1296a031b761b444e5d8"}], "stats": {"total": 372, "additions": 128, "deletions": 244}, "files": [{"sha": "110c2f3adf5fbd7e2dcd2bc8cadcf2089083ec3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,3 +1,30 @@\n+2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (emit_scc_insn): Remove direct support for EQ\n+\tand GEU in DImode if TARGET_SUBXC.\n+\t* config/sparc/sparc.md (seqdi<W:mode>_zero): Remove TARGET_SUBXC.\n+\t(seqdi<W:mode>_zero_subxc): Delete.\n+\t(neg_seqdi<W:mode>_zero): Remove TARGET_VIS3.\n+\t(neg_seqdi<W:mode>_zero_vis3): Delete.\n+\t(plus_seqdi<W:mode>_zero): Likewise.\n+\t(minus_seqdi<W:mode>_zero): Likewise.\n+\t(plus_plus_sltu<W:mode>): Accept only register.\n+\t(addx<W:mode>): Likewise.\n+\t(plus_sltu<W:mode>_vis3): Likewise.\n+\t(plus_plus_sltu<W:mode>_vis3): Likewise.\n+\t(neg_sgeu<W:mode>_vis3): Delete.\n+\t(minus_sgeu<W:mode>_vis3): Likewise.\n+\t(addxc<W:mode>): Accept only registers.\n+\t(neg_sltu<W:mode>_subxc): Write %%g0 instead of 0.\n+\t(minus_neg_sltu<W:mode>_subxc): Accept only register.\n+\t(neg_plus_sltu<W:mode>_subxc): Likewise.\n+\t(minus_sltu<W:mode>_subxc): Write %%g0 instead of 0.\n+\t(minus_minus_sltu<W:mode>_subxc): Accept only register.\n+\t(sgeu<W:mode>_insn_subxc): Delete.\n+\t(plus_sgeu<W:mode>_subxc): Likewise.\n+\t(subxc<W:mode>): Accept only register.\n+\t(scc splitter): Split always GEU again.\n+\n 2016-10-11  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/77424"}, {"sha": "f721ec299ab5c71ac3196eb79fbf29409eaf1eb5", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -3023,10 +3023,8 @@ emit_scc_insn (rtx operands[])\n \t\t\t     gen_rtx_fmt_ee (code, GET_MODE (operands[0]),\n \t\t\t\t\t     x, const0_rtx));\n \n-      /* If we can use addx/subx or addxc/subxc, add a clobber for CC.  */\n-      if (mode == SImode\n-\t  || (code == NE && TARGET_VIS3)\n-\t  || (code == EQ && TARGET_SUBXC))\n+      /* If we can use addx/subx or addxc, add a clobber for CC.  */\n+      if (mode == SImode || (code == NE && TARGET_VIS3))\n \t{\n \t  rtx clobber\n \t    = gen_rtx_CLOBBER (VOIDmode,\n@@ -3039,12 +3037,10 @@ emit_scc_insn (rtx operands[])\n       return true;\n     }\n \n-  /* We can do LTU in DImode using the addxc instruction with VIS3\n-     and GEU in DImode using the subxc instruction with SUBXC.  */\n+  /* We can do LTU in DImode using the addxc instruction with VIS3.  */\n   if (TARGET_ARCH64\n       && mode == DImode\n       && !((code == LTU || code == GTU) && TARGET_VIS3)\n-      && !((code == GEU || code == LEU) && TARGET_SUBXC)\n       && gen_v9_scc (operands[0], code, x, y))\n     return true;\n "}, {"sha": "5a89872824869d331c2208fe23ef41c76f786808", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 18, "deletions": 116, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -784,7 +784,7 @@\n   [(set (match_operand:W 0 \"register_operand\" \"=&r\")\n         (eq:W (match_operand:DI 1 \"register_operand\" \"r\")\n               (const_int 0)))]\n-  \"TARGET_ARCH64 && !TARGET_SUBXC\"\n+  \"TARGET_ARCH64\"\n   \"#\"\n   \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n@@ -794,24 +794,11 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn_and_split \"*seqdi<W:mode>_zero_subxc\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(eq:W (match_operand:DI 1 \"register_operand\" \"r\")\n-\t      (const_int 0)))\n-   (clobber (reg:CCX CC_REG))]\n-  \"TARGET_ARCH64 && TARGET_SUBXC\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:CCXC CC_REG) (compare:CCXC (not:DI (match_dup 1)) (const_int -1)))\n-   (set (match_dup 0) (geu:W (reg:CCXC CC_REG) (const_int 0)))]\n-  \"\"\n-  [(set_attr \"length\" \"2\")])\n-\n (define_insn_and_split \"*neg_seqdi<W:mode>_zero\"\n   [(set (match_operand:W 0 \"register_operand\" \"=&r\")\n         (neg:W (eq:W (match_operand:DI 1 \"register_operand\" \"r\")\n                      (const_int 0))))]\n-  \"TARGET_ARCH64 && !TARGET_VIS3\"\n+  \"TARGET_ARCH64\"\n   \"#\"\n   \"&& ! reg_overlap_mentioned_p (operands[1], operands[0])\"\n   [(set (match_dup 0) (const_int 0))\n@@ -821,19 +808,6 @@\n   \"\"\n   [(set_attr \"length\" \"2\")]) \n \n-(define_insn_and_split \"*neg_seqdi<W:mode>_zero\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(neg:W (eq:W (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t     (const_int 0))))\n-   (clobber (reg:CCX CC_REG))]\n-  \"TARGET_ARCH64 && TARGET_VIS3\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:CCXC CC_REG) (compare:CCXC (not:DI (match_dup 1)) (const_int -1)))\n-   (set (match_dup 0) (neg:W (geu:W (reg:CCXC CC_REG) (const_int 0))))]\n-  \"\"\n-  [(set_attr \"length\" \"2\")])\n-\n ;; We can also do (x + (i == 0)) and related, so put them in.\n \n (define_insn_and_split \"*plus_snesi<W:mode>_zero\"\n@@ -935,8 +909,8 @@\n (define_insn_and_split \"*minus_snedi<W:mode>_zero\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(minus:W (match_operand:W 2 \"register_operand\" \"r\")\n-\t\t  (ne:W (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t(const_int 0))))\n+\t\t (ne:W (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t       (const_int 0))))\n    (clobber (reg:CCX CC_REG))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\"\n   \"#\"\n@@ -979,21 +953,6 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn_and_split \"*plus_seqdi<W:mode>_zero\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(plus:W (eq:W (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t      (const_int 0))\n-\t\t(match_operand:W 2 \"register_operand\" \"r\")))\n-   (clobber (reg:CCX CC_REG))]\n-  \"TARGET_ARCH64 && TARGET_SUBXC\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:CCXC CC_REG) (compare:CCXC (not:DI (match_dup 1)) (const_int -1)))\n-   (set (match_dup 0) (plus:W (geu:W (reg:CCXC CC_REG) (const_int 0))\n-\t\t\t      (match_dup 2)))]\n-  \"\"\n-  [(set_attr \"length\" \"2\")])\n-\n (define_insn_and_split \"*minus_seqsi<W:mode>_zero\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(minus:W (match_operand:W 2 \"register_operand\" \"r\")\n@@ -1009,21 +968,6 @@\n   \"\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn_and_split \"*minus_seqdi<W:mode>_zero\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(minus:W (match_operand:W 2 \"register_operand\" \"r\")\n-\t\t (eq:W (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t       (const_int 0))))\n-   (clobber (reg:CCX CC_REG))]\n-  \"TARGET_ARCH64 && TARGET_VIS3\"\n-  \"#\"\n-  \"\"\n-  [(set (reg:CCXC CC_REG) (compare:CCXC (not:DI (match_dup 1)) (const_int -1)))\n-   (set (match_dup 0) (minus:W (match_dup 2)\n-\t\t\t       (geu:W (reg:CCXC CC_REG) (const_int 0))))]\n-  \"\"\n-  [(set_attr \"length\" \"2\")])\n-\n ;; We can also do GEU and LTU directly, but these operate after a compare.\n \n (define_insn \"*sltu<W:mode>_insn\"\n@@ -1046,7 +990,7 @@\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(plus:W (plus:W (ltu:W (match_operand 3 \"icc_register_operand\" \"X\")\n \t\t\t       (const_int 0))\n-\t\t\t(match_operand:W 1 \"arith_operand\" \"%r\"))\n+\t\t\t(match_operand:W 1 \"register_operand\" \"%r\"))\n \t\t(match_operand:W 2 \"arith_operand\" \"rI\")))]\n   \"GET_MODE (operands[3]) == CCmode || GET_MODE (operands[3]) == CCCmode\"\n   \"addx\\t%1, %2, %0\"\n@@ -1080,7 +1024,7 @@\n \n (define_insn \"*addx<W:mode>\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(plus:W (plus:W (match_operand:W 1 \"arith_operand\" \"%r\")\n+\t(plus:W (plus:W (match_operand:W 1 \"register_operand\" \"%r\")\n \t\t\t(match_operand:W 2 \"arith_operand\" \"rI\"))\n \t\t(ltu:W (match_operand 3 \"icc_register_operand\" \"X\")\n \t\t       (const_int 0))))]\n@@ -1100,7 +1044,7 @@\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(plus:W (ltu:W (match_operand 2 \"icc_register_operand\" \"X\")\n \t\t       (const_int 0))\n-\t\t(match_operand:W 1 \"arith_operand\" \"rI\")))]\n+\t\t(match_operand:W 1 \"register_operand\" \"r\")))]\n   \"TARGET_ARCH64 && TARGET_VIS3\n    && (GET_MODE (operands[2]) == CCXmode || GET_MODE (operands[2]) == CCXCmode)\"\n   \"addxc\\t%%g0, %1, %0\"\n@@ -1110,41 +1054,22 @@\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(plus:W (plus:W (ltu:W (match_operand 3 \"icc_register_operand\" \"X\")\n \t\t\t       (const_int 0))\n-\t\t\t(match_operand:W 1 \"arith_operand\" \"%r\"))\n-\t\t(match_operand:W 2 \"arith_operand\" \"rI\")))]\n+\t\t\t(match_operand:W 1 \"register_operand\" \"%r\"))\n+\t\t(match_operand:W 2 \"register_operand\" \"r\")))]\n   \"TARGET_ARCH64 && TARGET_VIS3\n    && (GET_MODE (operands[3]) == CCXmode || GET_MODE (operands[3]) == CCXCmode)\"\n   \"addxc\\t%1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n-(define_insn \"*neg_sgeu<W:mode>_vis3\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(neg:W (geu:W (match_operand 1 \"icc_register_operand\" \"X\")\n-\t\t      (const_int 0))))]\n-  \"TARGET_ARCH64 && TARGET_VIS3\n-   && (GET_MODE (operands[1]) == CCXmode || GET_MODE (operands[1]) == CCXCmode)\"\n-  \"addxc\\t%%g0, -1, %0\"\n-  [(set_attr \"type\" \"ialuX\")])\n-\n-(define_insn \"*minus_sgeu<W:mode>_vis3\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(minus:W (match_operand:W 1 \"register_operand\" \"r\")\n-\t\t (geu:W (match_operand 2 \"icc_register_operand\" \"X\")\n-\t\t        (const_int 0))))]\n-  \"TARGET_ARCH64 && TARGET_VIS3\n-   && (GET_MODE (operands[2]) == CCXmode || GET_MODE (operands[2]) == CCXCmode)\"\n-  \"addxc\\t%1, -1, %0\"\n-  [(set_attr \"type\" \"ialuX\")])\n-\n (define_insn \"*addxc<W:mode>\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(plus:W (plus:W (match_operand:W 1 \"register_or_zero_operand\" \"%rJ\")\n-\t\t\t(match_operand:W 2 \"register_or_zero_operand\" \"rJ\"))\n+\t(plus:W (plus:W (match_operand:W 1 \"register_operand\" \"%r\")\n+\t\t\t(match_operand:W 2 \"register_operand\" \"r\"))\n \t\t(ltu:W (match_operand 3 \"icc_register_operand\" \"X\")\n \t\t       (const_int 0))))]\n   \"TARGET_ARCH64 && TARGET_VIS3\n    && (GET_MODE (operands[3]) == CCXmode || GET_MODE (operands[3]) == CCXCmode)\"\n-  \"addxc\\t%r1, %r2, %0\"\n+  \"addxc\\t%1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*neg_sltu<W:mode>\"\n@@ -1233,14 +1158,14 @@\n \t\t      (const_int 0))))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\n    && (GET_MODE (operands[1]) == CCXmode || GET_MODE (operands[1]) == CCXCmode)\"\n-  \"subxc\\t%%g0, 0, %0\"\n+  \"subxc\\t%%g0, %%g0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*minus_neg_sltu<W:mode>_subxc\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(minus:W (neg:W (ltu:W (match_operand 2 \"icc_register_operand\" \"X\")\n \t\t\t       (const_int 0)))\n-\t\t (match_operand:W 1 \"arith_operand\" \"rI\")))]\n+\t\t (match_operand:W 1 \"register_operand\" \"r\")))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\n    && (GET_MODE (operands[2]) == CCXmode || GET_MODE (operands[2]) == CCXCmode)\"\n   \"subxc\\t%%g0, %1, %0\"\n@@ -1250,7 +1175,7 @@\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(neg:W (plus:W (ltu:W (match_operand 2 \"icc_register_operand\" \"X\")\n \t\t\t      (const_int 0))\n-\t\t       (match_operand:W 1 \"arith_operand\" \"rI\"))))]\n+\t\t       (match_operand:W 1 \"register_operand\" \"r\"))))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\n    && (GET_MODE (operands[2]) == CCXmode || GET_MODE (operands[2]) == CCXCmode)\"\n   \"subxc\\t%%g0, %1, %0\"\n@@ -1263,42 +1188,24 @@\n \t\t\t(const_int 0))))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\n    && (GET_MODE (operands[2]) == CCXmode || GET_MODE (operands[2]) == CCXCmode)\"\n-  \"subxc\\t%1, 0, %0\"\n+  \"subxc\\t%1, %%g0, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n (define_insn \"*minus_minus_sltu<W:mode>_subxc\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(minus:W (minus:W (match_operand:W 1 \"register_or_zero_operand\" \"rJ\")\n \t\t\t  (ltu:W (match_operand 3 \"icc_register_operand\" \"X\")\n \t\t\t\t (const_int 0)))\n-\t\t (match_operand:W 2 \"arith_operand\" \"rI\")))]\n+\t\t (match_operand:W 2 \"register_operand\" \"r\")))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\n    && (GET_MODE (operands[3]) == CCXmode || GET_MODE (operands[3]) == CCXCmode)\"\n   \"subxc\\t%r1, %2, %0\"\n   [(set_attr \"type\" \"ialuX\")])\n \n-(define_insn \"*sgeu<W:mode>_insn_subxc\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(geu:W (match_operand 1 \"icc_register_operand\" \"X\") (const_int 0)))]\n-  \"TARGET_ARCH64 && TARGET_SUBXC\n-   && (GET_MODE (operands[1]) == CCXmode || GET_MODE (operands[1]) == CCXCmode)\"\n-  \"subxc\\t%%g0, -1, %0\"\n-  [(set_attr \"type\" \"ialuX\")])\n-\n-(define_insn \"*plus_sgeu<W:mode>_subxc\"\n-  [(set (match_operand:W 0 \"register_operand\" \"=r\")\n-\t(plus:W (geu:W (match_operand 2 \"icc_register_operand\" \"X\")\n-\t\t       (const_int 0))\n-\t\t(match_operand:W 1 \"register_operand\" \"r\")))]\n-  \"TARGET_ARCH64 && TARGET_SUBXC\n-   && (GET_MODE (operands[2]) == CCXmode || GET_MODE (operands[2]) == CCXCmode)\"\n-  \"subxc\\t%1, -1, %0\"\n-  [(set_attr \"type\" \"ialuX\")])\n-\n (define_insn \"*subxc<W:mode>\"\n   [(set (match_operand:W 0 \"register_operand\" \"=r\")\n \t(minus:W (minus:W (match_operand:W 1 \"register_or_zero_operand\" \"rJ\")\n-\t\t\t  (match_operand:W 2 \"arith_operand\" \"rI\"))\n+\t\t\t  (match_operand:W 2 \"register_operand\" \"r\"))\n \t\t (ltu:W (match_operand 3 \"icc_register_operand\" \"X\")\n \t\t\t(const_int 0))))]\n   \"TARGET_ARCH64 && TARGET_SUBXC\n@@ -1316,11 +1223,6 @@\n \t&& (GET_MODE (operands[2]) == CCXmode\n \t    || GET_MODE (operands[2]) == CCXCmode)\n \t&& TARGET_VIS3)\n-   /* 64-bit GEU is better implemented using subxc with SUBXC.  */\n-   && !(GET_CODE (operands[1]) == GEU\n-\t&& (GET_MODE (operands[2]) == CCXmode\n-\t    || GET_MODE (operands[2]) == CCXCmode)\n-\t&& TARGET_SUBXC)\n    /* 32-bit LTU/GEU are better implemented using addx/subx.  */\n    && !((GET_CODE (operands[1]) == LTU || GET_CODE (operands[1]) == GEU)\n \t&& (GET_MODE (operands[2]) == CCmode"}, {"sha": "c0f20cd116629017c2bda6b8dc551f1579f09d95", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,3 +1,13 @@\n+2016-10-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/setcc-4.c: Adjust.\n+\t* gcc.target/sparc/setcc-5.c: Likewise.\n+\t* gcc.target/sparc/setcc-6.c: Likewise.\n+\t* gcc.target/sparc/setcc-7.c: Likewise.\n+\t* gcc.target/sparc/setcc-8.c: Likewise.\n+\t* gcc.target/sparc/setcc-9.c: Likewise.\n+\t* gcc.target/sparc/setcc-10.c: Delete.\n+\n 2016-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77942"}, {"sha": "7d75e48b74133d6bbb0c0f6973690e08eedcfa7b", "filename": "gcc/testsuite/gcc.target/sparc/setcc-10.c", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-10.c?ref=0a4613f0c53a129aedcc1296a031b761b444e5d8", "patch": "@@ -1,23 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -msubxc\" } */\n-\n-long foo2 (long a, long i)\n-{\n-  return a - (i != 0);\n-}\n-\n-long foo4 (long a, long b, long i)\n-{\n-  return a - b - (i != 0);\n-}\n-\n-long foo5 (long a, long i)\n-{\n-  return a + (i == 0);\n-}\n-\n-/* { dg-final { scan-assembler-times \"subxc\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"cmp\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-not \"add\\t%\" } } */\n-/* { dg-final { scan-assembler-not \"sub\\t%\" } } */"}, {"sha": "ffa4ee046c821d073e91aa9eba20bef425b44ca5", "filename": "gcc/testsuite/gcc.target/sparc/setcc-4.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-4.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,23 +1,44 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -msubxc\" } */\n+/* { dg-options \"-O1 -mno-vis3\" } */\n \n-int eq (long a, long b)\n+long neq (long a, long b)\n+{\n+  return a != b;\n+}\n+\n+long eq (long a, long b)\n {\n   return a == b;\n }\n \n-int ge (unsigned long a, unsigned long b)\n+long lt (unsigned long a, unsigned long b)\n {\n-  return a >= b;\n+  return a < b;\n }\n \n-int le (unsigned long a, unsigned long b)\n+long leq (unsigned long a, unsigned long b)\n {\n   return a <= b;\n }\n \n-/* { dg-final { scan-assembler \"xor\\t%\" } } */\n-/* { dg-final { scan-assembler-times \"subxc\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"cmp\\t%\" 3 } } */\n+long geq (unsigned long a, unsigned long b)\n+{\n+  return a >= b;\n+}\n+\n+long gt (unsigned long a, unsigned long b)\n+{\n+  return a > b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"xor\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\t%\" 4 } } */\n+/* { dg-final { scan-assembler-times \"movrne\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movre\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movlu\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movleu\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movgeu\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movgu\\t%\" 1 } } */\n /* { dg-final { scan-assembler-not \"sra\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"and\\t%\" } } */"}, {"sha": "5a6a0664c0de5d371e8834ff69b988789582f754", "filename": "gcc/testsuite/gcc.target/sparc/setcc-5.c", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-5.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,44 +1,24 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -mno-vis3 -mno-subxc\" } */\n+/* { dg-options \"-O1 -mvis3\" } */\n \n long neq (long a, long b)\n {\n   return a != b;\n }\n \n-long eq (long a, long b)\n-{\n-  return a == b;\n-}\n-\n long lt (unsigned long a, unsigned long b)\n {\n   return a < b;\n }\n \n-long leq (unsigned long a, unsigned long b)\n-{\n-  return a <= b;\n-}\n-\n-long geq (unsigned long a, unsigned long b)\n-{\n-  return a >= b;\n-}\n-\n long gt (unsigned long a, unsigned long b)\n {\n   return a > b;\n }\n \n-/* { dg-final { scan-assembler-times \"xor\\t%\" 2 } } */\n-/* { dg-final { scan-assembler-times \"cmp\\t%\" 4 } } */\n-/* { dg-final { scan-assembler-times \"movrne\\t%\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movre\\t%\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movlu\\t%\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movleu\\t%\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movgeu\\t%\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movgu\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"xor\\t%\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"addxc\\t%\" 3 } } */\n /* { dg-final { scan-assembler-not \"sra\\t%\" } } */\n /* { dg-final { scan-assembler-not \"and\\t%\" } } */"}, {"sha": "fa6587639f33babfe31d4d9f331437833e6008df", "filename": "gcc/testsuite/gcc.target/sparc/setcc-6.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-6.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,40 +1,38 @@\n /* { dg-do compile } */\n-/* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -mvis3 -msubxc\" } */\n+/* { dg-options \"-O1\" } */\n \n-long neq (long a, long b)\n+int foo1 (int a, int i)\n {\n-  return a != b;\n+  return a + (i != 0);\n }\n \n-long eq (long a, long b)\n+int foo2 (int a, int i)\n {\n-  return a == b;\n+  return a - (i != 0);\n }\n \n-long lt (unsigned long a, unsigned long b)\n+int foo3 (int a, int b, int i)\n {\n-  return a < b;\n+  return a + b + (i != 0);\n }\n \n-long leq (unsigned long a, unsigned long b)\n+int foo4 (int a, int b, int i)\n {\n-  return a <= b;\n+  return a - b - (i != 0);\n }\n \n-long geq (unsigned long a, unsigned long b)\n+int foo5 (int a, int i)\n {\n-  return a >= b;\n+  return a + (i == 0);\n }\n \n-long gt (unsigned long a, unsigned long b)\n+int foo6 (int a, int i)\n {\n-  return a > b;\n+  return a - (i == 0);\n }\n \n-/* { dg-final { scan-assembler-times \"xor\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"addx\\t%\" 3 } } */\n+/* { dg-final { scan-assembler-times \"subx\\t%\" 3 } } */\n /* { dg-final { scan-assembler-times \"cmp\\t%\" 6 } } */\n-/* { dg-final { scan-assembler-times \"addxc\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"subxc\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-not \"sra\\t%\" } } */\n-/* { dg-final { scan-assembler-not \"and\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"add\\t%\" } } */\n+/* { dg-final { scan-assembler-not \"sub\\t%\" } } */"}, {"sha": "4ec5be28731da5dd1b267572c5d696947f42d873", "filename": "gcc/testsuite/gcc.target/sparc/setcc-7.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-7.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,32 +1,33 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1\" } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O1 -mno-vis3\" } */\n \n-int foo1 (int a, int i)\n+long foo1 (long a, int i)\n {\n   return a + (i != 0);\n }\n \n-int foo2 (int a, int i)\n+long foo2 (long a, int i)\n {\n   return a - (i != 0);\n }\n \n-int foo3 (int a, int b, int i)\n+long foo3 (long a, long b, int i)\n {\n   return a + b + (i != 0);\n }\n \n-int foo4 (int a, int b, int i)\n+long foo4 (long a, long b, int i)\n {\n   return a - b - (i != 0);\n }\n \n-int foo5 (int a, int i)\n+long foo5 (long a, int i)\n {\n   return a + (i == 0);\n }\n \n-int foo6 (int a, int i)\n+long foo6 (long a, int i)\n {\n   return a - (i == 0);\n }"}, {"sha": "4e0e5929696f6a41d5b075407e08db8be18d8562", "filename": "gcc/testsuite/gcc.target/sparc/setcc-8.c", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-8.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,39 +1,17 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -mno-vis3 -mno-subxc\" } */\n+/* { dg-options \"-O1 -mvis3\" } */\n \n-long foo1 (long a, int i)\n+long foo1 (long a, long i)\n {\n   return a + (i != 0);\n }\n \n-long foo2 (long a, int i)\n-{\n-  return a - (i != 0);\n-}\n-\n-long foo3 (long a, long b, int i)\n+long foo3 (long a, long b, long i)\n {\n   return a + b + (i != 0);\n }\n \n-long foo4 (long a, long b, int i)\n-{\n-  return a - b - (i != 0);\n-}\n-\n-long foo5 (long a, int i)\n-{\n-  return a + (i == 0);\n-}\n-\n-long foo6 (long a, int i)\n-{\n-  return a - (i == 0);\n-}\n-\n-/* { dg-final { scan-assembler-times \"addx\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"subx\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"cmp\\t%\" 6 } } */\n+/* { dg-final { scan-assembler-times \"addxc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\t%\" 2 } } */\n /* { dg-final { scan-assembler-not \"add\\t%\" } } */\n-/* { dg-final { scan-assembler-not \"sub\\t%\" } } */"}, {"sha": "201e7e452871ad8c62acf3389bc20b8ddbd3f275", "filename": "gcc/testsuite/gcc.target/sparc/setcc-9.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4803de58c5fc0f260fe63cedbdfcd4091d136fbf/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsetcc-9.c?ref=4803de58c5fc0f260fe63cedbdfcd4091d136fbf", "patch": "@@ -1,23 +1,17 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target lp64 } */\n-/* { dg-options \"-O1 -mvis3\" } */\n+/* { dg-options \"-O1 -msubxc\" } */\n \n-long foo1 (long a, long i)\n+long foo2 (long a, long i)\n {\n-  return a + (i != 0);\n+  return a - (i != 0);\n }\n \n-long foo3 (long a, long b, long i)\n+long foo4 (long a, long b, long i)\n {\n-  return a + b + (i != 0);\n+  return a - b - (i != 0);\n }\n \n-long foo6 (long a, long i)\n-{\n-  return a - (i == 0);\n-}\n-\n-/* { dg-final { scan-assembler-times \"addxc\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-times \"cmp\\t%\" 3 } } */\n-/* { dg-final { scan-assembler-not \"add\\t%\" } } */\n+/* { dg-final { scan-assembler-times \"subxc\\t%\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cmp\\t%\" 2 } } */\n /* { dg-final { scan-assembler-not \"sub\\t%\" } } */"}]}