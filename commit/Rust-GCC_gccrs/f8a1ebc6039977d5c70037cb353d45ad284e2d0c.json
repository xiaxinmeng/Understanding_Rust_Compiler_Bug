{"sha": "f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhhMWViYzYwMzk5NzdkNWM3MDAzN2NiMzUzZDQ1YWQyODRlMmQwYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-10-30T21:01:16Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-10-30T21:01:16Z"}, "message": "real.c (encode_ieee_extended): Initialize whole array.\n\n\t* real.c (encode_ieee_extended): Initialize whole array.\n\t* reg-stack.c (move_for_stack_reg0: Use always XFmode.\n\t* i386-modes.def: Change definitions of TFmode and XFmode.\n\t* i386.c (classify_argument): Rename TFmodes to XFmodes; add new TFmode code.\n\t(construct_container): Allow constructing of TFmode integer containers.\n\t(ix86_return_in_memory):  XFmode is not returned in memory.\n\t(init_ext_80387_constants): Always use XFmode.\n\t(print_operand): Likewise.\n\t(ix86_prepare_fp_compare_regs): Likewise.\n\t(split_to_parts): Deal with TFmode.\n\t(split_long_move): Simplify.\n\t(ix86_init_mmx_sse_builtins): Add __float80, __float128.\n\t(ix86_memory_move_cost): Do not confuse TFmode.\n\t* i386.h (LONG_DOUBLE_TYPE_SIZE): Set to 96.\n\t(IS_STACK_MODE): TFmode is not stack mode.\n\t(HARD_REGNO_NREGS, CLASS_MAX_NREGS): Deal nicely with XFmode.\n\t(VALID_SSE_REG_MODE): Allow TFmode.\n\t(VALID_FP_MODE_P): Disallow TFmode.\n\t(VALID_INT_MODE_P): Allow TFmode in 64bit mode.\n\t* i386.md (TFmode patterns): Kill.\n\t(movtf, motf_rex64): New patterns.\n\nFrom-SVN: r73099", "tree": {"sha": "ede68b7323ca8991abd129b1643a69b031ebe28a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ede68b7323ca8991abd129b1643a69b031ebe28a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/comments", "author": null, "committer": null, "parents": [{"sha": "27eb8ab1456ca2f458afad757bcdc3993b2b3157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eb8ab1456ca2f458afad757bcdc3993b2b3157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eb8ab1456ca2f458afad757bcdc3993b2b3157"}], "stats": {"total": 1431, "additions": 281, "deletions": 1150}, "files": [{"sha": "63738b63ffd1b29248cf55068e124518c0f18d44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -1,3 +1,27 @@\n+2003-10-30  Jan Hubicka  <jh@suse.cz>\n+\n+\t* real.c (encode_ieee_extended): Initialize whole array.\n+\t* reg-stack.c (move_for_stack_reg0: Use always XFmode.\n+\t* i386-modes.def: Change definitions of TFmode and XFmode.\n+\t* i386.c (classify_argument): Rename TFmodes to XFmodes; add new TFmode code.\n+\t(construct_container): Allow constructing of TFmode integer containers.\n+\t(ix86_return_in_memory):  XFmode is not returned in memory.\n+\t(init_ext_80387_constants): Always use XFmode.\n+\t(print_operand): Likewise.\n+\t(ix86_prepare_fp_compare_regs): Likewise.\n+\t(split_to_parts): Deal with TFmode.\n+\t(split_long_move): Simplify.\n+\t(ix86_init_mmx_sse_builtins): Add __float80, __float128.\n+\t(ix86_memory_move_cost): Do not confuse TFmode.\n+\t* i386.h (LONG_DOUBLE_TYPE_SIZE): Set to 96.\n+\t(IS_STACK_MODE): TFmode is not stack mode.\n+\t(HARD_REGNO_NREGS, CLASS_MAX_NREGS): Deal nicely with XFmode.\n+\t(VALID_SSE_REG_MODE): Allow TFmode.\n+\t(VALID_FP_MODE_P): Disallow TFmode.\n+\t(VALID_INT_MODE_P): Allow TFmode in 64bit mode.\n+\t* i386.md (TFmode patterns): Kill.\n+\t(movtf, motf_rex64): New patterns.\n+\n 2003-10-30  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md (adddi3): Fix typo in mips16 stack pointer code."}, {"sha": "9f52f7f0b1b7eef8a47cbc6e1093936943fadd4f", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -18,11 +18,18 @@ along with GCC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* By default our XFmode is the 80-bit extended format.  If we use\n-   TFmode instead, it's also the 80-bit format, but with padding. */\n+/* x86_64 ABI specifies both XF and TF modes.\n+   XFmode is __float80 is IEEE extended; TFmode is __float128\n+   is IEEE quad.\n+\n+   IEEE extended is 128 bits wide, except in ILP32 mode, but we\n+   have to say it's 12 bytes so that the bitsize and wider_mode\n+   tables are correctly set up.  We correct its size below.  */\n \n FLOAT_MODE (XF, 12, ieee_extended_intel_96_format);\n-FLOAT_MODE (TF, 16, ieee_extended_intel_128_format);\n+ADJUST_BYTESIZE  (XF, TARGET_128BIT_LONG_DOUBLE ? 16 : 12);\n+ADJUST_ALIGNMENT (XF, TARGET_128BIT_LONG_DOUBLE ? 16 : 4);\n+FLOAT_MODE (TF, 16, ieee_quad_format);\n \n /* Add any extra modes needed to represent the condition code.\n "}, {"sha": "a42f1746317a1531e6d8a6538a3188c0d569520e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 80, "deletions": 36, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -1374,6 +1374,7 @@ override_options (void)\n   if (TARGET_SSE2)\n     target_flags |= MASK_SSE;\n \n+      target_flags |= (MASK_128BIT_LONG_DOUBLE);\n   if (TARGET_64BIT)\n     {\n       if (TARGET_ALIGN_DOUBLE)\n@@ -2182,6 +2183,7 @@ classify_argument (enum machine_mode mode, tree type,\n       return 1;\n     case CDImode:\n     case TImode:\n+    case TCmode:\n       classes[0] = classes[1] = X86_64_INTEGER_CLASS;\n       return 2;\n     case CTImode:\n@@ -2197,11 +2199,15 @@ classify_argument (enum machine_mode mode, tree type,\n     case DFmode:\n       classes[0] = X86_64_SSEDF_CLASS;\n       return 1;\n-    case TFmode:\n+    case XFmode:\n       classes[0] = X86_64_X87_CLASS;\n       classes[1] = X86_64_X87UP_CLASS;\n       return 2;\n-    case TCmode:\n+    case TFmode:\n+      classes[0] = X86_64_INTEGER_CLASS;\n+      classes[1] = X86_64_INTEGER_CLASS;\n+      return 2;\n+    case XCmode:\n       classes[0] = X86_64_X87_CLASS;\n       classes[1] = X86_64_X87UP_CLASS;\n       classes[2] = X86_64_X87_CLASS;\n@@ -2338,16 +2344,16 @@ construct_container (enum machine_mode mode, tree type, int in_return,\n     return gen_rtx_REG (mode, SSE_REGNO (sse_regno));\n   if (n == 2\n       && class[0] == X86_64_X87_CLASS && class[1] == X86_64_X87UP_CLASS)\n-    return gen_rtx_REG (TFmode, FIRST_STACK_REG);\n+    return gen_rtx_REG (XFmode, FIRST_STACK_REG);\n   if (n == 2 && class[0] == X86_64_INTEGER_CLASS\n       && class[1] == X86_64_INTEGER_CLASS\n-      && (mode == CDImode || mode == TImode)\n+      && (mode == CDImode || mode == TImode || mode == TFmode)\n       && intreg[0] + 1 == intreg[1])\n     return gen_rtx_REG (mode, intreg[0]);\n   if (n == 4\n       && class[0] == X86_64_X87_CLASS && class[1] == X86_64_X87UP_CLASS\n       && class[2] == X86_64_X87_CLASS && class[3] == X86_64_X87UP_CLASS)\n-    return gen_rtx_REG (TCmode, FIRST_STACK_REG);\n+    return gen_rtx_REG (XCmode, FIRST_STACK_REG);\n \n   /* Otherwise figure out the entries of the PARALLEL.  */\n   for (i = 0; i < n; i++)\n@@ -2779,8 +2785,9 @@ ix86_return_in_memory (tree type)\n \t}\n     }\n \n-  if (mode == TFmode)\n+  if (mode == TFmode || mode == XFmode)\n     return 0;\n+\n   if (size > 12)\n     return 1;\n   return 0;\n@@ -2795,20 +2802,35 @@ ix86_libcall_value (enum machine_mode mode)\n     {\n       switch (mode)\n \t{\n-\t  case SFmode:\n-\t  case SCmode:\n-\t  case DFmode:\n-\t  case DCmode:\n-\t    return gen_rtx_REG (mode, FIRST_SSE_REG);\n-\t  case TFmode:\n-\t  case TCmode:\n-\t    return gen_rtx_REG (mode, FIRST_FLOAT_REG);\n-\t  default:\n-\t    return gen_rtx_REG (mode, 0);\n+\tcase SFmode:\n+\tcase SCmode:\n+\tcase DFmode:\n+\tcase DCmode:\n+\t  return gen_rtx_REG (mode, FIRST_SSE_REG);\n+\tcase XFmode:\n+\tcase XCmode:\n+\t  return gen_rtx_REG (mode, FIRST_FLOAT_REG);\n+\tcase TFmode:\n+\t  {\n+\t    rtx ret = gen_rtx_PARALLEL (mode, rtvec_alloc (2));\n+\t    XVECEXP (ret, 0, 0) = gen_rtx_EXPR_LIST\n+\t       (VOIDmode,\n+\t\tgen_rtx_REG (DImode, x86_64_int_parameter_registers [0]),\n+\t\t\t     const0_rtx);\n+\t    XVECEXP (ret, 0, 1) = gen_rtx_EXPR_LIST\n+\t       (VOIDmode,\n+\t\tgen_rtx_REG (DImode, x86_64_int_parameter_registers [1]),\n+\t\t\t     GEN_INT (64));\n+\t    return ret;\n+\t  }\n+\tcase TCmode:\n+\t  return NULL;\n+\tdefault:\n+\t  return gen_rtx_REG (mode, 0);\n \t}\n     }\n   else\n-   return gen_rtx_REG (mode, ix86_value_regno (mode));\n+    return gen_rtx_REG (mode, ix86_value_regno (mode));\n }\n \n /* Given a mode, return the register to use for a return value.  */\n@@ -4257,8 +4279,7 @@ init_ext_80387_constants (void)\n       real_from_string (&ext_80387_constants_table[i], cst[i]);\n       /* Ensure each constant is rounded to XFmode precision.  */\n       real_convert (&ext_80387_constants_table[i],\n-\t\t    TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode,\n-\t\t    &ext_80387_constants_table[i]);\n+\t\t    XFmode, &ext_80387_constants_table[i]);\n     }\n \n   ext_80387_constants_init = 1;\n@@ -4280,7 +4301,7 @@ standard_80387_constant_p (rtx x)\n \n   /* For XFmode constants, try to find a special 80387 instruction on\n      those CPUs that benefit from them.  */\n-  if ((GET_MODE (x) == XFmode || GET_MODE (x) == TFmode)\n+  if (GET_MODE (x) == XFmode\n       && x86_ext_80387_constants & TUNEMASK)\n     {\n       REAL_VALUE_TYPE r;\n@@ -4351,7 +4372,7 @@ standard_80387_constant_rtx (int idx)\n     }\n \n   return CONST_DOUBLE_FROM_REAL_VALUE (ext_80387_constants_table[i],\n-\t\t\t\t       TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode);\n+\t\t\t\t       XFmode);\n }\n \n /* Return 1 if X is FP constant we can load to SSE register w/o using memory.\n@@ -7450,7 +7471,7 @@ print_operand (FILE *file, rtx x, int code)\n     }\n \n   else if (GET_CODE (x) == CONST_DOUBLE\n-\t   && (GET_MODE (x) == XFmode || GET_MODE (x) == TFmode))\n+\t   && GET_MODE (x) == XFmode)\n     {\n       char dstr[30];\n \n@@ -8690,7 +8711,6 @@ ix86_prepare_fp_compare_args (enum rtx_code code, rtx *pop0, rtx *pop1)\n   if (!is_sse\n       && (fpcmp_mode == CCFPUmode\n \t  || op_mode == XFmode\n-\t  || op_mode == TFmode\n \t  || ix86_use_fcomi_compare (code)))\n     {\n       op0 = force_reg (op_mode, op0);\n@@ -9165,7 +9185,6 @@ ix86_expand_branch (enum rtx_code code, rtx label)\n     case SFmode:\n     case DFmode:\n     case XFmode:\n-    case TFmode:\n       {\n \trtvec vec;\n \tint use_fcomi;\n@@ -10356,7 +10375,7 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n   int size;\n \n   if (!TARGET_64BIT)\n-    size = mode == TFmode ? 3 : (GET_MODE_SIZE (mode) / 4);\n+    size = mode==XFmode ? 3 : GET_MODE_SIZE (mode) / 4;\n   else\n     size = (GET_MODE_SIZE (mode) + 4) / 8;\n \n@@ -10416,7 +10435,6 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n \t      switch (mode)\n \t\t{\n \t\tcase XFmode:\n-\t\tcase TFmode:\n \t\t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (r, l);\n \t\t  parts[2] = gen_int_mode (l[2], SImode);\n \t\t  break;\n@@ -10439,18 +10457,19 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n \tsplit_ti (&operand, 1, &parts[0], &parts[1]);\n       if (mode == XFmode || mode == TFmode)\n \t{\n+\t  enum machine_mode upper_mode = mode==XFmode ? SImode : DImode;\n \t  if (REG_P (operand))\n \t    {\n \t      if (!reload_completed)\n \t\tabort ();\n \t      parts[0] = gen_rtx_REG (DImode, REGNO (operand) + 0);\n-\t      parts[1] = gen_rtx_REG (SImode, REGNO (operand) + 1);\n+\t      parts[1] = gen_rtx_REG (upper_mode, REGNO (operand) + 1);\n \t    }\n \t  else if (offsettable_memref_p (operand))\n \t    {\n \t      operand = adjust_address (operand, DImode, 0);\n \t      parts[0] = operand;\n-\t      parts[1] = adjust_address (operand, SImode, 8);\n+\t      parts[1] = adjust_address (operand, upper_mode, 8);\n \t    }\n \t  else if (GET_CODE (operand) == CONST_DOUBLE)\n \t    {\n@@ -10468,7 +10487,16 @@ ix86_split_to_parts (rtx operand, rtx *parts, enum machine_mode mode)\n \t\t       DImode);\n \t      else\n \t        parts[0] = immed_double_const (l[0], l[1], DImode);\n-\t      parts[1] = gen_int_mode (l[2], SImode);\n+\t      if (upper_mode == SImode)\n+\t        parts[1] = gen_int_mode (l[2], SImode);\n+\t      else if (HOST_BITS_PER_WIDE_INT >= 64)\n+\t        parts[1]\n+\t\t  = gen_int_mode\n+\t\t      ((l[2] & (((HOST_WIDE_INT) 2 << 31) - 1))\n+\t\t       + ((((HOST_WIDE_INT) l[3]) << 31) << 1),\n+\t\t       DImode);\n+\t      else\n+\t        parts[1] = immed_double_const (l[2], l[3], DImode);\n \t    }\n \t  else\n \t    abort ();\n@@ -10589,12 +10617,8 @@ ix86_split_long_move (rtx operands[])\n \t{\n \t  if (nparts == 3)\n \t    {\n-\t      /* We use only first 12 bytes of TFmode value, but for pushing we\n-\t\t are required to adjust stack as if we were pushing real 16byte\n-\t\t value.  */\n-\t      if (mode == TFmode && !TARGET_64BIT)\n-\t\temit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n-\t\t\t\t       GEN_INT (-4)));\n+\t      if (TARGET_128BIT_LONG_DOUBLE && mode == XFmode)\n+                emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx, GEN_INT (-4)));\n \t      emit_move_insn (part[0][2], part[1][2]);\n \t    }\n \t}\n@@ -13305,6 +13329,27 @@ ix86_init_mmx_sse_builtins (void)\n   tree v2di_ftype_v2di\n     = build_function_type_list (V2DI_type_node, V2DI_type_node, NULL_TREE);\n \n+  tree float80_type;\n+  tree float128_type;\n+\n+  /* The __float80 type.  */\n+  if (TYPE_MODE (long_double_type_node) == XFmode)\n+    (*lang_hooks.types.register_builtin_type) (long_double_type_node,\n+\t\t\t\t\t       \"__float80\");\n+  else\n+    {\n+      /* The __float80 type.  */\n+      float80_type = make_node (REAL_TYPE);\n+      TYPE_PRECISION (float80_type) = 96;\n+      layout_type (float80_type);\n+      (*lang_hooks.types.register_builtin_type) (float80_type, \"__float80\");\n+    }\n+\n+  float128_type = make_node (REAL_TYPE);\n+  TYPE_PRECISION (float128_type) = 128;\n+  layout_type (float128_type);\n+  (*lang_hooks.types.register_builtin_type) (float128_type, \"__float128\");\n+\n   /* Add all builtins that are more or less simple operations on two\n      operands.  */\n   for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n@@ -14745,7 +14790,6 @@ ix86_memory_move_cost (enum machine_mode mode, enum reg_class class, int in)\n \t    index = 1;\n \t    break;\n \t  case XFmode:\n-\t  case TFmode:\n \t    index = 2;\n \t    break;\n \t  default:"}, {"sha": "24a234172efa4918be8bc1a776aa510ddea34f7f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -721,16 +721,7 @@ extern int x86_prefetch_sse;\n \f\n /* target machine storage layout */\n \n-/* Define for XFmode or TFmode extended real floating point support.\n-   The XFmode is specified by i386 ABI, while TFmode may be faster\n-   due to alignment and simplifications in the address calculations.  */\n-#define LONG_DOUBLE_TYPE_SIZE (TARGET_128BIT_LONG_DOUBLE ? 128 : 96)\n-#define MAX_LONG_DOUBLE_TYPE_SIZE 128\n-#ifdef __x86_64__\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 128\n-#else\n-#define LIBGCC2_LONG_DOUBLE_TYPE_SIZE 96\n-#endif\n+#define LONG_DOUBLE_TYPE_SIZE 96\n \n /* Set the value of FLT_EVAL_METHOD in float.h.  When using only the\n    FPU, assume that the fpcw is set to extended precision; when using\n@@ -900,8 +891,7 @@ extern int x86_prefetch_sse;\n \n #define STACK_REGS\n #define IS_STACK_MODE(MODE)\t\t\t\t\t\\\n-  ((MODE) == DFmode || (MODE) == SFmode || (MODE) == XFmode\t\\\n-   || (MODE) == TFmode)\n+  ((MODE) == DFmode || (MODE) == SFmode || (MODE) == XFmode)\t\\\n \n /* Number of actual hardware registers.\n    The hardware registers are assigned numbers for the compiler\n@@ -1049,9 +1039,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n   (FP_REGNO_P (REGNO) || SSE_REGNO_P (REGNO) || MMX_REGNO_P (REGNO)\t\\\n    ? (COMPLEX_MODE_P (MODE) ? 2 : 1)\t\t\t\t\t\\\n-   : ((MODE) == TFmode\t\t\t\t\t\t\t\\\n+   : ((MODE) == XFmode\t\t\t\t\t\t\t\\\n       ? (TARGET_64BIT ? 2 : 3)\t\t\t\t\t\t\\\n-      : (MODE) == TCmode\t\t\t\t\t\t\\\n+      : (MODE) == XCmode\t\t\t\t\t\t\\\n       ? (TARGET_64BIT ? 4 : 6)\t\t\t\t\t\t\\\n       : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)))\n \n@@ -1061,7 +1051,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n     ((MODE) == TImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\\\n-     || (MODE) == SFmode\t\t\t\t\t\t\\\n+     || (MODE) == SFmode || (MODE) == TFmode\t\t\t\t\\\n      /* Always accept SSE2 modes so that xmmintrin.h compiles.  */\t\\\n      || VALID_SSE2_REG_MODE (MODE)\t\t\t\t\t\\\n      || (TARGET_SSE2 && ((MODE) == DFmode || VALID_MMX_REG_MODE (MODE))))\n@@ -1079,21 +1069,20 @@ do {\t\t\t\t\t\t\t\t\t\\\n      : VALID_MMX_REG_MODE_3DNOW (MODE) && TARGET_3DNOW ? 1 : 0)\n \n #define VALID_FP_MODE_P(MODE)\t\t\t\t\t\t\\\n-    ((MODE) == SFmode || (MODE) == DFmode || (MODE) == TFmode\t\t\\\n-     || (!TARGET_64BIT && (MODE) == XFmode)\t\t\t\t\\\n-     || (MODE) == SCmode || (MODE) == DCmode || (MODE) == TCmode\t\\\n-     || (!TARGET_64BIT && (MODE) == XCmode))\n+    ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\t\\\n+     || (MODE) == SCmode || (MODE) == DCmode || (MODE) == XCmode)\t\\\n \n #define VALID_INT_MODE_P(MODE)\t\t\t\t\t\t\\\n     ((MODE) == QImode || (MODE) == HImode || (MODE) == SImode\t\t\\\n      || (MODE) == DImode\t\t\t\t\t\t\\\n      || (MODE) == CQImode || (MODE) == CHImode || (MODE) == CSImode\t\\\n      || (MODE) == CDImode\t\t\t\t\t\t\\\n-     || (TARGET_64BIT && ((MODE) == TImode || (MODE) == CTImode)))\n+     || (TARGET_64BIT && ((MODE) == TImode || (MODE) == CTImode\t\t\\\n+         || (MODE) == TFmode || (MODE) == TCmode)))\n \n /* Return true for modes passed in SSE registers.  */\n #define SSE_REG_MODE_P(MODE) \\\n- ((MODE) == TImode || (MODE) == V16QImode\t\t\t\t\\\n+ ((MODE) == TImode || (MODE) == V16QImode || (MODE) == TFmode\t\t\\\n    || (MODE) == V8HImode || (MODE) == V2DFmode || (MODE) == V2DImode\t\\\n    || (MODE) == V4SFmode || (MODE) == V4SImode)\n \n@@ -1568,15 +1557,12 @@ enum reg_class\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n /* On the 80386, this is the size of MODE in words,\n-   except in the FP regs, where a single reg is always enough.\n-   The TFmodes are really just 80bit values, so we use only 3 registers\n-   to hold them, instead of 4, as the size would suggest.\n- */\n+   except in the FP regs, where a single reg is always enough.  */\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n  (!MAYBE_INTEGER_CLASS_P (CLASS)\t\t\t\t\t\\\n   ? (COMPLEX_MODE_P (MODE) ? 2 : 1)\t\t\t\t\t\\\n-  : ((GET_MODE_SIZE ((MODE) == TFmode ? XFmode : (MODE))\t\t\\\n-     + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+  : (((((MODE) == XFmode ? 12 : GET_MODE_SIZE (MODE)))\t\t\t\\\n+      + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* A C expression whose value is nonzero if pseudos that have been\n    assigned to registers of class CLASS would likely be spilled"}, {"sha": "4ef4124c904b851caf7b837e0d7d0fe121a03d37", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 147, "deletions": 1079, "changes": 1226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -716,17 +716,6 @@\n   [(set (reg:CC 17)\n \t(compare:CC (match_operand:XF 0 \"cmp_fp_expander_operand\" \"\")\n \t\t    (match_operand:XF 1 \"cmp_fp_expander_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-{\n-  ix86_compare_op0 = operands[0];\n-  ix86_compare_op1 = operands[1];\n-  DONE;\n-})\n-\n-(define_expand \"cmptf\"\n-  [(set (reg:CC 17)\n-\t(compare:CC (match_operand:TF 0 \"cmp_fp_expander_operand\" \"\")\n-\t\t    (match_operand:TF 1 \"cmp_fp_expander_operand\" \"\")))]\n   \"TARGET_80387\"\n {\n   ix86_compare_op0 = operands[0];\n@@ -850,16 +839,6 @@\n \t(compare:CCFP\n \t  (match_operand:XF 0 \"register_operand\" \"f\")\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"* return output_fp_compare (insn, operands, 0, 0);\"\n-  [(set_attr \"type\" \"fcmp\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*cmpfp_2_tf\"\n-  [(set (reg:CCFP 18)\n-\t(compare:CCFP\n-\t  (match_operand:TF 0 \"register_operand\" \"f\")\n-\t  (match_operand:TF 1 \"register_operand\" \"f\")))]\n   \"TARGET_80387\"\n   \"* return output_fp_compare (insn, operands, 0, 0);\"\n   [(set_attr \"type\" \"fcmp\")\n@@ -872,18 +851,6 @@\n \t     (match_operand:XF 1 \"register_operand\" \"f\")\n \t     (match_operand:XF 2 \"register_operand\" \"f\"))]\n \t  UNSPEC_FNSTSW))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"* return output_fp_compare (insn, operands, 2, 0);\"\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*cmpfp_2_tf_1\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=a\")\n-\t(unspec:HI\n-\t  [(compare:CCFP\n-\t     (match_operand:TF 1 \"register_operand\" \"f\")\n-\t     (match_operand:TF 2 \"register_operand\" \"f\"))]\n-\t  UNSPEC_FNSTSW))]\n   \"TARGET_80387\"\n   \"* return output_fp_compare (insn, operands, 2, 0);\"\n   [(set_attr \"type\" \"multi\")\n@@ -2744,14 +2711,8 @@\n (define_expand \"movxf\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:XF 1 \"general_operand\" \"\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE\"\n-  \"ix86_expand_move (XFmode, operands); DONE;\")\n-\n-(define_expand \"movtf\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TF 1 \"general_operand\" \"\"))]\n   \"\"\n-  \"ix86_expand_move (TFmode, operands); DONE;\")\n+  \"ix86_expand_move (XFmode, operands); DONE;\")\n \n ;; Size of pushdf is 3 (for sub) + 2 (for fstp) + memory operand size.\n ;; Size of pushdf using integer instructions is 3+3*memory operand size\n@@ -2763,17 +2724,6 @@\n (define_insn \"*pushxf_nointeger\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=X,X,X\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && optimize_size\"\n-{\n-  /* This insn should be already splitted before reg-stack.  */\n-  abort ();\n-}\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"XF,SI,SI\")])\n-\n-(define_insn \"*pushtf_nointeger\"\n-  [(set (match_operand:TF 0 \"push_operand\" \"=<,<,<\")\n-\t(match_operand:TF 1 \"general_no_elim_operand\" \"f,Fo,*r\"))]\n   \"optimize_size\"\n {\n   /* This insn should be already splitted before reg-stack.  */\n@@ -2785,17 +2735,6 @@\n (define_insn \"*pushxf_integer\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n \t(match_operand:XF 1 \"general_no_elim_operand\" \"f#r,ro#f\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && !optimize_size\"\n-{\n-  /* This insn should be already splitted before reg-stack.  */\n-  abort ();\n-}\n-  [(set_attr \"type\" \"multi\")\n-   (set_attr \"mode\" \"XF,SI\")])\n-\n-(define_insn \"*pushtf_integer\"\n-  [(set (match_operand:TF 0 \"push_operand\" \"=<,<\")\n-\t(match_operand:TF 1 \"general_no_elim_operand\" \"f#r,rFo#f\"))]\n   \"!optimize_size\"\n {\n   /* This insn should be already splitted before reg-stack.  */\n@@ -2809,7 +2748,6 @@\n \t(match_operand 1 \"general_operand\" \"\"))]\n   \"reload_completed\n    && (GET_MODE (operands[0]) == XFmode\n-       || GET_MODE (operands[0]) == TFmode\n        || GET_MODE (operands[0]) == DFmode)\n    && !ANY_FP_REG_P (operands[1])\"\n   [(const_int 0)]\n@@ -2818,30 +2756,24 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n-   (set (mem:XF (reg:SI 7)) (match_dup 1))])\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(match_operand:TF 1 \"any_fp_register_operand\" \"\"))]\n   \"!TARGET_64BIT\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:TF (reg:SI 7)) (match_dup 1))])\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (match_dup 2)))\n+   (set (mem:XF (reg:SI 7)) (match_dup 1))]\n+  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(match_operand:TF 1 \"any_fp_register_operand\" \"\"))]\n+  [(set (match_operand:XF 0 \"push_operand\" \"\")\n+\t(match_operand:XF 1 \"any_fp_register_operand\" \"\"))]\n   \"TARGET_64BIT\"\n-  [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n-   (set (mem:TF (reg:DI 7)) (match_dup 1))])\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (match_dup 2)))\n+   (set (mem:XF (reg:DI 7)) (match_dup 1))]\n+  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n ;; Do not use integer registers when optimizing for size\n (define_insn \"*movxf_nointeger\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,*r,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE\n-   && optimize_size\n+  \"optimize_size\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n@@ -2882,56 +2814,10 @@\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n    (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n \n-(define_insn \"*movtf_nointeger\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f,m,f,*r,o\")\n-\t(match_operand:TF 1 \"general_operand\" \"fm,f,G,*roF,F*r\"))]\n-  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && optimize_size\n-   && (reload_in_progress || reload_completed\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || memory_operand (operands[0], TFmode))\" \n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (REG_P (operands[1])\n-          && find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\t{\n-\t  if (REGNO (operands[0]) == FIRST_STACK_REG\n-\t      && TARGET_USE_FFREEP)\n-\t    return \"ffreep\\t%y0\";\n-          return \"fstp\\t%y0\";\n-\t}\n-      else if (STACK_TOP_P (operands[0]))\n-        return \"fld%z1\\t%y1\";\n-      else\n-        return \"fst\\t%y0\";\n-\n-    case 1:\n-      /* There is no non-popping store to memory for XFmode.  So if\n-\t we need one, follow the store with a load.  */\n-      if (! find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp%z0\\t%y0\\;fld%z0\\t%y0\";\n-      else\n-        return \"fstp%z0\\t%y0\";\n-\n-    case 2:\n-      return standard_80387_constant_opcode (operands[1]);\n-\n-    case 3: case 4:\n-      return \"#\";\n-    }\n-  abort();\n-}\n-  [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n-   (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n-\n (define_insn \"*movxf_integer\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,m,f#r,r#f,o\")\n \t(match_operand:XF 1 \"general_operand\" \"fm#r,f#r,G,roF#f,Fr#f\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE\n-   && !optimize_size\n+  \"!optimize_size\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n    && (reload_in_progress || reload_completed\n        || GET_CODE (operands[1]) != CONST_DOUBLE\n@@ -2972,57 +2858,12 @@\n   [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n    (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n \n-(define_insn \"*movtf_integer\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f#r,m,f#r,r#f,o\")\n-\t(match_operand:TF 1 \"general_operand\" \"fm#r,f#r,G,roF#f,Fr#f\"))]\n-  \"(GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && !optimize_size\n-   && (reload_in_progress || reload_completed\n-       || GET_CODE (operands[1]) != CONST_DOUBLE\n-       || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n-       || memory_operand (operands[0], TFmode))\" \n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (REG_P (operands[1])\n-          && find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\t{\n-\t  if (REGNO (operands[0]) == FIRST_STACK_REG\n-\t      && TARGET_USE_FFREEP)\n-\t    return \"ffreep\\t%y0\";\n-          return \"fstp\\t%y0\";\n-\t}\n-      else if (STACK_TOP_P (operands[0]))\n-        return \"fld%z1\\t%y1\";\n-      else\n-        return \"fst\\t%y0\";\n-\n-    case 1:\n-      /* There is no non-popping store to memory for XFmode.  So if\n-\t we need one, follow the store with a load.  */\n-      if (! find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp%z0\\t%y0\\;fld%z0\\t%y0\";\n-      else\n-        return \"fstp%z0\\t%y0\";\n-\n-    case 2:\n-      return standard_80387_constant_opcode (operands[1]);\n-\n-    case 3: case 4:\n-      return \"#\";\n-    }\n-  abort();\n-}\n-  [(set_attr \"type\" \"fmov,fmov,fmov,multi,multi\")\n-   (set_attr \"mode\" \"XF,XF,XF,SI,SI\")])\n-\n (define_split\n   [(set (match_operand 0 \"nonimmediate_operand\" \"\")\n \t(match_operand 1 \"general_operand\" \"\"))]\n   \"reload_completed\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\n-   && (GET_MODE (operands[0]) == XFmode || GET_MODE (operands[0]) == TFmode)\n+   && GET_MODE (operands[0]) == XFmode\n    && ! (ANY_FP_REG_P (operands[0]) || \n \t (GET_CODE (operands[0]) == SUBREG\n \t  && ANY_FP_REG_P (SUBREG_REG (operands[0]))))\n@@ -3037,7 +2878,7 @@\n \t(match_operand 1 \"memory_operand\" \"\"))]\n   \"reload_completed\n    && GET_CODE (operands[1]) == MEM\n-   && (GET_MODE (operands[0]) == XFmode || GET_MODE (operands[0]) == TFmode\n+   && (GET_MODE (operands[0]) == XFmode\n        || GET_MODE (operands[0]) == SFmode || GET_MODE (operands[0]) == DFmode)\n    && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF\n    && CONSTANT_POOL_ADDRESS_P (XEXP (operands[1], 0))\n@@ -3067,21 +2908,6 @@\n }\n   [(set_attr \"type\" \"fxch\")\n    (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"swaptf\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"+f\")\n-\t(match_operand:TF 1 \"register_operand\" \"+f\"))\n-   (set (match_dup 1)\n-\t(match_dup 0))]\n-  \"\"\n-{\n-  if (STACK_TOP_P (operands[0]))\n-    return \"fxch\\t%1\";\n-  else\n-    return \"fxch\\t%0\";\n-}\n-  [(set_attr \"type\" \"fxch\")\n-   (set_attr \"mode\" \"XF\")])\n \f\n ;; Zero extension instructions\n \n@@ -3632,62 +3458,34 @@\n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n-   (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n-\n-(define_insn \"*dummy_extendsftf2\"\n-  [(set (match_operand:TF 0 \"push_operand\" \"=<\")\n-\t(float_extend:TF (match_operand:SF 1 \"nonimmediate_operand\" \"f\")))]\n-  \"0\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_64BIT\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:TF (reg:SI 7)) (float_extend:TF (match_dup 1)))])\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (match_dup 2)))\n+   (set (mem:XF (reg:SI 7)) (float_extend:XF (match_dup 1)))]\n+  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n+  [(set (match_operand:XF 0 \"push_operand\" \"\")\n+\t(float_extend:XF (match_operand:SF 1 \"fp_register_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n-   (set (mem:DF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n-\n-(define_insn \"*dummy_extenddfxf2\"\n-  [(set (match_operand:XF 0 \"push_operand\" \"=<\")\n-\t(float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"f\")))]\n-  \"0\"\n-  \"#\")\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (match_dup 2)))\n+   (set (mem:DF (reg:DI 7)) (float_extend:XF (match_dup 1)))]\n+  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_split\n   [(set (match_operand:XF 0 \"push_operand\" \"\")\n \t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -12)))\n-   (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n-\n-(define_insn \"*dummy_extenddftf2\"\n-  [(set (match_operand:TF 0 \"push_operand\" \"=<\")\n-\t(float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"f\")))]\n-  \"0\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n-  \"!TARGET_64BIT\"\n-  [(set (reg:SI 7) (plus:SI (reg:SI 7) (const_int -16)))\n-   (set (mem:TF (reg:SI 7)) (float_extend:XF (match_dup 1)))])\n+  \"\"\n+  [(set (reg:SI 7) (plus:SI (reg:SI 7) (match_dup 2)))\n+   (set (mem:DF (reg:SI 7)) (float_extend:XF (match_dup 1)))]\n+  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_split\n-  [(set (match_operand:TF 0 \"push_operand\" \"\")\n-\t(float_extend:TF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n+  [(set (match_operand:XF 0 \"push_operand\" \"\")\n+\t(float_extend:XF (match_operand:DF 1 \"fp_register_operand\" \"\")))]\n   \"TARGET_64BIT\"\n-  [(set (reg:DI 7) (plus:DI (reg:DI 7) (const_int -16)))\n-   (set (mem:TF (reg:DI 7)) (float_extend:TF (match_dup 1)))])\n+  [(set (reg:DI 7) (plus:DI (reg:DI 7) (match_dup 2)))\n+   (set (mem:XF (reg:DI 7)) (float_extend:XF (match_dup 1)))]\n+  \"operands[2] = GEN_INT (TARGET_128BIT_LONG_DOUBLE ? -16 : -12);\")\n \n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n@@ -3747,7 +3545,7 @@\n (define_expand \"extendsfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:SF 1 \"general_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n@@ -3760,51 +3558,6 @@\n (define_insn \"*extendsfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (REG_P (operands[1])\n-          && find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp\\t%y0\";\n-      else if (STACK_TOP_P (operands[0]))\n-        return \"fld%z1\\t%y1\";\n-      else\n-        return \"fst\\t%y0\";\n-\n-    case 1:\n-      /* There is no non-popping store to memory for XFmode.  So if\n-\t we need one, follow the store with a load.  */\n-      if (! find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp%z0\\t%y0\\n\\tfld%z0\\t%y0\";\n-      else\n-        return \"fstp%z0\\t%y0\";\n-\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF,XF\")])\n-\n-(define_expand \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-        (float_extend:TF (match_operand:SF 1 \"general_operand\" \"\")))]\n-  \"TARGET_80387\"\n-{\n-  /* ??? Needed for compress_float_constant since all fp constants\n-     are LEGITIMATE_CONSTANT_P.  */\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    operands[1] = validize_mem (force_const_mem (SFmode, operands[1]));\n-  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n-    operands[1] = force_reg (SFmode, operands[1]);\n-})\n-\n-(define_insn \"*extendsftf2_1\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f,m\")\n-        (float_extend:TF (match_operand:SF 1 \"nonimmediate_operand\" \"fm,f\")))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n@@ -3837,7 +3590,7 @@\n (define_expand \"extenddfxf2\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n         (float_extend:XF (match_operand:DF 1 \"general_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n {\n   /* ??? Needed for compress_float_constant since all fp constants\n      are LEGITIMATE_CONSTANT_P.  */\n@@ -3850,51 +3603,6 @@\n (define_insn \"*extenddfxf2_1\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m\")\n         (float_extend:XF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n-   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (REG_P (operands[1])\n-          && find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp\\t%y0\";\n-      else if (STACK_TOP_P (operands[0]))\n-        return \"fld%z1\\t%y1\";\n-      else\n-        return \"fst\\t%y0\";\n-\n-    case 1:\n-      /* There is no non-popping store to memory for XFmode.  So if\n-\t we need one, follow the store with a load.  */\n-      if (! find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-        return \"fstp%z0\\t%y0\\n\\tfld%z0\\t%y0\";\n-      else\n-        return \"fstp%z0\\t%y0\";\n-\n-    default:\n-      abort ();\n-    }\n-}\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"DF,XF\")])\n-\n-(define_expand \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-        (float_extend:TF (match_operand:DF 1 \"general_operand\" \"\")))]\n-  \"TARGET_80387\"\n-{\n-  /* ??? Needed for compress_float_constant since all fp constants\n-     are LEGITIMATE_CONSTANT_P.  */\n-  if (GET_CODE (operands[1]) == CONST_DOUBLE)\n-    operands[1] = validize_mem (force_const_mem (DFmode, operands[1]));\n-  if (GET_CODE (operands[0]) == MEM && GET_CODE (operands[1]) == MEM)\n-    operands[1] = force_reg (DFmode, operands[1]);\n-})\n-\n-(define_insn \"*extenddftf2_1\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f,m\")\n-        (float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"fm,f\")))]\n   \"TARGET_80387\n    && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n {\n@@ -4169,15 +3877,15 @@\n \t\t   (float_truncate:SF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n \n (define_insn \"*truncxfsf2_1\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n    (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -4197,7 +3905,7 @@\n   [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:SF\n \t (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"fstp%z0\\t%y0\";\n@@ -4226,83 +3934,20 @@\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n-(define_expand \"trunctfsf2\"\n-  [(parallel [(set (match_operand:SF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (float_truncate:SF\n-\t\t    (match_operand:TF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))])]\n-  \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (SFmode, 0);\")\n-\n-(define_insn \"*trunctfsf2_1\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=m,?f#rx,?r#fx,?x#rf\")\n-\t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"f,f,f,f\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"TARGET_80387\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort();\n-    }\n-}\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*trunctfsf2_2\"\n-  [(set (match_operand:SF 0 \"memory_operand\" \"=m\")\n-\t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n-}\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"memory_operand\" \"\")\n-\t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387\"\n-  [(set (match_dup 0) (float_truncate:SF (match_dup 1)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(float_truncate:SF\n-\t (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 2) (float_truncate:SF (match_dup 1)))\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n-\n-\n (define_expand \"truncxfdf2\"\n   [(parallel [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n \t\t   (float_truncate:DF\n \t\t    (match_operand:XF 1 \"register_operand\" \"\")))\n \t      (clobber (match_dup 2))])]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n \n (define_insn \"*truncxfdf2_1\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")\n \t(float_truncate:DF\n \t (match_operand:XF 1 \"register_operand\" \"f,f,f,f\")))\n    (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n {\n   switch (which_alternative)\n     {\n@@ -4323,7 +3968,7 @@\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n \t(float_truncate:DF\n \t  (match_operand:XF 1 \"register_operand\" \"f\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n {\n   if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n     return \"fstp%z0\\t%y0\";\n@@ -4352,69 +3997,6 @@\n    (set (match_dup 0) (match_dup 2))]\n   \"\")\n \n-(define_expand \"trunctfdf2\"\n-  [(parallel [(set (match_operand:DF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (float_truncate:DF\n-\t\t    (match_operand:TF 1 \"register_operand\" \"\")))\n-\t      (clobber (match_dup 2))])]\n-  \"TARGET_80387\"\n-  \"operands[2] = assign_386_stack_local (DFmode, 0);\")\n-\n-(define_insn \"*trunctfdf2_1\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=m,?f#rY,?r#fY,?Y#rf\")\n-\t(float_truncate:DF\n-\t (match_operand:TF 1 \"register_operand\" \"f,f,f,f\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"=X,m,m,m\"))]\n-  \"TARGET_80387\"\n-{\n-  switch (which_alternative)\n-    {\n-    case 0:\n-      if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-\treturn \"fstp%z0\\t%y0\";\n-      else\n-\treturn \"fst%z0\\t%y0\";\n-    default:\n-      abort();\n-    }\n-  abort ();\n-}\n-  [(set_attr \"type\" \"fmov,multi,multi,multi\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-\t(define_insn \"*trunctfdf2_2\"\n-  [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n-\t(float_truncate:DF\n-\t  (match_operand:TF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_80387\"\n-{\n-  if (find_regno_note (insn, REG_DEAD, REGNO (operands[1])))\n-    return \"fstp%z0\\t%y0\";\n-  else\n-    return \"fst%z0\\t%y0\";\n-}\n-  [(set_attr \"type\" \"fmov\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"memory_operand\" \"\")\n-\t(float_truncate:DF\n-\t (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387\"\n-  [(set (match_dup 0) (float_truncate:DF (match_dup 1)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(float_truncate:DF\n-\t (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:DF 2 \"memory_operand\" \"\"))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 2) (float_truncate:DF (match_dup 1)))\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n-\n \f\n ;; %%% Break up all these bad boys.\n \n@@ -4423,12 +4005,6 @@\n (define_expand \"fix_truncxfdi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n         (fix:DI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"fix_trunctfdi2\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(fix:DI (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -4590,12 +4166,6 @@\n (define_expand \"fix_truncxfsi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(fix:SI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"fix_trunctfsi2\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(fix:SI (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -4751,12 +4321,6 @@\n (define_expand \"fix_truncxfhi2\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n         (fix:HI (match_operand:XF 1 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"fix_trunctfhi2\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"\")\n-\t(fix:HI (match_operand:TF 1 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -5103,17 +4667,6 @@\n (define_insn \"floathixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:HI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"@\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"fp_int_src\" \"true\")])\n-\n-(define_insn \"floathitf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(float:TF (match_operand:HI 1 \"nonimmediate_operand\" \"m,r\")))]\n   \"TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n@@ -5125,17 +4678,6 @@\n (define_insn \"floatsixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"@\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"fp_int_src\" \"true\")])\n-\n-(define_insn \"floatsitf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(float:TF (match_operand:SI 1 \"nonimmediate_operand\" \"m,r\")))]\n   \"TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n@@ -5147,17 +4689,6 @@\n (define_insn \"floatdixf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(float:XF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"@\n-   fild%z1\\t%1\n-   #\"\n-  [(set_attr \"type\" \"fmov,multi\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"fp_int_src\" \"true\")])\n-\n-(define_insn \"floatditf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(float:TF (match_operand:DI 1 \"nonimmediate_operand\" \"m,r\")))]\n   \"TARGET_80387\"\n   \"@\n    fild%z1\\t%1\n@@ -6858,13 +6389,6 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(plus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"addtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(plus:TF (match_operand:TF 1 \"register_operand\" \"\")\n-\t\t (match_operand:TF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -7211,13 +6735,6 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(minus:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t  (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"subtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(minus:TF (match_operand:TF 1 \"register_operand\" \"\")\n-\t\t  (match_operand:TF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -7729,13 +7246,6 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t (match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"multf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(mult:TF (match_operand:TF 1 \"register_operand\" \"\")\n-\t\t (match_operand:TF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -7783,13 +7293,6 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n \t(div:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t(match_operand:XF 2 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"\")\n-\n-(define_expand \"divtf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(div:TF (match_operand:TF 1 \"register_operand\" \"\")\n-\t\t(match_operand:TF 2 \"register_operand\" \"\")))]\n   \"TARGET_80387\"\n   \"\")\n \n@@ -10018,8 +9521,7 @@\n {\n   int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n \n-  /* XFmode's size is 12, TFmode 16, but only 10 bytes are used.  */\n-  if (size >= 12)\n+  if (GET_MODE (operands[1]) == XFmode)\n     size = 10;\n   operands[0] = adjust_address (operands[0], QImode, size - 1);\n   operands[1] = gen_int_mode (0x80, QImode);\n@@ -10196,15 +9698,8 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"ix86_expand_unary_operator (NEG, XFmode, operands); DONE;\")\n-\n-(define_expand \"negtf2\"\n-  [(parallel [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (neg:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")))\n-\t      (clobber (reg:CC 17))])]\n   \"TARGET_80387\"\n-  \"ix86_expand_unary_operator (NEG, TFmode, operands); DONE;\")\n+  \"ix86_expand_unary_operator (NEG, XFmode, operands); DONE;\")\n \n ;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n ;; because of secondary memory needed to reload from class FLOAT_INT_REGS\n@@ -10213,7 +9708,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n+  \"TARGET_80387\n    && ix86_unary_operator_ok (NEG, XFmode, operands)\"\n   \"#\")\n \n@@ -10237,36 +9732,6 @@\n    operands[0] = gen_rtx_REG (SImode,\n \t\t\t      true_regnum (operands[0]) + (TARGET_64BIT ? 1 : 2));\")\n \n-;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n-;; because of secondary memory needed to reload from class FLOAT_INT_REGS\n-;; to itself.\n-(define_insn \"*negtf2_if\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n-\t(neg:TF (match_operand:TF 1 \"nonimmediate_operand\" \"0,0\")))\n-   (clobber (reg:CC 17))]\n-  \"TARGET_80387 && ix86_unary_operator_ok (NEG, TFmode, operands)\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"fp_register_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(neg:TF (match_dup 1)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_and_not_fp_reg_operand\" \"\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(parallel [(set (match_dup 0) (xor:SI (match_dup 0) (match_dup 1)))\n-\t      (clobber (reg:CC 17))])]\n-  \"operands[1] = GEN_INT (0x8000);\n-   operands[0] = gen_rtx_REG (SImode,\n-\t\t\t      true_regnum (operands[0]) + (TARGET_64BIT ? 1 : 2));\")\n-\n ;; Conditionalize these after reload. If they matches before reload, we \n ;; lose the clobber and ability to use integer instructions.\n \n@@ -10301,7 +9766,7 @@\n (define_insn \"*negxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -10311,7 +9776,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")\n@@ -10321,35 +9786,6 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(neg:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"ppro_uops\" \"few\")])\n-\n-(define_insn \"*negtf2_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(neg:TF (match_operand:TF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"ppro_uops\" \"few\")])\n-\n-(define_insn \"*negextenddftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(neg:TF (float_extend:TF\n-\t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n-  \"fchs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"ppro_uops\" \"few\")])\n-\n-(define_insn \"*negextendsftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(neg:TF (float_extend:TF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n   \"fchs\"\n   [(set_attr \"type\" \"fsgn\")\n@@ -10491,8 +9927,7 @@\n {\n   int size = GET_MODE_SIZE (GET_MODE (operands[1]));\n \n-  /* XFmode's size is 12, TFmode 16, but only 10 bytes are used.  */\n-  if (size >= 12)\n+  if (GET_MODE (operands[1]) == XFmode)\n     size = 10;\n   operands[0] = adjust_address (operands[0], QImode, size - 1);\n   operands[1] = gen_int_mode (~0x80, QImode);\n@@ -10658,15 +10093,8 @@\n   [(parallel [(set (match_operand:XF 0 \"nonimmediate_operand\" \"\")\n \t\t   (neg:XF (match_operand:XF 1 \"nonimmediate_operand\" \"\")))\n \t      (clobber (reg:CC 17))])]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"ix86_expand_unary_operator (ABS, XFmode, operands); DONE;\")\n-\n-(define_expand \"abstf2\"\n-  [(parallel [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (neg:TF (match_operand:TF 1 \"nonimmediate_operand\" \"\")))\n-\t      (clobber (reg:CC 17))])]\n   \"TARGET_80387\"\n-  \"ix86_expand_unary_operator (ABS, TFmode, operands); DONE;\")\n+  \"ix86_expand_unary_operator (ABS, XFmode, operands); DONE;\")\n \n ;; Keep 'f' and 'r' in separate alternatives to avoid reload problems\n ;; because of secondary memory needed to reload from class FLOAT_INT_REGS\n@@ -10675,7 +10103,7 @@\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n \t(abs:XF (match_operand:XF 1 \"nonimmediate_operand\" \"0,0\")))\n    (clobber (reg:CC 17))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n+  \"TARGET_80387\n    && ix86_unary_operator_ok (ABS, XFmode, operands)\"\n   \"#\")\n \n@@ -10699,33 +10127,6 @@\n    operands[0] = gen_rtx_REG (SImode,\n \t\t\t      true_regnum (operands[0]) + (TARGET_64BIT ? 1 : 2));\")\n \n-(define_insn \"*abstf2_if\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=f#r,rm#f\")\n-\t(abs:TF (match_operand:TF 1 \"nonimmediate_operand\" \"0,0\")))\n-   (clobber (reg:CC 17))]\n-  \"TARGET_80387 && ix86_unary_operator_ok (ABS, TFmode, operands)\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"fp_register_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(set (match_dup 0)\n-\t(abs:TF (match_dup 1)))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:TF 0 \"register_and_not_any_fp_reg_operand\" \"\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"\")))\n-   (clobber (reg:CC 17))]\n-  \"TARGET_80387 && reload_completed\"\n-  [(parallel [(set (match_dup 0) (and:SI (match_dup 0) (match_dup 1)))\n-\t      (clobber (reg:CC 17))])]\n-  \"operands[1] = GEN_INT (~0x8000);\n-   operands[0] = gen_rtx_REG (SImode,\n-\t\t\t      true_regnum (operands[0]) + (TARGET_64BIT ? 1 : 2));\")\n-\n (define_insn \"*abssf2_1\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"0\")))]\n@@ -10754,7 +10155,7 @@\n (define_insn \"*absxf2_1\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && reload_completed\"\n+  \"TARGET_80387 && reload_completed\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"DF\")])\n@@ -10763,7 +10164,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n    (set_attr \"mode\" \"XF\")])\n@@ -10772,32 +10173,6 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(abs:XF (float_extend:XF\n \t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n-  \"fabs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*abstf2_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(abs:TF (match_operand:TF 1 \"register_operand\" \"0\")))]\n-  \"TARGET_80387 && reload_completed\"\n-  \"fabs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*absextenddftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(abs:TF (float_extend:TF\n-\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"TARGET_80387\"\n-  \"fabs\"\n-  [(set_attr \"type\" \"fsgn\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*absextendsftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(abs:TF (float_extend:TF\n-\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n   \"TARGET_80387\"\n   \"fabs\"\n   [(set_attr \"type\" \"fsgn\")\n@@ -14841,7 +14216,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"%0\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f\")]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n+  \"TARGET_80387\n    && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -14850,19 +14225,6 @@\n            (const_string \"fop\")))\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*fop_tf_comm\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:TF 1 \"register_operand\" \"%0\")\n-\t\t\t (match_operand:TF 2 \"register_operand\" \"f\")]))]\n-  \"TARGET_80387 && GET_RTX_CLASS (GET_CODE (operands[3])) == 'c'\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (if_then_else (match_operand:TF 3 \"mult_operator\" \"\") \n-           (const_string \"fmul\")\n-           (const_string \"fop\")))\n-   (set_attr \"mode\" \"XF\")])\n-\n (define_insn \"*fop_sf_1_nosse\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:SF 3 \"binary_fp_operator\"\n@@ -15117,7 +14479,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t\t\t[(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"f,0\")]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\n+  \"TARGET_80387\n    && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n@@ -15129,52 +14491,17 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*fop_tf_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t\t\t[(match_operand:TF 1 \"register_operand\" \"0,f\")\n-\t\t\t (match_operand:TF 2 \"register_operand\" \"f,0\")]))]\n-  \"TARGET_80387\n-   && GET_RTX_CLASS (GET_CODE (operands[3])) != 'c'\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:TF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:TF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"XF\")])\n-\n (define_insn \"*fop_xf_2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float:XF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,0\")]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && TARGET_USE_FIOP\"\n-  \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:XF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"ppro_uops\" \"many\")])\n-\n-(define_insn \"*fop_tf_2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t   [(float:TF (match_operand:SI 1 \"nonimmediate_operand\" \"m,?r\"))\n-\t    (match_operand:TF 2 \"register_operand\" \"0,0\")]))]\n   \"TARGET_80387 && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n-        (cond [(match_operand:TF 3 \"mult_operator\" \"\") \n+        (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n                  (const_string \"fmul\")\n-               (match_operand:TF 3 \"div_operator\" \"\") \n+               (match_operand:XF 3 \"div_operator\" \"\") \n                  (const_string \"fdiv\")\n               ]\n               (const_string \"fop\")))\n@@ -15187,7 +14514,7 @@\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,0\")\n \t   (float:XF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && TARGET_USE_FIOP\"\n+  \"TARGET_80387 && TARGET_USE_FIOP\"\n   \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15200,30 +14527,12 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"ppro_uops\" \"many\")])\n \n-(define_insn \"*fop_tf_3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t  [(match_operand:TF 1 \"register_operand\" \"0,0\")\n-\t   (float:TF (match_operand:SI 2 \"nonimmediate_operand\" \"m,?r\"))]))]\n-  \"TARGET_80387 && TARGET_USE_FIOP\"\n-  \"* return which_alternative ? \\\"#\\\" : output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:TF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:TF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"fp_int_src\" \"true\")\n-   (set_attr \"mode\" \"SI\")\n-   (set_attr \"ppro_uops\" \"many\")])\n-\n (define_insn \"*fop_xf_4\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t   [(float_extend:XF (match_operand 1 \"nonimmediate_operand\" \"fm,0\"))\n \t    (match_operand:XF 2 \"register_operand\" \"0,f\")]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15234,29 +14543,13 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_tf_4\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t   [(float_extend:TF (match_operand 1 \"nonimmediate_operand\" \"fm,0\"))\n-\t    (match_operand:TF 2 \"register_operand\" \"0,f\")]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:TF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:TF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"SF\")])\n-\n (define_insn \"*fop_xf_5\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(match_operand:XF 1 \"register_operand\" \"0,f\")\n \t   (float_extend:XF\n \t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15267,31 +14560,14 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_tf_5\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t  [(match_operand:TF 1 \"register_operand\" \"0,f\")\n-\t   (float_extend:TF\n-\t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:TF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:TF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"SF\")])\n-\n (define_insn \"*fop_xf_6\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n \t  [(float_extend:XF\n \t    (match_operand 1 \"register_operand\" \"0,f\"))\n \t   (float_extend:XF\n \t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387\"\n+  \"TARGET_80387\"\n   \"* return output_387_binary_op (insn, operands);\"\n   [(set (attr \"type\") \n         (cond [(match_operand:XF 3 \"mult_operator\" \"\") \n@@ -15302,24 +14578,6 @@\n               (const_string \"fop\")))\n    (set_attr \"mode\" \"SF\")])\n \n-(define_insn \"*fop_tf_6\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(match_operator:TF 3 \"binary_fp_operator\"\n-\t  [(float_extend:TF\n-\t    (match_operand 1 \"register_operand\" \"0,f\"))\n-\t   (float_extend:TF\n-\t    (match_operand 2 \"nonimmediate_operand\" \"fm,0\"))]))]\n-  \"TARGET_80387\"\n-  \"* return output_387_binary_op (insn, operands);\"\n-  [(set (attr \"type\") \n-        (cond [(match_operand:TF 3 \"mult_operator\" \"\") \n-                 (const_string \"fmul\")\n-               (match_operand:TF 3 \"div_operator\" \"\") \n-                 (const_string \"fdiv\")\n-              ]\n-              (const_string \"fop\")))\n-   (set_attr \"mode\" \"SF\")])\n-\n (define_split\n   [(set (match_operand 0 \"register_operand\" \"\")\n \t(match_operator 3 \"binary_fp_operator\"\n@@ -15457,17 +14715,7 @@\n (define_insn \"sqrtxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (match_operand:XF 1 \"register_operand\" \"0\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387 \n-   && (TARGET_IEEE_FP || flag_unsafe_math_optimizations) \"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n-\n-(define_insn \"sqrttf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(sqrt:TF (match_operand:TF 1 \"register_operand\" \"0\")))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+  \"TARGET_80387 && !TARGET_NO_FANCY_MATH_387 \n    && (TARGET_IEEE_FP || flag_unsafe_math_optimizations) \"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -15478,17 +14726,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n-\n-(define_insn \"*sqrtextenddftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(sqrt:TF (float_extend:TF\n-\t\t  (match_operand:DF 1 \"register_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -15498,17 +14736,7 @@\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(sqrt:XF (float_extend:XF\n \t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n-  \"fsqrt\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")\n-   (set_attr \"athlon_decode\" \"direct\")])\n-\n-(define_insn \"*sqrtextendsftf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(sqrt:TF (float_extend:TF\n-\t\t  (match_operand:SF 1 \"register_operand\" \"0\"))))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\"\n+  \"TARGET_80387 && !TARGET_NO_FANCY_MATH_387\"\n   \"fsqrt\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")\n@@ -15546,16 +14774,7 @@\n (define_insn \"sinxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_80387 && !TARGET_NO_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-  \"fsin\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"sintf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+  \"TARGET_80387 && !TARGET_NO_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n   \"fsin\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -15593,16 +14812,7 @@\n (define_insn \"cosxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && ! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n-  \"fcos\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"costf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n   \"fcos\"\n   [(set_attr \"type\" \"fpspc\")\n@@ -15665,7 +14875,7 @@\n \t           UNSPEC_FPATAN))\n    (clobber (match_scratch:XF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && ! TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n   \"fpatan\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15675,61 +14885,34 @@\n    (use (match_operand:XF 2 \"register_operand\" \"0\"))\n    (use (match_operand:XF 1 \"register_operand\" \"u\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && ! TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n {\n   rtx copy = gen_reg_rtx (XFmode);\n   emit_move_insn (copy, operands[1]);\n   emit_insn (gen_atan2xf3_1 (operands[0], copy, operands[2]));\n   DONE;\n })\n \n-(define_insn \"atan2tf3_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-        (unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n-\t\t   UNSPEC_FPATAN))\n-   (clobber (match_scratch:TF 3 \"=1\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n-  \"fpatan\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_expand \"atan2tf3\"\n-  [(use (match_operand:TF 0 \"register_operand\" \"=f\"))\n-   (use (match_operand:TF 2 \"register_operand\" \"0\"))\n-   (use (match_operand:TF 1 \"register_operand\" \"u\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n-{\n-  rtx copy = gen_reg_rtx (TFmode);\n-  emit_move_insn (copy, operands[1]);\n-  emit_insn (gen_atan2tf3_1 (operands[0], copy, operands[2]));\n-  DONE;\n-})\n-\n (define_insn \"*fyl2x_sfxf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n          (unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")\n-\t\t     (match_operand 1 \"register_operand\" \"u\")]\n+\t\t     (match_operand:XF 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n    (clobber (match_scratch:SF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\n-   && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\"\n+   && flag_unsafe_math_optimizations\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fyl2x_dfxf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n          (unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")\n-\t\t     (match_operand 1 \"register_operand\" \"u\")]\n+\t\t     (match_operand:XF 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FYL2X))\n    (clobber (match_scratch:DF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\n-   && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\"\n+   && flag_unsafe_math_optimizations\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DF\")])\n@@ -15741,19 +14924,7 @@\n \t           UNSPEC_FYL2X))\n    (clobber (match_scratch:XF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n-  \"fyl2x\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*fyl2x_tfxf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FYL2X))\n-   (clobber (match_scratch:TF 3 \"=1\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n   \"fyl2x\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15768,7 +14939,7 @@\n {\n   rtx temp;\n \n-  operands[2] = gen_reg_rtx (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode);\n+  operands[2] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (4); /* fldln2 */\n   emit_move_insn (operands[2], temp);\n })\n@@ -15783,7 +14954,7 @@\n {\n   rtx temp;\n \n-  operands[2] = gen_reg_rtx (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode);\n+  operands[2] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (4); /* fldln2 */\n   emit_move_insn (operands[2], temp);\n })\n@@ -15794,7 +14965,7 @@\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n \t      (clobber (match_scratch:XF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n \n@@ -15803,45 +14974,26 @@\n   emit_move_insn (operands[2], temp);\n })\n \n-(define_expand \"logtf2\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t\t   (unspec:TF [(match_operand:TF 1 \"register_operand\" \"\")\n-\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_scratch:TF 3 \"\"))])]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n-{\n-  rtx temp;\n-\n-  operands[2] = gen_reg_rtx (TFmode);\n-  temp = standard_80387_constant_rtx (4); /* fldln2 */\n-  emit_move_insn (operands[2], temp);\n-})\n-\n (define_insn \"*fscale_sfxf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t (unspec:SF [(match_operand 2 \"register_operand\" \"0\")\n-\t\t     (match_operand 1 \"register_operand\" \"u\")]\n+\t (unspec:SF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t     (match_operand:XF 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FSCALE))\n    (clobber (match_scratch:SF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\n-   && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\n-   && GET_MODE (operands[2]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\"\n+   && flag_unsafe_math_optimizations\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*fscale_dfxf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t (unspec:DF [(match_operand 2 \"register_operand\" \"0\")\n-\t\t     (match_operand 1 \"register_operand\" \"u\")]\n+\t (unspec:DF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t     (match_operand:XF 1 \"register_operand\" \"u\")]\n \t\t    UNSPEC_FSCALE))\n    (clobber (match_scratch:DF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\n-   && GET_MODE (operands[1]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\n-   && GET_MODE (operands[2]) == (TARGET_128BIT_LONG_DOUBLE ? TFmode : XFmode)\"\n+   && flag_unsafe_math_optimizations\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"DF\")])\n@@ -15853,19 +15005,7 @@\n \t           UNSPEC_FSCALE))\n    (clobber (match_scratch:XF 3 \"=1\"))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n-  \"fscale\\;fstp\\t%y1\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*fscale_tf3\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:TF 1 \"register_operand\" \"u\")]\n-\t\t   UNSPEC_FSCALE))\n-   (clobber (match_scratch:TF 3 \"=1\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n   \"fscale\\;fstp\\t%y1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15875,17 +15015,7 @@\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n \t UNSPEC_FRNDINT))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n-  \"frndint\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*frndinttf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"0\")]\n-\t UNSPEC_FRNDINT))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n   \"frndint\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15895,17 +15025,7 @@\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n \t UNSPEC_F2XM1))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n-  \"f2xm1\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*f2xm1tf2\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f\")\n-\t(unspec:TF [(match_operand:TF 1 \"register_operand\" \"0\")]\n-\t UNSPEC_F2XM1))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n   \"f2xm1\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n@@ -15927,42 +15047,13 @@\n   rtx temp;\n   int i;\n \n-  if (TARGET_128BIT_LONG_DOUBLE)\n-    {\n-      emit_insn (gen_expsf2_tf (operands[0], operands[1]));\n-      DONE;\n-    }\n-\n   for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[3], temp);\n   emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n-(define_expand \"expsf2_tf\"\n-  [(set (match_dup 2)\n-\t(float_extend:TF (match_operand:SF 1 \"register_operand\" \"\")))\n-   (set (match_dup 4) (mult:TF (match_dup 2) (match_dup 3)))\n-   (set (match_dup 5) (unspec:TF [(match_dup 4)] UNSPEC_FRNDINT))\n-   (set (match_dup 6) (minus:TF (match_dup 4) (match_dup 5)))\n-   (set (match_dup 7) (unspec:TF [(match_dup 6)] UNSPEC_F2XM1))\n-   (set (match_dup 9) (plus:TF (match_dup 7) (match_dup 8)))\n-   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:SF 5 \"\"))])]\n-  \"\"\n-{\n-  rtx temp;\n-  int i;\n-\n-  for (i=2; i<10; i++)\n-    operands[i] = gen_reg_rtx (TFmode);\n-  temp = standard_80387_constant_rtx (5); /* fldl2e */\n-  emit_move_insn (operands[3], temp);\n-  emit_move_insn (operands[8], CONST1_RTX (TFmode));  /* fld1 */\n-})\n-\n (define_expand \"expdf2\"\n   [(set (match_dup 2)\n \t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n@@ -15980,43 +15071,13 @@\n   rtx temp;\n   int i;\n \n-  if (TARGET_128BIT_LONG_DOUBLE)\n-    {\n-      emit_insn (gen_expdf2_tf (operands[0], operands[1]));\n-      DONE;\n-    }\n-\n   for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[3], temp);\n   emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n })\n \n-\n-(define_expand \"expdf2_tf\"\n-  [(set (match_dup 2)\n-\t(float_extend:TF (match_operand:DF 1 \"register_operand\" \"\")))\n-   (set (match_dup 4) (mult:TF (match_dup 2) (match_dup 3)))\n-   (set (match_dup 5) (unspec:TF [(match_dup 4)] UNSPEC_FRNDINT))\n-   (set (match_dup 6) (minus:TF (match_dup 4) (match_dup 5)))\n-   (set (match_dup 7) (unspec:TF [(match_dup 6)] UNSPEC_F2XM1))\n-   (set (match_dup 9) (plus:TF (match_dup 7) (match_dup 8)))\n-   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:DF 5 \"\"))])]\n-   \"\"\n-{\n-  rtx temp;\n-  int i;\n-\n-  for (i=2; i<10; i++)\n-    operands[i] = gen_reg_rtx (TFmode);\n-  temp = standard_80387_constant_rtx (5); /* fldl2e */\n-  emit_move_insn (operands[3], temp);\n-  emit_move_insn (operands[8], CONST1_RTX (TFmode));  /* fld1 */\n-})\n-\n (define_expand \"expxf2\"\n   [(set (match_dup 3) (mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n \t\t\t       (match_dup 2)))\n@@ -16028,7 +15089,7 @@\n \t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n \t      (clobber (match_scratch:XF 5 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n@@ -16053,29 +15114,6 @@\n   emit_move_insn (operands[2], CONST1_RTX (SFmode));  /* fld1 */\n })\n \n-(define_expand \"exptf2\"\n-  [(set (match_dup 3) (mult:TF (match_operand:TF 1 \"register_operand\" \"\")\n-\t\t\t       (match_dup 2)))\n-   (set (match_dup 4) (unspec:TF [(match_dup 3)] UNSPEC_FRNDINT))\n-   (set (match_dup 5) (minus:TF (match_dup 3) (match_dup 4)))\n-   (set (match_dup 6) (unspec:TF [(match_dup 5)] UNSPEC_F2XM1))\n-   (set (match_dup 8) (plus:TF (match_dup 6) (match_dup 7)))\n-   (parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t\t   (unspec:TF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:TF 5 \"\"))])]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n-{\n-  rtx temp;\n-  int i;\n-\n-  for (i=2; i<9; i++)\n-    operands[i] = gen_reg_rtx (TFmode);\n-  temp = standard_80387_constant_rtx (5); /* fldl2e */\n-  emit_move_insn (operands[2], temp);\n-  emit_move_insn (operands[7], CONST1_RTX (TFmode));  /* fld1 */\n-})\n-\n (define_expand \"atandf2\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t\t   (unspec:DF [(match_dup 2)\n@@ -16096,24 +15134,11 @@\n \t\t    UNSPEC_FPATAN))\n \t      (clobber (match_scratch:XF 3 \"\"))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && !TARGET_128BIT_LONG_DOUBLE\"\n+   && flag_unsafe_math_optimizations\"\n {\n   operands[2] = gen_reg_rtx (XFmode);\n   emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n })\n-\n-(define_expand \"atantf2\"\n-  [(parallel [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t\t   (unspec:TF [(match_dup 2)\n-\t\t\t       (match_operand:TF 1 \"register_operand\" \"\")]\n-\t\t    UNSPEC_FPATAN))\n-\t      (clobber (match_scratch:TF 3 \"\"))])]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations && TARGET_128BIT_LONG_DOUBLE\"\n-{\n-  operands[2] = gen_reg_rtx (TFmode);\n-  emit_move_insn (operands[2], CONST1_RTX (TFmode));  /* fld1 */\n-})\n \f\n ;; Block operation instructions\n \n@@ -17364,14 +16389,6 @@\n \t(if_then_else:XF (match_operand 1 \"comparison_operator\" \"\")\n \t\t\t (match_operand:XF 2 \"register_operand\" \"\")\n \t\t\t (match_operand:XF 3 \"register_operand\" \"\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_CMOVE\"\n-  \"if (! ix86_expand_fp_movcc (operands)) FAIL; DONE;\")\n-\n-(define_expand \"movtfcc\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"\")\n-\t(if_then_else:TF (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:TF 2 \"register_operand\" \"\")\n-\t\t\t (match_operand:TF 3 \"register_operand\" \"\")))]\n   \"TARGET_CMOVE\"\n   \"if (! ix86_expand_fp_movcc (operands)) FAIL; DONE;\")\n \n@@ -17381,19 +16398,6 @@\n \t\t\t\t[(reg 17) (const_int 0)])\n \t\t      (match_operand:XF 2 \"register_operand\" \"f,0\")\n \t\t      (match_operand:XF 3 \"register_operand\" \"0,f\")))]\n-  \"!TARGET_128BIT_LONG_DOUBLE && TARGET_CMOVE\"\n-  \"@\n-   fcmov%F1\\t{%2, %0|%0, %2}\n-   fcmov%f1\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"fcmov\")\n-   (set_attr \"mode\" \"XF\")])\n-\n-(define_insn \"*movtfcc_1\"\n-  [(set (match_operand:TF 0 \"register_operand\" \"=f,f\")\n-\t(if_then_else:TF (match_operator 1 \"fcmov_comparison_operator\" \n-\t\t\t\t[(reg 17) (const_int 0)])\n-\t\t      (match_operand:TF 2 \"register_operand\" \"f,0\")\n-\t\t      (match_operand:TF 3 \"register_operand\" \"0,f\")))]\n   \"TARGET_CMOVE\"\n   \"@\n    fcmov%F1\\t{%2, %0|%0, %2}\n@@ -19534,6 +18538,18 @@\n   DONE;\n })\n \n+(define_expand \"movtf\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_64BIT\"\n+{\n+  if (TARGET_64BIT)\n+    ix86_expand_move (TFmode, operands);\n+  else\n+    ix86_expand_vector_move (TFmode, operands);\n+  DONE;\n+})\n+\n (define_insn \"movv2df_internal\"\n   [(set (match_operand:V2DF 0 \"nonimmediate_operand\" \"=x,x,m\")\n \t(match_operand:V2DF 1 \"vector_move_operand\" \"C,xm,x\"))]\n@@ -19919,6 +18935,50 @@\n \t\t   (const_string \"TI\"))]\n \t       (const_string \"DI\")))])\n \n+(define_insn \"*movtf_rex64\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=r,o,x,x,xm\")\n+\t(match_operand:TF 1 \"general_operand\" \"riFo,riF,C,xm,x\"))]\n+  \"TARGET_64BIT\n+   && (GET_CODE (operands[0]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+    case 1:\n+      return \"#\";\n+    case 2:\n+      if (get_attr_mode (insn) == MODE_V4SF)\n+\treturn \"xorps\\t%0, %0\";\n+      else\n+\treturn \"pxor\\t%0, %0\";\n+    case 3:\n+    case 4:\n+      if (get_attr_mode (insn) == MODE_V4SF)\n+\treturn \"movaps\\t{%1, %0|%0, %1}\";\n+      else\n+\treturn \"movdqa\\t{%1, %0|%0, %1}\";\n+    default:\n+      abort ();\n+    }\n+}\n+  [(set_attr \"type\" \"*,*,ssemov,ssemov,ssemov\")\n+   (set (attr \"mode\")\n+        (cond [(eq_attr \"alternative\" \"2,3\")\n+\t\t (if_then_else\n+\t\t   (ne (symbol_ref \"optimize_size\")\n+\t\t       (const_int 0))\n+\t\t   (const_string \"V4SF\")\n+\t\t   (const_string \"TI\"))\n+\t       (eq_attr \"alternative\" \"4\")\n+\t\t (if_then_else\n+\t\t   (ior (ne (symbol_ref \"TARGET_SSE_TYPELESS_STORES\")\n+\t\t\t    (const_int 0))\n+\t\t\t(ne (symbol_ref \"optimize_size\")\n+\t\t\t    (const_int 0)))\n+\t\t   (const_string \"V4SF\")\n+\t\t   (const_string \"TI\"))]\n+\t       (const_string \"DI\")))])\n+\n (define_split\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n         (match_operand:TI 1 \"general_operand\" \"\"))]\n@@ -19927,6 +18987,14 @@\n   [(const_int 0)]\n   \"ix86_split_long_move (operands); DONE;\")\n \n+(define_split\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+        (match_operand:TF 1 \"general_operand\" \"\"))]\n+  \"reload_completed && !SSE_REG_P (operands[0])\n+   && !SSE_REG_P (operands[1])\"\n+  [(const_int 0)]\n+  \"ix86_split_long_move (operands); DONE;\")\n+\n ;; These two patterns are useful for specifying exactly whether to use\n ;; movaps or movups\n (define_expand \"sse_movaps\""}, {"sha": "0801054611536d0daa5bc9afa0de73fc49d93d1e", "filename": "gcc/real.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -3032,6 +3032,11 @@ encode_ieee_extended (const struct real_format *fmt, long *buf,\n     buf[0] = image_hi << 16, buf[1] = sig_hi, buf[2] = sig_lo;\n   else\n     buf[0] = sig_lo, buf[1] = sig_hi, buf[2] = image_hi;\n+\n+  /* Avoid uninitialized data to be output by compiler when XFmode is extended\n+     to 128 bits.  */\n+  if (GET_MODE_SIZE (XFmode) == 16)\n+    buf[3] = 0;\n }\n \n static void"}, {"sha": "08d26f60c32669422c3e179157c1f82f73ef78d2", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8a1ebc6039977d5c70037cb353d45ad284e2d0c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=f8a1ebc6039977d5c70037cb353d45ad284e2d0c", "patch": "@@ -1124,7 +1124,7 @@ move_for_stack_reg (rtx insn, stack regstack, rtx pat)\n \t  regstack->top--;\n \t  CLEAR_HARD_REG_BIT (regstack->reg_set, REGNO (src));\n \t}\n-      else if ((GET_MODE (src) == XFmode || GET_MODE (src) == TFmode)\n+      else if ((GET_MODE (src) == XFmode)\n \t       && regstack->top < REG_STACK_SIZE - 1)\n \t{\n \t  /* A 387 cannot write an XFmode value to a MEM without\n@@ -1137,10 +1137,7 @@ move_for_stack_reg (rtx insn, stack regstack, rtx pat)\n \t  rtx push_rtx, push_insn;\n \t  rtx top_stack_reg = FP_MODE_REG (FIRST_STACK_REG, GET_MODE (src));\n \n-\t  if (GET_MODE (src) == TFmode)\n-\t    push_rtx = gen_movtf (top_stack_reg, top_stack_reg);\n-\t  else\n-\t    push_rtx = gen_movxf (top_stack_reg, top_stack_reg);\n+\t  push_rtx = gen_movxf (top_stack_reg, top_stack_reg);\n \t  push_insn = emit_insn_before (push_rtx, insn);\n \t  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_DEAD, top_stack_reg,\n \t\t\t\t\t\tREG_NOTES (insn));"}]}