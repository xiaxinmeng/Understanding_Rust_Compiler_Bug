{"sha": "cdd4b0d464c4873e72866d5bb9dc239141a20e28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RkNGIwZDQ2NGM0ODczZTcyODY2ZDViYjlkYzIzOTE0MWEyMGUyOA==", "commit": {"author": {"name": "Arend Bayer", "email": "arend.bayer@web.de", "date": "2003-02-16T08:24:25Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-02-16T08:24:25Z"}, "message": "fold-const.c (extract_muldiv_1): Rename from extract_muldiv; rearrange mult arguments for less recursion.\n\n        * fold-const.c (extract_muldiv_1): Rename from extract_muldiv;\n        rearrange mult arguments for less recursion.\n        (extract_muldiv): New.  Prevent runaway recursion.\n\nCo-Authored-By: Richard Henderson <rth@redhat.com>\n\nFrom-SVN: r62963", "tree": {"sha": "933222f0f9d27667fe6ae17f06ec0b29d2b39963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/933222f0f9d27667fe6ae17f06ec0b29d2b39963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdd4b0d464c4873e72866d5bb9dc239141a20e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd4b0d464c4873e72866d5bb9dc239141a20e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd4b0d464c4873e72866d5bb9dc239141a20e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd4b0d464c4873e72866d5bb9dc239141a20e28/comments", "author": null, "committer": null, "parents": [{"sha": "616f273ae71d5c3c034419a2905f41b689dfc2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616f273ae71d5c3c034419a2905f41b689dfc2b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616f273ae71d5c3c034419a2905f41b689dfc2b3"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "2357124032453d7a111c793c9d00ef9c4742d6be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd4b0d464c4873e72866d5bb9dc239141a20e28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd4b0d464c4873e72866d5bb9dc239141a20e28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdd4b0d464c4873e72866d5bb9dc239141a20e28", "patch": "@@ -1,3 +1,10 @@\n+2003-02-16 Arend Bayer <arend.bayer@web.de>\n+\t   Richard Henderson  <rth@redhat.com>\n+\n+\t* fold-const.c (extract_muldiv_1): Rename from extract_muldiv;\n+\trearrange mult arguments for less recursion.\n+\t(extract_muldiv): New.  Prevent runaway recursion.\n+\n 2003-02-16  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* config/i386/cygwin.h (TARGET_SUBTARGET_DEFAULT): Set"}, {"sha": "d6f356104c38a7bb3c13791bbf369a3bcbc93d9e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdd4b0d464c4873e72866d5bb9dc239141a20e28/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdd4b0d464c4873e72866d5bb9dc239141a20e28/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cdd4b0d464c4873e72866d5bb9dc239141a20e28", "patch": "@@ -104,6 +104,7 @@ static tree unextend\t\tPARAMS ((tree, int, int, tree));\n static tree fold_truthop\tPARAMS ((enum tree_code, tree, tree, tree));\n static tree optimize_minmax_comparison PARAMS ((tree));\n static tree extract_muldiv\tPARAMS ((tree, tree, enum tree_code, tree));\n+static tree extract_muldiv_1\tPARAMS ((tree, tree, enum tree_code, tree));\n static tree strip_compound_expr PARAMS ((tree, tree));\n static int multiple_of_p\tPARAMS ((tree, tree, tree));\n static tree constant_boolean_node PARAMS ((int, tree));\n@@ -4045,6 +4046,31 @@ extract_muldiv (t, c, code, wide_type)\n      tree c;\n      enum tree_code code;\n      tree wide_type;\n+{\n+  /* To avoid exponential search depth, refuse to allow recursion past\n+     three levels.  Beyond that (1) it's highly unlikely that we'll find\n+     something interesting and (2) we've probably processed it before\n+     when we built the inner expression.  */\n+\n+  static int depth;\n+  tree ret;\n+\n+  if (depth > 3)\n+    return NULL;\n+\n+  depth++;\n+  ret = extract_muldiv_1 (t, c, code, wide_type);\n+  depth--;\n+\n+  return ret;\n+}\n+\n+static tree\n+extract_muldiv_1 (t, c, code, wide_type)\n+     tree t;\n+     tree c;\n+     enum tree_code code;\n+     tree wide_type;\n {\n   tree type = TREE_TYPE (t);\n   enum tree_code tcode = TREE_CODE (t);\n@@ -4254,6 +4280,14 @@ extract_muldiv (t, c, code, wide_type)\n \t  && integer_zerop (const_binop (TRUNC_MOD_EXPR, op1, c, 0)))\n \treturn omit_one_operand (type, integer_zero_node, op0);\n \n+      /* Arrange for the code below to simplify two constants first.  */\n+      if (TREE_CODE (op1) == INTEGER_CST && TREE_CODE (op0) != INTEGER_CST)\n+\t{\n+\t  tree tmp = op0;\n+\t  op0 = op1;\n+\t  op1 = tmp;\n+\t}\n+\n       /* ... fall through ...  */\n \n     case TRUNC_DIV_EXPR:  case CEIL_DIV_EXPR:  case FLOOR_DIV_EXPR:"}]}