{"sha": "7665f023e8c383ae6cd23145032ab25bebc52ecf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY2NWYwMjNlOGMzODNhZTZjZDIzMTQ1MDMyYWIyNWJlYmM1MmVjZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-15T15:44:51Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-15T15:44:51Z"}, "message": "tree-ssa-dce.c (DCE_TODOs): New.\n\n\t* tree-ssa-dce.c (DCE_TODOs): New.\n\t(propagate_necessity): Return if something changed.\n\t(eliminate_unnecessary_stmts): Likewise.\n\t(perform_tree_ssa_dce): Return TODO flags when needed.\n\t(pass_dce, pass_dce_loop, pass_cd_dce): Remove TODO flags.\n\nFrom-SVN: r120797", "tree": {"sha": "466fed0a6372a2d3cb1405999eb45ba1d9e28219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/466fed0a6372a2d3cb1405999eb45ba1d9e28219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7665f023e8c383ae6cd23145032ab25bebc52ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7665f023e8c383ae6cd23145032ab25bebc52ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7665f023e8c383ae6cd23145032ab25bebc52ecf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7665f023e8c383ae6cd23145032ab25bebc52ecf/comments", "author": null, "committer": null, "parents": [{"sha": "0122c9e791efcbad3387ff231616c4cb610dcfc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0122c9e791efcbad3387ff231616c4cb610dcfc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0122c9e791efcbad3387ff231616c4cb610dcfc8"}], "stats": {"total": 76, "additions": 45, "deletions": 31}, "files": [{"sha": "99c9b5744ce442be8257ca6e33f325f6d275151c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7665f023e8c383ae6cd23145032ab25bebc52ecf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7665f023e8c383ae6cd23145032ab25bebc52ecf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7665f023e8c383ae6cd23145032ab25bebc52ecf", "patch": "@@ -1,3 +1,11 @@\n+2007-01-15  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-dce.c (DCE_TODOs): New.\n+\t(propagate_necessity): Return if something changed.\n+\t(eliminate_unnecessary_stmts): Likewise.\n+\t(perform_tree_ssa_dce): Return TODO flags when needed.\n+\t(pass_dce, pass_dce_loop, pass_cd_dce): Remove TODO flags.\n+\n 2007-01-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (fyl2xxf3_i387): Rename from fyl2x_xf3."}, {"sha": "381d91016e05263a4848b49b16e05c1fdb7253ce", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7665f023e8c383ae6cd23145032ab25bebc52ecf/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7665f023e8c383ae6cd23145032ab25bebc52ecf/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=7665f023e8c383ae6cd23145032ab25bebc52ecf", "patch": "@@ -525,10 +525,11 @@ propagate_necessity (struct edge_list *el)\n \n /* Remove dead PHI nodes from block BB.  */\n \n-static void\n+static bool\n remove_dead_phis (basic_block bb)\n {\n   tree prev, phi;\n+  bool something_changed = false;\n \n   prev = NULL_TREE;\n   phi = phi_nodes (bb);\n@@ -540,6 +541,7 @@ remove_dead_phis (basic_block bb)\n \t{\n \t  tree next = PHI_CHAIN (phi);\n \n+\t  something_changed = true;\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n \t      fprintf (dump_file, \"Deleting : \");\n@@ -557,6 +559,7 @@ remove_dead_phis (basic_block bb)\n \t  phi = PHI_CHAIN (phi);\n \t}\n     }\n+  return something_changed;\n }\n \n \n@@ -649,9 +652,10 @@ remove_dead_stmt (block_stmt_iterator *i, basic_block bb)\n /* Eliminate unnecessary statements. Any instruction not marked as necessary\n    contributes nothing to the program, and can be deleted.  */\n \n-static void\n+static bool\n eliminate_unnecessary_stmts (void)\n {\n+  bool something_changed = false;\n   basic_block bb;\n   block_stmt_iterator i;\n \n@@ -662,7 +666,7 @@ eliminate_unnecessary_stmts (void)\n   FOR_EACH_BB (bb)\n     {\n       /* Remove dead PHI nodes.  */\n-      remove_dead_phis (bb);\n+      something_changed |= remove_dead_phis (bb);\n     }\n \n   FOR_EACH_BB (bb)\n@@ -676,7 +680,10 @@ eliminate_unnecessary_stmts (void)\n \n \t  /* If `i' is not necessary then remove it.  */\n \t  if (! NECESSARY (t))\n-\t    remove_dead_stmt (&i, bb);\n+\t    {\n+\t      remove_dead_stmt (&i, bb);\n+\t      something_changed = true;\n+\t    }\n \t  else\n \t    {\n \t      tree call = get_call_expr_in (t);\n@@ -686,6 +693,7 @@ eliminate_unnecessary_stmts (void)\n \t    }\n \t}\n     }\n+  return something_changed;\n }\n \n \n@@ -774,10 +782,11 @@ tree_dce_done (bool aggressive)\n \t  as the last tree SSA pass, but keep this in mind when you\n \t  start experimenting with pass ordering.  */\n \n-static void\n+static unsigned int\n perform_tree_ssa_dce (bool aggressive)\n {\n   struct edge_list *el = NULL;\n+  bool something_changed = 0;\n \n   tree_dce_init (aggressive);\n \n@@ -800,9 +809,10 @@ perform_tree_ssa_dce (bool aggressive)\n \n   propagate_necessity (el);\n \n-  eliminate_unnecessary_stmts ();\n+  something_changed |= eliminate_unnecessary_stmts ();\n+  something_changed |= cfg_altered;\n \n-  if (aggressive)\n+  if (aggressive && something_changed)\n     free_dominance_info (CDI_POST_DOMINATORS);\n \n   /* If we removed paths in the CFG, then we need to update\n@@ -818,30 +828,38 @@ perform_tree_ssa_dce (bool aggressive)\n   tree_dce_done (aggressive);\n \n   free_edge_list (el);\n+\n+  if (something_changed)\n+    return (TODO_update_ssa | TODO_cleanup_cfg | TODO_ggc_collect \n+\t    | TODO_remove_unused_locals);\n+  else\n+    return 0;\n }\n \n /* Pass entry points.  */\n static unsigned int\n tree_ssa_dce (void)\n {\n-  perform_tree_ssa_dce (/*aggressive=*/false);\n-  return 0;\n+  return perform_tree_ssa_dce (/*aggressive=*/false);\n }\n \n static unsigned int\n tree_ssa_dce_loop (void)\n {\n-  perform_tree_ssa_dce (/*aggressive=*/false);\n-  free_numbers_of_iterations_estimates ();\n-  scev_reset ();\n-  return 0;\n+  unsigned int todo;\n+  todo = perform_tree_ssa_dce (/*aggressive=*/false);\n+  if (todo)\n+    {\n+      free_numbers_of_iterations_estimates ();\n+      scev_reset ();\n+    }\n+  return todo;\n }\n \n static unsigned int\n tree_ssa_cd_dce (void)\n {\n-  perform_tree_ssa_dce (/*aggressive=*/optimize >= 2);\n-  return 0;\n+  return perform_tree_ssa_dce (/*aggressive=*/optimize >= 2);\n }\n \n static bool\n@@ -863,12 +881,7 @@ struct tree_opt_pass pass_dce =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func \n-    | TODO_update_ssa\n-    | TODO_cleanup_cfg\n-    | TODO_ggc_collect\n-    | TODO_verify_ssa\n-    | TODO_remove_unused_locals,\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -885,10 +898,7 @@ struct tree_opt_pass pass_dce_loop =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func \n-    | TODO_update_ssa\n-    | TODO_cleanup_cfg\n-    | TODO_verify_ssa,\t\t\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa,\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };\n \n@@ -905,11 +915,7 @@ struct tree_opt_pass pass_cd_dce =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\n-    | TODO_update_ssa\n-    | TODO_cleanup_cfg\n-    | TODO_ggc_collect\n-    | TODO_verify_ssa\n-    | TODO_verify_flow,\t\t\t/* todo_flags_finish */\n+  TODO_dump_func | TODO_verify_ssa\n+  | TODO_verify_flow,\t\t\t/* todo_flags_finish */\n   0\t\t\t\t\t/* letter */\n };"}]}