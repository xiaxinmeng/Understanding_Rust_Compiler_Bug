{"sha": "ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM1ZTY4MTQ4NWEzYTA2OWNjZjAzMTZkYWNiYTRjZTZmYTM0OGM2Yg==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@linaro.org", "date": "2018-12-19T15:01:41Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2018-12-19T15:01:41Z"}, "message": "[ARM] Do softfloat when -mfpu set, -mfloat-abi=softfp\n\nFP instructions are only enabled for TARGET_32BIT and TARGET_HARD_FLOAT\nbut GCC only gives an error when TARGET_HARD_FLOAT is true and -mfpu is\nnot set. Among other things, it makes some of the cmse tests (eg.\ngcc.target/arm/cmse/baseline/softfp.c) fail when targeting\n-march=armv8-m.base -mcmse -mfpu=<something> -mfloat-abi=softfp. This\ncommit adds an extra check for TARGET_32BIT to TARGET_HARD_FLOAT such\nthat it is false on TARGET_THUMB1 targets even when a FPU is specified.\n\n2018-12-19  thomas Preud'homme  <thomas.preudhomme@linaro.org>\n\n    gcc/\n    * config/arm/arm.h (TARGET_HARD_FLOAT): Restrict to TARGET_32BIT\n    targets.\n    * config/arm/arm.c (output_return_instruction): Only check\n    TARGET_HARD_FLOAT to decide whether FP instructions are available.\n\n    gcc/testsuite/\n    * gcc.target/arm/cmse/baseline/softfp.c: Force an FPU.\n\nFrom-SVN: r267270", "tree": {"sha": "f105c2e91ef6c469946b6d847eff2c2502d463cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f105c2e91ef6c469946b6d847eff2c2502d463cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/comments", "author": {"login": "tpreudhomme-linaro", "id": 43454833, "node_id": "MDQ6VXNlcjQzNDU0ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/43454833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tpreudhomme-linaro", "html_url": "https://github.com/tpreudhomme-linaro", "followers_url": "https://api.github.com/users/tpreudhomme-linaro/followers", "following_url": "https://api.github.com/users/tpreudhomme-linaro/following{/other_user}", "gists_url": "https://api.github.com/users/tpreudhomme-linaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/tpreudhomme-linaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tpreudhomme-linaro/subscriptions", "organizations_url": "https://api.github.com/users/tpreudhomme-linaro/orgs", "repos_url": "https://api.github.com/users/tpreudhomme-linaro/repos", "events_url": "https://api.github.com/users/tpreudhomme-linaro/events{/privacy}", "received_events_url": "https://api.github.com/users/tpreudhomme-linaro/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a152954ea4fee516e83b4f75a17818fbc8d555bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a152954ea4fee516e83b4f75a17818fbc8d555bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a152954ea4fee516e83b4f75a17818fbc8d555bb"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "774c4f7ce63fbcc1e9465d155febc5905b840a8a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "patch": "@@ -1,3 +1,10 @@\n+2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n+\n+\t* config/arm/arm.h (TARGET_HARD_FLOAT): Restrict to TARGET_32BIT\n+\ttargets.\n+\t* config/arm/arm.c (output_return_instruction): Only check\n+\tTARGET_HARD_FLOAT to decide whether FP instructions are available.\n+\n 2018-12-19  Tom de Vries  <tom@codesourcery.com>\n \n \t* doc/sourcebuild.texi (Commands for use in dg-final, Scan optimization"}, {"sha": "509f287aa636fc0991b298d0aa3cf514d65b80cb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "patch": "@@ -19872,7 +19872,7 @@ output_return_instruction (rtx operand, bool really_return, bool reverse,\n \t\t\t  \"msr%s\\tAPSR_nzcvq, %%|lr\", conditional);\n \n \t      output_asm_insn (instr, & operand);\n-\t      if (TARGET_HARD_FLOAT && !TARGET_THUMB1)\n+\t      if (TARGET_HARD_FLOAT)\n \t\t{\n \t\t  /* Clear the cumulative exception-status bits (0-4,7) and the\n \t\t     condition code bits (28-31) of the FPSCR.  We need to"}, {"sha": "b01486a69177b5758ed2a778923efbbc4c66a815", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "patch": "@@ -125,7 +125,8 @@ extern tree arm_fp16_type_node;\n /* Use hardware floating point instructions. */\n #define TARGET_HARD_FLOAT\t(arm_float_abi != ARM_FLOAT_ABI_SOFT\t\\\n \t\t\t\t && bitmap_bit_p (arm_active_target.isa, \\\n-\t\t\t\t\t\t  isa_bit_vfpv2))\n+\t\t\t\t\t\t  isa_bit_vfpv2) \\\n+\t\t\t\t && TARGET_32BIT)\n #define TARGET_SOFT_FLOAT\t(!TARGET_HARD_FLOAT)\n /* User has permitted use of FP instructions, if they exist for this\n    target.  */"}, {"sha": "a53180b8088845f599afa686e09d717959767236", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "patch": "@@ -1,3 +1,7 @@\n+2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n+\n+\t* gcc.target/arm/cmse/baseline/softfp.c: Force an FPU.\n+\n 2018-12-19  Tom de Vries  <tdevries@suse.de>\n \n \t* gcc.dg/goacc/nvptx-merged-loop.c: Move to"}, {"sha": "30b3eec078cf714466074f4bfb9e31a68869734d", "filename": "gcc/testsuite/gcc.target/arm/cmse/baseline/softfp.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbaseline%2Fsoftfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec5e681485a3a069ccf0316dacba4ce6fa348c6b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbaseline%2Fsoftfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fbaseline%2Fsoftfp.c?ref=ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "patch": "@@ -1,5 +1,7 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mcmse -mfloat-abi=softfp\" } */\n+/* Force an FPU to test that it is ignored for Thumb-1 -like targets and that\n+   no clearing of VFP register occurs.  */\n+/* { dg-options \"-mcmse -mfloat-abi=softfp -mfpu=fpv5-d16\" } */\n \n double __attribute__ ((cmse_nonsecure_call)) (*bar) (float, double);\n "}]}