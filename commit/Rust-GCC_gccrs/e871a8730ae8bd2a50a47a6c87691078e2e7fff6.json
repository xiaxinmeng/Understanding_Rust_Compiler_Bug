{"sha": "e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg3MWE4NzMwYWU4YmQyYTUwYTQ3YTZjODc2OTEwNzhlMmU3ZmZmNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-04-20T10:32:55Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-20T10:32:55Z"}, "message": "decl.c (gnat_to_gnu_entity): Also promote the alignment of constant objects, but not exceptions.\n\n\t* decl.c (gnat_to_gnu_entity) <object>: Also promote the alignment of\n\tconstant objects, but not exceptions.\n\t* trans.c (add_decl_expr): Use gnat_types_compatible_p for type\n\tcompatibility test.\n\t* utils.c (create_var_decl_1): Likewise.\n\t* utils2.c (build_binary_op) <MODIFY_EXPR>: Also use the padded view of\n\tthe type when copying to padded object and the source is a constructor.\n\nFrom-SVN: r134483", "tree": {"sha": "ea175801501f23572184c58df3fcd73cad6a8ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea175801501f23572184c58df3fcd73cad6a8ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/comments", "author": null, "committer": null, "parents": [{"sha": "def9bf340183a00cbc648eaddf24ed2d3baf32b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def9bf340183a00cbc648eaddf24ed2d3baf32b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def9bf340183a00cbc648eaddf24ed2d3baf32b4"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "9b825f6ad37e6669e560865628deb065406ff9a9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -1,3 +1,13 @@\n+2008-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* decl.c (gnat_to_gnu_entity) <object>: Also promote the alignment of\n+\tconstant objects, but not exceptions.\n+\t* trans.c (add_decl_expr): Use gnat_types_compatible_p for type\n+\tcompatibility test.\n+\t* utils.c (create_var_decl_1): Likewise.\n+\t* utils2.c (build_binary_op) <MODIFY_EXPR>: Also use the padded view of\n+\tthe type when copying to padded object and the source is a constructor.\n+\n 2008-04-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <object>: When trying to promote the"}, {"sha": "e60b44348436ae8e409f5709f38afd4a67ce96e6", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -673,18 +673,21 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && !Present (Address_Clause (gnat_entity)))\n \t  gnu_size = bitsize_unit_node;\n \n-\t/* If this is an object with no specified size and alignment, and if\n-\t   either it is atomic or we are not optimizing alignment for space\n-\t   and it is a non-scalar variable, and the size of its type is a\n-\t   constant, set the alignment to the smallest not less than the\n-\t   size, or to the biggest meaningful one, whichever is smaller.  */\n+\t/* If this is an object with no specified size and alignment, and\n+\t   if either it is atomic or we are not optimizing alignment for\n+\t   space and it is composite and not an exception, an Out parameter\n+\t   or a reference to another object, and the size of its type is a\n+\t   constant, set the alignment to the smallest one which is not\n+\t   smaller than the size, with an appropriate cap.  */\n \tif (!gnu_size && align == 0\n \t    && (Is_Atomic (gnat_entity)\n \t\t|| (!Optimize_Alignment_Space (gnat_entity)\n-\t\t    && kind == E_Variable\n-\t\t    && AGGREGATE_TYPE_P (gnu_type)\n-\t\t    && !const_flag && No (Renamed_Object (gnat_entity))\n-\t\t    && !imported_p && No (Address_Clause (gnat_entity))))\n+\t\t    && kind != E_Exception\n+\t\t    && kind != E_Out_Parameter\n+\t\t    && Is_Composite_Type (Etype (gnat_entity))\n+\t\t    && !imported_p\n+\t\t    && No (Renamed_Object (gnat_entity))\n+\t\t    && No (Address_Clause (gnat_entity))))\n \t    && TREE_CODE (TYPE_SIZE (gnu_type)) == INTEGER_CST)\n \t  {\n \t    /* No point in jumping through all the hoops needed in order"}, {"sha": "a6492c50269ec2b4485503675c4f93082b98a7e8", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -5098,7 +5098,7 @@ add_decl_expr (tree gnu_decl, Entity_Id gnat_entity)\n      valid for the context.  Similar to init_const in create_var_decl_1.  */\n   if (TREE_CODE (gnu_decl) == VAR_DECL\n       && (gnu_init = DECL_INITIAL (gnu_decl)) != NULL_TREE\n-      && (TYPE_MAIN_VARIANT (type) != TYPE_MAIN_VARIANT (TREE_TYPE (gnu_init))\n+      && (!gnat_types_compatible_p (type, TREE_TYPE (gnu_init))\n \t  || (TREE_STATIC (gnu_decl)\n \t      && !initializer_constant_valid_p (gnu_init,\n \t\t\t\t\t\tTREE_TYPE (gnu_init)))))"}, {"sha": "e3867fa69127c070de82f34091c6d75087462358", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -1447,7 +1447,7 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n {\n   bool init_const\n     = (var_init != 0\n-       && TYPE_MAIN_VARIANT (type) == TYPE_MAIN_VARIANT (TREE_TYPE (var_init))\n+       && gnat_types_compatible_p (type, TREE_TYPE (var_init))\n        && (global_bindings_p () || static_flag\n \t   ? initializer_constant_valid_p (var_init, TREE_TYPE (var_init)) != 0\n \t   : TREE_CONSTANT (var_init)));"}, {"sha": "877959d946cc3dfdf81b79d3bc81e47964ffa2cc", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -695,16 +695,19 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \n       /* If we are copying between padded objects of the same underlying\n \t type with a non-zero size, use the padded view of the type, this\n-\t is very likely more efficient.  */\n+\t is very likely more efficient; but gnat_to_gnu will have removed\n+\t the padding on the RHS so we have to make sure that we can safely\n+\t put it back.  */\n       else if (TREE_CODE (left_type) == RECORD_TYPE\n \t       && TYPE_IS_PADDING_P (left_type)\n \t       && TREE_TYPE (TYPE_FIELDS (left_type)) == right_type\n \t       && !integer_zerop (TYPE_SIZE (right_type))\n-\t       && TREE_CODE (right_operand) == COMPONENT_REF\n-\t       && TREE_CODE (TREE_TYPE (TREE_OPERAND (right_operand, 0)))\n-\t\t  == RECORD_TYPE\n-\t       && TYPE_IS_PADDING_P\n-\t\t  (TREE_TYPE (TREE_OPERAND (right_operand, 0))))\n+\t       && ((TREE_CODE (right_operand) == COMPONENT_REF\n+\t\t    && TREE_CODE (TREE_TYPE (TREE_OPERAND (right_operand, 0)))\n+\t\t       == RECORD_TYPE\n+\t\t    && TYPE_IS_PADDING_P\n+\t\t       (TREE_TYPE (TREE_OPERAND (right_operand, 0))))\n+\t\t   || TREE_CODE (right_operand) == CONSTRUCTOR))\n \toperation_type = left_type;\n \n       /* Find the best type to use for copying between aggregate types.  */"}, {"sha": "d200785acb6a1d363c871d4480fd4e3006b6f84b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -1,3 +1,7 @@\n+2008-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/alignment6.adb: New test.\n+\n 2008-04-19  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/35944"}, {"sha": "f2889a50ecfb43ca788b4601485f1c78facb4000", "filename": "gcc/testsuite/gnat.dg/alignment6.adb", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Ftestsuite%2Fgnat.dg%2Falignment6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e871a8730ae8bd2a50a47a6c87691078e2e7fff6/gcc%2Ftestsuite%2Fgnat.dg%2Falignment6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Falignment6.adb?ref=e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "patch": "@@ -0,0 +1,32 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws -fdump-tree-gimple\" }\n+\n+procedure Alignment6 is\n+\n+   type MY_REC is\n+     record\n+       A1 : INTEGER range -3 .. 3 ; -- symmetric\n+       A2 : BOOLEAN ;\n+       A3 : INTEGER range 0 .. 15 ; -- positive\n+       A4 : INTEGER range 10 .. 100 ; -- arbitrary\n+       A5 : BOOLEAN ;  --5\n+     end record ;\n+\n+   for MY_REC use\n+     record\n+       A1 at 0 range 0 .. 2 ;\n+       A2 at 0 range 3 .. 3 ;\n+       A3 at 0 range 4 .. 7 ;\n+       A4 at 0 range 8 .. 15 ;\n+       A5 at 0 range 16 .. 16 ;\n+     end record ;\n+\n+   A_REC : MY_REC := ( 1 , TRUE , 7 , 11 , FALSE );\n+   B_REC : MY_REC;\n+\n+begin\n+   B_REC := A_REC;\n+end;\n+\n+-- { dg-final { scan-tree-dump-not \"VIEW_CONVERT_EXPR\" \"gimple\" } }\n+-- { dg-final { cleanup-tree-dump \"gimple\" } }"}]}