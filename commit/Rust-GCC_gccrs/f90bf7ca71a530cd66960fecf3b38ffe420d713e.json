{"sha": "f90bf7ca71a530cd66960fecf3b38ffe420d713e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwYmY3Y2E3MWE1MzBjZDY2OTYwZmVjZjNiMzhmZmU0MjBkNzEzZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-05-08T14:37:55Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-05-08T14:37:55Z"}, "message": "re PR target/6569 (sparc-sun-solaris2.7 C testsuite regression in compile/20011119-2.c)\n\n\tPR c/6569.\n\t* varasm.c (mark_weak): New function.\n\t(merge_weak): Use it.  Do not call declare_weak.\n\t(declare_weak): Use merge_weak.\n\n\tPR c/6569\n\t* gcc.dg/weak-3.c: Update location of warning messages.\n\t* gcc.dg/weak-5.c: Likewise.\n\nFrom-SVN: r53293", "tree": {"sha": "e29282f7d185b01464fe3cb43ca3cccca118645a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e29282f7d185b01464fe3cb43ca3cccca118645a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f90bf7ca71a530cd66960fecf3b38ffe420d713e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90bf7ca71a530cd66960fecf3b38ffe420d713e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90bf7ca71a530cd66960fecf3b38ffe420d713e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90bf7ca71a530cd66960fecf3b38ffe420d713e/comments", "author": null, "committer": null, "parents": [{"sha": "61b8fbecf711195d0b9be7cc56fd2ed5030b97e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b8fbecf711195d0b9be7cc56fd2ed5030b97e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b8fbecf711195d0b9be7cc56fd2ed5030b97e0"}], "stats": {"total": 101, "additions": 78, "deletions": 23}, "files": [{"sha": "2df36563dcdb9f4c850effe599ac03d38c17b229", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f90bf7ca71a530cd66960fecf3b38ffe420d713e", "patch": "@@ -1,3 +1,10 @@\n+2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c/6569.\n+\t* varasm.c (mark_weak): New function.\n+\t(merge_weak): Use it.  Do not call declare_weak.\n+\t(declare_weak): Use merge_weak.\n+\n Wed May  8 13:12:11 CEST 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* cse.c (dead_libcall_p): Update counts."}, {"sha": "c1dc84933570cb96bed67a35266c7dcc39bc68aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f90bf7ca71a530cd66960fecf3b38ffe420d713e", "patch": "@@ -1,3 +1,9 @@\n+2002-05-08  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c/6569\n+\t* gcc.dg/weak-3.c: Update location of warning messages.\n+\t* gcc.dg/weak-5.c: Likewise.\n+\n 2002-05-06  Roger Sayle  <roger@eyesopen.com>\n \n \t* gcc.c-torture/execute/20020506-1.c: New test case."}, {"sha": "1675ab10f3bd5fe40812a4812c9cfacb522f267c", "filename": "gcc/testsuite/gcc.dg/weak-3.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-3.c?ref=f90bf7ca71a530cd66960fecf3b38ffe420d713e", "patch": "@@ -34,12 +34,12 @@ void * foo1b (void)\n }\n \n \n-extern void * ffoo1c (void);  /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+extern void * ffoo1c (void);  \n void * foo1c (void)\n {\n   return (void *)ffoo1c;\n }\n-extern void * ffoo1c (void) __attribute__((weak));\n+extern void * ffoo1c (void) __attribute__((weak)); /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n \n \n int ffoo1d (void);\n@@ -56,15 +56,15 @@ void * foo1e (void)\n }\n \n \n-extern void * ffoo1f (void);    /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+extern void * ffoo1f (void);    \n extern void * ffoox1f (void);\n void * foo1f (void)\n {\n   if (ffoo1f)\n     ffoo1f ();\n   return 0;\n }\n-extern void * ffoo1f (void)  __attribute__((weak, alias (\"ffoox1f\")));\n+extern void * ffoo1f (void)  __attribute__((weak, alias (\"ffoox1f\"))); /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n \n \n extern void * ffoo1g (void);"}, {"sha": "eec210992f455201c65cde1892563379a763e97b", "filename": "gcc/testsuite/gcc.dg/weak-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak-5.c?ref=f90bf7ca71a530cd66960fecf3b38ffe420d713e", "patch": "@@ -39,12 +39,12 @@ void * foo1b (void)\n }\n \n \n-extern int vfoo1c;  /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n+extern int vfoo1c;  \n void * foo1c (void)\n {\n   return (void *)&vfoo1c;\n }\n-extern int vfoo1c __attribute__((weak));\n+extern int vfoo1c __attribute__((weak)); /* { dg-warning \"weak declaration\" \"weak declaration\" } */\n \n \n extern int vfoo1d __attribute__((weak));"}, {"sha": "a463fb39cae1c74c766f796217afbb2df05002df", "filename": "gcc/varasm.c", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f90bf7ca71a530cd66960fecf3b38ffe420d713e/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f90bf7ca71a530cd66960fecf3b38ffe420d713e", "patch": "@@ -189,6 +189,7 @@ static int const_str_htab_eq\t\tPARAMS ((const void *x, const void *y));\n static void const_str_htab_del\t\tPARAMS ((void *));\n static void asm_emit_uninitialised\tPARAMS ((tree, const char*, int, int));\n static void resolve_unique_section\tPARAMS ((tree, int));\n+static void mark_weak                   PARAMS ((tree));\n \f\n static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP\n@@ -4993,29 +4994,76 @@ output_constructor (exp, size, align)\n    to be emitted.  */\n static tree weak_decls;\n \n+/* Mark DECL as weak.  */\n+\n+static void\n+mark_weak (decl)\n+     tree decl;\n+{\n+  DECL_WEAK (decl) = 1;\n+\n+  if (DECL_RTL_SET_P (decl)\n+      && GET_CODE (DECL_RTL (decl)) == MEM\n+      && XEXP (DECL_RTL (decl), 0)\n+      && GET_CODE (XEXP (DECL_RTL (decl), 0)) == SYMBOL_REF)\n+    SYMBOL_REF_WEAK (XEXP (DECL_RTL (decl), 0)) = 1;\n+}\n+ \n /* Merge weak status between NEWDECL and OLDDECL.  */\n \n void\n merge_weak (newdecl, olddecl)\n      tree newdecl;\n      tree olddecl;\n {\n-  tree decl;\n-\n   if (DECL_WEAK (newdecl) == DECL_WEAK (olddecl))\n     return;\n \n-  decl = DECL_WEAK (olddecl) ? newdecl : olddecl;\n-\n   if (SUPPORTS_WEAK\n+      && DECL_WEAK (newdecl) \n       && DECL_EXTERNAL (newdecl) && DECL_EXTERNAL (olddecl)\n-      && (TREE_CODE (decl) != VAR_DECL\n-\t  || ! TREE_STATIC (decl))\n-      && TREE_USED (decl)\n-      && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-    warning_with_decl (decl, \"weak declaration of `%s' after first use results in unspecified behavior\");\n+      && (TREE_CODE (olddecl) != VAR_DECL || ! TREE_STATIC (olddecl))\n+      && TREE_USED (olddecl)\n+      && TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (olddecl)))\n+    warning_with_decl (newdecl, \"weak declaration of `%s' after first use results in unspecified behavior\");\n+\n+  if (DECL_WEAK (newdecl))\n+    {\n+      tree wd;\n+      \n+      /* NEWDECL is weak, but OLDDECL is not.  */\n+\n+      /* If we already output the OLDDECL, we're in trouble; we can't\n+\t go back and make it weak.  This error cannot caught in\n+\t declare_weak because the NEWDECL and OLDDECL was not yet\n+\t been merged; therefore, TREE_ASM_WRITTEN was not set.  */\n+      if (TREE_CODE (olddecl) == FUNCTION_DECL && TREE_ASM_WRITTEN (olddecl))\n+\terror_with_decl (newdecl, \n+\t\t\t \"weak declaration of `%s' must precede definition\");\n+      \n+      if (SUPPORTS_WEAK)\n+\t{\n+\t  /* We put the NEWDECL on the weak_decls list at some point.\n+\t     Replace it with the OLDDECL.  */\n+\t  for (wd = weak_decls; wd; wd = TREE_CHAIN (wd))\n+\t    if (TREE_VALUE (wd) == newdecl)\n+\t      {\n+\t\tTREE_VALUE (wd) = olddecl;\n+\t\tbreak;\n+\t      }\n+\t  /* We may not find the entry on the list.  If NEWDECL is a\n+\t     weak alias, then we will have already called\n+\t     globalize_decl to remove the entry; in that case, we do\n+\t     not need to do anything.  */\n+\t}\n \n-  declare_weak (decl);\n+      /* Make the OLDDECL weak; it's OLDDECL that we'll be keeping.  */\n+      mark_weak (olddecl);\n+    }\n+  else\n+    /* OLDDECL was weak, but NEWDECL was not explicitly marked as\n+       weak.  Just update NEWDECL to indicate that it's weak too.  */\n+    mark_weak (newdecl);\n }\n \n /* Declare DECL to be a weak symbol.  */\n@@ -5036,13 +5084,7 @@ declare_weak (decl)\n   else\n     warning_with_decl (decl, \"weak declaration of `%s' not supported\");\n \n-  DECL_WEAK (decl) = 1;\n-\n-  if (DECL_RTL_SET_P (decl)\n-      && GET_CODE (DECL_RTL (decl)) == MEM\n-      && XEXP (DECL_RTL (decl), 0)\n-      && GET_CODE (XEXP (DECL_RTL (decl), 0)) == SYMBOL_REF)\n-    SYMBOL_REF_WEAK (XEXP (DECL_RTL (decl), 0)) = 1;\n+  mark_weak (decl);\n }\n \n /* Emit any pending weak declarations.  */"}]}