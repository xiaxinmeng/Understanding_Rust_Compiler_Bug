{"sha": "7a36dc06de2219590b17a8a06d0d4cac9bbadd7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzNmRjMDZkZTIyMTk1OTBiMTdhOGEwNmQwZDRjYWM5YmJhZGQ3Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-11-30T08:48:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-11-30T08:48:02Z"}, "message": "tsan.c (is_load_of_const_p): Removed.\n\n\t* tsan.c (is_load_of_const_p): Removed.\n\t(instrument_expr): Use result of get_inner_reference\n\tinstead of get_base_address, avoid some unnecessary tests,\n\tuse !pt_solution_includes and !may_be_aliased tests to\n\tcheck whether base might escape current function.\n\nFrom-SVN: r193989", "tree": {"sha": "51047645c426b842ad04efa81a801bf401873254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51047645c426b842ad04efa81a801bf401873254"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52831d13a7292d81342570c90c863d26609450d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52831d13a7292d81342570c90c863d26609450d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52831d13a7292d81342570c90c863d26609450d1"}], "stats": {"total": 86, "additions": 29, "deletions": 57}, "files": [{"sha": "aada37b971e46c795a4e30f16e18b75dc2623e40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a36dc06de2219590b17a8a06d0d4cac9bbadd7f", "patch": "@@ -1,3 +1,11 @@\n+2012-11-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tsan.c (is_load_of_const_p): Removed.\n+\t(instrument_expr): Use result of get_inner_reference\n+\tinstead of get_base_address, avoid some unnecessary tests,\n+\tuse !pt_solution_includes and !may_be_aliased tests to\n+\tcheck whether base might escape current function.\n+\n 2012-11-30  Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n \n \t* gensupport.c (maybe_eval_c_test): Remove not-null check for expr."}, {"sha": "fe465ef2a3bc5e1e49dd6ec860fcb440ab2b7290", "filename": "gcc/tsan.c", "status": "modified", "additions": 21, "deletions": 57, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a36dc06de2219590b17a8a06d0d4cac9bbadd7f/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=7a36dc06de2219590b17a8a06d0d4cac9bbadd7f", "patch": "@@ -84,65 +84,18 @@ is_vptr_store (gimple stmt, tree expr, bool is_write)\n   return NULL;\n }\n \n-/* Checks as to whether EXPR refers to constant var/field/param.\n-   Don't bother to instrument them.  */\n-\n-static bool\n-is_load_of_const_p (tree expr, bool is_write)\n-{\n-  if (is_write)\n-    return false;\n-  if (TREE_CODE (expr) == COMPONENT_REF)\n-    expr = TREE_OPERAND (expr, 1);\n-  if (TREE_CODE (expr) == VAR_DECL\n-      || TREE_CODE (expr) == PARM_DECL\n-      || TREE_CODE (expr) == FIELD_DECL)\n-    {\n-      if (TREE_READONLY (expr))\n-\treturn true;\n-    }\n-  return false;\n-}\n-\n /* Instruments EXPR if needed. If any instrumentation is inserted,\n    return true.  */\n \n static bool\n instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n {\n-  enum tree_code tcode;\n   tree base, rhs, expr_type, expr_ptr, builtin_decl;\n   basic_block bb;\n   HOST_WIDE_INT size;\n   gimple stmt, g;\n   location_t loc;\n \n-  base = get_base_address (expr);\n-  if (base == NULL_TREE\n-      || TREE_CODE (base) == SSA_NAME\n-      || TREE_CODE (base) == STRING_CST)\n-    return false;\n-\n-  tcode = TREE_CODE (expr);\n-\n-  /* Below are things we do not instrument\n-     (no possibility of races or not implemented yet).  */\n-  if (/* Compiler-emitted artificial variables.  */\n-      (DECL_P (expr) && DECL_ARTIFICIAL (expr))\n-      /* The var does not live in memory -> no possibility of races.  */\n-      || (tcode == VAR_DECL\n-\t  && !TREE_ADDRESSABLE (expr)\n-\t  && TREE_STATIC (expr) == 0)\n-      /* Not implemented.  */\n-      || TREE_CODE (TREE_TYPE (expr)) == RECORD_TYPE\n-      /* Not implemented.  */\n-      || tcode == CONSTRUCTOR\n-      /* Not implemented.  */\n-      || tcode == PARM_DECL\n-      /* Load of a const variable/parameter/field.  */\n-      || is_load_of_const_p (expr, is_write))\n-    return false;\n-\n   size = int_size_in_bytes (TREE_TYPE (expr));\n   if (size == -1)\n     return false;\n@@ -153,18 +106,29 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n   tree offset;\n   enum machine_mode mode;\n   int volatilep = 0, unsignedp = 0;\n-  get_inner_reference (expr, &bitsize, &bitpos, &offset,\n-\t\t       &mode, &unsignedp, &volatilep, false);\n-  if (bitpos % (size * BITS_PER_UNIT)\n-      || bitsize != size * BITS_PER_UNIT)\n+  base = get_inner_reference (expr, &bitsize, &bitpos, &offset,\n+\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\n+  /* No need to instrument accesses to decls that don't escape,\n+     they can't escape to other threads then.  */\n+  if (DECL_P (base))\n+    {\n+      struct pt_solution pt;\n+      memset (&pt, 0, sizeof (pt));\n+      pt.escaped = 1;\n+      pt.ipa_escaped = flag_ipa_pta != 0;\n+      pt.nonlocal = 1;\n+      if (!pt_solution_includes (&pt, base))\n+\treturn false;\n+      if (!is_global_var (base) && !may_be_aliased (base))\n+\treturn false;\n+    }\n+\n+  if (TREE_READONLY (base))\n     return false;\n \n-  /* TODO: handle other case: ARRAY_RANGE_REF.  */\n-  if (tcode != ARRAY_REF\n-      && tcode != VAR_DECL\n-      && tcode != COMPONENT_REF\n-      && tcode != INDIRECT_REF\n-      && tcode != MEM_REF)\n+  if (bitpos % (size * BITS_PER_UNIT)\n+      || bitsize != size * BITS_PER_UNIT)\n     return false;\n \n   stmt = gsi_stmt (gsi);"}]}