{"sha": "83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNmZTJiOTIxODMwYzE3N2UzZGVlNTE0YWEwN2NiYzdjOGNlZWYxYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2020-01-15T21:28:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2020-01-15T21:28:46Z"}, "message": "Fix \"PR c++/91073 if constexpr no longer works directly with Concepts.\"\n\nThis is a rather serious regression, filed in July 2019. Luckily the\nfix is simple: is localized to parser.c and cp-tree.h in cp and boils\ndown to only a few lines.\n\nTesting OK on x86_64-linux. Approved off-line by Jason Merrill.\n\n\t/cp\n\tPR c++/91073\n\t* cp-tree.h (is_constrained_auto): New.\n\t* parser.c (cp_parser_maybe_commit_to_declaration): Correctly\n\thandle concept-check expressions; take a cp_decl_specifier_seq*\n\tinstead of a bool.\n\t(cp_parser_condition): Update call.\n\t(cp_parser_simple_declaration): Likewise.\n\t(cp_parser_placeholder_type_specifier): Correctly handle\n\tconcept-check expressions.\n\n\t/testsuite\n\tPR c++/91073\n\t* g++.dg/concepts/pr91073-1.C: New.\n\t* g++.dg/concepts/pr91073-2.C: Likewise.", "tree": {"sha": "9754091a4864e4d6aa92c7df7031bc5253b07d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9754091a4864e4d6aa92c7df7031bc5253b07d07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/comments", "author": null, "committer": null, "parents": [{"sha": "299ddc612136421f1d9865ea4f2f84f7e3791824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299ddc612136421f1d9865ea4f2f84f7e3791824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299ddc612136421f1d9865ea4f2f84f7e3791824"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "47d55e5066d608a96d9bdca9fe1058eaa8b3a88a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "patch": "@@ -1,3 +1,15 @@\n+2020-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/91073\n+\t* cp-tree.h (is_constrained_auto): New.\n+\t* parser.c (cp_parser_maybe_commit_to_declaration): Correctly\n+\thandle concept-check expressions; take a cp_decl_specifier_seq*\n+\tinstead of a bool.\n+\t(cp_parser_condition): Update call.\n+\t(cp_parser_simple_declaration): Likewise.\n+\t(cp_parser_placeholder_type_specifier): Correctly handle\n+\tconcept-check expressions.\n+\n 2020-01-15  Jason Merrill  <jason@redhat.com>\n \n \tRevert"}, {"sha": "48cc44134bc8e9cedc4f3f2d526bd3b92d9f2365", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "patch": "@@ -8069,6 +8069,14 @@ concept_check_p (const_tree t)\n   return false;\n }\n \n+/* True if t is a \"constrained auto\" type-specifier.  */\n+\n+inline bool\n+is_constrained_auto (const_tree t)\n+{\n+  return is_auto (t) && PLACEHOLDER_TYPE_CONSTRAINTS (t);\n+}\n+\n #if CHECKING_P\n namespace selftest {\n   extern void run_cp_tests (void);"}, {"sha": "c5f9798a5edff308940d81d9ad2a7c47354d2bc2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "patch": "@@ -12053,18 +12053,22 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n }\n \n /* Helper function for cp_parser_condition and cp_parser_simple_declaration.\n-   If we have seen at least one decl-specifier, and the next token\n-   is not a parenthesis, then we must be looking at a declaration.\n-   (After \"int (\" we might be looking at a functional cast.)  */\n+   If we have seen at least one decl-specifier, and the next token is not\n+   a parenthesis (after \"int (\" we might be looking at a functional cast)\n+   neither we are dealing with a concept-check expression then we must be\n+   looking at a declaration.  */\n \n static void\n cp_parser_maybe_commit_to_declaration (cp_parser* parser,\n-\t\t\t\t       bool any_specifiers_p)\n+\t\t\t\t       cp_decl_specifier_seq *decl_specs)\n {\n-  if (any_specifiers_p\n+  if (decl_specs->any_specifiers_p\n       && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN)\n       && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE)\n-      && !cp_parser_error_occurred (parser))\n+      && !cp_parser_error_occurred (parser)\n+      && !(decl_specs->type\n+\t   && TREE_CODE (decl_specs->type) == TYPE_DECL\n+\t   && is_constrained_auto (TREE_TYPE (decl_specs->type))))\n     cp_parser_commit_to_tentative_parse (parser);\n }\n \n@@ -12139,8 +12143,7 @@ cp_parser_condition (cp_parser* parser)\n      decl-specifiers.  */\n   tree prefix_attributes = type_specifiers.attributes;\n \n-  cp_parser_maybe_commit_to_declaration (parser,\n-\t\t\t\t\t type_specifiers.any_specifiers_p);\n+  cp_parser_maybe_commit_to_declaration (parser, &type_specifiers);\n \n   /* If all is well, we might be looking at a declaration.  */\n   if (!cp_parser_error_occurred (parser))\n@@ -13535,8 +13538,7 @@ cp_parser_simple_declaration (cp_parser* parser,\n       goto done;\n     }\n \n-  cp_parser_maybe_commit_to_declaration (parser,\n-\t\t\t\t\t decl_specifiers.any_specifiers_p);\n+  cp_parser_maybe_commit_to_declaration (parser, &decl_specifiers);\n \n   /* Look for C++17 decomposition declaration.  */\n   for (size_t n = 1; ; n++)\n@@ -18266,6 +18268,10 @@ cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,\n       && !parser->in_result_type_constraint_p\n       && !placeholder)\n     {\n+      if (tentative)\n+\t/* Perhaps it's a concept-check expression (c++/91073).  */\n+\treturn error_mark_node;\n+\n       tree id = build_nt (TEMPLATE_ID_EXPR, tmpl, args);\n       tree expr = DECL_P (orig_tmpl) ? DECL_NAME (con) : id;\n       error_at (input_location,"}, {"sha": "143fda91d17d80cf2c10b8b4b1a9214510276f9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "patch": "@@ -1,3 +1,9 @@\n+2020-01-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/91073\n+\t* g++.dg/concepts/pr91073-1.C: New.\n+\t* g++.dg/concepts/pr91073-2.C: Likewise.\n+\n 2020-01-15  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* gcc.dg/pr90838.c: New test."}, {"sha": "f5f382123cc52443af9b8c52a08c33b7a28fe3b2", "filename": "gcc/testsuite/g++.dg/concepts/pr91073-1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr91073-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr91073-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr91073-1.C?ref=83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "patch": "@@ -0,0 +1,37 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-fconcepts\" }\n+\n+template<typename T, typename... Params>\n+concept HasInit = requires(T t, Params... p) { t.init(p...); };\n+\n+struct Initable { void init(int) { } };\n+struct Createable { void create(int) { } };\n+\n+struct Foo{\n+  template<typename CB>\n+  void for_each(CB&& cb)\n+  {\n+    Initable i;\n+    Createable c;\n+    cb(i);\n+    cb(c);\n+  }\n+\n+  Foo()\n+  {\n+    struct Bar { int x; };\n+    for_each(\n+\t     [&](auto& foo){\n+\t      if constexpr (HasInit<decltype(foo), int>)\n+                {\n+                    foo.init(5);\n+                }\n+\t     });\n+  }\n+};\n+\n+int main()\n+{\n+  Foo f;\n+  return 0;\n+}"}, {"sha": "2900aaeff6956a3386801e7a65801c30ff89e306", "filename": "gcc/testsuite/g++.dg/concepts/pr91073-2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr91073-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83fe2b921830c177e3dee514aa07cbc7c8ceef1c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr91073-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fpr91073-2.C?ref=83fe2b921830c177e3dee514aa07cbc7c8ceef1c", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-fconcepts\" }\n+\n+template<typename P, typename Arghhh = void>\n+concept one_or_two = true;\n+\n+template<typename P>\n+concept one = one_or_two<P>;\n+\n+template<typename T>\n+constexpr void\n+foo()\n+{\n+  if (one<T>) // OK\n+  { }\n+\n+  if (one_or_two<T>) // { dg-bogus \"before\" }\n+  { }\n+}"}]}