{"sha": "620adbec08f9483d73b1f1e1edcd2f181a213a3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIwYWRiZWMwOGY5NDgzZDczYjFmMWUxZWRjZDJmMTgxYTIxM2EzYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-10T19:32:34Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-10T19:32:34Z"}, "message": "constexpr.c (free_constructor): New.\n\n\t* constexpr.c (free_constructor): New.\n\n\t(cxx_eval_call_expression): Free parameter value CONSTRUCTORs.\n\nFrom-SVN: r272127", "tree": {"sha": "c3552ddc778bab30df301e0a6fa24c0b56f3a7e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3552ddc778bab30df301e0a6fa24c0b56f3a7e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/620adbec08f9483d73b1f1e1edcd2f181a213a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620adbec08f9483d73b1f1e1edcd2f181a213a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/620adbec08f9483d73b1f1e1edcd2f181a213a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/620adbec08f9483d73b1f1e1edcd2f181a213a3c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b9eb42a4168c342e5cd71b13d21e63ba7e1b7ab"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "084e6239bcd922cccb37649017959214e8195ea0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620adbec08f9483d73b1f1e1edcd2f181a213a3c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620adbec08f9483d73b1f1e1edcd2f181a213a3c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=620adbec08f9483d73b1f1e1edcd2f181a213a3c", "patch": "@@ -1,5 +1,8 @@\n 2019-06-10  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (free_constructor): New.\n+\t(cxx_eval_call_expression): Free parameter value CONSTRUCTORs.\n+\n \t* constexpr.c (unshare_constructor): Only unshare if T is itself a\n \tCONSTRUCTOR.\n \t(cxx_eval_call_expression): Don't call it on the result here."}, {"sha": "a2f29694462326495309d56440354d1feb30a1d4", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/620adbec08f9483d73b1f1e1edcd2f181a213a3c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/620adbec08f9483d73b1f1e1edcd2f181a213a3c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=620adbec08f9483d73b1f1e1edcd2f181a213a3c", "patch": "@@ -1350,6 +1350,30 @@ unshare_constructor (tree t)\n   return t;\n }\n \n+/* If T is a CONSTRUCTOR, ggc_free T and any sub-CONSTRUCTORs.  */\n+\n+static void\n+free_constructor (tree t)\n+{\n+  if (!t || TREE_CODE (t) != CONSTRUCTOR)\n+    return;\n+  releasing_vec ctors;\n+  vec_safe_push (ctors, t);\n+  while (!ctors->is_empty ())\n+    {\n+      tree c = ctors->pop ();\n+      if (vec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (c))\n+\t{\n+\t  constructor_elt *ce;\n+\t  for (HOST_WIDE_INT i = 0; vec_safe_iterate (elts, i, &ce); ++i)\n+\t    if (TREE_CODE (ce->value) == CONSTRUCTOR)\n+\t      vec_safe_push (ctors, ce->value);\n+\t  ggc_free (elts);\n+\t}\n+      ggc_free (c);\n+    }\n+}\n+\n /* Subroutine of cxx_eval_call_expression.\n    We are processing a call expression (either CALL_EXPR or\n    AGGR_INIT_EXPR) in the context of CTX.  Evaluate\n@@ -1398,7 +1422,8 @@ cxx_bind_parameters_in_call (const constexpr_ctx *ctx, tree t,\n \n       if (!*non_constant_p)\n \t{\n-\t  /* Don't share a CONSTRUCTOR that might be changed.  */\n+\t  /* Unsharing here isn't necessary for correctness, but it\n+\t     significantly improves memory performance for some reason.  */\n \t  arg = unshare_constructor (arg);\n \t  /* Make sure the binding has the same type as the parm.  But\n \t     only for constant args.  */\n@@ -1733,7 +1758,11 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n     void preserve () { do_free = false; }\n     ~free_bindings () {\n       if (do_free)\n-\tggc_free (bindings);\n+\t{\n+\t  for (int i = 0; i < TREE_VEC_LENGTH (bindings); ++i)\n+\t    free_constructor (TREE_VEC_ELT (bindings, i));\n+\t  ggc_free (bindings);\n+\t}\n     }\n   } fb (new_call.bindings);\n \n@@ -1804,6 +1833,7 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n       else\n \t{\n \t  tree body, parms, res;\n+\t  releasing_vec ctors;\n \n \t  /* Reuse or create a new unshared copy of this function's body.  */\n \t  tree copy = get_fundef_copy (new_call.fundef);\n@@ -1819,6 +1849,8 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t      tree arg = TREE_VEC_ELT (bound, i);\n \t      /* Don't share a CONSTRUCTOR that might be changed.  */\n \t      arg = unshare_constructor (arg);\n+\t      if (TREE_CODE (arg) == CONSTRUCTOR)\n+\t\tvec_safe_push (ctors, arg);\n \t      ctx->values->put (remapped, arg);\n \t      remapped = DECL_CHAIN (remapped);\n \t    }\n@@ -1884,6 +1916,14 @@ cxx_eval_call_expression (const constexpr_ctx *ctx, tree t,\n \t  for (tree parm = parms; parm; parm = TREE_CHAIN (parm))\n \t    ctx->values->remove (parm);\n \n+\t  /* Free any parameter CONSTRUCTORs we aren't returning directly.  */\n+\t  while (!ctors->is_empty ())\n+\t    {\n+\t      tree c = ctors->pop ();\n+\t      if (c != result)\n+\t\tfree_constructor (c);\n+\t    }\n+\n \t  /* Make the unshared function copy we used available for re-use.  */\n \t  save_fundef_copy (fun, copy);\n \t}"}]}