{"sha": "624d31fe0135b7b33529f4e8fae88a4877bfc204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI0ZDMxZmUwMTM1YjdiMzM1MjlmNGU4ZmFlODhhNDg3N2JmYzIwNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-10-05T11:29:35Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-10-05T11:29:35Z"}, "message": "Replace REAL_VALUES_EQUAL with real_equal\n\nRichard B suggested we should replace dconsthalf etc. with\ndconst<1, 2> ().  When I tried that, the extra comma caused problems\nwith some lingering uses of the old target macros for handling reals\n(e.g. REAL_ARITHMETIC instead of real_arithmetic), since the constant\nwas then treated as two macro parameters.  It would have been possible\nto add an extra level of brackets to avoid this, but I thought I might\nas well take the opportunity to remove the macros instead.  (Note that\nI'm only removing macros that caused a problem directly, or are closely\nrelated to ones that did.)\n\nThis first patch replaces REAL_VALUES_EQUAL with a real_equal function.\nThe prototype is the same as for real_identical, which has already\nundergone a half-transition in this direction.\n\nBootstrapped & regression-tested on x86_64-linux-gnu.  Also tested by\nbuilding one target per CPU directory and checking that there were\nno new warnings and no changes in testsuite output at -O2.\n\ngcc/c-family/\n\t* c-lex.c (interpret_float): Use real_equal instead of\n\tREAL_VALUES_EQUAL.\n\ngcc/c/\n\t* c-typeck.c (c_tree_equal): Use real_equal instead of\n\tREAL_VALUES_EQUAL.\n\ngcc/cp/\n\t* tree.c (cp_tree_equal): Use real_equal instead of\n\tREAL_VALUES_EQUAL.\n\ngcc/\n\t* real.h (real_equal): Declare.\n\t(REAL_VALUES_EQUAL): Delete.\n\t* real.c (real_equal): New function.\n\t(real_compare): Use it.\n\t* doc/tm.texi.in (REAL_VALUES_EQUAL): Delete.\n\t* doc/tm.texi: Regenerate.\n\t* builtins.c (fold_builtin_pow, fold_builtin_load_exponent): Use\n\treal_equal instead of REAL_VALUES_EQUAL.\n\t* config/aarch64/aarch64.c (aarch64_float_const_zero_rtx_p): Likewise.\n\t* config/arm/arm.c (arm_const_double_rtx, neon_valid_immediate)\n\t(fp_const_from_val): Likewise.\n\t* config/fr30/fr30.c (fr30_const_double_is_zero): Likewise.\n\t* config/m68k/m68k.c (standard_68881_constant_p): Likewise.\n\t(floating_exact_log2): Likewise.\n\t* config/sh/sh.c (fp_zero_operand, fp_one_operand): Likewise.\n\t* config/vax/vax.c (vax_float_literal): Likewise.\n\t* config/xtensa/predicates.md (const_float_1_operand): Likewise.\n\t* cprop.c (implicit_set_cond_p): Likewise.\n\t* expmed.c (expand_mult): Likewise.\n\t* fold-const.c (const_binop): Likewise.\n\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n\t(simplify_const_binary_operation): Likewise.\n\t(simplify_const_relational_operation): Likewise.\n\t* tree-call-cdce.c (check_pow): Likewise.\n\t(gen_conditions_for_pow_cst_base): Likewise.\n\t* tree-inline.c (estimate_num_insns): Likewise.\n\t* tree-ssa-dom.c (record_equality): Likewise.\n\t* tree-ssa-math-opts.c (representable_as_half_series_p): Likewise.\n\t(gimple_expand_builtin_pow): Likewise.\n\t(pass_optimize_widening_mul::execute): Likewise.\n\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Likewise.\n\t* tree-vect-patterns.c (vect_recog_pow_pattern): Likewise.\n\t* tree.c (real_zerop, real_onep, real_minus_onep): Likewise.\n---\n gcc/builtins.c                  | 14 +++++++-------\n gcc/c-family/c-lex.c            |  6 +++---\n gcc/c/c-typeck.c                |  2 +-\n gcc/config/aarch64/aarch64.c    |  2 +-\n gcc/config/arm/arm.c            |  6 +++---\n gcc/config/fr30/fr30.c          |  2 +-\n gcc/config/m68k/m68k.c          |  6 +++---\n gcc/config/sh/sh.c              |  4 ++--\n gcc/config/vax/vax.c            |  4 ++--\n gcc/config/xtensa/predicates.md |  2 +-\n gcc/cp/tree.c                   |  2 +-\n gcc/cprop.c                     |  2 +-\n gcc/doc/tm.texi                 |  7 -------\n gcc/doc/tm.texi.in              |  7 -------\n gcc/expmed.c                    |  2 +-\n gcc/fold-const.c                |  2 +-\n gcc/real.c                      | 10 +++++++++-\n gcc/real.h                      |  4 ++--\n gcc/simplify-rtx.c              | 16 ++++++++--------\n gcc/tree-call-cdce.c            |  4 ++--\n gcc/tree-inline.c               |  5 +++--\n gcc/tree-ssa-dom.c              |  2 +-\n gcc/tree-ssa-math-opts.c        | 16 ++++++++--------\n gcc/tree-ssa-uncprop.c          |  2 +-\n gcc/tree-vect-patterns.c        |  4 ++--\n gcc/tree.c                      |  6 +++---\n 26 files changed, 67 insertions(+), 72 deletions(-)\n\nFrom-SVN: r228473", "tree": {"sha": "9ff1a2cfb5bbe32283d5601af93e89a8f4260dc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ff1a2cfb5bbe32283d5601af93e89a8f4260dc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/624d31fe0135b7b33529f4e8fae88a4877bfc204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624d31fe0135b7b33529f4e8fae88a4877bfc204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/624d31fe0135b7b33529f4e8fae88a4877bfc204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/624d31fe0135b7b33529f4e8fae88a4877bfc204/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d475a547690022aeb7e0bfbd51bc476c6ca31c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d475a547690022aeb7e0bfbd51bc476c6ca31c0"}], "stats": {"total": 218, "additions": 146, "deletions": 72}, "files": [{"sha": "8089fb029dd1a179344a8fbc2465ab2ffbcca38c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1,3 +1,67 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* real.h (real_equal): Declare.\n+\t(REAL_VALUES_EQUAL): Delete.\n+\t* real.c (real_equal): New function.\n+\t(real_compare): Use it.\n+\t* doc/tm.texi.in (REAL_VALUES_EQUAL): Delete.\n+\t* doc/tm.texi: Regenerate.\n+\t* builtins.c (fold_builtin_pow, fold_builtin_load_exponent): Use\n+\treal_equal instead of REAL_VALUES_EQUAL.\n+\t* config/aarch64/aarch64.c (aarch64_float_const_zero_rtx_p): Likewise.\n+\t* config/arm/arm.c (arm_const_double_rtx, neon_valid_immediate)\n+\t(fp_const_from_val): Likewise.\n+\t* config/fr30/fr30.c (fr30_const_double_is_zero): Likewise.\n+\t* config/m68k/m68k.c (standard_68881_constant_p): Likewise.\n+\t(floating_exact_log2): Likewise.\n+\t* config/sh/sh.c (fp_zero_operand, fp_one_operand): Likewise.\n+\t* config/vax/vax.c (vax_float_literal): Likewise.\n+\t* config/xtensa/predicates.md (const_float_1_operand): Likewise.\n+\t* cprop.c (implicit_set_cond_p): Likewise.\n+\t* expmed.c (expand_mult): Likewise.\n+\t* fold-const.c (const_binop): Likewise.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Likewise.\n+\t(simplify_const_binary_operation): Likewise.\n+\t(simplify_const_relational_operation): Likewise.\n+\t* tree-call-cdce.c (check_pow): Likewise.\n+\t(gen_conditions_for_pow_cst_base): Likewise.\n+\t* tree-inline.c (estimate_num_insns): Likewise.\n+\t* tree-ssa-dom.c (record_equality): Likewise.\n+\t* tree-ssa-math-opts.c (representable_as_half_series_p): Likewise.\n+\t(gimple_expand_builtin_pow): Likewise.\n+\t(pass_optimize_widening_mul::execute): Likewise.\n+\t* tree-ssa-uncprop.c (associate_equivalences_with_edges): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_pow_pattern): Likewise.\n+\t* tree.c (real_zerop, real_onep, real_minus_onep): Likewise.\n+---\n+ gcc/builtins.c                  | 14 +++++++-------\n+ gcc/c-family/c-lex.c            |  6 +++---\n+ gcc/c/c-typeck.c                |  2 +-\n+ gcc/config/aarch64/aarch64.c    |  2 +-\n+ gcc/config/arm/arm.c            |  6 +++---\n+ gcc/config/fr30/fr30.c          |  2 +-\n+ gcc/config/m68k/m68k.c          |  6 +++---\n+ gcc/config/sh/sh.c              |  4 ++--\n+ gcc/config/vax/vax.c            |  4 ++--\n+ gcc/config/xtensa/predicates.md |  2 +-\n+ gcc/cp/tree.c                   |  2 +-\n+ gcc/cprop.c                     |  2 +-\n+ gcc/doc/tm.texi                 |  7 -------\n+ gcc/doc/tm.texi.in              |  7 -------\n+ gcc/expmed.c                    |  2 +-\n+ gcc/fold-const.c                |  2 +-\n+ gcc/real.c                      | 10 +++++++++-\n+ gcc/real.h                      |  4 ++--\n+ gcc/simplify-rtx.c              | 16 ++++++++--------\n+ gcc/tree-call-cdce.c            |  4 ++--\n+ gcc/tree-inline.c               |  5 +++--\n+ gcc/tree-ssa-dom.c              |  2 +-\n+ gcc/tree-ssa-math-opts.c        | 16 ++++++++--------\n+ gcc/tree-ssa-uncprop.c          |  2 +-\n+ gcc/tree-vect-patterns.c        |  4 ++--\n+ gcc/tree.c                      |  6 +++---\n+ 26 files changed, 67 insertions(+), 72 deletions(-)\n+\n 2015-10-05  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/67783"}, {"sha": "9a81a182de48e5e9ec3f8ece4d25660390c09a26", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -8432,22 +8432,22 @@ fold_builtin_pow (location_t loc, tree fndecl, tree arg0, tree arg1, tree type)\n       c = TREE_REAL_CST (arg1);\n \n       /* Optimize pow(x,0.0) = 1.0.  */\n-      if (REAL_VALUES_EQUAL (c, dconst0))\n+      if (real_equal (&c, &dconst0))\n \treturn omit_one_operand_loc (loc, type, build_real (type, dconst1),\n \t\t\t\t arg0);\n \n       /* Optimize pow(x,1.0) = x.  */\n-      if (REAL_VALUES_EQUAL (c, dconst1))\n+      if (real_equal (&c, &dconst1))\n \treturn arg0;\n \n       /* Optimize pow(x,-1.0) = 1.0/x.  */\n-      if (REAL_VALUES_EQUAL (c, dconstm1))\n+      if (real_equal (&c, &dconstm1))\n \treturn fold_build2_loc (loc, RDIV_EXPR, type,\n \t\t\t    build_real (type, dconst1), arg0);\n \n       /* Optimize pow(x,0.5) = sqrt(x).  */\n       if (flag_unsafe_math_optimizations\n-\t  && REAL_VALUES_EQUAL (c, dconsthalf))\n+\t  && real_equal (&c, &dconsthalf))\n \t{\n \t  tree sqrtfn = mathfn_built_in (type, BUILT_IN_SQRT);\n \n@@ -8461,7 +8461,7 @@ fold_builtin_pow (location_t loc, tree fndecl, tree arg0, tree arg1, tree type)\n \t  const REAL_VALUE_TYPE dconstroot\n \t    = real_value_truncate (TYPE_MODE (type), dconst_third ());\n \n-\t  if (REAL_VALUES_EQUAL (c, dconstroot))\n+\t  if (real_equal (&c, &dconstroot))\n \t    {\n \t      tree cbrtfn = mathfn_built_in (type, BUILT_IN_CBRT);\n \t      if (cbrtfn != NULL_TREE)\n@@ -8480,7 +8480,7 @@ fold_builtin_pow (location_t loc, tree fndecl, tree arg0, tree arg1, tree type)\n \t      && !TREE_OVERFLOW (arg0)\n \t      && (n > 0\n \t\t  || (!flag_trapping_math && !flag_errno_math)\n-\t\t  || !REAL_VALUES_EQUAL (TREE_REAL_CST (arg0), dconst0)))\n+\t\t  || !real_equal (&TREE_REAL_CST (arg0), &dconst0)))\n \t    {\n \t      REAL_VALUE_TYPE x;\n \t      bool inexact;\n@@ -9373,7 +9373,7 @@ fold_builtin_load_exponent (location_t loc, tree arg0, tree arg1,\n \n \t\t  /* Only proceed if the target mode can hold the\n \t\t     resulting value.  */\n-\t\t  if (REAL_VALUES_EQUAL (initial_result, trunc_result))\n+\t\t  if (real_equal (&initial_result, &trunc_result))\n \t\t    return build_real (type, trunc_result);\n \t\t}\n \t    }"}, {"sha": "5af62aa5a342717b54a75735882a74e52edcdbd5", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1,3 +1,8 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-lex.c (interpret_float): Use real_equal instead of\n+\tREAL_VALUES_EQUAL.\n+\n 2015-10-04  Jason Merrill  <jason@redhat.com>\n \n \tImplement N4514, C++ Extensions for Transactional Memory."}, {"sha": "c69f4a6e817b693bc0bda8e0e2c2895ef289fe72", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -914,17 +914,17 @@ interpret_float (const cpp_token *token, unsigned int flags,\n \t}\n     }\n   /* We also give a warning if the value underflows.  */\n-  else if (REAL_VALUES_EQUAL (real, dconst0)\n+  else if (real_equal (&real, &dconst0)\n \t   || (const_type != type\n-\t       && REAL_VALUES_EQUAL (real_trunc, dconst0)))\n+\t       && real_equal (&real_trunc, &dconst0)))\n     {\n       REAL_VALUE_TYPE realvoidmode;\n       int oflow = real_from_string (&realvoidmode, copy);\n       *overflow = (oflow == 0 ? OT_NONE\n \t\t\t      : (oflow < 0 ? OT_UNDERFLOW : OT_OVERFLOW));\n       if (!(flags & CPP_N_USERDEF))\n \t{\n-\t  if (oflow < 0 || !REAL_VALUES_EQUAL (realvoidmode, dconst0))\n+\t  if (oflow < 0 || !real_equal (&realvoidmode, &dconst0))\n \t    warning (OPT_Woverflow, \"floating constant truncated to zero\");\n \t}\n     }"}, {"sha": "dfa2787c54818e3686c5c7f10a7fe6eebb012cf6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1,3 +1,8 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-typeck.c (c_tree_equal): Use real_equal instead of\n+\tREAL_VALUES_EQUAL.\n+\n 2015-10-04  Jason Merrill  <jason@redhat.com>\n \n \t* c-parser.c (c_lex_one_token): Handle @synchronized."}, {"sha": "10cad367bb2b9c005d10803b2f78b33aac239f7c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -12758,7 +12758,7 @@ c_tree_equal (tree t1, tree t2)\n       return wi::eq_p (t1, t2);\n \n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n+      return real_equal (&TREE_REAL_CST (t1), &TREE_REAL_CST (t2));\n \n     case STRING_CST:\n       return TREE_STRING_LENGTH (t1) == TREE_STRING_LENGTH (t2)"}, {"sha": "a1057c962b58888ba1a5e3953d70efb031dea1b1", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -3771,7 +3771,7 @@ aarch64_float_const_zero_rtx_p (rtx x)\n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n   if (REAL_VALUE_MINUS_ZERO (r))\n     return !HONOR_SIGNED_ZEROS (GET_MODE (x));\n-  return REAL_VALUES_EQUAL (r, dconst0);\n+  return real_equal (&r, &dconst0);\n }\n \n /* Return the fixed registers used for condition codes.  */"}, {"sha": "184ce5095588ec852d9791159cdd170480b27e35", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -12107,7 +12107,7 @@ arm_const_double_rtx (rtx x)\n   if (REAL_VALUE_MINUS_ZERO (r))\n     return 0;\n \n-  if (REAL_VALUES_EQUAL (r, value_fp0))\n+  if (real_equal (&r, &value_fp0))\n     return 1;\n \n   return 0;\n@@ -12319,7 +12319,7 @@ neon_valid_immediate (rtx op, machine_mode mode, int inverse,\n \n           REAL_VALUE_FROM_CONST_DOUBLE (re, elt);\n \n-          if (!REAL_VALUES_EQUAL (r0, re))\n+          if (!real_equal (&r0, &re))\n             return -1;\n         }\n \n@@ -17594,7 +17594,7 @@ fp_const_from_val (REAL_VALUE_TYPE *r)\n   if (!fp_consts_inited)\n     init_fp_table ();\n \n-  gcc_assert (REAL_VALUES_EQUAL (*r, value_fp0));\n+  gcc_assert (real_equal (r, &value_fp0));\n   return \"0\";\n }\n "}, {"sha": "0cac6ce2cf1187fe82c7d0ec229bfb38ab79853c", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -895,7 +895,7 @@ fr30_const_double_is_zero (rtx operand)\n \n   REAL_VALUE_FROM_CONST_DOUBLE (d, operand);\n \n-  return REAL_VALUES_EQUAL (d, dconst0);\n+  return real_equal (&d, &dconst0);\n }\n \n /*}}}*/"}, {"sha": "b7d96a55e44ecb8e8dba493e6008cf31fd0a52e7", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -4336,7 +4336,7 @@ standard_68881_constant_p (rtx x)\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n \n-  /* Use REAL_VALUES_IDENTICAL instead of REAL_VALUES_EQUAL so that -0.0\n+  /* Use REAL_VALUES_IDENTICAL instead of real_equal so that -0.0\n      is rejected.  */\n   for (i = 0; i < 6; i++)\n     {\n@@ -4347,7 +4347,7 @@ standard_68881_constant_p (rtx x)\n   if (GET_MODE (x) == SFmode)\n     return 0;\n \n-  if (REAL_VALUES_EQUAL (r, values_68881[6]))\n+  if (real_equal (&r, &values_68881[6]))\n     return (codes_68881[6]);\n \n   /* larger powers of ten in the constants ram are not used\n@@ -4371,7 +4371,7 @@ floating_exact_log2 (rtx x)\n \n   exp = real_exponent (&r);\n   real_2expN (&r1, exp, DFmode);\n-  if (REAL_VALUES_EQUAL (r1, r))\n+  if (real_equal (&r1, &r))\n     return exp;\n \n   return 0;"}, {"sha": "a0d2e16fcffaa35cda4873b6dd9d428d00add0a2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -10006,7 +10006,7 @@ fp_zero_operand (rtx op)\n     return false;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  return REAL_VALUES_EQUAL (r, dconst0) && ! REAL_VALUE_MINUS_ZERO (r);\n+  return real_equal (&r, &dconst0) && ! REAL_VALUE_MINUS_ZERO (r);\n }\n \n /* Returns true if OP is a floating point value with value 1.0.  */\n@@ -10019,7 +10019,7 @@ fp_one_operand (rtx op)\n     return false;\n \n   REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  return REAL_VALUES_EQUAL (r, dconst1);\n+  return real_equal (&r, &dconst1);\n }\n \n /* Return the TLS type for TLS symbols.  */"}, {"sha": "2ad0e0adce8a3f0233998427f1c9b46812b1cad9", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -661,11 +661,11 @@ vax_float_literal (rtx c)\n       bool ok;\n       real_from_integer (&s, mode, x, SIGNED);\n \n-      if (REAL_VALUES_EQUAL (r, s))\n+      if (real_equal (&r, &s))\n \treturn true;\n       ok = exact_real_inverse (mode, &s);\n       gcc_assert (ok);\n-      if (REAL_VALUES_EQUAL (r, s))\n+      if (real_equal (&r, &s))\n \treturn true;\n     }\n   return false;"}, {"sha": "e297b82de2001d60c0fb9f5ece69a67622dd81b1", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -152,7 +152,7 @@\n {\n   REAL_VALUE_TYPE d;\n   REAL_VALUE_FROM_CONST_DOUBLE (d, op);\n-  return REAL_VALUES_EQUAL (d, dconst1);\n+  return real_equal (&d, &dconst1);\n })\n \n (define_predicate \"fpmem_offset_operand\""}, {"sha": "d4fd5146eed48294a1d063bd44137b64714722a7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1,3 +1,8 @@\n+2015-10-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree.c (cp_tree_equal): Use real_equal instead of\n+\tREAL_VALUES_EQUAL.\n+\n 2015-10-04  Jason Merrill  <jason@redhat.com>\n \n \tImplement N4514, C++ Extensions for Transactional Memory."}, {"sha": "b9b801f311cf0e327d655f18c3bad106ed16c8a4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -2852,7 +2852,7 @@ cp_tree_equal (tree t1, tree t2)\n       return tree_int_cst_equal (t1, t2);\n \n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (t1), TREE_REAL_CST (t2));\n+      return real_equal (&TREE_REAL_CST (t1), &TREE_REAL_CST (t2));\n \n     case STRING_CST:\n       return TREE_STRING_LENGTH (t1) == TREE_STRING_LENGTH (t2)"}, {"sha": "aa23a07513f5843be209e464e5b3200c64c94d81", "filename": "gcc/cprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1355,7 +1355,7 @@ implicit_set_cond_p (const_rtx cond)\n \t{\n \t  REAL_VALUE_TYPE d;\n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, cst);\n-\t  if (REAL_VALUES_EQUAL (d, dconst0))\n+\t  if (real_equal (&d, &dconst0))\n \t    return 0;\n \t}\n       else"}, {"sha": "fdd49d9b427dac574a4b22e8fed5e280dd11066a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -9708,13 +9708,6 @@ array of @code{HOST_WIDE_INT}, but all code should treat it as an opaque\n quantity.\n @end defmac\n \n-@deftypefn Macro int REAL_VALUES_EQUAL (REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n-Compares for equality the two values, @var{x} and @var{y}.  If the target\n-floating point format supports negative zeroes and/or NaNs,\n-@samp{REAL_VALUES_EQUAL (-0.0, 0.0)} is true, and\n-@samp{REAL_VALUES_EQUAL (NaN, NaN)} is false.\n-@end deftypefn\n-\n @deftypefn Macro int REAL_VALUES_LESS (REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n Tests whether @var{x} is less than @var{y}.\n @end deftypefn"}, {"sha": "ab75ad974d5f5a583f6ad9a63050b69ef7d728d0", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -7131,13 +7131,6 @@ array of @code{HOST_WIDE_INT}, but all code should treat it as an opaque\n quantity.\n @end defmac\n \n-@deftypefn Macro int REAL_VALUES_EQUAL (REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n-Compares for equality the two values, @var{x} and @var{y}.  If the target\n-floating point format supports negative zeroes and/or NaNs,\n-@samp{REAL_VALUES_EQUAL (-0.0, 0.0)} is true, and\n-@samp{REAL_VALUES_EQUAL (NaN, NaN)} is false.\n-@end deftypefn\n-\n @deftypefn Macro int REAL_VALUES_LESS (REAL_VALUE_TYPE @var{x}, REAL_VALUE_TYPE @var{y})\n Tests whether @var{x} is less than @var{y}.\n @end deftypefn"}, {"sha": "07578e7c7564237ba923262de72885b1b154f3d1", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -3239,7 +3239,7 @@ expand_mult (machine_mode mode, rtx op0, rtx op1, rtx target,\n       REAL_VALUE_TYPE d;\n       REAL_VALUE_FROM_CONST_DOUBLE (d, scalar_op1);\n \n-      if (REAL_VALUES_EQUAL (d, dconst2))\n+      if (real_equal (&d, &dconst2))\n \t{\n \t  op0 = force_reg (GET_MODE (op0), op0);\n \t  return expand_binop (mode, add_optab, op0, op0,"}, {"sha": "768b39b0469435cac669b0fa252ecfef78f17991", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1176,7 +1176,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n       /* Don't perform operation if it would raise a division\n \t by zero exception.  */\n       if (code == RDIV_EXPR\n-\t  && REAL_VALUES_EQUAL (d2, dconst0)\n+\t  && real_equal (&d2, &dconst0)\n \t  && (flag_trapping_math || ! MODE_HAS_INFINITIES (mode)))\n \treturn NULL_TREE;\n "}, {"sha": "d47f32ad78bc7dd8050f01349c9f3f95b0532747", "filename": "gcc/real.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1078,6 +1078,14 @@ real_value_abs (const REAL_VALUE_TYPE *op0)\n   return r;\n }\n \n+/* Return whether OP0 == OP1.  */\n+\n+bool\n+real_equal (const REAL_VALUE_TYPE *op0, const REAL_VALUE_TYPE *op1)\n+{\n+  return do_compare (op0, op1, -1) == 0;\n+}\n+\n bool\n real_compare (int icode, const REAL_VALUE_TYPE *op0,\n \t      const REAL_VALUE_TYPE *op1)\n@@ -1095,7 +1103,7 @@ real_compare (int icode, const REAL_VALUE_TYPE *op0,\n     case GE_EXPR:\n       return do_compare (op0, op1, -1) >= 0;\n     case EQ_EXPR:\n-      return do_compare (op0, op1, -1) == 0;\n+      return real_equal (op0, op1);\n     case NE_EXPR:\n       return do_compare (op0, op1, -1) != 0;\n     case UNORDERED_EXPR:"}, {"sha": "0f20660eb91aa3d474e05ec6a3f919595161f6ad", "filename": "gcc/real.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -247,8 +247,9 @@ extern bool real_isneg (const REAL_VALUE_TYPE *);\n /* Determine whether a floating-point value X is minus zero.  */\n extern bool real_isnegzero (const REAL_VALUE_TYPE *);\n \n-/* Compare two floating-point objects for bitwise identity.  */\n+/* Test relationships between reals.  */\n extern bool real_identical (const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n+extern bool real_equal (const REAL_VALUE_TYPE *, const REAL_VALUE_TYPE *);\n \n /* Extend or truncate to a new mode.  */\n extern void real_convert (REAL_VALUE_TYPE *, machine_mode,\n@@ -333,7 +334,6 @@ extern const struct real_format arm_half_format;\n   real_arithmetic (&(value), code, &(d1), &(d2))\n \n #define REAL_VALUES_IDENTICAL(x, y)\treal_identical (&(x), &(y))\n-#define REAL_VALUES_EQUAL(x, y)\t\treal_compare (EQ_EXPR, &(x), &(y))\n #define REAL_VALUES_LESS(x, y)\t\treal_compare (LT_EXPR, &(x), &(y))\n \n /* Determine whether a floating-point value X is infinite.  */"}, {"sha": "b4d95a22a61eeb8d947e89b2e711ec369bba98c2", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -2472,11 +2472,11 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  REAL_VALUE_TYPE d;\n \t  REAL_VALUE_FROM_CONST_DOUBLE (d, trueop1);\n \n-\t  if (REAL_VALUES_EQUAL (d, dconst2))\n+\t  if (real_equal (&d, &dconst2))\n \t    return simplify_gen_binary (PLUS, mode, op0, copy_rtx (op0));\n \n \t  if (!HONOR_SNANS (mode)\n-\t      && REAL_VALUES_EQUAL (d, dconstm1))\n+\t      && real_equal (&d, &dconstm1))\n \t    return simplify_gen_unary (NEG, mode, op0, mode);\n \t}\n \n@@ -3102,14 +3102,14 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t      REAL_VALUE_FROM_CONST_DOUBLE (d, trueop1);\n \n \t      /* x/-1.0 is -x.  */\n-\t      if (REAL_VALUES_EQUAL (d, dconstm1)\n+\t      if (real_equal (&d, &dconstm1)\n \t\t  && !HONOR_SNANS (mode))\n \t\treturn simplify_gen_unary (NEG, mode, op0, mode);\n \n \t      /* Change FP division by a constant into multiplication.\n \t\t Only do this with -freciprocal-math.  */\n \t      if (flag_reciprocal_math\n-\t\t  && !REAL_VALUES_EQUAL (d, dconst0))\n+\t\t  && !real_equal (&d, &dconst0))\n \t\t{\n \t\t  REAL_ARITHMETIC (d, RDIV_EXPR, dconst1, d);\n \t\t  tem = CONST_DOUBLE_FROM_REAL_VALUE (d, mode);\n@@ -3872,7 +3872,7 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \t    return 0;\n \n \t  if (code == DIV\n-\t      && REAL_VALUES_EQUAL (f1, dconst0)\n+\t      && real_equal (&f1, &dconst0)\n \t      && (flag_trapping_math || ! MODE_HAS_INFINITIES (mode)))\n \t    return 0;\n \n@@ -3905,9 +3905,9 @@ simplify_const_binary_operation (enum rtx_code code, machine_mode mode,\n \n \t  if (code == MULT && MODE_HAS_INFINITIES (mode) && HONOR_NANS (mode)\n \t      && flag_trapping_math\n-\t      && ((REAL_VALUE_ISINF (f0) && REAL_VALUES_EQUAL (f1, dconst0))\n+\t      && ((REAL_VALUE_ISINF (f0) && real_equal (&f1, &dconst0))\n \t\t  || (REAL_VALUE_ISINF (f1)\n-\t\t      && REAL_VALUES_EQUAL (f0, dconst0))))\n+\t\t      && real_equal (&f0, &dconst0))))\n \t    /* Inf * 0 = NaN plus exception.  */\n \t    return 0;\n \n@@ -4942,7 +4942,7 @@ simplify_const_relational_operation (enum rtx_code code,\n \t  }\n \n       return comparison_result (code,\n-\t\t\t\t(REAL_VALUES_EQUAL (d0, d1) ? CMP_EQ :\n+\t\t\t\t(real_equal (&d0, &d1) ? CMP_EQ :\n \t\t\t\t REAL_VALUES_LESS (d0, d1) ? CMP_LT : CMP_GT));\n     }\n "}, {"sha": "7a0275ad1c6bbac03aecd4f8a281a28c574afcf0", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -199,7 +199,7 @@ check_pow (gcall *pow_call)\n       /* Only handle a fixed range of constant.  */\n       REAL_VALUE_TYPE mv;\n       REAL_VALUE_TYPE bcv = TREE_REAL_CST (base);\n-      if (REAL_VALUES_EQUAL (bcv, dconst1))\n+      if (real_equal (&bcv, &dconst1))\n         return false;\n       if (REAL_VALUES_LESS (bcv, dconst1))\n         return false;\n@@ -420,7 +420,7 @@ gen_conditions_for_pow_cst_base (tree base, tree expn,\n      sure it is consistent with check_pow.  */\n   REAL_VALUE_TYPE mv;\n   REAL_VALUE_TYPE bcv = TREE_REAL_CST (base);\n-  gcc_assert (!REAL_VALUES_EQUAL (bcv, dconst1)\n+  gcc_assert (!real_equal (&bcv, &dconst1)\n               && !REAL_VALUES_LESS (bcv, dconst1));\n   real_from_integer (&mv, TYPE_MODE (TREE_TYPE (base)), 256, UNSIGNED);\n   gcc_assert (!REAL_VALUES_LESS (mv, bcv));"}, {"sha": "9b525f388fc209a5be0de8db79b20fc552802488", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -4092,8 +4092,9 @@ estimate_num_insns (gimple *stmt, eni_weights *weights)\n \t\t    case BUILT_IN_POWF:\n \t\t    case BUILT_IN_POWL:\n \t\t      if (TREE_CODE (gimple_call_arg (stmt, 1)) == REAL_CST\n-\t\t\t  && REAL_VALUES_EQUAL\n-\t\t\t  (TREE_REAL_CST (gimple_call_arg (stmt, 1)), dconst2))\n+\t\t\t  && (real_equal\n+\t\t\t      (&TREE_REAL_CST (gimple_call_arg (stmt, 1)),\n+\t\t\t       &dconst2)))\n \t\t\treturn estimate_operator_cost\n \t\t\t    (MULT_EXPR, weights, gimple_call_arg (stmt, 0),\n \t\t\t     gimple_call_arg (stmt, 0));"}, {"sha": "c226da55340a7ac99b39dd66f17fb66fc7ea7366", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1158,7 +1158,7 @@ record_equality (tree x, tree y, class const_and_copies *const_and_copies)\n      nonzero.  */\n   if (HONOR_SIGNED_ZEROS (x)\n       && (TREE_CODE (y) != REAL_CST\n-\t  || REAL_VALUES_EQUAL (dconst0, TREE_REAL_CST (y))))\n+\t  || real_equal (&dconst0, &TREE_REAL_CST (y))))\n     return;\n \n   const_and_copies->record_const_or_copy (x, y, prev_x);"}, {"sha": "63245fcbb0f4e7e67cce779bb0b6dae833136cc0", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1145,7 +1145,7 @@ representable_as_half_series_p (REAL_VALUE_TYPE c, unsigned n,\n \n       /* We have hit zero.  The number is representable as a sum\n          of powers of 0.5.  */\n-      if (REAL_VALUES_EQUAL (res, dconst0))\n+      if (real_equal (&res, &dconst0))\n \t{\n \t  info->factors[i] = true;\n \t  info->deepest = i + 1;\n@@ -1509,7 +1509,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n      unless signed zeros must be maintained.  pow(-0,0.5) = +0, while\n      sqrt(-0) = -0.  */\n   if (sqrtfn\n-      && REAL_VALUES_EQUAL (c, dconsthalf)\n+      && real_equal (&c, &dconsthalf)\n       && !HONOR_SIGNED_ZEROS (mode))\n     return build_and_insert_call (gsi, loc, sqrtfn, arg0);\n \n@@ -1527,7 +1527,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   if (flag_unsafe_math_optimizations\n       && cbrtfn\n       && (gimple_val_nonnegative_real_p (arg0) || !HONOR_NANS (mode))\n-      && REAL_VALUES_EQUAL (c, dconst1_3))\n+      && real_equal (&c, &dconst1_3))\n     return build_and_insert_call (gsi, loc, cbrtfn, arg0);\n   \n   /* Optimize pow(x,1./6.) = cbrt(sqrt(x)).  Don't do this optimization\n@@ -1541,7 +1541,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n       && (gimple_val_nonnegative_real_p (arg0) || !HONOR_NANS (mode))\n       && speed_p\n       && hw_sqrt_exists\n-      && REAL_VALUES_EQUAL (c, dconst1_6))\n+      && real_equal (&c, &dconst1_6))\n     {\n       /* sqrt(x)  */\n       sqrt_arg0 = build_and_insert_call (gsi, loc, sqrtfn, arg0);\n@@ -1556,7 +1556,7 @@ gimple_expand_builtin_pow (gimple_stmt_iterator *gsi, location_t loc,\n   if (flag_unsafe_math_optimizations\n       && sqrtfn\n       && hw_sqrt_exists\n-      && (speed_p || REAL_VALUES_EQUAL (c, dconst1_4))\n+      && (speed_p || real_equal (&c, &dconst1_4))\n       && !HONOR_SIGNED_ZEROS (mode))\n     {\n       unsigned int max_depth = speed_p\n@@ -3589,9 +3589,9 @@ pass_optimize_widening_mul::execute (function *fun)\n \t\t      case BUILT_IN_POW:\n \t\t      case BUILT_IN_POWL:\n \t\t\tif (TREE_CODE (gimple_call_arg (stmt, 1)) == REAL_CST\n-\t\t\t    && REAL_VALUES_EQUAL\n-\t\t\t         (TREE_REAL_CST (gimple_call_arg (stmt, 1)),\n-\t\t\t\t  dconst2)\n+\t\t\t    && real_equal\n+\t\t\t         (&TREE_REAL_CST (gimple_call_arg (stmt, 1)),\n+\t\t\t\t  &dconst2)\n \t\t\t    && convert_mult_to_fma (stmt,\n \t\t\t\t\t\t    gimple_call_arg (stmt, 0),\n \t\t\t\t\t\t    gimple_call_arg (stmt, 0)))"}, {"sha": "0f16c508c946813bf80fe511f378d74266a424f8", "filename": "gcc/tree-ssa-uncprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-ssa-uncprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-ssa-uncprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uncprop.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -153,7 +153,7 @@ associate_equivalences_with_edges (void)\n \t\t     this value unless we know that the value is nonzero.  */\n \t\t  if (HONOR_SIGNED_ZEROS (op0)\n \t\t      && (TREE_CODE (op1) != REAL_CST\n-\t\t\t  || REAL_VALUES_EQUAL (dconst0, TREE_REAL_CST (op1))))\n+\t\t\t  || real_equal (&dconst0, &TREE_REAL_CST (op1))))\n \t\t    continue;\n \n \t\t  equivalency = XNEW (struct edge_equivalency);"}, {"sha": "48b5298645bb38076ee99685d02184413ba86b97", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -1084,7 +1084,7 @@ vect_recog_pow_pattern (vec<gimple *> *stmts, tree *type_in,\n   if ((tree_fits_shwi_p (exp)\n        && tree_to_shwi (exp) == 2)\n       || (TREE_CODE (exp) == REAL_CST\n-          && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconst2)))\n+          && real_equal (&TREE_REAL_CST (exp), &dconst2)))\n     {\n       *type_in = TREE_TYPE (base);\n \n@@ -1095,7 +1095,7 @@ vect_recog_pow_pattern (vec<gimple *> *stmts, tree *type_in,\n \n   /* Catch square root.  */\n   if (TREE_CODE (exp) == REAL_CST\n-      && REAL_VALUES_EQUAL (TREE_REAL_CST (exp), dconsthalf))\n+      && real_equal (&TREE_REAL_CST (exp), &dconsthalf))\n     {\n       tree newfn = mathfn_built_in (TREE_TYPE (base), BUILT_IN_SQRT);\n       *type_in = get_vectype_for_scalar_type (TREE_TYPE (base));"}, {"sha": "4bd3cae9ebf311766f868a85b1ebba1b20462968", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/624d31fe0135b7b33529f4e8fae88a4877bfc204/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=624d31fe0135b7b33529f4e8fae88a4877bfc204", "patch": "@@ -2546,7 +2546,7 @@ real_zerop (const_tree expr)\n   switch (TREE_CODE (expr))\n     {\n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst0)\n+      return real_equal (&TREE_REAL_CST (expr), &dconst0)\n \t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n     case COMPLEX_CST:\n       return real_zerop (TREE_REALPART (expr))\n@@ -2576,7 +2576,7 @@ real_onep (const_tree expr)\n   switch (TREE_CODE (expr))\n     {\n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconst1)\n+      return real_equal (&TREE_REAL_CST (expr), &dconst1)\n \t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n     case COMPLEX_CST:\n       return real_onep (TREE_REALPART (expr))\n@@ -2605,7 +2605,7 @@ real_minus_onep (const_tree expr)\n   switch (TREE_CODE (expr))\n     {\n     case REAL_CST:\n-      return REAL_VALUES_EQUAL (TREE_REAL_CST (expr), dconstm1)\n+      return real_equal (&TREE_REAL_CST (expr), &dconstm1)\n \t     && !(DECIMAL_FLOAT_MODE_P (TYPE_MODE (TREE_TYPE (expr))));\n     case COMPLEX_CST:\n       return real_minus_onep (TREE_REALPART (expr))"}]}