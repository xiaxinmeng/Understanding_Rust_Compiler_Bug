{"sha": "5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFiMGVhZGZhMzliN2Y3OWFlNWYzZTdkNmRjN2RhZDI1OTUyMjUwNA==", "commit": {"author": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-23T20:35:03Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-23T20:35:03Z"}, "message": "re PR fortran/25104 ([F2003] Non-initialization expr. as case-selector)\n\ngcc/fortran:\n2007-07-23  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/25104\n\tPR fortran/31639\n\t* expr.c (check_transformational): Reject valid transformational\n\tintrinsics to avoid ICE.\n\t(check_inquiry): Report error for assumed character lengths for\n\tall supported standards.\n\t(check_init_expr): Whitespace fix.\n\ngcc/testsuite:\n2007-07-23  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/31639\n\t* gfortran.dg/initialization_9.f90: New test.\n\nFrom-SVN: r126858", "tree": {"sha": "4f4418621041b26409c78f9ee40ba46875f92463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f4418621041b26409c78f9ee40ba46875f92463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/comments", "author": null, "committer": null, "parents": [{"sha": "623b0223320d86b1152faa96bcdc0820872c080e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623b0223320d86b1152faa96bcdc0820872c080e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623b0223320d86b1152faa96bcdc0820872c080e"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "b896f9877302ebd037feb59db6f3833a39473a14", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "patch": "@@ -1,3 +1,13 @@\n+2007-07-23  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/25104\n+\tPR fortran/31639\n+\t* expr.c (check_transformational): Reject valid transformational\n+\tintrinsics to avoid ICE.\n+\t(check_inquiry): Report error for assumed character lengths for\n+\tall supported standards.\n+\t(check_init_expr): Whitespace fix.\n+\n 2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/32797"}, {"sha": "0028724904153108f9a124af871bc761cdf153bf", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "patch": "@@ -1966,9 +1966,8 @@ check_inquiry (gfc_expr *e, int not_restricted)\n \t    && ap->expr->symtree->n.sym->ts.type == BT_CHARACTER\n \t    && ap->expr->symtree->n.sym->ts.cl->length == NULL)\n \t  {\n-\t    if (gfc_notify_std (GFC_STD_GNU, \"assumed character length \"\n-\t\t\t\t\"variable '%s' in constant expression at %L\",\n-\t\t\t\te->symtree->n.sym->name, &e->where) == FAILURE)\n+\t    gfc_error (\"assumed character length variable '%s' in constant \"\n+\t\t       \"expression at %L\", e->symtree->n.sym->name, &e->where);\n \t      return MATCH_ERROR;\n \t  }\n \telse if (not_restricted && check_init_expr (ap->expr) == FAILURE)\n@@ -2007,11 +2006,23 @@ check_transformational (gfc_expr *e)\n     if (strcmp (trans_func_f95[i], name) == 0)\n       break;\n \n+  /* FIXME, F2003: implement translation of initialization\n+     expressions before enabling this check. For F95, error\n+     out if the transformational function is not in the list.  */\n+#if 0\n   if (trans_func_f95[i] == NULL\n       && gfc_notify_std (GFC_STD_F2003, \n \t\t\t \"transformational intrinsic '%s' at %L is not permitted \"\n \t\t\t \"in an initialization expression\", name, &e->where) == FAILURE)\n     return MATCH_ERROR;\n+#else\n+  if (trans_func_f95[i] == NULL)\n+    {\n+      gfc_error(\"transformational intrinsic '%s' at %L is not permitted \"\n+\t\t\"in an initialization expression\", name, &e->where);\n+      return MATCH_ERROR;\n+    }\n+#endif\n \n   return check_init_expr_arguments (e);\n }\n@@ -2150,19 +2161,19 @@ check_init_expr (gfc_expr *e)\n \t\tgfc_error (\"assumed size array '%s' at %L is not permitted \"\n \t\t\t   \"in an initialization expression\",\n \t\t\t   e->symtree->n.sym->name, &e->where);\n-\t      break;\n+\t\tbreak;\n \n \t      case AS_ASSUMED_SHAPE:\n \t\tgfc_error (\"assumed shape array '%s' at %L is not permitted \"\n \t\t\t   \"in an initialization expression\",\n \t\t\t   e->symtree->n.sym->name, &e->where);\n-\t      break;\n+\t\tbreak;\n \n \t      case AS_DEFERRED:\n \t\tgfc_error (\"deferred array '%s' at %L is not permitted \"\n \t\t\t   \"in an initialization expression\",\n \t\t\t   e->symtree->n.sym->name, &e->where);\n-\t      break;\n+\t\tbreak;\n \n \t      default:\n \t\tgcc_unreachable();"}, {"sha": "ce6a3592cbb3f1ac5d7a7894833bf5eaade5f10f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "patch": "@@ -1,3 +1,8 @@\n+2007-07-23 \ufffdDaniel Franke \ufffd<franke.daniel@gmail.com>\n+\n+\tPR fortran/31639\n+\t* gfortran.dg/initialization_9.f90: New test.\n+\n 2007-07-23  Christopher D. Rickett  <crickett@lanl.gov>\n \n \tPR fortran/32797"}, {"sha": "5a827706a9ee4097262c70f76abd37f2e5877b10", "filename": "gcc/testsuite/gfortran.dg/initialization_9.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_9.f90?ref=5ab0eadfa39b7f79ae5f3e7d6dc7dad259522504", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+!\n+! PR fortran/31639\n+! Contributed by Martin Michlmayr <tbm AT cyrius DOT com>\n+\n+   integer function xstrcmp(s1)\n+     character*(*), intent(in) :: s1\n+     integer :: n1 = len(s1)            ! { dg-error \"assumed character length variable\" }\n+     n1 = 1\n+     return\n+   end function xstrcmp"}]}