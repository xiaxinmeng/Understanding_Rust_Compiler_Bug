{"sha": "52fadca81582bb16abe33e7a8f058fdf3a8571e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmYWRjYTgxNTgyYmIxNmFiZTMzZTdhOGYwNThmZGYzYTg1NzFlMA==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-13T22:55:04Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-13T22:55:04Z"}, "message": "cpplex.c (adjust_column): New funcion.\n\n\t* cpplex.c (adjust_column): New funcion.\n\t(skip_whitespace): Use it.\n\t(skip_block_comment): Use it, and warn about /*/* with\n\t-Wcomments.\n\nFrom-SVN: r35026", "tree": {"sha": "c83b50d1ce3833971bff871e31b66d32ef2cc422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c83b50d1ce3833971bff871e31b66d32ef2cc422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52fadca81582bb16abe33e7a8f058fdf3a8571e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fadca81582bb16abe33e7a8f058fdf3a8571e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52fadca81582bb16abe33e7a8f058fdf3a8571e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52fadca81582bb16abe33e7a8f058fdf3a8571e0/comments", "author": null, "committer": null, "parents": [{"sha": "b30892f96dacee07240651b53c9bb2ab126e81a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30892f96dacee07240651b53c9bb2ab126e81a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30892f96dacee07240651b53c9bb2ab126e81a7"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "5830c4cff23e5f4ed266cfc5fee05733062c7e8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fadca81582bb16abe33e7a8f058fdf3a8571e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fadca81582bb16abe33e7a8f058fdf3a8571e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52fadca81582bb16abe33e7a8f058fdf3a8571e0", "patch": "@@ -1,3 +1,10 @@\n+2000-07-14  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpplex.c (adjust_column): New funcion.\n+\t(skip_whitespace): Use it.\n+\t(skip_block_comment): Use it, and warn about /*/* with\n+\t-Wcomments.\n+\n 2000-07-14  Neil Booth  <NeilB@earthling.net>\n \n \t* cpphash.c (struct macro_info): Add new members."}, {"sha": "fa5b638f3d704b15889d4e4e9da7918eaf9e8821", "filename": "gcc/cpplex.c", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52fadca81582bb16abe33e7a8f058fdf3a8571e0/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52fadca81582bb16abe33e7a8f058fdf3a8571e0/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=52fadca81582bb16abe33e7a8f058fdf3a8571e0", "patch": "@@ -114,6 +114,7 @@ static const unsigned char *backslash_start PARAMS ((cpp_reader *,\n \t\t\t\t\t\t     const unsigned char *));\n static int skip_block_comment PARAMS ((cpp_reader *));\n static int skip_line_comment PARAMS ((cpp_reader *));\n+static void adjust_column PARAMS ((cpp_reader *, const U_CHAR *));\n static void skip_whitespace PARAMS ((cpp_reader *, int));\n static const U_CHAR *parse_name PARAMS ((cpp_reader *, cpp_token *,\n \t\t\t\t   const U_CHAR *, const U_CHAR *));\n@@ -906,15 +907,8 @@ skip_block_comment (pfile)\n {\n   cpp_buffer *buffer = pfile->buffer;\n   const unsigned char *char_after_star = 0;\n-  register const unsigned char *cur = buffer->cur;\n-  int seen_eof = 0;\n+  const unsigned char *cur = buffer->cur;\n   \n-  /* Inner loop would think the comment has ended if the first comment\n-     character is a '/'.  Avoid this and keep the inner loop clean by\n-     skipping such a character.  */\n-  if (cur < buffer->rlimit && cur[0] == '/')\n-    cur++;\n-\n   for (; cur < buffer->rlimit; )\n     {\n       unsigned char c = *cur++;\n@@ -923,8 +917,13 @@ skip_block_comment (pfile)\n \t '/' instead for efficiency.  */\n       if (c == '/')\n \t{\n-\t  if (cur[-2] == '*' || cur - 1 == char_after_star)\n-\t    goto out;\n+\t  /* Don't view / then * then / as finishing the comment.  */\n+\t  if ((cur[-2] == '*' && cur - 1 > buffer->cur)\n+\t      || cur - 1 == char_after_star)\n+\t    {\n+\t      buffer->cur = cur;\n+\t      return 0;\n+\t    }\n \n \t  /* Warn about potential nested comments, but not when\n \t     the final character inside the comment is a '/'.\n@@ -948,12 +947,12 @@ skip_block_comment (pfile)\n \t  else\n \t    char_after_star = 0;\n \t}\n+      else if (c == '\\t')\n+\tadjust_column (pfile, cur - 1);\n     }\n-  seen_eof = 1;\n \n- out:\n   buffer->cur = cur;\n-  return seen_eof;\n+  return 1;\n }\n \n /* Skip a C++ line comment.  Handles escaped newlines.  Returns\n@@ -986,6 +985,22 @@ skip_line_comment (pfile)\n   return multiline;\n }\n \n+/* TAB points to a \\t character.  Update col_adjust so we track the\n+   column correctly.  */\n+static void\n+adjust_column (pfile, tab)\n+     cpp_reader *pfile;\n+     const U_CHAR *tab;\n+{\n+  /* Zero-based column.  */\n+  unsigned int col = CPP_BUF_COLUMN (pfile->buffer, tab);\n+\n+  /* Round it up to multiple of the tabstop, but subtract 1 since the\n+     tab itself occupies a character position.  */\n+  pfile->col_adjust += (CPP_OPTION (pfile, tabstop)\n+\t\t\t- col % CPP_OPTION (pfile, tabstop)) - 1;\n+}\n+\n /* Skips whitespace, stopping at next non-whitespace character.\n    Adjusts pfile->col_adjust to account for tabs.  This enables tokens\n    to be assigned the correct column.  */\n@@ -1010,8 +1025,7 @@ skip_whitespace (pfile, in_directive)\n       if (c == ' ')\n \tcontinue;\n       else if (c == '\\t')\n-\tpfile->col_adjust += CPP_OPTION (pfile, tabstop) - 1\n-\t  - (CPP_BUF_COL (buffer) - 1) % CPP_OPTION(pfile, tabstop);\n+\tadjust_column (pfile, buffer->cur - 1);\n       /* Must be \\f \\v or \\0.  */\n       else if (c == '\\0')\n \t{"}]}