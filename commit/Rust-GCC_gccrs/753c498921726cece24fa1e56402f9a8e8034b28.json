{"sha": "753c498921726cece24fa1e56402f9a8e8034b28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUzYzQ5ODkyMTcyNmNlY2UyNGZhMWU1NjQwMmY5YThlODAzNGIyOA==", "commit": {"author": {"name": "Adam Butcher", "email": "adam@jessamine.co.uk", "date": "2013-08-29T20:54:49Z"}, "committer": {"name": "Adam Butcher", "email": "abutcher@gcc.gnu.org", "date": "2013-08-29T20:54:49Z"}, "message": "Support dumping type bindings and 'mutable' qualifier in lambda diagnostics.\n\n\t* error.c (dump_lambda_function): New function, dependent on ...\n\t(dump_substitution): ... this new function, factored out of ...\n\t(subst_to_string): ... here and ...\n\t(dump_function_decl): ... here.  Updated to early-out with call to\n\tdump_lambda_function after determining template bindings.\n\nFrom-SVN: r202087", "tree": {"sha": "dad90e80542b73506a88f08442049f76ba465753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dad90e80542b73506a88f08442049f76ba465753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/753c498921726cece24fa1e56402f9a8e8034b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753c498921726cece24fa1e56402f9a8e8034b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/753c498921726cece24fa1e56402f9a8e8034b28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/753c498921726cece24fa1e56402f9a8e8034b28/comments", "author": {"login": "abutcher-gh", "id": 10379705, "node_id": "MDQ6VXNlcjEwMzc5NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/10379705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abutcher-gh", "html_url": "https://github.com/abutcher-gh", "followers_url": "https://api.github.com/users/abutcher-gh/followers", "following_url": "https://api.github.com/users/abutcher-gh/following{/other_user}", "gists_url": "https://api.github.com/users/abutcher-gh/gists{/gist_id}", "starred_url": "https://api.github.com/users/abutcher-gh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abutcher-gh/subscriptions", "organizations_url": "https://api.github.com/users/abutcher-gh/orgs", "repos_url": "https://api.github.com/users/abutcher-gh/repos", "events_url": "https://api.github.com/users/abutcher-gh/events{/privacy}", "received_events_url": "https://api.github.com/users/abutcher-gh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "440a50821263f118d1b7c424e5506670a67a6e6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/440a50821263f118d1b7c424e5506670a67a6e6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/440a50821263f118d1b7c424e5506670a67a6e6b"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "f848b813f2eb6238cac0cce6e145df300b465c10", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753c498921726cece24fa1e56402f9a8e8034b28/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753c498921726cece24fa1e56402f9a8e8034b28/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=753c498921726cece24fa1e56402f9a8e8034b28", "patch": "@@ -1,3 +1,11 @@\n+2013-08-29  Adam Butcher  <adam@jessamine.co.uk>\n+\n+\t* error.c (dump_lambda_function): New function, dependent on ...\n+\t(dump_substitution): ... this new function, factored out of ...\n+\t(subst_to_string): ... here and ...\n+\t(dump_function_decl): ... here.  Updated to early-out with call to\n+\tdump_lambda_function after determining template bindings.\n+\n 2013-08-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58255"}, {"sha": "af71000ec6c769746d5ddff8463d83bc3850b0d3", "filename": "gcc/cp/error.c", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/753c498921726cece24fa1e56402f9a8e8034b28/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/753c498921726cece24fa1e56402f9a8e8034b28/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=753c498921726cece24fa1e56402f9a8e8034b28", "patch": "@@ -1363,6 +1363,47 @@ find_typenames (tree t)\n   return ft.typenames;\n }\n \n+/* Output the \"[with ...]\" clause for a template instantiation T iff\n+   TEMPLATE_PARMS, TEMPLATE_ARGS and FLAGS are suitable.  T may be NULL if\n+   formatting a deduction/substitution diagnostic rather than an\n+   instantiation.  */\n+\n+static void\n+dump_substitution (cxx_pretty_printer *pp,\n+                   tree t, tree template_parms, tree template_args,\n+                   int flags)\n+{\n+  if (template_parms != NULL_TREE && template_args != NULL_TREE\n+      && !(flags & TFF_NO_TEMPLATE_BINDINGS))\n+    {\n+      vec<tree, va_gc> *typenames = t ? find_typenames (t) : NULL;\n+      pp_cxx_whitespace (pp);\n+      pp_cxx_left_bracket (pp);\n+      pp->translate_string (\"with\");\n+      pp_cxx_whitespace (pp);\n+      dump_template_bindings (pp, template_parms, template_args, typenames);\n+      pp_cxx_right_bracket (pp);\n+    }\n+}\n+\n+/* Dump the lambda function FN including its 'mutable' qualifier and any\n+   template bindings.  */\n+\n+static void\n+dump_lambda_function (cxx_pretty_printer *pp,\n+\t\t      tree fn, tree template_parms, tree template_args,\n+\t\t      int flags)\n+{\n+  /* A lambda's signature is essentially its \"type\".  */\n+  dump_type (pp, DECL_CONTEXT (fn), flags);\n+  if (!(TYPE_QUALS (class_of_this_parm (TREE_TYPE (fn))) & TYPE_QUAL_CONST))\n+    {\n+      pp->padding = pp_before;\n+      pp_c_ws_string (pp, \"mutable\");\n+    }\n+  dump_substitution (pp, fn, template_parms, template_args, flags);\n+}\n+\n /* Pretty print a function decl. There are several ways we want to print a\n    function declaration. The TFF_ bits in FLAGS tells us how to behave.\n    As error can only apply the '#' flag once to give 0 and 1 for V, there\n@@ -1379,15 +1420,6 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n   int show_return = flags & TFF_RETURN_TYPE || flags & TFF_DECL_SPECIFIERS;\n   int do_outer_scope = ! (flags & TFF_UNQUALIFIED_NAME);\n   tree exceptions;\n-  vec<tree, va_gc> *typenames = NULL;\n-\n-  if (DECL_NAME (t) && LAMBDA_FUNCTION_P (t))\n-    {\n-      /* A lambda's signature is essentially its \"type\", so defer.  */\n-      gcc_assert (LAMBDA_TYPE_P (DECL_CONTEXT (t)));\n-      dump_type (pp, DECL_CONTEXT (t), flags);\n-      return;\n-    }\n \n   flags &= ~(TFF_UNQUALIFIED_NAME | TFF_TEMPLATE_NAME);\n   if (TREE_CODE (t) == TEMPLATE_DECL)\n@@ -1409,10 +1441,12 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n \t{\n \t  template_parms = DECL_TEMPLATE_PARMS (tmpl);\n \t  t = tmpl;\n-\t  typenames = find_typenames (t);\n \t}\n     }\n \n+  if (DECL_NAME (t) && LAMBDA_FUNCTION_P (t))\n+    return dump_lambda_function (pp, t, template_parms, template_args, flags);\n+\n   fntype = TREE_TYPE (t);\n   parmtypes = FUNCTION_FIRST_USER_PARMTYPE (t);\n \n@@ -1476,17 +1510,7 @@ dump_function_decl (cxx_pretty_printer *pp, tree t, int flags)\n       if (show_return)\n \tdump_type_suffix (pp, TREE_TYPE (fntype), flags);\n \n-      /* If T is a template instantiation, dump the parameter binding.  */\n-      if (template_parms != NULL_TREE && template_args != NULL_TREE\n-\t  && !(flags & TFF_NO_TEMPLATE_BINDINGS))\n-\t{\n-\t  pp_cxx_whitespace (pp);\n-\t  pp_cxx_left_bracket (pp);\n-\t  pp_cxx_ws_string (pp, M_(\"with\"));\n-\t  pp_cxx_whitespace (pp);\n-\t  dump_template_bindings (pp, template_parms, template_args, typenames);\n-\t  pp_cxx_right_bracket (pp);\n-\t}\n+      dump_substitution (pp, t, template_parms, template_args, flags);\n     }\n   else if (template_args)\n     {\n@@ -2950,12 +2974,7 @@ subst_to_string (tree p)\n \n   reinit_cxx_pp ();\n   dump_template_decl (cxx_pp, TREE_PURPOSE (p), flags);\n-  pp_cxx_whitespace (cxx_pp);\n-  pp_cxx_left_bracket (cxx_pp);\n-  pp_cxx_ws_string (cxx_pp, M_(\"with\"));\n-  pp_cxx_whitespace (cxx_pp);\n-  dump_template_bindings (cxx_pp, tparms, targs, NULL);\n-  pp_cxx_right_bracket (cxx_pp);\n+  dump_substitution (cxx_pp, NULL, tparms, targs, /*flags=*/0);\n   return pp_ggc_formatted_text (cxx_pp);\n }\n "}]}