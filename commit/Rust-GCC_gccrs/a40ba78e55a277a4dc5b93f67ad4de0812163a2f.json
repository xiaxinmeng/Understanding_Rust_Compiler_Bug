{"sha": "a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQwYmE3OGU1NWEyNzdhNGRjNWI5M2Y2N2FkNGRlMDgxMjE2M2EyZg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2000-12-23T07:13:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-12-23T07:13:57Z"}, "message": "Makefile.am (CSTD_INCLUDES): Change from CSHADOW_INCLUDES.\n\n\n2000-12-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (CSTD_INCLUDES): Change from CSHADOW_INCLUDES.\n\t(strstream.cc): Add special rule for deprecated files.\n\t* libsupc++/Makefile.am (INCLUDES): Sync.\n\t* acinclude.m4 (GLIBCPP_EXPORT_INCLUDES): And here.\n\n\tReported by Fred Fish  <fnf@ninemoons.com>\n\t* include/backward/iomanip.h: Remove backward from include\n\t* include/backward/strstream.h: Same.\n\t* include/backward/stream.h: Same.\n\t* include/backward/ostream.h: Same.\n\t* include/backward/istream.h: Same.\n\t* src/strstream.cc: And here.\n\n\tReported by  Brad Garcia  <bgarcia@laurelnetworks.com>\n\t* src/string-inst.cc (_S_find): Use generic template.\n\t* include/bits/string.tcc (_S_find): Remove specializations\n\nFrom-SVN: r38477", "tree": {"sha": "ffa1846d7c65367ce41a49c90f867e28eed685c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa1846d7c65367ce41a49c90f867e28eed685c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/comments", "author": null, "committer": null, "parents": [{"sha": "ca5fc74676b641ce6ab62469d1ed72cdcd0ad264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5fc74676b641ce6ab62469d1ed72cdcd0ad264", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5fc74676b641ce6ab62469d1ed72cdcd0ad264"}], "stats": {"total": 169, "additions": 84, "deletions": 85}, "files": [{"sha": "a09e85f324d76d831fa3e75b391732a47809b430", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -1,3 +1,22 @@\n+2000-12-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (CSTD_INCLUDES): Change from CSHADOW_INCLUDES.\n+\t(strstream.cc): Add special rule for deprecated files.\n+\t* libsupc++/Makefile.am (INCLUDES): Sync.\n+\t* acinclude.m4 (GLIBCPP_EXPORT_INCLUDES): And here.\n+\n+\tReported by Fred Fish  <fnf@ninemoons.com>\n+\t* include/backward/iomanip.h: Remove backward from include\n+\t* include/backward/strstream.h: Same.\n+\t* include/backward/stream.h: Same.\n+\t* include/backward/ostream.h: Same.\n+\t* include/backward/istream.h: Same.\n+\t* src/strstream.cc: And here.\n+\n+\tReported by  Brad Garcia  <bgarcia@laurelnetworks.com>\n+\t* src/string-inst.cc (_S_find): Use generic template.\n+\t* include/bits/string.tcc (_S_find): Remove specializations\n+\t\n 2000-12-22  Benjamin Kosnik  <bkoz@fillmore.redhat.com>\n \n \tAttempt to make locale visible in gdb."}, {"sha": "8402499faccea19462f2b7646bb69ebb536169e1", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -68,7 +68,7 @@ AS = @AS@\n CC = @CC@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n CXX_libstdcxx = @CXX_libstdcxx@"}, {"sha": "74be39222f538c937bb698bfa8bfd8a147c0bbd6", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -1613,7 +1613,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n   #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n   #                   -I$(top_blddir)/cshadow'\n   #else\n-  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n+  CSTD_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n   #endif\n \n   # Now, export this to all the little Makefiles....\n@@ -1622,7 +1622,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n   AC_SUBST(LIBMATH_INCLUDES)\n   AC_SUBST(LIBSUPCXX_INCLUDES)\n   AC_SUBST(LIBIO_INCLUDES)\n-  AC_SUBST(CSHADOW_INCLUDES)\n+  AC_SUBST(CSTD_INCLUDES)\n ])\n \n "}, {"sha": "4c571698bf6494ca68cea8cea6068ec66f631142", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -1625,7 +1625,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n   #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n   #                   -I$(top_blddir)/cshadow'\n   #else\n-  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n+  CSTD_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n   #endif\n \n   # Now, export this to all the little Makefiles....\n@@ -1634,7 +1634,7 @@ AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n   AC_SUBST(LIBMATH_INCLUDES)\n   AC_SUBST(LIBSUPCXX_INCLUDES)\n   AC_SUBST(LIBIO_INCLUDES)\n-  AC_SUBST(CSHADOW_INCLUDES)\n+  AC_SUBST(CSTD_INCLUDES)\n ])\n \n "}, {"sha": "6a5b9aa162eda56e32b99a5d66142979102e8d67", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -19781,7 +19781,7 @@ gxx_target_include_dir='$(exec_prefix)/$(target_alias)/include/g++-$(libstdcxx_i\n   #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n   #                   -I$(top_blddir)/cshadow'\n   #else\n-  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n+  CSTD_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n   #endif\n \n   # Now, export this to all the little Makefiles....\n@@ -20039,7 +20039,7 @@ s%@TOPLEVEL_INCLUDES@%$TOPLEVEL_INCLUDES%g\n s%@LIBMATH_INCLUDES@%$LIBMATH_INCLUDES%g\n s%@LIBSUPCXX_INCLUDES@%$LIBSUPCXX_INCLUDES%g\n s%@LIBIO_INCLUDES@%$LIBIO_INCLUDES%g\n-s%@CSHADOW_INCLUDES@%$CSHADOW_INCLUDES%g\n+s%@CSTD_INCLUDES@%$CSTD_INCLUDES%g\n s%@OPTIMIZE_CXXFLAGS@%$OPTIMIZE_CXXFLAGS%g\n s%@WARN_FLAGS@%$WARN_FLAGS%g\n "}, {"sha": "432252c59141e8273ead9d0ad169c4f6bef65cc7", "filename": "libstdc++-v3/include/backward/iomanip.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fiomanip.h?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -28,7 +28,7 @@\n #ifndef _CPP_BACKWARD_IOMANIP_H\n #define _CPP_BACKWARD_IOMANIP_H 1\n \n-#include <backward/iostream.h>\n+#include <iostream.h>\n #include <bits/std_iomanip.h>\n \n using std::resetiosflags;"}, {"sha": "57ea07e95de3f860cb4abd3a9b167198fe394af8", "filename": "libstdc++-v3/include/backward/istream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fistream.h?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -28,7 +28,7 @@\n #ifndef _CPP_BACKWARD_ISTREAM_H\n #define _CPP_BACKWARD_ISTREAM_H 1\n \n-#include <backward/iostream.h>\n+#include <iostream.h>\n \n #endif\n "}, {"sha": "7b4878563de11d3d0fd141f745f9ee11211908d5", "filename": "libstdc++-v3/include/backward/ostream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fostream.h?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -28,7 +28,7 @@\n #ifndef _CPP_BACKWARD_OSTREAM_H\n #define _CPP_BACKWARD_OSTREAM_H 1\n \n-#include <backward/iostream.h>\n+#include <iostream.h>\n \n #endif \n "}, {"sha": "15c32b821f1abd167844815e94a537da6d05e733", "filename": "libstdc++-v3/include/backward/stream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstream.h?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -28,7 +28,7 @@\n #ifndef _CPP_BACKWARD_STREAM_H\n #define _CPP_BACKWARD_STREAM_H 1\n \n-#include <backward/iostream.h>\n+#include <iostream.h>\n \n #endif \n "}, {"sha": "3918141a14b06eb035ac4d873e9177469343ba3d", "filename": "libstdc++-v3/include/backward/strstream.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fstrstream.h?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -30,7 +30,7 @@\n #ifndef _CPP_BACKWARD_STRSTREAM_H\n #define _CPP_BACKWARD_STRSTREAM_H 1\n \n-#include <backward/strstream>\n+#include <strstream>\n \n using std::strstreambuf;\n using std::istrstream;"}, {"sha": "da43ae1be37e95d6a748be65f93dedb246c9d135", "filename": "libstdc++-v3/include/bits/string.tcc", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstring.tcc?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -576,8 +576,6 @@ namespace std\n     }\n \n   // String operations\n-  // NB: This is specialized for the standard char_traits<char>\n-  // specialization to use the same optimizations as strchr.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     const _CharT*\n     basic_string<_CharT, _Traits, _Alloc>::\n@@ -586,18 +584,6 @@ namespace std\n       return find_if(__beg, __end, _Char_traits_match<_CharT, _Traits>(__c));\n     }\n \n-  // Specialization for char, definitions in src/string-inst.cc.\n-  template<>\n-    const char* \n-    string::_S_find(const char* __beg, const char* __end, char __c);\n-\n-  // Specialization for wchar_t.\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  template<>\n-    const wchar_t* \n-    wstring::_S_find(const wchar_t* __beg, const wchar_t* __end, wchar_t __c);\n-#endif\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::"}, {"sha": "8a05d158e7d2a75c8d6e68d041bddd6cdbdecb96", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -68,6 +68,7 @@ AS = @AS@\n CC = @CC@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n CXX_libstdcxx = @CXX_libstdcxx@"}, {"sha": "88fd47da508cb28a660d9356efeb5c7e75b6aa0a", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -68,6 +68,7 @@ AS = @AS@\n CC = @CC@\n CPP = @CPP@\n CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n CXX_libstdcxx = @CXX_libstdcxx@"}, {"sha": "dfd8a6dec7cfa8d8c84f718f6531cb3aeb381dbd", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -65,16 +65,16 @@ WARN_CXXFLAGS = \\\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\\n \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n-\t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t $(LIBSUPCXX_INCLUDES)\n \n headers = \\\n \tcxxabi.h exception new typeinfo"}, {"sha": "b05feb9692ac3cf611ceb0fa1b5627d3cad39945", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -143,13 +143,13 @@ WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n \n \n headers =  \tcxxabi.h exception new typeinfo"}, {"sha": "9809dd6a201c73eb2cba8c4f54d483464578e9c6", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.59 2000/12/18 18:03:08 bkoz Exp $\n+## $Id: Makefile.am,v 1.60 2000/12/21 01:28:57 gdr Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -62,16 +62,16 @@ WARN_CXXFLAGS = \\\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\\n-\t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n \t$(TOPLEVEL_INCLUDES)\t\n \n base_headers = \\\n@@ -297,6 +297,7 @@ myinstallheaders:\n \tdone; \\\n \tfi;\n \n+\n # We have to handle misc-inst.cc and locale-inst.cc in a special way\n # since we cannot instantiate all classes due to missing definitions\n # for things like vptrs, type_info bits, etc. when using\n@@ -310,7 +311,14 @@ locale-inst.o: locale-inst.cc\n locale-inst.lo: locale-inst.cc\n \t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n \n-# We have to instantiate wstring bits too. . . \n+# Use special rules for the deprecated source files so that they find\n+# deprecated include files.\n+strstream.lo: strstream.cc\n+\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+strstream.o: strstream.cc\n+\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\n+# Make wstring-inst.cc from string-inst.cc\n wstring-inst.o: string-inst.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c -DC=wchar_t $< -o $@\n wstring-inst.lo: string-inst.cc\n@@ -330,6 +338,7 @@ libstdc++.INC: Makefile\n tmp-libstdc++.INC: Makefile\n \techo $(INCLUDES) > $@\n \n+\n # AM_CXXFLAGS needs to be in each subdirectory so that it can be\n # modified in a per-library or per-sub-library way.  Need to manually\n # set this option because CONFIG_CXXFLAGS has to be after"}, {"sha": "6b9cc03882d944fbab11c22157639f554ba1b2af", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -139,13 +139,13 @@ WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n C_INCLUDE_DIR = @C_INCLUDE_DIR@\n-TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+CSTD_INCLUDES = @CSTD_INCLUDES@\n LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n-CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n \n \n base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n@@ -577,7 +577,14 @@ locale-inst.o: locale-inst.cc\n locale-inst.lo: locale-inst.cc\n \t$(LTCXXCOMPILE) -fimplicit-templates -c $<\n \n-# We have to instantiate wstring bits too. . . \n+# Use special rules for the deprecated source files so that they find\n+# deprecated include files.\n+strstream.lo: strstream.cc\n+\t$(LTCXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+strstream.o: strstream.cc\n+\t$(CXXCOMPILE) -I$(GLIBCPP_INCLUDE_DIR)/backward -c $<\n+\n+# Make wstring-inst.cc from string-inst.cc\n wstring-inst.o: string-inst.cc\n \t$(CXXCOMPILE) -fimplicit-templates -c -DC=wchar_t $< -o $@\n wstring-inst.lo: string-inst.cc"}, {"sha": "25550113ad9d7fc8b0906c5807ca895e71d8ce11", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 17, "deletions": 41, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -174,51 +174,28 @@ namespace std\n     (S::iterator, S::iterator, const C*, const C*, forward_iterator_tag);\n \n   template\n-    S::size_type  S::copy(C*, S::size_type, S::size_type) const;\n+    S::size_type S::copy(C*, S::size_type, S::size_type) const;\n \n   template \n-    C* \n-    S::_S_construct<S::iterator>\n-    (S::iterator, S::iterator, const allocator<C>&);\n+    C* S::_S_construct<S::iterator>(S::iterator, S::iterator, \n+\t\t\t\t    const allocator<C>&);\n \n   template \n-    C* \n-    S::_S_construct<S::iterator>\n-    (S::iterator, S::iterator, const allocator<C>&, forward_iterator_tag);\n+    C* S::_S_construct<S::iterator>(S::iterator, S::iterator, \n+\t\t\t\t    const allocator<C>&, forward_iterator_tag);\n \n   template \n-    C* \n-    S::_S_construct<C*>\n-    (C*, C*, const allocator<C>&, forward_iterator_tag);\n+    C* S::_S_construct<C*>(C*, C*, const allocator<C>&, forward_iterator_tag);\n \n   template \n-    C* \n-    S::_S_construct<const C*>\n-    (const C*, const C*, const allocator<C>&, forward_iterator_tag);\n+    C* S::_S_construct<const C*>(const C*, const C*, const allocator<C>&, \n+\t\t\t\t forward_iterator_tag);\n \n   template \n-    C* \n-    S::_S_construct(S::size_type, C, S::allocator_type const&);\n-\n-  // These members are explicitly specialized, and can only be in one\n-  // translation unit or else we get multiple copies. . . \n-#if _GLIBCPP_INSTANTIATING_CHAR\n-  template<>\n-    const char* \n-    string::_S_find(const char* __beg, const char* __end, char __c)\n-    { \n-      const char* __ret = strchr(__beg, __c); \n-      return (__ret ? __ret : __end);\n-    }\n-#elif defined(_GLIBCPP_USE_WCHAR_T)\n-  template<>\n-    const wchar_t* \n-    wstring::_S_find(const wchar_t* __beg, const wchar_t* __end, wchar_t __c)\n-    {\n-      return find_if(__beg, __end, \n-\t\t     _Char_traits_match<wchar_t, traits_type>(__c));\n-    }\n-#endif\n+    C* S::_S_construct(S::size_type, C, S::allocator_type const&);\n+\n+  template\n+    const C* S::_S_find(const C* __beg, const C* __end, C __c);\n \n   template\n     S::size_type S::find(C, S::size_type) const;\n@@ -236,12 +213,12 @@ namespace std\n     S::size_type S::find_last_of(C const*, S::size_type, S::size_type) const;\n \n   template\n-    S::size_type S::find_first_not_of(\n-      C const*, S::size_type, S::size_type) const;\n+    S::size_type \n+    S::find_first_not_of(C const*, S::size_type, S::size_type) const;\n \n   template\n-    S::size_type S::find_last_not_of(\n-      C const*, S::size_type, S::size_type) const;\n+    S::size_type \n+    S::find_last_not_of(C const*, S::size_type, S::size_type) const;\n \n   template\n     S::size_type S::find_last_not_of(C, S::size_type) const;\n@@ -257,8 +234,7 @@ namespace std\n     int S::compare(C const*) const;\n \n   template\n-    int S::compare(\n-      S::size_type, S::size_type, C const*, S::size_type) const;\n+    int S::compare(S::size_type, S::size_type, C const*, S::size_type) const;\n \n   template S operator+(const C*, const S&);\n "}, {"sha": "5731017765502331086b0db1d776e28c4e6aa18e", "filename": "libstdc++-v3/src/strstream.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a40ba78e55a277a4dc5b93f67ad4de0812163a2f/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstrstream.cc?ref=a40ba78e55a277a4dc5b93f67ad4de0812163a2f", "patch": "@@ -17,7 +17,7 @@\n // MAY BE REMOVED in a future standard revision.  You should use the\n // header <sstream> instead.\n \n-#include <backward/strstream.h>\n+#include <strstream.h>\n #include <algorithm>\n #include <new>\n #include <stdlib.h>"}]}