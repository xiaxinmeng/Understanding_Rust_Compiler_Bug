{"sha": "b0ff06daf84434d23e022ee8a3ad2cdc600c1b84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBmZjA2ZGFmODQ0MzRkMjNlMDIyZWU4YTNhZDJjZGM2MDBjMWI4NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-09-29T09:26:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-09-29T09:26:29Z"}, "message": "x86-tune.def (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Enable for generic.\n\n\t* x86-tune.def (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Enable for generic.\n\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Likewise.\n\t(X86_TUNE_FOUR_JUMP_LIMIT): Drop for generic and buldozer.\n\t(X86_TUNE_PAD_RETURNS): Drop for buldozer chips.\n\t(X86_TUNE_AVOID_VECTOR_DECODE): Drop for generic.\n\t(X86_TUNE_REASSOC_FP_TO_PARALLEL): Enable for generic.\n\nFrom-SVN: r203012", "tree": {"sha": "7b2799920e4d1ceb0d62f6a9e236cb1ab35ab02f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b2799920e4d1ceb0d62f6a9e236cb1ab35ab02f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84/comments", "author": null, "committer": null, "parents": [{"sha": "67f6820792cd184297b0b816d3d2a90b834a9254", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f6820792cd184297b0b816d3d2a90b834a9254", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f6820792cd184297b0b816d3d2a90b834a9254"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "9f588596691bce381f4903a63959d159a0b1b12c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0ff06daf84434d23e022ee8a3ad2cdc600c1b84", "patch": "@@ -1,3 +1,12 @@\n+2013-09-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* x86-tune.def (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL): Enable for generic.\n+\t(X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL): Likewise.\n+\t(X86_TUNE_FOUR_JUMP_LIMIT): Drop for generic and buldozer.\n+\t(X86_TUNE_PAD_RETURNS): Drop for buldozer chips.\n+\t(X86_TUNE_AVOID_VECTOR_DECODE): Drop for generic.\n+\t(X86_TUNE_REASSOC_FP_TO_PARALLEL): Enable for generic.\n+\n 2013-09-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* alloc-pool.c, asan.c, auto-inc-dec.c, basic-block.h, bb-reorder.c,"}, {"sha": "b7f597df5d712d99306776e8dda29a552e8574c8", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0ff06daf84434d23e022ee8a3ad2cdc600c1b84/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=b0ff06daf84434d23e022ee8a3ad2cdc600c1b84", "patch": "@@ -115,9 +115,9 @@ DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_AMDFAM10 \n           | m_BDVER | m_GENERIC)\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\",\n-          m_COREI7 | m_AMDFAM10 | m_BDVER | m_BTVER | m_SLM)\n+          m_COREI7 | m_AMDFAM10 | m_BDVER | m_BTVER | m_SLM | m_GENERIC)\n DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\",\n-          m_COREI7 | m_BDVER | m_SLM)\n+          m_COREI7 | m_BDVER | m_SLM | m_GENERIC)\n DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optimal\",\n           m_BDVER)\n /* X86_TUNE_SSE_SPLIT_REGS: Set for machines where the type and dependencies\n@@ -146,8 +146,7 @@ DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\",\n /* X86_TUNE_FOUR_JUMP_LIMIT: Some CPU cores are not able to predict more\n    than 4 branch instructions in the 16 byte window.  */\n DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\",\n-          m_PPRO | m_P4_NOCONA | m_ATOM | m_SLM | m_AMD_MULTIPLE \n-          | m_GENERIC)\n+          m_PPRO | m_P4_NOCONA | m_ATOM | m_SLM | m_ATHLON_K8 | m_AMDFAM10)\n DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\",\n           m_PENT | m_PPRO | m_CORE_ALL | m_ATOM | m_SLM | m_K6_GEODE \n           | m_AMD_MULTIPLE | m_GENERIC)\n@@ -156,13 +155,13 @@ DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\",\n DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\",\n           ~(m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_GENERIC))\n DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\",\n-          m_AMD_MULTIPLE | m_GENERIC)\n+          m_ATHLON_K8 | m_AMDFAM10 | m_GENERIC)\n DEF_TUNE (X86_TUNE_PAD_SHORT_FUNCTION, \"pad_short_function\", m_ATOM)\n DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\",\n           m_PPRO | m_P4_NOCONA | m_CORE_ALL | m_ATOM | m_SLM | m_K6_GEODE\n           | m_ATHLON_K8 | m_GENERIC)\n DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\",\n-          m_K8 | m_GENERIC)\n+          m_K8)\n /* X86_TUNE_PROMOTE_HIMODE_IMUL: Modern CPUs have same latency for HImode\n    and SImode multiply, but 386 and 486 do HImode multiply faster.  */\n DEF_TUNE (X86_TUNE_PROMOTE_HIMODE_IMUL, \"promote_himode_imul\",\n@@ -217,7 +216,7 @@ DEF_TUNE (X86_TUNE_REASSOC_INT_TO_PARALLEL, \"reassoc_int_to_parallel\",\n /* X86_TUNE_REASSOC_FP_TO_PARALLEL: Try to produce parallel computations\n    during reassociation of fp computation.  */\n DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\",\n-          m_ATOM | m_SLM | m_HASWELL | m_BDVER1 | m_BDVER2)\n+          m_ATOM | m_SLM | m_HASWELL | m_BDVER1 | m_BDVER2 | m_GENERIC)\n /* X86_TUNE_GENERAL_REGS_SSE_SPILL: Try to spill general regs to SSE\n    regs instead of memory.  */\n DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\","}]}